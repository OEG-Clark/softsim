{"home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_0.EmbedMatcher.__init__": [[10, 58], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "matcher_0.SupportEncoder", "matcher_0.QueryEncoder", "matcher_0.NTNEncoder", "matcher_0.EmbedMatcher.symbol_emb.weight.data.copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.__init__"], ["\t", "def", "__init__", "(", "self", ",", "embed_dim", ",", "num_symbols", ",", "use_pretrain", "=", "True", ",", "embed", "=", "None", ",", "dropout", "=", "0.5", ",", "batch_size", "=", "64", ",", "process_steps", "=", "4", ",", "finetune", "=", "False", ",", "aggregate", "=", "'max'", ")", ":", "\n", "\t\t", "super", "(", "EmbedMatcher", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "pad_idx", "=", "num_symbols", "\n", "self", ".", "symbol_emb", "=", "nn", ".", "Embedding", "(", "num_symbols", "+", "1", ",", "embed_dim", ",", "padding_idx", "=", "num_symbols", ")", "\n", "self", ".", "aggregate", "=", "aggregate", "\n", "self", ".", "num_symbols", "=", "num_symbols", "\n", "self", ".", "few", "=", "4", "\n", "\n", "self", ".", "gnn_w", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "#self.gnn_b = nn.Parameter(torch.FloatTensor(self.embed_dim))", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "set_rnn", "=", "nn", ".", "LSTM", "(", "2", "*", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ",", "1", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "match_rnn", "=", "nn", ".", "LSTM", "(", "4", "*", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ",", "1", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "match_MLP", "=", "nn", ".", "Linear", "(", "4", "*", "self", ".", "embed_dim", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "#self.neigh_rnn = nn.LSTM(self.embed_dim, 50, 1, bidirectional = True)", "\n", "\n", "self", ".", "neigh_att_W", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "neigh_att_u", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "1", ")", "\n", "\n", "self", ".", "set_att_W", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "set_att_u", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "1", ")", "\n", "\n", "self", ".", "aggre_match_att_W", "=", "nn", ".", "Linear", "(", "4", "*", "self", ".", "embed_dim", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "self", ".", "aggre_match_att_u", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "embed_dim", ",", "1", ")", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "2", "*", "self", ".", "embed_dim", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "gnn_w", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "neigh_att_W", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "neigh_att_u", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "set_att_W", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "set_att_u", ".", "weight", ")", "\n", "#init.constant_(self.gnn_b, 0)", "\n", "\n", "#print (embed[0])", "\n", "if", "use_pretrain", ":", "\n", "\t\t\t", "self", ".", "symbol_emb", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "embed", ")", ")", "\n", "if", "not", "finetune", ":", "\n", "\t\t\t\t", "self", ".", "symbol_emb", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "d_model", "=", "self", ".", "embed_dim", "*", "2", "\n", "self", ".", "support_encoder", "=", "SupportEncoder", "(", "d_model", ",", "2", "*", "d_model", ",", "dropout", ")", "\n", "self", ".", "query_encoder", "=", "QueryEncoder", "(", "d_model", ",", "process_steps", ")", "\n", "self", ".", "NTNEncoder", "=", "NTNEncoder", "(", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_0.EmbedMatcher.aggre_match": [[92, 112], ["support.view.view.view", "support.view.view.expand", "query.expand().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "matcher_0.EmbedMatcher.match_rnn", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "query.size", "query.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "query.size"], "methods", ["None"], ["", "def", "aggre_match", "(", "self", ",", "support", ",", "query", ")", ":", "\n", "\t\t", "support", "=", "support", ".", "view", "(", "3", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "support_new", "=", "support", ".", "expand", "(", "query", ".", "size", "(", ")", "[", "0", "]", ",", "3", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n", "query_new", "=", "query", ".", "expand", "(", "3", ",", "query", ".", "size", "(", ")", "[", "0", "]", ",", "2", "*", "self", ".", "embed_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "concat", "=", "torch", ".", "cat", "(", "(", "support_new", ",", "query_new", ")", ",", "dim", "=", "-", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "#print concat.size()", "\n", "\n", "#concat = self.aggre_match_att_W(concat).tanh()", "\n", "#att_w = self.aggre_match_att_u(concat)", "\n", "#att_w = self.softmax(att_w).view(-1, 3)", "\n", "#att_embed = torch.matmul(att_w, support).view(-1, 1, 2*self.embed_dim)", "\n", "#query = query.view(-1, 2*self.embed_dim, 1)", "\n", "concat", ",", "concat_state", "=", "self", ".", "match_rnn", "(", "concat", ")", "\n", "concat", "=", "torch", ".", "mean", "(", "concat", ",", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n", "#score = torch.bmm(att_embed, concat).squeeze()", "\n", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_0.EmbedMatcher.MLP_match": [[114, 121], ["support.expand.expand.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "matcher_0.EmbedMatcher.match_MLP().relu", "query.size", "matcher_0.EmbedMatcher.match_MLP"], "methods", ["None"], ["", "def", "MLP_match", "(", "self", ",", "support", ",", "query", ")", ":", "\n", "\t\t", "support", "=", "support", ".", "expand", "(", "query", ".", "size", "(", ")", "[", "0", "]", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "concat", "=", "torch", ".", "cat", "(", "(", "support", ",", "query", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "concat", "=", "self", ".", "match_MLP", "(", "concat", ")", ".", "relu", "(", ")", "\n", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_0.EmbedMatcher.forward": [[193, 241], ["matcher_0.EmbedMatcher.symbol_emb", "matcher_0.EmbedMatcher.symbol_emb", "matcher_0.EmbedMatcher.symbol_emb", "matcher_0.EmbedMatcher.symbol_emb", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "[].view", "support_g[].view", "matcher_0.EmbedMatcher.query_encoder", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "support_g.size", "query_g.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "support_g[].view.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query", ",", "support", ")", ":", "\n", "\t\t", "query_left", "=", "self", ".", "symbol_emb", "(", "query", "[", ":", ",", "0", "]", ")", "\n", "query_right", "=", "self", ".", "symbol_emb", "(", "query", "[", ":", ",", "1", "]", ")", "\n", "\n", "support_left", "=", "self", ".", "symbol_emb", "(", "support", "[", ":", ",", "0", "]", ")", "\n", "support_right", "=", "self", ".", "symbol_emb", "(", "support", "[", ":", ",", "1", "]", ")", "\n", "\n", "query_neighbor", "=", "torch", ".", "cat", "(", "(", "query_left", ",", "query_right", ")", ",", "dim", "=", "-", "1", ")", "# tanh", "\n", "support_neighbor", "=", "torch", ".", "cat", "(", "(", "support_left", ",", "support_right", ")", ",", "dim", "=", "-", "1", ")", "# tanh", "\n", "\n", "support", "=", "support_neighbor", "\n", "query", "=", "query_neighbor", "\n", "\n", "support_g", "=", "support", "\n", "query_g", "=", "query", "\n", "\n", "# #support_g = self.support_encoder(support) # 1 * 100", "\n", "# #query_g = self.support_encoder(query)", "\n", "\n", "# mean pooling for reference set", "\n", "# #support_g = torch.mean(support, dim=0, keepdim=True)", "\n", "# support_g = torch.mean(support_g, dim=0, keepdim=True)", "\n", "# #support_g = torch.max(support_g, dim=0, keepdim=True)[0]", "\n", "# #support_g = torch.median(support_g, dim=0, keepdim=True)[0]", "\n", "\n", "# #query_f = self.query_encoder(support_g, query_g) # 128 * 100", "\n", "\n", "# #support_g = support", "\n", "# query_f = query", "\n", "# #cosine similarity", "\n", "# matching_scores = torch.matmul(query_f, support_g.t()).squeeze()", "\n", "\n", "# return matching_scores", "\n", "\n", "# max ", "\n", "\n", "matching_scores_list", "=", "torch", ".", "zeros", "(", "[", "self", ".", "few", ",", "query_g", ".", "size", "(", ")", "[", "0", "]", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "for", "i", "in", "range", "(", "support_g", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "\t\t\t", "support_g_temp", "=", "support_g", "[", "i", "]", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "query_f", "=", "self", ".", "query_encoder", "(", "support_g_temp", ",", "query_g", ")", "# 128 * 100", "\n", "\n", "matching_scores", "=", "torch", ".", "matmul", "(", "query_f", ",", "support_g_temp", ".", "t", "(", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "matching_scores_list", "[", "i", "]", "=", "matching_scores", "\n", "\n", "", "matching_scores", "=", "torch", ".", "max", "(", "matching_scores_list", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "view", "(", "-", "1", ")", "\n", "\n", "return", "matching_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_0.LayerNormalization.__init__": [[246, 252], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.__init__"], ["def", "__init__", "(", "self", ",", "d_hid", ",", "eps", "=", "1e-3", ")", ":", "\n", "\t\t", "super", "(", "LayerNormalization", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "a_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "d_hid", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "b_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "d_hid", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_0.LayerNormalization.forward": [[253, 263], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "z.size", "matcher_0.LayerNormalization.b_2.expand_as", "torch.mean.expand_as", "torch.mean.expand_as", "torch.mean.expand_as", "torch.mean.expand_as", "torch.std.expand_as", "torch.std.expand_as", "torch.std.expand_as", "torch.std.expand_as", "matcher_0.LayerNormalization.a_2.expand_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "\t\t", "if", "z", ".", "size", "(", "1", ")", "==", "1", ":", "\n", "\t\t\t", "return", "z", "\n", "\n", "", "mu", "=", "torch", ".", "mean", "(", "z", ",", "keepdim", "=", "True", ",", "dim", "=", "-", "1", ")", "\n", "sigma", "=", "torch", ".", "std", "(", "z", ",", "keepdim", "=", "True", ",", "dim", "=", "-", "1", ")", "\n", "ln_out", "=", "(", "z", "-", "mu", ".", "expand_as", "(", "z", ")", ")", "/", "(", "sigma", ".", "expand_as", "(", "z", ")", "+", "self", ".", "eps", ")", "\n", "ln_out", "=", "ln_out", "*", "self", ".", "a_2", ".", "expand_as", "(", "ln_out", ")", "+", "self", ".", "b_2", ".", "expand_as", "(", "ln_out", ")", "\n", "\n", "return", "ln_out", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_0.SupportEncoder.__init__": [[267, 278], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "matcher_0.LayerNormalization", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "dropout", "=", "0.1", ")", ":", "\n", "\t\t", "super", "(", "SupportEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_inner", ")", "\n", "self", ".", "proj2", "=", "nn", ".", "Linear", "(", "d_inner", ",", "d_model", ")", "\n", "self", ".", "layer_norm", "=", "LayerNormalization", "(", "d_model", ")", "\n", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "proj1", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "proj2", ".", "weight", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_0.SupportEncoder.forward": [[279, 284], ["matcher_0.SupportEncoder.relu", "matcher_0.SupportEncoder.dropout", "matcher_0.SupportEncoder.layer_norm", "matcher_0.SupportEncoder.proj1", "matcher_0.SupportEncoder.proj2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "residual", "=", "x", "\n", "output", "=", "self", ".", "relu", "(", "self", ".", "proj1", "(", "x", ")", ")", "\n", "output", "=", "self", ".", "dropout", "(", "self", ".", "proj2", "(", "output", ")", ")", "\n", "return", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_0.QueryEncoder.__init__": [[287, 292], ["torch.Module.__init__", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.__init__"], ["\t", "def", "__init__", "(", "self", ",", "input_dim", ",", "process_step", "=", "4", ")", ":", "\n", "\t\t", "super", "(", "QueryEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "process_step", "=", "process_step", "\n", "self", ".", "process", "=", "nn", ".", "LSTMCell", "(", "input_dim", ",", "2", "*", "input_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_0.QueryEncoder.forward": [[293, 326], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "range", "query.size", "matcher_0.QueryEncoder.process", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "support.size", "query.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "support.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "support", ",", "query", ")", ":", "\n", "\t\t", "'''\n\t\tsupport: (few, support_dim)\n\t\tquery: (batch_size, query_dim)\n\t\tsupport_dim = query_dim\n\n\t\treturn:\n\t\t(batch_size, query_dim)\n\t\t'''", "\n", "assert", "support", ".", "size", "(", ")", "[", "1", "]", "==", "query", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "if", "self", ".", "process_step", "==", "0", ":", "\n", "\t\t\t", "return", "query", "\n", "\n", "", "batch_size", "=", "query", ".", "size", "(", ")", "[", "0", "]", "\n", "h_r", "=", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "2", "*", "self", ".", "input_dim", ")", ")", ".", "cuda", "(", ")", "\n", "c", "=", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "2", "*", "self", ".", "input_dim", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# h_r = Variable(torch.zeros(batch_size, 2*self.input_dim))", "\n", "# c = Variable(torch.zeros(batch_size, 2*self.input_dim))", "\n", "\n", "#print query.size()", "\n", "\n", "for", "step", "in", "range", "(", "self", ".", "process_step", ")", ":", "\n", "\t\t\t", "h_r_", ",", "c", "=", "self", ".", "process", "(", "query", ",", "(", "h_r", ",", "c", ")", ")", "\n", "h", "=", "query", "+", "h_r_", "[", ":", ",", ":", "self", ".", "input_dim", "]", "# (batch_size, query_dim)", "\n", "attn", "=", "F", ".", "softmax", "(", "torch", ".", "matmul", "(", "h", ",", "support", ".", "t", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "attn", ",", "support", ")", "# (batch_size, support_dim)", "\n", "h_r", "=", "torch", ".", "cat", "(", "(", "h", ",", "r", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# return h_r_[:, :self.input_dim]", "\n", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_0.NTNEncoder.__init__": [[329, 339], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.__init__"], ["\t", "def", "__init__", "(", "self", ",", "d_model", ")", ":", "\n", "\t\t", "super", "(", "NTNEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ntn", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "5", ",", "d_model", ",", "d_model", ")", ")", "\n", "self", ".", "ntn_u", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "5", ",", "1", ")", ")", "\n", "self", ".", "dimen", "=", "d_model", "\n", "#self.batch = batch_s", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "ntn", ")", "\n", "#init.normal_(self.ntn)", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "ntn_u", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_0.NTNEncoder.forward": [[340, 350], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "support_g.transpose().view.transpose().view.transpose().view", "query_g.view.view.view", "torch.matmul.view", "torch.matmul.view", "torch.matmul.view", "torch.matmul.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "support_g.transpose().view.transpose().view.transpose", "support_g.transpose().view.transpose().view.transpose", "query_g.view.view.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "support_g", ",", "query_g", ")", ":", "\n", "\t\t", "support_g", "=", "torch", ".", "matmul", "(", "self", ".", "ntn", ",", "support_g", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n", "support_g", "=", "support_g", ".", "transpose", "(", "1", ",", "2", ")", ".", "view", "(", "5", ",", "1", ",", "3", ",", "self", ".", "dimen", ")", "\n", "query_g", "=", "query_g", ".", "view", "(", "query_g", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "dimen", ",", "1", ")", "\n", "score", "=", "(", "torch", ".", "matmul", "(", "support_g", ",", "query_g", ")", "/", "100.0", ")", ".", "tanh", "(", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "score", "=", "score", ".", "view", "(", "score", ".", "size", "(", ")", "[", "0", "]", ",", "5", ",", "3", ")", "\n", "score", ",", "indices", "=", "torch", ".", "max", "(", "score", ",", "2", ")", "\n", "score", "=", "torch", ".", "matmul", "(", "score", ",", "self", ".", "ntn_u", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.__init__": [[21, 74], ["object.__init__", "vars().items", "filter", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "json.load", "len", "main.Model_Run.build_graph", "json.load", "collections.defaultdict", "json.load", "setattr", "main.Model_Run.load_symbol2id", "main.Model_Run.load_embed", "len", "matcher_lstmae.EmbedMatcher_LSTMAE", "matcher_0.EmbedMatcher", "main.Model_Run.matcher.cuda", "main.Model_Run.matcher.parameters", "open", "main.Model_Run.ent2id.keys", "open", "open", "vars", "main.Model_Run.symbol2id.keys"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.__init__", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.build_graph", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load_symbol2id", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load_embed"], ["\t", "def", "__init__", "(", "self", ",", "arg", ")", ":", "\n", "\t\t", "super", "(", "Model_Run", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "k", ",", "v", "in", "vars", "(", "arg", ")", ".", "items", "(", ")", ":", "setattr", "(", "self", ",", "k", ",", "v", ")", "\n", "\n", "self", ".", "meta", "=", "not", "self", ".", "no_meta", "\n", "self", ".", "cuda", "=", "arg", ".", "cuda", "\n", "\n", "if", "self", ".", "random_embed", ":", "\n", "\t\t\t", "use_pretrain", "=", "False", "\n", "", "else", ":", "\n", "\t\t\t", "use_pretrain", "=", "True", "\n", "\n", "#print (\"loading symbol id and pretrain embedding...\")", "\n", "", "if", "self", ".", "test", "or", "self", ".", "random_embed", ":", "\n", "\t\t\t", "self", ".", "load_symbol2id", "(", ")", "\n", "use_pretrain", "=", "False", "\n", "", "else", ":", "\n", "# load pretrained embedding", "\n", "\t\t\t", "self", ".", "load_embed", "(", ")", "\n", "\n", "", "self", ".", "num_symbols", "=", "len", "(", "self", ".", "symbol2id", ".", "keys", "(", ")", ")", "-", "1", "# one for 'PAD'", "\n", "self", ".", "pad_id", "=", "self", ".", "num_symbols", "\n", "self", ".", "use_pretrain", "=", "use_pretrain", "\n", "self", ".", "set_aggregator", "=", "args", ".", "set_aggregator", "\n", "self", ".", "embed_dim", "=", "args", ".", "embed_dim", "\n", "\n", "if", "self", ".", "set_aggregator", "==", "'lstmae'", ":", "\n", "\t\t\t", "self", ".", "matcher", "=", "EmbedMatcher_LSTMAE", "(", "self", ".", "embed_dim", ",", "self", ".", "num_symbols", ",", "use_pretrain", "=", "self", ".", "use_pretrain", ",", "\n", "embed", "=", "self", ".", "symbol2vec", ",", "dropout", "=", "self", ".", "dropout", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "process_steps", "=", "self", ".", "process_steps", ",", "finetune", "=", "self", ".", "fine_tune", ",", "\n", "aggregate", "=", "self", ".", "aggregator", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "matcher", "=", "EmbedMatcher", "(", "self", ".", "embed_dim", ",", "self", ".", "num_symbols", ",", "use_pretrain", "=", "self", ".", "use_pretrain", ",", "\n", "embed", "=", "self", ".", "symbol2vec", ",", "dropout", "=", "self", ".", "dropout", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "process_steps", "=", "self", ".", "process_steps", ",", "finetune", "=", "self", ".", "fine_tune", ",", "\n", "aggregate", "=", "self", ".", "aggregator", ")", "\n", "\n", "", "if", "self", ".", "cuda", ":", "\n", "\t\t\t", "self", ".", "matcher", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "batch_nums", "=", "0", "\n", "self", ".", "parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "matcher", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optim", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "self", ".", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "self", ".", "optim", ",", "milestones", "=", "[", "10000", "]", ",", "gamma", "=", "0.25", ")", "\n", "\n", "self", ".", "ent2id", "=", "json", ".", "load", "(", "open", "(", "self", ".", "datapath", "+", "'/ent2ids'", ")", ")", "\n", "self", ".", "num_ents", "=", "len", "(", "self", ".", "ent2id", ".", "keys", "(", ")", ")", "\n", "\n", "degrees", "=", "self", ".", "build_graph", "(", "max_", "=", "self", ".", "max_neighbor", ")", "\n", "self", ".", "rel2candidates", "=", "json", ".", "load", "(", "open", "(", "self", ".", "datapath", "+", "'/rel2candidates_all.json'", ")", ")", "\n", "# load answer dict", "\n", "self", ".", "e1rel_e2", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "e1rel_e2", "=", "json", ".", "load", "(", "open", "(", "self", ".", "datapath", "+", "'/e1rel_e2.json'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load_symbol2id": [[76, 94], ["json.load", "json.load", "json.load.keys", "json.load.keys", "open", "open"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load"], ["", "def", "load_symbol2id", "(", "self", ")", ":", "\n", "\t\t", "symbol_id", "=", "{", "}", "\n", "rel2id", "=", "json", ".", "load", "(", "open", "(", "self", ".", "datapath", "+", "'/relation2ids'", ")", ")", "\n", "ent2id", "=", "json", ".", "load", "(", "open", "(", "self", ".", "datapath", "+", "'/ent2ids'", ")", ")", "\n", "i", "=", "0", "\n", "for", "key", "in", "rel2id", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "if", "key", "not", "in", "[", "''", ",", "'OOV'", "]", ":", "\n", "\t\t\t\t", "symbol_id", "[", "key", "]", "=", "i", "\n", "i", "+=", "1", "\n", "\n", "", "", "for", "key", "in", "ent2id", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "if", "key", "not", "in", "[", "''", ",", "'OOV'", "]", ":", "\n", "\t\t\t\t", "symbol_id", "[", "key", "]", "=", "i", "\n", "i", "+=", "1", "\n", "\n", "", "", "symbol_id", "[", "'PAD'", "]", "=", "i", "\n", "self", ".", "symbol2id", "=", "symbol_id", "\n", "self", ".", "symbol2vec", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load_embed": [[96, 142], ["json.load", "json.load", "print", "open", "open", "numpy.loadtxt", "numpy.loadtxt", "json.load.keys", "json.load.keys", "numpy.array.append", "numpy.array", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "len", "len", "list", "len", "json.load.keys", "json.load.keys", "numpy.array.append", "numpy.array.append", "numpy.zeros", "symbol_id.keys", "list", "list"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load"], ["", "def", "load_embed", "(", "self", ")", ":", "\n", "\t\t", "symbol_id", "=", "{", "}", "\n", "rel2id", "=", "json", ".", "load", "(", "open", "(", "self", ".", "datapath", "+", "'/relation2ids'", ")", ")", "\n", "ent2id", "=", "json", ".", "load", "(", "open", "(", "self", ".", "datapath", "+", "'/ent2ids'", ")", ")", "\n", "\n", "print", "(", "\"loading pre-trained embedding...\"", ")", "\n", "if", "self", ".", "embed_model", "in", "[", "'DistMult'", ",", "'TransE'", ",", "'ComplEx'", ",", "'RESCAL'", "]", ":", "\n", "\t\t\t", "ent_embed", "=", "np", ".", "loadtxt", "(", "self", ".", "datapath", "+", "'/embed/entity2vec.'", "+", "self", ".", "embed_model", ")", "\n", "rel_embed", "=", "np", ".", "loadtxt", "(", "self", ".", "datapath", "+", "'/embed/relation2vec.'", "+", "self", ".", "embed_model", ")", "\n", "\n", "#print (ent_embed[0])", "\n", "\n", "if", "self", ".", "embed_model", "==", "'ComplEx'", ":", "\n", "# normalize the complex embeddings", "\n", "\t\t\t\t", "ent_mean", "=", "np", ".", "mean", "(", "ent_embed", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "ent_std", "=", "np", ".", "std", "(", "ent_embed", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "rel_mean", "=", "np", ".", "mean", "(", "rel_embed", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "rel_std", "=", "np", ".", "std", "(", "rel_embed", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "eps", "=", "1e-3", "\n", "ent_embed", "=", "(", "ent_embed", "-", "ent_mean", ")", "/", "(", "ent_std", "+", "eps", ")", "\n", "rel_embed", "=", "(", "rel_embed", "-", "rel_mean", ")", "/", "(", "rel_std", "+", "eps", ")", "\n", "\n", "", "assert", "ent_embed", ".", "shape", "[", "0", "]", "==", "len", "(", "ent2id", ".", "keys", "(", ")", ")", "\n", "assert", "rel_embed", ".", "shape", "[", "0", "]", "==", "len", "(", "rel2id", ".", "keys", "(", ")", ")", "\n", "\n", "i", "=", "0", "\n", "embeddings", "=", "[", "]", "\n", "for", "key", "in", "rel2id", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t", "if", "key", "not", "in", "[", "''", ",", "'OOV'", "]", ":", "\n", "\t\t\t\t\t", "symbol_id", "[", "key", "]", "=", "i", "\n", "i", "+=", "1", "\n", "embeddings", ".", "append", "(", "list", "(", "rel_embed", "[", "rel2id", "[", "key", "]", ",", ":", "]", ")", ")", "\n", "\n", "", "", "for", "key", "in", "ent2id", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t", "if", "key", "not", "in", "[", "''", ",", "'OOV'", "]", ":", "\n", "\t\t\t\t\t", "symbol_id", "[", "key", "]", "=", "i", "\n", "i", "+=", "1", "\n", "embeddings", ".", "append", "(", "list", "(", "ent_embed", "[", "ent2id", "[", "key", "]", ",", ":", "]", ")", ")", "\n", "\n", "", "", "symbol_id", "[", "'PAD'", "]", "=", "i", "\n", "embeddings", ".", "append", "(", "list", "(", "np", ".", "zeros", "(", "(", "rel_embed", ".", "shape", "[", "1", "]", ",", ")", ")", ")", ")", "\n", "embeddings", "=", "np", ".", "array", "(", "embeddings", ")", "\n", "assert", "embeddings", ".", "shape", "[", "0", "]", "==", "len", "(", "symbol_id", ".", "keys", "(", ")", ")", "\n", "\n", "self", ".", "symbol2id", "=", "symbol_id", "\n", "self", ".", "symbol2vec", "=", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.build_graph": [[144, 172], ["collections.defaultdict", "collections.defaultdict", "main.Model_Run.ent2id.items", "open", "f.readlines", "tqdm.tqdm.tqdm", "len", "len", "enumerate", "line.rstrip().split", "main.Model_Run.e1_rele2[].append", "main.Model_Run.e1_rele2[].append", "len", "numpy.ones", "line.rstrip"], "methods", ["None"], ["", "", "def", "build_graph", "(", "self", ",", "max_", "=", "50", ")", ":", "\n", "\t\t", "self", ".", "connections", "=", "(", "np", ".", "ones", "(", "(", "self", ".", "num_ents", ",", "max_", ",", "2", ")", ")", "*", "self", ".", "pad_id", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "e1_rele2", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "e1_degrees", "=", "defaultdict", "(", "int", ")", "\n", "\n", "with", "open", "(", "self", ".", "datapath", "+", "'/path_graph'", ")", "as", "f", ":", "\n", "\t\t\t", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "tqdm", "(", "lines", ")", ":", "\n", "\t\t\t\t", "e1", ",", "rel", ",", "e2", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", ")", "\n", "self", ".", "e1_rele2", "[", "e1", "]", ".", "append", "(", "(", "self", ".", "symbol2id", "[", "rel", "]", ",", "self", ".", "symbol2id", "[", "e2", "]", ")", ")", "\n", "self", ".", "e1_rele2", "[", "e2", "]", ".", "append", "(", "(", "self", ".", "symbol2id", "[", "rel", "+", "'_inv'", "]", ",", "self", ".", "symbol2id", "[", "e1", "]", ")", ")", "\n", "\n", "", "", "degrees", "=", "{", "}", "\n", "for", "ent", ",", "id_", "in", "self", ".", "ent2id", ".", "items", "(", ")", ":", "\n", "\t\t\t", "neighbors", "=", "self", ".", "e1_rele2", "[", "ent", "]", "\n", "if", "len", "(", "neighbors", ")", ">", "max_", ":", "\n", "\t\t\t\t", "neighbors", "=", "neighbors", "[", ":", "max_", "]", "\n", "# degrees.append(len(neighbors)) ", "\n", "", "degrees", "[", "ent", "]", "=", "len", "(", "neighbors", ")", "\n", "self", ".", "e1_degrees", "[", "id_", "]", "=", "len", "(", "neighbors", ")", "# add one for self conn", "\n", "for", "idx", ",", "_", "in", "enumerate", "(", "neighbors", ")", ":", "\n", "\t\t\t\t", "self", ".", "connections", "[", "id_", ",", "idx", ",", "0", "]", "=", "_", "[", "0", "]", "\n", "self", ".", "connections", "[", "id_", ",", "idx", ",", "1", "]", "=", "_", "[", "1", "]", "\n", "\n", "# json.dump(degrees, open(self.dataset + '/degrees', 'w'))", "\n", "# assert 1==2", "\n", "\n", "", "", "return", "degrees", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.data_analysis": [[174, 179], ["data_process.candidate_triples", "print"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.data_process.candidate_triples"], ["", "def", "data_analysis", "(", "self", ")", ":", "\n", "#data_process.rel_triples_dis(self.datapath)", "\n", "#data_process.build_vocab(self.datapath)", "\n", "\t\t", "data_process", ".", "candidate_triples", "(", "self", ".", "datapath", ")", "\n", "print", "(", "\"data analysis finish\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.get_meta": [[181, 194], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.stack", "numpy.stack", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.stack", "numpy.stack"], "methods", ["None"], ["", "def", "get_meta", "(", "self", ",", "left", ",", "right", ")", ":", "\n", "\t\t", "if", "self", ".", "cuda", ":", "\n", "\t\t\t", "left_connections", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "np", ".", "stack", "(", "[", "self", ".", "connections", "[", "_", ",", ":", ",", ":", "]", "for", "_", "in", "left", "]", ",", "axis", "=", "0", ")", ")", ")", ".", "cuda", "(", ")", "\n", "left_degrees", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "[", "self", ".", "e1_degrees", "[", "_", "]", "for", "_", "in", "left", "]", ")", ")", ".", "cuda", "(", ")", "\n", "right_connections", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "np", ".", "stack", "(", "[", "self", ".", "connections", "[", "_", ",", ":", ",", ":", "]", "for", "_", "in", "right", "]", ",", "axis", "=", "0", ")", ")", ")", ".", "cuda", "(", ")", "\n", "right_degrees", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "[", "self", ".", "e1_degrees", "[", "_", "]", "for", "_", "in", "right", "]", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "left_connections", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "np", ".", "stack", "(", "[", "self", ".", "connections", "[", "_", ",", ":", ",", ":", "]", "for", "_", "in", "left", "]", ",", "axis", "=", "0", ")", ")", ")", "\n", "left_degrees", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "[", "self", ".", "e1_degrees", "[", "_", "]", "for", "_", "in", "left", "]", ")", ")", "\n", "right_connections", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "np", ".", "stack", "(", "[", "self", ".", "connections", "[", "_", ",", ":", ",", ":", "]", "for", "_", "in", "right", "]", ",", "axis", "=", "0", ")", ")", ")", "\n", "right_degrees", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "[", "self", ".", "e1_degrees", "[", "_", "]", "for", "_", "in", "right", "]", ")", ")", "\n", "\n", "", "return", "(", "left_connections", ",", "left_degrees", ",", "right_connections", ",", "right_degrees", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.save": [[196, 200], ["torch.save", "torch.save", "torch.save", "torch.save", "main.Model_Run.matcher.state_dict"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.save", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.save", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.save", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.save"], ["", "def", "save", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "\t\t", "if", "not", "path", ":", "\n", "\t\t\t", "path", "=", "self", ".", "save_path", "\n", "", "torch", ".", "save", "(", "self", ".", "matcher", ".", "state_dict", "(", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load": [[202, 204], ["main.Model_Run.matcher.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load"], ["", "def", "load", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "matcher", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.train": [[206, 286], ["print", "open", "open", "open", "open", "data_generator.train_generate", "main.Model_Run.get_meta", "main.Model_Run.get_meta", "main.Model_Run.get_meta", "torch.relu().mean", "torch.relu().mean", "main.Model_Run.optim.zero_grad", "torch.relu().mean.backward", "main.Model_Run.optim.step", "main.Model_Run.scheduler.step", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "print", "print", "main.Model_Run.eval", "open.write", "open.write", "open.write", "open.write", "main.Model_Run.save", "main.Model_Run.save", "open.close", "open.close", "open.close", "open.close", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "main.Model_Run.matcher", "main.Model_Run.matcher", "main.Model_Run.matcher", "main.Model_Run.matcher", "main.Model_Run.matcher", "main.Model_Run.matcher", "main.Model_Run.matcher", "main.Model_Run.matcher", "torch.relu", "torch.relu", "main.Model_Run.save", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "str", "str", "str", "str", "str", "str", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.data_generator.train_generate", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.get_meta", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.get_meta", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.get_meta", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.eval", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.save", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.save", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.save"], ["", "def", "train", "(", "self", ")", ":", "\n", "\t\t", "print", "(", "'start training...'", ")", "\n", "best_hits10", "=", "0.0", "\n", "hits10_file", "=", "open", "(", "self", ".", "datapath", "+", "\"_hits10.txt\"", ",", "\"w\"", ")", "\n", "hits5_file", "=", "open", "(", "self", ".", "datapath", "+", "\"_hits5.txt\"", ",", "\"w\"", ")", "\n", "hits1_file", "=", "open", "(", "self", ".", "datapath", "+", "\"_hits1.txt\"", ",", "\"w\"", ")", "\n", "mrr_file", "=", "open", "(", "self", ".", "datapath", "+", "\"_mrr.txt\"", ",", "\"w\"", ")", "\n", "for", "data", "in", "train_generate", "(", "self", ".", "datapath", ",", "self", ".", "batch_size", ",", "self", ".", "few", ",", "self", ".", "symbol2id", ",", "self", ".", "ent2id", ",", "self", ".", "e1rel_e2", ")", ":", "\n", "\t\t\t", "support", ",", "query", ",", "false", ",", "support_left", ",", "support_right", ",", "query_left", ",", "query_right", ",", "false_left", ",", "false_right", "=", "data", "\n", "\n", "support_meta", "=", "self", ".", "get_meta", "(", "support_left", ",", "support_right", ")", "\n", "query_meta", "=", "self", ".", "get_meta", "(", "query_left", ",", "query_right", ")", "\n", "false_meta", "=", "self", ".", "get_meta", "(", "false_left", ",", "false_right", ")", "\n", "\n", "if", "self", ".", "cuda", ":", "\n", "\t\t\t\t", "support", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "support", ")", ")", ".", "cuda", "(", ")", "\n", "query", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "query", ")", ")", ".", "cuda", "(", ")", "\n", "false", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "false", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "support", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "support", ")", ")", "\n", "query", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "query", ")", ")", "\n", "false", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "false", ")", ")", "\n", "\n", "", "if", "self", ".", "no_meta", ":", "\n", "\t\t\t\t", "if", "self", ".", "set_aggregator", "==", "'lstmae'", ":", "\n", "\t\t\t\t\t", "query_scores", ",", "ae_loss", "=", "self", ".", "matcher", "(", "query", ",", "support", ")", "\n", "false_scores", ",", "ae_loss", "=", "self", ".", "matcher", "(", "false", ",", "support", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "query_scores", "=", "self", ".", "matcher", "(", "query", ",", "support", ")", "\n", "false_scores", "=", "self", ".", "matcher", "(", "false", ",", "support", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t", "if", "self", ".", "set_aggregator", "==", "'lstmae'", ":", "\n", "\t\t\t\t\t", "query_scores", ",", "ae_loss", ",", "support_g_embed", ",", "query_g_embed", "=", "self", ".", "matcher", "(", "query", ",", "support", ",", "query_meta", ",", "support_meta", ")", "\n", "false_scores", ",", "ae_loss", ",", "support_g_embed", ",", "query_g_embed", "=", "self", ".", "matcher", "(", "false", ",", "support", ",", "false_meta", ",", "support_meta", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "query_scores", ",", "query_g_embed", "=", "self", ".", "matcher", "(", "query", ",", "support", ",", "query_meta", ",", "support_meta", ")", "\n", "false_scores", ",", "query_g_embed", "=", "self", ".", "matcher", "(", "false", ",", "support", ",", "false_meta", ",", "support_meta", ")", "\n", "\n", "", "", "margin_", "=", "query_scores", "-", "false_scores", "\n", "loss", "=", "F", ".", "relu", "(", "self", ".", "margin", "-", "margin_", ")", ".", "mean", "(", ")", "\n", "\n", "# loss = - F.logsigmoid(query_scores - false_scores)", "\n", "# loss = loss.sum() / len(query_scores)", "\n", "\n", "#return loss", "\n", "\n", "if", "self", ".", "set_aggregator", "==", "'lstmae'", ":", "\n", "\t\t\t\t", "loss", "+=", "args", ".", "ae_weight", "*", "ae_loss", "\n", "\n", "", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "optim", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "batch_nums", "%", "self", ".", "eval_every", "==", "0", ":", "\n", "\t\t\t\t", "print", "(", "'batch num: '", "+", "str", "(", "self", ".", "batch_nums", ")", ")", "\n", "print", "(", "'loss: '", "+", "str", "(", "loss", ")", ")", "\n", "hits10", ",", "hits5", ",", "hits1", ",", "mrr", "=", "self", ".", "eval", "(", "meta", "=", "self", ".", "meta", ")", "\n", "#print (hits10)", "\n", "hits10_file", ".", "write", "(", "str", "(", "(", "\"%.3f\"", "%", "hits10", ")", ")", "+", "\"\\n\"", ")", "\n", "hits5_file", ".", "write", "(", "str", "(", "(", "\"%.3f\"", "%", "hits5", ")", ")", "+", "\"\\n\"", ")", "\n", "hits1_file", ".", "write", "(", "str", "(", "(", "\"%.3f\"", "%", "hits1", ")", ")", "+", "\"\\n\"", ")", "\n", "mrr_file", ".", "write", "(", "str", "(", "(", "\"%.3f\"", "%", "mrr", ")", ")", "+", "\"\\n\"", ")", "\n", "\n", "self", ".", "save", "(", ")", "\n", "\n", "if", "hits10", ">", "best_hits10", ":", "\n", "\t\t\t\t\t", "self", ".", "save", "(", "self", ".", "save_path", "+", "'_bestHits10'", ")", "\n", "best_hits10", "=", "hits10", "\n", "\n", "", "", "self", ".", "batch_nums", "+=", "1", "\n", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "if", "self", ".", "batch_nums", "==", "self", ".", "max_batches", ":", "\n", "\t\t\t\t", "self", ".", "save", "(", ")", "\n", "break", "\n", "hits10_file", ".", "close", "(", ")", "\n", "hits5_file", ".", "close", "(", ")", "\n", "hits1_file", ".", "close", "(", ")", "\n", "mrr_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.eval": [[288, 484], ["main.Model_Run.matcher.eval", "open", "json.load.keys", "print", "print", "print", "print", "open.close", "open.close", "main.Model_Run.matcher.train", "json.load", "json.load", "open", "open.write", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "open", "open", "main.Model_Run.get_meta", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "main.Model_Run.cpu().numpy", "mrr.append", "mrr_.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "str", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "query_pairs.append", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "main.Model_Run.get_meta", "main.Model_Run.detach", "main.Model_Run.detach", "list", "sort.index", "hits10.append", "hits10_.append", "hits10.append", "hits10_.append", "hits5.append", "hits5_.append", "hits5.append", "hits5_.append", "hits1.append", "hits1_.append", "hits1.append", "hits1_.append", "str", "torch.autograd.Variable", "torch.autograd.Variable", "query_left.append", "query_right.append", "query_pairs.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "main.Model_Run.matcher", "support_g_embed.view.view.view", "query_g_embed.cpu().detach().numpy", "range", "open.write", "main.Model_Run.matcher", "query_g_embed.cpu().detach().numpy", "range", "open.write", "main.Model_Run.matcher", "main.Model_Run.matcher", "main.Model_Run.cpu", "numpy.argsort", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "query_left.append", "query_right.append", "torch.autograd.Variable", "torch.autograd.Variable", "support_g_embed.view.view.numel", "range", "len", "open.write", "support_g_embed.view.view.cpu().data.numpy", "range", "open.write", "range", "len", "open.write", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "query_g_embed.cpu().detach", "len", "range", "open.write", "len", "open.write", "query_g_embed.cpu().detach", "len", "range", "open.write", "len", "open.write", "str", "len", "open.write", "str", "query_g_embed.cpu", "support_g_embed.view.view.cpu", "str", "query_g_embed.cpu", "str", "float", "str"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.eval", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.train", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.get_meta", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.get_meta"], ["", "", "", "def", "eval", "(", "self", ",", "mode", "=", "'test'", ",", "meta", "=", "False", ")", ":", "\n", "\t\t", "self", ".", "matcher", ".", "eval", "(", ")", "\n", "\n", "symbol2id", "=", "self", ".", "symbol2id", "\n", "few", "=", "self", ".", "few", "\n", "\n", "#print (len(symbol2id))", "\n", "\n", "if", "mode", "==", "'dev'", ":", "\n", "\t\t\t", "test_tasks", "=", "json", ".", "load", "(", "open", "(", "self", ".", "datapath", "+", "'/dev_tasks.json'", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "test_tasks", "=", "json", ".", "load", "(", "open", "(", "self", ".", "datapath", "+", "'/test_tasks.json'", ")", ")", "\n", "\n", "", "rel2candidates", "=", "self", ".", "rel2candidates", "\n", "\n", "hits10", "=", "[", "]", "\n", "hits5", "=", "[", "]", "\n", "hits1", "=", "[", "]", "\n", "mrr", "=", "[", "]", "\n", "\n", "# for query_ in test_tasks.keys():", "\n", "# \tprint len(test_tasks[query_])", "\n", "# \tif len(test_tasks[query_]) < 4:", "\n", "# \t\tprint len(test_tasks[query_])", "\n", "# print (\"evaluation\")", "\n", "\n", "#print (len(test_tasks.keys()))", "\n", "task_embed_f", "=", "open", "(", "self", ".", "datapath", "+", "\"task_embed.txt\"", ",", "\"w\"", ")", "\n", "#print (len(test_tasks.keys()))", "\n", "temp_count", "=", "0", "\n", "for", "query_", "in", "test_tasks", ".", "keys", "(", ")", ":", "\n", "#print (query_)", "\n", "\t\t\t", "entity_embed_f", "=", "open", "(", "self", ".", "datapath", "+", "str", "(", "query_", ")", "+", "\"_entity_embed.txt\"", ",", "\"w\"", ")", "\n", "\n", "task_embed_f", ".", "write", "(", "str", "(", "query_", ")", "+", "\",\"", ")", "\n", "\n", "hits10_", "=", "[", "]", "\n", "hits5_", "=", "[", "]", "\n", "hits1_", "=", "[", "]", "\n", "mrr_", "=", "[", "]", "\n", "\n", "candidates", "=", "rel2candidates", "[", "query_", "]", "\n", "# if temp_count == 0:", "\n", "# \tprint (candidates[500])", "\n", "#print (len(candidates))", "\n", "support_triples", "=", "test_tasks", "[", "query_", "]", "[", ":", "few", "]", "\n", "\n", "# train_and_test = test_tasks[query_]", "\n", "# random.shuffle(train_and_test)", "\n", "# support_triples = train_and_test[:few]", "\n", "# if temp_count == 0:", "\n", "# \tprint (support_triples[0][0])", "\n", "# \tprint (support_triples[0][2])", "\n", "\n", "temp_count", "+=", "1", "\n", "\n", "support_pairs", "=", "[", "[", "symbol2id", "[", "triple", "[", "0", "]", "]", ",", "symbol2id", "[", "triple", "[", "2", "]", "]", "]", "for", "triple", "in", "support_triples", "]", "\n", "\n", "if", "meta", ":", "\n", "\t\t\t\t", "support_left", "=", "[", "self", ".", "ent2id", "[", "triple", "[", "0", "]", "]", "for", "triple", "in", "support_triples", "]", "\n", "support_right", "=", "[", "self", ".", "ent2id", "[", "triple", "[", "2", "]", "]", "for", "triple", "in", "support_triples", "]", "\n", "support_meta", "=", "self", ".", "get_meta", "(", "support_left", ",", "support_right", ")", "\n", "\n", "", "if", "self", ".", "cuda", ":", "\n", "\t\t\t\t", "support", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "support_pairs", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "support", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "support_pairs", ")", ")", "\n", "\n", "", "temp", "=", "0", "\n", "#print (len(test_tasks[query_][few:]))", "\n", "for", "triple", "in", "test_tasks", "[", "query_", "]", "[", "few", ":", "]", ":", "\n", "\t\t\t\t", "temp", "+=", "1", "\n", "true", "=", "triple", "[", "2", "]", "\n", "query_pairs", "=", "[", "]", "\n", "if", "triple", "[", "0", "]", "in", "symbol2id", "and", "triple", "[", "2", "]", "in", "symbol2id", ":", "\n", "\t\t\t\t\t", "query_pairs", ".", "append", "(", "[", "symbol2id", "[", "triple", "[", "0", "]", "]", ",", "symbol2id", "[", "triple", "[", "2", "]", "]", "]", ")", "\n", "\n", "", "if", "meta", ":", "\n", "\t\t\t\t\t", "query_left", "=", "[", "]", "\n", "query_right", "=", "[", "]", "\n", "if", "triple", "[", "0", "]", "in", "self", ".", "ent2id", "and", "triple", "[", "2", "]", "in", "self", ".", "ent2id", ":", "\n", "\t\t\t\t\t\t", "query_left", ".", "append", "(", "self", ".", "ent2id", "[", "triple", "[", "0", "]", "]", ")", "\n", "query_right", ".", "append", "(", "self", ".", "ent2id", "[", "triple", "[", "2", "]", "]", ")", "\n", "\n", "", "", "for", "ent", "in", "candidates", ":", "\n", "\t\t\t\t\t", "if", "(", "ent", "not", "in", "self", ".", "e1rel_e2", "[", "triple", "[", "0", "]", "+", "triple", "[", "1", "]", "]", ")", "and", "ent", "!=", "true", ":", "\n", "\t\t\t\t\t\t", "query_pairs", ".", "append", "(", "[", "symbol2id", "[", "triple", "[", "0", "]", "]", ",", "symbol2id", "[", "ent", "]", "]", ")", "\n", "if", "meta", ":", "\n", "\t\t\t\t\t\t\t", "query_left", ".", "append", "(", "self", ".", "ent2id", "[", "triple", "[", "0", "]", "]", ")", "\n", "query_right", ".", "append", "(", "self", ".", "ent2id", "[", "ent", "]", ")", "\n", "\n", "", "", "", "if", "self", ".", "cuda", ":", "\n", "\t\t\t\t\t", "query", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "query_pairs", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "query", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "query_pairs", ")", ")", "\n", "\n", "", "if", "meta", ":", "\n", "\t\t\t\t\t", "query_meta", "=", "self", ".", "get_meta", "(", "query_left", ",", "query_right", ")", "\n", "if", "self", ".", "set_aggregator", "==", "'lstmae'", ":", "\n", "\t\t\t\t\t\t", "scores", ",", "_", ",", "support_g_embed", ",", "query_g_embed", "=", "self", ".", "matcher", "(", "query", ",", "support", ",", "query_meta", ",", "support_meta", ")", "\n", "#print (support_g_embed.cpu().data.numpy()[:10])", "\n", "support_g_embed", "=", "support_g_embed", ".", "view", "(", "support_g_embed", ".", "numel", "(", ")", ")", "\n", "query_g_embed_temp", "=", "query_g_embed", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "#query_g_embed_temp = query_g_embed.cpu().data.numpy()", "\n", "if", "temp", "==", "1", ":", "\n", "\t\t\t\t\t\t\t", "for", "k", "in", "range", "(", "1", ",", "len", "(", "query_g_embed_temp", ")", ")", ":", "\n", "#query_g_embed_temp = query_g_embed[k].view(query_g_embed[k].numel())", "\n", "#query_g_embed_temp = query_g_embed_temp.cpu().data.numpy()", "\n", "\t\t\t\t\t\t\t\t", "for", "l", "in", "range", "(", "len", "(", "query_g_embed_temp", "[", "k", "]", ")", ")", ":", "\n", "\t\t\t\t\t\t\t\t\t", "entity_embed_f", ".", "write", "(", "str", "(", "query_g_embed_temp", "[", "k", "]", "[", "l", "]", ")", "+", "\" \"", ")", "\n", "", "entity_embed_f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "#query_g_embed_temp = query_g_embed[0].view(query_g_embed[0].numel())", "\n", "#query_g_embed_temp = query_g_embed_temp.cpu().data.numpy()", "\n", "", "", "for", "l", "in", "range", "(", "len", "(", "query_g_embed_temp", "[", "0", "]", ")", ")", ":", "\n", "\t\t\t\t\t\t\t", "entity_embed_f", ".", "write", "(", "str", "(", "query_g_embed_temp", "[", "0", "]", "[", "l", "]", ")", "+", "\" \"", ")", "\n", "", "entity_embed_f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "if", "temp", "==", "1", ":", "\n", "\t\t\t\t\t\t\t", "embed_temp", "=", "support_g_embed", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "#print (len(embed_temp))", "\n", "for", "l", "in", "range", "(", "len", "(", "embed_temp", ")", ")", ":", "\n", "\t\t\t\t\t\t\t\t", "task_embed_f", ".", "write", "(", "str", "(", "float", "(", "embed_temp", "[", "l", "]", ")", ")", "+", "\" \"", ")", "\n", "", "task_embed_f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t\t", "scores", ",", "query_g_embed", "=", "self", ".", "matcher", "(", "query", ",", "support", ",", "query_meta", ",", "support_meta", ")", "\n", "query_g_embed_temp", "=", "query_g_embed", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "#query_g_embed_temp = query_g_embed.cpu().data.numpy()", "\n", "if", "temp", "==", "1", ":", "\n", "\t\t\t\t\t\t\t", "for", "k", "in", "range", "(", "1", ",", "len", "(", "query_g_embed_temp", ")", ")", ":", "\n", "#query_g_embed_temp = query_g_embed[k].view(query_g_embed[k].numel())", "\n", "#query_g_embed_temp = query_g_embed_temp.cpu().data.numpy()", "\n", "\t\t\t\t\t\t\t\t", "for", "l", "in", "range", "(", "len", "(", "query_g_embed_temp", "[", "k", "]", ")", ")", ":", "\n", "\t\t\t\t\t\t\t\t\t", "entity_embed_f", ".", "write", "(", "str", "(", "query_g_embed_temp", "[", "k", "]", "[", "l", "]", ")", "+", "\" \"", ")", "\n", "", "entity_embed_f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "#query_g_embed_temp = query_g_embed[0].view(query_g_embed[0].numel())", "\n", "#query_g_embed_temp = query_g_embed_temp.cpu().data.numpy()", "\n", "", "", "for", "l", "in", "range", "(", "len", "(", "query_g_embed_temp", "[", "0", "]", ")", ")", ":", "\n", "\t\t\t\t\t\t\t", "entity_embed_f", ".", "write", "(", "str", "(", "query_g_embed_temp", "[", "0", "]", "[", "l", "]", ")", "+", "\" \"", ")", "\n", "", "entity_embed_f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "# if temp == 1:", "\n", "# \tembed_temp = support_g_embed.cpu().data.numpy()", "\n", "# \t#print (len(embed_temp))", "\n", "# \tfor l in range(len(embed_temp)):", "\n", "# \t\ttask_embed_f.write(str(float(embed_temp[l])) + \" \")", "\n", "# \ttask_embed_f.write(\"\\n\")", "\n", "\n", "", "scores", ".", "detach", "(", ")", "\n", "scores", "=", "scores", ".", "data", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "if", "self", ".", "set_aggregator", "==", "'lstmae'", ":", "\n", "\t\t\t\t\t\t", "scores", ",", "_", "=", "self", ".", "matcher", "(", "query", ",", "support", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "scores", "=", "self", ".", "matcher", "(", "query", ",", "support", ")", "\n", "", "scores", ".", "detach", "(", ")", "\n", "scores", "=", "scores", ".", "data", "\n", "\n", "", "scores", "=", "scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sort", "=", "list", "(", "np", ".", "argsort", "(", "scores", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "rank", "=", "sort", ".", "index", "(", "0", ")", "+", "1", "\n", "\n", "if", "rank", "<=", "10", ":", "\n", "\t\t\t\t\t", "hits10", ".", "append", "(", "1.0", ")", "\n", "hits10_", ".", "append", "(", "1.0", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "hits10", ".", "append", "(", "0.0", ")", "\n", "hits10_", ".", "append", "(", "0.0", ")", "\n", "", "if", "rank", "<=", "5", ":", "\n", "\t\t\t\t\t", "hits5", ".", "append", "(", "1.0", ")", "\n", "hits5_", ".", "append", "(", "1.0", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "hits5", ".", "append", "(", "0.0", ")", "\n", "hits5_", ".", "append", "(", "0.0", ")", "\n", "", "if", "rank", "<=", "1", ":", "\n", "\t\t\t\t\t", "hits1", ".", "append", "(", "1.0", ")", "\n", "hits1_", ".", "append", "(", "1.0", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "hits1", ".", "append", "(", "0.0", ")", "\n", "hits1_", ".", "append", "(", "0.0", ")", "\n", "", "mrr", ".", "append", "(", "1.0", "/", "rank", ")", "\n", "mrr_", ".", "append", "(", "1.0", "/", "rank", ")", "\n", "\n", "", "", "print", "(", "'hits1: {:.3f}'", ".", "format", "(", "np", ".", "mean", "(", "hits1", ")", ")", ")", "\n", "print", "(", "'hits5: {:.3f}'", ".", "format", "(", "np", ".", "mean", "(", "hits5", ")", ")", ")", "\n", "print", "(", "'hits10: {:.3f}'", ".", "format", "(", "np", ".", "mean", "(", "hits10", ")", ")", ")", "\n", "print", "(", "'mrr: {:.3f}'", ".", "format", "(", "np", ".", "mean", "(", "mrr", ")", ")", ")", "\n", "\n", "task_embed_f", ".", "close", "(", ")", "\n", "entity_embed_f", ".", "close", "(", ")", "\n", "\n", "self", ".", "matcher", ".", "train", "(", ")", "\n", "\n", "return", "np", ".", "mean", "(", "hits10", ")", ",", "np", ".", "mean", "(", "hits5", ")", ",", "np", ".", "mean", "(", "hits1", ")", ",", "np", ".", "mean", "(", "mrr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher.EmbedMatcher.__init__": [[10, 58], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "matcher.SupportEncoder", "matcher.QueryEncoder", "matcher.NTNEncoder", "matcher.EmbedMatcher.symbol_emb.weight.data.copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.__init__"], ["\t", "def", "__init__", "(", "self", ",", "embed_dim", ",", "num_symbols", ",", "use_pretrain", "=", "True", ",", "embed", "=", "None", ",", "dropout", "=", "0.5", ",", "batch_size", "=", "64", ",", "process_steps", "=", "4", ",", "finetune", "=", "False", ",", "aggregate", "=", "'max'", ")", ":", "\n", "\t\t", "super", "(", "EmbedMatcher", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "pad_idx", "=", "num_symbols", "\n", "self", ".", "symbol_emb", "=", "nn", ".", "Embedding", "(", "num_symbols", "+", "1", ",", "embed_dim", ",", "padding_idx", "=", "num_symbols", ")", "\n", "self", ".", "aggregate", "=", "aggregate", "\n", "self", ".", "num_symbols", "=", "num_symbols", "\n", "self", ".", "few", "=", "4", "\n", "\n", "self", ".", "gnn_w", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "#self.gnn_b = nn.Parameter(torch.FloatTensor(self.embed_dim))", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "set_rnn", "=", "nn", ".", "LSTM", "(", "2", "*", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ",", "1", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "match_rnn", "=", "nn", ".", "LSTM", "(", "4", "*", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ",", "1", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "match_MLP", "=", "nn", ".", "Linear", "(", "4", "*", "self", ".", "embed_dim", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "#self.neigh_rnn = nn.LSTM(self.embed_dim, 50, 1, bidirectional = True)", "\n", "\n", "self", ".", "neigh_att_W", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "neigh_att_u", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "1", ")", "\n", "\n", "self", ".", "set_att_W", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "set_att_u", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "1", ")", "\n", "\n", "self", ".", "aggre_match_att_W", "=", "nn", ".", "Linear", "(", "4", "*", "self", ".", "embed_dim", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "self", ".", "aggre_match_att_u", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "embed_dim", ",", "1", ")", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "2", "*", "self", ".", "embed_dim", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "gnn_w", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "neigh_att_W", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "neigh_att_u", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "set_att_W", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "set_att_u", ".", "weight", ")", "\n", "#init.constant_(self.gnn_b, 0)", "\n", "\n", "#print (embed[0])", "\n", "if", "use_pretrain", ":", "\n", "\t\t\t", "self", ".", "symbol_emb", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "embed", ")", ")", "\n", "if", "not", "finetune", ":", "\n", "\t\t\t\t", "self", ".", "symbol_emb", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "d_model", "=", "self", ".", "embed_dim", "*", "2", "\n", "self", ".", "support_encoder", "=", "SupportEncoder", "(", "d_model", ",", "2", "*", "d_model", ",", "dropout", ")", "\n", "self", ".", "query_encoder", "=", "QueryEncoder", "(", "d_model", ",", "process_steps", ")", "\n", "self", ".", "NTNEncoder", "=", "NTNEncoder", "(", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher.EmbedMatcher.neighbor_encoder": [[60, 88], ["num_neighbors.unsqueeze.unsqueeze.unsqueeze", "connections[].squeeze", "connections[].squeeze", "matcher.EmbedMatcher.dropout", "matcher.EmbedMatcher.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "matcher.EmbedMatcher.gnn_w", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.tanh", "torch.sum.tanh", "torch.sum.tanh", "torch.sum.tanh", "matcher.EmbedMatcher.symbol_emb", "matcher.EmbedMatcher.symbol_emb"], "methods", ["None"], ["", "def", "neighbor_encoder", "(", "self", ",", "connections", ",", "num_neighbors", ")", ":", "\n", "\t\t", "num_neighbors", "=", "num_neighbors", ".", "unsqueeze", "(", "1", ")", "\n", "#print num_neighbors", "\n", "relations", "=", "connections", "[", ":", ",", ":", ",", "0", "]", ".", "squeeze", "(", "-", "1", ")", "\n", "#print relations[0]", "\n", "\n", "entities", "=", "connections", "[", ":", ",", ":", ",", "1", "]", ".", "squeeze", "(", "-", "1", ")", "\n", "rel_embeds", "=", "self", ".", "dropout", "(", "self", ".", "symbol_emb", "(", "relations", ")", ")", "# (batch, 200, embed_dim)", "\n", "ent_embeds", "=", "self", ".", "dropout", "(", "self", ".", "symbol_emb", "(", "entities", ")", ")", "# (batch, 200, embed_dim)", "\n", "\n", "concat_embeds", "=", "torch", ".", "cat", "(", "(", "rel_embeds", ",", "ent_embeds", ")", ",", "dim", "=", "-", "1", ")", "# (batch, 200, 2*embed_dim)", "\n", "\n", "#average pooling", "\n", "out_0", "=", "self", ".", "gnn_w", "(", "concat_embeds", ")", "\n", "out", "=", "torch", ".", "sum", "(", "out_0", ",", "dim", "=", "1", ")", "# (batch, embed_dim)", "\n", "out", "=", "out", "/", "num_neighbors", "\n", "\n", "#attention encoder", "\n", "# out = self.neigh_att_W(concat_embeds).tanh()", "\n", "# att_w = self.neigh_att_u(out) ", "\n", "# att_w = self.softmax(att_w).view(concat_embeds.size()[0], 1, 30)", "\n", "# out = torch.bmm(att_w, ent_embeds).view(concat_embeds.size()[0], self.embed_dim)", "\n", "\n", "# out = out.view(30, -1, self.embed_dim)", "\n", "# out, out_state = self.neigh_rnn(out)", "\n", "# out = torch.mean(out, 0).view(-1, self.embed_dim)", "\n", "#return out", "\n", "return", "out", ".", "tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher.EmbedMatcher.aggre_match": [[90, 110], ["support.view.view.view", "support.view.view.expand", "query.expand().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "matcher.EmbedMatcher.match_rnn", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "query.size", "query.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "query.size"], "methods", ["None"], ["", "def", "aggre_match", "(", "self", ",", "support", ",", "query", ")", ":", "\n", "\t\t", "support", "=", "support", ".", "view", "(", "3", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "support_new", "=", "support", ".", "expand", "(", "query", ".", "size", "(", ")", "[", "0", "]", ",", "3", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n", "query_new", "=", "query", ".", "expand", "(", "3", ",", "query", ".", "size", "(", ")", "[", "0", "]", ",", "2", "*", "self", ".", "embed_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "concat", "=", "torch", ".", "cat", "(", "(", "support_new", ",", "query_new", ")", ",", "dim", "=", "-", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "#print concat.size()", "\n", "\n", "#concat = self.aggre_match_att_W(concat).tanh()", "\n", "#att_w = self.aggre_match_att_u(concat)", "\n", "#att_w = self.softmax(att_w).view(-1, 3)", "\n", "#att_embed = torch.matmul(att_w, support).view(-1, 1, 2*self.embed_dim)", "\n", "#query = query.view(-1, 2*self.embed_dim, 1)", "\n", "concat", ",", "concat_state", "=", "self", ".", "match_rnn", "(", "concat", ")", "\n", "concat", "=", "torch", ".", "mean", "(", "concat", ",", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n", "#score = torch.bmm(att_embed, concat).squeeze()", "\n", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher.EmbedMatcher.MLP_match": [[112, 119], ["support.expand.expand.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "matcher.EmbedMatcher.match_MLP().relu", "query.size", "matcher.EmbedMatcher.match_MLP"], "methods", ["None"], ["", "def", "MLP_match", "(", "self", ",", "support", ",", "query", ")", ":", "\n", "\t\t", "support", "=", "support", ".", "expand", "(", "query", ".", "size", "(", ")", "[", "0", "]", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "concat", "=", "torch", ".", "cat", "(", "(", "support", ",", "query", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "concat", "=", "self", ".", "match_MLP", "(", "concat", ")", ".", "relu", "(", ")", "\n", "\n", "return", "concat", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher.EmbedMatcher.forward": [[121, 175], ["matcher.EmbedMatcher.neighbor_encoder", "matcher.EmbedMatcher.neighbor_encoder", "matcher.EmbedMatcher.neighbor_encoder", "matcher.EmbedMatcher.neighbor_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "matcher.EmbedMatcher.support_encoder", "matcher.EmbedMatcher.support_encoder", "matcher.EmbedMatcher.query_encoder", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "matcher.EmbedMatcher.t"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.EmbedMatcher_LSTMAE.neighbor_encoder", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.EmbedMatcher_LSTMAE.neighbor_encoder", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.EmbedMatcher_LSTMAE.neighbor_encoder", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.EmbedMatcher_LSTMAE.neighbor_encoder"], ["", "def", "forward", "(", "self", ",", "query", ",", "support", ",", "query_meta", "=", "None", ",", "support_meta", "=", "None", ")", ":", "\n", "\t\t", "query_left_connections", ",", "query_left_degrees", ",", "query_right_connections", ",", "query_right_degrees", "=", "query_meta", "\n", "support_left_connections", ",", "support_left_degrees", ",", "support_right_connections", ",", "support_right_degrees", "=", "support_meta", "\n", "\n", "query_left", "=", "self", ".", "neighbor_encoder", "(", "query_left_connections", ",", "query_left_degrees", ")", "\n", "query_right", "=", "self", ".", "neighbor_encoder", "(", "query_right_connections", ",", "query_right_degrees", ")", "\n", "\n", "support_left", "=", "self", ".", "neighbor_encoder", "(", "support_left_connections", ",", "support_left_degrees", ")", "\n", "support_right", "=", "self", ".", "neighbor_encoder", "(", "support_right_connections", ",", "support_right_degrees", ")", "\n", "\n", "query_neighbor", "=", "torch", ".", "cat", "(", "(", "query_left", ",", "query_right", ")", ",", "dim", "=", "-", "1", ")", "# tanh", "\n", "support_neighbor", "=", "torch", ".", "cat", "(", "(", "support_left", ",", "support_right", ")", ",", "dim", "=", "-", "1", ")", "# tanh", "\n", "\n", "support", "=", "support_neighbor", "\n", "query", "=", "query_neighbor", "\n", "\n", "support_g", "=", "self", ".", "support_encoder", "(", "support", ")", "# 1 * 100", "\n", "query_g", "=", "self", ".", "support_encoder", "(", "query", ")", "\n", "\n", "# mean pooling for reference set", "\n", "#support_g = torch.mean(support_g, dim=0, keepdim=True)", "\n", "support_g", "=", "torch", ".", "max", "(", "support_g", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "#support_g = torch.median(support_g, dim=0, keepdim=True)[0]", "\n", "#print support_g.size()", "\n", "\n", "# attention aggregation for reference set", "\n", "# support_g_att = self.set_att_W(support_g).tanh()", "\n", "# att_w = self.set_att_u(support_g_att).transpose(0, 1)", "\n", "# att_w = self.softmax(att_w)", "\n", "# support_g = torch.matmul(support_g.transpose(0, 1), att_w.transpose(0, 1))", "\n", "# support_g = support_g.transpose(0, 1)", "\n", "\n", "# attention lstm aggregation for reference set ", "\n", "# support_g_0 = support_g.view(3, 1, 2*self.embed_dim)", "\n", "# support_g, support_g_state = self.set_rnn(support_g_0)", "\n", "# support_g = (support_g + support_g_0)", "\n", "\n", "# support_g_att = self.set_att_W(support_g).tanh()", "\n", "# att_w = self.set_att_u(support_g_att).transpose(0, 1)", "\n", "# att_w = self.softmax(att_w).view(3, 1)", "\n", "# support_g = support_g.view(3, 2*self.embed_dim)", "\n", "# support_g = torch.matmul(support_g.transpose(0, 1), att_w)", "\n", "# support_g = support_g.transpose(0, 1)", "\n", "\n", "# NTN aggregation", "\n", "#matching_scores = self.NTNEncoder(support_g, query_g).squeeze()", "\n", "#support_g = self.NTNEncoder(support_g, query_g)", "\n", "\n", "query_f", "=", "self", ".", "query_encoder", "(", "support_g", ",", "query_g", ")", "# 128 * 100", "\n", "\n", "#cosine similarity", "\n", "matching_scores", "=", "torch", ".", "matmul", "(", "query_f", ",", "support_g", ".", "t", "(", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "matching_scores", ",", "query_g", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher.LayerNormalization.__init__": [[194, 200], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.__init__"], ["def", "__init__", "(", "self", ",", "d_hid", ",", "eps", "=", "1e-3", ")", ":", "\n", "\t\t", "super", "(", "LayerNormalization", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "a_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "d_hid", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "b_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "d_hid", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher.LayerNormalization.forward": [[201, 211], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "z.size", "matcher.LayerNormalization.b_2.expand_as", "torch.mean.expand_as", "torch.mean.expand_as", "torch.mean.expand_as", "torch.mean.expand_as", "torch.std.expand_as", "torch.std.expand_as", "torch.std.expand_as", "torch.std.expand_as", "matcher.LayerNormalization.a_2.expand_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "\t\t", "if", "z", ".", "size", "(", "1", ")", "==", "1", ":", "\n", "\t\t\t", "return", "z", "\n", "\n", "", "mu", "=", "torch", ".", "mean", "(", "z", ",", "keepdim", "=", "True", ",", "dim", "=", "-", "1", ")", "\n", "sigma", "=", "torch", ".", "std", "(", "z", ",", "keepdim", "=", "True", ",", "dim", "=", "-", "1", ")", "\n", "ln_out", "=", "(", "z", "-", "mu", ".", "expand_as", "(", "z", ")", ")", "/", "(", "sigma", ".", "expand_as", "(", "z", ")", "+", "self", ".", "eps", ")", "\n", "ln_out", "=", "ln_out", "*", "self", ".", "a_2", ".", "expand_as", "(", "ln_out", ")", "+", "self", ".", "b_2", ".", "expand_as", "(", "ln_out", ")", "\n", "\n", "return", "ln_out", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher.SupportEncoder.__init__": [[215, 226], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "matcher.LayerNormalization", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "dropout", "=", "0.1", ")", ":", "\n", "\t\t", "super", "(", "SupportEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_inner", ")", "\n", "self", ".", "proj2", "=", "nn", ".", "Linear", "(", "d_inner", ",", "d_model", ")", "\n", "self", ".", "layer_norm", "=", "LayerNormalization", "(", "d_model", ")", "\n", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "proj1", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "proj2", ".", "weight", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher.SupportEncoder.forward": [[227, 232], ["matcher.SupportEncoder.relu", "matcher.SupportEncoder.dropout", "matcher.SupportEncoder.layer_norm", "matcher.SupportEncoder.proj1", "matcher.SupportEncoder.proj2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "residual", "=", "x", "\n", "output", "=", "self", ".", "relu", "(", "self", ".", "proj1", "(", "x", ")", ")", "\n", "output", "=", "self", ".", "dropout", "(", "self", ".", "proj2", "(", "output", ")", ")", "\n", "return", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher.QueryEncoder.__init__": [[235, 240], ["torch.Module.__init__", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.__init__"], ["\t", "def", "__init__", "(", "self", ",", "input_dim", ",", "process_step", "=", "4", ")", ":", "\n", "\t\t", "super", "(", "QueryEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "process_step", "=", "process_step", "\n", "self", ".", "process", "=", "nn", ".", "LSTMCell", "(", "input_dim", ",", "2", "*", "input_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher.QueryEncoder.forward": [[241, 274], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "range", "query.size", "matcher.QueryEncoder.process", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "support.size", "query.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "support.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "support", ",", "query", ")", ":", "\n", "\t\t", "'''\n\t\tsupport: (few, support_dim)\n\t\tquery: (batch_size, query_dim)\n\t\tsupport_dim = query_dim\n\n\t\treturn:\n\t\t(batch_size, query_dim)\n\t\t'''", "\n", "assert", "support", ".", "size", "(", ")", "[", "1", "]", "==", "query", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "if", "self", ".", "process_step", "==", "0", ":", "\n", "\t\t\t", "return", "query", "\n", "\n", "", "batch_size", "=", "query", ".", "size", "(", ")", "[", "0", "]", "\n", "h_r", "=", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "2", "*", "self", ".", "input_dim", ")", ")", ".", "cuda", "(", ")", "\n", "c", "=", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "2", "*", "self", ".", "input_dim", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# h_r = Variable(torch.zeros(batch_size, 2*self.input_dim))", "\n", "# c = Variable(torch.zeros(batch_size, 2*self.input_dim))", "\n", "\n", "#print query.size()", "\n", "\n", "for", "step", "in", "range", "(", "self", ".", "process_step", ")", ":", "\n", "\t\t\t", "h_r_", ",", "c", "=", "self", ".", "process", "(", "query", ",", "(", "h_r", ",", "c", ")", ")", "\n", "h", "=", "query", "+", "h_r_", "[", ":", ",", ":", "self", ".", "input_dim", "]", "# (batch_size, query_dim)", "\n", "attn", "=", "F", ".", "softmax", "(", "torch", ".", "matmul", "(", "h", ",", "support", ".", "t", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "attn", ",", "support", ")", "# (batch_size, support_dim)", "\n", "h_r", "=", "torch", ".", "cat", "(", "(", "h", ",", "r", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# return h_r_[:, :self.input_dim]", "\n", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher.NTNEncoder.__init__": [[277, 287], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.__init__"], ["\t", "def", "__init__", "(", "self", ",", "d_model", ")", ":", "\n", "\t\t", "super", "(", "NTNEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ntn", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "5", ",", "d_model", ",", "d_model", ")", ")", "\n", "self", ".", "ntn_u", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "5", ",", "1", ")", ")", "\n", "self", ".", "dimen", "=", "d_model", "\n", "#self.batch = batch_s", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "ntn", ")", "\n", "#init.normal_(self.ntn)", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "ntn_u", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher.NTNEncoder.forward": [[288, 298], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "support_g.transpose().view.transpose().view.transpose().view", "query_g.view.view.view", "torch.matmul.view", "torch.matmul.view", "torch.matmul.view", "torch.matmul.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "support_g.transpose().view.transpose().view.transpose", "support_g.transpose().view.transpose().view.transpose", "query_g.view.view.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "support_g", ",", "query_g", ")", ":", "\n", "\t\t", "support_g", "=", "torch", ".", "matmul", "(", "self", ".", "ntn", ",", "support_g", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n", "support_g", "=", "support_g", ".", "transpose", "(", "1", ",", "2", ")", ".", "view", "(", "5", ",", "1", ",", "3", ",", "self", ".", "dimen", ")", "\n", "query_g", "=", "query_g", ".", "view", "(", "query_g", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "dimen", ",", "1", ")", "\n", "score", "=", "(", "torch", ".", "matmul", "(", "support_g", ",", "query_g", ")", "/", "100.0", ")", ".", "tanh", "(", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "score", "=", "score", ".", "view", "(", "score", ".", "size", "(", ")", "[", "0", "]", ",", "5", ",", "3", ")", "\n", "score", ",", "indices", "=", "torch", ".", "max", "(", "score", ",", "2", ")", "\n", "score", "=", "torch", ".", "matmul", "(", "score", ",", "self", ".", "ntn_u", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.EmbedMatcher_LSTMAE.__init__": [[8, 64], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "matcher_lstmae.LayerNormalization", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "matcher_lstmae.SupportEncoder", "matcher_lstmae.QueryEncoder", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "matcher_lstmae.EmbedMatcher_LSTMAE.symbol_emb.weight.data.copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.__init__"], ["\t", "def", "__init__", "(", "self", ",", "embed_dim", ",", "num_symbols", ",", "use_pretrain", "=", "True", ",", "embed", "=", "None", ",", "dropout", "=", "0.5", ",", "batch_size", "=", "64", ",", "\n", "process_steps", "=", "4", ",", "finetune", "=", "False", ",", "aggregate", "=", "'max'", ")", ":", "\n", "\t\t", "super", "(", "EmbedMatcher_LSTMAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "pad_idx", "=", "num_symbols", "\n", "self", ".", "symbol_emb", "=", "nn", ".", "Embedding", "(", "num_symbols", "+", "1", ",", "embed_dim", ",", "padding_idx", "=", "num_symbols", ")", "\n", "self", ".", "aggregate", "=", "aggregate", "\n", "self", ".", "num_symbols", "=", "num_symbols", "\n", "self", ".", "layer_norm", "=", "LayerNormalization", "(", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n", "self", ".", "gnn_w", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "gnn_b", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "embed_dim", ")", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "set_rnn_encoder", "=", "nn", ".", "LSTM", "(", "2", "*", "self", ".", "embed_dim", ",", "2", "*", "self", ".", "embed_dim", ",", "1", ",", "bidirectional", "=", "False", ")", "\n", "self", ".", "set_rnn_decoder", "=", "nn", ".", "LSTM", "(", "2", "*", "self", ".", "embed_dim", ",", "2", "*", "self", ".", "embed_dim", ",", "1", ",", "bidirectional", "=", "False", ")", "\n", "\n", "self", ".", "set_FC_encoder", "=", "nn", ".", "Linear", "(", "3", "*", "2", "*", "self", ".", "embed_dim", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "self", ".", "set_FC_decoder", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "embed_dim", ",", "3", "*", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n", "# self.neigh_rnn = nn.LSTM(self.embed_dim, 50, 1, bidirectional = True)", "\n", "\n", "self", ".", "neigh_att_W", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "neigh_att_u", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "1", ")", "\n", "\n", "self", ".", "set_att_W", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "set_att_u", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "1", ")", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "2", "*", "self", ".", "embed_dim", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n", "self", ".", "support_g_W", "=", "nn", ".", "Linear", "(", "4", "*", "self", ".", "embed_dim", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n", "self", ".", "FC_query_g", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "embed_dim", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "self", ".", "FC_support_g_encoder", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "embed_dim", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "gnn_w", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "neigh_att_W", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "neigh_att_u", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "set_att_W", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "set_att_u", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "support_g_W", ".", "weight", ")", "\n", "init", ".", "constant_", "(", "self", ".", "gnn_b", ",", "0", ")", "\n", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "FC_query_g", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "FC_support_g_encoder", ".", "weight", ")", "\n", "\n", "if", "use_pretrain", ":", "\n", "\t\t\t", "self", ".", "symbol_emb", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "embed", ")", ")", "\n", "if", "not", "finetune", ":", "\n", "\t\t\t\t", "self", ".", "symbol_emb", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "d_model", "=", "self", ".", "embed_dim", "*", "2", "\n", "self", ".", "support_encoder", "=", "SupportEncoder", "(", "d_model", ",", "2", "*", "d_model", ",", "dropout", ")", "\n", "self", ".", "query_encoder", "=", "QueryEncoder", "(", "d_model", ",", "process_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.EmbedMatcher_LSTMAE.neighbor_encoder": [[65, 99], ["num_neighbors.unsqueeze.unsqueeze.unsqueeze", "connections[].squeeze", "connections[].squeeze", "matcher_lstmae.EmbedMatcher_LSTMAE.dropout", "matcher_lstmae.EmbedMatcher_LSTMAE.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "matcher_lstmae.EmbedMatcher_LSTMAE.neigh_att_W().tanh", "matcher_lstmae.EmbedMatcher_LSTMAE.neigh_att_u", "matcher_lstmae.EmbedMatcher_LSTMAE.softmax().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view.tanh", "torch.bmm().view.tanh", "torch.bmm().view.tanh", "torch.bmm().view.tanh", "matcher_lstmae.EmbedMatcher_LSTMAE.symbol_emb", "matcher_lstmae.EmbedMatcher_LSTMAE.symbol_emb", "matcher_lstmae.EmbedMatcher_LSTMAE.neigh_att_W", "matcher_lstmae.EmbedMatcher_LSTMAE.softmax", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "def", "neighbor_encoder", "(", "self", ",", "connections", ",", "num_neighbors", ")", ":", "\n", "\t\t", "num_neighbors", "=", "num_neighbors", ".", "unsqueeze", "(", "1", ")", "\n", "# print num_neighbors", "\n", "relations", "=", "connections", "[", ":", ",", ":", ",", "0", "]", ".", "squeeze", "(", "-", "1", ")", "\n", "# print relations[0]", "\n", "\n", "entities", "=", "connections", "[", ":", ",", ":", ",", "1", "]", ".", "squeeze", "(", "-", "1", ")", "\n", "rel_embeds", "=", "self", ".", "dropout", "(", "self", ".", "symbol_emb", "(", "relations", ")", ")", "# (batch, 200, embed_dim)", "\n", "ent_embeds", "=", "self", ".", "dropout", "(", "self", ".", "symbol_emb", "(", "entities", ")", ")", "# (batch, 200, embed_dim)", "\n", "\n", "concat_embeds", "=", "torch", ".", "cat", "(", "(", "rel_embeds", ",", "ent_embeds", ")", ",", "dim", "=", "-", "1", ")", "# (batch, 200, 2*embed_dim)", "\n", "\n", "#out_0 = self.gnn_w(concat_embeds)", "\n", "# out = torch.sum(out_0, dim=1)  # (batch, embed_dim)", "\n", "# out = out / num_neighbors", "\n", "\n", "# attention aggregation", "\n", "# out = self.neigh_att_W(out_0).tanh()", "\n", "# att_w = self.neigh_att_u(out)", "\n", "# att_w = self.softmax(att_w).view(out_0.size()[0], 1, 30)", "\n", "# out = torch.bmm(att_w, out_0).view(out_0.size()[0], 100)", "\n", "\n", "out", "=", "self", ".", "neigh_att_W", "(", "concat_embeds", ")", ".", "tanh", "(", ")", "\n", "att_w", "=", "self", ".", "neigh_att_u", "(", "out", ")", "\n", "att_w", "=", "self", ".", "softmax", "(", "att_w", ")", ".", "view", "(", "concat_embeds", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "30", ")", "\n", "out", "=", "torch", ".", "bmm", "(", "att_w", ",", "ent_embeds", ")", ".", "view", "(", "concat_embeds", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "embed_dim", ")", "\n", "\n", "# print (out.size())", "\n", "\n", "# out = out.view(30, -1, self.embed_dim)", "\n", "# out, out_state = self.neigh_rnn(out)", "\n", "# out = torch.mean(out, 0).view(-1, self.embed_dim)", "\n", "# return out", "\n", "return", "out", ".", "tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.EmbedMatcher_LSTMAE.forward": [[101, 176], ["matcher_lstmae.EmbedMatcher_LSTMAE.neighbor_encoder", "matcher_lstmae.EmbedMatcher_LSTMAE.neighbor_encoder", "matcher_lstmae.EmbedMatcher_LSTMAE.neighbor_encoder", "matcher_lstmae.EmbedMatcher_LSTMAE.neighbor_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "matcher_lstmae.EmbedMatcher_LSTMAE.support_encoder", "matcher_lstmae.EmbedMatcher_LSTMAE.support_encoder", "matcher_lstmae.EmbedMatcher_LSTMAE.view", "matcher_lstmae.EmbedMatcher_LSTMAE.set_rnn_encoder", "support_g_encoder[].view", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "support_g_encoder.view.view.view", "matcher_lstmae.EmbedMatcher_LSTMAE.set_att_W().tanh", "matcher_lstmae.EmbedMatcher_LSTMAE.set_att_u", "matcher_lstmae.EmbedMatcher_LSTMAE.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "support_g_encoder.view.view.transpose", "support_g_encoder.view.view.view", "matcher_lstmae.EmbedMatcher_LSTMAE.query_encoder", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "matcher_lstmae.EmbedMatcher_LSTMAE.set_rnn_decoder", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "matcher_lstmae.EmbedMatcher_LSTMAE.view.view", "support_g_encoder.view.view.transpose", "matcher_lstmae.EmbedMatcher_LSTMAE.set_att_W", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "support_g_encoder.view.view.t"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.EmbedMatcher_LSTMAE.neighbor_encoder", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.EmbedMatcher_LSTMAE.neighbor_encoder", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.EmbedMatcher_LSTMAE.neighbor_encoder", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.EmbedMatcher_LSTMAE.neighbor_encoder"], ["", "def", "forward", "(", "self", ",", "query", ",", "support", ",", "query_meta", "=", "None", ",", "support_meta", "=", "None", ")", ":", "\n", "\t\t", "query_left_connections", ",", "query_left_degrees", ",", "query_right_connections", ",", "query_right_degrees", "=", "query_meta", "\n", "support_left_connections", ",", "support_left_degrees", ",", "support_right_connections", ",", "support_right_degrees", "=", "support_meta", "\n", "\n", "query_left", "=", "self", ".", "neighbor_encoder", "(", "query_left_connections", ",", "query_left_degrees", ")", "\n", "query_right", "=", "self", ".", "neighbor_encoder", "(", "query_right_connections", ",", "query_right_degrees", ")", "\n", "\n", "support_left", "=", "self", ".", "neighbor_encoder", "(", "support_left_connections", ",", "support_left_degrees", ")", "\n", "support_right", "=", "self", ".", "neighbor_encoder", "(", "support_right_connections", ",", "support_right_degrees", ")", "\n", "\n", "query_neighbor", "=", "torch", ".", "cat", "(", "(", "query_left", ",", "query_right", ")", ",", "dim", "=", "-", "1", ")", "# tanh", "\n", "support_neighbor", "=", "torch", ".", "cat", "(", "(", "support_left", ",", "support_right", ")", ",", "dim", "=", "-", "1", ")", "# tanh", "\n", "\n", "support", "=", "support_neighbor", "\n", "query", "=", "query_neighbor", "\n", "\n", "support_g", "=", "self", ".", "support_encoder", "(", "support", ")", "# 1 * 100", "\n", "query_g", "=", "self", ".", "support_encoder", "(", "query", ")", "\n", "\n", "# mean pooling for reference set", "\n", "# support_g = torch.mean(support_g, dim=0, keepdim=True)", "\n", "\n", "# lstm aggregation for reference set", "\n", "#print (support_g.size())", "\n", "\n", "# lstm autoencoder", "\n", "support_g_0", "=", "support_g", ".", "view", "(", "3", ",", "1", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "support_g_encoder", ",", "support_g_state", "=", "self", ".", "set_rnn_encoder", "(", "support_g_0", ")", "\n", "support_g_decoder", "=", "support_g_encoder", "[", "-", "1", "]", ".", "view", "(", "1", ",", "-", "1", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "decoder_set", "=", "[", "]", "\n", "support_g_decoder_state", "=", "support_g_state", "\n", "for", "idx", "in", "range", "(", "3", ")", ":", "\n", "\t\t\t", "support_g_decoder", ",", "support_g_decoder_state", "=", "self", ".", "set_rnn_decoder", "(", "support_g_decoder", ",", "support_g_decoder_state", ")", "\n", "decoder_set", ".", "append", "(", "support_g_decoder", ")", "\n", "", "decoder_set", "=", "torch", ".", "cat", "(", "decoder_set", ",", "dim", "=", "0", ")", "\n", "\n", "# FC autoencoder", "\n", "# support_g = support_g.view(-1, 3 * 2 * self.embed_dim)", "\n", "# support_g_encoder = self.set_FC_encoder(support_g)", "\n", "# support_g_decoder = self.set_FC_decoder(support_g_encoder)", "\n", "\n", "ae_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "support_g_0", ",", "decoder_set", ".", "detach", "(", ")", ")", "\n", "#ae_loss = 0", "\n", "\n", "#support_g_encoder = torch.mean(support_g_encoder, 0).view(1, 2*self.embed_dim)", "\n", "#support_g_encoder = support_g_encoder[-1].view(1, 2 * self.embed_dim)", "\n", "\n", "support_g_encoder", "=", "support_g_encoder", ".", "view", "(", "3", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n", "support_g_encoder", "=", "support_g_0", ".", "view", "(", "3", ",", "2", "*", "self", ".", "embed_dim", ")", "+", "support_g_encoder", "\n", "\n", "#support_g_encoder = torch.mean(support_g_encoder, dim=0, keepdim=True)\t\t", "\n", "\n", "support_g_att", "=", "self", ".", "set_att_W", "(", "support_g_encoder", ")", ".", "tanh", "(", ")", "\n", "att_w", "=", "self", ".", "set_att_u", "(", "support_g_att", ")", "\n", "att_w", "=", "self", ".", "softmax", "(", "att_w", ")", "\n", "support_g_encoder", "=", "torch", ".", "matmul", "(", "support_g_encoder", ".", "transpose", "(", "0", ",", "1", ")", ",", "att_w", ")", "\n", "support_g_encoder", "=", "support_g_encoder", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "support_g_encoder", "=", "support_g_encoder", ".", "view", "(", "1", ",", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n", "#print (support_g_encoder.size())", "\n", "#print (query_g.size())", "\n", "\n", "query_f", "=", "self", ".", "query_encoder", "(", "support_g_encoder", ",", "query_g", ")", "# 128 * 100", "\n", "\n", "#print (support_g_encoder.size())", "\n", "\n", "# cosine similarity", "\n", "#query_g = self.FC_query_g(query_g)", "\n", "#support_g_encoder = self.FC_support_g_encoder(support_g_encoder)", "\n", "\n", "matching_scores", "=", "torch", ".", "matmul", "(", "query_f", ",", "support_g_encoder", ".", "t", "(", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "matching_scores", ",", "ae_loss", ",", "support_g_encoder", ",", "query_g", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.LayerNormalization.__init__": [[181, 187], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.__init__"], ["def", "__init__", "(", "self", ",", "d_hid", ",", "eps", "=", "1e-3", ")", ":", "\n", "\t\t", "super", "(", "LayerNormalization", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "a_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "d_hid", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "b_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "d_hid", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.LayerNormalization.forward": [[188, 198], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "z.size", "matcher_lstmae.LayerNormalization.b_2.expand_as", "torch.mean.expand_as", "torch.mean.expand_as", "torch.mean.expand_as", "torch.mean.expand_as", "torch.std.expand_as", "torch.std.expand_as", "torch.std.expand_as", "torch.std.expand_as", "matcher_lstmae.LayerNormalization.a_2.expand_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "\t\t", "if", "z", ".", "size", "(", "1", ")", "==", "1", ":", "\n", "\t\t\t", "return", "z", "\n", "\n", "", "mu", "=", "torch", ".", "mean", "(", "z", ",", "keepdim", "=", "True", ",", "dim", "=", "-", "1", ")", "\n", "sigma", "=", "torch", ".", "std", "(", "z", ",", "keepdim", "=", "True", ",", "dim", "=", "-", "1", ")", "\n", "ln_out", "=", "(", "z", "-", "mu", ".", "expand_as", "(", "z", ")", ")", "/", "(", "sigma", ".", "expand_as", "(", "z", ")", "+", "self", ".", "eps", ")", "\n", "ln_out", "=", "ln_out", "*", "self", ".", "a_2", ".", "expand_as", "(", "ln_out", ")", "+", "self", ".", "b_2", ".", "expand_as", "(", "ln_out", ")", "\n", "\n", "return", "ln_out", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.SupportEncoder.__init__": [[203, 214], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "matcher_lstmae.LayerNormalization", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "dropout", "=", "0.1", ")", ":", "\n", "\t\t", "super", "(", "SupportEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_inner", ")", "\n", "self", ".", "proj2", "=", "nn", ".", "Linear", "(", "d_inner", ",", "d_model", ")", "\n", "self", ".", "layer_norm", "=", "LayerNormalization", "(", "d_model", ")", "\n", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "proj1", ".", "weight", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "proj2", ".", "weight", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.SupportEncoder.forward": [[215, 220], ["matcher_lstmae.SupportEncoder.relu", "matcher_lstmae.SupportEncoder.dropout", "matcher_lstmae.SupportEncoder.layer_norm", "matcher_lstmae.SupportEncoder.proj1", "matcher_lstmae.SupportEncoder.proj2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "residual", "=", "x", "\n", "output", "=", "self", ".", "relu", "(", "self", ".", "proj1", "(", "x", ")", ")", "\n", "output", "=", "self", ".", "dropout", "(", "self", ".", "proj2", "(", "output", ")", ")", "\n", "return", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.__init__": [[223, 228], ["torch.Module.__init__", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell"], "methods", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.__init__"], ["\t", "def", "__init__", "(", "self", ",", "input_dim", ",", "process_step", "=", "4", ")", ":", "\n", "\t\t", "super", "(", "QueryEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "process_step", "=", "process_step", "\n", "self", ".", "process", "=", "nn", ".", "LSTMCell", "(", "input_dim", ",", "2", "*", "input_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.matcher_lstmae.QueryEncoder.forward": [[229, 259], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "range", "query.size", "matcher_lstmae.QueryEncoder.process", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "support.size", "query.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "support.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "support", ",", "query", ")", ":", "\n", "\t\t", "'''\n\t\tsupport: (few, support_dim)\n\t\tquery: (batch_size, query_dim)\n\t\tsupport_dim = query_dim\n\t\treturn:\n\t\t(batch_size, query_dim)\n\t\t'''", "\n", "\n", "assert", "support", ".", "size", "(", ")", "[", "1", "]", "==", "query", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "if", "self", ".", "process_step", "==", "0", ":", "\n", "\t\t\t", "return", "query", "\n", "\n", "", "batch_size", "=", "query", ".", "size", "(", ")", "[", "0", "]", "\n", "h_r", "=", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "2", "*", "self", ".", "input_dim", ")", ")", ".", "cuda", "(", ")", "\n", "c", "=", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "2", "*", "self", ".", "input_dim", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# h_r = Variable(torch.zeros(batch_size, 2*self.input_dim))", "\n", "# c = Variable(torch.zeros(batch_size, 2*self.input_dim))", "\n", "\n", "for", "step", "in", "range", "(", "self", ".", "process_step", ")", ":", "\n", "\t\t\t", "h_r_", ",", "c", "=", "self", ".", "process", "(", "query", ",", "(", "h_r", ",", "c", ")", ")", "\n", "h", "=", "query", "+", "h_r_", "[", ":", ",", ":", "self", ".", "input_dim", "]", "# (batch_size, query_dim)", "\n", "attn", "=", "F", ".", "softmax", "(", "torch", ".", "matmul", "(", "h", ",", "support", ".", "t", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "attn", ",", "support", ")", "# (batch_size, support_dim)", "\n", "h_r", "=", "torch", ".", "cat", "(", "(", "h", ",", "r", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# return h_r_[:, :self.input_dim]", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.plot.learning_curve": [[6, 61], ["numpy.array", "matplotlib.subplots", "matplotlib.plot", "matplotlib.grid", "fig.subplots_adjust", "fig.subplots_adjust", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "fig.suptitle", "matplotlib.show", "np.array.sort", "range", "print", "open", "f.readlines", "float", "line.rstrip.rstrip", "np.array.append", "str"], "function", ["None"], ["def", "learning_curve", "(", ")", ":", "\n", "\t", "score_list", "=", "[", "]", "\n", "with", "open", "(", "datapath", "+", "'/NELL_mrr.txt'", ")", "as", "f", ":", "\n", "\t\t", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "\t\t\t", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "score_list", ".", "append", "(", "line", ")", "\n", "\n", "", "", "score_list", "=", "np", ".", "array", "(", "score_list", ")", "\n", "\n", "# score_list_2 = []", "\n", "# with open(datapath + '/NELL_hits10_2.txt') as f:", "\n", "# \tlines = f.readlines()", "\n", "# \tfor line in lines:", "\n", "# \t\tline = line.rstrip()", "\n", "# \t\tscore_list_2.append(line)", "\n", "\n", "# score_list_2 = np.array(score_list_2)", "\n", "\n", "# score_list_3 = []", "\n", "# with open(datapath + '/NELL_hits10_3.txt') as f:", "\n", "# \tlines = f.readlines()", "\n", "# \tfor line in lines:", "\n", "# \t\tline = line.rstrip()", "\n", "# \t\tscore_list_3.append(line)", "\n", "\n", "# score_list_3 = np.array(score_list_3)", "\n", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", ")", "\n", "#plt.plot(score_list_3[:30],'-o', color='blue', linewidth=3, markerfacecolor = 'green', label=\"Ours_3\")", "\n", "#plt.plot(score_list_2[:30],'-o', color='grey', linewidth=3, markerfacecolor = 'black', label=\"Ours_2\")", "\n", "plt", ".", "plot", "(", "score_list", "[", ":", "]", ",", "'-o'", ",", "color", "=", "'orange'", ",", "linewidth", "=", "3", ",", "markerfacecolor", "=", "'red'", ",", "label", "=", "\"Ours_1\"", ")", "\n", "# labels = ['0e3', '5e3', '10e3', '15e3', '20e3', '25e3'\\", "\n", "# , '30e3', '35e3', '40e3']", "\n", "# axes.set_xticklabels(labels)", "\n", "plt", ".", "grid", "(", ")", "\n", "fig", ".", "subplots_adjust", "(", "left", "=", "0.15", ")", "\n", "fig", ".", "subplots_adjust", "(", "bottom", "=", "0.15", ")", "\n", "plt", ".", "xticks", "(", "fontsize", "=", "20", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "20", ")", "\n", "plt", ".", "xlabel", "(", "'Training Iteration #'", ",", "size", "=", "20", ")", "\n", "plt", ".", "ylabel", "(", "'Hits@10'", ",", "size", "=", "20", ")", "\n", "plt", ".", "legend", "(", "bbox_to_anchor", "=", "(", "0.55", ",", "0.25", ")", ",", "loc", "=", "2", ",", "prop", "=", "{", "'size'", ":", "20", "}", ")", "\n", "fig", ".", "suptitle", "(", "'Learning Curves'", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "show", "(", ")", "\n", "#fig.savefig(\"lc_test.pdf\", bbox_inches='tight')", "\n", "\n", "score_list", ".", "sort", "(", ")", "\n", "ave_hits", "=", "0.0", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "\t\t", "ave_hits", "+=", "float", "(", "score_list", "[", "-", "i", "-", "1", "]", ")", "\n", "#print score_list[-i]", "\n", "", "ave_hits", "=", "ave_hits", "/", "5", "\n", "\n", "print", "(", "'ave_hits: '", "+", "str", "(", "ave_hits", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.data_generator.train_generate": [[4, 77], ["json.load", "json.load", "list", "len", "print", "open", "open", "json.load.keys", "random.shuffle", "random.shuffle", "len", "len", "len", "random.sample", "false_pairs.append", "false_left.append", "false_right.append", "random.choice", "random.choice", "range"], "function", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load"], ["def", "train_generate", "(", "datapath", ",", "batch_size", ",", "few", ",", "symbol2id", ",", "ent2id", ",", "e1rel_e2", ")", ":", "\n", "\t", "train_tasks", "=", "json", ".", "load", "(", "open", "(", "datapath", "+", "'/train_tasks.json'", ")", ")", "\n", "rel2candidates", "=", "json", ".", "load", "(", "open", "(", "datapath", "+", "'/rel2candidates_all.json'", ")", ")", "\n", "task_pool", "=", "list", "(", "train_tasks", ".", "keys", "(", ")", ")", "\n", "#print (task_pool[0])", "\n", "\n", "num_tasks", "=", "len", "(", "task_pool", ")", "\n", "\n", "# for query_ in train_tasks.keys():", "\n", "# \tprint len(train_tasks[query_])", "\n", "# \tif len(train_tasks[query_]) < 4:", "\n", "# \t\tprint len(train_tasks[query_])", "\n", "\n", "print", "(", "\"train data generation\"", ")", "\n", "\n", "rel_idx", "=", "0", "\n", "\n", "while", "True", ":", "\n", "\t\t", "if", "rel_idx", "%", "num_tasks", "==", "0", ":", "\n", "\t\t\t", "random", ".", "shuffle", "(", "task_pool", ")", "\n", "", "query", "=", "task_pool", "[", "rel_idx", "%", "num_tasks", "]", "\n", "#print (query)", "\n", "rel_idx", "+=", "1", "\n", "\n", "#query_rand = random.randint(0, (num_tasks - 1))", "\n", "#query = task_pool[query_rand]", "\n", "\n", "candidates", "=", "rel2candidates", "[", "query", "]", "\n", "#print rel_idx", "\n", "\n", "if", "len", "(", "candidates", ")", "<=", "20", ":", "\n", "\t\t\t", "continue", "\n", "\n", "", "train_and_test", "=", "train_tasks", "[", "query", "]", "\n", "random", ".", "shuffle", "(", "train_and_test", ")", "\n", "\n", "support_triples", "=", "train_and_test", "[", ":", "few", "]", "\n", "support_pairs", "=", "[", "[", "symbol2id", "[", "triple", "[", "0", "]", "]", ",", "symbol2id", "[", "triple", "[", "2", "]", "]", "]", "for", "triple", "in", "support_triples", "]", "\n", "\n", "support_left", "=", "[", "ent2id", "[", "triple", "[", "0", "]", "]", "for", "triple", "in", "support_triples", "]", "\n", "support_right", "=", "[", "ent2id", "[", "triple", "[", "2", "]", "]", "for", "triple", "in", "support_triples", "]", "\n", "\n", "all_test_triples", "=", "train_and_test", "[", "few", ":", "]", "\n", "\n", "if", "len", "(", "all_test_triples", ")", "==", "0", ":", "\n", "\t\t\t", "continue", "\n", "\n", "", "if", "len", "(", "all_test_triples", ")", "<", "batch_size", ":", "\n", "\t\t\t", "query_triples", "=", "[", "random", ".", "choice", "(", "all_test_triples", ")", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "", "else", ":", "\n", "\t\t\t", "query_triples", "=", "random", ".", "sample", "(", "all_test_triples", ",", "batch_size", ")", "\n", "\n", "", "query_pairs", "=", "[", "[", "symbol2id", "[", "triple", "[", "0", "]", "]", ",", "symbol2id", "[", "triple", "[", "2", "]", "]", "]", "for", "triple", "in", "query_triples", "]", "\n", "\n", "query_left", "=", "[", "ent2id", "[", "triple", "[", "0", "]", "]", "for", "triple", "in", "query_triples", "]", "\n", "query_right", "=", "[", "ent2id", "[", "triple", "[", "2", "]", "]", "for", "triple", "in", "query_triples", "]", "\n", "\n", "false_pairs", "=", "[", "]", "\n", "false_left", "=", "[", "]", "\n", "false_right", "=", "[", "]", "\n", "for", "triple", "in", "query_triples", ":", "\n", "\t\t\t", "e_h", "=", "triple", "[", "0", "]", "\n", "rel", "=", "triple", "[", "1", "]", "\n", "e_t", "=", "triple", "[", "2", "]", "\n", "while", "True", ":", "\n", "\t\t\t\t", "noise", "=", "random", ".", "choice", "(", "candidates", ")", "\n", "if", "(", "noise", "not", "in", "e1rel_e2", "[", "e_h", "+", "rel", "]", ")", "and", "noise", "!=", "e_t", ":", "\n", "\t\t\t\t\t", "break", "\n", "", "", "false_pairs", ".", "append", "(", "[", "symbol2id", "[", "e_h", "]", ",", "symbol2id", "[", "noise", "]", "]", ")", "\n", "false_left", ".", "append", "(", "ent2id", "[", "e_h", "]", ")", "\n", "false_right", ".", "append", "(", "ent2id", "[", "noise", "]", ")", "\n", "\n", "", "yield", "support_pairs", ",", "query_pairs", ",", "false_pairs", ",", "support_left", ",", "support_right", ",", "query_left", ",", "query_right", ",", "false_left", ",", "false_right", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.data_process.build_vocab": [[47, 76], ["set", "set", "enumerate", "enumerate", "json.dump", "json.dump", "open", "f.readlines", "list", "list", "open", "open", "line.rstrip.rstrip", "set.add", "set.add", "set.add", "set.add", "line.rstrip.split", "line.rstrip.split", "line.rstrip.split"], "function", ["None"], ["def", "build_vocab", "(", "datapath", ")", ":", "\n", "\t", "rels", "=", "set", "(", ")", "\n", "ents", "=", "set", "(", ")", "\n", "\n", "with", "open", "(", "datapath", "+", "'/path_graph'", ")", "as", "f", ":", "\n", "\t\t", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "\t\t\t", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "rel", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "1", "]", "\n", "e1", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "0", "]", "\n", "e2", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "2", "]", "\n", "rels", ".", "add", "(", "rel", ")", "\n", "rels", ".", "add", "(", "rel", "+", "'_inv'", ")", "\n", "ents", ".", "add", "(", "e1", ")", "\n", "ents", ".", "add", "(", "e2", ")", "\n", "\n", "# relation/entity id map\t\t", "\n", "", "", "relationid", "=", "{", "}", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "list", "(", "rels", ")", ")", ":", "\n", "\t\t", "relationid", "[", "item", "]", "=", "idx", "\n", "\n", "", "entid", "=", "{", "}", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "list", "(", "ents", ")", ")", ":", "\n", "\t\t", "entid", "[", "item", "]", "=", "idx", "\n", "\n", "#print len(entid)", "\n", "\n", "", "json", ".", "dump", "(", "relationid", ",", "open", "(", "datapath", "+", "'/relation2ids'", ",", "'w'", ")", ")", "\n", "json", ".", "dump", "(", "entid", ",", "open", "(", "datapath", "+", "'/ent2ids'", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.data_process.candidate_triples": [[78, 123], ["json.load", "json.load.keys", "collections.defaultdict", "json.load", "json.load", "json.load", "zip", "json.dump", "open", "open", "open", "open", "json.load.keys", "json.load.values", "len", "len", "set", "list", "open", "type2ents[].add", "json.load.keys", "json.load.keys", "json.load.values", "json.load.values", "list", "set", "len", "ent.split", "set.add", "example[].split", "print"], "function", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load"], ["", "def", "candidate_triples", "(", "datapath", ")", ":", "\n", "\t", "ent2ids", "=", "json", ".", "load", "(", "open", "(", "datapath", "+", "'/ent2ids'", ")", ")", "\n", "\n", "all_entities", "=", "ent2ids", ".", "keys", "(", ")", "\n", "\n", "type2ents", "=", "defaultdict", "(", "set", ")", "\n", "for", "ent", "in", "all_entities", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "type_", "=", "ent", ".", "split", "(", "':'", ")", "[", "1", "]", "\n", "type2ents", "[", "type_", "]", ".", "add", "(", "ent", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t\t", "continue", "\n", "\n", "", "", "train_tasks", "=", "json", ".", "load", "(", "open", "(", "datapath", "+", "'/known_rels.json'", ")", ")", "\n", "dev_tasks", "=", "json", ".", "load", "(", "open", "(", "datapath", "+", "'/dev_tasks.json'", ")", ")", "\n", "test_tasks", "=", "json", ".", "load", "(", "open", "(", "datapath", "+", "'/test_tasks.json'", ")", ")", "\n", "\n", "all_reason_relations", "=", "train_tasks", ".", "keys", "(", ")", "+", "dev_tasks", ".", "keys", "(", ")", "+", "test_tasks", ".", "keys", "(", ")", "\n", "\n", "all_reason_relation_triples", "=", "train_tasks", ".", "values", "(", ")", "+", "dev_tasks", ".", "values", "(", ")", "+", "test_tasks", ".", "values", "(", ")", "\n", "\n", "assert", "len", "(", "all_reason_relations", ")", "==", "len", "(", "all_reason_relation_triples", ")", "\n", "\n", "rel2candidates", "=", "{", "}", "\n", "for", "rel", ",", "triples", "in", "zip", "(", "all_reason_relations", ",", "all_reason_relation_triples", ")", ":", "\n", "\t\t", "possible_types", "=", "set", "(", ")", "\n", "for", "example", "in", "triples", ":", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "type_", "=", "example", "[", "2", "]", ".", "split", "(", "':'", ")", "[", "1", "]", "# type of tail entity", "\n", "possible_types", ".", "add", "(", "type_", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t\t\t", "print", "(", "example", ")", "\n", "\n", "", "", "candidates", "=", "[", "]", "\n", "for", "type_", "in", "possible_types", ":", "\n", "\t\t\t", "candidates", "+=", "list", "(", "type2ents", "[", "type_", "]", ")", "\n", "\n", "", "candidates", "=", "list", "(", "set", "(", "candidates", ")", ")", "\n", "if", "len", "(", "candidates", ")", ">", "1000", ":", "\n", "\t\t\t", "candidates", "=", "candidates", "[", ":", "1000", "]", "\n", "", "rel2candidates", "[", "rel", "]", "=", "candidates", "\n", "\n", "#rel2candidates[rel] = list(set(candidates))", "\n", "\n", "", "json", ".", "dump", "(", "rel2candidates", ",", "open", "(", "datapath", "+", "'/rel2candidates_all.json'", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.data_process.for_filtering": [[125, 138], ["collections.defaultdict", "json.load", "json.load", "json.load", "open", "open", "open", "json.load.values", "e1rel_e2[].append", "json.dump", "json.load.values", "json.load.values", "open"], "function", ["home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load", "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.main.Model_Run.load"], ["", "def", "for_filtering", "(", "datapath", ",", "save", "=", "False", ")", ":", "\n", "\t", "e1rel_e2", "=", "defaultdict", "(", "list", ")", "\n", "train_tasks", "=", "json", ".", "load", "(", "open", "(", "datapath", "+", "'/train_tasks.json'", ")", ")", "\n", "dev_tasks", "=", "json", ".", "load", "(", "open", "(", "datapath", "+", "'/dev_tasks.json'", ")", ")", "\n", "test_tasks", "=", "json", ".", "load", "(", "open", "(", "datapath", "+", "'/test_tasks.json'", ")", ")", "\n", "few_triples", "=", "[", "]", "\n", "for", "_", "in", "(", "train_tasks", ".", "values", "(", ")", "+", "dev_tasks", ".", "values", "(", ")", "+", "test_tasks", ".", "values", "(", ")", ")", ":", "\n", "\t\t", "few_triples", "+=", "_", "\n", "", "for", "triple", "in", "few_triples", ":", "\n", "\t\t", "e1", ",", "rel", ",", "e2", "=", "triple", "\n", "e1rel_e2", "[", "e1", "+", "rel", "]", ".", "append", "(", "e2", ")", "\n", "", "if", "save", ":", "\n", "\t\t", "json", ".", "dump", "(", "e1rel_e2", ",", "open", "(", "datapath", "+", "'/e1rel_e2.json'", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chuxuzhang_AAAI2020_FSRL.code.args.read_args": [[3, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "vars().items", "print", "print", "vars", "str"], "function", ["None"], ["def", "read_args", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--datapath\"", ",", "default", "=", "\"../data/NELL\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--random_seed\"", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--random_embed\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--few\"", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--test\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--embed_model\"", ",", "default", "=", "'ComplEx'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--embed_dim\"", ",", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--dropout\"", ",", "default", "=", "0.5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--fine_tune\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--aggregate\"", ",", "default", "=", "'max'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--process_steps\"", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--aggregator\"", ",", "default", "=", "'max'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "default", "=", "0.0001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight_decay\"", ",", "default", "=", "0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_neighbor\"", ",", "default", "=", "30", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_few\"", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_meta\"", ",", "default", "=", "'0'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--margin\"", ",", "default", "=", "5.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_every\"", ",", "default", "=", "10000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_batches\"", ",", "default", "=", "200000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--prefix\"", ",", "default", "=", "'intial'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--set_aggregator\"", ",", "default", "=", "\"lstmae\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--ae_weight\"", ",", "default", "=", "0.00001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--cuda\"", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "save_path", "=", "'models/'", "+", "args", ".", "prefix", "\n", "\n", "#print (args.embed_dim)", "\n", "\n", "print", "(", "\"------arguments/parameters-------\"", ")", "\n", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "\t\t", "print", "(", "k", "+", "': '", "+", "str", "(", "v", ")", ")", "\n", "", "print", "(", "\"---------------------------------\"", ")", "\n", "\n", "return", "args", "\n", "\n"]]}