{"home.repos.pwc.inspect_result.szc19990412_TransMIL.None.train.make_parse": [[15, 23], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "make_parse", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--stage'", ",", "default", "=", "'train'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "default", "=", "'Camelyon/TransMIL.yaml'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "default", "=", "[", "2", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--fold'", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.None.train.main": [[25, 78], ["pytorch_lightning.seed_everything", "utils.utils.load_loggers", "utils.utils.load_callbacks", "datasets.DataInterface", "models.ModelInterface", "pytorch_lightning.Trainer", "pytorch_lightning.Trainer.fit", "list", "cfg.log_path.glob", "str", "print", "models.ModelInterface.load_from_checkpoint", "pytorch_lightning.Trainer.test", "str"], "function", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.utils.utils.load_loggers", "home.repos.pwc.inspect_result.szc19990412_TransMIL.utils.utils.load_callbacks"], ["", "def", "main", "(", "cfg", ")", ":", "\n", "\n", "#---->Initialize seed", "\n", "    ", "pl", ".", "seed_everything", "(", "cfg", ".", "General", ".", "seed", ")", "\n", "\n", "#---->load loggers", "\n", "cfg", ".", "load_loggers", "=", "load_loggers", "(", "cfg", ")", "\n", "\n", "#---->load callbacks", "\n", "cfg", ".", "callbacks", "=", "load_callbacks", "(", "cfg", ")", "\n", "\n", "#---->Define Data ", "\n", "DataInterface_dict", "=", "{", "'train_batch_size'", ":", "cfg", ".", "Data", ".", "train_dataloader", ".", "batch_size", ",", "\n", "'train_num_workers'", ":", "cfg", ".", "Data", ".", "train_dataloader", ".", "num_workers", ",", "\n", "'test_batch_size'", ":", "cfg", ".", "Data", ".", "test_dataloader", ".", "batch_size", ",", "\n", "'test_num_workers'", ":", "cfg", ".", "Data", ".", "test_dataloader", ".", "num_workers", ",", "\n", "'dataset_name'", ":", "cfg", ".", "Data", ".", "dataset_name", ",", "\n", "'dataset_cfg'", ":", "cfg", ".", "Data", ",", "}", "\n", "dm", "=", "DataInterface", "(", "**", "DataInterface_dict", ")", "\n", "\n", "#---->Define Model", "\n", "ModelInterface_dict", "=", "{", "'model'", ":", "cfg", ".", "Model", ",", "\n", "'loss'", ":", "cfg", ".", "Loss", ",", "\n", "'optimizer'", ":", "cfg", ".", "Optimizer", ",", "\n", "'data'", ":", "cfg", ".", "Data", ",", "\n", "'log'", ":", "cfg", ".", "log_path", "\n", "}", "\n", "model", "=", "ModelInterface", "(", "**", "ModelInterface_dict", ")", "\n", "\n", "#---->Instantiate Trainer", "\n", "trainer", "=", "Trainer", "(", "\n", "num_sanity_val_steps", "=", "0", ",", "\n", "logger", "=", "cfg", ".", "load_loggers", ",", "\n", "callbacks", "=", "cfg", ".", "callbacks", ",", "\n", "max_epochs", "=", "cfg", ".", "General", ".", "epochs", ",", "\n", "gpus", "=", "cfg", ".", "General", ".", "gpus", ",", "\n", "amp_level", "=", "cfg", ".", "General", ".", "amp_level", ",", "\n", "precision", "=", "cfg", ".", "General", ".", "precision", ",", "\n", "accumulate_grad_batches", "=", "cfg", ".", "General", ".", "grad_acc", ",", "\n", "deterministic", "=", "True", ",", "\n", "check_val_every_n_epoch", "=", "1", ",", "\n", ")", "\n", "\n", "#---->train or test", "\n", "if", "cfg", ".", "General", ".", "server", "==", "'train'", ":", "\n", "        ", "trainer", ".", "fit", "(", "model", "=", "model", ",", "datamodule", "=", "dm", ")", "\n", "", "else", ":", "\n", "        ", "model_paths", "=", "list", "(", "cfg", ".", "log_path", ".", "glob", "(", "'*.ckpt'", ")", ")", "\n", "model_paths", "=", "[", "str", "(", "model_path", ")", "for", "model_path", "in", "model_paths", "if", "'epoch'", "in", "str", "(", "model_path", ")", "]", "\n", "for", "path", "in", "model_paths", ":", "\n", "            ", "print", "(", "path", ")", "\n", "new_model", "=", "model", ".", "load_from_checkpoint", "(", "checkpoint_path", "=", "path", ",", "cfg", "=", "cfg", ")", "\n", "trainer", ".", "test", "(", "model", "=", "new_model", ",", "datamodule", "=", "dm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.utils.utils.read_yaml": [[6, 10], ["open", "yaml.load", "addict.Dict"], "function", ["None"], ["def", "read_yaml", "(", "fpath", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "mode", "=", "\"r\"", ")", "as", "file", ":", "\n", "        ", "yml", "=", "yaml", ".", "load", "(", "file", ",", "Loader", "=", "yaml", ".", "Loader", ")", "\n", "return", "Dict", "(", "yml", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.utils.utils.load_loggers": [[13, 31], ["pathlib.Path().mkdir", "print", "pytorch_lightning.loggers.TensorBoardLogger", "pytorch_lightning.loggers.CSVLogger", "pathlib.Path", "pathlib.Path", "pathlib.Path", "str", "str", "pathlib.Path"], "function", ["None"], ["def", "load_loggers", "(", "cfg", ")", ":", "\n", "\n", "    ", "log_path", "=", "cfg", ".", "General", ".", "log_path", "\n", "Path", "(", "log_path", ")", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "log_name", "=", "Path", "(", "cfg", ".", "config", ")", ".", "parent", "\n", "version_name", "=", "Path", "(", "cfg", ".", "config", ")", ".", "name", "[", ":", "-", "5", "]", "\n", "cfg", ".", "log_path", "=", "Path", "(", "log_path", ")", "/", "log_name", "/", "version_name", "/", "f'fold{cfg.Data.fold}'", "\n", "print", "(", "f'---->Log dir: {cfg.log_path}'", ")", "\n", "\n", "#---->TensorBoard", "\n", "tb_logger", "=", "pl_loggers", ".", "TensorBoardLogger", "(", "log_path", "+", "str", "(", "log_name", ")", ",", "\n", "name", "=", "version_name", ",", "version", "=", "f'fold{cfg.Data.fold}'", ",", "\n", "log_graph", "=", "True", ",", "default_hp_metric", "=", "False", ")", "\n", "#---->CSV", "\n", "csv_logger", "=", "pl_loggers", ".", "CSVLogger", "(", "log_path", "+", "str", "(", "log_name", ")", ",", "\n", "name", "=", "version_name", ",", "version", "=", "f'fold{cfg.Data.fold}'", ",", ")", "\n", "\n", "return", "[", "tb_logger", ",", "csv_logger", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.utils.utils.load_callbacks": [[36, 62], ["output_path.mkdir", "pytorch_lightning.callbacks.early_stopping.EarlyStopping", "Mycallbacks.append", "Mycallbacks.append", "pytorch_lightning.callbacks.ModelCheckpoint", "str"], "function", ["None"], ["def", "load_callbacks", "(", "cfg", ")", ":", "\n", "\n", "    ", "Mycallbacks", "=", "[", "]", "\n", "# Make output path", "\n", "output_path", "=", "cfg", ".", "log_path", "\n", "output_path", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "early_stop_callback", "=", "EarlyStopping", "(", "\n", "monitor", "=", "'val_loss'", ",", "\n", "min_delta", "=", "0.00", ",", "\n", "patience", "=", "cfg", ".", "General", ".", "patience", ",", "\n", "verbose", "=", "True", ",", "\n", "mode", "=", "'min'", "\n", ")", "\n", "Mycallbacks", ".", "append", "(", "early_stop_callback", ")", "\n", "\n", "if", "cfg", ".", "General", ".", "server", "==", "'train'", ":", "\n", "        ", "Mycallbacks", ".", "append", "(", "ModelCheckpoint", "(", "monitor", "=", "'val_loss'", ",", "\n", "dirpath", "=", "str", "(", "cfg", ".", "log_path", ")", ",", "\n", "filename", "=", "'{epoch:02d}-{val_loss:.4f}'", ",", "\n", "verbose", "=", "True", ",", "\n", "save_last", "=", "True", ",", "\n", "save_top_k", "=", "1", ",", "\n", "mode", "=", "'min'", ",", "\n", "save_weights_only", "=", "True", ")", ")", "\n", "", "return", "Mycallbacks", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.utils.utils.cross_entropy_torch": [[66, 71], ["torch.tensor", "torch.tensor", "torch.softmax", "len", "range", "torch.log", "torch.log", "torch.sum", "torch.sum", "len", "range", "len"], "function", ["None"], ["def", "cross_entropy_torch", "(", "x", ",", "y", ")", ":", "\n", "    ", "x_softmax", "=", "[", "F", ".", "softmax", "(", "x", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]", "\n", "x_log", "=", "torch", ".", "tensor", "(", "[", "torch", ".", "log", "(", "x_softmax", "[", "i", "]", "[", "y", "[", "i", "]", "]", ")", "for", "i", "in", "range", "(", "len", "(", "y", ")", ")", "]", ")", "\n", "loss", "=", "-", "torch", ".", "sum", "(", "x_log", ")", "/", "len", "(", "y", ")", "\n", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.datasets.data_interface.DataInterface.__init__": [[10, 27], ["pytorch_lightning.LightningDataModule.__init__", "data_interface.DataInterface.load_data_module"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__", "home.repos.pwc.inspect_result.szc19990412_TransMIL.datasets.data_interface.DataInterface.load_data_module"], ["    ", "def", "__init__", "(", "self", ",", "train_batch_size", "=", "64", ",", "train_num_workers", "=", "8", ",", "test_batch_size", "=", "1", ",", "test_num_workers", "=", "1", ",", "dataset_name", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"[summary]\n\n        Args:\n            batch_size (int, optional): [description]. Defaults to 64.\n            num_workers (int, optional): [description]. Defaults to 8.\n            dataset_name (str, optional): [description]. Defaults to ''.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "train_batch_size", "=", "train_batch_size", "\n", "self", ".", "train_num_workers", "=", "train_num_workers", "\n", "self", ".", "test_batch_size", "=", "test_batch_size", "\n", "self", ".", "test_num_workers", "=", "test_num_workers", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "load_data_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.datasets.data_interface.DataInterface.prepare_data": [[30, 35], ["None"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ")", ":", "\n", "# 1. how to download", "\n", "# MNIST(self.data_dir, train=True, download=True)", "\n", "# MNIST(self.data_dir, train=False, download=True)", "\n", "        ", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.datasets.data_interface.DataInterface.setup": [[36, 57], ["data_interface.DataInterface.instancialize", "data_interface.DataInterface.instancialize", "data_interface.DataInterface.instancialize"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.instancialize", "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.instancialize", "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.instancialize"], ["", "def", "setup", "(", "self", ",", "stage", "=", "None", ")", ":", "\n", "# 2. how to split, argument", "\n", "        ", "\"\"\"  \n        - count number of classes\n\n        - build vocabulary\n\n        - perform train/val/test splits\n\n        - apply transforms (defined explicitly in your datamodule or assigned in init)\n        \"\"\"", "\n", "# Assign train/val datasets for use in dataloaders", "\n", "if", "stage", "==", "'fit'", "or", "stage", "is", "None", ":", "\n", "            ", "self", ".", "train_dataset", "=", "self", ".", "instancialize", "(", "state", "=", "'train'", ")", "\n", "self", ".", "val_dataset", "=", "self", ".", "instancialize", "(", "state", "=", "'val'", ")", "\n", "\n", "\n", "# Assign test dataset for use in dataloader(s)", "\n", "", "if", "stage", "==", "'test'", "or", "stage", "is", "None", ":", "\n", "# self.mnist_test = MNIST(self.data_dir, train=False, transform=self.transform)", "\n", "            ", "self", ".", "test_dataset", "=", "self", ".", "instancialize", "(", "state", "=", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.datasets.data_interface.DataInterface.train_dataloader": [[59, 61], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "train_dataset", ",", "batch_size", "=", "self", ".", "train_batch_size", ",", "num_workers", "=", "self", ".", "train_num_workers", ",", "shuffle", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.datasets.data_interface.DataInterface.val_dataloader": [[62, 64], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "val_dataset", ",", "batch_size", "=", "self", ".", "train_batch_size", ",", "num_workers", "=", "self", ".", "train_num_workers", ",", "shuffle", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.datasets.data_interface.DataInterface.test_dataloader": [[65, 67], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "test_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "test_dataset", ",", "batch_size", "=", "self", ".", "test_batch_size", ",", "num_workers", "=", "self", ".", "test_num_workers", ",", "shuffle", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.datasets.data_interface.DataInterface.load_data_module": [[69, 77], ["getattr", "i.capitalize", "importlib.import_module", "ValueError", "data_interface.DataInterface.dataset_name.split"], "methods", ["None"], ["", "def", "load_data_module", "(", "self", ")", ":", "\n", "        ", "camel_name", "=", "''", ".", "join", "(", "[", "i", ".", "capitalize", "(", ")", "for", "i", "in", "(", "self", ".", "dataset_name", ")", ".", "split", "(", "'_'", ")", "]", ")", "\n", "try", ":", "\n", "            ", "self", ".", "data_module", "=", "getattr", "(", "importlib", ".", "import_module", "(", "\n", "f'datasets.{self.dataset_name}'", ")", ",", "camel_name", ")", "\n", "", "except", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Invalid Dataset File Name or Invalid Class Name!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.datasets.data_interface.DataInterface.instancialize": [[78, 91], ["data_interface.DataInterface.kwargs.keys", "args1.update", "data_interface.DataInterface.data_module", "inspect.getargspec"], "methods", ["None"], ["", "", "def", "instancialize", "(", "self", ",", "**", "other_args", ")", ":", "\n", "        ", "\"\"\" Instancialize a model using the corresponding parameters\n            from self.hparams dictionary. You can also input any args\n            to overwrite the corresponding value in self.kwargs.\n        \"\"\"", "\n", "class_args", "=", "inspect", ".", "getargspec", "(", "self", ".", "data_module", ".", "__init__", ")", ".", "args", "[", "1", ":", "]", "\n", "inkeys", "=", "self", ".", "kwargs", ".", "keys", "(", ")", "\n", "args1", "=", "{", "}", "\n", "for", "arg", "in", "class_args", ":", "\n", "            ", "if", "arg", "in", "inkeys", ":", "\n", "                ", "args1", "[", "arg", "]", "=", "self", ".", "kwargs", "[", "arg", "]", "\n", "", "", "args1", ".", "update", "(", "other_args", ")", "\n", "return", "self", ".", "data_module", "(", "**", "args1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.datasets.camel_data.CamelData.__init__": [[11, 37], ["camel_data.CamelData.__dict__.update", "pandas.read_csv", "locals", "camel_data.CamelData.slide_data.loc[].dropna", "camel_data.CamelData.slide_data.loc[].dropna", "camel_data.CamelData.slide_data.loc[].dropna", "camel_data.CamelData.slide_data.loc[].dropna", "camel_data.CamelData.slide_data.loc[].dropna", "camel_data.CamelData.slide_data.loc[].dropna"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset_cfg", "=", "None", ",", "\n", "state", "=", "None", ")", ":", "\n", "# Set all input args as attributes", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "locals", "(", ")", ")", "\n", "self", ".", "dataset_cfg", "=", "dataset_cfg", "\n", "\n", "#---->data and label", "\n", "self", ".", "nfolds", "=", "self", ".", "dataset_cfg", ".", "nfold", "\n", "self", ".", "fold", "=", "self", ".", "dataset_cfg", ".", "fold", "\n", "self", ".", "feature_dir", "=", "self", ".", "dataset_cfg", ".", "data_dir", "\n", "self", ".", "csv_dir", "=", "self", ".", "dataset_cfg", ".", "label_dir", "+", "f'fold{self.fold}.csv'", "\n", "self", ".", "slide_data", "=", "pd", ".", "read_csv", "(", "self", ".", "csv_dir", ",", "index_col", "=", "0", ")", "\n", "\n", "#---->order", "\n", "self", ".", "shuffle", "=", "self", ".", "dataset_cfg", ".", "data_shuffle", "\n", "\n", "#---->split dataset", "\n", "if", "state", "==", "'train'", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "slide_data", ".", "loc", "[", ":", ",", "'train'", "]", ".", "dropna", "(", ")", "\n", "self", ".", "label", "=", "self", ".", "slide_data", ".", "loc", "[", ":", ",", "'train_label'", "]", ".", "dropna", "(", ")", "\n", "", "if", "state", "==", "'val'", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "slide_data", ".", "loc", "[", ":", ",", "'val'", "]", ".", "dropna", "(", ")", "\n", "self", ".", "label", "=", "self", ".", "slide_data", ".", "loc", "[", ":", ",", "'val_label'", "]", ".", "dropna", "(", ")", "\n", "", "if", "state", "==", "'test'", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "slide_data", ".", "loc", "[", ":", ",", "'test'", "]", ".", "dropna", "(", ")", "\n", "self", ".", "label", "=", "self", ".", "slide_data", ".", "loc", "[", ":", ",", "'test_label'", "]", ".", "dropna", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.datasets.camel_data.CamelData.__len__": [[39, 41], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.datasets.camel_data.CamelData.__getitem__": [[42, 56], ["int", "torch.load", "torch.load", "torch.load", "torch.load", "pathlib.Path", "random.shuffle", "range"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "slide_id", "=", "self", ".", "data", "[", "idx", "]", "\n", "label", "=", "int", "(", "self", ".", "label", "[", "idx", "]", ")", "\n", "full_path", "=", "Path", "(", "self", ".", "feature_dir", ")", "/", "f'{slide_id}.pt'", "\n", "features", "=", "torch", ".", "load", "(", "full_path", ")", "\n", "\n", "#----> shuffle", "\n", "if", "self", ".", "shuffle", "==", "True", ":", "\n", "            ", "index", "=", "[", "x", "for", "x", "in", "range", "(", "features", ".", "shape", "[", "0", "]", ")", "]", "\n", "random", ".", "shuffle", "(", "index", ")", "\n", "features", "=", "features", "[", "index", "]", "\n", "\n", "\n", "", "return", "features", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adahessian.Adahessian.__init__": [[26, 53], ["torch.Generator().manual_seed", "dict", "super().__init__", "adahessian.Adahessian.get_params", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "torch.Generator"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adahessian.Adahessian.get_params"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "0.1", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0.0", ",", "\n", "hessian_power", "=", "1.0", ",", "update_each", "=", "1", ",", "n_samples", "=", "1", ",", "avg_conv_kernel", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid learning rate: {lr}\"", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid epsilon value: {eps}\"", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid beta parameter at index 0: {betas[0]}\"", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid beta parameter at index 1: {betas[1]}\"", ")", "\n", "", "if", "not", "0.0", "<=", "hessian_power", "<=", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid Hessian power value: {hessian_power}\"", ")", "\n", "\n", "", "self", ".", "n_samples", "=", "n_samples", "\n", "self", ".", "update_each", "=", "update_each", "\n", "self", ".", "avg_conv_kernel", "=", "avg_conv_kernel", "\n", "\n", "# use a separate generator that deterministically generates the same `z`s across all GPUs in case of distributed training", "\n", "self", ".", "seed", "=", "2147483647", "\n", "self", ".", "generator", "=", "torch", ".", "Generator", "(", ")", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "\n", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "hessian_power", "=", "hessian_power", ")", "\n", "super", "(", "Adahessian", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "for", "p", "in", "self", ".", "get_params", "(", ")", ":", "\n", "            ", "p", ".", "hess", "=", "0.0", "\n", "self", ".", "state", "[", "p", "]", "[", "\"hessian step\"", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adahessian.Adahessian.is_second_order": [[54, 57], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_second_order", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adahessian.Adahessian.get_params": [[58, 64], ["None"], "methods", ["None"], ["", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Gets all parameters in all param_groups with gradients\n        \"\"\"", "\n", "\n", "return", "(", "p", "for", "group", "in", "self", ".", "param_groups", "for", "p", "in", "group", "[", "'params'", "]", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adahessian.Adahessian.zero_hessian": [[65, 73], ["adahessian.Adahessian.get_params", "p.hess.zero_", "isinstance"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adahessian.Adahessian.get_params"], ["", "def", "zero_hessian", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Zeros out the accumalated hessian traces.\n        \"\"\"", "\n", "\n", "for", "p", "in", "self", ".", "get_params", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "p", ".", "hess", ",", "float", ")", "and", "self", ".", "state", "[", "p", "]", "[", "\"hessian step\"", "]", "%", "self", ".", "update_each", "==", "0", ":", "\n", "                ", "p", ".", "hess", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adahessian.Adahessian.set_hessian": [[74, 101], ["torch.no_grad", "filter", "range", "adahessian.Adahessian.get_params", "len", "torch.Generator().manual_seed", "torch.autograd.grad", "zip", "params.append", "torch.Generator", "torch.randint", "p.size"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adahessian.Adahessian.get_params"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "set_hessian", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Computes the Hutchinson approximation of the hessian trace and accumulates it for each trainable parameter.\n        \"\"\"", "\n", "\n", "params", "=", "[", "]", "\n", "for", "p", "in", "filter", "(", "lambda", "p", ":", "p", ".", "grad", "is", "not", "None", ",", "self", ".", "get_params", "(", ")", ")", ":", "\n", "            ", "if", "self", ".", "state", "[", "p", "]", "[", "\"hessian step\"", "]", "%", "self", ".", "update_each", "==", "0", ":", "# compute the trace only each `update_each` step", "\n", "                ", "params", ".", "append", "(", "p", ")", "\n", "", "self", ".", "state", "[", "p", "]", "[", "\"hessian step\"", "]", "+=", "1", "\n", "\n", "", "if", "len", "(", "params", ")", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "generator", ".", "device", "!=", "params", "[", "0", "]", ".", "device", ":", "# hackish way of casting the generator to the right device", "\n", "            ", "self", ".", "generator", "=", "torch", ".", "Generator", "(", "params", "[", "0", "]", ".", "device", ")", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "\n", "", "grads", "=", "[", "p", ".", "grad", "for", "p", "in", "params", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_samples", ")", ":", "\n", "# Rademacher distribution {-1.0, 1.0}", "\n", "            ", "zs", "=", "[", "torch", ".", "randint", "(", "0", ",", "2", ",", "p", ".", "size", "(", ")", ",", "generator", "=", "self", ".", "generator", ",", "device", "=", "p", ".", "device", ")", "*", "2.0", "-", "1.0", "for", "p", "in", "params", "]", "\n", "h_zs", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "grads", ",", "params", ",", "grad_outputs", "=", "zs", ",", "only_inputs", "=", "True", ",", "retain_graph", "=", "i", "<", "self", ".", "n_samples", "-", "1", ")", "\n", "for", "h_z", ",", "z", ",", "p", "in", "zip", "(", "h_zs", ",", "zs", ",", "params", ")", ":", "\n", "                ", "p", ".", "hess", "+=", "h_z", "*", "z", "/", "self", ".", "n_samples", "# approximate the expected values of z*(H@z)", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adahessian.Adahessian.step": [[102, 157], ["torch.no_grad", "adahessian.Adahessian.zero_hessian", "adahessian.Adahessian.set_hessian", "closure", "p.mul_", "exp_avg.mul_().add_", "exp_hessian_diag_sq.mul_().addcmul_", "p.addcdiv_", "torch.abs().mean().expand_as().clone", "len", "torch.zeros_like", "torch.zeros_like", "p.dim", "exp_avg.mul_", "exp_hessian_diag_sq.mul_", "torch.abs().mean().expand_as", "torch.abs().mean", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adahessian.Adahessian.zero_hessian", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adahessian.Adahessian.set_hessian"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Performs a single optimization step.\n        Arguments:\n            closure (callable, optional) -- a closure that reevaluates the model and returns the loss (default: None)\n        \"\"\"", "\n", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "self", ".", "zero_hessian", "(", ")", "\n", "self", ".", "set_hessian", "(", ")", "\n", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", "or", "p", ".", "hess", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "self", ".", "avg_conv_kernel", "and", "p", ".", "dim", "(", ")", "==", "4", ":", "\n", "                    ", "p", ".", "hess", "=", "torch", ".", "abs", "(", "p", ".", "hess", ")", ".", "mean", "(", "dim", "=", "[", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "p", ".", "hess", ")", ".", "clone", "(", ")", "\n", "\n", "# Perform correct stepweight decay as in AdamW", "\n", "", "p", ".", "mul_", "(", "1", "-", "group", "[", "'lr'", "]", "*", "group", "[", "'weight_decay'", "]", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "1", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ")", "\n", "# Exponential moving average of Hessian diagonal square values", "\n", "state", "[", "'exp_hessian_diag_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ")", "\n", "\n", "", "exp_avg", ",", "exp_hessian_diag_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_hessian_diag_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "p", ".", "grad", ",", "alpha", "=", "1", "-", "beta1", ")", "\n", "exp_hessian_diag_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "p", ".", "hess", ",", "p", ".", "hess", ",", "value", "=", "1", "-", "beta2", ")", "\n", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "\n", "k", "=", "group", "[", "'hessian_power'", "]", "\n", "denom", "=", "(", "exp_hessian_diag_sq", "/", "bias_correction2", ")", ".", "pow_", "(", "k", "/", "2", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "# make update", "\n", "step_size", "=", "group", "[", "'lr'", "]", "/", "bias_correction1", "\n", "p", ".", "addcdiv_", "(", "exp_avg", ",", "denom", ",", "value", "=", "-", "step_size", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adamw.AdamW.__init__": [[36, 49], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "1e-2", ",", "amsgrad", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adamw.AdamW.__setstate__": [[50, 54], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.rmsprop_tf.RMSpropTF.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsgrad'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adamw.AdamW.step": [[55, 118], ["closure", "p.data.mul_", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.max", "torch.zeros_like", "exp_avg.mul_", "exp_avg_sq.mul_", "max_exp_avg_sq.sqrt", "math.sqrt", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "# Perform stepweight decay", "\n", "", "p", ".", "data", ".", "mul_", "(", "1", "-", "group", "[", "'lr'", "]", "*", "group", "[", "'weight_decay'", "]", ")", "\n", "\n", "# Perform optimization step", "\n", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "(", "max_exp_avg_sq", ".", "sqrt", "(", ")", "/", "math", ".", "sqrt", "(", "bias_correction2", ")", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "(", "exp_avg_sq", ".", "sqrt", "(", ")", "/", "math", ".", "sqrt", "(", "bias_correction2", ")", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "step_size", "=", "group", "[", "'lr'", "]", "/", "bias_correction1", "\n", "\n", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.sgdp.SGDP.__init__": [[17, 22], ["dict", "torch.optim.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "required", ",", "momentum", "=", "0", ",", "dampening", "=", "0", ",", "\n", "weight_decay", "=", "0", ",", "nesterov", "=", "False", ",", "eps", "=", "1e-8", ",", "delta", "=", "0.1", ",", "wd_ratio", "=", "0.1", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "dampening", "=", "dampening", ",", "weight_decay", "=", "weight_decay", ",", "\n", "nesterov", "=", "nesterov", ",", "eps", "=", "eps", ",", "delta", "=", "delta", ",", "wd_ratio", "=", "wd_ratio", ")", "\n", "super", "(", "SGDP", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.sgdp.SGDP._channel_view": [[23, 25], ["x.view", "x.size"], "methods", ["None"], ["", "def", "_channel_view", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.sgdp.SGDP._layer_view": [[26, 28], ["x.view"], "methods", ["None"], ["", "def", "_layer_view", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.sgdp.SGDP._cosine_similarity": [[29, 38], ["view_func", "view_func", "view_func.norm().add_", "view_func.norm().add_", "view_func.norm", "view_func.norm", "dot.abs"], "methods", ["None"], ["", "def", "_cosine_similarity", "(", "self", ",", "x", ",", "y", ",", "eps", ",", "view_func", ")", ":", "\n", "        ", "x", "=", "view_func", "(", "x", ")", "\n", "y", "=", "view_func", "(", "y", ")", "\n", "\n", "x_norm", "=", "x", ".", "norm", "(", "dim", "=", "1", ")", ".", "add_", "(", "eps", ")", "\n", "y_norm", "=", "y", ".", "norm", "(", "dim", "=", "1", ")", ".", "add_", "(", "eps", ")", "\n", "dot", "=", "(", "x", "*", "y", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "return", "dot", ".", "abs", "(", ")", "/", "x_norm", "/", "y_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.sgdp.SGDP._projection": [[39, 54], ["sgdp.SGDP._cosine_similarity", "sgdp.SGDP.max", "len", "math.sqrt", "view_func().norm().view().add_", "view_func().sum().view", "view_func().size", "view_func().norm().view", "view_func().sum", "view_func", "view_func().norm", "view_func", "view_func"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adamp.AdamP._cosine_similarity"], ["", "def", "_projection", "(", "self", ",", "p", ",", "grad", ",", "perturb", ",", "delta", ",", "wd_ratio", ",", "eps", ")", ":", "\n", "        ", "wd", "=", "1", "\n", "expand_size", "=", "[", "-", "1", "]", "+", "[", "1", "]", "*", "(", "len", "(", "p", ".", "shape", ")", "-", "1", ")", "\n", "for", "view_func", "in", "[", "self", ".", "_channel_view", ",", "self", ".", "_layer_view", "]", ":", "\n", "\n", "            ", "cosine_sim", "=", "self", ".", "_cosine_similarity", "(", "grad", ",", "p", ".", "data", ",", "eps", ",", "view_func", ")", "\n", "\n", "if", "cosine_sim", ".", "max", "(", ")", "<", "delta", "/", "math", ".", "sqrt", "(", "view_func", "(", "p", ".", "data", ")", ".", "size", "(", "1", ")", ")", ":", "\n", "                ", "p_n", "=", "p", ".", "data", "/", "view_func", "(", "p", ".", "data", ")", ".", "norm", "(", "dim", "=", "1", ")", ".", "view", "(", "expand_size", ")", ".", "add_", "(", "eps", ")", "\n", "perturb", "-=", "p_n", "*", "view_func", "(", "p_n", "*", "perturb", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "view", "(", "expand_size", ")", "\n", "wd", "=", "wd_ratio", "\n", "\n", "return", "perturb", ",", "wd", "\n", "\n", "", "", "return", "perturb", ",", "wd", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.sgdp.SGDP.step": [[55, 97], ["closure", "buf.mul_().add_", "p.data.add_", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "len", "sgdp.SGDP._projection", "p.data.mul_", "buf.mul_"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adamp.AdamP._projection"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "dampening", "=", "group", "[", "'dampening'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'momentum'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "# SGD", "\n", "", "buf", "=", "state", "[", "'momentum'", "]", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "1", "-", "dampening", ",", "grad", ")", "\n", "if", "nesterov", ":", "\n", "                    ", "d_p", "=", "grad", "+", "momentum", "*", "buf", "\n", "", "else", ":", "\n", "                    ", "d_p", "=", "buf", "\n", "\n", "# Projection", "\n", "", "wd_ratio", "=", "1", "\n", "if", "len", "(", "p", ".", "shape", ")", ">", "1", ":", "\n", "                    ", "d_p", ",", "wd_ratio", "=", "self", ".", "_projection", "(", "p", ",", "grad", ",", "d_p", ",", "group", "[", "'delta'", "]", ",", "group", "[", "'wd_ratio'", "]", ",", "group", "[", "'eps'", "]", ")", "\n", "\n", "# Weight decay", "\n", "", "if", "weight_decay", "!=", "0", ":", "\n", "                    ", "p", ".", "data", ".", "mul_", "(", "1", "-", "group", "[", "'lr'", "]", "*", "group", "[", "'weight_decay'", "]", "*", "wd_ratio", "/", "(", "1", "-", "momentum", ")", ")", "\n", "\n", "# Step", "\n", "", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'lr'", "]", ",", "d_p", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.nvnovograd.NvNovoGrad.__init__": [[32, 48], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.95", ",", "0.98", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "grad_averaging", "=", "False", ",", "amsgrad", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "grad_averaging", "=", "grad_averaging", ",", "\n", "amsgrad", "=", "amsgrad", ")", "\n", "\n", "super", "(", "NvNovoGrad", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.nvnovograd.NvNovoGrad.__setstate__": [[49, 53], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.rmsprop_tf.RMSpropTF.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "NvNovoGrad", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsgrad'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.nvnovograd.NvNovoGrad.step": [[54, 119], ["closure", "torch.sum", "grad.div_", "exp_avg.mul_().add_", "p.data.add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros().to", "torch.pow", "exp_avg_sq.copy_", "exp_avg_sq.mul_().add_", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "grad.add_", "grad.mul_", "torch.zeros().to", "exp_avg.mul_", "torch.zeros", "exp_avg_sq.mul_", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt", "torch.zeros"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n            and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Sparse gradients are not supported.'", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros", "(", "[", "]", ")", ".", "to", "(", "state", "[", "'exp_avg'", "]", ".", "device", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros", "(", "[", "]", ")", ".", "to", "(", "state", "[", "'exp_avg'", "]", ".", "device", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "norm", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "grad", ",", "2", ")", ")", "\n", "\n", "if", "exp_avg_sq", "==", "0", ":", "\n", "                    ", "exp_avg_sq", ".", "copy_", "(", "norm", ")", "\n", "", "else", ":", "\n", "                    ", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "add_", "(", "1", "-", "beta2", ",", "norm", ")", "\n", "\n", "", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "grad", ".", "div_", "(", "denom", ")", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", ".", "add_", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "", "if", "group", "[", "'grad_averaging'", "]", ":", "\n", "                    ", "grad", ".", "mul_", "(", "1", "-", "beta1", ")", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "grad", ")", "\n", "\n", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'lr'", "]", ",", "exp_avg", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.nadam.Nadam.__init__": [[28, 33], ["dict", "torch.optim.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "2e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "schedule_decay", "=", "4e-3", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "schedule_decay", "=", "schedule_decay", ")", "\n", "super", "(", "Nadam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.nadam.Nadam.step": [[34, 89], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "exp_avg_sq_prime.sqrt_().add_", "p.data.addcdiv_", "p.data.addcdiv_", "len", "grad.add.add.new().resize_as_().zero_", "grad.add.add.new().resize_as_().zero_", "grad.add.add.add", "exp_avg.mul_", "exp_avg_sq.mul_", "exp_avg_sq_prime.sqrt_", "grad.add.add.new().resize_as_", "grad.add.add.new().resize_as_", "grad.add.add.new", "grad.add.add.new"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'m_schedule'", "]", "=", "1.", "\n", "state", "[", "'exp_avg'", "]", "=", "grad", ".", "new", "(", ")", ".", "resize_as_", "(", "grad", ")", ".", "zero_", "(", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "grad", ".", "new", "(", ")", ".", "resize_as_", "(", "grad", ")", ".", "zero_", "(", ")", "\n", "\n", "# Warming momentum schedule", "\n", "", "m_schedule", "=", "state", "[", "'m_schedule'", "]", "\n", "schedule_decay", "=", "group", "[", "'schedule_decay'", "]", "\n", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "eps", "=", "group", "[", "'eps'", "]", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "t", "=", "state", "[", "'step'", "]", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", "=", "grad", ".", "add", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "", "momentum_cache_t", "=", "beta1", "*", "(", "1.", "-", "0.5", "*", "(", "0.96", "**", "(", "t", "*", "schedule_decay", ")", ")", ")", "\n", "momentum_cache_t_1", "=", "beta1", "*", "(", "1.", "-", "0.5", "*", "(", "0.96", "**", "(", "(", "t", "+", "1", ")", "*", "schedule_decay", ")", ")", ")", "\n", "m_schedule_new", "=", "m_schedule", "*", "momentum_cache_t", "\n", "m_schedule_next", "=", "m_schedule", "*", "momentum_cache_t", "*", "momentum_cache_t_1", "\n", "state", "[", "'m_schedule'", "]", "=", "m_schedule_new", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1.", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1.", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg_sq_prime", "=", "exp_avg_sq", "/", "(", "1.", "-", "beta2", "**", "t", ")", "\n", "denom", "=", "exp_avg_sq_prime", ".", "sqrt_", "(", ")", ".", "add_", "(", "eps", ")", "\n", "\n", "p", ".", "data", ".", "addcdiv_", "(", "-", "group", "[", "'lr'", "]", "*", "(", "1.", "-", "momentum_cache_t", ")", "/", "(", "1.", "-", "m_schedule_new", ")", ",", "grad", ",", "denom", ")", "\n", "p", ".", "data", ".", "addcdiv_", "(", "-", "group", "[", "'lr'", "]", "*", "momentum_cache_t_1", "/", "(", "1.", "-", "m_schedule_next", ")", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.optim_factory.add_weight_decay": [[25, 38], ["model.named_parameters", "name.endswith", "no_decay.append", "decay.append", "len"], "function", ["None"], ["", "def", "add_weight_decay", "(", "model", ",", "weight_decay", "=", "1e-5", ",", "skip_list", "=", "(", ")", ")", ":", "\n", "    ", "decay", "=", "[", "]", "\n", "no_decay", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "# frozen weights", "\n", "", "if", "len", "(", "param", ".", "shape", ")", "==", "1", "or", "name", ".", "endswith", "(", "\".bias\"", ")", "or", "name", "in", "skip_list", ":", "\n", "            ", "no_decay", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "decay", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "\n", "{", "'params'", ":", "no_decay", ",", "'weight_decay'", ":", "0.", "}", ",", "\n", "{", "'params'", ":", "decay", ",", "'weight_decay'", ":", "weight_decay", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.optim_factory.create_optimizer": [[40, 123], ["args.opt.lower", "dict", "args.opt.lower.split", "hasattr", "optim_factory.add_weight_decay", "model.parameters", "hasattr", "hasattr", "dict.pop", "torch.optim.SGD", "len", "model.no_weight_decay", "torch.cuda.is_available", "dict.pop", "torch.optim.SGD", "lookahead.Lookahead", "torch.optim.Adam", "torch.optim.AdamW", "nadam.Nadam", "radam.RAdam", "adamp.AdamP", "sgdp.SGDP", "torch.optim.Adadelta", "adafactor.Adafactor", "adahessian.Adahessian", "torch.optim.RMSprop", "rmsprop_tf.RMSpropTF", "novograd.NovoGrad", "nvnovograd.NvNovoGrad", "dict.pop", "FusedSGD", "dict.pop", "FusedSGD", "FusedAdam", "FusedAdam", "FusedLAMB", "dict.setdefault", "FusedNovoGrad"], "function", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.optim_factory.add_weight_decay"], ["", "def", "create_optimizer", "(", "args", ",", "model", ",", "filter_bias_and_bn", "=", "True", ")", ":", "\n", "    ", "opt_lower", "=", "args", ".", "opt", ".", "lower", "(", ")", "\n", "weight_decay", "=", "args", ".", "weight_decay", "\n", "if", "weight_decay", "and", "filter_bias_and_bn", ":", "\n", "        ", "skip", "=", "{", "}", "\n", "if", "hasattr", "(", "model", ",", "'no_weight_decay'", ")", ":", "\n", "            ", "skip", "=", "model", ".", "no_weight_decay", "(", ")", "\n", "", "parameters", "=", "add_weight_decay", "(", "model", ",", "weight_decay", ",", "skip", ")", "\n", "weight_decay", "=", "0.", "\n", "", "else", ":", "\n", "        ", "parameters", "=", "model", ".", "parameters", "(", ")", "\n", "\n", "", "if", "'fused'", "in", "opt_lower", ":", "\n", "        ", "assert", "has_apex", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "'APEX and CUDA required for fused optimizers'", "\n", "\n", "", "opt_args", "=", "dict", "(", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "if", "hasattr", "(", "args", ",", "'opt_eps'", ")", "and", "args", ".", "opt_eps", "is", "not", "None", ":", "\n", "        ", "opt_args", "[", "'eps'", "]", "=", "args", ".", "opt_eps", "\n", "", "if", "hasattr", "(", "args", ",", "'opt_betas'", ")", "and", "args", ".", "opt_betas", "is", "not", "None", ":", "\n", "        ", "opt_args", "[", "'betas'", "]", "=", "args", ".", "opt_betas", "\n", "# if hasattr(args, 'opt_args') and args.opt_args is not None:", "\n", "#     opt_args.update(args.opt_args)", "\n", "\n", "", "opt_split", "=", "opt_lower", ".", "split", "(", "'_'", ")", "\n", "opt_lower", "=", "opt_split", "[", "-", "1", "]", "\n", "if", "opt_lower", "==", "'sgd'", "or", "opt_lower", "==", "'nesterov'", ":", "\n", "        ", "opt_args", ".", "pop", "(", "'eps'", ",", "None", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "parameters", ",", "momentum", "=", "args", ".", "momentum", ",", "nesterov", "=", "True", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'momentum'", ":", "\n", "        ", "opt_args", ".", "pop", "(", "'eps'", ",", "None", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "parameters", ",", "momentum", "=", "args", ".", "momentum", ",", "nesterov", "=", "False", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'adamw'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "AdamW", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'nadam'", ":", "\n", "        ", "optimizer", "=", "Nadam", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'radam'", ":", "\n", "        ", "optimizer", "=", "RAdam", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'adamp'", ":", "\n", "        ", "optimizer", "=", "AdamP", "(", "parameters", ",", "wd_ratio", "=", "0.01", ",", "nesterov", "=", "True", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'sgdp'", ":", "\n", "        ", "optimizer", "=", "SGDP", "(", "parameters", ",", "momentum", "=", "args", ".", "momentum", ",", "nesterov", "=", "True", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'adadelta'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adadelta", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'adafactor'", ":", "\n", "        ", "if", "not", "args", ".", "lr", ":", "\n", "            ", "opt_args", "[", "'lr'", "]", "=", "None", "\n", "", "optimizer", "=", "Adafactor", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'adahessian'", ":", "\n", "        ", "optimizer", "=", "Adahessian", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'rmsprop'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "RMSprop", "(", "parameters", ",", "alpha", "=", "0.9", ",", "momentum", "=", "args", ".", "momentum", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'rmsproptf'", ":", "\n", "        ", "optimizer", "=", "RMSpropTF", "(", "parameters", ",", "alpha", "=", "0.9", ",", "momentum", "=", "args", ".", "momentum", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'novograd'", ":", "\n", "        ", "optimizer", "=", "NovoGrad", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'nvnovograd'", ":", "\n", "        ", "optimizer", "=", "NvNovoGrad", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'fusedsgd'", ":", "\n", "        ", "opt_args", ".", "pop", "(", "'eps'", ",", "None", ")", "\n", "optimizer", "=", "FusedSGD", "(", "parameters", ",", "momentum", "=", "args", ".", "momentum", ",", "nesterov", "=", "True", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'fusedmomentum'", ":", "\n", "        ", "opt_args", ".", "pop", "(", "'eps'", ",", "None", ")", "\n", "optimizer", "=", "FusedSGD", "(", "parameters", ",", "momentum", "=", "args", ".", "momentum", ",", "nesterov", "=", "False", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'fusedadam'", ":", "\n", "        ", "optimizer", "=", "FusedAdam", "(", "parameters", ",", "adam_w_mode", "=", "False", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'fusedadamw'", ":", "\n", "        ", "optimizer", "=", "FusedAdam", "(", "parameters", ",", "adam_w_mode", "=", "True", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'fusedlamb'", ":", "\n", "        ", "optimizer", "=", "FusedLAMB", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'fusednovograd'", ":", "\n", "        ", "opt_args", ".", "setdefault", "(", "'betas'", ",", "(", "0.95", ",", "0.98", ")", ")", "\n", "optimizer", "=", "FusedNovoGrad", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "and", "\"Invalid optimizer\"", "\n", "raise", "ValueError", "\n", "\n", "", "if", "len", "(", "opt_split", ")", ">", "1", ":", "\n", "        ", "if", "opt_split", "[", "0", "]", "==", "'lookahead'", ":", "\n", "            ", "optimizer", "=", "Lookahead", "(", "optimizer", ")", "\n", "\n", "", "", "return", "optimizer", "\n", "", ""]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.radam.RAdam.__init__": [[12, 16], ["dict", "torch.optim.optimizer.Optimizer.__init__", "range"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "self", ".", "buffer", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "ind", "in", "range", "(", "10", ")", "]", "\n", "super", "(", "RAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.radam.RAdam.__setstate__": [[17, 19], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.rmsprop_tf.RMSpropTF.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "RAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.radam.RAdam.step": [[20, 86], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "int", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'RAdam does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "buffered", "=", "self", ".", "buffer", "[", "int", "(", "state", "[", "'step'", "]", "%", "10", ")", "]", "\n", "if", "state", "[", "'step'", "]", "==", "buffered", "[", "0", "]", ":", "\n", "                    ", "N_sma", ",", "step_size", "=", "buffered", "[", "1", "]", ",", "buffered", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "buffered", "[", "0", "]", "=", "state", "[", "'step'", "]", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "buffered", "[", "1", "]", "=", "N_sma", "\n", "\n", "# more conservative since it's an approximated value", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                        ", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "\n", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "\n", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "step_size", "=", "group", "[", "'lr'", "]", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "buffered", "[", "2", "]", "=", "step_size", "\n", "\n", "", "if", "group", "[", "'weight_decay'", "]", "!=", "0", "and", "group", "[", "'weight_decay'", "]", "is", "not", "None", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "# more conservative since it's an approximated value", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "", "else", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "step_size", ",", "exp_avg", ")", "\n", "\n", "", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.radam.PlainRAdam.__init__": [[90, 94], ["dict", "torch.optim.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "super", "(", "PlainRAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.radam.PlainRAdam.__setstate__": [[95, 97], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.rmsprop_tf.RMSpropTF.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "PlainRAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.radam.PlainRAdam.step": [[98, 153], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "math.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'RAdam does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "# more conservative since it's an approximated value", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "\n", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "\n", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "", "else", ":", "\n", "                    ", "step_size", "=", "group", "[", "'lr'", "]", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "p_data_fp32", ".", "add_", "(", "-", "step_size", ",", "exp_avg", ")", "\n", "\n", "", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.lookahead.Lookahead.__init__": [[13, 28], ["dict", "lookahead.Lookahead.defaults.update", "collections.defaultdict", "dict.items", "ValueError", "ValueError", "group.setdefault"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_optimizer", ",", "alpha", "=", "0.5", ",", "k", "=", "6", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "alpha", "<=", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid slow update rate: {alpha}'", ")", "\n", "", "if", "not", "1", "<=", "k", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid lookahead steps: {k}'", ")", "\n", "", "defaults", "=", "dict", "(", "lookahead_alpha", "=", "alpha", ",", "lookahead_k", "=", "k", ",", "lookahead_step", "=", "0", ")", "\n", "self", ".", "base_optimizer", "=", "base_optimizer", "\n", "self", ".", "param_groups", "=", "self", ".", "base_optimizer", ".", "param_groups", "\n", "self", ".", "defaults", "=", "base_optimizer", ".", "defaults", "\n", "self", ".", "defaults", ".", "update", "(", "defaults", ")", "\n", "self", ".", "state", "=", "defaultdict", "(", "dict", ")", "\n", "# manually add our defaults to the param groups", "\n", "for", "name", ",", "default", "in", "defaults", ".", "items", "(", ")", ":", "\n", "            ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "                ", "group", ".", "setdefault", "(", "name", ",", "default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.lookahead.Lookahead.update_slow": [[29, 40], ["slow.add_", "fast_p.data.copy_", "torch.empty_like", "param_state[].copy_"], "methods", ["None"], ["", "", "", "def", "update_slow", "(", "self", ",", "group", ")", ":", "\n", "        ", "for", "fast_p", "in", "group", "[", "\"params\"", "]", ":", "\n", "            ", "if", "fast_p", ".", "grad", "is", "None", ":", "\n", "                ", "continue", "\n", "", "param_state", "=", "self", ".", "state", "[", "fast_p", "]", "\n", "if", "'slow_buffer'", "not", "in", "param_state", ":", "\n", "                ", "param_state", "[", "'slow_buffer'", "]", "=", "torch", ".", "empty_like", "(", "fast_p", ".", "data", ")", "\n", "param_state", "[", "'slow_buffer'", "]", ".", "copy_", "(", "fast_p", ".", "data", ")", "\n", "", "slow", "=", "param_state", "[", "'slow_buffer'", "]", "\n", "slow", ".", "add_", "(", "group", "[", "'lookahead_alpha'", "]", ",", "fast_p", ".", "data", "-", "slow", ")", "\n", "fast_p", ".", "data", ".", "copy_", "(", "slow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.lookahead.Lookahead.sync_lookahead": [[41, 44], ["lookahead.Lookahead.update_slow"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.lookahead.Lookahead.update_slow"], ["", "", "def", "sync_lookahead", "(", "self", ")", ":", "\n", "        ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "self", ".", "update_slow", "(", "group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.lookahead.Lookahead.step": [[45, 53], ["lookahead.Lookahead.base_optimizer.step", "lookahead.Lookahead.update_slow"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adafactor.Adafactor.step", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.lookahead.Lookahead.update_slow"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "#assert id(self.param_groups) == id(self.base_optimizer.param_groups)", "\n", "        ", "loss", "=", "self", ".", "base_optimizer", ".", "step", "(", "closure", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", "[", "'lookahead_step'", "]", "+=", "1", "\n", "if", "group", "[", "'lookahead_step'", "]", "%", "group", "[", "'lookahead_k'", "]", "==", "0", ":", "\n", "                ", "self", ".", "update_slow", "(", "group", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.lookahead.Lookahead.state_dict": [[54, 66], ["lookahead.Lookahead.base_optimizer.state_dict", "isinstance", "id", "lookahead.Lookahead.state.items"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.lookahead.Lookahead.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "fast_state_dict", "=", "self", ".", "base_optimizer", ".", "state_dict", "(", ")", "\n", "slow_state", "=", "{", "\n", "(", "id", "(", "k", ")", "if", "isinstance", "(", "k", ",", "torch", ".", "Tensor", ")", "else", "k", ")", ":", "v", "\n", "for", "k", ",", "v", "in", "self", ".", "state", ".", "items", "(", ")", "\n", "}", "\n", "fast_state", "=", "fast_state_dict", "[", "'state'", "]", "\n", "param_groups", "=", "fast_state_dict", "[", "'param_groups'", "]", "\n", "return", "{", "\n", "'state'", ":", "fast_state", ",", "\n", "'slow_state'", ":", "slow_state", ",", "\n", "'param_groups'", ":", "param_groups", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.lookahead.Lookahead.load_state_dict": [[68, 93], ["lookahead.Lookahead.base_optimizer.load_state_dict", "super().load_state_dict", "print", "collections.defaultdict", "lookahead.Lookahead.defaults.items", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.lookahead.Lookahead.load_state_dict", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.lookahead.Lookahead.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "fast_state_dict", "=", "{", "\n", "'state'", ":", "state_dict", "[", "'state'", "]", ",", "\n", "'param_groups'", ":", "state_dict", "[", "'param_groups'", "]", ",", "\n", "}", "\n", "self", ".", "base_optimizer", ".", "load_state_dict", "(", "fast_state_dict", ")", "\n", "\n", "# We want to restore the slow state, but share param_groups reference", "\n", "# with base_optimizer. This is a bit redundant but least code", "\n", "slow_state_new", "=", "False", "\n", "if", "'slow_state'", "not", "in", "state_dict", ":", "\n", "            ", "print", "(", "'Loading state_dict from optimizer without Lookahead applied.'", ")", "\n", "state_dict", "[", "'slow_state'", "]", "=", "defaultdict", "(", "dict", ")", "\n", "slow_state_new", "=", "True", "\n", "", "slow_state_dict", "=", "{", "\n", "'state'", ":", "state_dict", "[", "'slow_state'", "]", ",", "\n", "'param_groups'", ":", "state_dict", "[", "'param_groups'", "]", ",", "# this is pointless but saves code", "\n", "}", "\n", "super", "(", "Lookahead", ",", "self", ")", ".", "load_state_dict", "(", "slow_state_dict", ")", "\n", "self", ".", "param_groups", "=", "self", ".", "base_optimizer", ".", "param_groups", "# make both ref same container", "\n", "if", "slow_state_new", ":", "\n", "# reapply defaults to catch missing lookahead specific ones", "\n", "            ", "for", "name", ",", "default", "in", "self", ".", "defaults", ".", "items", "(", ")", ":", "\n", "                ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "                    ", "group", ".", "setdefault", "(", "name", ",", "default", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.rmsprop_tf.RMSpropTF.__init__": [[48, 64], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-2", ",", "alpha", "=", "0.9", ",", "eps", "=", "1e-10", ",", "weight_decay", "=", "0", ",", "momentum", "=", "0.", ",", "centered", "=", "False", ",", "\n", "decoupled_decay", "=", "False", ",", "lr_in_momentum", "=", "True", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "momentum", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid momentum value: {}\"", ".", "format", "(", "momentum", ")", ")", "\n", "", "if", "not", "0.0", "<=", "weight_decay", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid weight_decay value: {}\"", ".", "format", "(", "weight_decay", ")", ")", "\n", "", "if", "not", "0.0", "<=", "alpha", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid alpha value: {}\"", ".", "format", "(", "alpha", ")", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "alpha", "=", "alpha", ",", "eps", "=", "eps", ",", "centered", "=", "centered", ",", "weight_decay", "=", "weight_decay", ",", "\n", "decoupled_decay", "=", "decoupled_decay", ",", "lr_in_momentum", "=", "lr_in_momentum", ")", "\n", "super", "(", "RMSpropTF", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.rmsprop_tf.RMSpropTF.__setstate__": [[65, 70], ["super().__setstate__", "group.setdefault", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.rmsprop_tf.RMSpropTF.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "RMSpropTF", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'momentum'", ",", "0", ")", "\n", "group", ".", "setdefault", "(", "'centered'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.rmsprop_tf.RMSpropTF.step": [[71, 137], ["closure", "square_avg.add_", "RuntimeError", "len", "torch.ones_like", "grad_avg.add_", "square_avg.addcmul().add().sqrt_", "square_avg.add().sqrt_", "p.data.addcdiv_", "torch.zeros_like", "torch.zeros_like", "p.data.add_", "grad.add.add.add", "grad.add.add.pow", "buf.mul_().addcdiv_", "p.data.add_", "buf.mul_().addcdiv_", "p.data.add_", "square_avg.addcmul().add", "square_avg.add", "buf.mul_", "buf.mul_", "square_avg.addcmul"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'RMSprop does not support sparse gradients'", ")", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'square_avg'", "]", "=", "torch", ".", "ones_like", "(", "p", ".", "data", ")", "# PyTorch inits to zero", "\n", "if", "group", "[", "'momentum'", "]", ">", "0", ":", "\n", "                        ", "state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "", "if", "group", "[", "'centered'", "]", ":", "\n", "                        ", "state", "[", "'grad_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "square_avg", "=", "state", "[", "'square_avg'", "]", "\n", "one_minus_alpha", "=", "1.", "-", "group", "[", "'alpha'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "if", "'decoupled_decay'", "in", "group", "and", "group", "[", "'decoupled_decay'", "]", ":", "\n", "                        ", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "", "else", ":", "\n", "                        ", "grad", "=", "grad", ".", "add", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "# Tensorflow order of ops for updating squared avg", "\n", "", "", "square_avg", ".", "add_", "(", "one_minus_alpha", ",", "grad", ".", "pow", "(", "2", ")", "-", "square_avg", ")", "\n", "# square_avg.mul_(alpha).addcmul_(1 - alpha, grad, grad)  # PyTorch original", "\n", "\n", "if", "group", "[", "'centered'", "]", ":", "\n", "                    ", "grad_avg", "=", "state", "[", "'grad_avg'", "]", "\n", "grad_avg", ".", "add_", "(", "one_minus_alpha", ",", "grad", "-", "grad_avg", ")", "\n", "# grad_avg.mul_(alpha).add_(1 - alpha, grad)  # PyTorch original", "\n", "avg", "=", "square_avg", ".", "addcmul", "(", "-", "1", ",", "grad_avg", ",", "grad_avg", ")", ".", "add", "(", "group", "[", "'eps'", "]", ")", ".", "sqrt_", "(", ")", "# eps moved in sqrt", "\n", "", "else", ":", "\n", "                    ", "avg", "=", "square_avg", ".", "add", "(", "group", "[", "'eps'", "]", ")", ".", "sqrt_", "(", ")", "# eps moved in sqrt", "\n", "\n", "", "if", "group", "[", "'momentum'", "]", ">", "0", ":", "\n", "                    ", "buf", "=", "state", "[", "'momentum_buffer'", "]", "\n", "# Tensorflow accumulates the LR scaling in the momentum buffer", "\n", "if", "'lr_in_momentum'", "in", "group", "and", "group", "[", "'lr_in_momentum'", "]", ":", "\n", "                        ", "buf", ".", "mul_", "(", "group", "[", "'momentum'", "]", ")", ".", "addcdiv_", "(", "group", "[", "'lr'", "]", ",", "grad", ",", "avg", ")", "\n", "p", ".", "data", ".", "add_", "(", "-", "buf", ")", "\n", "", "else", ":", "\n", "# PyTorch scales the param update by LR", "\n", "                        ", "buf", ".", "mul_", "(", "group", "[", "'momentum'", "]", ")", ".", "addcdiv_", "(", "grad", ",", "avg", ")", "\n", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'lr'", "]", ",", "buf", ")", "\n", "", "", "else", ":", "\n", "                    ", "p", ".", "data", ".", "addcdiv_", "(", "-", "group", "[", "'lr'", "]", ",", "grad", ",", "avg", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adamp.AdamP.__init__": [[17, 22], ["dict", "torch.optim.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "delta", "=", "0.1", ",", "wd_ratio", "=", "0.1", ",", "nesterov", "=", "False", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "\n", "delta", "=", "delta", ",", "wd_ratio", "=", "wd_ratio", ",", "nesterov", "=", "nesterov", ")", "\n", "super", "(", "AdamP", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adamp.AdamP._channel_view": [[23, 25], ["x.view", "x.size"], "methods", ["None"], ["", "def", "_channel_view", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adamp.AdamP._layer_view": [[26, 28], ["x.view"], "methods", ["None"], ["", "def", "_layer_view", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adamp.AdamP._cosine_similarity": [[29, 38], ["view_func", "view_func", "view_func.norm().add_", "view_func.norm().add_", "view_func.norm", "view_func.norm", "dot.abs"], "methods", ["None"], ["", "def", "_cosine_similarity", "(", "self", ",", "x", ",", "y", ",", "eps", ",", "view_func", ")", ":", "\n", "        ", "x", "=", "view_func", "(", "x", ")", "\n", "y", "=", "view_func", "(", "y", ")", "\n", "\n", "x_norm", "=", "x", ".", "norm", "(", "dim", "=", "1", ")", ".", "add_", "(", "eps", ")", "\n", "y_norm", "=", "y", ".", "norm", "(", "dim", "=", "1", ")", ".", "add_", "(", "eps", ")", "\n", "dot", "=", "(", "x", "*", "y", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "return", "dot", ".", "abs", "(", ")", "/", "x_norm", "/", "y_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adamp.AdamP._projection": [[39, 54], ["adamp.AdamP._cosine_similarity", "adamp.AdamP.max", "len", "math.sqrt", "view_func().norm().view().add_", "view_func().sum().view", "view_func().size", "view_func().norm().view", "view_func().sum", "view_func", "view_func().norm", "view_func", "view_func"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adamp.AdamP._cosine_similarity"], ["", "def", "_projection", "(", "self", ",", "p", ",", "grad", ",", "perturb", ",", "delta", ",", "wd_ratio", ",", "eps", ")", ":", "\n", "        ", "wd", "=", "1", "\n", "expand_size", "=", "[", "-", "1", "]", "+", "[", "1", "]", "*", "(", "len", "(", "p", ".", "shape", ")", "-", "1", ")", "\n", "for", "view_func", "in", "[", "self", ".", "_channel_view", ",", "self", ".", "_layer_view", "]", ":", "\n", "\n", "            ", "cosine_sim", "=", "self", ".", "_cosine_similarity", "(", "grad", ",", "p", ".", "data", ",", "eps", ",", "view_func", ")", "\n", "\n", "if", "cosine_sim", ".", "max", "(", ")", "<", "delta", "/", "math", ".", "sqrt", "(", "view_func", "(", "p", ".", "data", ")", ".", "size", "(", "1", ")", ")", ":", "\n", "                ", "p_n", "=", "p", ".", "data", "/", "view_func", "(", "p", ".", "data", ")", ".", "norm", "(", "dim", "=", "1", ")", ".", "view", "(", "expand_size", ")", ".", "add_", "(", "eps", ")", "\n", "perturb", "-=", "p_n", "*", "view_func", "(", "p_n", "*", "perturb", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "view", "(", "expand_size", ")", "\n", "wd", "=", "wd_ratio", "\n", "\n", "return", "perturb", ",", "wd", "\n", "\n", "", "", "return", "perturb", ",", "wd", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adamp.AdamP.step": [[55, 108], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.add_", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "len", "adamp.AdamP._projection", "p.data.mul_", "exp_avg.mul_", "exp_avg_sq.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adamp.AdamP._projection"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "# Adam", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "\n", "denom", "=", "(", "exp_avg_sq", ".", "sqrt", "(", ")", "/", "math", ".", "sqrt", "(", "bias_correction2", ")", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "step_size", "=", "group", "[", "'lr'", "]", "/", "bias_correction1", "\n", "\n", "if", "nesterov", ":", "\n", "                    ", "perturb", "=", "(", "beta1", "*", "exp_avg", "+", "(", "1", "-", "beta1", ")", "*", "grad", ")", "/", "denom", "\n", "", "else", ":", "\n", "                    ", "perturb", "=", "exp_avg", "/", "denom", "\n", "\n", "# Projection", "\n", "", "wd_ratio", "=", "1", "\n", "if", "len", "(", "p", ".", "shape", ")", ">", "1", ":", "\n", "                    ", "perturb", ",", "wd_ratio", "=", "self", ".", "_projection", "(", "p", ",", "grad", ",", "perturb", ",", "group", "[", "'delta'", "]", ",", "group", "[", "'wd_ratio'", "]", ",", "group", "[", "'eps'", "]", ")", "\n", "\n", "# Weight decay", "\n", "", "if", "group", "[", "'weight_decay'", "]", ">", "0", ":", "\n", "                    ", "p", ".", "data", ".", "mul_", "(", "1", "-", "group", "[", "'lr'", "]", "*", "group", "[", "'weight_decay'", "]", "*", "wd_ratio", ")", "\n", "\n", "# Step", "\n", "", "p", ".", "data", ".", "add_", "(", "-", "step_size", ",", "perturb", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.novograd.NovoGrad.__init__": [[13, 24], ["dict", "torch.optim.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "grad_averaging", "=", "False", ",", "lr", "=", "0.1", ",", "betas", "=", "(", "0.95", ",", "0.98", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "super", "(", "NovoGrad", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "self", ".", "_lr", "=", "lr", "\n", "self", ".", "_beta1", "=", "betas", "[", "0", "]", "\n", "self", ".", "_beta2", "=", "betas", "[", "1", "]", "\n", "self", ".", "_eps", "=", "eps", "\n", "self", ".", "_wd", "=", "weight_decay", "\n", "self", ".", "_grad_averaging", "=", "grad_averaging", "\n", "\n", "self", ".", "_momentum_initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.novograd.NovoGrad.step": [[25, 78], ["closure", "p.data.add_", "torch.norm", "torch.norm", "RuntimeError", "torch.norm", "torch.sqrt", "math.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_momentum_initialized", ":", "\n", "            ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "                ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                    ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                        ", "raise", "RuntimeError", "(", "'NovoGrad does not support sparse gradients'", ")", "\n", "\n", "", "v", "=", "torch", ".", "norm", "(", "grad", ")", "**", "2", "\n", "m", "=", "grad", "/", "(", "torch", ".", "sqrt", "(", "v", ")", "+", "self", ".", "_eps", ")", "+", "self", ".", "_wd", "*", "p", ".", "data", "\n", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'v'", "]", "=", "v", "\n", "state", "[", "'m'", "]", "=", "m", "\n", "state", "[", "'grad_ema'", "]", "=", "None", "\n", "", "", "self", ".", "_momentum_initialized", "=", "True", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "step", ",", "v", ",", "m", "=", "state", "[", "'step'", "]", ",", "state", "[", "'v'", "]", ",", "state", "[", "'m'", "]", "\n", "grad_ema", "=", "state", "[", "'grad_ema'", "]", "\n", "\n", "grad", "=", "p", ".", "grad", ".", "data", "\n", "g2", "=", "torch", ".", "norm", "(", "grad", ")", "**", "2", "\n", "grad_ema", "=", "g2", "if", "grad_ema", "is", "None", "else", "grad_ema", "*", "self", ".", "_beta2", "+", "g2", "*", "(", "1.", "-", "self", ".", "_beta2", ")", "\n", "grad", "*=", "1.0", "/", "(", "torch", ".", "sqrt", "(", "grad_ema", ")", "+", "self", ".", "_eps", ")", "\n", "\n", "if", "self", ".", "_grad_averaging", ":", "\n", "                    ", "grad", "*=", "(", "1.", "-", "self", ".", "_beta1", ")", "\n", "\n", "", "g2", "=", "torch", ".", "norm", "(", "grad", ")", "**", "2", "\n", "v", "=", "self", ".", "_beta2", "*", "v", "+", "(", "1.", "-", "self", ".", "_beta2", ")", "*", "g2", "\n", "m", "=", "self", ".", "_beta1", "*", "m", "+", "(", "grad", "/", "(", "torch", ".", "sqrt", "(", "v", ")", "+", "self", ".", "_eps", ")", "+", "self", ".", "_wd", "*", "p", ".", "data", ")", "\n", "bias_correction1", "=", "1", "-", "self", ".", "_beta1", "**", "step", "\n", "bias_correction2", "=", "1", "-", "self", ".", "_beta2", "**", "step", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "state", "[", "'v'", "]", ",", "state", "[", "'m'", "]", "=", "v", ",", "m", "\n", "state", "[", "'grad_ema'", "]", "=", "grad_ema", "\n", "p", ".", "data", ".", "add_", "(", "-", "step_size", ",", "m", ")", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adafactor.Adafactor.__init__": [[43, 54], ["dict", "super().__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "None", ",", "eps", "=", "1e-30", ",", "eps_scale", "=", "1e-3", ",", "clip_threshold", "=", "1.0", ",", "\n", "decay_rate", "=", "-", "0.8", ",", "betas", "=", "None", ",", "weight_decay", "=", "0.0", ",", "scale_parameter", "=", "True", ",", "warmup_init", "=", "False", ")", ":", "\n", "        ", "relative_step", "=", "lr", "is", "None", "\n", "if", "warmup_init", "and", "not", "relative_step", ":", "\n", "            ", "raise", "ValueError", "(", "'warmup_init requires relative_step=True'", ")", "\n", "\n", "", "beta1", "=", "None", "if", "betas", "is", "None", "else", "betas", "[", "0", "]", "# make it compat with standard betas arg", "\n", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "eps", "=", "eps", ",", "eps_scale", "=", "eps_scale", ",", "clip_threshold", "=", "clip_threshold", ",", "decay_rate", "=", "decay_rate", ",", "\n", "beta1", "=", "beta1", ",", "weight_decay", "=", "weight_decay", ",", "scale_parameter", "=", "scale_parameter", ",", "\n", "relative_step", "=", "relative_step", ",", "warmup_init", "=", "warmup_init", ")", "\n", "super", "(", "Adafactor", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adafactor.Adafactor._get_lr": [[55, 65], ["min", "max", "math.sqrt"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_lr", "(", "param_group", ",", "param_state", ")", ":", "\n", "        ", "if", "param_group", "[", "'relative_step'", "]", ":", "\n", "            ", "min_step", "=", "1e-6", "*", "param_state", "[", "'step'", "]", "if", "param_group", "[", "'warmup_init'", "]", "else", "1e-2", "\n", "lr_t", "=", "min", "(", "min_step", ",", "1.0", "/", "math", ".", "sqrt", "(", "param_state", "[", "'step'", "]", ")", ")", "\n", "param_scale", "=", "1.0", "\n", "if", "param_group", "[", "'scale_parameter'", "]", ":", "\n", "                ", "param_scale", "=", "max", "(", "param_group", "[", "'eps_scale'", "]", ",", "param_state", "[", "'RMS'", "]", ")", "\n", "", "param_group", "[", "'lr'", "]", "=", "lr_t", "*", "param_scale", "\n", "", "return", "param_group", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adafactor.Adafactor._get_options": [[66, 71], ["len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_options", "(", "param_group", ",", "param_shape", ")", ":", "\n", "        ", "factored", "=", "len", "(", "param_shape", ")", ">=", "2", "\n", "use_first_moment", "=", "param_group", "[", "'beta1'", "]", "is", "not", "None", "\n", "return", "factored", ",", "use_first_moment", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adafactor.Adafactor._rms": [[72, 75], ["tensor.norm", "tensor.numel"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_rms", "(", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "norm", "(", "2", ")", "/", "(", "tensor", ".", "numel", "(", ")", "**", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adafactor.Adafactor._approx_sq_grad": [[76, 80], ["exp_avg_sq_col.unsqueeze().rsqrt", "torch.mul", "exp_avg_sq_col.unsqueeze", "exp_avg_sq_row.mean"], "methods", ["None"], ["", "def", "_approx_sq_grad", "(", "self", ",", "exp_avg_sq_row", ",", "exp_avg_sq_col", ")", ":", "\n", "        ", "r_factor", "=", "(", "exp_avg_sq_row", "/", "exp_avg_sq_row", ".", "mean", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ")", ".", "rsqrt_", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "c_factor", "=", "exp_avg_sq_col", ".", "unsqueeze", "(", "-", "2", ")", ".", "rsqrt", "(", ")", "\n", "return", "torch", ".", "mul", "(", "r_factor", ",", "c_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adafactor.Adafactor.step": [[81, 175], ["closure", "adafactor.Adafactor._get_options", "adafactor.Adafactor._rms", "adafactor.Adafactor._get_lr", "exp_avg_sq.rsqrt().mul_.div_", "exp_avg_sq.rsqrt().mul_.mul_", "p_data_fp32.float.float.add_", "grad.float.float.float", "RuntimeError", "len", "p_data_fp32.float.float.float", "math.pow", "exp_avg_sq_row.mul_().add_", "exp_avg_sq_col.mul_().add_", "adafactor.Adafactor._approx_sq_grad", "exp_avg_sq.rsqrt().mul_.mul_", "exp_avg_sq.mul_().add_", "exp_avg_sq.rsqrt().mul_", "exp_avg.mul_().add_", "p_data_fp32.float.float.add_", "p.data.copy_", "torch.zeros_like", "torch.zeros().to", "torch.zeros().to", "torch.zeros_like", "state[].to", "state[].to", "state[].to", "state[].to", "exp_avg_sq.rsqrt().mul_.mean", "exp_avg_sq.rsqrt().mul_.mean", "exp_avg_sq_row.mul_", "exp_avg_sq_col.mul_", "exp_avg_sq.mul_", "exp_avg_sq.rsqrt", "exp_avg.mul_", "torch.zeros", "torch.zeros", "adafactor.Adafactor._rms"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adafactor.Adafactor._get_options", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adafactor.Adafactor._rms", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adafactor.Adafactor._get_lr", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adafactor.Adafactor._approx_sq_grad", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.adafactor.Adafactor._rms"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "dtype", "in", "{", "torch", ".", "float16", ",", "torch", ".", "bfloat16", "}", ":", "\n", "                    ", "grad", "=", "grad", ".", "float", "(", ")", "\n", "", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adafactor does not support sparse gradients.'", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "grad_shape", "=", "grad", ".", "shape", "\n", "\n", "factored", ",", "use_first_moment", "=", "self", ".", "_get_options", "(", "group", ",", "grad_shape", ")", "\n", "# State Initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "\n", "if", "use_first_moment", ":", "\n", "# Exponential moving average of gradient values", "\n", "                        ", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "grad", ")", "\n", "", "if", "factored", ":", "\n", "                        ", "state", "[", "'exp_avg_sq_row'", "]", "=", "torch", ".", "zeros", "(", "grad_shape", "[", ":", "-", "1", "]", ")", ".", "to", "(", "grad", ")", "\n", "state", "[", "'exp_avg_sq_col'", "]", "=", "torch", ".", "zeros", "(", "grad_shape", "[", ":", "-", "2", "]", "+", "grad_shape", "[", "-", "1", ":", "]", ")", ".", "to", "(", "grad", ")", "\n", "", "else", ":", "\n", "                        ", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "grad", ")", "\n", "\n", "", "state", "[", "'RMS'", "]", "=", "0", "\n", "", "else", ":", "\n", "                    ", "if", "use_first_moment", ":", "\n", "                        ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "to", "(", "grad", ")", "\n", "", "if", "factored", ":", "\n", "                        ", "state", "[", "'exp_avg_sq_row'", "]", "=", "state", "[", "'exp_avg_sq_row'", "]", ".", "to", "(", "grad", ")", "\n", "state", "[", "'exp_avg_sq_col'", "]", "=", "state", "[", "'exp_avg_sq_col'", "]", ".", "to", "(", "grad", ")", "\n", "", "else", ":", "\n", "                        ", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "to", "(", "grad", ")", "\n", "\n", "", "", "p_data_fp32", "=", "p", ".", "data", "\n", "if", "p", ".", "data", ".", "dtype", "in", "{", "torch", ".", "float16", ",", "torch", ".", "bfloat16", "}", ":", "\n", "                    ", "p_data_fp32", "=", "p_data_fp32", ".", "float", "(", ")", "\n", "\n", "", "state", "[", "'step'", "]", "+=", "1", "\n", "state", "[", "'RMS'", "]", "=", "self", ".", "_rms", "(", "p_data_fp32", ")", "\n", "lr_t", "=", "self", ".", "_get_lr", "(", "group", ",", "state", ")", "\n", "\n", "beta2t", "=", "1.0", "-", "math", ".", "pow", "(", "state", "[", "'step'", "]", ",", "group", "[", "'decay_rate'", "]", ")", "\n", "update", "=", "grad", "**", "2", "+", "group", "[", "'eps'", "]", "\n", "if", "factored", ":", "\n", "                    ", "exp_avg_sq_row", "=", "state", "[", "'exp_avg_sq_row'", "]", "\n", "exp_avg_sq_col", "=", "state", "[", "'exp_avg_sq_col'", "]", "\n", "\n", "exp_avg_sq_row", ".", "mul_", "(", "beta2t", ")", ".", "add_", "(", "1.0", "-", "beta2t", ",", "update", ".", "mean", "(", "dim", "=", "-", "1", ")", ")", "\n", "exp_avg_sq_col", ".", "mul_", "(", "beta2t", ")", ".", "add_", "(", "1.0", "-", "beta2t", ",", "update", ".", "mean", "(", "dim", "=", "-", "2", ")", ")", "\n", "#exp_avg_sq_row.mul_(beta2t).add_(update.mean(dim=-1), alpha=1.0 - beta2t)  # pytorch 1.6+", "\n", "#exp_avg_sq_col.mul_(beta2t).add_(update.mean(dim=-2), alpha=1.0 - beta2t)", "\n", "\n", "# Approximation of exponential moving average of square of gradient", "\n", "update", "=", "self", ".", "_approx_sq_grad", "(", "exp_avg_sq_row", ",", "exp_avg_sq_col", ")", "\n", "update", ".", "mul_", "(", "grad", ")", "\n", "", "else", ":", "\n", "                    ", "exp_avg_sq", "=", "state", "[", "'exp_avg_sq'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2t", ")", ".", "add_", "(", "1.0", "-", "beta2t", ",", "update", ")", "\n", "#exp_avg_sq.mul_(beta2t).add_(update, alpha=1.0 - beta2t)  # pytorch 1.6+", "\n", "update", "=", "exp_avg_sq", ".", "rsqrt", "(", ")", ".", "mul_", "(", "grad", ")", "\n", "\n", "", "update", ".", "div_", "(", "(", "self", ".", "_rms", "(", "update", ")", "/", "group", "[", "'clip_threshold'", "]", ")", ".", "clamp_", "(", "min", "=", "1.0", ")", ")", "\n", "update", ".", "mul_", "(", "lr_t", ")", "\n", "\n", "if", "use_first_moment", ":", "\n", "                    ", "exp_avg", "=", "state", "[", "'exp_avg'", "]", "\n", "exp_avg", ".", "mul_", "(", "group", "[", "\"beta1\"", "]", ")", ".", "add_", "(", "1", "-", "group", "[", "\"beta1\"", "]", ",", "update", ")", "\n", "#exp_avg.mul_(group['beta1']).add_(update, alpha=1 - group['beta1'])  # pytorch 1.6+", "\n", "update", "=", "exp_avg", "\n", "\n", "", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "\"weight_decay\"", "]", "*", "lr_t", ",", "p_data_fp32", ")", "\n", "#p_data_fp32.add_(p_data_fp32, alpha=-group['weight_decay'] * lr_t)  # pytorch 1.6+", "\n", "\n", "", "p_data_fp32", ".", "add_", "(", "-", "update", ")", "\n", "\n", "if", "p", ".", "data", ".", "dtype", "in", "{", "torch", ".", "float16", ",", "torch", ".", "bfloat16", "}", ":", "\n", "                    ", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.__init__": [[26, 69], ["pytorch_lightning.LightningModule.__init__", "model_interface.ModelInterface.save_hyperparameters", "model_interface.ModelInterface.load_model", "MyLoss.create_loss", "torchmetrics.MetricCollection.clone", "torchmetrics.MetricCollection.clone", "torchmetrics.AUROC", "torchmetrics.MetricCollection", "torchmetrics.AUROC", "torchmetrics.MetricCollection", "range", "torchmetrics.Accuracy", "torchmetrics.CohenKappa", "torchmetrics.F1", "torchmetrics.Recall", "torchmetrics.Precision", "torchmetrics.Specificity", "torchmetrics.Accuracy", "torchmetrics.CohenKappa", "torchmetrics.F1", "torchmetrics.Recall", "torchmetrics.Precision"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__", "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.load_model", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.loss_factory.create_loss"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "loss", ",", "optimizer", ",", "**", "kargs", ")", ":", "\n", "        ", "super", "(", "ModelInterface", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "self", ".", "load_model", "(", ")", "\n", "self", ".", "loss", "=", "create_loss", "(", "loss", ")", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "n_classes", "=", "model", ".", "n_classes", "\n", "self", ".", "log_path", "=", "kargs", "[", "'log'", "]", "\n", "\n", "#---->acc", "\n", "self", ".", "data", "=", "[", "{", "\"count\"", ":", "0", ",", "\"correct\"", ":", "0", "}", "for", "i", "in", "range", "(", "self", ".", "n_classes", ")", "]", "\n", "\n", "#---->Metrics", "\n", "if", "self", ".", "n_classes", ">", "2", ":", "\n", "            ", "self", ".", "AUROC", "=", "torchmetrics", ".", "AUROC", "(", "num_classes", "=", "self", ".", "n_classes", ",", "average", "=", "'macro'", ")", "\n", "metrics", "=", "torchmetrics", ".", "MetricCollection", "(", "[", "torchmetrics", ".", "Accuracy", "(", "num_classes", "=", "self", ".", "n_classes", ",", "\n", "average", "=", "'micro'", ")", ",", "\n", "torchmetrics", ".", "CohenKappa", "(", "num_classes", "=", "self", ".", "n_classes", ")", ",", "\n", "torchmetrics", ".", "F1", "(", "num_classes", "=", "self", ".", "n_classes", ",", "\n", "average", "=", "'macro'", ")", ",", "\n", "torchmetrics", ".", "Recall", "(", "average", "=", "'macro'", ",", "\n", "num_classes", "=", "self", ".", "n_classes", ")", ",", "\n", "torchmetrics", ".", "Precision", "(", "average", "=", "'macro'", ",", "\n", "num_classes", "=", "self", ".", "n_classes", ")", ",", "\n", "torchmetrics", ".", "Specificity", "(", "average", "=", "'macro'", ",", "\n", "num_classes", "=", "self", ".", "n_classes", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "AUROC", "=", "torchmetrics", ".", "AUROC", "(", "num_classes", "=", "2", ",", "average", "=", "'macro'", ")", "\n", "metrics", "=", "torchmetrics", ".", "MetricCollection", "(", "[", "torchmetrics", ".", "Accuracy", "(", "num_classes", "=", "2", ",", "\n", "average", "=", "'micro'", ")", ",", "\n", "torchmetrics", ".", "CohenKappa", "(", "num_classes", "=", "2", ")", ",", "\n", "torchmetrics", ".", "F1", "(", "num_classes", "=", "2", ",", "\n", "average", "=", "'macro'", ")", ",", "\n", "torchmetrics", ".", "Recall", "(", "average", "=", "'macro'", ",", "\n", "num_classes", "=", "2", ")", ",", "\n", "torchmetrics", ".", "Precision", "(", "average", "=", "'macro'", ",", "\n", "num_classes", "=", "2", ")", "]", ")", "\n", "", "self", ".", "valid_metrics", "=", "metrics", ".", "clone", "(", "prefix", "=", "'val_'", ")", "\n", "self", ".", "test_metrics", "=", "metrics", ".", "clone", "(", "prefix", "=", "'test_'", ")", "\n", "\n", "#--->random", "\n", "self", ".", "shuffle", "=", "kargs", "[", "'data'", "]", ".", "data_shuffle", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.get_progress_bar_dict": [[72, 77], ["super().get_progress_bar_dict", "super().get_progress_bar_dict.pop"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.get_progress_bar_dict"], ["", "def", "get_progress_bar_dict", "(", "self", ")", ":", "\n", "# don't show the version number", "\n", "        ", "items", "=", "super", "(", ")", ".", "get_progress_bar_dict", "(", ")", "\n", "items", ".", "pop", "(", "\"v_num\"", ",", "None", ")", "\n", "return", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.training_step": [[78, 96], ["model_interface.ModelInterface.model", "model_interface.ModelInterface.loss", "int", "int"], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "#---->inference", "\n", "        ", "data", ",", "label", "=", "batch", "\n", "results_dict", "=", "self", ".", "model", "(", "data", "=", "data", ",", "label", "=", "label", ")", "\n", "logits", "=", "results_dict", "[", "'logits'", "]", "\n", "Y_prob", "=", "results_dict", "[", "'Y_prob'", "]", "\n", "Y_hat", "=", "results_dict", "[", "'Y_hat'", "]", "\n", "\n", "#---->loss", "\n", "loss", "=", "self", ".", "loss", "(", "logits", ",", "label", ")", "\n", "\n", "#---->acc log", "\n", "Y_hat", "=", "int", "(", "Y_hat", ")", "\n", "Y", "=", "int", "(", "label", ")", "\n", "self", ".", "data", "[", "Y", "]", "[", "\"count\"", "]", "+=", "1", "\n", "self", ".", "data", "[", "Y", "]", "[", "\"correct\"", "]", "+=", "(", "Y_hat", "==", "Y", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.training_epoch_end": [[97, 107], ["range", "print", "range", "float"], "methods", ["None"], ["", "def", "training_epoch_end", "(", "self", ",", "training_step_outputs", ")", ":", "\n", "        ", "for", "c", "in", "range", "(", "self", ".", "n_classes", ")", ":", "\n", "            ", "count", "=", "self", ".", "data", "[", "c", "]", "[", "\"count\"", "]", "\n", "correct", "=", "self", ".", "data", "[", "c", "]", "[", "\"correct\"", "]", "\n", "if", "count", "==", "0", ":", "\n", "                ", "acc", "=", "None", "\n", "", "else", ":", "\n", "                ", "acc", "=", "float", "(", "correct", ")", "/", "count", "\n", "", "print", "(", "'class {}: acc {}, correct {}/{}'", ".", "format", "(", "c", ",", "acc", ",", "correct", ",", "count", ")", ")", "\n", "", "self", ".", "data", "=", "[", "{", "\"count\"", ":", "0", ",", "\"correct\"", ":", "0", "}", "for", "i", "in", "range", "(", "self", ".", "n_classes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.validation_step": [[108, 122], ["model_interface.ModelInterface.model", "int", "Y_hat.item"], "methods", ["None"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "data", ",", "label", "=", "batch", "\n", "results_dict", "=", "self", ".", "model", "(", "data", "=", "data", ",", "label", "=", "label", ")", "\n", "logits", "=", "results_dict", "[", "'logits'", "]", "\n", "Y_prob", "=", "results_dict", "[", "'Y_prob'", "]", "\n", "Y_hat", "=", "results_dict", "[", "'Y_hat'", "]", "\n", "\n", "\n", "#---->acc log", "\n", "Y", "=", "int", "(", "label", ")", "\n", "self", ".", "data", "[", "Y", "]", "[", "\"count\"", "]", "+=", "1", "\n", "self", ".", "data", "[", "Y", "]", "[", "\"correct\"", "]", "+=", "(", "Y_hat", ".", "item", "(", ")", "==", "Y", ")", "\n", "\n", "return", "{", "'logits'", ":", "logits", ",", "'Y_prob'", ":", "Y_prob", ",", "'Y_hat'", ":", "Y_hat", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.validation_epoch_end": [[124, 151], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "model_interface.ModelInterface.log", "model_interface.ModelInterface.log", "model_interface.ModelInterface.log_dict", "range", "utils.utils.cross_entropy_torch", "model_interface.ModelInterface.AUROC", "model_interface.ModelInterface.valid_metrics", "print", "random.seed", "torch.stack.squeeze", "torch.stack.squeeze", "torch.stack.squeeze", "torch.stack.squeeze", "torch.stack.squeeze", "torch.stack.squeeze", "torch.stack.squeeze", "torch.stack.squeeze", "torch.stack.squeeze", "range", "float"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.utils.utils.cross_entropy_torch"], ["", "def", "validation_epoch_end", "(", "self", ",", "val_step_outputs", ")", ":", "\n", "        ", "logits", "=", "torch", ".", "cat", "(", "[", "x", "[", "'logits'", "]", "for", "x", "in", "val_step_outputs", "]", ",", "dim", "=", "0", ")", "\n", "probs", "=", "torch", ".", "cat", "(", "[", "x", "[", "'Y_prob'", "]", "for", "x", "in", "val_step_outputs", "]", ",", "dim", "=", "0", ")", "\n", "max_probs", "=", "torch", ".", "stack", "(", "[", "x", "[", "'Y_hat'", "]", "for", "x", "in", "val_step_outputs", "]", ")", "\n", "target", "=", "torch", ".", "stack", "(", "[", "x", "[", "'label'", "]", "for", "x", "in", "val_step_outputs", "]", ",", "dim", "=", "0", ")", "\n", "\n", "#---->", "\n", "self", ".", "log", "(", "'val_loss'", ",", "cross_entropy_torch", "(", "logits", ",", "target", ")", ",", "prog_bar", "=", "True", ",", "on_epoch", "=", "True", ",", "logger", "=", "True", ")", "\n", "self", ".", "log", "(", "'auc'", ",", "self", ".", "AUROC", "(", "probs", ",", "target", ".", "squeeze", "(", ")", ")", ",", "prog_bar", "=", "True", ",", "on_epoch", "=", "True", ",", "logger", "=", "True", ")", "\n", "self", ".", "log_dict", "(", "self", ".", "valid_metrics", "(", "max_probs", ".", "squeeze", "(", ")", ",", "target", ".", "squeeze", "(", ")", ")", ",", "\n", "on_epoch", "=", "True", ",", "logger", "=", "True", ")", "\n", "\n", "#---->acc log", "\n", "for", "c", "in", "range", "(", "self", ".", "n_classes", ")", ":", "\n", "            ", "count", "=", "self", ".", "data", "[", "c", "]", "[", "\"count\"", "]", "\n", "correct", "=", "self", ".", "data", "[", "c", "]", "[", "\"correct\"", "]", "\n", "if", "count", "==", "0", ":", "\n", "                ", "acc", "=", "None", "\n", "", "else", ":", "\n", "                ", "acc", "=", "float", "(", "correct", ")", "/", "count", "\n", "", "print", "(", "'class {}: acc {}, correct {}/{}'", ".", "format", "(", "c", ",", "acc", ",", "correct", ",", "count", ")", ")", "\n", "", "self", ".", "data", "=", "[", "{", "\"count\"", ":", "0", ",", "\"correct\"", ":", "0", "}", "for", "i", "in", "range", "(", "self", ".", "n_classes", ")", "]", "\n", "\n", "#---->random, if shuffle data, change seed", "\n", "if", "self", ".", "shuffle", "==", "True", ":", "\n", "            ", "self", ".", "count", "=", "self", ".", "count", "+", "1", "\n", "random", ".", "seed", "(", "self", ".", "count", "*", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.configure_optimizers": [[154, 157], ["MyOptimizer.create_optimizer"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyOptimizer.optim_factory.create_optimizer"], ["", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optimizer", "=", "create_optimizer", "(", "self", ".", "optimizer", ",", "self", ".", "model", ")", "\n", "return", "[", "optimizer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.test_step": [[158, 171], ["model_interface.ModelInterface.model", "int", "Y_hat.item"], "methods", ["None"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "data", ",", "label", "=", "batch", "\n", "results_dict", "=", "self", ".", "model", "(", "data", "=", "data", ",", "label", "=", "label", ")", "\n", "logits", "=", "results_dict", "[", "'logits'", "]", "\n", "Y_prob", "=", "results_dict", "[", "'Y_prob'", "]", "\n", "Y_hat", "=", "results_dict", "[", "'Y_hat'", "]", "\n", "\n", "#---->acc log", "\n", "Y", "=", "int", "(", "label", ")", "\n", "self", ".", "data", "[", "Y", "]", "[", "\"count\"", "]", "+=", "1", "\n", "self", ".", "data", "[", "Y", "]", "[", "\"correct\"", "]", "+=", "(", "Y_hat", ".", "item", "(", ")", "==", "Y", ")", "\n", "\n", "return", "{", "'logits'", ":", "logits", ",", "'Y_prob'", ":", "Y_prob", ",", "'Y_hat'", ":", "Y_hat", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.test_epoch_end": [[172, 198], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "model_interface.ModelInterface.AUROC", "model_interface.ModelInterface.test_metrics", "model_interface.ModelInterface.items", "print", "range", "pandas.DataFrame", "pandas.DataFrame.to_csv", "torch.stack.squeeze", "torch.stack.squeeze", "torch.stack.squeeze", "torch.stack.squeeze", "torch.stack.squeeze", "torch.stack.squeeze", "torch.stack.squeeze", "torch.stack.squeeze", "torch.stack.squeeze", "print", "values.cpu().numpy", "print", "range", "values.cpu", "float"], "methods", ["None"], ["", "def", "test_epoch_end", "(", "self", ",", "output_results", ")", ":", "\n", "        ", "probs", "=", "torch", ".", "cat", "(", "[", "x", "[", "'Y_prob'", "]", "for", "x", "in", "output_results", "]", ",", "dim", "=", "0", ")", "\n", "max_probs", "=", "torch", ".", "stack", "(", "[", "x", "[", "'Y_hat'", "]", "for", "x", "in", "output_results", "]", ")", "\n", "target", "=", "torch", ".", "stack", "(", "[", "x", "[", "'label'", "]", "for", "x", "in", "output_results", "]", ",", "dim", "=", "0", ")", "\n", "\n", "#---->", "\n", "auc", "=", "self", ".", "AUROC", "(", "probs", ",", "target", ".", "squeeze", "(", ")", ")", "\n", "metrics", "=", "self", ".", "test_metrics", "(", "max_probs", ".", "squeeze", "(", ")", ",", "target", ".", "squeeze", "(", ")", ")", "\n", "metrics", "[", "'auc'", "]", "=", "auc", "\n", "for", "keys", ",", "values", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "f'{keys} = {values}'", ")", "\n", "metrics", "[", "keys", "]", "=", "values", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "print", "(", ")", "\n", "#---->acc log", "\n", "for", "c", "in", "range", "(", "self", ".", "n_classes", ")", ":", "\n", "            ", "count", "=", "self", ".", "data", "[", "c", "]", "[", "\"count\"", "]", "\n", "correct", "=", "self", ".", "data", "[", "c", "]", "[", "\"correct\"", "]", "\n", "if", "count", "==", "0", ":", "\n", "                ", "acc", "=", "None", "\n", "", "else", ":", "\n", "                ", "acc", "=", "float", "(", "correct", ")", "/", "count", "\n", "", "print", "(", "'class {}: acc {}, correct {}/{}'", ".", "format", "(", "c", ",", "acc", ",", "correct", ",", "count", ")", ")", "\n", "", "self", ".", "data", "=", "[", "{", "\"count\"", ":", "0", ",", "\"correct\"", ":", "0", "}", "for", "i", "in", "range", "(", "self", ".", "n_classes", ")", "]", "\n", "#---->", "\n", "result", "=", "pd", ".", "DataFrame", "(", "[", "metrics", "]", ")", "\n", "result", ".", "to_csv", "(", "self", ".", "log_path", "/", "'result.csv'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.load_model": [[200, 216], ["model_interface.ModelInterface.instancialize", "getattr", "importlib.import_module", "ValueError", "i.capitalize", "name.split"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.instancialize"], ["", "def", "load_model", "(", "self", ")", ":", "\n", "        ", "name", "=", "self", ".", "hparams", ".", "model", ".", "name", "\n", "# Change the `trans_unet.py` file name to `TransUnet` class name.", "\n", "# Please always name your model file name as `trans_unet.py` and", "\n", "# class name or funciton name corresponding `TransUnet`.", "\n", "if", "'_'", "in", "name", ":", "\n", "            ", "camel_name", "=", "''", ".", "join", "(", "[", "i", ".", "capitalize", "(", ")", "for", "i", "in", "name", ".", "split", "(", "'_'", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "camel_name", "=", "name", "\n", "", "try", ":", "\n", "            ", "Model", "=", "getattr", "(", "importlib", ".", "import_module", "(", "\n", "f'models.{name}'", ")", ",", "camel_name", ")", "\n", "", "except", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid Module File Name or Invalid Class Name!'", ")", "\n", "", "self", ".", "model", "=", "self", ".", "instancialize", "(", "Model", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.model_interface.ModelInterface.instancialize": [[217, 230], ["model_interface.ModelInterface.hparams.model.keys", "args1.update", "Model", "inspect.getargspec", "getattr"], "methods", ["None"], ["", "def", "instancialize", "(", "self", ",", "Model", ",", "**", "other_args", ")", ":", "\n", "        ", "\"\"\" Instancialize a model using the corresponding parameters\n            from self.hparams dictionary. You can also input any args\n            to overwrite the corresponding value in self.hparams.\n        \"\"\"", "\n", "class_args", "=", "inspect", ".", "getargspec", "(", "Model", ".", "__init__", ")", ".", "args", "[", "1", ":", "]", "\n", "inkeys", "=", "self", ".", "hparams", ".", "model", ".", "keys", "(", ")", "\n", "args1", "=", "{", "}", "\n", "for", "arg", "in", "class_args", ":", "\n", "            ", "if", "arg", "in", "inkeys", ":", "\n", "                ", "args1", "[", "arg", "]", "=", "getattr", "(", "self", ".", "hparams", ".", "model", ",", "arg", ")", "\n", "", "", "args1", ".", "update", "(", "other_args", ")", "\n", "return", "Model", "(", "**", "args1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.TransMIL.TransLayer.__init__": [[10, 21], ["torch.Module.__init__", "norm_layer", "nystrom_attention.NystromAttention"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "dim", "=", "512", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "NystromAttention", "(", "\n", "dim", "=", "dim", ",", "\n", "dim_head", "=", "dim", "//", "8", ",", "\n", "heads", "=", "8", ",", "\n", "num_landmarks", "=", "dim", "//", "2", ",", "# number of landmarks", "\n", "pinv_iterations", "=", "6", ",", "# number of moore-penrose iterations for approximating pinverse. 6 was recommended by the paper", "\n", "residual", "=", "True", ",", "# whether to do an extra residual with the value or not. supposedly faster convergence if turned on", "\n", "dropout", "=", "0.1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.TransMIL.TransLayer.forward": [[23, 27], ["TransMIL.TransLayer.attn", "TransMIL.TransLayer.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "attn", "(", "self", ".", "norm", "(", "x", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.TransMIL.PPEG.__init__": [[30, 35], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "512", ")", ":", "\n", "        ", "super", "(", "PPEG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "7", ",", "1", ",", "7", "//", "2", ",", "groups", "=", "dim", ")", "\n", "self", ".", "proj1", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "5", ",", "1", ",", "5", "//", "2", ",", "groups", "=", "dim", ")", "\n", "self", ".", "proj2", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "3", "//", "2", ",", "groups", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.TransMIL.PPEG.forward": [[36, 44], ["feat_token.transpose().view", "torch.cat.flatten().transpose", "torch.cat.flatten().transpose", "torch.cat.flatten().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TransMIL.PPEG.proj2", "feat_token.transpose", "TransMIL.PPEG.proj1", "torch.cat.flatten", "torch.cat.flatten", "torch.cat.flatten", "cls_token.unsqueeze", "TransMIL.PPEG.proj"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.flatten", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.flatten", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.flatten"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "B", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "cls_token", ",", "feat_token", "=", "x", "[", ":", ",", "0", "]", ",", "x", "[", ":", ",", "1", ":", "]", "\n", "cnn_feat", "=", "feat_token", ".", "transpose", "(", "1", ",", "2", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "self", ".", "proj", "(", "cnn_feat", ")", "+", "cnn_feat", "+", "self", ".", "proj1", "(", "cnn_feat", ")", "+", "self", ".", "proj2", "(", "cnn_feat", ")", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_token", ".", "unsqueeze", "(", "1", ")", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.TransMIL.TransMIL.__init__": [[47, 57], ["torch.Module.__init__", "TransMIL.PPEG", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Parameter", "torch.Parameter", "torch.Parameter", "TransMIL.TransLayer", "TransMIL.TransLayer", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "super", "(", "TransMIL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pos_layer", "=", "PPEG", "(", "dim", "=", "512", ")", "\n", "self", ".", "_fc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1024", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "1", ",", "512", ")", ")", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "layer1", "=", "TransLayer", "(", "dim", "=", "512", ")", "\n", "self", ".", "layer2", "=", "TransLayer", "(", "dim", "=", "512", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "512", ")", "\n", "self", ".", "_fc2", "=", "nn", ".", "Linear", "(", "512", ",", "self", ".", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.models.TransMIL.TransMIL.forward": [[59, 94], ["kwargs[].float", "TransMIL.TransMIL._fc1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TransMIL.TransMIL.cls_token.expand().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TransMIL.TransMIL.layer1", "TransMIL.TransMIL.pos_layer", "TransMIL.TransMIL.layer2", "TransMIL.TransMIL._fc2", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.softmax", "torch.softmax", "torch.softmax", "int", "int", "TransMIL.TransMIL.norm", "numpy.ceil", "numpy.ceil", "TransMIL.TransMIL.cls_token.expand", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "h", "=", "kwargs", "[", "'data'", "]", ".", "float", "(", ")", "#[B, n, 1024]", "\n", "\n", "h", "=", "self", ".", "_fc1", "(", "h", ")", "#[B, n, 512]", "\n", "\n", "#---->pad", "\n", "H", "=", "h", ".", "shape", "[", "1", "]", "\n", "_H", ",", "_W", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "H", ")", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "H", ")", ")", ")", "\n", "add_length", "=", "_H", "*", "_W", "-", "H", "\n", "h", "=", "torch", ".", "cat", "(", "[", "h", ",", "h", "[", ":", ",", ":", "add_length", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "#[B, N, 512]", "\n", "\n", "#---->cls_token", "\n", "B", "=", "h", ".", "shape", "[", "0", "]", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", ".", "cuda", "(", ")", "\n", "h", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "h", ")", ",", "dim", "=", "1", ")", "\n", "\n", "#---->Translayer x1", "\n", "h", "=", "self", ".", "layer1", "(", "h", ")", "#[B, N, 512]", "\n", "\n", "#---->PPEG", "\n", "h", "=", "self", ".", "pos_layer", "(", "h", ",", "_H", ",", "_W", ")", "#[B, N, 512]", "\n", "\n", "#---->Translayer x2", "\n", "h", "=", "self", ".", "layer2", "(", "h", ")", "#[B, N, 512]", "\n", "\n", "#---->cls_token", "\n", "h", "=", "self", ".", "norm", "(", "h", ")", "[", ":", ",", "0", "]", "\n", "\n", "#---->predict", "\n", "logits", "=", "self", ".", "_fc2", "(", "h", ")", "#[B, n_classes]", "\n", "Y_hat", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "Y_prob", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "results_dict", "=", "{", "'logits'", ":", "logits", ",", "'Y_prob'", ":", "Y_prob", ",", "'Y_hat'", ":", "Y_hat", "}", "\n", "return", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.BDLoss.__init__": [[83, 90], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute boudary loss\n        only compute the loss of foreground\n        ref: https://github.com/LIVIAETS/surface-loss/blob/108bd9892adca476e6cdf424124bc6268707498e/losses.py#L74\n        \"\"\"", "\n", "super", "(", "BDLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.do_bg = do_bg", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.BDLoss.forward": [[92, 107], ["boundary_loss.softmax_helper", "net_output[].type", "bound[].type", "torch.einsum", "torch.einsum.mean"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.softmax_helper"], ["", "def", "forward", "(", "self", ",", "net_output", ",", "target", ",", "bound", ")", ":", "\n", "        ", "\"\"\"\n        net_output: (batch_size, class, x,y,z)\n        target: ground truth, shape: (batch_size, 1, x,y,z)\n        bound: precomputed distance map, shape (batch_size, class, x,y,z)\n        \"\"\"", "\n", "net_output", "=", "softmax_helper", "(", "net_output", ")", "\n", "# print('net_output shape: ', net_output.shape)", "\n", "pc", "=", "net_output", "[", ":", ",", "1", ":", ",", "...", "]", ".", "type", "(", "torch", ".", "float32", ")", "\n", "dc", "=", "bound", "[", ":", ",", "1", ":", ",", "...", "]", ".", "type", "(", "torch", ".", "float32", ")", "\n", "\n", "multipled", "=", "torch", ".", "einsum", "(", "\"bcxyz,bcxyz->bcxyz\"", ",", "pc", ",", "dc", ")", "\n", "bd_loss", "=", "multipled", ".", "mean", "(", ")", "\n", "\n", "return", "bd_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.SoftDiceLoss.__init__": [[110, 122], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "apply_nonlin", "=", "None", ",", "batch_dice", "=", "False", ",", "do_bg", "=", "True", ",", "smooth", "=", "1.", ",", "\n", "square", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "super", "(", "SoftDiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "square", "=", "square", "\n", "self", ".", "do_bg", "=", "do_bg", "\n", "self", ".", "batch_dice", "=", "batch_dice", "\n", "self", ".", "apply_nonlin", "=", "apply_nonlin", "\n", "self", ".", "smooth", "=", "smooth", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.SoftDiceLoss.forward": [[123, 146], ["boundary_loss.get_tp_fp_fn", "dc.mean.mean.mean", "list", "boundary_loss.SoftDiceLoss.apply_nonlin", "list", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.get_tp_fp_fn"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "loss_mask", "=", "None", ")", ":", "\n", "        ", "shp_x", "=", "x", ".", "shape", "\n", "\n", "if", "self", ".", "batch_dice", ":", "\n", "            ", "axes", "=", "[", "0", "]", "+", "list", "(", "range", "(", "2", ",", "len", "(", "shp_x", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "axes", "=", "list", "(", "range", "(", "2", ",", "len", "(", "shp_x", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "apply_nonlin", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "apply_nonlin", "(", "x", ")", "\n", "\n", "", "tp", ",", "fp", ",", "fn", "=", "get_tp_fp_fn", "(", "x", ",", "y", ",", "axes", ",", "loss_mask", ",", "self", ".", "square", ")", "\n", "\n", "dc", "=", "(", "2", "*", "tp", "+", "self", ".", "smooth", ")", "/", "(", "2", "*", "tp", "+", "fp", "+", "fn", "+", "self", ".", "smooth", ")", "\n", "\n", "if", "not", "self", ".", "do_bg", ":", "\n", "            ", "if", "self", ".", "batch_dice", ":", "\n", "                ", "dc", "=", "dc", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                ", "dc", "=", "dc", "[", ":", ",", "1", ":", "]", "\n", "", "", "dc", "=", "dc", ".", "mean", "(", ")", "\n", "\n", "return", "-", "dc", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.DC_and_BD_loss.__init__": [[148, 153], ["torch.nn.Module.__init__", "boundary_loss.BDLoss", "boundary_loss.SoftDiceLoss"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "soft_dice_kwargs", ",", "bd_kwargs", ",", "aggregate", "=", "\"sum\"", ")", ":", "\n", "        ", "super", "(", "DC_and_BD_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "aggregate", "=", "aggregate", "\n", "self", ".", "bd", "=", "BDLoss", "(", "**", "bd_kwargs", ")", "\n", "self", ".", "dc", "=", "SoftDiceLoss", "(", "apply_nonlin", "=", "softmax_helper", ",", "**", "soft_dice_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.DC_and_BD_loss.forward": [[154, 162], ["boundary_loss.DC_and_BD_loss.dc", "boundary_loss.DC_and_BD_loss.bd", "NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net_output", ",", "target", ",", "bound", ")", ":", "\n", "        ", "dc_loss", "=", "self", ".", "dc", "(", "net_output", ",", "target", ")", "\n", "bd_loss", "=", "self", ".", "bd", "(", "net_output", ",", "target", ",", "bound", ")", "\n", "if", "self", ".", "aggregate", "==", "\"sum\"", ":", "\n", "            ", "result", "=", "dc_loss", "+", "bd_loss", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"nah son\"", ")", "# reserved for other stuff (later)", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.HDDTBinaryLoss.__init__": [[174, 180], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute Hausdorff loss for binary segmentation\n        https://arxiv.org/pdf/1904.10030v1.pdf        \n        \"\"\"", "\n", "super", "(", "HDDTBinaryLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.HDDTBinaryLoss.forward": [[182, 206], ["boundary_loss.softmax_helper", "net_output[].type", "target[].type", "torch.from_numpy", "torch.einsum", "torch.einsum.mean", "torch.no_grad", "boundary_loss.compute_edts_forhdloss", "boundary_loss.compute_edts_forhdloss", "dist.to().type.to().type.to().type", "net_output[].type.cpu().numpy", "target[].type.cpu().numpy", "dist.to().type.to().type.to", "net_output[].type.cpu", "target[].type.cpu"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.softmax_helper", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.compute_edts_forhdloss", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.compute_edts_forhdloss"], ["", "def", "forward", "(", "self", ",", "net_output", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        net_output: (batch_size, 2, x,y,z)\n        target: ground truth, shape: (batch_size, 1, x,y,z)\n        \"\"\"", "\n", "net_output", "=", "softmax_helper", "(", "net_output", ")", "\n", "pc", "=", "net_output", "[", ":", ",", "1", ",", "...", "]", ".", "type", "(", "torch", ".", "float32", ")", "\n", "gt", "=", "target", "[", ":", ",", "0", ",", "...", "]", ".", "type", "(", "torch", ".", "float32", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pc_dist", "=", "compute_edts_forhdloss", "(", "pc", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "0.5", ")", "\n", "gt_dist", "=", "compute_edts_forhdloss", "(", "gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "0.5", ")", "\n", "# print('pc_dist.shape: ', pc_dist.shape)", "\n", "\n", "", "pred_error", "=", "(", "gt", "-", "pc", ")", "**", "2", "\n", "dist", "=", "pc_dist", "**", "2", "+", "gt_dist", "**", "2", "# \\alpha=2 in eq(8)", "\n", "\n", "dist", "=", "torch", ".", "from_numpy", "(", "dist", ")", "\n", "if", "dist", ".", "device", "!=", "pred_error", ".", "device", ":", "\n", "            ", "dist", "=", "dist", ".", "to", "(", "pred_error", ".", "device", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "\n", "", "multipled", "=", "torch", ".", "einsum", "(", "\"bxyz,bxyz->bxyz\"", ",", "pred_error", ",", "dist", ")", "\n", "hd_loss", "=", "multipled", ".", "mean", "(", ")", "\n", "\n", "return", "hd_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.DC_and_HDBinary_loss.__init__": [[210, 215], ["torch.nn.Module.__init__", "boundary_loss.SoftDiceLoss", "boundary_loss.HDDTBinaryLoss"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "soft_dice_kwargs", ",", "hd_kwargs", ",", "aggregate", "=", "\"sum\"", ")", ":", "\n", "        ", "super", "(", "DC_and_HDBinary_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "aggregate", "=", "aggregate", "\n", "self", ".", "dc", "=", "SoftDiceLoss", "(", "apply_nonlin", "=", "softmax_helper", ",", "**", "soft_dice_kwargs", ")", "\n", "self", ".", "hd", "=", "HDDTBinaryLoss", "(", "**", "hd_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.DC_and_HDBinary_loss.forward": [[216, 224], ["boundary_loss.DC_and_HDBinary_loss.dc", "boundary_loss.DC_and_HDBinary_loss.hd", "NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net_output", ",", "target", ")", ":", "\n", "        ", "dc_loss", "=", "self", ".", "dc", "(", "net_output", ",", "target", ")", "\n", "hd_loss", "=", "self", ".", "hd", "(", "net_output", ",", "target", ")", "\n", "if", "self", ".", "aggregate", "==", "\"sum\"", ":", "\n", "            ", "result", "=", "dc_loss", "+", "hd_loss", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"nah son\"", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.DistBinaryDiceLoss.__init__": [[249, 252], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["def", "__init__", "(", "self", ",", "smooth", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "DistBinaryDiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "smooth", "=", "smooth", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.DistBinaryDiceLoss.forward": [[253, 291], ["boundary_loss.softmax_helper", "gt[].type", "torch.from_numpy", "torch.sum", "dc.mean.mean.mean", "torch.no_grad", "all", "torch.no_grad", "dist.to().type.to().type.to().type", "len", "len", "gt.long.long.view", "gt.long.long.long", "torch.zeros", "y_onehot.cuda.cuda.scatter_", "boundary_loss.compute_edts_forPenalizedLoss", "y_onehot.cuda.cuda.cuda", "dist.to().type.to().type.to", "torch.sum", "torch.sum", "zip", "gt[].type.cpu().numpy", "gt[].type.cpu"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.softmax_helper", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.ND_Crossentropy.compute_edts_forPenalizedLoss"], ["", "def", "forward", "(", "self", ",", "net_output", ",", "gt", ")", ":", "\n", "        ", "\"\"\"\n        net_output: (batch_size, 2, x,y,z)\n        target: ground truth, shape: (batch_size, 1, x,y,z)\n        \"\"\"", "\n", "net_output", "=", "softmax_helper", "(", "net_output", ")", "\n", "# one hot code for gt", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "len", "(", "net_output", ".", "shape", ")", "!=", "len", "(", "gt", ".", "shape", ")", ":", "\n", "                ", "gt", "=", "gt", ".", "view", "(", "(", "gt", ".", "shape", "[", "0", "]", ",", "1", ",", "*", "gt", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "\n", "", "if", "all", "(", "[", "i", "==", "j", "for", "i", ",", "j", "in", "zip", "(", "net_output", ".", "shape", ",", "gt", ".", "shape", ")", "]", ")", ":", "\n", "# if this is the case then gt is probably already a one hot encoding", "\n", "                ", "y_onehot", "=", "gt", "\n", "", "else", ":", "\n", "                ", "gt", "=", "gt", ".", "long", "(", ")", "\n", "y_onehot", "=", "torch", ".", "zeros", "(", "net_output", ".", "shape", ")", "\n", "if", "net_output", ".", "device", ".", "type", "==", "\"cuda\"", ":", "\n", "                    ", "y_onehot", "=", "y_onehot", ".", "cuda", "(", "net_output", ".", "device", ".", "index", ")", "\n", "", "y_onehot", ".", "scatter_", "(", "1", ",", "gt", ",", "1", ")", "\n", "\n", "", "", "gt_temp", "=", "gt", "[", ":", ",", "0", ",", "...", "]", ".", "type", "(", "torch", ".", "float32", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "dist", "=", "compute_edts_forPenalizedLoss", "(", "gt_temp", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "0.5", ")", "+", "1.0", "\n", "# print('dist.shape: ', dist.shape)", "\n", "", "dist", "=", "torch", ".", "from_numpy", "(", "dist", ")", "\n", "\n", "if", "dist", ".", "device", "!=", "net_output", ".", "device", ":", "\n", "            ", "dist", "=", "dist", ".", "to", "(", "net_output", ".", "device", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "\n", "", "tp", "=", "net_output", "*", "y_onehot", "\n", "tp", "=", "torch", ".", "sum", "(", "tp", "[", ":", ",", "1", ",", "...", "]", "*", "dist", ",", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "\n", "dc", "=", "(", "2", "*", "tp", "+", "self", ".", "smooth", ")", "/", "(", "torch", ".", "sum", "(", "net_output", "[", ":", ",", "1", ",", "...", "]", ",", "(", "1", ",", "2", ",", "3", ")", ")", "+", "torch", ".", "sum", "(", "y_onehot", "[", ":", ",", "1", ",", "...", "]", ",", "(", "1", ",", "2", ",", "3", ")", ")", "+", "self", ".", "smooth", ")", "\n", "\n", "dc", "=", "dc", ".", "mean", "(", ")", "\n", "\n", "return", "-", "dc", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.softmax_helper": [[9, 16], ["x.size", "[].repeat", "torch.exp", "torch.exp.sum().repeat", "range", "len", "x.max", "torch.exp.sum", "x.size"], "function", ["None"], ["def", "softmax_helper", "(", "x", ")", ":", "\n", "# copy from: https://github.com/MIC-DKFZ/nnUNet/blob/master/nnunet/utilities/nd_softmax.py", "\n", "    ", "rpt", "=", "[", "1", "for", "_", "in", "range", "(", "len", "(", "x", ".", "size", "(", ")", ")", ")", "]", "\n", "rpt", "[", "1", "]", "=", "x", ".", "size", "(", "1", ")", "\n", "x_max", "=", "x", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "repeat", "(", "*", "rpt", ")", "\n", "e_x", "=", "torch", ".", "exp", "(", "x", "-", "x_max", ")", "\n", "return", "e_x", "/", "e_x", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "*", "rpt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.sum_tensor": [[17, 27], ["numpy.unique().astype", "sorted", "numpy.unique", "inp.sum.sum", "inp.sum.sum", "int", "int"], "function", ["None"], ["", "def", "sum_tensor", "(", "inp", ",", "axes", ",", "keepdim", "=", "False", ")", ":", "\n", "# copy from: https://github.com/MIC-DKFZ/nnUNet/blob/master/nnunet/utilities/tensor_utilities.py", "\n", "    ", "axes", "=", "np", ".", "unique", "(", "axes", ")", ".", "astype", "(", "int", ")", "\n", "if", "keepdim", ":", "\n", "        ", "for", "ax", "in", "axes", ":", "\n", "            ", "inp", "=", "inp", ".", "sum", "(", "int", "(", "ax", ")", ",", "keepdim", "=", "True", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "ax", "in", "sorted", "(", "axes", ",", "reverse", "=", "True", ")", ":", "\n", "            ", "inp", "=", "inp", ".", "sum", "(", "int", "(", "ax", ")", ")", "\n", "", "", "return", "inp", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.get_tp_fp_fn": [[28, 80], ["boundary_loss.sum_tensor", "boundary_loss.sum_tensor", "boundary_loss.sum_tensor", "tuple", "torch.no_grad", "all", "torch.stack", "torch.stack", "torch.stack", "range", "len", "len", "gt.long.view", "gt.long.long", "torch.zeros", "y_onehot.cuda.scatter_", "tuple", "tuple", "tuple", "len", "y_onehot.cuda.cuda", "net_output.size", "zip", "torch.unbind", "torch.unbind", "torch.unbind"], "function", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.sum_tensor", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.sum_tensor", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.sum_tensor"], ["", "def", "get_tp_fp_fn", "(", "net_output", ",", "gt", ",", "axes", "=", "None", ",", "mask", "=", "None", ",", "square", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    copy from: https://github.com/MIC-DKFZ/nnUNet/blob/master/nnunet/training/loss_functions/dice_loss.py\n    net_output must be (b, c, x, y(, z)))\n    gt must be a label map (shape (b, 1, x, y(, z)) OR shape (b, x, y(, z))) or one hot encoding (b, c, x, y(, z))\n    if mask is provided it must have shape (b, 1, x, y(, z)))\n    :param net_output:\n    :param gt:\n    :param axes:\n    :param mask: mask must be 1 for valid pixels and 0 for invalid pixels\n    :param square: if True then fp, tp and fn will be squared before summation\n    :return:\n    \"\"\"", "\n", "if", "axes", "is", "None", ":", "\n", "        ", "axes", "=", "tuple", "(", "range", "(", "2", ",", "len", "(", "net_output", ".", "size", "(", ")", ")", ")", ")", "\n", "\n", "", "shp_x", "=", "net_output", ".", "shape", "\n", "shp_y", "=", "gt", ".", "shape", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "len", "(", "shp_x", ")", "!=", "len", "(", "shp_y", ")", ":", "\n", "            ", "gt", "=", "gt", ".", "view", "(", "(", "shp_y", "[", "0", "]", ",", "1", ",", "*", "shp_y", "[", "1", ":", "]", ")", ")", "\n", "\n", "", "if", "all", "(", "[", "i", "==", "j", "for", "i", ",", "j", "in", "zip", "(", "net_output", ".", "shape", ",", "gt", ".", "shape", ")", "]", ")", ":", "\n", "# if this is the case then gt is probably already a one hot encoding", "\n", "            ", "y_onehot", "=", "gt", "\n", "", "else", ":", "\n", "            ", "gt", "=", "gt", ".", "long", "(", ")", "\n", "y_onehot", "=", "torch", ".", "zeros", "(", "shp_x", ")", "\n", "if", "net_output", ".", "device", ".", "type", "==", "\"cuda\"", ":", "\n", "                ", "y_onehot", "=", "y_onehot", ".", "cuda", "(", "net_output", ".", "device", ".", "index", ")", "\n", "", "y_onehot", ".", "scatter_", "(", "1", ",", "gt", ",", "1", ")", "\n", "\n", "", "", "tp", "=", "net_output", "*", "y_onehot", "\n", "fp", "=", "net_output", "*", "(", "1", "-", "y_onehot", ")", "\n", "fn", "=", "(", "1", "-", "net_output", ")", "*", "y_onehot", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "tp", "=", "torch", ".", "stack", "(", "tuple", "(", "x_i", "*", "mask", "[", ":", ",", "0", "]", "for", "x_i", "in", "torch", ".", "unbind", "(", "tp", ",", "dim", "=", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "fp", "=", "torch", ".", "stack", "(", "tuple", "(", "x_i", "*", "mask", "[", ":", ",", "0", "]", "for", "x_i", "in", "torch", ".", "unbind", "(", "fp", ",", "dim", "=", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "fn", "=", "torch", ".", "stack", "(", "tuple", "(", "x_i", "*", "mask", "[", ":", ",", "0", "]", "for", "x_i", "in", "torch", ".", "unbind", "(", "fn", ",", "dim", "=", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "square", ":", "\n", "        ", "tp", "=", "tp", "**", "2", "\n", "fp", "=", "fp", "**", "2", "\n", "fn", "=", "fn", "**", "2", "\n", "\n", "", "tp", "=", "sum_tensor", "(", "tp", ",", "axes", ",", "keepdim", "=", "False", ")", "\n", "fp", "=", "sum_tensor", "(", "fp", ",", "axes", ",", "keepdim", "=", "False", ")", "\n", "fn", "=", "sum_tensor", "(", "fn", ",", "axes", ",", "keepdim", "=", "False", ")", "\n", "\n", "return", "tp", ",", "fp", ",", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.compute_edts_forhdloss": [[164, 171], ["numpy.zeros", "range", "scipy.ndimage.distance_transform_edt", "scipy.ndimage.distance_transform_edt"], "function", ["None"], ["", "", "def", "compute_edts_forhdloss", "(", "segmentation", ")", ":", "\n", "    ", "res", "=", "np", ".", "zeros", "(", "segmentation", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "segmentation", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "posmask", "=", "segmentation", "[", "i", "]", "\n", "negmask", "=", "~", "posmask", "\n", "res", "[", "i", "]", "=", "distance_transform_edt", "(", "posmask", ")", "+", "distance_transform_edt", "(", "negmask", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.boundary_loss.compute_edts_forPenalizedLoss": [[226, 242], ["numpy.zeros", "range", "scipy.ndimage.distance_transform_edt", "scipy.ndimage.distance_transform_edt", "numpy.max", "numpy.max", "numpy.max", "numpy.max"], "function", ["None"], ["", "", "def", "compute_edts_forPenalizedLoss", "(", "GT", ")", ":", "\n", "    ", "\"\"\"\n    GT.shape = (batch_size, x,y,z)\n    only for binary segmentation\n    \"\"\"", "\n", "res", "=", "np", ".", "zeros", "(", "GT", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "GT", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "posmask", "=", "GT", "[", "i", "]", "\n", "negmask", "=", "~", "posmask", "\n", "pos_edt", "=", "distance_transform_edt", "(", "posmask", ")", "\n", "pos_edt", "=", "(", "np", ".", "max", "(", "pos_edt", ")", "-", "pos_edt", ")", "*", "posmask", "\n", "neg_edt", "=", "distance_transform_edt", "(", "negmask", ")", "\n", "neg_edt", "=", "(", "np", ".", "max", "(", "neg_edt", ")", "-", "neg_edt", ")", "*", "negmask", "\n", "\n", "res", "[", "i", "]", "=", "pos_edt", "/", "np", ".", "max", "(", "pos_edt", ")", "+", "neg_edt", "/", "np", ".", "max", "(", "neg_edt", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.lovasz_loss.LovaszSoftmax.__init__": [[23, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "LovaszSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.lovasz_loss.LovaszSoftmax.prob_flatten": [[27, 38], ["input.permute().contiguous.permute().contiguous.size", "target.view", "input.permute().contiguous.permute().contiguous.dim", "input.permute().contiguous.permute().contiguous.dim", "input.permute().contiguous.permute().contiguous.permute().contiguous", "input.permute().contiguous.permute().contiguous.view", "input.permute().contiguous.permute().contiguous.dim", "input.permute().contiguous.permute().contiguous.permute().contiguous", "input.permute().contiguous.permute().contiguous.view", "input.permute().contiguous.permute().contiguous.permute", "input.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "prob_flatten", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "assert", "input", ".", "dim", "(", ")", "in", "[", "4", ",", "5", "]", "\n", "num_class", "=", "input", ".", "size", "(", "1", ")", "\n", "if", "input", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "input", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "input_flatten", "=", "input", ".", "view", "(", "-", "1", ",", "num_class", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "5", ":", "\n", "            ", "input", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "input_flatten", "=", "input", ".", "view", "(", "-", "1", ",", "num_class", ")", "\n", "", "target_flatten", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "return", "input_flatten", ",", "target_flatten", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.lovasz_loss.LovaszSoftmax.lovasz_softmax_flat": [[39, 61], ["inputs.size", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.stack.append", "torch.stack.append", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.stack.sum", "torch.stack.sum", "torch.stack.mean", "torch.stack.mean", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "lovasz_loss.lovasz_grad"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.lovasz_loss.lovasz_grad"], ["", "def", "lovasz_softmax_flat", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "num_classes", "=", "inputs", ".", "size", "(", "1", ")", "\n", "losses", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "target_c", "=", "(", "targets", "==", "c", ")", ".", "float", "(", ")", "\n", "if", "num_classes", "==", "1", ":", "\n", "                ", "input_c", "=", "inputs", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "                ", "input_c", "=", "inputs", "[", ":", ",", "c", "]", "\n", "", "loss_c", "=", "(", "torch", ".", "autograd", ".", "Variable", "(", "target_c", ")", "-", "input_c", ")", ".", "abs", "(", ")", "\n", "loss_c_sorted", ",", "loss_index", "=", "torch", ".", "sort", "(", "loss_c", ",", "0", ",", "descending", "=", "True", ")", "\n", "target_c_sorted", "=", "target_c", "[", "loss_index", "]", "\n", "losses", ".", "append", "(", "torch", ".", "dot", "(", "loss_c_sorted", ",", "torch", ".", "autograd", ".", "Variable", "(", "lovasz_grad", "(", "target_c_sorted", ")", ")", ")", ")", "\n", "", "losses", "=", "torch", ".", "stack", "(", "losses", ")", "\n", "\n", "if", "self", ".", "reduction", "==", "'none'", ":", "\n", "            ", "loss", "=", "losses", "\n", "", "elif", "self", ".", "reduction", "==", "'sum'", ":", "\n", "            ", "loss", "=", "losses", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "losses", ".", "mean", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.lovasz_loss.LovaszSoftmax.forward": [[62, 68], ["lovasz_loss.LovaszSoftmax.prob_flatten", "lovasz_loss.LovaszSoftmax.lovasz_softmax_flat"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.lovasz_loss.LovaszSoftmax.prob_flatten", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.lovasz_loss.LovaszSoftmax.lovasz_softmax_flat"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "# print(inputs.shape, targets.shape) # (batch size, class_num, x,y,z), (batch size, 1, x,y,z)", "\n", "        ", "inputs", ",", "targets", "=", "self", ".", "prob_flatten", "(", "inputs", ",", "targets", ")", "\n", "# print(inputs.shape, targets.shape)", "\n", "losses", "=", "self", ".", "lovasz_softmax_flat", "(", "inputs", ",", "targets", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.lovasz_loss.lovasz_grad": [[7, 20], ["len", "gt_sorted.sum", "gt_sorted.float().cumsum", "gt_sorted.float"], "function", ["None"], ["def", "lovasz_grad", "(", "gt_sorted", ")", ":", "\n", "    ", "\"\"\"\n    Computes gradient of the Lovasz extension w.r.t sorted errors\n    See Alg. 1 in paper\n    \"\"\"", "\n", "p", "=", "len", "(", "gt_sorted", ")", "\n", "gts", "=", "gt_sorted", ".", "sum", "(", ")", "\n", "intersection", "=", "gts", "-", "gt_sorted", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "union", "=", "gts", "+", "(", "1", "-", "gt_sorted", ")", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "jaccard", "=", "1.", "-", "intersection", "/", "union", "\n", "if", "p", ">", "1", ":", "# cover 1-pixel case", "\n", "        ", "jaccard", "[", "1", ":", "p", "]", "=", "jaccard", "[", "1", ":", "p", "]", "-", "jaccard", "[", "0", ":", "-", "1", "]", "\n", "", "return", "jaccard", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.hausdorff.HausdorffDTLoss.__init__": [[22, 25], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["def", "__init__", "(", "self", ",", "alpha", "=", "2.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "HausdorffDTLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.hausdorff.HausdorffDTLoss.distance_field": [[26, 42], ["torch.no_grad", "numpy.zeros_like", "range", "len", "fg_mask.any", "scipy.ndimage.morphology.distance_transform_edt", "scipy.ndimage.morphology.distance_transform_edt"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "distance_field", "(", "self", ",", "img", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "field", "=", "np", ".", "zeros_like", "(", "img", ")", "\n", "\n", "for", "batch", "in", "range", "(", "len", "(", "img", ")", ")", ":", "\n", "            ", "fg_mask", "=", "img", "[", "batch", "]", ">", "0.5", "\n", "\n", "if", "fg_mask", ".", "any", "(", ")", ":", "\n", "                ", "bg_mask", "=", "~", "fg_mask", "\n", "\n", "fg_dist", "=", "edt", "(", "fg_mask", ")", "\n", "bg_dist", "=", "edt", "(", "bg_mask", ")", "\n", "\n", "field", "[", "batch", "]", "=", "fg_dist", "+", "bg_dist", "\n", "\n", "", "", "return", "field", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.hausdorff.HausdorffDTLoss.forward": [[43, 81], ["torch.from_numpy().float", "torch.from_numpy().float", "dt_field.mean", "pred.dim", "target.dim", "pred.dim", "pred.dim", "torch.from_numpy", "torch.from_numpy", "dt_field.mean.cpu().numpy", "hausdorff.HausdorffDTLoss.distance_field", "hausdorff.HausdorffDTLoss.distance_field", "pred.cpu().numpy", "target.cpu().numpy", "dt_field.mean.cpu", "dt_field.cpu().numpy", "pred_error.cpu().numpy", "distance.cpu().numpy", "torch.from_numpy().float.cpu().numpy", "torch.from_numpy().float.cpu().numpy", "pred.cpu", "target.cpu", "dt_field.cpu", "pred_error.cpu", "distance.cpu", "torch.from_numpy().float.cpu", "torch.from_numpy().float.cpu"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.hausdorff.HausdorffDTLoss.distance_field", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.hausdorff.HausdorffDTLoss.distance_field"], ["", "def", "forward", "(", "\n", "self", ",", "pred", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "debug", "=", "False", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Uses one binary channel: 1 - fg, 0 - bg\n        pred: (b, 1, x, y, z) or (b, 1, x, y)\n        target: (b, 1, x, y, z) or (b, 1, x, y)\n        \"\"\"", "\n", "assert", "pred", ".", "dim", "(", ")", "==", "4", "or", "pred", ".", "dim", "(", ")", "==", "5", ",", "\"Only 2D and 3D supported\"", "\n", "assert", "(", "\n", "pred", ".", "dim", "(", ")", "==", "target", ".", "dim", "(", ")", "\n", ")", ",", "\"Prediction and target need to be of same dimension\"", "\n", "\n", "# pred = torch.sigmoid(pred)", "\n", "\n", "pred_dt", "=", "torch", ".", "from_numpy", "(", "self", ".", "distance_field", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ".", "float", "(", ")", "\n", "target_dt", "=", "torch", ".", "from_numpy", "(", "self", ".", "distance_field", "(", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ".", "float", "(", ")", "\n", "\n", "pred_error", "=", "(", "pred", "-", "target", ")", "**", "2", "\n", "distance", "=", "pred_dt", "**", "self", ".", "alpha", "+", "target_dt", "**", "self", ".", "alpha", "\n", "\n", "dt_field", "=", "pred_error", "*", "distance", "\n", "loss", "=", "dt_field", ".", "mean", "(", ")", "\n", "\n", "if", "debug", ":", "\n", "            ", "return", "(", "\n", "loss", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "(", "\n", "dt_field", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", ",", "\n", "pred_error", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", ",", "\n", "distance", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", ",", "\n", "pred_dt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", ",", "\n", "target_dt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.hausdorff.HausdorffERLoss.__init__": [[86, 91], ["torch.nn.Module.__init__", "hausdorff.HausdorffERLoss.prepare_kernels"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.hausdorff.HausdorffERLoss.prepare_kernels"], ["def", "__init__", "(", "self", ",", "alpha", "=", "2.0", ",", "erosions", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "HausdorffERLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "erosions", "=", "erosions", "\n", "self", ".", "prepare_kernels", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.hausdorff.HausdorffERLoss.prepare_kernels": [[92, 98], ["numpy.array", "numpy.array", "numpy.array", "cv2.getStructuringElement"], "methods", ["None"], ["", "def", "prepare_kernels", "(", "self", ")", ":", "\n", "        ", "cross", "=", "np", ".", "array", "(", "[", "cv", ".", "getStructuringElement", "(", "cv", ".", "MORPH_CROSS", ",", "(", "3", ",", "3", ")", ")", "]", ")", "\n", "bound", "=", "np", ".", "array", "(", "[", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", "]", ")", "\n", "\n", "self", ".", "kernel2D", "=", "cross", "*", "0.2", "\n", "self", ".", "kernel3D", "=", "np", ".", "array", "(", "[", "bound", ",", "cross", ",", "bound", "]", ")", "*", "(", "1", "/", "7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.hausdorff.HausdorffERLoss.perform_erosion": [[99, 144], ["torch.no_grad", "numpy.zeros_like", "range", "len", "erosions.append", "range", "ValueError", "numpy.copy", "scipy.ndimage.convolve", "erosion.ptp", "erosions.append", "erosion.ptp", "numpy.copy", "erosion.min"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "perform_erosion", "(", "\n", "self", ",", "pred", ":", "np", ".", "ndarray", ",", "target", ":", "np", ".", "ndarray", ",", "debug", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "bound", "=", "(", "pred", "-", "target", ")", "**", "2", "\n", "\n", "if", "bound", ".", "ndim", "==", "5", ":", "\n", "            ", "kernel", "=", "self", ".", "kernel3D", "\n", "", "elif", "bound", ".", "ndim", "==", "4", ":", "\n", "            ", "kernel", "=", "self", ".", "kernel2D", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Dimension {bound.ndim} is nor supported.\"", ")", "\n", "\n", "", "eroted", "=", "np", ".", "zeros_like", "(", "bound", ")", "\n", "erosions", "=", "[", "]", "\n", "\n", "for", "batch", "in", "range", "(", "len", "(", "bound", ")", ")", ":", "\n", "\n", "# debug", "\n", "            ", "erosions", ".", "append", "(", "np", ".", "copy", "(", "bound", "[", "batch", "]", "[", "0", "]", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "erosions", ")", ":", "\n", "\n", "# compute convolution with kernel", "\n", "                ", "dilation", "=", "convolve", "(", "bound", "[", "batch", "]", ",", "kernel", ",", "mode", "=", "\"constant\"", ",", "cval", "=", "0.0", ")", "\n", "\n", "# apply soft thresholding at 0.5 and normalize", "\n", "erosion", "=", "dilation", "-", "0.5", "\n", "erosion", "[", "erosion", "<", "0", "]", "=", "0", "\n", "\n", "if", "erosion", ".", "ptp", "(", ")", "!=", "0", ":", "\n", "                    ", "erosion", "=", "(", "erosion", "-", "erosion", ".", "min", "(", ")", ")", "/", "erosion", ".", "ptp", "(", ")", "\n", "\n", "# save erosion and add to loss", "\n", "", "bound", "[", "batch", "]", "=", "erosion", "\n", "eroted", "[", "batch", "]", "+=", "erosion", "*", "(", "k", "+", "1", ")", "**", "self", ".", "alpha", "\n", "\n", "if", "debug", ":", "\n", "                    ", "erosions", ".", "append", "(", "np", ".", "copy", "(", "erosion", "[", "0", "]", ")", ")", "\n", "\n", "# image visualization in debug mode", "\n", "", "", "", "if", "debug", ":", "\n", "            ", "return", "eroted", ",", "erosions", "\n", "", "else", ":", "\n", "            ", "return", "eroted", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.hausdorff.HausdorffERLoss.forward": [[145, 174], ["pred.dim", "target.dim", "hausdorff.HausdorffERLoss.perform_erosion", "torch.from_numpy().float", "torch.from_numpy().float.mean", "pred.dim", "pred.dim", "pred.cpu().numpy", "target.cpu().numpy", "torch.from_numpy().float.mean", "torch.from_numpy", "pred.cpu", "target.cpu", "hausdorff.HausdorffERLoss.perform_erosion", "pred.cpu().numpy", "target.cpu().numpy", "pred.cpu", "target.cpu"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.hausdorff.HausdorffERLoss.perform_erosion", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.hausdorff.HausdorffERLoss.perform_erosion"], ["", "", "def", "forward", "(", "\n", "self", ",", "pred", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "debug", "=", "False", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Uses one binary channel: 1 - fg, 0 - bg\n        pred: (b, 1, x, y, z) or (b, 1, x, y)\n        target: (b, 1, x, y, z) or (b, 1, x, y)\n        \"\"\"", "\n", "assert", "pred", ".", "dim", "(", ")", "==", "4", "or", "pred", ".", "dim", "(", ")", "==", "5", ",", "\"Only 2D and 3D supported\"", "\n", "assert", "(", "\n", "pred", ".", "dim", "(", ")", "==", "target", ".", "dim", "(", ")", "\n", ")", ",", "\"Prediction and target need to be of same dimension\"", "\n", "\n", "# pred = torch.sigmoid(pred)", "\n", "\n", "if", "debug", ":", "\n", "            ", "eroted", ",", "erosions", "=", "self", ".", "perform_erosion", "(", "\n", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "debug", "\n", ")", "\n", "return", "eroted", ".", "mean", "(", ")", ",", "erosions", "\n", "\n", "", "else", ":", "\n", "            ", "eroted", "=", "torch", ".", "from_numpy", "(", "\n", "self", ".", "perform_erosion", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "debug", ")", "\n", ")", ".", "float", "(", ")", "\n", "\n", "loss", "=", "eroted", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.focal_loss.FocalLoss.__init__": [[22, 34], ["torch.Module.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["def", "__init__", "(", "self", ",", "apply_nonlin", "=", "None", ",", "alpha", "=", "None", ",", "gamma", "=", "2", ",", "balance_index", "=", "0", ",", "smooth", "=", "1e-5", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "apply_nonlin", "=", "apply_nonlin", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "balance_index", "=", "balance_index", "\n", "self", ".", "smooth", "=", "smooth", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n", "if", "self", ".", "smooth", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "smooth", "<", "0", "or", "self", ".", "smooth", ">", "1.0", ":", "\n", "                ", "raise", "ValueError", "(", "'smooth value should be in [0,1]'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.focal_loss.FocalLoss.forward": [[35, 92], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "target.view.view.view", "target.view.view.cpu().long", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.clamp.scatter_", "torch.clamp.scatter_", "torch.clamp.scatter_", "pt.log", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "focal_loss.FocalLoss.apply_nonlin", "logit.view.view.dim", "logit.view.view.view", "logit.view.view.permute().contiguous", "logit.view.view.view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "isinstance", "torch.ones.to", "torch.ones.to", "torch.ones.to", "torch.clamp.to", "torch.clamp.to", "torch.clamp.to", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "loss.sum.sum.mean", "loss.sum.sum.sum", "logit.view.view.size", "logit.view.view.size", "logit.view.view.size", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "isinstance", "target.view.view.cpu", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "logit.view.view.permute", "len", "torch.ones.sum", "torch.ones.sum", "torch.ones.sum", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "TypeError", "target.view.view.size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "logit", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "apply_nonlin", "is", "not", "None", ":", "\n", "            ", "logit", "=", "self", ".", "apply_nonlin", "(", "logit", ")", "\n", "", "num_class", "=", "logit", ".", "shape", "[", "1", "]", "\n", "\n", "if", "logit", ".", "dim", "(", ")", ">", "2", ":", "\n", "# N,C,d1,d2 -> N,C,m (m=d1*d2*...)", "\n", "            ", "logit", "=", "logit", ".", "view", "(", "logit", ".", "size", "(", "0", ")", ",", "logit", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "logit", "=", "logit", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "logit", "=", "logit", ".", "view", "(", "-", "1", ",", "logit", ".", "size", "(", "-", "1", ")", ")", "\n", "", "target", "=", "torch", ".", "squeeze", "(", "target", ",", "1", ")", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "# print(logit.shape, target.shape)", "\n", "# ", "\n", "alpha", "=", "self", ".", "alpha", "\n", "\n", "if", "alpha", "is", "None", ":", "\n", "            ", "alpha", "=", "torch", ".", "ones", "(", "num_class", ",", "1", ")", "\n", "", "elif", "isinstance", "(", "alpha", ",", "(", "list", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "            ", "assert", "len", "(", "alpha", ")", "==", "num_class", "\n", "alpha", "=", "torch", ".", "FloatTensor", "(", "alpha", ")", ".", "view", "(", "num_class", ",", "1", ")", "\n", "alpha", "=", "alpha", "/", "alpha", ".", "sum", "(", ")", "\n", "", "elif", "isinstance", "(", "alpha", ",", "float", ")", ":", "\n", "            ", "alpha", "=", "torch", ".", "ones", "(", "num_class", ",", "1", ")", "\n", "alpha", "=", "alpha", "*", "(", "1", "-", "self", ".", "alpha", ")", "\n", "alpha", "[", "self", ".", "balance_index", "]", "=", "self", ".", "alpha", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'Not support alpha type'", ")", "\n", "\n", "", "if", "alpha", ".", "device", "!=", "logit", ".", "device", ":", "\n", "            ", "alpha", "=", "alpha", ".", "to", "(", "logit", ".", "device", ")", "\n", "\n", "", "idx", "=", "target", ".", "cpu", "(", ")", ".", "long", "(", ")", "\n", "\n", "one_hot_key", "=", "torch", ".", "FloatTensor", "(", "target", ".", "size", "(", "0", ")", ",", "num_class", ")", ".", "zero_", "(", ")", "\n", "one_hot_key", "=", "one_hot_key", ".", "scatter_", "(", "1", ",", "idx", ",", "1", ")", "\n", "if", "one_hot_key", ".", "device", "!=", "logit", ".", "device", ":", "\n", "            ", "one_hot_key", "=", "one_hot_key", ".", "to", "(", "logit", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "smooth", ":", "\n", "            ", "one_hot_key", "=", "torch", ".", "clamp", "(", "\n", "one_hot_key", ",", "self", ".", "smooth", "/", "(", "num_class", "-", "1", ")", ",", "1.0", "-", "self", ".", "smooth", ")", "\n", "", "pt", "=", "(", "one_hot_key", "*", "logit", ")", ".", "sum", "(", "1", ")", "+", "self", ".", "smooth", "\n", "logpt", "=", "pt", ".", "log", "(", ")", "\n", "\n", "gamma", "=", "self", ".", "gamma", "\n", "\n", "alpha", "=", "alpha", "[", "idx", "]", "\n", "alpha", "=", "torch", ".", "squeeze", "(", "alpha", ")", "\n", "loss", "=", "-", "1", "*", "alpha", "*", "torch", ".", "pow", "(", "(", "1", "-", "pt", ")", ",", "gamma", ")", "*", "logpt", "\n", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.ND_Crossentropy.CrossentropyND.forward": [[15, 33], ["target.view.view.long", "inp.transpose.transpose.contiguous", "inp.transpose.transpose.view", "target.view.view.view", "super().forward", "inp.transpose.transpose.size", "len", "inp.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.forward"], ["def", "forward", "(", "self", ",", "inp", ",", "target", ")", ":", "\n", "        ", "target", "=", "target", ".", "long", "(", ")", "\n", "num_classes", "=", "inp", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "i0", "=", "1", "\n", "i1", "=", "2", "\n", "\n", "while", "i1", "<", "len", "(", "inp", ".", "shape", ")", ":", "# this is ugly but torch only allows to transpose two axes at once", "\n", "            ", "inp", "=", "inp", ".", "transpose", "(", "i0", ",", "i1", ")", "\n", "i0", "+=", "1", "\n", "i1", "+=", "1", "\n", "\n", "", "inp", "=", "inp", ".", "contiguous", "(", ")", "\n", "inp", "=", "inp", ".", "view", "(", "-", "1", ",", "num_classes", ")", "\n", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ",", ")", "\n", "\n", "return", "super", "(", "CrossentropyND", ",", "self", ")", ".", "forward", "(", "inp", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.ND_Crossentropy.TopKLoss.__init__": [[38, 41], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "100", ",", "k", "=", "10", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "super", "(", "TopKLoss", ",", "self", ")", ".", "__init__", "(", "weight", ",", "False", ",", "ignore_index", ",", "reduce", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.ND_Crossentropy.TopKLoss.forward": [[42, 48], ["target[].long", "ND_Crossentropy.CrossentropyND.forward", "numpy.prod", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "super().forward.mean", "super().forward.view", "int"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.forward"], ["", "def", "forward", "(", "self", ",", "inp", ",", "target", ")", ":", "\n", "        ", "target", "=", "target", "[", ":", ",", "0", "]", ".", "long", "(", ")", "\n", "res", "=", "super", "(", "TopKLoss", ",", "self", ")", ".", "forward", "(", "inp", ",", "target", ")", "\n", "num_voxels", "=", "np", ".", "prod", "(", "res", ".", "shape", ")", "\n", "res", ",", "_", "=", "torch", ".", "topk", "(", "res", ".", "view", "(", "(", "-", "1", ",", ")", ")", ",", "int", "(", "num_voxels", "*", "self", ".", "k", "/", "100", ")", ",", "sorted", "=", "False", ")", "\n", "return", "res", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.ND_Crossentropy.WeightedCrossEntropyLoss.__init__": [[54, 57], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "None", ")", ":", "\n", "        ", "super", "(", "WeightedCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.ND_Crossentropy.WeightedCrossEntropyLoss.forward": [[58, 77], ["target.view.view.long", "inp.transpose.transpose.contiguous", "inp.transpose.transpose.view", "target.view.view.view", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "inp.transpose.transpose.size", "len", "inp.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ",", "target", ")", ":", "\n", "        ", "target", "=", "target", ".", "long", "(", ")", "\n", "num_classes", "=", "inp", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "i0", "=", "1", "\n", "i1", "=", "2", "\n", "\n", "while", "i1", "<", "len", "(", "inp", ".", "shape", ")", ":", "# this is ugly but torch only allows to transpose two axes at once", "\n", "            ", "inp", "=", "inp", ".", "transpose", "(", "i0", ",", "i1", ")", "\n", "i0", "+=", "1", "\n", "i1", "+=", "1", "\n", "\n", "", "inp", "=", "inp", ".", "contiguous", "(", ")", "\n", "inp", "=", "inp", ".", "view", "(", "-", "1", ",", "num_classes", ")", "\n", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ",", ")", "\n", "wce_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "self", ".", "weight", ")", "\n", "\n", "return", "wce_loss", "(", "inp", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.ND_Crossentropy.WeightedCrossEntropyLossV2.forward": [[85, 126], ["torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "gt.view.view.long", "net_output.transpose.transpose.contiguous", "net_output.transpose.transpose.view", "gt.view.view.view", "torch.cross_entropy", "torch.cross_entropy", "net_output.transpose.transpose.size", "len", "net_output.transpose.transpose.transpose"], "methods", ["None"], ["def", "forward", "(", "self", ",", "net_output", ",", "gt", ")", ":", "\n", "# compute weight", "\n", "# shp_x = net_output.shape", "\n", "# shp_y = gt.shape", "\n", "# print(shp_x, shp_y)", "\n", "# with torch.no_grad():", "\n", "#     if len(shp_x) != len(shp_y):", "\n", "#         gt = gt.view((shp_y[0], 1, *shp_y[1:]))", "\n", "\n", "#     if all([i == j for i, j in zip(net_output.shape, gt.shape)]):", "\n", "#         # if this is the case then gt is probably already a one hot encoding", "\n", "#         y_onehot = gt", "\n", "#     else:", "\n", "#         gt = gt.long()", "\n", "#         y_onehot = torch.zeros(shp_x)", "\n", "#         if net_output.device.type == \"cuda\":", "\n", "#             y_onehot = y_onehot.cuda(net_output.device.index)", "\n", "#         y_onehot.scatter_(1, gt, 1)", "\n", "# y_onehot = y_onehot.transpose(0,1).contiguous()", "\n", "# class_weights = (torch.einsum(\"cbxyz->c\", y_onehot).type(torch.float32) + 1e-10)/torch.numel(y_onehot)", "\n", "# print('class_weights', class_weights)", "\n", "# class_weights = class_weights.view(-1)", "\n", "        ", "class_weights", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "[", "0.2", ",", "0.8", "]", ")", "\n", "gt", "=", "gt", ".", "long", "(", ")", "\n", "num_classes", "=", "net_output", ".", "size", "(", ")", "[", "1", "]", "\n", "# class_weights = self._class_weights(inp)", "\n", "\n", "i0", "=", "1", "\n", "i1", "=", "2", "\n", "\n", "while", "i1", "<", "len", "(", "net_output", ".", "shape", ")", ":", "# this is ugly but torch only allows to transpose two axes at once", "\n", "            ", "net_output", "=", "net_output", ".", "transpose", "(", "i0", ",", "i1", ")", "\n", "i0", "+=", "1", "\n", "i1", "+=", "1", "\n", "\n", "", "net_output", "=", "net_output", ".", "contiguous", "(", ")", "\n", "net_output", "=", "net_output", ".", "view", "(", "-", "1", ",", "num_classes", ")", "#shape=(vox_num, class_num)", "\n", "\n", "gt", "=", "gt", ".", "view", "(", "-", "1", ",", ")", "\n", "# print('*'*20)", "\n", "return", "F", ".", "cross_entropy", "(", "net_output", ",", "gt", ")", "# , weight=class_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.ND_Crossentropy.DisPenalizedCE.forward": [[175, 209], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "dist.to().type.to().type.view", "target.view.view.long", "inp.transpose.transpose.contiguous", "inp.transpose.transpose.view", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax.", "torch.nn.LogSoftmax.", "target.view.view.view", "loss.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dist.to().type.to().type.to().type", "inp.transpose.transpose.size", "len", "inp.transpose.transpose.transpose", "ND_Crossentropy.compute_edts_forPenalizedLoss", "dist.to().type.to().type.to", "target.view.view.cpu().numpy", "range", "target.view.view.cpu"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.ND_Crossentropy.compute_edts_forPenalizedLoss"], ["def", "forward", "(", "self", ",", "inp", ",", "target", ")", ":", "\n", "# print(inp.shape, target.shape) # (batch, 2, xyz), (batch, 2, xyz)", "\n", "# compute distance map of ground truth", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "dist", "=", "compute_edts_forPenalizedLoss", "(", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "0.5", ")", "+", "1.0", "\n", "\n", "", "dist", "=", "torch", ".", "from_numpy", "(", "dist", ")", "\n", "if", "dist", ".", "device", "!=", "inp", ".", "device", ":", "\n", "            ", "dist", "=", "dist", ".", "to", "(", "inp", ".", "device", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "", "dist", "=", "dist", ".", "view", "(", "-", "1", ",", ")", "\n", "\n", "target", "=", "target", ".", "long", "(", ")", "\n", "num_classes", "=", "inp", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "i0", "=", "1", "\n", "i1", "=", "2", "\n", "\n", "while", "i1", "<", "len", "(", "inp", ".", "shape", ")", ":", "# this is ugly but torch only allows to transpose two axes at once", "\n", "            ", "inp", "=", "inp", ".", "transpose", "(", "i0", ",", "i1", ")", "\n", "i0", "+=", "1", "\n", "i1", "+=", "1", "\n", "\n", "", "inp", "=", "inp", ".", "contiguous", "(", ")", "\n", "inp", "=", "inp", ".", "view", "(", "-", "1", ",", "num_classes", ")", "\n", "log_sm", "=", "torch", ".", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "inp_logs", "=", "log_sm", "(", "inp", ")", "\n", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ",", ")", "\n", "# loss = nll_loss(inp_logs, target)", "\n", "loss", "=", "-", "inp_logs", "[", "range", "(", "target", ".", "shape", "[", "0", "]", ")", ",", "target", "]", "\n", "# print(loss.type(), dist.type())", "\n", "weighted_loss", "=", "loss", "*", "dist", "\n", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.ND_Crossentropy.flatten": [[137, 150], ["tensor.size", "tensor.permute", "transposed.contiguous.contiguous", "transposed.contiguous.view", "tuple", "range", "tensor.dim"], "function", ["None"], ["", "", "def", "flatten", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"Flattens a given tensor such that the channel axis is first.\n    The shapes are transformed as follows:\n       (N, C, D, H, W) -> (C, N * D * H * W)\n    \"\"\"", "\n", "C", "=", "tensor", ".", "size", "(", "1", ")", "\n", "# new axis order", "\n", "axis_order", "=", "(", "1", ",", "0", ")", "+", "tuple", "(", "range", "(", "2", ",", "tensor", ".", "dim", "(", ")", ")", ")", "\n", "# Transpose: (N, C, D, H, W) -> (C, N, D, H, W)", "\n", "transposed", "=", "tensor", ".", "permute", "(", "axis_order", ")", "\n", "# Flatten: (C, N, D, H, W) -> (C, N * D * H * W)", "\n", "transposed", "=", "transposed", ".", "contiguous", "(", ")", "\n", "return", "transposed", ".", "view", "(", "C", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.ND_Crossentropy.compute_edts_forPenalizedLoss": [[151, 167], ["numpy.squeeze", "numpy.zeros", "range", "scipy.ndimage.distance_transform_edt", "scipy.ndimage.distance_transform_edt", "numpy.max", "numpy.max", "numpy.max", "numpy.max"], "function", ["None"], ["", "def", "compute_edts_forPenalizedLoss", "(", "GT", ")", ":", "\n", "    ", "\"\"\"\n    GT.shape = (batch_size, x,y,z)\n    only for binary segmentation\n    \"\"\"", "\n", "GT", "=", "np", ".", "squeeze", "(", "GT", ")", "\n", "res", "=", "np", ".", "zeros", "(", "GT", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "GT", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "posmask", "=", "GT", "[", "i", "]", "\n", "negmask", "=", "~", "posmask", "\n", "pos_edt", "=", "distance_transform_edt", "(", "posmask", ")", "\n", "pos_edt", "=", "(", "np", ".", "max", "(", "pos_edt", ")", "-", "pos_edt", ")", "*", "posmask", "\n", "neg_edt", "=", "distance_transform_edt", "(", "negmask", ")", "\n", "neg_edt", "=", "(", "np", ".", "max", "(", "neg_edt", ")", "-", "neg_edt", ")", "*", "negmask", "\n", "res", "[", "i", "]", "=", "pos_edt", "/", "np", ".", "max", "(", "pos_edt", ")", "+", "neg_edt", "/", "np", ".", "max", "(", "neg_edt", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.ND_Crossentropy.nll_loss": [[211, 219], ["loss.mean", "range"], "function", ["None"], ["", "", "def", "nll_loss", "(", "input", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    customized nll loss\n    source: https://medium.com/@zhang_yang/understanding-cross-entropy-\n    implementation-in-pytorch-softmax-log-softmax-nll-cross-entropy-416a2b200e34\n    \"\"\"", "\n", "loss", "=", "-", "input", "[", "range", "(", "target", ".", "shape", "[", "0", "]", ")", ",", "target", "]", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.GDiceLoss.__init__": [[85, 96], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "apply_nonlin", "=", "None", ",", "smooth", "=", "1e-5", ")", ":", "\n", "        ", "\"\"\"\n        Generalized Dice;\n        Copy from: https://github.com/LIVIAETS/surface-loss/blob/108bd9892adca476e6cdf424124bc6268707498e/losses.py#L29\n        paper: https://arxiv.org/pdf/1707.03237.pdf\n        tf code: https://github.com/NifTK/NiftyNet/blob/dev/niftynet/layer/loss_segmentation.py#L279\n        \"\"\"", "\n", "super", "(", "GDiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "apply_nonlin", "=", "apply_nonlin", "\n", "self", ".", "smooth", "=", "smooth", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.GDiceLoss.forward": [[97, 127], ["divided.mean", "torch.no_grad", "all", "dice_loss.GDiceLoss.apply_nonlin", "torch.einsum", "len", "len", "gt.long.long.view", "gt.long.long.long", "torch.zeros", "y_onehot.cuda.cuda.scatter_", "torch.einsum", "torch.einsum", "torch.einsum", "y_onehot.cuda.cuda.cuda", "torch.einsum().type", "torch.einsum", "zip", "torch.einsum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net_output", ",", "gt", ")", ":", "\n", "        ", "shp_x", "=", "net_output", ".", "shape", "# (batch size,class_num,x,y,z)", "\n", "shp_y", "=", "gt", ".", "shape", "# (batch size,1,x,y,z)", "\n", "# one hot code for gt", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "len", "(", "shp_x", ")", "!=", "len", "(", "shp_y", ")", ":", "\n", "                ", "gt", "=", "gt", ".", "view", "(", "(", "shp_y", "[", "0", "]", ",", "1", ",", "*", "shp_y", "[", "1", ":", "]", ")", ")", "\n", "\n", "", "if", "all", "(", "[", "i", "==", "j", "for", "i", ",", "j", "in", "zip", "(", "net_output", ".", "shape", ",", "gt", ".", "shape", ")", "]", ")", ":", "\n", "# if this is the case then gt is probably already a one hot encoding", "\n", "                ", "y_onehot", "=", "gt", "\n", "", "else", ":", "\n", "                ", "gt", "=", "gt", ".", "long", "(", ")", "\n", "y_onehot", "=", "torch", ".", "zeros", "(", "shp_x", ")", "\n", "if", "net_output", ".", "device", ".", "type", "==", "\"cuda\"", ":", "\n", "                    ", "y_onehot", "=", "y_onehot", ".", "cuda", "(", "net_output", ".", "device", ".", "index", ")", "\n", "", "y_onehot", ".", "scatter_", "(", "1", ",", "gt", ",", "1", ")", "\n", "\n", "\n", "", "", "if", "self", ".", "apply_nonlin", "is", "not", "None", ":", "\n", "            ", "net_output", "=", "self", ".", "apply_nonlin", "(", "net_output", ")", "\n", "\n", "# copy from https://github.com/LIVIAETS/surface-loss/blob/108bd9892adca476e6cdf424124bc6268707498e/losses.py#L29", "\n", "", "w", ":", "torch", ".", "Tensor", "=", "1", "/", "(", "einsum", "(", "\"bcxyz->bc\"", ",", "y_onehot", ")", ".", "type", "(", "torch", ".", "float32", ")", "+", "1e-10", ")", "**", "2", "\n", "intersection", ":", "torch", ".", "Tensor", "=", "w", "*", "einsum", "(", "\"bcxyz, bcxyz->bc\"", ",", "net_output", ",", "y_onehot", ")", "\n", "union", ":", "torch", ".", "Tensor", "=", "w", "*", "(", "einsum", "(", "\"bcxyz->bc\"", ",", "net_output", ")", "+", "einsum", "(", "\"bcxyz->bc\"", ",", "y_onehot", ")", ")", "\n", "divided", ":", "torch", ".", "Tensor", "=", "-", "2", "*", "(", "einsum", "(", "\"bc->b\"", ",", "intersection", ")", "+", "self", ".", "smooth", ")", "/", "(", "einsum", "(", "\"bc->b\"", ",", "union", ")", "+", "self", ".", "smooth", ")", "\n", "gdc", "=", "divided", ".", "mean", "(", ")", "\n", "\n", "return", "gdc", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.GDiceLossV2.__init__": [[144, 155], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "apply_nonlin", "=", "None", ",", "smooth", "=", "1e-5", ")", ":", "\n", "        ", "\"\"\"\n        Generalized Dice;\n        Copy from: https://github.com/wolny/pytorch-3dunet/blob/6e5a24b6438f8c631289c10638a17dea14d42051/unet3d/losses.py#L75\n        paper: https://arxiv.org/pdf/1707.03237.pdf\n        tf code: https://github.com/NifTK/NiftyNet/blob/dev/niftynet/layer/loss_segmentation.py#L279\n        \"\"\"", "\n", "super", "(", "GDiceLossV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "apply_nonlin", "=", "apply_nonlin", "\n", "self", ".", "smooth", "=", "smooth", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.GDiceLossV2.forward": [[156, 190], ["dice_loss.flatten", "dice_loss.flatten", "target.float.float.float", "target.float.float.sum", "torch.autograd.Variable", "intersect.sum.sum.sum", "torch.no_grad", "all", "dice_loss.GDiceLossV2.apply_nonlin", "denominator.clamp", "len", "len", "gt.long.long.view", "gt.long.long.long", "torch.zeros", "y_onehot.cuda.cuda.scatter_", "y_onehot.cuda.cuda.cuda", "zip"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.flatten", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.flatten"], ["", "def", "forward", "(", "self", ",", "net_output", ",", "gt", ")", ":", "\n", "        ", "shp_x", "=", "net_output", ".", "shape", "# (batch size,class_num,x,y,z)", "\n", "shp_y", "=", "gt", ".", "shape", "# (batch size,1,x,y,z)", "\n", "# one hot code for gt", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "len", "(", "shp_x", ")", "!=", "len", "(", "shp_y", ")", ":", "\n", "                ", "gt", "=", "gt", ".", "view", "(", "(", "shp_y", "[", "0", "]", ",", "1", ",", "*", "shp_y", "[", "1", ":", "]", ")", ")", "\n", "\n", "", "if", "all", "(", "[", "i", "==", "j", "for", "i", ",", "j", "in", "zip", "(", "net_output", ".", "shape", ",", "gt", ".", "shape", ")", "]", ")", ":", "\n", "# if this is the case then gt is probably already a one hot encoding", "\n", "                ", "y_onehot", "=", "gt", "\n", "", "else", ":", "\n", "                ", "gt", "=", "gt", ".", "long", "(", ")", "\n", "y_onehot", "=", "torch", ".", "zeros", "(", "shp_x", ")", "\n", "if", "net_output", ".", "device", ".", "type", "==", "\"cuda\"", ":", "\n", "                    ", "y_onehot", "=", "y_onehot", ".", "cuda", "(", "net_output", ".", "device", ".", "index", ")", "\n", "", "y_onehot", ".", "scatter_", "(", "1", ",", "gt", ",", "1", ")", "\n", "\n", "\n", "", "", "if", "self", ".", "apply_nonlin", "is", "not", "None", ":", "\n", "            ", "net_output", "=", "self", ".", "apply_nonlin", "(", "net_output", ")", "\n", "\n", "", "input", "=", "flatten", "(", "net_output", ")", "\n", "target", "=", "flatten", "(", "y_onehot", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "target_sum", "=", "target", ".", "sum", "(", "-", "1", ")", "\n", "class_weights", "=", "Variable", "(", "1.", "/", "(", "target_sum", "*", "target_sum", ")", ".", "clamp", "(", "min", "=", "self", ".", "smooth", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "intersect", "=", "(", "input", "*", "target", ")", ".", "sum", "(", "-", "1", ")", "*", "class_weights", "\n", "intersect", "=", "intersect", ".", "sum", "(", ")", "\n", "\n", "denominator", "=", "(", "(", "input", "+", "target", ")", ".", "sum", "(", "-", "1", ")", "*", "class_weights", ")", ".", "sum", "(", ")", "\n", "\n", "return", "-", "2.", "*", "intersect", "/", "denominator", ".", "clamp", "(", "min", "=", "self", ".", "smooth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.SSLoss.__init__": [[193, 208], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "apply_nonlin", "=", "None", ",", "batch_dice", "=", "False", ",", "do_bg", "=", "True", ",", "smooth", "=", "1.", ",", "\n", "square", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Sensitivity-Specifity loss\n        paper: http://www.rogertam.ca/Brosch_MICCAI_2015.pdf\n        tf code: https://github.com/NifTK/NiftyNet/blob/df0f86733357fdc92bbc191c8fec0dcf49aa5499/niftynet/layer/loss_segmentation.py#L392\n        \"\"\"", "\n", "super", "(", "SSLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "square", "=", "square", "\n", "self", ".", "do_bg", "=", "do_bg", "\n", "self", ".", "batch_dice", "=", "batch_dice", "\n", "self", ".", "apply_nonlin", "=", "apply_nonlin", "\n", "self", ".", "smooth", "=", "smooth", "\n", "self", ".", "r", "=", "0.1", "# weight parameter in SS paper", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.SSLoss.forward": [[209, 252], ["ss.mean.mean.mean", "torch.no_grad", "all", "list", "dice_loss.SSLoss.apply_nonlin", "dice_loss.sum_tensor", "dice_loss.sum_tensor", "len", "len", "gt.long.long.view", "gt.long.long.long", "torch.zeros", "y_onehot.cuda.cuda.scatter_", "list", "range", "dice_loss.sum_tensor", "dice_loss.sum_tensor", "y_onehot.cuda.cuda.cuda", "range", "len", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.sum_tensor", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.sum_tensor", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.sum_tensor", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.sum_tensor"], ["", "def", "forward", "(", "self", ",", "net_output", ",", "gt", ",", "loss_mask", "=", "None", ")", ":", "\n", "        ", "shp_x", "=", "net_output", ".", "shape", "\n", "shp_y", "=", "gt", ".", "shape", "\n", "# class_num = shp_x[1]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "len", "(", "shp_x", ")", "!=", "len", "(", "shp_y", ")", ":", "\n", "                ", "gt", "=", "gt", ".", "view", "(", "(", "shp_y", "[", "0", "]", ",", "1", ",", "*", "shp_y", "[", "1", ":", "]", ")", ")", "\n", "\n", "", "if", "all", "(", "[", "i", "==", "j", "for", "i", ",", "j", "in", "zip", "(", "net_output", ".", "shape", ",", "gt", ".", "shape", ")", "]", ")", ":", "\n", "# if this is the case then gt is probably already a one hot encoding", "\n", "                ", "y_onehot", "=", "gt", "\n", "", "else", ":", "\n", "                ", "gt", "=", "gt", ".", "long", "(", ")", "\n", "y_onehot", "=", "torch", ".", "zeros", "(", "shp_x", ")", "\n", "if", "net_output", ".", "device", ".", "type", "==", "\"cuda\"", ":", "\n", "                    ", "y_onehot", "=", "y_onehot", ".", "cuda", "(", "net_output", ".", "device", ".", "index", ")", "\n", "", "y_onehot", ".", "scatter_", "(", "1", ",", "gt", ",", "1", ")", "\n", "\n", "", "", "if", "self", ".", "batch_dice", ":", "\n", "            ", "axes", "=", "[", "0", "]", "+", "list", "(", "range", "(", "2", ",", "len", "(", "shp_x", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "axes", "=", "list", "(", "range", "(", "2", ",", "len", "(", "shp_x", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "apply_nonlin", "is", "not", "None", ":", "\n", "            ", "net_output", "=", "self", ".", "apply_nonlin", "(", "net_output", ")", "\n", "\n", "# no object value", "\n", "", "bg_onehot", "=", "1", "-", "y_onehot", "\n", "squared_error", "=", "(", "y_onehot", "-", "net_output", ")", "**", "2", "\n", "specificity_part", "=", "sum_tensor", "(", "squared_error", "*", "y_onehot", ",", "axes", ")", "/", "(", "sum_tensor", "(", "y_onehot", ",", "axes", ")", "+", "self", ".", "smooth", ")", "\n", "sensitivity_part", "=", "sum_tensor", "(", "squared_error", "*", "bg_onehot", ",", "axes", ")", "/", "(", "sum_tensor", "(", "bg_onehot", ",", "axes", ")", "+", "self", ".", "smooth", ")", "\n", "\n", "ss", "=", "self", ".", "r", "*", "specificity_part", "+", "(", "1", "-", "self", ".", "r", ")", "*", "sensitivity_part", "\n", "\n", "if", "not", "self", ".", "do_bg", ":", "\n", "            ", "if", "self", ".", "batch_dice", ":", "\n", "                ", "ss", "=", "ss", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                ", "ss", "=", "ss", "[", ":", ",", "1", ":", "]", "\n", "", "", "ss", "=", "ss", ".", "mean", "(", ")", "\n", "\n", "return", "ss", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.SoftDiceLoss.__init__": [[256, 268], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "apply_nonlin", "=", "None", ",", "batch_dice", "=", "False", ",", "do_bg", "=", "True", ",", "smooth", "=", "1.", ",", "\n", "square", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        paper: https://arxiv.org/pdf/1606.04797.pdf\n        \"\"\"", "\n", "super", "(", "SoftDiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "square", "=", "square", "\n", "self", ".", "do_bg", "=", "do_bg", "\n", "self", ".", "batch_dice", "=", "batch_dice", "\n", "self", ".", "apply_nonlin", "=", "apply_nonlin", "\n", "self", ".", "smooth", "=", "smooth", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.SoftDiceLoss.forward": [[269, 292], ["dice_loss.get_tp_fp_fn", "dc.mean.mean.mean", "list", "dice_loss.SoftDiceLoss.apply_nonlin", "list", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.get_tp_fp_fn"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "loss_mask", "=", "None", ")", ":", "\n", "        ", "shp_x", "=", "x", ".", "shape", "\n", "\n", "if", "self", ".", "batch_dice", ":", "\n", "            ", "axes", "=", "[", "0", "]", "+", "list", "(", "range", "(", "2", ",", "len", "(", "shp_x", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "axes", "=", "list", "(", "range", "(", "2", ",", "len", "(", "shp_x", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "apply_nonlin", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "apply_nonlin", "(", "x", ")", "\n", "\n", "", "tp", ",", "fp", ",", "fn", "=", "get_tp_fp_fn", "(", "x", ",", "y", ",", "axes", ",", "loss_mask", ",", "self", ".", "square", ")", "\n", "\n", "dc", "=", "(", "2", "*", "tp", "+", "self", ".", "smooth", ")", "/", "(", "2", "*", "tp", "+", "fp", "+", "fn", "+", "self", ".", "smooth", ")", "\n", "\n", "if", "not", "self", ".", "do_bg", ":", "\n", "            ", "if", "self", ".", "batch_dice", ":", "\n", "                ", "dc", "=", "dc", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                ", "dc", "=", "dc", "[", ":", ",", "1", ":", "]", "\n", "", "", "dc", "=", "dc", ".", "mean", "(", ")", "\n", "\n", "return", "-", "dc", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.IoULoss.__init__": [[294, 307], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "apply_nonlin", "=", "None", ",", "batch_dice", "=", "False", ",", "do_bg", "=", "True", ",", "smooth", "=", "1.", ",", "\n", "square", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        paper: https://link.springer.com/chapter/10.1007/978-3-319-50835-1_22\n        \n        \"\"\"", "\n", "super", "(", "IoULoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "square", "=", "square", "\n", "self", ".", "do_bg", "=", "do_bg", "\n", "self", ".", "batch_dice", "=", "batch_dice", "\n", "self", ".", "apply_nonlin", "=", "apply_nonlin", "\n", "self", ".", "smooth", "=", "smooth", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.IoULoss.forward": [[308, 332], ["dice_loss.get_tp_fp_fn", "iou.mean.mean.mean", "list", "dice_loss.IoULoss.apply_nonlin", "list", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.get_tp_fp_fn"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "loss_mask", "=", "None", ")", ":", "\n", "        ", "shp_x", "=", "x", ".", "shape", "\n", "\n", "if", "self", ".", "batch_dice", ":", "\n", "            ", "axes", "=", "[", "0", "]", "+", "list", "(", "range", "(", "2", ",", "len", "(", "shp_x", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "axes", "=", "list", "(", "range", "(", "2", ",", "len", "(", "shp_x", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "apply_nonlin", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "apply_nonlin", "(", "x", ")", "\n", "\n", "", "tp", ",", "fp", ",", "fn", "=", "get_tp_fp_fn", "(", "x", ",", "y", ",", "axes", ",", "loss_mask", ",", "self", ".", "square", ")", "\n", "\n", "\n", "iou", "=", "(", "tp", "+", "self", ".", "smooth", ")", "/", "(", "tp", "+", "fp", "+", "fn", "+", "self", ".", "smooth", ")", "\n", "\n", "if", "not", "self", ".", "do_bg", ":", "\n", "            ", "if", "self", ".", "batch_dice", ":", "\n", "                ", "iou", "=", "iou", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                ", "iou", "=", "iou", "[", ":", ",", "1", ":", "]", "\n", "", "", "iou", "=", "iou", ".", "mean", "(", ")", "\n", "\n", "return", "-", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.TverskyLoss.__init__": [[334, 348], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "apply_nonlin", "=", "None", ",", "batch_dice", "=", "False", ",", "do_bg", "=", "True", ",", "smooth", "=", "1.", ",", "\n", "square", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        paper: https://arxiv.org/pdf/1706.05721.pdf\n        \"\"\"", "\n", "super", "(", "TverskyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "square", "=", "square", "\n", "self", ".", "do_bg", "=", "do_bg", "\n", "self", ".", "batch_dice", "=", "batch_dice", "\n", "self", ".", "apply_nonlin", "=", "apply_nonlin", "\n", "self", ".", "smooth", "=", "smooth", "\n", "self", ".", "alpha", "=", "0.3", "\n", "self", ".", "beta", "=", "0.7", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.TverskyLoss.forward": [[349, 373], ["dice_loss.get_tp_fp_fn", "tversky.mean.mean.mean", "list", "dice_loss.TverskyLoss.apply_nonlin", "list", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.get_tp_fp_fn"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "loss_mask", "=", "None", ")", ":", "\n", "        ", "shp_x", "=", "x", ".", "shape", "\n", "\n", "if", "self", ".", "batch_dice", ":", "\n", "            ", "axes", "=", "[", "0", "]", "+", "list", "(", "range", "(", "2", ",", "len", "(", "shp_x", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "axes", "=", "list", "(", "range", "(", "2", ",", "len", "(", "shp_x", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "apply_nonlin", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "apply_nonlin", "(", "x", ")", "\n", "\n", "", "tp", ",", "fp", ",", "fn", "=", "get_tp_fp_fn", "(", "x", ",", "y", ",", "axes", ",", "loss_mask", ",", "self", ".", "square", ")", "\n", "\n", "\n", "tversky", "=", "(", "tp", "+", "self", ".", "smooth", ")", "/", "(", "tp", "+", "self", ".", "alpha", "*", "fp", "+", "self", ".", "beta", "*", "fn", "+", "self", ".", "smooth", ")", "\n", "\n", "if", "not", "self", ".", "do_bg", ":", "\n", "            ", "if", "self", ".", "batch_dice", ":", "\n", "                ", "tversky", "=", "tversky", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                ", "tversky", "=", "tversky", "[", ":", ",", "1", ":", "]", "\n", "", "", "tversky", "=", "tversky", ".", "mean", "(", ")", "\n", "\n", "return", "-", "tversky", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.FocalTversky_loss.__init__": [[379, 383], ["torch.nn.Module.__init__", "dice_loss.TverskyLoss"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["def", "__init__", "(", "self", ",", "tversky_kwargs", ",", "gamma", "=", "0.75", ")", ":", "\n", "        ", "super", "(", "FocalTversky_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "tversky", "=", "TverskyLoss", "(", "**", "tversky_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.FocalTversky_loss.forward": [[384, 388], ["torch.pow", "dice_loss.FocalTversky_loss.tversky"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net_output", ",", "target", ")", ":", "\n", "        ", "tversky_loss", "=", "1", "+", "self", ".", "tversky", "(", "net_output", ",", "target", ")", "# = 1-tversky(net_output, target)", "\n", "focal_tversky", "=", "torch", ".", "pow", "(", "tversky_loss", ",", "self", ".", "gamma", ")", "\n", "return", "focal_tversky", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.AsymLoss.__init__": [[391, 404], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "apply_nonlin", "=", "None", ",", "batch_dice", "=", "False", ",", "do_bg", "=", "True", ",", "smooth", "=", "1.", ",", "\n", "square", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        paper: https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8573779\n        \"\"\"", "\n", "super", "(", "AsymLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "square", "=", "square", "\n", "self", ".", "do_bg", "=", "do_bg", "\n", "self", ".", "batch_dice", "=", "batch_dice", "\n", "self", ".", "apply_nonlin", "=", "apply_nonlin", "\n", "self", ".", "smooth", "=", "smooth", "\n", "self", ".", "beta", "=", "1.5", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.AsymLoss.forward": [[405, 428], ["dice_loss.get_tp_fp_fn", "asym.mean.mean.mean", "list", "dice_loss.AsymLoss.apply_nonlin", "list", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.get_tp_fp_fn"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "loss_mask", "=", "None", ")", ":", "\n", "        ", "shp_x", "=", "x", ".", "shape", "\n", "\n", "if", "self", ".", "batch_dice", ":", "\n", "            ", "axes", "=", "[", "0", "]", "+", "list", "(", "range", "(", "2", ",", "len", "(", "shp_x", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "axes", "=", "list", "(", "range", "(", "2", ",", "len", "(", "shp_x", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "apply_nonlin", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "apply_nonlin", "(", "x", ")", "\n", "\n", "", "tp", ",", "fp", ",", "fn", "=", "get_tp_fp_fn", "(", "x", ",", "y", ",", "axes", ",", "loss_mask", ",", "self", ".", "square", ")", "# shape: (batch size, class num)", "\n", "weight", "=", "(", "self", ".", "beta", "**", "2", ")", "/", "(", "1", "+", "self", ".", "beta", "**", "2", ")", "\n", "asym", "=", "(", "tp", "+", "self", ".", "smooth", ")", "/", "(", "tp", "+", "weight", "*", "fn", "+", "(", "1", "-", "weight", ")", "*", "fp", "+", "self", ".", "smooth", ")", "\n", "\n", "if", "not", "self", ".", "do_bg", ":", "\n", "            ", "if", "self", ".", "batch_dice", ":", "\n", "                ", "asym", "=", "asym", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                ", "asym", "=", "asym", "[", ":", ",", "1", ":", "]", "\n", "", "", "asym", "=", "asym", ".", "mean", "(", ")", "\n", "\n", "return", "-", "asym", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.DC_and_CE_loss.__init__": [[430, 435], ["torch.nn.Module.__init__", "ND_Crossentropy.CrossentropyND", "dice_loss.SoftDiceLoss"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "soft_dice_kwargs", ",", "ce_kwargs", ",", "aggregate", "=", "\"sum\"", ")", ":", "\n", "        ", "super", "(", "DC_and_CE_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "aggregate", "=", "aggregate", "\n", "self", ".", "ce", "=", "CrossentropyND", "(", "**", "ce_kwargs", ")", "\n", "self", ".", "dc", "=", "SoftDiceLoss", "(", "apply_nonlin", "=", "softmax_helper", ",", "**", "soft_dice_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.DC_and_CE_loss.forward": [[436, 444], ["dice_loss.DC_and_CE_loss.dc", "dice_loss.DC_and_CE_loss.ce", "NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net_output", ",", "target", ")", ":", "\n", "        ", "dc_loss", "=", "self", ".", "dc", "(", "net_output", ",", "target", ")", "\n", "ce_loss", "=", "self", ".", "ce", "(", "net_output", ",", "target", ")", "\n", "if", "self", ".", "aggregate", "==", "\"sum\"", ":", "\n", "            ", "result", "=", "ce_loss", "+", "dc_loss", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"nah son\"", ")", "# reserved for other stuff (later)", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.PenaltyGDiceLoss.__init__": [[449, 453], ["torch.nn.Module.__init__", "dice_loss.GDiceLoss"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["def", "__init__", "(", "self", ",", "gdice_kwargs", ")", ":", "\n", "        ", "super", "(", "PenaltyGDiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "2.5", "\n", "self", ".", "gdc", "=", "GDiceLoss", "(", "apply_nonlin", "=", "softmax_helper", ",", "**", "gdice_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.PenaltyGDiceLoss.forward": [[454, 459], ["dice_loss.PenaltyGDiceLoss.gdc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net_output", ",", "target", ")", ":", "\n", "        ", "gdc_loss", "=", "self", ".", "gdc", "(", "net_output", ",", "target", ")", "\n", "penalty_gdc", "=", "gdc_loss", "/", "(", "1", "+", "self", ".", "k", "*", "(", "1", "-", "gdc_loss", ")", ")", "\n", "\n", "return", "penalty_gdc", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.DC_and_topk_loss.__init__": [[463, 468], ["torch.nn.Module.__init__", "ND_Crossentropy.TopKLoss", "dice_loss.SoftDiceLoss"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "soft_dice_kwargs", ",", "ce_kwargs", ",", "aggregate", "=", "\"sum\"", ")", ":", "\n", "        ", "super", "(", "DC_and_topk_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "aggregate", "=", "aggregate", "\n", "self", ".", "ce", "=", "TopKLoss", "(", "**", "ce_kwargs", ")", "\n", "self", ".", "dc", "=", "SoftDiceLoss", "(", "apply_nonlin", "=", "softmax_helper", ",", "**", "soft_dice_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.DC_and_topk_loss.forward": [[469, 477], ["dice_loss.DC_and_topk_loss.dc", "dice_loss.DC_and_topk_loss.ce", "NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net_output", ",", "target", ")", ":", "\n", "        ", "dc_loss", "=", "self", ".", "dc", "(", "net_output", ",", "target", ")", "\n", "ce_loss", "=", "self", ".", "ce", "(", "net_output", ",", "target", ")", "\n", "if", "self", ".", "aggregate", "==", "\"sum\"", ":", "\n", "            ", "result", "=", "ce_loss", "+", "dc_loss", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"nah son\"", ")", "# reserved for other stuff (later?)", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__": [[485, 490], ["torch.nn.Module.__init__", "ND_Crossentropy.WeightedCrossEntropyLoss", "dice_loss.SoftDiceLoss"], "methods", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.__init__"], ["def", "__init__", "(", "self", ",", "soft_dice_kwargs", ",", "wce_kwargs", ",", "gamma", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "ExpLog_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "wce", "=", "WeightedCrossEntropyLoss", "(", "**", "wce_kwargs", ")", "\n", "self", ".", "dc", "=", "SoftDiceLoss", "(", "apply_nonlin", "=", "softmax_helper", ",", "**", "soft_dice_kwargs", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.ExpLog_loss.forward": [[491, 504], ["dice_loss.ExpLog_loss.wce", "dice_loss.ExpLog_loss.dc", "torch.pow", "torch.log", "torch.clamp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net_output", ",", "target", ")", ":", "\n", "        ", "dc_loss", "=", "-", "self", ".", "dc", "(", "net_output", ",", "target", ")", "# weight=0.8", "\n", "wce_loss", "=", "self", ".", "wce", "(", "net_output", ",", "target", ")", "# weight=0.2", "\n", "# with torch.no_grad():", "\n", "#     print('dc loss:', dc_loss.cpu().numpy(), 'ce loss:', ce_loss.cpu().numpy())", "\n", "#     a = torch.pow(-torch.log(torch.clamp(dc_loss, 1e-6)), self.gamma)", "\n", "#     b = torch.pow(-torch.log(torch.clamp(ce_loss, 1e-6)), self.gamma)", "\n", "#     print('ExpLog dc loss:', a.cpu().numpy(), 'ExpLogce loss:', b.cpu().numpy())", "\n", "#     print('*'*20)", "\n", "explog_loss", "=", "0.8", "*", "torch", ".", "pow", "(", "-", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "dc_loss", ",", "1e-6", ")", ")", ",", "self", ".", "gamma", ")", "+", "0.2", "*", "wce_loss", "\n", "\n", "return", "explog_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.softmax_helper": [[12, 19], ["x.size", "[].repeat", "torch.exp", "torch.exp.sum().repeat", "range", "len", "x.max", "torch.exp.sum", "x.size"], "function", ["None"], ["def", "softmax_helper", "(", "x", ")", ":", "\n", "# copy from: https://github.com/MIC-DKFZ/nnUNet/blob/master/nnunet/utilities/nd_softmax.py", "\n", "    ", "rpt", "=", "[", "1", "for", "_", "in", "range", "(", "len", "(", "x", ".", "size", "(", ")", ")", ")", "]", "\n", "rpt", "[", "1", "]", "=", "x", ".", "size", "(", "1", ")", "\n", "x_max", "=", "x", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "repeat", "(", "*", "rpt", ")", "\n", "e_x", "=", "torch", ".", "exp", "(", "x", "-", "x_max", ")", "\n", "return", "e_x", "/", "e_x", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "*", "rpt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.sum_tensor": [[20, 30], ["numpy.unique().astype", "sorted", "numpy.unique", "inp.sum.sum", "inp.sum.sum", "int", "int"], "function", ["None"], ["", "def", "sum_tensor", "(", "inp", ",", "axes", ",", "keepdim", "=", "False", ")", ":", "\n", "# copy from: https://github.com/MIC-DKFZ/nnUNet/blob/master/nnunet/utilities/tensor_utilities.py", "\n", "    ", "axes", "=", "np", ".", "unique", "(", "axes", ")", ".", "astype", "(", "int", ")", "\n", "if", "keepdim", ":", "\n", "        ", "for", "ax", "in", "axes", ":", "\n", "            ", "inp", "=", "inp", ".", "sum", "(", "int", "(", "ax", ")", ",", "keepdim", "=", "True", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "ax", "in", "sorted", "(", "axes", ",", "reverse", "=", "True", ")", ":", "\n", "            ", "inp", "=", "inp", ".", "sum", "(", "int", "(", "ax", ")", ")", "\n", "", "", "return", "inp", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.get_tp_fp_fn": [[31, 82], ["dice_loss.sum_tensor", "dice_loss.sum_tensor", "dice_loss.sum_tensor", "tuple", "torch.no_grad", "all", "torch.stack", "torch.stack", "torch.stack", "range", "len", "len", "gt.long.view", "gt.long.long", "torch.zeros", "y_onehot.cuda.scatter_", "tuple", "tuple", "tuple", "len", "y_onehot.cuda.cuda", "net_output.size", "zip", "torch.unbind", "torch.unbind", "torch.unbind"], "function", ["home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.sum_tensor", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.sum_tensor", "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.sum_tensor"], ["", "def", "get_tp_fp_fn", "(", "net_output", ",", "gt", ",", "axes", "=", "None", ",", "mask", "=", "None", ",", "square", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    net_output must be (b, c, x, y(, z)))\n    gt must be a label map (shape (b, 1, x, y(, z)) OR shape (b, x, y(, z))) or one hot encoding (b, c, x, y(, z))\n    if mask is provided it must have shape (b, 1, x, y(, z)))\n    :param net_output:\n    :param gt:\n    :param axes:\n    :param mask: mask must be 1 for valid pixels and 0 for invalid pixels\n    :param square: if True then fp, tp and fn will be squared before summation\n    :return:\n    \"\"\"", "\n", "if", "axes", "is", "None", ":", "\n", "        ", "axes", "=", "tuple", "(", "range", "(", "2", ",", "len", "(", "net_output", ".", "size", "(", ")", ")", ")", ")", "\n", "\n", "", "shp_x", "=", "net_output", ".", "shape", "\n", "shp_y", "=", "gt", ".", "shape", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "len", "(", "shp_x", ")", "!=", "len", "(", "shp_y", ")", ":", "\n", "            ", "gt", "=", "gt", ".", "view", "(", "(", "shp_y", "[", "0", "]", ",", "1", ",", "*", "shp_y", "[", "1", ":", "]", ")", ")", "\n", "\n", "", "if", "all", "(", "[", "i", "==", "j", "for", "i", ",", "j", "in", "zip", "(", "net_output", ".", "shape", ",", "gt", ".", "shape", ")", "]", ")", ":", "\n", "# if this is the case then gt is probably already a one hot encoding", "\n", "            ", "y_onehot", "=", "gt", "\n", "", "else", ":", "\n", "            ", "gt", "=", "gt", ".", "long", "(", ")", "\n", "y_onehot", "=", "torch", ".", "zeros", "(", "shp_x", ")", "\n", "if", "net_output", ".", "device", ".", "type", "==", "\"cuda\"", ":", "\n", "                ", "y_onehot", "=", "y_onehot", ".", "cuda", "(", "net_output", ".", "device", ".", "index", ")", "\n", "", "y_onehot", ".", "scatter_", "(", "1", ",", "gt", ",", "1", ")", "\n", "\n", "", "", "tp", "=", "net_output", "*", "y_onehot", "\n", "fp", "=", "net_output", "*", "(", "1", "-", "y_onehot", ")", "\n", "fn", "=", "(", "1", "-", "net_output", ")", "*", "y_onehot", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "tp", "=", "torch", ".", "stack", "(", "tuple", "(", "x_i", "*", "mask", "[", ":", ",", "0", "]", "for", "x_i", "in", "torch", ".", "unbind", "(", "tp", ",", "dim", "=", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "fp", "=", "torch", ".", "stack", "(", "tuple", "(", "x_i", "*", "mask", "[", ":", ",", "0", "]", "for", "x_i", "in", "torch", ".", "unbind", "(", "fp", ",", "dim", "=", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "fn", "=", "torch", ".", "stack", "(", "tuple", "(", "x_i", "*", "mask", "[", ":", ",", "0", "]", "for", "x_i", "in", "torch", ".", "unbind", "(", "fn", ",", "dim", "=", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "square", ":", "\n", "        ", "tp", "=", "tp", "**", "2", "\n", "fp", "=", "fp", "**", "2", "\n", "fn", "=", "fn", "**", "2", "\n", "\n", "", "tp", "=", "sum_tensor", "(", "tp", ",", "axes", ",", "keepdim", "=", "False", ")", "\n", "fp", "=", "sum_tensor", "(", "fp", ",", "axes", ",", "keepdim", "=", "False", ")", "\n", "fn", "=", "sum_tensor", "(", "fn", ",", "axes", ",", "keepdim", "=", "False", ")", "\n", "\n", "return", "tp", ",", "fp", ",", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.dice_loss.flatten": [[130, 142], ["tensor.size", "tensor.permute().contiguous", "tensor.permute().contiguous.view", "tuple", "range", "tensor.permute", "tensor.dim"], "function", ["None"], ["", "", "def", "flatten", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"Flattens a given tensor such that the channel axis is first.\n    The shapes are transformed as follows:\n       (N, C, D, H, W) -> (C, N * D * H * W)\n    \"\"\"", "\n", "C", "=", "tensor", ".", "size", "(", "1", ")", "\n", "# new axis order", "\n", "axis_order", "=", "(", "1", ",", "0", ")", "+", "tuple", "(", "range", "(", "2", ",", "tensor", ".", "dim", "(", ")", ")", ")", "\n", "# Transpose: (N, C, D, H, W) -> (C, N, D, H, W)", "\n", "transposed", "=", "tensor", ".", "permute", "(", "axis_order", ")", ".", "contiguous", "(", ")", "\n", "# Flatten: (C, N, D, H, W) -> (C, N * D * H * W)", "\n", "return", "transposed", ".", "view", "(", "C", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.loss_factory.create_loss": [[19, 55], ["hasattr", "getattr", "pytorch_toolbelt.losses.BinaryFocalLoss", "pytorch_toolbelt.losses.BinaryJaccardLoss", "pytorch_toolbelt.losses.BinaryJaccardLoss", "pytorch_toolbelt.losses.BinaryDiceLoss", "pytorch_toolbelt.losses.BinaryDiceLogLoss", "pytorch_toolbelt.losses.BinaryDiceLogLoss", "pytorch_toolbelt.losses.JointLoss", "BCEWithLogitsLoss", "pytorch_toolbelt.losses.BinaryLovaszLoss", "pytorch_toolbelt.losses.BinaryLovaszLoss", "pytorch_toolbelt.losses.JointLoss", "BCEWithLogitsLoss", "pytorch_toolbelt.losses.BinaryJaccardLoss", "pytorch_toolbelt.losses.JointLoss", "BCEWithLogitsLoss", "pytorch_toolbelt.losses.BinaryJaccardLogLoss", "pytorch_toolbelt.losses.JointLoss", "BCEWithLogitsLoss", "pytorch_toolbelt.losses.BinaryDiceLogLoss", "pytorch_toolbelt.losses.BinaryFocalLoss"], "function", ["None"], ["def", "create_loss", "(", "args", ",", "w1", "=", "1.0", ",", "w2", "=", "0.5", ")", ":", "\n", "    ", "conf_loss", "=", "args", ".", "base_loss", "\n", "### MulticlassJaccardLoss(classes=np.arange(11)", "\n", "# mode = args.base_loss #BINARY_MODE \\MULTICLASS_MODE \\MULTILABEL_MODE ", "\n", "loss", "=", "None", "\n", "if", "hasattr", "(", "nn", ",", "conf_loss", ")", ":", "\n", "        ", "loss", "=", "getattr", "(", "nn", ",", "conf_loss", ")", "(", ")", "\n", "#binary loss", "\n", "", "elif", "conf_loss", "==", "\"focal\"", ":", "\n", "        ", "loss", "=", "L", ".", "BinaryFocalLoss", "(", ")", "\n", "", "elif", "conf_loss", "==", "\"jaccard\"", ":", "\n", "        ", "loss", "=", "L", ".", "BinaryJaccardLoss", "(", ")", "\n", "", "elif", "conf_loss", "==", "\"jaccard_log\"", ":", "\n", "        ", "loss", "=", "L", ".", "BinaryJaccardLoss", "(", ")", "\n", "", "elif", "conf_loss", "==", "\"dice\"", ":", "\n", "        ", "loss", "=", "L", ".", "BinaryDiceLoss", "(", ")", "\n", "", "elif", "conf_loss", "==", "\"dice_log\"", ":", "\n", "        ", "loss", "=", "L", ".", "BinaryDiceLogLoss", "(", ")", "\n", "", "elif", "conf_loss", "==", "\"dice_log\"", ":", "\n", "        ", "loss", "=", "L", ".", "BinaryDiceLogLoss", "(", ")", "\n", "", "elif", "conf_loss", "==", "\"bce+lovasz\"", ":", "\n", "        ", "loss", "=", "L", ".", "JointLoss", "(", "BCEWithLogitsLoss", "(", ")", ",", "L", ".", "BinaryLovaszLoss", "(", ")", ",", "w1", ",", "w2", ")", "\n", "", "elif", "conf_loss", "==", "\"lovasz\"", ":", "\n", "        ", "loss", "=", "L", ".", "BinaryLovaszLoss", "(", ")", "\n", "", "elif", "conf_loss", "==", "\"bce+jaccard\"", ":", "\n", "        ", "loss", "=", "L", ".", "JointLoss", "(", "BCEWithLogitsLoss", "(", ")", ",", "L", ".", "BinaryJaccardLoss", "(", ")", ",", "w1", ",", "w2", ")", "\n", "", "elif", "conf_loss", "==", "\"bce+log_jaccard\"", ":", "\n", "        ", "loss", "=", "L", ".", "JointLoss", "(", "BCEWithLogitsLoss", "(", ")", ",", "L", ".", "BinaryJaccardLogLoss", "(", ")", ",", "w1", ",", "w2", ")", "\n", "", "elif", "conf_loss", "==", "\"bce+log_dice\"", ":", "\n", "        ", "loss", "=", "L", ".", "JointLoss", "(", "BCEWithLogitsLoss", "(", ")", ",", "L", ".", "BinaryDiceLogLoss", "(", ")", ",", "w1", ",", "w2", ")", "\n", "", "elif", "conf_loss", "==", "\"reduced_focal\"", ":", "\n", "        ", "loss", "=", "L", ".", "BinaryFocalLoss", "(", "reduced", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "and", "\"Invalid loss\"", "\n", "raise", "ValueError", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.szc19990412_TransMIL.MyLoss.loss_factory.make_parse": [[57, 62], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "make_parse", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--base-loss'", ",", "default", "=", "'CrossEntropyLoss'", ",", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]]}