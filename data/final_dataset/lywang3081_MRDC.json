{"home.repos.pwc.inspect_result.lywang3081_MRDC.1_Data_Compression.skimage_save_jpeg.get_args": [[7, 17], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "parser.parse_args.input_dir.endswith", "parser.parse_args.output_dir.endswith"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--input_dir'", ",", "default", "=", "'datapath/JPEG-quality-imagenet256/n01440764/'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "default", "=", "'datapath/JPEG-quality-imagenet256/n01440764_Q=5/'", ")", "\n", "parser", ".", "add_argument", "(", "'--quality'", ",", "default", "=", "5", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "input_dir", "=", "args", ".", "input_dir", "if", "args", ".", "input_dir", ".", "endswith", "(", "'/'", ")", "else", "args", ".", "input_dir", "+", "'/'", "\n", "output_dir", "=", "args", ".", "output_dir", "if", "args", ".", "output_dir", ".", "endswith", "(", "'/'", ")", "else", "args", ".", "output_dir", "+", "'/'", "\n", "return", "input_dir", ",", "output_dir", ",", "args", ".", "quality", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.1_Data_Compression.skimage_save_jpeg.get_JPEG_img": [[19, 24], ["glob.glob", "print", "print", "len"], "function", ["None"], ["", "def", "get_JPEG_img", "(", "img_dir", ")", ":", "\n", "    ", "path_list", "=", "glob", ".", "glob", "(", "img_dir", "+", "'*.JPEG'", ")", "\n", "print", "(", "'Image directory: '", ",", "img_dir", ")", "\n", "print", "(", "'Number of JPEG files: '", ",", "len", "(", "path_list", ")", ")", "\n", "return", "path_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_linear.CosineLinear.__init__": [[9, 19], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "modified_linear.CosineLinear.reset_parameters", "torch.Tensor", "torch.nn.parameter.Parameter", "modified_linear.CosineLinear.register_parameter", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.__init__", "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_linear.CosineLinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "sigma", "=", "True", ")", ":", "\n", "        ", "super", "(", "CosineLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "if", "sigma", ":", "\n", "            ", "self", ".", "sigma", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'sigma'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_linear.CosineLinear.reset_parameters": [[20, 25], ["modified_linear.CosineLinear.weight.data.uniform_", "math.sqrt", "modified_linear.CosineLinear.sigma.data.fill_", "modified_linear.CosineLinear.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "sigma", "is", "not", "None", ":", "\n", "            ", "self", ".", "sigma", ".", "data", ".", "fill_", "(", "1", ")", "#for initializaiton of sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_linear.CosineLinear.forward": [[26, 38], ["torch.nn.functional.linear", "torch.nn.functional.normalize", "torch.nn.functional.normalize"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "#w_norm = self.weight.data.norm(dim=1, keepdim=True)", "\n", "#w_norm = w_norm.expand_as(self.weight).add_(self.epsilon)", "\n", "#x_norm = input.data.norm(dim=1, keepdim=True)", "\n", "#x_norm = x_norm.expand_as(input).add_(self.epsilon)", "\n", "#w = self.weight.div(w_norm)", "\n", "#x = input.div(x_norm)", "\n", "        ", "out", "=", "F", ".", "linear", "(", "F", ".", "normalize", "(", "input", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ",", "F", ".", "normalize", "(", "self", ".", "weight", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ")", "\n", "if", "self", ".", "sigma", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "sigma", "*", "out", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_linear.SplitCosineLinear.__init__": [[41, 52], ["torch.nn.Module.__init__", "modified_linear.CosineLinear", "modified_linear.CosineLinear", "torch.nn.parameter.Parameter", "modified_linear.SplitCosineLinear.sigma.data.fill_", "modified_linear.SplitCosineLinear.register_parameter", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features1", ",", "out_features2", ",", "sigma", "=", "True", ")", ":", "\n", "        ", "super", "(", "SplitCosineLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features1", "+", "out_features2", "\n", "self", ".", "fc1", "=", "CosineLinear", "(", "in_features", ",", "out_features1", ",", "False", ")", "\n", "self", ".", "fc2", "=", "CosineLinear", "(", "in_features", ",", "out_features2", ",", "False", ")", "\n", "if", "sigma", ":", "\n", "            ", "self", ".", "sigma", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ")", ")", "\n", "self", ".", "sigma", ".", "data", ".", "fill_", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'sigma'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_linear.SplitCosineLinear.forward": [[53, 60], ["modified_linear.SplitCosineLinear.fc1", "modified_linear.SplitCosineLinear.fc2", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out1", "=", "self", ".", "fc1", "(", "x", ")", "\n", "out2", "=", "self", ".", "fc2", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "dim", "=", "1", ")", "#concatenate along the channel", "\n", "if", "self", ".", "sigma", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "sigma", "*", "out", "\n", "", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.resnet.BasicBlock.__init__": [[28, 37], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.__init__", "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.conv3x3", "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.resnet.BasicBlock.forward": [[38, 55], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.resnet.Bottleneck.__init__": [[60, 72], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.resnet.Bottleneck.forward": [[73, 94], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.resnet.ResNet.__init__": [[98, 119], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.__init__", "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.resnet.ResNet._make_layer": [[120, 136], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.resnet.ResNet.forward": [[137, 153], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.resnet.conv3x3": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.resnet.resnet18": [[155, 165], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.resnet.resnet34": [[167, 177], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.resnet.resnet50": [[179, 189], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.resnet.resnet101": [[191, 201], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.resnet.resnet152": [[203, 213], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.BasicBlock.__init__": [[15, 25], ["torch.Module.__init__", "modified_resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "modified_resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.__init__", "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.conv3x3", "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "last", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "last", "=", "last", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.BasicBlock.forward": [[26, 44], ["modified_resnet.BasicBlock.conv1", "modified_resnet.BasicBlock.bn1", "modified_resnet.BasicBlock.relu", "modified_resnet.BasicBlock.conv2", "modified_resnet.BasicBlock.bn2", "modified_resnet.BasicBlock.downsample", "modified_resnet.BasicBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "if", "not", "self", ".", "last", ":", "#remove ReLU in the last layer", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.ResNet.__init__": [[47, 68], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "modified_resnet.ResNet._make_layer", "modified_resnet.ResNet._make_layer", "modified_resnet.ResNet._make_layer", "modified_resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "modified_linear.CosineLinear", "modified_resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.__init__", "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "last_phase", "=", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "modified_linear", ".", "CosineLinear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.ResNet._make_layer": [[69, 90], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "range", "layers.append", "range", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "layers.append", "block", "layers.append", "block", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "last_phase", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "if", "last_phase", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "blocks", "-", "1", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "last", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.ResNet.forward": [[91, 107], ["modified_resnet.ResNet.conv1", "modified_resnet.ResNet.bn1", "modified_resnet.ResNet.relu", "modified_resnet.ResNet.maxpool", "modified_resnet.ResNet.layer1", "modified_resnet.ResNet.layer2", "modified_resnet.ResNet.layer3", "modified_resnet.ResNet.layer4", "modified_resnet.ResNet.avgpool", "modified_resnet.ResNet.view", "modified_resnet.ResNet.fc", "modified_resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.conv3x3": [[6, 10], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.modified_resnet.resnet18": [[109, 117], ["modified_resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.utils_pytorch.savepickle": [[22, 27], ["utils_pytorch.mkdir_p", "print", "os.dirname", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.utils_pytorch.mkdir_p"], ["", "def", "savepickle", "(", "data", ",", "file_path", ")", ":", "\n", "    ", "mkdir_p", "(", "osp", ".", "dirname", "(", "file_path", ")", ",", "delete", "=", "False", ")", "\n", "print", "(", "'pickle into'", ",", "file_path", ")", "\n", "with", "open", "(", "file_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.utils_pytorch.unpickle": [[28, 32], ["open", "pickle.load"], "function", ["None"], ["", "", "def", "unpickle", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.utils_pytorch.mkdir_p": [[33, 42], ["subprocess.call", "os.exists", "subprocess.call", "print"], "function", ["None"], ["", "def", "mkdir_p", "(", "path", ",", "delete", "=", "False", ",", "print_info", "=", "True", ")", ":", "\n", "    ", "if", "path", "==", "''", ":", "return", "\n", "\n", "if", "delete", ":", "\n", "        ", "subprocess", ".", "call", "(", "(", "'rm -r '", "+", "path", ")", ".", "split", "(", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "path", ")", ":", "\n", "        ", "if", "print_info", ":", "\n", "            ", "print", "(", "'mkdir -p  '", "+", "path", ")", "\n", "", "subprocess", ".", "call", "(", "(", "'mkdir -p '", "+", "path", ")", ".", "split", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.utils_pytorch.get_mean_and_std": [[43, 56], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "inputs[].mean", "inputs[].std"], "function", ["None"], ["", "", "def", "get_mean_and_std", "(", "dataset", ")", ":", "\n", "    ", "'''Compute the mean and std value of dataset.'''", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "mean", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "std", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "print", "(", "'==> Computing mean and std..'", ")", "\n", "for", "inputs", ",", "targets", "in", "dataloader", ":", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "mean", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "\n", "std", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "std", "(", ")", "\n", "", "", "mean", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "std", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.utils_pytorch.init_params": [[57, 71], ["net.modules", "isinstance", "torch.kaiming_normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.normal_", "torch.constant_"], "function", ["None"], ["", "def", "init_params", "(", "net", ")", ":", "\n", "    ", "'''Init layer parameters.'''", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.utils_pytorch.progress_bar": [[78, 120], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "utils_pytorch.format_time", "utils_pytorch.format_time", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.utils_pytorch.format_time", "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.utils_pytorch.format_time"], ["def", "progress_bar", "(", "current", ",", "total", ",", "msg", "=", "None", ")", ":", "\n", "    ", "global", "last_time", ",", "begin_time", "\n", "if", "current", "==", "0", ":", "\n", "        ", "begin_time", "=", "time", ".", "time", "(", ")", "# Reset for new bar.", "\n", "\n", "", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n", "rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n", "\n", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n", "tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar.", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", "+", "2", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.2_LUCIR_+DC.utils_pytorch.format_time": [[121, 152], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n", "seconds", "=", "seconds", "-", "hours", "*", "3600", "\n", "minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "", "", ""]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_dataset.split_images_labels": [[8, 16], ["images.append", "labels.append", "numpy.array", "numpy.array"], "function", ["None"], ["def", "split_images_labels", "(", "imgs", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "item", "in", "imgs", ":", "\n", "        ", "images", ".", "append", "(", "item", "[", "0", "]", ")", "\n", "labels", ".", "append", "(", "item", "[", "1", "]", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "images", ")", ",", "np", ".", "array", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_dataset.merge_images_labels": [[18, 28], ["list", "list", "range", "len", "len", "len", "imgs.append"], "function", ["None"], ["", "def", "merge_images_labels", "(", "images", ",", "labels", ")", ":", "\n", "    ", "images", "=", "list", "(", "images", ")", "\n", "labels", "=", "list", "(", "labels", ")", "\n", "assert", "(", "len", "(", "images", ")", "==", "len", "(", "labels", ")", ")", "\n", "imgs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "        ", "item", "=", "(", "images", "[", "i", "]", ",", "labels", "[", "i", "]", ")", "\n", "imgs", ".", "append", "(", "item", ")", "\n", "\n", "", "return", "imgs", "\n", "", ""]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.train_and_eval.train_and_eval": [[20, 35], ["range", "lr_scheduler.step", "print", "print", "train_and_eval.train", "utils_train.validate", "lr_scheduler.get_lr"], "function", ["home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.train_and_eval.train", "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.validate"], ["def", "train_and_eval", "(", "epochs", ",", "start_epoch", ",", "model", ",", "optimizer", ",", "lr_scheduler", ",", "train_loader", ",", "val_loader", ",", "gpu", "=", "None", ")", ":", "\n", "    ", "for", "epoch", "in", "range", "(", "start_epoch", ",", "epochs", ")", ":", "\n", "#adjust_learning_rate(optimizer, epoch)", "\n", "        ", "lr_scheduler", ".", "step", "(", ")", "\n", "print", "(", "'\\nEpoch: %d, LR: '", "%", "epoch", ",", "end", "=", "''", ")", "\n", "print", "(", "lr_scheduler", ".", "get_lr", "(", ")", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "epoch", ",", "gpu", ")", "\n", "\n", "# evaluate on validation set", "\n", "validate", "(", "val_loader", ",", "model", ",", "gpu", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.train_and_eval.train": [[36, 84], ["utils_train.AverageMeter", "utils_train.AverageMeter", "utils_train.AverageMeter", "utils_train.AverageMeter", "utils_train.AverageMeter", "model.train", "torch.CrossEntropyLoss().cuda", "time.time", "enumerate", "utils_train.AverageMeter.update", "target.cuda.cuda", "model", "nn.CrossEntropyLoss().cuda.", "utils_train.accuracy", "utils_train.AverageMeter.update", "utils_train.AverageMeter.update", "utils_train.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "utils_train.AverageMeter.update", "time.time", "torch.CrossEntropyLoss", "input.cuda.cuda", "criterion.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "print", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.train_and_eval.train", "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.update", "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.accuracy", "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.update", "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.update", "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.update", "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.update"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "epoch", ",", "gpu", "=", "None", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "gpu", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "gpu", "is", "not", "None", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.__init__": [[65, 67], ["utils_train.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.reset": [[68, 73], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.update": [[74, 79], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.validate": [[18, 62], ["utils_train.AverageMeter", "utils_train.AverageMeter", "utils_train.AverageMeter", "utils_train.AverageMeter", "model.eval", "torch.CrossEntropyLoss().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "print", "torch.CrossEntropyLoss", "target.cuda.cuda", "model", "nn.CrossEntropyLoss().cuda.", "utils_train.accuracy", "utils_train.AverageMeter.update", "utils_train.AverageMeter.update", "utils_train.AverageMeter.update", "utils_train.AverageMeter.update", "time.time", "input.cuda.cuda", "criterion.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "print", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.accuracy", "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.update", "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.update", "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.update", "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.AverageMeter.update"], ["def", "validate", "(", "val_loader", ",", "model", ",", "gpu", "=", "None", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "gpu", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "gpu", "is", "not", "None", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "10", "==", "0", ":", "\n", "                ", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "print", "(", "' * Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.utils_train.accuracy": [[80, 95], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval_LF.get_ref_features": [[23, 26], ["None"], "function", ["None"], ["def", "get_ref_features", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "    ", "global", "ref_features", "\n", "ref_features", "=", "inputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval_LF.get_cur_features": [[27, 30], ["None"], "function", ["None"], ["", "def", "get_cur_features", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "    ", "global", "cur_features", "\n", "cur_features", "=", "inputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval_LF.incremental_train_and_eval_LF": [[31, 135], ["range", "torch.device", "torch.device", "torch.device", "torch.device", "ref_model.eval", "ref_model.fc.register_forward_hook", "tg_model.fc.register_forward_hook", "tg_model.train", "tg_lr_scheduler.step", "print", "print", "enumerate", "tg_model.eval", "print", "print", "ref_model.fc.register_forward_hook.remove", "tg_model.fc.register_forward_hook.remove", "tg_model.modules", "tg_lr_scheduler.get_lr", "tg_optimizer.zero_grad", "tg_model", "loss.backward", "tg_optimizer.step", "loss.item", "tg_model.max", "targets.size", "predicted.eq().sum().item", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "isinstance", "inputs.to", "targets.to", "ref_model", "loss1.item", "loss2.item", "tg_model", "loss.item", "tg_model.max", "targets.size", "predicted.eq().sum().item", "len", "m.eval", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "predicted.eq().sum", "len", "len", "inputs.to", "targets.to", "torch.CrossEntropyLoss", "torch.CosineEmbeddingLoss", "ref_features.detach", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "predicted.eq().sum", "predicted.eq", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.train_and_eval.train"], ["", "def", "incremental_train_and_eval_LF", "(", "epochs", ",", "tg_model", ",", "ref_model", ",", "tg_optimizer", ",", "tg_lr_scheduler", ",", "trainloader", ",", "testloader", ",", "iteration", ",", "start_iteration", ",", "lamda", ",", "fix_bn", "=", "False", ",", "weight_per_class", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "    ", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "#trainset.train_data = X_train.astype('uint8')", "\n", "#trainset.train_labels = Y_train", "\n", "#trainloader = torch.utils.data.DataLoader(trainset, batch_size=128,", "\n", "#    shuffle=True, num_workers=2)", "\n", "#testset.test_data = X_valid.astype('uint8')", "\n", "#testset.test_labels = Y_valid", "\n", "#testloader = torch.utils.data.DataLoader(testset, batch_size=100,", "\n", "#    shuffle=False, num_workers=2)", "\n", "#print('Max and Min of train labels: {}, {}'.format(min(Y_train), max(Y_train)))", "\n", "#print('Max and Min of valid labels: {}, {}'.format(min(Y_valid), max(Y_valid)))", "\n", "\n", "", "if", "iteration", ">", "start_iteration", ":", "\n", "        ", "ref_model", ".", "eval", "(", ")", "\n", "handle_ref_features", "=", "ref_model", ".", "fc", ".", "register_forward_hook", "(", "get_ref_features", ")", "\n", "handle_cur_features", "=", "tg_model", ".", "fc", ".", "register_forward_hook", "(", "get_cur_features", ")", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "#train", "\n", "        ", "tg_model", ".", "train", "(", ")", "\n", "if", "fix_bn", ":", "\n", "            ", "for", "m", "in", "tg_model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "#m.weight.requires_grad = False", "\n", "#m.bias.requires_grad = False", "\n", "", "", "", "train_loss", "=", "0", "\n", "train_loss1", "=", "0", "\n", "train_loss2", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "tg_lr_scheduler", ".", "step", "(", ")", "\n", "print", "(", "'\\nEpoch: %d, LR: '", "%", "epoch", ",", "end", "=", "''", ")", "\n", "print", "(", "tg_lr_scheduler", ".", "get_lr", "(", ")", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "tg_optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "tg_model", "(", "inputs", ")", "\n", "if", "iteration", "==", "start_iteration", ":", "\n", "                ", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "weight_per_class", ")", "(", "outputs", ",", "targets", ")", "\n", "", "else", ":", "\n", "                ", "ref_outputs", "=", "ref_model", "(", "inputs", ")", "\n", "loss1", "=", "nn", ".", "CosineEmbeddingLoss", "(", ")", "(", "cur_features", ",", "ref_features", ".", "detach", "(", ")", ",", "torch", ".", "ones", "(", "inputs", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "device", ")", ")", "*", "lamda", "\n", "loss2", "=", "nn", ".", "CrossEntropyLoss", "(", "weight_per_class", ")", "(", "outputs", ",", "targets", ")", "\n", "loss", "=", "loss1", "+", "loss2", "\n", "", "loss", ".", "backward", "(", ")", "\n", "tg_optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "if", "iteration", ">", "start_iteration", ":", "\n", "                ", "train_loss1", "+=", "loss1", ".", "item", "(", ")", "\n", "train_loss2", "+=", "loss2", ".", "item", "(", ")", "\n", "", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "#if iteration == 0:", "\n", "#    msg = 'Loss: %.3f | Acc: %.3f%% (%d/%d)' % \\", "\n", "#    (train_loss/(batch_idx+1), 100.*correct/total, correct, total)", "\n", "#else:", "\n", "#    msg = 'Loss1: %.3f Loss2: %.3f Loss: %.3f | Acc: %.3f%% (%d/%d)' % \\", "\n", "#    (loss1.item(), loss2.item(), train_loss/(batch_idx+1), 100.*correct/total, correct, total)", "\n", "#progress_bar(batch_idx, len(trainloader), msg)", "\n", "", "if", "iteration", "==", "start_iteration", ":", "\n", "            ", "print", "(", "'Train set: {}, Train Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "len", "(", "trainloader", ")", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Train set: {}, Train Loss1: {:.4f}, Train Loss2: {:.4f},\\\n                Train Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "len", "(", "trainloader", ")", ",", "train_loss1", "/", "(", "batch_idx", "+", "1", ")", ",", "train_loss2", "/", "(", "batch_idx", "+", "1", ")", ",", "\n", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "#eval", "\n", "", "tg_model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "tg_model", "(", "inputs", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "weight_per_class", ")", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "#progress_bar(batch_idx, len(testloader), 'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "#    % (test_loss/(batch_idx+1), 100.*correct/total, correct, total))", "\n", "", "", "print", "(", "'Test set: {} Test Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "len", "(", "testloader", ")", ",", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "", "if", "iteration", ">", "start_iteration", ":", "\n", "        ", "print", "(", "\"Removing register_forward_hook\"", ")", "\n", "handle_ref_features", ".", "remove", "(", ")", "\n", "handle_cur_features", ".", "remove", "(", ")", "\n", "", "return", "tg_model", "", "", ""]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval_MR_LF.get_ref_features": [[25, 28], ["None"], "function", ["None"], ["def", "get_ref_features", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "    ", "global", "ref_features", "\n", "ref_features", "=", "inputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval_MR_LF.get_cur_features": [[29, 32], ["None"], "function", ["None"], ["", "def", "get_cur_features", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "    ", "global", "cur_features", "\n", "cur_features", "=", "inputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval_MR_LF.get_old_scores_before_scale": [[33, 36], ["None"], "function", ["None"], ["", "def", "get_old_scores_before_scale", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "    ", "global", "old_scores", "\n", "old_scores", "=", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval_MR_LF.get_new_scores_before_scale": [[37, 40], ["None"], "function", ["None"], ["", "def", "get_new_scores_before_scale", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "    ", "global", "new_scores", "\n", "new_scores", "=", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval_MR_LF.incremental_train_and_eval_MR_LF": [[41, 182], ["range", "torch.device", "torch.device", "torch.device", "torch.device", "ref_model.eval", "ref_model.fc.register_forward_hook", "tg_model.fc.register_forward_hook", "tg_model.fc.fc1.register_forward_hook", "tg_model.fc.fc2.register_forward_hook", "tg_model.train", "tg_lr_scheduler.step", "print", "print", "enumerate", "tg_model.eval", "print", "print", "ref_model.fc.register_forward_hook.remove", "tg_model.fc.register_forward_hook.remove", "tg_model.fc.fc1.register_forward_hook.remove", "tg_model.fc.fc2.register_forward_hook.remove", "tg_model.modules", "tg_lr_scheduler.get_lr", "tg_optimizer.zero_grad", "tg_model", "loss.backward", "tg_optimizer.step", "loss.item", "tg_model.max", "targets.size", "predicted.eq().sum().item", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "isinstance", "inputs.to", "targets.to", "ref_model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "gt_index.scatter().ge.scatter().ge", "torch.cat.masked_select", "targets.lt", "torch.nonzero().size", "torch.nonzero().size", "torch.nonzero().size", "torch.nonzero().size", "loss1.item", "loss2.item", "torch.zeros().to.item", "tg_model", "loss.item", "tg_model.max", "targets.size", "predicted.eq().sum().item", "len", "m.eval", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.cat.size", "tg_model.size", "outputs_bs[].topk", "gt_scores[].view().repeat", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "predicted.eq().sum", "len", "len", "inputs.to", "targets.to", "torch.CrossEntropyLoss", "torch.CosineEmbeddingLoss", "ref_features.detach", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "gt_index.scatter().ge.scatter", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "gt_scores[].view().repeat.size", "max_novel_scores.size", "gt_scores[].view().repeat.size", "predicted.eq().sum", "torch.cat.size", "targets.view", "gt_scores[].view", "torch.MarginRankingLoss", "gt_scores[].view().repeat.view", "max_novel_scores.view", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "predicted.eq", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "predicted.eq", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.train_and_eval.train"], ["", "def", "incremental_train_and_eval_MR_LF", "(", "epochs", ",", "tg_model", ",", "ref_model", ",", "tg_optimizer", ",", "tg_lr_scheduler", ",", "trainloader", ",", "testloader", ",", "iteration", ",", "start_iteration", ",", "lamda", ",", "dist", ",", "K", ",", "lw_mr", ",", "fix_bn", "=", "False", ",", "weight_per_class", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "    ", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "#trainset.train_data = X_train.astype('uint8')", "\n", "#trainset.train_labels = Y_train", "\n", "#trainloader = torch.utils.data.DataLoader(trainset, batch_size=128,", "\n", "#    shuffle=True, num_workers=2)", "\n", "#testset.test_data = X_valid.astype('uint8')", "\n", "#testset.test_labels = Y_valid", "\n", "#testloader = torch.utils.data.DataLoader(testset, batch_size=100,", "\n", "#    shuffle=False, num_workers=2)", "\n", "#print('Max and Min of train labels: {}, {}'.format(min(Y_train), max(Y_train)))", "\n", "#print('Max and Min of valid labels: {}, {}'.format(min(Y_valid), max(Y_valid)))", "\n", "\n", "", "if", "iteration", ">", "start_iteration", ":", "\n", "        ", "ref_model", ".", "eval", "(", ")", "\n", "num_old_classes", "=", "ref_model", ".", "fc", ".", "out_features", "\n", "handle_ref_features", "=", "ref_model", ".", "fc", ".", "register_forward_hook", "(", "get_ref_features", ")", "\n", "handle_cur_features", "=", "tg_model", ".", "fc", ".", "register_forward_hook", "(", "get_cur_features", ")", "\n", "handle_old_scores_bs", "=", "tg_model", ".", "fc", ".", "fc1", ".", "register_forward_hook", "(", "get_old_scores_before_scale", ")", "\n", "handle_new_scores_bs", "=", "tg_model", ".", "fc", ".", "fc2", ".", "register_forward_hook", "(", "get_new_scores_before_scale", ")", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "#train", "\n", "        ", "tg_model", ".", "train", "(", ")", "\n", "if", "fix_bn", ":", "\n", "            ", "for", "m", "in", "tg_model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "#m.weight.requires_grad = False", "\n", "#m.bias.requires_grad = False", "\n", "", "", "", "train_loss", "=", "0", "\n", "train_loss1", "=", "0", "\n", "train_loss2", "=", "0", "\n", "train_loss3", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "tg_lr_scheduler", ".", "step", "(", ")", "\n", "print", "(", "'\\nEpoch: %d, LR: '", "%", "epoch", ",", "end", "=", "''", ")", "\n", "print", "(", "tg_lr_scheduler", ".", "get_lr", "(", ")", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "tg_optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "tg_model", "(", "inputs", ")", "\n", "if", "iteration", "==", "start_iteration", ":", "\n", "                ", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "weight_per_class", ")", "(", "outputs", ",", "targets", ")", "\n", "", "else", ":", "\n", "                ", "ref_outputs", "=", "ref_model", "(", "inputs", ")", "\n", "loss1", "=", "nn", ".", "CosineEmbeddingLoss", "(", ")", "(", "cur_features", ",", "ref_features", ".", "detach", "(", ")", ",", "torch", ".", "ones", "(", "inputs", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "device", ")", ")", "*", "lamda", "\n", "loss2", "=", "nn", ".", "CrossEntropyLoss", "(", "weight_per_class", ")", "(", "outputs", ",", "targets", ")", "\n", "#################################################", "\n", "#scores before scale, [-1, 1]", "\n", "outputs_bs", "=", "torch", ".", "cat", "(", "(", "old_scores", ",", "new_scores", ")", ",", "dim", "=", "1", ")", "\n", "#print(tg_model.fc.fc1.in_features, tg_model.fc.fc1.out_features)", "\n", "#print(tg_model.fc.fc2.in_features, tg_model.fc.fc2.out_features)", "\n", "#print(old_scores.size(), new_scores.size(), outputs_bs.size(), outputs.size())", "\n", "assert", "(", "outputs_bs", ".", "size", "(", ")", "==", "outputs", ".", "size", "(", ")", ")", "\n", "#get groud truth scores", "\n", "gt_index", "=", "torch", ".", "zeros", "(", "outputs_bs", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "gt_index", "=", "gt_index", ".", "scatter", "(", "1", ",", "targets", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", ".", "ge", "(", "0.5", ")", "\n", "gt_scores", "=", "outputs_bs", ".", "masked_select", "(", "gt_index", ")", "\n", "#get top-K scores on novel classes", "\n", "max_novel_scores", "=", "outputs_bs", "[", ":", ",", "num_old_classes", ":", "]", ".", "topk", "(", "K", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "#the index of hard samples, i.e., samples of old classes", "\n", "hard_index", "=", "targets", ".", "lt", "(", "num_old_classes", ")", "\n", "hard_num", "=", "torch", ".", "nonzero", "(", "hard_index", ")", ".", "size", "(", "0", ")", "\n", "#print(\"hard examples size: \", hard_num)", "\n", "if", "hard_num", ">", "0", ":", "\n", "                    ", "gt_scores", "=", "gt_scores", "[", "hard_index", "]", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "K", ")", "\n", "max_novel_scores", "=", "max_novel_scores", "[", "hard_index", "]", "\n", "assert", "(", "gt_scores", ".", "size", "(", ")", "==", "max_novel_scores", ".", "size", "(", ")", ")", "\n", "assert", "(", "gt_scores", ".", "size", "(", "0", ")", "==", "hard_num", ")", "\n", "#print(\"hard example gt scores: \", gt_scores.size(), gt_scores)", "\n", "#print(\"hard example max novel scores: \", max_novel_scores.size(), max_novel_scores)", "\n", "loss3", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "dist", ")", "(", "gt_scores", ".", "view", "(", "-", "1", ",", "1", ")", ",", "max_novel_scores", ".", "view", "(", "-", "1", ",", "1", ")", ",", "torch", ".", "ones", "(", "hard_num", "*", "K", ")", ".", "to", "(", "device", ")", ")", "*", "lw_mr", "\n", "", "else", ":", "\n", "                    ", "loss3", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "#################################################", "\n", "", "loss", "=", "loss1", "+", "loss2", "+", "loss3", "\n", "", "loss", ".", "backward", "(", ")", "\n", "tg_optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "if", "iteration", ">", "start_iteration", ":", "\n", "                ", "train_loss1", "+=", "loss1", ".", "item", "(", ")", "\n", "train_loss2", "+=", "loss2", ".", "item", "(", ")", "\n", "train_loss3", "+=", "loss3", ".", "item", "(", ")", "\n", "", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "#if iteration == 0:", "\n", "#    msg = 'Loss: %.3f | Acc: %.3f%% (%d/%d)' % \\", "\n", "#    (train_loss/(batch_idx+1), 100.*correct/total, correct, total)", "\n", "#else:", "\n", "#    msg = 'Loss1: %.3f Loss2: %.3f Loss: %.3f | Acc: %.3f%% (%d/%d)' % \\", "\n", "#    (loss1.item(), loss2.item(), train_loss/(batch_idx+1), 100.*correct/total, correct, total)", "\n", "#progress_bar(batch_idx, len(trainloader), msg)", "\n", "", "if", "iteration", "==", "start_iteration", ":", "\n", "            ", "print", "(", "'Train set: {}, Train Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "len", "(", "trainloader", ")", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Train set: {}, Train Loss1: {:.4f}, Train Loss2: {:.4f}, Train Loss3: {:.4f},\\\n                Train Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "len", "(", "trainloader", ")", ",", "train_loss1", "/", "(", "batch_idx", "+", "1", ")", ",", "train_loss2", "/", "(", "batch_idx", "+", "1", ")", ",", "train_loss3", "/", "(", "batch_idx", "+", "1", ")", ",", "\n", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "#eval", "\n", "", "tg_model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "tg_model", "(", "inputs", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "weight_per_class", ")", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "#progress_bar(batch_idx, len(testloader), 'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "#    % (test_loss/(batch_idx+1), 100.*correct/total, correct, total))", "\n", "", "", "print", "(", "'Test set: {} Test Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "len", "(", "testloader", ")", ",", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "", "if", "iteration", ">", "start_iteration", ":", "\n", "        ", "print", "(", "\"Removing register_forward_hook\"", ")", "\n", "handle_ref_features", ".", "remove", "(", ")", "\n", "handle_cur_features", ".", "remove", "(", ")", "\n", "handle_old_scores_bs", ".", "remove", "(", ")", "\n", "handle_new_scores_bs", ".", "remove", "(", ")", "\n", "", "return", "tg_model", "", "", ""]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.compute_confusion_matrix.compute_confusion_matrix": [[21, 84], ["tg_model.eval", "tg_feature_model.eval", "numpy.zeros", "sklearn.metrics.confusion_matrix", "sklearn.metrics.confusion_matrix", "sklearn.metrics.confusion_matrix", "torch.device", "torch.device", "torch.device", "torch.device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "print", "print", "print", "print", "print", "print", "targets.size", "all_targets.append", "tg_model", "tg_model.max", "predicted.eq().sum().item", "all_predicted.append", "numpy.squeeze", "scipy.spatial.distance.cdist", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to.max", "predicted_icarl.eq().sum().item", "all_predicted_icarl.append", "scipy.spatial.distance.cdist", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to.max", "predicted_ncm.eq().sum().item", "all_predicted_ncm.append", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "inputs.to", "targets.to", "targets.cpu", "predicted.cpu", "tg_feature_model", "np.squeeze.cpu", "predicted_icarl.cpu", "np.squeeze.cpu", "predicted_ncm.cpu", "predicted.eq().sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "predicted_icarl.eq().sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "predicted_ncm.eq().sum", "numpy.mean", "numpy.mean", "numpy.mean", "predicted.eq", "predicted_icarl.eq", "predicted_ncm.eq", "numpy.diag", "numpy.sum", "numpy.diag", "numpy.sum", "numpy.diag", "numpy.sum"], "function", ["None"], ["def", "compute_confusion_matrix", "(", "tg_model", ",", "tg_feature_model", ",", "class_means", ",", "evalloader", ",", "print_info", "=", "False", ",", "device", "=", "None", ")", ":", "\n", "    ", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "", "tg_model", ".", "eval", "(", ")", "\n", "tg_feature_model", ".", "eval", "(", ")", "\n", "\n", "#evalset = torchvision.datasets.CIFAR100(root='./data', train=False,", "\n", "#                                   download=False, transform=transform_test)", "\n", "#evalset.test_data = input_data.astype('uint8')", "\n", "#evalset.test_labels = input_labels", "\n", "#evalloader = torch.utils.data.DataLoader(evalset, batch_size=128,", "\n", "#    shuffle=False, num_workers=2)", "\n", "\n", "correct", "=", "0", "\n", "correct_icarl", "=", "0", "\n", "correct_ncm", "=", "0", "\n", "total", "=", "0", "\n", "num_classes", "=", "tg_model", ".", "fc", ".", "out_features", "\n", "cm", "=", "np", ".", "zeros", "(", "(", "3", ",", "num_classes", ",", "num_classes", ")", ")", "\n", "all_targets", "=", "[", "]", "\n", "all_predicted", "=", "[", "]", "\n", "all_predicted_icarl", "=", "[", "]", "\n", "all_predicted_ncm", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "evalloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "all_targets", ".", "append", "(", "targets", ".", "cpu", "(", ")", ")", "\n", "\n", "outputs", "=", "tg_model", "(", "inputs", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "all_predicted", ".", "append", "(", "predicted", ".", "cpu", "(", ")", ")", "\n", "\n", "outputs_feature", "=", "np", ".", "squeeze", "(", "tg_feature_model", "(", "inputs", ")", ")", "\n", "# Compute score for iCaRL", "\n", "sqd_icarl", "=", "cdist", "(", "class_means", "[", ":", ",", ":", ",", "0", "]", ".", "T", ",", "outputs_feature", ".", "cpu", "(", ")", ",", "'sqeuclidean'", ")", "\n", "score_icarl", "=", "torch", ".", "from_numpy", "(", "(", "-", "sqd_icarl", ")", ".", "T", ")", ".", "to", "(", "device", ")", "\n", "_", ",", "predicted_icarl", "=", "score_icarl", ".", "max", "(", "1", ")", "\n", "correct_icarl", "+=", "predicted_icarl", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "all_predicted_icarl", ".", "append", "(", "predicted_icarl", ".", "cpu", "(", ")", ")", "\n", "# Compute score for NCM", "\n", "sqd_ncm", "=", "cdist", "(", "class_means", "[", ":", ",", ":", ",", "1", "]", ".", "T", ",", "outputs_feature", ".", "cpu", "(", ")", ",", "'sqeuclidean'", ")", "\n", "score_ncm", "=", "torch", ".", "from_numpy", "(", "(", "-", "sqd_ncm", ")", ".", "T", ")", ".", "to", "(", "device", ")", "\n", "_", ",", "predicted_ncm", "=", "score_ncm", ".", "max", "(", "1", ")", "\n", "correct_ncm", "+=", "predicted_ncm", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "all_predicted_ncm", ".", "append", "(", "predicted_ncm", ".", "cpu", "(", ")", ")", "\n", "# print(sqd_icarl.shape, score_icarl.shape, predicted_icarl.shape, \\", "\n", "# sqd_ncm.shape, score_ncm.shape, predicted_ncm.shape)", "\n", "\n", "", "", "cm", "[", "0", ",", ":", ",", ":", "]", "=", "confusion_matrix", "(", "np", ".", "concatenate", "(", "all_targets", ")", ",", "np", ".", "concatenate", "(", "all_predicted", ")", ")", "\n", "cm", "[", "1", ",", ":", ",", ":", "]", "=", "confusion_matrix", "(", "np", ".", "concatenate", "(", "all_targets", ")", ",", "np", ".", "concatenate", "(", "all_predicted_icarl", ")", ")", "\n", "cm", "[", "2", ",", ":", ",", ":", "]", "=", "confusion_matrix", "(", "np", ".", "concatenate", "(", "all_targets", ")", ",", "np", ".", "concatenate", "(", "all_predicted_ncm", ")", ")", "\n", "\n", "if", "print_info", ":", "\n", "        ", "print", "(", "\"  top 1 accuracy CNN            :\\t\\t{:.2f} %\"", ".", "format", "(", "100.", "*", "correct", "/", "total", ")", ")", "\n", "print", "(", "\"  top 1 accuracy iCaRL          :\\t\\t{:.2f} %\"", ".", "format", "(", "100.", "*", "correct_icarl", "/", "total", ")", ")", "\n", "print", "(", "\"  top 1 accuracy NCM            :\\t\\t{:.2f} %\"", ".", "format", "(", "100.", "*", "correct_ncm", "/", "total", ")", ")", "\n", "print", "(", "\"  top 1 accuracy CNN            :\\t\\t{:.2f} %\"", ".", "format", "(", "100.", "*", "np", ".", "mean", "(", "np", ".", "diag", "(", "cm", "[", "0", "]", ")", "/", "np", ".", "sum", "(", "cm", "[", "0", "]", ",", "axis", "=", "1", ")", ")", ")", ")", "\n", "print", "(", "\"  top 1 accuracy iCaRL          :\\t\\t{:.2f} %\"", ".", "format", "(", "100.", "*", "np", ".", "mean", "(", "np", ".", "diag", "(", "cm", "[", "1", "]", ")", "/", "np", ".", "sum", "(", "cm", "[", "1", "]", ",", "axis", "=", "1", ")", ")", ")", ")", "\n", "print", "(", "\"  top 1 accuracy NCM            :\\t\\t{:.2f} %\"", ".", "format", "(", "100.", "*", "np", ".", "mean", "(", "np", ".", "diag", "(", "cm", "[", "2", "]", ")", "/", "np", ".", "sum", "(", "cm", "[", "2", "]", ",", "axis", "=", "1", ")", ")", ")", ")", "\n", "\n", "", "return", "cm", "\n", "", ""]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval.incremental_train_and_eval": [[21, 119], ["range", "torch.device", "torch.device", "torch.device", "torch.device", "ref_model.eval", "tg_model.train", "tg_lr_scheduler.step", "print", "print", "enumerate", "tg_model.eval", "print", "tg_model.modules", "tg_lr_scheduler.get_lr", "tg_optimizer.zero_grad", "tg_model", "loss.backward", "tg_optimizer.step", "loss.item", "tg_model.max", "targets.size", "predicted.eq().sum().item", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "isinstance", "inputs.to", "targets.to", "ref_model", "loss1.item", "loss2.item", "tg_model", "loss.item", "tg_model.max", "targets.size", "predicted.eq().sum().item", "len", "m.eval", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "predicted.eq().sum", "len", "len", "inputs.to", "targets.to", "torch.CrossEntropyLoss", "predicted.eq().sum", "predicted.eq", "predicted.eq", "torch.KLDivLoss", "torch.log_softmax", "torch.softmax", "ref_model.detach"], "function", ["home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.train_and_eval.train"], ["def", "incremental_train_and_eval", "(", "epochs", ",", "tg_model", ",", "ref_model", ",", "tg_optimizer", ",", "tg_lr_scheduler", ",", "trainloader", ",", "testloader", ",", "iteration", ",", "start_iteration", ",", "T", ",", "beta", ",", "fix_bn", "=", "False", ",", "weight_per_class", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "    ", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "#trainset.train_data = X_train.astype('uint8')", "\n", "#trainset.train_labels = Y_train", "\n", "#trainloader = torch.utils.data.DataLoader(trainset, batch_size=128,", "\n", "#    shuffle=True, num_workers=2)", "\n", "#testset.test_data = X_valid.astype('uint8')", "\n", "#testset.test_labels = Y_valid", "\n", "#testloader = torch.utils.data.DataLoader(testset, batch_size=100,", "\n", "#    shuffle=False, num_workers=2)", "\n", "#print('Max and Min of train labels: {}, {}'.format(min(Y_train), max(Y_train)))", "\n", "#print('Max and Min of valid labels: {}, {}'.format(min(Y_valid), max(Y_valid)))", "\n", "\n", "", "if", "iteration", ">", "start_iteration", ":", "\n", "        ", "ref_model", ".", "eval", "(", ")", "\n", "num_old_classes", "=", "ref_model", ".", "fc", ".", "out_features", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "#train", "\n", "        ", "tg_model", ".", "train", "(", ")", "\n", "if", "fix_bn", ":", "\n", "            ", "for", "m", "in", "tg_model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "#m.weight.requires_grad = False", "\n", "#m.bias.requires_grad = False", "\n", "", "", "", "train_loss", "=", "0", "\n", "train_loss1", "=", "0", "\n", "train_loss2", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "tg_lr_scheduler", ".", "step", "(", ")", "\n", "print", "(", "'\\nEpoch: %d, LR: '", "%", "epoch", ",", "end", "=", "''", ")", "\n", "print", "(", "tg_lr_scheduler", ".", "get_lr", "(", ")", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "tg_optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "tg_model", "(", "inputs", ")", "\n", "if", "iteration", "==", "start_iteration", ":", "\n", "                ", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "weight_per_class", ")", "(", "outputs", ",", "targets", ")", "\n", "", "else", ":", "\n", "                ", "ref_outputs", "=", "ref_model", "(", "inputs", ")", "\n", "loss1", "=", "nn", ".", "KLDivLoss", "(", ")", "(", "F", ".", "log_softmax", "(", "outputs", "[", ":", ",", ":", "num_old_classes", "]", "/", "T", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "ref_outputs", ".", "detach", "(", ")", "/", "T", ",", "dim", "=", "1", ")", ")", "*", "T", "*", "T", "*", "beta", "*", "num_old_classes", "\n", "loss2", "=", "nn", ".", "CrossEntropyLoss", "(", "weight_per_class", ")", "(", "outputs", ",", "targets", ")", "\n", "loss", "=", "loss1", "+", "loss2", "\n", "", "loss", ".", "backward", "(", ")", "\n", "tg_optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "if", "iteration", ">", "start_iteration", ":", "\n", "                ", "train_loss1", "+=", "loss1", ".", "item", "(", ")", "\n", "train_loss2", "+=", "loss2", ".", "item", "(", ")", "\n", "", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "#if iteration == 0:", "\n", "#    msg = 'Loss: %.3f | Acc: %.3f%% (%d/%d)' % \\", "\n", "#    (train_loss/(batch_idx+1), 100.*correct/total, correct, total)", "\n", "#else:", "\n", "#    msg = 'Loss1: %.3f Loss2: %.3f Loss: %.3f | Acc: %.3f%% (%d/%d)' % \\", "\n", "#    (loss1.item(), loss2.item(), train_loss/(batch_idx+1), 100.*correct/total, correct, total)", "\n", "#progress_bar(batch_idx, len(trainloader), msg)", "\n", "", "if", "iteration", "==", "start_iteration", ":", "\n", "            ", "print", "(", "'Train set: {}, Train Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "len", "(", "trainloader", ")", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Train set: {}, Train Loss1: {:.4f}, Train Loss2: {:.4f},\\\n                Train Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "len", "(", "trainloader", ")", ",", "train_loss1", "/", "(", "batch_idx", "+", "1", ")", ",", "train_loss2", "/", "(", "batch_idx", "+", "1", ")", ",", "\n", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "#eval", "\n", "", "tg_model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "tg_model", "(", "inputs", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "weight_per_class", ")", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "#progress_bar(batch_idx, len(testloader), 'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "#    % (test_loss/(batch_idx+1), 100.*correct/total, correct, total))", "\n", "", "", "print", "(", "'Test set: {} Test Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "len", "(", "testloader", ")", ",", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "", "return", "tg_model", "", "", ""]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval_MS.get_old_scores_before_scale": [[21, 24], ["None"], "function", ["None"], ["def", "get_old_scores_before_scale", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "    ", "global", "old_scores", "\n", "old_scores", "=", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval_MS.get_new_scores_before_scale": [[25, 28], ["None"], "function", ["None"], ["", "def", "get_new_scores_before_scale", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "    ", "global", "new_scores", "\n", "new_scores", "=", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval_MS.incremental_train_and_eval_MS": [[29, 136], ["range", "torch.device", "torch.device", "torch.device", "torch.device", "ref_model.eval", "tg_model.fc.fc1.register_forward_hook", "tg_model.fc.fc2.register_forward_hook", "tg_model.train", "tg_lr_scheduler.step", "print", "print", "enumerate", "tg_model.eval", "print", "print", "tg_model.fc.fc1.register_forward_hook.remove", "tg_model.fc.fc2.register_forward_hook.remove", "tg_model.modules", "tg_lr_scheduler.get_lr", "tg_optimizer.zero_grad", "tg_model", "loss.backward", "tg_optimizer.step", "loss.item", "tg_model.max", "targets.size", "predicted.eq().sum().item", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "isinstance", "inputs.to", "targets.to", "ref_model", "loss1.item", "loss2.item", "tg_model", "loss.item", "tg_model.max", "targets.size", "predicted.eq().sum().item", "len", "m.eval", "torch.CrossEntropyLoss", "ref_model.detach", "ref_model.fc.sigma.detach", "torch.CrossEntropyLoss", "predicted.eq().sum", "len", "len", "inputs.to", "targets.to", "torch.CrossEntropyLoss", "predicted.eq().sum", "torch.MSELoss", "ref_scores.detach", "predicted.eq", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.train_and_eval.train"], ["", "def", "incremental_train_and_eval_MS", "(", "epochs", ",", "tg_model", ",", "ref_model", ",", "tg_optimizer", ",", "tg_lr_scheduler", ",", "trainloader", ",", "testloader", ",", "iteration", ",", "start_iteration", ",", "lw_ms", ",", "fix_bn", "=", "False", ",", "weight_per_class", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "    ", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "#trainset.train_data = X_train.astype('uint8')", "\n", "#trainset.train_labels = Y_train", "\n", "#trainloader = torch.utils.data.DataLoader(trainset, batch_size=128,", "\n", "#    shuffle=True, num_workers=2)", "\n", "#testset.test_data = X_valid.astype('uint8')", "\n", "#testset.test_labels = Y_valid", "\n", "#testloader = torch.utils.data.DataLoader(testset, batch_size=100,", "\n", "#    shuffle=False, num_workers=2)", "\n", "#print('Max and Min of train labels: {}, {}'.format(min(Y_train), max(Y_train)))", "\n", "#print('Max and Min of valid labels: {}, {}'.format(min(Y_valid), max(Y_valid)))", "\n", "\n", "", "if", "iteration", ">", "start_iteration", ":", "\n", "        ", "ref_model", ".", "eval", "(", ")", "\n", "num_old_classes", "=", "ref_model", ".", "fc", ".", "out_features", "\n", "handle_old_scores_bs", "=", "tg_model", ".", "fc", ".", "fc1", ".", "register_forward_hook", "(", "get_old_scores_before_scale", ")", "\n", "handle_new_scores_bs", "=", "tg_model", ".", "fc", ".", "fc2", ".", "register_forward_hook", "(", "get_new_scores_before_scale", ")", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "#train", "\n", "        ", "tg_model", ".", "train", "(", ")", "\n", "if", "fix_bn", ":", "\n", "            ", "for", "m", "in", "tg_model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "#m.weight.requires_grad = False", "\n", "#m.bias.requires_grad = False", "\n", "", "", "", "train_loss", "=", "0", "\n", "train_loss1", "=", "0", "\n", "train_loss2", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "tg_lr_scheduler", ".", "step", "(", ")", "\n", "print", "(", "'\\nEpoch: %d, LR: '", "%", "epoch", ",", "end", "=", "''", ")", "\n", "print", "(", "tg_lr_scheduler", ".", "get_lr", "(", ")", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "tg_optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "tg_model", "(", "inputs", ")", "\n", "if", "iteration", "==", "start_iteration", ":", "\n", "                ", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "weight_per_class", ")", "(", "outputs", ",", "targets", ")", "\n", "", "else", ":", "\n", "                ", "ref_outputs", "=", "ref_model", "(", "inputs", ")", "\n", "#loss1 = nn.KLDivLoss()(F.log_softmax(outputs[:,:num_old_classes]/T, dim=1), \\", "\n", "#    F.softmax(ref_outputs.detach()/T, dim=1)) * T * T * beta * num_old_classes", "\n", "ref_scores", "=", "ref_outputs", ".", "detach", "(", ")", "/", "ref_model", ".", "fc", ".", "sigma", ".", "detach", "(", ")", "\n", "loss1", "=", "nn", ".", "MSELoss", "(", ")", "(", "old_scores", ",", "ref_scores", ".", "detach", "(", ")", ")", "*", "lw_ms", "*", "num_old_classes", "\n", "loss2", "=", "nn", ".", "CrossEntropyLoss", "(", "weight_per_class", ")", "(", "outputs", ",", "targets", ")", "\n", "loss", "=", "loss1", "+", "loss2", "\n", "", "loss", ".", "backward", "(", ")", "\n", "tg_optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "if", "iteration", ">", "start_iteration", ":", "\n", "                ", "train_loss1", "+=", "loss1", ".", "item", "(", ")", "\n", "train_loss2", "+=", "loss2", ".", "item", "(", ")", "\n", "", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "#if iteration == 0:", "\n", "#    msg = 'Loss: %.3f | Acc: %.3f%% (%d/%d)' % \\", "\n", "#    (train_loss/(batch_idx+1), 100.*correct/total, correct, total)", "\n", "#else:", "\n", "#    msg = 'Loss1: %.3f Loss2: %.3f Loss: %.3f | Acc: %.3f%% (%d/%d)' % \\", "\n", "#    (loss1.item(), loss2.item(), train_loss/(batch_idx+1), 100.*correct/total, correct, total)", "\n", "#progress_bar(batch_idx, len(trainloader), msg)", "\n", "", "if", "iteration", "==", "start_iteration", ":", "\n", "            ", "print", "(", "'Train set: {}, Train Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "len", "(", "trainloader", ")", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Train set: {}, Train Loss1: {:.4f}, Train Loss2: {:.4f},\\\n                Train Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "len", "(", "trainloader", ")", ",", "train_loss1", "/", "(", "batch_idx", "+", "1", ")", ",", "train_loss2", "/", "(", "batch_idx", "+", "1", ")", ",", "\n", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "#eval", "\n", "", "tg_model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "tg_model", "(", "inputs", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "weight_per_class", ")", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "#progress_bar(batch_idx, len(testloader), 'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "#    % (test_loss/(batch_idx+1), 100.*correct/total, correct, total))", "\n", "", "", "print", "(", "'Test set: {} Test Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "len", "(", "testloader", ")", ",", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "", "if", "iteration", ">", "start_iteration", ":", "\n", "        ", "print", "(", "\"Removing register_forward_hook\"", ")", "\n", "handle_old_scores_bs", ".", "remove", "(", ")", "\n", "handle_new_scores_bs", ".", "remove", "(", ")", "\n", "", "return", "tg_model", "", "", ""]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.compute_features.compute_features": [[23, 44], ["tg_feature_model.eval", "numpy.zeros", "torch.device", "torch.device", "torch.device", "torch.device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "inputs.to.to", "numpy.squeeze", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "tg_feature_model().cpu", "tg_feature_model"], "function", ["None"], ["def", "compute_features", "(", "tg_feature_model", ",", "evalloader", ",", "num_samples", ",", "num_features", ",", "device", "=", "None", ")", ":", "\n", "    ", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "", "tg_feature_model", ".", "eval", "(", ")", "\n", "\n", "#evalset = torchvision.datasets.CIFAR100(root='./data', train=False,", "\n", "#                                   download=False, transform=transform_test)", "\n", "#evalset.test_data = input_data.astype('uint8')", "\n", "#evalset.test_labels = np.zeros(input_data.shape[0])", "\n", "#evalloader = torch.utils.data.DataLoader(evalset, batch_size=128,", "\n", "#    shuffle=False, num_workers=2)", "\n", "\n", "features", "=", "np", ".", "zeros", "(", "[", "num_samples", ",", "num_features", "]", ")", "\n", "start_idx", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "inputs", ",", "targets", "in", "evalloader", ":", "\n", "            ", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "features", "[", "start_idx", ":", "start_idx", "+", "inputs", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "np", ".", "squeeze", "(", "tg_feature_model", "(", "inputs", ")", ".", "cpu", "(", ")", ")", "\n", "start_idx", "=", "start_idx", "+", "inputs", ".", "shape", "[", "0", "]", "\n", "", "", "assert", "(", "start_idx", "==", "num_samples", ")", "\n", "return", "features", "\n", "", ""]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.compute_accuracy.compute_accuracy": [[21, 77], ["tg_model.eval", "tg_feature_model.eval", "torch.device", "torch.device", "torch.device", "torch.device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "print", "print", "targets.size", "tg_model", "torch.softmax", "F.softmax.max", "predicted.eq().sum().item", "numpy.squeeze", "scipy.spatial.distance.cdist", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to.max", "predicted_icarl.eq().sum().item", "scipy.spatial.distance.cdist", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to.max", "predicted_ncm.eq().sum().item", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "inputs.to", "targets.to", "tg_feature_model", "np.squeeze.cpu", "np.squeeze.cpu", "scale.repeat().type().to", "predicted.eq().sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "predicted_icarl.eq().sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "predicted_ncm.eq().sum", "scale.repeat().type", "predicted.eq", "predicted_icarl.eq", "predicted_ncm.eq", "scale.repeat"], "function", ["None"], ["def", "compute_accuracy", "(", "tg_model", ",", "tg_feature_model", ",", "class_means", ",", "evalloader", ",", "scale", "=", "None", ",", "print_info", "=", "True", ",", "device", "=", "None", ")", ":", "\n", "    ", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "", "tg_model", ".", "eval", "(", ")", "\n", "tg_feature_model", ".", "eval", "(", ")", "\n", "\n", "#evalset = torchvision.datasets.CIFAR100(root='./data', train=False,", "\n", "#                                   download=False, transform=transform_test)", "\n", "#evalset.test_data = input_data.astype('uint8')", "\n", "#evalset.test_labels = input_labels", "\n", "#evalloader = torch.utils.data.DataLoader(evalset, batch_size=128,", "\n", "#    shuffle=False, num_workers=2)", "\n", "\n", "correct", "=", "0", "\n", "correct_icarl", "=", "0", "\n", "correct_ncm", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "evalloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "\n", "outputs", "=", "tg_model", "(", "inputs", ")", "\n", "outputs", "=", "F", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "if", "scale", "is", "not", "None", ":", "\n", "                ", "assert", "(", "scale", ".", "shape", "[", "0", "]", "==", "1", ")", "\n", "assert", "(", "outputs", ".", "shape", "[", "1", "]", "==", "scale", ".", "shape", "[", "1", "]", ")", "\n", "outputs", "=", "outputs", "/", "scale", ".", "repeat", "(", "outputs", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "to", "(", "device", ")", "\n", "", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "outputs_feature", "=", "np", ".", "squeeze", "(", "tg_feature_model", "(", "inputs", ")", ")", "\n", "\n", "# Compute score for iCaRL", "\n", "sqd_icarl", "=", "cdist", "(", "class_means", "[", ":", ",", ":", ",", "0", "]", ".", "T", ",", "outputs_feature", ".", "cpu", "(", ")", ",", "'sqeuclidean'", ")", "\n", "score_icarl", "=", "torch", ".", "from_numpy", "(", "(", "-", "sqd_icarl", ")", ".", "T", ")", ".", "to", "(", "device", ")", "\n", "_", ",", "predicted_icarl", "=", "score_icarl", ".", "max", "(", "1", ")", "\n", "correct_icarl", "+=", "predicted_icarl", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "# Compute score for NCM", "\n", "sqd_ncm", "=", "cdist", "(", "class_means", "[", ":", ",", ":", ",", "1", "]", ".", "T", ",", "outputs_feature", ".", "cpu", "(", ")", ",", "'sqeuclidean'", ")", "\n", "score_ncm", "=", "torch", ".", "from_numpy", "(", "(", "-", "sqd_ncm", ")", ".", "T", ")", ".", "to", "(", "device", ")", "\n", "_", ",", "predicted_ncm", "=", "score_ncm", ".", "max", "(", "1", ")", "\n", "correct_ncm", "+=", "predicted_ncm", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "# print(sqd_icarl.shape, score_icarl.shape, predicted_icarl.shape, \\", "\n", "# sqd_ncm.shape, score_ncm.shape, predicted_ncm.shape)", "\n", "", "", "if", "print_info", ":", "\n", "        ", "print", "(", "\"  top 1 accuracy CNN            :\\t\\t{:.2f} %\"", ".", "format", "(", "100.", "*", "correct", "/", "total", ")", ")", "\n", "print", "(", "\"  top 1 accuracy iCaRL          :\\t\\t{:.2f} %\"", ".", "format", "(", "100.", "*", "correct_icarl", "/", "total", ")", ")", "\n", "print", "(", "\"  top 1 accuracy NCM            :\\t\\t{:.2f} %\"", ".", "format", "(", "100.", "*", "correct_ncm", "/", "total", ")", ")", "\n", "\n", "", "cnn_acc", "=", "100.", "*", "correct", "/", "total", "\n", "icarl_acc", "=", "100.", "*", "correct_icarl", "/", "total", "\n", "ncm_acc", "=", "100.", "*", "correct_ncm", "/", "total", "\n", "\n", "return", "[", "cnn_acc", ",", "icarl_acc", ",", "ncm_acc", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval_AMR_LF.get_ref_features": [[25, 28], ["None"], "function", ["None"], ["def", "get_ref_features", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "    ", "global", "ref_features", "\n", "ref_features", "=", "inputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval_AMR_LF.get_cur_features": [[29, 32], ["None"], "function", ["None"], ["", "def", "get_cur_features", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "    ", "global", "cur_features", "\n", "cur_features", "=", "inputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval_AMR_LF.get_old_scores_before_scale": [[33, 36], ["None"], "function", ["None"], ["", "def", "get_old_scores_before_scale", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "    ", "global", "old_scores", "\n", "old_scores", "=", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval_AMR_LF.get_new_scores_before_scale": [[37, 40], ["None"], "function", ["None"], ["", "def", "get_new_scores_before_scale", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "    ", "global", "new_scores", "\n", "new_scores", "=", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.lywang3081_MRDC.utils_incremental.incremental_train_and_eval_AMR_LF.incremental_train_and_eval_AMR_LF": [[41, 183], ["range", "torch.device", "torch.device", "torch.device", "torch.device", "ref_model.eval", "ref_model.fc.register_forward_hook", "tg_model.fc.register_forward_hook", "tg_model.fc.fc1.register_forward_hook", "tg_model.fc.fc2.register_forward_hook", "tg_model.train", "tg_lr_scheduler.step", "print", "print", "enumerate", "tg_model.eval", "print", "print", "ref_model.fc.register_forward_hook.remove", "tg_model.fc.register_forward_hook.remove", "tg_model.fc.fc1.register_forward_hook.remove", "tg_model.fc.fc2.register_forward_hook.remove", "tg_lr_scheduler.get_lr", "tg_optimizer.zero_grad", "tg_model", "loss.backward", "tg_optimizer.step", "loss.item", "tg_model.max", "targets.size", "predicted.eq().sum().item", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "inputs.to", "targets.to", "ref_model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "gt_index.scatter().ge.scatter().ge", "torch.cat.masked_select", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "none_gt_index.scatter().le.scatter().le", "torch.cat.masked_select().reshape", "targets.lt", "torch.nonzero().size", "torch.nonzero().size", "torch.nonzero().size", "torch.nonzero().size", "loss1.item", "loss2.item", "torch.zeros().to.item", "tg_model", "loss.item", "tg_model.max", "targets.size", "predicted.eq().sum().item", "len", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.cat.size", "tg_model.size", "outputs_bs.masked_select().reshape.topk", "gt_scores[].view().repeat", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "predicted.eq().sum", "len", "len", "inputs.to", "targets.to", "torch.CrossEntropyLoss", "torch.CosineEmbeddingLoss", "ref_features.detach", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "gt_index.scatter().ge.scatter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "none_gt_index.scatter().le.scatter", "torch.cat.masked_select", "torch.cat.size", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "gt_scores[].view().repeat.size", "hard_scores.size", "gt_scores[].view().repeat.size", "predicted.eq().sum", "torch.cat.size", "targets.view", "torch.cat.size", "targets.view", "tg_model.size", "gt_scores[].view", "torch.MarginRankingLoss", "gt_scores[].view().repeat.view", "hard_scores.view", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "predicted.eq", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "predicted.eq", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.lywang3081_MRDC.utils_imagenet.train_and_eval.train"], ["", "def", "incremental_train_and_eval_AMR_LF", "(", "epochs", ",", "tg_model", ",", "ref_model", ",", "tg_optimizer", ",", "tg_lr_scheduler", ",", "trainloader", ",", "testloader", ",", "iteration", ",", "start_iteration", ",", "lamda", ",", "dist", ",", "K", ",", "lw_mr", ",", "weight_per_class", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "    ", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "#trainset.train_data = X_train.astype('uint8')", "\n", "#trainset.train_labels = Y_train", "\n", "#trainloader = torch.utils.data.DataLoader(trainset, batch_size=128,", "\n", "#    shuffle=True, num_workers=2)", "\n", "#testset.test_data = X_valid.astype('uint8')", "\n", "#testset.test_labels = Y_valid", "\n", "#testloader = torch.utils.data.DataLoader(testset, batch_size=100,", "\n", "#    shuffle=False, num_workers=2)", "\n", "#print('Max and Min of train labels: {}, {}'.format(min(Y_train), max(Y_train)))", "\n", "#print('Max and Min of valid labels: {}, {}'.format(min(Y_valid), max(Y_valid)))", "\n", "\n", "", "if", "iteration", ">", "start_iteration", ":", "\n", "        ", "ref_model", ".", "eval", "(", ")", "\n", "num_old_classes", "=", "ref_model", ".", "fc", ".", "out_features", "\n", "handle_ref_features", "=", "ref_model", ".", "fc", ".", "register_forward_hook", "(", "get_ref_features", ")", "\n", "handle_cur_features", "=", "tg_model", ".", "fc", ".", "register_forward_hook", "(", "get_cur_features", ")", "\n", "handle_old_scores_bs", "=", "tg_model", ".", "fc", ".", "fc1", ".", "register_forward_hook", "(", "get_old_scores_before_scale", ")", "\n", "handle_new_scores_bs", "=", "tg_model", ".", "fc", ".", "fc2", ".", "register_forward_hook", "(", "get_new_scores_before_scale", ")", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "#train", "\n", "        ", "tg_model", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "train_loss1", "=", "0", "\n", "train_loss2", "=", "0", "\n", "train_loss3", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "tg_lr_scheduler", ".", "step", "(", ")", "\n", "print", "(", "'\\nEpoch: %d, LR: '", "%", "epoch", ",", "end", "=", "''", ")", "\n", "print", "(", "tg_lr_scheduler", ".", "get_lr", "(", ")", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "tg_optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "tg_model", "(", "inputs", ")", "\n", "if", "iteration", "==", "start_iteration", ":", "\n", "                ", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "weight_per_class", ")", "(", "outputs", ",", "targets", ")", "\n", "", "else", ":", "\n", "                ", "ref_outputs", "=", "ref_model", "(", "inputs", ")", "\n", "loss1", "=", "nn", ".", "CosineEmbeddingLoss", "(", ")", "(", "cur_features", ",", "ref_features", ".", "detach", "(", ")", ",", "torch", ".", "ones", "(", "inputs", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "device", ")", ")", "*", "lamda", "\n", "loss2", "=", "nn", ".", "CrossEntropyLoss", "(", "weight_per_class", ")", "(", "outputs", ",", "targets", ")", "\n", "#################################################", "\n", "#scores before scale, [-1, 1]", "\n", "outputs_bs", "=", "torch", ".", "cat", "(", "(", "old_scores", ",", "new_scores", ")", ",", "dim", "=", "1", ")", "\n", "assert", "(", "outputs_bs", ".", "size", "(", ")", "==", "outputs", ".", "size", "(", ")", ")", "\n", "#print(\"outputs_bs:\", outputs_bs.size(), outputs_bs)", "\n", "#print(\"targets:\", targets.size(), targets)", "\n", "#get groud truth scores", "\n", "gt_index", "=", "torch", ".", "zeros", "(", "outputs_bs", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "gt_index", "=", "gt_index", ".", "scatter", "(", "1", ",", "targets", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", ".", "ge", "(", "0.5", ")", "\n", "gt_scores", "=", "outputs_bs", ".", "masked_select", "(", "gt_index", ")", "\n", "#print(\"gt_index:\", gt_index.size(), gt_index)", "\n", "#print(\"gt_scores:\", gt_scores.size(), gt_scores)", "\n", "#get top-K scores on none gt classes", "\n", "none_gt_index", "=", "torch", ".", "zeros", "(", "outputs_bs", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "none_gt_index", "=", "none_gt_index", ".", "scatter", "(", "1", ",", "targets", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", ".", "le", "(", "0.5", ")", "\n", "none_gt_scores", "=", "outputs_bs", ".", "masked_select", "(", "none_gt_index", ")", ".", "reshape", "(", "(", "outputs_bs", ".", "size", "(", "0", ")", ",", "outputs", ".", "size", "(", "1", ")", "-", "1", ")", ")", "\n", "#print(\"none_gt_index:\", none_gt_index.size(), none_gt_index)", "\n", "#print(\"none_gt_scores:\", none_gt_scores.size(), none_gt_scores)", "\n", "hard_scores", "=", "none_gt_scores", ".", "topk", "(", "K", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "#print(\"hard_scores:\", hard_scores.size(), hard_scores)", "\n", "#the index of hard samples, i.e., samples of old classes", "\n", "hard_index", "=", "targets", ".", "lt", "(", "num_old_classes", ")", "\n", "hard_num", "=", "torch", ".", "nonzero", "(", "hard_index", ")", ".", "size", "(", "0", ")", "\n", "#print(\"hard examples size: \", hard_num)", "\n", "if", "hard_num", ">", "0", ":", "\n", "                    ", "gt_scores", "=", "gt_scores", "[", "hard_index", "]", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "K", ")", "\n", "hard_scores", "=", "hard_scores", "[", "hard_index", "]", "\n", "assert", "(", "gt_scores", ".", "size", "(", ")", "==", "hard_scores", ".", "size", "(", ")", ")", "\n", "assert", "(", "gt_scores", ".", "size", "(", "0", ")", "==", "hard_num", ")", "\n", "#print(\"hard example gt scores: \", gt_scores.size(), gt_scores)", "\n", "#print(\"hard example max novel scores: \", hard_scores.size(), hard_scores)", "\n", "loss3", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "dist", ")", "(", "gt_scores", ".", "view", "(", "-", "1", ",", "1", ")", ",", "hard_scores", ".", "view", "(", "-", "1", ",", "1", ")", ",", "torch", ".", "ones", "(", "hard_num", "*", "K", ")", ".", "to", "(", "device", ")", ")", "*", "lw_mr", "\n", "", "else", ":", "\n", "                    ", "loss3", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "#################################################", "\n", "", "loss", "=", "loss1", "+", "loss2", "+", "loss3", "\n", "", "loss", ".", "backward", "(", ")", "\n", "tg_optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "if", "iteration", ">", "start_iteration", ":", "\n", "                ", "train_loss1", "+=", "loss1", ".", "item", "(", ")", "\n", "train_loss2", "+=", "loss2", ".", "item", "(", ")", "\n", "train_loss3", "+=", "loss3", ".", "item", "(", ")", "\n", "", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "#if iteration == 0:", "\n", "#    msg = 'Loss: %.3f | Acc: %.3f%% (%d/%d)' % \\", "\n", "#    (train_loss/(batch_idx+1), 100.*correct/total, correct, total)", "\n", "#else:", "\n", "#    msg = 'Loss1: %.3f Loss2: %.3f Loss: %.3f | Acc: %.3f%% (%d/%d)' % \\", "\n", "#    (loss1.item(), loss2.item(), train_loss/(batch_idx+1), 100.*correct/total, correct, total)", "\n", "#progress_bar(batch_idx, len(trainloader), msg)", "\n", "", "if", "iteration", "==", "start_iteration", ":", "\n", "            ", "print", "(", "'Train set: {}, Train Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "len", "(", "trainloader", ")", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Train set: {}, Train Loss1: {:.4f}, Train Loss2: {:.4f}, Train Loss3: {:.4f},\\\n                Train Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "len", "(", "trainloader", ")", ",", "train_loss1", "/", "(", "batch_idx", "+", "1", ")", ",", "train_loss2", "/", "(", "batch_idx", "+", "1", ")", ",", "train_loss3", "/", "(", "batch_idx", "+", "1", ")", ",", "\n", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "#eval", "\n", "", "tg_model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "tg_model", "(", "inputs", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "weight_per_class", ")", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "#progress_bar(batch_idx, len(testloader), 'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "#    % (test_loss/(batch_idx+1), 100.*correct/total, correct, total))", "\n", "", "", "print", "(", "'Test set: {} Test Loss: {:.4f} Acc: {:.4f}'", ".", "format", "(", "len", "(", "testloader", ")", ",", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "", "if", "iteration", ">", "start_iteration", ":", "\n", "        ", "print", "(", "\"Removing register_forward_hook\"", ")", "\n", "handle_ref_features", ".", "remove", "(", ")", "\n", "handle_cur_features", ".", "remove", "(", ")", "\n", "handle_old_scores_bs", ".", "remove", "(", ")", "\n", "handle_new_scores_bs", ".", "remove", "(", ")", "\n", "", "return", "tg_model", "", "", ""]]}