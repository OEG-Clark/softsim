{"home.repos.pwc.inspect_result.lzhangbj_DualVar.None.pretrain.DistLogger.__init__": [[80, 84], ["utils.logging.get_root_logger", "utils.logging.get_root_logger", "utils.logging.get_root_logger"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.logging.get_root_logger", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.logging.get_root_logger", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.logging.get_root_logger"], ["    ", "def", "__init__", "(", "self", ",", "log_file", ",", "print", "=", "True", ")", ":", "\n", "        ", "self", ".", "print", "=", "print", "\n", "if", "print", ":", "\n", "            ", "self", ".", "logger", "=", "get_root_logger", "(", "log_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.pretrain.DistLogger.info": [[85, 88], ["pretrain.DistLogger.logger.info"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info"], ["", "", "def", "info", "(", "self", ",", "content", ")", ":", "\n", "        ", "if", "self", ".", "print", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.pretrain.count_parameters": [[40, 42], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.pretrain.get_flop_stats": [[43, 60], ["flop_count", "sum", "torch.rand().cuda().float", "torch.rand().cuda().float", "torch.rand().cuda().float", "torch.rand().cuda().float", "torch.rand().cuda().float", "torch.rand().cuda().float", "torch.rand().cuda().float", "gflop_dict.values", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "function", ["None"], ["", "def", "get_flop_stats", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    Compute the gflops for the current model given the config.\n    Args:\n        model (model): model to compute the flop counts.\n        cfg (CfgNode): configs. Details can be found in\n            slowfast/config/defaults.py\n        is_train (bool): if True, compute flops for training. Otherwise,\n            compute flops for testing.\n    Returns:\n        float: the total number of gflops of the given model.\n    \"\"\"", "\n", "from", "fvcore", ".", "nn", ".", "flop_count", "import", "flop_count", "\n", "inputs", "=", "(", "torch", ".", "rand", "(", "1", ",", "2", ",", "3", ",", "16", ",", "112", ",", "112", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", ",", ")", "\n", "gflop_dict", ",", "_", "=", "flop_count", "(", "model", ",", "inputs", ")", "\n", "gflops", "=", "sum", "(", "gflop_dict", ".", "values", "(", ")", ")", "\n", "return", "gflops", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.pretrain.get_model": [[61, 78], ["MoCo_Naked", "MoCo_TimeSeriesV4", "SimCLR_Naked", "SimCLR_TimeSeriesV4"], "function", ["None"], ["", "def", "get_model", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "model", "==", "'moco_naked'", ":", "\n", "        ", "model", "=", "MoCo_Naked", "(", "args", ".", "net", ",", "args", ".", "moco_dim", ",", "args", ".", "moco_k", ",", "args", ".", "moco_m", ",", "args", ".", "moco_t", ",", "args", ".", "distributed", ")", "\n", "", "elif", "args", ".", "model", "==", "'moco_timeseriesv4'", ":", "\n", "        ", "model", "=", "MoCo_TimeSeriesV4", "(", "args", ".", "net", ",", "args", ".", "moco_dim", ",", "args", ".", "moco_k", ",", "args", ".", "moco_m", ",", "args", ".", "moco_t", ",", "args", ".", "distributed", ",", "\n", "n_series", "=", "args", ".", "n_series", ",", "series_dim", "=", "args", ".", "series_dim", ",", "\n", "series_T", "=", "args", ".", "series_T", ",", "aligned_T", "=", "args", ".", "aligned_T", ",", "mode", "=", "args", ".", "mode", ",", "args", "=", "args", ")", "\n", "", "elif", "args", ".", "model", "==", "'simclr_naked'", ":", "\n", "        ", "model", "=", "SimCLR_Naked", "(", "args", ".", "net", ",", "args", ".", "moco_dim", ",", "args", ".", "moco_t", ",", "args", ".", "distributed", ")", "\n", "", "elif", "args", ".", "model", "==", "'simclr_timeseriesv4'", ":", "\n", "        ", "model", "=", "SimCLR_TimeSeriesV4", "(", "args", ".", "net", ",", "args", ".", "moco_dim", ",", "args", ".", "moco_t", ",", "args", ".", "distributed", ",", "\n", "n_series", "=", "args", ".", "n_series", ",", "series_dim", "=", "args", ".", "series_dim", ",", "\n", "series_T", "=", "args", ".", "series_T", ",", "aligned_T", "=", "args", ".", "aligned_T", ",", "mode", "=", "args", ".", "mode", ",", "args", "=", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.pretrain.parse_args": [[90, 165], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.parse_args"], ["", "", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# model", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "default", "=", "'r21d'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'simclr_timeseriesv4'", ",", "type", "=", "str", ")", "\n", "# time series model", "\n", "parser", ".", "add_argument", "(", "'--series_dim'", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--n_series'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--shufflerank_theta'", ",", "default", "=", "0.05", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--series_T'", ",", "default", "=", "0.07", ",", "type", "=", "float", ",", "\n", "help", "=", "'softmax temperature (default: 0.07)'", ")", "\n", "parser", ".", "add_argument", "(", "'--aligned_T'", ",", "default", "=", "0.07", ",", "type", "=", "float", ",", "\n", "help", "=", "'softmax temperature (default: 0.07)'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "default", "=", "'clip-sr-tc'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'clip-sr-tc'", ",", "'clip-sr'", "]", ")", "\n", "# moco specific configs:", "\n", "parser", ".", "add_argument", "(", "'--moco-dim'", ",", "default", "=", "128", ",", "type", "=", "int", ",", "\n", "help", "=", "'feature dimension (default: 128)'", ")", "\n", "parser", ".", "add_argument", "(", "'--moco-k'", ",", "default", "=", "2048", ",", "type", "=", "int", ",", "\n", "help", "=", "'queue size; number of negative keys (default: 65536)'", ")", "\n", "parser", ".", "add_argument", "(", "'--moco-m'", ",", "default", "=", "0.999", ",", "type", "=", "float", ",", "\n", "help", "=", "'moco momentum of updating key encoder (default: 0.999)'", ")", "\n", "parser", ".", "add_argument", "(", "'--moco-t'", ",", "default", "=", "0.07", ",", "type", "=", "float", ",", "\n", "help", "=", "'softmax temperature (default: 0.07)'", ")", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'ucf101-2clip-stage-prototype'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--seq_len'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "help", "=", "'number of frames in each video block'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_seq'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'number of video blocks'", ")", "\n", "parser", ".", "add_argument", "(", "'--ds'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'frame down sampling rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_dim'", ",", "default", "=", "112", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-j'", ",", "'--workers'", ",", "default", "=", "16", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "# augmentation", "\n", "parser", ".", "add_argument", "(", "\"--aug_temp_consist\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--aug_series\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--rand_flip\"", ",", "action", "=", "'store_true'", ")", "\n", "# optimizer", "\n", "parser", ".", "add_argument", "(", "'--optim'", ",", "default", "=", "'sgd'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "0.03", ",", "type", "=", "float", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "default", "=", "5e-4", ",", "type", "=", "float", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "200", ",", "type", "=", "int", ",", "help", "=", "'number of total epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'manual epoch number (useful on restarts)'", ")", "\n", "parser", ".", "add_argument", "(", "'--schedule'", ",", "default", "=", "[", "120", ",", "160", "]", ",", "nargs", "=", "'*'", ",", "type", "=", "int", ",", "\n", "help", "=", "'learning rate schedule (when to drop lr by 10x)'", ")", "\n", "# log", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "default", "=", "20", ",", "type", "=", "int", ",", "help", "=", "'frequency of printing output during training'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_freq'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'frequency of eval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'frequency of saving'", ")", "\n", "# mode", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'path of model to resume'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'path of pretrained model'", ")", "\n", "# exp save directory", "\n", "parser", ".", "add_argument", "(", "'--prefix'", ",", "default", "=", "'pretrain'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--name_prefix'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "# parallel configs:", "\n", "parser", ".", "add_argument", "(", "'--world-size'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of nodes for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--rank'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'node rank for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist-url'", ",", "default", "=", "'env://'", ",", "type", "=", "str", ",", "\n", "help", "=", "'url used to set up distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist-backend'", ",", "default", "=", "'nccl'", ",", "type", "=", "str", ",", "\n", "help", "=", "'distributed backend'", ")", "\n", "parser", ".", "add_argument", "(", "'--multiprocessing-distributed'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use multi-processing distributed training to launch '", "\n", "'N processes per node, which has N GPUs. This is the '", "\n", "'fastest way to use PyTorch for either single node or '", "\n", "'multi node data parallel training'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'node rank for distributed training'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.pretrain.main": [[167, 199], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "int", "torch.spawn", "pretrain.main_worker", "int"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.main_worker"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "try", ":", "\n", "            ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "", "except", ":", "\n", "            ", "args", ".", "world_size", "=", "1", "\n", "\n", "", "", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "args", ".", "num_gpu", "=", "args", ".", "world_size", "if", "args", ".", "distributed", "else", "1", "\n", "args", ".", "real_batch_size", "=", "args", ".", "batch_size", "*", "args", ".", "num_gpu", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "assert", "args", ".", "local_rank", "==", "-", "1", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.pretrain.main_worker": [[201, 362], ["pretrain.set_path", "pretrain.DistLogger", "args.logger.info", "pretrain.get_model", "torch.nn.parallel.DistributedDataParallel.named_parameters", "args.logger.info", "torch.nn.parallel.DistributedDataParallel.named_parameters", "args.logger.info", "torch.SGD", "torch.CrossEntropyLoss().cuda", "pretrain.get_transform", "pretrain.get_dataloader", "torchvision.transforms.Compose", "args.logger.info", "torch.MultiStepLR", "range", "args.logger.info", "time.sleep", "sys.exit", "torch.init_process_group", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "print", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.cuda", "params.append", "pretrain.get_data", "os.path.isfile", "tensorboardX.SummaryWriter", "utils.PlotterThread", "pretrain.train_one_epoch", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "args.logger.info", "torch.CrossEntropyLoss", "utils.Normalize", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "args.logger.info", "args.logger.info", "os.path.isfile", "args.logger.info", "get_dataloader.sampler.set_epoch", "int", "model_without_ddp.load_state_dict", "optim.SGD.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "args.logger.info", "args.logger.info", "os.path.join", "max", "model_without_ddp.state_dict", "utils.utils.save_checkpoint", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "int", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "args.logger.info", "utils.utils.neq_load_customized", "args.logger.info", "model_without_ddp.load_state_dict", "optim.SGD.state_dict", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "utils.utils.neq_load_customized", "os.path.join"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.set_path", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.pretrain.get_model", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.get_transform", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.get_dataloader", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.get_data", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.train_one_epoch", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.save_checkpoint", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.neq_load_customized", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.neq_load_customized"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "best_acc", "=", "0", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "# torch.distributed.launch", "\n", "            ", "args", ".", "rank", "=", "args", ".", "local_rank", "\n", "args", ".", "gpu", "=", "args", ".", "local_rank", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "# slurm scheduler", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "elif", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "                ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ")", "\n", "# world_size=args.world_size, rank=args.rank)", "\n", "args", ".", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "print", "(", "args", ".", "rank", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "rank", "=", "0", "\n", "\n", "", "args", ".", "print", "=", "args", ".", "gpu", "==", "0", "or", "not", "args", ".", "distributed", "\n", "# suppress printing if not master", "\n", "if", "args", ".", "rank", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "", "args", ".", "img_path", ",", "args", ".", "model_path", ",", "args", ".", "exp_path", ",", "args", ".", "log_file", "=", "set_path", "(", "args", ")", "\n", "args", ".", "logger", "=", "DistLogger", "(", "log_file", "=", "args", ".", "log_file", ",", "print", "=", "args", ".", "print", ")", "\n", "# args.logger.info('Re-write num_seq to %d' % args.num_seq)", "\n", "\n", "### model ###", "\n", "args", ".", "logger", ".", "info", "(", "\"=> creating {} model with '{}' backbone\"", ".", "format", "(", "args", ".", "model", ",", "args", ".", "net", ")", ")", "\n", "model", "=", "get_model", "(", "args", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "model", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ")", "\n", "model_without_ddp", "=", "model", ".", "module", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "model_without_ddp", "=", "model", ".", "module", "\n", "", "", "else", ":", "\n", "        ", "if", "args", ".", "gpu", "is", "None", ":", "\n", "            ", "args", ".", "gpu", "=", "0", "\n", "", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "model_without_ddp", "=", "model", "\n", "\n", "### optimizer ###", "\n", "", "params", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "params", ".", "append", "(", "{", "'params'", ":", "param", "}", ")", "\n", "\n", "", "args", ".", "logger", ".", "info", "(", "'\\n===========Check Grad============'", ")", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "args", ".", "logger", ".", "info", "(", "(", "name", ",", "param", ".", "requires_grad", ")", ")", "\n", "", "", "args", ".", "logger", ".", "info", "(", "'=================================\\n'", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wd", ",", "momentum", "=", "0.9", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "args", ".", "iteration", "=", "1", "\n", "\n", "### data ###", "\n", "transform_train", "=", "get_transform", "(", "'train'", ",", "args", ")", "\n", "train_loader", "=", "get_dataloader", "(", "get_data", "(", "transform_train", ",", "'train'", ",", "args", ")", ",", "'train'", ",", "args", ")", "\n", "transform_train_cuda", "=", "transforms", ".", "Compose", "(", "[", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "channel", "=", "1", ")", "]", ")", "\n", "\n", "args", ".", "logger", ".", "info", "(", "'==================================='", ")", "\n", "\n", "### restart training ###", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "args", ".", "iteration", "=", "checkpoint", "[", "'iteration'", "]", "\n", "best_acc", "=", "checkpoint", "[", "'best_acc'", "]", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "try", ":", "\n", "                ", "model_without_ddp", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "except", ":", "\n", "                ", "args", ".", "logger", ".", "info", "(", "'[WARNING] resuming training with different weights'", ")", "\n", "neq_load_customized", "(", "model_without_ddp", ",", "state_dict", ",", "verbose", "=", "True", ",", "args", "=", "args", ")", "\n", "", "args", ".", "logger", ".", "info", "(", "\"=> load resumed checkpoint '{}' (epoch {})\"", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "try", ":", "\n", "                ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "", "except", ":", "\n", "                ", "args", ".", "logger", ".", "info", "(", "'[WARNING] failed to load optimizer state, initialize optimizer'", ")", "\n", "", "", "else", ":", "\n", "            ", "args", ".", "logger", ".", "info", "(", "\"[Warning] no checkpoint found at '{}', use random init\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "", "", "elif", "args", ".", "pretrain", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrain", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrain", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "try", ":", "\n", "                ", "model_without_ddp", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "except", ":", "\n", "                ", "neq_load_customized", "(", "model_without_ddp", ",", "state_dict", ",", "verbose", "=", "True", ",", "args", "=", "args", ")", "\n", "", "args", ".", "logger", ".", "info", "(", "\n", "\"=> loaded pretrained checkpoint '{}' (epoch {})\"", ".", "format", "(", "args", ".", "pretrain", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "args", ".", "logger", ".", "info", "(", "\"=> no checkpoint found at '{}', use random init\"", ".", "format", "(", "args", ".", "pretrain", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "args", ".", "logger", ".", "info", "(", "\"=> train from scratch\"", ")", "\n", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# tensorboard plot tools", "\n", "if", "args", ".", "print", ":", "\n", "        ", "writer_train", "=", "SummaryWriter", "(", "logdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "img_path", ",", "'pretrain'", ")", ")", "\n", "args", ".", "train_plotter", "=", "TB", ".", "PlotterThread", "(", "writer_train", ")", "\n", "\n", "", "scheduler", "=", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "args", ".", "schedule", ",", "gamma", "=", "0.1", ",", "last_epoch", "=", "args", ".", "start_epoch", "-", "1", ")", "\n", "\n", "assert", "args", ".", "save_freq", "%", "args", ".", "eval_freq", "==", "0", "\n", "### main loop ###", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "# 5 warmup epochs", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_loader", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "", "_", ",", "train_acc", "=", "train_one_epoch", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "transform_train_cuda", ",", "\n", "epoch", ",", "args", ")", "\n", "\n", "if", "(", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_freq", "==", "0", ")", "or", "(", "epoch", "==", "args", ".", "epochs", "-", "1", ")", ":", "\n", "# save check_point on rank==0 worker", "\n", "            ", "if", "not", "args", ".", "distributed", "or", "(", "not", "args", ".", "multiprocessing_distributed", "and", "args", ".", "rank", "==", "0", ")", "or", "(", "args", ".", "multiprocessing_distributed", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "\n", "                ", "is_best", "=", "train_acc", ">", "best_acc", "\n", "best_acc", "=", "max", "(", "train_acc", ",", "best_acc", ")", "\n", "state_dict", "=", "model_without_ddp", ".", "state_dict", "(", ")", "\n", "\n", "save_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'best_acc'", ":", "best_acc", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'iteration'", ":", "args", ".", "iteration", "}", "\n", "save_checkpoint", "(", "save_dict", ",", "is_best", ",", "gap", "=", "0", ",", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_path", ",", "'epoch%d.pth.tar'", "%", "epoch", ")", ",", "\n", "keep_all", "=", "'k400'", "in", "args", ".", "dataset", ",", "is_save", "=", "(", "(", "epoch", "+", "1", ")", "%", "args", ".", "save_freq", "==", "0", ")", ",", "save_latest", "=", "True", ")", "\n", "\n", "", "", "", "args", ".", "logger", ".", "info", "(", "'Training from ep %d to ep %d finished'", "%", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ")", "\n", "time", ".", "sleep", "(", "5", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.pretrain.train_one_epoch": [[364, 489], ["utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "collections.OrderedDict", "collections.OrderedDict", "utils.utils.ProgressMeter", "model.train", "time.time", "time.time", "tqdm.tqdm", "sum", "args.logger.info", "scheduler.step", "list", "len", "x.size", "transforms_cuda().view().transpose().contiguous", "enumerate", "utils.utils.AverageMeter.update", "tr.size", "pretrain.train_one_epoch.tr"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.update"], ["", "def", "train_one_epoch", "(", "data_loader", ",", "model", ",", "optimizer", ",", "scheduler", ",", "transforms_cuda", ",", "epoch", ",", "args", ",", "\n", "model_head", "=", "None", ",", "head_optimizer", "=", "None", ",", "head_scheduler", "=", "None", ")", ":", "\n", "    ", "batch_time_meter", "=", "AverageMeter", "(", "'Time'", ",", "':.2f'", ")", "\n", "data_time_meter", "=", "AverageMeter", "(", "'Data'", ",", "':.2f'", ")", "\n", "losses_meter", "=", "AverageMeter", "(", "'VLoss'", ",", "':.4f'", ")", "\n", "top1_meter", "=", "AverageMeter", "(", "'Vacc@1'", ",", "':.4f'", ")", "\n", "\n", "losses_meters_dict", "=", "OrderedDict", "(", ")", "\n", "losses_meters_dict", "[", "'clip'", "]", "=", "losses_meter", "\n", "acc_meters_dict", "=", "OrderedDict", "(", ")", "\n", "acc_meters_dict", "[", "'clip'", "]", "=", "top1_meter", "\n", "\n", "progress_meters_list", "=", "[", "batch_time_meter", ",", "data_time_meter", "]", "+", "list", "(", "losses_meters_dict", ".", "values", "(", ")", ")", "+", "list", "(", "acc_meters_dict", ".", "values", "(", ")", ")", "\n", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "data_loader", ")", ",", "\n", "progress_meters_list", ",", "\n", "prefix", "=", "'Epoch:[{}/{}] lr:{} '", ".", "format", "(", "epoch", ",", "args", ".", "epochs", ",", "args", ".", "lr", ")", ",", "logger", "=", "args", ".", "logger", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "def", "tr", "(", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "return", "transforms_cuda", "(", "x", ")", ".", "view", "(", "B", ",", "3", ",", "args", ".", "num_seq", "*", "args", ".", "n_proto", ",", "args", ".", "seq_len", ",", "args", ".", "img_dim", ",", "args", ".", "img_dim", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "tic", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "idx", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "data_loader", ")", ",", "total", "=", "len", "(", "data_loader", ")", ",", "disable", "=", "True", ")", ":", "\n", "        ", "data_time_meter", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "input_seq", "=", "batch", "[", "'seq'", "]", "\n", "orig_input_seq", "=", "input_seq", "\n", "\n", "B", "=", "input_seq", ".", "size", "(", "0", ")", "\n", "input_seq", "=", "tr", "(", "input_seq", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "ret", "=", "model", "(", "input_seq", ")", "\n", "loss", "=", "0", "\n", "\n", "if", "'clip_contrast_loss'", "in", "ret", ":", "\n", "            ", "output", "=", "ret", "[", "'clip_logits'", "]", "\n", "target", "=", "ret", "[", "'clip_labels'", "]", "\n", "top1", ",", "top5", "=", "calc_topk_accuracy", "(", "output", ",", "target", ",", "(", "1", ",", "5", ")", ")", "\n", "loss", "=", "ret", "[", "'clip_contrast_loss'", "]", "\n", "\n", "top1_meter", ".", "update", "(", "top1", ".", "item", "(", ")", ",", "B", ")", "\n", "losses_meter", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "B", ")", "\n", "\n", "", "keys", "=", "list", "(", "ret", ".", "keys", "(", ")", ")", "\n", "extra_loss_keys", "=", "[", "key", "for", "key", "in", "keys", "if", "'loss'", "in", "key", "and", "'clip'", "not", "in", "key", "]", "\n", "contrast_extra_loss_keys", "=", "[", "key", "for", "key", "in", "extra_loss_keys", "if", "'contrast_loss'", "in", "key", "]", "\n", "misc_extra_loss_keys", "=", "[", "key", "for", "key", "in", "extra_loss_keys", "if", "key", "not", "in", "contrast_extra_loss_keys", "]", "\n", "\n", "for", "key", "in", "contrast_extra_loss_keys", ":", "\n", "# calculate loss", "\n", "            ", "prefix", "=", "key", ".", "replace", "(", "\"_contrast_loss\"", ",", "\"\"", ")", "\n", "output", "=", "ret", "[", "f'{prefix}_logits'", "]", "\n", "target", "=", "ret", "[", "f'{prefix}_labels'", "]", "\n", "top1", "=", "calc_topk_accuracy", "(", "output", ",", "target", ",", "(", "1", ",", ")", ")", "[", "0", "]", "\n", "Loss", "=", "ret", "[", "f'{prefix}_contrast_loss'", "]", "\n", "if", "prefix", "not", "in", "losses_meters_dict", ":", "\n", "                ", "losses_meters_dict", "[", "prefix", "]", "=", "AverageMeter", "(", "f'{prefix}_loss'", ",", "':.3f'", ")", "\n", "acc_meters_dict", "[", "prefix", "]", "=", "AverageMeter", "(", "f'{prefix}_acc'", ",", "':.3f'", ")", "\n", "progress_meters_list", "=", "[", "batch_time_meter", ",", "data_time_meter", "]", "+", "list", "(", "losses_meters_dict", ".", "values", "(", ")", ")", "+", "list", "(", "acc_meters_dict", ".", "values", "(", ")", ")", "\n", "progress", ".", "meters", "=", "progress_meters_list", "\n", "", "losses_meters_dict", "[", "prefix", "]", ".", "update", "(", "Loss", ".", "item", "(", ")", ",", "B", ")", "\n", "acc_meters_dict", "[", "prefix", "]", ".", "update", "(", "top1", ".", "item", "(", ")", ",", "B", ")", "\n", "loss", "+=", "Loss", "\n", "\n", "", "for", "key", "in", "misc_extra_loss_keys", ":", "\n", "# calculate loss", "\n", "            ", "prefix", "=", "key", ".", "replace", "(", "\"_loss\"", ",", "\"\"", ")", "\n", "Loss", "=", "ret", "[", "key", "]", "\n", "if", "prefix", "not", "in", "losses_meters_dict", ":", "\n", "                ", "losses_meters_dict", "[", "prefix", "]", "=", "AverageMeter", "(", "f'{prefix}_loss'", ",", "':.3f'", ")", "\n", "progress_meters_list", "=", "[", "batch_time_meter", ",", "data_time_meter", "]", "+", "list", "(", "losses_meters_dict", ".", "values", "(", ")", ")", "+", "list", "(", "acc_meters_dict", ".", "values", "(", ")", ")", "\n", "progress", ".", "meters", "=", "progress_meters_list", "\n", "", "losses_meters_dict", "[", "prefix", "]", ".", "update", "(", "Loss", ".", "item", "(", ")", ",", "B", ")", "\n", "loss", "+=", "Loss", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "batch_time_meter", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "idx", "+", "1", ")", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "if", "args", ".", "print", ":", "\n", "# display logs", "\n", "                ", "progress", ".", "display", "(", "idx", ")", "\n", "for", "key", ",", "meter", "in", "losses_meters_dict", ".", "items", "(", ")", ":", "\n", "                    ", "args", ".", "train_plotter", ".", "add_data", "(", "f'local/{key}_loss'", ",", "meter", ".", "local_avg", ",", "\n", "args", ".", "iteration", ")", "\n", "", "for", "key", ",", "meter", "in", "acc_meters_dict", ".", "items", "(", ")", ":", "\n", "                    ", "args", ".", "train_plotter", ".", "add_data", "(", "f'local/{key}_acc'", ",", "meter", ".", "local_avg", ",", "\n", "args", ".", "iteration", ")", "\n", "", "", "", "args", ".", "iteration", "+=", "1", "\n", "\n", "", "avg_loss", "=", "sum", "(", "t", ".", "avg", "for", "t", "in", "losses_meters_dict", ".", "values", "(", ")", ")", "\n", "\n", "args", ".", "logger", ".", "info", "(", "'Epoch: [{0}/{1}]\\t'", "\n", "'T-epoch:{t:.2f}\\t'", "\n", "'Loss:{loss:.4f}'", ".", "format", "(", "epoch", ",", "args", ".", "epochs", ",", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "tic", ",", "\n", "loss", "=", "avg_loss", ")", ")", "\n", "\n", "if", "args", ".", "print", ":", "\n", "        ", "for", "key", ",", "meter", "in", "losses_meters_dict", ".", "items", "(", ")", ":", "\n", "            ", "args", ".", "train_plotter", ".", "add_data", "(", "f'global/{key}_loss'", ",", "meter", ".", "avg", ",", "\n", "epoch", ")", "\n", "", "for", "key", ",", "meter", "in", "acc_meters_dict", ".", "items", "(", ")", ":", "\n", "            ", "args", ".", "train_plotter", ".", "add_data", "(", "f'local/{key}_acc'", ",", "meter", ".", "avg", ",", "\n", "epoch", ")", "\n", "\n", "", "", "scheduler", ".", "step", "(", ")", "\n", "args", ".", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "# only return contrastive loss result", "\n", "return", "losses_meter", ".", "avg", ",", "top1_meter", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.pretrain.get_transform": [[491, 533], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "utils.MultiRandomizedTransform", "args.logger.info", "utils.Scale", "utils.RandomCrop", "utils.ToTensor", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomApply", "utils.Scale", "utils.RandomCrop", "utils.ToTensor", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomApply", "utils.Scale", "utils.RandomCrop", "utils.ToTensor", "utils.ColorJitter", "utils.GaussianBlur", "utils.ColorJitter", "utils.GaussianBlur"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info"], ["", "def", "get_transform", "(", "mode", ",", "args", ")", ":", "\n", "# null transform", "\n", "    ", "null_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "A", ".", "Scale", "(", "(", "128", ",", "171", ")", ")", ",", "\n", "A", ".", "RandomCrop", "(", "size", "=", "args", ".", "img_dim", ")", ",", "\n", "A", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "# basic transform", "\n", "base_transform_list", "=", "[", "\n", "A", ".", "Scale", "(", "(", "128", ",", "171", ")", ")", ",", "\n", "A", ".", "RandomCrop", "(", "size", "=", "args", ".", "img_dim", ")", ",", "\n", "A", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "A", ".", "ColorJitter", "(", "0.8", ",", "0.8", ",", "0.8", ",", "0.2", ",", "p", "=", "0.8", ",", "consistent", "=", "args", ".", "aug_temp_consist", ",", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "block", "=", "args", ".", "n_block", ",", "grad_consistent", "=", "args", ".", "aug_temp_grad_consist", ")", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "A", ".", "GaussianBlur", "(", "[", ".1", ",", "2.", "]", ",", "seq_len", "=", "args", ".", "seq_len", ")", "]", ",", "p", "=", "0.5", ")", "\n", "]", "\n", "base_transform", "=", "transforms", ".", "Compose", "(", "base_transform_list", ")", "\n", "\n", "# same series extra transform", "\n", "same_series_transform_list", "=", "[", "\n", "A", ".", "Scale", "(", "(", "128", ",", "171", ")", ")", ",", "\n", "A", ".", "RandomCrop", "(", "size", "=", "args", ".", "img_dim", ")", ",", "\n", "A", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "A", ".", "ColorJitter", "(", "0.8", ",", "0.8", ",", "0.8", ",", "0.2", ",", "p", "=", "0.8", ",", "consistent", "=", "args", ".", "aug_temp_consist", ",", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "block", "=", "args", ".", "n_block", ",", "grad_consistent", "=", "args", ".", "aug_temp_grad_consist", ")", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "A", ".", "GaussianBlur", "(", "[", ".1", ",", "2.", "]", ",", "seq_len", "=", "args", ".", "seq_len", ")", "]", ",", "p", "=", "0.5", ")", "\n", "]", "\n", "same_series_transform", "=", "transforms", ".", "Compose", "(", "same_series_transform_list", ")", "\n", "\n", "weights", "=", "[", "\n", "[", "0.2", ",", "0.8", ",", "0", "]", ",", "\n", "[", "0", ",", "1.0", ",", "0", "]", ",", "\n", "[", "0", ",", "0.", ",", "1.0", "]", "\n", "]", "\n", "transform", "=", "A", ".", "MultiRandomizedTransform", "(", "[", "null_transform", ",", "base_transform", ",", "same_series_transform", "]", ",", "args", ".", "seq_len", ",", "\n", "weights", "=", "weights", ")", "\n", "\n", "args", ".", "logger", ".", "info", "(", "f\"finishing {mode}'s transform\"", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.pretrain.get_data": [[535, 548], ["args.logger.info", "dataset.local_dataset.UCF101LMDB_2CLIP_Stage_Prototype", "dataset.local_dataset.K400LMDB_2CLIP_Stage_Prototype", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info"], ["", "def", "get_data", "(", "transform", ",", "mode", ",", "args", ")", ":", "\n", "    ", "args", ".", "logger", ".", "info", "(", "'Loading data for \"%s\" mode'", "%", "mode", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'ucf101-2clip-stage-prototype'", ":", "\n", "        ", "dataset", "=", "UCF101LMDB_2CLIP_Stage_Prototype", "(", "aug_series", "=", "args", ".", "aug_series", ",", "rand_flip", "=", "args", ".", "rand_flip", ",", "mode", "=", "mode", ",", "transform", "=", "transform", ",", "\n", "num_frames", "=", "args", ".", "seq_len", ",", "ds", "=", "args", ".", "ds", ",", "return_label", "=", "True", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'k400-2clip-stage-prototype'", ":", "\n", "        ", "dataset", "=", "K400LMDB_2CLIP_Stage_Prototype", "(", "aug_series", "=", "args", ".", "aug_series", ",", "rand_flip", "=", "args", ".", "rand_flip", ",", "mode", "=", "mode", ",", "transform", "=", "transform", ",", "\n", "num_frames", "=", "args", ".", "seq_len", ",", "ds", "=", "args", ".", "ds", ",", "return_label", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.pretrain.get_dataloader": [[550, 565], ["args.logger.info", "args.logger.info", "torch.utils.data.distributed.DistributedSampler", "utils.utils.FastDataLoader", "utils.utils.FastDataLoader", "len"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info"], ["", "def", "get_dataloader", "(", "dataset", ",", "mode", ",", "args", ")", ":", "\n", "    ", "args", ".", "logger", ".", "info", "(", "'Creating data loaders for \"%s\" mode'", "%", "mode", ")", "\n", "train_sampler", "=", "data", ".", "distributed", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "True", ")", "if", "args", ".", "distributed", "else", "None", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "data_loader", "=", "FastDataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", "and", "not", "args", ".", "visualize", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "        ", "data_loader", "=", "FastDataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "8", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "8", ",", "pin_memory", "=", "True", ",", "sampler", "=", "None", ",", "drop_last", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "args", ".", "logger", ".", "info", "(", "'\"%s\" dataset has size: %d'", "%", "(", "mode", ",", "len", "(", "dataset", ")", ")", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.pretrain.set_path": [[567, 592], ["os.path.join", "os.path.join", "os.path.join", "print", "os.path.dirname", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.dirname", "os.path.dirname", "os.makedirs", "os.makedirs", "os.path.dirname"], "function", ["None"], ["", "def", "set_path", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "resume", ":", "\n", "        ", "exp_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "resume", ")", ")", "\n", "", "elif", "args", ".", "test", ":", "\n", "        ", "exp_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "test", ")", ")", "\n", "", "else", ":", "\n", "        ", "exp_path", "=", "'log/{args.prefix}/pretrain/{args.name_prefix}'", ".", "format", "(", "\n", "args", "=", "args", ")", "\n", "", "img_path", "=", "os", ".", "path", ".", "join", "(", "exp_path", ",", "'img'", ")", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "exp_path", ",", "'model'", ")", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "exp_path", ",", "'log'", ")", "\n", "\n", "print", "(", "f\"<<<<<<< exp_path {exp_path}\"", ")", "\n", "\n", "if", "args", ".", "visualize", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "exp_path", ",", "'vis_img'", ")", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "exp_path", ",", "'vis_log'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "img_path", ")", ":", "\n", "        ", "if", "args", ".", "rank", "==", "0", "or", "not", "args", ".", "distributed", ":", "\n", "            ", "os", ".", "makedirs", "(", "img_path", ")", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "        ", "if", "args", ".", "rank", "==", "0", "or", "not", "args", ".", "distributed", ":", "\n", "            ", "os", ".", "makedirs", "(", "model_path", ")", "\n", "", "", "return", "img_path", ",", "model_path", ",", "exp_path", ",", "log_file", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.__init__": [[142, 146], ["utils.logging.get_root_logger", "utils.logging.get_root_logger", "utils.logging.get_root_logger"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.logging.get_root_logger", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.logging.get_root_logger", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.logging.get_root_logger"], ["    ", "def", "__init__", "(", "self", ",", "log_file", ",", "print", "=", "True", ")", ":", "\n", "        ", "self", ".", "print", "=", "print", "\n", "if", "print", ":", "\n", "            ", "self", ".", "logger", "=", "get_root_logger", "(", "log_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info": [[147, 150], ["classifier.DistLogger.logger.info"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info"], ["", "", "def", "info", "(", "self", ",", "content", ")", ":", "\n", "        ", "if", "self", ".", "print", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.parse_args": [[38, 109], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# model", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "default", "=", "'myrealr21d'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'linclr'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--num_fc'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of fc'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_what'", ",", "default", "=", "'ft'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--use_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dropout'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_norm'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dropout'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_bn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dropout'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "default", "=", "1.", ",", "type", "=", "float", ",", "help", "=", "'dropout'", ")", "\n", "parser", ".", "add_argument", "(", "'--ft-mode'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use ft mode'", ")", "\n", "parser", ".", "add_argument", "(", "'--with_color_jitter'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use color jittering'", ")", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'ucf101'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--which_split'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--seq_len'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "help", "=", "'number of frames in each video block'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_seq'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of video blocks'", ")", "\n", "parser", ".", "add_argument", "(", "'--ds'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'frame down sampling rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "help", "=", "'batch size per GPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_resize_dim'", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--img_dim'", ",", "default", "=", "112", ",", "type", "=", "int", ")", "\n", "# optimizer", "\n", "parser", ".", "add_argument", "(", "'--optim'", ",", "default", "=", "'sgd'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "5e-2", ",", "type", "=", "float", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--schedule'", ",", "default", "=", "[", "10", ",", "20", ",", "30", ",", "40", "]", ",", "nargs", "=", "'*'", ",", "type", "=", "int", ",", "\n", "help", "=", "'learning rate schedule (when to drop lr by 10x)'", ")", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "help", "=", "'number of total epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'manual epoch number (useful on restarts)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "# log", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'frequency of printing output during training'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_freq'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "# exp settings", "\n", "parser", ".", "add_argument", "(", "'--prefix'", ",", "default", "=", "'linclr'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--name_prefix'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'-j'", ",", "'--workers'", ",", "default", "=", "8", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--dirname'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "'dirname for feature'", ")", "\n", "# mode", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'path of model to resume'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'path of pretrained model'", ")", "\n", "parser", ".", "add_argument", "(", "'--test'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'path of model to load and pause'", ")", "\n", "parser", ".", "add_argument", "(", "'--retrieval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'path of model to ucf retrieval'", ")", "\n", "parser", ".", "add_argument", "(", "'--center_crop'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--five_crop'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--ten_crop'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--temporal_ten_clip'", ",", "action", "=", "'store_true'", ")", "\n", "# parallel configs:", "\n", "parser", ".", "add_argument", "(", "'--world-size'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of nodes for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--rank'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'node rank for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist-url'", ",", "default", "=", "'env://'", ",", "type", "=", "str", ",", "\n", "help", "=", "'url used to set up distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist-backend'", ",", "default", "=", "'nccl'", ",", "type", "=", "str", ",", "\n", "help", "=", "'distributed backend'", ")", "\n", "parser", ".", "add_argument", "(", "'--multiprocessing-distributed'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use multi-processing distributed training to launch '", "\n", "'N processes per node, which has N GPUs. This is the '", "\n", "'fastest way to use PyTorch for either single node or '", "\n", "'multi node data parallel training'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'node rank for distributed training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--aug_crop'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--rand_flip'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.main": [[110, 139], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "int", "torch.spawn", "classifier.main_worker", "int"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.main_worker"], ["", "def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "try", ":", "\n", "            ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "", "except", ":", "\n", "            ", "args", ".", "world_size", "=", "1", "\n", "\n", "", "", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "args", ".", "num_gpu", "=", "args", ".", "world_size", "if", "args", ".", "distributed", "else", "1", "\n", "args", ".", "real_batch_size", "=", "args", ".", "batch_size", "*", "args", ".", "num_gpu", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "assert", "args", ".", "local_rank", "==", "-", "1", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.main_worker": [[152, 420], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "print", "classifier.set_path", "classifier.DistLogger", "args.logger.info", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "args.logger.info", "torch.CrossEntropyLoss", "classifier.get_transform", "classifier.get_dataloader", "classifier.get_transform", "classifier.get_dataloader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "args.logger.info", "tensorboardX.SummaryWriter", "tensorboardX.SummaryWriter", "utils.PlotterThread", "utils.PlotterThread", "args.logger.info", "range", "args.logger.info", "time.sleep", "sys.exit", "torch.init_process_group", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "print", "model.classifier.LinearClassifier", "args.logger.info", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.cuda", "args.logger.info", "torch.nn.parallel.DistributedDataParallel.named_parameters", "args.logger.info", "torch.nn.parallel.DistributedDataParallel.named_parameters", "args.logger.info", "torch.nn.parallel.DistributedDataParallel.named_parameters", "args.logger.info", "torch.Adam", "os.path.isfile", "args.logger.info", "torchvision.transforms.Compose", "sys.exit", "classifier.get_data", "classifier.get_data", "os.path.isfile", "numpy.random.seed", "random.seed", "classifier.adjust_learning_rate", "classifier.train_one_epoch", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "params.append", "torch.SGD", "args.logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "args.logger.info", "args.logger.info", "classifier.test_retrieval", "utils.Normalize", "utils.Normalize", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "args.logger.info", "args.logger.info", "os.path.isfile", "args.logger.info", "os.path.join", "os.path.join", "classifier.validate", "max", "model_without_dp.state_dict", "utils.utils.save_checkpoint", "int", "params.append", "args.logger.info", "model_without_dp.state_dict.items", "model_without_dp.load_state_dict", "utils.Normalize", "classifier.get_transform", "classifier.get_data", "classifier.test_10crop", "model_without_dp.load_state_dict", "optim.SGD.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model_without_dp.state_dict.items", "args.logger.info", "args.logger.info", "optim.SGD.state_dict", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "int", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "k.replace().replace.replace().replace", "utils.utils.neq_load_customized", "classifier.get_transform", "classifier.get_data", "classifier.temporal_test_10clip", "args.logger.info", "utils.utils.neq_load_customized", "args.logger.info", "k.replace().replace.replace().replace", "model_without_dp.load_state_dict", "os.path.join", "utils.utils.neq_load_customized", "vars().items", "k.replace().replace.replace", "vars().items", "k.replace().replace.replace", "str", "str", "str", "str", "vars", "vars"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.set_path", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.get_transform", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.get_dataloader", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.get_transform", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.get_dataloader", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.get_data", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.get_data", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.adjust_learning_rate", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.train_one_epoch", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.test_retrieval", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.validate", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.save_checkpoint", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.get_transform", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.get_data", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.test_10crop", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.neq_load_customized", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.get_transform", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.get_data", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.temporal_test_10clip", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.neq_load_customized", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.neq_load_customized"], ["", "", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "best_acc", "=", "0", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "random", ".", "seed", "(", "0", ")", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "# torch.distributed.launch", "\n", "            ", "args", ".", "rank", "=", "args", ".", "local_rank", "\n", "args", ".", "gpu", "=", "args", ".", "local_rank", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "# slurm scheduler", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "elif", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "                ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ")", "\n", "args", ".", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "print", "(", "args", ".", "rank", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "rank", "=", "0", "\n", "\n", "", "args", ".", "print", "=", "args", ".", "gpu", "==", "0", "or", "not", "args", ".", "distributed", "\n", "print", "(", "args", ".", "print", ")", "\n", "# suppress printing if not master", "\n", "if", "args", ".", "rank", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "", "args", ".", "img_path", ",", "args", ".", "model_path", ",", "args", ".", "exp_path", ",", "args", ".", "log_file", "=", "set_path", "(", "args", ")", "\n", "args", ".", "logger", "=", "DistLogger", "(", "log_file", "=", "args", ".", "log_file", ",", "print", "=", "args", ".", "print", ")", "\n", "\n", "args", ".", "logger", ".", "info", "(", "'=> Effective BatchSize = %d'", "%", "args", ".", "real_batch_size", ")", "\n", "\n", "### classifier model ###", "\n", "num_class_dict", "=", "{", "'ucf101'", ":", "101", ",", "'ucf101-10clip'", ":", "101", ",", "'hmdb51'", ":", "51", ",", "'hmdb51-10clip'", ":", "51", "}", "\n", "args", ".", "num_class", "=", "num_class_dict", "[", "args", ".", "dataset", "]", "\n", "\n", "assert", "args", ".", "save_freq", "%", "args", ".", "eval_freq", "==", "0", ",", "\"save freq must be divided by eval freq \"", "\n", "\n", "# if args.ft_mode:", "\n", "#     assert not args.use_bn and not args.use_dropout and not args.use_norm", "\n", "\n", "if", "args", ".", "model", "==", "'linclr'", ":", "\n", "        ", "model", "=", "LinearClassifier", "(", "\n", "network", "=", "args", ".", "net", ",", "\n", "num_class", "=", "args", ".", "num_class", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "use_dropout", "=", "args", ".", "use_dropout", ",", "\n", "use_final_bn", "=", "args", ".", "use_bn", ",", "\n", "use_l2_norm", "=", "args", ".", "use_norm", ")", "\n", "message", "=", "'Classifier to %d classes with %s backbone;'", "%", "(", "args", ".", "num_class", ",", "args", ".", "net", ")", "\n", "if", "args", ".", "use_norm", ":", "message", "+=", "' + L2Norm'", "\n", "if", "args", ".", "use_bn", ":", "message", "+=", "' + final BN'", "\n", "if", "args", ".", "use_dropout", ":", "message", "+=", "' + dropout %f'", "%", "args", ".", "dropout", "\n", "\n", "args", ".", "logger", ".", "info", "(", "message", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "model", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ")", "\n", "model_without_dp", "=", "model", ".", "module", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "model_without_dp", "=", "model", ".", "module", "\n", "", "", "else", ":", "\n", "        ", "if", "args", ".", "gpu", "is", "None", ":", "\n", "            ", "args", ".", "gpu", "=", "0", "\n", "", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "model_without_dp", "=", "model", "\n", "", "device", "=", "torch", ".", "device", "(", "f'cuda:{args.gpu}'", ")", "\n", "\n", "### optimizer ###", "\n", "if", "args", ".", "train_what", "==", "'last'", ":", "\n", "        ", "args", ".", "logger", ".", "info", "(", "'=> [optimizer] only train last layer'", ")", "\n", "params", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'backbone'", "in", "name", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "else", ":", "\n", "                ", "params", ".", "append", "(", "{", "'params'", ":", "param", "}", ")", "\n", "", "", "", "else", ":", "# train all", "\n", "        ", "params", "=", "[", "]", "\n", "args", ".", "logger", ".", "info", "(", "'=> [optimizer] finetune all layer'", ")", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "params", ".", "append", "(", "{", "'params'", ":", "param", "}", ")", "\n", "\n", "", "", "if", "args", ".", "train_what", "==", "'last'", ":", "\n", "        ", "args", ".", "logger", ".", "info", "(", "'\\n===========Check Grad============'", ")", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "param", ".", "requires_grad", ":", "\n", "                ", "args", ".", "logger", ".", "info", "(", "name", ",", "param", ".", "requires_grad", ")", "\n", "", "", "args", ".", "logger", ".", "info", "(", "'=================================\\n'", ")", "\n", "\n", "", "if", "args", ".", "optim", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wd", ")", "\n", "", "elif", "args", ".", "optim", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wd", ",", "momentum", "=", "0.9", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "args", ".", "logger", ".", "info", "(", "f\" => use {args.optim} optimizer\"", ")", "\n", "\n", "ce_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "args", ".", "iteration", "=", "1", "\n", "\n", "### test: higher priority ###", "\n", "if", "args", ".", "test", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "test", ")", ":", "\n", "            ", "args", ".", "logger", ".", "info", "(", "\"=> loading testing checkpoint '{}'\"", ".", "format", "(", "args", ".", "test", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "test", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "\n", "if", "args", ".", "retrieval", ":", "# if directly test on pretrained network", "\n", "                ", "new_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "                    ", "k", "=", "k", ".", "replace", "(", "'encoder_q.0.'", ",", "'backbone.'", ")", ".", "replace", "(", "'linear_fc'", ",", "'pretrain_fc'", ")", "\n", "new_dict", "[", "k", "]", "=", "v", "\n", "", "state_dict", "=", "new_dict", "\n", "", "try", ":", "\n", "                ", "model_without_dp", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "except", ":", "\n", "                ", "neq_load_customized", "(", "model_without_dp", ",", "state_dict", ",", "verbose", "=", "True", ",", "args", "=", "args", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "args", ".", "logger", ".", "info", "(", "\"[Warning] no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "test", ")", ")", "\n", "epoch", "=", "0", "\n", "args", ".", "logger", ".", "info", "(", "\"[Warning] if test random init weights, press c to continue\"", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\n", "", "args", ".", "logger", ".", "info", "(", "'args=\\n\\t\\t'", "+", "'\\n\\t\\t'", ".", "join", "(", "[", "'%s:%s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", "]", ")", ")", "\n", "\n", "transform_test_cuda", "=", "transforms", ".", "Compose", "(", "[", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "channel", "=", "1", ")", "]", ")", "\n", "\n", "if", "args", ".", "retrieval", ":", "\n", "            ", "assert", "not", "args", ".", "distributed", "\n", "test_retrieval", "(", "model", ",", "ce_loss", ",", "transform_test_cuda", ",", "device", ",", "epoch", ",", "args", ")", "\n", "", "elif", "args", ".", "center_crop", "or", "args", ".", "five_crop", "or", "args", ".", "ten_crop", ":", "\n", "            ", "assert", "not", "args", ".", "distributed", "\n", "transform", "=", "get_transform", "(", "'test'", ",", "args", ")", "\n", "test_dataset", "=", "get_data", "(", "transform", ",", "'test'", ",", "args", ")", "\n", "test_10crop", "(", "test_dataset", ",", "model", ",", "ce_loss", ",", "transform_test_cuda", ",", "device", ",", "epoch", ",", "args", ")", "\n", "", "elif", "args", ".", "temporal_ten_clip", ":", "\n", "            ", "assert", "not", "args", ".", "distributed", "\n", "transform", "=", "get_transform", "(", "'test'", ",", "args", ")", "\n", "test_dataset", "=", "get_data", "(", "transform", ",", "'test'", ",", "args", ")", "\n", "temporal_test_10clip", "(", "test_dataset", ",", "model", ",", "ce_loss", ",", "transform_test_cuda", ",", "device", ",", "epoch", ",", "args", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "### data ###", "\n", "", "transform_train", "=", "get_transform", "(", "'train'", ",", "args", ")", "\n", "train_loader", "=", "get_dataloader", "(", "get_data", "(", "transform_train", ",", "'train'", ",", "args", ")", ",", "'train'", ",", "args", ")", "\n", "transform_val", "=", "get_transform", "(", "'val'", ",", "args", ")", "\n", "val_loader", "=", "get_dataloader", "(", "get_data", "(", "transform_val", ",", "'val'", ",", "args", ")", ",", "'val'", ",", "args", ")", "\n", "\n", "transform_train_cuda", "=", "transforms", ".", "Compose", "(", "[", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "channel", "=", "1", ")", "]", ")", "# ImageNet", "\n", "transform_val_cuda", "=", "transforms", ".", "Compose", "(", "[", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "channel", "=", "1", ")", "]", ")", "# ImageNet", "\n", "\n", "args", ".", "logger", ".", "info", "(", "'==================================='", ")", "\n", "\n", "### restart training ###", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "args", ".", "iteration", "=", "checkpoint", "[", "'iteration'", "]", "\n", "best_acc", "=", "checkpoint", "[", "'best_acc'", "]", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "\n", "try", ":", "\n", "                ", "model_without_dp", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "except", ":", "\n", "                ", "args", ".", "logger", ".", "info", "(", "'[WARNING] resuming training with different weights'", ")", "\n", "neq_load_customized", "(", "model_without_dp", ",", "state_dict", ",", "verbose", "=", "True", ",", "args", "=", "args", ")", "\n", "", "args", ".", "logger", ".", "info", "(", "\"=> load resumed checkpoint '{}' (epoch {})\"", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "try", ":", "\n", "                ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "", "except", ":", "\n", "                ", "args", ".", "logger", ".", "info", "(", "'[WARNING] failed to load optimizer state, initialize optimizer'", ")", "\n", "", "", "else", ":", "\n", "            ", "args", ".", "logger", ".", "info", "(", "\"[Warning] no checkpoint found at '{}', use random init\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "elif", "args", ".", "pretrain", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrain", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrain", ",", "map_location", "=", "'cpu'", ")", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "\n", "new_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "                ", "k", "=", "k", ".", "replace", "(", "'encoder_q.0.'", ",", "'backbone.'", ")", ".", "replace", "(", "'final_fc'", ",", "'pretrain_fc'", ")", "\n", "new_dict", "[", "k", "]", "=", "v", "\n", "", "state_dict", "=", "new_dict", "\n", "\n", "try", ":", "\n", "                ", "model_without_dp", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "except", ":", "\n", "                ", "neq_load_customized", "(", "model_without_dp", ",", "state_dict", ",", "verbose", "=", "True", ",", "args", "=", "args", ")", "\n", "", "args", ".", "logger", ".", "info", "(", "\n", "\"=> loaded pretrained checkpoint '{}' (epoch {})\"", ".", "format", "(", "args", ".", "pretrain", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "args", ".", "logger", ".", "info", "(", "\"[Warning] no checkpoint found at '{}', use random init\"", ".", "format", "(", "args", ".", "pretrain", ")", ")", "\n", "raise", "NotImplementedError", "\n", "\n", "", "", "else", ":", "\n", "        ", "args", ".", "logger", ".", "info", "(", "\"=> train from scratch\"", ")", "\n", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# plot tools", "\n", "writer_val", "=", "SummaryWriter", "(", "logdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "img_path", ",", "'val'", ")", ")", "\n", "writer_train", "=", "SummaryWriter", "(", "logdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "img_path", ",", "'train'", ")", ")", "\n", "args", ".", "val_plotter", "=", "TB", ".", "PlotterThread", "(", "writer_val", ")", "\n", "args", ".", "train_plotter", "=", "TB", ".", "PlotterThread", "(", "writer_train", ")", "\n", "\n", "args", ".", "logger", ".", "info", "(", "'args=\\n\\t\\t'", "+", "'\\n\\t\\t'", ".", "join", "(", "[", "'%s:%s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", "]", ")", ")", "\n", "\n", "# main loop", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "epoch", ")", "\n", "random", ".", "seed", "(", "epoch", ")", "\n", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "train_one_epoch", "(", "train_loader", ",", "model", ",", "ce_loss", ",", "optimizer", ",", "transform_train_cuda", ",", "device", ",", "epoch", ",", "args", ")", "\n", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_freq", "==", "0", ":", "\n", "            ", "_", ",", "val_acc", "=", "validate", "(", "val_loader", ",", "model", ",", "ce_loss", ",", "transform_val_cuda", ",", "device", ",", "epoch", ",", "args", ")", "\n", "\n", "# save check_point", "\n", "is_best", "=", "val_acc", ">", "best_acc", "\n", "best_acc", "=", "max", "(", "val_acc", ",", "best_acc", ")", "\n", "state_dict", "=", "model_without_dp", ".", "state_dict", "(", ")", "\n", "save_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'best_acc'", ":", "best_acc", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'iteration'", ":", "args", ".", "iteration", "}", "\n", "save_checkpoint", "(", "save_dict", ",", "is_best", ",", "0", ",", "# make gap = 0, prevent delete previous saved dict", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_path", ",", "'epoch%d.pth.tar'", "%", "epoch", ")", ",", "\n", "keep_all", "=", "False", ",", "is_save", "=", "(", "(", "epoch", "+", "1", ")", "%", "args", ".", "save_freq", "==", "0", ")", ")", "\n", "\n", "", "", "args", ".", "logger", ".", "info", "(", "'Training from ep %d to ep %d finished'", "%", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ")", "\n", "time", ".", "sleep", "(", "5", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.train_one_epoch": [[422, 499], ["utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.ProgressMeter", "time.time", "time.time", "enumerate", "args.logger.info", "args.train_plotter.add_data", "args.train_plotter.add_data", "args.train_plotter.add_data", "args.logger.info", "len", "model.eval", "model.train", "x.size", "transforms_cuda().view().transpose().contiguous", "utils.utils.AverageMeter.update", "input_seq.squeeze.size", "classifier.train_one_epoch.tr"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.tensorboard_utils.PlotterThread.add_data", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.tensorboard_utils.PlotterThread.add_data", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.tensorboard_utils.PlotterThread.add_data", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.update"], ["", "def", "train_one_epoch", "(", "data_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "transforms_cuda", ",", "device", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':.2f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':.2f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4f'", ")", "\n", "top1_meter", "=", "AverageMeter", "(", "'acc@1'", ",", "':.4f'", ")", "\n", "top5_meter", "=", "AverageMeter", "(", "'acc@5'", ",", "':.4f'", ")", "\n", "\n", "args", ".", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "data_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1_meter", ",", "top5_meter", "]", ",", "\n", "prefix", "=", "'Epoch:[{}/{}] lr:{} '", ".", "format", "(", "epoch", ",", "args", ".", "epochs", ",", "args", ".", "lr", ")", ",", "logger", "=", "args", ".", "logger", ")", "\n", "\n", "if", "args", ".", "train_what", "==", "'last'", ":", "\n", "        ", "model", ".", "eval", "(", ")", "# totally freeze BN in backbone", "\n", "", "else", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "\n", "", "if", "args", ".", "use_bn", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "model", ".", "module", ".", "final_bn", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "final_bn", ".", "train", "(", ")", "\n", "\n", "", "", "end", "=", "time", ".", "time", "(", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "def", "tr", "(", "x", ")", ":", "# transformation on tensor", "\n", "        ", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "return", "transforms_cuda", "(", "x", ")", ".", "view", "(", "B", ",", "3", ",", "args", ".", "num_seq", ",", "args", ".", "seq_len", ",", "args", ".", "img_dim", ",", "args", ".", "img_dim", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "for", "idx", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "input_seq", "=", "batch", "[", "'seq'", "]", "\n", "target", "=", "batch", "[", "'vid'", "]", "\n", "B", "=", "input_seq", ".", "size", "(", "0", ")", "\n", "input_seq", "=", "tr", "(", "input_seq", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "input_seq", "=", "input_seq", ".", "squeeze", "(", "1", ")", "# num_seq is always 1, seqeeze it", "\n", "logit", ",", "_", "=", "model", "(", "input_seq", ")", "\n", "loss", "=", "criterion", "(", "logit", ",", "target", ")", "\n", "top1", ",", "top5", "=", "calc_topk_accuracy", "(", "logit", ",", "target", ",", "(", "1", ",", "5", ")", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "B", ")", "\n", "top1_meter", ".", "update", "(", "top1", ".", "item", "(", ")", ",", "B", ")", "\n", "top5_meter", ".", "update", "(", "top5", ".", "item", "(", ")", ",", "B", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "idx", "+", "1", ")", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "idx", ")", "\n", "\n", "args", ".", "train_plotter", ".", "add_data", "(", "'local/loss'", ",", "losses", ".", "local_avg", ",", "args", ".", "iteration", ")", "\n", "args", ".", "train_plotter", ".", "add_data", "(", "'local/top1'", ",", "top1_meter", ".", "local_avg", ",", "args", ".", "iteration", ")", "\n", "args", ".", "train_plotter", ".", "add_data", "(", "'local/top5'", ",", "top5_meter", ".", "local_avg", ",", "args", ".", "iteration", ")", "\n", "\n", "", "args", ".", "iteration", "+=", "1", "\n", "\n", "", "args", ".", "logger", ".", "info", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'T-epoch:{t:.2f}\\t'", ".", "format", "(", "epoch", ",", "idx", ",", "len", "(", "data_loader", ")", ",", "t", "=", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n", "args", ".", "train_plotter", ".", "add_data", "(", "'global/loss'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "args", ".", "train_plotter", ".", "add_data", "(", "'global/top1'", ",", "top1_meter", ".", "avg", ",", "epoch", ")", "\n", "args", ".", "train_plotter", ".", "add_data", "(", "'global/top5'", ",", "top5_meter", ".", "avg", ",", "epoch", ")", "\n", "\n", "args", ".", "logger", ".", "info", "(", "'train Epoch: [{0}][{1}/{2}]\\t'", "\n", "'T-epoch:{t:.2f}\\t'", ".", "format", "(", "epoch", ",", "idx", ",", "len", "(", "data_loader", ")", ",", "t", "=", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n", "return", "losses", ".", "avg", ",", "top1_meter", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.validate": [[501, 543], ["utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "model.eval", "args.val_plotter.add_data", "args.val_plotter.add_data", "args.val_plotter.add_data", "args.logger.info", "x.size", "transforms_cuda().view().transpose().contiguous", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "tqdm.tqdm", "enumerate", "input_seq.squeeze.size", "classifier.train_one_epoch.tr"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.tensorboard_utils.PlotterThread.add_data", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.tensorboard_utils.PlotterThread.add_data", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.tensorboard_utils.PlotterThread.add_data", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info"], ["", "def", "validate", "(", "data_loader", ",", "model", ",", "criterion", ",", "transforms_cuda", ",", "device", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1_meter", "=", "AverageMeter", "(", "'acc@1'", ",", "':.4f'", ")", "\n", "top5_meter", "=", "AverageMeter", "(", "'acc@5'", ",", "':.4f'", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "def", "tr", "(", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "return", "transforms_cuda", "(", "x", ")", ".", "view", "(", "B", ",", "3", ",", "args", ".", "num_seq", ",", "args", ".", "seq_len", ",", "args", ".", "img_dim", ",", "args", ".", "img_dim", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "data_loader", ")", ",", "total", "=", "len", "(", "data_loader", ")", ")", ":", "\n", "            ", "input_seq", "=", "batch", "[", "'seq'", "]", "\n", "target", "=", "batch", "[", "'vid'", "]", "\n", "B", "=", "input_seq", ".", "size", "(", "0", ")", "\n", "input_seq", "=", "tr", "(", "input_seq", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "input_seq", "=", "input_seq", ".", "squeeze", "(", "1", ")", "# num_seq is always 1, seqeeze it", "\n", "logit", ",", "_", "=", "model", "(", "input_seq", ")", "\n", "loss", "=", "criterion", "(", "logit", ",", "target", ")", "\n", "top1", ",", "top5", "=", "calc_topk_accuracy", "(", "logit", ",", "target", ",", "(", "1", ",", "5", ")", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "B", ")", "\n", "top1_meter", ".", "update", "(", "top1", ".", "item", "(", ")", ",", "B", ")", "\n", "top5_meter", ".", "update", "(", "top5", ".", "item", "(", ")", ",", "B", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "args", ".", "val_plotter", ".", "add_data", "(", "'global/loss'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "args", ".", "val_plotter", ".", "add_data", "(", "'global/top1'", ",", "top1_meter", ".", "avg", ",", "epoch", ")", "\n", "args", ".", "val_plotter", ".", "add_data", "(", "'global/top5'", ",", "top5_meter", ".", "avg", ",", "epoch", ")", "\n", "\n", "args", ".", "logger", ".", "info", "(", "'val Epoch: [{0}]\\t'", "\n", "'Loss: {loss.avg:.4f} Acc@1: {top1.avg:.4f} Acc@5: {top5.avg:.4f}\\t'", "\n", ".", "format", "(", "epoch", ",", "loss", "=", "losses", ",", "top1", "=", "top1_meter", ",", "top5", "=", "top5_meter", ")", ")", "\n", "\n", "return", "losses", ".", "avg", ",", "top1_meter", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.test_10crop": [[545, 655], ["model.eval", "args.logger.info", "classifier.summarize_probability", "args.logger.info", "args.logger.info", "sys.exit", "args.logger.info", "args.logger.info", "args.logger.info", "x.size", "transforms_cuda().view().permute().view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "x.size", "transforms_cuda().view().permute", "args.logger.info", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "tqdm.tqdm", "args.logger.info", "classifier.summarize_probability", "args.logger.info", "args.logger.info", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "enumerate", "classifier.train_one_epoch.tr"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.summarize_probability", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.summarize_probability", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info"], ["", "def", "test_10crop", "(", "dataset", ",", "model", ",", "criterion", ",", "transforms_cuda", ",", "device", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "prob_dict", "=", "{", "}", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# aug_list: 1,2,3,4,5 = topleft, topright, bottomleft, bottomright, center", "\n", "# flip_list: 0,1 = raw, flip", "\n", "if", "args", ".", "center_crop", ":", "\n", "        ", "args", ".", "logger", ".", "info", "(", "'Test using center crop'", ")", "\n", "aug_list", "=", "[", "5", "]", ";", "\n", "flip_list", "=", "[", "0", "]", ";", "\n", "title", "=", "'center'", "\n", "", "if", "args", ".", "five_crop", ":", "\n", "        ", "args", ".", "logger", ".", "info", "(", "'Test using 5 crop'", ")", "\n", "aug_list", "=", "[", "5", ",", "1", ",", "2", ",", "3", ",", "4", "]", ";", "\n", "flip_list", "=", "[", "0", "]", ";", "\n", "title", "=", "'five'", "\n", "", "if", "args", ".", "ten_crop", ":", "\n", "        ", "args", ".", "logger", ".", "info", "(", "'Test using 10 crop'", ")", "\n", "aug_list", "=", "[", "5", ",", "1", ",", "2", ",", "3", ",", "4", "]", ";", "\n", "flip_list", "=", "[", "0", ",", "1", "]", ";", "\n", "title", "=", "'ten'", "\n", "\n", "# def tr(x):", "\n", "#     B = x.size(0); assert B == 1", "\n", "#     num_test_sample = x.size(2)//(args.seq_len*args.num_seq)", "\n", "#     return transforms_cuda(x)\\", "\n", "#     .view(3,num_test_sample,args.num_seq,args.seq_len,args.img_dim,args.img_dim).permute(1,2,0,3,4,5)", "\n", "#     # (n_test_sample, num_seq/1, c, seq_len, H, W)", "\n", "\n", "", "def", "tr", "(", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "num_test_sample", "=", "x", ".", "size", "(", "2", ")", "//", "(", "args", ".", "seq_len", "*", "args", ".", "num_seq", ")", "\n", "return", "transforms_cuda", "(", "x", ")", ".", "view", "(", "B", ",", "3", ",", "num_test_sample", ",", "args", ".", "num_seq", ",", "args", ".", "seq_len", ",", "args", ".", "img_dim", ",", "args", ".", "img_dim", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ",", "4", ",", "5", ",", "6", ")", ".", "view", "(", "B", "*", "num_test_sample", ",", "args", ".", "num_seq", ",", "3", ",", "args", ".", "seq_len", ",", "args", ".", "img_dim", ",", "args", ".", "img_dim", ")", "\n", "# (B*n_test_sample, num_seq/1, c, seq_len, H, W)", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "# for loop through 10 types of augmentations, then average the probability", "\n", "for", "flip_idx", "in", "flip_list", ":", "\n", "            ", "for", "aug_idx", "in", "aug_list", ":", "\n", "                ", "args", ".", "logger", ".", "info", "(", "'Aug type: %d; flip: %d'", "%", "(", "aug_idx", ",", "flip_idx", ")", ")", "\n", "if", "flip_idx", "==", "0", ":", "\n", "                    ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "A", ".", "RandomHorizontalFlip", "(", "command", "=", "'left'", ")", ",", "\n", "A", ".", "Scale", "(", "size", "=", "args", ".", "img_resize_dim", ")", ",", "\n", "A", ".", "FiveCrop", "(", "size", "=", "args", ".", "img_dim", ",", "where", "=", "aug_idx", ")", ",", "\n", "A", ".", "ToTensor", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "A", ".", "RandomHorizontalFlip", "(", "command", "=", "'right'", ")", ",", "\n", "A", ".", "Scale", "(", "size", "=", "args", ".", "img_resize_dim", ")", ",", "\n", "A", ".", "FiveCrop", "(", "size", "=", "args", ".", "img_dim", ",", "where", "=", "aug_idx", ")", ",", "\n", "A", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "", "dataset", ".", "transform", "=", "transform", "\n", "dataset", ".", "return_path", "=", "True", "\n", "dataset", ".", "return_label", "=", "True", "\n", "test_sampler", "=", "data", ".", "SequentialSampler", "(", "dataset", ")", "\n", "data_loader", "=", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "worker_init_fn", "=", "worker_init_fn", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "for", "idx", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "data_loader", ")", ",", "total", "=", "len", "(", "data_loader", ")", ")", ":", "\n", "                    ", "input_seq", "=", "batch", "[", "'seq'", "]", "\n", "input_seq", "=", "tr", "(", "input_seq", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ")", "\n", "input_seq", "=", "input_seq", ".", "squeeze", "(", "1", ")", "# num_seq is always 1, seqeeze it", "\n", "logit", ",", "_", "=", "model", "(", "input_seq", ")", "\n", "# average probability along the temporal window", "\n", "prob_mean", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "# (1, num_class)", "\n", "\n", "target", "=", "batch", "[", "'vid'", "]", "\n", "vname", "=", "batch", "[", "'vpath'", "]", "\n", "vname", "=", "vname", "[", "0", "]", "\n", "if", "vname", "not", "in", "prob_dict", ".", "keys", "(", ")", ":", "\n", "                        ", "prob_dict", "[", "vname", "]", "=", "{", "'mean_prob'", ":", "[", "]", ",", "}", "\n", "", "prob_dict", "[", "vname", "]", "[", "'mean_prob'", "]", ".", "append", "(", "prob_mean", "[", "0", "]", ")", "\n", "\n", "", "if", "(", "title", "==", "'ten'", ")", "and", "(", "flip_idx", "==", "0", ")", "and", "(", "aug_idx", "==", "5", ")", ":", "\n", "                    ", "args", ".", "logger", ".", "info", "(", "'center-crop result:'", ")", "\n", "acc_1", "=", "summarize_probability", "(", "prob_dict", ",", "\n", "data_loader", ".", "dataset", ".", "encode_action", ",", "'center'", ",", "args", ")", "\n", "args", ".", "logger", ".", "info", "(", "'center-crop:'", ")", "\n", "args", ".", "logger", ".", "info", "(", "'test Epoch: [{0}]\\t'", "\n", "'Mean: Acc@1: {acc[0].avg:.4f} Acc@5: {acc[1].avg:.4f}'", "\n", ".", "format", "(", "epoch", ",", "acc", "=", "acc_1", ")", ")", "\n", "\n", "", "", "if", "(", "title", "==", "'ten'", ")", "and", "(", "flip_idx", "==", "0", ")", ":", "\n", "                ", "args", ".", "logger", ".", "info", "(", "'five-crop result:'", ")", "\n", "acc_5", "=", "summarize_probability", "(", "prob_dict", ",", "\n", "data_loader", ".", "dataset", ".", "encode_action", ",", "'five'", ",", "args", ")", "\n", "args", ".", "logger", ".", "info", "(", "'five-crop:'", ")", "\n", "args", ".", "logger", ".", "info", "(", "'test Epoch: [{0}]\\t'", "\n", "'Mean: Acc@1: {acc[0].avg:.4f} Acc@5: {acc[1].avg:.4f}'", "\n", ".", "format", "(", "epoch", ",", "acc", "=", "acc_5", ")", ")", "\n", "\n", "", "", "", "args", ".", "logger", ".", "info", "(", "'%s-crop result:'", "%", "title", ")", "\n", "acc_final", "=", "summarize_probability", "(", "prob_dict", ",", "\n", "data_loader", ".", "dataset", ".", "encode_action", ",", "'ten'", ",", "args", ")", "\n", "args", ".", "logger", ".", "info", "(", "'%s-crop:'", "%", "title", ")", "\n", "args", ".", "logger", ".", "info", "(", "'test Epoch: [{0}]\\t'", "\n", "'Mean: Acc@1: {acc[0].avg:.4f} Acc@5: {acc[1].avg:.4f}'", "\n", ".", "format", "(", "epoch", ",", "acc", "=", "acc_final", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.temporal_test_10clip": [[657, 739], ["model.eval", "args.logger.info", "args.logger.info", "classifier.summarize_probability", "args.logger.info", "classifier.summarize_classwise_probability", "sys.exit", "x.size", "transforms_cuda().view().permute().contiguous().view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "torchvision.transforms.Compose", "utils.MultipleClipTransform", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "tqdm.tqdm", "x.size", "torchvision.transforms.Compose", "enumerate", "tr.size", "classifier.train_one_epoch.tr"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.summarize_probability", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.summarize_classwise_probability"], ["", "def", "temporal_test_10clip", "(", "dataset", ",", "model", ",", "criterion", ",", "transforms_cuda", ",", "device", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "prob_dict", "=", "{", "}", "\n", "per_prob_list", "=", "[", "]", "\n", "cls_prob_dict", "=", "{", "}", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "assert", "args", ".", "num_seq", "==", "10", "\n", "\n", "# aug_list: 1,2,3,4,5 = topleft, topright, bottomleft, bottomright, center", "\n", "# flip_list: 0,1 = raw, flip", "\n", "args", ".", "logger", ".", "info", "(", "'Test using temporal 10 center clip crop'", ")", "\n", "title", "=", "'temporal_10_clip'", "\n", "\n", "def", "tr", "(", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "num_test_sample", "=", "x", ".", "size", "(", "2", ")", "//", "(", "args", ".", "seq_len", "*", "args", ".", "num_seq", ")", "\n", "assert", "num_test_sample", "==", "1", "\n", "return", "transforms_cuda", "(", "x", ")", ".", "view", "(", "B", ",", "3", ",", "args", ".", "num_seq", ",", "args", ".", "seq_len", ",", "args", ".", "img_dim", ",", "args", ".", "img_dim", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", "*", "args", ".", "num_seq", ",", "3", ",", "args", ".", "seq_len", ",", "args", ".", "img_dim", ",", "args", ".", "img_dim", ")", "\n", "# (B*10, c, seq_len, H, W)", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "# temporally uniform sample 10 clips, then average result", "\n", "base_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "# A.RandomHorizontalFlip(command='left'),", "\n", "A", ".", "Scale", "(", "size", "=", "args", ".", "img_resize_dim", ")", ",", "\n", "A", ".", "CenterCrop", "(", "size", "=", "args", ".", "img_dim", ")", ",", "\n", "A", ".", "ToTensor", "(", ")", "]", ")", "\n", "if", "args", ".", "aug_crop", "and", "args", ".", "img_dim", "==", "112", ":", "\n", "            ", "base_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "# A.RandomHorizontalFlip(command='left'),", "\n", "A", ".", "Scale", "(", "size", "=", "(", "128", ",", "171", ")", ")", ",", "\n", "A", ".", "CenterCrop", "(", "size", "=", "args", ".", "img_dim", ")", ",", "\n", "A", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "", "transform", "=", "A", ".", "MultipleClipTransform", "(", "[", "base_transform", ",", "]", "*", "10", ",", "seq_len", "=", "args", ".", "seq_len", ")", "\n", "\n", "dataset", ".", "transform", "=", "transform", "\n", "dataset", ".", "return_path", "=", "True", "\n", "dataset", ".", "return_label", "=", "True", "\n", "test_sampler", "=", "data", ".", "SequentialSampler", "(", "dataset", ")", "\n", "data_loader", "=", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "worker_init_fn", "=", "worker_init_fn", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "\n", "for", "idx", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "data_loader", ")", ",", "total", "=", "len", "(", "data_loader", ")", ")", ":", "\n", "            ", "input_seq", "=", "batch", "[", "'seq'", "]", "# (B, C, 10, seq_len, )", "\n", "B", "=", "input_seq", ".", "size", "(", "0", ")", "\n", "input_seq", "=", "tr", "(", "input_seq", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ")", "\n", "logit", ",", "_", "=", "model", "(", "input_seq", ")", "\n", "# average probability along the temporal window", "\n", "prob_per", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "B", ",", "10", ",", "-", "1", ")", "# (B, num_class)", "\n", "per_prob_list", ".", "append", "(", "prob_per", ")", "\n", "prob_mean", "=", "prob_per", ".", "mean", "(", "1", ",", "keepdim", "=", "False", ")", "# (B, num_class)", "\n", "\n", "target", "=", "batch", "[", "'vid'", "]", "\n", "vnames", "=", "batch", "[", "'vpath'", "]", "\n", "for", "i", ",", "vname", "in", "enumerate", "(", "vnames", ")", ":", "\n", "                ", "if", "vname", "not", "in", "prob_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "prob_dict", "[", "vname", "]", "=", "{", "'mean_prob'", ":", "[", "]", "}", "\n", "", "prob_dict", "[", "vname", "]", "[", "'mean_prob'", "]", ".", "append", "(", "prob_mean", "[", "i", "]", ")", "\n", "\n", "label", "=", "data_loader", ".", "dataset", ".", "decode_action", "(", "target", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "if", "label", "not", "in", "cls_prob_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "cls_prob_dict", "[", "label", "]", "=", "{", "'mean_prob'", ":", "[", "]", ",", "}", "\n", "", "cls_prob_dict", "[", "label", "]", "[", "'mean_prob'", "]", ".", "append", "(", "prob_mean", "[", "i", "]", ")", "\n", "\n", "", "", "", "args", ".", "logger", ".", "info", "(", "'<<<<<< temporal uniform 10 crop result: >>>>>>>>> '", ")", "\n", "acc_1", "=", "summarize_probability", "(", "prob_dict", ",", "\n", "data_loader", ".", "dataset", ".", "encode_action", ",", "title", ",", "args", ")", "\n", "args", ".", "logger", ".", "info", "(", "'######## temporal uniform 10 crop classwise result: #########'", ")", "\n", "acc_1", "=", "summarize_classwise_probability", "(", "cls_prob_dict", ",", "\n", "data_loader", ".", "dataset", ".", "encode_action", ",", "title", ",", "args", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.summarize_classwise_probability": [[741, 760], ["tqdm.tqdm", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "prob_dict.items", "action_to_idx", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "utils.utils.calc_topk_accuracy", "acc[].update", "acc[].update", "args.logger.info", "open", "json.dump", "len", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.stack.tolist", "mean_top1.item", "mean_top5.item", "os.path.join", "os.path.dirname", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "os.path.basename", "len"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.calc_topk_accuracy", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info"], ["", "def", "summarize_classwise_probability", "(", "prob_dict", ",", "action_to_idx", ",", "title", ",", "args", ")", ":", "\n", "    ", "acc", "=", "[", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "]", "\n", "stat", "=", "{", "}", "\n", "for", "action_name", ",", "item", "in", "tqdm", "(", "prob_dict", ".", "items", "(", ")", ",", "total", "=", "len", "(", "prob_dict", ")", ")", ":", "\n", "        ", "target", "=", "action_to_idx", "(", "action_name", ")", "\n", "mean_prob", "=", "torch", ".", "stack", "(", "item", "[", "'mean_prob'", "]", ",", "0", ")", "# .mean(0) (n, num_class)", "\n", "mean_top1", ",", "mean_top5", "=", "calc_topk_accuracy", "(", "mean_prob", ",", "\n", "torch", ".", "LongTensor", "(", "[", "target", ",", "]", "*", "len", "(", "item", "[", "'mean_prob'", "]", ")", ")", ".", "cuda", "(", ")", ",", "(", "1", ",", "5", ")", ")", "\n", "stat", "[", "action_name", "]", "=", "{", "'mean_prob'", ":", "mean_prob", ".", "tolist", "(", ")", "}", "\n", "acc", "[", "0", "]", ".", "update", "(", "mean_top1", ".", "item", "(", ")", ",", "1", ")", "\n", "acc", "[", "1", "]", ".", "update", "(", "mean_top5", ".", "item", "(", ")", ",", "1", ")", "\n", "\n", "args", ".", "logger", ".", "info", "(", "'{action_name}Mean: Acc@1: {acc[0].avg:.4f} Acc@5: {acc[1].avg:.4f}'", "\n", ".", "format", "(", "action_name", "=", "action_name", ",", "acc", "=", "acc", ")", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "test", ")", ",", "\n", "'%s-classwise_prob-%s.json'", "%", "(", "os", ".", "path", ".", "basename", "(", "args", ".", "test", ")", ",", "title", ")", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "stat", ",", "fp", ")", "\n", "", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.summarize_probability": [[762, 785], ["tqdm.tqdm", "args.logger.info", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "prob_dict.items", "action_to_idx", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "utils.utils.calc_topk_accuracy", "acc[].update", "acc[].update", "open", "json.dump", "len", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.stack.tolist", "mean_top1.item", "mean_top5.item", "os.path.join", "vname.split", "os.path.dirname", "vname.split", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "os.path.basename", "len"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.calc_topk_accuracy", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.update"], ["", "def", "summarize_probability", "(", "prob_dict", ",", "action_to_idx", ",", "title", ",", "args", ")", ":", "\n", "    ", "acc", "=", "[", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "]", "\n", "stat", "=", "{", "}", "\n", "for", "vname", ",", "item", "in", "tqdm", "(", "prob_dict", ".", "items", "(", ")", ",", "total", "=", "len", "(", "prob_dict", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "action_name", "=", "vname", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "\n", "", "except", ":", "\n", "            ", "action_name", "=", "vname", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "", "target", "=", "action_to_idx", "(", "action_name", ")", "\n", "mean_prob", "=", "torch", ".", "stack", "(", "item", "[", "'mean_prob'", "]", ",", "0", ")", "# .mean(0) (n, num_class)", "\n", "mean_top1", ",", "mean_top5", "=", "calc_topk_accuracy", "(", "mean_prob", ",", "\n", "torch", ".", "LongTensor", "(", "[", "target", ",", "]", "*", "len", "(", "item", "[", "'mean_prob'", "]", ")", ")", ".", "cuda", "(", ")", ",", "(", "1", ",", "5", ")", ")", "\n", "stat", "[", "vname", "]", "=", "{", "'mean_prob'", ":", "mean_prob", ".", "tolist", "(", ")", "}", "\n", "acc", "[", "0", "]", ".", "update", "(", "mean_top1", ".", "item", "(", ")", ",", "1", ")", "\n", "acc", "[", "1", "]", ".", "update", "(", "mean_top5", ".", "item", "(", ")", ",", "1", ")", "\n", "\n", "", "args", ".", "logger", ".", "info", "(", "'Mean: Acc@1: {acc[0].avg:.4f} Acc@5: {acc[1].avg:.4f}'", "\n", ".", "format", "(", "acc", "=", "acc", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "test", ")", ",", "\n", "'%s-prob-%s.json'", "%", "(", "os", ".", "path", ".", "basename", "(", "args", ".", "test", ")", ",", "title", ")", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "stat", ",", "fp", ")", "\n", "", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.test_retrieval": [[787, 996], ["model.eval", "x.size", "transforms_cuda().view().permute().contiguous().view().contiguous", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torchvision.transforms.Compose", "d_class", "args.logger.info", "d_class", "args.logger.info", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "args.logger.info", "tqdm.tqdm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().long().to", "args.logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "args.logger.info", "tqdm.tqdm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().long().to", "args.logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.normalize", "torch.normalize", "F.normalize.matmul", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "args.logger.info", "zip", "sys.exit", "x.size", "torchvision.transforms.Compose", "os.makedirs", "enumerate", "batch[].to", "tr.size", "classifier.train_one_epoch.tr"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info"], ["", "def", "test_retrieval", "(", "model", ",", "criterion", ",", "transforms_cuda", ",", "device", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "# (temporarily sample 10 clips)", "\n", "assert", "args", ".", "num_seq", "==", "10", "\n", "\n", "def", "tr", "(", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "test_sample", "=", "x", ".", "size", "(", "2", ")", "//", "(", "args", ".", "seq_len", "*", "args", ".", "num_seq", ")", "\n", "assert", "test_sample", "==", "1", "\n", "return", "transforms_cuda", "(", "x", ")", ".", "view", "(", "B", ",", "3", ",", "args", ".", "num_seq", ",", "args", ".", "seq_len", ",", "args", ".", "img_dim", ",", "args", ".", "img_dim", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", "*", "args", ".", "num_seq", ",", "3", ",", "args", ".", "seq_len", ",", "args", ".", "img_dim", ",", "args", ".", "img_dim", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# transform = transforms.Compose([", "\n", "#     A.CenterCrop(size=(224, 224)),", "\n", "#     A.Scale(size=(args.img_dim, args.img_dim)),", "\n", "#     A.ColorJitter(0.2, 0.2, 0.2, 0.1, p=0.3, consistent=True),", "\n", "#     A.ToTensor()])", "\n", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "A", ".", "Scale", "(", "size", "=", "args", ".", "img_resize_dim", ")", ",", "\n", "A", ".", "CenterCrop", "(", "size", "=", "args", ".", "img_dim", ")", ",", "\n", "A", ".", "ToTensor", "(", ")", "]", ")", "\n", "if", "args", ".", "aug_crop", "and", "args", ".", "img_dim", "==", "112", ":", "\n", "            ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "A", ".", "Scale", "(", "(", "128", ",", "171", ")", ")", ",", "\n", "A", ".", "CenterCrop", "(", "size", "=", "args", ".", "img_dim", ")", ",", "\n", "A", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'ucf101'", ":", "\n", "            ", "d_class", "=", "UCF101_10CLIP", "\n", "", "elif", "args", ".", "dataset", "==", "'hmdb51'", ":", "\n", "            ", "d_class", "=", "HMDB51_10CLIP", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "train_dataset", "=", "d_class", "(", "mode", "=", "'train'", ",", "\n", "transform", "=", "transform", ",", "\n", "num_frames", "=", "args", ".", "seq_len", ",", "\n", "ds", "=", "args", ".", "ds", ",", "\n", "which_split", "=", "1", ",", "\n", "return_label", "=", "True", ",", "\n", "return_path", "=", "True", ")", "\n", "args", ".", "logger", ".", "info", "(", "'train dataset size: %d'", "%", "len", "(", "train_dataset", ")", ")", "\n", "\n", "test_dataset", "=", "d_class", "(", "mode", "=", "'test'", ",", "\n", "transform", "=", "transform", ",", "\n", "num_frames", "=", "args", ".", "seq_len", ",", "\n", "ds", "=", "args", ".", "ds", ",", "\n", "which_split", "=", "1", ",", "\n", "return_label", "=", "True", ",", "\n", "return_path", "=", "True", ")", "\n", "args", ".", "logger", ".", "info", "(", "'test dataset size: %d'", "%", "len", "(", "test_dataset", ")", ")", "\n", "\n", "train_sampler", "=", "data", ".", "SequentialSampler", "(", "train_dataset", ")", "\n", "test_sampler", "=", "data", ".", "SequentialSampler", "(", "test_dataset", ")", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "worker_init_fn", "=", "worker_init_fn", ",", "\n", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "data", ".", "DataLoader", "(", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "worker_init_fn", "=", "worker_init_fn", ",", "\n", "pin_memory", "=", "True", ")", "\n", "if", "args", ".", "dirname", "is", "None", ":", "\n", "            ", "dirname", "=", "'feature'", "\n", "", "else", ":", "\n", "            ", "dirname", "=", "args", ".", "dirname", "\n", "\n", "", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "test", ")", ",", "dirname", ")", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "############# test features", "\n", "", "args", ".", "logger", ".", "info", "(", "'Computing test set feature ... '", ")", "\n", "test_feature", "=", "[", "]", "\n", "test_per_feature", "=", "[", "]", "\n", "test_label", "=", "[", "]", "\n", "test_vname", "=", "[", "]", "\n", "sample_id", "=", "0", "\n", "for", "idx", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "test_loader", ")", ",", "total", "=", "len", "(", "test_loader", ")", ")", ":", "\n", "            ", "input_seq", "=", "batch", "[", "'seq'", "]", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "B", "=", "input_seq", ".", "size", "(", "0", ")", "\n", "input_seq", "=", "tr", "(", "input_seq", ")", "\n", "current_target", "=", "batch", "[", "'vid'", "]", "\n", "vnames", "=", "batch", "[", "'vname'", "]", "\n", "current_target", "=", "current_target", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "test_sample", "=", "input_seq", ".", "size", "(", "0", ")", "\n", "# input_seq = input_seq.squeeze(1)", "\n", "logit", ",", "feature", "=", "model", "(", "input_seq", ")", "\n", "per_feature", "=", "feature", ".", "view", "(", "B", ",", "args", ".", "num_seq", ",", "feature", ".", "size", "(", "-", "1", ")", ")", "\n", "feature", "=", "per_feature", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "test_feature", ".", "append", "(", "feature", ")", "\n", "test_per_feature", ".", "append", "(", "per_feature", ")", "\n", "\n", "for", "i", "in", "range", "(", "B", ")", ":", "\n", "                ", "sample_id", "+=", "1", "\n", "test_label", ".", "append", "(", "current_target", "[", "i", "]", ")", "\n", "test_vname", ".", "append", "(", "vnames", "[", "i", "]", ")", "\n", "\n", "", "", "test_feature", "=", "torch", ".", "cat", "(", "test_feature", ",", "dim", "=", "0", ")", "\n", "test_label", "=", "torch", ".", "tensor", "(", "test_label", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "args", ".", "logger", ".", "info", "(", "test_feature", ".", "size", "(", ")", ")", "\n", "# test_label = torch.cat(test_label, dim=0)", "\n", "torch", ".", "save", "(", "test_feature", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "test", ")", ",", "dirname", ",", "'%s_test_feature.pth.tar'", "%", "args", ".", "dataset", ")", ")", "\n", "torch", ".", "save", "(", "test_label", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "test", ")", ",", "dirname", ",", "'%s_test_label.pth.tar'", "%", "args", ".", "dataset", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "test", ")", ",", "dirname", ",", "'%s_test_vname.pkl'", "%", "args", ".", "dataset", ")", ",", "\n", "'wb'", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "test_vname", ",", "fp", ")", "\n", "\n", "", "test_per_feature", "=", "torch", ".", "cat", "(", "test_per_feature", ",", "dim", "=", "0", ")", "\n", "torch", ".", "save", "(", "test_per_feature", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "test", ")", ",", "dirname", ",", "'%s_test_per_feature.pth.tar'", "%", "args", ".", "dataset", ")", ")", "\n", "\n", "############## train features", "\n", "args", ".", "logger", ".", "info", "(", "'Computing train set feature ... '", ")", "\n", "train_feature", "=", "[", "]", "\n", "train_per_feature", "=", "[", "]", "\n", "train_label", "=", "[", "]", "\n", "train_vname", "=", "[", "]", "\n", "sample_id", "=", "0", "\n", "for", "idx", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "train_loader", ")", ",", "total", "=", "len", "(", "train_loader", ")", ")", ":", "\n", "            ", "input_seq", "=", "batch", "[", "'seq'", "]", "\n", "B", "=", "input_seq", ".", "size", "(", "0", ")", "\n", "input_seq", "=", "input_seq", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "input_seq", "=", "tr", "(", "input_seq", ")", "\n", "current_target", "=", "batch", "[", "'vid'", "]", "\n", "vnames", "=", "batch", "[", "'vname'", "]", "\n", "current_target", "=", "current_target", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "test_sample", "=", "input_seq", ".", "size", "(", "0", ")", "\n", "# input_seq = input_seq.squeeze(1)", "\n", "logit", ",", "feature", "=", "model", "(", "input_seq", ")", "\n", "per_feature", "=", "feature", ".", "view", "(", "B", ",", "args", ".", "num_seq", ",", "feature", ".", "size", "(", "-", "1", ")", ")", "\n", "feature", "=", "per_feature", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "train_feature", ".", "append", "(", "feature", ")", "\n", "train_per_feature", ".", "append", "(", "per_feature", ")", "\n", "\n", "for", "i", "in", "range", "(", "B", ")", ":", "\n", "                ", "train_label", ".", "append", "(", "current_target", "[", "i", "]", ")", "\n", "train_vname", ".", "append", "(", "vnames", "[", "i", "]", ")", "\n", "sample_id", "+=", "1", "\n", "\n", "", "", "train_feature", "=", "torch", ".", "cat", "(", "train_feature", ")", "\n", "train_label", "=", "torch", ".", "tensor", "(", "train_label", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "args", ".", "logger", ".", "info", "(", "train_feature", ".", "size", "(", ")", ")", "\n", "# train_label = torch.cat(train_label, dim=0)", "\n", "torch", ".", "save", "(", "train_feature", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "test", ")", ",", "dirname", ",", "'%s_train_feature.pth.tar'", "%", "args", ".", "dataset", ")", ")", "\n", "torch", ".", "save", "(", "train_label", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "test", ")", ",", "dirname", ",", "'%s_train_label.pth.tar'", "%", "args", ".", "dataset", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "test", ")", ",", "dirname", ",", "'%s_train_vname.pkl'", "%", "args", ".", "dataset", ")", ",", "\n", "'wb'", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "train_vname", ",", "fp", ")", "\n", "\n", "", "train_per_feature", "=", "torch", ".", "cat", "(", "train_per_feature", ",", "dim", "=", "0", ")", "\n", "torch", ".", "save", "(", "train_per_feature", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "test", ")", ",", "dirname", ",", "'%s_train_per_feature.pth.tar'", "%", "args", ".", "dataset", ")", ")", "\n", "\n", "ks", "=", "[", "1", ",", "5", ",", "10", ",", "20", ",", "50", "]", "\n", "NN_acc", "=", "[", "]", "\n", "\n", "# centering", "\n", "test_feature", "=", "test_feature", "-", "test_feature", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "train_feature", "=", "train_feature", "-", "train_feature", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "\n", "# normalize", "\n", "test_feature", "=", "F", ".", "normalize", "(", "test_feature", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "train_feature", "=", "F", ".", "normalize", "(", "train_feature", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "# dot product", "\n", "sim", "=", "test_feature", ".", "matmul", "(", "train_feature", ".", "t", "(", ")", ")", "\n", "\n", "torch", ".", "save", "(", "sim", ",", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "test", ")", ",", "dirname", ",", "'%s_sim.pth.tar'", "%", "args", ".", "dataset", ")", ")", "\n", "\n", "for", "k", "in", "ks", ":", "\n", "            ", "topkval", ",", "topkidx", "=", "torch", ".", "topk", "(", "sim", ",", "k", ",", "dim", "=", "1", ")", "\n", "acc", "=", "torch", ".", "any", "(", "train_label", "[", "topkidx", "]", "==", "test_label", ".", "unsqueeze", "(", "1", ")", ",", "dim", "=", "1", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "NN_acc", ".", "append", "(", "acc", ")", "\n", "args", ".", "logger", ".", "info", "(", "'%dNN acc = %.4f'", "%", "(", "k", ",", "acc", ")", ")", "\n", "\n", "", "args", ".", "logger", ".", "info", "(", "'NN-Retrieval on %s:'", "%", "args", ".", "dataset", ")", "\n", "for", "k", ",", "acc", "in", "zip", "(", "ks", ",", "NN_acc", ")", ":", "\n", "            ", "args", ".", "logger", ".", "info", "(", "'\\t%dNN acc = %.4f'", "%", "(", "k", ",", "acc", ")", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "test", ")", ",", "dirname", ",", "'%s_test_vname.pkl'", "%", "args", ".", "dataset", ")", ",", "'rb'", ")", "as", "fp", ":", "\n", "            ", "test_vname", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "test", ")", ",", "dirname", ",", "'%s_train_vname.pkl'", "%", "args", ".", "dataset", ")", ",", "'rb'", ")", "as", "fp", ":", "\n", "            ", "train_vname", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "\n", "", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.adjust_learning_rate": [[998, 1004], ["None"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "'''Decay the learning rate based on schedule'''", "\n", "# stepwise lr schedule", "\n", "ratio", "=", "0.1", "if", "epoch", "in", "args", ".", "schedule", "else", "1.", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "param_group", "[", "'lr'", "]", "*", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.get_transform": [[1006, 1034], ["torchvision.transforms.Compose", "utils.Scale", "utils.RandomCrop", "utils.ToTensor", "transform_list.append", "transform_list.insert", "utils.Scale", "utils.ColorJitter", "utils.RandomHorizontalFlip", "utils.Scale", "utils.CenterCrop", "utils.ToTensor", "utils.Scale"], "function", ["None"], ["", "", "def", "get_transform", "(", "mode", ",", "args", ")", ":", "\n", "    ", "if", "mode", "==", "'train'", ":", "\n", "        ", "transform_list", "=", "[", "\n", "A", ".", "Scale", "(", "args", ".", "img_resize_dim", ")", ",", "\n", "A", ".", "RandomCrop", "(", "args", ".", "img_dim", ")", ",", "\n", "A", ".", "ToTensor", "(", ")", "\n", "]", "\n", "if", "args", ".", "with_color_jitter", ":", "\n", "            ", "transform_list", ".", "append", "(", "A", ".", "ColorJitter", "(", "0.8", ",", "0.8", ",", "0.8", ",", "0.2", ",", "p", "=", "0.8", ",", "consistent", "=", "True", ",", "seq_len", "=", "args", ".", "seq_len", ",", "block", "=", "1", ")", ")", "\n", "", "if", "args", ".", "rand_flip", ":", "\n", "            ", "transform_list", ".", "insert", "(", "2", ",", "A", ".", "RandomHorizontalFlip", "(", "consistent", "=", "False", ",", "seq_len", "=", "args", ".", "seq_len", ")", ")", "\n", "", "if", "args", ".", "aug_crop", "and", "args", ".", "img_dim", "==", "112", ":", "\n", "            ", "transform_list", "[", "0", "]", "=", "A", ".", "Scale", "(", "size", "=", "(", "128", ",", "171", ")", ")", "\n", "# transform_list[1] = A.RandomSizedCrop(consistent=True, size=112, p=1.0)", "\n", "\n", "\n", "", "", "elif", "mode", "==", "'val'", "or", "mode", "==", "'test'", ":", "\n", "        ", "transform_list", "=", "[", "\n", "A", ".", "Scale", "(", "args", ".", "img_resize_dim", ")", ",", "\n", "A", ".", "CenterCrop", "(", "size", "=", "args", ".", "img_dim", ")", ",", "\n", "A", ".", "ToTensor", "(", ")", "\n", "]", "\n", "if", "args", ".", "aug_crop", "and", "args", ".", "img_dim", "==", "112", ":", "\n", "            ", "transform_list", "[", "0", "]", "=", "A", ".", "Scale", "(", "size", "=", "(", "128", ",", "171", ")", ")", "\n", "\n", "", "", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.get_data": [[1036, 1059], ["args.logger.info", "dataset.local_dataset.UCF101LMDB", "dataset.local_dataset.UCF101_10CLIP", "dataset.local_dataset.HMDB51LMDB", "dataset.local_dataset.HMDB51_10CLIP"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info"], ["", "def", "get_data", "(", "transform", ",", "mode", ",", "args", ")", ":", "\n", "    ", "args", ".", "logger", ".", "info", "(", "'Loading data for \"%s\" mode'", "%", "mode", ")", "\n", "if", "args", ".", "dataset", "==", "'ucf101'", ":", "\n", "        ", "dataset", "=", "UCF101LMDB", "(", "mode", "=", "mode", ",", "transform", "=", "transform", ",", "\n", "num_frames", "=", "args", ".", "seq_len", "*", "args", ".", "num_seq", ",", "ds", "=", "args", ".", "ds", ",", "which_split", "=", "args", ".", "which_split", ",", "\n", "ft_mode", "=", "args", ".", "ft_mode", ",", "\n", "return_label", "=", "True", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'ucf101-10clip'", ":", "\n", "        ", "dataset", "=", "UCF101_10CLIP", "(", "mode", "=", "mode", ",", "transform", "=", "transform", ",", "\n", "num_frames", "=", "args", ".", "seq_len", ",", "ds", "=", "args", ".", "ds", ",", "which_split", "=", "args", ".", "which_split", ",", "\n", "return_label", "=", "True", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'hmdb51'", ":", "\n", "        ", "dataset", "=", "HMDB51LMDB", "(", "mode", "=", "mode", ",", "transform", "=", "transform", ",", "\n", "num_frames", "=", "args", ".", "seq_len", "*", "args", ".", "num_seq", ",", "ds", "=", "args", ".", "ds", ",", "which_split", "=", "args", ".", "which_split", ",", "\n", "ft_mode", "=", "args", ".", "ft_mode", ",", "\n", "return_label", "=", "True", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'hmdb51-10clip'", ":", "\n", "        ", "dataset", "=", "HMDB51_10CLIP", "(", "mode", "=", "mode", ",", "transform", "=", "transform", ",", "\n", "num_frames", "=", "args", ".", "seq_len", ",", "ds", "=", "args", ".", "ds", ",", "which_split", "=", "args", ".", "which_split", ",", "\n", "return_label", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.get_dataloader": [[1061, 1085], ["args.logger.info", "args.logger.info", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.RandomSampler", "utils.utils.FastDataLoader", "utils.utils.FastDataLoader", "utils.utils.FastDataLoader", "len"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info"], ["", "def", "get_dataloader", "(", "dataset", ",", "mode", ",", "args", ")", ":", "\n", "    ", "args", ".", "logger", ".", "info", "(", "\"Creating data loaders\"", ")", "\n", "train_sampler", "=", "data", ".", "distributed", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "True", ")", "if", "args", ".", "distributed", "else", "data", ".", "RandomSampler", "(", "dataset", ")", "\n", "val_sampler", "=", "None", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "data_loader", "=", "FastDataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "worker_init_fn", "=", "worker_init_fn", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "        ", "data_loader", "=", "FastDataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "val_sampler", "is", "None", ")", ",", "\n", "worker_init_fn", "=", "worker_init_fn", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "val_sampler", ",", "drop_last", "=", "True", ")", "\n", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "        ", "data_loader", "=", "FastDataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "\n", "worker_init_fn", "=", "worker_init_fn", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "args", ".", "logger", ".", "info", "(", "'\"%s\" dataset size: %d'", "%", "(", "mode", ",", "len", "(", "dataset", ")", ")", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.set_path": [[1087, 1117], ["os.path.join", "os.path.join", "os.path.join", "os.path.dirname", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["", "def", "set_path", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "resume", ":", "\n", "        ", "exp_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "resume", ")", ")", "\n", "", "elif", "args", ".", "test", ":", "\n", "        ", "exp_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "test", ")", ")", "\n", "", "else", ":", "\n", "        ", "exp_path", "=", "'log/{args.prefix}/ft/{args.name_prefix}'", ".", "format", "(", "\n", "args", "=", "args", ")", "\n", "", "if", "'ucf'", "in", "args", ".", "dataset", ":", "\n", "        ", "dataset_fold", "=", "'ucf'", "\n", "", "elif", "'hmdb'", "in", "args", ".", "dataset", ":", "\n", "        ", "dataset_fold", "=", "'hmdb'", "\n", "\n", "", "img_path", "=", "os", ".", "path", ".", "join", "(", "exp_path", ",", "dataset_fold", ",", "'img'", ")", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "exp_path", ",", "dataset_fold", ",", "'model'", ")", "\n", "if", "not", "args", ".", "test", ":", "\n", "        ", "log_file_name", "=", "'log'", "\n", "", "elif", "args", ".", "retrieval", ":", "\n", "        ", "log_file_name", "=", "'test_retrieval_log'", "\n", "", "elif", "not", "args", ".", "temporal_ten_clip", ":", "\n", "        ", "log_file_name", "=", "'test_log'", "\n", "", "else", ":", "\n", "        ", "log_file_name", "=", "'temporal_10_test_log'", "\n", "", "log_file", "=", "os", ".", "path", ".", "join", "(", "exp_path", ",", "dataset_fold", ",", "log_file_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "img_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "img_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_path", ")", "\n", "", "return", "img_path", ",", "model_path", ",", "exp_path", ",", "log_file", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda._SoftDTWCUDA.forward": [[120, 145], ["torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "max", "ctx.save_for_backward", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "numba.cuda.as_cuda_array", "torch.cuda.FloatTensor.item", "torch.cuda.FloatTensor.item", "torch.cuda.FloatTensor.item", "torch.cuda.FloatTensor.item", "numba.cuda.as_cuda_array", "D.detach"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "D", ",", "gamma", ",", "bandwidth", ")", ":", "\n", "        ", "dev", "=", "D", ".", "device", "\n", "dtype", "=", "D", ".", "dtype", "\n", "gamma", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "[", "gamma", "]", ")", "\n", "bandwidth", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "[", "bandwidth", "]", ")", "\n", "\n", "B", "=", "D", ".", "shape", "[", "0", "]", "\n", "N", "=", "D", ".", "shape", "[", "1", "]", "\n", "M", "=", "D", ".", "shape", "[", "2", "]", "\n", "threads_per_block", "=", "max", "(", "N", ",", "M", ")", "\n", "n_passes", "=", "2", "*", "threads_per_block", "-", "1", "\n", "\n", "# Prepare the output array", "\n", "R", "=", "torch", ".", "ones", "(", "(", "B", ",", "N", "+", "2", ",", "M", "+", "2", ")", ",", "device", "=", "dev", ",", "dtype", "=", "dtype", ")", "*", "math", ".", "inf", "\n", "R", "[", ":", ",", "0", ",", "0", "]", "=", "0", "\n", "\n", "# Run the CUDA kernel.", "\n", "# Set CUDA's grid size to be equal to the batch size (every CUDA block processes one sample pair)", "\n", "# Set the CUDA block size to be equal to the length of the longer sequence (equal to the size of the largest diagonal)", "\n", "compute_softdtw_cuda", "[", "B", ",", "threads_per_block", "]", "(", "cuda", ".", "as_cuda_array", "(", "D", ".", "detach", "(", ")", ")", ",", "\n", "gamma", ".", "item", "(", ")", ",", "bandwidth", ".", "item", "(", ")", ",", "N", ",", "M", ",", "n_passes", ",", "\n", "cuda", ".", "as_cuda_array", "(", "R", ")", ")", "\n", "ctx", ".", "save_for_backward", "(", "D", ",", "R", ",", "gamma", ",", "bandwidth", ")", "\n", "return", "R", "[", ":", ",", "-", "2", ",", "-", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda._SoftDTWCUDA.backward": [[146, 175], ["max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numba.cuda.as_cuda_array", "numba.cuda.as_cuda_array", "bandwidth.item", "numba.cuda.as_cuda_array", "gamma.item", "grad_output.view().expand_as", "grad_output.view"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "dev", "=", "grad_output", ".", "device", "\n", "dtype", "=", "grad_output", ".", "dtype", "\n", "D", ",", "R", ",", "gamma", ",", "bandwidth", "=", "ctx", ".", "saved_tensors", "\n", "\n", "B", "=", "D", ".", "shape", "[", "0", "]", "\n", "N", "=", "D", ".", "shape", "[", "1", "]", "\n", "M", "=", "D", ".", "shape", "[", "2", "]", "\n", "threads_per_block", "=", "max", "(", "N", ",", "M", ")", "\n", "n_passes", "=", "2", "*", "threads_per_block", "-", "1", "\n", "\n", "D_", "=", "torch", ".", "zeros", "(", "(", "B", ",", "N", "+", "2", ",", "M", "+", "2", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "dev", ")", "\n", "D_", "[", ":", ",", "1", ":", "N", "+", "1", ",", "1", ":", "M", "+", "1", "]", "=", "D", "\n", "\n", "R", "[", ":", ",", ":", ",", "-", "1", "]", "=", "-", "math", ".", "inf", "\n", "R", "[", ":", ",", "-", "1", ",", ":", "]", "=", "-", "math", ".", "inf", "\n", "R", "[", ":", ",", "-", "1", ",", "-", "1", "]", "=", "R", "[", ":", ",", "-", "2", ",", "-", "2", "]", "\n", "\n", "E", "=", "torch", ".", "zeros", "(", "(", "B", ",", "N", "+", "2", ",", "M", "+", "2", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "dev", ")", "\n", "E", "[", ":", ",", "-", "1", ",", "-", "1", "]", "=", "1", "\n", "\n", "# Grid and block sizes are set same as done above for the forward() call", "\n", "compute_softdtw_backward_cuda", "[", "B", ",", "threads_per_block", "]", "(", "cuda", ".", "as_cuda_array", "(", "D_", ")", ",", "\n", "cuda", ".", "as_cuda_array", "(", "R", ")", ",", "\n", "1.0", "/", "gamma", ".", "item", "(", ")", ",", "bandwidth", ".", "item", "(", ")", ",", "N", ",", "M", ",", "n_passes", ",", "\n", "cuda", ".", "as_cuda_array", "(", "E", ")", ")", "\n", "E", "=", "E", "[", ":", ",", "1", ":", "N", "+", "1", ",", "1", ":", "M", "+", "1", "]", "\n", "return", "grad_output", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "E", ")", "*", "E", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda._SoftDTW.forward": [[247, 259], ["torch.Tensor().to().type", "torch.Tensor().to().type", "torch.Tensor().to().type", "torch.Tensor().to().type", "torch.Tensor().to().type", "torch.Tensor().to().type", "torch.Tensor().to().type", "torch.Tensor().to().type", "D.detach().cpu().numpy", "torch.Tensor().to().type.item", "torch.Tensor().to().type.item", "torch.Tensor().to().type.item", "torch.Tensor().to().type.item", "torch.Tensor().to().type", "torch.Tensor().to().type", "torch.Tensor().to().type", "torch.Tensor().to().type", "ctx.save_for_backward", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "D.detach().cpu", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "D.detach", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "soft_dtw_cuda.compute_softdtw"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda.compute_softdtw"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "D", ",", "gamma", ",", "bandwidth", ")", ":", "\n", "        ", "dev", "=", "D", ".", "device", "\n", "dtype", "=", "D", ".", "dtype", "\n", "gamma", "=", "torch", ".", "Tensor", "(", "[", "gamma", "]", ")", ".", "to", "(", "dev", ")", ".", "type", "(", "dtype", ")", "# dtype fixed", "\n", "bandwidth", "=", "torch", ".", "Tensor", "(", "[", "bandwidth", "]", ")", ".", "to", "(", "dev", ")", ".", "type", "(", "dtype", ")", "\n", "D_", "=", "D", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "g_", "=", "gamma", ".", "item", "(", ")", "\n", "b_", "=", "bandwidth", ".", "item", "(", ")", "\n", "R", "=", "torch", ".", "Tensor", "(", "compute_softdtw", "(", "D_", ",", "g_", ",", "b_", ")", ")", ".", "to", "(", "dev", ")", ".", "type", "(", "dtype", ")", "\n", "ctx", ".", "save_for_backward", "(", "D", ",", "R", ",", "gamma", ",", "bandwidth", ")", "\n", "return", "R", "[", ":", ",", "-", "2", ",", "-", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda._SoftDTW.backward": [[260, 271], ["D.detach().cpu().numpy", "R.detach().cpu().numpy", "gamma.item", "bandwidth.item", "torch.Tensor().to().type", "torch.Tensor().to().type", "torch.Tensor().to().type", "torch.Tensor().to().type", "D.detach().cpu", "R.detach().cpu", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "grad_output.view().expand_as", "D.detach", "R.detach", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "grad_output.view", "soft_dtw_cuda.compute_softdtw_backward"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda.compute_softdtw_backward"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "dev", "=", "grad_output", ".", "device", "\n", "dtype", "=", "grad_output", ".", "dtype", "\n", "D", ",", "R", ",", "gamma", ",", "bandwidth", "=", "ctx", ".", "saved_tensors", "\n", "D_", "=", "D", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "R_", "=", "R", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "g_", "=", "gamma", ".", "item", "(", ")", "\n", "b_", "=", "bandwidth", ".", "item", "(", ")", "\n", "E", "=", "torch", ".", "Tensor", "(", "compute_softdtw_backward", "(", "D_", ",", "R_", ",", "g_", ",", "b_", ")", ")", ".", "to", "(", "dev", ")", ".", "type", "(", "dtype", ")", "\n", "return", "grad_output", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "E", ")", "*", "E", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda.SoftDTW.__init__": [[278, 299], ["super().__init__", "float"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["def", "__init__", "(", "self", ",", "use_cuda", ",", "gamma", "=", "1.0", ",", "normalize", "=", "False", ",", "bandwidth", "=", "None", ",", "dist_func", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initializes a new instance using the supplied parameters\n        :param use_cuda: Flag indicating whether the CUDA implementation should be used\n        :param gamma: sDTW's gamma parameter\n        :param normalize: Flag indicating whether to perform normalization\n                          (as discussed in https://github.com/mblondel/soft-dtw/issues/10#issuecomment-383564790)\n        :param bandwidth: Sakoe-Chiba bandwidth for pruning. Passing 'None' will disable pruning.\n        :param dist_func: Optional point-wise distance function to use. If 'None', then a default Euclidean distance function will be used.\n        \"\"\"", "\n", "super", "(", "SoftDTW", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "bandwidth", "=", "0", "if", "bandwidth", "is", "None", "else", "float", "(", "bandwidth", ")", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "\n", "# Set the distance function", "\n", "if", "dist_func", "is", "not", "None", ":", "\n", "            ", "self", ".", "dist_func", "=", "dist_func", "\n", "", "else", ":", "\n", "            ", "self", ".", "dist_func", "=", "SoftDTW", ".", "_similarity_dist_func", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda.SoftDTW._get_func_dtw": [[300, 308], ["None"], "methods", ["None"], ["", "", "def", "_get_func_dtw", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Checks the inputs and selects the proper implementation to use.\n        \"\"\"", "\n", "use_cuda", "=", "self", ".", "use_cuda", "\n", "\n", "# Finally, return the correct function", "\n", "return", "_SoftDTWCUDA", ".", "apply", "if", "use_cuda", "else", "_SoftDTW", ".", "apply", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda.SoftDTW._euclidean_dist_func": [[309, 320], ["x.unsqueeze().expand.unsqueeze().expand.size", "y.unsqueeze().expand.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "y.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "x.unsqueeze().expand.unsqueeze().expand.unsqueeze", "y.unsqueeze().expand.unsqueeze().expand.unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_euclidean_dist_func", "(", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Calculates the Euclidean distance between each element in x and y per timestep\n        \"\"\"", "\n", "n", "=", "x", ".", "size", "(", "1", ")", "\n", "m", "=", "y", ".", "size", "(", "1", ")", "\n", "d", "=", "x", ".", "size", "(", "2", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "n", ",", "m", ",", "d", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "n", ",", "m", ",", "d", ")", "\n", "return", "torch", ".", "pow", "(", "x", "-", "y", ",", "2", ")", ".", "sum", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda.SoftDTW._similarity_dist_func": [[321, 332], ["x.unsqueeze().expand.unsqueeze().expand.size", "y.unsqueeze().expand.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "y.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "x.unsqueeze().expand.unsqueeze().expand.unsqueeze", "y.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_similarity_dist_func", "(", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Calculates the Euclidean distance between each element in x and y per timestep\n        \"\"\"", "\n", "n", "=", "x", ".", "size", "(", "1", ")", "\n", "m", "=", "y", ".", "size", "(", "1", ")", "\n", "d", "=", "x", ".", "size", "(", "2", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "n", ",", "m", ",", "d", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "n", ",", "m", ",", "d", ")", "\n", "return", "(", "x", "*", "y", ")", ".", "sum", "(", "dim", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda.SoftDTW.forward": [[333, 344], ["soft_dtw_cuda.SoftDTW._get_func_dtw", "soft_dtw_cuda.SoftDTW."], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda.SoftDTW._get_func_dtw"], ["", "def", "forward", "(", "self", ",", "D_xy", ")", ":", "\n", "        ", "\"\"\"\n        Compute the soft-DTW value between X and Y\n        :param X: One batch of examples, batch_size x seq_len x dims\n        :param Y: The other batch of examples, batch_size x seq_len x dims\n        :return: The computed results\n        \"\"\"", "\n", "# Check the inputs and get the correct implementation", "\n", "func_dtw", "=", "self", ".", "_get_func_dtw", "(", ")", "\n", "\n", "return", "func_dtw", "(", "D_xy", ",", "self", ".", "gamma", ",", "self", ".", "bandwidth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda.compute_softdtw_cuda": [[33, 76], ["range", "max", "numba.cuda.syncthreads", "min", "max", "abs", "max", "math.exp", "math.exp", "math.exp", "math.log"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log"], ["@", "cuda", ".", "jit", "\n", "def", "compute_softdtw_cuda", "(", "D", ",", "gamma", ",", "bandwidth", ",", "max_i", ",", "max_j", ",", "n_passes", ",", "R", ")", ":", "\n", "    ", "\"\"\"\n    :param seq_len: The length of the sequence (both inputs are assumed to be of the same size)\n    :param n_passes: 2 * seq_len - 1 (The number of anti-diagonals)\n    \"\"\"", "\n", "# Each block processes one pair of examples", "\n", "b", "=", "cuda", ".", "blockIdx", ".", "x", "\n", "# We have as many threads as seq_len, because the most number of threads we need", "\n", "# is equal to the number of elements on the largest anti-diagonal", "\n", "tid", "=", "cuda", ".", "threadIdx", ".", "x", "\n", "\n", "# Compute I, J, the indices from [0, seq_len)", "\n", "\n", "# The row index is always the same as tid", "\n", "I", "=", "tid", "\n", "\n", "inv_gamma", "=", "1.0", "/", "gamma", "\n", "\n", "# Go over each anti-diagonal. Only process threads that fall on the current on the anti-diagonal", "\n", "for", "p", "in", "range", "(", "n_passes", ")", ":", "\n", "\n", "# The index is actually 'p - tid' but need to force it in-bounds", "\n", "        ", "J", "=", "max", "(", "0", ",", "min", "(", "p", "-", "tid", ",", "max_j", "-", "1", ")", ")", "\n", "\n", "# For simplicity, we define i, j which start from 1 (offset from I, J)", "\n", "i", "=", "I", "+", "1", "\n", "j", "=", "J", "+", "1", "\n", "\n", "# Only compute if element[i, j] is on the current anti-diagonal, and also is within bounds", "\n", "if", "I", "+", "J", "==", "p", "and", "(", "I", "<", "max_i", "and", "J", "<", "max_j", ")", ":", "\n", "# Don't compute if outside bandwidth", "\n", "            ", "if", "not", "(", "abs", "(", "i", "-", "j", ")", ">", "bandwidth", ">", "0", ")", ":", "\n", "                ", "r0", "=", "-", "R", "[", "b", ",", "i", "-", "1", ",", "j", "-", "1", "]", "*", "inv_gamma", "\n", "r1", "=", "-", "R", "[", "b", ",", "i", "-", "1", ",", "j", "]", "*", "inv_gamma", "\n", "r2", "=", "-", "R", "[", "b", ",", "i", ",", "j", "-", "1", "]", "*", "inv_gamma", "\n", "rmax", "=", "max", "(", "max", "(", "r0", ",", "r1", ")", ",", "r2", ")", "\n", "rsum", "=", "math", ".", "exp", "(", "r0", "-", "rmax", ")", "+", "math", ".", "exp", "(", "r1", "-", "rmax", ")", "+", "math", ".", "exp", "(", "r2", "-", "rmax", ")", "\n", "softmin", "=", "-", "gamma", "*", "(", "math", ".", "log", "(", "rsum", ")", "+", "rmax", ")", "\n", "R", "[", "b", ",", "i", ",", "j", "]", "=", "D", "[", "b", ",", "i", "-", "1", ",", "j", "-", "1", "]", "+", "softmin", "\n", "\n", "# Wait for other threads in this block", "\n", "", "", "cuda", ".", "syncthreads", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda.compute_softdtw_backward_cuda": [[78, 112], ["range", "max", "numba.cuda.syncthreads", "min", "math.isinf", "math.exp", "math.exp", "math.exp", "abs"], "function", ["None"], ["", "", "@", "cuda", ".", "jit", "\n", "def", "compute_softdtw_backward_cuda", "(", "D", ",", "R", ",", "inv_gamma", ",", "bandwidth", ",", "max_i", ",", "max_j", ",", "n_passes", ",", "E", ")", ":", "\n", "    ", "k", "=", "cuda", ".", "blockIdx", ".", "x", "\n", "tid", "=", "cuda", ".", "threadIdx", ".", "x", "\n", "\n", "# Indexing logic is the same as above, however, the anti-diagonal needs to", "\n", "# progress backwards", "\n", "I", "=", "tid", "\n", "\n", "for", "p", "in", "range", "(", "n_passes", ")", ":", "\n", "# Reverse the order to make the loop go backward", "\n", "        ", "rev_p", "=", "n_passes", "-", "p", "-", "1", "\n", "\n", "# convert tid to I, J, then i, j", "\n", "J", "=", "max", "(", "0", ",", "min", "(", "rev_p", "-", "tid", ",", "max_j", "-", "1", ")", ")", "\n", "\n", "i", "=", "I", "+", "1", "\n", "j", "=", "J", "+", "1", "\n", "\n", "# Only compute if element[i, j] is on the current anti-diagonal, and also is within bounds", "\n", "if", "I", "+", "J", "==", "rev_p", "and", "(", "I", "<", "max_i", "and", "J", "<", "max_j", ")", ":", "\n", "\n", "            ", "if", "math", ".", "isinf", "(", "R", "[", "k", ",", "i", ",", "j", "]", ")", ":", "\n", "                ", "R", "[", "k", ",", "i", ",", "j", "]", "=", "-", "math", ".", "inf", "\n", "\n", "# Don't compute if outside bandwidth", "\n", "", "if", "not", "(", "abs", "(", "i", "-", "j", ")", ">", "bandwidth", ">", "0", ")", ":", "\n", "                ", "a", "=", "math", ".", "exp", "(", "(", "R", "[", "k", ",", "i", "+", "1", ",", "j", "]", "-", "R", "[", "k", ",", "i", ",", "j", "]", "-", "D", "[", "k", ",", "i", "+", "1", ",", "j", "]", ")", "*", "inv_gamma", ")", "\n", "b", "=", "math", ".", "exp", "(", "(", "R", "[", "k", ",", "i", ",", "j", "+", "1", "]", "-", "R", "[", "k", ",", "i", ",", "j", "]", "-", "D", "[", "k", ",", "i", ",", "j", "+", "1", "]", ")", "*", "inv_gamma", ")", "\n", "c", "=", "math", ".", "exp", "(", "(", "R", "[", "k", ",", "i", "+", "1", ",", "j", "+", "1", "]", "-", "R", "[", "k", ",", "i", ",", "j", "]", "-", "D", "[", "k", ",", "i", "+", "1", ",", "j", "+", "1", "]", ")", "*", "inv_gamma", ")", "\n", "E", "[", "k", ",", "i", ",", "j", "]", "=", "E", "[", "k", ",", "i", "+", "1", ",", "j", "]", "*", "a", "+", "E", "[", "k", ",", "i", ",", "j", "+", "1", "]", "*", "b", "+", "E", "[", "k", ",", "i", "+", "1", ",", "j", "+", "1", "]", "*", "c", "\n", "\n", "# Wait for other threads in this block", "\n", "", "", "cuda", ".", "syncthreads", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda.compute_softdtw": [[184, 207], ["numba.jit", "range", "numpy.ones", "range", "range", "max", "numpy.abs", "max", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.log"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log"], ["", "", "@", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "compute_softdtw", "(", "D", ",", "gamma", ",", "bandwidth", ")", ":", "\n", "    ", "B", "=", "D", ".", "shape", "[", "0", "]", "\n", "N", "=", "D", ".", "shape", "[", "1", "]", "\n", "M", "=", "D", ".", "shape", "[", "2", "]", "\n", "R", "=", "np", ".", "ones", "(", "(", "B", ",", "N", "+", "2", ",", "M", "+", "2", ")", ")", "*", "np", ".", "inf", "\n", "R", "[", ":", ",", "0", ",", "0", "]", "=", "0", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "M", "+", "1", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "N", "+", "1", ")", ":", "\n", "\n", "# Check the pruning condition", "\n", "                ", "if", "0", "<", "bandwidth", "<", "np", ".", "abs", "(", "i", "-", "j", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "r0", "=", "-", "R", "[", "b", ",", "i", "-", "1", ",", "j", "-", "1", "]", "/", "gamma", "\n", "r1", "=", "-", "R", "[", "b", ",", "i", "-", "1", ",", "j", "]", "/", "gamma", "\n", "r2", "=", "-", "R", "[", "b", ",", "i", ",", "j", "-", "1", "]", "/", "gamma", "\n", "rmax", "=", "max", "(", "max", "(", "r0", ",", "r1", ")", ",", "r2", ")", "\n", "rsum", "=", "np", ".", "exp", "(", "r0", "-", "rmax", ")", "+", "np", ".", "exp", "(", "r1", "-", "rmax", ")", "+", "np", ".", "exp", "(", "r2", "-", "rmax", ")", "\n", "softmin", "=", "-", "gamma", "*", "(", "np", ".", "log", "(", "rsum", ")", "+", "rmax", ")", "\n", "R", "[", "b", ",", "i", ",", "j", "]", "=", "D", "[", "b", ",", "i", "-", "1", ",", "j", "-", "1", "]", "+", "softmin", "\n", "", "", "", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda.compute_softdtw_backward": [[209, 240], ["numba.jit", "numpy.zeros", "numpy.zeros", "range", "range", "range", "numpy.isinf", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.abs"], "function", ["None"], ["", "@", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "compute_softdtw_backward", "(", "D_", ",", "R", ",", "gamma", ",", "bandwidth", ")", ":", "\n", "    ", "B", "=", "D_", ".", "shape", "[", "0", "]", "\n", "N", "=", "D_", ".", "shape", "[", "1", "]", "\n", "M", "=", "D_", ".", "shape", "[", "2", "]", "\n", "D", "=", "np", ".", "zeros", "(", "(", "B", ",", "N", "+", "2", ",", "M", "+", "2", ")", ")", "\n", "E", "=", "np", ".", "zeros", "(", "(", "B", ",", "N", "+", "2", ",", "M", "+", "2", ")", ")", "\n", "D", "[", ":", ",", "1", ":", "N", "+", "1", ",", "1", ":", "M", "+", "1", "]", "=", "D_", "\n", "E", "[", ":", ",", "-", "1", ",", "-", "1", "]", "=", "1", "\n", "R", "[", ":", ",", ":", ",", "-", "1", "]", "=", "-", "np", ".", "inf", "\n", "R", "[", ":", ",", "-", "1", ",", ":", "]", "=", "-", "np", ".", "inf", "\n", "R", "[", ":", ",", "-", "1", ",", "-", "1", "]", "=", "R", "[", ":", ",", "-", "2", ",", "-", "2", "]", "\n", "for", "k", "in", "range", "(", "B", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "M", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "N", ",", "0", ",", "-", "1", ")", ":", "\n", "\n", "                ", "if", "np", ".", "isinf", "(", "R", "[", "k", ",", "i", ",", "j", "]", ")", ":", "\n", "                    ", "R", "[", "k", ",", "i", ",", "j", "]", "=", "-", "np", ".", "inf", "\n", "\n", "# Check the pruning condition", "\n", "", "if", "0", "<", "bandwidth", "<", "np", ".", "abs", "(", "i", "-", "j", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "a0", "=", "(", "R", "[", "k", ",", "i", "+", "1", ",", "j", "]", "-", "R", "[", "k", ",", "i", ",", "j", "]", "-", "D", "[", "k", ",", "i", "+", "1", ",", "j", "]", ")", "/", "gamma", "\n", "b0", "=", "(", "R", "[", "k", ",", "i", ",", "j", "+", "1", "]", "-", "R", "[", "k", ",", "i", ",", "j", "]", "-", "D", "[", "k", ",", "i", ",", "j", "+", "1", "]", ")", "/", "gamma", "\n", "c0", "=", "(", "R", "[", "k", ",", "i", "+", "1", ",", "j", "+", "1", "]", "-", "R", "[", "k", ",", "i", ",", "j", "]", "-", "D", "[", "k", ",", "i", "+", "1", ",", "j", "+", "1", "]", ")", "/", "gamma", "\n", "a", "=", "np", ".", "exp", "(", "a0", ")", "\n", "b", "=", "np", ".", "exp", "(", "b0", ")", "\n", "c", "=", "np", ".", "exp", "(", "c0", ")", "\n", "E", "[", "k", ",", "i", ",", "j", "]", "=", "E", "[", "k", ",", "i", "+", "1", ",", "j", "]", "*", "a", "+", "E", "[", "k", ",", "i", ",", "j", "+", "1", "]", "*", "b", "+", "E", "[", "k", ",", "i", "+", "1", ",", "j", "+", "1", "]", "*", "c", "\n", "", "", "", "return", "E", "[", ":", ",", "1", ":", "N", "+", "1", ",", "1", ":", "M", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda.timed_run": [[346, 371], ["timer", "sdtw", "timer", "torch.ones_like", "torch.ones_like", "timer", "timer", "torch.autograd.grad", "torch.autograd.grad"], "function", ["None"], ["", "", "def", "timed_run", "(", "a", ",", "b", ",", "sdtw", ")", ":", "\n", "    ", "\"\"\"\n    Runs a and b through sdtw, and times the forward and backward passes.\n    Assumes that a requires gradients.\n    :return: timing, forward result, backward result\n    \"\"\"", "\n", "from", "timeit", "import", "default_timer", "as", "timer", "\n", "\n", "# Forward pass", "\n", "start", "=", "timer", "(", ")", "\n", "forward", "=", "sdtw", "(", "a", ",", "b", ")", "\n", "end", "=", "timer", "(", ")", "\n", "t", "=", "end", "-", "start", "\n", "\n", "grad_outputs", "=", "torch", ".", "ones_like", "(", "forward", ")", "\n", "\n", "# Backward", "\n", "start", "=", "timer", "(", ")", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "forward", ",", "a", ",", "grad_outputs", "=", "grad_outputs", ")", "[", "0", "]", "\n", "end", "=", "timer", "(", ")", "\n", "\n", "# Total time", "\n", "t", "+=", "end", "-", "start", "\n", "\n", "return", "t", ",", "forward", ",", "grads", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda.profile": [[373, 410], ["soft_dtw_cuda.SoftDTW", "soft_dtw_cuda.SoftDTW", "print", "range", "numpy.mean", "numpy.mean", "print", "print", "print", "print", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand.cuda", "torch.rand.cuda", "soft_dtw_cuda.timed_run", "soft_dtw_cuda.timed_run", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "forward_gpu.cpu", "backward_gpu.cpu"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda.timed_run", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.soft_dtw_cuda.timed_run"], ["", "def", "profile", "(", "batch_size", ",", "seq_len_a", ",", "seq_len_b", ",", "dims", ",", "tol_backward", ")", ":", "\n", "    ", "sdtw", "=", "SoftDTW", "(", "False", ",", "gamma", "=", "1.0", ",", "normalize", "=", "False", ")", "\n", "sdtw_cuda", "=", "SoftDTW", "(", "True", ",", "gamma", "=", "1.0", ",", "normalize", "=", "False", ")", "\n", "n_iters", "=", "6", "\n", "\n", "print", "(", "\"Profiling forward() + backward() times for batch_size={}, seq_len_a={}, seq_len_b={}, dims={}...\"", ".", "format", "(", "batch_size", ",", "seq_len_a", ",", "seq_len_b", ",", "dims", ")", ")", "\n", "\n", "times_cpu", "=", "[", "]", "\n", "times_gpu", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_iters", ")", ":", "\n", "        ", "a_cpu", "=", "torch", ".", "rand", "(", "(", "batch_size", ",", "seq_len_a", ",", "dims", ")", ",", "requires_grad", "=", "True", ")", "\n", "b_cpu", "=", "torch", ".", "rand", "(", "(", "batch_size", ",", "seq_len_b", ",", "dims", ")", ")", "\n", "a_gpu", "=", "a_cpu", ".", "cuda", "(", ")", "\n", "b_gpu", "=", "b_cpu", ".", "cuda", "(", ")", "\n", "\n", "# GPU", "\n", "t_gpu", ",", "forward_gpu", ",", "backward_gpu", "=", "timed_run", "(", "a_gpu", ",", "b_gpu", ",", "sdtw_cuda", ")", "\n", "\n", "# CPU", "\n", "t_cpu", ",", "forward_cpu", ",", "backward_cpu", "=", "timed_run", "(", "a_cpu", ",", "b_cpu", ",", "sdtw", ")", "\n", "\n", "# Verify the results", "\n", "assert", "torch", ".", "allclose", "(", "forward_cpu", ",", "forward_gpu", ".", "cpu", "(", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "backward_cpu", ",", "backward_gpu", ".", "cpu", "(", ")", ",", "atol", "=", "tol_backward", ")", "\n", "\n", "if", "i", ">", "0", ":", "# Ignore the first time we run, in case this is a cold start (because timings are off at a cold start of the script)", "\n", "            ", "times_cpu", "+=", "[", "t_cpu", "]", "\n", "times_gpu", "+=", "[", "t_gpu", "]", "\n", "\n", "# Average and log", "\n", "", "", "avg_cpu", "=", "np", ".", "mean", "(", "times_cpu", ")", "\n", "avg_gpu", "=", "np", ".", "mean", "(", "times_gpu", ")", "\n", "print", "(", "\"\\tCPU:     \"", ",", "avg_cpu", ")", "\n", "print", "(", "\"\\tGPU:     \"", ",", "avg_gpu", ")", "\n", "print", "(", "\"\\tSpeedup: \"", ",", "avg_cpu", "/", "avg_gpu", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.Stack.__init__": [[196, 198], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "1", ")", ":", "\n", "        ", "self", ".", "dim", "=", "dim", "\n", "", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.Stack.__call__": [[198, 200], ["torch.stack"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "imgmap", ",", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.RandomCrop.__init__": [[202, 204], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.RandomCrop.get_params": [[205, 216], ["random.randint", "random.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "vid", ",", "output_size", ")", ":", "\n", "        ", "\"\"\"Get parameters for ``crop`` for a random crop.\n        \"\"\"", "\n", "h", ",", "w", "=", "vid", ".", "shape", "[", "-", "2", ":", "]", "\n", "th", ",", "tw", "=", "output_size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "0", ",", "0", ",", "h", ",", "w", "\n", "", "i", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "return", "i", ",", "j", ",", "th", ",", "tw", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.RandomCrop.__call__": [[217, 220], ["transforms.RandomCrop.get_params", "transforms.crop"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter.get_params", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.crop"], ["", "def", "__call__", "(", "self", ",", "vid", ")", ":", "\n", "        ", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "vid", ",", "self", ".", "size", ")", "\n", "return", "crop", "(", "vid", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.RandomSizedCrop.__init__": [[222, 224], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.RandomSizedCrop.get_params": [[225, 244], ["range", "random.randint", "random.randint", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "vid", ",", "output_size", ")", ":", "\n", "        ", "\"\"\"Get parameters for ``crop`` for a random sized crop.\n        \"\"\"", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "h", ",", "w", "=", "vid", ".", "shape", "[", "-", "2", ":", "]", "\n", "area", "=", "h", "*", "w", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.5", ",", "1", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "3.", "/", "4", ",", "4.", "/", "3", ")", "\n", "tw", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "th", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "if", "tw", "<=", "w", "and", "th", "<=", "h", ":", "\n", "                ", "i", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "return", "i", ",", "j", ",", "th", ",", "tw", "\n", "", "", "th", ",", "tw", "=", "output_size", "\n", "i", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "return", "i", ",", "j", ",", "th", ",", "tw", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.RandomSizedCrop.__call__": [[245, 248], ["transforms.RandomSizedCrop.get_params", "transforms.resize", "transforms.crop"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter.get_params", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.resize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.crop"], ["", "def", "__call__", "(", "self", ",", "vid", ")", ":", "\n", "        ", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "vid", ",", "self", ".", "size", ")", "\n", "return", "resize", "(", "crop", "(", "vid", ",", "i", ",", "j", ",", "h", ",", "w", ")", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.CenterCrop.__init__": [[251, 253], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.CenterCrop.__call__": [[254, 256], ["transforms.center_crop"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.center_crop"], ["", "def", "__call__", "(", "self", ",", "vid", ")", ":", "\n", "        ", "return", "center_crop", "(", "vid", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.Resize.__init__": [[259, 261], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.Resize.__call__": [[262, 264], ["transforms.resize"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.resize"], ["", "def", "__call__", "(", "self", ",", "vid", ")", ":", "\n", "        ", "return", "resize", "(", "vid", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.ToFloatTensorInZeroOne.__call__": [[267, 269], ["transforms.to_normalized_float_tensor"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.to_normalized_float_tensor"], ["    ", "def", "__call__", "(", "self", ",", "vid", ")", ":", "\n", "        ", "return", "to_normalized_float_tensor", "(", "vid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.ToFloatTensor.__call__": [[272, 274], ["transforms.to_float_tensor"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.to_float_tensor"], ["    ", "def", "__call__", "(", "self", ",", "vid", ")", ":", "\n", "        ", "return", "to_float_tensor", "(", "vid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.Normalize.__init__": [[277, 281], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "channel", "=", "0", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "channel", "=", "channel", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.Normalize.__call__": [[282, 284], ["transforms.normalize"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize"], ["", "def", "__call__", "(", "self", ",", "vid", ")", ":", "\n", "        ", "return", "normalize", "(", "vid", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.RandomHorizontalFlip.__init__": [[287, 289], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.RandomHorizontalFlip.__call__": [[290, 294], ["random.random", "transforms.hflip"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.hflip"], ["", "def", "__call__", "(", "self", ",", "vid", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "hflip", "(", "vid", ")", "\n", "", "return", "vid", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.Pad.__init__": [[297, 300], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "padding", ",", "fill", "=", "0", ")", ":", "\n", "        ", "self", ".", "padding", "=", "padding", "\n", "self", ".", "fill", "=", "fill", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.Pad.__call__": [[301, 303], ["transforms.pad"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.pad"], ["", "def", "__call__", "(", "self", ",", "vid", ")", ":", "\n", "        ", "return", "pad", "(", "vid", ",", "self", ".", "padding", ",", "self", ".", "fill", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.RandomGray.__init__": [[306, 308], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.RandomGray.__call__": [[309, 311], ["transforms.random_grayscale"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.random_grayscale"], ["", "def", "__call__", "(", "self", ",", "vid", ")", ":", "\n", "        ", "return", "random_grayscale", "(", "vid", ",", "self", ".", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.ColorJitter.__init__": [[314, 323], ["transforms.ColorJitter._check_input", "transforms.ColorJitter._check_input", "transforms.ColorJitter._check_input"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter._check_input", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter._check_input", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter._check_input"], ["    ", "def", "__init__", "(", "self", ",", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "saturation", "=", "0", ",", "\n", "consistent", "=", "False", ",", "p", "=", "1.0", ",", "n_channel", "=", "1", ",", "gray_channel", "=", "0", ")", ":", "\n", "        ", "self", ".", "brightness", "=", "self", ".", "_check_input", "(", "brightness", ",", "'brightness'", ")", "\n", "self", ".", "contrast", "=", "self", ".", "_check_input", "(", "contrast", ",", "'contrast'", ")", "\n", "self", ".", "saturation", "=", "self", ".", "_check_input", "(", "saturation", ",", "'saturation'", ")", "\n", "self", ".", "consistent", "=", "consistent", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "n_channel", "=", "n_channel", "\n", "self", ".", "gray_channel", "=", "gray_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.ColorJitter._check_input": [[324, 340], ["isinstance", "float", "ValueError", "isinstance", "TypeError", "len", "ValueError"], "methods", ["None"], ["", "def", "_check_input", "(", "self", ",", "value", ",", "name", ",", "center", "=", "1", ",", "bound", "=", "(", "0", ",", "float", "(", "'inf'", ")", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "if", "value", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"If {} is a single number, it must be non negative.\"", ".", "format", "(", "name", ")", ")", "\n", "", "value", "=", "[", "center", "-", "value", ",", "center", "+", "value", "]", "\n", "", "elif", "isinstance", "(", "value", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "value", ")", "==", "2", ":", "\n", "            ", "if", "not", "bound", "[", "0", "]", "<=", "value", "[", "0", "]", "<=", "value", "[", "1", "]", "<=", "bound", "[", "1", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"{} values should be between {}\"", ".", "format", "(", "name", ",", "bound", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"{} should be a single number or a list/tuple with lenght 2.\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "# if value is 0 or (1., 1.) for brightness/contrast/saturation", "\n", "# or (0., 0.) for hue, do nothing", "\n", "", "if", "value", "[", "0", "]", "==", "value", "[", "1", "]", "==", "center", ":", "\n", "            ", "value", "=", "None", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.ColorJitter.get_params": [[341, 367], ["random.shuffle", "torchvision.transforms.Compose", "transforms.append", "transforms.append", "transforms.append", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "transforms.random_adjust_brightness", "transforms.random_adjust_contrast", "transforms.random_adjust_saturation"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.random_adjust_brightness", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.random_adjust_contrast", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.random_adjust_saturation"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "brightness", ",", "contrast", ",", "saturation", ",", "consistent", ",", "n_channel", ",", "gray_channel", ")", ":", "\n", "        ", "\"\"\"Get a randomized transform to be applied on image.\n        Arguments are same as that of __init__.\n        Returns:\n            Transform which randomly adjusts brightness, contrast and\n            saturation in a random order.\n        \"\"\"", "\n", "transforms", "=", "[", "]", "\n", "\n", "if", "brightness", "is", "not", "None", ":", "\n", "            ", "transforms", ".", "append", "(", "torchvision", ".", "transforms", ".", "Lambda", "(", "lambda", "vid", ":", "\n", "random_adjust_brightness", "(", "vid", ",", "brightness", ",", "consistent", ",", "n_channel", ")", ")", ")", "\n", "\n", "", "if", "contrast", "is", "not", "None", ":", "\n", "            ", "transforms", ".", "append", "(", "torchvision", ".", "transforms", ".", "Lambda", "(", "lambda", "vid", ":", "\n", "random_adjust_contrast", "(", "vid", ",", "contrast", ",", "consistent", ",", "n_channel", ",", "gray_channel", ")", ")", ")", "\n", "\n", "", "if", "saturation", "is", "not", "None", ":", "\n", "            ", "transforms", ".", "append", "(", "torchvision", ".", "transforms", ".", "Lambda", "(", "lambda", "vid", ":", "\n", "random_adjust_saturation", "(", "vid", ",", "saturation", ",", "consistent", ",", "n_channel", ",", "gray_channel", ")", ")", ")", "\n", "\n", "", "random", ".", "shuffle", "(", "transforms", ")", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "transforms", ")", "\n", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.ColorJitter.__call__": [[368, 374], ["random.random", "transforms.ColorJitter.get_params", "transforms.ColorJitter."], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter.get_params"], ["", "def", "__call__", "(", "self", ",", "vid", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "transform", "=", "self", ".", "get_params", "(", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "self", ".", "saturation", ",", "\n", "self", ".", "consistent", ",", "self", ".", "n_channel", ",", "self", ".", "gray_channel", ")", "\n", "return", "transform", "(", "vid", ")", "\n", "", "return", "vid", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.ColorJitter.__repr__": [[375, 381], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "format_string", "+=", "'brightness={0}'", ".", "format", "(", "self", ".", "brightness", ")", "\n", "format_string", "+=", "', contrast={0}'", ".", "format", "(", "self", ".", "contrast", ")", "\n", "format_string", "+=", "', saturation={0}'", ".", "format", "(", "self", ".", "saturation", ")", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.crop": [[13, 15], ["None"], "function", ["None"], ["def", "crop", "(", "vid", ",", "i", ",", "j", ",", "h", ",", "w", ")", ":", "\n", "    ", "return", "vid", "[", "...", ",", "i", ":", "(", "i", "+", "h", ")", ",", "j", ":", "(", "j", "+", "w", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.center_crop": [[17, 24], ["int", "int", "transforms.crop", "round", "round"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.crop"], ["", "def", "center_crop", "(", "vid", ",", "output_size", ")", ":", "\n", "    ", "h", ",", "w", "=", "vid", ".", "shape", "[", "-", "2", ":", "]", "\n", "th", ",", "tw", "=", "output_size", "\n", "\n", "i", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "j", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "return", "crop", "(", "vid", ",", "i", ",", "j", ",", "th", ",", "tw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.hflip": [[26, 28], ["vid.flip"], "function", ["None"], ["", "def", "hflip", "(", "vid", ")", ":", "\n", "    ", "return", "vid", ".", "flip", "(", "dims", "=", "(", "-", "1", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.resize": [[33, 42], ["isinstance", "torch.nn.functional.interpolate", "float", "min"], "function", ["None"], ["", "def", "resize", "(", "vid", ",", "size", ",", "interpolation", "=", "'bilinear'", ")", ":", "\n", "# NOTE: using bilinear interpolation because we don't work on minibatches", "\n", "# at this level", "\n", "    ", "scale", "=", "None", "\n", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "        ", "scale", "=", "float", "(", "size", ")", "/", "min", "(", "vid", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "size", "=", "None", "\n", "", "return", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "vid", ",", "size", "=", "size", ",", "scale_factor", "=", "scale", ",", "mode", "=", "interpolation", ",", "align_corners", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.pad": [[44, 48], ["torch.nn.functional.pad"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.pad"], ["", "def", "pad", "(", "vid", ",", "padding", ",", "fill", "=", "0", ",", "padding_mode", "=", "\"constant\"", ")", ":", "\n", "# NOTE: don't want to pad on temporal dimension, so let as non-batch", "\n", "# (4d) before padding. This works as expected", "\n", "    ", "return", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "vid", ",", "padding", ",", "value", "=", "fill", ",", "mode", "=", "padding_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.to_normalized_float_tensor": [[49, 51], ["vid.permute().to", "vid.permute"], "function", ["None"], ["", "def", "to_normalized_float_tensor", "(", "vid", ")", ":", "\n", "    ", "return", "vid", ".", "permute", "(", "3", ",", "0", ",", "1", ",", "2", ")", ".", "to", "(", "torch", ".", "float32", ")", "/", "255", "\n", "# [N,H,W,C] -> [C,N,H,W]", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.to_float_tensor": [[53, 55], ["vid.permute().to", "vid.permute"], "function", ["None"], ["", "def", "to_float_tensor", "(", "vid", ")", ":", "\n", "    ", "return", "vid", ".", "permute", "(", "3", ",", "0", ",", "1", ",", "2", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "# [N,H,W,C] -> [C,N,H,W]", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize": [[57, 64], ["torch.as_tensor().to().reshape", "torch.as_tensor().to().reshape", "vid.size", "vid.dim", "torch.as_tensor().to", "torch.as_tensor().to", "torch.as_tensor", "torch.as_tensor"], "function", ["None"], ["", "def", "normalize", "(", "vid", ",", "mean", ",", "std", ",", "channel", "=", "0", ")", ":", "\n", "# shape = (-1,) + (1,) * (vid.dim() - 1)", "\n", "    ", "assert", "vid", ".", "size", "(", "channel", ")", "==", "3", "\n", "shape", "=", "[", "1", "]", "*", "vid", ".", "dim", "(", ")", ";", "shape", "[", "channel", "]", "=", "-", "1", "\n", "mean", "=", "torch", ".", "as_tensor", "(", "mean", ")", ".", "to", "(", "vid", ".", "device", ")", ".", "reshape", "(", "shape", ")", "\n", "std", "=", "torch", ".", "as_tensor", "(", "std", ")", ".", "to", "(", "vid", ".", "device", ")", ".", "reshape", "(", "shape", ")", "\n", "return", "(", "vid", "-", "mean", ")", "/", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.rgb_to_grayscale": [[66, 79], ["vid.size", "vid.select", "vid.select", "vid.select"], "function", ["None"], ["", "def", "rgb_to_grayscale", "(", "vid", ",", "channel", "=", "0", ")", ":", "\n", "    ", "\"\"\"Convert the given RGB Image Tensor to Grayscale.\n    For RGB to Grayscale conversion, ITU-R 601-2 luma transform is performed which\n    is L = R * 0.2989 + G * 0.5870 + B * 0.1140\n    Args:\n        vid (Tensor): Image to be converted to Grayscale in the form [C, N, H, W].\n        channel: color channel\n    Returns:\n        Tensor: Grayscale video tensor [C, N, H, W].\n    \"\"\"", "\n", "assert", "vid", ".", "size", "(", "channel", ")", "==", "3", "\n", "\n", "return", "(", "0.2989", "*", "vid", ".", "select", "(", "channel", ",", "0", ")", "+", "0.5870", "*", "vid", ".", "select", "(", "channel", ",", "1", ")", "+", "0.1140", "*", "vid", ".", "select", "(", "channel", ",", "2", ")", ")", ".", "to", "(", "vid", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.random_grayscale": [[80, 88], ["vid.size", "torch.tensor().to().float().view", "rgb_to_grayscale().unsqueeze", "numpy.random.uniform", "torch.tensor().to().float().view.sum", "vid.dim", "torch.tensor().to().float", "transforms.rgb_to_grayscale", "torch.tensor().to", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.rgb_to_grayscale"], ["", "def", "random_grayscale", "(", "vid", ",", "factor", ",", "channel", "=", "1", ")", ":", "\n", "    ", "N", "=", "vid", ".", "size", "(", "channel", ")", "\n", "gray_map", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "N", ",", ")", ")", "<", "factor", "\n", "if", "gray_map", ".", "sum", "(", ")", "==", "0", ":", "return", "vid", "\n", "shape", "=", "[", "1", "]", "*", "vid", ".", "dim", "(", ")", ";", "shape", "[", "channel", "]", "=", "N", "\n", "gray_map", "=", "torch", ".", "tensor", "(", "gray_map", ")", ".", "to", "(", "vid", ".", "device", ")", ".", "float", "(", ")", ".", "view", "(", "shape", ")", "\n", "gray", "=", "rgb_to_grayscale", "(", "vid", ",", "channel", ")", ".", "unsqueeze", "(", "channel", ")", "\n", "return", "gray", "*", "gray_map", "+", "vid", "*", "(", "1", "-", "gray_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_brightness": [[90, 107], ["brightness_factor.view.size", "brightness_factor.view.view", "transforms._blend", "vid.size", "vid.dim"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms._blend"], ["", "def", "adjust_brightness", "(", "vid", ",", "brightness_factor", ",", "channel", "=", "1", ")", ":", "\n", "    ", "\"\"\"Adjust brightness of an RGB image.\n    Args:\n        vid (Tensor): Video to be adjusted [C,N,H,W].\n        brightness_factor (1D float tensor):  How much to adjust the brightness. Can be\n            any non negative number. 0 gives a black image, 1 gives the\n            original image while 2 increases the brightness by a factor of 2.\n        channel: N channel\n    Returns:\n        Tensor: Brightness adjusted video.\n    \"\"\"", "\n", "N", "=", "brightness_factor", ".", "size", "(", "0", ")", "\n", "assert", "vid", ".", "size", "(", "channel", ")", "==", "N", "\n", "shape", "=", "[", "1", "]", "*", "vid", ".", "dim", "(", ")", ";", "shape", "[", "channel", "]", "=", "N", "\n", "brightness_factor", "=", "brightness_factor", ".", "view", "(", "shape", ")", "\n", "\n", "return", "_blend", "(", "vid", ",", "0", ",", "brightness_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_contrast": [[109, 137], ["contrast_factor.view.size", "contrast_factor.view.view", "rgb_to_grayscale().to", "mean_gray.mean.view", "transforms._blend", "vid.size", "vid.dim", "index.remove", "index.remove", "mean_gray.mean.mean", "transforms.rgb_to_grayscale", "range", "vid.dim"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms._blend", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.rgb_to_grayscale"], ["", "def", "adjust_contrast", "(", "vid", ",", "contrast_factor", ",", "channel", "=", "1", ",", "gray_channel", "=", "0", ")", ":", "\n", "    ", "\"\"\"Adjust contrast of an RGB image.\n    Args:\n        vid (Tensor): Video to be adjusted [C,N,H,W].\n        contrast_factor (1D float tensor): How much to adjust the contrast. Can be any\n            non negative number. 0 gives a solid gray image, 1 gives the\n            original image while 2 increases the contrast by a factor of 2.\n        channel: N channel\n        gray_channel: gray channel of vid\n    Returns:\n        Tensor: Contrast adjusted video.\n    \"\"\"", "\n", "N", "=", "contrast_factor", ".", "size", "(", "0", ")", "\n", "assert", "vid", ".", "size", "(", "channel", ")", "==", "N", "\n", "shape", "=", "[", "1", "]", "*", "vid", ".", "dim", "(", ")", ";", "shape", "[", "channel", "]", "=", "N", "\n", "contrast_factor", "=", "contrast_factor", ".", "view", "(", "shape", ")", "\n", "# mean = rgb_to_grayscale(vid).to(torch.float).mean(1, keepdim=True).mean(2, keepdim=True)", "\n", "# mean: [N,1,1]", "\n", "mean_gray", "=", "rgb_to_grayscale", "(", "vid", ",", "gray_channel", ")", ".", "to", "(", "torch", ".", "float", ")", "# not mean yet", "\n", "index", "=", "[", "i", "for", "i", "in", "range", "(", "vid", ".", "dim", "(", ")", "-", "1", ")", "]", "[", ":", ":", "-", "1", "]", "\n", "if", "gray_channel", "<", "channel", ":", "\n", "        ", "index", ".", "remove", "(", "channel", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "index", ".", "remove", "(", "channel", ")", "\n", "", "for", "i", "in", "index", ":", "\n", "        ", "mean_gray", "=", "mean_gray", ".", "mean", "(", "i", ")", "\n", "", "mean_gray", "=", "mean_gray", ".", "view", "(", "shape", ")", "\n", "return", "_blend", "(", "vid", ",", "mean_gray", ",", "contrast_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_saturation": [[139, 157], ["saturation_factor.view.size", "saturation_factor.view.view", "transforms._blend", "vid.size", "vid.dim", "rgb_to_grayscale().unsqueeze", "transforms.rgb_to_grayscale"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms._blend", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.rgb_to_grayscale"], ["", "def", "adjust_saturation", "(", "vid", ",", "saturation_factor", ",", "channel", "=", "1", ",", "gray_channel", "=", "0", ")", ":", "\n", "    ", "\"\"\"Adjust color saturation of an RGB image.\n    Args:\n        vid (Tensor): Video to be adjusted [C,N,H,W].\n        saturation_factor (1D float tensor):  How much to adjust the saturation. 0 will\n            give a black and white image, 1 will give the original image while\n            2 will enhance the saturation by a factor of 2.\n        channel: N channel\n        gray_channel: gray channel of vid\n    Returns:\n        Tensor: Saturation adjusted video.\n    \"\"\"", "\n", "N", "=", "saturation_factor", ".", "size", "(", "0", ")", "\n", "assert", "vid", ".", "size", "(", "channel", ")", "==", "N", "\n", "shape", "=", "[", "1", "]", "*", "vid", ".", "dim", "(", ")", ";", "shape", "[", "channel", "]", "=", "N", "\n", "saturation_factor", "=", "saturation_factor", ".", "view", "(", "shape", ")", "\n", "\n", "return", "_blend", "(", "vid", ",", "rgb_to_grayscale", "(", "vid", ",", "gray_channel", ")", ".", "unsqueeze", "(", "gray_channel", ")", ",", "saturation_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms._blend": [[159, 163], ["ratio.to.to"], "function", ["None"], ["", "def", "_blend", "(", "img1", ",", "img2", ",", "ratio", ")", ":", "\n", "    ", "bound", "=", "1", "if", "img1", ".", "dtype", ".", "is_floating_point", "else", "255", "\n", "ratio", "=", "ratio", ".", "to", "(", "img1", ".", "dtype", ")", "\n", "return", "(", "ratio", "*", "img1", "+", "(", "1", "-", "ratio", ")", "*", "img2", ")", ".", "clamp", "(", "0", ",", "bound", ")", ".", "to", "(", "img1", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.random_adjust_brightness": [[165, 173], ["vid.size", "torch.from_numpy().to", "transforms.adjust_brightness", "numpy.array", "numpy.random.uniform", "torch.from_numpy", "random.uniform"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_brightness"], ["", "def", "random_adjust_brightness", "(", "vid", ",", "brightness_factor", ",", "consistent", ",", "channel", "=", "1", ")", ":", "\n", "    ", "N", "=", "vid", ".", "size", "(", "channel", ")", "\n", "if", "consistent", ":", "\n", "        ", "brightness_factor", "=", "np", ".", "array", "(", "[", "random", ".", "uniform", "(", "brightness_factor", "[", "0", "]", ",", "brightness_factor", "[", "1", "]", ")", "]", "*", "N", ")", "\n", "", "else", ":", "\n", "        ", "brightness_factor", "=", "np", ".", "random", ".", "uniform", "(", "brightness_factor", "[", "0", "]", ",", "brightness_factor", "[", "1", "]", ",", "size", "=", "(", "N", ",", ")", ")", "\n", "", "brightness_factor", "=", "torch", ".", "from_numpy", "(", "brightness_factor", ")", ".", "to", "(", "vid", ".", "device", ")", "\n", "return", "adjust_brightness", "(", "vid", ",", "brightness_factor", ",", "channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.random_adjust_contrast": [[174, 182], ["vid.size", "torch.from_numpy().to", "transforms.adjust_contrast", "numpy.array", "numpy.random.uniform", "torch.from_numpy", "random.uniform"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_contrast"], ["", "def", "random_adjust_contrast", "(", "vid", ",", "contrast_factor", ",", "consistent", ",", "channel", "=", "1", ",", "gray_channel", "=", "0", ")", ":", "\n", "    ", "N", "=", "vid", ".", "size", "(", "channel", ")", "\n", "if", "consistent", ":", "\n", "        ", "contrast_factor", "=", "np", ".", "array", "(", "[", "random", ".", "uniform", "(", "contrast_factor", "[", "0", "]", ",", "contrast_factor", "[", "1", "]", ")", "]", "*", "N", ")", "\n", "", "else", ":", "\n", "        ", "contrast_factor", "=", "np", ".", "random", ".", "uniform", "(", "contrast_factor", "[", "0", "]", ",", "contrast_factor", "[", "1", "]", ",", "size", "=", "(", "N", ",", ")", ")", "\n", "", "contrast_factor", "=", "torch", ".", "from_numpy", "(", "contrast_factor", ")", ".", "to", "(", "vid", ".", "device", ")", "\n", "return", "adjust_contrast", "(", "vid", ",", "contrast_factor", ",", "channel", ",", "gray_channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.random_adjust_saturation": [[183, 191], ["vid.size", "torch.from_numpy().to", "transforms.adjust_saturation", "numpy.array", "numpy.random.uniform", "torch.from_numpy", "random.uniform"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_saturation"], ["", "def", "random_adjust_saturation", "(", "vid", ",", "saturation_factor", ",", "consistent", ",", "channel", "=", "1", ",", "gray_channel", "=", "0", ")", ":", "\n", "    ", "N", "=", "vid", ".", "size", "(", "channel", ")", "\n", "if", "consistent", ":", "\n", "        ", "saturation_factor", "=", "np", ".", "array", "(", "[", "random", ".", "uniform", "(", "saturation_factor", "[", "0", "]", ",", "saturation_factor", "[", "1", "]", ")", "]", "*", "N", ")", "\n", "", "else", ":", "\n", "        ", "saturation_factor", "=", "np", ".", "random", ".", "uniform", "(", "saturation_factor", "[", "0", "]", ",", "saturation_factor", "[", "1", "]", ",", "size", "=", "(", "N", ",", ")", ")", "\n", "", "saturation_factor", "=", "torch", ".", "from_numpy", "(", "saturation_factor", ")", ".", "to", "(", "vid", ".", "device", ")", "\n", "return", "adjust_saturation", "(", "vid", ",", "saturation_factor", ",", "channel", ",", "gray_channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.logging.get_logger": [[8, 68], ["logging.getLogger", "logging.StreamHandler", "logging.Formatter", "name.startswith", "torch.is_available", "torch.is_initialized", "torch.get_rank", "logging.FileHandler", "handlers.append", "handler.setFormatter", "handler.setLevel", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "logging.getLogger.setLevel"], "function", ["None"], ["def", "get_logger", "(", "name", ",", "log_file", "=", "None", ",", "log_level", "=", "logging", ".", "INFO", ",", "file_mode", "=", "'w'", ")", ":", "\n", "    ", "\"\"\"Initialize and get a logger by name.\n    If the logger has not been initialized, this method will initialize the\n    logger by adding one or two handlers, otherwise the initialized logger will\n    be directly returned. During initialization, a StreamHandler will always be\n    added. If `log_file` is specified and the process rank is 0, a FileHandler\n    will also be added.\n    Args:\n        name (str): Logger name.\n        log_file (str | None): The log filename. If specified, a FileHandler\n            will be added to the logger.\n        log_level (int): The logger level. Note that only the process of\n            rank 0 is affected, and other processes will set the level to\n            \"Error\" thus be silent most of the time.\n        file_mode (str): The file mode used in opening log file.\n            Defaults to 'w'.\n    Returns:\n        logging.Logger: The expected logger.\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "if", "name", "in", "logger_initialized", ":", "\n", "        ", "return", "logger", "\n", "# handle hierarchical names", "\n", "# e.g., logger \"a\" is initialized, then logger \"a.b\" will skip the", "\n", "# initialization since it is a child of \"a\".", "\n", "", "for", "logger_name", "in", "logger_initialized", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "logger_name", ")", ":", "\n", "            ", "return", "logger", "\n", "\n", "", "", "stream_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "handlers", "=", "[", "stream_handler", "]", "\n", "\n", "if", "dist", ".", "is_available", "(", ")", "and", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "else", ":", "\n", "        ", "rank", "=", "0", "\n", "\n", "# only rank 0 will add a FileHandler", "\n", "", "if", "rank", "==", "0", "and", "log_file", "is", "not", "None", ":", "\n", "# Here, the default behaviour of the official logger is 'a'. Thus, we", "\n", "# provide an interface to change the file mode to the default", "\n", "# behaviour.", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "file_mode", ")", "\n", "handlers", ".", "append", "(", "file_handler", ")", "\n", "\n", "", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "for", "handler", "in", "handlers", ":", "\n", "        ", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "handler", ".", "setLevel", "(", "log_level", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "\n", "        ", "logger", ".", "setLevel", "(", "log_level", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "", "logger_initialized", "[", "name", "]", "=", "True", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.logging.get_root_logger": [[70, 89], ["logging.get_logger", "__name__.split"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.logging.get_logger"], ["", "def", "get_root_logger", "(", "log_file", "=", "None", ",", "log_level", "=", "logging", ".", "INFO", ",", "file_mode", "=", "'w'", ")", ":", "\n", "    ", "\"\"\"Use ``get_logger`` method in mmcv to get the root logger.\n\n    The logger will be initialized if it has not been initialized. By default a\n    StreamHandler will be added. If ``log_file`` is specified, a FileHandler\n    will also be added. The name of the root logger is the top-level package\n    name, e.g., \"mmaction\".\n\n    Args:\n        log_file (str | None): The log filename. If specified, a FileHandler\n            will be added to the root logger.\n        log_level (int): The root logger level. Note that only the process of\n            rank 0 is affected, while other processes will set the level to\n            \"Error\" and be silent most of the time.\n\n    Returns:\n        :obj:`logging.Logger`: The root logger.\n    \"\"\"", "\n", "return", "get_logger", "(", "__name__", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "log_file", ",", "log_level", ",", "file_mode", "=", "'w'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.tensorboard_utils.PlotterThread.__init__": [[6, 12], ["queue.Queue", "threading.Thread", "threading.Thread.setDaemon", "threading.Thread.start"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "writer", ")", ":", "\n", "        ", "self", ".", "writer", "=", "writer", "\n", "self", ".", "task_queue", "=", "Queue", "(", "maxsize", "=", "0", ")", "\n", "worker", "=", "Thread", "(", "target", "=", "self", ".", "do_work", ",", "args", "=", "(", "self", ".", "task_queue", ",", ")", ")", "\n", "worker", ".", "setDaemon", "(", "True", ")", "\n", "worker", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.tensorboard_utils.PlotterThread.do_work": [[13, 23], ["q.get", "q.task_done", "tensorboard_utils.PlotterThread.writer.add_image", "tensorboard_utils.PlotterThread.writer.add_scalar"], "methods", ["None"], ["", "def", "do_work", "(", "self", ",", "q", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "content", "=", "q", ".", "get", "(", ")", "\n", "if", "content", "[", "-", "1", "]", "==", "'image'", ":", "\n", "                ", "self", ".", "writer", ".", "add_image", "(", "*", "content", "[", ":", "-", "1", "]", ")", "\n", "", "elif", "content", "[", "-", "1", "]", "==", "'scalar'", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "*", "content", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "\n", "", "q", ".", "task_done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.tensorboard_utils.PlotterThread.add_data": [[24, 26], ["tensorboard_utils.PlotterThread.task_queue.put"], "methods", ["None"], ["", "", "def", "add_data", "(", "self", ",", "name", ",", "value", ",", "step", ",", "data_type", "=", "'scalar'", ")", ":", "\n", "        ", "self", ".", "task_queue", ".", "put", "(", "[", "name", ",", "value", ",", "step", ",", "data_type", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.tensorboard_utils.PlotterThread.__len__": [[27, 29], ["tensorboard_utils.PlotterThread.task_queue.qsize"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "task_queue", ".", "qsize", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.__init__": [[150, 156], ["datetime.datetime.datetime.now", "os.path.join", "open", "f.write", "utils.Logger.birth_time.strftime", "utils.Logger.birth_time.strftime"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "birth_time", "=", "datetime", ".", "now", "(", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "self", ".", "birth_time", ".", "strftime", "(", "'%Y-%m-%d-%H:%M:%S'", ")", "+", "'.log'", ")", "\n", "self", ".", "filepath", "=", "filepath", "\n", "with", "open", "(", "filepath", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "self", ".", "birth_time", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log": [[157, 161], ["open", "f.write", "datetime.datetime.datetime.now", "utils.strfdelta"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.strfdelta"], ["", "", "def", "log", "(", "self", ",", "string", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "filepath", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "time_stamp", "=", "datetime", ".", "now", "(", ")", "-", "self", ".", "birth_time", "\n", "f", ".", "write", "(", "strfdelta", "(", "time_stamp", ",", "\"{d}-{h:02d}:{m:02d}:{s:02d}\"", ")", "+", "'\\t'", "+", "string", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.__init__": [[166, 170], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", "=", "'null'", ",", "fmt", "=", "':.4f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.reset": [[171, 181], ["collections.deque"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "local_history", "=", "deque", "(", "[", "]", ")", "\n", "self", ".", "local_avg", "=", "0", "\n", "self", ".", "history", "=", "[", "]", "\n", "self", ".", "dict", "=", "{", "}", "# save all data values here", "\n", "self", ".", "save_dict", "=", "{", "}", "# save mean and std here, for summary table", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.update": [[182, 195], ["utils.AverageMeter.history.append", "utils.AverageMeter.local_history.append", "numpy.average", "len", "utils.AverageMeter.local_history.popleft"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ",", "history", "=", "0", ",", "step", "=", "5", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "if", "n", "==", "0", ":", "return", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "if", "history", ":", "\n", "            ", "self", ".", "history", ".", "append", "(", "val", ")", "\n", "", "if", "step", ">", "0", ":", "\n", "            ", "self", ".", "local_history", ".", "append", "(", "val", ")", "\n", "if", "len", "(", "self", ".", "local_history", ")", ">", "step", ":", "\n", "                ", "self", ".", "local_history", ".", "popleft", "(", ")", "\n", "", "self", ".", "local_avg", "=", "np", ".", "average", "(", "self", ".", "local_history", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.dict_update": [[196, 201], ["utils.AverageMeter.dict.keys", "utils.AverageMeter.dict[].append"], "methods", ["None"], ["", "", "def", "dict_update", "(", "self", ",", "val", ",", "key", ")", ":", "\n", "        ", "if", "key", "in", "self", ".", "dict", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "dict", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dict", "[", "key", "]", "=", "[", "val", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.print_dict": [[202, 232], ["utils.AverageMeter.dict.keys", "numpy.average", "len", "numpy.std", "print", "numpy.average", "len", "numpy.std", "print", "total.extend", "print", "utils.AverageMeter.save_dict.keys", "utils.AverageMeter.save_dict[].append", "open", "pickle.dump"], "methods", ["None"], ["", "", "def", "print_dict", "(", "self", ",", "title", "=", "'IoU'", ",", "save_data", "=", "False", ")", ":", "\n", "        ", "\"\"\"Print summary, clear self.dict and save mean+std in self.save_dict\"\"\"", "\n", "total", "=", "[", "]", "\n", "for", "key", "in", "self", ".", "dict", ".", "keys", "(", ")", ":", "\n", "            ", "val", "=", "self", ".", "dict", "[", "key", "]", "\n", "avg_val", "=", "np", ".", "average", "(", "val", ")", "\n", "len_val", "=", "len", "(", "val", ")", "\n", "std_val", "=", "np", ".", "std", "(", "val", ")", "\n", "\n", "if", "key", "in", "self", ".", "save_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "save_dict", "[", "key", "]", ".", "append", "(", "[", "avg_val", ",", "std_val", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "save_dict", "[", "key", "]", "=", "[", "[", "avg_val", ",", "std_val", "]", "]", "\n", "\n", "", "print", "(", "'Activity:%s, mean %s is %0.4f, std %s is %0.4f, length of data is %d'", "%", "(", "key", ",", "title", ",", "avg_val", ",", "title", ",", "std_val", ",", "len_val", ")", ")", "\n", "\n", "total", ".", "extend", "(", "val", ")", "\n", "\n", "", "self", ".", "dict", "=", "{", "}", "\n", "avg_total", "=", "np", ".", "average", "(", "total", ")", "\n", "len_total", "=", "len", "(", "total", ")", "\n", "std_total", "=", "np", ".", "std", "(", "total", ")", "\n", "print", "(", "'\\nOverall: mean %s is %0.4f, std %s is %0.4f, length of data is %d \\n'", "%", "(", "title", ",", "avg_total", ",", "title", ",", "std_total", ",", "len_total", ")", ")", "\n", "\n", "if", "save_data", ":", "\n", "            ", "print", "(", "'Save %s pickle file'", "%", "title", ")", "\n", "with", "open", "(", "'img/%s.pickle'", "%", "title", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "save_dict", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.__len__": [[233, 235], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.__str__": [[236, 239], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.mini_str": [[240, 243], ["fmtstr.format"], "methods", ["None"], ["", "def", "mini_str", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'}'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.ProgressMeter.__init__": [[246, 251], ["utils.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.ProgressMeter.display": [[252, 259], ["meter.mini_str", "utils.ProgressMeter.logger.info", "print", "utils.ProgressMeter.batch_fmtstr.format"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.mini_str", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "meter", ".", "mini_str", "(", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\". \"", ".", "join", "(", "entries", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'. '", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.ProgressMeter._get_batch_fmtstr": [[260, 264], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils._RepeatSampler.__init__": [[273, 275], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sampler", ")", ":", "\n", "        ", "self", ".", "sampler", "=", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils._RepeatSampler.__iter__": [[276, 279], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "yield", "from", "iter", "(", "self", ".", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Timer.__init__": [[283, 285], ["time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "o", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Timer.measure": [[286, 294], ["int", "time.time", "round"], "methods", ["None"], ["", "def", "measure", "(", "self", ",", "p", "=", "1", ")", ":", "\n", "        ", "x", "=", "(", "time", ".", "time", "(", ")", "-", "self", ".", "o", ")", "/", "p", "\n", "x", "=", "int", "(", "x", ")", "\n", "if", "x", ">=", "3600", ":", "\n", "            ", "return", "'{:.1f}h'", ".", "format", "(", "x", "/", "3600", ")", "\n", "", "if", "x", ">=", "60", ":", "\n", "            ", "return", "'{}m'", ".", "format", "(", "round", "(", "x", "/", "60", ")", ")", "\n", "", "return", "'{}s'", ".", "format", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.FastDataLoader.__init__": [[300, 305], ["super().__init__", "object.__setattr__", "super().__iter__", "utils._RepeatSampler"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.FastDataLoader.__iter__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "object", ".", "__setattr__", "(", "self", ",", "'batch_sampler'", ",", "_RepeatSampler", "(", "self", ".", "batch_sampler", ")", ")", "\n", "# self.batch_sampler = _RepeatSampler(self.batch_sampler)", "\n", "self", ".", "iterator", "=", "super", "(", ")", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.FastDataLoader.__len__": [[306, 308], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "batch_sampler", ".", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.FastDataLoader.__iter__": [[309, 312], ["range", "len", "next"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "yield", "next", "(", "self", ".", "iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.GatherLayer.forward": [[325, 332], ["ctx.save_for_backward", "torch.all_gather", "torch.all_gather", "tuple", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.get_world_size", "torch.get_world_size"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "input", ")", "\n", "output", "=", "[", "torch", ".", "zeros_like", "(", "input", ")", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "dist", ".", "all_gather", "(", "output", ",", "input", ")", "\n", "return", "tuple", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.GatherLayer.backward": [[333, 339], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.get_rank", "torch.get_rank"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "grads", ")", ":", "\n", "        ", "input", ",", "=", "ctx", ".", "saved_tensors", "\n", "grad_out", "=", "torch", ".", "zeros_like", "(", "input", ")", "\n", "grad_out", "[", ":", "]", "=", "grads", "[", "dist", ".", "get_rank", "(", ")", "]", "\n", "return", "grad_out", "", "", "", ""]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.save_checkpoint": [[18, 45], ["os.path.join", "os.path.dirname", "torch.save", "torch.save", "os.path.join", "os.path.exists", "torch.save", "torch.save", "glob.glob", "sorted", "torch.save", "torch.save", "str", "os.remove", "os.path.dirname", "os.remove", "time.sleep", "os.path.join", "len", "os.path.join", "os.path.dirname", "os.remove", "os.path.dirname", "int", "str", "filter"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "is_best", "=", "0", ",", "gap", "=", "1", ",", "filename", "=", "'models/checkpoint.pth.tar'", ",", "keep_all", "=", "False", ",", "is_save", "=", "True", ",", "save_latest", "=", "False", ")", ":", "\n", "    ", "last_epoch_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ",", "'epoch%s.pth.tar'", "%", "str", "(", "state", "[", "'epoch'", "]", "-", "gap", ")", ")", "\n", "if", "not", "keep_all", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "remove", "(", "last_epoch_path", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "if", "is_save", ":", "\n", "        ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n", "", "if", "save_latest", ":", "\n", "        ", "latest_filename", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ",", "'latest.pth.tar'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "latest_filename", ")", ":", "\n", "            ", "os", ".", "remove", "(", "latest_filename", ")", "\n", "time", ".", "sleep", "(", "3", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "latest_filename", ")", "\n", "\n", "", "if", "is_best", ":", "\n", "        ", "past_best", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ",", "'model_best_*.pth.tar'", ")", ")", "\n", "past_best", "=", "sorted", "(", "past_best", ",", "key", "=", "lambda", "x", ":", "int", "(", "''", ".", "join", "(", "filter", "(", "str", ".", "isdigit", ",", "x", ")", ")", ")", ")", "\n", "if", "len", "(", "past_best", ")", ">=", "5", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "past_best", "[", "0", "]", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ",", "'model_best_epoch%s.pth.tar'", "%", "str", "(", "state", "[", "'epoch'", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.write_log": [[47, 56], ["open.write", "open.write", "open.write", "open.close", "os.path.exists", "open", "open", "str", "datetime.datetime.now"], "function", ["None"], ["", "", "def", "write_log", "(", "content", ",", "epoch", ",", "filename", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "log_file", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "", "else", ":", "\n", "        ", "log_file", "=", "open", "(", "filename", ",", "'a'", ")", "\n", "", "log_file", ".", "write", "(", "'## Epoch %d:\\n'", "%", "epoch", ")", "\n", "log_file", ".", "write", "(", "'time: %s\\n'", "%", "str", "(", "datetime", ".", "now", "(", ")", ")", ")", "\n", "log_file", ".", "write", "(", "content", "+", "'\\n\\n'", ")", "\n", "log_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.denorm": [[58, 63], ["torchvision.transforms.Normalize", "len", "len", "range"], "function", ["None"], ["", "def", "denorm", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "    ", "assert", "len", "(", "mean", ")", "==", "len", "(", "std", ")", "==", "3", "\n", "inv_mean", "=", "[", "-", "mean", "[", "i", "]", "/", "std", "[", "i", "]", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "inv_std", "=", "[", "1", "/", "i", "for", "i", "in", "std", "]", "\n", "return", "transforms", ".", "Normalize", "(", "mean", "=", "inv_mean", ",", "std", "=", "inv_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.batch_denorm": [[65, 73], ["torch.as_tensor().view", "torch.as_tensor().view", "torch.as_tensor().view", "torch.as_tensor().view", "tensor.mul().add", "tensor.dim", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "tensor.mul"], "function", ["None"], ["", "def", "batch_denorm", "(", "tensor", ",", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "channel", "=", "1", ")", ":", "\n", "    ", "shape", "=", "[", "1", "]", "*", "tensor", ".", "dim", "(", ")", ";", "\n", "shape", "[", "channel", "]", "=", "3", "\n", "dtype", "=", "tensor", ".", "dtype", "\n", "mean", "=", "torch", ".", "as_tensor", "(", "mean", ",", "dtype", "=", "dtype", ",", "device", "=", "tensor", ".", "device", ")", ".", "view", "(", "shape", ")", "\n", "std", "=", "torch", ".", "as_tensor", "(", "std", ",", "dtype", "=", "dtype", ",", "device", "=", "tensor", ".", "device", ")", ".", "view", "(", "shape", ")", "\n", "output", "=", "tensor", ".", "mul", "(", "std", ")", ".", "add", "(", "mean", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.calc_topk_accuracy": [[75, 93], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq().contiguous", "correct[].view().float().sum", "res.append", "pred.t.eq", "correct[].view().float().sum.mul_", "target.view().expand_as", "correct[].view().float", "target.view", "correct[].view"], "function", ["None"], ["", "def", "calc_topk_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"\n    Modified from: https://gist.github.com/agermanidis/275b23ad7a10ee89adccf021536bb97e\n    Given predicted and ground truth labels, \n    calculate top-k accuracies.\n    \"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", ".", "contiguous", "(", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "1", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.calc_mask_accuracy": [[95, 110], ["max", "output.topk", "torch.zeros_like().long", "torch.zeros_like().long", "torch.zeros_like().long", "torch.zeros_like().long", "range", "pred[].unsqueeze", "torch.zeros_like().long.scatter", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "res.append"], "function", ["None"], ["", "def", "calc_mask_accuracy", "(", "output", ",", "target_mask", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "maxk", "=", "max", "(", "topk", ")", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "\n", "zeros", "=", "torch", ".", "zeros_like", "(", "target_mask", ")", ".", "long", "(", ")", "\n", "pred_mask", "=", "torch", ".", "zeros_like", "(", "target_mask", ")", ".", "long", "(", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "maxk", ")", ":", "\n", "        ", "pred_", "=", "pred", "[", ":", ",", "k", "]", ".", "unsqueeze", "(", "1", ")", "\n", "onehot", "=", "zeros", ".", "scatter", "(", "1", ",", "pred_", ",", "1", ")", "\n", "pred_mask", "=", "onehot", "+", "pred_mask", "# accumulate", "\n", "if", "k", "+", "1", "in", "topk", ":", "\n", "            ", "res", ".", "append", "(", "(", "(", "pred_mask", "*", "target_mask", ")", ".", "sum", "(", "1", ")", ">=", "1", ")", ".", "float", "(", ")", ".", "mean", "(", "0", ")", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.neq_load_customized": [[112, 138], ["model.state_dict", "model.state_dict.update", "model.load_state_dict", "args.logger.info", "pretrained_dict.items", "args.logger.info", "args.logger.info", "model.state_dict.items", "args.logger.info", "args.logger.info", "args.logger.info"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info", "home.repos.pwc.inspect_result.lzhangbj_DualVar.None.classifier.DistLogger.info"], ["", "def", "neq_load_customized", "(", "model", ",", "pretrained_dict", ",", "verbose", "=", "True", ",", "args", "=", "None", ")", ":", "\n", "    ", "''' load pre-trained model in a not-equal way,\n    when new model has been partially modified '''", "\n", "assert", "args", "is", "not", "None", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "tmp", "=", "{", "}", "\n", "if", "verbose", ":", "\n", "        ", "content", "=", "\"\\n=======Check Weights Loading======\\nWeights not used from pretrained file:\"", "\n", "args", ".", "logger", ".", "info", "(", "content", ")", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "model_dict", ":", "\n", "                ", "tmp", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "args", ".", "logger", ".", "info", "(", "k", ")", "\n", "", "", "args", ".", "logger", ".", "info", "(", "'---------------------------'", ")", "\n", "args", ".", "logger", ".", "info", "(", "'Weights not loaded into new model:'", ")", "\n", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "pretrained_dict", ":", "\n", "                ", "args", ".", "logger", ".", "info", "(", "k", ")", "\n", "", "", "args", ".", "logger", ".", "info", "(", "'===================================\\n'", ")", "\n", "# pretrained_dict = {k: v for k, v in pretrained_dict.items() if k in model_dict}", "\n", "", "del", "pretrained_dict", "\n", "model_dict", ".", "update", "(", "tmp", ")", "\n", "del", "tmp", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.strfdelta": [[140, 145], ["divmod", "divmod", "fmt.format"], "function", ["None"], ["", "def", "strfdelta", "(", "tdelta", ",", "fmt", ")", ":", "\n", "    ", "d", "=", "{", "\"d\"", ":", "tdelta", ".", "days", "}", "\n", "d", "[", "\"h\"", "]", ",", "rem", "=", "divmod", "(", "tdelta", ".", "seconds", ",", "3600", ")", "\n", "d", "[", "\"m\"", "]", ",", "d", "[", "\"s\"", "]", "=", "divmod", "(", "rem", ",", "60", ")", "\n", "return", "fmt", ".", "format", "(", "**", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.worker_init_fn": [[314, 319], ["torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info"], "function", ["None"], ["", "", "", "def", "worker_init_fn", "(", "_", ")", ":", "\n", "    ", "worker_info", "=", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "\n", "dataset", "=", "worker_info", ".", "dataset", "\n", "# Avoid \"cannot pickle KVReader object\" error", "\n", "dataset", ".", "reader", "=", "None", "# KVReader(dataset.db_path, dataset.num_readers)", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.Padding.__init__": [[118, 120], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pad", ")", ":", "\n", "        ", "self", ".", "pad", "=", "pad", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.Padding.__call__": [[121, 123], ["PIL.ImageOps.expand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "pad", ",", "fill", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.Scale.__init__": [[126, 130], ["isinstance", "isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "        ", "assert", "isinstance", "(", "size", ",", "int", ")", "or", "(", "isinstance", "(", "size", ",", "collections", ".", "Iterable", ")", "and", "len", "(", "size", ")", "==", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.Scale.__call__": [[131, 147], ["isinstance", "int", "int", "i.resize", "i.resize", "i.resize"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.resize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.resize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.resize"], ["", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n", "        ", "img1", "=", "imgmap", "[", "0", "]", "\n", "if", "isinstance", "(", "self", ".", "size", ",", "int", ")", ":", "\n", "            ", "w", ",", "h", "=", "img1", ".", "size", "\n", "if", "(", "w", "<=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "                ", "return", "imgmap", "\n", "", "if", "w", "<", "h", ":", "\n", "                ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "[", "i", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "for", "i", "in", "imgmap", "]", "\n", "", "else", ":", "\n", "                ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "[", "i", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "for", "i", "in", "imgmap", "]", "\n", "", "", "else", ":", "\n", "            ", "return", "[", "i", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "for", "i", "in", "imgmap", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.RandomCrop.__init__": [[150, 158], ["isinstance", "isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "n_seqblock", "=", "0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "size", ")", "==", "2", "\n", "self", ".", "size", "=", "size", "\n", "", "self", ".", "n_seqblock", "=", "n_seqblock", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.RandomCrop.__call__": [[159, 176], ["range", "random.randint", "random.randint", "len", "ret.append", "i.crop", "random.randint", "random.randint", "imgmap[].crop"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.crop", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.crop"], ["", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n", "        ", "img1", "=", "imgmap", "[", "0", "]", "\n", "h", ",", "w", "=", "img1", ".", "size", "[", "0", "]", ",", "img1", ".", "size", "[", "1", "]", "\n", "assert", "h", ">=", "self", ".", "size", "[", "0", "]", "and", "w", ">=", "self", ".", "size", "[", "1", "]", "\n", "\n", "if", "self", ".", "n_seqblock", "==", "0", ":", "\n", "            ", "h_start", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "self", ".", "size", "[", "0", "]", ")", "\n", "w_start", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "self", ".", "size", "[", "1", "]", ")", "\n", "\n", "return", "[", "i", ".", "crop", "(", "(", "h_start", ",", "w_start", ",", "h_start", "+", "self", ".", "size", "[", "0", "]", ",", "w_start", "+", "self", ".", "size", "[", "1", "]", ")", ")", "for", "i", "in", "imgmap", "]", "\n", "", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "imgmap", ")", ")", ":", "\n", "            ", "if", "i", "%", "self", ".", "n_seqblock", "==", "0", ":", "\n", "                ", "h_start", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "self", ".", "size", "[", "0", "]", ")", "\n", "w_start", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "self", ".", "size", "[", "1", "]", ")", "\n", "", "ret", ".", "append", "(", "imgmap", "[", "i", "]", ".", "crop", "(", "(", "h_start", ",", "w_start", ",", "h_start", "+", "self", ".", "size", "[", "0", "]", ",", "w_start", "+", "self", ".", "size", "[", "1", "]", ")", ")", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.CenterCrop.__init__": [[179, 184], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "consistent", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.CenterCrop.__call__": [[185, 192], ["int", "int", "round", "round", "i.crop"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.crop"], ["", "", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n", "        ", "img1", "=", "imgmap", "[", "0", "]", "\n", "w", ",", "h", "=", "img1", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "[", "i", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "for", "i", "in", "imgmap", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.FiveCrop.__init__": [[195, 202], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "where", "=", "1", ")", ":", "\n", "# 1=topleft, 2=topright, 3=botleft, 4=botright, 5=center", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "where", "=", "where", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.FiveCrop.__call__": [[203, 221], ["ValueError", "i.crop", "i.crop", "i.crop", "i.crop", "int", "int", "round", "round", "i.crop"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.crop", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.crop", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.crop", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.crop", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.crop"], ["", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n", "        ", "img1", "=", "imgmap", "[", "0", "]", "\n", "w", ",", "h", "=", "img1", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "(", "th", ">", "h", ")", "or", "(", "tw", ">", "w", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Requested crop size {} is bigger than input size {}\"", ".", "format", "(", "self", ".", "size", ",", "(", "h", ",", "w", ")", ")", ")", "\n", "", "if", "self", ".", "where", "==", "1", ":", "\n", "            ", "return", "[", "i", ".", "crop", "(", "(", "0", ",", "0", ",", "tw", ",", "th", ")", ")", "for", "i", "in", "imgmap", "]", "\n", "", "elif", "self", ".", "where", "==", "2", ":", "\n", "            ", "return", "[", "i", ".", "crop", "(", "(", "w", "-", "tw", ",", "0", ",", "w", ",", "th", ")", ")", "for", "i", "in", "imgmap", "]", "\n", "", "elif", "self", ".", "where", "==", "3", ":", "\n", "            ", "return", "[", "i", ".", "crop", "(", "(", "0", ",", "h", "-", "th", ",", "tw", ",", "h", ")", ")", "for", "i", "in", "imgmap", "]", "\n", "", "elif", "self", ".", "where", "==", "4", ":", "\n", "            ", "return", "[", "i", ".", "crop", "(", "(", "w", "-", "tw", ",", "h", "-", "tw", ",", "w", ",", "h", ")", ")", "for", "i", "in", "imgmap", "]", "\n", "", "elif", "self", ".", "where", "==", "5", ":", "\n", "            ", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "[", "i", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "for", "i", "in", "imgmap", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.RandomSizedCrop.__init__": [[262, 267], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ",", "consistent", "=", "True", ",", "p", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "consistent", "=", "consistent", "\n", "self", ".", "threshold", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.RandomSizedCrop.__call__": [[268, 313], ["random.random", "range", "augmentation.Scale", "augmentation.CenterCrop", "CenterCrop.", "augmentation.CenterCrop", "CenterCrop.", "random.uniform", "int", "int", "Scale.", "random.uniform", "round", "round", "math.sqrt", "math.sqrt", "random.random", "random.randint", "random.randint", "len", "len", "i.resize", "i.crop", "i.resize", "random.random", "random.randint", "random.randint", "result.append", "result.append", "i.crop"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.resize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.crop", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.resize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.crop"], ["", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n", "        ", "img1", "=", "imgmap", "[", "0", "]", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "threshold", ":", "# do RandomSizedCrop", "\n", "            ", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "                ", "area", "=", "img1", ".", "size", "[", "0", "]", "*", "img1", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.5", ",", "1", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "3.", "/", "4", ",", "4.", "/", "3", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "self", ".", "consistent", ":", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                        ", "w", ",", "h", "=", "h", ",", "w", "\n", "", "if", "w", "<=", "img1", ".", "size", "[", "0", "]", "and", "h", "<=", "img1", ".", "size", "[", "1", "]", ":", "\n", "                        ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img1", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img1", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "imgmap", "=", "[", "i", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "for", "i", "in", "imgmap", "]", "\n", "for", "i", "in", "imgmap", ":", "assert", "(", "i", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "\n", "return", "[", "i", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "for", "i", "in", "imgmap", "]", "\n", "", "", "else", ":", "\n", "                    ", "result", "=", "[", "]", "\n", "for", "i", "in", "imgmap", ":", "\n", "                        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                            ", "w", ",", "h", "=", "h", ",", "w", "\n", "", "if", "w", "<=", "img1", ".", "size", "[", "0", "]", "and", "h", "<=", "img1", ".", "size", "[", "1", "]", ":", "\n", "                            ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img1", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img1", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "result", ".", "append", "(", "i", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", ")", "\n", "assert", "(", "result", "[", "-", "1", "]", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "", "else", ":", "\n", "                            ", "result", ".", "append", "(", "i", ")", "\n", "\n", "", "", "assert", "len", "(", "result", ")", "==", "len", "(", "imgmap", ")", "\n", "return", "[", "i", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "for", "i", "in", "result", "]", "\n", "\n", "# Fallback", "\n", "", "", "scale", "=", "Scale", "(", "self", ".", "size", ",", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "crop", "=", "CenterCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "scale", "(", "imgmap", ")", ")", "\n", "", "else", ":", "# don't do RandomSizedCrop, do CenterCrop", "\n", "            ", "crop", "=", "CenterCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "imgmap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.RandomHorizontalFlip.__init__": [[315, 326], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "consistent", "=", "True", ",", "command", "=", "None", ",", "seq_len", "=", "0", ")", ":", "\n", "        ", "self", ".", "consistent", "=", "consistent", "\n", "if", "seq_len", "!=", "0", ":", "\n", "            ", "self", ".", "consistent", "=", "False", "\n", "", "if", "command", "==", "'left'", ":", "\n", "            ", "self", ".", "threshold", "=", "0", "\n", "", "elif", "command", "==", "'right'", ":", "\n", "            ", "self", ".", "threshold", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "threshold", "=", "0.5", "\n", "", "self", ".", "seq_len", "=", "seq_len", "\n", "", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.RandomHorizontalFlip.__call__": [[326, 342], ["enumerate", "random.random", "len", "len", "i.transpose", "random.random", "result.append", "result.append", "i.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n", "        ", "if", "self", ".", "consistent", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "threshold", ":", "\n", "                ", "return", "[", "i", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "for", "i", "in", "imgmap", "]", "\n", "", "else", ":", "\n", "                ", "return", "imgmap", "\n", "", "", "else", ":", "\n", "            ", "result", "=", "[", "]", "\n", "for", "idx", ",", "i", "in", "enumerate", "(", "imgmap", ")", ":", "\n", "                ", "if", "idx", "%", "self", ".", "seq_len", "==", "0", ":", "th", "=", "random", ".", "random", "(", ")", "\n", "if", "th", "<", "self", ".", "threshold", ":", "\n", "                    ", "result", ".", "append", "(", "i", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ")", "\n", "", "else", ":", "\n", "                    ", "result", ".", "append", "(", "i", ")", "\n", "", "", "assert", "len", "(", "result", ")", "==", "len", "(", "imgmap", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.RandomRotation.__init__": [[345, 349], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "consistent", "=", "True", ",", "degree", "=", "15", ",", "p", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "consistent", "=", "consistent", "\n", "self", ".", "degree", "=", "degree", "\n", "self", ".", "threshold", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.RandomRotation.__call__": [[350, 359], ["random.random", "numpy.random.randint", "i.rotate", "i.rotate", "numpy.random.randint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "threshold", ":", "# do RandomRotation", "\n", "            ", "if", "self", ".", "consistent", ":", "\n", "                ", "deg", "=", "np", ".", "random", ".", "randint", "(", "-", "self", ".", "degree", ",", "self", ".", "degree", ",", "1", ")", "[", "0", "]", "\n", "return", "[", "i", ".", "rotate", "(", "deg", ",", "expand", "=", "True", ")", "for", "i", "in", "imgmap", "]", "\n", "", "else", ":", "\n", "                ", "return", "[", "i", ".", "rotate", "(", "np", ".", "random", ".", "randint", "(", "-", "self", ".", "degree", ",", "self", ".", "degree", ",", "1", ")", "[", "0", "]", ",", "expand", "=", "True", ")", "for", "i", "in", "imgmap", "]", "\n", "", "", "else", ":", "# don't do RandomRotation, do nothing", "\n", "            ", "return", "imgmap", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ToTensor.__call__": [[362, 365], ["torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor."], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n", "        ", "totensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "return", "[", "totensor", "(", "i", ")", "for", "i", "in", "imgmap", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ToPIL.__call__": [[368, 371], ["torchvision.transforms.ToPILImage", "torchvision.transforms.ToPILImage", "torchvision.transforms.ToPILImage."], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n", "        ", "topil", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "return", "[", "topil", "(", "i", ")", "for", "i", "in", "imgmap", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.RandomGray.__init__": [[376, 381], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "consistent", "=", "True", ",", "p", "=", "0.8", ",", "seq_len", "=", "16", ",", "block", "=", "1", ")", ":", "\n", "        ", "self", ".", "consistent", "=", "consistent", "\n", "self", ".", "p", "=", "p", "# prob to grayscale", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "block", "=", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.RandomGray.__call__": [[382, 423], ["torch.is_tensor", "imgmap[].size", "enumerate", "range", "torch.cat", "result.append", "w_patches.append", "augmentation.RandomGray.grayscale", "patches.append", "w_patches.clear", "random.randint", "range", "torch.cat", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.RandomGray.grayscale"], ["", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n", "        ", "assert", "torch", ".", "is_tensor", "(", "imgmap", "[", "0", "]", ")", "\n", "_", ",", "height", ",", "width", "=", "imgmap", "[", "0", "]", ".", "size", "(", ")", "\n", "height_unit", "=", "height", "//", "self", ".", "block", "\n", "width_unit", "=", "width", "//", "self", ".", "block", "\n", "\n", "result", "=", "[", "]", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "imgmap", ")", ":", "\n", "            ", "if", "not", "self", ".", "consistent", "or", "idx", "%", "self", ".", "seq_len", "==", "0", ":", "\n", "                ", "block_channel", "=", "[", "random", ".", "randint", "(", "0", ",", "2", ")", "if", "np", ".", "random", ".", "uniform", "(", "0.", ",", "1.", ")", "<", "self", ".", "p", "else", "-", "1", "\n", "for", "_", "in", "range", "(", "self", ".", "block", "*", "self", ".", "block", ")", "]", "\n", "\n", "", "patches", "=", "[", "]", "\n", "w_patches", "=", "[", "]", "\n", "\n", "for", "block_ind", "in", "range", "(", "self", ".", "block", "*", "self", ".", "block", ")", ":", "\n", "                ", "channel", "=", "block_channel", "[", "block_ind", "]", "\n", "\n", "height_ind", "=", "block_ind", "//", "self", ".", "block", "\n", "width_ind", "=", "block_ind", "%", "self", ".", "block", "\n", "\n", "height_start", "=", "height_unit", "*", "height_ind", "\n", "height_end", "=", "height_start", "+", "height_unit", "if", "height_ind", "<", "self", ".", "block", "-", "1", "else", "height", "\n", "\n", "width_start", "=", "width_unit", "*", "width_ind", "\n", "width_end", "=", "width_start", "+", "width_unit", "if", "width_ind", "<", "self", ".", "block", "-", "1", "else", "width", "\n", "if", "channel", "==", "-", "1", ":", "\n", "                    ", "transformed_block", "=", "img", "[", ":", ",", "height_start", ":", "height_end", ",", "width_start", ":", "width_end", "]", "\n", "", "else", ":", "\n", "                    ", "transformed_block", "=", "self", ".", "grayscale", "(", "img", "[", ":", ",", "height_start", ":", "height_end", ",", "width_start", ":", "width_end", "]", ",", "channel", ")", "\n", "\n", "", "w_patches", ".", "append", "(", "transformed_block", ")", "\n", "if", "width_ind", "==", "self", ".", "block", "-", "1", ":", "\n", "                    ", "patches", ".", "append", "(", "torch", ".", "cat", "(", "w_patches", ",", "dim", "=", "2", ")", ")", "\n", "w_patches", ".", "clear", "(", ")", "\n", "\n", "", "", "img", "=", "torch", ".", "cat", "(", "patches", ",", "dim", "=", "1", ")", "\n", "\n", "result", ".", "append", "(", "img", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.RandomGray.grayscale": [[424, 427], ["img[].unsqueeze().repeat", "img[].unsqueeze"], "methods", ["None"], ["", "def", "grayscale", "(", "self", ",", "img", ",", "channel", ")", ":", "\n", "        ", "img", "=", "img", "[", "channel", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "3", ",", "1", ",", "1", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter.__init__": [[445, 461], ["augmentation.ColorJitter._check_input", "augmentation.ColorJitter._check_input", "augmentation.ColorJitter._check_input", "augmentation.ColorJitter._check_input"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter._check_input", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter._check_input", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter._check_input", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter._check_input"], ["def", "__init__", "(", "self", ",", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "saturation", "=", "0", ",", "hue", "=", "0", ",", "consistent", "=", "False", ",", "p", "=", "0.8", ",", "block", "=", "1", ",", "seq_len", "=", "16", ",", "grad_consistent", "=", "False", ",", "n_seqblock", "=", "0", ")", ":", "\n", "        ", "self", ".", "brightness", "=", "self", ".", "_check_input", "(", "brightness", ",", "'brightness'", ")", "\n", "self", ".", "contrast", "=", "self", ".", "_check_input", "(", "contrast", ",", "'contrast'", ")", "\n", "self", ".", "saturation", "=", "self", ".", "_check_input", "(", "saturation", ",", "'saturation'", ")", "\n", "self", ".", "hue", "=", "self", ".", "_check_input", "(", "hue", ",", "'hue'", ",", "center", "=", "0", ",", "bound", "=", "(", "-", "0.5", ",", "0.5", ")", ",", "\n", "clip_first_on_zero", "=", "False", ")", "\n", "self", ".", "block", "=", "block", "\n", "assert", "not", "(", "consistent", "and", "grad_consistent", ")", "\n", "self", ".", "consistent", "=", "consistent", "\n", "self", ".", "grad_consistent", "=", "grad_consistent", "\n", "self", ".", "threshold", "=", "p", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "n_seqblock", "=", "n_seqblock", "\n", "if", "n_seqblock", "==", "0", ":", "\n", "            ", "self", ".", "n_seqblock", "=", "seq_len", "\n", "", "assert", "seq_len", "%", "self", ".", "n_seqblock", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter._check_input": [[462, 480], ["isinstance", "float", "ValueError", "max", "isinstance", "TypeError", "len", "ValueError"], "methods", ["None"], ["", "def", "_check_input", "(", "self", ",", "value", ",", "name", ",", "center", "=", "1", ",", "bound", "=", "(", "0", ",", "float", "(", "'inf'", ")", ")", ",", "clip_first_on_zero", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "if", "value", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"If {} is a single number, it must be non negative.\"", ".", "format", "(", "name", ")", ")", "\n", "", "value", "=", "[", "center", "-", "value", ",", "center", "+", "value", "]", "\n", "if", "clip_first_on_zero", ":", "\n", "                ", "value", "[", "0", "]", "=", "max", "(", "value", "[", "0", "]", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "value", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "value", ")", "==", "2", ":", "\n", "            ", "if", "not", "bound", "[", "0", "]", "<=", "value", "[", "0", "]", "<=", "value", "[", "1", "]", "<=", "bound", "[", "1", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"{} values should be between {}\"", ".", "format", "(", "name", ",", "bound", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"{} should be a single number or a list/tuple with lenght 2.\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "# if value is 0 or (1., 1.) for brightness/contrast/saturation", "\n", "# or (0., 0.) for hue, do nothing", "\n", "", "if", "value", "[", "0", "]", "==", "value", "[", "1", "]", "==", "center", ":", "\n", "            ", "value", "=", "None", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter.get_params": [[481, 511], ["random.shuffle", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "random.uniform", "torchvision.transforms.append", "torchvision.transforms.append", "random.uniform", "torchvision.transforms.append", "torchvision.transforms.append", "random.uniform", "torchvision.transforms.append", "torchvision.transforms.append", "random.uniform", "torchvision.transforms.append", "torchvision.transforms.append", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.adjust_brightness", "torchvision.adjust_brightness", "torchvision.adjust_contrast", "torchvision.adjust_contrast", "torchvision.adjust_saturation", "torchvision.adjust_saturation", "torchvision.adjust_hue", "torchvision.adjust_hue"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_brightness", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_brightness", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_contrast", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_contrast", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_saturation", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_saturation"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ")", ":", "\n", "        ", "\"\"\"Get a randomized transform to be applied on image.\n        Arguments are same as that of __init__.\n        Returns:\n            Transform which randomly adjusts brightness, contrast and\n            saturation in a random order.\n        \"\"\"", "\n", "transforms", "=", "[", "]", "\n", "\n", "if", "brightness", "is", "not", "None", ":", "\n", "            ", "brightness_factor", "=", "random", ".", "uniform", "(", "brightness", "[", "0", "]", ",", "brightness", "[", "1", "]", ")", "\n", "transforms", ".", "append", "(", "torchvision", ".", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "F", ".", "adjust_brightness", "(", "img", ",", "brightness_factor", ")", ")", ")", "\n", "\n", "", "if", "contrast", "is", "not", "None", ":", "\n", "            ", "contrast_factor", "=", "random", ".", "uniform", "(", "contrast", "[", "0", "]", ",", "contrast", "[", "1", "]", ")", "\n", "transforms", ".", "append", "(", "torchvision", ".", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "F", ".", "adjust_contrast", "(", "img", ",", "contrast_factor", ")", ")", ")", "\n", "\n", "", "if", "saturation", "is", "not", "None", ":", "\n", "            ", "saturation_factor", "=", "random", ".", "uniform", "(", "saturation", "[", "0", "]", ",", "saturation", "[", "1", "]", ")", "\n", "transforms", ".", "append", "(", "torchvision", ".", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "F", ".", "adjust_saturation", "(", "img", ",", "saturation_factor", ")", ")", ")", "\n", "\n", "", "if", "hue", "is", "not", "None", ":", "\n", "            ", "hue_factor", "=", "random", ".", "uniform", "(", "hue", "[", "0", "]", ",", "hue", "[", "1", "]", ")", "\n", "transforms", ".", "append", "(", "torchvision", ".", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "F", ".", "adjust_hue", "(", "img", ",", "hue_factor", ")", ")", ")", "\n", "\n", "", "random", ".", "shuffle", "(", "transforms", ")", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "transforms", ")", "\n", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter.get_grad_consistent_factors": [[512, 526], ["numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.stack", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform"], "methods", ["None"], ["", "def", "get_grad_consistent_factors", "(", "self", ")", ":", "\n", "        ", "brightness_factor_start", ",", "brightness_factor_end", "=", "random", ".", "uniform", "(", "*", "self", ".", "brightness", ")", ",", "random", ".", "uniform", "(", "*", "self", ".", "brightness", ")", "\n", "brightness_factors", "=", "np", ".", "linspace", "(", "brightness_factor_start", ",", "brightness_factor_end", ",", "self", ".", "seq_len", ")", "\n", "\n", "contrast_factor_start", ",", "contrast_factor_end", "=", "random", ".", "uniform", "(", "*", "self", ".", "contrast", ")", ",", "random", ".", "uniform", "(", "*", "self", ".", "contrast", ")", "\n", "contrast_factors", "=", "np", ".", "linspace", "(", "contrast_factor_start", ",", "contrast_factor_end", ",", "self", ".", "seq_len", ")", "\n", "\n", "saturation_factor_start", ",", "saturation_factor_end", "=", "random", ".", "uniform", "(", "*", "self", ".", "saturation", ")", ",", "random", ".", "uniform", "(", "*", "self", ".", "saturation", ")", "\n", "saturation_factors", "=", "np", ".", "linspace", "(", "saturation_factor_start", ",", "saturation_factor_end", ",", "self", ".", "seq_len", ")", "\n", "\n", "hue_factor_start", ",", "hue_factor_end", "=", "random", ".", "uniform", "(", "*", "self", ".", "hue", ")", ",", "random", ".", "uniform", "(", "*", "self", ".", "hue", ")", "\n", "hue_factors", "=", "np", ".", "linspace", "(", "hue_factor_start", ",", "hue_factor_end", ",", "self", ".", "seq_len", ")", "\n", "\n", "return", "np", ".", "stack", "(", "[", "brightness_factors", ",", "contrast_factors", ",", "saturation_factors", ",", "hue_factors", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter.get_params_fixed": [[527, 551], ["torchvision.transforms.append", "torchvision.transforms.append", "torchvision.transforms.append", "torchvision.transforms.append", "torchvision.transforms.append", "torchvision.transforms.append", "torchvision.transforms.append", "torchvision.transforms.append", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "shuffled_transforms.append", "torchvision.adjust_brightness", "torchvision.adjust_brightness", "torchvision.adjust_contrast", "torchvision.adjust_contrast", "torchvision.adjust_saturation", "torchvision.adjust_saturation", "torchvision.adjust_hue", "torchvision.adjust_hue"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_brightness", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_brightness", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_contrast", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_contrast", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_saturation", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.adjust_saturation"], ["", "@", "staticmethod", "\n", "def", "get_params_fixed", "(", "brightness_factor", ",", "contrast_factor", ",", "saturation_factor", ",", "hue_factor", ",", "shuffle_indices", ")", ":", "\n", "        ", "\"\"\"Get a randomized transform to be applied on image.\n        Arguments are same as that of __init__.\n        Returns:\n            Transform which randomly adjusts brightness, contrast and\n            saturation in a random order.\n        \"\"\"", "\n", "transforms", "=", "[", "]", "\n", "\n", "transforms", ".", "append", "(", "torchvision", ".", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "F", ".", "adjust_brightness", "(", "img", ",", "brightness_factor", ")", ")", ")", "\n", "\n", "transforms", ".", "append", "(", "torchvision", ".", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "F", ".", "adjust_contrast", "(", "img", ",", "contrast_factor", ")", ")", ")", "\n", "\n", "transforms", ".", "append", "(", "torchvision", ".", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "F", ".", "adjust_saturation", "(", "img", ",", "saturation_factor", ")", ")", ")", "\n", "\n", "transforms", ".", "append", "(", "torchvision", ".", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "F", ".", "adjust_hue", "(", "img", ",", "hue_factor", ")", ")", ")", "\n", "\n", "shuffled_transforms", "=", "[", "]", "\n", "for", "i", "in", "shuffle_indices", ":", "\n", "            ", "shuffled_transforms", ".", "append", "(", "transforms", "[", "i", "]", ")", "\n", "", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "shuffled_transforms", ")", "\n", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter.get_params_np": [[552, 585], ["random.shuffle", "random.uniform", "torchvision.transforms.append", "torchvision.transforms.append", "random.uniform", "torchvision.transforms.append", "torchvision.transforms.append", "random.uniform", "torchvision.transforms.append", "torchvision.transforms.append", "random.uniform", "torchvision.transforms.append", "torchvision.transforms.append", "transform", "augmentation.adjust_brightness_np", "augmentation.adjust_contrast_np", "augmentation.adjust_saturation_np", "augmentation.adjust_hue_np"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.adjust_brightness_np", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.adjust_contrast_np", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.adjust_saturation_np", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.adjust_hue_np"], ["", "@", "staticmethod", "\n", "def", "get_params_np", "(", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ")", ":", "\n", "        ", "\"\"\"Get a randomized transform to be applied on image.\n        Arguments are same as that of __init__.\n        Returns:\n            Transform which randomly adjusts brightness, contrast and\n            saturation in a random order.\n        \"\"\"", "\n", "transforms", "=", "[", "]", "\n", "\n", "if", "brightness", "is", "not", "None", ":", "\n", "            ", "brightness_factor", "=", "random", ".", "uniform", "(", "brightness", "[", "0", "]", ",", "brightness", "[", "1", "]", ")", "\n", "transforms", ".", "append", "(", "lambda", "img", ":", "adjust_brightness_np", "(", "img", ",", "brightness_factor", ")", ")", "\n", "\n", "", "if", "contrast", "is", "not", "None", ":", "\n", "            ", "contrast_factor", "=", "random", ".", "uniform", "(", "contrast", "[", "0", "]", ",", "contrast", "[", "1", "]", ")", "\n", "transforms", ".", "append", "(", "lambda", "img", ":", "adjust_contrast_np", "(", "img", ",", "contrast_factor", ")", ")", "\n", "\n", "", "if", "saturation", "is", "not", "None", ":", "\n", "            ", "saturation_factor", "=", "random", ".", "uniform", "(", "saturation", "[", "0", "]", ",", "saturation", "[", "1", "]", ")", "\n", "transforms", ".", "append", "(", "lambda", "img", ":", "adjust_saturation_np", "(", "img", ",", "saturation_factor", ")", ")", "\n", "\n", "", "if", "hue", "is", "not", "None", ":", "\n", "            ", "hue_factor", "=", "random", ".", "uniform", "(", "hue", "[", "0", "]", ",", "hue", "[", "1", "]", ")", "\n", "transforms", ".", "append", "(", "lambda", "img", ":", "adjust_hue_np", "(", "img", ",", "hue_factor", ")", ")", "\n", "\n", "", "random", ".", "shuffle", "(", "transforms", ")", "\n", "def", "_forward_function", "(", "img", ")", ":", "\n", "            ", "for", "transform", "in", "transforms", ":", "\n", "                ", "img", "=", "transform", "(", "img", ")", "\n", "", "return", "img", "\n", "\n", "", "return", "_forward_function", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter.__call__": [[587, 653], ["torch.is_tensor", "imgmap[].size", "enumerate", "range", "torch.cat", "result.append", "range", "torch.cat", "result.append", "w_patches.append", "range", "w_patches.append", "transform", "img_patches.append", "w_patches.clear", "augmentation.ColorJitter.get_grad_consistent_factors", "random.shuffle", "block_transforms.append", "transform", "img_patches.append", "w_patches.clear", "augmentation.ColorJitter.get_params", "range", "torch.cat", "augmentation.ColorJitter.get_params_fixed", "torch.cat", "numpy.random.uniform", "range"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter.get_grad_consistent_factors", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter.get_params", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter.get_params_fixed"], ["", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n", "        ", "assert", "torch", ".", "is_tensor", "(", "imgmap", "[", "0", "]", ")", "\n", "_", ",", "height", ",", "width", "=", "imgmap", "[", "0", "]", ".", "size", "(", ")", "\n", "height_unit", "=", "height", "//", "self", ".", "block", "\n", "width_unit", "=", "width", "//", "self", ".", "block", "\n", "\n", "result", "=", "[", "]", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "imgmap", ")", ":", "\n", "            ", "if", "not", "self", ".", "grad_consistent", ":", "\n", "                ", "if", "not", "self", ".", "consistent", "or", "idx", "%", "self", ".", "n_seqblock", "==", "0", ":", "\n", "                        ", "block_transforms", "=", "[", "self", ".", "get_params", "(", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "self", ".", "saturation", ",", "self", ".", "hue", ")", "if", "np", ".", "random", ".", "uniform", "(", "0.", ",", "1.", ")", "<", "self", ".", "threshold", "else", "lambda", "x", ":", "x", "\n", "for", "_", "in", "range", "(", "self", ".", "block", "*", "self", ".", "block", ")", "]", "\n", "\n", "", "img_patches", "=", "[", "]", "\n", "w_patches", "=", "[", "]", "\n", "for", "block_ind", "in", "range", "(", "self", ".", "block", "*", "self", ".", "block", ")", ":", "\n", "                    ", "transform", "=", "block_transforms", "[", "block_ind", "]", "\n", "\n", "height_ind", "=", "block_ind", "//", "self", ".", "block", "\n", "width_ind", "=", "block_ind", "%", "self", ".", "block", "\n", "\n", "height_start", "=", "height_unit", "*", "height_ind", "\n", "height_end", "=", "height_start", "+", "height_unit", "if", "height_ind", "<", "self", ".", "block", "-", "1", "else", "height", "\n", "\n", "width_start", "=", "width_unit", "*", "width_ind", "\n", "width_end", "=", "width_start", "+", "width_unit", "if", "width_ind", "<", "self", ".", "block", "-", "1", "else", "width", "\n", "\n", "w_patches", ".", "append", "(", "transform", "(", "img", "[", ":", ",", "height_start", ":", "height_end", ",", "width_start", ":", "width_end", "]", ")", ")", "\n", "if", "width_ind", "==", "self", ".", "block", "-", "1", ":", "\n", "                        ", "img_patches", ".", "append", "(", "torch", ".", "cat", "(", "w_patches", ",", "dim", "=", "2", ")", ")", "\n", "w_patches", ".", "clear", "(", ")", "\n", "", "", "img", "=", "torch", ".", "cat", "(", "img_patches", ",", "dim", "=", "1", ")", "\n", "result", ".", "append", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "if", "idx", "%", "self", ".", "seq_len", "==", "0", ":", "\n", "                    ", "block_transforms", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "block", "*", "self", ".", "block", ")", ":", "\n", "                        ", "block_factors", "=", "self", ".", "get_grad_consistent_factors", "(", ")", "\n", "block_shuffle_indices", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", "\n", "random", ".", "shuffle", "(", "block_shuffle_indices", ")", "\n", "block_seq_transforms", "=", "[", "self", ".", "get_params_fixed", "(", "*", "block_factors", "[", "i", "]", ",", "block_shuffle_indices", ")", "for", "i", "in", "range", "(", "self", ".", "seq_len", ")", "]", "\n", "block_transforms", ".", "append", "(", "block_seq_transforms", ")", "\n", "\n", "", "", "frame_ind_in_seq", "=", "idx", "%", "self", ".", "seq_len", "\n", "img_patches", "=", "[", "]", "\n", "w_patches", "=", "[", "]", "\n", "for", "block_ind", "in", "range", "(", "self", ".", "block", "*", "self", ".", "block", ")", ":", "\n", "                    ", "transform", "=", "block_transforms", "[", "block_ind", "]", "[", "frame_ind_in_seq", "]", "\n", "\n", "height_ind", "=", "block_ind", "//", "self", ".", "block", "\n", "width_ind", "=", "block_ind", "%", "self", ".", "block", "\n", "\n", "height_start", "=", "height_unit", "*", "height_ind", "\n", "height_end", "=", "height_start", "+", "height_unit", "if", "height_ind", "<", "self", ".", "block", "-", "1", "else", "height", "\n", "\n", "width_start", "=", "width_unit", "*", "width_ind", "\n", "width_end", "=", "width_start", "+", "width_unit", "if", "width_ind", "<", "self", ".", "block", "-", "1", "else", "width", "\n", "\n", "w_patches", ".", "append", "(", "transform", "(", "img", "[", ":", ",", "height_start", ":", "height_end", ",", "width_start", ":", "width_end", "]", ")", ")", "\n", "if", "width_ind", "==", "self", ".", "block", "-", "1", ":", "\n", "                        ", "img_patches", ".", "append", "(", "torch", ".", "cat", "(", "w_patches", ",", "dim", "=", "2", ")", ")", "\n", "w_patches", ".", "clear", "(", ")", "\n", "", "", "img", "=", "torch", ".", "cat", "(", "img_patches", ",", "dim", "=", "1", ")", "\n", "result", ".", "append", "(", "img", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ColorJitter.__repr__": [[654, 661], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "format_string", "+=", "'brightness={0}'", ".", "format", "(", "self", ".", "brightness", ")", "\n", "format_string", "+=", "', contrast={0}'", ".", "format", "(", "self", ".", "contrast", ")", "\n", "format_string", "+=", "', saturation={0}'", ".", "format", "(", "self", ".", "saturation", ")", "\n", "format_string", "+=", "', hue={0})'", ".", "format", "(", "self", ".", "hue", ")", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ChannelMask.__init__": [[664, 670], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "consistent", "=", "False", ",", "block", "=", "1", ",", "p", "=", "0.75", ",", "seq_len", "=", "16", ")", ":", "\n", "        ", "self", ".", "consistent", "=", "consistent", "\n", "self", ".", "block", "=", "block", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "assert", "self", ".", "seq_len", "==", "16", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.ChannelMask.__call__": [[671, 704], ["torch.is_tensor", "imgmap[].size", "enumerate", "range", "result.append", "numpy.random.uniform", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n", "        ", "assert", "torch", ".", "is_tensor", "(", "imgmap", "[", "0", "]", ")", "\n", "_", ",", "height", ",", "width", "=", "imgmap", "[", "0", "]", ".", "size", "(", ")", "\n", "height_unit", "=", "height", "//", "self", ".", "block", "\n", "width_unit", "=", "width", "//", "self", ".", "block", "\n", "\n", "result", "=", "[", "]", "\n", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "imgmap", ")", ":", "\n", "            ", "if", "not", "self", ".", "consistent", "or", "idx", "%", "self", ".", "seq_len", "==", "0", ":", "# re-init blockwise randfloats for each sequence or each frame", "\n", "                ", "randfloats", "=", "np", ".", "random", ".", "uniform", "(", "0.", ",", "1.", ",", "size", "=", "self", ".", "block", "*", "self", ".", "block", ")", "\n", "\n", "", "for", "block_ind", "in", "range", "(", "self", ".", "block", "*", "self", ".", "block", ")", ":", "\n", "                ", "randfloat", "=", "randfloats", "[", "block_ind", "]", "\n", "\n", "height_ind", "=", "block_ind", "//", "self", ".", "block", "\n", "width_ind", "=", "block_ind", "%", "self", ".", "block", "\n", "\n", "height_start", "=", "height_unit", "*", "height_ind", "\n", "height_end", "=", "height_start", "+", "height_unit", "if", "height_ind", "<", "self", ".", "block", "-", "1", "else", "height", "\n", "\n", "width_start", "=", "width_unit", "*", "width_ind", "\n", "width_end", "=", "width_start", "+", "width_unit", "if", "width_ind", "<", "self", ".", "block", "-", "1", "else", "width", "\n", "\n", "if", "randfloat", "<", "1", "-", "self", ".", "p", ":", "# no mask", "\n", "                    ", "continue", "\n", "", "else", ":", "# mask r g b", "\n", "                    ", "rgb_ind", "=", "int", "(", "randfloat", "*", "100", ")", "//", "int", "(", "100", "*", "(", "self", ".", "p", "/", "3.", ")", ")", "-", "1", "\n", "img", "[", "rgb_ind", ",", "height_start", ":", "height_end", ",", "width_start", ":", "width_end", "]", "=", "0", "\n", "\n", "", "", "result", ".", "append", "(", "img", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.GaussianBlur.__init__": [[708, 712], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", "=", "[", ".1", ",", "2.", "]", ",", "seq_len", "=", "16", ",", "n_seqblock", "=", "0", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "n_seqblock", "=", "n_seqblock", "if", "n_seqblock", "!=", "0", "else", "seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.GaussianBlur.__call__": [[713, 722], ["torch.is_tensor", "enumerate", "result.append", "random.uniform", "torchvision.transforms.ToPILImage", "torchvision.transforms.ToPILImage", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "img.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n", "        ", "assert", "torch", ".", "is_tensor", "(", "imgmap", "[", "0", "]", ")", "\n", "result", "=", "[", "]", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "imgmap", ")", ":", "\n", "            ", "if", "idx", "%", "self", ".", "n_seqblock", "==", "0", ":", "\n", "                ", "sigma", "=", "random", ".", "uniform", "(", "self", ".", "sigma", "[", "0", "]", ",", "self", ".", "sigma", "[", "1", "]", ")", "\n", "", "img", "=", "transforms", ".", "ToPILImage", "(", ")", "(", "img", ")", "\n", "result", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", "(", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", ")", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.Normalize.__init__": [[725, 728], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.Normalize.__call__": [[728, 731], ["torchvision.transforms.Normalize", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize."], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgmap", ")", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "return", "[", "normalize", "(", "i", ")", "for", "i", "in", "imgmap", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.TwoClipTransform.__init__": [[735, 741], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base_transform", ",", "null_transform", ",", "seq_len", ",", "p", "=", "0.3", ")", ":", "\n", "# p = probability to use base_transform", "\n", "        ", "self", ".", "base", "=", "base_transform", "\n", "self", ".", "null", "=", "null_transform", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "seq_len", "=", "seq_len", "# channel to split the tensor into two", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.TwoClipTransform.__call__": [[742, 759], ["tr1", "tr2", "len", "random.random", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "# target: list of image", "\n", "        ", "assert", "len", "(", "x", ")", "==", "2", "*", "self", ".", "seq_len", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "tr1", "=", "self", ".", "base", "\n", "", "else", ":", "\n", "            ", "tr1", "=", "self", ".", "null", "\n", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "tr2", "=", "self", ".", "base", "\n", "", "else", ":", "\n", "            ", "tr2", "=", "self", ".", "null", "\n", "\n", "", "q", "=", "tr1", "(", "x", "[", "0", ":", "self", ".", "seq_len", "]", ")", "\n", "k", "=", "tr2", "(", "x", "[", "self", ".", "seq_len", ":", ":", "]", ")", "\n", "return", "q", "+", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.MultipleClipTransform.__init__": [[763, 768], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transform_list", ",", "seq_len", ")", ":", "\n", "# p = probability to use base_transform", "\n", "        ", "self", ".", "transforms", "=", "transform_list", "\n", "self", ".", "num_transform", "=", "len", "(", "transform_list", ")", "\n", "self", ".", "seq_len", "=", "seq_len", "# channel to split the tensor into two", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.MultipleClipTransform.__call__": [[769, 781], ["range", "len", "len", "tsfmed_x.extend"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "# target: list of image", "\n", "\n", "        ", "assert", "len", "(", "x", ")", "==", "self", ".", "num_transform", "*", "self", ".", "seq_len", ",", "(", "len", "(", "x", ")", ",", "self", ".", "num_transform", ",", "self", ".", "seq_len", ")", "\n", "# assert self.num_transform == 3", "\n", "\n", "tsfmed_x", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_transform", ")", ":", "\n", "            ", "tsfmed_x", ".", "extend", "(", "self", ".", "transforms", "[", "i", "]", "(", "\n", "x", "[", "self", ".", "seq_len", "*", "i", ":", "self", ".", "seq_len", "*", "(", "i", "+", "1", ")", "]", ")", "\n", ")", "\n", "", "return", "tsfmed_x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.MultiRandomizedTransform.__init__": [[784, 794], ["len", "augmentation.MultiRandomizedTransform.weights.append", "numpy.cumsum"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transform_list", ",", "seq_len", ",", "weights", "=", "None", ")", ":", "\n", "# p = probability to use base_transform", "\n", "        ", "self", ".", "transforms", "=", "transform_list", "\n", "self", ".", "num_transform", "=", "len", "(", "transform_list", ")", "\n", "self", ".", "seq_len", "=", "seq_len", "# channel to split the tensor into two", "\n", "assert", "weights", "is", "not", "None", "\n", "self", ".", "weights", "=", "[", "]", "\n", "for", "weight", "in", "weights", ":", "\n", "            ", "self", ".", "weights", ".", "append", "(", "np", ".", "cumsum", "(", "weight", ")", ")", "\n", "assert", "self", ".", "weights", "[", "-", "1", "]", "[", "-", "1", "]", "==", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.MultiRandomizedTransform.__call__": [[795, 811], ["range", "len", "len", "numpy.random.uniform", "tsfmed_x.extend", "len"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "# target: list of image", "\n", "        ", "assert", "len", "(", "x", ")", "%", "self", ".", "seq_len", "==", "0", "\n", "num_seqs", "=", "len", "(", "x", ")", "//", "self", ".", "seq_len", "\n", "# assert self.num_transform == 3", "\n", "assert", "num_seqs", "==", "len", "(", "self", ".", "weights", ")", "\n", "\n", "tsfmed_x", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_seqs", ")", ":", "\n", "            ", "rand_p", "=", "np", ".", "random", ".", "uniform", "(", ")", "\n", "tsfm_ind", "=", "0", "\n", "while", "rand_p", ">=", "self", ".", "weights", "[", "i", "]", "[", "tsfm_ind", "]", ":", "tsfm_ind", "+=", "1", "\n", "tsfmed_x", ".", "extend", "(", "self", ".", "transforms", "[", "tsfm_ind", "]", "(", "\n", "x", "[", "self", ".", "seq_len", "*", "i", ":", "self", ".", "seq_len", "*", "(", "i", "+", "1", ")", "]", ")", "\n", ")", "\n", "", "return", "tsfmed_x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.RandomizedTransform.__init__": [[815, 824], ["len", "numpy.cumsum", "len", "numpy.ones"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transform_list", ",", "seq_len", ",", "weights", "=", "None", ")", ":", "\n", "# p = probability to use base_transform", "\n", "        ", "self", ".", "transforms", "=", "transform_list", "\n", "self", ".", "num_transform", "=", "len", "(", "transform_list", ")", "\n", "self", ".", "seq_len", "=", "seq_len", "# channel to split the tensor into two", "\n", "self", ".", "weights", "=", "np", ".", "ones", "(", "self", ".", "num_transform", ")", "/", "self", ".", "num_transform", "if", "weights", "is", "None", "else", "weights", "\n", "self", ".", "weights", "=", "np", ".", "cumsum", "(", "self", ".", "weights", ")", "\n", "assert", "self", ".", "weights", "[", "-", "1", "]", "==", "1.", "\n", "assert", "len", "(", "weights", ")", "==", "self", ".", "num_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.RandomizedTransform.__call__": [[825, 840], ["range", "len", "numpy.random.uniform", "tsfmed_x.extend", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "# target: list of image", "\n", "        ", "assert", "len", "(", "x", ")", "%", "self", ".", "seq_len", "==", "0", "\n", "num_seqs", "=", "len", "(", "x", ")", "//", "self", ".", "seq_len", "\n", "# assert self.num_transform == 3", "\n", "\n", "tsfmed_x", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_seqs", ")", ":", "\n", "            ", "rand_p", "=", "np", ".", "random", ".", "uniform", "(", ")", "\n", "tsfm_ind", "=", "0", "\n", "while", "rand_p", ">=", "self", ".", "weights", "[", "tsfm_ind", "]", ":", "tsfm_ind", "+=", "1", "\n", "tsfmed_x", ".", "extend", "(", "self", ".", "transforms", "[", "tsfm_ind", "]", "(", "\n", "x", "[", "self", ".", "seq_len", "*", "i", ":", "self", ".", "seq_len", "*", "(", "i", "+", "1", ")", "]", ")", "\n", ")", "\n", "", "return", "tsfmed_x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.OneClipTransform.__init__": [[844, 848], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base_transform", ",", "null_transform", ",", "seq_len", ")", ":", "\n", "        ", "self", ".", "base", "=", "base_transform", "\n", "self", ".", "null", "=", "null_transform", "\n", "self", ".", "seq_len", "=", "seq_len", "# channel to split the tensor into two", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.OneClipTransform.__call__": [[849, 867], ["tr1", "tr2", "len", "random.random", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "# target: list of image", "\n", "        ", "assert", "len", "(", "x", ")", "==", "2", "*", "self", ".", "seq_len", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "tr1", ",", "tr2", "=", "self", ".", "base", ",", "self", ".", "null", "\n", "", "else", ":", "\n", "            ", "tr1", ",", "tr2", "=", "self", ".", "null", ",", "self", ".", "base", "\n", "\n", "# randomly abandon half", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "xx", "=", "x", "[", "0", ":", "self", ".", "seq_len", "]", "\n", "", "else", ":", "\n", "            ", "xx", "=", "x", "[", "self", ".", "seq_len", ":", ":", "]", "\n", "\n", "", "q", "=", "tr1", "(", "xx", ")", "\n", "k", "=", "tr2", "(", "xx", ")", "\n", "return", "q", "+", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.TransformController.__init__": [[870, 875], ["len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform_list", ",", "weights", ")", ":", "\n", "        ", "self", ".", "transform_list", "=", "transform_list", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "num_transform", "=", "len", "(", "transform_list", ")", "\n", "assert", "self", ".", "num_transform", "==", "len", "(", "self", ".", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.TransformController.__call__": [[876, 879], ["random.choices", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "idx", "=", "random", ".", "choices", "(", "range", "(", "self", ".", "num_transform", ")", ",", "weights", "=", "self", ".", "weights", ")", "[", "0", "]", "\n", "return", "self", ".", "transform_list", "[", "idx", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.TransformController.__str__": [[880, 883], ["str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "string", "=", "'TransformController: %s with weights: %s'", "%", "(", "str", "(", "self", ".", "transform_list", ")", ",", "str", "(", "self", ".", "weights", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.TwoCropsTransform.__init__": [[888, 890], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base_transform", ")", ":", "\n", "        ", "self", ".", "base_transform", "=", "base_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.TwoCropsTransform.__call__": [[891, 895], ["augmentation.TwoCropsTransform.base_transform", "augmentation.TwoCropsTransform.base_transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "q", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "k", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "return", "[", "q", ",", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation._blend_np": [[14, 18], ["img1.astype.astype", "numpy.rint().clip().astype", "numpy.rint().clip", "numpy.rint"], "function", ["None"], ["def", "_blend_np", "(", "img1", ",", "img2", ",", "ratio", ")", ":", "\n", "    ", "dtype", "=", "img1", ".", "dtype", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "np", ".", "rint", "(", "(", "img1", "*", "ratio", "+", "img2", "*", "(", "1", "-", "ratio", ")", ")", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation._rgb_to_grayscale_np": [[19, 25], ["None"], "function", ["None"], ["", "def", "_rgb_to_grayscale_np", "(", "img", ")", ":", "\n", "    ", "assert", "img", ".", "shape", "[", "2", "]", "==", "3", "\n", "dtype", "=", "img", ".", "dtype", "\n", "l_img", "=", "(", "0.2989", "*", "img", "[", "...", ",", "0", "]", "+", "0.5870", "*", "img", "[", "...", ",", "1", "]", "+", "0.1140", "*", "img", "[", "...", ",", "2", "]", ")", ".", "astype", "(", "dtype", ")", "\n", "l_img", "=", "l_img", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "return", "l_img", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation._rgb2hsv_np": [[26, 66], ["numpy.split", "img.max", "img.min", "numpy.ones_like", "numpy.where", "numpy.fmod", "numpy.stack", "r.squeeze", "g.squeeze", "b.squeeze", "numpy.where"], "function", ["None"], ["", "def", "_rgb2hsv_np", "(", "img", ")", ":", "\n", "# implemented from torch", "\n", "    ", "r", ",", "g", ",", "b", "=", "np", ".", "split", "(", "img", ",", "3", ",", "axis", "=", "2", ")", "\n", "r", ",", "g", ",", "b", "=", "r", ".", "squeeze", "(", ")", ",", "g", ".", "squeeze", "(", ")", ",", "b", ".", "squeeze", "(", ")", "\n", "\n", "# Implementation is based on https://github.com/python-pillow/Pillow/blob/4174d4267616897df3746d315d5a2d0f82c656ee/", "\n", "# src/libImaging/Convert.c#L330", "\n", "maxc", "=", "img", ".", "max", "(", "2", ")", "\n", "minc", "=", "img", ".", "min", "(", "2", ")", "\n", "\n", "# The algorithm erases S and H channel where `maxc = minc`. This avoids NaN", "\n", "# from happening in the results, because", "\n", "#   + S channel has division by `maxc`, which is zero only if `maxc = minc`", "\n", "#   + H channel has division by `(maxc - minc)`.", "\n", "#", "\n", "# Instead of overwriting NaN afterwards, we just prevent it from occuring so", "\n", "# we don't need to deal with it in case we save the NaN in a buffer in", "\n", "# backprop, if it is ever supported, but it doesn't hurt to do so.", "\n", "eqc", "=", "maxc", "==", "minc", "\n", "\n", "cr", "=", "maxc", "-", "minc", "\n", "# Since `eqc => cr = 0`, replacing denominator with 1 when `eqc` is fine.", "\n", "ones", "=", "np", ".", "ones_like", "(", "maxc", ")", "\n", "s", "=", "cr", "/", "np", ".", "where", "(", "eqc", ",", "ones", ",", "maxc", ")", "\n", "# Note that `eqc => maxc = minc = r = g = b`. So the following calculation", "\n", "# of `h` would reduce to `bc - gc + 2 + rc - bc + 4 + rc - bc = 6` so it", "\n", "# would not matter what values `rc`, `gc`, and `bc` have here, and thus", "\n", "# replacing denominator with 1 when `eqc` is fine.", "\n", "cr_divisor", "=", "np", ".", "where", "(", "eqc", ",", "ones", ",", "cr", ")", "\n", "\n", "rc", "=", "(", "maxc", "-", "r", ")", "/", "cr_divisor", "\n", "gc", "=", "(", "maxc", "-", "g", ")", "/", "cr_divisor", "\n", "bc", "=", "(", "maxc", "-", "b", ")", "/", "cr_divisor", "\n", "\n", "hr", "=", "(", "maxc", "==", "r", ")", "*", "(", "bc", "-", "gc", ")", "\n", "hg", "=", "(", "(", "maxc", "==", "g", ")", "&", "(", "maxc", "!=", "r", ")", ")", "*", "(", "2.0", "+", "rc", "-", "bc", ")", "\n", "hb", "=", "(", "(", "maxc", "!=", "g", ")", "&", "(", "maxc", "!=", "r", ")", ")", "*", "(", "4.0", "+", "gc", "-", "rc", ")", "\n", "h", "=", "(", "hr", "+", "hg", "+", "hb", ")", "\n", "h", "=", "np", ".", "fmod", "(", "(", "h", "/", "6.0", "+", "1.0", ")", ",", "1.0", ")", "\n", "return", "np", ".", "stack", "(", "(", "h", ",", "s", ",", "maxc", ")", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation._hsv2rgb_np": [[67, 89], ["numpy.split", "numpy.floor", "i.astype.astype", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.einsum", "res.transpose.transpose", "h.squeeze", "s.squeeze", "v.squeeze", "numpy.arange().reshape", "numpy.arange"], "function", ["None"], ["", "def", "_hsv2rgb_np", "(", "img", ")", ":", "\n", "    ", "h", ",", "s", ",", "v", "=", "np", ".", "split", "(", "img", ",", "3", ",", "axis", "=", "2", ")", "\n", "h", ",", "s", ",", "v", "=", "h", ".", "squeeze", "(", ")", ",", "s", ".", "squeeze", "(", ")", ",", "v", ".", "squeeze", "(", ")", "\n", "i", "=", "np", ".", "floor", "(", "h", "*", "6.0", ")", "\n", "f", "=", "(", "h", "*", "6.0", ")", "-", "i", "\n", "i", "=", "i", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "p", "=", "np", ".", "clip", "(", "(", "v", "*", "(", "1.0", "-", "s", ")", ")", ",", "0.0", ",", "1.0", ")", "\n", "q", "=", "np", ".", "clip", "(", "(", "v", "*", "(", "1.0", "-", "s", "*", "f", ")", ")", ",", "0.0", ",", "1.0", ")", "\n", "t", "=", "np", ".", "clip", "(", "(", "v", "*", "(", "1.0", "-", "s", "*", "(", "1.0", "-", "f", ")", ")", ")", ",", "0.0", ",", "1.0", ")", "\n", "i", "=", "i", "%", "6", "\n", "\n", "mask", "=", "(", "i", "[", "np", ".", "newaxis", ",", "...", "]", "==", "np", ".", "arange", "(", "6", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "1", ")", ")", ")", ".", "astype", "(", "img", ".", "dtype", ")", "\n", "\n", "a1", "=", "np", ".", "stack", "(", "(", "v", ",", "q", ",", "p", ",", "p", ",", "t", ",", "v", ")", ",", "axis", "=", "0", ")", "# (6, h, w)", "\n", "a2", "=", "np", ".", "stack", "(", "(", "t", ",", "v", ",", "v", ",", "q", ",", "p", ",", "p", ")", ",", "axis", "=", "0", ")", "\n", "a3", "=", "np", ".", "stack", "(", "(", "p", ",", "p", ",", "t", ",", "v", ",", "v", ",", "q", ")", ",", "axis", "=", "0", ")", "\n", "a4", "=", "np", ".", "stack", "(", "(", "a1", ",", "a2", ",", "a3", ")", ",", "axis", "=", "0", ")", "# (3, 6, h, w)", "\n", "\n", "res", "=", "np", ".", "einsum", "(", "\"...ijk, ...xijk -> ...xjk\"", ",", "mask", ",", "a4", ")", "\n", "res", "=", "res", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.adjust_brightness_np": [[90, 93], ["augmentation._blend_np"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation._blend_np"], ["", "def", "adjust_brightness_np", "(", "img", ",", "ratio", ")", ":", "\n", "    ", "assert", "img", ".", "shape", "[", "2", "]", "==", "3", "\n", "return", "_blend_np", "(", "img", ",", "0", ",", "ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.adjust_contrast_np": [[94, 98], ["numpy.mean", "augmentation._blend_np", "_rgb_to_grayscale_np().astype", "augmentation._rgb_to_grayscale_np"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation._blend_np", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation._rgb_to_grayscale_np"], ["", "def", "adjust_contrast_np", "(", "img", ",", "factor", ")", ":", "\n", "    ", "orig_dtype", "=", "img", ".", "dtype", "\n", "mean", "=", "np", ".", "mean", "(", "_rgb_to_grayscale_np", "(", "img", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "axis", "=", "(", "-", "3", ",", "-", "2", ",", "-", "1", ")", ",", "keepdims", "=", "True", ")", "\n", "return", "_blend_np", "(", "img", ",", "mean", ",", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.adjust_hue_np": [[99, 112], ["augmentation._rgb2hsv_np", "numpy.split", "numpy.concatenate", "augmentation._hsv2rgb_np", "np.concatenate.astype"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation._rgb2hsv_np", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation._hsv2rgb_np"], ["", "def", "adjust_hue_np", "(", "img", ",", "factor", ")", ":", "\n", "    ", "orig_dtype", "=", "img", ".", "dtype", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "\n", "img", "=", "_rgb2hsv_np", "(", "img", ")", "\n", "h", ",", "s", ",", "v", "=", "np", ".", "split", "(", "img", ",", "3", ",", "axis", "=", "2", ")", "\n", "h", "=", "(", "h", "+", "factor", ")", "%", "1.0", "\n", "img", "=", "np", ".", "concatenate", "(", "(", "h", ",", "s", ",", "v", ")", ",", "axis", "=", "2", ")", "\n", "img_hue_adj", "=", "_hsv2rgb_np", "(", "img", ")", "\n", "\n", "img_hue_adj", "=", "(", "img_hue_adj", "*", "255.", ")", ".", "astype", "(", "orig_dtype", ")", "\n", "\n", "return", "img_hue_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation.adjust_saturation_np": [[113, 115], ["augmentation._blend_np", "augmentation._rgb_to_grayscale_np"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation._blend_np", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.augmentation._rgb_to_grayscale_np"], ["", "def", "adjust_saturation_np", "(", "img", ",", "factor", ")", ":", "\n", "    ", "return", "_blend_np", "(", "img", ",", "_rgb_to_grayscale_np", "(", "img", ")", ",", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP.__init__": [[56, 106], ["local_dataset.read_file", "print", "len", "print", "os.path.dirname", "os.path.join", "pandas.read_csv", "video_info[].str.split().str.get", "pandas.read_csv", "video_info[].str.split().str.get", "pandas.read_csv.sample", "pandas.read_csv.drop", "os.path.abspath", "[].strip", "range", "range", "os.path.join", "video_info[].str.split().str.get", "len", "os.path.join", "video_info[].str.split().str.get", "len", "len", "len", "len", "pandas.unique", "pandas.unique", "video_info[].str.split", "video_info[].str.split", "i.split", "video_info[].str.split", "video_info[].str.split"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.read_file"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'%s/../process_data/data/ucf101'", "%", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\n", "db_path", "=", "\"data/UCF101/frame\"", ",", "\n", "num_frames", "=", "16", ",", "\n", "transform", "=", "None", ",", "\n", "mode", "=", "'val'", ",", "\n", "ds", "=", "1", ",", "\n", "which_split", "=", "1", ",", "\n", "return_path", "=", "False", ",", "\n", "return_label", "=", "False", ",", ")", ":", "\n", "\n", "        ", "self", ".", "num_readers", "=", "1", "\n", "# self.reader = KVReader(db_path, self.num_readers)   ", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "db_path", "=", "db_path", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "self", ".", "ds", "=", "ds", "\n", "self", ".", "which_split", "=", "which_split", "\n", "self", ".", "return_label", "=", "return_label", "\n", "self", ".", "return_path", "=", "return_path", "\n", "\n", "classes", "=", "read_file", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'ClassInd.txt'", ")", ")", "\n", "if", "','", "in", "classes", "[", "0", "]", ":", "classes", "=", "[", "i", ".", "split", "(", "','", ")", "[", "-", "1", "]", ".", "strip", "(", ")", "for", "i", "in", "classes", "]", "\n", "print", "(", "'Frame Dataset from \"%s\" has #class %d'", "%", "(", "root", ",", "len", "(", "classes", ")", ")", ")", "\n", "\n", "self", ".", "num_class", "=", "len", "(", "classes", ")", "\n", "self", ".", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "self", ".", "idx_to_class", "=", "{", "i", ":", "classes", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "\n", "print", "(", "'Loading data from %s, split:%d'", "%", "(", "self", ".", "db_path", ",", "self", ".", "which_split", ")", ")", "\n", "split_mode", "=", "mode", "\n", "if", "mode", "==", "'test'", ":", "\n", "            ", "video_info", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'%s_split%02d.csv'", "%", "(", "split_mode", ",", "which_split", ")", ")", ",", "\n", "header", "=", "None", ")", "# first column", "\n", "video_info", "[", "2", "]", "=", "video_info", "[", "0", "]", ".", "str", ".", "split", "(", "'/'", ")", ".", "str", ".", "get", "(", "-", "3", ")", "# class for each row, e.g. makeup", "\n", "video_info", "[", "3", "]", "=", "video_info", "[", "2", "]", "+", "'/'", "+", "video_info", "[", "0", "]", ".", "str", ".", "split", "(", "'/'", ")", ".", "str", ".", "get", "(", "\n", "-", "2", ")", "# frame dir for each row, e.g. makeup/v_makeup_g01_c01", "\n", "assert", "len", "(", "pd", ".", "unique", "(", "video_info", "[", "2", "]", ")", ")", "==", "self", ".", "num_class", "\n", "", "else", ":", "\n", "            ", "if", "mode", "==", "'val'", ":", "split_mode", "=", "'train'", "\n", "video_info", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'%s_split%02d.csv'", "%", "(", "split_mode", ",", "which_split", ")", ")", ",", "\n", "header", "=", "None", ")", "# first column", "\n", "video_info", "[", "2", "]", "=", "video_info", "[", "0", "]", ".", "str", ".", "split", "(", "'/'", ")", ".", "str", ".", "get", "(", "-", "3", ")", "# class for each row, e.g. makeup", "\n", "video_info", "[", "3", "]", "=", "video_info", "[", "2", "]", "+", "'/'", "+", "video_info", "[", "0", "]", ".", "str", ".", "split", "(", "'/'", ")", ".", "str", ".", "get", "(", "\n", "-", "2", ")", "# frame dir for each row, e.g. makeup/v_makeup_g01_c01", "\n", "val_split", "=", "video_info", ".", "sample", "(", "n", "=", "800", ",", "random_state", "=", "666", ")", "\n", "train_split", "=", "video_info", ".", "drop", "(", "val_split", ")", "\n", "video_info", "=", "train_split", "if", "mode", "==", "'train'", "else", "val_split", "\n", "assert", "len", "(", "pd", ".", "unique", "(", "video_info", "[", "2", "]", ")", ")", "==", "self", ".", "num_class", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP.frame_sampler": [[107, 139], ["random.randint", "numpy.expand_dims", "numpy.zeros_like.flatten", "random.randint", "numpy.random.choice", "numpy.arange", "numpy.zeros_like", "numpy.arange", "numpy.expand_dims", "numpy.random.choice", "numpy.zeros_like", "range", "numpy.ones_like", "numpy.arange", "range", "numpy.ones_like", "numpy.arange", "len", "numpy.arange", "len", "len", "len"], "methods", ["None"], ["", "", "def", "frame_sampler", "(", "self", ",", "total", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'test'", ":", "# half overlap - 1", "\n", "            ", "if", "total", "-", "self", ".", "num_frames", "*", "self", ".", "ds", "<=", "0", ":", "# pad left, only sample once", "\n", "                ", "sequence", "=", "np", ".", "arange", "(", "self", ".", "num_frames", ")", "*", "self", ".", "ds", "\n", "if", "random", ".", "randint", "(", "0", ",", "1", ")", ":", "# pad left", "\n", "                    ", "seq_idx", "=", "np", ".", "zeros_like", "(", "sequence", ")", "\n", "sequence", "=", "sequence", "[", "sequence", "<", "total", "]", "\n", "seq_idx", "[", "-", "len", "(", "sequence", ")", ":", ":", "]", "=", "sequence", "\n", "", "else", ":", "\n", "                    ", "seq_idx", "=", "np", ".", "ones_like", "(", "sequence", ")", "*", "(", "total", "-", "1", ")", "\n", "sequence", "=", "sequence", "[", "sequence", "<", "total", "]", "\n", "seq_idx", "[", ":", "len", "(", "sequence", ")", "]", "=", "sequence", "\n", "", "", "else", ":", "\n", "                ", "available", "=", "total", "-", "self", ".", "num_frames", "*", "self", ".", "ds", "\n", "start", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "0", ",", "available", "+", "1", ",", "self", ".", "num_frames", "*", "self", ".", "ds", "//", "2", "-", "1", ")", ",", "1", ")", "\n", "seq_idx", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "self", ".", "num_frames", ")", "*", "self", ".", "ds", ",", "0", ")", "+", "start", "# [test_sample, num_frames]", "\n", "seq_idx", "=", "seq_idx", ".", "flatten", "(", ")", "\n", "", "", "else", ":", "# train or val", "\n", "            ", "if", "total", "-", "self", ".", "num_frames", "*", "self", ".", "ds", "<=", "0", ":", "\n", "                ", "sequence", "=", "np", ".", "arange", "(", "self", ".", "num_frames", ")", "*", "self", ".", "ds", "+", "np", ".", "random", ".", "choice", "(", "range", "(", "self", ".", "ds", ")", ",", "1", ")", "\n", "if", "random", ".", "randint", "(", "0", ",", "1", ")", ":", "# pad left", "\n", "                    ", "seq_idx", "=", "np", ".", "zeros_like", "(", "sequence", ")", "\n", "sequence", "=", "sequence", "[", "sequence", "<", "total", "]", "\n", "seq_idx", "[", "-", "len", "(", "sequence", ")", ":", ":", "]", "=", "sequence", "\n", "", "else", ":", "# pad right", "\n", "                    ", "seq_idx", "=", "np", ".", "ones_like", "(", "sequence", ")", "*", "(", "total", "-", "1", ")", "\n", "sequence", "=", "sequence", "[", "sequence", "<", "total", "]", "\n", "seq_idx", "[", ":", "len", "(", "sequence", ")", "]", "=", "sequence", "\n", "", "", "else", ":", "\n", "                ", "start", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "total", "-", "self", ".", "num_frames", "*", "self", ".", "ds", ")", ",", "1", ")", "\n", "seq_idx", "=", "np", ".", "arange", "(", "self", ".", "num_frames", ")", "*", "self", ".", "ds", "+", "start", "\n", "", "", "return", "seq_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP.double_sampler": [[140, 144], ["local_dataset.UCF101LMDB_2CLIP.frame_sampler", "local_dataset.UCF101LMDB_2CLIP.frame_sampler", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.frame_sampler", "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.frame_sampler"], ["", "def", "double_sampler", "(", "self", ",", "total", ")", ":", "\n", "        ", "seq1", "=", "self", ".", "frame_sampler", "(", "total", ")", "\n", "seq2", "=", "self", ".", "frame_sampler", "(", "total", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "seq1", ",", "seq2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP.__getitem__": [[145, 165], ["local_dataset.UCF101LMDB_2CLIP.double_sampler", "torch.stack", "PIL.Image.open", "local_dataset.UCF101LMDB_2CLIP.transform", "local_dataset.UCF101LMDB_2CLIP.encode_action", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP.double_sampler", "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP.encode_action"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "vpath", ",", "vlen", ",", "vlabel", ",", "vname", "=", "self", ".", "video_subset", ".", "iloc", "[", "index", "]", "\n", "\n", "frame_index", "=", "self", ".", "double_sampler", "(", "vlen", ")", "\n", "keys", "=", "[", "f'{vname}/image_{i + 1:05d}.jpg'", "for", "i", "in", "frame_index", "]", "\n", "seq", "=", "[", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "db_path", ",", "key", ")", ")", "for", "key", "in", "keys", "]", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "seq", "=", "self", ".", "transform", "(", "seq", ")", "\n", "", "seq", "=", "torch", ".", "stack", "(", "seq", ",", "dim", "=", "1", ")", "\n", "\n", "ret", "=", "{", "'seq'", ":", "seq", "}", "\n", "\n", "if", "self", ".", "return_label", ":", "\n", "            ", "vid", "=", "self", ".", "encode_action", "(", "vlabel", ")", "\n", "if", "self", ".", "return_path", ":", "\n", "                ", "ret", "[", "'vpath'", "]", "=", "vpath", "\n", "ret", "[", "'vid'", "]", "=", "vid", "\n", "", "else", ":", "\n", "                ", "ret", "[", "'vid'", "]", "=", "vid", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP.__len__": [[166, 168], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "video_subset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP.encode_action": [[169, 171], ["None"], "methods", ["None"], ["", "def", "encode_action", "(", "self", ",", "action_name", ")", ":", "\n", "        ", "return", "self", ".", "class_to_idx", "[", "action_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP.decode_action": [[172, 174], ["None"], "methods", ["None"], ["", "def", "decode_action", "(", "self", ",", "action_code", ")", ":", "\n", "        ", "return", "self", ".", "idx_to_class", "[", "action_code", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB.__init__": [[177, 179], ["local_dataset.UCF101LMDB_2CLIP.__init__"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UCF101LMDB", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB.__getitem__": [[180, 202], ["local_dataset.UCF101LMDB.frame_sampler", "torch.stack", "PIL.Image.open", "local_dataset.UCF101LMDB.transform", "local_dataset.UCF101LMDB.encode_action", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.frame_sampler", "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP.encode_action"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "vpath", ",", "vlen", ",", "vlabel", ",", "vname", "=", "self", ".", "video_subset", ".", "iloc", "[", "index", "]", "\n", "\n", "frame_index", "=", "self", ".", "frame_sampler", "(", "vlen", ")", "\n", "\n", "keys", "=", "[", "f'{vname}/image_{i + 1:05d}.jpg'", "for", "i", "in", "frame_index", "]", "\n", "\n", "seq", "=", "[", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "db_path", ",", "key", ")", ")", "for", "key", "in", "keys", "]", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "seq", "=", "self", ".", "transform", "(", "seq", ")", "\n", "seq", "=", "torch", ".", "stack", "(", "seq", ",", "1", ")", "\n", "\n", "ret", "=", "{", "'seq'", ":", "seq", ",", "\n", "'vname'", ":", "vname", "}", "\n", "if", "self", ".", "return_label", ":", "\n", "            ", "vid", "=", "self", ".", "encode_action", "(", "vlabel", ")", "\n", "if", "self", ".", "return_path", ":", "\n", "                ", "ret", "[", "'vpath'", "]", "=", "vpath", "\n", "ret", "[", "'vid'", "]", "=", "vid", "\n", "", "else", ":", "\n", "                ", "ret", "[", "'vid'", "]", "=", "vid", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Protytype.__init__": [[205, 207], ["local_dataset.UCF101LMDB_2CLIP.__init__"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UCF101LMDB_2CLIP_Protytype", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Protytype.frame_sampler": [[208, 215], ["numpy.random.randint", "numpy.clip().astype", "numpy.arange", "numpy.clip"], "methods", ["None"], ["", "def", "frame_sampler", "(", "self", ",", "total", ",", "center_lower", "=", "0", ",", "center_upper", "=", "0", ")", ":", "\n", "        ", "if", "center_upper", "==", "0", ":", "\n", "            ", "center_upper", "=", "total", "\n", "", "center_ind", "=", "np", ".", "random", ".", "randint", "(", "center_lower", ",", "center_upper", ")", "\n", "diff_seq", "=", "(", "np", ".", "arange", "(", "self", ".", "num_frames", ")", "-", "self", ".", "num_frames", "//", "2", ")", "*", "self", ".", "ds", "\n", "sequence", "=", "np", ".", "clip", "(", "diff_seq", "+", "center_ind", ",", "0", ",", "total", "-", "1", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "return", "sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Protytype.sample_prototype": [[216, 218], ["local_dataset.UCF101LMDB_2CLIP_Protytype.frame_sampler"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.frame_sampler"], ["", "def", "sample_prototype", "(", "self", ",", "total", ")", ":", "\n", "        ", "return", "self", ".", "frame_sampler", "(", "total", ",", "0", ",", "total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Protytype.__getitem__": [[219, 244], ["local_dataset.UCF101LMDB_2CLIP_Protytype.sample_prototype", "local_dataset.UCF101LMDB_2CLIP_Protytype.sample_prototype", "numpy.concatenate", "torch.stack", "local_dataset.UCF101LMDB_2CLIP_Protytype.transform", "local_dataset.UCF101LMDB_2CLIP_Protytype.encode_action", "PIL.Image.open", "Exception", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.sample_prototype", "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.sample_prototype", "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP.encode_action"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "vpath", ",", "vlen", ",", "vlabel", ",", "vname", "=", "self", ".", "video_subset", ".", "iloc", "[", "index", "]", "\n", "\n", "frame_index1", "=", "self", ".", "sample_prototype", "(", "vlen", ")", "\n", "frame_index2", "=", "self", ".", "sample_prototype", "(", "vlen", ")", "\n", "frame_index", "=", "np", ".", "concatenate", "(", "(", "frame_index1", ",", "frame_index2", ")", ")", "\n", "keys", "=", "[", "f'{vname}/image_{i + 1:05d}.jpg'", "for", "i", "in", "frame_index", "]", "\n", "try", ":", "\n", "            ", "seq", "=", "[", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "db_path", ",", "key", ")", ")", "for", "key", "in", "keys", "]", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "\"Loading Error\"", ")", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "seq", "=", "self", ".", "transform", "(", "seq", ")", "\n", "", "seq", "=", "torch", ".", "stack", "(", "seq", ",", "dim", "=", "1", ")", "\n", "\n", "ret", "=", "{", "'seq'", ":", "seq", "}", "\n", "\n", "if", "self", ".", "return_label", ":", "\n", "            ", "vid", "=", "self", ".", "encode_action", "(", "vlabel", ")", "\n", "if", "self", ".", "return_path", ":", "\n", "                ", "ret", "[", "'vpath'", "]", "=", "vpath", "\n", "ret", "[", "'vid'", "]", "=", "vid", "\n", "", "else", ":", "\n", "                ", "ret", "[", "'vid'", "]", "=", "vid", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.__init__": [[247, 251], ["local_dataset.UCF101LMDB_2CLIP_Protytype.__init__"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rand_flip", "=", "False", ",", "aug_series", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UCF101LMDB_2CLIP_Stage_Prototype", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "aug_series", "=", "aug_series", "\n", "self", ".", "rand_flip", "=", "rand_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.frame_sampler": [[252, 264], ["numpy.random.randint", "numpy.clip().astype", "random.uniform", "random.uniform", "numpy.arange", "numpy.clip"], "methods", ["None"], ["", "def", "frame_sampler", "(", "self", ",", "total", ",", "center_lower", "=", "0", ",", "center_upper", "=", "0", ",", "repeat_prob", "=", "0.25", ",", "length", "=", "0", ")", ":", "\n", "        ", "length", "=", "self", ".", "num_frames", "if", "length", "==", "0", "else", "length", "\n", "if", "center_upper", "==", "0", ":", "\n", "            ", "center_upper", "=", "total", "\n", "", "center_ind", "=", "np", ".", "random", ".", "randint", "(", "center_lower", ",", "center_upper", ")", "\n", "diff_seq", "=", "(", "np", ".", "arange", "(", "length", ")", "-", "length", "//", "2", ")", "*", "self", ".", "ds", "\n", "if", "random", ".", "uniform", "(", "0.", ",", "1.", ")", ">=", "repeat_prob", ":", "# allow cross boundary", "\n", "            ", "center_lower", "=", "0", "\n", "", "if", "random", ".", "uniform", "(", "0.", ",", "1.", ")", ">=", "repeat_prob", ":", "# allow cross boundary", "\n", "            ", "center_upper", "=", "total", "\n", "", "sequence", "=", "np", ".", "clip", "(", "diff_seq", "+", "center_ind", ",", "center_lower", ",", "center_upper", "-", "1", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "return", "sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.sample_prototype": [[265, 267], ["local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.frame_sampler"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.frame_sampler"], ["", "def", "sample_prototype", "(", "self", ",", "total", ")", ":", "\n", "        ", "return", "self", ".", "frame_sampler", "(", "total", ",", "0", ",", "total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.sample_prototype_split": [[268, 270], ["local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.frame_sampler"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.frame_sampler"], ["", "def", "sample_prototype_split", "(", "self", ",", "total", ")", ":", "\n", "        ", "return", "self", ".", "frame_sampler", "(", "total", ",", "0", ",", "total", ",", "repeat_prob", "=", "1.0", ",", "length", "=", "self", ".", "num_frames", ")", "# do not allow cross boundary", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.__getitem__": [[271, 309], ["local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.sample_prototype", "local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.sample_prototype", "numpy.concatenate", "torch.stack", "random.randint", "local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.transform", "local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.encode_action", "PIL.Image.open", "Exception", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.sample_prototype", "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.sample_prototype", "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP.encode_action"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "vpath", ",", "vlen", ",", "vlabel", ",", "vname", "=", "self", ".", "video_subset", ".", "iloc", "[", "index", "]", "\n", "\n", "flip", "=", "0", "\n", "if", "self", ".", "rand_flip", ":", "flip", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "\n", "frame_index1", "=", "self", ".", "sample_prototype", "(", "vlen", ")", "\n", "if", "flip", ":", "\n", "            ", "frame_index1", "=", "frame_index1", "[", ":", ":", "-", "1", "]", "\n", "", "frame_index2", "=", "self", ".", "sample_prototype", "(", "vlen", ")", "\n", "if", "flip", ":", "\n", "            ", "frame_index2", "=", "frame_index2", "[", ":", ":", "-", "1", "]", "\n", "", "frame_index", "=", "np", ".", "concatenate", "(", "(", "frame_index1", ",", "frame_index2", ")", ")", "\n", "\n", "keys", "=", "[", "f'{vname}/image_{i + 1:05d}.jpg'", "for", "i", "in", "frame_index", "]", "\n", "try", ":", "\n", "            ", "seq", "=", "[", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "db_path", ",", "key", ")", ")", "for", "key", "in", "keys", "]", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "\"Loading Error\"", ")", "\n", "\n", "", "if", "self", ".", "aug_series", ":", "\n", "            ", "seq", "=", "seq", "[", ":", "2", "*", "self", ".", "num_frames", "]", "+", "seq", "[", ":", "self", ".", "num_frames", "]", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "seq", "=", "self", ".", "transform", "(", "seq", ")", "\n", "", "seq", "=", "torch", ".", "stack", "(", "seq", ",", "dim", "=", "1", ")", "\n", "\n", "ret", "=", "{", "'seq'", ":", "seq", "}", "\n", "\n", "if", "self", ".", "return_label", ":", "\n", "            ", "vid", "=", "self", ".", "encode_action", "(", "vlabel", ")", "\n", "if", "self", ".", "return_path", ":", "\n", "                ", "ret", "[", "'vpath'", "]", "=", "vpath", "\n", "ret", "[", "'vid'", "]", "=", "vid", "\n", "ret", "[", "'vname'", "]", "=", "vname", "\n", "", "else", ":", "\n", "                ", "ret", "[", "'vid'", "]", "=", "vid", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101_10CLIP.__init__": [[312, 314], ["local_dataset.UCF101LMDB_2CLIP.__init__"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UCF101_10CLIP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101_10CLIP.__getitem__": [[315, 351], ["range", "min", "max", "numpy.linspace", "torch.stack", "PIL.Image.open", "max", "list", "new_seq_indices.extend", "local_dataset.UCF101_10CLIP.transform", "local_dataset.UCF101_10CLIP.encode_action", "os.path.join", "int", "range", "min"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.UCF101LMDB_2CLIP.encode_action"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "vpath", ",", "vlen", ",", "vlabel", ",", "vname", "=", "self", ".", "video_subset", ".", "iloc", "[", "index", "]", "\n", "\n", "frame_index", "=", "range", "(", "vlen", ")", "\n", "\n", "keys", "=", "[", "f'{vname}/image_{i + 1:05d}.jpg'", "for", "i", "in", "frame_index", "]", "\n", "\n", "seq", "=", "[", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "db_path", ",", "key", ")", ")", "for", "key", "in", "keys", "]", "\n", "\n", "new_seq_indices", "=", "[", "]", "\n", "\n", "# assert vlen >= self.ds * (self.num_frames-1) + 1, vlen", "\n", "min_index", "=", "min", "(", "self", ".", "num_frames", "*", "self", ".", "ds", "//", "2", ",", "vlen", ")", "\n", "max_index", "=", "max", "(", "min_index", ",", "vlen", "-", "self", ".", "num_frames", "*", "self", ".", "ds", "//", "2", ")", "\n", "for", "clip_center", "in", "np", ".", "linspace", "(", "min_index", ",", "max_index", ",", "10", ")", ":", "\n", "            ", "clip_start", "=", "max", "(", "0", ",", "int", "(", "clip_center", "-", "self", ".", "num_frames", "*", "self", ".", "ds", "//", "2", ")", ")", "\n", "clip_indices", "=", "list", "(", "range", "(", "clip_start", ",", "clip_start", "+", "self", ".", "num_frames", "*", "self", ".", "ds", ",", "self", ".", "ds", ")", ")", "\n", "clip_indices", "=", "[", "min", "(", "t", ",", "vlen", "-", "1", ")", "for", "t", "in", "clip_indices", "]", "\n", "new_seq_indices", ".", "extend", "(", "clip_indices", ")", "\n", "\n", "", "seq", "=", "[", "seq", "[", "i", "]", "for", "i", "in", "new_seq_indices", "]", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "seq", "=", "self", ".", "transform", "(", "seq", ")", "\n", "seq", "=", "torch", ".", "stack", "(", "seq", ",", "1", ")", "\n", "\n", "ret", "=", "{", "'seq'", ":", "seq", ",", "\n", "'vname'", ":", "vname", "}", "\n", "\n", "if", "self", ".", "return_label", ":", "\n", "            ", "vid", "=", "self", ".", "encode_action", "(", "vlabel", ")", "\n", "if", "self", ".", "return_path", ":", "\n", "                ", "ret", "[", "'vpath'", "]", "=", "vpath", "\n", "ret", "[", "'vid'", "]", "=", "vid", "\n", "", "else", ":", "\n", "                ", "ret", "[", "'vid'", "]", "=", "vid", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.HMDB51LMDB.__init__": [[355, 359], ["local_dataset.UCF101LMDB.__init__", "os.path.dirname", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'%s/../process_data/data/hmdb51'", "%", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\n", "db_path", "=", "\"data/HMDB51/frame\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "HMDB51LMDB", ",", "self", ")", ".", "__init__", "(", "root", "=", "root", ",", "db_path", "=", "db_path", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.HMDB51_10CLIP.__init__": [[362, 366], ["local_dataset.UCF101_10CLIP.__init__", "os.path.dirname", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'%s/../process_data/data/hmdb51'", "%", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\n", "db_path", "=", "\"data/HMDB51/frame\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "HMDB51_10CLIP", ",", "self", ")", ".", "__init__", "(", "root", "=", "root", ",", "db_path", "=", "db_path", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.HMDB51LMDB_2CLIP_Stage_Prototype.__init__": [[369, 373], ["local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.__init__", "os.path.dirname", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'%s/../process_data/data/hmdb51'", "%", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\n", "db_path", "=", "\"data/HMDB51/frame\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "HMDB51LMDB_2CLIP_Stage_Prototype", ",", "self", ")", ".", "__init__", "(", "root", "=", "root", ",", "db_path", "=", "db_path", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.K400LMDB.__init__": [[377, 381], ["local_dataset.UCF101LMDB.__init__", "os.path.dirname", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'%s/../process_data/data/k400'", "%", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\n", "db_path", "=", "\"data/K400/frame\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "K400LMDB", ",", "self", ")", ".", "__init__", "(", "root", "=", "root", ",", "db_path", "=", "db_path", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.K400_10CLIP.__init__": [[384, 388], ["local_dataset.UCF101_10CLIP.__init__", "os.path.dirname", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'%s/../process_data/data/k400'", "%", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\n", "db_path", "=", "\"data/K400/frame\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "K400_10CLIP", ",", "self", ")", ".", "__init__", "(", "root", "=", "root", ",", "db_path", "=", "db_path", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.K400LMDB_2CLIP_Stage_Prototype.__init__": [[391, 395], ["local_dataset.UCF101LMDB_2CLIP_Stage_Prototype.__init__", "os.path.dirname", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'%s/../process_data/data/k400'", "%", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\n", "db_path", "=", "\"data/K400/frame\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "K400LMDB_2CLIP_Stage_Prototype", ",", "self", ")", ".", "__init__", "(", "root", "=", "root", ",", "db_path", "=", "db_path", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.read_file": [[31, 36], ["open", "f.readlines", "i.strip"], "function", ["None"], ["def", "read_file", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "readlines", "(", ")", "\n", "", "content", "=", "[", "i", ".", "strip", "(", ")", "for", "i", "in", "content", "]", "\n", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.pil_from_raw_rgb": [[38, 40], ["PIL.Image.open().convert", "PIL.Image.open", "io.BytesIO"], "function", ["None"], ["", "def", "pil_from_raw_rgb", "(", "raw", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "BytesIO", "(", "raw", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.read_json": [[42, 46], ["open", "json.load"], "function", ["None"], ["", "def", "read_json", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "content", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.dataset.local_dataset.shuffle_along_axis": [[48, 51], ["numpy.random.rand().argsort", "numpy.take_along_axis", "numpy.random.rand"], "function", ["None"], ["", "def", "shuffle_along_axis", "(", "a", ",", "axis", ")", ":", "\n", "    ", "idx", "=", "np", ".", "random", ".", "rand", "(", "*", "a", ".", "shape", ")", ".", "argsort", "(", "axis", "=", "axis", ")", "\n", "return", "np", ".", "take_along_axis", "(", "a", ",", "idx", ",", "axis", "=", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.simclr.SimCLR_Naked.__init__": [[23, 53], ["torch.Module.__init__", "backbone.select_backbone.select_backbone", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "simclr.SimCLR_Naked.encoder_q.extend", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.select_backbone.select_backbone"], ["def", "__init__", "(", "self", ",", "network", "=", "'s3d'", ",", "dim", "=", "128", ",", "T", "=", "0.07", ",", "distributed", "=", "True", ",", "nonlinear", "=", "True", ")", ":", "\n", "        ", "'''\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 2048)\n        m: moco momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        '''", "\n", "super", "(", "SimCLR_Naked", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "distributed", "=", "distributed", "\n", "self", ".", "T", "=", "T", "\n", "\n", "# assert not distributed, 'distributed simclr is not supported yet'", "\n", "self", ".", "nonlinear", "=", "nonlinear", "\n", "\n", "# create the encoders (including non-linear projection head: 2 FC layers)", "\n", "backbone", ",", "self", ".", "param", "=", "select_backbone", "(", "network", ")", "\n", "feature_size", "=", "self", ".", "param", "[", "'feature_size'", "]", "\n", "self", ".", "encoder_q", "=", "nn", ".", "ModuleList", "(", "[", "\n", "backbone", ",", "\n", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "]", ")", "\n", "if", "nonlinear", ":", "\n", "            ", "self", ".", "encoder_q", ".", "extend", "(", "[", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "]", ")", "\n", "\n", "", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.simclr.SimCLR_Naked.calc_contrast_loss": [[56, 100], ["features.view().permute().contiguous().view.view().permute().contiguous().view.size", "features.view().permute().contiguous().view.view().permute().contiguous().view.size", "features.view().permute().contiguous().view.view().permute().contiguous().view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().long().cuda.cuda", "torch.zeros().long().cuda.cuda", "torch.zeros().long().cuda.cuda", "torch.zeros().long().cuda.cuda", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "labels[].view", "similarity_matrix[].view", "similarity_matrix[].view", "similarity_matrix[].view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "simclr.SimCLR_Naked.criterion", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "features.view().permute().contiguous().view.view().permute().contiguous().view.size", "features.view().permute().contiguous().view.view().permute().contiguous().view.view().permute().contiguous().view", "features.view().permute().contiguous().view.view().permute().contiguous().view.size", "utils.utils.GatherLayer.apply", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "features.view().permute().contiguous().view.view().permute().contiguous().view.view().permute().contiguous", "range", "torch.zeros().long().cuda.unsqueeze", "torch.zeros().long().cuda.unsqueeze", "torch.zeros().long().cuda.unsqueeze", "torch.zeros().long().cuda.unsqueeze", "torch.zeros().long().cuda.unsqueeze", "torch.zeros().long().cuda.unsqueeze", "torch.zeros().long().cuda.unsqueeze", "torch.zeros().long().cuda.unsqueeze", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "features.view().permute().contiguous().view.view().permute().contiguous().view.view().permute", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "features.view().permute().contiguous().view.view().permute().contiguous().view.view"], "methods", ["None"], ["", "def", "calc_contrast_loss", "(", "self", ",", "features", ",", "n_views", "=", "2", ",", "prefix", "=", "'clip_'", ")", ":", "\n", "# input features is normed features", "\n", "        ", "assert", "len", "(", "features", ".", "size", "(", ")", ")", "==", "3", ",", "features", ".", "size", "(", ")", "\n", "B", ",", "N", ",", "dim", "=", "features", ".", "size", "(", ")", "\n", "assert", "N", "==", "n_views", "and", "dim", "==", "self", ".", "dim", ",", "features", ".", "size", "(", ")", "\n", "# distributed gathering", "\n", "if", "self", ".", "distributed", ":", "\n", "            ", "features", "=", "torch", ".", "cat", "(", "GatherLayer", ".", "apply", "(", "features", ")", ",", "dim", "=", "0", ")", "\n", "N", "=", "features", ".", "size", "(", "0", ")", "\n", "features", "=", "features", ".", "view", "(", "N", ",", "n_views", ",", "dim", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "n_views", "*", "N", ",", "dim", ")", "# (2N)xd", "\n", "# assert features.size(0) % 2 == 0", "\n", "# N = features.size(0)// n_views", "\n", "", "labels", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "N", ")", "for", "i", "in", "range", "(", "n_views", ")", "]", ",", "dim", "=", "0", ")", "# (2, N) -> (2*N,)", "\n", "labels", "=", "(", "labels", ".", "unsqueeze", "(", "0", ")", "==", "labels", ".", "unsqueeze", "(", "1", ")", ")", ".", "float", "(", ")", "# (2B, 2B)", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "similarity_matrix", "=", "torch", ".", "matmul", "(", "features", ",", "features", ".", "T", ")", "# (2B,2B)", "\n", "\n", "# discard the main diagonal from both: labels and similarities matrix", "\n", "mask", "=", "torch", ".", "eye", "(", "labels", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", "[", "~", "mask", "]", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "# (2B, 2B-1)", "\n", "similarity_matrix", "=", "similarity_matrix", "[", "~", "mask", "]", ".", "view", "(", "similarity_matrix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "# (2B, 2B-1)", "\n", "# assert similarity_matrix.shape == labels.shape", "\n", "\n", "# select and combine multiple positives", "\n", "positives", "=", "similarity_matrix", "[", "labels", ".", "bool", "(", ")", "]", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "# select only the negatives the negatives", "\n", "negatives", "=", "similarity_matrix", "[", "~", "labels", ".", "bool", "(", ")", "]", ".", "view", "(", "similarity_matrix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "positives", ",", "negatives", "]", ",", "dim", "=", "1", ")", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "logits", "=", "logits", "/", "self", ".", "T", "\n", "\n", "contrast_loss", "=", "self", ".", "criterion", "(", "logits", ",", "labels", ")", "\n", "\n", "ret", "=", "{", "\n", "f\"{prefix}logits\"", ":", "logits", ",", "\n", "f\"{prefix}labels\"", ":", "labels", ",", "\n", "f\"{prefix}contrast_loss\"", ":", "contrast_loss", "\n", "}", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.simclr.SimCLR_Naked.forward": [[101, 122], ["block.size", "block.view", "enumerate", "torch.normalize().squeeze().view", "torch.normalize().squeeze().view", "torch.normalize().squeeze().view", "torch.normalize().squeeze().view", "simclr.SimCLR_Naked.calc_contrast_loss", "mod", "torch.normalize().squeeze", "torch.normalize().squeeze", "torch.normalize().squeeze", "torch.normalize().squeeze", "block.size", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.model.simclr.SimCLR_Naked.calc_contrast_loss", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize"], ["", "def", "forward", "(", "self", ",", "block", ")", ":", "\n", "        ", "'''\n            modified from simCLR\n            https://github.com/sthalles/SimCLR/blob/1848fc934ad844ae630e6c452300433fe99acfd9/simclr.py#L26\n        '''", "\n", "B", "=", "block", ".", "size", "(", "0", ")", "\n", "\n", "(", "batch_size", ",", "n_views", ",", "*", "_", ")", "=", "block", ".", "shape", "# [B,N,C,T,H,W]", "\n", "assert", "n_views", "==", "2", "\n", "x", "=", "block", ".", "view", "(", "-", "1", ",", "*", "(", "block", ".", "size", "(", ")", "[", "2", ":", "]", ")", ")", "# (B*n, ...)", "\n", "features", "=", "x", "\n", "for", "i", ",", "mod", "in", "enumerate", "(", "self", ".", "encoder_q", ")", ":", "\n", "            ", "features", "=", "mod", "(", "features", ")", "\n", "if", "i", "==", "1", ":", "\n", "                ", "backbone_features", "=", "features", "\n", "\n", "", "", "features", "=", "F", ".", "normalize", "(", "features", ",", "dim", "=", "1", ")", ".", "squeeze", "(", ")", ".", "view", "(", "B", ",", "n_views", ",", "self", ".", "dim", ")", "\n", "\n", "ret", "=", "self", ".", "calc_contrast_loss", "(", "features", ",", "n_views", ",", "'clip_'", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.simclr.SimCLR_Naked.get_features": [[123, 128], ["block.size", "feature.mean"], "methods", ["None"], ["", "def", "get_features", "(", "self", ",", "block", ")", ":", "\n", "        ", "B", ",", "C", ",", "T", ",", "H", ",", "W", "=", "block", ".", "size", "(", ")", "\n", "_", ",", "feature_list", "=", "self", ".", "encoder_q", "[", "0", "]", "(", "block", ",", "ret_frame_feature", "=", "True", ",", "multi_level", "=", "True", ")", "\n", "attn_list", "=", "[", "feature", ".", "mean", "(", "dim", "=", "1", ")", "for", "feature", "in", "feature_list", "]", "\n", "return", "attn_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.simclr.SimCLR_TimeSeriesV4.__init__": [[135, 180], ["torch.Module.__init__", "backbone.select_backbone.select_backbone", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "simclr.SimCLR_TimeSeriesV4.encoder_q.extend", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.select_backbone.select_backbone"], ["def", "__init__", "(", "self", ",", "network", "=", "'s3d'", ",", "dim", "=", "128", ",", "T", "=", "0.07", ",", "distributed", "=", "True", ",", "nonlinear", "=", "True", ",", "n_series", "=", "2", ",", "series_dim", "=", "64", ",", "\n", "series_T", "=", "0.07", ",", "aligned_T", "=", "0.07", ",", "mode", "=", "\"clip-sr-tc\"", ",", "args", "=", "None", ")", ":", "\n", "        ", "'''\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 2048)\n        m: moco momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        '''", "\n", "super", "(", "SimCLR_TimeSeriesV4", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cnt", "=", "0", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "distributed", "=", "distributed", "\n", "self", ".", "T", "=", "T", "\n", "# assert not distributed, 'distributed simclr is not supported yet'", "\n", "self", ".", "nonlinear", "=", "nonlinear", "\n", "self", ".", "n_series", "=", "n_series", "\n", "self", ".", "series_dim", "=", "series_dim", "\n", "self", ".", "series_T", "=", "series_T", "\n", "self", ".", "aligned_T", "=", "aligned_T", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "with_clip", "=", "'clip'", "in", "mode", "\n", "self", ".", "with_sr", "=", "'sr'", "in", "mode", "\n", "self", ".", "with_tc", "=", "'tc'", "in", "mode", "\n", "\n", "# create the encoders (including non-linear projection head: 2 FC layers)", "\n", "backbone", ",", "self", ".", "param", "=", "select_backbone", "(", "network", ")", "\n", "feature_size", "=", "self", ".", "param", "[", "'feature_size'", "]", "\n", "self", ".", "encoder_q", "=", "nn", ".", "ModuleList", "(", "[", "\n", "backbone", ",", "\n", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "]", ")", "\n", "if", "nonlinear", "and", "self", ".", "with_clip", ":", "\n", "            ", "self", ".", "encoder_q", ".", "extend", "(", "[", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "]", ")", "\n", "\n", "", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "self", ".", "series_proj_head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "series_dim", "*", "self", ".", "n_series", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.simclr.SimCLR_TimeSeriesV4.calc_clip_contrast_loss": [[183, 230], ["features.permute().contiguous().view.permute().contiguous().view.size", "features.permute().contiguous().view.permute().contiguous().view.size", "features.permute().contiguous().view.permute().contiguous().view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().long().cuda.cuda", "torch.zeros().long().cuda.cuda", "torch.zeros().long().cuda.cuda", "torch.zeros().long().cuda.cuda", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "labels[].view", "similarity_matrix[].view", "similarity_matrix[].view", "similarity_matrix[].view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "simclr.SimCLR_TimeSeriesV4.criterion", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "features.permute().contiguous().view.permute().contiguous().view.size", "features.permute().contiguous().view.permute().contiguous().view.view().permute().contiguous().view", "features.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "features.permute().contiguous().view.permute().contiguous().view.size", "utils.utils.GatherLayer.apply", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "features.permute().contiguous().view.permute().contiguous().view.view().permute().contiguous", "features.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "range", "torch.zeros().long().cuda.unsqueeze", "torch.zeros().long().cuda.unsqueeze", "torch.zeros().long().cuda.unsqueeze", "torch.zeros().long().cuda.unsqueeze", "torch.zeros().long().cuda.unsqueeze", "torch.zeros().long().cuda.unsqueeze", "torch.zeros().long().cuda.unsqueeze", "torch.zeros().long().cuda.unsqueeze", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "features.permute().contiguous().view.permute().contiguous().view.view().permute", "features.permute().contiguous().view.permute().contiguous().view.permute", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "features.permute().contiguous().view.permute().contiguous().view.view"], "methods", ["None"], ["", "def", "calc_clip_contrast_loss", "(", "self", ",", "features", ",", "n_views", "=", "2", ",", "prefix", "=", "'clip_'", ")", ":", "\n", "# input features is normed features", "\n", "        ", "assert", "len", "(", "features", ".", "size", "(", ")", ")", "==", "3", ",", "features", ".", "size", "(", ")", "\n", "B", ",", "N", ",", "dim", "=", "features", ".", "size", "(", ")", "\n", "assert", "N", "==", "n_views", ",", "features", ".", "size", "(", ")", "\n", "# distributed gathering", "\n", "N", "=", "B", "\n", "if", "self", ".", "distributed", ":", "\n", "            ", "features", "=", "torch", ".", "cat", "(", "GatherLayer", ".", "apply", "(", "features", ")", ",", "dim", "=", "0", ")", "\n", "N", "=", "features", ".", "size", "(", "0", ")", "\n", "features", "=", "features", ".", "view", "(", "N", ",", "n_views", ",", "dim", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "n_views", "*", "N", ",", "dim", ")", "# (2N)xd", "\n", "", "else", ":", "\n", "            ", "features", "=", "features", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "n_views", "*", "B", ",", "dim", ")", "\n", "# assert features.size(0) % 2 == 0", "\n", "# N = features.size(0)// n_views", "\n", "", "labels", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "N", ")", "for", "i", "in", "range", "(", "n_views", ")", "]", ",", "dim", "=", "0", ")", "# (2, N) -> (2*N,)", "\n", "labels", "=", "(", "labels", ".", "unsqueeze", "(", "0", ")", "==", "labels", ".", "unsqueeze", "(", "1", ")", ")", ".", "float", "(", ")", "# (2B, 2B)", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "similarity_matrix", "=", "torch", ".", "matmul", "(", "features", ",", "features", ".", "T", ")", "# (2B,2B)", "\n", "\n", "# discard the main diagonal from both: labels and similarities matrix", "\n", "mask", "=", "torch", ".", "eye", "(", "labels", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", "[", "~", "mask", "]", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "# (2B, 2B-1)", "\n", "similarity_matrix", "=", "similarity_matrix", "[", "~", "mask", "]", ".", "view", "(", "similarity_matrix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "# (2B, 2B-1)", "\n", "# assert similarity_matrix.shape == labels.shape", "\n", "\n", "# select and combine multiple positives", "\n", "positives", "=", "similarity_matrix", "[", "labels", ".", "bool", "(", ")", "]", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "# select only the negatives the negatives", "\n", "negatives", "=", "similarity_matrix", "[", "~", "labels", ".", "bool", "(", ")", "]", ".", "view", "(", "similarity_matrix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "positives", ",", "negatives", "]", ",", "dim", "=", "1", ")", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "logits", "=", "logits", "/", "self", ".", "T", "\n", "\n", "contrast_loss", "=", "self", ".", "criterion", "(", "logits", ",", "labels", ")", "\n", "\n", "ret", "=", "{", "\n", "f\"{prefix}logits\"", ":", "logits", ",", "\n", "f\"{prefix}labels\"", ":", "labels", ",", "\n", "f\"{prefix}contrast_loss\"", ":", "contrast_loss", "\n", "}", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.simclr.SimCLR_TimeSeriesV4.calc_ranking_loss": [[231, 279], ["features.permute().contiguous().view.permute().contiguous().view.size", "features.permute().contiguous().view.permute().contiguous().view.size", "features.permute().contiguous().view.permute().contiguous().view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "labels.cuda.cuda.cuda", "features.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "similarity_matrix[].view", "similarity_matrix[].view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "len", "features.permute().contiguous().view.permute().contiguous().view.transpose().contiguous", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "features.permute().contiguous().view.permute().contiguous().view.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "features.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "range", "labels.cuda.cuda.unsqueeze", "labels.cuda.cuda.unsqueeze", "features.permute().contiguous().view.permute().contiguous().view.transpose", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "features.permute().contiguous().view.permute().contiguous().view.permute", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat().view.size", "torch.cat().view.size", "torch.cat().view.size", "torch.cat().view.size", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log"], ["", "def", "calc_ranking_loss", "(", "self", ",", "features", ",", "n_views", "=", "2", ",", "prefix", "=", "'ranking_'", ",", "weight", "=", "1.", ")", ":", "\n", "        ", "'''\n            corresponding shuffled features should be the same\n            while also surpasing the second highest features by margin (hyperparam) = 0\n        '''", "\n", "# input features is normed features", "\n", "assert", "len", "(", "features", ".", "size", "(", ")", ")", "==", "4", ",", "features", ".", "size", "(", ")", "\n", "Bn", ",", "n_series", ",", "N", ",", "dim", "=", "features", ".", "size", "(", ")", "\n", "assert", "n_series", "==", "self", ".", "n_series", "\n", "assert", "N", "==", "n_views", "and", "dim", "==", "self", ".", "series_dim", ",", "features", ".", "size", "(", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "n_series", ")", "for", "i", "in", "range", "(", "n_views", ")", "]", ",", "dim", "=", "0", ")", "# (2, n_series) -> (2*n_Series,)", "\n", "labels", "=", "(", "labels", ".", "unsqueeze", "(", "0", ")", "==", "labels", ".", "unsqueeze", "(", "1", ")", ")", ".", "float", "(", ")", "# (2s, 2s)", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "features", "=", "features", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "Bn", ",", "n_views", "*", "n_series", ",", "dim", ")", "\n", "\n", "similarity_matrix", "=", "torch", ".", "bmm", "(", "features", ",", "features", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "# (bn, 2s, 2s)", "\n", "\n", "# discard the main diagonal from both: labels and similarities matrix", "\n", "mask", "=", "torch", ".", "eye", "(", "labels", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "similarity_matrix", ")", "\n", "corr_mask_1", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "n_series", ",", "n_series", ")", ",", "torch", ".", "eye", "(", "n_series", ")", "]", ",", "dim", "=", "1", ")", "\n", "corr_mask_2", "=", "torch", ".", "cat", "(", "[", "torch", ".", "eye", "(", "n_series", ")", ",", "torch", ".", "zeros", "(", "n_series", ",", "n_series", ")", "]", ",", "dim", "=", "1", ")", "\n", "corr_mask", "=", "torch", ".", "cat", "(", "[", "corr_mask_1", ",", "corr_mask_2", "]", ")", ".", "cuda", "(", ")", ".", "bool", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "similarity_matrix", ")", "\n", "left_mask", "=", "~", "(", "mask", "|", "corr_mask", ")", "\n", "\n", "highest_similarity", "=", "similarity_matrix", "[", "corr_mask", "]", ".", "view", "(", "Bn", ",", "2", "*", "n_series", ",", "1", ")", "\n", "second_highest_similarity", "=", "similarity_matrix", "[", "left_mask", "]", ".", "view", "(", "Bn", ",", "2", "*", "n_series", ",", "2", "*", "n_series", "-", "2", ")", "\n", "diff", "=", "second_highest_similarity", "-", "highest_similarity", "\n", "margin_loss", "=", "weight", "*", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "(", "diff", "/", "self", ".", "args", ".", "shufflerank_theta", ")", ".", "clip", "(", "max", "=", "5.0", ")", ")", ")", ".", "mean", "(", ")", "\n", "\n", "margin_logits", "=", "torch", ".", "cat", "(", "[", "highest_similarity", ",", "second_highest_similarity", "]", ",", "dim", "=", "2", ")", ".", "view", "(", "-", "1", ",", "2", "*", "n_series", "-", "1", ")", "\n", "margin_labels", "=", "torch", ".", "zeros", "(", "margin_logits", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# margin_loss = weight * F.relu(second_highest_similarity - highest_similarity).mean()", "\n", "# if self.cnt % 100 == 0:", "\n", "#     correct_rate = ((second_highest_similarity - highest_similarity) < 0)", "\n", "#     print(f\"<<<<<<< margin_acc \")", "\n", "\n", "# sim_loss = weight * (1- highest_similarity).mean()", "\n", "\n", "ret", "=", "{", "\n", "f\"{prefix}margin_logits\"", ":", "margin_logits", ",", "\n", "f\"{prefix}margin_labels\"", ":", "margin_labels", ",", "\n", "f\"{prefix}margin_contrast_loss\"", ":", "margin_loss", "\n", "}", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.simclr.SimCLR_TimeSeriesV4.calc_tc_contrast_loss": [[280, 338], ["torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "[].permute().contiguous().view", "torch.cat.view().permute().contiguous().view", "torch.cat.view().permute().contiguous().view", "torch.cat.view().permute().contiguous().view", "torch.cat.view().permute().contiguous().view", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().long().cuda.cuda", "torch.zeros().long().cuda.cuda", "torch.zeros().long().cuda.cuda", "torch.zeros().long().cuda.cuda", "torch.matmul().contiguous.mean", "torch.matmul().contiguous.mean", "torch.matmul().contiguous.mean", "torch.matmul().contiguous.mean", "similarity_matrix[].view.contiguous", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "labels[].view", "similarity_matrix[].view", "similarity_matrix[].view", "similarity_matrix[].view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "simclr.SimCLR_TimeSeriesV4.criterion", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.get_rank", "torch.get_rank", "torch.get_rank", "torch.get_rank", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "utils.utils.GatherLayer.apply", "[].permute().contiguous", "torch.cat.view().permute().contiguous", "torch.cat.view().permute().contiguous", "torch.cat.view().permute().contiguous", "torch.cat.view().permute().contiguous", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "[].permute().contiguous().view.unsqueeze", "torch.cat.view().permute().contiguous().view.unsqueeze().transpose", "range", "range", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "[].permute", "torch.cat.view().permute", "torch.cat.view().permute", "torch.cat.view().permute", "torch.cat.view().permute", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.view().permute().contiguous().view.unsqueeze", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "torch.zeros().long().cuda.bool", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view"], "methods", ["None"], ["", "def", "calc_tc_contrast_loss", "(", "self", ",", "features", ",", "prefix", "=", "\"tc_\"", ")", ":", "\n", "        ", "B", ",", "n_views", ",", "n_series", ",", "dim", "=", "features", ".", "size", "(", ")", "\n", "assert", "n_series", "==", "self", ".", "n_series", "and", "dim", "==", "self", ".", "series_dim", "\n", "rank", "=", "0", "\n", "world_size", "=", "1", "\n", "if", "self", ".", "distributed", ":", "\n", "            ", "features", "=", "torch", ".", "cat", "(", "GatherLayer", ".", "apply", "(", "features", ")", ",", "dim", "=", "0", ")", "\n", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "# rank = 0", "\n", "", "N", "=", "features", ".", "size", "(", "0", ")", "\n", "N_per_rank", "=", "N", "//", "world_size", "\n", "i_base", "=", "N_per_rank", "*", "rank", "\n", "row_features", "=", "features", ".", "view", "(", "N", ",", "n_views", ",", "n_series", ",", "dim", ")", "[", "i_base", ":", "i_base", "+", "N_per_rank", "]", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "n_views", "*", "N_per_rank", ",", "n_series", ",", "dim", ")", "\n", "col_features", "=", "features", ".", "view", "(", "N", ",", "n_views", ",", "n_series", ",", "dim", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "n_views", "*", "N", ",", "n_series", ",", "dim", ")", "\n", "\n", "series_similarity_matrix", "=", "torch", ".", "matmul", "(", "row_features", ".", "unsqueeze", "(", "1", ")", ",", "col_features", ".", "unsqueeze", "(", "0", ")", ".", "transpose", "(", "3", ",", "2", ")", ")", ".", "contiguous", "(", ")", "# (2n, 2N, n_series, n_series)", "\n", "\n", "col_labels", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "N", ")", "for", "i", "in", "range", "(", "n_views", ")", "]", ",", "dim", "=", "0", ")", "# (2, N) -> (2*N,)", "\n", "row_labels", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "i_base", ",", "i_base", "+", "N_per_rank", ")", "for", "i", "in", "range", "(", "n_views", ")", "]", ",", "dim", "=", "0", ")", "\n", "labels", "=", "(", "row_labels", ".", "unsqueeze", "(", "1", ")", "==", "col_labels", ".", "unsqueeze", "(", "0", ")", ")", ".", "float", "(", ")", "# (2n, 2N)", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "similarity_matrix", "=", "series_similarity_matrix", ".", "mean", "(", "dim", "=", "(", "2", ",", "3", ")", ")", "\n", "similarity_matrix", "=", "similarity_matrix", ".", "contiguous", "(", ")", "\n", "\n", "# discard the main diagonal from both: labels and similarities matrix", "\n", "row_inst", "=", "torch", ".", "arange", "(", "i_base", ",", "i_base", "+", "N_per_rank", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n_views", ",", "N_per_rank", ")", "\n", "row_padded_ind", "=", "torch", ".", "arange", "(", "n_views", ")", ".", "unsqueeze", "(", "1", ")", "*", "N", "\n", "row_inst", "=", "(", "row_inst", "+", "row_padded_ind", ")", ".", "view", "(", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "col_inst", "=", "torch", ".", "arange", "(", "N", "*", "n_views", ")", ".", "unsqueeze", "(", "0", ")", "\n", "mask", "=", "(", "row_inst", "==", "col_inst", ")", ".", "cuda", "(", ")", "\n", "\n", "labels", "=", "labels", "[", "~", "mask", "]", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "# (2n, 2N-1)", "\n", "similarity_matrix", "=", "similarity_matrix", "[", "~", "mask", "]", ".", "view", "(", "similarity_matrix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "# (2n, 2N-1)", "\n", "# assert similarity_matrix.shape == labels.shape", "\n", "\n", "# select and combine multiple positives", "\n", "positives", "=", "similarity_matrix", "[", "labels", ".", "bool", "(", ")", "]", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "# select only the negatives the negatives", "\n", "negatives", "=", "similarity_matrix", "[", "~", "labels", ".", "bool", "(", ")", "]", ".", "view", "(", "similarity_matrix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "positives", ",", "negatives", "]", ",", "dim", "=", "1", ")", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "logits", "=", "logits", "/", "self", ".", "aligned_T", "\n", "\n", "contrast_loss", "=", "self", ".", "criterion", "(", "logits", ",", "labels", ")", "\n", "\n", "ret", "=", "{", "\n", "f\"{prefix}logits\"", ":", "logits", ",", "\n", "f\"{prefix}labels\"", ":", "labels", ",", "\n", "f\"{prefix}contrast_loss\"", ":", "contrast_loss", "\n", "}", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.simclr.SimCLR_TimeSeriesV4.forward": [[339, 401], ["block.contiguous.contiguous.contiguous", "block.contiguous.contiguous.size", "block.contiguous.contiguous.view", "enumerate", "torch.normalize().squeeze().view", "torch.normalize().squeeze().view", "torch.normalize().squeeze().view", "torch.normalize().squeeze().view", "features[].contiguous", "dict", "simclr.SimCLR_TimeSeriesV4.series_proj_head().view", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "series_features[].contiguous", "series_features.view.view.view", "block.contiguous.contiguous.size", "mod", "dict.update", "dict.update", "[].contiguous", "extra_block.view", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda.view().expand_as", "torch.tensor().long().cuda.view().expand_as", "torch.tensor().long().cuda.view().expand_as", "torch.tensor().long().cuda.view().expand_as", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "enumerate", "simclr.SimCLR_TimeSeriesV4.series_proj_head().view", "torch.tensor().long().cuda.view().expand_as", "torch.tensor().long().cuda.view().expand_as", "torch.tensor().long().cuda.view().expand_as", "torch.tensor().long().cuda.view().expand_as", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "dict.update", "dict.update", "torch.normalize().squeeze", "torch.normalize().squeeze", "torch.normalize().squeeze", "torch.normalize().squeeze", "simclr.SimCLR_TimeSeriesV4.calc_contrast_loss", "simclr.SimCLR_TimeSeriesV4.series_proj_head", "simclr.SimCLR_TimeSeriesV4.calc_tc_contrast_loss", "mod", "simclr.SimCLR_TimeSeriesV4.calc_ranking_loss", "simclr.SimCLR_TimeSeriesV4.calc_ranking_loss", "block.contiguous.contiguous.size", "series_features[].contiguous.view", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long().cuda.view", "torch.tensor().long().cuda.view", "torch.tensor().long().cuda.view", "torch.tensor().long().cuda.view", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "simclr.SimCLR_TimeSeriesV4.series_proj_head", "torch.tensor().long().cuda.view", "torch.tensor().long().cuda.view", "torch.tensor().long().cuda.view", "torch.tensor().long().cuda.view", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "series_features.view.view.view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "numpy.array", "numpy.random.permutation", "range"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.simclr.SimCLR_Naked.calc_contrast_loss", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4.calc_tc_contrast_loss", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4.calc_ranking_loss", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4.calc_ranking_loss", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize"], ["", "def", "forward", "(", "self", ",", "block", ")", ":", "\n", "        ", "'''\n            modified from simCLR\n            https://github.com/sthalles/SimCLR/blob/1848fc934ad844ae630e6c452300433fe99acfd9/simclr.py#L26\n        '''", "\n", "block", "=", "block", ".", "contiguous", "(", ")", "\n", "B", "=", "block", ".", "size", "(", "0", ")", "\n", "assert", "block", ".", "size", "(", "1", ")", "==", "3", "\n", "extra_block", "=", "block", "[", ":", ",", "2", "]", "\n", "(", "batch_size", ",", "_", ",", "C", ",", "T", ",", "H", ",", "W", ")", "=", "block", ".", "shape", "# [B,N,C,T,H,W]", "\n", "n_views", "=", "2", "\n", "N_views", "=", "3", "\n", "assert", "n_views", "==", "2", "\n", "x", "=", "block", ".", "view", "(", "-", "1", ",", "*", "(", "block", ".", "size", "(", ")", "[", "2", ":", "]", ")", ")", "# (B*n, ...)", "\n", "features", "=", "x", "\n", "for", "i", ",", "mod", "in", "enumerate", "(", "self", ".", "encoder_q", ")", ":", "\n", "            ", "features", "=", "mod", "(", "features", ")", "\n", "if", "i", "==", "1", ":", "\n", "                ", "backbone_features", "=", "features", "\n", "\n", "", "", "features", "=", "F", ".", "normalize", "(", "features", ",", "dim", "=", "1", ")", ".", "squeeze", "(", ")", ".", "view", "(", "B", ",", "N_views", ",", "self", ".", "dim", ")", "\n", "features", "=", "features", "[", ":", ",", ":", "2", "]", ".", "contiguous", "(", ")", "\n", "ret", "=", "dict", "(", ")", "\n", "if", "self", ".", "with_clip", ":", "\n", "            ", "ret", ".", "update", "(", "self", ".", "calc_contrast_loss", "(", "features", ",", "n_views", ")", ")", "\n", "\n", "# get series projections", "\n", "", "series_features", "=", "self", ".", "series_proj_head", "(", "backbone_features", ")", ".", "view", "(", "B", ",", "N_views", ",", "self", ".", "n_series", ",", "self", ".", "series_dim", ")", "\n", "series_features", "=", "F", ".", "normalize", "(", "series_features", ",", "dim", "=", "3", ")", "\n", "contrast_series_features", "=", "series_features", "[", ":", ",", ":", "n_views", "]", ".", "contiguous", "(", ")", "\n", "series_features", "=", "series_features", ".", "view", "(", "B", "*", "N_views", ",", "self", ".", "n_series", ",", "self", ".", "series_dim", ")", "\n", "if", "self", ".", "with_tc", ":", "\n", "            ", "ret", ".", "update", "(", "self", ".", "calc_tc_contrast_loss", "(", "\n", "contrast_series_features", ".", "view", "(", "B", ",", "n_views", ",", "self", ".", "n_series", ",", "self", ".", "series_dim", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "with_sr", ":", "\n", "            ", "orig_series_features", "=", "series_features", ".", "view", "(", "B", ",", "N_views", ",", "self", ".", "n_series", ",", "self", ".", "series_dim", ")", "[", ":", ",", "[", "0", ",", "2", "]", "]", ".", "contiguous", "(", ")", "\n", "#### get time-series features and contrast them", "\n", "# shuffle input clips", "\n", "x", "=", "extra_block", ".", "view", "(", "B", ",", "C", ",", "self", ".", "n_series", ",", "T", "//", "self", ".", "n_series", ",", "H", ",", "W", ")", "\n", "sample_indices", "=", "torch", ".", "tensor", "(", "\n", "np", ".", "array", "(", "[", "np", ".", "random", ".", "permutation", "(", "self", ".", "n_series", ")", "for", "i", "in", "range", "(", "B", ")", "]", ")", "\n", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "sample_gather_indices", "=", "sample_indices", ".", "view", "(", "B", ",", "1", ",", "self", ".", "n_series", ",", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "shuffled_x", "=", "torch", ".", "gather", "(", "x", ",", "2", ",", "sample_gather_indices", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "C", ",", "T", ",", "H", ",", "W", ")", "# (B*n, C, T, H, W)", "\n", "shuffled_features", "=", "shuffled_x", "\n", "for", "i", ",", "mod", "in", "enumerate", "(", "self", ".", "encoder_q", ")", ":", "\n", "                ", "if", "i", ">", "1", ":", "break", "\n", "shuffled_features", "=", "mod", "(", "shuffled_features", ")", "\n", "", "shuffled_series_features", "=", "self", ".", "series_proj_head", "(", "shuffled_features", ")", ".", "view", "(", "B", ",", "self", ".", "n_series", ",", "self", ".", "series_dim", ")", "\n", "sample_scatter_indices", "=", "sample_indices", ".", "view", "(", "B", ",", "self", ".", "n_series", ",", "1", ")", ".", "expand_as", "(", "shuffled_series_features", ")", "\n", "calibrated_shuffled_series_features", "=", "torch", ".", "scatter", "(", "\n", "shuffled_series_features", ",", "1", ",", "sample_scatter_indices", ",", "shuffled_series_features", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "self", ".", "n_series", ",", "self", ".", "series_dim", ")", "\n", "calibrated_shuffled_series_features", "=", "F", ".", "normalize", "(", "calibrated_shuffled_series_features", ",", "dim", "=", "2", ")", "\n", "# separated weighting the loss", "\n", "orig_shuffled_series_features", "=", "torch", ".", "stack", "(", "[", "orig_series_features", "[", ":", ",", "0", "]", ",", "calibrated_shuffled_series_features", "]", ",", "dim", "=", "2", ")", ".", "contiguous", "(", ")", "# (B, n_series, 2, dim)", "\n", "aug_shuffled_series_features", "=", "torch", ".", "stack", "(", "[", "orig_series_features", "[", ":", ",", "1", "]", ",", "calibrated_shuffled_series_features", "]", ",", "dim", "=", "2", ")", ".", "contiguous", "(", ")", "# (B, n_series, 2, dim)", "\n", "ret", ".", "update", "(", "self", ".", "calc_ranking_loss", "(", "orig_shuffled_series_features", ",", "2", ",", "'aug_ranking_'", ",", "weight", "=", "0.5", ")", ")", "\n", "ret", ".", "update", "(", "self", ".", "calc_ranking_loss", "(", "aug_shuffled_series_features", ",", "2", ",", "'unaug_ranking_'", ",", "weight", "=", "0.5", ")", ")", "\n", "\n", "", "return", "ret", "", "", "", ""]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_Naked.__init__": [[33, 84], ["torch.Module.__init__", "backbone.select_backbone.select_backbone", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "backbone.select_backbone.select_backbone", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "moco.MoCo_Naked.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "moco.MoCo_Naked.register_buffer", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "moco.MoCo_Naked.encoder_q.extend", "moco.MoCo_Naked.encoder_k.extend", "moco.MoCo_Naked.encoder_q.parameters", "moco.MoCo_Naked.encoder_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.select_backbone.select_backbone", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.select_backbone.select_backbone", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize"], ["def", "__init__", "(", "self", ",", "network", "=", "'s3d'", ",", "dim", "=", "128", ",", "K", "=", "2048", ",", "m", "=", "0.999", ",", "T", "=", "0.07", ",", "distributed", "=", "True", ",", "nonlinear", "=", "True", ")", ":", "\n", "        ", "'''\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 2048)\n        m: moco momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        '''", "\n", "super", "(", "MoCo_Naked", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "distributed", "=", "distributed", "\n", "self", ".", "nonlinear", "=", "nonlinear", "\n", "\n", "##########################################", "\n", "# create the encoders (including non-linear projection head: 2 FC layers)", "\n", "backbone", ",", "self", ".", "param", "=", "select_backbone", "(", "network", ")", "\n", "feature_size", "=", "self", ".", "param", "[", "'feature_size'", "]", "\n", "self", ".", "encoder_q", "=", "nn", ".", "ModuleList", "(", "[", "\n", "backbone", ",", "\n", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "]", ")", "\n", "if", "nonlinear", ":", "\n", "            ", "self", ".", "encoder_q", ".", "extend", "(", "[", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "]", ")", "\n", "\n", "", "backbone", ",", "_", "=", "select_backbone", "(", "network", ")", "\n", "self", ".", "encoder_k", "=", "nn", ".", "ModuleList", "(", "[", "\n", "backbone", ",", "\n", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "]", ")", "\n", "if", "nonlinear", ":", "\n", "            ", "self", ".", "encoder_k", ".", "extend", "(", "[", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "]", ")", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "# create the queue", "\n", "", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "dim", ",", "K", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "# Notes: for handling sibling videos, e.g. for UCF101 dataset", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_Naked._build_nonlinear_layer": [[86, 101], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_build_nonlinear_layer", "(", "self", ",", "input_size", ",", "output_size", ",", "ds_num", "=", "0", ")", ":", "\n", "        ", "mod_list", "=", "[", "\n", "nn", ".", "Conv3d", "(", "input_size", ",", "input_size", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "input_size", ",", "output_size", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "]", "\n", "\n", "mod_list", "=", "[", "\n", "nn", ".", "Conv3d", "(", "input_size", ",", "input_size", ",", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "input_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", "*", "ds_num", "+", "mod_list", "\n", "\n", "return", "nn", ".", "Sequential", "(", "\n", "*", "mod_list", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_Naked._momentum_update_key_encoder": [[103, 108], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "moco.MoCo_Naked.encoder_q.parameters", "moco.MoCo_Naked.encoder_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "'''Momentum update of the key encoder'''", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_Naked._dequeue_and_enqueue": [[109, 127], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int", "moco.concat_all_gather"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.concat_all_gather"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "if", "self", ".", "distributed", ":", "\n", "            ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "\n", "", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "# get ptr", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "# global ptr", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "\n", "# update ptr", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_Naked._batch_shuffle_ddp": [[128, 155], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "moco.concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_shuffle_ddp", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        Batch shuffle, for making use of BatchNorm.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        '''", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "0", ")", "\n", "\n", "# index for restoring", "\n", "idx_unshuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffled index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", ",", "idx_unshuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_Naked._batch_unshuffle_ddp": [[156, 174], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "moco.concat_all_gather", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "idx_unshuffle.view"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_unshuffle_ddp", "(", "self", ",", "x", ",", "idx_unshuffle", ")", ":", "\n", "        ", "'''\n        Undo batch shuffle.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        '''", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# restored index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_unshuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_Naked.forward": [[175, 240], ["block[].contiguous", "block[].contiguous", "enumerate", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "q.view.view.view", "moco.MoCo_Naked.view", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "moco.MoCo_Naked.criterion", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "moco.MoCo_Naked._dequeue_and_enqueue", "mod", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "mod", "moco.MoCo_Naked._momentum_update_key_encoder", "moco.MoCo_Naked._batch_shuffle_ddp", "moco.MoCo_Naked._batch_unshuffle_ddp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "moco.MoCo_Naked.queue.clone().detach", "mod", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "mod", "moco.MoCo_Naked.queue.clone"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4._dequeue_and_enqueue", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4._momentum_update_key_encoder", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4._batch_shuffle_ddp", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4._batch_unshuffle_ddp"], ["", "def", "forward", "(", "self", ",", "block", ")", ":", "\n", "        ", "'''Output: logits, targets'''", "\n", "(", "B", ",", "N", ",", "*", "_", ")", "=", "block", ".", "shape", "# [B,N,C,T,H,W]", "\n", "assert", "N", "==", "2", "\n", "x1", "=", "block", "[", ":", ",", "0", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "x2", "=", "block", "[", ":", ",", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "# compute query features", "\n", "unnorm_q", "=", "x1", "\n", "for", "i", ",", "mod", "in", "enumerate", "(", "self", ".", "encoder_q", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "unnorm_q", "=", "mod", "(", "unnorm_q", ")", "\n", "backbone_feat_q", "=", "F", ".", "adaptive_avg_pool3d", "(", "unnorm_q", ",", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "unnorm_q", "=", "mod", "(", "unnorm_q", ")", "\n", "", "", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "unnorm_q", ",", "dim", "=", "1", ")", "\n", "q", "=", "q", ".", "view", "(", "B", ",", "self", ".", "dim", ")", "\n", "\n", "###########################################", "\n", "# calculate normalized sampled frame embeds and possibly video lvl embeds", "\n", "in_train_mode", "=", "q", ".", "requires_grad", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "if", "in_train_mode", ":", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "if", "self", ".", "distributed", ":", "\n", "                ", "x2", ",", "idx_unshuffle", "=", "self", ".", "_batch_shuffle_ddp", "(", "x2", ")", "\n", "\n", "", "unnorm_k", "=", "x2", "\n", "for", "i", ",", "mod", "in", "enumerate", "(", "self", ".", "encoder_k", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "unnorm_k", "=", "mod", "(", "unnorm_k", ")", "\n", "backbone_feat_k", "=", "F", ".", "adaptive_avg_pool3d", "(", "unnorm_k", ",", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "unnorm_k", "=", "mod", "(", "unnorm_k", ")", "\n", "", "", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "unnorm_k", ",", "dim", "=", "1", ")", "\n", "\n", "###########################################", "\n", "# calculate normalized sampled frame embeds and possibly video lvl embeds", "\n", "# undo shuffle", "\n", "if", "self", ".", "distributed", ":", "\n", "                ", "k", "=", "self", ".", "_batch_unshuffle_ddp", "(", "k", ",", "idx_unshuffle", ")", "\n", "\n", "", "", "k", "=", "k", ".", "view", "(", "B", ",", "self", ".", "dim", ")", "\n", "\n", "# shared labels: positive key indicators", "\n", "labels", "=", "torch", ".", "zeros", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "#### compute video-video contrastive loss", "\n", "vid_to_vid_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "vid_to_vid_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "vid_to_vid_logits", "=", "torch", ".", "cat", "(", "[", "vid_to_vid_pos", ",", "vid_to_vid_neg", "]", ",", "dim", "=", "1", ")", "/", "self", ".", "T", "# logits: B,(1+K)", "\n", "vid_to_vid_contrast_loss", "=", "self", ".", "criterion", "(", "vid_to_vid_logits", ",", "labels", ")", "\n", "ret", "=", "{", "\n", "'clip_logits'", ":", "vid_to_vid_logits", ",", "\n", "'clip_labels'", ":", "labels", ",", "\n", "'clip_contrast_loss'", ":", "vid_to_vid_contrast_loss", ",", "\n", "}", "\n", "\n", "# dequeue and enqueue", "\n", "if", "in_train_mode", ":", "self", ".", "_dequeue_and_enqueue", "(", "k", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4.__init__": [[247, 326], ["torch.Module.__init__", "backbone.select_backbone.select_backbone", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.select_backbone.select_backbone", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "zip", "zip", "moco.MoCo_TimeSeriesV4.register_buffer", "moco.MoCo_TimeSeriesV4.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "moco.MoCo_TimeSeriesV4.register_buffer", "torch.functional.normalize().view", "torch.functional.normalize().view", "torch.functional.normalize().view", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "moco.MoCo_TimeSeriesV4.encoder_q.extend", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "moco.MoCo_TimeSeriesV4.encoder_k.extend", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "moco.MoCo_TimeSeriesV4.encoder_q.parameters", "moco.MoCo_TimeSeriesV4.encoder_k.parameters", "param_k.data.copy_", "moco.MoCo_TimeSeriesV4.series_proj_head_q.parameters", "moco.MoCo_TimeSeriesV4.series_proj_head_k.parameters", "param_k.data.copy_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "moco.MoCo_TimeSeriesV4.series_queue.view"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.select_backbone.select_backbone", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.select_backbone.select_backbone", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize"], ["def", "__init__", "(", "self", ",", "network", "=", "'s3d'", ",", "dim", "=", "128", ",", "K", "=", "2048", ",", "m", "=", "0.999", ",", "T", "=", "0.07", ",", "distributed", "=", "True", ",", "nonlinear", "=", "True", ",", "\n", "n_series", "=", "2", ",", "series_dim", "=", "64", ",", "series_T", "=", "0.07", ",", "aligned_T", "=", "0.07", ",", "mode", "=", "\"clip-sr-tc\"", ",", "args", "=", "None", ")", ":", "\n", "        ", "'''\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 2048)\n        m: moco momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        '''", "\n", "super", "(", "MoCo_TimeSeriesV4", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "distributed", "=", "distributed", "\n", "self", ".", "nonlinear", "=", "nonlinear", "\n", "self", ".", "n_series", "=", "n_series", "\n", "self", ".", "series_dim", "=", "series_dim", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "series_T", "=", "series_T", "\n", "self", ".", "aligned_T", "=", "aligned_T", "\n", "self", ".", "with_clip", "=", "'clip'", "in", "mode", "\n", "self", ".", "with_sr", "=", "'sr'", "in", "mode", "\n", "self", ".", "with_tc", "=", "'tc'", "in", "mode", "\n", "\n", "# assert mode in (", "\n", "# 'bi-discrete-dtw', 'bi-diff-dtw', 'bi-diff-dtw-cuda', 'non-aligned', 'bimin-diff-dtw', 'bimax-diff-dtw')", "\n", "\n", "##########################################", "\n", "# create the encoders (including non-linear projection head: 2 FC layers)", "\n", "backbone", ",", "self", ".", "param", "=", "select_backbone", "(", "network", ")", "\n", "feature_size", "=", "self", ".", "param", "[", "'feature_size'", "]", "\n", "self", ".", "encoder_q", "=", "nn", ".", "ModuleList", "(", "[", "\n", "backbone", ",", "\n", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "]", ")", "\n", "if", "nonlinear", ":", "\n", "            ", "self", ".", "encoder_q", ".", "extend", "(", "[", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "]", ")", "\n", "", "self", ".", "series_proj_head_q", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "series_dim", "*", "n_series", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", ")", "\n", "\n", "backbone", ",", "_", "=", "select_backbone", "(", "network", ")", "\n", "self", ".", "encoder_k", "=", "nn", ".", "ModuleList", "(", "[", "\n", "backbone", ",", "\n", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "]", ")", "\n", "if", "nonlinear", ":", "\n", "            ", "self", ".", "encoder_k", ".", "extend", "(", "[", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "]", ")", "\n", "", "self", ".", "series_proj_head_k", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "feature_size", ",", "series_dim", "*", "n_series", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", ")", "\n", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "series_proj_head_q", ".", "parameters", "(", ")", ",", "self", ".", "series_proj_head_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "# create the queue", "\n", "", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "dim", ",", "K", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "# series queue", "\n", "self", ".", "register_buffer", "(", "\"series_queue\"", ",", "torch", ".", "randn", "(", "series_dim", "*", "n_series", ",", "K", ")", ")", "\n", "self", ".", "series_queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "series_queue", ".", "view", "(", "n_series", ",", "series_dim", ",", "K", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "n_series", "*", "series_dim", ",", "K", ")", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "# Notes: for handling sibling videos, e.g. for UCF101 dataset", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4._momentum_update_key_encoder": [[328, 335], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "zip", "moco.MoCo_TimeSeriesV4.encoder_q.parameters", "moco.MoCo_TimeSeriesV4.encoder_k.parameters", "moco.MoCo_TimeSeriesV4.series_proj_head_q.parameters", "moco.MoCo_TimeSeriesV4.series_proj_head_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "'''Momentum update of the key encoder'''", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "series_proj_head_q", ".", "parameters", "(", ")", ",", "self", ".", "series_proj_head_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4._dequeue_and_enqueue": [[336, 356], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int", "moco.concat_all_gather", "moco.concat_all_gather"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.concat_all_gather", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.concat_all_gather"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ",", "series_keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "if", "self", ".", "distributed", ":", "\n", "            ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "series_keys", "=", "concat_all_gather", "(", "series_keys", ")", "\n", "\n", "", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "# get ptr", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "# global ptr", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "self", ".", "series_queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "series_keys", ".", "T", "\n", "\n", "# update ptr", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4._batch_shuffle_ddp": [[357, 384], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "moco.concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_shuffle_ddp", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        Batch shuffle, for making use of BatchNorm.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        '''", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "0", ")", "\n", "\n", "# index for restoring", "\n", "idx_unshuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffled index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", ",", "idx_unshuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4._batch_unshuffle_ddp": [[385, 403], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "moco.concat_all_gather", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "idx_unshuffle.view"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_unshuffle_ddp", "(", "self", ",", "x", ",", "idx_unshuffle", ")", ":", "\n", "        ", "'''\n        Undo batch shuffle.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        '''", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# restored index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_unshuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4.calc_tc_contrast_loss": [[404, 425], ["q.size", "queue.clone().detach.clone().detach.clone().detach", "q.view", "k.view", "queue.clone().detach.clone().detach.T.contiguous().view", "torch.matmul().mean().unsqueeze", "torch.matmul().mean().unsqueeze", "torch.matmul().mean().unsqueeze", "torch.matmul().mean().unsqueeze", "torch.matmul().mean().unsqueeze", "torch.matmul().mean().unsqueeze", "torch.matmul().mean().unsqueeze", "torch.matmul().mean().unsqueeze", "torch.matmul().mean().unsqueeze", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "moco.MoCo_TimeSeriesV4.criterion", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "queue.clone().detach.clone().detach.clone", "queue.clone().detach.clone().detach.T.contiguous", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "q.view.unsqueeze", "queue.clone().detach.T.contiguous().view.transpose().contiguous", "q.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "k.view.transpose().contiguous", "queue.clone().detach.T.contiguous().view.transpose", "k.view.transpose"], "methods", ["None"], ["", "def", "calc_tc_contrast_loss", "(", "self", ",", "q", ",", "k", ",", "queue", ",", "prefix", "=", "\"tc_\"", ")", ":", "\n", "        ", "B", ",", "n_series", ",", "dim", "=", "q", ".", "size", "(", ")", "\n", "assert", "n_series", "==", "self", ".", "n_series", "and", "dim", "==", "self", ".", "series_dim", "\n", "queue", "=", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "base", "=", "q", ".", "view", "(", "B", ",", "n_series", ",", "dim", ")", "\n", "pos", "=", "k", ".", "view", "(", "B", ",", "n_series", ",", "dim", ")", "\n", "neg", "=", "queue", ".", "T", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "K", ",", "n_series", ",", "dim", ")", "\n", "\n", "vid_to_vid_pos", "=", "torch", ".", "matmul", "(", "base", ",", "pos", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", ".", "mean", "(", "dim", "=", "(", "1", ",", "2", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "vid_to_vid_neg", "=", "torch", ".", "matmul", "(", "base", ".", "unsqueeze", "(", "1", ")", ",", "neg", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", ".", "mean", "(", "dim", "=", "(", "2", ",", "3", ")", ")", "\n", "\n", "labels", "=", "torch", ".", "zeros", "(", "q", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "vid_to_vid_logits", "=", "torch", ".", "cat", "(", "[", "vid_to_vid_pos", ",", "vid_to_vid_neg", "]", ",", "dim", "=", "1", ")", "/", "self", ".", "aligned_T", "# logits: B,(1+K)", "\n", "vid_to_vid_contrast_loss", "=", "self", ".", "criterion", "(", "vid_to_vid_logits", ",", "labels", ")", "\n", "ret", "=", "{", "\n", "f'{prefix}logits'", ":", "vid_to_vid_logits", ",", "\n", "f'{prefix}labels'", ":", "labels", ",", "\n", "f'{prefix}contrast_loss'", ":", "vid_to_vid_contrast_loss", ",", "\n", "}", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4.calc_clip_contrast_loss": [[426, 439], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "moco.MoCo_TimeSeriesV4.criterion", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "queue.clone().detach", "q.size", "queue.clone"], "methods", ["None"], ["", "def", "calc_clip_contrast_loss", "(", "self", ",", "q", ",", "k", ",", "queue", ",", "prefix", "=", "'clip_'", ")", ":", "\n", "        ", "labels", "=", "torch", ".", "zeros", "(", "q", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "vid_to_vid_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "vid_to_vid_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "vid_to_vid_logits", "=", "torch", ".", "cat", "(", "[", "vid_to_vid_pos", ",", "vid_to_vid_neg", "]", ",", "dim", "=", "1", ")", "/", "self", ".", "T", "# logits: B,(1+K)", "\n", "vid_to_vid_contrast_loss", "=", "self", ".", "criterion", "(", "vid_to_vid_logits", ",", "labels", ")", "\n", "ret", "=", "{", "\n", "f'{prefix}logits'", ":", "vid_to_vid_logits", ",", "\n", "f'{prefix}labels'", ":", "labels", ",", "\n", "f'{prefix}contrast_loss'", ":", "vid_to_vid_contrast_loss", ",", "\n", "}", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4.calc_ranking_loss": [[440, 481], ["features.permute().contiguous().view.permute().contiguous().view.size", "features.permute().contiguous().view.permute().contiguous().view.size", "features.permute().contiguous().view.permute().contiguous().view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "labels.cuda.cuda.cuda", "features.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.eye().cuda().unsqueeze().expand_as", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "torch.cat().cuda().bool().unsqueeze().expand_as", "similarity_matrix[].view", "similarity_matrix[].view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "len", "features.permute().contiguous().view.permute().contiguous().view.transpose().contiguous", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "features.permute().contiguous().view.permute().contiguous().view.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "features.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat().cuda().bool().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "range", "labels.cuda.cuda.unsqueeze", "labels.cuda.cuda.unsqueeze", "features.permute().contiguous().view.permute().contiguous().view.transpose", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "features.permute().contiguous().view.permute().contiguous().view.permute", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.cat().cuda().bool", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat().view.size", "torch.cat().view.size", "torch.cat().view.size", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.Logger.log"], ["", "def", "calc_ranking_loss", "(", "self", ",", "features", ",", "n_views", "=", "2", ",", "prefix", "=", "'ranking_'", ",", "weight", "=", "1.", ")", ":", "\n", "        ", "'''\n            corresponding shuffled features should be the same\n            while also surpasing the second highest features by margin (hyperparam) = 0\n        '''", "\n", "# input features is normed features", "\n", "assert", "len", "(", "features", ".", "size", "(", ")", ")", "==", "4", ",", "features", ".", "size", "(", ")", "\n", "Bn", ",", "n_series", ",", "N", ",", "dim", "=", "features", ".", "size", "(", ")", "\n", "assert", "n_series", "==", "self", ".", "n_series", "\n", "assert", "N", "==", "n_views", "and", "dim", "==", "self", ".", "series_dim", ",", "features", ".", "size", "(", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "n_series", ")", "for", "i", "in", "range", "(", "n_views", ")", "]", ",", "dim", "=", "0", ")", "# (2, n_series) -> (2*n_Series,)", "\n", "labels", "=", "(", "labels", ".", "unsqueeze", "(", "0", ")", "==", "labels", ".", "unsqueeze", "(", "1", ")", ")", ".", "float", "(", ")", "# (2s, 2s)", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "features", "=", "features", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "Bn", ",", "n_views", "*", "n_series", ",", "dim", ")", "\n", "\n", "similarity_matrix", "=", "torch", ".", "bmm", "(", "features", ",", "features", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "# (bn, 2s, 2s)", "\n", "\n", "# discard the main diagonal from both: labels and similarities matrix", "\n", "mask", "=", "torch", ".", "eye", "(", "labels", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "similarity_matrix", ")", "\n", "corr_mask_1", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "n_series", ",", "n_series", ")", ",", "torch", ".", "eye", "(", "n_series", ")", "]", ",", "dim", "=", "1", ")", "\n", "corr_mask_2", "=", "torch", ".", "cat", "(", "[", "torch", ".", "eye", "(", "n_series", ")", ",", "torch", ".", "zeros", "(", "n_series", ",", "n_series", ")", "]", ",", "dim", "=", "1", ")", "\n", "corr_mask", "=", "torch", ".", "cat", "(", "[", "corr_mask_1", ",", "corr_mask_2", "]", ")", ".", "cuda", "(", ")", ".", "bool", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "similarity_matrix", ")", "\n", "left_mask", "=", "~", "(", "mask", "|", "corr_mask", ")", "\n", "\n", "highest_similarity", "=", "similarity_matrix", "[", "corr_mask", "]", ".", "view", "(", "Bn", ",", "2", "*", "n_series", ",", "1", ")", "\n", "second_highest_similarity", "=", "similarity_matrix", "[", "left_mask", "]", ".", "view", "(", "Bn", ",", "2", "*", "n_series", ",", "2", "*", "n_series", "-", "2", ")", "\n", "diff", "=", "second_highest_similarity", "-", "highest_similarity", "\n", "margin_loss", "=", "weight", "*", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "diff", "/", "0.05", ")", ")", ".", "mean", "(", ")", "\n", "\n", "margin_logits", "=", "torch", ".", "cat", "(", "[", "highest_similarity", ",", "second_highest_similarity", "]", ",", "dim", "=", "2", ")", ".", "view", "(", "-", "1", ",", "2", "*", "n_series", "-", "1", ")", "\n", "margin_labels", "=", "torch", ".", "zeros", "(", "margin_logits", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "ret", "=", "{", "\n", "f\"{prefix}margin_logits\"", ":", "margin_logits", ",", "\n", "f\"{prefix}margin_labels\"", ":", "margin_labels", ",", "\n", "f\"{prefix}margin_contrast_loss\"", ":", "margin_loss", "\n", "}", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4.forward": [[482, 574], ["block[].contiguous", "block[].contiguous", "block[].contiguous", "enumerate", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "q.view.view.view", "moco.MoCo_TimeSeriesV4.series_proj_head_q().view", "torch.normalize", "torch.normalize", "torch.normalize", "moco.MoCo_TimeSeriesV4.view", "ret.update", "series_features.view.view.view", "moco.MoCo_TimeSeriesV4.view", "aug_x1.view.view.view", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda", "torch.tensor().long().cuda.view().expand_as", "torch.tensor().long().cuda.view().expand_as", "torch.tensor().long().cuda.view().expand_as", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "torch.gather().contiguous().view", "aug_x1.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "torch.normalize", "torch.normalize", "torch.normalize", "torch.tensor().long().cuda.view().expand_as", "torch.tensor().long().cuda.view().expand_as", "torch.tensor().long().cuda.view().expand_as", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.scatter().contiguous().view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "ret.update", "ret.update", "mod", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "moco.MoCo_TimeSeriesV4.series_proj_head_k().view", "torch.normalize().view", "torch.normalize().view", "torch.normalize().view", "moco.MoCo_TimeSeriesV4.calc_contrast_loss", "ret.update", "moco.MoCo_TimeSeriesV4._dequeue_and_enqueue", "mod", "moco.MoCo_TimeSeriesV4.series_proj_head_q().view", "moco.MoCo_TimeSeriesV4.calc_ranking_loss", "moco.MoCo_TimeSeriesV4.calc_ranking_loss", "moco.MoCo_TimeSeriesV4.series_proj_head_q", "moco.MoCo_TimeSeriesV4._momentum_update_key_encoder", "moco.MoCo_TimeSeriesV4._batch_shuffle_ddp", "mod", "moco.MoCo_TimeSeriesV4._batch_unshuffle_ddp", "moco.MoCo_TimeSeriesV4._batch_unshuffle_ddp", "moco.MoCo_TimeSeriesV4.calc_tc_contrast_loss", "moco.MoCo_TimeSeriesV4.view", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long().cuda.view", "torch.tensor().long().cuda.view", "torch.tensor().long().cuda.view", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.gather().contiguous", "torch.tensor().long().cuda.view", "torch.tensor().long().cuda.view", "torch.tensor().long().cuda.view", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "torch.scatter().contiguous", "moco.MoCo_TimeSeriesV4.series_proj_head_k", "torch.normalize", "torch.normalize", "torch.normalize", "moco.MoCo_TimeSeriesV4.series_proj_head_q", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "numpy.array", "numpy.random.permutation", "range"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.simclr.SimCLR_Naked.calc_contrast_loss", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4._dequeue_and_enqueue", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4.calc_ranking_loss", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4.calc_ranking_loss", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4._momentum_update_key_encoder", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4._batch_shuffle_ddp", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4._batch_unshuffle_ddp", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4._batch_unshuffle_ddp", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.MoCo_TimeSeriesV4.calc_tc_contrast_loss", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize"], ["", "def", "forward", "(", "self", ",", "block", ")", ":", "\n", "        ", "'''Output: logits, targets'''", "\n", "ret", "=", "{", "}", "\n", "B", ",", "N", ",", "C", ",", "T", ",", "H", ",", "W", "=", "block", ".", "shape", "# [B,N,C,T,H,W]", "\n", "assert", "N", "==", "3", "\n", "x1", "=", "block", "[", ":", ",", "0", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "x2", "=", "block", "[", ":", ",", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "aug_x1", "=", "block", "[", ":", ",", "2", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "# compute query features", "\n", "unnorm_q", "=", "x1", "\n", "for", "i", ",", "mod", "in", "enumerate", "(", "self", ".", "encoder_q", ")", ":", "\n", "            ", "unnorm_q", "=", "mod", "(", "unnorm_q", ")", "\n", "if", "i", "==", "1", ":", "\n", "                ", "backbone_feat_q", "=", "unnorm_q", "\n", "\n", "", "", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "unnorm_q", ",", "dim", "=", "1", ")", "\n", "q", "=", "q", ".", "view", "(", "B", ",", "self", ".", "dim", ")", "\n", "# get series projections of x1", "\n", "series_features", "=", "self", ".", "series_proj_head_q", "(", "backbone_feat_q", ")", ".", "view", "(", "B", ",", "self", ".", "n_series", ",", "self", ".", "series_dim", ")", "\n", "series_features", "=", "F", ".", "normalize", "(", "series_features", ",", "dim", "=", "2", ")", "\n", "\n", "in_train_mode", "=", "q", ".", "requires_grad", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "if", "in_train_mode", ":", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "if", "self", ".", "distributed", ":", "\n", "                ", "x2", ",", "idx_unshuffle", "=", "self", ".", "_batch_shuffle_ddp", "(", "x2", ")", "\n", "\n", "", "unnorm_k", "=", "x2", "\n", "for", "i", ",", "mod", "in", "enumerate", "(", "self", ".", "encoder_k", ")", ":", "\n", "                ", "unnorm_k", "=", "mod", "(", "unnorm_k", ")", "\n", "if", "i", "==", "1", ":", "\n", "                    ", "backbone_feat_k", "=", "unnorm_k", "\n", "", "", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "unnorm_k", ",", "dim", "=", "1", ")", "\n", "series_features_k", "=", "self", ".", "series_proj_head_k", "(", "backbone_feat_k", ")", ".", "view", "(", "B", ",", "self", ".", "n_series", ",", "self", ".", "series_dim", ")", "\n", "series_features_k", "=", "F", ".", "normalize", "(", "series_features_k", ",", "dim", "=", "2", ")", ".", "view", "(", "B", ",", "self", ".", "n_series", "*", "self", ".", "series_dim", ")", "\n", "\n", "if", "self", ".", "distributed", ":", "\n", "                ", "k", "=", "self", ".", "_batch_unshuffle_ddp", "(", "k", ",", "idx_unshuffle", ")", "\n", "series_features_k", "=", "self", ".", "_batch_unshuffle_ddp", "(", "series_features_k", ",", "idx_unshuffle", ")", "\n", "\n", "", "", "k", "=", "k", ".", "view", "(", "B", ",", "self", ".", "dim", ")", "\n", "\n", "#### compute video-video contrastive loss", "\n", "ret", ".", "update", "(", "self", ".", "calc_contrast_loss", "(", "q", ",", "k", ",", "self", ".", "queue", ",", "'clip_'", ")", ")", "\n", "\n", "### compute aligned series contrastive loss", "\n", "series_features", "=", "series_features", ".", "view", "(", "B", ",", "self", ".", "n_series", ",", "self", ".", "series_dim", ")", "\n", "series_features_k", "=", "series_features_k", ".", "view", "(", "B", ",", "self", ".", "n_series", ",", "self", ".", "series_dim", ")", "\n", "if", "self", ".", "with_tc", ":", "\n", "            ", "ret", ".", "update", "(", "self", ".", "calc_tc_contrast_loss", "(", "series_features", ",", "series_features_k", ",", "self", ".", "series_queue", ",", "'tc_'", ")", ")", "\n", "\n", "# dequeue and enqueue", "\n", "", "if", "in_train_mode", ":", "self", ".", "_dequeue_and_enqueue", "(", "k", ",", "series_features_k", ".", "view", "(", "B", ",", "self", ".", "n_series", "*", "self", ".", "series_dim", ")", ")", "\n", "\n", "# series-series loss is only calculated on shuffled x1 and aug-x1", "\n", "# calc shuffled series_features for x1 and x2", "\n", "aug_x1", "=", "aug_x1", ".", "view", "(", "B", ",", "C", ",", "self", ".", "n_series", ",", "T", "//", "self", ".", "n_series", ",", "H", ",", "W", ")", "\n", "sample_indices", "=", "torch", ".", "tensor", "(", "\n", "np", ".", "array", "(", "[", "np", ".", "random", ".", "permutation", "(", "self", ".", "n_series", ")", "for", "i", "in", "range", "(", "B", ")", "]", ")", "\n", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "sample_gather_indices", "=", "sample_indices", ".", "view", "(", "B", ",", "1", ",", "self", ".", "n_series", ",", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "aug_x1", ")", "\n", "shuffled_aug_x1", "=", "torch", ".", "gather", "(", "aug_x1", ",", "2", ",", "sample_gather_indices", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "C", ",", "T", ",", "H", ",", "W", ")", "# (B*n, C, T, H, W)", "\n", "aug_x1", "=", "aug_x1", ".", "view", "(", "B", ",", "C", ",", "T", ",", "H", ",", "W", ")", "\n", "\n", "dual_aug_x1", "=", "torch", ".", "cat", "(", "[", "aug_x1", ",", "shuffled_aug_x1", "]", ",", "dim", "=", "0", ")", "\n", "dual_aug_x1_feat", "=", "dual_aug_x1", "\n", "for", "i", ",", "mod", "in", "enumerate", "(", "self", ".", "encoder_q", ")", ":", "\n", "            ", "dual_aug_x1_feat", "=", "mod", "(", "dual_aug_x1_feat", ")", "\n", "if", "i", "==", "1", ":", "\n", "                ", "break", "\n", "", "", "dual_aug_x1_series_feat", "=", "F", ".", "normalize", "(", "self", ".", "series_proj_head_q", "(", "dual_aug_x1_feat", ")", ".", "view", "(", "B", "*", "2", ",", "self", ".", "n_series", ",", "self", ".", "series_dim", ")", ",", "dim", "=", "2", ")", "\n", "\n", "aug_x1_series_features", "=", "dual_aug_x1_series_feat", "[", ":", "B", "]", "\n", "\n", "shuffled_aug_x1_series_feat", "=", "dual_aug_x1_series_feat", "[", "B", ":", "]", "\n", "sample_scatter_indices", "=", "sample_indices", ".", "view", "(", "B", ",", "self", ".", "n_series", ",", "1", ")", ".", "expand_as", "(", "shuffled_aug_x1_series_feat", ")", "\n", "calibrated_shuffled_aug_x1_series_features", "=", "torch", ".", "scatter", "(", "\n", "shuffled_aug_x1_series_feat", ",", "1", ",", "sample_scatter_indices", ",", "shuffled_aug_x1_series_feat", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "self", ".", "n_series", ",", "self", ".", "series_dim", ")", "\n", "\n", "orig_shuffled_series_features", "=", "torch", ".", "stack", "(", "[", "series_features", ",", "calibrated_shuffled_aug_x1_series_features", "]", ",", "dim", "=", "2", ")", "\n", "aug_shuffled_series_features", "=", "torch", ".", "stack", "(", "[", "aug_x1_series_features", ",", "calibrated_shuffled_aug_x1_series_features", "]", ",", "dim", "=", "2", ")", "\n", "\n", "ret", ".", "update", "(", "self", ".", "calc_ranking_loss", "(", "orig_shuffled_series_features", ",", "2", ",", "'unaug_ranking_'", ",", "weight", "=", "0.5", ")", ")", "\n", "ret", ".", "update", "(", "self", ".", "calc_ranking_loss", "(", "aug_shuffled_series_features", ",", "2", ",", "'aug_ranking_'", ",", "weight", "=", "0.5", ")", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.moco.concat_all_gather": [[14, 26], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.classifier.LinearClassifier.__init__": [[11, 48], ["torch.Module.__init__", "backbone.select_backbone.select_backbone", "classifier.LinearClassifier._initialize_weights", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "classifier.LinearClassifier.final_bn.weight.data.fill_", "classifier.LinearClassifier.final_bn.bias.data.zero_", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.select_backbone.select_backbone", "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.classifier.LinearClassifier._initialize_weights"], ["from", "PIL", "import", "Image", "\n", "import", "json", "\n", "from", "tensorboardX", "import", "SummaryWriter", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "torch", ".", "multiprocessing", "as", "mp", "\n", "import", "torch", ".", "distributed", "as", "dist", "\n", "import", "builtins", "\n", "\n", "plt", ".", "switch_backend", "(", "'agg'", ")", "\n", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", "as", "nn", "\n", "import", "torch", ".", "optim", "as", "optim", "\n", "from", "torch", ".", "utils", "import", "data", "\n", "from", "torchvision", "import", "transforms", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "\n", "from", "model", ".", "classifier", "import", "LinearClassifier", "\n", "from", "dataset", ".", "local_dataset", "import", "*", "\n", "from", "utils", ".", "utils", "import", "AverageMeter", ",", "save_checkpoint", ",", "calc_topk_accuracy", ",", "ProgressMeter", ",", "neq_load_customized", ",", "worker_init_fn", ",", "FastDataLoader", "\n", "from", "utils", ".", "logging", "import", "get_root_logger", "\n", "import", "utils", ".", "augmentation", "as", "A", "\n", "import", "utils", ".", "transforms", "as", "T", "\n", "import", "utils", ".", "tensorboard_utils", "as", "TB", "\n", "\n", "\n", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# model", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "default", "=", "'myrealr21d'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'linclr'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--num_fc'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of fc'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_what'", ",", "default", "=", "'ft'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--use_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dropout'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_norm'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dropout'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_bn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dropout'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "default", "=", "1.", ",", "type", "=", "float", ",", "help", "=", "'dropout'", ")", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.classifier.LinearClassifier.forward": [[49, 64], ["classifier.LinearClassifier.backbone", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.normalize.view", "torch.normalize", "torch.normalize", "torch.normalize", "classifier.LinearClassifier.final_fc", "classifier.LinearClassifier.final_fc", "classifier.LinearClassifier.final_bn"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.normalize"], ["parser", ".", "add_argument", "(", "'--ft-mode'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use ft mode'", ")", "\n", "parser", ".", "add_argument", "(", "'--with_color_jitter'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use color jittering'", ")", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'ucf101'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--which_split'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--seq_len'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "help", "=", "'number of frames in each video block'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_seq'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of video blocks'", ")", "\n", "parser", ".", "add_argument", "(", "'--ds'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'frame down sampling rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "help", "=", "'batch size per GPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_resize_dim'", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--img_dim'", ",", "default", "=", "112", ",", "type", "=", "int", ")", "\n", "# optimizer", "\n", "parser", ".", "add_argument", "(", "'--optim'", ",", "default", "=", "'sgd'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "5e-2", ",", "type", "=", "float", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--schedule'", ",", "default", "=", "[", "10", ",", "20", ",", "30", ",", "40", "]", ",", "nargs", "=", "'*'", ",", "type", "=", "int", ",", "\n", "help", "=", "'learning rate schedule (when to drop lr by 10x)'", ")", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.model.classifier.LinearClassifier._initialize_weights": [[65, 71], ["module.named_parameters", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["None"], ["parser", ".", "add_argument", "(", "'--wd'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "help", "=", "'number of total epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'manual epoch number (useful on restarts)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "# log", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'frequency of printing output during training'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_freq'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.select_backbone.select_backbone": [[7, 33], ["s3dg.S3D", "c3d.C3D", "s3dg.S3D", "resnet_2d3d.r2d3d50", "r21d.R2Plus1DNet", "r3d.R3DNet", "resnet_2d3d.r2d3d18"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.r2d3d50", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.r2d3d18"], ["def", "select_backbone", "(", "network", ",", "first_channel", "=", "3", ")", ":", "\n", "    ", "param", "=", "{", "'feature_size'", ":", "1024", "}", "\n", "if", "network", "==", "'s3d'", ":", "\n", "        ", "model", "=", "S3D", "(", "input_channel", "=", "first_channel", ")", "\n", "", "elif", "network", "==", "'c3d'", ":", "\n", "        ", "model", "=", "C3D", "(", ")", "\n", "param", "[", "'feature_size'", "]", "=", "512", "\n", "", "elif", "network", "==", "'s3dg'", ":", "\n", "        ", "model", "=", "S3D", "(", "input_channel", "=", "first_channel", ",", "gating", "=", "True", ")", "\n", "", "elif", "network", "==", "'r50'", ":", "\n", "        ", "param", "[", "'feature_size'", "]", "=", "2048", "\n", "model", "=", "r2d3d50", "(", "input_channel", "=", "first_channel", ")", "\n", "", "elif", "network", "==", "'r21d'", ":", "\n", "        ", "param", "[", "'feature_size'", "]", "=", "512", "\n", "model", "=", "R2Plus1DNet", "(", ")", "\n", "", "elif", "network", "==", "'r3d'", ":", "\n", "        ", "param", "[", "'feature_size'", "]", "=", "512", "\n", "model", "=", "R3DNet", "(", ")", "\n", "", "elif", "network", "==", "'r2d3d18'", ":", "\n", "        ", "param", "[", "'feature_size'", "]", "=", "256", "\n", "model", "=", "r2d3d18", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "# all output features are 5d tensors after relu activation (B, C, T, H, W)", "\n", "# global average pool when using these features for feature embedding", "\n", "", "return", "model", ",", "param", "", "", ""]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r21d.SpatioTemporalConv.__init__": [[25, 66], ["torch.Module.__init__", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "int", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "math.floor"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "first_conv", "=", "False", ")", ":", "\n", "        ", "super", "(", "SpatioTemporalConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# if ints are entered, convert them to iterables, 1 -> [1, 1, 1]", "\n", "kernel_size", "=", "_triple", "(", "kernel_size", ")", "\n", "stride", "=", "_triple", "(", "stride", ")", "\n", "padding", "=", "_triple", "(", "padding", ")", "\n", "\n", "# decomposing the parameters into spatial and temporal components by", "\n", "# masking out the values with the defaults on the axis that", "\n", "# won't be convolved over. This is necessary to avoid unintentional", "\n", "# behavior such as padding being added twice", "\n", "spatial_kernel_size", "=", "(", "1", ",", "kernel_size", "[", "1", "]", ",", "kernel_size", "[", "2", "]", ")", "\n", "spatial_stride", "=", "(", "1", ",", "stride", "[", "1", "]", ",", "stride", "[", "2", "]", ")", "\n", "spatial_padding", "=", "(", "0", ",", "padding", "[", "1", "]", ",", "padding", "[", "2", "]", ")", "\n", "\n", "temporal_kernel_size", "=", "(", "kernel_size", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "temporal_stride", "=", "(", "stride", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "temporal_padding", "=", "(", "padding", "[", "0", "]", ",", "0", ",", "0", ")", "\n", "\n", "# compute the number of intermediary channels (M) using formula", "\n", "# from the paper section 3.5", "\n", "intermed_channels", "=", "int", "(", "\n", "math", ".", "floor", "(", "(", "kernel_size", "[", "0", "]", "*", "kernel_size", "[", "1", "]", "*", "kernel_size", "[", "2", "]", "*", "in_channels", "*", "out_channels", ")", "/", "(", "kernel_size", "[", "1", "]", "*", "kernel_size", "[", "2", "]", "*", "in_channels", "+", "kernel_size", "[", "0", "]", "*", "out_channels", ")", ")", ")", "\n", "# print(intermed_channels)", "\n", "\n", "# the spatial conv is effectively a 2D conv due to the", "\n", "# spatial_kernel_size, followed by batch_norm and ReLU", "\n", "self", ".", "spatial_conv", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "intermed_channels", ",", "spatial_kernel_size", ",", "\n", "stride", "=", "spatial_stride", ",", "padding", "=", "spatial_padding", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm3d", "(", "intermed_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "# the temporal conv is effectively a 1D conv, but has batch norm", "\n", "# and ReLU added inside the model constructor, not here. This is an", "\n", "# intentional design choice, to allow this module to externally act", "\n", "# identical to a standard Conv3D, so it can be reused easily in any", "\n", "# other codebase", "\n", "self", ".", "temporal_conv", "=", "nn", ".", "Conv3d", "(", "intermed_channels", ",", "out_channels", ",", "temporal_kernel_size", ",", "\n", "stride", "=", "temporal_stride", ",", "padding", "=", "temporal_padding", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r21d.SpatioTemporalConv.forward": [[67, 71], ["r21d.SpatioTemporalConv.relu", "r21d.SpatioTemporalConv.temporal_conv", "r21d.SpatioTemporalConv.bn", "r21d.SpatioTemporalConv.spatial_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "self", ".", "bn", "(", "self", ".", "spatial_conv", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "temporal_conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r21d.SpatioTemporalResBlock.__init__": [[83, 113], ["torch.Module.__init__", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r21d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r21d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "r21d.SpatioTemporalConv", "r21d.SpatioTemporalConv"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "downsample", "=", "False", ")", ":", "\n", "        ", "super", "(", "SpatioTemporalResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# If downsample == True, the first conv of the layer has stride = 2", "\n", "# to halve the residual output size, and the input x is passed", "\n", "# through a seperate 1x1x1 conv with stride = 2 to also halve it.", "\n", "\n", "# no pooling layers are used inside ResNet", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "# to allow for SAME padding", "\n", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "# downsample with stride =2 the input x", "\n", "            ", "self", ".", "downsampleconv", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "downsamplebn", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "\n", "# downsample with stride = 2 when producing the residual", "\n", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "# standard conv->batchnorm->ReLU", "\n", "self", ".", "conv2", "=", "SpatioTemporalConv", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "self", ".", "outrelu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r21d.SpatioTemporalResBlock.forward": [[115, 123], ["r21d.SpatioTemporalResBlock.relu1", "r21d.SpatioTemporalResBlock.bn2", "r21d.SpatioTemporalResBlock.outrelu", "r21d.SpatioTemporalResBlock.bn1", "r21d.SpatioTemporalResBlock.conv2", "r21d.SpatioTemporalResBlock.downsamplebn", "r21d.SpatioTemporalResBlock.conv1", "r21d.SpatioTemporalResBlock.downsampleconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "res", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "res", ")", ")", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "self", ".", "downsamplebn", "(", "self", ".", "downsampleconv", "(", "x", ")", ")", "\n", "\n", "", "return", "self", ".", "outrelu", "(", "x", "+", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r21d.SpatialDownTemporalResBlock.__init__": [[135, 165], ["torch.Module.__init__", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r21d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r21d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "r21d.SpatioTemporalConv", "r21d.SpatioTemporalConv"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "downsample", "=", "False", ")", ":", "\n", "        ", "super", "(", "SpatialDownTemporalResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# If downsample == True, the first conv of the layer has stride = 2", "\n", "# to halve the residual output size, and the input x is passed", "\n", "# through a seperate 1x1x1 conv with stride = 2 to also halve it.", "\n", "\n", "# no pooling layers are used inside ResNet", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "# to allow for SAME padding", "\n", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "# downsample with stride =2 the input x", "\n", "            ", "self", ".", "downsampleconv", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "self", ".", "downsamplebn", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "\n", "# downsample with stride = 2 when producing the residual", "\n", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "# standard conv->batchnorm->ReLU", "\n", "self", ".", "conv2", "=", "SpatioTemporalConv", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "self", ".", "outrelu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r21d.SpatialDownTemporalResBlock.forward": [[166, 174], ["r21d.SpatialDownTemporalResBlock.relu1", "r21d.SpatialDownTemporalResBlock.bn2", "r21d.SpatialDownTemporalResBlock.outrelu", "r21d.SpatialDownTemporalResBlock.bn1", "r21d.SpatialDownTemporalResBlock.conv2", "r21d.SpatialDownTemporalResBlock.downsamplebn", "r21d.SpatialDownTemporalResBlock.conv1", "r21d.SpatialDownTemporalResBlock.downsampleconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "res", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "res", ")", ")", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "self", ".", "downsamplebn", "(", "self", ".", "downsampleconv", "(", "x", ")", ")", "\n", "\n", "", "return", "self", ".", "outrelu", "(", "x", "+", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r21d.SpatioTemporalResLayer.__init__": [[188, 201], ["torch.Module.__init__", "block_type", "torch.ModuleList", "torch.ModuleList", "range", "block_type"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "layer_size", ",", "block_type", "=", "SpatioTemporalResBlock", ",", "\n", "downsample", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "SpatioTemporalResLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# implement the first block", "\n", "self", ".", "block1", "=", "block_type", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "downsample", ")", "\n", "\n", "# prepare module list to hold all (layer_size - 1) blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "layer_size", "-", "1", ")", ":", "\n", "# all these blocks are identical, and have downsample = False by default", "\n", "            ", "self", ".", "blocks", "+=", "[", "block_type", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r21d.SpatioTemporalResLayer.forward": [[202, 207], ["r21d.SpatioTemporalResLayer.block1", "block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r21d.SpatioTemporalResLayer.functional_forward": [[208, 212], ["len"], "methods", ["None"], ["", "def", "functional_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "blocks", ")", "==", "1", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r21d.R2Plus1DNet.__init__": [[223, 237], ["torch.Module.__init__", "r21d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r21d.SpatioTemporalResLayer", "r21d.SpatioTemporalResLayer", "r21d.SpatioTemporalResLayer", "r21d.SpatioTemporalResLayer"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["def", "__init__", "(", "self", ",", "layer_sizes", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "block_type", "=", "SpatioTemporalResBlock", ")", ":", "\n", "        ", "super", "(", "R2Plus1DNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# first conv, with stride 1x2x2 and kernel size 1x7x7", "\n", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "3", ",", "64", ",", "(", "3", ",", "7", ",", "7", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "3", ",", "3", ")", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "# output  fof conv2 is same size as of conv1, no downsampling needed. kernel_size 3x3x3", "\n", "self", ".", "conv2", "=", "SpatioTemporalResLayer", "(", "64", ",", "64", ",", "3", ",", "layer_sizes", "[", "0", "]", ",", "block_type", "=", "block_type", ")", "\n", "# each of the final three layers doubles num_channels, while performing downsampling", "\n", "# inside the first block", "\n", "self", ".", "conv3", "=", "SpatioTemporalResLayer", "(", "64", ",", "128", ",", "3", ",", "layer_sizes", "[", "1", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "self", ".", "conv4", "=", "SpatioTemporalResLayer", "(", "128", ",", "256", ",", "3", ",", "layer_sizes", "[", "2", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "self", ".", "conv5", "=", "SpatioTemporalResLayer", "(", "256", ",", "512", ",", "3", ",", "layer_sizes", "[", "3", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r21d.R2Plus1DNet.forward": [[239, 267], ["r21d.R2Plus1DNet.size", "r21d.R2Plus1DNet.relu1", "r21d.R2Plus1DNet.conv2", "r21d.R2Plus1DNet.conv3", "r21d.R2Plus1DNet.conv4", "r21d.R2Plus1DNet.conv5", "r21d.R2Plus1DNet.bn1", "frame_features.append", "frame_features.append", "frame_features.append", "frame_features.append", "r21d.R2Plus1DNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "ret_frame_feature", "=", "False", ",", "multi_level", "=", "False", ",", "aug_feature_lvls", "=", "[", "]", ",", "aug_prob", "=", "0.5", ",", "aug_range", "=", "-", "1", ")", ":", "\n", "        ", "bs", "=", "x", ".", "size", "(", "0", ")", "\n", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "# (64, 16, H, W)", "\n", "frame_features", "=", "[", "]", "\n", "\n", "if", "ret_frame_feature", ":", "\n", "            ", "frame_features", ".", "append", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "conv3", "(", "x", ")", "# (128, 8, 4h, 4w)", "\n", "if", "ret_frame_feature", ":", "\n", "            ", "frame_features", ".", "append", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "conv4", "(", "x", ")", "# (256, 4, 2h, 2w)", "\n", "if", "ret_frame_feature", ":", "\n", "            ", "frame_features", ".", "append", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "conv5", "(", "x", ")", "# (512, 2, h, w)", "\n", "if", "ret_frame_feature", ":", "\n", "            ", "frame_features", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "not", "ret_frame_feature", ":", "\n", "            ", "return", "x", "\n", "\n", "", "if", "multi_level", ":", "\n", "            ", "return", "x", ",", "frame_features", "\n", "\n", "", "return", "x", ",", "frame_features", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r3d.SpatioTemporalConv.__init__": [[24, 35], ["torch.Module.__init__", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "SpatioTemporalConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# if ints are entered, convert them to iterables, 1 -> [1, 1, 1]", "\n", "kernel_size", "=", "_triple", "(", "kernel_size", ")", "\n", "stride", "=", "_triple", "(", "stride", ")", "\n", "padding", "=", "_triple", "(", "padding", ")", "\n", "\n", "\n", "self", ".", "temporal_spatial_conv", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r3d.SpatioTemporalConv.forward": [[36, 39], ["r3d.SpatioTemporalConv.temporal_spatial_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "temporal_spatial_conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r3d.SpatioTemporalResBlock.__init__": [[51, 81], ["torch.Module.__init__", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r3d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r3d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "r3d.SpatioTemporalConv", "r3d.SpatioTemporalConv"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "downsample", "=", "False", ")", ":", "\n", "        ", "super", "(", "SpatioTemporalResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# If downsample == True, the first conv of the layer has stride = 2", "\n", "# to halve the residual output size, and the input x is passed", "\n", "# through a seperate 1x1x1 conv with stride = 2 to also halve it.", "\n", "\n", "# no pooling layers are used inside ResNet", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "# to allow for SAME padding", "\n", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "# downsample with stride = 2 the input x", "\n", "            ", "self", ".", "downsampleconv", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "downsamplebn", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "\n", "# downsample with stride = 2 when producing the residual", "\n", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "# standard conv->batchnorm->ReLU", "\n", "self", ".", "conv2", "=", "SpatioTemporalConv", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", "\n", "self", ".", "outrelu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r3d.SpatioTemporalResBlock.forward": [[82, 90], ["r3d.SpatioTemporalResBlock.relu1", "r3d.SpatioTemporalResBlock.bn2", "r3d.SpatioTemporalResBlock.outrelu", "r3d.SpatioTemporalResBlock.bn1", "r3d.SpatioTemporalResBlock.conv2", "r3d.SpatioTemporalResBlock.downsamplebn", "r3d.SpatioTemporalResBlock.conv1", "r3d.SpatioTemporalResBlock.downsampleconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "res", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "res", ")", ")", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "self", ".", "downsamplebn", "(", "self", ".", "downsampleconv", "(", "x", ")", ")", "\n", "\n", "", "return", "self", ".", "outrelu", "(", "x", "+", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r3d.SpatioTemporalResLayer.__init__": [[104, 117], ["torch.Module.__init__", "block_type", "torch.ModuleList", "torch.ModuleList", "range", "block_type"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "layer_size", ",", "block_type", "=", "SpatioTemporalResBlock", ",", "\n", "downsample", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "SpatioTemporalResLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# implement the first block", "\n", "self", ".", "block1", "=", "block_type", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "downsample", ")", "\n", "\n", "# prepare module list to hold all (layer_size - 1) blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "layer_size", "-", "1", ")", ":", "\n", "# all these blocks are identical, and have downsample = False by default", "\n", "            ", "self", ".", "blocks", "+=", "[", "block_type", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r3d.SpatioTemporalResLayer.forward": [[118, 124], ["r3d.SpatioTemporalResLayer.block1", "block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r3d.R3DNet.__init__": [[135, 149], ["torch.Module.__init__", "r3d.SpatioTemporalConv", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "r3d.SpatioTemporalResLayer", "r3d.SpatioTemporalResLayer", "r3d.SpatioTemporalResLayer", "r3d.SpatioTemporalResLayer"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["def", "__init__", "(", "self", ",", "layer_sizes", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "block_type", "=", "SpatioTemporalResBlock", ")", ":", "\n", "        ", "super", "(", "R3DNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# first conv, with stride 1x2x2 and kernel size 3x7x7", "\n", "self", ".", "conv1", "=", "SpatioTemporalConv", "(", "3", ",", "64", ",", "[", "3", ",", "7", ",", "7", "]", ",", "stride", "=", "[", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "[", "1", ",", "3", ",", "3", "]", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "# output of conv2 is same size as of conv1, no downsampling needed. kernel_size 3x3x3", "\n", "self", ".", "conv2", "=", "SpatioTemporalResLayer", "(", "64", ",", "64", ",", "3", ",", "layer_sizes", "[", "0", "]", ",", "block_type", "=", "block_type", ")", "\n", "# each of the final three layers doubles num_channels, while performing downsampling", "\n", "# inside the first block", "\n", "self", ".", "conv3", "=", "SpatioTemporalResLayer", "(", "64", ",", "128", ",", "3", ",", "layer_sizes", "[", "1", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "self", ".", "conv4", "=", "SpatioTemporalResLayer", "(", "128", ",", "256", ",", "3", ",", "layer_sizes", "[", "2", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "self", ".", "conv5", "=", "SpatioTemporalResLayer", "(", "256", ",", "512", ",", "3", ",", "layer_sizes", "[", "3", "]", ",", "block_type", "=", "block_type", ",", "downsample", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.r3d.R3DNet.forward": [[150, 158], ["r3d.R3DNet.relu1", "r3d.R3DNet.conv2", "r3d.R3DNet.conv3", "r3d.R3DNet.conv4", "r3d.R3DNet.conv5", "r3d.R3DNet.bn1", "r3d.R3DNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.c3d.C3D.__init__": [[12, 47], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "C3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "64", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "128", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv3a", "=", "nn", ".", "Conv3d", "(", "128", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn3a", "=", "nn", ".", "BatchNorm3d", "(", "256", ")", "\n", "self", ".", "relu3a", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv3b", "=", "nn", ".", "Conv3d", "(", "256", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn3b", "=", "nn", ".", "BatchNorm3d", "(", "256", ")", "\n", "self", ".", "relu3b", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv4a", "=", "nn", ".", "Conv3d", "(", "256", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn4a", "=", "nn", ".", "BatchNorm3d", "(", "512", ")", "\n", "self", ".", "relu4a", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv4b", "=", "nn", ".", "Conv3d", "(", "512", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn4b", "=", "nn", ".", "BatchNorm3d", "(", "512", ")", "\n", "self", ".", "relu4b", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv5a", "=", "nn", ".", "Conv3d", "(", "512", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn5a", "=", "nn", ".", "BatchNorm3d", "(", "512", ")", "\n", "self", ".", "relu5a", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv5b", "=", "nn", ".", "Conv3d", "(", "512", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bn5b", "=", "nn", ".", "BatchNorm3d", "(", "512", ")", "\n", "self", ".", "relu5b", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.c3d.C3D.forward": [[49, 84], ["c3d.C3D.conv1", "c3d.C3D.bn1", "c3d.C3D.relu1", "c3d.C3D.pool1", "c3d.C3D.conv2", "c3d.C3D.bn2", "c3d.C3D.relu2", "c3d.C3D.pool2", "c3d.C3D.conv3a", "c3d.C3D.bn3a", "c3d.C3D.relu3a", "c3d.C3D.conv3b", "c3d.C3D.bn3b", "c3d.C3D.relu3b", "c3d.C3D.pool3", "c3d.C3D.conv4a", "c3d.C3D.bn4a", "c3d.C3D.relu4a", "c3d.C3D.conv4b", "c3d.C3D.bn4b", "c3d.C3D.relu4b", "c3d.C3D.pool4", "c3d.C3D.conv5a", "c3d.C3D.bn5a", "c3d.C3D.relu5a", "c3d.C3D.conv5b", "c3d.C3D.bn5b", "c3d.C3D.relu5b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "pool1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "pool2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3a", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3a", "(", "x", ")", "\n", "x", "=", "self", ".", "relu3a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3b", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3b", "(", "x", ")", "\n", "x", "=", "self", ".", "relu3b", "(", "x", ")", "\n", "x", "=", "self", ".", "pool3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4a", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4a", "(", "x", ")", "\n", "x", "=", "self", ".", "relu4a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4b", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4b", "(", "x", ")", "\n", "x", "=", "self", ".", "relu4b", "(", "x", ")", "\n", "x", "=", "self", ".", "pool4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv5a", "(", "x", ")", "\n", "x", "=", "self", ".", "bn5a", "(", "x", ")", "\n", "x", "=", "self", ".", "relu5a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5b", "(", "x", ")", "\n", "x", "=", "self", ".", "bn5b", "(", "x", ")", "\n", "x", "=", "self", ".", "relu5b", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.BasicBlock2d.__init__": [[48, 61], ["torch.Module.__init__", "resnet_2d3d.conv1x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_2d3d.conv1x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.conv1x3x3", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.conv1x3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "track_running_stats", "=", "True", ",", "use_final_relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "BasicBlock2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bias", "=", "False", "\n", "self", ".", "use_final_relu", "=", "use_final_relu", "\n", "self", ".", "conv1", "=", "conv1x3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv1x3x3", "(", "planes", ",", "planes", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.BasicBlock2d.forward": [[62, 79], ["resnet_2d3d.BasicBlock2d.conv1", "resnet_2d3d.BasicBlock2d.bn1", "resnet_2d3d.BasicBlock2d.relu", "resnet_2d3d.BasicBlock2d.conv2", "resnet_2d3d.BasicBlock2d.bn2", "resnet_2d3d.BasicBlock2d.downsample", "resnet_2d3d.BasicBlock2d.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "if", "self", ".", "use_final_relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.BasicBlock3d.__init__": [[84, 97], ["torch.Module.__init__", "resnet_2d3d.conv3x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_2d3d.conv3x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.conv3x3x3", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.conv3x3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "track_running_stats", "=", "True", ",", "use_final_relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "BasicBlock3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bias", "=", "False", "\n", "self", ".", "use_final_relu", "=", "use_final_relu", "\n", "self", ".", "conv1", "=", "conv3x3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3x3", "(", "planes", ",", "planes", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.BasicBlock3d.forward": [[98, 115], ["resnet_2d3d.BasicBlock3d.conv1", "resnet_2d3d.BasicBlock3d.bn1", "resnet_2d3d.BasicBlock3d.relu", "resnet_2d3d.BasicBlock3d.conv2", "resnet_2d3d.BasicBlock3d.bn2", "resnet_2d3d.BasicBlock3d.downsample", "resnet_2d3d.BasicBlock3d.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "if", "self", ".", "use_final_relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.Bottleneck3d.__init__": [[120, 136], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "use_final_relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "Bottleneck3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bias", "=", "False", "\n", "self", ".", "use_final_relu", "=", "use_final_relu", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "(", "3", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "stride", ",", "stride", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", "*", "4", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.Bottleneck3d.forward": [[137, 158], ["resnet_2d3d.Bottleneck3d.conv1", "resnet_2d3d.Bottleneck3d.bn1", "resnet_2d3d.Bottleneck3d.relu", "resnet_2d3d.Bottleneck3d.conv2", "resnet_2d3d.Bottleneck3d.bn2", "resnet_2d3d.Bottleneck3d.relu", "resnet_2d3d.Bottleneck3d.conv3", "resnet_2d3d.Bottleneck3d.bn3", "resnet_2d3d.Bottleneck3d.downsample", "resnet_2d3d.Bottleneck3d.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "if", "self", ".", "use_final_relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.Bottleneck2d.__init__": [[163, 179], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "use_final_relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "Bottleneck2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bias", "=", "False", "\n", "self", ".", "use_final_relu", "=", "use_final_relu", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "stride", ",", "stride", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", "*", "4", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.Bottleneck2d.forward": [[180, 201], ["resnet_2d3d.Bottleneck2d.conv1", "resnet_2d3d.Bottleneck2d.bn1", "resnet_2d3d.Bottleneck2d.relu", "resnet_2d3d.Bottleneck2d.conv2", "resnet_2d3d.Bottleneck2d.bn2", "resnet_2d3d.Bottleneck2d.relu", "resnet_2d3d.Bottleneck2d.conv3", "resnet_2d3d.Bottleneck2d.bn3", "resnet_2d3d.Bottleneck2d.downsample", "resnet_2d3d.Bottleneck2d.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "if", "self", ".", "use_final_relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.ResNet2d3d_full.__init__": [[204, 229], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnet_2d3d.ResNet2d3d_full._make_layer", "resnet_2d3d.ResNet2d3d_full._make_layer", "resnet_2d3d.ResNet2d3d_full._make_layer", "resnet_2d3d.ResNet2d3d_full._make_layer", "resnet_2d3d.ResNet2d3d_full.modules", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.ResNet2d3d._make_layer", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.ResNet2d3d._make_layer", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.ResNet2d3d._make_layer", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.ResNet2d3d._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet2d3d_full", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "track_running_stats", "=", "track_running_stats", "\n", "bias", "=", "False", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "7", ",", "7", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "3", ",", "3", ")", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "\n", "if", "not", "isinstance", "(", "block", ",", "list", ")", ":", "\n", "            ", "block", "=", "[", "block", "]", "*", "4", "\n", "\n", "", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", "[", "0", "]", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", "[", "1", "]", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", "[", "2", "]", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", "[", "3", "]", ",", "256", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "is_final", "=", "True", ")", "\n", "# modify layer4 from exp=512 to exp=256", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.ResNet2d3d_full._make_layer": [[230, 257], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "range", "layers.append", "range", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "layers.append", "block", "layers.append", "block", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "is_final", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "# customized_stride to deal with 2d or 3d residual blocks", "\n", "            ", "if", "(", "block", "==", "Bottleneck2d", ")", "or", "(", "block", "==", "BasicBlock2d", ")", ":", "\n", "                ", "customized_stride", "=", "(", "1", ",", "stride", ",", "stride", ")", "\n", "", "else", ":", "\n", "                ", "customized_stride", "=", "stride", "\n", "\n", "", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "customized_stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ",", "track_running_stats", "=", "self", ".", "track_running_stats", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "track_running_stats", "=", "self", ".", "track_running_stats", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "if", "is_final", ":", "# if is final block, no ReLU in the final output", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "blocks", "-", "1", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "track_running_stats", "=", "self", ".", "track_running_stats", ")", ")", "\n", "", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "track_running_stats", "=", "self", ".", "track_running_stats", ",", "use_final_relu", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "track_running_stats", "=", "self", ".", "track_running_stats", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.ResNet2d3d_full.forward": [[258, 270], ["resnet_2d3d.ResNet2d3d_full.conv1", "resnet_2d3d.ResNet2d3d_full.bn1", "resnet_2d3d.ResNet2d3d_full.relu", "resnet_2d3d.ResNet2d3d_full.maxpool", "resnet_2d3d.ResNet2d3d_full.layer1", "resnet_2d3d.ResNet2d3d_full.layer2", "resnet_2d3d.ResNet2d3d_full.layer3", "resnet_2d3d.ResNet2d3d_full.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.ResNet2d3d.__init__": [[273, 296], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnet_2d3d.ResNet2d3d._make_layer", "resnet_2d3d.ResNet2d3d._make_layer", "resnet_2d3d.ResNet2d3d._make_layer", "resnet_2d3d.ResNet2d3d._make_layer", "resnet_2d3d.ResNet2d3d.modules", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.ResNet2d3d._make_layer", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.ResNet2d3d._make_layer", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.ResNet2d3d._make_layer", "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.ResNet2d3d._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "input_channel", "=", "3", ")", ":", "\n", "        ", "super", "(", "ResNet2d3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "bias", "=", "False", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "input_channel", ",", "64", ",", "kernel_size", "=", "(", "5", ",", "7", ",", "7", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "2", ",", "3", ",", "3", ")", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "\n", "if", "not", "isinstance", "(", "block", ",", "list", ")", ":", "\n", "            ", "block", "=", "[", "block", "]", "*", "4", "\n", "\n", "", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", "[", "0", "]", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", "[", "1", "]", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", "[", "2", "]", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", "[", "3", "]", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "is_final", "=", "True", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.ResNet2d3d._make_layer": [[297, 329], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "isinstance", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "range", "layers.append", "range", "isinstance", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "layers.append", "block", "layers.append", "block", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "is_final", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "# customized_stride to deal with 2d or 3d residual blocks", "\n", "            ", "if", "isinstance", "(", "stride", ",", "int", ")", ":", "\n", "                ", "if", "(", "block", "==", "Bottleneck2d", ")", "or", "(", "block", "==", "BasicBlock2d", ")", ":", "\n", "                    ", "customized_stride", "=", "(", "1", ",", "stride", ",", "stride", ")", "\n", "", "else", ":", "\n", "                    ", "customized_stride", "=", "stride", "\n", "", "", "elif", "isinstance", "(", "stride", ",", "tuple", ")", ":", "\n", "                ", "customized_stride", "=", "stride", "\n", "stride", "=", "stride", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "customized_stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "if", "is_final", ":", "# if is final block, no ReLU in the final output", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "blocks", "-", "1", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "use_final_relu", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.ResNet2d3d.forward": [[330, 342], ["resnet_2d3d.ResNet2d3d.conv1", "resnet_2d3d.ResNet2d3d.bn1", "resnet_2d3d.ResNet2d3d.relu", "resnet_2d3d.ResNet2d3d.maxpool", "resnet_2d3d.ResNet2d3d.layer1", "resnet_2d3d.ResNet2d3d.layer2", "resnet_2d3d.ResNet2d3d.layer3", "resnet_2d3d.ResNet2d3d.layer4", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "F", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.conv3x3x3": [[11, 20], ["torch.Conv3d"], "function", ["None"], ["def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "# 3x3x3 convolution with padding", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.conv1x3x3": [[21, 30], ["torch.Conv3d"], "function", ["None"], ["", "def", "conv1x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "# 1x3x3 convolution with padding", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "stride", ",", "stride", ")", ",", "\n", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.downsample_basic_block": [[32, 43], ["torch.avg_pool3d", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "isinstance", "torch.autograd.Variable", "zero_pads.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "function", ["None"], ["", "def", "downsample_basic_block", "(", "x", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "Tensor", "(", "\n", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ",", "\n", "out", ".", "size", "(", "4", ")", ")", ".", "zero_", "(", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "        ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "Variable", "(", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.r2d3d50": [[345, 350], ["resnet_2d3d.ResNet2d3d_full"], "function", ["None"], ["", "", "def", "r2d3d50", "(", "**", "kwargs", ")", ":", "\n", "    ", "'''Constructs a ResNet-50 model. '''", "\n", "model", "=", "ResNet2d3d_full", "(", "[", "Bottleneck2d", ",", "Bottleneck2d", ",", "Bottleneck3d", ",", "Bottleneck3d", "]", ",", "\n", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.resnet_2d3d.r2d3d18": [[352, 357], ["resnet_2d3d.ResNet2d3d_full"], "function", ["None"], ["", "def", "r2d3d18", "(", "**", "kwargs", ")", ":", "\n", "    ", "'''Constructs a ResNet-50 model. '''", "\n", "model", "=", "ResNet2d3d_full", "(", "[", "BasicBlock2d", ",", "BasicBlock2d", ",", "BasicBlock2d", ",", "BasicBlock2d", "]", ",", "\n", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.BasicConv3d.__init__": [[9, 23], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "s3dg.BasicConv3d.conv.weight.data.normal_", "s3dg.BasicConv3d.bn.weight.data.fill_", "s3dg.BasicConv3d.bn.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "BasicConv3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv3d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "\n", "# self.bn = nn.BatchNorm3d(out_planes, eps=1e-3, momentum=0.001, affine=True)", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm3d", "(", "out_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# init", "\n", "self", ".", "conv", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "0.01", ")", "# original s3d is truncated normal within 2 std", "\n", "self", ".", "bn", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "self", ".", "bn", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.BasicConv3d.forward": [[24, 29], ["s3dg.BasicConv3d.conv", "s3dg.BasicConv3d.bn", "s3dg.BasicConv3d.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.STConv3d.__init__": [[31, 57], ["torch.Module.__init__", "isinstance", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "s3dg.STConv3d.conv1.weight.data.normal_", "s3dg.STConv3d.conv2.weight.data.normal_", "s3dg.STConv3d.bn1.weight.data.fill_", "s3dg.STConv3d.bn1.bias.data.zero_", "s3dg.STConv3d.bn2.weight.data.fill_", "s3dg.STConv3d.bn2.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "STConv3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "stride", ",", "tuple", ")", ":", "\n", "            ", "t_stride", "=", "stride", "[", "0", "]", "\n", "stride", "=", "stride", "[", "-", "1", "]", "\n", "", "else", ":", "# int", "\n", "            ", "t_stride", "=", "stride", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "(", "1", ",", "kernel_size", ",", "kernel_size", ")", ",", "\n", "stride", "=", "(", "1", ",", "stride", ",", "stride", ")", ",", "padding", "=", "(", "0", ",", "padding", ",", "padding", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "(", "kernel_size", ",", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "t_stride", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "padding", ",", "0", ",", "0", ")", ",", "bias", "=", "False", ")", "\n", "\n", "# self.bn1=nn.BatchNorm3d(out_planes, eps=1e-3, momentum=0.001, affine=True)", "\n", "# self.bn2=nn.BatchNorm3d(out_planes, eps=1e-3, momentum=0.001, affine=True)", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "out_planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "out_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# init", "\n", "self", ".", "conv1", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "0.01", ")", "# original s3d is truncated normal within 2 std", "\n", "self", ".", "conv2", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "0.01", ")", "# original s3d is truncated normal within 2 std", "\n", "self", ".", "bn1", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "self", ".", "bn1", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "bn2", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "self", ".", "bn2", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.STConv3d.forward": [[58, 66], ["s3dg.STConv3d.conv1", "s3dg.STConv3d.bn1", "s3dg.STConv3d.relu", "s3dg.STConv3d.conv2", "s3dg.STConv3d.bn2", "s3dg.STConv3d.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.SelfGating.__init__": [[69, 72], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", "SelfGating", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.SelfGating.forward": [[73, 79], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "s3dg.SelfGating.fc", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "\"\"\"Feature gating as used in S3D-G\"\"\"", "\n", "spatiotemporal_average", "=", "torch", ".", "mean", "(", "input_tensor", ",", "dim", "=", "[", "2", ",", "3", ",", "4", "]", ")", "\n", "weights", "=", "self", ".", "fc", "(", "spatiotemporal_average", ")", "\n", "weights", "=", "torch", ".", "sigmoid", "(", "weights", ")", "\n", "return", "weights", "[", ":", ",", ":", ",", "None", ",", "None", ",", "None", "]", "*", "input_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.SepInception.__init__": [[82, 117], ["torch.Module.__init__", "isinstance", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sum", "len", "s3dg.BasicConv3d", "s3dg.BasicConv3d", "s3dg.STConv3d", "s3dg.BasicConv3d", "s3dg.STConv3d", "torch.MaxPool3d", "torch.MaxPool3d", "s3dg.BasicConv3d", "s3dg.SelfGating", "s3dg.SelfGating", "s3dg.SelfGating", "s3dg.SelfGating"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "gating", "=", "False", ")", ":", "\n", "        ", "super", "(", "SepInception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "out_planes", ")", "==", "6", "\n", "assert", "isinstance", "(", "out_planes", ",", "list", ")", "\n", "\n", "[", "num_out_0_0a", ",", "\n", "num_out_1_0a", ",", "num_out_1_0b", ",", "\n", "num_out_2_0a", ",", "num_out_2_0b", ",", "\n", "num_out_3_0b", "]", "=", "out_planes", "\n", "\n", "self", ".", "branch0", "=", "nn", ".", "Sequential", "(", "\n", "BasicConv3d", "(", "in_planes", ",", "num_out_0_0a", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "BasicConv3d", "(", "in_planes", ",", "num_out_1_0a", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "STConv3d", "(", "num_out_1_0a", ",", "num_out_1_0b", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "BasicConv3d", "(", "in_planes", ",", "num_out_2_0a", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "STConv3d", "(", "num_out_2_0a", ",", "num_out_2_0b", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "branch3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "BasicConv3d", "(", "in_planes", ",", "num_out_3_0b", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "out_channels", "=", "sum", "(", "[", "num_out_0_0a", ",", "num_out_1_0b", ",", "num_out_2_0b", ",", "num_out_3_0b", "]", ")", "\n", "\n", "self", ".", "gating", "=", "gating", "\n", "if", "gating", ":", "\n", "            ", "self", ".", "gating_b0", "=", "SelfGating", "(", "num_out_0_0a", ")", "\n", "self", ".", "gating_b1", "=", "SelfGating", "(", "num_out_1_0b", ")", "\n", "self", ".", "gating_b2", "=", "SelfGating", "(", "num_out_2_0b", ")", "\n", "self", ".", "gating_b3", "=", "SelfGating", "(", "num_out_3_0b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.SepInception.forward": [[119, 133], ["s3dg.SepInception.branch0", "s3dg.SepInception.branch1", "s3dg.SepInception.branch2", "s3dg.SepInception.branch3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "s3dg.SepInception.gating_b0", "s3dg.SepInception.gating_b1", "s3dg.SepInception.gating_b2", "s3dg.SepInception.gating_b3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "self", ".", "branch0", "(", "x", ")", "\n", "x1", "=", "self", ".", "branch1", "(", "x", ")", "\n", "x2", "=", "self", ".", "branch2", "(", "x", ")", "\n", "x3", "=", "self", ".", "branch3", "(", "x", ")", "\n", "if", "self", ".", "gating", ":", "\n", "            ", "x0", "=", "self", ".", "gating_b0", "(", "x0", ")", "\n", "x1", "=", "self", ".", "gating_b1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "gating_b2", "(", "x2", ")", "\n", "x3", "=", "self", ".", "gating_b3", "(", "x3", ")", "\n", "\n", "", "out", "=", "torch", ".", "cat", "(", "(", "x0", ",", "x1", ",", "x2", ",", "x3", ")", ",", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__": [[137, 198], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.MaxPool3d", "torch.MaxPool3d", "s3dg.BasicConv3d", "s3dg.STConv3d", "torch.Sequential", "torch.Sequential", "torch.MaxPool3d", "torch.MaxPool3d", "s3dg.SepInception", "s3dg.SepInception", "torch.Sequential", "torch.Sequential", "torch.MaxPool3d", "torch.MaxPool3d", "s3dg.SepInception", "s3dg.SepInception", "s3dg.SepInception", "s3dg.SepInception", "s3dg.SepInception", "torch.Sequential", "torch.Sequential", "torch.MaxPool3d", "torch.MaxPool3d", "s3dg.SepInception", "s3dg.SepInception", "torch.Sequential", "torch.Sequential", "s3dg.STConv3d", "s3dg.STConv3d"], "methods", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channel", "=", "3", ",", "gating", "=", "False", ",", "slow", "=", "False", ")", ":", "\n", "        ", "super", "(", "S3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gating", "=", "gating", "\n", "self", ".", "slow", "=", "slow", "\n", "\n", "if", "slow", ":", "\n", "            ", "self", ".", "Conv_1a", "=", "STConv3d", "(", "input_channel", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "3", ")", "\n", "", "else", ":", "# normal", "\n", "            ", "self", ".", "Conv_1a", "=", "STConv3d", "(", "input_channel", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "\n", "", "self", ".", "block1", "=", "nn", ".", "Sequential", "(", "self", ".", "Conv_1a", ")", "# (64, 32, 112, 112)", "\n", "\n", "###################################", "\n", "\n", "self", ".", "MaxPool_2a", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "Conv_2b", "=", "BasicConv3d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "Conv_2c", "=", "STConv3d", "(", "64", ",", "192", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "block2", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "MaxPool_2a", ",", "# (64, 32, 56, 56)", "\n", "self", ".", "Conv_2b", ",", "# (64, 32, 56, 56)", "\n", "self", ".", "Conv_2c", ")", "# (192, 32, 56, 56)", "\n", "\n", "###################################", "\n", "\n", "self", ".", "MaxPool_3a", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "Mixed_3b", "=", "SepInception", "(", "in_planes", "=", "192", ",", "out_planes", "=", "[", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", "]", ",", "gating", "=", "gating", ")", "\n", "self", ".", "Mixed_3c", "=", "SepInception", "(", "in_planes", "=", "256", ",", "out_planes", "=", "[", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", "]", ",", "gating", "=", "gating", ")", "\n", "\n", "self", ".", "block3", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "MaxPool_3a", ",", "# (192, 32, 28, 28)", "\n", "self", ".", "Mixed_3b", ",", "# (256, 32, 28, 28)", "\n", "self", ".", "Mixed_3c", ")", "# (480, 32, 28, 28)", "\n", "\n", "###################################", "\n", "\n", "self", ".", "MaxPool_4a", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "Mixed_4b", "=", "SepInception", "(", "in_planes", "=", "480", ",", "out_planes", "=", "[", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", "]", ",", "gating", "=", "gating", ")", "\n", "self", ".", "Mixed_4c", "=", "SepInception", "(", "in_planes", "=", "512", ",", "out_planes", "=", "[", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", "]", ",", "gating", "=", "gating", ")", "\n", "self", ".", "Mixed_4d", "=", "SepInception", "(", "in_planes", "=", "512", ",", "out_planes", "=", "[", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", "]", ",", "gating", "=", "gating", ")", "\n", "self", ".", "Mixed_4e", "=", "SepInception", "(", "in_planes", "=", "512", ",", "out_planes", "=", "[", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", "]", ",", "gating", "=", "gating", ")", "\n", "self", ".", "Mixed_4f", "=", "SepInception", "(", "in_planes", "=", "528", ",", "out_planes", "=", "[", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", "]", ",", "gating", "=", "gating", ")", "\n", "\n", "self", ".", "block4", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "MaxPool_4a", ",", "# (480, 16, 14, 14)", "\n", "self", ".", "Mixed_4b", ",", "# (512, 16, 14, 14)", "\n", "self", ".", "Mixed_4c", ",", "# (512, 16, 14, 14)", "\n", "self", ".", "Mixed_4d", ",", "# (512, 16, 14, 14)", "\n", "self", ".", "Mixed_4e", ",", "# (528, 16, 14, 14)", "\n", "self", ".", "Mixed_4f", ")", "# (832, 16, 14, 14)", "\n", "\n", "###################################", "\n", "\n", "self", ".", "MaxPool_5a", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "Mixed_5b", "=", "SepInception", "(", "in_planes", "=", "832", ",", "out_planes", "=", "[", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", "]", ",", "gating", "=", "gating", ")", "\n", "self", ".", "Mixed_5c", "=", "SepInception", "(", "in_planes", "=", "832", ",", "out_planes", "=", "[", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", "]", ",", "gating", "=", "gating", ")", "\n", "\n", "self", ".", "block5", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "MaxPool_5a", ",", "# (832, 8, 7, 7)", "\n", "self", ".", "Mixed_5b", ",", "# (832, 8, 7, 7)", "\n", "self", ".", "Mixed_5c", ")", "# (1024, 8, 7, 7)", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.backbone.s3dg.S3D.forward": [[211, 218], ["s3dg.S3D.block1", "s3dg.S3D.block2", "s3dg.S3D.block3", "s3dg.S3D.block4", "s3dg.S3D.block5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.write_csv.write_list": [[5, 11], ["print", "open", "csv.writer", "csv.writer.writerow"], "function", ["None"], ["def", "write_list", "(", "data_list", ",", "path", ",", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "writer", "=", "csv", ".", "writer", "(", "f", ",", "delimiter", "=", "','", ")", "\n", "for", "row", "in", "data_list", ":", "\n", "            ", "if", "row", ":", "writer", ".", "writerow", "(", "row", ")", "\n", "", "", "print", "(", "'split saved to %s'", "%", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.write_csv.main_UCF101": [[12, 32], ["os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "write_csv.write_list", "write_csv.write_list", "open", "open", "os.path.join", "os.path.join", "train_set.append", "test_set.append", "os.path.join", "os.path.join", "len", "len", "glob.glob", "line.rstrip", "glob.glob", "line.split", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.src.write_csv.write_list", "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.write_csv.write_list"], ["", "def", "main_UCF101", "(", "f_root", ",", "splits_root", ",", "csv_root", "=", "'../data/ucf101/'", ")", ":", "\n", "    ", "'''generate training/testing split, count number of available frames, save in csv'''", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "csv_root", ")", ":", "os", ".", "makedirs", "(", "csv_root", ")", "\n", "for", "which_split", "in", "[", "1", ",", "2", ",", "3", "]", ":", "\n", "        ", "train_set", "=", "[", "]", "\n", "test_set", "=", "[", "]", "\n", "train_split_file", "=", "os", ".", "path", ".", "join", "(", "splits_root", ",", "'trainlist%02d.txt'", "%", "which_split", ")", "\n", "with", "open", "(", "train_split_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "vpath", "=", "os", ".", "path", ".", "join", "(", "f_root", ",", "line", ".", "split", "(", "' '", ")", "[", "0", "]", "[", "0", ":", "-", "4", "]", ")", "+", "'/'", "\n", "train_set", ".", "append", "(", "[", "vpath", ",", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "vpath", ",", "'*.jpg'", ")", ")", ")", "]", ")", "\n", "\n", "", "", "test_split_file", "=", "os", ".", "path", ".", "join", "(", "splits_root", ",", "'testlist%02d.txt'", "%", "which_split", ")", "\n", "with", "open", "(", "test_split_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "vpath", "=", "os", ".", "path", ".", "join", "(", "f_root", ",", "line", ".", "rstrip", "(", ")", "[", "0", ":", "-", "4", "]", ")", "+", "'/'", "\n", "test_set", ".", "append", "(", "[", "vpath", ",", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "vpath", ",", "'*.jpg'", ")", ")", ")", "]", ")", "\n", "\n", "", "", "write_list", "(", "train_set", ",", "os", ".", "path", ".", "join", "(", "csv_root", ",", "'train_split%02d.csv'", "%", "which_split", ")", ")", "\n", "write_list", "(", "test_set", ",", "os", ".", "path", ".", "join", "(", "csv_root", ",", "'test_split%02d.csv'", "%", "which_split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.write_csv.main_HMDB51": [[34, 56], ["os.path.exists", "os.makedirs", "sorted", "write_csv.write_list", "write_csv.write_list", "glob.glob", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.basename", "open", "line.split", "line.split", "os.path.join", "train_set.append", "test_set.append", "len", "glob.glob", "len", "os.path.join", "glob.glob", "os.path.join"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.src.write_csv.write_list", "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.write_csv.write_list"], ["", "", "def", "main_HMDB51", "(", "f_root", ",", "splits_root", ",", "csv_root", "=", "'../data/hmdb51/'", ")", ":", "\n", "    ", "'''generate training/testing split, count number of available frames, save in csv'''", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "csv_root", ")", ":", "os", ".", "makedirs", "(", "csv_root", ")", "\n", "for", "which_split", "in", "[", "1", ",", "2", ",", "3", "]", ":", "\n", "        ", "train_set", "=", "[", "]", "\n", "test_set", "=", "[", "]", "\n", "split_files", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "splits_root", ",", "'*_test_split%d.txt'", "%", "which_split", ")", ")", ")", "\n", "assert", "len", "(", "split_files", ")", "==", "51", "\n", "for", "split_file", "in", "split_files", ":", "\n", "            ", "action_name", "=", "os", ".", "path", ".", "basename", "(", "split_file", ")", "[", "0", ":", "-", "16", "]", "\n", "with", "open", "(", "split_file", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "for", "line", "in", "f", ":", "\n", "                    ", "video_name", "=", "line", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "_type", "=", "line", ".", "split", "(", "' '", ")", "[", "1", "]", "\n", "vpath", "=", "os", ".", "path", ".", "join", "(", "f_root", ",", "action_name", ",", "video_name", "[", "0", ":", "-", "4", "]", ")", "+", "'/'", "\n", "if", "_type", "==", "'1'", ":", "\n", "                        ", "train_set", ".", "append", "(", "[", "vpath", ",", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "vpath", ",", "'*.jpg'", ")", ")", ")", "]", ")", "\n", "", "elif", "_type", "==", "'2'", ":", "\n", "                        ", "test_set", ".", "append", "(", "[", "vpath", ",", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "vpath", ",", "'*.jpg'", ")", ")", ")", "]", ")", "\n", "\n", "", "", "", "", "write_list", "(", "train_set", ",", "os", ".", "path", ".", "join", "(", "csv_root", ",", "'train_split%02d.csv'", "%", "which_split", ")", ")", "\n", "write_list", "(", "test_set", ",", "os", ".", "path", ".", "join", "(", "csv_root", ",", "'test_split%02d.csv'", "%", "which_split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.write_csv.get_split": [[58, 67], ["print", "print", "Parallel", "pd.read_csv", "delayed", "tqdm", "split_content.iterrows", "len"], "function", ["None"], ["", "", "def", "get_split", "(", "root", ",", "split_path", ",", "mode", ")", ":", "\n", "    ", "print", "(", "'processing %s split ...'", "%", "mode", ")", "\n", "print", "(", "'checking %s'", "%", "root", ")", "\n", "split_list", "=", "[", "]", "\n", "split_content", "=", "pd", ".", "read_csv", "(", "split_path", ")", ".", "iloc", "[", ":", ",", "0", ":", "4", "]", "\n", "split_list", "=", "Parallel", "(", "n_jobs", "=", "64", ")", "(", "delayed", "(", "check_exists", ")", "(", "row", ",", "root", ")", "for", "i", ",", "row", "in", "tqdm", "(", "split_content", ".", "iterrows", "(", ")", ",", "total", "=", "len", "(", "split_content", ")", ")", ")", "\n", "return", "split_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.write_csv.check_exists": [[68, 76], ["os.path.join", "os.path.exists", "len", "glob.glob", "os.path.join"], "function", ["None"], ["", "def", "check_exists", "(", "row", ",", "root", ")", ":", "\n", "    ", "dirname", "=", "'_'", ".", "join", "(", "[", "row", "[", "'youtube_id'", "]", ",", "'%06d'", "%", "row", "[", "'time_start'", "]", ",", "'%06d'", "%", "row", "[", "'time_end'", "]", "]", ")", "\n", "full_dirname", "=", "os", ".", "path", ".", "join", "(", "root", ",", "row", "[", "'label'", "]", ",", "dirname", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "full_dirname", ")", ":", "\n", "        ", "n_frames", "=", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "full_dirname", ",", "'*.jpg'", ")", ")", ")", "\n", "return", "[", "full_dirname", ",", "n_frames", "]", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.write_csv.main_Kinetics400": [[77, 93], ["os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "write_csv.get_split", "write_csv.write_list", "os.path.join", "os.path.join", "write_csv.get_split", "write_csv.write_list", "os.path.join", "os.path.join", "write_csv.get_split", "write_csv.write_list", "IOError", "os.path.join"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.src.write_csv.get_split", "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.write_csv.write_list", "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.write_csv.get_split", "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.write_csv.write_list", "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.write_csv.get_split", "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.write_csv.write_list"], ["", "", "def", "main_Kinetics400", "(", "mode", ",", "k400_path", ",", "f_root", ",", "csv_root", "=", "'../data/kinetics400'", ")", ":", "\n", "    ", "train_split_path", "=", "os", ".", "path", ".", "join", "(", "k400_path", ",", "'kinetics_train/kinetics_train.csv'", ")", "\n", "val_split_path", "=", "os", ".", "path", ".", "join", "(", "k400_path", ",", "'kinetics_val/kinetics_val.csv'", ")", "\n", "test_split_path", "=", "os", ".", "path", ".", "join", "(", "k400_path", ",", "'kinetics_test/kinetics_test.csv'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "csv_root", ")", ":", "os", ".", "makedirs", "(", "csv_root", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "train_split", "=", "get_split", "(", "os", ".", "path", ".", "join", "(", "f_root", ",", "'train_split'", ")", ",", "train_split_path", ",", "'train'", ")", "\n", "write_list", "(", "train_split", ",", "os", ".", "path", ".", "join", "(", "csv_root", ",", "'train_split.csv'", ")", ")", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "        ", "val_split", "=", "get_split", "(", "os", ".", "path", ".", "join", "(", "f_root", ",", "'val_split'", ")", ",", "val_split_path", ",", "'val'", ")", "\n", "write_list", "(", "val_split", ",", "os", ".", "path", ".", "join", "(", "csv_root", ",", "'val_split.csv'", ")", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "        ", "test_split", "=", "get_split", "(", "f_root", ",", "test_split_path", ",", "'test'", ")", "\n", "write_list", "(", "test_split", ",", "os", ".", "path", ".", "join", "(", "csv_root", ",", "'test_split.csv'", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "IOError", "(", "'wrong mode'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.extract_frame.extract_video_opencv": [[12, 42], ["os.path.join", "cv2.VideoCapture", "cv2.VideoCapture.get", "int", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "extract_frame.resize_dim", "cv2.VideoCapture.read", "cv2.VideoCapture.release", "v_path.split", "os.path.basename", "os.path.exists", "os.makedirs", "cv2.VideoCapture.get", "print", "cv2.resize", "cv2.imwrite", "cv2.VideoCapture.read", "print", "os.path.join", "os.path.join.split"], "function", ["home.repos.pwc.inspect_result.lzhangbj_DualVar.src.extract_frame.resize_dim", "home.repos.pwc.inspect_result.lzhangbj_DualVar.utils.transforms.resize"], ["def", "extract_video_opencv", "(", "v_path", ",", "f_root", ",", "dim", "=", "240", ")", ":", "\n", "    ", "'''v_path: single video path;\n       f_root: root to store frames'''", "\n", "v_class", "=", "v_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "v_name", "=", "os", ".", "path", ".", "basename", "(", "v_path", ")", "[", "0", ":", "-", "4", "]", "\n", "out_dir", "=", "os", ".", "path", ".", "join", "(", "f_root", ",", "v_class", ",", "v_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "\n", "", "vidcap", "=", "cv2", ".", "VideoCapture", "(", "v_path", ")", "\n", "fps", "=", "vidcap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "nb_frames", "=", "int", "(", "vidcap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "width", "=", "vidcap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", "# float", "\n", "height", "=", "vidcap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", "# float", "\n", "if", "(", "width", "==", "0", ")", "or", "(", "height", "==", "0", ")", ":", "\n", "        ", "print", "(", "v_path", ",", "'not successfully loaded, drop ..'", ")", ";", "\n", "return", "\n", "", "new_dim", "=", "resize_dim", "(", "width", ",", "height", ",", "dim", ")", "\n", "\n", "success", ",", "image", "=", "vidcap", ".", "read", "(", ")", "\n", "count", "=", "1", "\n", "while", "success", ":", "\n", "        ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "new_dim", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'image_%05d.jpg'", "%", "count", ")", ",", "image", ",", "\n", "[", "cv2", ".", "IMWRITE_JPEG_QUALITY", ",", "80", "]", ")", "# quality from 0-100, 95 is default, high is good", "\n", "success", ",", "image", "=", "vidcap", ".", "read", "(", ")", "\n", "count", "+=", "1", "\n", "", "if", "nb_frames", ">", "count", ":", "\n", "        ", "print", "(", "'/'", ".", "join", "(", "out_dir", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", ":", "]", ")", ",", "'NOT extracted successfully: %df/%df'", "%", "(", "count", ",", "nb_frames", ")", ")", "\n", "", "vidcap", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.extract_frame.resize_dim": [[44, 50], ["int", "int", "int", "int"], "function", ["None"], ["", "def", "resize_dim", "(", "w", ",", "h", ",", "target", ")", ":", "\n", "    ", "'''resize (w, h), such that the smaller side is target, keep the aspect ratio'''", "\n", "if", "w", ">=", "h", ":", "\n", "        ", "return", "(", "int", "(", "target", "*", "w", "/", "h", ")", ",", "int", "(", "target", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "int", "(", "target", ")", ",", "int", "(", "target", "*", "h", "/", "w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.extract_frame.main_UCF101": [[52, 63], ["print", "print", "print", "glob.glob", "tqdm.tqdm", "os.path.exists", "os.makedirs", "os.path.join", "enumerate", "glob.glob", "sorted", "len", "os.path.join", "joblib.Parallel", "joblib.delayed"], "function", ["None"], ["", "", "def", "main_UCF101", "(", "v_root", ",", "f_root", ")", ":", "\n", "    ", "print", "(", "'extracting UCF101 ... '", ")", "\n", "print", "(", "'extracting videos from %s'", "%", "v_root", ")", "\n", "print", "(", "'frame save to %s'", "%", "f_root", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "f_root", ")", ":", "os", ".", "makedirs", "(", "f_root", ")", "\n", "v_act_root", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "v_root", ",", "'*/'", ")", ")", "\n", "for", "i", ",", "j", "in", "tqdm", "(", "enumerate", "(", "v_act_root", ")", ",", "total", "=", "len", "(", "v_act_root", ")", ")", ":", "\n", "        ", "v_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "j", ",", "'*.avi'", ")", ")", "\n", "v_paths", "=", "sorted", "(", "v_paths", ")", "\n", "Parallel", "(", "n_jobs", "=", "32", ")", "(", "delayed", "(", "extract_video_opencv", ")", "(", "p", ",", "f_root", ")", "for", "p", "in", "v_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.extract_frame.main_HMDB51": [[65, 76], ["print", "print", "print", "glob.glob", "tqdm.tqdm", "os.path.exists", "os.makedirs", "os.path.join", "enumerate", "glob.glob", "sorted", "len", "os.path.join", "joblib.Parallel", "joblib.delayed", "tqdm.tqdm", "len"], "function", ["None"], ["", "", "def", "main_HMDB51", "(", "v_root", ",", "f_root", ")", ":", "\n", "    ", "print", "(", "'extracting HMDB51 ... '", ")", "\n", "print", "(", "'extracting videos from %s'", "%", "v_root", ")", "\n", "print", "(", "'frame save to %s'", "%", "f_root", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "f_root", ")", ":", "os", ".", "makedirs", "(", "f_root", ")", "\n", "v_act_root", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "v_root", ",", "'*/'", ")", ")", "\n", "for", "i", ",", "j", "in", "tqdm", "(", "enumerate", "(", "v_act_root", ")", ",", "total", "=", "len", "(", "v_act_root", ")", ")", ":", "\n", "        ", "v_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "j", ",", "'*.avi'", ")", ")", "\n", "v_paths", "=", "sorted", "(", "v_paths", ")", "\n", "Parallel", "(", "n_jobs", "=", "32", ")", "(", "delayed", "(", "extract_video_opencv", ")", "(", "p", ",", "f_root", ")", "for", "p", "in", "tqdm", "(", "v_paths", ",", "total", "=", "len", "(", "v_paths", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzhangbj_DualVar.src.extract_frame.main_kinetics400": [[78, 103], ["print", "print", "glob.glob", "sorted", "tqdm.tqdm", "os.path.exists", "print", "sys.exit", "os.path.exists", "os.makedirs", "os.path.join", "enumerate", "glob.glob", "sorted", "os.path.join", "os.path.exists", "print", "len", "os.path.join", "j.split", "print", "joblib.Parallel", "joblib.delayed", "tqdm.tqdm", "len"], "function", ["None"], ["", "", "def", "main_kinetics400", "(", "v_root", ",", "f_root", ",", "dim", "=", "150", ")", ":", "\n", "    ", "print", "(", "'extracting Kinetics400 ... '", ")", "\n", "for", "basename", "in", "[", "'train_split'", ",", "'val_split'", "]", ":", "\n", "        ", "v_root_real", "=", "v_root", "+", "'/'", "+", "basename", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "v_root_real", ")", ":", "\n", "            ", "print", "(", "'Wrong v_root'", ")", ";", "\n", "sys", ".", "exit", "(", ")", "\n", "", "f_root_real", "=", "'/scratch/local/ssd/htd/kinetics400/frame_full'", "+", "'/'", "+", "basename", "\n", "print", "(", "'Extract to: \\nframe: %s'", "%", "f_root_real", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "f_root_real", ")", ":", "os", ".", "makedirs", "(", "f_root_real", ")", "\n", "v_act_root", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "v_root_real", ",", "'*/'", ")", ")", "\n", "v_act_root", "=", "sorted", "(", "v_act_root", ")", "\n", "\n", "# if resume, remember to delete the last video folder", "\n", "for", "i", ",", "j", "in", "tqdm", "(", "enumerate", "(", "v_act_root", ")", ",", "total", "=", "len", "(", "v_act_root", ")", ")", ":", "\n", "            ", "v_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "j", ",", "'*.mp4'", ")", ")", "\n", "v_paths", "=", "sorted", "(", "v_paths", ")", "\n", "# for resume:", "\n", "v_class", "=", "j", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "out_dir", "=", "os", ".", "path", ".", "join", "(", "f_root_real", ",", "v_class", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "print", "(", "out_dir", ",", "'exists!'", ")", ";", "continue", "\n", "print", "(", "'extracting: %s'", "%", "v_class", ")", "\n", "# dim = 150 (crop to 128 later) or 256 (crop to 224 later)", "\n", "Parallel", "(", "n_jobs", "=", "32", ")", "(", "\n", "delayed", "(", "extract_video_opencv", ")", "(", "p", ",", "f_root_real", ",", "dim", "=", "dim", ")", "for", "p", "in", "tqdm", "(", "v_paths", ",", "total", "=", "len", "(", "v_paths", ")", ")", ")", "\n", "\n"]]}