{"home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.train_ada.image_classification_test": [[32, 84], ["torch.max", "torch.max", "torch.max", "torch.max", "accuracy.item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "float", "range", "iter", "range", "iter", "len", "range", "sum", "len", "iter.next", "model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat.size", "range", "iter_test[].next", "range", "torch.autograd.Variable", "range", "torch.autograd.Variable", "model", "sum.append", "sum.data.float", "torch.autograd.Variable.data.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "sum.data.float", "torch.autograd.Variable.data.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "torch.autograd.Variable", "torch.autograd.Variable.cuda", "torch.autograd.Variable", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze().float", "inputs[].cuda", "torch.Softmax", "sum.data.float", "torch.autograd.Variable.data.float", "sum.data.float", "torch.autograd.Variable.data.float", "str", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "function", ["None"], ["def", "image_classification_test", "(", "loader", ",", "model", ",", "test_10crop", "=", "True", ",", "gpu", "=", "True", ",", "iter_num", "=", "-", "1", ")", ":", "\n", "    ", "start_test", "=", "True", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "test_10crop", ":", "\n", "            ", "iter_test", "=", "[", "iter", "(", "loader", "[", "'test'", "+", "str", "(", "i", ")", "]", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "loader", "[", "'test0'", "]", ")", ")", ":", "\n", "                ", "data", "=", "[", "iter_test", "[", "j", "]", ".", "next", "(", ")", "for", "j", "in", "range", "(", "10", ")", "]", "\n", "inputs", "=", "[", "data", "[", "j", "]", "[", "0", "]", "for", "j", "in", "range", "(", "10", ")", "]", "\n", "labels", "=", "data", "[", "0", "]", "[", "1", "]", "\n", "if", "gpu", ":", "\n", "                    ", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                        ", "inputs", "[", "j", "]", "=", "Variable", "(", "inputs", "[", "j", "]", ".", "cuda", "(", ")", ")", "\n", "", "labels", "=", "Variable", "(", "labels", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                        ", "inputs", "[", "j", "]", "=", "Variable", "(", "inputs", "[", "j", "]", ")", "\n", "", "labels", "=", "Variable", "(", "labels", ")", "\n", "", "outputs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                    ", "_", ",", "predict_out", "=", "model", "(", "inputs", "[", "j", "]", ")", "\n", "outputs", ".", "append", "(", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "predict_out", ")", ")", "\n", "", "outputs", "=", "sum", "(", "outputs", ")", "\n", "if", "start_test", ":", "\n", "                    ", "all_output", "=", "outputs", ".", "data", ".", "float", "(", ")", "\n", "all_label", "=", "labels", ".", "data", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "                    ", "all_output", "=", "torch", ".", "cat", "(", "(", "all_output", ",", "outputs", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "(", "all_label", ",", "labels", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "else", ":", "\n", "            ", "iter_test", "=", "iter", "(", "loader", "[", "\"test\"", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "loader", "[", "'test'", "]", ")", ")", ":", "\n", "                ", "data", "=", "iter_test", ".", "next", "(", ")", "\n", "inputs", "=", "data", "[", "0", "]", "\n", "labels", "=", "data", "[", "1", "]", "\n", "if", "gpu", ":", "\n", "                    ", "inputs", "=", "Variable", "(", "inputs", ".", "cuda", "(", ")", ")", "\n", "labels", "=", "Variable", "(", "labels", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "inputs", "=", "Variable", "(", "inputs", ")", "\n", "labels", "=", "Variable", "(", "labels", ")", "\n", "", "_", ",", "outputs", "=", "model", "(", "inputs", ")", "\n", "if", "start_test", ":", "\n", "                    ", "all_output", "=", "outputs", ".", "data", ".", "float", "(", ")", "\n", "all_label", "=", "labels", ".", "data", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "                    ", "all_output", "=", "torch", ".", "cat", "(", "(", "all_output", ",", "outputs", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "(", "all_label", ",", "labels", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "", "_", ",", "predict", "=", "torch", ".", "max", "(", "all_output", ",", "1", ")", "\n", "accuracy", "=", "torch", ".", "sum", "(", "torch", ".", "squeeze", "(", "predict", ")", ".", "float", "(", ")", "==", "all_label", ")", ".", "float", "(", ")", "/", "float", "(", "all_label", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "return", "accuracy", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.train_ada.train": [[86, 331], ["tensorboardX.SummaryWriter", "utils.EarlyStopping", "pre_process.image_train", "pre_process.image_train", "torch.CrossEntropyLoss", "data_list.ImageList", "torch.DataLoader", "data_list.ImageList", "torch.DataLoader", "config[].write", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "network.AdversarialNetwork", "network.AdversarialLayer", "parameter_list.append", "parameter_list.append", "range", "pre_process.image_test_10crop", "pre_process.image_test", "data_list.stratify_sampling", "data_list.stratify_sampling", "range", "data_list.ImageList", "torch.DataLoader", "data_list.ImageList", "MyDataLoader", "base_network.cuda.cuda", "base_network.cuda.output_num", "ad_net.cuda.cuda", "param_lr.append", "len", "len", "base_network.cuda.train", "lr_scheduler", "lr_scheduler.zero_grad", "iter.next", "iter.next", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs_source.size", "ad_net.cuda.train", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "transfer_criterion", "ad_net.cuda.", "utils.domain_cls_accuracy", "nn.CrossEntropyLoss.", "center_criterion", "loss.EntropyLoss", "total_loss.backward", "lr_scheduler.step", "open().readlines", "open().readlines", "data_list.ImageList", "torch.DataLoader", "data_list.ImageList", "torch.DataLoader", "data_list.stratify_sampling", "data_list.stratify_sampling", "len", "len", "ad_net.cuda.parameters", "center_criterion.parameters", "base_network.cuda.train", "config[].write", "config[].flush", "tensorboardX.SummaryWriter.add_scalar", "utils.EarlyStopping.is_stop_training", "torch.save", "torch.save", "torch.save", "torch.save", "iter", "iter", "base_network.cuda.", "logits.narrow", "torch.cat.size", "features.detach", "features.narrow", "center_criterion.centers.grad.zero_", "center_criterion.centers.backward", "config[].write", "config[].flush", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "data_list.stratify_sampling", "data_list.stratify_sampling", "open().readlines", "open().readlines", "base_network.cuda.parameters", "train_ada.image_classification_test", "base_network.cuda.state_dict", "center_criterion.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "config[].write", "os.join", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "base_network.cuda.", "logits.narrow", "int", "torch.Softmax", "total_loss.data.cpu().float().item", "class_criterion.data.cpu().float().item", "transfer_criterion.data.cpu().float().item", "fisher_loss.data.cpu().float().item", "fisher_intra_loss.data.cpu().float().item", "fisher_inter_loss.data.cpu().float().item", "open", "open", "open().readlines", "open().readlines", "base_network.cuda.feature_layers.parameters", "base_network.cuda.bottleneck.parameters", "base_network.cuda.fc.parameters", "base_network.cuda.feature_layers.parameters", "base_network.cuda.fc.parameters", "utils.distance_classification_test", "ValueError", "os.join", "loss.distance_to_centroids", "total_loss.data.cpu().float().item", "transfer_criterion.data.cpu().float().item", "class_criterion.data.cpu().float().item", "loss.EntropyLoss.data.cpu().float().item", "fisher_loss.cpu().float().item", "fisher_intra_loss.cpu().float().item", "fisher_inter_loss.cpu().float().item", "str", "str", "str", "str", "open", "open", "center_criterion.centers.detach", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "center_criterion.centers.detach", "torch.cat.size", "total_loss.data.cpu().float", "class_criterion.data.cpu().float", "transfer_criterion.data.cpu().float", "fisher_loss.data.cpu().float", "fisher_intra_loss.data.cpu().float", "fisher_inter_loss.data.cpu().float", "open", "str", "open", "str", "total_loss.data.cpu().float", "transfer_criterion.data.cpu().float", "class_criterion.data.cpu().float", "loss.EntropyLoss.data.cpu().float", "fisher_loss.cpu().float", "fisher_intra_loss.cpu().float", "fisher_inter_loss.cpu().float", "str", "str", "total_loss.data.cpu", "class_criterion.data.cpu", "transfer_criterion.data.cpu", "fisher_loss.data.cpu", "fisher_intra_loss.data.cpu", "fisher_inter_loss.data.cpu", "total_loss.data.cpu", "transfer_criterion.data.cpu", "class_criterion.data.cpu", "loss.EntropyLoss.data.cpu", "fisher_loss.cpu", "fisher_intra_loss.cpu", "fisher_inter_loss.cpu"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.image_train", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.image_train", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.image_test_10crop", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.image_test", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.stratify_sampling", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.stratify_sampling", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.LittleAdversarialNetwork.output_num", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.train_feature.train", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.train_feature.train", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.domain_cls_accuracy", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.loss.EntropyLoss", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.SilenceLayer.backward", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.stratify_sampling", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.stratify_sampling", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.train_feature.train", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.EarlyStopping.is_stop_training", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.SilenceLayer.backward", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.stratify_sampling", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.stratify_sampling", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.eval_da.image_classification_test", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.distance_classification_test", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.distance_to_centroids"], ["", "def", "train", "(", "config", ")", ":", "\n", "## set up summary writer", "\n", "    ", "writer", "=", "SummaryWriter", "(", "config", "[", "'output_path'", "]", ")", "\n", "\n", "# set up early stop", "\n", "early_stop_engine", "=", "EarlyStopping", "(", "config", "[", "\"early_stop_patience\"", "]", ")", "\n", "\n", "## set pre-process", "\n", "prep_dict", "=", "{", "}", "\n", "prep_config", "=", "config", "[", "\"prep\"", "]", "\n", "prep_dict", "[", "\"source\"", "]", "=", "prep", ".", "image_train", "(", "resize_size", "=", "prep_config", "[", "\"resize_size\"", "]", ",", "crop_size", "=", "prep_config", "[", "\"crop_size\"", "]", ")", "\n", "prep_dict", "[", "\"target\"", "]", "=", "prep", ".", "image_train", "(", "resize_size", "=", "prep_config", "[", "\"resize_size\"", "]", ",", "crop_size", "=", "prep_config", "[", "\"crop_size\"", "]", ")", "\n", "if", "prep_config", "[", "\"test_10crop\"", "]", ":", "\n", "        ", "prep_dict", "[", "\"test\"", "]", "=", "prep", ".", "image_test_10crop", "(", "resize_size", "=", "prep_config", "[", "\"resize_size\"", "]", ",", "crop_size", "=", "prep_config", "[", "\"crop_size\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "prep_dict", "[", "\"test\"", "]", "=", "prep", ".", "image_test", "(", "resize_size", "=", "prep_config", "[", "\"resize_size\"", "]", ",", "crop_size", "=", "prep_config", "[", "\"crop_size\"", "]", ")", "\n", "\n", "## set loss", "\n", "", "class_num", "=", "config", "[", "\"network\"", "]", "[", "\"params\"", "]", "[", "\"class_num\"", "]", "\n", "loss_params", "=", "config", "[", "\"loss\"", "]", "\n", "\n", "class_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "transfer_criterion", "=", "loss", ".", "PADA", "\n", "center_criterion", "=", "loss_params", "[", "\"loss_type\"", "]", "(", "num_classes", "=", "class_num", ",", "\n", "feat_dim", "=", "config", "[", "\"network\"", "]", "[", "\"params\"", "]", "[", "\"bottleneck_dim\"", "]", ")", "\n", "\n", "## prepare data", "\n", "dsets", "=", "{", "}", "\n", "dset_loaders", "=", "{", "}", "\n", "data_config", "=", "config", "[", "\"data\"", "]", "\n", "dsets", "[", "\"source\"", "]", "=", "ImageList", "(", "stratify_sampling", "(", "open", "(", "data_config", "[", "\"source\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "prep_config", "[", "\"source_size\"", "]", ")", ",", "transform", "=", "prep_dict", "[", "\"source\"", "]", ")", "\n", "dset_loaders", "[", "\"source\"", "]", "=", "util_data", ".", "DataLoader", "(", "dsets", "[", "\"source\"", "]", ",", "batch_size", "=", "data_config", "[", "\"source\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "dsets", "[", "\"target\"", "]", "=", "ImageList", "(", "stratify_sampling", "(", "open", "(", "data_config", "[", "\"target\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "prep_config", "[", "\"target_size\"", "]", ")", ",", "transform", "=", "prep_dict", "[", "\"target\"", "]", ")", "\n", "dset_loaders", "[", "\"target\"", "]", "=", "util_data", ".", "DataLoader", "(", "dsets", "[", "\"target\"", "]", ",", "batch_size", "=", "data_config", "[", "\"target\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "\n", "if", "prep_config", "[", "\"test_10crop\"", "]", ":", "\n", "        ", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "dsets", "[", "\"test\"", "+", "str", "(", "i", ")", "]", "=", "ImageList", "(", "stratify_sampling", "(", "open", "(", "data_config", "[", "\"test\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "ratio", "=", "prep_config", "[", "'target_size'", "]", ")", ",", "transform", "=", "prep_dict", "[", "\"test\"", "]", "[", "\"val\"", "+", "str", "(", "i", ")", "]", ")", "\n", "dset_loaders", "[", "\"test\"", "+", "str", "(", "i", ")", "]", "=", "util_data", ".", "DataLoader", "(", "dsets", "[", "\"test\"", "+", "str", "(", "i", ")", "]", ",", "batch_size", "=", "data_config", "[", "\"test\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "\n", "dsets", "[", "\"target\"", "+", "str", "(", "i", ")", "]", "=", "ImageList", "(", "stratify_sampling", "(", "open", "(", "data_config", "[", "\"target\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "ratio", "=", "prep_config", "[", "'target_size'", "]", ")", ",", "transform", "=", "prep_dict", "[", "\"test\"", "]", "[", "\"val\"", "+", "str", "(", "i", ")", "]", ")", "\n", "dset_loaders", "[", "\"target\"", "+", "str", "(", "i", ")", "]", "=", "util_data", ".", "DataLoader", "(", "dsets", "[", "\"target\"", "+", "str", "(", "i", ")", "]", ",", "batch_size", "=", "data_config", "[", "\"test\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "dsets", "[", "\"test\"", "]", "=", "ImageList", "(", "stratify_sampling", "(", "open", "(", "data_config", "[", "\"test\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "ratio", "=", "prep_config", "[", "'target_size'", "]", ")", ",", "transform", "=", "prep_dict", "[", "\"test\"", "]", ")", "\n", "dset_loaders", "[", "\"test\"", "]", "=", "util_data", ".", "DataLoader", "(", "dsets", "[", "\"test\"", "]", ",", "batch_size", "=", "data_config", "[", "\"test\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "\n", "dsets", "[", "\"target_test\"", "]", "=", "ImageList", "(", "stratify_sampling", "(", "open", "(", "data_config", "[", "\"target\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "ratio", "=", "prep_config", "[", "'target_size'", "]", ")", ",", "transform", "=", "prep_dict", "[", "\"test\"", "]", ")", "\n", "dset_loaders", "[", "\"target_test\"", "]", "=", "MyDataLoader", "(", "dsets", "[", "\"target_test\"", "]", ",", "batch_size", "=", "data_config", "[", "\"test\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "\n", "", "config", "[", "'out_file'", "]", ".", "write", "(", "\"dataset sizes: source={}, target={}\\n\"", ".", "format", "(", "\n", "len", "(", "dsets", "[", "\"source\"", "]", ")", ",", "len", "(", "dsets", "[", "\"target\"", "]", ")", ")", ")", "\n", "\n", "## set base network", "\n", "net_config", "=", "config", "[", "\"network\"", "]", "\n", "base_network", "=", "net_config", "[", "\"name\"", "]", "(", "**", "net_config", "[", "\"params\"", "]", ")", "\n", "\n", "\n", "use_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_gpu", ":", "\n", "        ", "base_network", "=", "base_network", ".", "cuda", "(", ")", "\n", "\n", "## collect parameters", "\n", "", "if", "net_config", "[", "\"params\"", "]", "[", "\"new_cls\"", "]", ":", "\n", "        ", "if", "net_config", "[", "\"params\"", "]", "[", "\"use_bottleneck\"", "]", ":", "\n", "            ", "parameter_list", "=", "[", "{", "\"params\"", ":", "base_network", ".", "feature_layers", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "1", ",", "'decay_mult'", ":", "2", "}", ",", "{", "\"params\"", ":", "base_network", ".", "bottleneck", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", ",", "{", "\"params\"", ":", "base_network", ".", "fc", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", "]", "\n", "", "else", ":", "\n", "            ", "parameter_list", "=", "[", "{", "\"params\"", ":", "base_network", ".", "feature_layers", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "1", ",", "'decay_mult'", ":", "2", "}", ",", "{", "\"params\"", ":", "base_network", ".", "fc", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", "]", "\n", "", "", "else", ":", "\n", "        ", "parameter_list", "=", "[", "{", "\"params\"", ":", "base_network", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "1", ",", "'decay_mult'", ":", "2", "}", "]", "\n", "\n", "## add additional network for some methods", "\n", "", "ad_net", "=", "network", ".", "AdversarialNetwork", "(", "base_network", ".", "output_num", "(", ")", ")", "\n", "gradient_reverse_layer", "=", "network", ".", "AdversarialLayer", "(", "high_value", "=", "config", "[", "\"high\"", "]", ")", "#, ", "\n", "#max_iter_value=config[\"num_iterations\"])", "\n", "if", "use_gpu", ":", "\n", "        ", "ad_net", "=", "ad_net", ".", "cuda", "(", ")", "\n", "", "parameter_list", ".", "append", "(", "{", "\"params\"", ":", "ad_net", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", ")", "\n", "parameter_list", ".", "append", "(", "{", "\"params\"", ":", "center_criterion", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "1", "}", ")", "\n", "\n", "## set optimizer", "\n", "optimizer_config", "=", "config", "[", "\"optimizer\"", "]", "\n", "optimizer", "=", "optim_dict", "[", "optimizer_config", "[", "\"type\"", "]", "]", "(", "parameter_list", ",", "**", "(", "optimizer_config", "[", "\"optim_params\"", "]", ")", ")", "\n", "param_lr", "=", "[", "]", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_lr", ".", "append", "(", "param_group", "[", "\"lr\"", "]", ")", "\n", "", "schedule_param", "=", "optimizer_config", "[", "\"lr_param\"", "]", "\n", "lr_scheduler", "=", "lr_schedule", ".", "schedule_dict", "[", "optimizer_config", "[", "\"lr_type\"", "]", "]", "\n", "\n", "\n", "## train   ", "\n", "len_train_source", "=", "len", "(", "dset_loaders", "[", "\"source\"", "]", ")", "-", "1", "\n", "len_train_target", "=", "len", "(", "dset_loaders", "[", "\"target\"", "]", ")", "-", "1", "\n", "transfer_loss_value", "=", "classifier_loss_value", "=", "total_loss_value", "=", "0.0", "\n", "best_acc", "=", "0.0", "\n", "for", "i", "in", "range", "(", "config", "[", "\"num_iterations\"", "]", ")", ":", "\n", "        ", "if", "i", "%", "config", "[", "\"test_interval\"", "]", "==", "0", ":", "\n", "            ", "base_network", ".", "train", "(", "False", ")", "\n", "if", "config", "[", "'loss'", "]", "[", "'ly_type'", "]", "==", "\"cosine\"", ":", "\n", "                ", "temp_acc", "=", "image_classification_test", "(", "dset_loaders", ",", "base_network", ",", "test_10crop", "=", "prep_config", "[", "\"test_10crop\"", "]", ",", "gpu", "=", "use_gpu", ")", "\n", "", "elif", "config", "[", "'loss'", "]", "[", "'ly_type'", "]", "==", "\"euclidean\"", ":", "\n", "                ", "temp_acc", ",", "_", "=", "distance_classification_test", "(", "dset_loaders", ",", "base_network", ",", "center_criterion", ".", "centers", ".", "detach", "(", ")", ",", "test_10crop", "=", "prep_config", "[", "\"test_10crop\"", "]", ",", "gpu", "=", "use_gpu", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"no test method for cls loss: {}\"", ".", "format", "(", "config", "[", "'loss'", "]", "[", "'ly_type'", "]", ")", ")", "\n", "\n", "", "snapshot_obj", "=", "{", "'step'", ":", "i", ",", "\n", "\"base_network\"", ":", "base_network", ".", "state_dict", "(", ")", ",", "\n", "'precision'", ":", "temp_acc", ",", "\n", "}", "\n", "if", "config", "[", "\"loss\"", "]", "[", "\"loss_name\"", "]", "!=", "\"laplacian\"", "and", "config", "[", "\"loss\"", "]", "[", "\"ly_type\"", "]", "==", "\"euclidean\"", ":", "\n", "                ", "snapshot_obj", "[", "'center_criterion'", "]", "=", "center_criterion", ".", "state_dict", "(", ")", "\n", "", "if", "temp_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "temp_acc", "\n", "# save best model", "\n", "torch", ".", "save", "(", "snapshot_obj", ",", "\n", "osp", ".", "join", "(", "config", "[", "\"output_path\"", "]", ",", "\"best_model.pth.tar\"", ")", ")", "\n", "", "log_str", "=", "\"iter: {:05d}, {} precision: {:.5f}\\n\"", ".", "format", "(", "i", ",", "config", "[", "'loss'", "]", "[", "'ly_type'", "]", ",", "temp_acc", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "write", "(", "log_str", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "flush", "(", ")", "\n", "writer", ".", "add_scalar", "(", "\"precision\"", ",", "temp_acc", ",", "i", ")", "\n", "\n", "if", "early_stop_engine", ".", "is_stop_training", "(", "temp_acc", ")", ":", "\n", "                ", "config", "[", "\"out_file\"", "]", ".", "write", "(", "\"no improvement after {}, stop training at step {}\\n\"", ".", "format", "(", "\n", "config", "[", "\"early_stop_patience\"", "]", ",", "i", ")", ")", "\n", "# config[\"out_file\"].write(\"finish training! \\n\")", "\n", "break", "\n", "\n", "", "", "if", "(", "i", "+", "1", ")", "%", "config", "[", "\"snapshot_interval\"", "]", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "snapshot_obj", ",", "\n", "osp", ".", "join", "(", "config", "[", "\"output_path\"", "]", ",", "\"iter_{:05d}_model.pth.tar\"", ".", "format", "(", "i", ")", ")", ")", "\n", "\n", "\n", "## train one iter", "\n", "", "base_network", ".", "train", "(", "True", ")", "\n", "optimizer", "=", "lr_scheduler", "(", "param_lr", ",", "optimizer", ",", "i", ",", "**", "schedule_param", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "i", "%", "len_train_source", "==", "0", ":", "\n", "            ", "iter_source", "=", "iter", "(", "dset_loaders", "[", "\"source\"", "]", ")", "\n", "", "if", "i", "%", "len_train_target", "==", "0", ":", "\n", "            ", "iter_target", "=", "iter", "(", "dset_loaders", "[", "\"target\"", "]", ")", "\n", "", "inputs_source", ",", "labels_source", "=", "iter_source", ".", "next", "(", ")", "\n", "inputs_target", ",", "labels_target", "=", "iter_target", ".", "next", "(", ")", "\n", "if", "use_gpu", ":", "\n", "            ", "inputs_source", ",", "inputs_target", ",", "labels_source", "=", "Variable", "(", "inputs_source", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "inputs_target", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "labels_source", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "inputs_source", ",", "inputs_target", ",", "labels_source", "=", "Variable", "(", "inputs_source", ")", ",", "Variable", "(", "inputs_target", ")", ",", "Variable", "(", "labels_source", ")", "\n", "\n", "", "inputs", "=", "torch", ".", "cat", "(", "(", "inputs_source", ",", "inputs_target", ")", ",", "dim", "=", "0", ")", "\n", "source_batch_size", "=", "inputs_source", ".", "size", "(", "0", ")", "\n", "\n", "if", "config", "[", "'loss'", "]", "[", "'ly_type'", "]", "==", "'cosine'", ":", "\n", "            ", "features", ",", "logits", "=", "base_network", "(", "inputs", ")", "\n", "source_logits", "=", "logits", ".", "narrow", "(", "0", ",", "0", ",", "source_batch_size", ")", "\n", "", "elif", "config", "[", "'loss'", "]", "[", "'ly_type'", "]", "==", "'euclidean'", ":", "\n", "            ", "features", ",", "_", "=", "base_network", "(", "inputs", ")", "\n", "logits", "=", "-", "1.0", "*", "loss", ".", "distance_to_centroids", "(", "features", ",", "center_criterion", ".", "centers", ".", "detach", "(", ")", ")", "\n", "source_logits", "=", "logits", ".", "narrow", "(", "0", ",", "0", ",", "source_batch_size", ")", "\n", "\n", "", "ad_net", ".", "train", "(", "True", ")", "\n", "weight_ad", "=", "torch", ".", "ones", "(", "inputs", ".", "size", "(", "0", ")", ")", "\n", "transfer_loss", "=", "transfer_criterion", "(", "features", ",", "ad_net", ",", "gradient_reverse_layer", ",", "weight_ad", ",", "use_gpu", ")", "\n", "ad_out", ",", "_", "=", "ad_net", "(", "features", ".", "detach", "(", ")", ")", "\n", "ad_acc", ",", "source_acc_ad", ",", "target_acc_ad", "=", "domain_cls_accuracy", "(", "ad_out", ")", "\n", "\n", "# source domain classification task loss", "\n", "classifier_loss", "=", "class_criterion", "(", "source_logits", ",", "labels_source", ")", "\n", "# fisher loss on labeled source domain", "\n", "fisher_loss", ",", "fisher_intra_loss", ",", "fisher_inter_loss", ",", "center_grad", "=", "center_criterion", "(", "features", ".", "narrow", "(", "0", ",", "0", ",", "int", "(", "inputs", ".", "size", "(", "0", ")", "/", "2", ")", ")", ",", "labels_source", ",", "inter_class", "=", "config", "[", "\"loss\"", "]", "[", "\"inter_type\"", "]", ",", "\n", "intra_loss_weight", "=", "loss_params", "[", "\"intra_loss_coef\"", "]", ",", "inter_loss_weight", "=", "loss_params", "[", "\"inter_loss_coef\"", "]", ")", "\n", "# entropy minimization loss", "\n", "em_loss", "=", "loss", ".", "EntropyLoss", "(", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "logits", ")", ")", "\n", "\n", "# final loss", "\n", "total_loss", "=", "loss_params", "[", "\"trade_off\"", "]", "*", "transfer_loss", "+", "fisher_loss", "+", "loss_params", "[", "\"em_loss_coef\"", "]", "*", "em_loss", "+", "classifier_loss", "\n", "\n", "total_loss", ".", "backward", "(", ")", "\n", "if", "center_grad", "is", "not", "None", ":", "\n", "# clear mmc_loss", "\n", "            ", "center_criterion", ".", "centers", ".", "grad", ".", "zero_", "(", ")", "\n", "# Manually assign centers gradients other than using autograd", "\n", "center_criterion", ".", "centers", ".", "backward", "(", "center_grad", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "i", "%", "config", "[", "\"log_iter\"", "]", "==", "0", ":", "\n", "            ", "config", "[", "'out_file'", "]", ".", "write", "(", "'iter {}: total loss={:0.4f}, transfer loss={:0.4f}, cls loss={:0.4f}, '", "\n", "'em loss={:0.4f}, '", "\n", "'mmc loss={:0.4f}, intra loss={:0.4f}, inter loss={:0.4f}, '", "\n", "'ad acc={:0.4f}, source_acc={:0.4f}, target_acc={:0.4f}\\n'", ".", "format", "(", "\n", "i", ",", "total_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "transfer_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "classifier_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "\n", "em_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "\n", "fisher_loss", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "fisher_intra_loss", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "fisher_inter_loss", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "\n", "ad_acc", ",", "source_acc_ad", ",", "target_acc_ad", ",", "\n", ")", ")", "\n", "\n", "config", "[", "'out_file'", "]", ".", "flush", "(", ")", "\n", "writer", ".", "add_scalar", "(", "\"total_loss\"", ",", "total_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "\"cls_loss\"", ",", "classifier_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "\"transfer_loss\"", ",", "transfer_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "\"ad_acc\"", ",", "ad_acc", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "\"d_loss/total\"", ",", "fisher_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "\"d_loss/intra\"", ",", "fisher_intra_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "\"d_loss/inter\"", ",", "fisher_inter_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "i", ")", "\n", "\n", "", "", "return", "best_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.AdversarialLayer.__init__": [[11, 17], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "high_value", "=", "1.0", ",", "max_iter_value", "=", "10000.0", ")", ":", "\n", "    ", "self", ".", "iter_num", "=", "0", "\n", "self", ".", "alpha", "=", "10", "\n", "self", ".", "low", "=", "0.0", "\n", "self", ".", "high", "=", "high_value", "\n", "self", ".", "max_iter", "=", "max_iter_value", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.AdversarialLayer.forward": [[18, 22], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "self", ".", "iter_num", "+=", "1", "\n", "output", "=", "input", "*", "1.0", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.AdversarialLayer.backward": [[23, 26], ["numpy.float", "numpy.exp"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradOutput", ")", ":", "\n", "    ", "self", ".", "coeff", "=", "np", ".", "float", "(", "2.0", "*", "(", "self", ".", "high", "-", "self", ".", "low", ")", "/", "(", "1.0", "+", "np", ".", "exp", "(", "-", "self", ".", "alpha", "*", "self", ".", "iter_num", "/", "self", ".", "max_iter", ")", ")", "-", "(", "self", ".", "high", "-", "self", ".", "low", ")", "+", "self", ".", "low", ")", "\n", "return", "-", "self", ".", "coeff", "*", "gradOutput", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.SilenceLayer.__init__": [[28, 30], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "pass", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.SilenceLayer.forward": [[30, 32], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "return", "input", "*", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.SilenceLayer.backward": [[33, 35], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradOutput", ")", ":", "\n", "    ", "return", "0", "*", "gradOutput", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.AlexNetFc.__init__": [[39, 67], ["torch.Module.__init__", "torchvision.models.alexnet", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "network.AlexNetFc.classifier.add_module", "torch.Linear", "torch.Linear", "torch.Linear", "network.AlexNetFc.bottleneck.weight.data.normal_", "network.AlexNetFc.bottleneck.bias.data.fill_", "torch.Linear", "torch.Linear", "torch.Linear", "network.AlexNetFc.fc.weight.data.normal_", "network.AlexNetFc.fc.bias.data.fill_", "torch.Linear", "torch.Linear", "torch.Linear", "network.AlexNetFc.fc.weight.data.normal_", "network.AlexNetFc.fc.bias.data.fill_", "str"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.PlaceCrop.__init__"], ["  ", "def", "__init__", "(", "self", ",", "use_bottleneck", "=", "True", ",", "bottleneck_dim", "=", "256", ",", "new_cls", "=", "False", ",", "class_num", "=", "1000", ")", ":", "\n", "    ", "super", "(", "AlexNetFc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model_alexnet", "=", "models", ".", "alexnet", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "features", "=", "model_alexnet", ".", "features", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "      ", "self", ".", "classifier", ".", "add_module", "(", "\"classifier\"", "+", "str", "(", "i", ")", ",", "model_alexnet", ".", "classifier", "[", "i", "]", ")", "\n", "", "self", ".", "feature_layers", "=", "nn", ".", "Sequential", "(", "self", ".", "features", ",", "self", ".", "classifier", ")", "\n", "\n", "self", ".", "use_bottleneck", "=", "use_bottleneck", "\n", "self", ".", "new_cls", "=", "new_cls", "\n", "if", "new_cls", ":", "\n", "        ", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "Linear", "(", "4096", ",", "bottleneck_dim", ")", "\n", "self", ".", "bottleneck", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.005", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "bottleneck_dim", ",", "class_num", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "__in_features", "=", "bottleneck_dim", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "4096", ",", "class_num", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "__in_features", "=", "4096", "\n", "", "", "else", ":", "\n", "        ", "self", ".", "fc", "=", "model_alexnet", ".", "classifier", "[", "6", "]", "\n", "self", ".", "__in_features", "=", "4096", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.AlexNetFc.forward": [[68, 76], ["network.AlexNetFc.features", "network.AlexNetFc.view", "network.AlexNetFc.classifier", "network.AlexNetFc.fc", "network.AlexNetFc.size", "network.AlexNetFc.bottleneck"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "if", "self", ".", "use_bottleneck", "and", "self", ".", "new_cls", ":", "\n", "        ", "x", "=", "self", ".", "bottleneck", "(", "x", ")", "\n", "", "y", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.AlexNetFc.output_num": [[77, 79], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.ResNetFc.__init__": [[84, 118], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "network.ResNetFc.bottleneck.weight.data.normal_", "network.ResNetFc.bottleneck.bias.data.fill_", "torch.Linear", "torch.Linear", "torch.Linear", "network.ResNetFc.fc.weight.data.normal_", "network.ResNetFc.fc.bias.data.fill_", "torch.Linear", "torch.Linear", "torch.Linear", "network.ResNetFc.fc.weight.data.normal_", "network.ResNetFc.fc.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.PlaceCrop.__init__"], ["  ", "def", "__init__", "(", "self", ",", "resnet_name", ",", "use_bottleneck", "=", "True", ",", "bottleneck_dim", "=", "256", ",", "new_cls", "=", "False", ",", "class_num", "=", "1000", ")", ":", "\n", "    ", "super", "(", "ResNetFc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model_resnet", "=", "resnet_dict", "[", "resnet_name", "]", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "conv1", "=", "model_resnet", ".", "conv1", "\n", "self", ".", "bn1", "=", "model_resnet", ".", "bn1", "\n", "self", ".", "relu", "=", "model_resnet", ".", "relu", "\n", "self", ".", "maxpool", "=", "model_resnet", ".", "maxpool", "\n", "self", ".", "layer1", "=", "model_resnet", ".", "layer1", "\n", "self", ".", "layer2", "=", "model_resnet", ".", "layer2", "\n", "self", ".", "layer3", "=", "model_resnet", ".", "layer3", "\n", "self", ".", "layer4", "=", "model_resnet", ".", "layer4", "\n", "self", ".", "avgpool", "=", "model_resnet", ".", "avgpool", "\n", "self", ".", "feature_layers", "=", "nn", ".", "Sequential", "(", "self", ".", "conv1", ",", "self", ".", "bn1", ",", "self", ".", "relu", ",", "self", ".", "maxpool", ",", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", ",", "self", ".", "layer4", ",", "self", ".", "avgpool", ")", "\n", "\n", "self", ".", "use_bottleneck", "=", "use_bottleneck", "\n", "self", ".", "new_cls", "=", "new_cls", "\n", "if", "new_cls", ":", "\n", "        ", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "Linear", "(", "model_resnet", ".", "fc", ".", "in_features", ",", "bottleneck_dim", ")", "\n", "self", ".", "bottleneck", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.005", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "bottleneck_dim", ",", "class_num", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "__in_features", "=", "bottleneck_dim", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "model_resnet", ".", "fc", ".", "in_features", ",", "class_num", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "__in_features", "=", "model_resnet", ".", "fc", ".", "in_features", "\n", "", "", "else", ":", "\n", "        ", "self", ".", "fc", "=", "model_resnet", ".", "fc", "\n", "self", ".", "__in_features", "=", "model_resnet", ".", "fc", ".", "in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.ResNetFc.forward": [[119, 126], ["network.ResNetFc.feature_layers", "network.ResNetFc.view", "network.ResNetFc.fc", "network.ResNetFc.size", "network.ResNetFc.bottleneck"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "feature_layers", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "self", ".", "use_bottleneck", "and", "self", ".", "new_cls", ":", "\n", "        ", "x", "=", "self", ".", "bottleneck", "(", "x", ")", "\n", "", "y", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.ResNetFc.output_num": [[127, 129], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.VGGFc.__init__": [[133, 161], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "network.VGGFc.classifier.add_module", "torch.Linear", "torch.Linear", "torch.Linear", "network.VGGFc.bottleneck.weight.data.normal_", "network.VGGFc.bottleneck.bias.data.fill_", "torch.Linear", "torch.Linear", "torch.Linear", "network.VGGFc.fc.weight.data.normal_", "network.VGGFc.fc.bias.data.fill_", "torch.Linear", "torch.Linear", "torch.Linear", "network.VGGFc.fc.weight.data.normal_", "network.VGGFc.fc.bias.data.fill_", "str"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.PlaceCrop.__init__"], ["  ", "def", "__init__", "(", "self", ",", "vgg_name", ",", "use_bottleneck", "=", "True", ",", "bottleneck_dim", "=", "256", ",", "new_cls", "=", "False", ",", "class_num", "=", "1000", ")", ":", "\n", "    ", "super", "(", "VGGFc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model_vgg", "=", "vgg_dict", "[", "vgg_name", "]", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "features", "=", "model_vgg", ".", "features", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "        ", "self", ".", "classifier", ".", "add_module", "(", "\"classifier\"", "+", "str", "(", "i", ")", ",", "model_vgg", ".", "classifier", "[", "i", "]", ")", "\n", "", "self", ".", "feature_layers", "=", "nn", ".", "Sequential", "(", "self", ".", "features", ",", "self", ".", "classifier", ")", "\n", "\n", "self", ".", "use_bottleneck", "=", "use_bottleneck", "\n", "self", ".", "new_cls", "=", "new_cls", "\n", "if", "new_cls", ":", "\n", "        ", "if", "self", ".", "use_bottleneck", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "Linear", "(", "4096", ",", "bottleneck_dim", ")", "\n", "self", ".", "bottleneck", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.005", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "bottleneck_dim", ",", "class_num", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "__in_features", "=", "bottleneck_dim", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "4096", ",", "class_num", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "__in_features", "=", "4096", "\n", "", "", "else", ":", "\n", "        ", "self", ".", "fc", "=", "model_vgg", ".", "classifier", "[", "6", "]", "\n", "self", ".", "__in_features", "=", "4096", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.VGGFc.forward": [[162, 170], ["network.VGGFc.features", "network.VGGFc.view", "network.VGGFc.classifier", "network.VGGFc.fc", "network.VGGFc.size", "network.VGGFc.bottleneck"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "25088", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "if", "self", ".", "use_bottleneck", "and", "self", ".", "new_cls", ":", "\n", "        ", "x", "=", "self", ".", "bottleneck", "(", "x", ")", "\n", "", "y", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.VGGFc.output_num": [[171, 173], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.AdversarialNetwork.__init__": [[176, 192], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "network.AdversarialNetwork.ad_layer1.weight.data.normal_", "network.AdversarialNetwork.ad_layer2.weight.data.normal_", "network.AdversarialNetwork.ad_layer3.weight.data.normal_", "network.AdversarialNetwork.ad_layer1.bias.data.fill_", "network.AdversarialNetwork.ad_layer2.bias.data.fill_", "network.AdversarialNetwork.ad_layer3.bias.data.fill_", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.PlaceCrop.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_feature", ")", ":", "\n", "    ", "super", "(", "AdversarialNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ad_layer1", "=", "nn", ".", "Linear", "(", "in_feature", ",", "1024", ")", "\n", "self", ".", "ad_layer2", "=", "nn", ".", "Linear", "(", "1024", ",", "1024", ")", "\n", "self", ".", "ad_layer3", "=", "nn", ".", "Linear", "(", "1024", ",", "1", ")", "\n", "self", ".", "ad_layer1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "ad_layer2", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "ad_layer3", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.3", ")", "\n", "self", ".", "ad_layer1", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "ad_layer2", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "ad_layer3", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.AdversarialNetwork.forward": [[193, 203], ["network.AdversarialNetwork.ad_layer1", "network.AdversarialNetwork.relu1", "network.AdversarialNetwork.dropout1", "network.AdversarialNetwork.ad_layer2", "network.AdversarialNetwork.relu2", "network.AdversarialNetwork.dropout2", "network.AdversarialNetwork.ad_layer3", "network.AdversarialNetwork.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "ad_layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "x", "=", "self", ".", "ad_layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "ad_features", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "x", "=", "self", ".", "ad_layer3", "(", "ad_features", ")", "\n", "y", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "return", "y", ",", "ad_features", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.AdversarialNetwork.ad_feature_dim": [[204, 206], ["None"], "methods", ["None"], ["", "def", "ad_feature_dim", "(", "self", ")", ":", "\n", "      ", "return", "1024", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.AdversarialNetwork.output_num": [[207, 209], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "    ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.SmallAdversarialNetwork.__init__": [[212, 223], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "network.SmallAdversarialNetwork.ad_layer1.weight.data.normal_", "network.SmallAdversarialNetwork.ad_layer2.weight.data.normal_", "network.SmallAdversarialNetwork.ad_layer1.bias.data.fill_", "network.SmallAdversarialNetwork.ad_layer2.bias.data.fill_", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.PlaceCrop.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_feature", ")", ":", "\n", "    ", "super", "(", "SmallAdversarialNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ad_layer1", "=", "nn", ".", "Linear", "(", "in_feature", ",", "256", ")", "\n", "self", ".", "ad_layer2", "=", "nn", ".", "Linear", "(", "256", ",", "1", ")", "\n", "self", ".", "ad_layer1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "ad_layer2", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "ad_layer1", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "ad_layer2", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.SmallAdversarialNetwork.forward": [[224, 231], ["network.SmallAdversarialNetwork.ad_layer1", "network.SmallAdversarialNetwork.relu1", "network.SmallAdversarialNetwork.dropout1", "network.SmallAdversarialNetwork.ad_layer2", "network.SmallAdversarialNetwork.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "ad_layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "x", "=", "self", ".", "ad_layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.SmallAdversarialNetwork.output_num": [[232, 234], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "    ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.LittleAdversarialNetwork.__init__": [[236, 243], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "network.LittleAdversarialNetwork.ad_layer1.weight.data.normal_", "network.LittleAdversarialNetwork.ad_layer1.bias.data.fill_", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.PlaceCrop.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_feature", ")", ":", "\n", "    ", "super", "(", "LittleAdversarialNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_feature", "=", "in_feature", "\n", "self", ".", "ad_layer1", "=", "nn", ".", "Linear", "(", "in_feature", ",", "2", ")", "\n", "self", ".", "ad_layer1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "ad_layer1", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.LittleAdversarialNetwork.forward": [[244, 248], ["network.LittleAdversarialNetwork.ad_layer1", "network.LittleAdversarialNetwork.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "ad_features", "=", "self", ".", "ad_layer1", "(", "x", ")", "\n", "y", "=", "self", ".", "softmax", "(", "ad_features", ")", "\n", "return", "y", ",", "ad_features", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.LittleAdversarialNetwork.ad_feature_dim": [[249, 251], ["None"], "methods", ["None"], ["", "def", "ad_feature_dim", "(", ")", ":", "\n", "    ", "return", "self", ".", "in_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.LittleAdversarialNetwork.output_num": [[252, 254], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "    ", "return", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.clones": [[256, 259], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "", "def", "clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "\"Produce N identical layers.\"", "\n", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "_", "in", "range", "(", "N", ")", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.train_feature.image_classification_test": [[32, 84], ["torch.max", "torch.max", "torch.max", "torch.max", "accuracy.item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "float", "range", "iter", "range", "iter", "len", "range", "sum", "len", "iter.next", "model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat.size", "range", "iter_test[].next", "range", "torch.autograd.Variable", "range", "torch.autograd.Variable", "model", "sum.append", "sum.data.float", "torch.autograd.Variable.data.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "sum.data.float", "torch.autograd.Variable.data.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "torch.autograd.Variable", "torch.autograd.Variable.cuda", "torch.autograd.Variable", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze().float", "inputs[].cuda", "torch.Softmax", "sum.data.float", "torch.autograd.Variable.data.float", "sum.data.float", "torch.autograd.Variable.data.float", "str", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "function", ["None"], ["def", "image_classification_test", "(", "loader", ",", "model", ",", "test_10crop", "=", "True", ",", "gpu", "=", "True", ",", "iter_num", "=", "-", "1", ")", ":", "\n", "    ", "start_test", "=", "True", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "test_10crop", ":", "\n", "            ", "iter_test", "=", "[", "iter", "(", "loader", "[", "'test'", "+", "str", "(", "i", ")", "]", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "loader", "[", "'test0'", "]", ")", ")", ":", "\n", "                ", "data", "=", "[", "iter_test", "[", "j", "]", ".", "next", "(", ")", "for", "j", "in", "range", "(", "10", ")", "]", "\n", "inputs", "=", "[", "data", "[", "j", "]", "[", "0", "]", "for", "j", "in", "range", "(", "10", ")", "]", "\n", "labels", "=", "data", "[", "0", "]", "[", "1", "]", "\n", "if", "gpu", ":", "\n", "                    ", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                        ", "inputs", "[", "j", "]", "=", "Variable", "(", "inputs", "[", "j", "]", ".", "cuda", "(", ")", ")", "\n", "", "labels", "=", "Variable", "(", "labels", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                        ", "inputs", "[", "j", "]", "=", "Variable", "(", "inputs", "[", "j", "]", ")", "\n", "", "labels", "=", "Variable", "(", "labels", ")", "\n", "", "outputs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                    ", "_", ",", "predict_out", "=", "model", "(", "inputs", "[", "j", "]", ")", "\n", "outputs", ".", "append", "(", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "predict_out", ")", ")", "\n", "", "outputs", "=", "sum", "(", "outputs", ")", "\n", "if", "start_test", ":", "\n", "                    ", "all_output", "=", "outputs", ".", "data", ".", "float", "(", ")", "\n", "all_label", "=", "labels", ".", "data", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "                    ", "all_output", "=", "torch", ".", "cat", "(", "(", "all_output", ",", "outputs", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "(", "all_label", ",", "labels", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "else", ":", "\n", "            ", "iter_test", "=", "iter", "(", "loader", "[", "\"test\"", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "loader", "[", "'test'", "]", ")", ")", ":", "\n", "                ", "data", "=", "iter_test", ".", "next", "(", ")", "\n", "inputs", "=", "data", "[", "0", "]", "\n", "labels", "=", "data", "[", "1", "]", "\n", "if", "gpu", ":", "\n", "                    ", "inputs", "=", "Variable", "(", "inputs", ".", "cuda", "(", ")", ")", "\n", "labels", "=", "Variable", "(", "labels", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "inputs", "=", "Variable", "(", "inputs", ")", "\n", "labels", "=", "Variable", "(", "labels", ")", "\n", "", "_", ",", "outputs", "=", "model", "(", "inputs", ")", "\n", "if", "start_test", ":", "\n", "                    ", "all_output", "=", "outputs", ".", "data", ".", "float", "(", ")", "\n", "all_label", "=", "labels", ".", "data", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "                    ", "all_output", "=", "torch", ".", "cat", "(", "(", "all_output", ",", "outputs", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "(", "all_label", ",", "labels", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "", "_", ",", "predict", "=", "torch", ".", "max", "(", "all_output", ",", "1", ")", "\n", "accuracy", "=", "torch", ".", "sum", "(", "torch", ".", "squeeze", "(", "predict", ")", ".", "float", "(", ")", "==", "all_label", ")", ".", "float", "(", ")", "/", "float", "(", "all_label", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "return", "accuracy", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.train_feature.train": [[86, 318], ["tensorboardX.SummaryWriter", "utils.EarlyStopping", "pre_process.image_train", "pre_process.image_train", "torch.CrossEntropyLoss", "data_list.ImageList", "torch.DataLoader", "data_list.ImageList", "torch.DataLoader", "config[].write", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "parameter_list.append", "range", "pre_process.image_test_10crop", "pre_process.image_test", "data_list.stratify_sampling", "data_list.stratify_sampling", "range", "data_list.ImageList", "torch.DataLoader", "data_list.ImageList", "MyDataLoader", "base_network.cuda.cuda", "numpy.array", "class_weight.cuda.cuda", "param_lr.append", "len", "len", "base_network.cuda.train", "lr_scheduler", "lr_scheduler.zero_grad", "iter.next", "iter.next", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs_source.size", "transfer_criterion", "nn.CrossEntropyLoss.", "center_criterion", "loss.EntropyLoss", "total_loss.backward", "lr_scheduler.step", "open().readlines", "open().readlines", "data_list.ImageList", "torch.DataLoader", "data_list.ImageList", "torch.DataLoader", "data_list.stratify_sampling", "data_list.stratify_sampling", "len", "len", "center_criterion.parameters", "base_network.cuda.train", "center_criterion.state_dict", "config[].write", "config[].flush", "tensorboardX.SummaryWriter.add_scalar", "utils.EarlyStopping.is_stop_training", "torch.save", "torch.save", "torch.save", "torch.save", "iter", "iter", "base_network.cuda.", "logits.narrow", "features.narrow", "center_criterion.centers.grad.zero_", "center_criterion.centers.backward", "config[].write", "config[].flush", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "data_list.stratify_sampling", "data_list.stratify_sampling", "open().readlines", "open().readlines", "base_network.cuda.parameters", "train_feature.image_classification_test", "base_network.cuda.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "config[].write", "os.join", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "base_network.cuda.", "logits.narrow", "int", "torch.Softmax", "total_loss.data.cpu().float().item", "class_criterion.data.cpu().float().item", "transfer_criterion.data.cpu().float().item", "fisher_loss.data.cpu().float().item", "fisher_intra_loss.data.cpu().float().item", "fisher_inter_loss.data.cpu().float().item", "open", "open", "open().readlines", "open().readlines", "base_network.cuda.feature_layers.parameters", "base_network.cuda.bottleneck.parameters", "base_network.cuda.fc.parameters", "base_network.cuda.feature_layers.parameters", "base_network.cuda.fc.parameters", "utils.distance_classification_test", "ValueError", "os.join", "loss.distance_to_centroids", "transfer_criterion.data.cpu().float().item", "class_criterion.data.cpu().float().item", "loss.EntropyLoss.data.cpu().float().item", "fisher_loss.cpu().float().item", "fisher_intra_loss.cpu().float().item", "fisher_inter_loss.cpu().float().item", "str", "str", "str", "str", "open", "open", "center_criterion.centers.detach", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "center_criterion.centers.detach", "torch.cat.size", "total_loss.data.cpu().float", "class_criterion.data.cpu().float", "transfer_criterion.data.cpu().float", "fisher_loss.data.cpu().float", "fisher_intra_loss.data.cpu().float", "fisher_inter_loss.data.cpu().float", "open", "str", "open", "str", "transfer_criterion.data.cpu().float", "class_criterion.data.cpu().float", "loss.EntropyLoss.data.cpu().float", "fisher_loss.cpu().float", "fisher_intra_loss.cpu().float", "fisher_inter_loss.cpu().float", "str", "str", "total_loss.data.cpu", "class_criterion.data.cpu", "transfer_criterion.data.cpu", "fisher_loss.data.cpu", "fisher_intra_loss.data.cpu", "fisher_inter_loss.data.cpu", "transfer_criterion.data.cpu", "class_criterion.data.cpu", "loss.EntropyLoss.data.cpu", "fisher_loss.cpu", "fisher_intra_loss.cpu", "fisher_inter_loss.cpu"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.image_train", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.image_train", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.image_test_10crop", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.image_test", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.stratify_sampling", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.stratify_sampling", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.train_feature.train", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.loss.EntropyLoss", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.SilenceLayer.backward", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.stratify_sampling", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.stratify_sampling", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.train_feature.train", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.EarlyStopping.is_stop_training", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.network.SilenceLayer.backward", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.stratify_sampling", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.stratify_sampling", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.eval_da.image_classification_test", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.distance_classification_test", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.distance_to_centroids"], ["", "def", "train", "(", "config", ")", ":", "\n", "## set up summary writer", "\n", "    ", "writer", "=", "SummaryWriter", "(", "config", "[", "'output_path'", "]", ")", "\n", "\n", "# set up early stop", "\n", "early_stop_engine", "=", "EarlyStopping", "(", "config", "[", "\"early_stop_patience\"", "]", ")", "\n", "\n", "## set pre-process", "\n", "prep_dict", "=", "{", "}", "\n", "prep_config", "=", "config", "[", "\"prep\"", "]", "\n", "prep_dict", "[", "\"source\"", "]", "=", "prep", ".", "image_train", "(", "resize_size", "=", "prep_config", "[", "\"resize_size\"", "]", ",", "crop_size", "=", "prep_config", "[", "\"crop_size\"", "]", ")", "\n", "prep_dict", "[", "\"target\"", "]", "=", "prep", ".", "image_train", "(", "resize_size", "=", "prep_config", "[", "\"resize_size\"", "]", ",", "crop_size", "=", "prep_config", "[", "\"crop_size\"", "]", ")", "\n", "if", "prep_config", "[", "\"test_10crop\"", "]", ":", "\n", "        ", "prep_dict", "[", "\"test\"", "]", "=", "prep", ".", "image_test_10crop", "(", "resize_size", "=", "prep_config", "[", "\"resize_size\"", "]", ",", "crop_size", "=", "prep_config", "[", "\"crop_size\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "prep_dict", "[", "\"test\"", "]", "=", "prep", ".", "image_test", "(", "resize_size", "=", "prep_config", "[", "\"resize_size\"", "]", ",", "crop_size", "=", "prep_config", "[", "\"crop_size\"", "]", ")", "\n", "\n", "## set loss", "\n", "", "class_num", "=", "config", "[", "\"network\"", "]", "[", "\"params\"", "]", "[", "\"class_num\"", "]", "\n", "\n", "class_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "transfer_criterion", "=", "config", "[", "\"loss\"", "]", "[", "\"name\"", "]", "\n", "center_criterion", "=", "config", "[", "\"loss\"", "]", "[", "\"discriminant_loss\"", "]", "(", "num_classes", "=", "class_num", ",", "\n", "feat_dim", "=", "config", "[", "\"network\"", "]", "[", "\"params\"", "]", "[", "\"bottleneck_dim\"", "]", ")", "\n", "loss_params", "=", "config", "[", "\"loss\"", "]", "\n", "\n", "## prepare data", "\n", "dsets", "=", "{", "}", "\n", "dset_loaders", "=", "{", "}", "\n", "data_config", "=", "config", "[", "\"data\"", "]", "\n", "dsets", "[", "\"source\"", "]", "=", "ImageList", "(", "stratify_sampling", "(", "open", "(", "data_config", "[", "\"source\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "ratio", "=", "prep_config", "[", "\"source_size\"", "]", ")", ",", "transform", "=", "prep_dict", "[", "\"source\"", "]", ")", "\n", "dset_loaders", "[", "\"source\"", "]", "=", "util_data", ".", "DataLoader", "(", "dsets", "[", "\"source\"", "]", ",", "batch_size", "=", "data_config", "[", "\"source\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "dsets", "[", "\"target\"", "]", "=", "ImageList", "(", "stratify_sampling", "(", "open", "(", "data_config", "[", "\"target\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "ratio", "=", "prep_config", "[", "'target_size'", "]", ")", ",", "transform", "=", "prep_dict", "[", "\"target\"", "]", ")", "\n", "dset_loaders", "[", "\"target\"", "]", "=", "util_data", ".", "DataLoader", "(", "dsets", "[", "\"target\"", "]", ",", "batch_size", "=", "data_config", "[", "\"target\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "\n", "if", "prep_config", "[", "\"test_10crop\"", "]", ":", "\n", "        ", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "dsets", "[", "\"test\"", "+", "str", "(", "i", ")", "]", "=", "ImageList", "(", "stratify_sampling", "(", "open", "(", "data_config", "[", "\"test\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "ratio", "=", "prep_config", "[", "'target_size'", "]", ")", ",", "transform", "=", "prep_dict", "[", "\"test\"", "]", "[", "\"val\"", "+", "str", "(", "i", ")", "]", ")", "\n", "dset_loaders", "[", "\"test\"", "+", "str", "(", "i", ")", "]", "=", "util_data", ".", "DataLoader", "(", "dsets", "[", "\"test\"", "+", "str", "(", "i", ")", "]", ",", "batch_size", "=", "data_config", "[", "\"test\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "\n", "dsets", "[", "\"target\"", "+", "str", "(", "i", ")", "]", "=", "ImageList", "(", "stratify_sampling", "(", "open", "(", "data_config", "[", "\"target\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "ratio", "=", "prep_config", "[", "'target_size'", "]", ")", ",", "transform", "=", "prep_dict", "[", "\"test\"", "]", "[", "\"val\"", "+", "str", "(", "i", ")", "]", ")", "\n", "dset_loaders", "[", "\"target\"", "+", "str", "(", "i", ")", "]", "=", "util_data", ".", "DataLoader", "(", "dsets", "[", "\"target\"", "+", "str", "(", "i", ")", "]", ",", "batch_size", "=", "data_config", "[", "\"test\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "dsets", "[", "\"test\"", "]", "=", "ImageList", "(", "stratify_sampling", "(", "open", "(", "data_config", "[", "\"test\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "ratio", "=", "prep_config", "[", "'target_size'", "]", ")", ",", "transform", "=", "prep_dict", "[", "\"test\"", "]", ")", "\n", "dset_loaders", "[", "\"test\"", "]", "=", "util_data", ".", "DataLoader", "(", "dsets", "[", "\"test\"", "]", ",", "batch_size", "=", "data_config", "[", "\"test\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "\n", "dsets", "[", "\"target_test\"", "]", "=", "ImageList", "(", "stratify_sampling", "(", "open", "(", "data_config", "[", "\"target\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "ratio", "=", "prep_config", "[", "'target_size'", "]", ")", ",", "transform", "=", "prep_dict", "[", "\"test\"", "]", ")", "\n", "dset_loaders", "[", "\"target_test\"", "]", "=", "MyDataLoader", "(", "dsets", "[", "\"target_test\"", "]", ",", "batch_size", "=", "data_config", "[", "\"test\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "", "config", "[", "'out_file'", "]", ".", "write", "(", "\"dataset sizes: source={}, target={}\\n\"", ".", "format", "(", "\n", "len", "(", "dsets", "[", "\"source\"", "]", ")", ",", "len", "(", "dsets", "[", "\"target\"", "]", ")", ")", ")", "\n", "\n", "## set base network", "\n", "net_config", "=", "config", "[", "\"network\"", "]", "\n", "base_network", "=", "net_config", "[", "\"name\"", "]", "(", "**", "net_config", "[", "\"params\"", "]", ")", "\n", "\n", "\n", "use_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_gpu", ":", "\n", "        ", "base_network", "=", "base_network", ".", "cuda", "(", ")", "\n", "\n", "## collect parameters", "\n", "", "if", "net_config", "[", "\"params\"", "]", "[", "\"new_cls\"", "]", ":", "\n", "        ", "if", "net_config", "[", "\"params\"", "]", "[", "\"use_bottleneck\"", "]", ":", "\n", "            ", "parameter_list", "=", "[", "{", "\"params\"", ":", "base_network", ".", "feature_layers", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "1", ",", "'decay_mult'", ":", "2", "}", ",", "{", "\"params\"", ":", "base_network", ".", "bottleneck", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", ",", "{", "\"params\"", ":", "base_network", ".", "fc", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", "]", "\n", "", "else", ":", "\n", "            ", "parameter_list", "=", "[", "{", "\"params\"", ":", "base_network", ".", "feature_layers", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "1", ",", "'decay_mult'", ":", "2", "}", ",", "{", "\"params\"", ":", "base_network", ".", "fc", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", "]", "\n", "", "", "else", ":", "\n", "        ", "parameter_list", "=", "[", "{", "\"params\"", ":", "base_network", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "1", ",", "'decay_mult'", ":", "2", "}", "]", "\n", "\n", "## add additional network for some methods", "\n", "", "class_weight", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "1.0", "]", "*", "class_num", ")", ")", "\n", "if", "use_gpu", ":", "\n", "        ", "class_weight", "=", "class_weight", ".", "cuda", "(", ")", "\n", "", "parameter_list", ".", "append", "(", "{", "\"params\"", ":", "center_criterion", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "1", "}", ")", "\n", "\n", "## set optimizer", "\n", "optimizer_config", "=", "config", "[", "\"optimizer\"", "]", "\n", "optimizer", "=", "optim_dict", "[", "optimizer_config", "[", "\"type\"", "]", "]", "(", "parameter_list", ",", "**", "(", "optimizer_config", "[", "\"optim_params\"", "]", ")", ")", "\n", "param_lr", "=", "[", "]", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_lr", ".", "append", "(", "param_group", "[", "\"lr\"", "]", ")", "\n", "", "schedule_param", "=", "optimizer_config", "[", "\"lr_param\"", "]", "\n", "lr_scheduler", "=", "lr_schedule", ".", "schedule_dict", "[", "optimizer_config", "[", "\"lr_type\"", "]", "]", "\n", "\n", "\n", "## train   ", "\n", "len_train_source", "=", "len", "(", "dset_loaders", "[", "\"source\"", "]", ")", "-", "1", "\n", "len_train_target", "=", "len", "(", "dset_loaders", "[", "\"target\"", "]", ")", "-", "1", "\n", "transfer_loss_value", "=", "classifier_loss_value", "=", "total_loss_value", "=", "0.0", "\n", "best_acc", "=", "0.0", "\n", "for", "i", "in", "range", "(", "config", "[", "\"num_iterations\"", "]", ")", ":", "\n", "        ", "if", "i", "%", "config", "[", "\"test_interval\"", "]", "==", "0", ":", "\n", "            ", "base_network", ".", "train", "(", "False", ")", "\n", "if", "config", "[", "'loss'", "]", "[", "'ly_type'", "]", "==", "\"cosine\"", ":", "\n", "                ", "temp_acc", "=", "image_classification_test", "(", "dset_loaders", ",", "base_network", ",", "test_10crop", "=", "prep_config", "[", "\"test_10crop\"", "]", ",", "gpu", "=", "use_gpu", ")", "\n", "", "elif", "config", "[", "'loss'", "]", "[", "'ly_type'", "]", "==", "\"euclidean\"", ":", "\n", "                ", "temp_acc", ",", "_", "=", "distance_classification_test", "(", "dset_loaders", ",", "base_network", ",", "center_criterion", ".", "centers", ".", "detach", "(", ")", ",", "test_10crop", "=", "prep_config", "[", "\"test_10crop\"", "]", ",", "gpu", "=", "use_gpu", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"no test method for cls loss: {}\"", ".", "format", "(", "config", "[", "'loss'", "]", "[", "'ly_type'", "]", ")", ")", "\n", "\n", "", "snapshot_obj", "=", "{", "'step'", ":", "i", ",", "\n", "\"base_network\"", ":", "base_network", ".", "state_dict", "(", ")", ",", "\n", "'precision'", ":", "temp_acc", ",", "\n", "}", "\n", "snapshot_obj", "[", "'center_criterion'", "]", "=", "center_criterion", ".", "state_dict", "(", ")", "\n", "if", "temp_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "temp_acc", "\n", "# save best model", "\n", "torch", ".", "save", "(", "snapshot_obj", ",", "\n", "osp", ".", "join", "(", "config", "[", "\"output_path\"", "]", ",", "\"best_model.pth.tar\"", ")", ")", "\n", "", "log_str", "=", "\"iter: {:05d}, {} precision: {:.5f}\\n\"", ".", "format", "(", "i", ",", "config", "[", "'loss'", "]", "[", "'ly_type'", "]", ",", "temp_acc", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "write", "(", "log_str", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "flush", "(", ")", "\n", "writer", ".", "add_scalar", "(", "\"precision\"", ",", "temp_acc", ",", "i", ")", "\n", "\n", "if", "early_stop_engine", ".", "is_stop_training", "(", "temp_acc", ")", ":", "\n", "                ", "config", "[", "\"out_file\"", "]", ".", "write", "(", "\"no improvement after {}, stop training at step {}\\n\"", ".", "format", "(", "\n", "config", "[", "\"early_stop_patience\"", "]", ",", "i", ")", ")", "\n", "# config[\"out_file\"].write(\"finish training! \\n\")", "\n", "break", "\n", "\n", "", "", "if", "(", "i", "+", "1", ")", "%", "config", "[", "\"snapshot_interval\"", "]", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "snapshot_obj", ",", "\n", "osp", ".", "join", "(", "config", "[", "\"output_path\"", "]", ",", "\"iter_{:05d}_model.pth.tar\"", ".", "format", "(", "i", ")", ")", ")", "\n", "\n", "\n", "## train one iter", "\n", "", "base_network", ".", "train", "(", "True", ")", "\n", "optimizer", "=", "lr_scheduler", "(", "param_lr", ",", "optimizer", ",", "i", ",", "**", "schedule_param", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "i", "%", "len_train_source", "==", "0", ":", "\n", "            ", "iter_source", "=", "iter", "(", "dset_loaders", "[", "\"source\"", "]", ")", "\n", "", "if", "i", "%", "len_train_target", "==", "0", ":", "\n", "            ", "iter_target", "=", "iter", "(", "dset_loaders", "[", "\"target\"", "]", ")", "\n", "", "inputs_source", ",", "labels_source", "=", "iter_source", ".", "next", "(", ")", "\n", "inputs_target", ",", "labels_target", "=", "iter_target", ".", "next", "(", ")", "\n", "if", "use_gpu", ":", "\n", "            ", "inputs_source", ",", "inputs_target", ",", "labels_source", "=", "Variable", "(", "inputs_source", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "inputs_target", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "labels_source", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "inputs_source", ",", "inputs_target", ",", "labels_source", "=", "Variable", "(", "inputs_source", ")", ",", "Variable", "(", "inputs_target", ")", ",", "Variable", "(", "labels_source", ")", "\n", "\n", "", "inputs", "=", "torch", ".", "cat", "(", "(", "inputs_source", ",", "inputs_target", ")", ",", "dim", "=", "0", ")", "\n", "source_batch_size", "=", "inputs_source", ".", "size", "(", "0", ")", "\n", "\n", "if", "config", "[", "'loss'", "]", "[", "'ly_type'", "]", "==", "'cosine'", ":", "\n", "            ", "features", ",", "logits", "=", "base_network", "(", "inputs", ")", "\n", "source_logits", "=", "logits", ".", "narrow", "(", "0", ",", "0", ",", "source_batch_size", ")", "\n", "", "elif", "config", "[", "'loss'", "]", "[", "'ly_type'", "]", "==", "'euclidean'", ":", "\n", "            ", "features", ",", "_", "=", "base_network", "(", "inputs", ")", "\n", "logits", "=", "-", "1.0", "*", "loss", ".", "distance_to_centroids", "(", "features", ",", "center_criterion", ".", "centers", ".", "detach", "(", ")", ")", "\n", "source_logits", "=", "logits", ".", "narrow", "(", "0", ",", "0", ",", "source_batch_size", ")", "\n", "\n", "", "transfer_loss", "=", "transfer_criterion", "(", "features", "[", ":", "source_batch_size", "]", ",", "features", "[", "source_batch_size", ":", "]", ")", "\n", "\n", "# source domain classification task loss", "\n", "classifier_loss", "=", "class_criterion", "(", "source_logits", ",", "labels_source", ")", "\n", "# fisher loss on labeled source domain", "\n", "fisher_loss", ",", "fisher_intra_loss", ",", "fisher_inter_loss", ",", "center_grad", "=", "center_criterion", "(", "features", ".", "narrow", "(", "0", ",", "0", ",", "int", "(", "inputs", ".", "size", "(", "0", ")", "/", "2", ")", ")", ",", "labels_source", ",", "inter_class", "=", "loss_params", "[", "\"inter_type\"", "]", ",", "\n", "intra_loss_weight", "=", "loss_params", "[", "\"intra_loss_coef\"", "]", ",", "inter_loss_weight", "=", "loss_params", "[", "\"inter_loss_coef\"", "]", ")", "\n", "# entropy minimization loss", "\n", "em_loss", "=", "loss", ".", "EntropyLoss", "(", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "logits", ")", ")", "\n", "\n", "# final loss", "\n", "total_loss", "=", "loss_params", "[", "\"trade_off\"", "]", "*", "transfer_loss", "+", "fisher_loss", "+", "loss_params", "[", "\"em_loss_coef\"", "]", "*", "em_loss", "+", "classifier_loss", "\n", "total_loss", ".", "backward", "(", ")", "\n", "\n", "if", "center_grad", "is", "not", "None", ":", "\n", "# clear mmc_loss", "\n", "            ", "center_criterion", ".", "centers", ".", "grad", ".", "zero_", "(", ")", "\n", "# Manually assign centers gradients other than using autograd", "\n", "center_criterion", ".", "centers", ".", "backward", "(", "center_grad", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "i", "%", "config", "[", "\"log_iter\"", "]", "==", "0", ":", "\n", "            ", "config", "[", "'out_file'", "]", ".", "write", "(", "'iter {} transfer loss={:0.4f}, cls loss={:0.4f}, '", "\n", "'em loss={:0.4f}, '", "\n", "'mmc loss={:0.4f}, intra loss={:0.4f}, inter loss={:0.4f}\\n'", ".", "format", "(", "\n", "i", ",", "transfer_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "classifier_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "\n", "em_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "\n", "fisher_loss", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "fisher_intra_loss", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "fisher_inter_loss", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "\n", ")", ")", "\n", "config", "[", "'out_file'", "]", ".", "flush", "(", ")", "\n", "writer", ".", "add_scalar", "(", "\"total_loss\"", ",", "total_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "\"cls_loss\"", ",", "classifier_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "\"transfer_loss\"", ",", "transfer_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "\"d_loss/total\"", ",", "fisher_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "\"d_loss/intra\"", ",", "fisher_intra_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "\"d_loss/inter\"", ",", "fisher_inter_loss", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "i", ")", "\n", "\n", "", "", "return", "best_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.loss.FisherTD.__init__": [[126, 138], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.PlaceCrop.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "feat_dim", "=", "2", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "FisherTD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "self", ".", "centers", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "\n", "self", ".", "num_classes", ",", "self", ".", "feat_dim", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "centers", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "self", ".", "num_classes", ",", "self", ".", "feat_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.loss.FisherTD.forward": [[139, 182], ["x.size", "distmat.addmm_", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "labels.unsqueeze().expand().eq", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "loss.FisherTD.centers.t", "classes.cuda.cuda.cuda", "classes.cuda.cuda.expand", "value.clamp.clamp.clamp", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "ValueError", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "labels.unsqueeze().expand", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "labels.unsqueeze", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "labels", ",", "inter_class", "=", "\"global\"", ",", "intra_loss_weight", "=", "1.0", ",", "inter_loss_weight", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: feature matrix with shape (batch_size, feat_dim).\n            labels: ground truth labels with shape (batch_size).\n            inter_class: str, one of [\"global\", \"sample\"]. \n                         if inter_class==\"global\", calculate intra class distance by distances of centers and global center. \n                         if inter_class==\"sample\", calculate intra class distance by distances of samples and centers of different classes. \n            intra_loss_weight: float, default=1.0\n        \"\"\"", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "distmat", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "batch_size", ",", "self", ".", "num_classes", ")", "+", "torch", ".", "pow", "(", "self", ".", "centers", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "\n", "self", ".", "num_classes", ",", "batch_size", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "self", ".", "centers", ".", "t", "(", ")", ")", "\n", "\n", "classes", "=", "torch", ".", "arange", "(", "self", ".", "num_classes", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "classes", "=", "classes", ".", "cuda", "(", ")", "\n", "", "mask", "=", "labels", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "batch_size", ",", "self", ".", "num_classes", ")", ".", "eq", "(", "\n", "classes", ".", "expand", "(", "batch_size", ",", "self", ".", "num_classes", ")", ")", "# mask is ohe of labels", "\n", "\n", "dist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "value", "=", "distmat", "[", "i", "]", "[", "mask", "[", "i", "]", "]", "\n", "# for numerical stability", "\n", "value", "=", "value", ".", "clamp", "(", "min", "=", "1e-12", ",", "max", "=", "1e+12", ")", "\n", "dist", ".", "append", "(", "value", ")", "\n", "", "dist", "=", "torch", ".", "cat", "(", "dist", ")", "\n", "intra_loss", "=", "dist", ".", "sum", "(", ")", "\n", "\n", "# between class distance", "\n", "if", "inter_class", "==", "\"global\"", ":", "\n", "            ", "global_center", "=", "torch", ".", "mean", "(", "self", ".", "centers", ",", "0", ")", "\n", "inter_loss", "=", "torch", ".", "pow", "(", "torch", ".", "norm", "(", "\n", "self", ".", "centers", "-", "global_center", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ",", "2", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"invalid value for inter_class argument, must be one of [global, sample]. \"", ")", "\n", "\n", "", "loss", "=", "intra_loss_weight", "*", "intra_loss", "-", "inter_loss_weight", "*", "inter_loss", "\n", "return", "loss", ",", "intra_loss", ",", "inter_loss", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.loss.FisherTR.__init__": [[196, 208], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.PlaceCrop.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "feat_dim", "=", "2", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "FisherTR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "self", ".", "centers", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "\n", "self", ".", "num_classes", ",", "self", ".", "feat_dim", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "centers", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "self", ".", "num_classes", ",", "self", ".", "feat_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.loss.FisherTR.forward": [[209, 253], ["x.size", "distmat.addmm_", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "labels.unsqueeze().expand().eq", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "loss.FisherTR.centers.t", "classes.cuda.cuda.cuda", "classes.cuda.cuda.expand", "value.clamp.clamp.clamp", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "ValueError", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "labels.unsqueeze().expand", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "labels.unsqueeze", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "labels", ",", "inter_class", "=", "\"global\"", ",", "intra_loss_weight", "=", "1.0", ",", "inter_loss_weight", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: feature matrix with shape (batch_size, feat_dim).\n            labels: ground truth labels with shape (batch_size).\n            inter_class: str, one of [\"global\", \"sample\"]. \n                         if inter_class==\"global\", calculate intra class distance by distances of centers and global center. \n                         if inter_class==\"sample\", calculate intra class distance by distances of samples and centers of different classes. \n            intra_loss_weight: float, default=1.0\n        \"\"\"", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "distmat", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "batch_size", ",", "self", ".", "num_classes", ")", "+", "torch", ".", "pow", "(", "self", ".", "centers", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "\n", "self", ".", "num_classes", ",", "batch_size", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "self", ".", "centers", ".", "t", "(", ")", ")", "\n", "\n", "classes", "=", "torch", ".", "arange", "(", "self", ".", "num_classes", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "classes", "=", "classes", ".", "cuda", "(", ")", "\n", "", "mask", "=", "labels", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "batch_size", ",", "self", ".", "num_classes", ")", ".", "eq", "(", "\n", "classes", ".", "expand", "(", "batch_size", ",", "self", ".", "num_classes", ")", ")", "# mask is ohe of labels", "\n", "\n", "dist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "value", "=", "distmat", "[", "i", "]", "[", "mask", "[", "i", "]", "]", "\n", "# for numerical stability", "\n", "value", "=", "value", ".", "clamp", "(", "min", "=", "1e-12", ",", "max", "=", "1e+12", ")", "\n", "dist", ".", "append", "(", "value", ")", "\n", "", "dist", "=", "torch", ".", "cat", "(", "dist", ")", "\n", "intra_loss", "=", "dist", ".", "sum", "(", ")", "\n", "\n", "# between class distance", "\n", "if", "inter_class", "==", "\"global\"", ":", "\n", "            ", "global_center", "=", "torch", ".", "mean", "(", "self", ".", "centers", ",", "0", ")", "\n", "inter_loss", "=", "torch", ".", "pow", "(", "torch", ".", "norm", "(", "\n", "self", ".", "centers", "-", "global_center", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ",", "2", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"invalid value for inter_class argument, must be one of [global, sample]. \"", ")", "\n", "\n", "", "loss", "=", "intra_loss_weight", "*", "intra_loss", "/", "(", "inter_loss_weight", "*", "inter_loss", ")", "\n", "return", "loss", ",", "intra_loss", ",", "inter_loss", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.loss.EntropyLoss": [[11, 16], ["input_.ge", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.sum", "torch.sum", "torch.sum", "float", "input_.size", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["def", "EntropyLoss", "(", "input_", ")", ":", "\n", "    ", "mask", "=", "input_", ".", "ge", "(", "0.000001", ")", "\n", "mask_out", "=", "torch", ".", "masked_select", "(", "input_", ",", "mask", ")", "\n", "entropy", "=", "-", "(", "torch", ".", "sum", "(", "mask_out", "*", "torch", ".", "log", "(", "mask_out", ")", ")", ")", "\n", "return", "entropy", "/", "float", "(", "input_", ".", "size", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.loss.PADA": [[18, 34], ["ad_net", "int", "torch.autograd.Variable", "grl_layer", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "dc_target.cuda.cuda", "weight_ad.cuda.cuda", "torch.BCELoss", "ad_out.view", "dc_target.cuda.view", "ad_out.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "weight_ad.cuda.view", "numpy.array"], "function", ["None"], ["", "def", "PADA", "(", "features", ",", "ad_net", ",", "grl_layer", ",", "weight_ad", ",", "use_gpu", "=", "True", ")", ":", "\n", "    ", "'''domain adversarial loss\n    Args: \n        features: torch.FloatTensor, concatenated source domain and target domain features\n        ad_net: nn.Module, domain classification network\n        grl_layer: gradient reversal layer\n        weight_ad: torch.FloatTensor, weight of each sample, default all 1's\n    '''", "\n", "ad_out", ",", "_", "=", "ad_net", "(", "grl_layer", "(", "features", ")", ")", "\n", "batch_size", "=", "int", "(", "ad_out", ".", "size", "(", "0", ")", "/", "2", ")", "\n", "dc_target", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "\n", "np", ".", "array", "(", "[", "[", "1", "]", "]", "*", "batch_size", "+", "[", "[", "0", "]", "]", "*", "batch_size", ")", ")", ".", "float", "(", ")", ")", "\n", "if", "use_gpu", ":", "\n", "        ", "dc_target", "=", "dc_target", ".", "cuda", "(", ")", "\n", "weight_ad", "=", "weight_ad", ".", "cuda", "(", ")", "\n", "", "return", "nn", ".", "BCELoss", "(", "weight", "=", "weight_ad", ".", "view", "(", "-", "1", ")", ")", "(", "ad_out", ".", "view", "(", "-", "1", ")", ",", "dc_target", ".", "view", "(", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.loss.CORAL": [[36, 55], ["source.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mean", "torch.mean", "torch.mean", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mul", "torch.mul", "torch.mul", "xm.t", "xmt.t"], "function", ["None"], ["", "def", "CORAL", "(", "source", ",", "target", ")", ":", "\n", "    ", "'''CORAL loss\n       https://github.com/SSARCandy/DeepCORAL/blob/master/models.py\n    '''", "\n", "batch_size", ",", "d", "=", "source", ".", "size", "(", ")", "# assume that source, target are 2d tensors", "\n", "\n", "# source covariance", "\n", "xm", "=", "torch", ".", "mean", "(", "source", ",", "0", ",", "keepdim", "=", "True", ")", "-", "source", "\n", "xc", "=", "(", "1.", "/", "(", "batch_size", "-", "1", ")", ")", "*", "torch", ".", "matmul", "(", "xm", ".", "t", "(", ")", ",", "xm", ")", "\n", "\n", "# target covariance", "\n", "xmt", "=", "torch", ".", "mean", "(", "target", ",", "0", ",", "keepdim", "=", "True", ")", "-", "target", "\n", "xct", "=", "(", "1.", "/", "(", "batch_size", "-", "1", ")", ")", "*", "torch", ".", "matmul", "(", "xmt", ".", "t", "(", ")", ",", "xmt", ")", "\n", "\n", "# frobenius norm between source and target", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "mul", "(", "(", "xc", "-", "xct", ")", ",", "(", "xc", "-", "xct", ")", ")", ")", "\n", "# loss = loss / (4*d*d)", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.loss.guassian_kernel": [[57, 74], ["torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "sum", "int", "int", "int", "int", "int", "int", "int", "int", "torch.exp", "torch.exp", "torch.exp", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.sum", "torch.sum", "torch.sum", "range", "source.size", "target.size"], "function", ["None"], ["", "def", "guassian_kernel", "(", "source", ",", "target", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "fix_sigma", "=", "None", ")", ":", "\n", "    ", "n_samples", "=", "int", "(", "source", ".", "size", "(", ")", "[", "0", "]", ")", "+", "int", "(", "target", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "total", "=", "torch", ".", "cat", "(", "[", "source", ",", "target", "]", ",", "dim", "=", "0", ")", "\n", "total0", "=", "total", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "\n", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "1", ")", ")", ")", "\n", "total1", "=", "total", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "\n", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "1", ")", ")", ")", "\n", "L2_distance", "=", "(", "(", "total0", "-", "total1", ")", "**", "2", ")", ".", "sum", "(", "2", ")", "\n", "if", "fix_sigma", ":", "\n", "        ", "bandwidth", "=", "fix_sigma", "\n", "", "else", ":", "\n", "        ", "bandwidth", "=", "torch", ".", "sum", "(", "L2_distance", ".", "data", ")", "/", "(", "n_samples", "**", "2", "-", "n_samples", ")", "\n", "", "bandwidth", "/=", "kernel_mul", "**", "(", "kernel_num", "//", "2", ")", "\n", "bandwidth_list", "=", "[", "bandwidth", "*", "(", "kernel_mul", "**", "i", ")", "for", "i", "in", "range", "(", "kernel_num", ")", "]", "\n", "kernel_val", "=", "[", "torch", ".", "exp", "(", "-", "L2_distance", "/", "bandwidth_temp", ")", "\n", "for", "bandwidth_temp", "in", "bandwidth_list", "]", "\n", "return", "sum", "(", "kernel_val", ")", "# /len(kernel_val)", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.loss.compute_pairwise_distances": [[76, 84], ["torch.transpose", "torch.transpose", "torch.transpose", "ValueError", "x.size", "y.size", "ValueError", "torch.sum", "torch.sum", "torch.sum", "norm", "x.dim", "y.dim", "torch.pow", "torch.pow", "torch.pow", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.transpose", "torch.transpose", "torch.transpose"], "function", ["None"], ["", "def", "compute_pairwise_distances", "(", "x", ",", "y", ")", ":", "\n", "    ", "if", "not", "x", ".", "dim", "(", ")", "==", "y", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'Both inputs should be matrices.'", ")", "\n", "", "if", "x", ".", "size", "(", "1", ")", "!=", "y", ".", "size", "(", "1", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The number of features should be the same.'", ")", "\n", "\n", "", "norm", "=", "lambda", "x", ":", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "x", ",", "2", ")", ",", "1", ")", "\n", "return", "torch", ".", "transpose", "(", "norm", "(", "torch", ".", "unsqueeze", "(", "x", ",", "2", ")", "-", "torch", ".", "transpose", "(", "y", ",", "0", ",", "1", ")", ")", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.loss.gaussian_kernel_matrix": [[86, 92], ["loss.compute_pairwise_distances", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum().view", "torch.sum().view", "torch.sum().view", "compute_pairwise_distances.contiguous().view", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "compute_pairwise_distances.size", "compute_pairwise_distances.contiguous", "torch.exp", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.loss.compute_pairwise_distances"], ["", "def", "gaussian_kernel_matrix", "(", "x", ",", "y", ",", "sigmas", ")", ":", "\n", "    ", "beta", "=", "1.", "/", "(", "2.", "*", "(", "torch", ".", "unsqueeze", "(", "sigmas", ",", "1", ")", ")", ")", "\n", "dist", "=", "compute_pairwise_distances", "(", "x", ",", "y", ")", "\n", "# print('dist shape={}'.format(dist.size()))", "\n", "s", "=", "torch", ".", "matmul", "(", "beta", ",", "dist", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "return", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "-", "s", ")", ",", "0", ")", ".", "view", "(", "*", "dist", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.loss.maximum_mean_discrepancy": [[94, 101], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.clamp", "torch.clamp", "torch.clamp", "kernel", "kernel", "torch.mean", "torch.mean", "torch.mean", "kernel"], "function", ["None"], ["", "def", "maximum_mean_discrepancy", "(", "x", ",", "y", ",", "kernel", "=", "gaussian_kernel_matrix", ")", ":", "\n", "    ", "cost", "=", "torch", ".", "mean", "(", "kernel", "(", "x", ",", "x", ")", ")", "\n", "cost", "+=", "torch", ".", "mean", "(", "kernel", "(", "y", ",", "y", ")", ")", "\n", "cost", "-=", "2", "*", "torch", ".", "mean", "(", "kernel", "(", "x", ",", "y", ")", ")", "\n", "# We do not allow the loss to become negative.", "\n", "cost", "=", "torch", ".", "clamp", "(", "cost", ",", "min", "=", "0.0", ")", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.loss.mmd_distance": [[103, 112], ["functools.partial", "loss.maximum_mean_discrepancy", "torch.clamp", "torch.clamp", "torch.clamp", "torch.Tensor().float().cuda", "torch.Tensor().float().cuda", "torch.Tensor().float().cuda", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.loss.maximum_mean_discrepancy"], ["", "def", "mmd_distance", "(", "hs", ",", "ht", ")", ":", "\n", "    ", "'''maximum mean discrepancy, a combination of multiple kernels\n    '''", "\n", "sigmas", "=", "[", "1e-6", ",", "1e-5", ",", "1e-4", ",", "1e-3", ",", "1e-2", ",", "1e-1", ",", "1", ",", "5", ",", "\n", "10", ",", "15", ",", "20", ",", "25", ",", "30", ",", "35", ",", "100", ",", "1e3", ",", "1e4", ",", "1e5", ",", "1e6", "]", "\n", "gaussian_kernel", "=", "partial", "(", "gaussian_kernel_matrix", ",", "\n", "sigmas", "=", "torch", ".", "Tensor", "(", "sigmas", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "\n", "loss_value", "=", "maximum_mean_discrepancy", "(", "hs", ",", "ht", ",", "kernel", "=", "gaussian_kernel", ")", "\n", "return", "torch", ".", "clamp", "(", "loss_value", ",", "min", "=", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.lr_schedule.inv_lr_scheduler": [[1, 11], ["None"], "function", ["None"], ["def", "inv_lr_scheduler", "(", "param_lr", ",", "optimizer", ",", "iter_num", ",", "gamma", ",", "power", ",", "init_lr", "=", "0.001", ",", "weight_decay", "=", "5e-4", ")", ":", "\n", "    ", "\"\"\"Decay learning rate by a factor of 0.1 every lr_decay_epoch epochs.\"\"\"", "\n", "lr", "=", "init_lr", "*", "(", "1", "+", "gamma", "*", "iter_num", ")", "**", "(", "-", "power", ")", "\n", "i", "=", "0", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "*", "param_group", "[", "'lr_mult'", "]", "\n", "param_group", "[", "'weight_decay'", "]", "=", "weight_decay", "*", "param_group", "[", "'decay_mult'", "]", "\n", "i", "+=", "1", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.ImageList.__init__": [[147, 158], ["data_list.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.make_dataset"], ["def", "__init__", "(", "self", ",", "image_list", ",", "labels", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "image_list", ",", "labels", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.ImageList.__getitem__": [[159, 174], ["data_list.ImageList.loader", "data_list.ImageList.transform", "data_list.ImageList.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.ImageList.__len__": [[175, 177], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.SiameseImageList.__init__": [[200, 212], ["data_list.make_triplet_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.make_triplet_dataset"], ["def", "__init__", "(", "self", ",", "image_list", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", ",", "sample_weights", "=", "make_triplet_dataset", "(", "image_list", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "sample_weights", "=", "sample_weights", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.SiameseImageList.__getitem__": [[213, 230], ["data_list.SiameseImageList.loader", "data_list.SiameseImageList.loader", "data_list.SiameseImageList.transform", "data_list.SiameseImageList.transform", "data_list.SiameseImageList.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image_a, image_b, target) where target is sim_label.\n        \"\"\"", "\n", "x1_path", ",", "x2_path", ",", "target", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img_a", "=", "self", ".", "loader", "(", "x1_path", ")", "\n", "img_b", "=", "self", ".", "loader", "(", "x2_path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img_a", "=", "self", ".", "transform", "(", "img_a", ")", "\n", "img_b", "=", "self", ".", "transform", "(", "img_b", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img_a", ",", "img_b", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.SiameseImageList.__len__": [[231, 233], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.ImageValueList.__init__": [[256, 268], ["data_list.make_dataset", "len", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.make_dataset"], ["def", "__init__", "(", "self", ",", "image_list", ",", "labels", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "image_list", ",", "labels", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "values", "=", "[", "1.0", "]", "*", "len", "(", "imgs", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.ImageValueList.set_values": [[269, 271], ["None"], "methods", ["None"], ["", "def", "set_values", "(", "self", ",", "values", ")", ":", "\n", "        ", "self", ".", "values", "=", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.ImageValueList.__getitem__": [[272, 287], ["data_list.ImageValueList.loader", "data_list.ImageValueList.transform", "data_list.ImageValueList.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.ImageValueList.__len__": [[288, 290], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.stratify_sampling": [[15, 34], ["len", "sklearn.model_selection.train_test_split", "int", "len", "len", "numpy.unique", "val.strip().split", "str", "zip", "val.strip().split", "val.strip", "val.strip"], "function", ["None"], ["def", "stratify_sampling", "(", "image_list", ",", "ratio", "=", "1.0", ")", ":", "\n", "    ", "'''stratify sampling a subset from the input dataset with a given ratio\n    Args: \n        image_list: [list], each element is a str, \"image_file_path label\"\n        num_labels_per_class: [int], number of labeled sample per class, if -1, then return a labeled dataset\n    Returns:\n        sampled_list: [list], the same structure as `image_list`\n    '''", "\n", "assert", "(", "ratio", ">", "0.", "and", "ratio", "<=", "1.0", ")", "\n", "if", "ratio", "==", "1.", ":", "\n", "        ", "return", "image_list", "\n", "", "images", "=", "[", "val", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "0", "]", "for", "val", "in", "image_list", "]", "\n", "labels", "=", "[", "int", "(", "val", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "1", "]", ")", "for", "val", "in", "image_list", "]", "\n", "assert", "(", "len", "(", "images", ")", "==", "len", "(", "labels", ")", ")", "\n", "# print('image size={}, label size={}'.format(len(images),len(labels)))", "\n", "num_classes", "=", "len", "(", "np", ".", "unique", "(", "labels", ")", ")", "\n", "labeled_images", ",", "_", ",", "labeled_y", ",", "_", "=", "train_test_split", "(", "images", ",", "labels", ",", "\n", "train_size", "=", "ratio", ",", "stratify", "=", "labels", ",", "random_state", "=", "1", ")", "\n", "return", "[", "image_name", "+", "\" \"", "+", "str", "(", "image_label", ")", "for", "image_name", ",", "image_label", "in", "zip", "(", "labeled_images", ",", "labeled_y", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.make_dataset": [[36, 46], ["len", "len", "image_list[].strip", "range", "image_list[].split", "numpy.array", "int", "val.split", "val.split", "int", "val.split", "val.split"], "function", ["None"], ["", "def", "make_dataset", "(", "image_list", ",", "labels", ")", ":", "\n", "    ", "if", "labels", "is", "not", "None", ":", "\n", "      ", "len_", "=", "len", "(", "image_list", ")", "\n", "images", "=", "[", "(", "image_list", "[", "i", "]", ".", "strip", "(", ")", ",", "labels", "[", "i", ",", ":", "]", ")", "for", "i", "in", "range", "(", "len_", ")", "]", "\n", "", "else", ":", "\n", "      ", "if", "len", "(", "image_list", "[", "0", "]", ".", "split", "(", ")", ")", ">", "2", ":", "\n", "        ", "images", "=", "[", "(", "val", ".", "split", "(", ")", "[", "0", "]", ",", "np", ".", "array", "(", "[", "int", "(", "la", ")", "for", "la", "in", "val", ".", "split", "(", ")", "[", "1", ":", "]", "]", ")", ")", "for", "val", "in", "image_list", "]", "\n", "", "else", ":", "\n", "        ", "images", "=", "[", "(", "val", ".", "split", "(", ")", "[", "0", "]", ",", "int", "(", "val", ".", "split", "(", ")", "[", "1", "]", ")", ")", "for", "val", "in", "image_list", "]", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.make_class_balanced_labeled_dataset": [[48, 72], ["numpy.array().reshape", "len", "sklearn.model_selection.train_test_split", "numpy.array().reshape", "int", "len", "len", "numpy.unique", "numpy.array().reshape", "numpy.array().reshape", "val.split", "numpy.array", "val.split", "val.split", "numpy.array", "val.split", "numpy.array", "numpy.array", "int", "int", "val.split", "val.split"], "function", ["None"], ["", "def", "make_class_balanced_labeled_dataset", "(", "image_list", ",", "num_labels_per_class", "=", "-", "1", ")", ":", "\n", "    ", "'''split the dataset into labeled and unlabeled sets\n    Args: \n        image_list: [list], each element is a str, \"image_file_path label\"\n        num_labels_per_class: [int], number of labeled sample per class, if -1, then return a labeled dataset\n    Returns:\n        labeled_images: list of str, path to labeled images\n        labeled_y: np.array with shape (num_samples,1)\n        unlabeled_images\n        unlabeled_y\n    '''", "\n", "if", "num_labels_per_class", "==", "-", "1", ":", "\n", "        ", "return", "[", "val", ".", "split", "(", ")", "[", "0", "]", "for", "val", "in", "image_list", "]", ",", "np", ".", "array", "(", "[", "int", "(", "val", ".", "split", "(", ")", "[", "1", "]", ")", "for", "val", "in", "image_list", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "None", ",", "None", "\n", "", "elif", "num_labels_per_class", "==", "0", ":", "\n", "        ", "return", "None", ",", "None", ",", "[", "val", ".", "split", "(", ")", "[", "0", "]", "for", "val", "in", "image_list", "]", ",", "np", ".", "array", "(", "[", "int", "(", "val", ".", "split", "(", ")", "[", "1", "]", ")", "for", "val", "in", "image_list", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "images", "=", "[", "val", ".", "split", "(", ")", "[", "0", "]", "for", "val", "in", "image_list", "]", "\n", "labels", "=", "[", "int", "(", "val", ".", "split", "(", ")", "[", "1", "]", ")", "for", "val", "in", "image_list", "]", "\n", "assert", "(", "len", "(", "images", ")", "==", "len", "(", "labels", ")", ")", "\n", "# print('image size={}, label size={}'.format(len(images),len(labels)))", "\n", "num_classes", "=", "len", "(", "np", ".", "unique", "(", "labels", ")", ")", "\n", "labeled_images", ",", "unlabeled_images", ",", "labeled_y", ",", "unlabeled_y", "=", "train_test_split", "(", "images", ",", "labels", ",", "\n", "train_size", "=", "num_labels_per_class", "*", "num_classes", ",", "stratify", "=", "labels", ",", "random_state", "=", "1", ")", "\n", "return", "labeled_images", ",", "np", ".", "array", "(", "labeled_y", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "unlabeled_images", ",", "np", ".", "array", "(", "unlabeled_y", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.make_triplet_dataset": [[74, 100], ["collections.Counter", "float", "line.strip().split", "int", "ds.append", "list", "list.remove", "sum", "triplets.append", "collections.Counter.update", "collections.Counter.values", "collections.Counter.items", "line.strip", "int"], "function", ["None"], ["", "", "def", "make_triplet_dataset", "(", "image_list", ")", ":", "\n", "    ", "'''\n    Args: \n        image_list: file object. (image_filename, label) in each row\n    Returns: \n        triplets: a list with (x1, y1, sim_label) triplets n*n elements\n    '''", "\n", "ds", "=", "[", "]", "\n", "for", "line", "in", "image_list", ":", "\n", "        ", "image_name", ",", "label", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "label", "=", "int", "(", "label", ")", "\n", "ds", ".", "append", "(", "[", "image_name", ",", "label", "]", ")", "\n", "\n", "", "triplets", "=", "[", "]", "\n", "c", "=", "Counter", "(", ")", "\n", "for", "x1", ",", "y1", "in", "ds", ":", "\n", "        ", "list_to_match", "=", "list", "(", "ds", ")", "\n", "list_to_match", ".", "remove", "(", "[", "x1", ",", "y1", "]", ")", "\n", "for", "x2", ",", "y2", "in", "list_to_match", ":", "\n", "            ", "sim_label", "=", "1", "-", "int", "(", "y1", "==", "y2", ")", "\n", "triplets", ".", "append", "(", "[", "x1", ",", "x2", ",", "sim_label", "]", ")", "\n", "c", ".", "update", "(", "[", "sim_label", "]", ")", "\n", "", "", "num_samples", "=", "float", "(", "sum", "(", "c", ".", "values", "(", ")", ")", ")", "\n", "weight_per_class", "=", "{", "class_label", ":", "num_samples", "/", "cnt", "for", "class_label", ",", "cnt", "in", "c", ".", "items", "(", ")", "}", "\n", "weights", "=", "[", "weight_per_class", "[", "t", "[", "-", "1", "]", "]", "for", "t", "in", "triplets", "]", "\n", "return", "triplets", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.pil_loader": [[102, 107], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["", "def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.accimage_loader": [[109, 116], ["accimage.Image", "data_list.pil_loader"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.pil_loader"], ["", "", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "import", "accimage", "\n", "try", ":", "\n", "        ", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.default_loader": [[118, 124], ["data_list.pil_loader"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.data_list.pil_loader"], ["", "", "def", "default_loader", "(", "path", ")", ":", "\n", "#from torchvision import get_image_backend", "\n", "#if get_image_backend() == 'accimage':", "\n", "#    return accimage_loader(path)", "\n", "#else:", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.EarlyStopping.__init__": [[14, 19], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "patience", ")", ":", "\n", "        ", "self", ".", "patience", "=", "patience", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "best_score", "=", "None", "\n", "self", ".", "meter", "=", "deque", "(", "maxlen", "=", "patience", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.EarlyStopping.is_stop_training": [[20, 40], ["utils.EarlyStopping.meter.append", "numpy.abs", "len", "numpy.abs", "numpy.mean"], "methods", ["None"], ["", "def", "is_stop_training", "(", "self", ",", "score", ")", ":", "\n", "        ", "stop_sign", "=", "False", "\n", "self", ".", "meter", ".", "append", "(", "score", ")", "\n", "if", "self", ".", "best_score", "is", "None", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "", "elif", "score", "<", "self", ".", "best_score", ":", "\n", "            ", "self", ".", "counter", "+=", "1", "\n", "if", "self", ".", "counter", ">=", "self", ".", "patience", ":", "\n", "                ", "stop_sign", "=", "True", "\n", "# approximately equal", "\n", "", "", "elif", "np", ".", "abs", "(", "score", "-", "self", ".", "best_score", ")", "<", "1e-9", ":", "\n", "            ", "if", "len", "(", "self", ".", "meter", ")", "==", "self", ".", "patience", "and", "np", ".", "abs", "(", "np", ".", "mean", "(", "self", ".", "meter", ")", "-", "score", ")", "<", "1e-7", ":", "\n", "                ", "stop_sign", "=", "True", "\n", "", "else", ":", "\n", "                ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "counter", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "counter", "=", "0", "\n", "", "return", "stop_sign", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.domain_cls_accuracy": [[42, 58], ["torch.from_numpy().float", "torch.from_numpy().float", "d_out.size", "d_out.detach", "float", "float", "float", "float", "float", "float", "torch.from_numpy", "torch.from_numpy", "d0_pred.data.cpu().float().eq().sum", "d_out.size", "d0_pred[].cpu().float().eq().sum", "d0_pred[].cpu().float().eq().sum", "numpy.array", "d0_pred.data.cpu().float().eq", "d0_pred[].cpu().float().eq", "d0_pred[].cpu().float().eq", "d0_pred.data.cpu().float", "d0_pred[].cpu().float", "d0_pred[].cpu().float", "d0_pred.data.cpu", "d0_pred[].cpu", "d0_pred[].cpu"], "function", ["None"], ["", "", "def", "domain_cls_accuracy", "(", "d_out", ")", ":", "\n", "    ", "'''domain classification accuracy\n    Args: \n        d_out: torch.FloatTensor, output of the domain classification network\n    Returns:\n        d0_acc: float, domain classification accuracy of both domains\n        source_acc: float, domain classification accuracy of the source domain\n        target_acc: float, domain classification accuracy of the target domain\n    '''", "\n", "batch_size", "=", "d_out", ".", "size", "(", "0", ")", "//", "2", "\n", "d0_target", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "1", "]", "]", "*", "batch_size", "+", "[", "[", "0", "]", "]", "*", "batch_size", ")", ")", ".", "float", "(", ")", "\n", "d0_pred", "=", "d_out", ".", "detach", "(", ")", ">=", "0.5", "\n", "d0_acc", "=", "float", "(", "d0_pred", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "eq", "(", "d0_target", ")", ".", "sum", "(", ")", ")", "/", "float", "(", "d_out", ".", "size", "(", "0", ")", ")", "\n", "source_acc", "=", "float", "(", "d0_pred", "[", ":", "batch_size", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "eq", "(", "d0_target", "[", ":", "batch_size", "]", ")", ".", "sum", "(", ")", ")", "/", "float", "(", "batch_size", ")", "\n", "target_acc", "=", "float", "(", "d0_pred", "[", "batch_size", ":", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "eq", "(", "d0_target", "[", "batch_size", ":", "]", ")", ".", "sum", "(", ")", ")", "/", "float", "(", "batch_size", ")", "\n", "return", "d0_acc", ",", "source_acc", ",", "target_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.distance_to_centroids": [[60, 72], ["x.size", "centroids.size", "torch.norm", "torch.norm", "x.unsqueeze().expand", "centroids.unsqueeze().expand", "x.unsqueeze", "centroids.unsqueeze"], "function", ["None"], ["", "def", "distance_to_centroids", "(", "x", ",", "centroids", ")", ":", "\n", "    ", "'''euclidean distance of a batch of samples to class centers\n    Args:\n        x: FloatTensor [batch_size, d]\n        centroids: FloatTensor [K, d] where K is the number of classes\n    Returns:\n        dist: FloatTensor [batch_size, K]\n    '''", "\n", "b", ",", "d", "=", "x", ".", "size", "(", ")", "\n", "K", ",", "_", "=", "centroids", ".", "size", "(", ")", "\n", "dist", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "b", ",", "K", ",", "d", ")", "-", "centroids", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "K", ",", "d", ")", "\n", "return", "torch", ".", "norm", "(", "dist", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.distance_classification_test": [[74, 125], ["torch.max", "torch.max", "sklearn.metrics.confusion_matrix", "torch.no_grad", "torch.no_grad", "torch.sum().float", "torch.sum().float", "float", "torch.cat.cpu().numpy", "predict.cpu().numpy", "range", "iter", "range", "iter", "len", "range", "sum", "len", "iter.next", "model", "utils.distance_to_centroids", "torch.sum", "torch.sum", "torch.cat.size", "torch.cat.cpu", "predict.cpu", "range", "iter_test[].next", "range", "labels.cuda.cuda", "centroids.cuda.cuda", "model", "utils.distance_to_centroids", "sum.append", "sum.data.float", "labels.cuda.data.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs.cuda.cuda", "labels.cuda.cuda", "centroids.cuda.cuda", "torch.Softmax", "sum.data.float", "labels.cuda.data.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "inputs[].cuda", "torch.squeeze().float", "torch.squeeze().float", "torch.Softmax", "sum.data.float", "labels.cuda.data.float", "sum.data.float", "labels.cuda.data.float", "str", "torch.squeeze", "torch.squeeze"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.distance_to_centroids", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.distance_to_centroids"], ["", "def", "distance_classification_test", "(", "loader", ",", "model", ",", "centroids", ",", "test_10crop", "=", "True", ",", "gpu", "=", "True", ")", ":", "\n", "    ", "start_test", "=", "True", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "test_10crop", ":", "\n", "            ", "iter_test", "=", "[", "iter", "(", "loader", "[", "'test'", "+", "str", "(", "i", ")", "]", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "loader", "[", "'test0'", "]", ")", ")", ":", "\n", "                ", "data", "=", "[", "iter_test", "[", "j", "]", ".", "next", "(", ")", "for", "j", "in", "range", "(", "10", ")", "]", "\n", "inputs", "=", "[", "data", "[", "j", "]", "[", "0", "]", "for", "j", "in", "range", "(", "10", ")", "]", "\n", "labels", "=", "data", "[", "0", "]", "[", "1", "]", "\n", "if", "gpu", ":", "\n", "                    ", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                        ", "inputs", "[", "j", "]", "=", "inputs", "[", "j", "]", ".", "cuda", "(", ")", "\n", "", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "centroids", "=", "centroids", ".", "cuda", "(", ")", "\n", "", "outputs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                    ", "features", ",", "_", "=", "model", "(", "inputs", "[", "j", "]", ")", "\n", "dist", "=", "distance_to_centroids", "(", "features", ",", "centroids", ")", "\n", "outputs", ".", "append", "(", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "-", "1.0", "*", "dist", ")", ")", "\n", "", "outputs", "=", "sum", "(", "outputs", ")", "\n", "if", "start_test", ":", "\n", "                    ", "all_output", "=", "outputs", ".", "data", ".", "float", "(", ")", "\n", "all_label", "=", "labels", ".", "data", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "                    ", "all_output", "=", "torch", ".", "cat", "(", "(", "all_output", ",", "outputs", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "(", "all_label", ",", "labels", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "else", ":", "\n", "            ", "iter_test", "=", "iter", "(", "loader", "[", "\"test\"", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "loader", "[", "'test'", "]", ")", ")", ":", "\n", "                ", "data", "=", "iter_test", ".", "next", "(", ")", "\n", "inputs", "=", "data", "[", "0", "]", "\n", "labels", "=", "data", "[", "1", "]", "\n", "if", "gpu", ":", "\n", "                    ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "centroids", "=", "centroids", ".", "cuda", "(", ")", "\n", "", "features", ",", "_", "=", "model", "(", "inputs", ")", "\n", "dist", "=", "distance_to_centroids", "(", "features", ",", "centroids", ")", "\n", "outputs", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "-", "1.0", "*", "dist", ")", "\n", "if", "start_test", ":", "\n", "                    ", "all_output", "=", "outputs", ".", "data", ".", "float", "(", ")", "\n", "all_label", "=", "labels", ".", "data", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "                    ", "all_output", "=", "torch", ".", "cat", "(", "(", "all_output", ",", "outputs", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "(", "all_label", ",", "labels", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "", "_", ",", "predict", "=", "torch", ".", "max", "(", "all_output", ",", "1", ")", "\n", "accuracy", "=", "torch", ".", "sum", "(", "torch", ".", "squeeze", "(", "predict", ")", ".", "float", "(", ")", "==", "all_label", ")", ".", "float", "(", ")", "/", "float", "(", "all_label", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "conf_matrix", "=", "confusion_matrix", "(", "all_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "predict", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "accuracy", ",", "conf_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.image_classification_test": [[127, 172], ["torch.max", "torch.max", "torch.no_grad", "torch.no_grad", "torch.sum().float", "torch.sum().float", "float", "range", "iter", "range", "iter", "len", "range", "sum", "len", "iter.next", "model", "torch.sum", "torch.sum", "torch.cat.size", "range", "iter_test[].next", "range", "labels.cuda.cuda", "model", "sum.append", "sum.data.float", "labels.cuda.data.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs.cuda.cuda", "labels.cuda.cuda", "sum.data.float", "labels.cuda.data.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "inputs[].cuda", "torch.squeeze().float", "torch.squeeze().float", "torch.Softmax", "sum.data.float", "labels.cuda.data.float", "sum.data.float", "labels.cuda.data.float", "str", "torch.squeeze", "torch.squeeze"], "function", ["None"], ["", "def", "image_classification_test", "(", "loader", ",", "model", ",", "test_10crop", "=", "True", ",", "gpu", "=", "True", ")", ":", "\n", "    ", "start_test", "=", "True", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "test_10crop", ":", "\n", "            ", "iter_test", "=", "[", "iter", "(", "loader", "[", "'test'", "+", "str", "(", "i", ")", "]", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "loader", "[", "'test0'", "]", ")", ")", ":", "\n", "                ", "data", "=", "[", "iter_test", "[", "j", "]", ".", "next", "(", ")", "for", "j", "in", "range", "(", "10", ")", "]", "\n", "inputs", "=", "[", "data", "[", "j", "]", "[", "0", "]", "for", "j", "in", "range", "(", "10", ")", "]", "\n", "labels", "=", "data", "[", "0", "]", "[", "1", "]", "\n", "if", "gpu", ":", "\n", "                    ", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                        ", "inputs", "[", "j", "]", "=", "inputs", "[", "j", "]", ".", "cuda", "(", ")", "\n", "", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "", "outputs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                    ", "_", ",", "predict_out", "=", "model", "(", "inputs", "[", "j", "]", ")", "\n", "outputs", ".", "append", "(", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "predict_out", ")", ")", "\n", "", "outputs", "=", "sum", "(", "outputs", ")", "\n", "if", "start_test", ":", "\n", "                    ", "all_output", "=", "outputs", ".", "data", ".", "float", "(", ")", "\n", "all_label", "=", "labels", ".", "data", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "                    ", "all_output", "=", "torch", ".", "cat", "(", "(", "all_output", ",", "outputs", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "(", "all_label", ",", "labels", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "else", ":", "\n", "            ", "iter_test", "=", "iter", "(", "loader", "[", "\"test\"", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "loader", "[", "'test'", "]", ")", ")", ":", "\n", "                ", "data", "=", "iter_test", ".", "next", "(", ")", "\n", "inputs", "=", "data", "[", "0", "]", "\n", "labels", "=", "data", "[", "1", "]", "\n", "if", "gpu", ":", "\n", "                    ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "", "_", ",", "outputs", "=", "model", "(", "inputs", ")", "\n", "if", "start_test", ":", "\n", "                    ", "all_output", "=", "outputs", ".", "data", ".", "float", "(", ")", "\n", "all_label", "=", "labels", ".", "data", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "                    ", "all_output", "=", "torch", ".", "cat", "(", "(", "all_output", ",", "outputs", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "(", "all_label", ",", "labels", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "", "_", ",", "predict", "=", "torch", ".", "max", "(", "all_output", ",", "1", ")", "\n", "accuracy", "=", "torch", ".", "sum", "(", "torch", ".", "squeeze", "(", "predict", ")", ".", "float", "(", ")", "==", "all_label", ")", ".", "float", "(", ")", "/", "float", "(", "all_label", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.image_classification_predict": [[174, 217], ["range", "iter", "range", "iter", "len", "range", "sum", "len", "iter.next", "model", "range", "iter_test[].next", "range", "Variable", "range", "Variable", "model", "outputs.append", "sum.data.cpu().float", "torch.cat", "torch.cat", "Variable", "Variable", "torch.Softmax", "sum.data.cpu().float", "torch.cat", "torch.cat", "range", "range", "Variable", "Variable.cuda", "Variable", "Variable.cuda", "inputs[].cuda", "torch.Softmax", "sum.data.cpu", "sum.data.cpu().float", "sum.data.cpu", "sum.data.cpu().float", "str", "sum.data.cpu", "sum.data.cpu"], "function", ["None"], ["", "def", "image_classification_predict", "(", "loader", ",", "model", ",", "test_10crop", "=", "True", ",", "gpu", "=", "True", ",", "softmax_param", "=", "1.0", ")", ":", "\n", "    ", "start_test", "=", "True", "\n", "if", "test_10crop", ":", "\n", "        ", "iter_test", "=", "[", "iter", "(", "loader", "[", "'test'", "+", "str", "(", "i", ")", "]", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "loader", "[", "'test0'", "]", ")", ")", ":", "\n", "            ", "data", "=", "[", "iter_test", "[", "j", "]", ".", "next", "(", ")", "for", "j", "in", "range", "(", "10", ")", "]", "\n", "inputs", "=", "[", "data", "[", "j", "]", "[", "0", "]", "for", "j", "in", "range", "(", "10", ")", "]", "\n", "labels", "=", "data", "[", "0", "]", "[", "1", "]", "\n", "if", "gpu", ":", "\n", "                ", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                    ", "inputs", "[", "j", "]", "=", "Variable", "(", "inputs", "[", "j", "]", ".", "cuda", "(", ")", ")", "\n", "", "labels", "=", "Variable", "(", "labels", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                    ", "inputs", "[", "j", "]", "=", "Variable", "(", "inputs", "[", "j", "]", ")", "\n", "", "labels", "=", "Variable", "(", "labels", ")", "\n", "", "outputs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                ", "_", ",", "predict_out", "=", "model", "(", "inputs", "[", "j", "]", ")", "\n", "outputs", ".", "append", "(", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "softmax_param", "*", "predict_out", ")", ")", "\n", "", "softmax_outputs", "=", "sum", "(", "outputs", ")", "\n", "if", "start_test", ":", "\n", "                ", "all_softmax_output", "=", "softmax_outputs", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "                ", "all_softmax_output", "=", "torch", ".", "cat", "(", "(", "all_softmax_output", ",", "softmax_outputs", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "else", ":", "\n", "        ", "iter_val", "=", "iter", "(", "loader", "[", "\"test\"", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "loader", "[", "'test'", "]", ")", ")", ":", "\n", "            ", "data", "=", "iter_val", ".", "next", "(", ")", "\n", "inputs", "=", "data", "[", "0", "]", "\n", "if", "gpu", ":", "\n", "                ", "inputs", "=", "Variable", "(", "inputs", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "inputs", "=", "Variable", "(", "inputs", ")", "\n", "", "_", ",", "outputs", "=", "model", "(", "inputs", ")", "\n", "softmax_outputs", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "softmax_param", "*", "outputs", ")", "\n", "if", "start_test", ":", "\n", "                ", "all_softmax_output", "=", "softmax_outputs", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "                ", "all_softmax_output", "=", "torch", ".", "cat", "(", "(", "all_softmax_output", ",", "softmax_outputs", ".", "data", ".", "cpu", "(", ")", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "return", "all_softmax_output", "\n", "", ""]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.ResizeImage.__init__": [[9, 14], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "      ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "        ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.ResizeImage.__call__": [[14, 17], ["img.resize"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "      ", "th", ",", "tw", "=", "self", ".", "size", "\n", "return", "img", ".", "resize", "(", "(", "th", ",", "tw", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.PlaceCrop.__init__": [[27, 34], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "start_x", ",", "start_y", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "start_x", "=", "start_x", "\n", "self", ".", "start_y", "=", "start_y", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.PlaceCrop.__call__": [[35, 44], ["img.crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "return", "img", ".", "crop", "(", "(", "self", ".", "start_x", ",", "self", ".", "start_y", ",", "self", ".", "start_x", "+", "tw", ",", "self", ".", "start_y", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.ForceFlip.__call__": [[49, 57], ["img.transpose"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be flipped.\n        Returns:\n            PIL.Image: Randomly flipped image.\n        \"\"\"", "\n", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.image_train": [[58, 67], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "pre_process.ResizeImage", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "", "def", "image_train", "(", "resize_size", "=", "256", ",", "crop_size", "=", "224", ")", ":", "\n", "  ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "return", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "crop_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.image_test": [[69, 82], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "pre_process.ResizeImage", "pre_process.PlaceCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "image_test", "(", "resize_size", "=", "256", ",", "crop_size", "=", "224", ")", ":", "\n", "  ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "#ten crops for image when validation, input the data_transforms dictionary", "\n", "start_first", "=", "0", "\n", "start_center", "=", "(", "resize_size", "-", "crop_size", "-", "1", ")", "/", "2", "\n", "start_last", "=", "resize_size", "-", "crop_size", "-", "1", "\n", "\n", "return", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_center", ",", "start_center", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.image_test_10crop": [[84, 153], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "pre_process.ResizeImage", "pre_process.ForceFlip", "pre_process.PlaceCrop", "torchvision.transforms.ToTensor", "pre_process.ResizeImage", "pre_process.ForceFlip", "pre_process.PlaceCrop", "torchvision.transforms.ToTensor", "pre_process.ResizeImage", "pre_process.ForceFlip", "pre_process.PlaceCrop", "torchvision.transforms.ToTensor", "pre_process.ResizeImage", "pre_process.ForceFlip", "pre_process.PlaceCrop", "torchvision.transforms.ToTensor", "pre_process.ResizeImage", "pre_process.ForceFlip", "pre_process.PlaceCrop", "torchvision.transforms.ToTensor", "pre_process.ResizeImage", "pre_process.PlaceCrop", "torchvision.transforms.ToTensor", "pre_process.ResizeImage", "pre_process.PlaceCrop", "torchvision.transforms.ToTensor", "pre_process.ResizeImage", "pre_process.PlaceCrop", "torchvision.transforms.ToTensor", "pre_process.ResizeImage", "pre_process.PlaceCrop", "torchvision.transforms.ToTensor", "pre_process.ResizeImage", "pre_process.PlaceCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "image_test_10crop", "(", "resize_size", "=", "256", ",", "crop_size", "=", "224", ")", ":", "\n", "  ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "#ten crops for image when validation, input the data_transforms dictionary", "\n", "start_first", "=", "0", "\n", "start_center", "=", "(", "resize_size", "-", "crop_size", "-", "1", ")", "/", "2", "\n", "start_last", "=", "resize_size", "-", "crop_size", "-", "1", "\n", "data_transforms", "=", "{", "}", "\n", "data_transforms", "[", "'val0'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "ForceFlip", "(", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_first", ",", "start_first", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'val1'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "ForceFlip", "(", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_last", ",", "start_last", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'val2'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "ForceFlip", "(", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_last", ",", "start_first", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'val3'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "ForceFlip", "(", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_first", ",", "start_last", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'val4'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "ForceFlip", "(", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_center", ",", "start_center", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'val5'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_first", ",", "start_first", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'val6'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_last", ",", "start_last", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'val7'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_last", ",", "start_first", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'val8'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_first", ",", "start_last", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "data_transforms", "[", "'val9'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "ResizeImage", "(", "resize_size", ")", ",", "\n", "PlaceCrop", "(", "crop_size", ",", "start_center", ",", "start_center", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "return", "data_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.eval_da.image_classification_test": [[40, 86], ["torch.max", "torch.max", "torch.max", "torch.max", "sklearn.metrics.confusion_matrix", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "float", "torch.cat.cpu().numpy", "predict.cpu().numpy", "accuracy.item", "range", "iter", "range", "iter", "len", "range", "sum", "len", "iter.next", "model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat.size", "torch.cat.cpu", "predict.cpu", "range", "iter_test[].next", "range", "torch.autograd.Variable", "model", "sum.append", "sum.data.float", "torch.autograd.Variable.data.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "sum.data.float", "torch.autograd.Variable.data.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "torch.autograd.Variable", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze().float", "inputs[].cuda", "torch.Softmax", "sum.data.float", "torch.autograd.Variable.data.float", "sum.data.float", "torch.autograd.Variable.data.float", "str", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "function", ["None"], ["def", "image_classification_test", "(", "loader", ",", "model", ",", "test_10crop", "=", "True", ",", "gpu", "=", "True", ",", "iter_num", "=", "-", "1", ")", ":", "\n", "    ", "start_test", "=", "True", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "test_10crop", ":", "\n", "            ", "iter_test", "=", "[", "iter", "(", "loader", "[", "'test'", "+", "str", "(", "i", ")", "]", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "loader", "[", "'test0'", "]", ")", ")", ":", "\n", "                ", "data", "=", "[", "iter_test", "[", "j", "]", ".", "next", "(", ")", "for", "j", "in", "range", "(", "10", ")", "]", "\n", "inputs", "=", "[", "data", "[", "j", "]", "[", "0", "]", "for", "j", "in", "range", "(", "10", ")", "]", "\n", "labels", "=", "data", "[", "0", "]", "[", "1", "]", "\n", "if", "gpu", ":", "\n", "                    ", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                        ", "inputs", "[", "j", "]", "=", "Variable", "(", "inputs", "[", "j", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "labels", "=", "Variable", "(", "labels", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "outputs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                    ", "_", ",", "predict_out", "=", "model", "(", "inputs", "[", "j", "]", ")", "\n", "outputs", ".", "append", "(", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "predict_out", ")", ")", "\n", "", "outputs", "=", "sum", "(", "outputs", ")", "\n", "if", "start_test", ":", "\n", "                    ", "all_output", "=", "outputs", ".", "data", ".", "float", "(", ")", "\n", "all_label", "=", "labels", ".", "data", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "                    ", "all_output", "=", "torch", ".", "cat", "(", "(", "all_output", ",", "outputs", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "(", "all_label", ",", "labels", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "else", ":", "\n", "            ", "iter_test", "=", "iter", "(", "loader", "[", "\"test\"", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "loader", "[", "'test'", "]", ")", ")", ":", "\n", "                ", "data", "=", "iter_test", ".", "next", "(", ")", "\n", "inputs", "=", "data", "[", "0", "]", "\n", "labels", "=", "data", "[", "1", "]", "\n", "if", "gpu", ":", "\n", "                    ", "inputs", "=", "Variable", "(", "inputs", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "labels", "=", "Variable", "(", "labels", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "_", ",", "outputs", "=", "model", "(", "inputs", ")", "\n", "if", "start_test", ":", "\n", "                    ", "all_output", "=", "outputs", ".", "data", ".", "float", "(", ")", "\n", "all_label", "=", "labels", ".", "data", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "                    ", "all_output", "=", "torch", ".", "cat", "(", "(", "all_output", ",", "outputs", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "(", "all_label", ",", "labels", ".", "data", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "", "_", ",", "predict", "=", "torch", ".", "max", "(", "all_output", ",", "1", ")", "\n", "accuracy", "=", "torch", ".", "sum", "(", "torch", ".", "squeeze", "(", "predict", ")", ".", "float", "(", ")", "==", "all_label", ")", ".", "float", "(", ")", "/", "float", "(", "all_label", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "conf_matrix", "=", "confusion_matrix", "(", "all_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "predict", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "accuracy", ".", "item", "(", ")", ",", "conf_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.eval_da.test": [[88, 204], ["pre_process.image_train", "pre_process.image_train", "data_list.ImageList", "torch.DataLoader", "data_list.ImageList", "torch.DataLoader", "print", "torch.load", "torch.load", "torch.load", "torch.load", "print", "base_network.cuda.load_state_dict", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "base_network.cuda.train", "numpy.set_printoptions", "config[].write", "config[].flush", "print", "pre_process.image_test_10crop", "pre_process.image_test", "open().readlines", "open().readlines", "range", "data_list.ImageList", "torch.DataLoader", "data_list.ImageList", "torch.DataLoader", "torch.load.keys", "[].cpu", "torch.load.keys", "[].cpu", "base_network.cuda.cuda", "eval_da.image_classification_test", "open", "pickle.dump", "data_list.ImageList", "torch.DataLoader", "data_list.ImageList", "torch.DataLoader", "open().readlines", "open().readlines", "utils.distance_classification_test", "os.path.join", "os.path.join", "open", "open", "open().readlines", "open().readlines", "open", "open", "str", "open", "str", "str", "open", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.image_train", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.image_train", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.train_feature.train", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.image_test_10crop", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.pre_process.image_test", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.eval_da.image_classification_test", "home.repos.pwc.inspect_result.HKUST-KnowComp_FisherDA.src.utils.distance_classification_test"], ["", "def", "test", "(", "config", ")", ":", "\n", "## set pre-process", "\n", "    ", "prep_dict", "=", "{", "}", "\n", "prep_config", "=", "config", "[", "\"prep\"", "]", "\n", "prep_dict", "[", "\"source\"", "]", "=", "prep", ".", "image_train", "(", "resize_size", "=", "prep_config", "[", "\"resize_size\"", "]", ",", "crop_size", "=", "prep_config", "[", "\"crop_size\"", "]", ")", "\n", "prep_dict", "[", "\"target\"", "]", "=", "prep", ".", "image_train", "(", "resize_size", "=", "prep_config", "[", "\"resize_size\"", "]", ",", "crop_size", "=", "prep_config", "[", "\"crop_size\"", "]", ")", "\n", "if", "prep_config", "[", "\"test_10crop\"", "]", ":", "\n", "        ", "prep_dict", "[", "\"test\"", "]", "=", "prep", ".", "image_test_10crop", "(", "resize_size", "=", "prep_config", "[", "\"resize_size\"", "]", ",", "crop_size", "=", "prep_config", "[", "\"crop_size\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "prep_dict", "[", "\"test\"", "]", "=", "prep", ".", "image_test", "(", "resize_size", "=", "prep_config", "[", "\"resize_size\"", "]", ",", "crop_size", "=", "prep_config", "[", "\"crop_size\"", "]", ")", "\n", "\n", "## prepare data", "\n", "", "dsets", "=", "{", "}", "\n", "dset_loaders", "=", "{", "}", "\n", "data_config", "=", "config", "[", "\"data\"", "]", "\n", "\n", "dsets", "[", "\"source\"", "]", "=", "ImageList", "(", "open", "(", "data_config", "[", "\"source\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "transform", "=", "prep_dict", "[", "\"source\"", "]", ")", "\n", "dset_loaders", "[", "\"source\"", "]", "=", "util_data", ".", "DataLoader", "(", "dsets", "[", "\"source\"", "]", ",", "batch_size", "=", "data_config", "[", "\"source\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "dsets", "[", "\"target\"", "]", "=", "ImageList", "(", "open", "(", "data_config", "[", "\"target\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "transform", "=", "prep_dict", "[", "\"target\"", "]", ")", "\n", "dset_loaders", "[", "\"target\"", "]", "=", "util_data", ".", "DataLoader", "(", "dsets", "[", "\"target\"", "]", ",", "batch_size", "=", "data_config", "[", "\"target\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "if", "prep_config", "[", "\"test_10crop\"", "]", ":", "\n", "        ", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "dsets", "[", "\"test\"", "+", "str", "(", "i", ")", "]", "=", "ImageList", "(", "open", "(", "data_config", "[", "\"test\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "transform", "=", "prep_dict", "[", "\"test\"", "]", "[", "\"val\"", "+", "str", "(", "i", ")", "]", ")", "\n", "dset_loaders", "[", "\"test\"", "+", "str", "(", "i", ")", "]", "=", "util_data", ".", "DataLoader", "(", "dsets", "[", "\"test\"", "+", "str", "(", "i", ")", "]", ",", "batch_size", "=", "data_config", "[", "\"test\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "\n", "dsets", "[", "\"target\"", "+", "str", "(", "i", ")", "]", "=", "ImageList", "(", "open", "(", "data_config", "[", "\"target\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "transform", "=", "prep_dict", "[", "\"test\"", "]", "[", "\"val\"", "+", "str", "(", "i", ")", "]", ")", "\n", "dset_loaders", "[", "\"target\"", "+", "str", "(", "i", ")", "]", "=", "util_data", ".", "DataLoader", "(", "dsets", "[", "\"target\"", "+", "str", "(", "i", ")", "]", ",", "batch_size", "=", "data_config", "[", "\"test\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "", "", "else", ":", "\n", "        ", "dsets", "[", "\"test\"", "]", "=", "ImageList", "(", "open", "(", "data_config", "[", "\"test\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "transform", "=", "prep_dict", "[", "\"test\"", "]", ")", "\n", "dset_loaders", "[", "\"test\"", "]", "=", "util_data", ".", "DataLoader", "(", "dsets", "[", "\"test\"", "]", ",", "batch_size", "=", "data_config", "[", "\"test\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "\n", "dsets", "[", "\"target_test\"", "]", "=", "ImageList", "(", "open", "(", "data_config", "[", "\"target\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "transform", "=", "prep_dict", "[", "\"test\"", "]", ")", "\n", "dset_loaders", "[", "\"target_test\"", "]", "=", "util_data", ".", "DataLoader", "(", "dsets", "[", "\"target_test\"", "]", ",", "batch_size", "=", "data_config", "[", "\"test\"", "]", "[", "\"batch_size\"", "]", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "\n", "", "class_num", "=", "config", "[", "\"network\"", "]", "[", "\"params\"", "]", "[", "\"class_num\"", "]", "\n", "\n", "# load checkpoint", "\n", "print", "(", "'load model from {}'", ".", "format", "(", "config", "[", "'ckpt_path'", "]", ")", ")", "\n", "# load in an old way", "\n", "# base_network = torch.load(config[\"ckpt_path\"])[0]", "\n", "# recommended practice", "\n", "ckpt", "=", "torch", ".", "load", "(", "config", "[", "'ckpt_path'", "]", ")", "\n", "print", "(", "'recorded best precision: {:0.4f} at step {}'", ".", "format", "(", "ckpt", "[", "\"precision\"", "]", ",", "ckpt", "[", "\"step\"", "]", ")", ")", "\n", "train_accuracy", "=", "ckpt", "[", "\"precision\"", "]", "\n", "## set base network", "\n", "net_config", "=", "config", "[", "\"network\"", "]", "\n", "base_network", "=", "net_config", "[", "\"name\"", "]", "(", "**", "net_config", "[", "\"params\"", "]", ")", "\n", "base_network", ".", "load_state_dict", "(", "ckpt", "[", "'base_network'", "]", ")", "\n", "\n", "centroids", "=", "None", "\n", "if", "'center_criterion'", "in", "ckpt", ".", "keys", "(", ")", ":", "\n", "        ", "centroids", "=", "ckpt", "[", "'center_criterion'", "]", "[", "'centers'", "]", ".", "cpu", "(", ")", "\n", "", "target_centroids", "=", "None", "\n", "if", "'target_center_criterion'", "in", "ckpt", ".", "keys", "(", ")", ":", "\n", "        ", "target_centroids", "=", "ckpt", "[", "'target_center_criterion'", "]", "[", "'centers'", "]", ".", "cpu", "(", ")", "\n", "\n", "", "use_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_gpu", ":", "\n", "        ", "base_network", "=", "base_network", ".", "cuda", "(", ")", "\n", "\n", "## test", "\n", "", "print", "(", "\"start test: \"", ")", "\n", "base_network", ".", "train", "(", "False", ")", "\n", "if", "config", "[", "\"ly_type\"", "]", "==", "'cosine'", ":", "\n", "        ", "test_acc", ",", "test_confusion_matrix", "=", "image_classification_test", "(", "dset_loaders", ",", "base_network", ",", "test_10crop", "=", "prep_config", "[", "\"test_10crop\"", "]", ",", "gpu", "=", "use_gpu", ")", "\n", "", "elif", "config", "[", "\"ly_type\"", "]", "==", "\"euclidean\"", ":", "\n", "        ", "eval_centroids", "=", "None", "\n", "if", "centroids", "is", "not", "None", ":", "\n", "            ", "eval_centroids", "=", "centroids", "\n", "", "if", "target_centroids", "is", "not", "None", ":", "\n", "            ", "eval_centroids", "=", "target_centroids", "\n", "", "test_acc", ",", "test_confusion_matrix", "=", "utils", ".", "distance_classification_test", "(", "dset_loaders", ",", "base_network", ",", "eval_centroids", ",", "test_10crop", "=", "prep_config", "[", "\"test_10crop\"", "]", ",", "gpu", "=", "use_gpu", ")", "\n", "\n", "# save train/test accuracy as pkl file", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config", "[", "\"output_path\"", "]", ",", "'accuracy.pkl'", ")", ",", "'wb'", ")", "as", "pkl_file", ":", "\n", "        ", "pkl", ".", "dump", "(", "{", "'train'", ":", "train_accuracy", ",", "'test'", ":", "test_acc", "}", ",", "pkl_file", ")", "\n", "\n", "", "np", ".", "set_printoptions", "(", "precision", "=", "2", ")", "\n", "log_str", "=", "\"train precision: {:.5f}\\ttest precision: {:.5f}\\nconfusion matrix:\\n{}\\n\"", ".", "format", "(", "\n", "train_accuracy", ",", "test_acc", ",", "test_confusion_matrix", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "write", "(", "log_str", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "flush", "(", ")", "\n", "print", "(", "log_str", ")", "\n", "\n", "return", "test_acc", "\n", "\n"]]}