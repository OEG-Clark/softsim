{"home.repos.pwc.inspect_result.alinlab_CSI.utils.temperature_scaling.ModelWithTemperature.__init__": [[14, 18], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "ModelWithTemperature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "temperature", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", "*", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.temperature_scaling.ModelWithTemperature.forward": [[19, 22], ["temperature_scaling.ModelWithTemperature.model", "temperature_scaling.ModelWithTemperature.temperature_scale"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.utils.temperature_scaling.ModelWithTemperature.temperature_scale"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "logits", "=", "self", ".", "model", "(", "input", ")", "\n", "return", "self", ".", "temperature_scale", "(", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.temperature_scaling.ModelWithTemperature.temperature_scale": [[23, 30], ["temperature_scaling.ModelWithTemperature.temperature.unsqueeze().expand", "logits.size", "logits.size", "temperature_scaling.ModelWithTemperature.temperature.unsqueeze"], "methods", ["None"], ["", "def", "temperature_scale", "(", "self", ",", "logits", ")", ":", "\n", "        ", "\"\"\"\n        Perform temperature scaling on logits\n        \"\"\"", "\n", "# Expand temperature to match the size of logits", "\n", "temperature", "=", "self", ".", "temperature", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "logits", ".", "size", "(", "0", ")", ",", "logits", ".", "size", "(", "1", ")", ")", "\n", "return", "logits", "/", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.temperature_scaling.ModelWithTemperature.set_temperature": [[32, 75], ["temperature_scaling.ModelWithTemperature.cuda", "torch.nn.CrossEntropyLoss().cuda", "_ECELoss().cuda", "torch.nn.CrossEntropyLoss().cuda.item", "_ECELoss().cuda.item", "print", "torch.optim.LBFGS", "torch.optim.LBFGS.step", "torch.nn.CrossEntropyLoss().cuda.item", "_ECELoss().cuda.item", "print", "print", "torch.no_grad", "torch.cat().cuda", "torch.cat().cuda", "torch.nn.CrossEntropyLoss().cuda.", "nn.CrossEntropyLoss().cuda.backward", "torch.nn.CrossEntropyLoss", "temperature_scaling._ECELoss", "input.cuda.cuda.cuda", "temperature_scaling.ModelWithTemperature.model", "logits_list.append", "labels_list.append", "torch.nn.CrossEntropyLoss().cuda.", "_ECELoss().cuda.", "temperature_scaling.ModelWithTemperature.temperature_scale", "torch.nn.CrossEntropyLoss().cuda.", "_ECELoss().cuda.", "temperature_scaling.ModelWithTemperature.temperature.item", "torch.cat", "torch.cat", "temperature_scaling.ModelWithTemperature.temperature_scale", "temperature_scaling.ModelWithTemperature.temperature_scale"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomHSVFunction.backward", "home.repos.pwc.inspect_result.alinlab_CSI.utils.temperature_scaling.ModelWithTemperature.temperature_scale", "home.repos.pwc.inspect_result.alinlab_CSI.utils.temperature_scaling.ModelWithTemperature.temperature_scale", "home.repos.pwc.inspect_result.alinlab_CSI.utils.temperature_scaling.ModelWithTemperature.temperature_scale"], ["", "def", "set_temperature", "(", "self", ",", "valid_loader", ")", ":", "\n", "        ", "\"\"\"\n        Tune the tempearature of the model (using the validation set).\n        We're going to set it to optimize NLL.\n        valid_loader (DataLoader): validation set loader\n        \"\"\"", "\n", "self", ".", "cuda", "(", ")", "\n", "nll_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "ece_criterion", "=", "_ECELoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# First: collect all the logits and labels for the validation set", "\n", "logits_list", "=", "[", "]", "\n", "labels_list", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "input", ",", "label", "in", "valid_loader", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "logits", "=", "self", ".", "model", "(", "input", ")", "\n", "logits_list", ".", "append", "(", "logits", ")", "\n", "labels_list", ".", "append", "(", "label", ")", "\n", "", "logits", "=", "torch", ".", "cat", "(", "logits_list", ")", ".", "cuda", "(", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels_list", ")", ".", "cuda", "(", ")", "\n", "\n", "# Calculate NLL and ECE before temperature scaling", "\n", "", "before_temperature_nll", "=", "nll_criterion", "(", "logits", ",", "labels", ")", ".", "item", "(", ")", "\n", "before_temperature_ece", "=", "ece_criterion", "(", "logits", ",", "labels", ")", ".", "item", "(", ")", "\n", "print", "(", "'Before temperature - NLL: %.3f, ECE: %.3f'", "%", "(", "before_temperature_nll", ",", "before_temperature_ece", ")", ")", "\n", "\n", "# Next: optimize the temperature w.r.t. NLL", "\n", "optimizer", "=", "optim", ".", "LBFGS", "(", "[", "self", ".", "temperature", "]", ",", "lr", "=", "0.0001", ",", "max_iter", "=", "50000", ")", "\n", "\n", "def", "eval", "(", ")", ":", "\n", "            ", "loss", "=", "nll_criterion", "(", "self", ".", "temperature_scale", "(", "logits", ")", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "return", "loss", "\n", "", "optimizer", ".", "step", "(", "eval", ")", "\n", "\n", "# Calculate NLL and ECE after temperature scaling", "\n", "after_temperature_nll", "=", "nll_criterion", "(", "self", ".", "temperature_scale", "(", "logits", ")", ",", "labels", ")", ".", "item", "(", ")", "\n", "after_temperature_ece", "=", "ece_criterion", "(", "self", ".", "temperature_scale", "(", "logits", ")", ",", "labels", ")", ".", "item", "(", ")", "\n", "print", "(", "'Optimal temperature: %.3f'", "%", "self", ".", "temperature", ".", "item", "(", ")", ")", "\n", "print", "(", "'After temperature - NLL: %.3f, ECE: %.3f'", "%", "(", "after_temperature_nll", ",", "after_temperature_ece", ")", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.temperature_scaling._ECELoss.__init__": [[96, 104], ["torch.nn.Module.__init__", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "n_bins", "=", "15", ")", ":", "\n", "        ", "\"\"\"\n        n_bins (int): number of confidence interval bins\n        \"\"\"", "\n", "super", "(", "_ECELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bin_boundaries", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "n_bins", "+", "1", ")", "\n", "self", ".", "bin_lowers", "=", "bin_boundaries", "[", ":", "-", "1", "]", "\n", "self", ".", "bin_uppers", "=", "bin_boundaries", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.temperature_scaling._ECELoss.forward": [[105, 121], ["torch.nn.functional.softmax", "torch.max", "predictions.eq", "torch.zeros", "zip", "in_bin.float().mean", "confidences.gt", "confidences.le", "in_bin.float().mean.item", "accuracies[].float().mean", "confidences[].mean", "bin_lower.item", "bin_upper.item", "in_bin.float", "torch.abs", "accuracies[].float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "        ", "softmaxes", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "confidences", ",", "predictions", "=", "torch", ".", "max", "(", "softmaxes", ",", "1", ")", "\n", "accuracies", "=", "predictions", ".", "eq", "(", "labels", ")", "\n", "\n", "ece", "=", "torch", ".", "zeros", "(", "1", ",", "device", "=", "logits", ".", "device", ")", "\n", "for", "bin_lower", ",", "bin_upper", "in", "zip", "(", "self", ".", "bin_lowers", ",", "self", ".", "bin_uppers", ")", ":", "\n", "# Calculated |confidence - accuracy| in each bin", "\n", "            ", "in_bin", "=", "confidences", ".", "gt", "(", "bin_lower", ".", "item", "(", ")", ")", "*", "confidences", ".", "le", "(", "bin_upper", ".", "item", "(", ")", ")", "\n", "prop_in_bin", "=", "in_bin", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "if", "prop_in_bin", ".", "item", "(", ")", ">", "0", ":", "\n", "                ", "accuracy_in_bin", "=", "accuracies", "[", "in_bin", "]", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "avg_confidence_in_bin", "=", "confidences", "[", "in_bin", "]", ".", "mean", "(", ")", "\n", "ece", "+=", "torch", ".", "abs", "(", "avg_confidence_in_bin", "-", "accuracy_in_bin", ")", "*", "prop_in_bin", "\n", "\n", "", "", "return", "ece", "", "", "", ""]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.__init__": [[17, 36], ["utils.Logger._make_dir", "utils.Logger.set_dir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "input", "len", "shutil.rmtree", "exit", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger._make_dir", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.set_dir"], ["def", "__init__", "(", "self", ",", "fn", ",", "ask", "=", "True", ",", "local_rank", "=", "0", ")", ":", "\n", "        ", "self", ".", "local_rank", "=", "local_rank", "\n", "if", "self", ".", "local_rank", "==", "0", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "\"./logs/\"", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "\"./logs/\"", ")", "\n", "\n", "", "logdir", "=", "self", ".", "_make_dir", "(", "fn", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "logdir", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "logdir", ")", "\n", "\n", "", "if", "len", "(", "os", ".", "listdir", "(", "logdir", ")", ")", "!=", "0", "and", "ask", ":", "\n", "                ", "ans", "=", "input", "(", "\"log_dir is not empty. All data inside log_dir will be deleted. \"", "\n", "\"Will you proceed [y/N]? \"", ")", "\n", "if", "ans", "in", "[", "'y'", ",", "'Y'", "]", ":", "\n", "                    ", "shutil", ".", "rmtree", "(", "logdir", ")", "\n", "", "else", ":", "\n", "                    ", "exit", "(", "1", ")", "\n", "\n", "", "", "self", ".", "set_dir", "(", "logdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger._make_dir": [[37, 41], ["datetime.datetime.datetime.today().strftime", "datetime.datetime.datetime.today"], "methods", ["None"], ["", "", "def", "_make_dir", "(", "self", ",", "fn", ")", ":", "\n", "        ", "today", "=", "datetime", ".", "today", "(", ")", ".", "strftime", "(", "\"%y%m%d\"", ")", "\n", "logdir", "=", "'logs/'", "+", "fn", "\n", "return", "logdir", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.set_dir": [[42, 48], ["tensorboardX.SummaryWriter", "open", "os.path.exists", "os.mkdir", "os.path.join"], "methods", ["None"], ["", "def", "set_dir", "(", "self", ",", "logdir", ",", "log_fn", "=", "'log.txt'", ")", ":", "\n", "        ", "self", ".", "logdir", "=", "logdir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "logdir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "logdir", ")", "\n", "", "self", ".", "writer", "=", "SummaryWriter", "(", "logdir", ")", "\n", "self", ".", "log_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "logdir", ",", "log_fn", ")", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.log": [[49, 56], ["utils.Logger.log_file.write", "utils.Logger.log_file.flush", "print", "sys.stdout.flush", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "string", ")", ":", "\n", "        ", "if", "self", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "log_file", ".", "write", "(", "'[%s] %s'", "%", "(", "datetime", ".", "now", "(", ")", ",", "string", ")", "+", "'\\n'", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "\n", "print", "(", "'[%s] %s'", "%", "(", "datetime", ".", "now", "(", ")", ",", "string", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.log_dirname": [[57, 64], ["utils.Logger.log_file.write", "utils.Logger.log_file.flush", "print", "sys.stdout.flush"], "methods", ["None"], ["", "", "def", "log_dirname", "(", "self", ",", "string", ")", ":", "\n", "        ", "if", "self", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "log_file", ".", "write", "(", "'%s (%s)'", "%", "(", "string", ",", "self", ".", "logdir", ")", "+", "'\\n'", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "\n", "print", "(", "'%s (%s)'", "%", "(", "string", ",", "self", ".", "logdir", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary": [[65, 69], ["utils.Logger.writer.add_scalar"], "methods", ["None"], ["", "", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "if", "self", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "tag", ",", "value", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.image_summary": [[70, 74], ["utils.Logger.writer.add_image"], "methods", ["None"], ["", "", "def", "image_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a list of images.\"\"\"", "\n", "if", "self", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "writer", ".", "add_image", "(", "tag", ",", "images", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.histo_summary": [[75, 79], ["utils.Logger.writer.add_histogram"], "methods", ["None"], ["", "", "def", "histo_summary", "(", "self", ",", "tag", ",", "values", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a histogram of the tensor of values.\"\"\"", "\n", "if", "self", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "writer", ".", "add_histogram", "(", "tag", ",", "values", ",", "step", ",", "bins", "=", "'auto'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.__init__": [[84, 89], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "value", "=", "0", "\n", "self", ".", "average", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.reset": [[90, 95], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "value", "=", "0", "\n", "self", ".", "average", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update": [[96, 101], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "value", "=", "value", "\n", "self", ".", "sum", "+=", "value", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "average", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.load_checkpoint": [[103, 126], ["print", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "torch.load", "torch.load", "os.path.join", "os.path.join", "os.path.join", "NotImplementedError", "open", "pickle.load"], "function", ["None"], ["", "", "def", "load_checkpoint", "(", "logdir", ",", "mode", "=", "'last'", ")", ":", "\n", "    ", "if", "mode", "==", "'last'", ":", "\n", "        ", "model_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'last.model'", ")", "\n", "optim_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'last.optim'", ")", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'last.config'", ")", "\n", "", "elif", "mode", "==", "'best'", ":", "\n", "        ", "model_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'best.model'", ")", "\n", "optim_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'best.optim'", ")", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'best.config'", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "print", "(", "\"=> Loading checkpoint from '{}'\"", ".", "format", "(", "logdir", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "        ", "model_state", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "optim_state", "=", "torch", ".", "load", "(", "optim_path", ")", "\n", "with", "open", "(", "config_path", ",", "'rb'", ")", "as", "handle", ":", "\n", "            ", "cfg", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", "\n", "\n", "", "return", "model_state", ",", "optim_state", ",", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.save_checkpoint": [[128, 140], ["os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "open", "pickle.dump"], "function", ["None"], ["", "def", "save_checkpoint", "(", "epoch", ",", "model_state", ",", "optim_state", ",", "logdir", ")", ":", "\n", "    ", "last_model", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'last.model'", ")", "\n", "last_optim", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'last.optim'", ")", "\n", "last_config", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'last.config'", ")", "\n", "\n", "opt", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "torch", ".", "save", "(", "model_state", ",", "last_model", ")", "\n", "torch", ".", "save", "(", "optim_state", ",", "last_optim", ")", "\n", "with", "open", "(", "last_config", ",", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "opt", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.load_linear_checkpoint": [[142, 156], ["print", "os.path.exists", "os.path.join", "torch.load", "os.path.join", "NotImplementedError"], "function", ["None"], ["", "", "def", "load_linear_checkpoint", "(", "logdir", ",", "mode", "=", "'last'", ")", ":", "\n", "    ", "if", "mode", "==", "'last'", ":", "\n", "        ", "linear_optim_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'last.linear_optim'", ")", "\n", "", "elif", "mode", "==", "'best'", ":", "\n", "        ", "linear_optim_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'best.linear_optim'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "print", "(", "\"=> Loading linear optimizer checkpoint from '{}'\"", ".", "format", "(", "logdir", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "linear_optim_path", ")", ":", "\n", "        ", "linear_optim_state", "=", "torch", ".", "load", "(", "linear_optim_path", ")", "\n", "return", "linear_optim_state", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.save_linear_checkpoint": [[158, 161], ["os.path.join", "torch.save"], "function", ["None"], ["", "", "def", "save_linear_checkpoint", "(", "linear_optim_state", ",", "logdir", ")", ":", "\n", "    ", "last_linear_optim", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'last.linear_optim'", ")", "\n", "torch", ".", "save", "(", "linear_optim_state", ",", "last_linear_optim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.set_random_seed": [[163, 168], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.normalize": [[170, 172], ["x.norm"], "function", ["None"], ["", "def", "normalize", "(", "x", ",", "dim", "=", "1", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "return", "x", "/", "(", "x", ".", "norm", "(", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.make_model_diagrams": [[174, 204], ["probs.max", "torch.eq", "matplotlib.pyplot.subplots", "torch.linspace", "rel_ax.bar", "rel_ax.bar", "rel_ax.plot", "rel_ax.legend", "rel_ax.set_ylabel", "rel_ax.set_xlabel", "f.tight_layout", "torch.mean", "torch.mean", "bin_corrects.numpy", "confidences.ge", "confidences.lt", "zip", "bin_corrects.numpy"], "function", ["None"], ["", "def", "make_model_diagrams", "(", "probs", ",", "labels", ",", "n_bins", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    outputs - a torch tensor (size n x num_classes) with the outputs from the final linear layer\n    - NOT the softmaxes\n    labels - a torch tensor (size n) with the labels\n    \"\"\"", "\n", "confidences", ",", "predictions", "=", "probs", ".", "max", "(", "1", ")", "\n", "accuracies", "=", "torch", ".", "eq", "(", "predictions", ",", "labels", ")", "\n", "f", ",", "rel_ax", "=", "plt", ".", "subplots", "(", "1", ",", "2", ",", "figsize", "=", "(", "4", ",", "2.5", ")", ")", "\n", "\n", "# Reliability diagram", "\n", "bins", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "n_bins", "+", "1", ")", "\n", "bins", "[", "-", "1", "]", "=", "1.0001", "\n", "width", "=", "bins", "[", "1", "]", "-", "bins", "[", "0", "]", "\n", "bin_indices", "=", "[", "confidences", ".", "ge", "(", "bin_lower", ")", "*", "confidences", ".", "lt", "(", "bin_upper", ")", "for", "bin_lower", ",", "bin_upper", "in", "\n", "zip", "(", "bins", "[", ":", "-", "1", "]", ",", "bins", "[", "1", ":", "]", ")", "]", "\n", "bin_corrects", "=", "[", "torch", ".", "mean", "(", "accuracies", "[", "bin_index", "]", ")", "for", "bin_index", "in", "bin_indices", "]", "\n", "bin_scores", "=", "[", "torch", ".", "mean", "(", "confidences", "[", "bin_index", "]", ")", "for", "bin_index", "in", "bin_indices", "]", "\n", "\n", "confs", "=", "rel_ax", ".", "bar", "(", "bins", "[", ":", "-", "1", "]", ",", "bin_corrects", ".", "numpy", "(", ")", ",", "width", "=", "width", ")", "\n", "gaps", "=", "rel_ax", ".", "bar", "(", "bins", "[", ":", "-", "1", "]", ",", "(", "bin_scores", "-", "bin_corrects", ")", ".", "numpy", "(", ")", ",", "bottom", "=", "bin_corrects", ".", "numpy", "(", ")", ",", "color", "=", "[", "1", ",", "0.7", ",", "0.7", "]", ",", "\n", "alpha", "=", "0.5", ",", "width", "=", "width", ",", "hatch", "=", "'//'", ",", "edgecolor", "=", "'r'", ")", "\n", "rel_ax", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "'--'", ",", "color", "=", "'gray'", ")", "\n", "rel_ax", ".", "legend", "(", "[", "confs", ",", "gaps", "]", ",", "[", "'Outputs'", ",", "'Gap'", "]", ",", "loc", "=", "'best'", ",", "fontsize", "=", "'small'", ")", "\n", "\n", "# Clean up", "\n", "rel_ax", ".", "set_ylabel", "(", "'Accuracy'", ")", "\n", "rel_ax", ".", "set_xlabel", "(", "'Confidence'", ")", "\n", "f", ".", "tight_layout", "(", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.error_k": [[20, 34], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "results.append", "target.view", "correct[].view().float", "correct[].view().float().sum.mul_", "correct[].view"], "function", ["None"], ["def", "error_k", "(", "output", ",", "target", ",", "ks", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "max_k", "=", "max", "(", "ks", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "max_k", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "results", "=", "[", "]", "\n", "for", "k", "in", "ks", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "results", ".", "append", "(", "100.0", "-", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.test_classifier": [[36, 83], ["utils.utils.AverageMeter", "utils.utils.AverageMeter", "model.eval", "enumerate", "log_", "model.train", "images.size", "evals.error_k", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "logger.scalar_summary", "logger.scalar_summary", "images.to", "labels.to", "range", "model", "top1.item", "ece_criterion", "ece.item", "log_", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "model"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.unsup.simclr.train", "home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.error_k", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary"], ["", "def", "test_classifier", "(", "P", ",", "model", ",", "loader", ",", "steps", ",", "marginal", "=", "False", ",", "logger", "=", "None", ")", ":", "\n", "    ", "error_top1", "=", "AverageMeter", "(", ")", "\n", "error_calibration", "=", "AverageMeter", "(", ")", "\n", "\n", "if", "logger", "is", "None", ":", "\n", "        ", "log_", "=", "print", "\n", "", "else", ":", "\n", "        ", "log_", "=", "logger", ".", "log", "\n", "\n", "# Switch to evaluate mode", "\n", "", "mode", "=", "model", ".", "training", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "n", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "batch_size", "=", "images", ".", "size", "(", "0", ")", "\n", "\n", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "\n", "if", "marginal", ":", "\n", "            ", "outputs", "=", "0", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "rot_images", "=", "torch", ".", "rot90", "(", "images", ",", "i", ",", "(", "2", ",", "3", ")", ")", "\n", "_", ",", "outputs_aux", "=", "model", "(", "rot_images", ",", "joint", "=", "True", ")", "\n", "outputs", "+=", "outputs_aux", "[", "'joint'", "]", "[", ":", ",", "P", ".", "n_classes", "*", "i", ":", "P", ".", "n_classes", "*", "(", "i", "+", "1", ")", "]", "/", "4.", "\n", "", "", "else", ":", "\n", "            ", "outputs", "=", "model", "(", "images", ")", "\n", "\n", "", "top1", ",", "=", "error_k", "(", "outputs", ".", "data", ",", "labels", ",", "ks", "=", "(", "1", ",", ")", ")", "\n", "error_top1", ".", "update", "(", "top1", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "ece", "=", "ece_criterion", "(", "outputs", ",", "labels", ")", "*", "100", "\n", "error_calibration", ".", "update", "(", "ece", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "if", "n", "%", "100", "==", "0", ":", "\n", "            ", "log_", "(", "'[Test %3d] [Test@1 %.3f] [ECE %.3f]'", "%", "\n", "(", "n", ",", "error_top1", ".", "value", ",", "error_calibration", ".", "value", ")", ")", "\n", "\n", "", "", "log_", "(", "' * [Error@1 %.3f] [ECE %.3f]'", "%", "\n", "(", "error_top1", ".", "average", ",", "error_calibration", ".", "average", ")", ")", "\n", "\n", "if", "logger", "is", "not", "None", ":", "\n", "        ", "logger", ".", "scalar_summary", "(", "'eval/clean_error'", ",", "error_top1", ".", "average", ",", "steps", ")", "\n", "logger", ".", "scalar_summary", "(", "'eval/ece'", ",", "error_calibration", ".", "average", ",", "steps", ")", "\n", "\n", "", "model", ".", "train", "(", "mode", ")", "\n", "\n", "return", "error_top1", ".", "average", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.eval_ood_detection": [[85, 115], ["dict", "ood_loaders.keys", "dict", "evals.get_ood_score_func", "evals.get_scores", "ood_loaders.items", "numpy.save", "evals.get_scores_interp", "evals.get_auroc", "evals.get_scores", "evals.get_auroc", "numpy.save"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.get_ood_score_func", "home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre.get_scores", "home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.get_scores_interp", "home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.get_auroc", "home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre.get_scores", "home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.get_auroc"], ["", "def", "eval_ood_detection", "(", "P", ",", "model", ",", "id_loader", ",", "ood_loaders", ",", "ood_scores", ",", "train_loader", "=", "None", ",", "simclr_aug", "=", "None", ")", ":", "\n", "    ", "auroc_dict", "=", "dict", "(", ")", "\n", "for", "ood", "in", "ood_loaders", ".", "keys", "(", ")", ":", "\n", "        ", "auroc_dict", "[", "ood", "]", "=", "dict", "(", ")", "\n", "\n", "", "for", "ood_score", "in", "ood_scores", ":", "\n", "# compute scores for ID and OOD samples", "\n", "        ", "score_func", "=", "get_ood_score_func", "(", "P", ",", "model", ",", "ood_score", ",", "simclr_aug", "=", "simclr_aug", ")", "\n", "\n", "save_path", "=", "f'plot/score_in_{P.dataset}_{ood_score}'", "\n", "if", "P", ".", "one_class_idx", "is", "not", "None", ":", "\n", "            ", "save_path", "+=", "f'_{P.one_class_idx}'", "\n", "\n", "", "scores_id", "=", "get_scores", "(", "id_loader", ",", "score_func", ")", "\n", "\n", "if", "P", ".", "save_score", ":", "\n", "            ", "np", ".", "save", "(", "f'{save_path}.npy'", ",", "scores_id", ")", "\n", "\n", "", "for", "ood", ",", "ood_loader", "in", "ood_loaders", ".", "items", "(", ")", ":", "\n", "            ", "if", "ood", "==", "'interp'", ":", "\n", "                ", "scores_ood", "=", "get_scores_interp", "(", "id_loader", ",", "score_func", ")", "\n", "auroc_dict", "[", "'interp'", "]", "[", "ood_score", "]", "=", "get_auroc", "(", "scores_id", ",", "scores_ood", ")", "\n", "", "else", ":", "\n", "                ", "scores_ood", "=", "get_scores", "(", "ood_loader", ",", "score_func", ")", "\n", "auroc_dict", "[", "ood", "]", "[", "ood_score", "]", "=", "get_auroc", "(", "scores_id", ",", "scores_ood", ")", "\n", "\n", "", "if", "P", ".", "save_score", ":", "\n", "                ", "np", ".", "save", "(", "f'{save_path}_out_{ood}.npy'", ",", "scores_ood", ")", "\n", "\n", "", "", "", "return", "auroc_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.get_ood_score_func": [[117, 121], ["evals.compute_ood_score"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.compute_ood_score"], ["", "def", "get_ood_score_func", "(", "P", ",", "model", ",", "ood_score", ",", "simclr_aug", "=", "None", ")", ":", "\n", "    ", "def", "score_func", "(", "x", ")", ":", "\n", "        ", "return", "compute_ood_score", "(", "P", ",", "model", ",", "ood_score", ",", "x", ",", "simclr_aug", "=", "simclr_aug", ")", "\n", "", "return", "score_func", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.get_scores": [[123, 131], ["enumerate", "numpy.concatenate", "evals.get_ood_score_func.score_func", "scores.append", "x.to", "score_func.detach().cpu().numpy", "score_func.dim", "score_func.size", "x.size", "score_func.detach().cpu", "score_func.detach"], "function", ["None"], ["", "def", "get_scores", "(", "loader", ",", "score_func", ")", ":", "\n", "    ", "scores", "=", "[", "]", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "s", "=", "score_func", "(", "x", ".", "to", "(", "device", ")", ")", "\n", "assert", "s", ".", "dim", "(", ")", "==", "1", "and", "s", ".", "size", "(", "0", ")", "==", "x", ".", "size", "(", "0", ")", "\n", "\n", "scores", ".", "append", "(", "s", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "np", ".", "concatenate", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.get_scores_interp": [[133, 143], ["enumerate", "numpy.concatenate", "evals.get_ood_score_func.score_func", "scores.append", "x_interp.to", "score_func.detach().cpu().numpy", "score_func.dim", "score_func.size", "x.size", "score_func.detach().cpu", "score_func.detach"], "function", ["None"], ["", "def", "get_scores_interp", "(", "loader", ",", "score_func", ")", ":", "\n", "    ", "scores", "=", "[", "]", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "x_interp", "=", "(", "x", "+", "last", ")", "/", "2", "if", "i", ">", "0", "else", "x", "# omit the first batch, assume batch sizes are equal", "\n", "last", "=", "x", "# save the last batch", "\n", "s", "=", "score_func", "(", "x_interp", ".", "to", "(", "device", ")", ")", "\n", "assert", "s", ".", "dim", "(", ")", "==", "1", "and", "s", ".", "size", "(", "0", ")", "==", "x", ".", "size", "(", "0", ")", "\n", "\n", "scores", ".", "append", "(", "s", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "np", ".", "concatenate", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.get_auroc": [[145, 149], ["numpy.concatenate", "numpy.concatenate", "sklearn.metrics.roc_auc_score", "numpy.ones_like", "numpy.zeros_like"], "function", ["None"], ["", "def", "get_auroc", "(", "scores_id", ",", "scores_ood", ")", ":", "\n", "    ", "scores", "=", "np", ".", "concatenate", "(", "[", "scores_id", ",", "scores_ood", "]", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones_like", "(", "scores_id", ")", ",", "np", ".", "zeros_like", "(", "scores_ood", ")", "]", ")", "\n", "return", "roc_auc_score", "(", "labels", ",", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.compute_ood_score": [[151, 189], ["model.eval", "model", "output_aux[].norm", "evals.get_features", "range", "sum", "len", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "scores.append", "sum", "len", "model", "torch.softmax().max", "range", "NotImplementedError", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "model", "torch.softmax().max", "torch.softmax", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre.get_features"], ["", "def", "compute_ood_score", "(", "P", ",", "model", ",", "ood_score", ",", "x", ",", "simclr_aug", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "if", "ood_score", "==", "'clean_norm'", ":", "\n", "        ", "_", ",", "output_aux", "=", "model", "(", "x", ",", "penultimate", "=", "True", ",", "simclr", "=", "True", ")", "\n", "score", "=", "output_aux", "[", "P", ".", "ood_layer", "]", ".", "norm", "(", "dim", "=", "1", ")", "\n", "return", "score", "\n", "\n", "", "elif", "ood_score", "==", "'similar'", ":", "\n", "        ", "assert", "simclr_aug", "is", "not", "None", "# require custom simclr augmentation", "\n", "sample_num", "=", "2", "# fast evaluation", "\n", "feats", "=", "get_features", "(", "model", ",", "simclr_aug", ",", "x", ",", "layer", "=", "P", ".", "ood_layer", ",", "sample_num", "=", "sample_num", ")", "\n", "feats_avg", "=", "sum", "(", "feats", ")", "/", "len", "(", "feats", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "for", "seed", "in", "range", "(", "sample_num", ")", ":", "\n", "            ", "sim", "=", "torch", ".", "cosine_similarity", "(", "feats", "[", "seed", "]", ",", "feats_avg", ")", "\n", "scores", ".", "append", "(", "sim", ")", "\n", "", "return", "sum", "(", "scores", ")", "/", "len", "(", "scores", ")", "\n", "\n", "", "elif", "ood_score", "==", "'baseline'", ":", "\n", "        ", "outputs", ",", "outputs_aux", "=", "model", "(", "x", ",", "penultimate", "=", "True", ")", "\n", "scores", "=", "F", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "return", "scores", "\n", "\n", "", "elif", "ood_score", "==", "'baseline_marginalized'", ":", "\n", "\n", "        ", "total_outputs", "=", "0", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "x_rot", "=", "torch", ".", "rot90", "(", "x", ",", "i", ",", "(", "2", ",", "3", ")", ")", "\n", "outputs", ",", "outputs_aux", "=", "model", "(", "x_rot", ",", "penultimate", "=", "True", ",", "joint", "=", "True", ")", "\n", "total_outputs", "+=", "outputs_aux", "[", "'joint'", "]", "[", ":", ",", "P", ".", "n_classes", "*", "i", ":", "P", ".", "n_classes", "*", "(", "i", "+", "1", ")", "]", "\n", "\n", "", "scores", "=", "F", ".", "softmax", "(", "total_outputs", "/", "4.", ",", "dim", "=", "1", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "return", "scores", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.get_features": [[191, 202], ["model.eval", "range", "utils.utils.set_random_seed", "simclr_aug", "feats.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.datasets.lsun_fix_preprocess.set_random_seed"], ["", "", "def", "get_features", "(", "model", ",", "simclr_aug", ",", "x", ",", "layer", "=", "'simclr'", ",", "sample_num", "=", "1", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "feats", "=", "[", "]", "\n", "for", "seed", "in", "range", "(", "sample_num", ")", ":", "\n", "        ", "set_random_seed", "(", "seed", ")", "\n", "x_t", "=", "simclr_aug", "(", "x", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "output_aux", "=", "model", "(", "x_t", ",", "penultimate", "=", "True", ",", "simclr", "=", "True", ",", "shift", "=", "True", ")", "\n", "", "feats", ".", "append", "(", "output_aux", "[", "layer", "]", ")", "\n", "", "return", "feats", "\n", "", ""]], "home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre.eval_ood_detection": [[17, 105], ["dict", "ood_loaders.keys", "os.path.join", "print", "ood_pre.get_features", "feats_train[].chunk", "print", "range", "print", "print", "print", "ood_pre.get_features", "dict", "ood_loaders.items", "print", "get_scores().numpy", "dict", "dict.items", "dict", "len", "os.path.split", "f.mean", "P.axis.append", "f.mean", "f.mean", "f_sim[].norm", "weight_sim.append", "weight_shi.append", "get_scores().numpy", "evals.evals.get_auroc", "numpy.concatenate", "evals.evals.get_auroc", "print", "ood_pre.print_score", "dict.items", "utils.utils.normalize().to", "feats_train[].chunk", "feats_train[].chunk", "ValueError", "ood_pre.get_features", "ood_pre.get_features", "ood_pre.get_scores", "np.concatenate.append", "ood_pre.print_score", "map", "f_sim[].norm.mean().item", "shi_mean.mean().item", "map", "map", "ood_pre.get_scores", "utils.utils.normalize", "str", "f_sim[].norm.mean", "shi_mean.mean", "len"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre.get_features", "home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre.get_features", "home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.get_auroc", "home.repos.pwc.inspect_result.alinlab_CSI.evals.evals.get_auroc", "home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre.print_score", "home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre.get_features", "home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre.get_features", "home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre.get_scores", "home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre.print_score", "home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre.get_scores", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.normalize"], ["def", "eval_ood_detection", "(", "P", ",", "model", ",", "id_loader", ",", "ood_loaders", ",", "ood_scores", ",", "train_loader", "=", "None", ",", "simclr_aug", "=", "None", ")", ":", "\n", "    ", "auroc_dict", "=", "dict", "(", ")", "\n", "for", "ood", "in", "ood_loaders", ".", "keys", "(", ")", ":", "\n", "        ", "auroc_dict", "[", "ood", "]", "=", "dict", "(", ")", "\n", "\n", "", "assert", "len", "(", "ood_scores", ")", "==", "1", "# assume single ood_score for simplicity", "\n", "ood_score", "=", "ood_scores", "[", "0", "]", "\n", "\n", "base_path", "=", "os", ".", "path", ".", "split", "(", "P", ".", "load_path", ")", "[", "0", "]", "# checkpoint directory", "\n", "\n", "prefix", "=", "f'{P.ood_samples}'", "\n", "if", "P", ".", "resize_fix", ":", "\n", "        ", "prefix", "+=", "f'_resize_fix_{P.resize_factor}'", "\n", "", "else", ":", "\n", "        ", "prefix", "+=", "f'_resize_range_{P.resize_factor}'", "\n", "\n", "", "prefix", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "f'feats_{prefix}'", ")", "\n", "\n", "kwargs", "=", "{", "\n", "'simclr_aug'", ":", "simclr_aug", ",", "\n", "'sample_num'", ":", "P", ".", "ood_samples", ",", "\n", "'layers'", ":", "P", ".", "ood_layer", ",", "\n", "}", "\n", "\n", "print", "(", "'Pre-compute global statistics...'", ")", "\n", "feats_train", "=", "get_features", "(", "P", ",", "f'{P.dataset}_train'", ",", "model", ",", "train_loader", ",", "prefix", "=", "prefix", ",", "**", "kwargs", ")", "# (M, T, d)", "\n", "\n", "P", ".", "axis", "=", "[", "]", "\n", "for", "f", "in", "feats_train", "[", "'simclr'", "]", ".", "chunk", "(", "P", ".", "K_shift", ",", "dim", "=", "1", ")", ":", "\n", "        ", "axis", "=", "f", ".", "mean", "(", "dim", "=", "1", ")", "# (M, d)", "\n", "P", ".", "axis", ".", "append", "(", "normalize", "(", "axis", ",", "dim", "=", "1", ")", ".", "to", "(", "device", ")", ")", "\n", "", "print", "(", "'axis size: '", "+", "' '", ".", "join", "(", "map", "(", "lambda", "x", ":", "str", "(", "len", "(", "x", ")", ")", ",", "P", ".", "axis", ")", ")", ")", "\n", "\n", "f_sim", "=", "[", "f", ".", "mean", "(", "dim", "=", "1", ")", "for", "f", "in", "feats_train", "[", "'simclr'", "]", ".", "chunk", "(", "P", ".", "K_shift", ",", "dim", "=", "1", ")", "]", "# list of (M, d)", "\n", "f_shi", "=", "[", "f", ".", "mean", "(", "dim", "=", "1", ")", "for", "f", "in", "feats_train", "[", "'shift'", "]", ".", "chunk", "(", "P", ".", "K_shift", ",", "dim", "=", "1", ")", "]", "# list of (M, 4)", "\n", "\n", "weight_sim", "=", "[", "]", "\n", "weight_shi", "=", "[", "]", "\n", "for", "shi", "in", "range", "(", "P", ".", "K_shift", ")", ":", "\n", "        ", "sim_norm", "=", "f_sim", "[", "shi", "]", ".", "norm", "(", "dim", "=", "1", ")", "# (M)", "\n", "shi_mean", "=", "f_shi", "[", "shi", "]", "[", ":", ",", "shi", "]", "# (M)", "\n", "weight_sim", ".", "append", "(", "1", "/", "sim_norm", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "weight_shi", ".", "append", "(", "1", "/", "shi_mean", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "ood_score", "==", "'simclr'", ":", "\n", "        ", "P", ".", "weight_sim", "=", "[", "1", "]", "\n", "P", ".", "weight_shi", "=", "[", "0", "]", "\n", "", "elif", "ood_score", "==", "'CSI'", ":", "\n", "        ", "P", ".", "weight_sim", "=", "weight_sim", "\n", "P", ".", "weight_shi", "=", "weight_shi", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "\n", "", "print", "(", "f'weight_sim:\\t'", "+", "'\\t'", ".", "join", "(", "map", "(", "'{:.4f}'", ".", "format", ",", "P", ".", "weight_sim", ")", ")", ")", "\n", "print", "(", "f'weight_shi:\\t'", "+", "'\\t'", ".", "join", "(", "map", "(", "'{:.4f}'", ".", "format", ",", "P", ".", "weight_shi", ")", ")", ")", "\n", "\n", "print", "(", "'Pre-compute features...'", ")", "\n", "feats_id", "=", "get_features", "(", "P", ",", "P", ".", "dataset", ",", "model", ",", "id_loader", ",", "prefix", "=", "prefix", ",", "**", "kwargs", ")", "# (N, T, d)", "\n", "feats_ood", "=", "dict", "(", ")", "\n", "for", "ood", ",", "ood_loader", "in", "ood_loaders", ".", "items", "(", ")", ":", "\n", "        ", "if", "ood", "==", "'interp'", ":", "\n", "            ", "feats_ood", "[", "ood", "]", "=", "get_features", "(", "P", ",", "ood", ",", "model", ",", "id_loader", ",", "interp", "=", "True", ",", "prefix", "=", "prefix", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "feats_ood", "[", "ood", "]", "=", "get_features", "(", "P", ",", "ood", ",", "model", ",", "ood_loader", ",", "prefix", "=", "prefix", ",", "**", "kwargs", ")", "\n", "\n", "", "", "print", "(", "f'Compute OOD scores... (score: {ood_score})'", ")", "\n", "scores_id", "=", "get_scores", "(", "P", ",", "feats_id", ",", "ood_score", ")", ".", "numpy", "(", ")", "\n", "scores_ood", "=", "dict", "(", ")", "\n", "if", "P", ".", "one_class_idx", "is", "not", "None", ":", "\n", "        ", "one_class_score", "=", "[", "]", "\n", "\n", "", "for", "ood", ",", "feats", "in", "feats_ood", ".", "items", "(", ")", ":", "\n", "        ", "scores_ood", "[", "ood", "]", "=", "get_scores", "(", "P", ",", "feats", ",", "ood_score", ")", ".", "numpy", "(", ")", "\n", "auroc_dict", "[", "ood", "]", "[", "ood_score", "]", "=", "get_auroc", "(", "scores_id", ",", "scores_ood", "[", "ood", "]", ")", "\n", "if", "P", ".", "one_class_idx", "is", "not", "None", ":", "\n", "            ", "one_class_score", ".", "append", "(", "scores_ood", "[", "ood", "]", ")", "\n", "\n", "", "", "if", "P", ".", "one_class_idx", "is", "not", "None", ":", "\n", "        ", "one_class_score", "=", "np", ".", "concatenate", "(", "one_class_score", ")", "\n", "one_class_total", "=", "get_auroc", "(", "scores_id", ",", "one_class_score", ")", "\n", "print", "(", "f'One_class_real_mean: {one_class_total}'", ")", "\n", "\n", "", "if", "P", ".", "print_score", ":", "\n", "        ", "print_score", "(", "P", ".", "dataset", ",", "scores_id", ")", "\n", "for", "ood", ",", "scores", "in", "scores_ood", ".", "items", "(", ")", ":", "\n", "            ", "print_score", "(", "ood", ",", "scores", ")", "\n", "\n", "", "", "return", "auroc_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre.get_scores": [[107, 128], ["feats_dict[].to", "feats_dict[].to", "feats_dict[].to.size", "zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.cpu", "range", "torch.tensor.append", "f.mean", "f.mean", "torch.tensor.dim", "torch.tensor.size", "f_sim.chunk", "f_shi.chunk", "[].item"], "function", ["None"], ["", "def", "get_scores", "(", "P", ",", "feats_dict", ",", "ood_score", ")", ":", "\n", "# convert to gpu tensor", "\n", "    ", "feats_sim", "=", "feats_dict", "[", "'simclr'", "]", ".", "to", "(", "device", ")", "\n", "feats_shi", "=", "feats_dict", "[", "'shift'", "]", ".", "to", "(", "device", ")", "\n", "N", "=", "feats_sim", ".", "size", "(", "0", ")", "\n", "\n", "# compute scores", "\n", "scores", "=", "[", "]", "\n", "for", "f_sim", ",", "f_shi", "in", "zip", "(", "feats_sim", ",", "feats_shi", ")", ":", "\n", "        ", "f_sim", "=", "[", "f", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "for", "f", "in", "f_sim", ".", "chunk", "(", "P", ".", "K_shift", ")", "]", "# list of (1, d)", "\n", "f_shi", "=", "[", "f", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "for", "f", "in", "f_shi", ".", "chunk", "(", "P", ".", "K_shift", ")", "]", "# list of (1, 4)", "\n", "score", "=", "0", "\n", "for", "shi", "in", "range", "(", "P", ".", "K_shift", ")", ":", "\n", "            ", "score", "+=", "(", "f_sim", "[", "shi", "]", "*", "P", ".", "axis", "[", "shi", "]", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "max", "(", ")", ".", "item", "(", ")", "*", "P", ".", "weight_sim", "[", "shi", "]", "\n", "score", "+=", "f_shi", "[", "shi", "]", "[", ":", ",", "shi", "]", ".", "item", "(", ")", "*", "P", ".", "weight_shi", "[", "shi", "]", "\n", "", "score", "=", "score", "/", "P", ".", "K_shift", "\n", "scores", ".", "append", "(", "score", ")", "\n", "", "scores", "=", "torch", ".", "tensor", "(", "scores", ")", "\n", "\n", "assert", "scores", ".", "dim", "(", ")", "==", "1", "and", "scores", ".", "size", "(", "0", ")", "==", "N", "# (N)", "\n", "return", "scores", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre.get_features": [[130, 155], ["dict", "isinstance", "len", "ood_pre._get_features", "_get_features.items", "torch.save", "torch.save", "torch.save", "dict.keys"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre._get_features"], ["", "def", "get_features", "(", "P", ",", "data_name", ",", "model", ",", "loader", ",", "interp", "=", "False", ",", "prefix", "=", "''", ",", "\n", "simclr_aug", "=", "None", ",", "sample_num", "=", "1", ",", "layers", "=", "(", "'simclr'", ",", "'shift'", ")", ")", ":", "\n", "\n", "    ", "if", "not", "isinstance", "(", "layers", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "layers", "=", "[", "layers", "]", "\n", "\n", "# load pre-computed features if exists", "\n", "", "feats_dict", "=", "dict", "(", ")", "\n", "# for layer in layers:", "\n", "#     path = prefix + f'_{data_name}_{layer}.pth'", "\n", "#     if os.path.exists(path):", "\n", "#         feats_dict[layer] = torch.load(path)", "\n", "\n", "# pre-compute features and save to the path", "\n", "left", "=", "[", "layer", "for", "layer", "in", "layers", "if", "layer", "not", "in", "feats_dict", ".", "keys", "(", ")", "]", "\n", "if", "len", "(", "left", ")", ">", "0", ":", "\n", "        ", "_feats_dict", "=", "_get_features", "(", "P", ",", "model", ",", "loader", ",", "interp", ",", "P", ".", "dataset", "==", "'imagenet'", ",", "\n", "simclr_aug", ",", "sample_num", ",", "layers", "=", "left", ")", "\n", "\n", "for", "layer", ",", "feats", "in", "_feats_dict", ".", "items", "(", ")", ":", "\n", "            ", "path", "=", "prefix", "+", "f'_{data_name}_{layer}.pth'", "\n", "torch", ".", "save", "(", "_feats_dict", "[", "layer", "]", ",", "path", ")", "\n", "feats_dict", "[", "layer", "]", "=", "feats", "# update value", "\n", "\n", "", "", "return", "feats_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre._get_features": [[157, 233], ["model.eval", "enumerate", "feats_all.items", "isinstance", "torch.cat.to", "range", "feats_batch.items", "torch.cat", "torch.cat", "torch.cat", "feats_all.items", "torch.cat", "torch.cat", "torch.cat", "utils.utils.set_random_seed", "simclr_aug", "val.reshape.size", "val.reshape.view", "val.reshape.transpose", "val.reshape.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "output_aux[].cpu", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "output_aux[].cpu.chunk", "P.shift_trans", "hflip", "range"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.datasets.lsun_fix_preprocess.set_random_seed"], ["", "def", "_get_features", "(", "P", ",", "model", ",", "loader", ",", "interp", "=", "False", ",", "imagenet", "=", "False", ",", "simclr_aug", "=", "None", ",", "\n", "sample_num", "=", "1", ",", "layers", "=", "(", "'simclr'", ",", "'shift'", ")", ")", ":", "\n", "\n", "    ", "if", "not", "isinstance", "(", "layers", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "layers", "=", "[", "layers", "]", "\n", "\n", "# check if arguments are valid", "\n", "", "assert", "simclr_aug", "is", "not", "None", "\n", "\n", "if", "imagenet", "is", "True", ":", "# assume batch_size = 1 for ImageNet", "\n", "        ", "sample_num", "=", "1", "\n", "\n", "# compute features in full dataset", "\n", "", "model", ".", "eval", "(", ")", "\n", "feats_all", "=", "{", "layer", ":", "[", "]", "for", "layer", "in", "layers", "}", "# initialize: empty list", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "if", "interp", ":", "\n", "            ", "x_interp", "=", "(", "x", "+", "last", ")", "/", "2", "if", "i", ">", "0", "else", "x", "# omit the first batch, assume batch sizes are equal", "\n", "last", "=", "x", "# save the last batch", "\n", "x", "=", "x_interp", "# use interp as current batch", "\n", "\n", "", "if", "imagenet", "is", "True", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "x", "[", "0", "]", ",", "dim", "=", "0", ")", "# augmented list of x", "\n", "\n", "", "x", "=", "x", ".", "to", "(", "device", ")", "# gpu tensor", "\n", "\n", "# compute features in one batch", "\n", "feats_batch", "=", "{", "layer", ":", "[", "]", "for", "layer", "in", "layers", "}", "# initialize: empty list", "\n", "for", "seed", "in", "range", "(", "sample_num", ")", ":", "\n", "            ", "set_random_seed", "(", "seed", ")", "\n", "\n", "if", "P", ".", "K_shift", ">", "1", ":", "\n", "                ", "x_t", "=", "torch", ".", "cat", "(", "[", "P", ".", "shift_trans", "(", "hflip", "(", "x", ")", ",", "k", ")", "for", "k", "in", "range", "(", "P", ".", "K_shift", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "x_t", "=", "x", "# No shifting: SimCLR", "\n", "", "x_t", "=", "simclr_aug", "(", "x_t", ")", "\n", "\n", "# compute augmented features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "kwargs", "=", "{", "layer", ":", "True", "for", "layer", "in", "layers", "}", "# only forward selected layers", "\n", "_", ",", "output_aux", "=", "model", "(", "x_t", ",", "**", "kwargs", ")", "\n", "\n", "# add features in one batch", "\n", "", "for", "layer", "in", "layers", ":", "\n", "                ", "feats", "=", "output_aux", "[", "layer", "]", ".", "cpu", "(", ")", "\n", "if", "imagenet", "is", "False", ":", "\n", "                    ", "feats_batch", "[", "layer", "]", "+=", "feats", ".", "chunk", "(", "P", ".", "K_shift", ")", "\n", "", "else", ":", "\n", "                    ", "feats_batch", "[", "layer", "]", "+=", "[", "feats", "]", "# (B, d) cpu tensor", "\n", "\n", "# concatenate features in one batch", "\n", "", "", "", "for", "key", ",", "val", "in", "feats_batch", ".", "items", "(", ")", ":", "\n", "            ", "if", "imagenet", ":", "\n", "                ", "feats_batch", "[", "key", "]", "=", "torch", ".", "stack", "(", "val", ",", "dim", "=", "0", ")", "# (B, T, d)", "\n", "", "else", ":", "\n", "                ", "feats_batch", "[", "key", "]", "=", "torch", ".", "stack", "(", "val", ",", "dim", "=", "1", ")", "# (B, T, d)", "\n", "\n", "# add features in full dataset", "\n", "", "", "for", "layer", "in", "layers", ":", "\n", "            ", "feats_all", "[", "layer", "]", "+=", "[", "feats_batch", "[", "layer", "]", "]", "\n", "\n", "# concatenate features in full dataset", "\n", "", "", "for", "key", ",", "val", "in", "feats_all", ".", "items", "(", ")", ":", "\n", "        ", "feats_all", "[", "key", "]", "=", "torch", ".", "cat", "(", "val", ",", "dim", "=", "0", ")", "# (N, T, d)", "\n", "\n", "# reshape order", "\n", "", "if", "imagenet", "is", "False", ":", "\n", "# Convert [1,2,3,4, 1,2,3,4] -> [1,1, 2,2, 3,3, 4,4]", "\n", "        ", "for", "key", ",", "val", "in", "feats_all", ".", "items", "(", ")", ":", "\n", "            ", "N", ",", "T", ",", "d", "=", "val", ".", "size", "(", ")", "# T = K * T'", "\n", "val", "=", "val", ".", "view", "(", "N", ",", "-", "1", ",", "P", ".", "K_shift", ",", "d", ")", "# (N, T', K, d)", "\n", "val", "=", "val", ".", "transpose", "(", "2", ",", "1", ")", "# (N, 4, T', d)", "\n", "val", "=", "val", ".", "reshape", "(", "N", ",", "T", ",", "d", ")", "# (N, T, d)", "\n", "feats_all", "[", "key", "]", "=", "val", "\n", "\n", "", "", "return", "feats_all", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.evals.ood_pre.print_score": [[235, 240], ["numpy.quantile", "print", "numpy.arange", "numpy.mean", "numpy.std", "range"], "function", ["None"], ["", "def", "print_score", "(", "data_name", ",", "scores", ")", ":", "\n", "    ", "quantile", "=", "np", ".", "quantile", "(", "scores", ",", "np", ".", "arange", "(", "0", ",", "1.1", ",", "0.1", ")", ")", "\n", "print", "(", "'{:18s} '", ".", "format", "(", "data_name", ")", "+", "\n", "'{:.4f} +- {:.4f}    '", ".", "format", "(", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "std", "(", "scores", ")", ")", "+", "\n", "'    '", ".", "join", "(", "[", "'q{:d}: {:.4f}'", ".", "format", "(", "i", "*", "10", ",", "quantile", "[", "i", "]", ")", "for", "i", "in", "range", "(", "11", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.datasets.imagenet_fix_preprocess.set_random_seed": [[16, 21], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.datasets.lsun_fix_preprocess.set_random_seed": [[12, 17], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.MultiDataTransform.__init__": [[42, 45], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform", ")", ":", "\n", "        ", "self", ".", "transform1", "=", "transform", "\n", "self", ".", "transform2", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.MultiDataTransform.__call__": [[46, 50], ["torchvision.datasets.MultiDataTransform.transform1", "torchvision.datasets.MultiDataTransform.transform2"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "x1", "=", "self", ".", "transform1", "(", "sample", ")", "\n", "x2", "=", "self", ".", "transform2", "(", "sample", ")", "\n", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.MultiDataTransformList.__init__": [[53, 57], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform", ",", "clean_trasform", ",", "sample_num", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "clean_transform", "=", "clean_trasform", "\n", "self", ".", "sample_num", "=", "sample_num", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.MultiDataTransformList.__call__": [[58, 66], ["utils.utils.set_random_seed", "range", "sample_list.append", "torchvision.datasets.MultiDataTransformList.clean_transform", "torchvision.datasets.MultiDataTransformList.transform"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.datasets.lsun_fix_preprocess.set_random_seed", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.ColorJitterLayer.transform"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "set_random_seed", "(", "0", ")", "\n", "\n", "sample_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "sample_num", ")", ":", "\n", "            ", "sample_list", ".", "append", "(", "self", ".", "transform", "(", "sample", ")", ")", "\n", "\n", "", "return", "sample_list", ",", "self", ".", "clean_transform", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_transform": [[68, 88], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "", "def", "get_transform", "(", "image_size", "=", "None", ")", ":", "\n", "# Note: data augmentation is implemented in the layers", "\n", "# Hence, we only define the identity transformation here", "\n", "    ", "if", "image_size", ":", "# use pre-specified image size", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "image_size", "[", "0", "]", ",", "image_size", "[", "1", "]", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "image_size", "[", "0", "]", ",", "image_size", "[", "1", "]", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "# use default image size", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "test_transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n", "", "return", "train_transform", ",", "test_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_subset_with_len": [[90, 104], ["utils.utils.set_random_seed", "len", "numpy.arange", "torch.from_numpy", "torch.utils.data.dataset.Subset", "numpy.random.shuffle", "len"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.datasets.lsun_fix_preprocess.set_random_seed"], ["", "def", "get_subset_with_len", "(", "dataset", ",", "length", ",", "shuffle", "=", "False", ")", ":", "\n", "    ", "set_random_seed", "(", "0", ")", "\n", "dataset_size", "=", "len", "(", "dataset", ")", "\n", "\n", "index", "=", "np", ".", "arange", "(", "dataset_size", ")", "\n", "if", "shuffle", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "index", ")", "\n", "\n", "", "index", "=", "torch", ".", "from_numpy", "(", "index", "[", "0", ":", "length", "]", ")", "\n", "subset", "=", "Subset", "(", "dataset", ",", "index", ")", "\n", "\n", "assert", "len", "(", "subset", ")", "==", "length", "\n", "\n", "return", "subset", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_transform_imagenet": [[106, 123], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "datasets.MultiDataTransform", "torchvision.transforms.Resize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "get_transform_imagenet", "(", ")", ":", "\n", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "train_transform", "=", "MultiDataTransform", "(", "train_transform", ")", "\n", "\n", "return", "train_transform", ",", "test_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_dataset": [[125, 235], ["datasets.get_transform", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "datasets.get_simclr_eval_transform_imagenet", "datasets.get_transform_imagenet", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torchvision.datasets.SVHN", "os.path.join", "torchvision.datasets.ImageFolder", "os.path.join", "torchvision.datasets.ImageFolder", "os.path.join", "torchvision.datasets.ImageFolder", "os.path.join", "torchvision.datasets.ImageFolder", "os.path.join", "os.path.join", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "os.path.join", "torchvision.datasets.ImageFolder", "datasets.get_subset_with_len", "os.path.join", "torchvision.datasets.ImageFolder", "datasets.get_subset_with_len", "os.path.join", "torchvision.datasets.ImageFolder", "datasets.get_subset_with_len", "os.path.join", "torchvision.datasets.ImageFolder", "datasets.get_subset_with_len", "os.path.join", "torchvision.datasets.ImageFolder", "datasets.get_subset_with_len", "os.path.join", "torchvision.datasets.ImageFolder", "datasets.get_subset_with_len", "os.path.join", "torchvision.datasets.ImageFolder", "datasets.get_subset_with_len", "os.path.join", "torchvision.datasets.ImageFolder", "datasets.get_subset_with_len", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_transform", "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_simclr_eval_transform_imagenet", "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_transform_imagenet", "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_subset_with_len", "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_subset_with_len", "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_subset_with_len", "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_subset_with_len", "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_subset_with_len", "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_subset_with_len", "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_subset_with_len", "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_subset_with_len"], ["", "def", "get_dataset", "(", "P", ",", "dataset", ",", "test_only", "=", "False", ",", "image_size", "=", "None", ",", "download", "=", "False", ",", "eval", "=", "False", ")", ":", "\n", "    ", "if", "dataset", "in", "[", "'imagenet'", ",", "'cub'", ",", "'stanford_dogs'", ",", "'flowers102'", ",", "\n", "'places365'", ",", "'food_101'", ",", "'caltech_256'", ",", "'dtd'", ",", "'pets'", "]", ":", "\n", "        ", "if", "eval", ":", "\n", "            ", "train_transform", ",", "test_transform", "=", "get_simclr_eval_transform_imagenet", "(", "P", ".", "ood_samples", ",", "\n", "P", ".", "resize_factor", ",", "P", ".", "resize_fix", ")", "\n", "", "else", ":", "\n", "            ", "train_transform", ",", "test_transform", "=", "get_transform_imagenet", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "train_transform", ",", "test_transform", "=", "get_transform", "(", "image_size", "=", "image_size", ")", "\n", "\n", "", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "image_size", "=", "(", "32", ",", "32", ",", "3", ")", "\n", "n_classes", "=", "10", "\n", "train_set", "=", "datasets", ".", "CIFAR10", "(", "DATA_PATH", ",", "train", "=", "True", ",", "download", "=", "download", ",", "transform", "=", "train_transform", ")", "\n", "test_set", "=", "datasets", ".", "CIFAR10", "(", "DATA_PATH", ",", "train", "=", "False", ",", "download", "=", "download", ",", "transform", "=", "test_transform", ")", "\n", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "        ", "image_size", "=", "(", "32", ",", "32", ",", "3", ")", "\n", "n_classes", "=", "100", "\n", "train_set", "=", "datasets", ".", "CIFAR100", "(", "DATA_PATH", ",", "train", "=", "True", ",", "download", "=", "download", ",", "transform", "=", "train_transform", ")", "\n", "test_set", "=", "datasets", ".", "CIFAR100", "(", "DATA_PATH", ",", "train", "=", "False", ",", "download", "=", "download", ",", "transform", "=", "test_transform", ")", "\n", "\n", "", "elif", "dataset", "==", "'svhn'", ":", "\n", "        ", "assert", "test_only", "and", "image_size", "is", "not", "None", "\n", "test_set", "=", "datasets", ".", "SVHN", "(", "DATA_PATH", ",", "split", "=", "'test'", ",", "download", "=", "download", ",", "transform", "=", "test_transform", ")", "\n", "\n", "", "elif", "dataset", "==", "'lsun_resize'", ":", "\n", "        ", "assert", "test_only", "and", "image_size", "is", "not", "None", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "'LSUN_resize'", ")", "\n", "test_set", "=", "datasets", ".", "ImageFolder", "(", "test_dir", ",", "transform", "=", "test_transform", ")", "\n", "\n", "", "elif", "dataset", "==", "'lsun_fix'", ":", "\n", "        ", "assert", "test_only", "and", "image_size", "is", "not", "None", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "'LSUN_fix'", ")", "\n", "test_set", "=", "datasets", ".", "ImageFolder", "(", "test_dir", ",", "transform", "=", "test_transform", ")", "\n", "\n", "", "elif", "dataset", "==", "'imagenet_resize'", ":", "\n", "        ", "assert", "test_only", "and", "image_size", "is", "not", "None", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "'Imagenet_resize'", ")", "\n", "test_set", "=", "datasets", ".", "ImageFolder", "(", "test_dir", ",", "transform", "=", "test_transform", ")", "\n", "\n", "", "elif", "dataset", "==", "'imagenet_fix'", ":", "\n", "        ", "assert", "test_only", "and", "image_size", "is", "not", "None", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "'Imagenet_fix'", ")", "\n", "test_set", "=", "datasets", ".", "ImageFolder", "(", "test_dir", ",", "transform", "=", "test_transform", ")", "\n", "\n", "", "elif", "dataset", "==", "'imagenet'", ":", "\n", "        ", "image_size", "=", "(", "224", ",", "224", ",", "3", ")", "\n", "n_classes", "=", "30", "\n", "train_dir", "=", "os", ".", "path", ".", "join", "(", "IMAGENET_PATH", ",", "'one_class_train'", ")", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "IMAGENET_PATH", ",", "'one_class_test'", ")", "\n", "train_set", "=", "datasets", ".", "ImageFolder", "(", "train_dir", ",", "transform", "=", "train_transform", ")", "\n", "test_set", "=", "datasets", ".", "ImageFolder", "(", "test_dir", ",", "transform", "=", "test_transform", ")", "\n", "\n", "", "elif", "dataset", "==", "'stanford_dogs'", ":", "\n", "        ", "assert", "test_only", "and", "image_size", "is", "not", "None", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "'stanford_dogs'", ")", "\n", "test_set", "=", "datasets", ".", "ImageFolder", "(", "test_dir", ",", "transform", "=", "test_transform", ")", "\n", "test_set", "=", "get_subset_with_len", "(", "test_set", ",", "length", "=", "3000", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "elif", "dataset", "==", "'cub'", ":", "\n", "        ", "assert", "test_only", "and", "image_size", "is", "not", "None", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "'cub200'", ")", "\n", "test_set", "=", "datasets", ".", "ImageFolder", "(", "test_dir", ",", "transform", "=", "test_transform", ")", "\n", "test_set", "=", "get_subset_with_len", "(", "test_set", ",", "length", "=", "3000", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "elif", "dataset", "==", "'flowers102'", ":", "\n", "        ", "assert", "test_only", "and", "image_size", "is", "not", "None", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "'flowers102'", ")", "\n", "test_set", "=", "datasets", ".", "ImageFolder", "(", "test_dir", ",", "transform", "=", "test_transform", ")", "\n", "test_set", "=", "get_subset_with_len", "(", "test_set", ",", "length", "=", "3000", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "elif", "dataset", "==", "'places365'", ":", "\n", "        ", "assert", "test_only", "and", "image_size", "is", "not", "None", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "'places365'", ")", "\n", "test_set", "=", "datasets", ".", "ImageFolder", "(", "test_dir", ",", "transform", "=", "test_transform", ")", "\n", "test_set", "=", "get_subset_with_len", "(", "test_set", ",", "length", "=", "3000", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "elif", "dataset", "==", "'food_101'", ":", "\n", "        ", "assert", "test_only", "and", "image_size", "is", "not", "None", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "'food-101'", ",", "'images'", ")", "\n", "test_set", "=", "datasets", ".", "ImageFolder", "(", "test_dir", ",", "transform", "=", "test_transform", ")", "\n", "test_set", "=", "get_subset_with_len", "(", "test_set", ",", "length", "=", "3000", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "elif", "dataset", "==", "'caltech_256'", ":", "\n", "        ", "assert", "test_only", "and", "image_size", "is", "not", "None", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "'caltech-256'", ")", "\n", "test_set", "=", "datasets", ".", "ImageFolder", "(", "test_dir", ",", "transform", "=", "test_transform", ")", "\n", "test_set", "=", "get_subset_with_len", "(", "test_set", ",", "length", "=", "3000", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "elif", "dataset", "==", "'dtd'", ":", "\n", "        ", "assert", "test_only", "and", "image_size", "is", "not", "None", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "'dtd'", ",", "'images'", ")", "\n", "test_set", "=", "datasets", ".", "ImageFolder", "(", "test_dir", ",", "transform", "=", "test_transform", ")", "\n", "test_set", "=", "get_subset_with_len", "(", "test_set", ",", "length", "=", "3000", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "elif", "dataset", "==", "'pets'", ":", "\n", "        ", "assert", "test_only", "and", "image_size", "is", "not", "None", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "'pets'", ")", "\n", "test_set", "=", "datasets", ".", "ImageFolder", "(", "test_dir", ",", "transform", "=", "test_transform", ")", "\n", "test_set", "=", "get_subset_with_len", "(", "test_set", ",", "length", "=", "3000", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "if", "test_only", ":", "\n", "        ", "return", "test_set", "\n", "", "else", ":", "\n", "        ", "return", "train_set", ",", "test_set", ",", "image_size", ",", "n_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_superclass_list": [[237, 246], ["NotImplementedError"], "function", ["None"], ["", "", "def", "get_superclass_list", "(", "dataset", ")", ":", "\n", "    ", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "return", "CIFAR10_SUPERCLASS", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "        ", "return", "CIFAR100_SUPERCLASS", "\n", "", "elif", "dataset", "==", "'imagenet'", ":", "\n", "        ", "return", "IMAGENET_SUPERCLASS", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_subclass_dataset": [[248, 259], ["enumerate", "torch.utils.data.dataset.Subset", "isinstance", "indices.append"], "function", ["None"], ["", "", "def", "get_subclass_dataset", "(", "dataset", ",", "classes", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "classes", ",", "list", ")", ":", "\n", "        ", "classes", "=", "[", "classes", "]", "\n", "\n", "", "indices", "=", "[", "]", "\n", "for", "idx", ",", "tgt", "in", "enumerate", "(", "dataset", ".", "targets", ")", ":", "\n", "        ", "if", "tgt", "in", "classes", ":", "\n", "            ", "indices", ".", "append", "(", "idx", ")", "\n", "\n", "", "", "dataset", "=", "Subset", "(", "dataset", ",", "indices", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.datasets.datasets.get_simclr_eval_transform_imagenet": [[261, 283], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "datasets.MultiDataTransformList", "torchvision.transforms.Resize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "get_simclr_eval_transform_imagenet", "(", "sample_num", ",", "resize_factor", ",", "resize_fix", ")", ":", "\n", "\n", "    ", "resize_scale", "=", "(", "resize_factor", ",", "1.0", ")", "# resize scaling factor", "\n", "if", "resize_fix", ":", "# if resize_fix is True, use same scale", "\n", "        ", "resize_scale", "=", "(", "resize_factor", ",", "resize_factor", ")", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "resize_scale", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "clean_trasform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "transform", "=", "MultiDataTransformList", "(", "transform", ",", "clean_trasform", ",", "sample_num", ")", "\n", "\n", "return", "transform", ",", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.__init__": [[16, 24], ["torch.optim.lr_scheduler._LRScheduler.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "multiplier", ",", "total_epoch", ",", "after_scheduler", "=", "None", ")", ":", "\n", "        ", "self", ".", "multiplier", "=", "multiplier", "\n", "if", "self", ".", "multiplier", "<", "1.", ":", "\n", "            ", "raise", "ValueError", "(", "'multiplier should be greater thant or equal to 1.'", ")", "\n", "", "self", ".", "total_epoch", "=", "total_epoch", "\n", "self", ".", "after_scheduler", "=", "after_scheduler", "\n", "self", ".", "finished", "=", "False", "\n", "super", "(", "GradualWarmupScheduler", ",", "self", ")", ".", "__init__", "(", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.get_lr": [[25, 38], ["scheduler.GradualWarmupScheduler.after_scheduler.get_lr", "float"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.get_lr"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", ">", "self", ".", "total_epoch", ":", "\n", "            ", "if", "self", ".", "after_scheduler", ":", "\n", "                ", "if", "not", "self", ".", "finished", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "base_lrs", "=", "[", "base_lr", "*", "self", ".", "multiplier", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "self", ".", "finished", "=", "True", "\n", "", "return", "self", ".", "after_scheduler", ".", "get_lr", "(", ")", "\n", "", "return", "[", "base_lr", "*", "self", ".", "multiplier", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n", "", "if", "self", ".", "multiplier", "==", "1.0", ":", "\n", "            ", "return", "[", "base_lr", "*", "(", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "total_epoch", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "base_lr", "*", "(", "(", "self", ".", "multiplier", "-", "1.", ")", "*", "self", ".", "last_epoch", "/", "self", ".", "total_epoch", "+", "1.", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step_ReduceLROnPlateau": [[39, 52], ["zip", "scheduler.GradualWarmupScheduler.after_scheduler.step", "scheduler.GradualWarmupScheduler.after_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step"], ["", "", "def", "step_ReduceLROnPlateau", "(", "self", ",", "metrics", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "", "self", ".", "last_epoch", "=", "epoch", "if", "epoch", "!=", "0", "else", "1", "# ReduceLROnPlateau is called at the end of epoch, whereas others are called at beginning", "\n", "if", "self", ".", "last_epoch", "<=", "self", ".", "total_epoch", ":", "\n", "            ", "warmup_lr", "=", "[", "base_lr", "*", "(", "(", "self", ".", "multiplier", "-", "1.", ")", "*", "self", ".", "last_epoch", "/", "self", ".", "total_epoch", "+", "1.", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "warmup_lr", ")", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "else", ":", "\n", "            ", "if", "epoch", "is", "None", ":", "\n", "                ", "self", ".", "after_scheduler", ".", "step", "(", "metrics", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "after_scheduler", ".", "step", "(", "metrics", ",", "epoch", "-", "self", ".", "total_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step": [[53, 64], ["type", "scheduler.GradualWarmupScheduler.step_ReduceLROnPlateau", "super().step", "scheduler.GradualWarmupScheduler.after_scheduler.step", "scheduler.GradualWarmupScheduler.after_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step_ReduceLROnPlateau", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step"], ["", "", "", "def", "step", "(", "self", ",", "epoch", "=", "None", ",", "metrics", "=", "None", ")", ":", "\n", "        ", "if", "type", "(", "self", ".", "after_scheduler", ")", "!=", "ReduceLROnPlateau", ":", "\n", "            ", "if", "self", ".", "finished", "and", "self", ".", "after_scheduler", ":", "\n", "                ", "if", "epoch", "is", "None", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "step", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "step", "(", "epoch", "-", "self", ".", "total_epoch", ")", "\n", "", "", "else", ":", "\n", "                ", "return", "super", "(", "GradualWarmupScheduler", ",", "self", ")", ".", "step", "(", "epoch", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "step_ReduceLROnPlateau", "(", "metrics", ",", "epoch", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.alinlab_CSI.training.contrastive_loss.get_similarity_matrix": [[6, 24], ["torch.mm", "torch.mm", "torch.cat.chunk", "torch.cat", "torch.cat", "torch.cat.t", "torch.cat", "torch.cat", "outputs_gathered.append", "torch.empty_like", "torch.empty_like", "diffdist.all_gather", "range", "torch.get_world_size"], "function", ["None"], ["def", "get_similarity_matrix", "(", "outputs", ",", "chunk", "=", "2", ",", "multi_gpu", "=", "False", ")", ":", "\n", "    ", "'''\n        Compute similarity matrix\n        - outputs: (B', d) tensor for B' = B * chunk\n        - sim_matrix: (B', B') tensor\n    '''", "\n", "\n", "if", "multi_gpu", ":", "\n", "        ", "outputs_gathered", "=", "[", "]", "\n", "for", "out", "in", "outputs", ".", "chunk", "(", "chunk", ")", ":", "\n", "            ", "gather_t", "=", "[", "torch", ".", "empty_like", "(", "out", ")", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "gather_t", "=", "torch", ".", "cat", "(", "distops", ".", "all_gather", "(", "gather_t", ",", "out", ")", ")", "\n", "outputs_gathered", ".", "append", "(", "gather_t", ")", "\n", "", "outputs", "=", "torch", ".", "cat", "(", "outputs_gathered", ")", "\n", "\n", "", "sim_matrix", "=", "torch", ".", "mm", "(", "outputs", ",", "outputs", ".", "t", "(", ")", ")", "# (B', d), (d, B') -> (B', B')", "\n", "\n", "return", "sim_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.training.contrastive_loss.NT_xent": [[26, 45], ["torch.eye().to", "torch.eye().to", "torch.sum", "torch.sum", "sim_matrix.size", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.eye", "torch.eye", "sim_matrix[].diag", "sim_matrix[].diag"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.log", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.log"], ["", "def", "NT_xent", "(", "sim_matrix", ",", "temperature", "=", "0.5", ",", "chunk", "=", "2", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "'''\n        Compute NT_xent loss\n        - sim_matrix: (B', B') tensor for B' = B * chunk (first 2B are pos samples)\n    '''", "\n", "\n", "device", "=", "sim_matrix", ".", "device", "\n", "\n", "B", "=", "sim_matrix", ".", "size", "(", "0", ")", "//", "chunk", "# B = B' / chunk", "\n", "\n", "eye", "=", "torch", ".", "eye", "(", "B", "*", "chunk", ")", ".", "to", "(", "device", ")", "# (B', B')", "\n", "sim_matrix", "=", "torch", ".", "exp", "(", "sim_matrix", "/", "temperature", ")", "*", "(", "1", "-", "eye", ")", "# remove diagonal", "\n", "\n", "denom", "=", "torch", ".", "sum", "(", "sim_matrix", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "sim_matrix", "=", "-", "torch", ".", "log", "(", "sim_matrix", "/", "(", "denom", "+", "eps", ")", "+", "eps", ")", "# loss matrix", "\n", "\n", "loss", "=", "torch", ".", "sum", "(", "sim_matrix", "[", ":", "B", ",", "B", ":", "]", ".", "diag", "(", ")", "+", "sim_matrix", "[", "B", ":", ",", ":", "B", "]", ".", "diag", "(", ")", ")", "/", "(", "2", "*", "B", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.training.contrastive_loss.Supervised_NT_xent": [[47, 79], ["torch.cat.repeat", "torch.max", "torch.max", "torch.eye().to", "torch.eye().to", "torch.sum", "torch.sum", "torch.cat.contiguous().view", "torch.eq().float().to", "torch.eq().float().to", "torch.cat", "torch.cat", "logits_max.detach", "sim_matrix.size", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.empty_like", "torch.empty_like", "diffdist.all_gather", "torch.eye", "torch.eye", "torch.cat.contiguous", "torch.eq().float", "torch.eq().float", "torch.eq().float().to.sum", "range", "torch.get_world_size", "torch.eq", "torch.eq", "torch.cat.t"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.log", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.log"], ["", "def", "Supervised_NT_xent", "(", "sim_matrix", ",", "labels", ",", "temperature", "=", "0.5", ",", "chunk", "=", "2", ",", "eps", "=", "1e-8", ",", "multi_gpu", "=", "False", ")", ":", "\n", "    ", "'''\n        Compute NT_xent loss\n        - sim_matrix: (B', B') tensor for B' = B * chunk (first 2B are pos samples)\n    '''", "\n", "\n", "device", "=", "sim_matrix", ".", "device", "\n", "\n", "if", "multi_gpu", ":", "\n", "        ", "gather_t", "=", "[", "torch", ".", "empty_like", "(", "labels", ")", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "labels", "=", "torch", ".", "cat", "(", "distops", ".", "all_gather", "(", "gather_t", ",", "labels", ")", ")", "\n", "", "labels", "=", "labels", ".", "repeat", "(", "2", ")", "\n", "\n", "logits_max", ",", "_", "=", "torch", ".", "max", "(", "sim_matrix", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "sim_matrix", "=", "sim_matrix", "-", "logits_max", ".", "detach", "(", ")", "\n", "\n", "B", "=", "sim_matrix", ".", "size", "(", "0", ")", "//", "chunk", "# B = B' / chunk", "\n", "\n", "eye", "=", "torch", ".", "eye", "(", "B", "*", "chunk", ")", ".", "to", "(", "device", ")", "# (B', B')", "\n", "sim_matrix", "=", "torch", ".", "exp", "(", "sim_matrix", "/", "temperature", ")", "*", "(", "1", "-", "eye", ")", "# remove diagonal", "\n", "\n", "denom", "=", "torch", ".", "sum", "(", "sim_matrix", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "sim_matrix", "=", "-", "torch", ".", "log", "(", "sim_matrix", "/", "(", "denom", "+", "eps", ")", "+", "eps", ")", "# loss matrix", "\n", "\n", "labels", "=", "labels", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "Mask", "=", "torch", ".", "eq", "(", "labels", ",", "labels", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "#Mask = eye * torch.stack([labels == labels[i] for i in range(labels.size(0))]).float().to(device)", "\n", "Mask", "=", "Mask", "/", "(", "Mask", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "eps", ")", "\n", "\n", "loss", "=", "torch", ".", "sum", "(", "Mask", "*", "sim_matrix", ")", "/", "(", "2", "*", "B", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.training.__init__.update_learning_rate": [[6, 30], ["NotImplementedError", "float"], "function", ["None"], []], "home.repos.pwc.inspect_result.alinlab_CSI.training.__init__._cross_entropy": [[32, 43], ["torch.softmax", "xent.sum", "xent.mean", "torch.log_softmax", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.alinlab_CSI.training.__init__._entropy": [[45, 47], ["__init__._cross_entropy"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.training.__init__._cross_entropy"], []], "home.repos.pwc.inspect_result.alinlab_CSI.training.__init__.cross_entropy_soft": [[49, 60], ["torch.softmax", "xent.sum", "xent.mean", "torch.log_softmax", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.alinlab_CSI.training.__init__.kl_div": [[62, 65], ["torch.kl_div", "torch.log_softmax", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.training.__init__.kl_div"], []], "home.repos.pwc.inspect_result.alinlab_CSI.training.__init__.target_nll_loss": [[67, 81], ["logit_diff.scatter.scatter", "torch.nll_loss", "inputs_t.view", "targets.view", "logit_diff.scatter.max", "diff_max.sum", "diff_max.mean", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.alinlab_CSI.training.__init__.target_nll_c": [[83, 98], ["torch.softmax", "torch.softmax", "torch.softmax", "conf_diff.scatter.scatter", "torch.nll_loss", "conf_t.view", "targets.view", "conf_diff.scatter.max", "diff_max.sum", "diff_max.mean", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.alinlab_CSI.sup.sup_simclr.train": [[13, 105], ["utils.utils.AverageMeter", "utils.utils.AverageMeter", "dict", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "time.time", "enumerate", "log_", "model.train", "utils.utils.AverageMeter.update", "time.time", "labels.to.to", "simclr_aug", "model", "utils.utils.normalize", "training.contrastive_loss.get_similarity_matrix", "optimizer.zero_grad", "loss.backward", "optimizer.step", "scheduler.step", "utils.utils.AverageMeter.update", "outputs_aux[].norm().mean", "linear", "criterion", "linear_optim.zero_grad", "criterion.backward", "linear_optim.step", "losses[].update", "losses[].update", "losses[].update", "time.time", "logger.scalar_summary", "logger.scalar_summary", "logger.scalar_summary", "logger.scalar_summary", "images.to.size", "images.to.to", "hflip", "images[].size", "torch.cat", "training.contrastive_loss.Supervised_NT_xent", "outputs_aux[].detach", "labels.to.repeat", "loss_sim.item", "outputs_aux[].norm().mean.item", "log_", "time.time", "images.to.repeat", "images[].to", "images[].to", "time.time", "outputs_aux[].norm", "len"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.unsup.simclr.train", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.normalize", "home.repos.pwc.inspect_result.alinlab_CSI.training.contrastive_loss.get_similarity_matrix", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomHSVFunction.backward", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomHSVFunction.backward", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.training.contrastive_loss.Supervised_NT_xent"], ["def", "train", "(", "P", ",", "epoch", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "loader", ",", "logger", "=", "None", ",", "\n", "simclr_aug", "=", "None", ",", "linear", "=", "None", ",", "linear_optim", "=", "None", ")", ":", "\n", "\n", "    ", "assert", "simclr_aug", "is", "not", "None", "\n", "assert", "P", ".", "sim_lambda", "==", "1.0", "\n", "\n", "if", "logger", "is", "None", ":", "\n", "        ", "log_", "=", "print", "\n", "", "else", ":", "\n", "        ", "log_", "=", "logger", ".", "log", "\n", "\n", "", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "losses", "[", "'cls'", "]", "=", "AverageMeter", "(", ")", "\n", "losses", "[", "'sim'", "]", "=", "AverageMeter", "(", ")", "\n", "losses", "[", "'simnorm'", "]", "=", "AverageMeter", "(", ")", "\n", "\n", "check", "=", "time", ".", "time", "(", ")", "\n", "for", "n", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "count", "=", "n", "*", "P", ".", "n_gpus", "# number of trained samples", "\n", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "check", ")", "\n", "check", "=", "time", ".", "time", "(", ")", "\n", "\n", "### SimCLR loss ###", "\n", "if", "P", ".", "dataset", "!=", "'imagenet'", ":", "\n", "            ", "batch_size", "=", "images", ".", "size", "(", "0", ")", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "images_pair", "=", "hflip", "(", "images", ".", "repeat", "(", "2", ",", "1", ",", "1", ",", "1", ")", ")", "# 2B with hflip", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "images", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "images1", ",", "images2", "=", "images", "[", "0", "]", ".", "to", "(", "device", ")", ",", "images", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "images_pair", "=", "torch", ".", "cat", "(", "[", "images1", ",", "images2", "]", ",", "dim", "=", "0", ")", "# 2B", "\n", "\n", "", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "images_pair", "=", "simclr_aug", "(", "images_pair", ")", "# simclr augmentation", "\n", "\n", "_", ",", "outputs_aux", "=", "model", "(", "images_pair", ",", "simclr", "=", "True", ",", "penultimate", "=", "True", ")", "\n", "\n", "simclr", "=", "normalize", "(", "outputs_aux", "[", "'simclr'", "]", ")", "# normalize", "\n", "sim_matrix", "=", "get_similarity_matrix", "(", "simclr", ",", "multi_gpu", "=", "P", ".", "multi_gpu", ")", "\n", "loss_sim", "=", "Supervised_NT_xent", "(", "sim_matrix", ",", "labels", "=", "labels", ",", "temperature", "=", "0.07", ",", "multi_gpu", "=", "P", ".", "multi_gpu", ")", "*", "P", ".", "sim_lambda", "\n", "\n", "### total loss ###", "\n", "loss", "=", "loss_sim", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "scheduler", ".", "step", "(", "epoch", "-", "1", "+", "n", "/", "len", "(", "loader", ")", ")", "\n", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "check", ")", "\n", "\n", "### Post-processing stuffs ###", "\n", "simclr_norm", "=", "outputs_aux", "[", "'simclr'", "]", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "### Linear evaluation ###", "\n", "outputs_linear_eval", "=", "linear", "(", "outputs_aux", "[", "'penultimate'", "]", ".", "detach", "(", ")", ")", "\n", "loss_linear", "=", "criterion", "(", "outputs_linear_eval", ",", "labels", ".", "repeat", "(", "2", ")", ")", "\n", "\n", "linear_optim", ".", "zero_grad", "(", ")", "\n", "loss_linear", ".", "backward", "(", ")", "\n", "linear_optim", ".", "step", "(", ")", "\n", "\n", "### Log losses ###", "\n", "losses", "[", "'cls'", "]", ".", "update", "(", "0", ",", "batch_size", ")", "\n", "losses", "[", "'sim'", "]", ".", "update", "(", "loss_sim", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "losses", "[", "'simnorm'", "]", ".", "update", "(", "simclr_norm", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "if", "count", "%", "50", "==", "0", ":", "\n", "            ", "log_", "(", "'[Epoch %3d; %3d] [Time %.3f] [Data %.3f] [LR %.5f]\\n'", "\n", "'[LossC %f] [LossSim %f] [SimNorm %f]'", "%", "\n", "(", "epoch", ",", "count", ",", "batch_time", ".", "value", ",", "data_time", ".", "value", ",", "lr", ",", "\n", "losses", "[", "'cls'", "]", ".", "value", ",", "losses", "[", "'sim'", "]", ".", "value", ",", "losses", "[", "'simnorm'", "]", ".", "value", ")", ")", "\n", "\n", "", "check", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "log_", "(", "'[DONE] [Time %.3f] [Data %.3f] [LossC %f] [LossSim %f] [SimNorm %f]'", "%", "\n", "(", "batch_time", ".", "average", ",", "data_time", ".", "average", ",", "\n", "losses", "[", "'cls'", "]", ".", "average", ",", "losses", "[", "'sim'", "]", ".", "average", ",", "losses", "[", "'simnorm'", "]", ".", "average", ")", ")", "\n", "\n", "if", "logger", "is", "not", "None", ":", "\n", "        ", "logger", ".", "scalar_summary", "(", "'train/loss_cls'", ",", "losses", "[", "'cls'", "]", ".", "average", ",", "epoch", ")", "\n", "logger", ".", "scalar_summary", "(", "'train/loss_sim'", ",", "losses", "[", "'sim'", "]", ".", "average", ",", "epoch", ")", "\n", "logger", ".", "scalar_summary", "(", "'train/batch_time'", ",", "batch_time", ".", "average", ",", "epoch", ")", "\n", "logger", ".", "scalar_summary", "(", "'train/simclr_norm'", ",", "losses", "[", "'simnorm'", "]", ".", "average", ",", "epoch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alinlab_CSI.sup.sup_CSI_linear.train": [[13, 131], ["utils.utils.AverageMeter", "utils.utils.AverageMeter", "dict", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "time.time", "enumerate", "P.linear_scheduler.step", "P.rot_scheduler.step", "P.joint_scheduler.step", "log_", "torch.optim.SGD", "torch.optim.SGD", "torch.MultiStepLR", "torch.optim.SGD", "torch.optim.SGD", "torch.MultiStepLR", "torch.optim.SGD", "torch.optim.SGD", "torch.MultiStepLR", "model.eval", "utils.utils.AverageMeter.update", "time.time", "labels.to.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "simclr_aug", "model", "outputs_aux[].detach", "linear", "rotation_linear", "joint_linear", "criterion", "criterion", "criterion", "P.linear_optim.zero_grad", "criterion.backward", "P.linear_optim.step", "P.rotation_linear_optim.zero_grad", "criterion.backward", "P.rotation_linear_optim.step", "P.joint_linear_optim.zero_grad", "criterion.backward", "P.joint_linear_optim.step", "utils.utils.AverageMeter.update", "losses[].update", "losses[].update", "time.time", "logger.scalar_summary", "logger.scalar_summary", "logger.scalar_summary", "int", "int", "int", "linear.parameters", "rotation_linear.parameters", "joint_linear.parameters", "images[].to.size", "images[].to.to", "hflip", "images[].size", "images[].to", "criterion.item", "criterion.item", "log_", "time.time", "torch.rot90", "torch.rot90", "time.time", "range", "torch.ones_like", "torch.ones_like", "range", "range"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomHSVFunction.backward", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomHSVFunction.backward", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomHSVFunction.backward", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary"], ["def", "train", "(", "P", ",", "epoch", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "loader", ",", "logger", "=", "None", ",", "\n", "simclr_aug", "=", "None", ",", "linear", "=", "None", ",", "linear_optim", "=", "None", ")", ":", "\n", "\n", "    ", "if", "P", ".", "multi_gpu", ":", "\n", "        ", "rotation_linear", "=", "model", ".", "module", ".", "shift_cls_layer", "\n", "joint_linear", "=", "model", ".", "module", ".", "joint_distribution_layer", "\n", "", "else", ":", "\n", "        ", "rotation_linear", "=", "model", ".", "shift_cls_layer", "\n", "joint_linear", "=", "model", ".", "joint_distribution_layer", "\n", "\n", "", "if", "epoch", "==", "1", ":", "\n", "# define optimizer and save in P (argument)", "\n", "        ", "milestones", "=", "[", "int", "(", "0.6", "*", "P", ".", "epochs", ")", ",", "int", "(", "0.75", "*", "P", ".", "epochs", ")", ",", "int", "(", "0.9", "*", "P", ".", "epochs", ")", "]", "\n", "\n", "linear_optim", "=", "torch", ".", "optim", ".", "SGD", "(", "linear", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "1e-1", ",", "weight_decay", "=", "P", ".", "weight_decay", ")", "\n", "P", ".", "linear_optim", "=", "linear_optim", "\n", "P", ".", "linear_scheduler", "=", "lr_scheduler", ".", "MultiStepLR", "(", "P", ".", "linear_optim", ",", "gamma", "=", "0.1", ",", "milestones", "=", "milestones", ")", "\n", "\n", "rotation_linear_optim", "=", "torch", ".", "optim", ".", "SGD", "(", "rotation_linear", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "1e-1", ",", "weight_decay", "=", "P", ".", "weight_decay", ")", "\n", "P", ".", "rotation_linear_optim", "=", "rotation_linear_optim", "\n", "P", ".", "rot_scheduler", "=", "lr_scheduler", ".", "MultiStepLR", "(", "P", ".", "rotation_linear_optim", ",", "gamma", "=", "0.1", ",", "milestones", "=", "milestones", ")", "\n", "\n", "joint_linear_optim", "=", "torch", ".", "optim", ".", "SGD", "(", "joint_linear", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "1e-1", ",", "weight_decay", "=", "P", ".", "weight_decay", ")", "\n", "P", ".", "joint_linear_optim", "=", "joint_linear_optim", "\n", "P", ".", "joint_scheduler", "=", "lr_scheduler", ".", "MultiStepLR", "(", "P", ".", "joint_linear_optim", ",", "gamma", "=", "0.1", ",", "milestones", "=", "milestones", ")", "\n", "\n", "", "if", "logger", "is", "None", ":", "\n", "        ", "log_", "=", "print", "\n", "", "else", ":", "\n", "        ", "log_", "=", "logger", ".", "log", "\n", "\n", "", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "losses", "[", "'cls'", "]", "=", "AverageMeter", "(", ")", "\n", "losses", "[", "'rot'", "]", "=", "AverageMeter", "(", ")", "\n", "\n", "check", "=", "time", ".", "time", "(", ")", "\n", "for", "n", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "count", "=", "n", "*", "P", ".", "n_gpus", "# number of trained samples", "\n", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "check", ")", "\n", "check", "=", "time", ".", "time", "(", ")", "\n", "\n", "### SimCLR loss ###", "\n", "if", "P", ".", "dataset", "!=", "'imagenet'", ":", "\n", "            ", "batch_size", "=", "images", ".", "size", "(", "0", ")", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "images", "=", "hflip", "(", "images", ")", "# 2B with hflip", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "images", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "images", "=", "images", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "\n", "", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "images", "=", "torch", ".", "cat", "(", "[", "torch", ".", "rot90", "(", "images", ",", "rot", ",", "(", "2", ",", "3", ")", ")", "for", "rot", "in", "range", "(", "4", ")", "]", ")", "# 4B", "\n", "rot_labels", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones_like", "(", "labels", ")", "*", "k", "for", "k", "in", "range", "(", "4", ")", "]", ",", "0", ")", "# B -> 4B", "\n", "joint_labels", "=", "torch", ".", "cat", "(", "[", "labels", "+", "P", ".", "n_classes", "*", "i", "for", "i", "in", "range", "(", "4", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "images", "=", "simclr_aug", "(", "images", ")", "# simclr augmentation", "\n", "_", ",", "outputs_aux", "=", "model", "(", "images", ",", "penultimate", "=", "True", ")", "\n", "penultimate", "=", "outputs_aux", "[", "'penultimate'", "]", ".", "detach", "(", ")", "\n", "\n", "outputs", "=", "linear", "(", "penultimate", "[", "0", ":", "batch_size", "]", ")", "# only use 0 degree samples for linear eval", "\n", "outputs_rot", "=", "rotation_linear", "(", "penultimate", ")", "\n", "outputs_joint", "=", "joint_linear", "(", "penultimate", ")", "\n", "\n", "loss_ce", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss_rot", "=", "criterion", "(", "outputs_rot", ",", "rot_labels", ")", "\n", "loss_joint", "=", "criterion", "(", "outputs_joint", ",", "joint_labels", ")", "\n", "\n", "### CE loss ###", "\n", "P", ".", "linear_optim", ".", "zero_grad", "(", ")", "\n", "loss_ce", ".", "backward", "(", ")", "\n", "P", ".", "linear_optim", ".", "step", "(", ")", "\n", "\n", "### Rot loss ###", "\n", "P", ".", "rotation_linear_optim", ".", "zero_grad", "(", ")", "\n", "loss_rot", ".", "backward", "(", ")", "\n", "P", ".", "rotation_linear_optim", ".", "step", "(", ")", "\n", "\n", "### Joint loss ###", "\n", "P", ".", "joint_linear_optim", ".", "zero_grad", "(", ")", "\n", "loss_joint", ".", "backward", "(", ")", "\n", "P", ".", "joint_linear_optim", ".", "step", "(", ")", "\n", "\n", "### optimizer learning rate ###", "\n", "lr", "=", "P", ".", "linear_optim", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "check", ")", "\n", "\n", "### Log losses ###", "\n", "losses", "[", "'cls'", "]", ".", "update", "(", "loss_ce", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "losses", "[", "'rot'", "]", ".", "update", "(", "loss_rot", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "if", "count", "%", "50", "==", "0", ":", "\n", "            ", "log_", "(", "'[Epoch %3d; %3d] [Time %.3f] [Data %.3f] [LR %.5f]\\n'", "\n", "'[LossC %f] [LossR %f]'", "%", "\n", "(", "epoch", ",", "count", ",", "batch_time", ".", "value", ",", "data_time", ".", "value", ",", "lr", ",", "\n", "losses", "[", "'cls'", "]", ".", "value", ",", "losses", "[", "'rot'", "]", ".", "value", ")", ")", "\n", "", "check", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "P", ".", "linear_scheduler", ".", "step", "(", ")", "\n", "P", ".", "rot_scheduler", ".", "step", "(", ")", "\n", "P", ".", "joint_scheduler", ".", "step", "(", ")", "\n", "\n", "log_", "(", "'[DONE] [Time %.3f] [Data %.3f] [LossC %f] [LossR %f]'", "%", "\n", "(", "batch_time", ".", "average", ",", "data_time", ".", "average", ",", "\n", "losses", "[", "'cls'", "]", ".", "average", ",", "losses", "[", "'rot'", "]", ".", "average", ")", ")", "\n", "\n", "if", "logger", "is", "not", "None", ":", "\n", "        ", "logger", ".", "scalar_summary", "(", "'train/loss_cls'", ",", "losses", "[", "'cls'", "]", ".", "average", ",", "epoch", ")", "\n", "logger", ".", "scalar_summary", "(", "'train/loss_rot'", ",", "losses", "[", "'rot'", "]", ".", "average", ",", "epoch", ")", "\n", "logger", ".", "scalar_summary", "(", "'train/batch_time'", ",", "batch_time", ".", "average", ",", "epoch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alinlab_CSI.sup.sup_linear.train": [[13, 92], ["utils.utils.AverageMeter", "utils.utils.AverageMeter", "dict", "utils.utils.AverageMeter", "time.time", "enumerate", "P.linear_scheduler.step", "log_", "torch.optim.SGD", "torch.optim.SGD", "torch.MultiStepLR", "model.eval", "utils.utils.AverageMeter.update", "time.time", "labels.to.to", "simclr_aug", "model", "outputs_aux[].detach", "linear", "criterion", "P.linear_optim.zero_grad", "criterion.backward", "P.linear_optim.step", "utils.utils.AverageMeter.update", "losses[].update", "time.time", "logger.scalar_summary", "logger.scalar_summary", "int", "int", "int", "linear.parameters", "images[].to.size", "images[].to.to", "hflip", "images[].size", "images[].to", "criterion.item", "log_", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomHSVFunction.backward", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary"], ["def", "train", "(", "P", ",", "epoch", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "loader", ",", "logger", "=", "None", ",", "\n", "simclr_aug", "=", "None", ",", "linear", "=", "None", ",", "linear_optim", "=", "None", ")", ":", "\n", "\n", "    ", "if", "epoch", "==", "1", ":", "\n", "# define optimizer and save in P (argument)", "\n", "        ", "milestones", "=", "[", "int", "(", "0.6", "*", "P", ".", "epochs", ")", ",", "int", "(", "0.75", "*", "P", ".", "epochs", ")", ",", "int", "(", "0.9", "*", "P", ".", "epochs", ")", "]", "\n", "\n", "linear_optim", "=", "torch", ".", "optim", ".", "SGD", "(", "linear", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "1e-1", ",", "weight_decay", "=", "P", ".", "weight_decay", ")", "\n", "P", ".", "linear_optim", "=", "linear_optim", "\n", "P", ".", "linear_scheduler", "=", "lr_scheduler", ".", "MultiStepLR", "(", "P", ".", "linear_optim", ",", "gamma", "=", "0.1", ",", "milestones", "=", "milestones", ")", "\n", "\n", "", "if", "logger", "is", "None", ":", "\n", "        ", "log_", "=", "print", "\n", "", "else", ":", "\n", "        ", "log_", "=", "logger", ".", "log", "\n", "\n", "", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "losses", "[", "'cls'", "]", "=", "AverageMeter", "(", ")", "\n", "\n", "check", "=", "time", ".", "time", "(", ")", "\n", "for", "n", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "count", "=", "n", "*", "P", ".", "n_gpus", "# number of trained samples", "\n", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "check", ")", "\n", "check", "=", "time", ".", "time", "(", ")", "\n", "\n", "### SimCLR loss ###", "\n", "if", "P", ".", "dataset", "!=", "'imagenet'", ":", "\n", "            ", "batch_size", "=", "images", ".", "size", "(", "0", ")", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "images", "=", "hflip", "(", "images", ")", "# 2B with hflip", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "images", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "images", "=", "images", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "\n", "", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "images", "=", "simclr_aug", "(", "images", ")", "# simclr augmentation", "\n", "_", ",", "outputs_aux", "=", "model", "(", "images", ",", "penultimate", "=", "True", ")", "\n", "penultimate", "=", "outputs_aux", "[", "'penultimate'", "]", ".", "detach", "(", ")", "\n", "\n", "outputs", "=", "linear", "(", "penultimate", "[", "0", ":", "batch_size", "]", ")", "# only use 0 degree samples for linear eval", "\n", "\n", "loss_ce", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "\n", "### CE loss ###", "\n", "P", ".", "linear_optim", ".", "zero_grad", "(", ")", "\n", "loss_ce", ".", "backward", "(", ")", "\n", "P", ".", "linear_optim", ".", "step", "(", ")", "\n", "\n", "### optimizer learning rate ###", "\n", "lr", "=", "P", ".", "linear_optim", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "check", ")", "\n", "\n", "### Log losses ###", "\n", "losses", "[", "'cls'", "]", ".", "update", "(", "loss_ce", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "if", "count", "%", "50", "==", "0", ":", "\n", "            ", "log_", "(", "'[Epoch %3d; %3d] [Time %.3f] [Data %.3f] [LR %.5f]\\n'", "\n", "'[LossC %f]'", "%", "\n", "(", "epoch", ",", "count", ",", "batch_time", ".", "value", ",", "data_time", ".", "value", ",", "lr", ",", "\n", "losses", "[", "'cls'", "]", ".", "value", ",", ")", ")", "\n", "", "check", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "P", ".", "linear_scheduler", ".", "step", "(", ")", "\n", "\n", "log_", "(", "'[DONE] [Time %.3f] [Data %.3f] [LossC %f]'", "%", "\n", "(", "batch_time", ".", "average", ",", "data_time", ".", "average", ",", "\n", "losses", "[", "'cls'", "]", ".", "average", ")", ")", "\n", "\n", "if", "logger", "is", "not", "None", ":", "\n", "        ", "logger", ".", "scalar_summary", "(", "'train/loss_cls'", ",", "losses", "[", "'cls'", "]", ".", "average", ",", "epoch", ")", "\n", "logger", ".", "scalar_summary", "(", "'train/batch_time'", ",", "batch_time", ".", "average", ",", "epoch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alinlab_CSI.sup.__init__.setup": [[1, 21], ["NotImplementedError"], "function", ["None"], [""]], "home.repos.pwc.inspect_result.alinlab_CSI.sup.__init__.update_comp_loss": [[23, 27], ["loss_dict[].update", "loss_dict[].update", "loss_dict[].update"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update"], []], "home.repos.pwc.inspect_result.alinlab_CSI.sup.__init__.summary_comp_loss": [[29, 33], ["logger.scalar_summary", "logger.scalar_summary", "logger.scalar_summary"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary"], []], "home.repos.pwc.inspect_result.alinlab_CSI.sup.sup_simclr_CSI.train": [[13, 110], ["utils.utils.AverageMeter", "utils.utils.AverageMeter", "dict", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "time.time", "enumerate", "log_", "model.train", "utils.utils.AverageMeter.update", "time.time", "torch.cat", "torch.cat", "torch.cat", "labels.to.to", "torch.cat", "rot_sim_labels.to.to", "simclr_aug", "model", "utils.utils.normalize", "training.contrastive_loss.get_similarity_matrix", "optimizer.zero_grad", "loss.backward", "optimizer.step", "scheduler.step", "utils.utils.AverageMeter.update", "torch.cat", "linear", "criterion", "linear_optim.zero_grad", "criterion.backward", "linear_optim.step", "losses[].update", "losses[].update", "time.time", "logger.scalar_summary", "logger.scalar_summary", "logger.scalar_summary", "images.to.size", "images.to.to", "hflip().chunk", "images[].size", "training.contrastive_loss.Supervised_NT_xent", "outputs_aux[].detach", "labels.to.repeat", "loss_sim.item", "log_", "time.time", "images[].to", "images[].to", "torch.rot90", "torch.rot90", "time.time", "hflip", "range", "range", "range", "len", "images.to.repeat"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.unsup.simclr.train", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.normalize", "home.repos.pwc.inspect_result.alinlab_CSI.training.contrastive_loss.get_similarity_matrix", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomHSVFunction.backward", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomHSVFunction.backward", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.training.contrastive_loss.Supervised_NT_xent"], ["def", "train", "(", "P", ",", "epoch", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "loader", ",", "logger", "=", "None", ",", "\n", "simclr_aug", "=", "None", ",", "linear", "=", "None", ",", "linear_optim", "=", "None", ")", ":", "\n", "\n", "# currently only support rotation shifting augmentation", "\n", "    ", "assert", "simclr_aug", "is", "not", "None", "\n", "assert", "P", ".", "sim_lambda", "==", "1.0", "\n", "\n", "if", "logger", "is", "None", ":", "\n", "        ", "log_", "=", "print", "\n", "", "else", ":", "\n", "        ", "log_", "=", "logger", ".", "log", "\n", "\n", "", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "losses", "[", "'cls'", "]", "=", "AverageMeter", "(", ")", "\n", "losses", "[", "'sim'", "]", "=", "AverageMeter", "(", ")", "\n", "\n", "check", "=", "time", ".", "time", "(", ")", "\n", "for", "n", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "count", "=", "n", "*", "P", ".", "n_gpus", "# number of trained samples", "\n", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "check", ")", "\n", "check", "=", "time", ".", "time", "(", ")", "\n", "\n", "### SimCLR loss ###", "\n", "if", "P", ".", "dataset", "!=", "'imagenet'", ":", "\n", "            ", "batch_size", "=", "images", ".", "size", "(", "0", ")", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "images1", ",", "images2", "=", "hflip", "(", "images", ".", "repeat", "(", "2", ",", "1", ",", "1", ",", "1", ")", ")", ".", "chunk", "(", "2", ")", "# hflip", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "images", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "images1", ",", "images2", "=", "images", "[", "0", "]", ".", "to", "(", "device", ")", ",", "images", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "", "images1", "=", "torch", ".", "cat", "(", "[", "torch", ".", "rot90", "(", "images1", ",", "rot", ",", "(", "2", ",", "3", ")", ")", "for", "rot", "in", "range", "(", "4", ")", "]", ")", "# 4B", "\n", "images2", "=", "torch", ".", "cat", "(", "[", "torch", ".", "rot90", "(", "images2", ",", "rot", ",", "(", "2", ",", "3", ")", ")", "for", "rot", "in", "range", "(", "4", ")", "]", ")", "# 4B", "\n", "images_pair", "=", "torch", ".", "cat", "(", "[", "images1", ",", "images2", "]", ",", "dim", "=", "0", ")", "# 8B", "\n", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "rot_sim_labels", "=", "torch", ".", "cat", "(", "[", "labels", "+", "P", ".", "n_classes", "*", "i", "for", "i", "in", "range", "(", "4", ")", "]", ",", "dim", "=", "0", ")", "\n", "rot_sim_labels", "=", "rot_sim_labels", ".", "to", "(", "device", ")", "\n", "\n", "images_pair", "=", "simclr_aug", "(", "images_pair", ")", "# simclr augment", "\n", "_", ",", "outputs_aux", "=", "model", "(", "images_pair", ",", "simclr", "=", "True", ",", "penultimate", "=", "True", ")", "\n", "\n", "simclr", "=", "normalize", "(", "outputs_aux", "[", "'simclr'", "]", ")", "# normalize", "\n", "sim_matrix", "=", "get_similarity_matrix", "(", "simclr", ",", "multi_gpu", "=", "P", ".", "multi_gpu", ")", "\n", "loss_sim", "=", "Supervised_NT_xent", "(", "sim_matrix", ",", "labels", "=", "rot_sim_labels", ",", "\n", "temperature", "=", "0.07", ",", "multi_gpu", "=", "P", ".", "multi_gpu", ")", "*", "P", ".", "sim_lambda", "\n", "\n", "### total loss ###", "\n", "loss", "=", "loss_sim", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "scheduler", ".", "step", "(", "epoch", "-", "1", "+", "n", "/", "len", "(", "loader", ")", ")", "\n", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "check", ")", "\n", "\n", "### Post-processing stuffs ###", "\n", "penul_1", "=", "outputs_aux", "[", "'penultimate'", "]", "[", ":", "batch_size", "]", "\n", "penul_2", "=", "outputs_aux", "[", "'penultimate'", "]", "[", "4", "*", "batch_size", ":", "5", "*", "batch_size", "]", "\n", "outputs_aux", "[", "'penultimate'", "]", "=", "torch", ".", "cat", "(", "[", "penul_1", ",", "penul_2", "]", ")", "# only use original rotation", "\n", "\n", "### Linear evaluation ###", "\n", "outputs_linear_eval", "=", "linear", "(", "outputs_aux", "[", "'penultimate'", "]", ".", "detach", "(", ")", ")", "\n", "loss_linear", "=", "criterion", "(", "outputs_linear_eval", ",", "labels", ".", "repeat", "(", "2", ")", ")", "\n", "\n", "linear_optim", ".", "zero_grad", "(", ")", "\n", "loss_linear", ".", "backward", "(", ")", "\n", "linear_optim", ".", "step", "(", ")", "\n", "\n", "### Log losses ###", "\n", "losses", "[", "'cls'", "]", ".", "update", "(", "0", ",", "batch_size", ")", "\n", "losses", "[", "'sim'", "]", ".", "update", "(", "loss_sim", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "if", "count", "%", "50", "==", "0", ":", "\n", "            ", "log_", "(", "'[Epoch %3d; %3d] [Time %.3f] [Data %.3f] [LR %.5f]\\n'", "\n", "'[LossC %f] [LossSim %f]'", "%", "\n", "(", "epoch", ",", "count", ",", "batch_time", ".", "value", ",", "data_time", ".", "value", ",", "lr", ",", "\n", "losses", "[", "'cls'", "]", ".", "value", ",", "losses", "[", "'sim'", "]", ".", "value", ")", ")", "\n", "\n", "", "check", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "log_", "(", "'[DONE] [Time %.3f] [Data %.3f] [LossC %f] [LossSim %f]'", "%", "\n", "(", "batch_time", ".", "average", ",", "data_time", ".", "average", ",", "\n", "losses", "[", "'cls'", "]", ".", "average", ",", "losses", "[", "'sim'", "]", ".", "average", ")", ")", "\n", "\n", "if", "logger", "is", "not", "None", ":", "\n", "        ", "logger", ".", "scalar_summary", "(", "'train/loss_cls'", ",", "losses", "[", "'cls'", "]", ".", "average", ",", "epoch", ")", "\n", "logger", ".", "scalar_summary", "(", "'train/loss_sim'", ",", "losses", "[", "'sim'", "]", ".", "average", ",", "epoch", ")", "\n", "logger", ".", "scalar_summary", "(", "'train/batch_time'", ",", "batch_time", ".", "average", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.unsup.simclr_CSI.train": [[13, 113], ["utils.utils.AverageMeter", "utils.utils.AverageMeter", "dict", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "time.time", "enumerate", "log_", "model.train", "utils.utils.AverageMeter.update", "time.time", "labels.to.to", "torch.cat", "torch.cat", "torch.cat", "shift_labels.repeat.repeat", "torch.cat", "simclr_aug", "model", "utils.utils.normalize", "training.contrastive_loss.get_similarity_matrix", "criterion", "optimizer.zero_grad", "loss.backward", "optimizer.step", "scheduler.step", "utils.utils.AverageMeter.update", "outputs_aux[].norm().mean", "torch.cat", "linear", "criterion", "linear_optim.zero_grad", "criterion.backward", "linear_optim.step", "losses[].update", "losses[].update", "losses[].update", "logger.scalar_summary", "logger.scalar_summary", "logger.scalar_summary", "logger.scalar_summary", "images.to.size", "images.to.to", "hflip().chunk", "images[].size", "training.contrastive_loss.NT_xent", "outputs_aux[].detach", "labels.to.repeat", "loss_sim.item", "criterion.item", "log_", "time.time", "images[].to", "images[].to", "P.shift_trans", "P.shift_trans", "time.time", "outputs_aux[].norm", "hflip", "range", "range", "torch.ones_like", "range", "len", "images.to.repeat"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.unsup.simclr.train", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.normalize", "home.repos.pwc.inspect_result.alinlab_CSI.training.contrastive_loss.get_similarity_matrix", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomHSVFunction.backward", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomHSVFunction.backward", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.training.contrastive_loss.NT_xent"], ["def", "train", "(", "P", ",", "epoch", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "loader", ",", "logger", "=", "None", ",", "\n", "simclr_aug", "=", "None", ",", "linear", "=", "None", ",", "linear_optim", "=", "None", ")", ":", "\n", "\n", "    ", "assert", "simclr_aug", "is", "not", "None", "\n", "assert", "P", ".", "sim_lambda", "==", "1.0", "# to avoid mistake", "\n", "assert", "P", ".", "K_shift", ">", "1", "\n", "\n", "if", "logger", "is", "None", ":", "\n", "        ", "log_", "=", "print", "\n", "", "else", ":", "\n", "        ", "log_", "=", "logger", ".", "log", "\n", "\n", "", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "losses", "[", "'cls'", "]", "=", "AverageMeter", "(", ")", "\n", "losses", "[", "'sim'", "]", "=", "AverageMeter", "(", ")", "\n", "losses", "[", "'shift'", "]", "=", "AverageMeter", "(", ")", "\n", "\n", "check", "=", "time", ".", "time", "(", ")", "\n", "for", "n", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "count", "=", "n", "*", "P", ".", "n_gpus", "# number of trained samples", "\n", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "check", ")", "\n", "check", "=", "time", ".", "time", "(", ")", "\n", "\n", "### SimCLR loss ###", "\n", "if", "P", ".", "dataset", "!=", "'imagenet'", ":", "\n", "            ", "batch_size", "=", "images", ".", "size", "(", "0", ")", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "images1", ",", "images2", "=", "hflip", "(", "images", ".", "repeat", "(", "2", ",", "1", ",", "1", ",", "1", ")", ")", ".", "chunk", "(", "2", ")", "# hflip", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "images", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "images1", ",", "images2", "=", "images", "[", "0", "]", ".", "to", "(", "device", ")", ",", "images", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "images1", "=", "torch", ".", "cat", "(", "[", "P", ".", "shift_trans", "(", "images1", ",", "k", ")", "for", "k", "in", "range", "(", "P", ".", "K_shift", ")", "]", ")", "\n", "images2", "=", "torch", ".", "cat", "(", "[", "P", ".", "shift_trans", "(", "images2", ",", "k", ")", "for", "k", "in", "range", "(", "P", ".", "K_shift", ")", "]", ")", "\n", "shift_labels", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones_like", "(", "labels", ")", "*", "k", "for", "k", "in", "range", "(", "P", ".", "K_shift", ")", "]", ",", "0", ")", "# B -> 4B", "\n", "shift_labels", "=", "shift_labels", ".", "repeat", "(", "2", ")", "\n", "\n", "images_pair", "=", "torch", ".", "cat", "(", "[", "images1", ",", "images2", "]", ",", "dim", "=", "0", ")", "# 8B", "\n", "images_pair", "=", "simclr_aug", "(", "images_pair", ")", "# transform", "\n", "\n", "_", ",", "outputs_aux", "=", "model", "(", "images_pair", ",", "simclr", "=", "True", ",", "penultimate", "=", "True", ",", "shift", "=", "True", ")", "\n", "\n", "simclr", "=", "normalize", "(", "outputs_aux", "[", "'simclr'", "]", ")", "# normalize", "\n", "sim_matrix", "=", "get_similarity_matrix", "(", "simclr", ",", "multi_gpu", "=", "P", ".", "multi_gpu", ")", "\n", "loss_sim", "=", "NT_xent", "(", "sim_matrix", ",", "temperature", "=", "0.5", ")", "*", "P", ".", "sim_lambda", "\n", "\n", "loss_shift", "=", "criterion", "(", "outputs_aux", "[", "'shift'", "]", ",", "shift_labels", ")", "\n", "\n", "### total loss ###", "\n", "loss", "=", "loss_sim", "+", "loss_shift", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "scheduler", ".", "step", "(", "epoch", "-", "1", "+", "n", "/", "len", "(", "loader", ")", ")", "\n", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "check", ")", "\n", "\n", "### Post-processing stuffs ###", "\n", "simclr_norm", "=", "outputs_aux", "[", "'simclr'", "]", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "penul_1", "=", "outputs_aux", "[", "'penultimate'", "]", "[", ":", "batch_size", "]", "\n", "penul_2", "=", "outputs_aux", "[", "'penultimate'", "]", "[", "P", ".", "K_shift", "*", "batch_size", ":", "(", "P", ".", "K_shift", "+", "1", ")", "*", "batch_size", "]", "\n", "outputs_aux", "[", "'penultimate'", "]", "=", "torch", ".", "cat", "(", "[", "penul_1", ",", "penul_2", "]", ")", "# only use original rotation", "\n", "\n", "### Linear evaluation ###", "\n", "outputs_linear_eval", "=", "linear", "(", "outputs_aux", "[", "'penultimate'", "]", ".", "detach", "(", ")", ")", "\n", "loss_linear", "=", "criterion", "(", "outputs_linear_eval", ",", "labels", ".", "repeat", "(", "2", ")", ")", "\n", "\n", "linear_optim", ".", "zero_grad", "(", ")", "\n", "loss_linear", ".", "backward", "(", ")", "\n", "linear_optim", ".", "step", "(", ")", "\n", "\n", "losses", "[", "'cls'", "]", ".", "update", "(", "0", ",", "batch_size", ")", "\n", "losses", "[", "'sim'", "]", ".", "update", "(", "loss_sim", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "losses", "[", "'shift'", "]", ".", "update", "(", "loss_shift", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "if", "count", "%", "50", "==", "0", ":", "\n", "            ", "log_", "(", "'[Epoch %3d; %3d] [Time %.3f] [Data %.3f] [LR %.5f]\\n'", "\n", "'[LossC %f] [LossSim %f] [LossShift %f]'", "%", "\n", "(", "epoch", ",", "count", ",", "batch_time", ".", "value", ",", "data_time", ".", "value", ",", "lr", ",", "\n", "losses", "[", "'cls'", "]", ".", "value", ",", "losses", "[", "'sim'", "]", ".", "value", ",", "losses", "[", "'shift'", "]", ".", "value", ")", ")", "\n", "\n", "", "", "log_", "(", "'[DONE] [Time %.3f] [Data %.3f] [LossC %f] [LossSim %f] [LossShift %f]'", "%", "\n", "(", "batch_time", ".", "average", ",", "data_time", ".", "average", ",", "\n", "losses", "[", "'cls'", "]", ".", "average", ",", "losses", "[", "'sim'", "]", ".", "average", ",", "losses", "[", "'shift'", "]", ".", "average", ")", ")", "\n", "\n", "if", "logger", "is", "not", "None", ":", "\n", "        ", "logger", ".", "scalar_summary", "(", "'train/loss_cls'", ",", "losses", "[", "'cls'", "]", ".", "average", ",", "epoch", ")", "\n", "logger", ".", "scalar_summary", "(", "'train/loss_sim'", ",", "losses", "[", "'sim'", "]", ".", "average", ",", "epoch", ")", "\n", "logger", ".", "scalar_summary", "(", "'train/loss_shift'", ",", "losses", "[", "'shift'", "]", ".", "average", ",", "epoch", ")", "\n", "logger", ".", "scalar_summary", "(", "'train/batch_time'", ",", "batch_time", ".", "average", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.unsup.simclr.train": [[13, 102], ["utils.utils.AverageMeter", "utils.utils.AverageMeter", "dict", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "time.time", "enumerate", "log_", "model.train", "utils.utils.AverageMeter.update", "time.time", "labels.to.to", "simclr_aug", "model", "utils.utils.normalize", "training.contrastive_loss.get_similarity_matrix", "optimizer.zero_grad", "loss.backward", "optimizer.step", "scheduler.step", "utils.utils.AverageMeter.update", "outputs_aux[].norm().mean", "linear", "criterion", "linear_optim.zero_grad", "criterion.backward", "linear_optim.step", "losses[].update", "losses[].update", "time.time", "logger.scalar_summary", "logger.scalar_summary", "logger.scalar_summary", "images.to.size", "images.to.to", "hflip", "images[].size", "torch.cat", "training.contrastive_loss.NT_xent", "outputs_aux[].detach", "labels.to.repeat", "loss_sim.item", "log_", "time.time", "images.to.repeat", "images[].to", "images[].to", "time.time", "outputs_aux[].norm", "len"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.unsup.simclr.train", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.normalize", "home.repos.pwc.inspect_result.alinlab_CSI.training.contrastive_loss.get_similarity_matrix", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomHSVFunction.backward", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomHSVFunction.backward", "home.repos.pwc.inspect_result.alinlab_CSI.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.training.contrastive_loss.NT_xent"], ["def", "train", "(", "P", ",", "epoch", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "loader", ",", "logger", "=", "None", ",", "\n", "simclr_aug", "=", "None", ",", "linear", "=", "None", ",", "linear_optim", "=", "None", ")", ":", "\n", "\n", "    ", "assert", "simclr_aug", "is", "not", "None", "\n", "assert", "P", ".", "sim_lambda", "==", "1.0", "\n", "\n", "if", "logger", "is", "None", ":", "\n", "        ", "log_", "=", "print", "\n", "", "else", ":", "\n", "        ", "log_", "=", "logger", ".", "log", "\n", "\n", "", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "losses", "[", "'cls'", "]", "=", "AverageMeter", "(", ")", "\n", "losses", "[", "'sim'", "]", "=", "AverageMeter", "(", ")", "\n", "\n", "check", "=", "time", ".", "time", "(", ")", "\n", "for", "n", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "count", "=", "n", "*", "P", ".", "n_gpus", "# number of trained samples", "\n", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "check", ")", "\n", "check", "=", "time", ".", "time", "(", ")", "\n", "\n", "### SimCLR loss ###", "\n", "if", "P", ".", "dataset", "!=", "'imagenet'", ":", "\n", "            ", "batch_size", "=", "images", ".", "size", "(", "0", ")", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "images_pair", "=", "hflip", "(", "images", ".", "repeat", "(", "2", ",", "1", ",", "1", ",", "1", ")", ")", "# 2B with hflip", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "images", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "images1", ",", "images2", "=", "images", "[", "0", "]", ".", "to", "(", "device", ")", ",", "images", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "images_pair", "=", "torch", ".", "cat", "(", "[", "images1", ",", "images2", "]", ",", "dim", "=", "0", ")", "# 2B", "\n", "\n", "", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "images_pair", "=", "simclr_aug", "(", "images_pair", ")", "# transform", "\n", "\n", "_", ",", "outputs_aux", "=", "model", "(", "images_pair", ",", "simclr", "=", "True", ",", "penultimate", "=", "True", ")", "\n", "\n", "simclr", "=", "normalize", "(", "outputs_aux", "[", "'simclr'", "]", ")", "# normalize", "\n", "sim_matrix", "=", "get_similarity_matrix", "(", "simclr", ",", "multi_gpu", "=", "P", ".", "multi_gpu", ")", "\n", "loss_sim", "=", "NT_xent", "(", "sim_matrix", ",", "temperature", "=", "0.5", ")", "*", "P", ".", "sim_lambda", "\n", "\n", "### total loss ###", "\n", "loss", "=", "loss_sim", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "scheduler", ".", "step", "(", "epoch", "-", "1", "+", "n", "/", "len", "(", "loader", ")", ")", "\n", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "check", ")", "\n", "\n", "### Post-processing stuffs ###", "\n", "simclr_norm", "=", "outputs_aux", "[", "'simclr'", "]", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "### Linear evaluation ###", "\n", "outputs_linear_eval", "=", "linear", "(", "outputs_aux", "[", "'penultimate'", "]", ".", "detach", "(", ")", ")", "\n", "loss_linear", "=", "criterion", "(", "outputs_linear_eval", ",", "labels", ".", "repeat", "(", "2", ")", ")", "\n", "\n", "linear_optim", ".", "zero_grad", "(", ")", "\n", "loss_linear", ".", "backward", "(", ")", "\n", "linear_optim", ".", "step", "(", ")", "\n", "\n", "### Log losses ###", "\n", "losses", "[", "'cls'", "]", ".", "update", "(", "0", ",", "batch_size", ")", "\n", "losses", "[", "'sim'", "]", ".", "update", "(", "loss_sim", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "if", "count", "%", "50", "==", "0", ":", "\n", "            ", "log_", "(", "'[Epoch %3d; %3d] [Time %.3f] [Data %.3f] [LR %.5f]\\n'", "\n", "'[LossC %f] [LossSim %f]'", "%", "\n", "(", "epoch", ",", "count", ",", "batch_time", ".", "value", ",", "data_time", ".", "value", ",", "lr", ",", "\n", "losses", "[", "'cls'", "]", ".", "value", ",", "losses", "[", "'sim'", "]", ".", "value", ")", ")", "\n", "\n", "", "check", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "log_", "(", "'[DONE] [Time %.3f] [Data %.3f] [LossC %f] [LossSim %f]'", "%", "\n", "(", "batch_time", ".", "average", ",", "data_time", ".", "average", ",", "\n", "losses", "[", "'cls'", "]", ".", "average", ",", "losses", "[", "'sim'", "]", ".", "average", ")", ")", "\n", "\n", "if", "logger", "is", "not", "None", ":", "\n", "        ", "logger", ".", "scalar_summary", "(", "'train/loss_cls'", ",", "losses", "[", "'cls'", "]", ".", "average", ",", "epoch", ")", "\n", "logger", ".", "scalar_summary", "(", "'train/loss_sim'", ",", "losses", "[", "'sim'", "]", ".", "average", ",", "epoch", ")", "\n", "logger", ".", "scalar_summary", "(", "'train/batch_time'", ",", "batch_time", ".", "average", ",", "epoch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alinlab_CSI.unsup.__init__.setup": [[1, 19], ["NotImplementedError"], "function", ["None"], [""]], "home.repos.pwc.inspect_result.alinlab_CSI.unsup.__init__.update_comp_loss": [[21, 25], ["loss_dict[].update", "loss_dict[].update", "loss_dict[].update"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.AverageMeter.update"], []], "home.repos.pwc.inspect_result.alinlab_CSI.unsup.__init__.summary_comp_loss": [[27, 31], ["logger.scalar_summary", "logger.scalar_summary", "logger.scalar_summary"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.scalar_summary"], []], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet.BasicBlock.__init__": [[22, 39], ["torch.Module.__init__", "resnet_imagenet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet_imagenet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.conv3x3", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet.BasicBlock.forward": [[40, 57], ["resnet_imagenet.BasicBlock.conv1", "resnet_imagenet.BasicBlock.bn1", "resnet_imagenet.BasicBlock.relu", "resnet_imagenet.BasicBlock.conv2", "resnet_imagenet.BasicBlock.bn2", "resnet_imagenet.BasicBlock.relu", "resnet_imagenet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet.Bottleneck.__init__": [[68, 84], ["torch.Module.__init__", "resnet_imagenet.conv1x1", "norm_layer", "resnet_imagenet.conv3x3", "norm_layer", "resnet_imagenet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet.conv1x1", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.conv3x3", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet.Bottleneck.forward": [[85, 106], ["resnet_imagenet.Bottleneck.conv1", "resnet_imagenet.Bottleneck.bn1", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.conv2", "resnet_imagenet.Bottleneck.bn2", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.conv3", "resnet_imagenet.Bottleneck.bn3", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet.ResNet.__init__": [[109, 161], ["models.base_model.BaseModel.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "models.transform_layers.NormalizeLayer", "resnet_imagenet.ResNet.modules", "len", "ValueError", "isinstance", "resnet_imagenet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "\n", "zero_init_residual", "=", "False", ",", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "last_dim", "=", "512", "*", "block", ".", "expansion", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", "last_dim", ",", "num_classes", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "normalize", "=", "NormalizeLayer", "(", ")", "\n", "self", ".", "last_dim", "=", "512", "*", "block", ".", "expansion", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet.ResNet._make_layer": [[162, 185], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_imagenet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet.ResNet.penultimate": [[186, 213], ["resnet_imagenet.ResNet.normalize", "resnet_imagenet.ResNet.conv1", "resnet_imagenet.ResNet.bn1", "resnet_imagenet.ResNet.relu", "resnet_imagenet.ResNet.maxpool", "out_list.append", "resnet_imagenet.ResNet.layer1", "out_list.append", "resnet_imagenet.ResNet.layer2", "out_list.append", "resnet_imagenet.ResNet.layer3", "out_list.append", "resnet_imagenet.ResNet.layer4", "out_list.append", "resnet_imagenet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.normalize"], ["", "def", "penultimate", "(", "self", ",", "x", ",", "all_features", "=", "False", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "out_list", "=", "[", "]", "\n", "\n", "x", "=", "self", ".", "normalize", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "out_list", ".", "append", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out_list", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "out_list", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "out_list", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "out_list", ".", "append", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "\n", "if", "all_features", ":", "\n", "            ", "return", "x", ",", "out_list", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet.conv3x3": [[8, 12], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet.conv1x1": [[14, 17], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet._resnet": [[215, 218], ["resnet_imagenet.ResNet"], "function", ["None"], ["", "", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet.resnet18": [[220, 225], ["resnet_imagenet._resnet"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet._resnet"], ["", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet.resnet50": [[227, 232], ["resnet_imagenet._resnet"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet._resnet"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomResizedCropLayer.__init__": [[70, 84], ["torch.Module.__init__", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "transform_layers.RandomResizedCropLayer.register_buffer"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "None", ",", "scale", "=", "(", "0.08", ",", "1.0", ")", ",", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ")", ":", "\n", "        ", "'''\n            Inception Crop\n            size (tuple): size of fowarding image (C, W, H)\n            scale (tuple): range of size of the origin size cropped\n            ratio (tuple): range of aspect ratio of the origin aspect ratio cropped\n        '''", "\n", "super", "(", "RandomResizedCropLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "_eye", "=", "torch", ".", "eye", "(", "2", ",", "3", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "register_buffer", "(", "'_eye'", ",", "_eye", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomResizedCropLayer.forward": [[85, 105], ["inputs.size", "transform_layers.RandomResizedCropLayer._eye.repeat", "torch.affine_grid().to", "torch.affine_grid().to", "torch.affine_grid().to", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "transform_layers.RandomResizedCropLayer._sample_latent", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "inputs.size"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.HorizontalFlipRandomCrop._sample_latent"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "whbias", "=", "None", ")", ":", "\n", "        ", "_device", "=", "inputs", ".", "device", "\n", "N", "=", "inputs", ".", "size", "(", "0", ")", "\n", "_theta", "=", "self", ".", "_eye", ".", "repeat", "(", "N", ",", "1", ",", "1", ")", "\n", "\n", "if", "whbias", "is", "None", ":", "\n", "            ", "whbias", "=", "self", ".", "_sample_latent", "(", "inputs", ")", "\n", "\n", "", "_theta", "[", ":", ",", "0", ",", "0", "]", "=", "whbias", "[", ":", ",", "0", "]", "\n", "_theta", "[", ":", ",", "1", ",", "1", "]", "=", "whbias", "[", ":", ",", "1", "]", "\n", "_theta", "[", ":", ",", "0", ",", "2", "]", "=", "whbias", "[", ":", ",", "2", "]", "\n", "_theta", "[", ":", ",", "1", ",", "2", "]", "=", "whbias", "[", ":", ",", "3", "]", "\n", "\n", "grid", "=", "F", ".", "affine_grid", "(", "_theta", ",", "inputs", ".", "size", "(", ")", ",", "**", "kwargs", ")", ".", "to", "(", "_device", ")", "\n", "output", "=", "F", ".", "grid_sample", "(", "inputs", ",", "grid", ",", "padding_mode", "=", "'reflection'", ",", "**", "kwargs", ")", "\n", "\n", "if", "self", ".", "size", "is", "not", "None", ":", "\n", "            ", "output", "=", "F", ".", "adaptive_avg_pool2d", "(", "output", ",", "self", ".", "size", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomResizedCropLayer._clamp": [[106, 131], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "_clamp", "(", "self", ",", "whbias", ")", ":", "\n", "\n", "        ", "w", "=", "whbias", "[", ":", ",", "0", "]", "\n", "h", "=", "whbias", "[", ":", ",", "1", "]", "\n", "w_bias", "=", "whbias", "[", ":", ",", "2", "]", "\n", "h_bias", "=", "whbias", "[", ":", ",", "3", "]", "\n", "\n", "# Clamp with scale", "\n", "w", "=", "torch", ".", "clamp", "(", "w", ",", "*", "self", ".", "scale", ")", "\n", "h", "=", "torch", ".", "clamp", "(", "h", ",", "*", "self", ".", "scale", ")", "\n", "\n", "# Clamp with ratio", "\n", "w", "=", "self", ".", "ratio", "[", "0", "]", "*", "h", "+", "torch", ".", "relu", "(", "w", "-", "self", ".", "ratio", "[", "0", "]", "*", "h", ")", "\n", "w", "=", "self", ".", "ratio", "[", "1", "]", "*", "h", "-", "torch", ".", "relu", "(", "self", ".", "ratio", "[", "1", "]", "*", "h", "-", "w", ")", "\n", "\n", "# Clamp with bias range: w_bias \\in (w - 1, 1 - w), h_bias \\in (h - 1, 1 - h)", "\n", "w_bias", "=", "w", "-", "1", "+", "torch", ".", "relu", "(", "w_bias", "-", "w", "+", "1", ")", "\n", "w_bias", "=", "1", "-", "w", "-", "torch", ".", "relu", "(", "1", "-", "w", "-", "w_bias", ")", "\n", "\n", "h_bias", "=", "h", "-", "1", "+", "torch", ".", "relu", "(", "h_bias", "-", "h", "+", "1", ")", "\n", "h_bias", "=", "1", "-", "h", "-", "torch", ".", "relu", "(", "1", "-", "h", "-", "h_bias", ")", "\n", "\n", "whbias", "=", "torch", ".", "stack", "(", "[", "w", ",", "h", ",", "w_bias", ",", "h_bias", "]", ",", "dim", "=", "0", ")", ".", "t", "(", ")", "\n", "\n", "return", "whbias", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomResizedCropLayer._sample_latent": [[132, 166], ["numpy.exp", "numpy.round", "numpy.round", "numpy.column_stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.random.uniform", "math.log", "math.log", "numpy.random.uniform", "numpy.sqrt", "numpy.sqrt", "numpy.concatenate", "numpy.concatenate", "numpy.random.randint", "numpy.random.randint", "numpy.ones", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.log", "home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.Logger.log"], ["", "def", "_sample_latent", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "_device", "=", "inputs", ".", "device", "\n", "N", ",", "_", ",", "width", ",", "height", "=", "inputs", ".", "shape", "\n", "\n", "# N * 10 trial", "\n", "area", "=", "width", "*", "height", "\n", "target_area", "=", "np", ".", "random", ".", "uniform", "(", "*", "self", ".", "scale", ",", "N", "*", "10", ")", "*", "area", "\n", "log_ratio", "=", "(", "math", ".", "log", "(", "self", ".", "ratio", "[", "0", "]", ")", ",", "math", ".", "log", "(", "self", ".", "ratio", "[", "1", "]", ")", ")", "\n", "aspect_ratio", "=", "np", ".", "exp", "(", "np", ".", "random", ".", "uniform", "(", "*", "log_ratio", ",", "N", "*", "10", ")", ")", "\n", "\n", "# If doesn't satisfy ratio condition, then do central crop", "\n", "w", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", "\n", "h", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", "\n", "cond", "=", "(", "0", "<", "w", ")", "*", "(", "w", "<=", "width", ")", "*", "(", "0", "<", "h", ")", "*", "(", "h", "<=", "height", ")", "\n", "w", "=", "w", "[", "cond", "]", "\n", "h", "=", "h", "[", "cond", "]", "\n", "cond_len", "=", "w", ".", "shape", "[", "0", "]", "\n", "if", "cond_len", ">=", "N", ":", "\n", "            ", "w", "=", "w", "[", ":", "N", "]", "\n", "h", "=", "h", "[", ":", "N", "]", "\n", "", "else", ":", "\n", "            ", "w", "=", "np", ".", "concatenate", "(", "[", "w", ",", "np", ".", "ones", "(", "N", "-", "cond_len", ")", "*", "width", "]", ")", "\n", "h", "=", "np", ".", "concatenate", "(", "[", "h", ",", "np", ".", "ones", "(", "N", "-", "cond_len", ")", "*", "height", "]", ")", "\n", "\n", "", "w_bias", "=", "np", ".", "random", ".", "randint", "(", "w", "-", "width", ",", "width", "-", "w", "+", "1", ")", "/", "width", "\n", "h_bias", "=", "np", ".", "random", ".", "randint", "(", "h", "-", "height", ",", "height", "-", "h", "+", "1", ")", "/", "height", "\n", "w", "=", "w", "/", "width", "\n", "h", "=", "h", "/", "height", "\n", "\n", "whbias", "=", "np", ".", "column_stack", "(", "[", "w", ",", "h", ",", "w_bias", ",", "h_bias", "]", ")", "\n", "whbias", "=", "torch", ".", "tensor", "(", "whbias", ",", "device", "=", "_device", ")", "\n", "\n", "return", "whbias", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.HorizontalFlipRandomCrop.__init__": [[169, 174], ["torch.Module.__init__", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "transform_layers.HorizontalFlipRandomCrop.register_buffer"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_range", ")", ":", "\n", "        ", "super", "(", "HorizontalFlipRandomCrop", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_range", "=", "max_range", "\n", "_eye", "=", "torch", ".", "eye", "(", "2", ",", "3", ")", "\n", "self", ".", "register_buffer", "(", "'_eye'", ",", "_eye", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.HorizontalFlipRandomCrop.forward": [[175, 194], ["input.size", "transform_layers.HorizontalFlipRandomCrop._eye.repeat", "torch.affine_grid().to", "torch.affine_grid().to", "torch.affine_grid().to", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "input.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "sign", "=", "None", ",", "bias", "=", "None", ",", "rotation", "=", "None", ")", ":", "\n", "        ", "_device", "=", "input", ".", "device", "\n", "N", "=", "input", ".", "size", "(", "0", ")", "\n", "_theta", "=", "self", ".", "_eye", ".", "repeat", "(", "N", ",", "1", ",", "1", ")", "\n", "\n", "if", "sign", "is", "None", ":", "\n", "            ", "sign", "=", "torch", ".", "bernoulli", "(", "torch", ".", "ones", "(", "N", ",", "device", "=", "_device", ")", "*", "0.5", ")", "*", "2", "-", "1", "\n", "", "if", "bias", "is", "None", ":", "\n", "            ", "bias", "=", "torch", ".", "empty", "(", "(", "N", ",", "2", ")", ",", "device", "=", "_device", ")", ".", "uniform_", "(", "-", "self", ".", "max_range", ",", "self", ".", "max_range", ")", "\n", "", "_theta", "[", ":", ",", "0", ",", "0", "]", "=", "sign", "\n", "_theta", "[", ":", ",", ":", ",", "2", "]", "=", "bias", "\n", "\n", "if", "rotation", "is", "not", "None", ":", "\n", "            ", "_theta", "[", ":", ",", "0", ":", "2", ",", "0", ":", "2", "]", "=", "rotation", "\n", "\n", "", "grid", "=", "F", ".", "affine_grid", "(", "_theta", ",", "input", ".", "size", "(", ")", ",", "**", "kwargs", ")", ".", "to", "(", "_device", ")", "\n", "output", "=", "F", ".", "grid_sample", "(", "input", ",", "grid", ",", "padding_mode", "=", "'reflection'", ",", "**", "kwargs", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.HorizontalFlipRandomCrop._sample_latent": [[195, 199], ["torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "_sample_latent", "(", "self", ",", "N", ",", "device", "=", "None", ")", ":", "\n", "        ", "sign", "=", "torch", ".", "bernoulli", "(", "torch", ".", "ones", "(", "N", ",", "device", "=", "device", ")", "*", "0.5", ")", "*", "2", "-", "1", "\n", "bias", "=", "torch", ".", "empty", "(", "(", "N", ",", "2", ")", ",", "device", "=", "device", ")", ".", "uniform_", "(", "-", "self", ".", "max_range", ",", "self", ".", "max_range", ")", "\n", "return", "sign", ",", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.Rotation.__init__": [[202, 206], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_range", "=", "4", ")", ":", "\n", "        ", "super", "(", "Rotation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_range", "=", "max_range", "\n", "self", ".", "prob", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.Rotation.forward": [[207, 226], ["input.size", "numpy.random.randint", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "input.new_full", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "input.size", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "aug_index", "=", "None", ")", ":", "\n", "        ", "_device", "=", "input", ".", "device", "\n", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "input", ".", "size", "(", ")", "\n", "\n", "if", "aug_index", "is", "None", ":", "\n", "            ", "aug_index", "=", "np", ".", "random", ".", "randint", "(", "4", ")", "\n", "\n", "output", "=", "torch", ".", "rot90", "(", "input", ",", "aug_index", ",", "(", "2", ",", "3", ")", ")", "\n", "\n", "_prob", "=", "input", ".", "new_full", "(", "(", "input", ".", "size", "(", "0", ")", ",", ")", ",", "self", ".", "prob", ")", "\n", "_mask", "=", "torch", ".", "bernoulli", "(", "_prob", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "output", "=", "_mask", "*", "input", "+", "(", "1", "-", "_mask", ")", "*", "output", "\n", "\n", "", "else", ":", "\n", "            ", "aug_index", "=", "aug_index", "%", "self", ".", "max_range", "\n", "output", "=", "torch", ".", "rot90", "(", "input", ",", "aug_index", ",", "(", "2", ",", "3", ")", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.CutPerm.__init__": [[229, 233], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_range", "=", "4", ")", ":", "\n", "        ", "super", "(", "CutPerm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_range", "=", "max_range", "\n", "self", ".", "prob", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.CutPerm.forward": [[234, 253], ["input.size", "numpy.random.randint", "transform_layers.CutPerm._cutperm", "input.new_full", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "transform_layers.CutPerm._cutperm", "input.size", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.CutPerm._cutperm", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.CutPerm._cutperm"], ["", "def", "forward", "(", "self", ",", "input", ",", "aug_index", "=", "None", ")", ":", "\n", "        ", "_device", "=", "input", ".", "device", "\n", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "input", ".", "size", "(", ")", "\n", "\n", "if", "aug_index", "is", "None", ":", "\n", "            ", "aug_index", "=", "np", ".", "random", ".", "randint", "(", "4", ")", "\n", "\n", "output", "=", "self", ".", "_cutperm", "(", "input", ",", "aug_index", ")", "\n", "\n", "_prob", "=", "input", ".", "new_full", "(", "(", "input", ".", "size", "(", "0", ")", ",", ")", ",", "self", ".", "prob", ")", "\n", "_mask", "=", "torch", ".", "bernoulli", "(", "_prob", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "output", "=", "_mask", "*", "input", "+", "(", "1", "-", "_mask", ")", "*", "output", "\n", "\n", "", "else", ":", "\n", "            ", "aug_index", "=", "aug_index", "%", "self", ".", "max_range", "\n", "output", "=", "self", ".", "_cutperm", "(", "input", ",", "aug_index", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.CutPerm._cutperm": [[254, 269], ["torch.cat.size", "torch.cat.size", "torch.cat.size", "int", "int", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_cutperm", "(", "self", ",", "inputs", ",", "aug_index", ")", ":", "\n", "\n", "        ", "_", ",", "_", ",", "H", ",", "W", "=", "inputs", ".", "size", "(", ")", "\n", "h_mid", "=", "int", "(", "H", "/", "2", ")", "\n", "w_mid", "=", "int", "(", "W", "/", "2", ")", "\n", "\n", "jigsaw_h", "=", "aug_index", "//", "2", "\n", "jigsaw_v", "=", "aug_index", "%", "2", "\n", "\n", "if", "jigsaw_h", "==", "1", ":", "\n", "            ", "inputs", "=", "torch", ".", "cat", "(", "(", "inputs", "[", ":", ",", ":", ",", "h_mid", ":", ",", ":", "]", ",", "inputs", "[", ":", ",", ":", ",", "0", ":", "h_mid", ",", ":", "]", ")", ",", "dim", "=", "2", ")", "\n", "", "if", "jigsaw_v", "==", "1", ":", "\n", "            ", "inputs", "=", "torch", ".", "cat", "(", "(", "inputs", "[", ":", ",", ":", ",", ":", ",", "w_mid", ":", "]", ",", "inputs", "[", ":", ",", ":", ",", ":", ",", "0", ":", "w_mid", "]", ")", ",", "dim", "=", "3", ")", "\n", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.HorizontalFlipLayer.__init__": [[272, 283], ["torch.Module.__init__", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "transform_layers.HorizontalFlipLayer.register_buffer"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        img_size : (int, int, int)\n            Height and width must be powers of 2.  E.g. (32, 32, 1) or\n            (64, 128, 3). Last number indicates number of channels, e.g. 1 for\n            grayscale or 3 for RGB\n        \"\"\"", "\n", "super", "(", "HorizontalFlipLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "_eye", "=", "torch", ".", "eye", "(", "2", ",", "3", ")", "\n", "self", ".", "register_buffer", "(", "'_eye'", ",", "_eye", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.HorizontalFlipLayer.forward": [[284, 295], ["torch.grid_sample.size", "transform_layers.HorizontalFlipLayer._eye.repeat", "torch.affine_grid().to", "torch.affine_grid().to", "torch.affine_grid().to", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.grid_sample.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "_device", "=", "inputs", ".", "device", "\n", "\n", "N", "=", "inputs", ".", "size", "(", "0", ")", "\n", "_theta", "=", "self", ".", "_eye", ".", "repeat", "(", "N", ",", "1", ",", "1", ")", "\n", "r_sign", "=", "torch", ".", "bernoulli", "(", "torch", ".", "ones", "(", "N", ",", "device", "=", "_device", ")", "*", "0.5", ")", "*", "2", "-", "1", "\n", "_theta", "[", ":", ",", "0", ",", "0", "]", "=", "r_sign", "\n", "grid", "=", "F", ".", "affine_grid", "(", "_theta", ",", "inputs", ".", "size", "(", ")", ",", "**", "kwargs", ")", ".", "to", "(", "_device", ")", "\n", "inputs", "=", "F", ".", "grid_sample", "(", "inputs", ",", "grid", ",", "padding_mode", "=", "'reflection'", ",", "**", "kwargs", ")", "\n", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomColorGrayLayer.__init__": [[298, 304], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "transform_layers.RandomColorGrayLayer.register_buffer", "torch.tensor.view", "torch.tensor.view", "torch.tensor.view"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "super", "(", "RandomColorGrayLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prob", "=", "p", "\n", "\n", "_weight", "=", "torch", ".", "tensor", "(", "[", "[", "0.299", ",", "0.587", ",", "0.114", "]", "]", ")", "\n", "self", ".", "register_buffer", "(", "'_weight'", ",", "_weight", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomColorGrayLayer.forward": [[305, 320], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs.new_full", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "inputs.size", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "aug_index", "=", "None", ")", ":", "\n", "\n", "        ", "if", "aug_index", "==", "0", ":", "\n", "            ", "return", "inputs", "\n", "\n", "", "l", "=", "F", ".", "conv2d", "(", "inputs", ",", "self", ".", "_weight", ")", "\n", "gray", "=", "torch", ".", "cat", "(", "[", "l", ",", "l", ",", "l", "]", ",", "dim", "=", "1", ")", "\n", "\n", "if", "aug_index", "is", "None", ":", "\n", "            ", "_prob", "=", "inputs", ".", "new_full", "(", "(", "inputs", ".", "size", "(", "0", ")", ",", ")", ",", "self", ".", "prob", ")", "\n", "_mask", "=", "torch", ".", "bernoulli", "(", "_prob", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "gray", "=", "inputs", "*", "(", "1", "-", "_mask", ")", "+", "gray", "*", "_mask", "\n", "\n", "", "return", "gray", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.ColorJitterLayer.__init__": [[323, 331], ["torch.Module.__init__", "transform_layers.ColorJitterLayer._check_input", "transform_layers.ColorJitterLayer._check_input", "transform_layers.ColorJitterLayer._check_input", "transform_layers.ColorJitterLayer._check_input"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.ColorJitterLayer._check_input", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.ColorJitterLayer._check_input", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.ColorJitterLayer._check_input", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.ColorJitterLayer._check_input"], ["    ", "def", "__init__", "(", "self", ",", "p", ",", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ")", ":", "\n", "        ", "super", "(", "ColorJitterLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prob", "=", "p", "\n", "self", ".", "brightness", "=", "self", ".", "_check_input", "(", "brightness", ",", "'brightness'", ")", "\n", "self", ".", "contrast", "=", "self", ".", "_check_input", "(", "contrast", ",", "'contrast'", ")", "\n", "self", ".", "saturation", "=", "self", ".", "_check_input", "(", "saturation", ",", "'saturation'", ")", "\n", "self", ".", "hue", "=", "self", ".", "_check_input", "(", "hue", ",", "'hue'", ",", "center", "=", "0", ",", "bound", "=", "(", "-", "0.5", ",", "0.5", ")", ",", "\n", "clip_first_on_zero", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.ColorJitterLayer._check_input": [[332, 350], ["isinstance", "float", "ValueError", "max", "isinstance", "TypeError", "len", "ValueError"], "methods", ["None"], ["", "def", "_check_input", "(", "self", ",", "value", ",", "name", ",", "center", "=", "1", ",", "bound", "=", "(", "0", ",", "float", "(", "'inf'", ")", ")", ",", "clip_first_on_zero", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "if", "value", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"If {} is a single number, it must be non negative.\"", ".", "format", "(", "name", ")", ")", "\n", "", "value", "=", "[", "center", "-", "value", ",", "center", "+", "value", "]", "\n", "if", "clip_first_on_zero", ":", "\n", "                ", "value", "[", "0", "]", "=", "max", "(", "value", "[", "0", "]", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "value", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "value", ")", "==", "2", ":", "\n", "            ", "if", "not", "bound", "[", "0", "]", "<=", "value", "[", "0", "]", "<=", "value", "[", "1", "]", "<=", "bound", "[", "1", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"{} values should be between {}\"", ".", "format", "(", "name", ",", "bound", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"{} should be a single number or a list/tuple with lenght 2.\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "# if value is 0 or (1., 1.) for brightness/contrast/saturation", "\n", "# or (0., 0.) for hue, do nothing", "\n", "", "if", "value", "[", "0", "]", "==", "value", "[", "1", "]", "==", "center", ":", "\n", "            ", "value", "=", "None", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.ColorJitterLayer.adjust_contrast": [[351, 357], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "x.new_empty().uniform_", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x.new_empty", "x.size"], "methods", ["None"], ["", "def", "adjust_contrast", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "contrast", ":", "\n", "            ", "factor", "=", "x", ".", "new_empty", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "uniform_", "(", "*", "self", ".", "contrast", ")", "\n", "means", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "[", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "means", ")", "*", "factor", "+", "means", "\n", "", "return", "torch", ".", "clamp", "(", "x", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.ColorJitterLayer.adjust_hsv": [[358, 371], ["x.new_zeros", "x.new_ones", "x.new_ones", "RandomHSVFunction.apply", "x.size", "x.size", "x.size", "x.new_zeros.uniform_", "f_s.uniform_.uniform_.uniform_", "f_v.uniform_.uniform_.uniform_"], "methods", ["None"], ["", "def", "adjust_hsv", "(", "self", ",", "x", ")", ":", "\n", "        ", "f_h", "=", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "f_s", "=", "x", ".", "new_ones", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "f_v", "=", "x", ".", "new_ones", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "hue", ":", "\n", "            ", "f_h", ".", "uniform_", "(", "*", "self", ".", "hue", ")", "\n", "", "if", "self", ".", "saturation", ":", "\n", "            ", "f_s", "=", "f_s", ".", "uniform_", "(", "*", "self", ".", "saturation", ")", "\n", "", "if", "self", ".", "brightness", ":", "\n", "            ", "f_v", "=", "f_v", ".", "uniform_", "(", "*", "self", ".", "brightness", ")", "\n", "\n", "", "return", "RandomHSVFunction", ".", "apply", "(", "x", ",", "f_h", ",", "f_s", ",", "f_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.ColorJitterLayer.transform": [[372, 383], ["numpy.random.rand", "t"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "inputs", ")", ":", "\n", "# Shuffle transform", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "0.5", ":", "\n", "            ", "transforms", "=", "[", "self", ".", "adjust_contrast", ",", "self", ".", "adjust_hsv", "]", "\n", "", "else", ":", "\n", "            ", "transforms", "=", "[", "self", ".", "adjust_hsv", ",", "self", ".", "adjust_contrast", "]", "\n", "\n", "", "for", "t", "in", "transforms", ":", "\n", "            ", "inputs", "=", "t", "(", "inputs", ")", "\n", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.ColorJitterLayer.forward": [[384, 388], ["inputs.new_full", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "inputs.size", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "transform_layers.ColorJitterLayer.transform"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.ColorJitterLayer.transform"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "_prob", "=", "inputs", ".", "new_full", "(", "(", "inputs", ".", "size", "(", "0", ")", ",", ")", ",", "self", ".", "prob", ")", "\n", "_mask", "=", "torch", ".", "bernoulli", "(", "_prob", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "return", "inputs", "*", "(", "1", "-", "_mask", ")", "+", "self", ".", "transform", "(", "inputs", ")", "*", "_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomHSVFunction.forward": [[391, 405], ["transform_layers.rgb2hsv", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "transform_layers.hsv2rgb"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.rgb2hsv", "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.hsv2rgb"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "f_h", ",", "f_s", ",", "f_v", ")", ":", "\n", "# ctx is a context object that can be used to stash information", "\n", "# for backward computation", "\n", "        ", "x", "=", "rgb2hsv", "(", "x", ")", "\n", "h", "=", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "h", "+=", "(", "f_h", "*", "255.", "/", "360.", ")", "\n", "h", "=", "(", "h", "%", "1", ")", "\n", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "h", "\n", "x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "f_s", "\n", "x", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "x", "[", ":", ",", "2", ",", ":", ",", ":", "]", "*", "f_v", "\n", "x", "=", "torch", ".", "clamp", "(", "x", ",", "0", ",", "1", ")", "\n", "x", "=", "hsv2rgb", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.RandomHSVFunction.backward": [[406, 414], ["grad_output.clone"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# We return as many input gradients as there were arguments.", "\n", "# Gradients of non-Tensor arguments to forward must be None.", "\n", "        ", "grad_input", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "grad_output", ".", "clone", "(", ")", "\n", "", "return", "grad_input", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.NormalizeLayer.__init__": [[423, 425], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NormalizeLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.NormalizeLayer.forward": [[426, 428], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "(", "inputs", "-", "0.5", ")", "/", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.rgb2hsv": [[16, 43], ["torch.atan2", "torch.atan2", "torch.atan2", "torch.stack", "torch.stack", "torch.stack", "rgb.max", "rgb.min", "math.sqrt", "torch.isfinite", "torch.isfinite", "torch.isfinite"], "function", ["None"], ["", "def", "rgb2hsv", "(", "rgb", ")", ":", "\n", "    ", "\"\"\"Convert a 4-d RGB tensor to the HSV counterpart.\n\n    Here, we compute hue using atan2() based on the definition in [1],\n    instead of using the common lookup table approach as in [2, 3].\n    Those values agree when the angle is a multiple of 30\u00b0,\n    otherwise they may differ at most ~1.2\u00b0.\n\n    References\n    [1] https://en.wikipedia.org/wiki/Hue\n    [2] https://www.rapidtables.com/convert/color/rgb-to-hsv.html\n    [3] https://github.com/scikit-image/scikit-image/blob/master/skimage/color/colorconv.py#L212\n    \"\"\"", "\n", "\n", "r", ",", "g", ",", "b", "=", "rgb", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "rgb", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "rgb", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "\n", "Cmax", "=", "rgb", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "Cmin", "=", "rgb", ".", "min", "(", "1", ")", "[", "0", "]", "\n", "delta", "=", "Cmax", "-", "Cmin", "\n", "\n", "hue", "=", "torch", ".", "atan2", "(", "math", ".", "sqrt", "(", "3", ")", "*", "(", "g", "-", "b", ")", ",", "2", "*", "r", "-", "g", "-", "b", ")", "\n", "hue", "=", "(", "hue", "%", "(", "2", "*", "math", ".", "pi", ")", ")", "/", "(", "2", "*", "math", ".", "pi", ")", "\n", "saturate", "=", "delta", "/", "Cmax", "\n", "value", "=", "Cmax", "\n", "hsv", "=", "torch", ".", "stack", "(", "[", "hue", ",", "saturate", ",", "value", "]", ",", "dim", "=", "1", ")", "\n", "hsv", "[", "~", "torch", ".", "isfinite", "(", "hsv", ")", "]", "=", "0.", "\n", "return", "hsv", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.transform_layers.hsv2rgb": [[45, 67], ["hsv.new_tensor().view", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "hsv.new_tensor"], "function", ["None"], ["", "def", "hsv2rgb", "(", "hsv", ")", ":", "\n", "    ", "\"\"\"Convert a 4-d HSV tensor to the RGB counterpart.\n\n    >>> %timeit hsv2rgb(hsv)\n    2.37 ms \u00b1 13.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n    >>> %timeit rgb2hsv_fast(rgb)\n    298 \u00b5s \u00b1 542 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n    >>> torch.allclose(hsv2rgb(hsv), hsv2rgb_fast(hsv), atol=1e-6)\n    True\n\n    References\n    [1] https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB_alternative\n    \"\"\"", "\n", "h", ",", "s", ",", "v", "=", "hsv", "[", ":", ",", "[", "0", "]", "]", ",", "hsv", "[", ":", ",", "[", "1", "]", "]", ",", "hsv", "[", ":", ",", "[", "2", "]", "]", "\n", "c", "=", "v", "*", "s", "\n", "\n", "n", "=", "hsv", ".", "new_tensor", "(", "[", "5", ",", "3", ",", "1", "]", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "k", "=", "(", "n", "+", "h", "*", "6", ")", "%", "6", "\n", "t", "=", "torch", ".", "min", "(", "k", ",", "4", "-", "k", ")", "\n", "t", "=", "torch", ".", "clamp", "(", "t", ",", "0", ",", "1", ")", "\n", "\n", "return", "v", "-", "c", "*", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.BasicBlock.__init__": [[24, 36], ["torch.Module.__init__", "resnet.conv3x3", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.conv3x3", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.BasicBlock.forward": [[38, 44], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.PreActBlock.__init__": [[50, 61], ["torch.Module.__init__", "resnet.conv3x3", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.conv3x3", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.PreActBlock.forward": [[63, 70], ["torch.relu", "torch.relu", "torch.relu", "resnet.PreActBlock.shortcut", "resnet.PreActBlock.conv1", "resnet.PreActBlock.conv2", "resnet.PreActBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.Bottleneck.__init__": [[75, 89], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.Bottleneck.forward": [[91, 98], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.PreActBottleneck.__init__": [[104, 117], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.PreActBottleneck.forward": [[119, 127], ["torch.relu", "torch.relu", "torch.relu", "resnet.PreActBottleneck.shortcut", "resnet.PreActBottleneck.conv1", "resnet.PreActBottleneck.conv2", "resnet.PreActBottleneck.conv3", "resnet.PreActBottleneck.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.PreActBottleneck.bn2", "resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet.__init__": [[130, 146], ["models.base_model.BaseModel.__init__", "models.transform_layers.NormalizeLayer", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.conv3x3", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "last_dim", "=", "512", "*", "block", ".", "expansion", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", "last_dim", ",", "num_classes", ")", "\n", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "last_dim", "=", "last_dim", "\n", "\n", "self", ".", "normalize", "=", "NormalizeLayer", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "64", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet._make_layer": [[147, 154], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet.penultimate": [[155, 180], ["resnet.ResNet.normalize", "resnet.ResNet.conv1", "resnet.ResNet.bn1", "torch.relu", "torch.relu", "torch.relu", "out_list.append", "resnet.ResNet.layer1", "out_list.append", "resnet.ResNet.layer2", "out_list.append", "resnet.ResNet.layer3", "out_list.append", "resnet.ResNet.layer4", "out_list.append", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "out.view.view.size"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.utils.utils.normalize"], ["", "def", "penultimate", "(", "self", ",", "x", ",", "all_features", "=", "False", ")", ":", "\n", "        ", "out_list", "=", "[", "]", "\n", "\n", "out", "=", "self", ".", "normalize", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "all_features", ":", "\n", "            ", "return", "out", ",", "out_list", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.conv3x3": [[17, 19], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet18": [[182, 184], ["resnet.ResNet"], "function", ["None"], ["", "", "", "def", "ResNet18", "(", "num_classes", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet34": [[185, 187], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "num_classes", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet50": [[188, 190], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "num_classes", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "", "", ""]], "home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__": [[6, 16], ["torch.Module.__init__", "torch.Linear", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "last_dim", ",", "num_classes", "=", "10", ",", "simclr_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "last_dim", ",", "num_classes", ")", "\n", "self", ".", "simclr_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "last_dim", ",", "last_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "last_dim", ",", "simclr_dim", ")", ",", "\n", ")", "\n", "self", ".", "shift_cls_layer", "=", "nn", ".", "Linear", "(", "last_dim", ",", "2", ")", "\n", "self", ".", "joint_distribution_layer", "=", "nn", ".", "Linear", "(", "last_dim", ",", "4", "*", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.penultimate": [[17, 20], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "penultimate", "(", "self", ",", "inputs", ",", "all_features", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.forward": [[21, 49], ["base_model.BaseModel.penultimate", "base_model.BaseModel.linear", "base_model.BaseModel.simclr_layer", "base_model.BaseModel.shift_cls_layer", "base_model.BaseModel.joint_distribution_layer"], "methods", ["home.repos.pwc.inspect_result.alinlab_CSI.models.base_model.BaseModel.penultimate"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "penultimate", "=", "False", ",", "simclr", "=", "False", ",", "shift", "=", "False", ",", "joint", "=", "False", ")", ":", "\n", "        ", "_aux", "=", "{", "}", "\n", "_return_aux", "=", "False", "\n", "\n", "features", "=", "self", ".", "penultimate", "(", "inputs", ")", "\n", "\n", "output", "=", "self", ".", "linear", "(", "features", ")", "\n", "\n", "if", "penultimate", ":", "\n", "            ", "_return_aux", "=", "True", "\n", "_aux", "[", "'penultimate'", "]", "=", "features", "\n", "\n", "", "if", "simclr", ":", "\n", "            ", "_return_aux", "=", "True", "\n", "_aux", "[", "'simclr'", "]", "=", "self", ".", "simclr_layer", "(", "features", ")", "\n", "\n", "", "if", "shift", ":", "\n", "            ", "_return_aux", "=", "True", "\n", "_aux", "[", "'shift'", "]", "=", "self", ".", "shift_cls_layer", "(", "features", ")", "\n", "\n", "", "if", "joint", ":", "\n", "            ", "_return_aux", "=", "True", "\n", "_aux", "[", "'joint'", "]", "=", "self", ".", "joint_distribution_layer", "(", "features", ")", "\n", "\n", "", "if", "_return_aux", ":", "\n", "            ", "return", "output", ",", "_aux", "\n", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alinlab_CSI.models.classifier.get_simclr_augmentation": [[8, 34], ["models.ColorJitterLayer", "models.RandomColorGrayLayer", "models.RandomResizedCropLayer", "torch.Sequential", "torch.Sequential"], "function", ["None"], ["def", "get_simclr_augmentation", "(", "P", ",", "image_size", ")", ":", "\n", "\n", "# parameter for resizecrop", "\n", "    ", "resize_scale", "=", "(", "P", ".", "resize_factor", ",", "1.0", ")", "# resize scaling factor", "\n", "if", "P", ".", "resize_fix", ":", "# if resize_fix is True, use same scale", "\n", "        ", "resize_scale", "=", "(", "P", ".", "resize_factor", ",", "P", ".", "resize_factor", ")", "\n", "\n", "# Align augmentation", "\n", "", "color_jitter", "=", "TL", ".", "ColorJitterLayer", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ",", "hue", "=", "0.1", ",", "p", "=", "0.8", ")", "\n", "color_gray", "=", "TL", ".", "RandomColorGrayLayer", "(", "p", "=", "0.2", ")", "\n", "resize_crop", "=", "TL", ".", "RandomResizedCropLayer", "(", "scale", "=", "resize_scale", ",", "size", "=", "image_size", ")", "\n", "\n", "# Transform define #", "\n", "if", "P", ".", "dataset", "==", "'imagenet'", ":", "# Using RandomResizedCrop at PIL transform", "\n", "        ", "transform", "=", "nn", ".", "Sequential", "(", "\n", "color_jitter", ",", "\n", "color_gray", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "transform", "=", "nn", ".", "Sequential", "(", "\n", "color_jitter", ",", "\n", "color_gray", ",", "\n", "resize_crop", ",", "\n", ")", "\n", "\n", "", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.classifier.get_shift_module": [[36, 52], ["models.Rotation", "models.CutPerm", "torch.Identity", "int"], "function", ["None"], ["", "def", "get_shift_module", "(", "P", ",", "eval", "=", "False", ")", ":", "\n", "\n", "    ", "if", "P", ".", "shift_trans_type", "==", "'rotation'", ":", "\n", "        ", "shift_transform", "=", "TL", ".", "Rotation", "(", ")", "\n", "K_shift", "=", "4", "\n", "", "elif", "P", ".", "shift_trans_type", "==", "'cutperm'", ":", "\n", "        ", "shift_transform", "=", "TL", ".", "CutPerm", "(", ")", "\n", "K_shift", "=", "4", "\n", "", "else", ":", "\n", "        ", "shift_transform", "=", "nn", ".", "Identity", "(", ")", "\n", "K_shift", "=", "1", "\n", "\n", "", "if", "not", "eval", "and", "not", "(", "'sup'", "in", "P", ".", "mode", ")", ":", "\n", "        ", "assert", "P", ".", "batch_size", "==", "int", "(", "128", "/", "K_shift", ")", "\n", "\n", "", "return", "shift_transform", ",", "K_shift", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.classifier.get_shift_classifer": [[54, 59], ["torch.Linear"], "function", ["None"], ["", "def", "get_shift_classifer", "(", "model", ",", "K_shift", ")", ":", "\n", "\n", "    ", "model", ".", "shift_cls_layer", "=", "nn", ".", "Linear", "(", "model", ".", "last_dim", ",", "K_shift", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.models.classifier.get_classifier": [[61, 76], ["models.resnet.ResNet18", "models.resnet.ResNet34", "models.resnet.ResNet50", "models.resnet_imagenet.resnet18", "models.resnet_imagenet.resnet50", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet18", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet34", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet.ResNet50", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet.resnet18", "home.repos.pwc.inspect_result.alinlab_CSI.models.resnet_imagenet.resnet50"], ["", "def", "get_classifier", "(", "mode", ",", "n_classes", "=", "10", ")", ":", "\n", "    ", "if", "mode", "==", "'resnet18'", ":", "\n", "        ", "classifier", "=", "ResNet18", "(", "num_classes", "=", "n_classes", ")", "\n", "", "elif", "mode", "==", "'resnet34'", ":", "\n", "        ", "classifier", "=", "ResNet34", "(", "num_classes", "=", "n_classes", ")", "\n", "", "elif", "mode", "==", "'resnet50'", ":", "\n", "        ", "classifier", "=", "ResNet50", "(", "num_classes", "=", "n_classes", ")", "\n", "", "elif", "mode", "==", "'resnet18_imagenet'", ":", "\n", "        ", "classifier", "=", "resnet18", "(", "num_classes", "=", "n_classes", ")", "\n", "", "elif", "mode", "==", "'resnet50_imagenet'", ":", "\n", "        ", "classifier", "=", "resnet50", "(", "num_classes", "=", "n_classes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.alinlab_CSI.common.common.parse_args": [[4, 90], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.alinlab_CSI.common.common.parse_args", "home.repos.pwc.inspect_result.alinlab_CSI.common.common.parse_args"], ["def", "parse_args", "(", "default", "=", "False", ")", ":", "\n", "    ", "\"\"\"Command-line argument parser for training.\"\"\"", "\n", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "'Pytorch implementation of CSI'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "help", "=", "'Dataset'", ",", "\n", "choices", "=", "[", "'cifar10'", ",", "'cifar100'", ",", "'imagenet'", "]", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--one_class_idx'", ",", "help", "=", "'None: multi-class, Not None: one-class'", ",", "\n", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "help", "=", "'Model'", ",", "\n", "choices", "=", "[", "'resnet18'", ",", "'resnet18_imagenet'", "]", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "help", "=", "'Training mode'", ",", "\n", "default", "=", "'simclr'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--simclr_dim'", ",", "help", "=", "'Dimension of simclr layer'", ",", "\n", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--shift_trans_type'", ",", "help", "=", "'shifting transformation type'", ",", "default", "=", "'none'", ",", "\n", "choices", "=", "[", "'rotation'", ",", "'cutperm'", ",", "'none'", "]", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "help", "=", "'Local rank for distributed learning'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_path'", ",", "help", "=", "'Path to the resume checkpoint'", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--load_path'", ",", "help", "=", "'Path to the loading checkpoint'", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_strict\"", ",", "help", "=", "'Do not strictly load state_dicts'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--suffix'", ",", "help", "=", "'Suffix for the log dir'", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--error_step'", ",", "help", "=", "'Epoch steps to compute errors'", ",", "\n", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_step'", ",", "help", "=", "'Epoch steps to save models'", ",", "\n", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "\n", "##### Training Configurations #####", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "help", "=", "'Epochs'", ",", "\n", "default", "=", "1000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "help", "=", "'Optimizer'", ",", "\n", "choices", "=", "[", "'sgd'", ",", "'lars'", "]", ",", "\n", "default", "=", "'lars'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_scheduler'", ",", "help", "=", "'Learning rate scheduler'", ",", "\n", "choices", "=", "[", "'step_decay'", ",", "'cosine'", "]", ",", "\n", "default", "=", "'cosine'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup'", ",", "help", "=", "'Warm-up epochs'", ",", "\n", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_init'", ",", "help", "=", "'Initial learning rate'", ",", "\n", "default", "=", "1e-1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "help", "=", "'Weight decay'", ",", "\n", "default", "=", "1e-6", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "help", "=", "'Batch size'", ",", "\n", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "help", "=", "'Batch size for test loader'", ",", "\n", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "\n", "##### Objective Configurations #####", "\n", "parser", ".", "add_argument", "(", "'--sim_lambda'", ",", "help", "=", "'Weight for SimCLR loss'", ",", "\n", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--temperature'", ",", "help", "=", "'Temperature for similarity'", ",", "\n", "default", "=", "0.5", ",", "type", "=", "float", ")", "\n", "\n", "##### Evaluation Configurations #####", "\n", "parser", ".", "add_argument", "(", "\"--ood_dataset\"", ",", "help", "=", "'Datasets for OOD detection'", ",", "\n", "default", "=", "None", ",", "nargs", "=", "\"*\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--ood_score\"", ",", "help", "=", "'score function for OOD detection'", ",", "\n", "default", "=", "[", "'norm_mean'", "]", ",", "nargs", "=", "\"+\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--ood_layer\"", ",", "help", "=", "'layer for OOD scores'", ",", "\n", "choices", "=", "[", "'penultimate'", ",", "'simclr'", ",", "'shift'", "]", ",", "\n", "default", "=", "[", "'simclr'", ",", "'shift'", "]", ",", "nargs", "=", "\"+\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--ood_samples\"", ",", "help", "=", "'number of samples to compute OOD score'", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--ood_batch_size\"", ",", "help", "=", "'batch size to compute OOD score'", ",", "\n", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--resize_factor\"", ",", "help", "=", "'resize scale is sampled from [resize_factor, 1.0]'", ",", "\n", "default", "=", "0.08", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--resize_fix\"", ",", "help", "=", "'resize scale is fixed to resize_factor (not (resize_factor, 1.0])'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--print_score\"", ",", "help", "=", "'print quantiles of ood score'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_score\"", ",", "help", "=", "'save ood score for plotting histogram'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "\n", "if", "default", ":", "\n", "        ", "return", "parser", ".", "parse_args", "(", "''", ")", "# empty string", "\n", "", "else", ":", "\n", "        ", "return", "parser", ".", "parse_args", "(", ")", "\n", "", "", ""]]}