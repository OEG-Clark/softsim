{"home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.one_hot": [[14, 26], ["ori.size", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "torch.zeros().cuda.float", "range", "torch.zeros", "torch.zeros", "torch.zeros", "len"], "function", ["None"], ["def", "one_hot", "(", "ori", ",", "classes", ")", ":", "\n", "\n", "    ", "batch", ",", "h", ",", "w", ",", "d", "=", "ori", ".", "size", "(", ")", "\n", "new_gd", "=", "torch", ".", "zeros", "(", "(", "batch", ",", "classes", ",", "h", ",", "w", ",", "d", ")", ",", "dtype", "=", "ori", ".", "dtype", ")", ".", "cuda", "(", ")", "\n", "for", "j", "in", "range", "(", "classes", ")", ":", "\n", "        ", "index_list", "=", "(", "ori", "==", "j", ")", ".", "nonzero", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "index_list", ")", ")", ":", "\n", "            ", "batch", ",", "height", ",", "width", ",", "depth", "=", "index_list", "[", "i", "]", "\n", "new_gd", "[", "batch", ",", "j", ",", "height", ",", "width", ",", "depth", "]", "=", "1", "\n", "\n", "", "", "return", "new_gd", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.tailor_and_concat": [[28, 55], ["temp.append", "temp.append", "temp.append", "temp.append", "temp.append", "temp.append", "temp.append", "temp.append", "x.clone", "range", "len", "model"], "function", ["None"], ["", "def", "tailor_and_concat", "(", "x", ",", "missing_modal", ",", "model", ")", ":", "\n", "    ", "temp", "=", "[", "]", "\n", "\n", "temp", ".", "append", "(", "x", "[", "...", ",", ":", "128", ",", ":", "128", ",", ":", "128", "]", ")", "\n", "temp", ".", "append", "(", "x", "[", "...", ",", ":", "128", ",", "112", ":", "240", ",", ":", "128", "]", ")", "\n", "temp", ".", "append", "(", "x", "[", "...", ",", "112", ":", "240", ",", ":", "128", ",", ":", "128", "]", ")", "\n", "temp", ".", "append", "(", "x", "[", "...", ",", "112", ":", "240", ",", "112", ":", "240", ",", ":", "128", "]", ")", "\n", "temp", ".", "append", "(", "x", "[", "...", ",", ":", "128", ",", ":", "128", ",", "27", ":", "155", "]", ")", "\n", "temp", ".", "append", "(", "x", "[", "...", ",", ":", "128", ",", "112", ":", "240", ",", "27", ":", "155", "]", ")", "\n", "temp", ".", "append", "(", "x", "[", "...", ",", "112", ":", "240", ",", ":", "128", ",", "27", ":", "155", "]", ")", "\n", "temp", ".", "append", "(", "x", "[", "...", ",", "112", ":", "240", ",", "112", ":", "240", ",", "27", ":", "155", "]", ")", "\n", "\n", "y", "=", "x", ".", "clone", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "temp", ")", ")", ":", "\n", "        ", "temp", "[", "i", "]", "=", "model", "(", "temp", "[", "i", "]", ",", "missing_modal", ")", "[", "0", "]", "\n", "\n", "", "y", "[", "...", ",", ":", "128", ",", ":", "128", ",", ":", "128", "]", "=", "temp", "[", "0", "]", "\n", "y", "[", "...", ",", ":", "128", ",", "128", ":", "240", ",", ":", "128", "]", "=", "temp", "[", "1", "]", "[", "...", ",", ":", ",", "16", ":", "128", ",", ":", "]", "\n", "y", "[", "...", ",", "128", ":", "240", ",", ":", "128", ",", ":", "128", "]", "=", "temp", "[", "2", "]", "[", "...", ",", "16", ":", "128", ",", ":", ",", ":", "]", "\n", "y", "[", "...", ",", "128", ":", "240", ",", "128", ":", "240", ",", ":", "128", "]", "=", "temp", "[", "3", "]", "[", "...", ",", "16", ":", "128", ",", "16", ":", "128", ",", ":", "]", "\n", "y", "[", "...", ",", ":", "128", ",", ":", "128", ",", "128", ":", "155", "]", "=", "temp", "[", "4", "]", "[", "...", ",", "96", ":", "123", "]", "\n", "y", "[", "...", ",", ":", "128", ",", "128", ":", "240", ",", "128", ":", "155", "]", "=", "temp", "[", "5", "]", "[", "...", ",", ":", ",", "16", ":", "128", ",", "96", ":", "123", "]", "\n", "y", "[", "...", ",", "128", ":", "240", ",", ":", "128", ",", "128", ":", "155", "]", "=", "temp", "[", "6", "]", "[", "...", ",", "16", ":", "128", ",", ":", ",", "96", ":", "123", "]", "\n", "y", "[", "...", ",", "128", ":", "240", ",", "128", ":", "240", ",", "128", ":", "155", "]", "=", "temp", "[", "7", "]", "[", "...", ",", "16", ":", "128", ",", "16", ":", "128", ",", "96", ":", "123", "]", "\n", "\n", "return", "y", "[", "...", ",", ":", "155", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.dice_score": [[57, 61], ["o.sum", "t.sum"], "function", ["None"], ["", "def", "dice_score", "(", "o", ",", "t", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "num", "=", "2", "*", "(", "o", "*", "t", ")", ".", "sum", "(", ")", "+", "eps", "\n", "den", "=", "o", ".", "sum", "(", ")", "+", "t", ".", "sum", "(", ")", "+", "eps", "\n", "return", "num", "/", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.mIOU": [[63, 67], ["None"], "function", ["None"], ["", "def", "mIOU", "(", "o", ",", "t", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "num", "=", "(", "o", "*", "t", ")", ".", "sum", "(", ")", "+", "eps", "\n", "den", "=", "(", "o", "|", "t", ")", ".", "sum", "(", ")", "+", "eps", "\n", "return", "num", "/", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.softmax_mIOU_score": [[69, 75], ["mIOU_score.append", "mIOU_score.append", "mIOU_score.append", "predict.mIOU", "predict.mIOU", "predict.mIOU"], "function", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.mIOU", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.mIOU", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.mIOU"], ["", "def", "softmax_mIOU_score", "(", "output", ",", "target", ")", ":", "\n", "    ", "mIOU_score", "=", "[", "]", "\n", "mIOU_score", ".", "append", "(", "mIOU", "(", "o", "=", "(", "output", "==", "1", ")", ",", "t", "=", "(", "target", "==", "1", ")", ")", ")", "\n", "mIOU_score", ".", "append", "(", "mIOU", "(", "o", "=", "(", "output", "==", "2", ")", ",", "t", "=", "(", "target", "==", "2", ")", ")", ")", "\n", "mIOU_score", ".", "append", "(", "mIOU", "(", "o", "=", "(", "output", "==", "3", ")", ",", "t", "=", "(", "target", "==", "4", ")", ")", ")", "\n", "return", "mIOU_score", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.softmax_output_dice": [[77, 92], ["predict.dice_score", "predict.dice_score", "predict.dice_score"], "function", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.dice_score", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.dice_score", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.dice_score"], ["", "def", "softmax_output_dice", "(", "output", ",", "target", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "\n", "# whole", "\n", "o", "=", "output", ">", "0", ";", "t", "=", "target", ">", "0", "# ce", "\n", "ret", "+=", "dice_score", "(", "o", ",", "t", ")", ",", "\n", "# core", "\n", "o", "=", "(", "output", "==", "1", ")", "|", "(", "output", "==", "3", ")", "\n", "t", "=", "(", "target", "==", "1", ")", "|", "(", "target", "==", "4", ")", "\n", "ret", "+=", "dice_score", "(", "o", ",", "t", ")", ",", "\n", "# active", "\n", "o", "=", "(", "output", "==", "3", ")", ";", "t", "=", "(", "target", "==", "4", ")", "\n", "ret", "+=", "dice_score", "(", "o", ",", "t", ")", ",", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.validate_softmax": [[97, 234], ["model.eval", "enumerate", "print", "output[].cpu().detach().numpy", "F.softmax.argmax", "str", "print", "len", "x.cuda.cuda", "target.cuda.cuda", "x.cuda.cuda", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "predict.tailor_and_concat", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "logging.info", "runtimes.append", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "time.time", "torch.softmax", "load_file.replace", "os.path.isfile", "load_file.replace", "os.path.isfile", "load_file.replace", "os.path.isfile", "torch.softmax", "predict.tailor_and_concat", "tailor_and_concat().flip", "tailor_and_concat().flip", "tailor_and_concat().flip", "tailor_and_concat().flip", "tailor_and_concat().flip", "tailor_and_concat().flip", "tailor_and_concat().flip", "output[].cpu().detach", "numpy.save", "os.path.join", "numpy.zeros", "nibabel.save", "print", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "print", "predict.tailor_and_concat", "torch.softmax", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "print", "predict.tailor_and_concat", "torch.softmax", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "print", "predict.tailor_and_concat", "torch.softmax", "os.path.join", "print", "print", "nibabel.Nifti1Image", "numpy.zeros", "range", "predict.tailor_and_concat", "predict.tailor_and_concat", "predict.tailor_and_concat", "predict.tailor_and_concat", "predict.tailor_and_concat", "predict.tailor_and_concat", "predict.tailor_and_concat", "output[].cpu", "numpy.where", "numpy.where", "numpy.where", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "imageio.imwrite", "x.cuda.flip", "x.cuda.flip", "x.cuda.flip", "x.cuda.flip", "x.cuda.flip", "x.cuda.flip", "x.cuda.flip", "numpy.where", "numpy.where", "numpy.where", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.tailor_and_concat", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.tailor_and_concat", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.tailor_and_concat", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.tailor_and_concat", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.tailor_and_concat", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.tailor_and_concat", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.tailor_and_concat", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.tailor_and_concat", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.tailor_and_concat", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.tailor_and_concat", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.tailor_and_concat", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.tailor_and_concat"], ["def", "validate_softmax", "(", "\n", "valid_loader", ",", "\n", "model", ",", "\n", "load_file", ",", "\n", "multimodel", ",", "\n", "savepath", "=", "''", ",", "# when in validation set, you must specify the path to save the 'nii' segmentation results here", "\n", "names", "=", "None", ",", "# The names of the patients orderly!", "\n", "verbose", "=", "False", ",", "\n", "use_TTA", "=", "False", ",", "# Test time augmentation, False as default!", "\n", "save_format", "=", "None", ",", "# ['nii','npy'], use 'nii' as default. Its purpose is for submission.", "\n", "snapshot", "=", "False", ",", "# for visualization. Default false. It is recommended to generate the visualized figures.", "\n", "visual", "=", "''", ",", "# the path to save visualization", "\n", "postprocess", "=", "False", ",", "# Default False, when use postprocess, the score of dice_ET would be changed.", "\n", "valid_in_train", "=", "False", ",", "# if you are valid when train", "\n", ")", ":", "\n", "\n", "    ", "H", ",", "W", ",", "T", "=", "240", ",", "240", ",", "160", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "runtimes", "=", "[", "]", "\n", "ET_voxels_pred_list", "=", "[", "]", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "        ", "print", "(", "'-------------------------------------------------------------------'", ")", "\n", "msg", "=", "'Subject {}/{}, '", ".", "format", "(", "i", "+", "1", ",", "len", "(", "valid_loader", ")", ")", "\n", "if", "valid_in_train", ":", "\n", "# data = [t.cuda(non_blocking=True) for t in data]", "\n", "            ", "x", ",", "target", ",", "missing_modal", "=", "data", "\n", "x", "=", "x", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "x", ",", "missing_modal", "=", "data", "\n", "x", ".", "cuda", "(", ")", "\n", "\n", "", "if", "not", "use_TTA", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "# add the code synchronize() to correctly count the runtime.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "logit", "=", "tailor_and_concat", "(", "x", ",", "missing_modal", ",", "model", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "logging", ".", "info", "(", "'Single sample test time consumption {:.2f} minutes!'", ".", "format", "(", "elapsed_time", "/", "60", ")", ")", "\n", "runtimes", ".", "append", "(", "elapsed_time", ")", "\n", "\n", "\n", "if", "multimodel", ":", "\n", "                ", "logit", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "output", "=", "logit", "/", "4.0", "\n", "\n", "load_file1", "=", "load_file", ".", "replace", "(", "'7998'", ",", "'7996'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "load_file1", ")", ":", "\n", "                    ", "checkpoint", "=", "torch", ".", "load", "(", "load_file1", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "'Successfully load checkpoint {}'", ".", "format", "(", "load_file1", ")", ")", "\n", "logit", "=", "tailor_and_concat", "(", "x", ",", "model", ")", "\n", "logit", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "output", "+=", "logit", "/", "4.0", "\n", "", "load_file1", "=", "load_file", ".", "replace", "(", "'7998'", ",", "'7997'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "load_file1", ")", ":", "\n", "                    ", "checkpoint", "=", "torch", ".", "load", "(", "load_file1", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "'Successfully load checkpoint {}'", ".", "format", "(", "load_file1", ")", ")", "\n", "logit", "=", "tailor_and_concat", "(", "x", ",", "model", ")", "\n", "logit", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "output", "+=", "logit", "/", "4.0", "\n", "", "load_file1", "=", "load_file", ".", "replace", "(", "'7998'", ",", "'7999'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "load_file1", ")", ":", "\n", "                    ", "checkpoint", "=", "torch", ".", "load", "(", "load_file1", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "'Successfully load checkpoint {}'", ".", "format", "(", "load_file1", ")", ")", "\n", "logit", "=", "tailor_and_concat", "(", "x", ",", "model", ")", "\n", "logit", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "output", "+=", "logit", "/", "4.0", "\n", "", "", "else", ":", "\n", "                ", "output", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "", "", "else", ":", "\n", "            ", "x", "=", "x", "[", "...", ",", ":", "155", "]", "\n", "logit", "=", "F", ".", "softmax", "(", "tailor_and_concat", "(", "x", ",", "missing_modal", ",", "model", ")", ",", "1", ")", "# no flip", "\n", "logit", "+=", "F", ".", "softmax", "(", "tailor_and_concat", "(", "x", ".", "flip", "(", "dims", "=", "(", "2", ",", ")", ")", ",", "missing_modal", ",", "model", ")", ".", "flip", "(", "dims", "=", "(", "2", ",", ")", ")", ",", "1", ")", "# flip H", "\n", "logit", "+=", "F", ".", "softmax", "(", "tailor_and_concat", "(", "x", ".", "flip", "(", "dims", "=", "(", "3", ",", ")", ")", ",", "missing_modal", ",", "model", ")", ".", "flip", "(", "dims", "=", "(", "3", ",", ")", ")", ",", "1", ")", "# flip W", "\n", "logit", "+=", "F", ".", "softmax", "(", "tailor_and_concat", "(", "x", ".", "flip", "(", "dims", "=", "(", "4", ",", ")", ")", ",", "missing_modal", ",", "model", ")", ".", "flip", "(", "dims", "=", "(", "4", ",", ")", ")", ",", "1", ")", "# flip D", "\n", "logit", "+=", "F", ".", "softmax", "(", "tailor_and_concat", "(", "x", ".", "flip", "(", "dims", "=", "(", "2", ",", "3", ")", ")", ",", "missing_modal", ",", "model", ")", ".", "flip", "(", "dims", "=", "(", "2", ",", "3", ")", ")", ",", "1", ")", "# flip H, W", "\n", "logit", "+=", "F", ".", "softmax", "(", "tailor_and_concat", "(", "x", ".", "flip", "(", "dims", "=", "(", "2", ",", "4", ")", ")", ",", "missing_modal", ",", "model", ")", ".", "flip", "(", "dims", "=", "(", "2", ",", "4", ")", ")", ",", "1", ")", "# flip H, D", "\n", "logit", "+=", "F", ".", "softmax", "(", "tailor_and_concat", "(", "x", ".", "flip", "(", "dims", "=", "(", "3", ",", "4", ")", ")", ",", "missing_modal", ",", "model", ")", ".", "flip", "(", "dims", "=", "(", "3", ",", "4", ")", ")", ",", "1", ")", "# flip W, D", "\n", "logit", "+=", "F", ".", "softmax", "(", "tailor_and_concat", "(", "x", ".", "flip", "(", "dims", "=", "(", "2", ",", "3", ",", "4", ")", ")", ",", "missing_modal", ",", "model", ")", ".", "flip", "(", "dims", "=", "(", "2", ",", "3", ",", "4", ")", ")", ",", "1", ")", "# flip H, W, D", "\n", "output", "=", "logit", "/", "8.0", "# mean", "\n", "\n", "", "output", "=", "output", "[", "0", ",", ":", ",", ":", "H", ",", ":", "W", ",", ":", "T", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "output", "=", "output", ".", "argmax", "(", "0", ")", "\n", "\n", "name", "=", "str", "(", "i", ")", "\n", "if", "names", ":", "\n", "            ", "name", "=", "names", "[", "i", "]", "\n", "msg", "+=", "'{:>20}, '", ".", "format", "(", "name", ")", "\n", "\n", "", "print", "(", "msg", ")", "\n", "\n", "if", "savepath", ":", "\n", "# .npy for further model ensemble", "\n", "# .nii for directly model submission", "\n", "            ", "assert", "save_format", "in", "[", "'npy'", ",", "'nii'", "]", "\n", "if", "save_format", "==", "'npy'", ":", "\n", "                ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "savepath", ",", "name", "+", "'_preds'", ")", ",", "output", ")", "\n", "", "if", "save_format", "==", "'nii'", ":", "\n", "# raise NotImplementedError", "\n", "                ", "oname", "=", "os", ".", "path", ".", "join", "(", "savepath", ",", "name", "+", "'.nii.gz'", ")", "\n", "seg_img", "=", "np", ".", "zeros", "(", "shape", "=", "(", "H", ",", "W", ",", "T", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "seg_img", "[", "np", ".", "where", "(", "output", "==", "1", ")", "]", "=", "1", "\n", "seg_img", "[", "np", ".", "where", "(", "output", "==", "2", ")", "]", "=", "2", "\n", "seg_img", "[", "np", ".", "where", "(", "output", "==", "3", ")", "]", "=", "4", "\n", "if", "verbose", ":", "\n", "                    ", "print", "(", "'1:'", ",", "np", ".", "sum", "(", "seg_img", "==", "1", ")", ",", "' | 2:'", ",", "np", ".", "sum", "(", "seg_img", "==", "2", ")", ",", "' | 4:'", ",", "np", ".", "sum", "(", "seg_img", "==", "4", ")", ")", "\n", "print", "(", "'WT:'", ",", "np", ".", "sum", "(", "(", "seg_img", "==", "1", ")", "|", "(", "seg_img", "==", "2", ")", "|", "(", "seg_img", "==", "4", ")", ")", ",", "' | TC:'", ",", "\n", "np", ".", "sum", "(", "(", "seg_img", "==", "1", ")", "|", "(", "seg_img", "==", "4", ")", ")", ",", "' | ET:'", ",", "np", ".", "sum", "(", "seg_img", "==", "4", ")", ")", "\n", "", "nib", ".", "save", "(", "nib", ".", "Nifti1Image", "(", "seg_img", ",", "None", ")", ",", "oname", ")", "\n", "print", "(", "'Successfully save {}'", ".", "format", "(", "oname", ")", ")", "\n", "\n", "if", "snapshot", ":", "\n", "                    ", "\"\"\" --- grey figure---\"\"\"", "\n", "# Snapshot_img = np.zeros(shape=(H,W,T),dtype=np.uint8)", "\n", "# Snapshot_img[np.where(output[1,:,:,:]==1)] = 64", "\n", "# Snapshot_img[np.where(output[2,:,:,:]==1)] = 160", "\n", "# Snapshot_img[np.where(output[3,:,:,:]==1)] = 255", "\n", "\"\"\" --- colorful figure--- \"\"\"", "\n", "Snapshot_img", "=", "np", ".", "zeros", "(", "shape", "=", "(", "H", ",", "W", ",", "3", ",", "T", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "Snapshot_img", "[", ":", ",", ":", ",", "0", ",", ":", "]", "[", "np", ".", "where", "(", "output", "==", "1", ")", "]", "=", "255", "\n", "Snapshot_img", "[", ":", ",", ":", ",", "1", ",", ":", "]", "[", "np", ".", "where", "(", "output", "==", "2", ")", "]", "=", "255", "\n", "Snapshot_img", "[", ":", ",", ":", ",", "2", ",", ":", "]", "[", "np", ".", "where", "(", "output", "==", "3", ")", "]", "=", "255", "\n", "\n", "for", "frame", "in", "range", "(", "T", ")", ":", "\n", "                        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "visual", ",", "name", ")", ")", ":", "\n", "                            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "visual", ",", "name", ")", ")", "\n", "# scipy.misc.imsave(os.path.join(visual, name, str(frame)+'.png'), Snapshot_img[:, :, :, frame])", "\n", "", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "visual", ",", "name", ",", "str", "(", "frame", ")", "+", "'.png'", ")", ",", "Snapshot_img", "[", ":", ",", ":", ",", ":", ",", "frame", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.train.main_worker": [[112, 267], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "random.seed", "numpy.random.seed", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "models.mmformer.mmformer.get_mmFormer", "nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "nn.parallel.DistributedDataParallel.train", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "getattr", "os.path.join", "os.path.join", "data.BraTS.BraTS", "data.BraTS.BraTS", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "logging.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "time.time", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "range", "time.time", "logging.info", "logging.info", "os.path.join", "train.log_args", "logging.info", "vars", "logging.info", "logging.info", "nn.parallel.DistributedDataParallel.parameters", "os.path.join", "os.path.isfile", "logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "nn.parallel.DistributedDataParallel.load_state_dict", "logging.info", "logging.info", "torch.utils.data.distributed.DistributedSampler.set_epoch", "torch.utils.data.distributed.DistributedSampler.set_epoch", "setproctitle.setproctitle", "time.time", "enumerate", "time.time", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "logging.info", "os.path.exists", "os.makedirs", "len", "len", "train.adjust_learning_rate", "x.cuda.cuda", "target.cuda.cuda", "nn.parallel.DistributedDataParallel.", "getattr.", "utils.tools.all_reduce_tensor().data.cpu().numpy", "utils.tools.all_reduce_tensor().data.cpu().numpy", "utils.tools.all_reduce_tensor().data.cpu().numpy", "utils.tools.all_reduce_tensor().data.cpu().numpy", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "logging.info", "logging.info", "getattr.", "logging.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "nn.parallel.DistributedDataParallel.state_dict", "torch.optim.Adam.state_dict", "getattr", "utils.tools.all_reduce_tensor().data.cpu", "utils.tools.all_reduce_tensor().data.cpu", "utils.tools.all_reduce_tensor().data.cpu", "utils.tools.all_reduce_tensor().data.cpu", "int", "int", "int", "int", "nn.parallel.DistributedDataParallel.state_dict", "torch.optim.Adam.state_dict", "utils.tools.all_reduce_tensor", "utils.tools.all_reduce_tensor", "utils.tools.all_reduce_tensor", "utils.tools.all_reduce_tensor"], "function", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.get_mmFormer", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.train.log_args", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.train.adjust_learning_rate", "home.repos.pwc.inspect_result.yaozhang93_mmformer.utils.tools.all_reduce_tensor", "home.repos.pwc.inspect_result.yaozhang93_mmformer.utils.tools.all_reduce_tensor", "home.repos.pwc.inspect_result.yaozhang93_mmformer.utils.tools.all_reduce_tensor", "home.repos.pwc.inspect_result.yaozhang93_mmformer.utils.tools.all_reduce_tensor"], ["def", "main_worker", "(", ")", ":", "\n", "    ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "project_root", ",", "'log'", ",", "args", ".", "experiment", "+", "args", ".", "date", ")", "\n", "log_file", "=", "log_dir", "+", "'.txt'", "\n", "log_args", "(", "log_file", ")", "\n", "logging", ".", "info", "(", "'--------------------------------------This is all argsurations----------------------------------'", ")", "\n", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "            ", "logging", ".", "info", "(", "'{}={}'", ".", "format", "(", "arg", ",", "getattr", "(", "args", ",", "arg", ")", ")", ")", "\n", "", "logging", ".", "info", "(", "'----------------------------------------This is a halving line----------------------------------'", ")", "\n", "logging", ".", "info", "(", "'{}'", ".", "format", "(", "args", ".", "description", ")", ")", "\n", "\n", "", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "'nccl'", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "\n", "_", ",", "model", "=", "get_mmFormer", "(", "dataset", "=", "'brats'", ",", "_conv_repr", "=", "True", ",", "_pe_type", "=", "\"learned\"", ")", "\n", "\n", "model", ".", "cuda", "(", "args", ".", "local_rank", ")", "\n", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "output_device", "=", "args", ".", "local_rank", ",", "\n", "find_unused_parameters", "=", "True", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "amsgrad", "=", "args", ".", "amsgrad", ")", "\n", "\n", "\n", "criterion", "=", "getattr", "(", "criterions", ",", "args", ".", "criterion", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "project_root", ",", "'checkpoint'", ",", "args", ".", "experiment", "+", "args", ".", "date", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "\n", "", "", "resume", "=", "args", ".", "resume", "\n", "\n", "# writer = SummaryWriter()", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "resume", ")", "and", "args", ".", "load", ":", "\n", "        ", "logging", ".", "info", "(", "'loading checkpoint {}'", ".", "format", "(", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "logging", ".", "info", "(", "'Successfully loading checkpoint {} and training from epoch: {}'", "\n", ".", "format", "(", "args", ".", "resume", ",", "args", ".", "start_epoch", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "'re-training!!!'", ")", "\n", "\n", "", "train_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root", ",", "args", ".", "train_dir", ",", "args", ".", "train_file", ")", "\n", "train_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root", ",", "args", ".", "train_dir", ")", "\n", "\n", "train_set_full_modal", "=", "BraTS", "(", "train_list", ",", "train_root", ",", "args", ".", "mode", ",", "drop_modal", "=", "False", ")", "\n", "train_set_missing_modal", "=", "BraTS", "(", "train_list", ",", "train_root", ",", "args", ".", "mode", ",", "drop_modal", "=", "True", ")", "\n", "train_sampler_full_modal", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_set_full_modal", ")", "\n", "train_sampler_missing_modal", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_set_missing_modal", ")", "\n", "logging", ".", "info", "(", "'Samples for train = {}'", ".", "format", "(", "len", "(", "train_set_full_modal", ")", ")", ")", "\n", "\n", "\n", "num_gpu", "=", "(", "len", "(", "args", ".", "gpu", ")", "+", "1", ")", "//", "2", "\n", "\n", "train_loader_full_modal", "=", "DataLoader", "(", "dataset", "=", "train_set_full_modal", ",", "sampler", "=", "train_sampler_full_modal", ",", "batch_size", "=", "args", ".", "batch_size", "//", "num_gpu", ",", "\n", "drop_last", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "train_loader_missing_modal", "=", "DataLoader", "(", "dataset", "=", "train_set_missing_modal", ",", "sampler", "=", "train_sampler_missing_modal", ",", "batch_size", "=", "args", ".", "batch_size", "//", "num_gpu", ",", "\n", "drop_last", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "torch", ".", "set_grad_enabled", "(", "True", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "end_epoch", ")", ":", "\n", "        ", "train_sampler_full_modal", ".", "set_epoch", "(", "epoch", ")", "# shuffle", "\n", "train_sampler_missing_modal", ".", "set_epoch", "(", "epoch", ")", "# shuffle", "\n", "setproctitle", ".", "setproctitle", "(", "'{}: {}/{}'", ".", "format", "(", "args", ".", "user", ",", "epoch", "+", "1", ",", "args", ".", "end_epoch", ")", ")", "\n", "start_epoch", "=", "time", ".", "time", "(", ")", "\n", "\n", "# if epoch % 2 == 0:", "\n", "#     train_loader = train_loader_full_modal", "\n", "# else:", "\n", "#     train_loader = train_loader_missing_modal", "\n", "\n", "train_loader", "=", "train_loader_missing_modal", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "            ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ".", "end_epoch", ",", "args", ".", "lr", ")", "\n", "\n", "x", ",", "target", ",", "missing_modal", "=", "data", "\n", "x", "=", "x", ".", "cuda", "(", "args", ".", "local_rank", ",", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "args", ".", "local_rank", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# output = model(x, missing_modal)", "\n", "outputs", "=", "model", "(", "x", ",", "missing_modal", ")", "\n", "\n", "loss", ",", "loss1", ",", "loss2", ",", "loss3", "=", "criterion", "(", "outputs", "[", "0", "]", ",", "target", ")", "\n", "for", "output", "in", "outputs", "[", "1", "]", ":", "\n", "                ", "loss_tmp", ",", "loss1_tmp", ",", "loss2_tmp", ",", "loss3_tmp", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", "+=", "loss_tmp", "\n", "\n", "", "reduce_loss", "=", "all_reduce_tensor", "(", "loss", ",", "world_size", "=", "num_gpu", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "reduce_loss1", "=", "all_reduce_tensor", "(", "loss1", ",", "world_size", "=", "num_gpu", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "reduce_loss2", "=", "all_reduce_tensor", "(", "loss2", ",", "world_size", "=", "num_gpu", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "reduce_loss3", "=", "all_reduce_tensor", "(", "loss3", ",", "world_size", "=", "num_gpu", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'Epoch: {}_Iter:{}  loss: {:.5f} || 1:{:.4f} | 2:{:.4f} | 3:{:.4f} ||'", "\n", ".", "format", "(", "epoch", ",", "i", ",", "reduce_loss", ",", "reduce_loss1", ",", "reduce_loss2", ",", "reduce_loss3", ")", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "", "end_epoch", "=", "time", ".", "time", "(", ")", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "if", "(", "epoch", "+", "1", ")", "%", "int", "(", "args", ".", "save_freq", ")", "==", "0", "or", "(", "epoch", "+", "1", ")", "%", "int", "(", "args", ".", "end_epoch", "-", "1", ")", "==", "0", "or", "(", "epoch", "+", "1", ")", "%", "int", "(", "args", ".", "end_epoch", "-", "2", ")", "==", "0", "or", "(", "epoch", "+", "1", ")", "%", "int", "(", "args", ".", "end_epoch", "-", "3", ")", "==", "0", ":", "\n", "                ", "file_name", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'model_epoch_{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "\n", "file_name", ")", "\n", "\n", "# writer.add_scalar('lr:', optimizer.param_groups[0]['lr'], epoch)", "\n", "# writer.add_scalar('loss:', reduce_loss, epoch)", "\n", "# writer.add_scalar('loss1:', reduce_loss1, epoch)", "\n", "# writer.add_scalar('loss2:', reduce_loss2, epoch)", "\n", "# writer.add_scalar('loss3:', reduce_loss3, epoch)", "\n", "\n", "", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "epoch_time_minute", "=", "(", "end_epoch", "-", "start_epoch", ")", "/", "60", "\n", "remaining_time_hour", "=", "(", "args", ".", "end_epoch", "-", "epoch", "-", "1", ")", "*", "epoch_time_minute", "/", "60", "\n", "logging", ".", "info", "(", "'Current epoch time consumption: {:.2f} minutes!'", ".", "format", "(", "epoch_time_minute", ")", ")", "\n", "logging", ".", "info", "(", "'Estimated remaining training time: {:.2f} hours!'", ".", "format", "(", "remaining_time_hour", ")", ")", "\n", "\n", "", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "# writer.close()", "\n", "\n", "        ", "final_name", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'model_epoch_last.pth'", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "args", ".", "end_epoch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "\n", "final_name", ")", "\n", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "total_time", "=", "(", "end_time", "-", "start_time", ")", "/", "3600", "\n", "logging", ".", "info", "(", "'The total training time is {:.2f} hours'", ".", "format", "(", "total_time", ")", ")", "\n", "\n", "logging", ".", "info", "(", "'----------------------------------The training process finished!-----------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.train.adjust_learning_rate": [[269, 272], ["round", "numpy.power"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "max_epoch", ",", "init_lr", ",", "power", "=", "0.9", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "round", "(", "init_lr", "*", "np", ".", "power", "(", "1", "-", "(", "epoch", ")", "/", "max_epoch", ",", "power", ")", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.train.log_args": [[274, 295], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler"], "function", ["None"], ["", "", "def", "log_args", "(", "log_file", ")", ":", "\n", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "'%(asctime)s ===> %(message)s'", ",", "\n", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "\n", "# args FileHandler to save log file", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "# args StreamHandler to print log to console", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "# add the two Handler", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.test.main": [[70, 130], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "random.seed", "numpy.random.seed", "models.mmformer.mmformer.get_mmFormer", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "os.path.join", "os.path.exists", "os.path.join", "os.path.join", "data.BraTS.BraTS", "print", "torch.utils.data.DataLoader", "os.path.join", "os.path.join", "time.time", "time.time", "print", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "print", "print", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "torch.no_grad", "torch.no_grad", "torch.no_grad", "predict.validate_softmax", "len", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "len", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.get_mmFormer", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.predict.validate_softmax"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "_", ",", "model", "=", "get_mmFormer", "(", "dataset", "=", "'brats'", ",", "_conv_repr", "=", "True", ",", "_pe_type", "=", "\"learned\"", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "load_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "project_root", ",", "\n", "'checkpoint'", ",", "args", ".", "experiment", "+", "args", ".", "test_date", ",", "args", ".", "test_file", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "load_file", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "load_file", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "print", "(", "'Successfully load checkpoint {}'", ".", "format", "(", "os", ".", "path", ".", "join", "(", "args", ".", "experiment", "+", "args", ".", "test_date", ",", "args", ".", "test_file", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'There is no resume file to load!'", ")", "\n", "\n", "", "valid_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root", ",", "args", ".", "valid_dir", ",", "args", ".", "valid_file", ")", "\n", "valid_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root", ",", "args", ".", "valid_dir", ")", "\n", "valid_set", "=", "BraTS", "(", "valid_list", ",", "valid_root", ",", "mode", "=", "'valid'", ")", "\n", "print", "(", "'Samples for valid = {}'", ".", "format", "(", "len", "(", "valid_set", ")", ")", ")", "\n", "\n", "valid_loader", "=", "DataLoader", "(", "valid_set", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "submission", "=", "os", ".", "path", ".", "join", "(", "args", ".", "project_root", ",", "args", ".", "output_dir", ",", "\n", "args", ".", "submission", ",", "args", ".", "experiment", "+", "args", ".", "test_date", ")", "\n", "visual", "=", "os", ".", "path", ".", "join", "(", "args", ".", "project_root", ",", "args", ".", "output_dir", ",", "\n", "args", ".", "visual", ",", "args", ".", "experiment", "+", "args", ".", "test_date", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "submission", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "submission", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "visual", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "visual", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "validate_softmax", "(", "valid_loader", "=", "valid_loader", ",", "\n", "model", "=", "model", ",", "\n", "load_file", "=", "load_file", ",", "\n", "multimodel", "=", "False", ",", "\n", "savepath", "=", "submission", ",", "\n", "visual", "=", "visual", ",", "\n", "names", "=", "valid_set", ".", "names", ",", "\n", "use_TTA", "=", "args", ".", "use_TTA", ",", "\n", "save_format", "=", "args", ".", "save_format", ",", "\n", "snapshot", "=", "False", ",", "\n", "postprocess", "=", "True", ",", "\n", "valid_in_train", "=", "True", "\n", ")", "\n", "\n", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "full_test_time", "=", "(", "end_time", "-", "start_time", ")", "/", "60", "\n", "average_time", "=", "full_test_time", "/", "len", "(", "valid_set", ")", "\n", "print", "(", "'{:.2f} minutes!'", ".", "format", "(", "average_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.mmFormer.__init__": [[10, 119], ["torch.Module.__init__", "int", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.mmformer.PositionalEncoding.LearnedPositionalEncoding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "models.mmformer.Transformer.mmTransformerModel", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mmformer.Decoder", "mmformer.Decoder", "mmformer.mmFormer.shadow_tokens.append", "mmformer.mmFormer.pe_dropout.append", "mmformer.mmFormer.intra_transformer.append", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mmformer.mmFormer.Unet_list.append", "mmformer.mmFormer.bn_list.append", "mmformer.mmFormer.relu_list.append", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "mmformer.mmFormer.position_encoding.append", "torch.Dropout", "torch.Dropout", "torch.Dropout", "models.mmformer.Transformer.mmTransformerModel", "mmformer.mmFormer.conv_x_list.append", "models.mmformer.Unet_skipconnection.Unet", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.mmformer.PositionalEncoding.LearnedPositionalEncoding", "mmformer.mmFormer.position_encoding.append", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models.mmformer.PositionalEncoding.FixedPositionalEncoding"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "img_dim", ",", "\n", "patch_dim", ",", "\n", "num_channels", ",", "\n", "num_classes", ",", "\n", "embedding_dim", ",", "\n", "num_heads", ",", "\n", "num_layers", ",", "\n", "hidden_dim", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "attn_dropout_rate", "=", "0.0", ",", "\n", "conv_patch_representation", "=", "True", ",", "\n", "positional_encoding_type", "=", "\"learned\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "mmFormer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "embedding_dim", "%", "num_heads", "==", "0", "\n", "assert", "img_dim", "%", "patch_dim", "==", "0", "\n", "\n", "self", ".", "img_dim", "=", "img_dim", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "patch_dim", "=", "patch_dim", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "attn_dropout_rate", "=", "attn_dropout_rate", "\n", "self", ".", "conv_patch_representation", "=", "conv_patch_representation", "\n", "\n", "self", ".", "num_patches", "=", "int", "(", "(", "img_dim", "//", "patch_dim", ")", "**", "3", ")", "\n", "self", ".", "seq_length", "=", "self", ".", "num_patches", "\n", "self", ".", "flatten_dim", "=", "128", "*", "num_channels", "\n", "\n", "# self.linear_encoding = nn.Linear(self.flatten_dim, self.embedding_dim)", "\n", "\n", "self", ".", "shadow_tokens", "=", "[", "]", "\n", "self", ".", "position_encoding", "=", "[", "]", "\n", "self", ".", "pe_dropout", "=", "[", "]", "\n", "self", ".", "intra_transformer", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_channels", ")", ":", "\n", "            ", "self", ".", "shadow_tokens", ".", "append", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "seq_length", ",", "self", ".", "embedding_dim", ")", ".", "cuda", "(", ")", ")", "\n", "# self.shadow_tokens.append(nn.Parameter(torch.zeros(1, 512, 512)).cuda())", "\n", "if", "positional_encoding_type", "==", "\"learned\"", ":", "\n", "                ", "self", ".", "position_encoding", ".", "append", "(", "LearnedPositionalEncoding", "(", "\n", "self", ".", "seq_length", ",", "self", ".", "embedding_dim", ",", "self", ".", "seq_length", "\n", ")", ")", "\n", "", "elif", "positional_encoding_type", "==", "\"fixed\"", ":", "\n", "                ", "self", ".", "position_encoding", ".", "append", "(", "FixedPositionalEncoding", "(", "\n", "self", ".", "embedding_dim", ",", "\n", ")", ")", "\n", "", "self", ".", "pe_dropout", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout_rate", ")", ")", "\n", "self", ".", "intra_transformer", ".", "append", "(", "mmTransformerModel", "(", "\n", "num_channels", ",", "\n", "embedding_dim", ",", "\n", "num_layers", ",", "\n", "num_heads", ",", "\n", "hidden_dim", ",", "\n", "self", ".", "dropout_rate", ",", "\n", "self", ".", "attn_dropout_rate", ",", "\n", ")", ")", "\n", "\n", "# self.shadow_tokens = nn.ParameterList(self.shadow_tokens)", "\n", "", "self", ".", "position_encoding", "=", "nn", ".", "ModuleList", "(", "self", ".", "position_encoding", ")", "\n", "self", ".", "pe_dropout", "=", "nn", ".", "ModuleList", "(", "self", ".", "pe_dropout", ")", "\n", "self", ".", "intra_transformer", "=", "nn", ".", "ModuleList", "(", "self", ".", "intra_transformer", ")", "\n", "\n", "self", ".", "inter_position_encoding", "=", "LearnedPositionalEncoding", "(", "self", ".", "seq_length", "*", "self", ".", "num_channels", ",", "self", ".", "embedding_dim", ",", "self", ".", "seq_length", "*", "self", ".", "num_channels", ")", "\n", "self", ".", "inter_pe_dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout_rate", ")", "\n", "# self.fusion = nn.Sequential(nn.LayerNorm(self.seq_length*self.num_channels), nn.LeakyReLU(), nn.Linear(self.seq_length*self.num_channels, self.seq_length))", "\n", "self", ".", "fusion", "=", "nn", ".", "Conv1d", "(", "self", ".", "seq_length", "*", "self", ".", "num_channels", ",", "self", ".", "seq_length", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "inter_transformer", "=", "mmTransformerModel", "(", "\n", "num_channels", ",", "\n", "embedding_dim", ",", "\n", "num_layers", ",", "\n", "num_heads", ",", "\n", "hidden_dim", ",", "\n", "self", ".", "dropout_rate", ",", "\n", "self", ".", "attn_dropout_rate", ",", "\n", ")", "\n", "self", ".", "pre_head_ln", "=", "nn", ".", "InstanceNorm3d", "(", "embedding_dim", ")", "\n", "\n", "if", "self", ".", "conv_patch_representation", ":", "\n", "\n", "            ", "self", ".", "conv_x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_channels", ")", ":", "\n", "                ", "self", ".", "conv_x_list", ".", "append", "(", "nn", ".", "Conv3d", "(", "\n", "256", ",", "\n", "self", ".", "embedding_dim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", ")", "\n", "", "self", ".", "conv_x_list", "=", "nn", ".", "ModuleList", "(", "self", ".", "conv_x_list", ")", "\n", "\n", "", "self", ".", "Unet_list", "=", "[", "]", "\n", "self", ".", "bn_list", "=", "[", "]", "\n", "self", ".", "relu_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_channels", ")", ":", "\n", "            ", "self", ".", "Unet_list", ".", "append", "(", "Unet", "(", "in_channels", "=", "1", ",", "base_channels", "=", "16", ",", "num_classes", "=", "4", ")", ")", "\n", "# self.bn_list.append(nn.BatchNorm3d(256))", "\n", "self", ".", "bn_list", ".", "append", "(", "nn", ".", "InstanceNorm3d", "(", "256", ")", ")", "\n", "self", ".", "relu_list", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "self", ".", "Unet_list", "=", "nn", ".", "ModuleList", "(", "self", ".", "Unet_list", ")", "\n", "self", ".", "bn_list", "=", "nn", ".", "ModuleList", "(", "self", ".", "bn_list", ")", "\n", "self", ".", "relu_list", "=", "nn", ".", "ModuleList", "(", "self", ".", "relu_list", ")", "\n", "\n", "self", ".", "decoder", "=", "Decoder", "(", "self", ".", "embedding_dim", ",", "num_classes", ")", "\n", "self", ".", "shared_decoder", "=", "Decoder", "(", "self", ".", "embedding_dim", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.mmFormer.encode": [[120, 203], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmformer.mmFormer.inter_position_encoding", "mmformer.mmFormer.inter_pe_dropout", "mmformer.mmFormer.inter_transformer", "mmformer.mmFormer.fusion", "mmformer.mmFormer._reshape_output", "list", "range", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "len", "x1_1_list.append", "x2_1_list.append", "x3_1_list.append", "x4_1_list.append", "len", "x1_1_list.append", "x2_1_list.append", "x3_1_list.append", "x4_1_list.append", "x_temp.append", "x[].permute().contiguous", "x[].view", "x[].size", "x[].permute"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.mmFormer._reshape_output"], ["", "def", "encode", "(", "self", ",", "x", ",", "missing_modal", ")", ":", "\n", "        ", "if", "self", ".", "conv_patch_representation", ":", "\n", "# combine embedding with conv patch distribution", "\n", "# x1_1, x2_1, x3_1, x4_1, x = self.Unet(x)", "\n", "# x = self.bn(x)", "\n", "# x = self.relu(x)", "\n", "# x = self.conv_x(x)", "\n", "# x = x.permute(0, 2, 3, 4, 1).contiguous()", "\n", "# x = x.view(x.size(0), -1, self.embedding_dim)", "\n", "\n", "            ", "x", "=", "list", "(", "torch", ".", "chunk", "(", "x", ",", "self", ".", "num_channels", ",", "dim", "=", "1", ")", ")", "\n", "# combine embedding with conv patch distribution", "\n", "\n", "x1_1_list", "=", "[", "]", "\n", "x2_1_list", "=", "[", "]", "\n", "x3_1_list", "=", "[", "]", "\n", "x4_1_list", "=", "[", "]", "\n", "existing_modal", "=", "[", "x", "for", "x", "in", "[", "0", ",", "1", ",", "2", ",", "3", "]", "if", "x", "not", "in", "missing_modal", "]", "\n", "if", "len", "(", "existing_modal", ")", ">", "0", ":", "\n", "                ", "x1_1", ",", "x2_1", ",", "x3_1", ",", "x4_1", ",", "x", "[", "existing_modal", "[", "0", "]", "]", "=", "self", ".", "Unet_list", "[", "existing_modal", "[", "0", "]", "]", "(", "x", "[", "existing_modal", "[", "0", "]", "]", ")", "\n", "x1_1_list", ".", "append", "(", "x1_1", ")", "\n", "x2_1_list", ".", "append", "(", "x2_1", ")", "\n", "x3_1_list", ".", "append", "(", "x3_1", ")", "\n", "x4_1_list", ".", "append", "(", "x4_1", ")", "\n", "", "for", "i", "in", "range", "(", "1", ",", "len", "(", "existing_modal", ")", ")", ":", "\n", "                ", "x1_1_tmp", ",", "x2_1_tmp", ",", "x3_1_tmp", ",", "x4_1_tmp", ",", "x", "[", "existing_modal", "[", "i", "]", "]", "=", "self", ".", "Unet_list", "[", "existing_modal", "[", "i", "]", "]", "(", "x", "[", "existing_modal", "[", "i", "]", "]", ")", "\n", "x1_1_list", ".", "append", "(", "x1_1_tmp", ")", "\n", "x2_1_list", ".", "append", "(", "x2_1_tmp", ")", "\n", "x3_1_list", ".", "append", "(", "x3_1_tmp", ")", "\n", "x4_1_list", ".", "append", "(", "x4_1_tmp", ")", "\n", "x1_1", "=", "x1_1", "+", "x1_1_tmp", "\n", "x2_1", "=", "x2_1", "+", "x2_1_tmp", "\n", "x3_1", "=", "x3_1", "+", "x3_1_tmp", "\n", "x4_1", "=", "x4_1", "+", "x4_1_tmp", "\n", "\n", "", "x_temp", "=", "[", "]", "\n", "for", "i", "in", "existing_modal", ":", "\n", "                ", "x", "[", "i", "]", "=", "self", ".", "bn_list", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "x", "[", "i", "]", "=", "self", ".", "relu_list", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "x", "[", "i", "]", "=", "self", ".", "conv_x_list", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "x_temp", ".", "append", "(", "x", "[", "i", "]", ")", "\n", "x", "[", "i", "]", "=", "x", "[", "i", "]", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "x", "[", "i", "]", "=", "x", "[", "i", "]", ".", "view", "(", "x", "[", "i", "]", ".", "size", "(", "0", ")", ",", "-", "1", ",", "self", ".", "embedding_dim", ")", "\n", "\n", "# else:", "\n", "#     x = self.Unet(x)", "\n", "#     x = self.bn(x)", "\n", "#     x = self.relu(x)", "\n", "#     x = (", "\n", "#         x.unfold(2, 2, 2)", "\n", "#         .unfold(3, 2, 2)", "\n", "#         .unfold(4, 2, 2)", "\n", "#         .contiguous()", "\n", "#     )", "\n", "#     x = x.view(x.size(0), x.size(1), -1, 8)", "\n", "#     x = x.permute(0, 2, 3, 1).contiguous()", "\n", "#     x = x.view(x.size(0), -1, self.flatten_dim)", "\n", "#     x = self.linear_encoding(x)", "\n", "\n", "# x = self.shadow_tokens", "\n", "", "", "for", "i", "in", "missing_modal", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "shadow_tokens", "[", "i", "]", "\n", "# if missing_modal.int() < 4:", "\n", "#     x[missing_modal.int()] = self.shadow_tokens[missing_modal.int()].repeat(x[i].size(0), 1, 1)", "\n", "\n", "", "for", "i", "in", "existing_modal", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "position_encoding", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "x", "[", "i", "]", "=", "self", ".", "pe_dropout", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "x", "[", "i", "]", "=", "self", ".", "intra_transformer", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "# apply transformer", "\n", "", "x", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "inter_position_encoding", "(", "x", ")", "\n", "x", "=", "self", ".", "inter_pe_dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "inter_transformer", "(", "x", ")", "\n", "\n", "# x = x.transpose(1, 2)", "\n", "x", "=", "self", ".", "fusion", "(", "x", ")", "\n", "# x = x.transpose(1, 2)", "\n", "# x = self.pre_head_ln(x)", "\n", "x", "=", "self", ".", "_reshape_output", "(", "x", ")", "\n", "\n", "return", "x1_1", ",", "x2_1", ",", "x3_1", ",", "x4_1", ",", "x", ",", "x1_1_list", ",", "x2_1_list", ",", "x3_1_list", ",", "x4_1_list", ",", "x_temp", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.mmFormer.forward": [[204, 217], ["mmformer.mmFormer.encode", "mmformer.mmFormer.decoder", "range", "len", "auxillary_outputs.append", "auxillary_outputs.append", "mmformer.mmFormer.shared_decoder"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.mmFormer.encode"], ["", "def", "forward", "(", "self", ",", "x", ",", "missing_modal", ",", "auxillary_output_layers", "=", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", ":", "\n", "\n", "        ", "x1_1", ",", "x2_1", ",", "x3_1", ",", "x4_1", ",", "encoder_output", ",", "x1_1_list", ",", "x2_1_list", ",", "x3_1_list", ",", "x4_1_list", ",", "x_temp", "=", "self", ".", "encode", "(", "x", ",", "missing_modal", ")", "\n", "\n", "decoder_output", "=", "self", ".", "decoder", "(", "x1_1", ",", "x2_1", ",", "x3_1", ",", "x4_1", ",", "encoder_output", ")", "\n", "\n", "auxillary_outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "x_temp", ")", ")", ":", "\n", "            ", "auxillary_outputs", ".", "append", "(", "self", ".", "shared_decoder", "(", "x1_1_list", "[", "i", "]", ",", "x2_1_list", "[", "i", "]", ",", "x3_1_list", "[", "i", "]", ",", "x4_1_list", "[", "i", "]", ",", "x_temp", "[", "i", "]", ")", "[", "0", "]", ")", "\n", "", "for", "i", "in", "decoder_output", "[", "1", ":", "]", ":", "\n", "            ", "auxillary_outputs", ".", "append", "(", "i", ")", "\n", "\n", "", "return", "decoder_output", "[", "0", "]", ",", "auxillary_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.mmFormer._get_padding": [[218, 224], ["tuple", "tuple"], "methods", ["None"], ["", "def", "_get_padding", "(", "self", ",", "padding_type", ",", "kernel_size", ")", ":", "\n", "        ", "assert", "padding_type", "in", "[", "'SAME'", ",", "'VALID'", "]", "\n", "if", "padding_type", "==", "'SAME'", ":", "\n", "            ", "_list", "=", "[", "(", "k", "-", "1", ")", "//", "2", "for", "k", "in", "kernel_size", "]", "\n", "return", "tuple", "(", "_list", ")", "\n", "", "return", "tuple", "(", "0", "for", "_", "in", "kernel_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.mmFormer._reshape_output": [[225, 236], ["x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.size", "int", "int", "int", "x.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "_reshape_output", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "\n", "x", ".", "size", "(", "0", ")", ",", "\n", "int", "(", "self", ".", "img_dim", "/", "self", ".", "patch_dim", ")", ",", "\n", "int", "(", "self", ".", "img_dim", "/", "self", ".", "patch_dim", ")", ",", "\n", "int", "(", "self", ".", "img_dim", "/", "self", ".", "patch_dim", ")", ",", "\n", "self", ".", "embedding_dim", ",", "\n", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.Decoder.__init__": [[239, 266], ["torch.Module.__init__", "torch.Softmax", "torch.Softmax", "torch.Softmax", "mmformer.EnBlock1", "mmformer.EnBlock2", "mmformer.DeUp_Cat", "mmformer.DeBlock", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "mmformer.DeUp_Cat", "mmformer.DeBlock", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "mmformer.DeUp_Cat", "mmformer.DeBlock", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "mmformer.DeUp_Cat", "mmformer.DeBlock", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_dim", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "Softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n", "self", ".", "Enblock8_1", "=", "EnBlock1", "(", "in_channels", "=", "self", ".", "embedding_dim", ")", "\n", "self", ".", "Enblock8_2", "=", "EnBlock2", "(", "in_channels", "=", "self", ".", "embedding_dim", "//", "2", ")", "\n", "\n", "self", ".", "DeUp5", "=", "DeUp_Cat", "(", "in_channels", "=", "self", ".", "embedding_dim", "//", "2", ",", "out_channels", "=", "self", ".", "embedding_dim", "//", "4", ")", "\n", "self", ".", "DeBlock5", "=", "DeBlock", "(", "in_channels", "=", "self", ".", "embedding_dim", "//", "4", ")", "\n", "self", ".", "endconv5", "=", "nn", ".", "Conv3d", "(", "self", ".", "embedding_dim", "//", "4", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "DeUp4", "=", "DeUp_Cat", "(", "in_channels", "=", "self", ".", "embedding_dim", "//", "4", ",", "out_channels", "=", "self", ".", "embedding_dim", "//", "8", ")", "\n", "self", ".", "DeBlock4", "=", "DeBlock", "(", "in_channels", "=", "self", ".", "embedding_dim", "//", "8", ")", "\n", "self", ".", "endconv4", "=", "nn", ".", "Conv3d", "(", "self", ".", "embedding_dim", "//", "8", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "DeUp3", "=", "DeUp_Cat", "(", "in_channels", "=", "self", ".", "embedding_dim", "//", "8", ",", "out_channels", "=", "self", ".", "embedding_dim", "//", "16", ")", "\n", "self", ".", "DeBlock3", "=", "DeBlock", "(", "in_channels", "=", "self", ".", "embedding_dim", "//", "16", ")", "\n", "self", ".", "endconv3", "=", "nn", ".", "Conv3d", "(", "self", ".", "embedding_dim", "//", "16", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "DeUp2", "=", "DeUp_Cat", "(", "in_channels", "=", "self", ".", "embedding_dim", "//", "16", ",", "out_channels", "=", "self", ".", "embedding_dim", "//", "32", ")", "\n", "self", ".", "DeBlock2", "=", "DeBlock", "(", "in_channels", "=", "self", ".", "embedding_dim", "//", "32", ")", "\n", "\n", "self", ".", "endconv", "=", "nn", ".", "Conv3d", "(", "self", ".", "embedding_dim", "//", "32", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.Decoder.forward": [[267, 297], ["mmformer.Decoder.Enblock8_1", "mmformer.Decoder.Enblock8_2", "mmformer.Decoder.DeUp5", "mmformer.Decoder.DeBlock5", "mmformer.Decoder.endconv5", "torch.interpolate", "torch.interpolate", "torch.interpolate", "mmformer.Decoder.Softmax", "mmformer.Decoder.DeUp4", "mmformer.Decoder.DeBlock4", "mmformer.Decoder.endconv4", "torch.interpolate", "torch.interpolate", "torch.interpolate", "mmformer.Decoder.Softmax", "mmformer.Decoder.DeUp3", "mmformer.Decoder.DeBlock3", "mmformer.Decoder.endconv3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "mmformer.Decoder.Softmax", "mmformer.Decoder.DeUp2", "mmformer.Decoder.DeBlock2", "mmformer.Decoder.endconv", "mmformer.Decoder.Softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1_1", ",", "x2_1", ",", "x3_1", ",", "x4_1", ",", "x", ")", ":", "\n", "# x8 = encoder_outputs[all_keys[0]]", "\n", "        ", "x8", "=", "x", "\n", "x8", "=", "self", ".", "Enblock8_1", "(", "x8", ")", "\n", "x8", "=", "self", ".", "Enblock8_2", "(", "x8", ")", "\n", "\n", "y5", "=", "self", ".", "DeUp5", "(", "x8", ",", "x4_1", ")", "# (1, 128, 16, 16, 16)", "\n", "y5", "=", "self", ".", "DeBlock5", "(", "y5", ")", "\n", "y5_tmp", "=", "self", ".", "endconv5", "(", "y5", ")", "\n", "y5_tmp", "=", "F", ".", "interpolate", "(", "y5_tmp", ",", "scale_factor", "=", "8", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", "\n", "y5_tmp", "=", "self", ".", "Softmax", "(", "y5_tmp", ")", "\n", "\n", "y4", "=", "self", ".", "DeUp4", "(", "y5", ",", "x3_1", ")", "# (1, 64, 32, 32, 32)", "\n", "y4", "=", "self", ".", "DeBlock4", "(", "y4", ")", "\n", "y4_tmp", "=", "self", ".", "endconv4", "(", "y4", ")", "\n", "y4_tmp", "=", "F", ".", "interpolate", "(", "y4_tmp", ",", "scale_factor", "=", "4", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", "\n", "y4_tmp", "=", "self", ".", "Softmax", "(", "y4_tmp", ")", "\n", "\n", "y3", "=", "self", ".", "DeUp3", "(", "y4", ",", "x2_1", ")", "# (1, 32, 64, 64, 64)", "\n", "y3", "=", "self", ".", "DeBlock3", "(", "y3", ")", "\n", "y3_tmp", "=", "self", ".", "endconv3", "(", "y3", ")", "\n", "y3_tmp", "=", "F", ".", "interpolate", "(", "y3_tmp", ",", "scale_factor", "=", "2", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", "\n", "y3_tmp", "=", "self", ".", "Softmax", "(", "y3_tmp", ")", "\n", "\n", "y2", "=", "self", ".", "DeUp2", "(", "y3", ",", "x1_1", ")", "# (1, 16, 128, 128, 128)", "\n", "y2", "=", "self", ".", "DeBlock2", "(", "y2", ")", "\n", "\n", "y", "=", "self", ".", "endconv", "(", "y2", ")", "# (1, 4, 128, 128, 128)", "\n", "y", "=", "self", ".", "Softmax", "(", "y", ")", "\n", "return", "y", ",", "y3_tmp", ",", "y4_tmp", ",", "y5_tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.EnBlock1.__init__": [[388, 399], ["torch.Module.__init__", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "EnBlock1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.bn1 = nn.BatchNorm3d(in_channels // 2)", "\n", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm3d", "(", "in_channels", "//", "2", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "# self.bn2 = nn.BatchNorm3d(in_channels // 2)", "\n", "self", ".", "bn2", "=", "nn", ".", "InstanceNorm3d", "(", "in_channels", "//", "2", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "in_channels", "//", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "in_channels", "//", "2", ",", "in_channels", "//", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.EnBlock1.forward": [[400, 409], ["mmformer.EnBlock1.conv1", "mmformer.EnBlock1.bn1", "mmformer.EnBlock1.relu1", "mmformer.EnBlock1.conv2", "mmformer.EnBlock1.bn2", "mmformer.EnBlock1.relu2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x1", "=", "self", ".", "bn1", "(", "x1", ")", "\n", "x1", "=", "self", ".", "relu1", "(", "x1", ")", "\n", "x1", "=", "self", ".", "conv2", "(", "x1", ")", "\n", "x1", "=", "self", ".", "bn2", "(", "x1", ")", "\n", "x1", "=", "self", ".", "relu2", "(", "x1", ")", "\n", "\n", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.EnBlock2.__init__": [[412, 423], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "EnBlock2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "# self.bn1 = nn.BatchNorm3d(in_channels)", "\n", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm3d", "(", "in_channels", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "# self.bn2 = nn.BatchNorm3d(in_channels)", "\n", "self", ".", "bn2", "=", "nn", ".", "InstanceNorm3d", "(", "in_channels", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.EnBlock2.forward": [[424, 434], ["mmformer.EnBlock2.conv1", "mmformer.EnBlock2.bn1", "mmformer.EnBlock2.relu1", "mmformer.EnBlock2.conv2", "mmformer.EnBlock2.bn2", "mmformer.EnBlock2.relu2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x1", "=", "self", ".", "bn1", "(", "x1", ")", "\n", "x1", "=", "self", ".", "relu1", "(", "x1", ")", "\n", "x1", "=", "self", ".", "conv2", "(", "x1", ")", "\n", "x1", "=", "self", ".", "bn2", "(", "x1", ")", "\n", "x1", "=", "self", ".", "relu2", "(", "x1", ")", "\n", "x1", "=", "x1", "+", "x", "\n", "\n", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.DeUp_Cat.__init__": [[437, 442], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "DeUp_Cat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "ConvTranspose3d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "out_channels", "*", "2", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.DeUp_Cat.forward": [[443, 450], ["mmformer.DeUp_Cat.conv1", "mmformer.DeUp_Cat.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmformer.DeUp_Cat.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "prev", ")", ":", "\n", "        ", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "y", "=", "self", ".", "conv2", "(", "x1", ")", "\n", "# y = y + prev", "\n", "y", "=", "torch", ".", "cat", "(", "(", "prev", ",", "y", ")", ",", "dim", "=", "1", ")", "\n", "y", "=", "self", ".", "conv3", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.DeBlock.__init__": [[452, 463], ["torch.Module.__init__", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "DeBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.bn1 = nn.BatchNorm3d(in_channels)", "\n", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm3d", "(", "in_channels", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "# self.bn2 = nn.BatchNorm3d(in_channels)", "\n", "self", ".", "bn2", "=", "nn", ".", "InstanceNorm3d", "(", "in_channels", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.DeBlock.forward": [[464, 474], ["mmformer.DeBlock.conv1", "mmformer.DeBlock.bn1", "mmformer.DeBlock.relu1", "mmformer.DeBlock.conv2", "mmformer.DeBlock.bn2", "mmformer.DeBlock.relu2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x1", "=", "self", ".", "bn1", "(", "x1", ")", "\n", "x1", "=", "self", ".", "relu1", "(", "x1", ")", "\n", "x1", "=", "self", ".", "conv2", "(", "x1", ")", "\n", "x1", "=", "self", ".", "bn2", "(", "x1", ")", "\n", "x1", "=", "self", ".", "relu2", "(", "x1", ")", "\n", "x1", "=", "x1", "+", "x", "\n", "\n", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.mmformer.get_mmFormer": [[476, 501], ["mmformer.mmFormer", "dataset.lower"], "function", ["None"], ["", "", "def", "get_mmFormer", "(", "dataset", "=", "'brats'", ",", "_conv_repr", "=", "True", ",", "_pe_type", "=", "\"learned\"", ")", ":", "\n", "\n", "    ", "if", "dataset", ".", "lower", "(", ")", "==", "'brats'", ":", "\n", "        ", "img_dim", "=", "128", "\n", "num_classes", "=", "4", "\n", "\n", "", "num_channels", "=", "4", "\n", "patch_dim", "=", "16", "\n", "aux_layers", "=", "[", "1", ",", "2", ",", "3", ",", "4", "]", "\n", "model", "=", "mmFormer", "(", "\n", "img_dim", ",", "\n", "patch_dim", ",", "\n", "num_channels", ",", "\n", "num_classes", ",", "\n", "embedding_dim", "=", "512", ",", "\n", "num_heads", "=", "8", ",", "\n", "num_layers", "=", "1", ",", "\n", "hidden_dim", "=", "4096", ",", "\n", "dropout_rate", "=", "0.1", ",", "\n", "attn_dropout_rate", "=", "0.1", ",", "\n", "conv_patch_representation", "=", "_conv_repr", ",", "\n", "positional_encoding_type", "=", "_pe_type", ",", "\n", ")", "\n", "\n", "return", "aux_layers", ",", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Transformer.SelfAttention.__init__": [[7, 19], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "dim", ",", "heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "dropout_rate", "=", "0.0", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "heads", "\n", "head_dim", "=", "dim", "//", "heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "dropout_rate", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Transformer.SelfAttention.forward": [[20, 41], ["Transformer.SelfAttention.qkv().reshape().permute", "Transformer.SelfAttention.softmax", "Transformer.SelfAttention.attn_drop", "Transformer.SelfAttention.proj", "Transformer.SelfAttention.proj_drop", "Transformer.SelfAttention.qkv().reshape", "k.transpose", "Transformer.SelfAttention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "(", "\n", "self", ".", "qkv", "(", "x", ")", "\n", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", "\n", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", ")", "\n", "q", ",", "k", ",", "v", "=", "(", "\n", "qkv", "[", "0", "]", ",", "\n", "qkv", "[", "1", "]", ",", "\n", "qkv", "[", "2", "]", ",", "\n", ")", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Transformer.Residual.__init__": [[44, 47], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fn", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Transformer.Residual.forward": [[48, 50], ["Transformer.Residual.fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "fn", "(", "x", ")", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Transformer.PreNorm.__init__": [[53, 57], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "fn", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Transformer.PreNorm.forward": [[58, 60], ["Transformer.PreNorm.fn", "Transformer.PreNorm.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "fn", "(", "self", ".", "norm", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Transformer.PreNormDrop.__init__": [[63, 68], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "dropout_rate", ",", "fn", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Transformer.PreNormDrop.forward": [[69, 71], ["Transformer.PreNormDrop.dropout", "Transformer.PreNormDrop.fn", "Transformer.PreNormDrop.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "dropout", "(", "self", ".", "fn", "(", "self", ".", "norm", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Transformer.FeedForward.__init__": [[74, 82], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "hidden_dim", ",", "dropout_rate", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Transformer.FeedForward.forward": [[84, 86], ["Transformer.FeedForward.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Transformer.TransformerModel.__init__": [[89, 117], ["torch.Module.__init__", "range", "models.mmformer.IntmdSequential.IntermediateSequential", "layers.extend", "Transformer.Residual", "Transformer.Residual", "Transformer.PreNormDrop", "Transformer.PreNorm", "Transformer.SelfAttention", "Transformer.FeedForward"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dim", ",", "\n", "depth", ",", "\n", "heads", ",", "\n", "mlp_dim", ",", "\n", "dropout_rate", "=", "0.1", ",", "\n", "attn_dropout_rate", "=", "0.1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "depth", ")", ":", "\n", "            ", "layers", ".", "extend", "(", "\n", "[", "\n", "Residual", "(", "\n", "PreNormDrop", "(", "\n", "dim", ",", "\n", "dropout_rate", ",", "\n", "SelfAttention", "(", "dim", ",", "heads", "=", "heads", ",", "dropout_rate", "=", "attn_dropout_rate", ")", ",", "\n", ")", "\n", ")", ",", "\n", "Residual", "(", "\n", "PreNorm", "(", "dim", ",", "FeedForward", "(", "dim", ",", "mlp_dim", ",", "dropout_rate", ")", ")", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "# dim = dim / 2", "\n", "", "self", ".", "net", "=", "IntermediateSequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Transformer.TransformerModel.forward": [[119, 121], ["Transformer.TransformerModel.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Transformer.mmTransformerModel.__init__": [[123, 189], ["torch.Module.__init__", "range", "range", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "Transformer.mmTransformerModel.self_attention_list.append", "Transformer.mmTransformerModel.self_ffn_list.append", "Transformer.mmTransformerModel.cross_attention_list.append", "Transformer.mmTransformerModel.cross_ffn_list.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "list", "list", "Transformer.Residual", "Transformer.Residual", "Transformer.PreNormDrop", "Transformer.PreNorm", "Transformer.SelfAttention", "Transformer.FeedForward"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "modal_num", ",", "\n", "dim", ",", "\n", "depth", ",", "\n", "heads", ",", "\n", "mlp_dim", ",", "\n", "dropout_rate", "=", "0.1", ",", "\n", "attn_dropout_rate", "=", "0.1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attention_list", "=", "[", "]", "\n", "self", ".", "self_ffn_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "modal_num", ")", ":", "\n", "            ", "self", ".", "self_attention_list", ".", "append", "(", "list", "(", ")", ")", "\n", "self", ".", "self_ffn_list", ".", "append", "(", "list", "(", ")", ")", "\n", "", "self", ".", "compress_list", "=", "[", "]", "\n", "self", ".", "cross_attention_list", "=", "[", "]", "\n", "self", ".", "cross_ffn_list", "=", "[", "]", "\n", "self", ".", "expand_list", "=", "[", "]", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "modal_num", "=", "modal_num", "\n", "for", "j", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "# for i in range(modal_num):", "\n", "#     self.self_attention_list[i].append(", "\n", "#         Residual(", "\n", "#             PreNormDrop(", "\n", "#                 dim,", "\n", "#                 dropout_rate,", "\n", "#                 SelfAttention(dim, heads=heads, dropout_rate=attn_dropout_rate),", "\n", "#             )", "\n", "#         )", "\n", "#     )", "\n", "#     self.self_ffn_list[i].append(", "\n", "#         Residual(", "\n", "#             PreNorm(dim, FeedForward(dim, mlp_dim, dropout_rate))", "\n", "#         )", "\n", "#     )", "\n", "# self.compress_list.append(nn.Linear(dim, int(dim/self.modal_num)))", "\n", "            ", "self", ".", "cross_attention_list", ".", "append", "(", "\n", "Residual", "(", "\n", "PreNormDrop", "(", "\n", "# int(dim/self.modal_num),", "\n", "dim", ",", "\n", "dropout_rate", ",", "\n", "# SelfAttention(int(dim/self.modal_num), heads=heads, dropout_rate=attn_dropout_rate),", "\n", "SelfAttention", "(", "dim", ",", "heads", "=", "heads", ",", "dropout_rate", "=", "attn_dropout_rate", ")", ",", "\n", ")", "\n", ")", "\n", ")", "\n", "self", ".", "cross_ffn_list", ".", "append", "(", "\n", "Residual", "(", "\n", "# PreNorm(int(dim/self.modal_num), FeedForward(int(dim/self.modal_num), mlp_dim, dropout_rate))", "\n", "PreNorm", "(", "dim", ",", "FeedForward", "(", "dim", ",", "mlp_dim", ",", "dropout_rate", ")", ")", "\n", ")", "\n", ")", "\n", "# self.expand_list.append(nn.Linear(int(dim/self.modal_num), dim))", "\n", "\n", "", "for", "i", "in", "range", "(", "modal_num", ")", ":", "\n", "            ", "self", ".", "self_attention_list", "[", "i", "]", "=", "nn", ".", "ModuleList", "(", "self", ".", "self_attention_list", "[", "i", "]", ")", "\n", "self", ".", "self_ffn_list", "[", "i", "]", "=", "nn", ".", "ModuleList", "(", "self", ".", "self_ffn_list", "[", "i", "]", ")", "\n", "# self.self_attention_list = nn.ModuleList(self.self_attention_list)", "\n", "# self.self_ffn_list = nn.ModuleList(self.self_ffn_list)", "\n", "# self.compress_list = nn.ModuleList(self.compress_list)", "\n", "", "self", ".", "cross_attention_list", "=", "nn", ".", "ModuleList", "(", "self", ".", "cross_attention_list", ")", "\n", "self", ".", "cross_ffn_list", "=", "nn", ".", "ModuleList", "(", "self", ".", "cross_ffn_list", ")", "\n", "# self.expand_list = nn.ModuleList(self.expand_list)", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Transformer.mmTransformerModel.forward": [[191, 196], ["range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "            ", "x", "=", "self", ".", "cross_attention_list", "[", "j", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "cross_ffn_list", "[", "j", "]", "(", "x", ")", "\n", "", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Unet_skipconnection.InitConv.__init__": [[23, 28], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "4", ",", "out_channels", "=", "16", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "InitConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Unet_skipconnection.InitConv.forward": [[29, 34], ["Unet_skipconnection.InitConv.conv", "torch.dropout3d", "torch.dropout3d", "torch.dropout3d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv", "(", "x", ")", "\n", "y", "=", "F", ".", "dropout3d", "(", "y", ",", "self", ".", "dropout", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Unet_skipconnection.EnBlock.__init__": [[37, 47], ["torch.Module.__init__", "Unet_skipconnection.normalization", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "Unet_skipconnection.normalization", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Unet_skipconnection.normalization", "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Unet_skipconnection.normalization"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "norm", "=", "'in'", ")", ":", "\n", "        ", "super", "(", "EnBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bn1", "=", "normalization", "(", "in_channels", ",", "norm", "=", "norm", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn2", "=", "normalization", "(", "in_channels", ",", "norm", "=", "norm", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Unet_skipconnection.EnBlock.forward": [[48, 58], ["Unet_skipconnection.EnBlock.bn1", "Unet_skipconnection.EnBlock.relu1", "Unet_skipconnection.EnBlock.conv1", "Unet_skipconnection.EnBlock.bn2", "Unet_skipconnection.EnBlock.relu2", "Unet_skipconnection.EnBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x1", "=", "self", ".", "relu1", "(", "x1", ")", "\n", "x1", "=", "self", ".", "conv1", "(", "x1", ")", "\n", "y", "=", "self", ".", "bn2", "(", "x1", ")", "\n", "y", "=", "self", ".", "relu2", "(", "y", ")", "\n", "y", "=", "self", ".", "conv2", "(", "y", ")", "\n", "y", "=", "y", "+", "x", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Unet_skipconnection.EnDown.__init__": [[61, 64], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "EnDown", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Unet_skipconnection.EnDown.forward": [[65, 69], ["Unet_skipconnection.EnDown.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv", "(", "x", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Unet_skipconnection.Unet.__init__": [[73, 94], ["torch.Module.__init__", "Unet_skipconnection.InitConv", "Unet_skipconnection.EnBlock", "Unet_skipconnection.EnDown", "Unet_skipconnection.EnBlock", "Unet_skipconnection.EnBlock", "Unet_skipconnection.EnDown", "Unet_skipconnection.EnBlock", "Unet_skipconnection.EnBlock", "Unet_skipconnection.EnDown", "Unet_skipconnection.EnBlock", "Unet_skipconnection.EnBlock", "Unet_skipconnection.EnDown", "Unet_skipconnection.EnBlock", "Unet_skipconnection.EnBlock"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "4", ",", "base_channels", "=", "16", ",", "num_classes", "=", "4", ")", ":", "\n", "        ", "super", "(", "Unet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "InitConv", "=", "InitConv", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "base_channels", ",", "dropout", "=", "0.2", ")", "\n", "self", ".", "EnBlock1", "=", "EnBlock", "(", "in_channels", "=", "base_channels", ")", "\n", "self", ".", "EnDown1", "=", "EnDown", "(", "in_channels", "=", "base_channels", ",", "out_channels", "=", "base_channels", "*", "2", ")", "\n", "\n", "self", ".", "EnBlock2_1", "=", "EnBlock", "(", "in_channels", "=", "base_channels", "*", "2", ")", "\n", "self", ".", "EnBlock2_2", "=", "EnBlock", "(", "in_channels", "=", "base_channels", "*", "2", ")", "\n", "self", ".", "EnDown2", "=", "EnDown", "(", "in_channels", "=", "base_channels", "*", "2", ",", "out_channels", "=", "base_channels", "*", "4", ")", "\n", "\n", "self", ".", "EnBlock3_1", "=", "EnBlock", "(", "in_channels", "=", "base_channels", "*", "4", ")", "\n", "self", ".", "EnBlock3_2", "=", "EnBlock", "(", "in_channels", "=", "base_channels", "*", "4", ")", "\n", "self", ".", "EnDown3", "=", "EnDown", "(", "in_channels", "=", "base_channels", "*", "4", ",", "out_channels", "=", "base_channels", "*", "8", ")", "\n", "\n", "self", ".", "EnBlock4_1", "=", "EnBlock", "(", "in_channels", "=", "base_channels", "*", "8", ")", "\n", "self", ".", "EnBlock4_2", "=", "EnBlock", "(", "in_channels", "=", "base_channels", "*", "8", ")", "\n", "self", ".", "EnDown4", "=", "EnDown", "(", "in_channels", "=", "base_channels", "*", "8", ",", "out_channels", "=", "base_channels", "*", "16", ")", "\n", "\n", "self", ".", "EnBlock5_1", "=", "EnBlock", "(", "in_channels", "=", "base_channels", "*", "16", ")", "\n", "self", ".", "EnBlock5_2", "=", "EnBlock", "(", "in_channels", "=", "base_channels", "*", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Unet_skipconnection.Unet.forward": [[95, 117], ["Unet_skipconnection.Unet.InitConv", "Unet_skipconnection.Unet.EnBlock1", "Unet_skipconnection.Unet.EnDown1", "Unet_skipconnection.Unet.EnBlock2_1", "Unet_skipconnection.Unet.EnBlock2_2", "Unet_skipconnection.Unet.EnDown2", "Unet_skipconnection.Unet.EnBlock3_1", "Unet_skipconnection.Unet.EnBlock3_2", "Unet_skipconnection.Unet.EnDown3", "Unet_skipconnection.Unet.EnBlock4_1", "Unet_skipconnection.Unet.EnBlock4_2", "Unet_skipconnection.Unet.EnDown4", "Unet_skipconnection.Unet.EnBlock5_1", "Unet_skipconnection.Unet.EnBlock5_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "InitConv", "(", "x", ")", "# (1, 16, 128, 128, 128)", "\n", "\n", "x1_1", "=", "self", ".", "EnBlock1", "(", "x", ")", "\n", "x1_2", "=", "self", ".", "EnDown1", "(", "x1_1", ")", "# (1, 32, 64, 64, 64)", "\n", "\n", "x2_1", "=", "self", ".", "EnBlock2_1", "(", "x1_2", ")", "\n", "x2_1", "=", "self", ".", "EnBlock2_2", "(", "x2_1", ")", "\n", "x2_2", "=", "self", ".", "EnDown2", "(", "x2_1", ")", "# (1, 64, 32, 32, 32)", "\n", "\n", "x3_1", "=", "self", ".", "EnBlock3_1", "(", "x2_2", ")", "\n", "x3_1", "=", "self", ".", "EnBlock3_2", "(", "x3_1", ")", "\n", "x3_2", "=", "self", ".", "EnDown3", "(", "x3_1", ")", "# (1, 128, 16, 16, 16)", "\n", "\n", "x4_1", "=", "self", ".", "EnBlock4_1", "(", "x3_2", ")", "\n", "x4_1", "=", "self", ".", "EnBlock4_2", "(", "x4_1", ")", "\n", "x4_2", "=", "self", ".", "EnDown4", "(", "x4_1", ")", "# (1, 256, 8, 8, 8)", "\n", "\n", "x5_1", "=", "self", ".", "EnBlock5_1", "(", "x4_2", ")", "\n", "x5_1", "=", "self", ".", "EnBlock5_2", "(", "x5_1", ")", "# (1, 256, 8, 8, 8)", "\n", "\n", "return", "x1_1", ",", "x2_1", ",", "x3_1", ",", "x4_1", ",", "x5_1", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.Unet_skipconnection.normalization": [[8, 20], ["torch.BatchNorm3d", "torch.GroupNorm", "torch.InstanceNorm3d", "torch.LayerNorm", "ValueError"], "function", ["None"], ["def", "normalization", "(", "planes", ",", "norm", "=", "'gn'", ")", ":", "\n", "    ", "if", "norm", "==", "'bn'", ":", "\n", "        ", "m", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "", "elif", "norm", "==", "'gn'", ":", "\n", "        ", "m", "=", "nn", ".", "GroupNorm", "(", "8", ",", "planes", ")", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "        ", "m", "=", "nn", ".", "InstanceNorm3d", "(", "planes", ")", "\n", "", "elif", "norm", "==", "'ln'", ":", "\n", "        ", "m", "=", "nn", ".", "LayerNorm", "(", "planes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'normalization type {} is not supported'", ".", "format", "(", "norm", ")", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.IntmdSequential.IntermediateSequential.__init__": [[5, 8], ["torch.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "return_intermediate", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "return_intermediate", "=", "return_intermediate", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.IntmdSequential.IntermediateSequential.forward": [[9, 19], ["IntmdSequential.IntermediateSequential.named_children", "super().forward", "module"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.PositionalEncoding.LearnedPositionalEncoding.forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "not", "self", ".", "return_intermediate", ":", "\n", "            ", "return", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "\n", "", "intermediate_outputs", "=", "{", "}", "\n", "output", "=", "input", "\n", "for", "name", ",", "module", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "output", "=", "intermediate_outputs", "[", "name", "]", "=", "module", "(", "output", ")", "\n", "\n", "", "return", "output", ",", "intermediate_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.PositionalEncoding.FixedPositionalEncoding.__init__": [[5, 18], ["torch.Module.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze().transpose", "PositionalEncoding.FixedPositionalEncoding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.log", "torch.log", "torch.log", "torch.log", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_dim", ",", "max_length", "=", "512", ")", ":", "\n", "        ", "super", "(", "FixedPositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_length", ",", "embedding_dim", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_length", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "\n", "torch", ".", "arange", "(", "0", ",", "embedding_dim", ",", "2", ")", ".", "float", "(", ")", "\n", "*", "(", "-", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "10000.0", ")", ")", "/", "embedding_dim", ")", "\n", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.PositionalEncoding.FixedPositionalEncoding.forward": [[19, 22], ["x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "pe", "[", ":", "x", ".", "size", "(", "0", ")", ",", ":", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.PositionalEncoding.LearnedPositionalEncoding.__init__": [[25, 29], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_position_embeddings", ",", "embedding_dim", ",", "seq_length", ")", ":", "\n", "        ", "super", "(", "LearnedPositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "seq_length", ",", "embedding_dim", ")", ")", "#8x", "\n", "# print('############### pe', self.position_embeddings.device)", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.mmformer.PositionalEncoding.LearnedPositionalEncoding.forward": [[31, 37], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "position_ids", "=", "None", ")", ":", "\n", "\n", "        ", "position_embeddings", "=", "self", ".", "position_embeddings", "\n", "# print('######################### pe', x.device, position_embeddings.device)", "\n", "# print('############### pe', position_embeddings.device, x.device)", "\n", "return", "x", "+", "position_embeddings", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.utils.tools.all_reduce_tensor": [[4, 9], ["tensor.clone.clone", "torch.all_reduce", "tensor.clone.div_"], "function", ["None"], ["def", "all_reduce_tensor", "(", "tensor", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ",", "world_size", "=", "1", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "tensor", ",", "op", ")", "\n", "tensor", ".", "div_", "(", "world_size", ")", "\n", "return", "tensor", "", "", ""]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.expand_target": [[6, 27], ["list", "tuple.insert", "tuple", "torch.zeros", "torch.zeros", "torch.zeros.to", "x.dim", "x.size", "mode.lower", "mode.lower"], "function", ["None"], ["def", "expand_target", "(", "x", ",", "n_class", ",", "mode", "=", "'softmax'", ")", ":", "\n", "    ", "\"\"\"\n        Converts NxDxHxW label image to NxCxDxHxW, where each label is stored in a separate channel\n        :param input: 4D input image (NxDxHxW)\n        :param C: number of channels/labels\n        :return: 5D output image (NxCxDxHxW)\n        \"\"\"", "\n", "assert", "x", ".", "dim", "(", ")", "==", "4", "\n", "shape", "=", "list", "(", "x", ".", "size", "(", ")", ")", "\n", "shape", ".", "insert", "(", "1", ",", "n_class", ")", "\n", "shape", "=", "tuple", "(", "shape", ")", "\n", "xx", "=", "torch", ".", "zeros", "(", "shape", ")", "\n", "if", "mode", ".", "lower", "(", ")", "==", "'softmax'", ":", "\n", "        ", "xx", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "=", "(", "x", "==", "1", ")", "\n", "xx", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "=", "(", "x", "==", "2", ")", "\n", "xx", "[", ":", ",", "3", ",", ":", ",", ":", ",", ":", "]", "=", "(", "x", "==", "3", ")", "\n", "", "if", "mode", ".", "lower", "(", ")", "==", "'sigmoid'", ":", "\n", "        ", "xx", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "=", "(", "x", "==", "1", ")", "\n", "xx", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "=", "(", "x", "==", "2", ")", "\n", "xx", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "=", "(", "x", "==", "3", ")", "\n", "", "return", "xx", ".", "to", "(", "x", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.flatten": [[28, 40], ["tensor.size", "tensor.permute", "tensor.permute.reshape", "tuple", "range", "tensor.dim"], "function", ["None"], ["", "def", "flatten", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"Flattens a given tensor such that the channel axis is first.\n    The shapes are transformed as follows:\n       (N, C, D, H, W) -> (C, N * D * H * W)\n    \"\"\"", "\n", "C", "=", "tensor", ".", "size", "(", "1", ")", "\n", "# new axis order", "\n", "axis_order", "=", "(", "1", ",", "0", ")", "+", "tuple", "(", "range", "(", "2", ",", "tensor", ".", "dim", "(", ")", ")", ")", "\n", "# Transpose: (N, C, D, H, W) -> (C, N, D, H, W)", "\n", "transposed", "=", "tensor", ".", "permute", "(", "axis_order", ")", "\n", "# Flatten: (C, N, D, H, W) -> (C, N * D * H * W)", "\n", "return", "transposed", ".", "reshape", "(", "C", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.Dice": [[41, 46], ["target.float.float", "output.sum", "target.float.sum"], "function", ["None"], ["", "def", "Dice", "(", "output", ",", "target", ",", "eps", "=", "1e-5", ")", ":", "\n", "    ", "target", "=", "target", ".", "float", "(", ")", "\n", "num", "=", "2", "*", "(", "output", "*", "target", ")", ".", "sum", "(", ")", "\n", "den", "=", "output", ".", "sum", "(", ")", "+", "target", ".", "sum", "(", ")", "+", "eps", "\n", "return", "1.0", "-", "num", "/", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.softmax_dice": [[48, 60], ["criterions.Dice", "criterions.Dice", "criterions.Dice"], "function", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.Dice", "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.Dice", "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.Dice"], ["", "def", "softmax_dice", "(", "output", ",", "target", ")", ":", "\n", "    ", "'''\n    The dice loss for using softmax activation function\n    :param output: (b, num_class, d, h, w)\n    :param target: (b, d, h, w)\n    :return: softmax dice loss\n    '''", "\n", "loss1", "=", "Dice", "(", "output", "[", ":", ",", "1", ",", "...", "]", ",", "(", "target", "==", "1", ")", ".", "float", "(", ")", ")", "\n", "loss2", "=", "Dice", "(", "output", "[", ":", ",", "2", ",", "...", "]", ",", "(", "target", "==", "2", ")", ".", "float", "(", ")", ")", "\n", "loss3", "=", "Dice", "(", "output", "[", ":", ",", "3", ",", "...", "]", ",", "(", "target", "==", "4", ")", ".", "float", "(", ")", ")", "\n", "\n", "return", "loss1", "+", "loss2", "+", "loss3", ",", "1", "-", "loss1", ".", "data", ",", "1", "-", "loss2", ".", "data", ",", "1", "-", "loss3", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.softmax_dice2": [[62, 75], ["criterions.Dice", "criterions.Dice", "criterions.Dice", "criterions.Dice"], "function", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.Dice", "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.Dice", "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.Dice", "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.Dice"], ["", "def", "softmax_dice2", "(", "output", ",", "target", ")", ":", "\n", "    ", "'''\n    The dice loss for using softmax activation function\n    :param output: (b, num_class, d, h, w)\n    :param target: (b, d, h, w)\n    :return: softmax dice loss\n    '''", "\n", "loss0", "=", "Dice", "(", "output", "[", ":", ",", "0", ",", "...", "]", ",", "(", "target", "==", "0", ")", ".", "float", "(", ")", ")", "\n", "loss1", "=", "Dice", "(", "output", "[", ":", ",", "1", ",", "...", "]", ",", "(", "target", "==", "1", ")", ".", "float", "(", ")", ")", "\n", "loss2", "=", "Dice", "(", "output", "[", ":", ",", "2", ",", "...", "]", ",", "(", "target", "==", "2", ")", ".", "float", "(", ")", ")", "\n", "loss3", "=", "Dice", "(", "output", "[", ":", ",", "3", ",", "...", "]", ",", "(", "target", "==", "4", ")", ".", "float", "(", ")", ")", "\n", "\n", "return", "loss1", "+", "loss2", "+", "loss3", "+", "loss0", ",", "1", "-", "loss1", ".", "data", ",", "1", "-", "loss2", ".", "data", ",", "1", "-", "loss3", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.sigmoid_dice": [[77, 89], ["criterions.Dice", "criterions.Dice", "criterions.Dice"], "function", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.Dice", "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.Dice", "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.Dice"], ["", "def", "sigmoid_dice", "(", "output", ",", "target", ")", ":", "\n", "    ", "'''\n    The dice loss for using sigmoid activation function\n    :param output: (b, num_class-1, d, h, w)\n    :param target: (b, d, h, w)\n    :return:\n    '''", "\n", "loss1", "=", "Dice", "(", "output", "[", ":", ",", "0", ",", "...", "]", ",", "(", "target", "==", "1", ")", ".", "float", "(", ")", ")", "\n", "loss2", "=", "Dice", "(", "output", "[", ":", ",", "1", ",", "...", "]", ",", "(", "target", "==", "2", ")", ".", "float", "(", ")", ")", "\n", "loss3", "=", "Dice", "(", "output", "[", ":", ",", "2", ",", "...", "]", ",", "(", "target", "==", "4", ")", ".", "float", "(", ")", ")", "\n", "\n", "return", "loss1", "+", "loss2", "+", "loss3", ",", "1", "-", "loss1", ".", "data", ",", "1", "-", "loss2", ".", "data", ",", "1", "-", "loss3", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.Generalized_dice": [[91, 120], ["expand_target.sum", "expand_target.dim", "criterions.expand_target", "criterions.flatten", "criterions.flatten", "ValueError", "output.size", "torch.sqrt", "torch.sqrt"], "function", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.expand_target", "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.flatten", "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.flatten"], ["", "def", "Generalized_dice", "(", "output", ",", "target", ",", "eps", "=", "1e-5", ",", "weight_type", "=", "'square'", ")", ":", "\n", "    ", "if", "target", ".", "dim", "(", ")", "==", "4", ":", "#(b, h, w, d)", "\n", "        ", "target", "[", "target", "==", "4", "]", "=", "3", "#transfer label 4 to 3", "\n", "target", "=", "expand_target", "(", "target", ",", "n_class", "=", "output", ".", "size", "(", ")", "[", "1", "]", ")", "#extend target from (b, h, w, d) to (b, c, h, w, d)", "\n", "\n", "", "output", "=", "flatten", "(", "output", ")", "[", "1", ":", ",", "...", "]", "# transpose [N,4\uff0cH,W,D] -> [4\uff0cN,H,W,D] -> [3, N*H*W*D] voxels", "\n", "target", "=", "flatten", "(", "target", ")", "[", "1", ":", ",", "...", "]", "# [class, N*H*W*D]", "\n", "\n", "target_sum", "=", "target", ".", "sum", "(", "-", "1", ")", "# sub_class_voxels [3,1] -> 3\u4e2avoxels", "\n", "if", "weight_type", "==", "'square'", ":", "\n", "        ", "class_weights", "=", "1.", "/", "(", "target_sum", "*", "target_sum", "+", "eps", ")", "\n", "", "elif", "weight_type", "==", "'identity'", ":", "\n", "        ", "class_weights", "=", "1.", "/", "(", "target_sum", "+", "eps", ")", "\n", "", "elif", "weight_type", "==", "'sqrt'", ":", "\n", "        ", "class_weights", "=", "1.", "/", "(", "torch", ".", "sqrt", "(", "target_sum", ")", "+", "eps", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Check out the weight_type :'", ",", "weight_type", ")", "\n", "\n", "# print(class_weights)", "\n", "", "intersect", "=", "(", "output", "*", "target", ")", ".", "sum", "(", "-", "1", ")", "\n", "intersect_sum", "=", "(", "intersect", "*", "class_weights", ")", ".", "sum", "(", ")", "\n", "denominator", "=", "(", "output", "+", "target", ")", ".", "sum", "(", "-", "1", ")", "\n", "denominator_sum", "=", "(", "denominator", "*", "class_weights", ")", ".", "sum", "(", ")", "+", "eps", "\n", "\n", "loss1", "=", "2", "*", "intersect", "[", "0", "]", "/", "(", "denominator", "[", "0", "]", "+", "eps", ")", "\n", "loss2", "=", "2", "*", "intersect", "[", "1", "]", "/", "(", "denominator", "[", "1", "]", "+", "eps", ")", "\n", "loss3", "=", "2", "*", "intersect", "[", "2", "]", "/", "(", "denominator", "[", "2", "]", "+", "eps", ")", "\n", "\n", "return", "1", "-", "2.", "*", "intersect_sum", "/", "denominator_sum", ",", "loss1", ",", "loss2", ",", "loss3", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.Dual_focal_loss": [[122, 138], ["criterions.Dice", "criterions.Dice", "criterions.Dice", "expand_target.permute().contiguous", "output.view.permute().contiguous", "expand_target.view", "output.view.view", "expand_target.dim", "criterions.expand_target", "expand_target.permute", "output.view.permute", "torch.log_softmax().mean", "output.view.size", "torch.log_softmax"], "function", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.Dice", "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.Dice", "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.Dice", "home.repos.pwc.inspect_result.yaozhang93_mmformer.models.criterions.expand_target"], ["", "def", "Dual_focal_loss", "(", "output", ",", "target", ")", ":", "\n", "    ", "loss1", "=", "Dice", "(", "output", "[", ":", ",", "1", ",", "...", "]", ",", "(", "target", "==", "1", ")", ".", "float", "(", ")", ")", "\n", "loss2", "=", "Dice", "(", "output", "[", ":", ",", "2", ",", "...", "]", ",", "(", "target", "==", "2", ")", ".", "float", "(", ")", ")", "\n", "loss3", "=", "Dice", "(", "output", "[", ":", ",", "3", ",", "...", "]", ",", "(", "target", "==", "4", ")", ".", "float", "(", ")", ")", "\n", "\n", "if", "target", ".", "dim", "(", ")", "==", "4", ":", "#(b, h, w, d)", "\n", "        ", "target", "[", "target", "==", "4", "]", "=", "3", "#transfer label 4 to 3", "\n", "target", "=", "expand_target", "(", "target", ",", "n_class", "=", "output", ".", "size", "(", ")", "[", "1", "]", ")", "#extend target from (b, h, w, d) to (b, c, h, w, d)", "\n", "\n", "", "target", "=", "target", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "target", "=", "target", ".", "view", "(", "4", ",", "-", "1", ")", "\n", "output", "=", "output", ".", "view", "(", "4", ",", "-", "1", ")", "\n", "log", "=", "1", "-", "(", "target", "-", "output", ")", "**", "2", "\n", "\n", "return", "-", "(", "F", ".", "log_softmax", "(", "(", "1", "-", "(", "target", "-", "output", ")", "**", "2", ")", ",", "0", ")", ")", ".", "mean", "(", ")", ",", "1", "-", "loss1", ".", "data", ",", "1", "-", "loss2", ".", "data", ",", "1", "-", "loss3", ".", "data", "", "", ""]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.preprocess.nib_load": [[30, 38], ["nibabel.load", "nib.load.get_data", "nib.load.uncache", "os.path.exists", "print"], "function", ["None"], ["def", "nib_load", "(", "file_name", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "file_name", ")", ":", "\n", "        ", "print", "(", "'Invalid file name, can not find the file!'", ")", "\n", "\n", "", "proxy", "=", "nib", ".", "load", "(", "file_name", ")", "\n", "data", "=", "proxy", ".", "get_data", "(", ")", "\n", "proxy", ".", "uncache", "(", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.preprocess.process_i16": [[40, 58], ["numpy.array", "numpy.stack", "preprocess.nib_load", "open", "print", "print", "pickle.dump", "numpy.array", "type", "type", "preprocess.nib_load"], "function", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.preprocess.nib_load", "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.preprocess.nib_load"], ["", "def", "process_i16", "(", "path", ",", "has_label", "=", "True", ")", ":", "\n", "    ", "\"\"\" Save the original 3D MRI images with dtype=int16.\n        Noted that no normalization is used! \"\"\"", "\n", "label", "=", "np", ".", "array", "(", "nib_load", "(", "path", "+", "'seg.nii.gz'", ")", ",", "dtype", "=", "'uint8'", ",", "order", "=", "'C'", ")", "\n", "\n", "images", "=", "np", ".", "stack", "(", "[", "\n", "np", ".", "array", "(", "nib_load", "(", "path", "+", "modal", "+", "'.nii.gz'", ")", ",", "dtype", "=", "'int16'", ",", "order", "=", "'C'", ")", "\n", "for", "modal", "in", "modalities", "]", ",", "-", "1", ")", "# [240,240,155]", "\n", "\n", "output", "=", "path", "+", "'data_i16.pkl'", "\n", "\n", "with", "open", "(", "output", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "print", "(", "output", ")", "\n", "print", "(", "images", ".", "shape", ",", "type", "(", "images", ")", ",", "label", ".", "shape", ",", "type", "(", "label", ")", ")", "# (240,240,155,4) , (240,240,155)", "\n", "pickle", ".", "dump", "(", "(", "images", ",", "label", ")", ",", "f", ")", "\n", "\n", "", "if", "not", "has_label", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.preprocess.process_f32b0": [[60, 90], ["numpy.stack", "range", "numpy.array", "np.stack.sum", "y.mean", "y.std", "open", "print", "preprocess.nib_load", "numpy.array", "pickle.dump", "pickle.dump", "preprocess.nib_load"], "function", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.preprocess.nib_load", "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.preprocess.nib_load"], ["", "", "def", "process_f32b0", "(", "path", ",", "has_label", "=", "True", ")", ":", "\n", "    ", "\"\"\" Save the data with dtype=float32.\n        z-score is used but keep the background with zero! \"\"\"", "\n", "if", "has_label", ":", "\n", "        ", "label", "=", "np", ".", "array", "(", "nib_load", "(", "path", "+", "'seg.nii.gz'", ")", ",", "dtype", "=", "'uint8'", ",", "order", "=", "'C'", ")", "\n", "", "images", "=", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "nib_load", "(", "path", "+", "modal", "+", "'.nii.gz'", ")", ",", "dtype", "=", "'float32'", ",", "order", "=", "'C'", ")", "for", "modal", "in", "modalities", "]", ",", "-", "1", ")", "# [240,240,155]", "\n", "\n", "output", "=", "path", "+", "'data_f32b0.pkl'", "\n", "mask", "=", "images", ".", "sum", "(", "-", "1", ")", ">", "0", "\n", "for", "k", "in", "range", "(", "4", ")", ":", "\n", "\n", "        ", "x", "=", "images", "[", "...", ",", "k", "]", "#", "\n", "y", "=", "x", "[", "mask", "]", "\n", "\n", "# 0.8885", "\n", "x", "[", "mask", "]", "-=", "y", ".", "mean", "(", ")", "\n", "x", "[", "mask", "]", "/=", "y", ".", "std", "(", ")", "\n", "\n", "images", "[", "...", ",", "k", "]", "=", "x", "\n", "\n", "", "with", "open", "(", "output", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "print", "(", "output", ")", "\n", "\n", "if", "has_label", ":", "\n", "            ", "pickle", ".", "dump", "(", "(", "images", ",", "label", ")", ",", "f", ")", "\n", "", "else", ":", "\n", "            ", "pickle", ".", "dump", "(", "images", ",", "f", ")", "\n", "\n", "", "", "if", "not", "has_label", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.preprocess.doit": [[92, 102], ["os.path.join", "open().read().splitlines", "os.path.join", "preprocess.process_f32b0", "open().read", "sub.split", "zip", "open"], "function", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.preprocess.process_f32b0"], ["", "", "def", "doit", "(", "dset", ")", ":", "\n", "    ", "root", ",", "has_label", "=", "dset", "[", "'root'", "]", ",", "dset", "[", "'has_label'", "]", "\n", "file_list", "=", "os", ".", "path", ".", "join", "(", "root", ",", "dset", "[", "'flist'", "]", ")", "\n", "subjects", "=", "open", "(", "file_list", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "names", "=", "[", "sub", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "sub", "in", "subjects", "]", "\n", "paths", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "sub", ",", "name", "+", "'_'", ")", "for", "sub", ",", "name", "in", "zip", "(", "subjects", ",", "names", ")", "]", "\n", "\n", "for", "path", "in", "paths", ":", "\n", "\n", "        ", "process_f32b0", "(", "path", ",", "has_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.MaxMinNormalization.__call__": [[20, 28], ["numpy.max", "numpy.min"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", "=", "sample", "[", "'image'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "Max", "=", "np", ".", "max", "(", "image", ")", "\n", "Min", "=", "np", ".", "min", "(", "image", ")", "\n", "image", "=", "(", "image", "-", "Min", ")", "/", "(", "Max", "-", "Min", ")", "\n", "\n", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.Random_Flip.__call__": [[31, 45], ["random.random", "numpy.flip", "numpy.flip", "random.random", "numpy.flip", "numpy.flip", "random.random", "numpy.flip", "numpy.flip"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", "=", "sample", "[", "'image'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "image", "=", "np", ".", "flip", "(", "image", ",", "0", ")", "\n", "label", "=", "np", ".", "flip", "(", "label", ",", "0", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "image", "=", "np", ".", "flip", "(", "image", ",", "1", ")", "\n", "label", "=", "np", ".", "flip", "(", "label", ",", "1", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "image", "=", "np", ".", "flip", "(", "image", ",", "2", ")", "\n", "label", "=", "np", ".", "flip", "(", "label", ",", "2", ")", "\n", "\n", "", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.Random_Crop.__call__": [[48, 59], ["random.randint", "random.randint", "random.randint"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", "=", "sample", "[", "'image'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "H", "=", "random", ".", "randint", "(", "0", ",", "240", "-", "128", ")", "\n", "W", "=", "random", ".", "randint", "(", "0", ",", "240", "-", "128", ")", "\n", "D", "=", "random", ".", "randint", "(", "0", ",", "160", "-", "128", ")", "\n", "\n", "image", "=", "image", "[", "H", ":", "H", "+", "128", ",", "W", ":", "W", "+", "128", ",", "D", ":", "D", "+", "128", ",", "...", "]", "\n", "label", "=", "label", "[", "...", ",", "H", ":", "H", "+", "128", ",", "W", ":", "W", "+", "128", ",", "D", ":", "D", "+", "128", "]", "\n", "\n", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.Random_intencity_shift.__call__": [[62, 72], ["numpy.random.uniform", "numpy.random.uniform"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ",", "factor", "=", "0.1", ")", ":", "\n", "        ", "image", "=", "sample", "[", "'image'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "\n", "scale_factor", "=", "np", ".", "random", ".", "uniform", "(", "1.0", "-", "factor", ",", "1.0", "+", "factor", ",", "size", "=", "[", "1", ",", "image", ".", "shape", "[", "1", "]", ",", "1", ",", "image", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "shift_factor", "=", "np", ".", "random", ".", "uniform", "(", "-", "factor", ",", "factor", ",", "size", "=", "[", "1", ",", "image", ".", "shape", "[", "1", "]", ",", "1", ",", "image", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "\n", "image", "=", "image", "*", "scale_factor", "+", "shift_factor", "\n", "\n", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.Random_rotate.__call__": [[75, 84], ["round", "scipy.ndimage.rotate", "scipy.ndimage.rotate", "numpy.random.uniform"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", "=", "sample", "[", "'image'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "\n", "angle", "=", "round", "(", "np", ".", "random", ".", "uniform", "(", "-", "10", ",", "10", ")", ",", "2", ")", "\n", "image", "=", "ndimage", ".", "rotate", "(", "image", ",", "angle", ",", "axes", "=", "(", "0", ",", "1", ")", ",", "reshape", "=", "False", ")", "\n", "label", "=", "ndimage", ".", "rotate", "(", "label", ",", "angle", ",", "axes", "=", "(", "0", ",", "1", ")", ",", "reshape", "=", "False", ")", "\n", "\n", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.Pad.__call__": [[87, 94], ["numpy.pad", "numpy.pad"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", "=", "sample", "[", "'image'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "\n", "image", "=", "np", ".", "pad", "(", "image", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "5", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "label", "=", "np", ".", "pad", "(", "label", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "5", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "#(240,240,155)>(240,240,160)", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.ToTensor.__call__": [[99, 109], ["numpy.ascontiguousarray", "numpy.ascontiguousarray", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float.transpose", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", "=", "sample", "[", "'image'", "]", "\n", "image", "=", "np", ".", "ascontiguousarray", "(", "image", ".", "transpose", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "label", "=", "np", ".", "ascontiguousarray", "(", "label", ")", "\n", "\n", "image", "=", "torch", ".", "from_numpy", "(", "image", ")", ".", "float", "(", ")", "\n", "label", "=", "torch", ".", "from_numpy", "(", "label", ")", ".", "long", "(", ")", "\n", "\n", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__init__": [[178, 210], ["BraTS.split_dataset", "names.append", "os.path.join", "paths.append", "line.split", "numpy.random.randint", "random.sample", "missing_modal_list.append", "missing_modal_list.append", "names.append", "os.path.join", "paths.append", "missing_modal_list.append", "line.split"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.split_dataset"], ["    ", "def", "__init__", "(", "self", ",", "list_file", ",", "root", "=", "''", ",", "mode", "=", "'train'", ",", "drop_modal", "=", "False", ")", ":", "\n", "        ", "train_list", ",", "val_list", "=", "split_dataset", "(", "root", ")", "\n", "# train_list, val_list = read_split()", "\n", "\n", "paths", ",", "names", ",", "missing_modal_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "for", "line", "in", "train_list", ":", "\n", "                ", "name", "=", "line", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "names", ".", "append", "(", "name", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "line", ",", "name", "+", "'_'", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "\n", "if", "drop_modal", ":", "\n", "                    ", "missing_num", "=", "np", ".", "random", ".", "randint", "(", "4", ")", "\n", "# missing_num = 1", "\n", "missing_modal", "=", "random", ".", "sample", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "missing_num", ")", "\n", "missing_modal_list", ".", "append", "(", "missing_modal", ")", "\n", "", "else", ":", "\n", "                    ", "missing_modal_list", ".", "append", "(", "[", "]", ")", "\n", "", "", "", "elif", "mode", "==", "'valid'", ":", "\n", "            ", "for", "line", "in", "val_list", ":", "\n", "                ", "name", "=", "line", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "names", ".", "append", "(", "name", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "line", ",", "name", "+", "'_'", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "\n", "missing_modal_list", ".", "append", "(", "[", "2", "]", ")", "\n", "\n", "", "", "self", ".", "mode", "=", "mode", "\n", "self", ".", "names", "=", "names", "\n", "self", ".", "paths", "=", "paths", "\n", "self", ".", "missing_modal_list", "=", "missing_modal_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__getitem__": [[211, 229], ["BraTS.pkload", "BraTS.transform", "BraTS.pkload", "BraTS.transform_valid", "BraTS.pkload", "numpy.pad", "numpy.ascontiguousarray", "torch.from_numpy().float", "torch.from_numpy().float.transpose", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.pkload", "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.transform", "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.pkload", "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.transform_valid", "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.pkload"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "path", "=", "self", ".", "paths", "[", "item", "]", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "image", ",", "label", "=", "pkload", "(", "path", "+", "'data_f32b0.pkl'", ")", "\n", "sample", "=", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "sample", "=", "transform", "(", "sample", ")", "\n", "return", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", ",", "self", ".", "missing_modal_list", "[", "item", "]", "\n", "", "elif", "self", ".", "mode", "==", "'valid'", ":", "\n", "            ", "image", ",", "label", "=", "pkload", "(", "path", "+", "'data_f32b0.pkl'", ")", "\n", "sample", "=", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "sample", "=", "transform_valid", "(", "sample", ")", "\n", "return", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", ",", "self", ".", "missing_modal_list", "[", "item", "]", "\n", "", "else", ":", "\n", "            ", "image", "=", "pkload", "(", "path", "+", "'data_f32b0.pkl'", ")", "\n", "image", "=", "np", ".", "pad", "(", "image", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "5", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ")", "\n", "image", "=", "np", ".", "ascontiguousarray", "(", "image", ".", "transpose", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "\n", "image", "=", "torch", ".", "from_numpy", "(", "image", ")", ".", "float", "(", ")", "\n", "return", "image", ",", "self", ".", "missing_modal_list", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.__len__": [[230, 232], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.BraTS.collate": [[233, 235], ["torch.cat", "zip"], "methods", ["None"], ["", "def", "collate", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "[", "torch", ".", "cat", "(", "v", ")", "for", "v", "in", "zip", "(", "*", "batch", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.pkload": [[14, 17], ["open", "pickle.load"], "function", ["None"], ["def", "pkload", "(", "fname", ")", ":", "\n", "    ", "with", "open", "(", "fname", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.transform": [[111, 122], ["torchvision.transforms.transforms.Compose", "transforms.Compose.", "BraTS.Pad", "BraTS.Random_Crop", "BraTS.Random_Flip", "BraTS.Random_intencity_shift", "BraTS.ToTensor"], "function", ["None"], ["", "", "def", "transform", "(", "sample", ")", ":", "\n", "    ", "trans", "=", "transforms", ".", "Compose", "(", "[", "\n", "Pad", "(", ")", ",", "\n", "# Random_rotate(),  # time-consuming", "\n", "Random_Crop", "(", ")", ",", "\n", "Random_Flip", "(", ")", ",", "\n", "Random_intencity_shift", "(", ")", ",", "\n", "ToTensor", "(", ")", "\n", "]", ")", "\n", "\n", "return", "trans", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.transform_valid": [[124, 132], ["torchvision.transforms.transforms.Compose", "transforms.Compose.", "BraTS.Pad", "BraTS.ToTensor"], "function", ["None"], ["", "def", "transform_valid", "(", "sample", ")", ":", "\n", "    ", "trans", "=", "transforms", ".", "Compose", "(", "[", "\n", "Pad", "(", ")", ",", "\n", "# MaxMinNormalization(),", "\n", "ToTensor", "(", ")", "\n", "]", ")", "\n", "\n", "return", "trans", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.split_dataset": [[134, 159], ["glob.glob", "len", "print", "numpy.arange", "numpy.random.seed", "numpy.random.shuffle", "numpy.split", "print", "print", "enumerate", "print", "os.path.join", "len", "len", "val_patients_list.append", "train_patients_list.append", "len", "len"], "function", ["None"], ["", "def", "split_dataset", "(", "data_root", ",", "nfold", "=", "3", ",", "seed", "=", "0", ",", "select", "=", "0", ")", ":", "\n", "    ", "patients_dir", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"*GG\"", ",", "\"Brats18*\"", ")", ")", "\n", "n_patients", "=", "len", "(", "patients_dir", ")", "\n", "print", "(", "f\"total patients: {n_patients}\"", ")", "\n", "pid_idx", "=", "np", ".", "arange", "(", "n_patients", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "pid_idx", ")", "\n", "n_fold_list", "=", "np", ".", "split", "(", "pid_idx", ",", "nfold", ")", "\n", "print", "(", "\"***********no pro**********\"", ")", "\n", "print", "(", "f\"split {len(n_fold_list)} folds and every fold have {len(n_fold_list[0])} patients\"", ")", "\n", "val_patients_list", "=", "[", "]", "\n", "train_patients_list", "=", "[", "]", "\n", "\n", "for", "i", ",", "fold", "in", "enumerate", "(", "n_fold_list", ")", ":", "\n", "        ", "if", "i", "==", "select", ":", "\n", "            ", "for", "idx", "in", "fold", ":", "\n", "                ", "val_patients_list", ".", "append", "(", "patients_dir", "[", "idx", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "idx", "in", "fold", ":", "\n", "                ", "train_patients_list", ".", "append", "(", "patients_dir", "[", "idx", "]", ")", "\n", "", "", "", "print", "(", "f\"train patients: {len(train_patients_list)}, test patients: {len(val_patients_list)}\"", ")", "\n", "\n", "# print(np.sort(train_patients_list))", "\n", "\n", "return", "train_patients_list", ",", "val_patients_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yaozhang93_mmformer.data.BraTS.read_split": [[161, 175], ["open", "f.readlines", "lines[].strip().replace().replace().replace().replace().split", "lines[].strip().replace().replace().replace().replace().split", "print", "x.replace", "x.replace", "lines[].strip().replace().replace().replace().replace", "lines[].strip().replace().replace().replace().replace", "len", "len", "lines[].strip().replace().replace().replace", "lines[].strip().replace().replace().replace", "lines[].strip().replace().replace", "lines[].strip().replace().replace", "lines[].strip().replace", "lines[].strip().replace", "lines[].strip", "lines[].strip"], "function", ["None"], ["", "def", "read_split", "(", ")", ":", "\n", "    ", "with", "open", "(", "'./data/3folds.txt'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "train_patients_list", "=", "lines", "[", "0", "]", ".", "strip", "(", ")", ".", "replace", "(", "'['", ",", "''", ")", ".", "replace", "(", "']'", ",", "''", ")", ".", "replace", "(", "' '", ",", "''", ")", ".", "replace", "(", "'\\''", ",", "''", ")", ".", "split", "(", "','", ")", "\n", "val_patients_list", "=", "lines", "[", "1", "]", ".", "strip", "(", ")", ".", "replace", "(", "'['", ",", "''", ")", ".", "replace", "(", "']'", ",", "''", ")", ".", "replace", "(", "' '", ",", "''", ")", ".", "replace", "(", "'\\''", ",", "''", ")", ".", "split", "(", "','", ")", "\n", "\n", "train_patients_list", "=", "[", "x", ".", "replace", "(", "'.'", ",", "'./data'", ")", "for", "x", "in", "train_patients_list", "]", "\n", "val_patients_list", "=", "[", "x", ".", "replace", "(", "'.'", ",", "'./data'", ")", "for", "x", "in", "val_patients_list", "]", "\n", "\n", "print", "(", "f\"train patients: {len(train_patients_list)}, test patients: {len(val_patients_list)}\"", ")", "\n", "\n", "# print(np.sort(train_patients_list))", "\n", "\n", "return", "train_patients_list", ",", "val_patients_list", "\n", "\n"]]}