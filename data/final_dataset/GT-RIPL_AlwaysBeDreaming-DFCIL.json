{"home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.__init__": [[12, 135], ["numpy.arange().tolist", "numpy.arange().tolist", "len", "dataloaders.utils.get_transform", "dataloaders.utils.get_transform", "Dataset", "Dataset", "dataloaders.utils.get_transform", "trainer.Trainer.learner.print_model", "print", "print", "print", "print", "print", "trainer.Trainer.tasks.append", "trainer.Trainer.tasks_logits.append", "str", "min", "len", "numpy.arange", "numpy.arange", "numpy.random.seed", "numpy.random.shuffle", "random.seed", "random.shuffle", "range", "len", "str", "str", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.utils.get_transform", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.utils.get_transform", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.utils.get_transform", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.print_model"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "seed", ",", "metric_keys", ",", "save_keys", ")", ":", "\n", "\n", "# process inputs", "\n", "        ", "self", ".", "seed", "=", "seed", "\n", "self", ".", "metric_keys", "=", "metric_keys", "\n", "self", ".", "save_keys", "=", "save_keys", "\n", "self", ".", "log_dir", "=", "args", ".", "log_dir", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "workers", "=", "args", ".", "workers", "\n", "\n", "# for generative models, pre-process data to be 0...1; otherwise, pre-process data to be zero mean, unit variance", "\n", "if", "args", ".", "learner_type", "==", "'dgr'", ":", "\n", "            ", "self", ".", "dgr", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "dgr", "=", "False", "\n", "\n", "# model load directory", "\n", "", "if", "args", ".", "load_model_dir", "is", "not", "None", ":", "\n", "            ", "self", ".", "model_first_dir", "=", "args", ".", "load_model_dir", "\n", "", "else", ":", "\n", "            ", "self", ".", "model_first_dir", "=", "args", ".", "log_dir", "\n", "", "self", ".", "model_top_dir", "=", "args", ".", "log_dir", "\n", "\n", "# select dataset", "\n", "self", ".", "top_k", "=", "1", "\n", "if", "args", ".", "dataset", "==", "'CIFAR10'", ":", "\n", "            ", "Dataset", "=", "dataloaders", ".", "iCIFAR10", "\n", "num_classes", "=", "10", "\n", "self", ".", "dataset_size", "=", "[", "32", ",", "32", ",", "3", "]", "\n", "", "elif", "args", ".", "dataset", "==", "'CIFAR100'", ":", "\n", "            ", "Dataset", "=", "dataloaders", ".", "iCIFAR100", "\n", "num_classes", "=", "100", "\n", "self", ".", "dataset_size", "=", "[", "32", ",", "32", ",", "3", "]", "\n", "", "elif", "args", ".", "dataset", "==", "'ImageNet'", ":", "\n", "            ", "Dataset", "=", "dataloaders", ".", "iIMAGENET", "\n", "num_classes", "=", "1000", "\n", "self", ".", "dataset_size", "=", "[", "224", ",", "224", ",", "3", "]", "\n", "self", ".", "top_k", "=", "5", "\n", "", "elif", "args", ".", "dataset", "==", "'TinyImageNet'", ":", "\n", "            ", "Dataset", "=", "dataloaders", ".", "iTinyIMNET", "\n", "num_classes", "=", "200", "\n", "self", ".", "dataset_size", "=", "[", "64", ",", "64", ",", "3", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Dataset not implemented!'", ")", "\n", "\n", "# load tasks", "\n", "", "class_order", "=", "np", ".", "arange", "(", "num_classes", ")", ".", "tolist", "(", ")", "\n", "class_order_logits", "=", "np", ".", "arange", "(", "num_classes", ")", ".", "tolist", "(", ")", "\n", "if", "args", ".", "rand_split", ":", "\n", "            ", "print", "(", "'============================================='", ")", "\n", "print", "(", "'Shuffling....'", ")", "\n", "print", "(", "'pre-shuffle:'", "+", "str", "(", "class_order", ")", ")", "\n", "if", "args", ".", "dataset", "==", "'ImageNet'", ":", "\n", "                ", "np", ".", "random", ".", "seed", "(", "1993", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "class_order", ")", "\n", "", "else", ":", "\n", "                ", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "random", ".", "shuffle", "(", "class_order", ")", "\n", "", "print", "(", "'post-shuffle:'", "+", "str", "(", "class_order", ")", ")", "\n", "print", "(", "'============================================='", ")", "\n", "", "self", ".", "tasks", "=", "[", "]", "\n", "self", ".", "tasks_logits", "=", "[", "]", "\n", "p", "=", "0", "\n", "while", "p", "<", "num_classes", "and", "(", "args", ".", "max_task", "==", "-", "1", "or", "len", "(", "self", ".", "tasks", ")", "<", "args", ".", "max_task", ")", ":", "\n", "            ", "inc", "=", "args", ".", "other_split_size", "if", "p", ">", "0", "else", "args", ".", "first_split_size", "\n", "self", ".", "tasks", ".", "append", "(", "class_order", "[", "p", ":", "p", "+", "inc", "]", ")", "\n", "self", ".", "tasks_logits", ".", "append", "(", "class_order_logits", "[", "p", ":", "p", "+", "inc", "]", ")", "\n", "p", "+=", "inc", "\n", "", "self", ".", "num_tasks", "=", "len", "(", "self", ".", "tasks", ")", "\n", "self", ".", "task_names", "=", "[", "str", "(", "i", "+", "1", ")", "for", "i", "in", "range", "(", "self", ".", "num_tasks", ")", "]", "\n", "\n", "# number of tasks to perform", "\n", "if", "args", ".", "max_task", ">", "0", ":", "\n", "            ", "self", ".", "max_task", "=", "min", "(", "args", ".", "max_task", ",", "len", "(", "self", ".", "task_names", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_task", "=", "len", "(", "self", ".", "task_names", ")", "\n", "\n", "# datasets and dataloaders", "\n", "", "train_transform", "=", "dataloaders", ".", "utils", ".", "get_transform", "(", "dataset", "=", "args", ".", "dataset", ",", "phase", "=", "'train'", ",", "aug", "=", "args", ".", "train_aug", ",", "dgr", "=", "self", ".", "dgr", ")", "\n", "test_transform", "=", "dataloaders", ".", "utils", ".", "get_transform", "(", "dataset", "=", "args", ".", "dataset", ",", "phase", "=", "'test'", ",", "aug", "=", "args", ".", "train_aug", ",", "dgr", "=", "self", ".", "dgr", ")", "\n", "self", ".", "train_dataset", "=", "Dataset", "(", "args", ".", "dataroot", ",", "train", "=", "True", ",", "tasks", "=", "self", ".", "tasks", ",", "\n", "download_flag", "=", "True", ",", "transform", "=", "train_transform", ",", "\n", "seed", "=", "self", ".", "seed", ",", "validation", "=", "args", ".", "validation", ")", "\n", "self", ".", "test_dataset", "=", "Dataset", "(", "args", ".", "dataroot", ",", "train", "=", "False", ",", "tasks", "=", "self", ".", "tasks", ",", "\n", "download_flag", "=", "False", ",", "transform", "=", "test_transform", ",", "\n", "seed", "=", "self", ".", "seed", ",", "validation", "=", "args", ".", "validation", ")", "\n", "\n", "# save this for E2E baseline", "\n", "self", ".", "train_dataset", ".", "simple_transform", "=", "dataloaders", ".", "utils", ".", "get_transform", "(", "dataset", "=", "args", ".", "dataset", ",", "phase", "=", "'test'", ",", "aug", "=", "args", ".", "train_aug", ",", "dgr", "=", "self", ".", "dgr", ")", "\n", "\n", "# for oracle", "\n", "self", ".", "oracle_flag", "=", "args", ".", "oracle_flag", "\n", "self", ".", "add_dim", "=", "0", "\n", "\n", "# Prepare the self.learner (model)", "\n", "self", ".", "learner_config", "=", "{", "'num_classes'", ":", "num_classes", ",", "\n", "'lr'", ":", "args", ".", "lr", ",", "\n", "'momentum'", ":", "args", ".", "momentum", ",", "\n", "'weight_decay'", ":", "args", ".", "weight_decay", ",", "\n", "'schedule'", ":", "args", ".", "schedule", ",", "\n", "'schedule_type'", ":", "args", ".", "schedule_type", ",", "\n", "'model_type'", ":", "args", ".", "model_type", ",", "\n", "'model_name'", ":", "args", ".", "model_name", ",", "\n", "'gen_model_type'", ":", "args", ".", "gen_model_type", ",", "\n", "'gen_model_name'", ":", "args", ".", "gen_model_name", ",", "\n", "'optimizer'", ":", "args", ".", "optimizer", ",", "\n", "'gpuid'", ":", "args", ".", "gpuid", ",", "\n", "'memory'", ":", "args", ".", "memory", ",", "\n", "'temp'", ":", "args", ".", "temp", ",", "\n", "'out_dim'", ":", "num_classes", ",", "\n", "'overwrite'", ":", "args", ".", "overwrite", "==", "1", ",", "\n", "'beta'", ":", "args", ".", "beta", ",", "\n", "'mu'", ":", "args", ".", "mu", ",", "\n", "'DW'", ":", "args", ".", "DW", ",", "\n", "'batch_size'", ":", "args", ".", "batch_size", ",", "\n", "'power_iters'", ":", "args", ".", "power_iters", ",", "\n", "'deep_inv_params'", ":", "args", ".", "deep_inv_params", ",", "\n", "'tasks'", ":", "self", ".", "tasks_logits", ",", "\n", "'top_k'", ":", "self", ".", "top_k", ",", "\n", "}", "\n", "self", ".", "learner_type", ",", "self", ".", "learner_name", "=", "args", ".", "learner_type", ",", "args", ".", "learner_name", "\n", "self", ".", "learner", "=", "learners", ".", "__dict__", "[", "self", ".", "learner_type", "]", ".", "__dict__", "[", "self", ".", "learner_name", "]", "(", "self", ".", "learner_config", ")", "\n", "self", ".", "learner", ".", "print_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.task_eval": [[136, 148], ["print", "trainer.Trainer.test_dataset.load_dataset", "torch.utils.data.DataLoader", "trainer.Trainer.learner.validation", "trainer.Trainer.learner.validation"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.load_dataset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation"], ["", "def", "task_eval", "(", "self", ",", "t_index", ",", "local", "=", "False", ")", ":", "\n", "\n", "        ", "val_name", "=", "self", ".", "task_names", "[", "t_index", "]", "\n", "print", "(", "'validation split name:'", ",", "val_name", ")", "\n", "\n", "# eval", "\n", "self", ".", "test_dataset", ".", "load_dataset", "(", "t_index", ",", "train", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "self", ".", "test_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "num_workers", "=", "self", ".", "workers", ")", "\n", "if", "local", ":", "\n", "            ", "return", "self", ".", "learner", ".", "validation", "(", "test_loader", ",", "task_in", "=", "self", ".", "tasks_logits", "[", "t_index", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "learner", ".", "validation", "(", "test_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train": [[149, 223], ["range", "os.path.exists", "os.makedirs", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "print", "trainer.Trainer.learner.add_valid_output_dim", "trainer.Trainer.train_dataset.append_coreset", "torch.utils.data.DataLoader", "trainer.Trainer.test_dataset.load_dataset", "torch.utils.data.DataLoader", "trainer.Trainer.learner.learn_batch", "trainer.Trainer.learner.save_model", "range", "temp_table[].append", "trainer.Trainer.learner.count_memory", "trainer.Trainer.train_dataset.load_dataset", "len", "trainer.Trainer.train_dataset.load_dataset", "len", "os.path.exists", "os.makedirs", "acc_table.append", "numpy.mean", "numpy.savetxt", "int", "trainer.Trainer.task_eval", "numpy.asarray", "numpy.asarray", "str", "str"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.add_valid_output_dim", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.append_coreset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.load_dataset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.learn_batch", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.save_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.count_memory", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.load_dataset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.load_dataset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.task_eval"], ["", "", "def", "train", "(", "self", ",", "avg_metrics", ")", ":", "\n", "\n", "# temporary results saving", "\n", "        ", "temp_table", "=", "{", "}", "\n", "for", "mkey", "in", "self", ".", "metric_keys", ":", "temp_table", "[", "mkey", "]", "=", "[", "]", "\n", "temp_dir", "=", "self", ".", "log_dir", "+", "'/temp/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "temp_dir", ")", ":", "os", ".", "makedirs", "(", "temp_dir", ")", "\n", "\n", "# for each task", "\n", "for", "i", "in", "range", "(", "self", ".", "max_task", ")", ":", "\n", "\n", "# save current task index", "\n", "            ", "self", ".", "current_t_index", "=", "i", "\n", "\n", "# set seeds", "\n", "random", ".", "seed", "(", "self", ".", "seed", "*", "100", "+", "i", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", "*", "100", "+", "i", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "seed", "*", "100", "+", "i", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "self", ".", "seed", "*", "100", "+", "i", ")", "\n", "\n", "# print name", "\n", "train_name", "=", "self", ".", "task_names", "[", "i", "]", "\n", "print", "(", "'======================'", ",", "train_name", ",", "'======================='", ")", "\n", "\n", "# load dataset for task", "\n", "task", "=", "self", ".", "tasks_logits", "[", "i", "]", "\n", "if", "self", ".", "oracle_flag", ":", "\n", "                ", "self", ".", "train_dataset", ".", "load_dataset", "(", "i", ",", "train", "=", "False", ")", "\n", "self", ".", "learner", "=", "learners", ".", "__dict__", "[", "self", ".", "learner_type", "]", ".", "__dict__", "[", "self", ".", "learner_name", "]", "(", "self", ".", "learner_config", ")", "\n", "self", ".", "add_dim", "+=", "len", "(", "task", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "train_dataset", ".", "load_dataset", "(", "i", ",", "train", "=", "True", ")", "\n", "self", ".", "add_dim", "=", "len", "(", "task", ")", "\n", "\n", "# tell learner number of tasks we are doing", "\n", "", "self", ".", "learner", ".", "max_task", "=", "self", ".", "max_task", "\n", "\n", "# add valid class to classifier", "\n", "self", ".", "learner", ".", "add_valid_output_dim", "(", "self", ".", "add_dim", ")", "\n", "\n", "# load dataset with memory", "\n", "self", ".", "train_dataset", ".", "append_coreset", "(", "only", "=", "False", ")", "\n", "\n", "# load dataloader", "\n", "train_loader", "=", "DataLoader", "(", "self", ".", "train_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "num_workers", "=", "int", "(", "self", ".", "workers", ")", ")", "\n", "\n", "# learn", "\n", "self", ".", "test_dataset", ".", "load_dataset", "(", "i", ",", "train", "=", "False", ")", "\n", "test_loader", "=", "DataLoader", "(", "self", ".", "test_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "num_workers", "=", "self", ".", "workers", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "model_save_dir", "=", "self", ".", "model_first_dir", "+", "'/models/repeat-'", "+", "str", "(", "self", ".", "seed", "+", "1", ")", "+", "'/task-'", "+", "self", ".", "task_names", "[", "i", "]", "+", "'/'", "\n", "", "else", ":", "\n", "                ", "model_save_dir", "=", "self", ".", "model_top_dir", "+", "'/models/repeat-'", "+", "str", "(", "self", ".", "seed", "+", "1", ")", "+", "'/task-'", "+", "self", ".", "task_names", "[", "i", "]", "+", "'/'", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "model_save_dir", ")", ":", "os", ".", "makedirs", "(", "model_save_dir", ")", "\n", "avg_train_time", "=", "self", ".", "learner", ".", "learn_batch", "(", "train_loader", ",", "self", ".", "train_dataset", ",", "model_save_dir", ",", "test_loader", ")", "\n", "\n", "# save model", "\n", "self", ".", "learner", ".", "save_model", "(", "model_save_dir", ")", "\n", "\n", "# evaluate acc", "\n", "acc_table", "=", "[", "]", "\n", "self", ".", "reset_cluster_labels", "=", "True", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ")", ":", "\n", "                ", "acc_table", ".", "append", "(", "self", ".", "task_eval", "(", "j", ")", ")", "\n", "", "temp_table", "[", "'acc'", "]", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "asarray", "(", "acc_table", ")", ")", ")", "\n", "\n", "# save temporary results", "\n", "for", "mkey", "in", "self", ".", "metric_keys", ":", "\n", "                ", "save_file", "=", "temp_dir", "+", "mkey", "+", "'.csv'", "\n", "np", ".", "savetxt", "(", "save_file", ",", "np", ".", "asarray", "(", "temp_table", "[", "mkey", "]", ")", ",", "delimiter", "=", "\",\"", ",", "fmt", "=", "'%.2f'", ")", "\n", "", "if", "avg_train_time", "is", "not", "None", ":", "avg_metrics", "[", "'time'", "]", "[", "'global'", "]", "[", "i", "]", "=", "avg_train_time", "\n", "avg_metrics", "[", "'mem'", "]", "[", "'global'", "]", "[", ":", "]", "=", "self", ".", "learner", ".", "count_memory", "(", "self", ".", "dataset_size", ")", "\n", "\n", "", "return", "avg_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.summarize_acc": [[224, 249], ["range", "range"], "methods", ["None"], ["", "def", "summarize_acc", "(", "self", ",", "acc_dict", ",", "acc_table", ",", "acc_table_pt", ")", ":", "\n", "\n", "# unpack dictionary", "\n", "        ", "avg_acc_all", "=", "acc_dict", "[", "'global'", "]", "\n", "avg_acc_pt", "=", "acc_dict", "[", "'pt'", "]", "\n", "avg_acc_pt_local", "=", "acc_dict", "[", "'pt-local'", "]", "\n", "\n", "# Calculate average performance across self.tasks", "\n", "# Customize this part for a different performance metric", "\n", "avg_acc_history", "=", "[", "0", "]", "*", "self", ".", "max_task", "\n", "for", "i", "in", "range", "(", "self", ".", "max_task", ")", ":", "\n", "            ", "train_name", "=", "self", ".", "task_names", "[", "i", "]", "\n", "cls_acc_sum", "=", "0", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ")", ":", "\n", "                ", "val_name", "=", "self", ".", "task_names", "[", "j", "]", "\n", "cls_acc_sum", "+=", "acc_table", "[", "val_name", "]", "[", "train_name", "]", "\n", "avg_acc_pt", "[", "j", ",", "i", ",", "self", ".", "seed", "]", "=", "acc_table", "[", "val_name", "]", "[", "train_name", "]", "\n", "avg_acc_pt_local", "[", "j", ",", "i", ",", "self", ".", "seed", "]", "=", "acc_table_pt", "[", "val_name", "]", "[", "train_name", "]", "\n", "", "avg_acc_history", "[", "i", "]", "=", "cls_acc_sum", "/", "(", "i", "+", "1", ")", "\n", "\n", "# Gather the final avg accuracy", "\n", "", "avg_acc_all", "[", ":", ",", "self", ".", "seed", "]", "=", "avg_acc_history", "\n", "\n", "# repack dictionary and return", "\n", "return", "{", "'global'", ":", "avg_acc_all", ",", "'pt'", ":", "avg_acc_pt", ",", "'pt-local'", ":", "avg_acc_pt_local", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.evaluate": [[250, 288], ["range", "trainer.Trainer.summarize_acc", "trainer.Trainer.learner.add_valid_output_dim", "trainer.Trainer.learner.pre_steps", "trainer.Trainer.learner.load_model", "collections.OrderedDict", "collections.OrderedDict", "range", "range", "len", "trainer.Trainer.task_eval", "trainer.Trainer.task_eval", "str", "str"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.summarize_acc", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.add_valid_output_dim", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.pre_steps", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.load_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.task_eval", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.task_eval"], ["", "def", "evaluate", "(", "self", ",", "avg_metrics", ")", ":", "\n", "\n", "        ", "self", ".", "learner", "=", "learners", ".", "__dict__", "[", "self", ".", "learner_type", "]", ".", "__dict__", "[", "self", ".", "learner_name", "]", "(", "self", ".", "learner_config", ")", "\n", "\n", "# store results", "\n", "metric_table", "=", "{", "}", "\n", "metric_table_local", "=", "{", "}", "\n", "for", "mkey", "in", "self", ".", "metric_keys", ":", "\n", "            ", "metric_table", "[", "mkey", "]", "=", "{", "}", "\n", "metric_table_local", "[", "mkey", "]", "=", "{", "}", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "max_task", ")", ":", "\n", "\n", "# load model", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "model_save_dir", "=", "self", ".", "model_first_dir", "+", "'/models/repeat-'", "+", "str", "(", "self", ".", "seed", "+", "1", ")", "+", "'/task-'", "+", "self", ".", "task_names", "[", "i", "]", "+", "'/'", "\n", "", "else", ":", "\n", "                ", "model_save_dir", "=", "self", ".", "model_top_dir", "+", "'/models/repeat-'", "+", "str", "(", "self", ".", "seed", "+", "1", ")", "+", "'/task-'", "+", "self", ".", "task_names", "[", "i", "]", "+", "'/'", "\n", "", "self", ".", "learner", ".", "task_count", "=", "i", "\n", "self", ".", "learner", ".", "add_valid_output_dim", "(", "len", "(", "self", ".", "tasks_logits", "[", "i", "]", ")", ")", "\n", "self", ".", "learner", ".", "pre_steps", "(", ")", "\n", "self", ".", "learner", ".", "load_model", "(", "model_save_dir", ")", "\n", "\n", "# evaluate acc", "\n", "metric_table", "[", "'acc'", "]", "[", "self", ".", "task_names", "[", "i", "]", "]", "=", "OrderedDict", "(", ")", "\n", "metric_table_local", "[", "'acc'", "]", "[", "self", ".", "task_names", "[", "i", "]", "]", "=", "OrderedDict", "(", ")", "\n", "self", ".", "reset_cluster_labels", "=", "True", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ")", ":", "\n", "                ", "val_name", "=", "self", ".", "task_names", "[", "j", "]", "\n", "metric_table", "[", "'acc'", "]", "[", "val_name", "]", "[", "self", ".", "task_names", "[", "i", "]", "]", "=", "self", ".", "task_eval", "(", "j", ")", "\n", "", "for", "j", "in", "range", "(", "i", "+", "1", ")", ":", "\n", "                ", "val_name", "=", "self", ".", "task_names", "[", "j", "]", "\n", "metric_table_local", "[", "'acc'", "]", "[", "val_name", "]", "[", "self", ".", "task_names", "[", "i", "]", "]", "=", "self", ".", "task_eval", "(", "j", ",", "local", "=", "True", ")", "\n", "\n", "# summarize metrics", "\n", "", "", "avg_metrics", "[", "'acc'", "]", "=", "self", ".", "summarize_acc", "(", "avg_metrics", "[", "'acc'", "]", ",", "metric_table", "[", "'acc'", "]", ",", "metric_table_local", "[", "'acc'", "]", ")", "\n", "\n", "return", "avg_metrics", "", "", "", ""]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.run_dfcil.Logger.__init__": [[78, 81], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "terminal", "=", "sys", ".", "stdout", "\n", "self", ".", "log", "=", "open", "(", "name", ",", "\"a\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.run_dfcil.Logger.write": [[82, 85], ["run_dfcil.Logger.terminal.write", "run_dfcil.Logger.log.write"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.run_dfcil.Logger.write", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.run_dfcil.Logger.write"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "terminal", ".", "write", "(", "message", ")", "\n", "self", ".", "log", ".", "write", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.run_dfcil.Logger.flush": [[86, 88], ["run_dfcil.Logger.log.flush"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.run_dfcil.Logger.flush"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "log", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.run_dfcil.create_args": [[14, 70], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "create_args", "(", ")", ":", "\n", "\n", "# This function prepares the variables shared across demo.py", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# standard Args", "\n", "parser", ".", "add_argument", "(", "'--gpuid'", ",", "nargs", "=", "\"+\"", ",", "type", "=", "int", ",", "default", "=", "[", "0", "]", ",", "\n", "help", "=", "\"The list of gpuid, ex:--gpuid 3 1. Negative value means cpu-only\"", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "type", "=", "str", ",", "default", "=", "\"outputs/out\"", ",", "\n", "help", "=", "\"Save experiments results in dir for future plotting!\"", ")", "\n", "parser", ".", "add_argument", "(", "'--model_type'", ",", "type", "=", "str", ",", "default", "=", "'mlp'", ",", "help", "=", "\"The type (mlp|lenet|vgg|resnet) of backbone network\"", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "type", "=", "str", ",", "default", "=", "'MLP'", ",", "help", "=", "\"The name of actual model for the backbone\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gen_model_type'", ",", "type", "=", "str", ",", "default", "=", "'mlp'", ",", "help", "=", "\"The type (mlp|lenet|vgg|resnet) of generator network\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gen_model_name'", ",", "type", "=", "str", ",", "default", "=", "'MLP'", ",", "help", "=", "\"The name of actual model for the generator\"", ")", "\n", "parser", ".", "add_argument", "(", "'--learner_type'", ",", "type", "=", "str", ",", "default", "=", "'default'", ",", "help", "=", "\"The type (filename) of learner\"", ")", "\n", "parser", ".", "add_argument", "(", "'--learner_name'", ",", "type", "=", "str", ",", "default", "=", "'NormalNN'", ",", "help", "=", "\"The class name of learner\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "type", "=", "str", ",", "default", "=", "'data'", ",", "help", "=", "\"The root folder of dataset or downloaded data\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'MNIST'", ",", "help", "=", "\"CIFAR10|MNIST\"", ")", "\n", "parser", ".", "add_argument", "(", "'--load_model_dir'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"try loading from external model directory\"", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "\"#Thread for dataloader\"", ")", "\n", "parser", ".", "add_argument", "(", "'--validation'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "help", "=", "'Evaluate on fold of training dataset rather than testing data'", ")", "\n", "parser", ".", "add_argument", "(", "'--repeat'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Repeat the experiment N times\"", ")", "\n", "parser", ".", "add_argument", "(", "'--overwrite'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "metavar", "=", "'N'", ",", "help", "=", "'Train regardless of whether saved model exists'", ")", "\n", "\n", "# training args", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'SGD'", ",", "help", "=", "\"SGD|Adam|RMSprop|amsgrad|Adadelta|Adagrad|Adamax ...\"", ")", "\n", "parser", ".", "add_argument", "(", "'--train_aug'", ",", "dest", "=", "'train_aug'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Allow data augmentation during training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "\"Learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--schedule'", ",", "nargs", "=", "\"+\"", ",", "type", "=", "int", ",", "default", "=", "[", "2", "]", ",", "\n", "help", "=", "\"The list of epoch numbers to reduce learning rate by factor of 0.1. Last number is the end epoch\"", ")", "\n", "parser", ".", "add_argument", "(", "'--schedule_type'", ",", "type", "=", "str", ",", "default", "=", "'decay'", ",", "\n", "help", "=", "\"decay\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "\n", "# data free knoweldge distilation", "\n", "parser", ".", "add_argument", "(", "'--power_iters'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"backprop power iterations for producing images\"", ")", "\n", "parser", ".", "add_argument", "(", "'--deep_inv_params'", ",", "nargs", "=", "\"+\"", ",", "type", "=", "float", ",", "default", "=", "[", "-", "1", "]", ",", "\n", "help", "=", "\"learning rate, BN loss weight, variance prior weight, CE loss temp, CE loss weight\"", ")", "\n", "\n", "# CL Args", "\n", "parser", ".", "add_argument", "(", "'--first_split_size'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--other_split_size'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--rand_split'", ",", "dest", "=", "'rand_split'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Randomize the classes in splits\"", ")", "\n", "parser", ".", "add_argument", "(", "'--DW'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "help", "=", "'dataset balancing'", ")", "\n", "parser", ".", "add_argument", "(", "'--oracle_flag'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "help", "=", "'Upper bound for oracle'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_task'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"number tasks to perform; if -1, then all tasks; for debug\"", ")", "\n", "parser", ".", "add_argument", "(", "'--memory'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"size of memory for replay\"", ")", "\n", "parser", ".", "add_argument", "(", "'--temp'", ",", "type", "=", "float", ",", "default", "=", "2.", ",", "dest", "=", "'temp'", ",", "help", "=", "\"temperature for distillation\"", ")", "\n", "parser", ".", "add_argument", "(", "'--mu'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"KD loss balancing weight\"", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "\"FT loss balancing weight\"", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.run_dfcil.get_args": [[71, 75], ["run_dfcil.create_args", "create_args.parse_args"], "function", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.run_dfcil.create_args"], ["", "def", "get_args", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "create_args", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.__init__": [[37, 39], ["metric.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.reset": [[40, 45], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update": [[46, 52], ["float"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "n", ">", "0", ":", "\n", "            ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "float", "(", "self", ".", "sum", ")", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update_count": [[53, 56], ["float"], "methods", ["None"], ["", "", "def", "update_count", "(", "self", ",", "multiplier", ")", ":", "\n", "        ", "self", ".", "count", "=", "self", ".", "count", "*", "multiplier", "\n", "self", ".", "avg", "=", "float", "(", "self", ".", "sum", ")", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.__init__": [[62, 64], ["metric.Timer.reset"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.reset": [[65, 68], ["time.time"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "interval", "=", "0", "\n", "self", ".", "time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.value": [[69, 71], ["time.time"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "time", ".", "time", "(", ")", "-", "self", ".", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic": [[72, 74], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ")", ":", "\n", "        ", "self", ".", "time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.toc": [[75, 79], ["time.time", "time.time"], "methods", ["None"], ["", "def", "toc", "(", "self", ")", ":", "\n", "        ", "self", ".", "interval", "=", "time", ".", "time", "(", ")", "-", "self", ".", "time", "\n", "self", ".", "time", "=", "time", ".", "time", "(", ")", "\n", "return", "self", ".", "interval", "", "", "", ""]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.accuracy": [[14, 33], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum().item", "res.append", "len", "target.view", "correct[].view().float().sum", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "res", ".", "append", "(", "correct_k", "*", "100.0", "/", "batch_size", ")", "\n", "\n", "", "if", "len", "(", "res", ")", "==", "1", ":", "\n", "            ", "return", "res", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.__init__": [[21, 70], ["torch.Module.__init__", "default.NormalNN.create_model", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "default.NormalNN.init_optimizer", "default.NormalNN.cuda"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.create_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.init_optimizer", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["def", "__init__", "(", "self", ",", "learner_config", ")", ":", "\n", "\n", "        ", "super", "(", "NormalNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "log", "=", "print", "\n", "self", ".", "config", "=", "learner_config", "\n", "self", ".", "out_dim", "=", "learner_config", "[", "'out_dim'", "]", "\n", "self", ".", "model", "=", "self", ".", "create_model", "(", ")", "\n", "self", ".", "reset_optimizer", "=", "True", "\n", "self", ".", "overwrite", "=", "learner_config", "[", "'overwrite'", "]", "\n", "self", ".", "batch_size", "=", "learner_config", "[", "'batch_size'", "]", "\n", "self", ".", "previous_teacher", "=", "None", "\n", "self", ".", "tasks", "=", "learner_config", "[", "'tasks'", "]", "\n", "self", ".", "top_k", "=", "learner_config", "[", "'top_k'", "]", "\n", "\n", "# replay memory parameters", "\n", "self", ".", "memory_size", "=", "self", ".", "config", "[", "'memory'", "]", "\n", "self", ".", "task_count", "=", "0", "\n", "\n", "# class balancing", "\n", "self", ".", "dw", "=", "self", ".", "config", "[", "'DW'", "]", "\n", "if", "self", ".", "memory_size", "<=", "0", ":", "\n", "            ", "self", ".", "dw", "=", "False", "\n", "\n", "# distillation", "\n", "", "self", ".", "DTemp", "=", "learner_config", "[", "'temp'", "]", "\n", "self", ".", "mu", "=", "learner_config", "[", "'mu'", "]", "\n", "\n", "# supervised criterion", "\n", "self", ".", "criterion_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"none\"", ")", "\n", "\n", "# cuda gpu", "\n", "if", "learner_config", "[", "'gpuid'", "]", "[", "0", "]", ">=", "0", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "self", ".", "gpu", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "gpu", "=", "False", "\n", "\n", "# highest class index from past task", "\n", "", "self", ".", "last_valid_out_dim", "=", "0", "\n", "\n", "# highest class index from current task", "\n", "self", ".", "valid_out_dim", "=", "0", "\n", "\n", "# set up schedules", "\n", "self", ".", "schedule_type", "=", "self", ".", "config", "[", "'schedule_type'", "]", "\n", "self", ".", "schedule", "=", "self", ".", "config", "[", "'schedule'", "]", "\n", "\n", "# initialize optimizer", "\n", "self", ".", "init_optimizer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.learn_batch": [[75, 168], ["default.NormalNN.model.eval", "default.Teacher", "copy.deepcopy", "default.NormalNN.data_weighting", "default.NormalNN.log", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.Timer", "range", "train_dataset.update_coreset", "default.NormalNN.load_model", "default.NormalNN.log", "default.NormalNN.init_optimizer", "default.NormalNN.validation", "utils.metric.Timer.tic", "enumerate", "default.NormalNN.log", "default.NormalNN.log", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "numpy.arange", "default.NormalNN.scheduler.step", "default.NormalNN.log", "default.NormalNN.model.train", "default.NormalNN.update_model", "utils.metric.AverageMeter.update", "utils.metric.Timer.tic", "y.cuda.cuda.detach", "default.accumulate_acc", "utils.metric.AverageMeter.update", "utils.metric.Timer.tic", "default.NormalNN.validation", "x.cuda.cuda.cuda", "y.cuda.cuda.cuda", "utils.metric.Timer.toc", "y.cuda.cuda.size"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.data_weighting", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.update_coreset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.load_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.init_optimizer", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.AlwaysBeDreaming.update_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.accumulate_acc", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.toc"], ["", "def", "learn_batch", "(", "self", ",", "train_loader", ",", "train_dataset", ",", "model_save_dir", ",", "val_loader", "=", "None", ")", ":", "\n", "\n", "# try to load model", "\n", "        ", "need_train", "=", "True", "\n", "if", "not", "self", ".", "overwrite", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "load_model", "(", "model_save_dir", ")", "\n", "need_train", "=", "False", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "# trains", "\n", "", "", "if", "need_train", ":", "\n", "            ", "if", "self", ".", "reset_optimizer", ":", "# Reset optimizer before learning each task", "\n", "                ", "self", ".", "log", "(", "'Optimizer is reset!'", ")", "\n", "self", ".", "init_optimizer", "(", ")", "\n", "\n", "# data weighting", "\n", "", "self", ".", "data_weighting", "(", "train_dataset", ")", "\n", "\n", "# Evaluate the performance of current task", "\n", "self", ".", "log", "(", "'Epoch:{epoch:.0f}/{total:.0f}'", ".", "format", "(", "epoch", "=", "0", ",", "total", "=", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ")", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                ", "self", ".", "validation", "(", "val_loader", ")", "\n", "\n", "", "losses", "=", "AverageMeter", "(", ")", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "batch_timer", "=", "Timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ":", "\n", "                ", "self", ".", "epoch", "=", "epoch", "\n", "\n", "if", "epoch", ">", "0", ":", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                    ", "self", ".", "log", "(", "'LR:'", ",", "param_group", "[", "'lr'", "]", ")", "\n", "", "batch_timer", ".", "tic", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ",", "task", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "# verify in train mode", "\n", "                    ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "# send data to gpu", "\n", "if", "self", ".", "gpu", ":", "\n", "                        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "y", "=", "y", ".", "cuda", "(", ")", "\n", "\n", "# model update", "\n", "", "loss", ",", "output", "=", "self", ".", "update_model", "(", "x", ",", "y", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "batch_timer", ".", "toc", "(", ")", ")", "\n", "batch_timer", ".", "tic", "(", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "y", "=", "y", ".", "detach", "(", ")", "\n", "accumulate_acc", "(", "output", ",", "y", ",", "task", ",", "acc", ",", "topk", "=", "(", "self", ".", "top_k", ",", ")", ")", "\n", "losses", ".", "update", "(", "loss", ",", "y", ".", "size", "(", "0", ")", ")", "\n", "batch_timer", ".", "tic", "(", ")", "\n", "\n", "# eval update", "\n", "", "self", ".", "log", "(", "'Epoch:{epoch:.0f}/{total:.0f}'", ".", "format", "(", "epoch", "=", "self", ".", "epoch", "+", "1", ",", "total", "=", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "log", "(", "' * Loss {loss.avg:.3f} | Train Acc {acc.avg:.3f}'", ".", "format", "(", "loss", "=", "losses", ",", "acc", "=", "acc", ")", ")", "\n", "\n", "# Evaluate the performance of current task", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                    ", "self", ".", "validation", "(", "val_loader", ")", "\n", "\n", "# reset", "\n", "", "losses", "=", "AverageMeter", "(", ")", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "\n", "", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "last_valid_out_dim", "=", "self", ".", "valid_out_dim", "\n", "self", ".", "first_task", "=", "False", "\n", "\n", "# Extend memory", "\n", "self", ".", "task_count", "+=", "1", "\n", "if", "self", ".", "memory_size", ">", "0", ":", "\n", "            ", "train_dataset", ".", "update_coreset", "(", "self", ".", "memory_size", ",", "np", ".", "arange", "(", "self", ".", "last_valid_out_dim", ")", ")", "\n", "\n", "# for eval", "\n", "", "if", "self", ".", "previous_teacher", "is", "not", "None", ":", "\n", "            ", "self", ".", "previous_previous_teacher", "=", "self", ".", "previous_teacher", "\n", "\n", "# new teacher", "\n", "", "teacher", "=", "Teacher", "(", "solver", "=", "self", ".", "model", ")", "\n", "self", ".", "previous_teacher", "=", "copy", ".", "deepcopy", "(", "teacher", ")", "\n", "\n", "try", ":", "\n", "            ", "return", "batch_time", ".", "avg", "\n", "", "except", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.criterion": [[169, 172], ["default.NormalNN.criterion_fn", "targets.long"], "methods", ["None"], ["", "", "def", "criterion", "(", "self", ",", "logits", ",", "targets", ",", "data_weights", ")", ":", "\n", "        ", "loss_supervised", "=", "(", "self", ".", "criterion_fn", "(", "logits", ",", "targets", ".", "long", "(", ")", ")", "*", "data_weights", ")", ".", "mean", "(", ")", "\n", "return", "loss_supervised", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.update_model": [[173, 193], ["default.NormalNN.forward", "default.NormalNN.criterion", "default.NormalNN.optimizer.zero_grad", "default.NormalNN.backward", "default.NormalNN.optimizer.step", "targets.long", "default.NormalNN.detach", "numpy.arange", "default.loss_fn_kd", "len", "numpy.arange().tolist", "targets.long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "numpy.arange", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "targets.size"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.criterion", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.loss_fn_kd"], ["", "def", "update_model", "(", "self", ",", "inputs", ",", "targets", ",", "target_scores", "=", "None", ",", "dw_force", "=", "None", ",", "kd_index", "=", "None", ")", ":", "\n", "\n", "        ", "if", "dw_force", "is", "not", "None", ":", "\n", "            ", "dw_cls", "=", "dw_force", "\n", "", "elif", "self", ".", "dw", ":", "\n", "            ", "dw_cls", "=", "self", ".", "dw_k", "[", "targets", ".", "long", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "dw_cls", "=", "self", ".", "dw_k", "[", "-", "1", "*", "torch", ".", "ones", "(", "targets", ".", "size", "(", ")", ")", ".", "long", "(", ")", "]", "\n", "", "logits", "=", "self", ".", "forward", "(", "inputs", ")", "\n", "total_loss", "=", "self", ".", "criterion", "(", "logits", ",", "targets", ".", "long", "(", ")", ",", "dw_cls", ")", "\n", "\n", "# KD", "\n", "if", "target_scores", "is", "not", "None", ":", "\n", "            ", "if", "kd_index", "is", "None", ":", "kd_index", "=", "np", ".", "arange", "(", "len", "(", "logits", ")", ")", "\n", "total_loss", "+=", "self", ".", "mu", "*", "loss_fn_kd", "(", "logits", "[", "kd_index", "]", ",", "target_scores", "[", "kd_index", "]", ",", "dw_cls", "[", "kd_index", "]", ",", "np", ".", "arange", "(", "self", ".", "last_valid_out_dim", ")", ".", "tolist", "(", ")", ",", "self", ".", "DTemp", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "total_loss", ".", "detach", "(", ")", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation": [[194, 234], ["utils.metric.Timer", "utils.metric.AverageMeter", "utils.metric.Timer.tic", "model.eval", "enumerate", "model.train", "default.NormalNN.log", "default.accumulate_acc", "mask.nonzero().view", "mask.nonzero().view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "input.cuda.cuda.cuda", "target.cuda.cuda.cuda", "model.forward", "len", "default.accumulate_acc", "mask.nonzero", "mask.nonzero", "model.forward", "utils.metric.Timer.toc"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.accumulate_acc", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.accumulate_acc", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.toc"], ["", "def", "validation", "(", "self", ",", "dataloader", ",", "model", "=", "None", ",", "task_in", "=", "None", ",", "verbal", "=", "True", ")", ":", "\n", "\n", "        ", "if", "model", "is", "None", ":", "\n", "            ", "model", "=", "self", ".", "model", "\n", "\n", "# This function doesn't distinguish tasks.", "\n", "", "batch_timer", "=", "Timer", "(", ")", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "batch_timer", ".", "tic", "(", ")", "\n", "\n", "orig_mode", "=", "model", ".", "training", "\n", "model", ".", "eval", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ",", "task", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\n", "            ", "if", "self", ".", "gpu", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "", "", "if", "task_in", "is", "None", ":", "\n", "                ", "output", "=", "model", ".", "forward", "(", "input", ")", "[", ":", ",", ":", "self", ".", "valid_out_dim", "]", "\n", "acc", "=", "accumulate_acc", "(", "output", ",", "target", ",", "task", ",", "acc", ",", "topk", "=", "(", "self", ".", "top_k", ",", ")", ")", "\n", "", "else", ":", "\n", "                ", "mask", "=", "target", ">=", "task_in", "[", "0", "]", "\n", "mask_ind", "=", "mask", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "input", ",", "target", "=", "input", "[", "mask_ind", "]", ",", "target", "[", "mask_ind", "]", "\n", "\n", "mask", "=", "target", "<", "task_in", "[", "-", "1", "]", "\n", "mask_ind", "=", "mask", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "input", ",", "target", "=", "input", "[", "mask_ind", "]", ",", "target", "[", "mask_ind", "]", "\n", "\n", "if", "len", "(", "target", ")", ">", "1", ":", "\n", "                    ", "output", "=", "model", ".", "forward", "(", "input", ")", "[", ":", ",", "task_in", "]", "\n", "acc", "=", "accumulate_acc", "(", "output", ",", "target", "-", "task_in", "[", "0", "]", ",", "task", ",", "acc", ",", "topk", "=", "(", "self", ".", "top_k", ",", ")", ")", "\n", "\n", "", "", "", "model", ".", "train", "(", "orig_mode", ")", "\n", "\n", "if", "verbal", ":", "\n", "            ", "self", ".", "log", "(", "' * Val Acc {acc.avg:.3f}, Total time {time:.2f}'", "\n", ".", "format", "(", "acc", "=", "acc", ",", "time", "=", "batch_timer", ".", "toc", "(", ")", ")", ")", "\n", "", "return", "acc", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.data_weighting": [[241, 273], ["default.NormalNN.log", "default.NormalNN.log", "numpy.ones", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.ones", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.asarray", "numpy.asarray", "numpy.asarray.sum", "default.NormalNN.dw_k.cuda", "numpy.ones", "default.NormalNN.dw_k.cuda", "int", "str", "len", "range", "len", "len", "range"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["", "def", "data_weighting", "(", "self", ",", "dataset", ",", "num_seen", "=", "None", ")", ":", "\n", "\n", "        ", "if", "dataset", ".", "dw", ":", "\n", "# count number of examples in dataset per class", "\n", "            ", "self", ".", "log", "(", "'*************************\\n\\n\\n'", ")", "\n", "if", "num_seen", "is", "None", ":", "\n", "                ", "labels", "=", "[", "int", "(", "dataset", "[", "i", "]", "[", "1", "]", ")", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "labels", "=", "np", ".", "asarray", "(", "labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "num_seen", "=", "np", ".", "asarray", "(", "[", "len", "(", "labels", "[", "labels", "==", "k", "]", ")", "for", "k", "in", "range", "(", "self", ".", "valid_out_dim", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "self", ".", "log", "(", "'num seen:'", "+", "str", "(", "num_seen", ")", ")", "\n", "\n", "# in case a zero exists in PL...", "\n", "num_seen", "+=", "1", "\n", "\n", "# all seen", "\n", "seen", "=", "np", ".", "ones", "(", "self", ".", "valid_out_dim", "+", "1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "seen", "=", "torch", ".", "tensor", "(", "seen", ")", "\n", "seen_dw", "=", "np", ".", "ones", "(", "self", ".", "valid_out_dim", "+", "1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "seen_dw", "[", ":", "self", ".", "valid_out_dim", "]", "=", "num_seen", ".", "sum", "(", ")", "/", "(", "num_seen", "*", "len", "(", "num_seen", ")", ")", "\n", "seen_dw", "=", "torch", ".", "tensor", "(", "seen_dw", ")", "\n", "\n", "self", ".", "dw_k", "=", "seen_dw", "\n", "# cuda", "\n", "if", "self", ".", "cuda", ":", "\n", "                ", "self", ".", "dw_k", "=", "self", ".", "dw_k", ".", "cuda", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "dw_k", "=", "torch", ".", "tensor", "(", "np", ".", "ones", "(", "self", ".", "valid_out_dim", "+", "1", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "# cuda", "\n", "if", "self", ".", "cuda", ":", "\n", "                ", "self", ".", "dw_k", "=", "self", ".", "dw_k", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.save_model": [[274, 281], ["default.NormalNN.model.state_dict", "default.NormalNN.keys", "default.NormalNN.log", "torch.save", "torch.save", "torch.save", "torch.save", "default.NormalNN.log", "model_state[].cpu"], "methods", ["None"], ["", "", "", "def", "save_model", "(", "self", ",", "filename", ")", ":", "\n", "        ", "model_state", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "for", "key", "in", "model_state", ".", "keys", "(", ")", ":", "# Always save it to cpu", "\n", "            ", "model_state", "[", "key", "]", "=", "model_state", "[", "key", "]", ".", "cpu", "(", ")", "\n", "", "self", ".", "log", "(", "'=> Saving class model to:'", ",", "filename", ")", "\n", "torch", ".", "save", "(", "model_state", ",", "filename", "+", "'class.pth'", ")", "\n", "self", ".", "log", "(", "'=> Save Done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.load_model": [[282, 288], ["default.NormalNN.model.load_state_dict", "default.NormalNN.log", "default.NormalNN.model.eval", "torch.load", "torch.load", "torch.load", "torch.load", "default.NormalNN.model.cuda"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["", "def", "load_model", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "'class.pth'", ")", ")", "\n", "self", ".", "log", "(", "'=> Load Done'", ")", "\n", "if", "self", ".", "gpu", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.init_optimizer": [[290, 311], ["torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "default.NormalNN.model.parameters", "optimizer_arg.pop"], "methods", ["None"], ["", "def", "init_optimizer", "(", "self", ")", ":", "\n", "\n", "# parse optimizer args", "\n", "        ", "optimizer_arg", "=", "{", "'params'", ":", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "self", ".", "config", "[", "'lr'", "]", ",", "\n", "'weight_decay'", ":", "self", ".", "config", "[", "'weight_decay'", "]", "}", "\n", "if", "self", ".", "config", "[", "'optimizer'", "]", "in", "[", "'SGD'", ",", "'RMSprop'", "]", ":", "\n", "            ", "optimizer_arg", "[", "'momentum'", "]", "=", "self", ".", "config", "[", "'momentum'", "]", "\n", "", "elif", "self", ".", "config", "[", "'optimizer'", "]", "in", "[", "'Rprop'", "]", ":", "\n", "            ", "optimizer_arg", ".", "pop", "(", "'weight_decay'", ")", "\n", "", "elif", "self", ".", "config", "[", "'optimizer'", "]", "==", "'amsgrad'", ":", "\n", "            ", "optimizer_arg", "[", "'amsgrad'", "]", "=", "True", "\n", "self", ".", "config", "[", "'optimizer'", "]", "=", "'Adam'", "\n", "", "elif", "self", ".", "config", "[", "'optimizer'", "]", "==", "'Adam'", ":", "\n", "            ", "optimizer_arg", "[", "'betas'", "]", "=", "(", "self", ".", "config", "[", "'momentum'", "]", ",", "0.999", ")", "\n", "\n", "# create optimizers", "\n", "", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "__dict__", "[", "self", ".", "config", "[", "'optimizer'", "]", "]", "(", "**", "optimizer_arg", ")", "\n", "\n", "# create schedulesif self.schedule_type == 'decay':", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "self", ".", "optimizer", ",", "milestones", "=", "self", ".", "schedule", ",", "gamma", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.new_optimizer": [[313, 337], ["model.parameters", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "optimizer_arg.pop"], "methods", ["None"], ["", "def", "new_optimizer", "(", "self", ",", "model", ")", ":", "\n", "\n", "# parse optimizer args", "\n", "        ", "optimizer_arg", "=", "{", "'params'", ":", "model", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "self", ".", "config", "[", "'lr'", "]", ",", "\n", "'weight_decay'", ":", "self", ".", "config", "[", "'weight_decay'", "]", "}", "\n", "if", "self", ".", "config", "[", "'optimizer'", "]", "in", "[", "'SGD'", ",", "'RMSprop'", "]", ":", "\n", "            ", "optimizer_arg", "[", "'momentum'", "]", "=", "self", ".", "config", "[", "'momentum'", "]", "\n", "", "elif", "self", ".", "config", "[", "'optimizer'", "]", "in", "[", "'Rprop'", "]", ":", "\n", "            ", "optimizer_arg", ".", "pop", "(", "'weight_decay'", ")", "\n", "", "elif", "self", ".", "config", "[", "'optimizer'", "]", "==", "'amsgrad'", ":", "\n", "            ", "optimizer_arg", "[", "'amsgrad'", "]", "=", "True", "\n", "self", ".", "config", "[", "'optimizer'", "]", "=", "'Adam'", "\n", "", "elif", "self", ".", "config", "[", "'optimizer'", "]", "==", "'Adam'", ":", "\n", "            ", "optimizer_arg", "[", "'betas'", "]", "=", "(", "self", ".", "config", "[", "'momentum'", "]", ",", "0.999", ")", "\n", "\n", "# create optimizers", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "__dict__", "[", "self", ".", "config", "[", "'optimizer'", "]", "]", "(", "**", "optimizer_arg", ")", "\n", "\n", "# create schedules", "\n", "if", "self", ".", "schedule_type", "==", "'decay'", ":", "\n", "            ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "self", ".", "schedule", ",", "gamma", "=", "0.1", ")", "\n", "\n", "", "return", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.create_model": [[338, 345], ["None"], "methods", ["None"], ["", "def", "create_model", "(", "self", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", "\n", "\n", "# Define the backbone (MLP, LeNet, VGG, ResNet ... etc) of model", "\n", "model", "=", "models", ".", "__dict__", "[", "cfg", "[", "'model_type'", "]", "]", ".", "__dict__", "[", "cfg", "[", "'model_name'", "]", "]", "(", "out_dim", "=", "self", ".", "out_dim", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.print_model": [[346, 349], ["default.NormalNN.log", "default.NormalNN.log", "default.NormalNN.count_parameter"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.count_parameter"], ["", "def", "print_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "log", "(", "self", ".", "model", ")", "\n", "self", ".", "log", "(", "'#parameter of model:'", ",", "self", ".", "count_parameter", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.reset_model": [[350, 352], ["default.NormalNN.model.apply"], "methods", ["None"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "apply", "(", "weight_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.forward": [[353, 355], ["default.NormalNN.model.forward"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "forward", "(", "x", ")", "[", ":", ",", ":", "self", ".", "valid_out_dim", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.predict": [[356, 360], ["default.NormalNN.model.eval", "default.NormalNN.forward"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "def", "predict", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "out", "=", "self", ".", "forward", "(", "inputs", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.add_valid_output_dim": [[361, 368], ["default.NormalNN.log", "default.NormalNN.log"], "methods", ["None"], ["", "def", "add_valid_output_dim", "(", "self", ",", "dim", "=", "0", ")", ":", "\n", "\n", "# This function is kind of ad-hoc, but it is the simplest way to support incremental class learning", "\n", "        ", "self", ".", "log", "(", "'Incremental class: Old valid output dimension:'", ",", "self", ".", "valid_out_dim", ")", "\n", "self", ".", "valid_out_dim", "+=", "dim", "\n", "self", ".", "log", "(", "'Incremental class: New Valid output dimension:'", ",", "self", ".", "valid_out_dim", ")", "\n", "return", "self", ".", "valid_out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.count_parameter": [[369, 371], ["sum", "p.numel", "default.NormalNN.model.parameters"], "methods", ["None"], ["", "def", "count_parameter", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.count_memory": [[372, 374], ["default.NormalNN.count_parameter"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.count_parameter"], ["", "def", "count_memory", "(", "self", ",", "dataset_size", ")", ":", "\n", "        ", "return", "self", ".", "count_parameter", "(", ")", "+", "self", ".", "memory_size", "*", "dataset_size", "[", "0", "]", "*", "dataset_size", "[", "1", "]", "*", "dataset_size", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda": [[375, 384], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "default.NormalNN.model.cuda", "default.NormalNN.criterion_fn.cuda", "len", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "config", "[", "'gpuid'", "]", "[", "0", "]", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "self", ".", "criterion_fn", "=", "self", ".", "criterion_fn", ".", "cuda", "(", ")", "\n", "\n", "# Multi-GPU", "\n", "if", "len", "(", "self", ".", "config", "[", "'gpuid'", "]", ")", ">", "1", ":", "\n", "            ", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ",", "device_ids", "=", "self", ".", "config", "[", "'gpuid'", "]", ",", "output_device", "=", "self", ".", "config", "[", "'gpuid'", "]", "[", "0", "]", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN._get_device": [[385, 389], ["default.NormalNN.log", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["", "def", "_get_device", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "self", ".", "log", "(", "\"Running on:\"", ",", "device", ")", "\n", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.pre_steps": [[390, 392], ["None"], "methods", ["None"], ["", "def", "pre_steps", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.Teacher.__init__": [[429, 433], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "solver", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "solver", "=", "solver", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.Teacher.generate_scores": [[434, 464], ["default.Teacher.eval", "default.Teacher.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "default.Teacher.solver.forward", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.max", "torch.max", "torch.max", "torch.max", "thresh_mask.nonzero().view", "torch.max", "torch.max", "torch.max", "torch.max", "thresh_mask.nonzero"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "def", "generate_scores", "(", "self", ",", "x", ",", "allowed_predictions", "=", "None", ",", "threshold", "=", "None", ")", ":", "\n", "\n", "# set model to eval()-mode", "\n", "        ", "mode", "=", "self", ".", "training", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "# get predicted logit-scores", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "y_hat", "=", "self", ".", "solver", ".", "forward", "(", "x", ")", "\n", "", "y_hat", "=", "y_hat", "[", ":", ",", "allowed_predictions", "]", "\n", "\n", "# set model back to its initial mode", "\n", "self", ".", "train", "(", "mode", "=", "mode", ")", "\n", "\n", "# threshold if desired", "\n", "if", "threshold", "is", "not", "None", ":", "\n", "# get predicted class-labels (indexed according to each class' position in [allowed_predictions]!)", "\n", "            ", "y_hat", "=", "F", ".", "softmax", "(", "y_hat", ",", "dim", "=", "1", ")", "\n", "ymax", ",", "y", "=", "torch", ".", "max", "(", "y_hat", ",", "dim", "=", "1", ")", "\n", "thresh_mask", "=", "ymax", ">", "(", "threshold", ")", "\n", "thresh_idx", "=", "thresh_mask", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "y_hat", "=", "y_hat", "[", "thresh_idx", "]", "\n", "y", "=", "y", "[", "thresh_idx", "]", "\n", "return", "y_hat", ",", "y", ",", "x", "[", "thresh_idx", "]", "\n", "\n", "", "else", ":", "\n", "# get predicted class-labels (indexed according to each class' position in [allowed_predictions]!)", "\n", "            ", "ymax", ",", "y", "=", "torch", ".", "max", "(", "y_hat", ",", "dim", "=", "1", ")", "\n", "\n", "return", "y_hat", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.Teacher.generate_scores_pen": [[465, 479], ["default.Teacher.eval", "default.Teacher.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "default.Teacher.solver.forward"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "", "def", "generate_scores_pen", "(", "self", ",", "x", ")", ":", "\n", "\n", "# set model to eval()-mode", "\n", "        ", "mode", "=", "self", ".", "training", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "# get predicted logit-scores", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "y_hat", "=", "self", ".", "solver", ".", "forward", "(", "x", "=", "x", ",", "pen", "=", "True", ")", "\n", "\n", "# set model back to its initial mode", "\n", "", "self", ".", "train", "(", "mode", "=", "mode", ")", "\n", "\n", "return", "y_hat", "", "", "", ""]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.weight_reset": [[393, 396], ["isinstance", "isinstance", "m.reset_parameters"], "function", ["None"], ["", "", "def", "weight_reset", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "m", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.accumulate_acc": [[397, 400], ["meter.update", "utils.metric.accuracy", "len"], "function", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.accuracy"], ["", "", "def", "accumulate_acc", "(", "output", ",", "target", ",", "task", ",", "meter", ",", "topk", ")", ":", "\n", "    ", "meter", ".", "update", "(", "accuracy", "(", "output", ",", "target", ",", "topk", ")", ",", "len", "(", "target", ")", ")", "\n", "return", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.loss_fn_kd": [[401, 422], ["torch.nn.functional.log_softmax", "KD_loss_unnorm.mean.sum", "KD_loss_unnorm.mean.mean", "torch.nn.functional.softmax"], "function", ["None"], ["", "def", "loss_fn_kd", "(", "scores", ",", "target_scores", ",", "data_weights", ",", "allowed_predictions", ",", "T", "=", "2.", ",", "soft_t", "=", "False", ")", ":", "\n", "    ", "\"\"\"Compute knowledge-distillation (KD) loss given [scores] and [target_scores].\n    Both [scores] and [target_scores] should be tensors, although [target_scores] should be repackaged.\n    'Hyperparameter': temperature\"\"\"", "\n", "\n", "\n", "log_scores_norm", "=", "F", ".", "log_softmax", "(", "scores", "[", ":", ",", "allowed_predictions", "]", "/", "T", ",", "dim", "=", "1", ")", "\n", "if", "soft_t", ":", "\n", "        ", "targets_norm", "=", "target_scores", "\n", "", "else", ":", "\n", "        ", "targets_norm", "=", "F", ".", "softmax", "(", "target_scores", "[", ":", ",", "allowed_predictions", "]", "/", "T", ",", "dim", "=", "1", ")", "\n", "\n", "# Calculate distillation loss (see e.g., Li and Hoiem, 2017)", "\n", "", "KD_loss_unnorm", "=", "-", "(", "targets_norm", "*", "log_scores_norm", ")", "\n", "KD_loss_unnorm", "=", "KD_loss_unnorm", ".", "sum", "(", "dim", "=", "1", ")", "#--> sum over classes", "\n", "KD_loss_unnorm", "=", "KD_loss_unnorm", ".", "mean", "(", ")", "#--> average over batch", "\n", "\n", "# normalize", "\n", "KD_loss", "=", "KD_loss_unnorm", "# * T**2", "\n", "\n", "return", "KD_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree_helper.Teacher.__init__": [[25, 63], ["torch.nn.Module.__init__", "datafree_helper.Teacher.solver.eval", "datafree_helper.Teacher.generator.eval", "list", "len", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "datafree_helper.Gaussiansmoothing", "datafree_helper.Teacher.solver.modules", "torch.nn.MSELoss", "torch.nn.MSELoss", "isinstance", "isinstance", "loss_r_feature_layers.append", "datafree_helper.DeepInversionFeatureHook"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["    ", "def", "__init__", "(", "self", ",", "solver", ",", "generator", ",", "gen_opt", ",", "img_shape", ",", "iters", ",", "class_idx", ",", "deep_inv_params", ",", "train", "=", "True", ",", "config", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "solver", "=", "solver", "\n", "self", ".", "generator", "=", "generator", "\n", "self", ".", "gen_opt", "=", "gen_opt", "\n", "self", ".", "solver", ".", "eval", "(", ")", "\n", "self", ".", "generator", ".", "eval", "(", ")", "\n", "self", ".", "img_shape", "=", "img_shape", "\n", "self", ".", "iters", "=", "iters", "\n", "self", ".", "config", "=", "config", "\n", "\n", "# hyperparameters", "\n", "self", ".", "di_lr", "=", "deep_inv_params", "[", "0", "]", "\n", "self", ".", "r_feature_weight", "=", "deep_inv_params", "[", "1", "]", "\n", "self", ".", "di_var_scale", "=", "deep_inv_params", "[", "2", "]", "\n", "self", ".", "content_temp", "=", "deep_inv_params", "[", "3", "]", "\n", "self", ".", "content_weight", "=", "deep_inv_params", "[", "4", "]", "\n", "\n", "\n", "# get class keys", "\n", "self", ".", "class_idx", "=", "list", "(", "class_idx", ")", "\n", "self", ".", "num_k", "=", "len", "(", "self", ".", "class_idx", ")", "\n", "\n", "# first time?", "\n", "self", ".", "first_time", "=", "train", "\n", "\n", "# set up criteria for optimization", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "\"none\"", ")", ".", "cuda", "(", ")", "\n", "self", ".", "smoothing", "=", "Gaussiansmoothing", "(", "3", ",", "5", ",", "1", ")", "\n", "\n", "# Create hooks for feature statistics catching", "\n", "loss_r_feature_layers", "=", "[", "]", "\n", "for", "module", "in", "self", ".", "solver", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "loss_r_feature_layers", ".", "append", "(", "DeepInversionFeatureHook", "(", "module", ",", "0", ",", "self", ".", "r_feature_weight", ")", ")", "\n", "", "", "self", ".", "loss_r_feature_layers", "=", "loss_r_feature_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree_helper.Teacher.sample": [[65, 90], ["datafree_helper.Teacher.solver.eval", "datafree_helper.Teacher.generator.train", "datafree_helper.Teacher.generator.eval", "torch.max", "torch.max", "torch.max", "torch.max", "datafree_helper.Teacher.get_images", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "datafree_helper.Teacher.generator.sample", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "datafree_helper.Teacher.solver.forward"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree_helper.Teacher.get_images", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.sample", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "def", "sample", "(", "self", ",", "size", ",", "device", ",", "return_scores", "=", "False", ")", ":", "\n", "\n", "# make sure solver is eval mode", "\n", "        ", "self", ".", "solver", ".", "eval", "(", ")", "\n", "\n", "# train if first time", "\n", "self", ".", "generator", ".", "train", "(", ")", "\n", "if", "self", ".", "first_time", ":", "\n", "            ", "self", ".", "first_time", "=", "False", "\n", "self", ".", "get_images", "(", "bs", "=", "size", ",", "epochs", "=", "self", ".", "iters", ",", "idx", "=", "-", "1", ")", "\n", "\n", "# sample images", "\n", "", "self", ".", "generator", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x_i", "=", "self", ".", "generator", ".", "sample", "(", "size", ")", "\n", "\n", "# get predicted logit-scores", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "y_hat", "=", "self", ".", "solver", ".", "forward", "(", "x_i", ")", "\n", "", "y_hat", "=", "y_hat", "[", ":", ",", "self", ".", "class_idx", "]", "\n", "\n", "# get predicted class-labels (indexed according to each class' position in [self.class_idx]!)", "\n", "_", ",", "y", "=", "torch", ".", "max", "(", "y_hat", ",", "dim", "=", "1", ")", "\n", "\n", "return", "(", "x_i", ",", "y", ",", "y_hat", ")", "if", "return_scores", "else", "(", "x_i", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree_helper.Teacher.generate_scores": [[91, 105], ["datafree_helper.Teacher.solver.eval", "torch.max", "torch.max", "torch.max", "torch.max", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "datafree_helper.Teacher.solver.forward"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "def", "generate_scores", "(", "self", ",", "x", ",", "allowed_predictions", "=", "None", ",", "return_label", "=", "False", ")", ":", "\n", "\n", "# make sure solver is eval mode", "\n", "        ", "self", ".", "solver", ".", "eval", "(", ")", "\n", "\n", "# get predicted logit-scores", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "y_hat", "=", "self", ".", "solver", ".", "forward", "(", "x", ")", "\n", "", "y_hat", "=", "y_hat", "[", ":", ",", "allowed_predictions", "]", "\n", "\n", "# get predicted class-labels (indexed according to each class' position in [allowed_predictions]!)", "\n", "_", ",", "y", "=", "torch", ".", "max", "(", "y_hat", ",", "dim", "=", "1", ")", "\n", "\n", "return", "(", "y", ",", "y_hat", ")", "if", "return_label", "else", "y_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree_helper.Teacher.generate_scores_pen": [[107, 117], ["datafree_helper.Teacher.solver.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "datafree_helper.Teacher.solver.forward"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "def", "generate_scores_pen", "(", "self", ",", "x", ")", ":", "\n", "\n", "# make sure solver is eval mode", "\n", "        ", "self", ".", "solver", ".", "eval", "(", ")", "\n", "\n", "# get predicted logit-scores", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "y_hat", "=", "self", ".", "solver", ".", "forward", "(", "x", "=", "x", ",", "pen", "=", "True", ")", "\n", "\n", "", "return", "y_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree_helper.Teacher.get_images": [[118, 161], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "datafree_helper.Teacher.generator.train", "range", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "datafree_helper.Teacher.generator.eval", "datafree_helper.Teacher.generator.sample", "datafree_helper.Teacher.gen_opt.zero_grad", "datafree_helper.Teacher.solver.zero_grad", "torch.softmax().mean", "torch.softmax().mean", "datafree_helper.Teacher.smoothing", "datafree_helper.Teacher.mse_loss().mean", "loss.backward", "datafree_helper.Teacher.gen_opt.step", "datafree_helper.Teacher.solver", "datafree_helper.Teacher.criterion", "torch.pad", "torch.pad", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.softmax", "torch.softmax", "len", "len", "loss_distr.to.to.to", "datafree_helper.Teacher.mse_loss", "math.log", "torch.device", "torch.device", "torch.device", "torch.device", "torch.log", "torch.log", "torch.log", "torch.log", "str"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.sample", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.criterion"], ["", "def", "get_images", "(", "self", ",", "bs", "=", "256", ",", "epochs", "=", "1000", ",", "idx", "=", "-", "1", ")", ":", "\n", "\n", "# clear cuda cache", "\n", "        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "self", ".", "generator", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "\n", "# sample from generator", "\n", "            ", "inputs", "=", "self", ".", "generator", ".", "sample", "(", "bs", ")", "\n", "\n", "# forward with images", "\n", "self", ".", "gen_opt", ".", "zero_grad", "(", ")", "\n", "self", ".", "solver", ".", "zero_grad", "(", ")", "\n", "\n", "# content", "\n", "outputs", "=", "self", ".", "solver", "(", "inputs", ")", "[", ":", ",", ":", "self", ".", "num_k", "]", "\n", "loss", "=", "self", ".", "criterion", "(", "outputs", "/", "self", ".", "content_temp", ",", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", ")", "*", "self", ".", "content_weight", "\n", "\n", "# class balance", "\n", "softmax_o_T", "=", "F", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "loss", "+=", "(", "1.0", "+", "(", "softmax_o_T", "*", "torch", ".", "log", "(", "softmax_o_T", ")", "/", "math", ".", "log", "(", "self", ".", "num_k", ")", ")", ".", "sum", "(", ")", ")", "\n", "\n", "# R_feature loss", "\n", "for", "mod", "in", "self", ".", "loss_r_feature_layers", ":", "\n", "                ", "loss_distr", "=", "mod", ".", "r_feature", "*", "self", ".", "r_feature_weight", "/", "len", "(", "self", ".", "loss_r_feature_layers", ")", "\n", "if", "len", "(", "self", ".", "config", "[", "'gpuid'", "]", ")", ">", "1", ":", "\n", "                    ", "loss_distr", "=", "loss_distr", ".", "to", "(", "device", "=", "torch", ".", "device", "(", "'cuda:'", "+", "str", "(", "self", ".", "config", "[", "'gpuid'", "]", "[", "0", "]", ")", ")", ")", "\n", "", "loss", "=", "loss", "+", "loss_distr", "\n", "\n", "# image prior", "\n", "", "inputs_smooth", "=", "self", ".", "smoothing", "(", "F", ".", "pad", "(", "inputs", ",", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "mode", "=", "'reflect'", ")", ")", "\n", "loss_var", "=", "self", ".", "mse_loss", "(", "inputs", ",", "inputs_smooth", ")", ".", "mean", "(", ")", "\n", "loss", "=", "loss", "+", "self", ".", "di_var_scale", "*", "loss_var", "\n", "\n", "# backward pass", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "gen_opt", ".", "step", "(", ")", "\n", "\n", "# clear cuda cache", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "self", ".", "generator", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree_helper.DeepInversionFeatureHook.__init__": [[168, 173], ["module.register_forward_hook"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "module", ",", "gram_matrix_weight", ",", "layer_weight", ")", ":", "\n", "        ", "self", ".", "hook", "=", "module", ".", "register_forward_hook", "(", "self", ".", "hook_fn", ")", "\n", "self", ".", "target", "=", "None", "\n", "self", ".", "gram_matrix_weight", "=", "gram_matrix_weight", "\n", "self", ".", "layer_weight", "=", "layer_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree_helper.DeepInversionFeatureHook.hook_fn": [[174, 183], ["input[].mean", "input[].permute().contiguous().view().var", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "input[].permute().contiguous().view", "torch.log", "torch.log", "torch.log", "torch.log", "input[].permute().contiguous", "input[].permute", "module.running_var.data.type", "var.type", "module.running_var.data.type", "var.type", "module.running_mean.data.type", "var.type"], "methods", ["None"], ["", "def", "hook_fn", "(", "self", ",", "module", ",", "input", ",", "output", ")", ":", "\n", "\n", "# hook co compute deepinversion's feature distribution regularization", "\n", "        ", "nch", "=", "input", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "mean", "=", "input", "[", "0", "]", ".", "mean", "(", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "var", "=", "input", "[", "0", "]", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "[", "nch", ",", "-", "1", "]", ")", ".", "var", "(", "1", ",", "unbiased", "=", "False", ")", "+", "1e-8", "\n", "r_feature", "=", "torch", ".", "log", "(", "var", "**", "(", "0.5", ")", "/", "(", "module", ".", "running_var", ".", "data", ".", "type", "(", "var", ".", "type", "(", ")", ")", "+", "1e-8", ")", "**", "(", "0.5", ")", ")", ".", "mean", "(", ")", "-", "0.5", "*", "(", "1.0", "-", "(", "module", ".", "running_var", ".", "data", ".", "type", "(", "var", ".", "type", "(", ")", ")", "+", "1e-8", "+", "(", "module", ".", "running_mean", ".", "data", ".", "type", "(", "var", ".", "type", "(", ")", ")", "-", "mean", ")", "**", "2", ")", "/", "var", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "r_feature", "=", "r_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree_helper.DeepInversionFeatureHook.close": [[185, 187], ["datafree_helper.DeepInversionFeatureHook.hook.remove"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "hook", ".", "remove", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree_helper.Gaussiansmoothing.__init__": [[201, 239], ["torch.nn.Module.__init__", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "zip", "kernel.repeat().cuda.repeat().cuda.view", "kernel.repeat().cuda.repeat().cuda.repeat().cuda", "datafree_helper.Gaussiansmoothing.register_buffer", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "kernel.repeat().cuda.repeat().cuda.size", "kernel.repeat().cuda.repeat().cuda.repeat", "RuntimeError", "math.sqrt", "kernel.repeat().cuda.repeat().cuda.dim"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["def", "__init__", "(", "self", ",", "channels", ",", "kernel_size", ",", "sigma", ",", "dim", "=", "2", ")", ":", "\n", "        ", "super", "(", "Gaussiansmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel_size", "=", "[", "kernel_size", "]", "*", "dim", "\n", "sigma", "=", "[", "sigma", "]", "*", "dim", "\n", "\n", "# The gaussian kernel is the product of the", "\n", "# gaussian function of each dimension.", "\n", "kernel", "=", "1", "\n", "meshgrids", "=", "torch", ".", "meshgrid", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "size", "in", "kernel_size", "\n", "]", "\n", ")", "\n", "for", "size", ",", "std", ",", "mgrid", "in", "zip", "(", "kernel_size", ",", "sigma", ",", "meshgrids", ")", ":", "\n", "            ", "mean", "=", "(", "size", "-", "1", ")", "/", "2", "\n", "kernel", "*=", "1", "/", "(", "std", "*", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", ")", "*", "torch", ".", "exp", "(", "-", "(", "(", "mgrid", "-", "mean", ")", "/", "(", "2", "*", "std", ")", ")", "**", "2", ")", "\n", "\n", "# Make sure sum of values in gaussian kernel equals 1.", "\n", "", "kernel", "=", "kernel", "/", "torch", ".", "sum", "(", "kernel", ")", "\n", "\n", "# Reshape to depthwise convolutional weight", "\n", "kernel", "=", "kernel", ".", "view", "(", "1", ",", "1", ",", "*", "kernel", ".", "size", "(", ")", ")", "\n", "kernel", "=", "kernel", ".", "repeat", "(", "channels", ",", "*", "[", "1", "]", "*", "(", "kernel", ".", "dim", "(", ")", "-", "1", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "kernel", ")", "\n", "self", ".", "groups", "=", "channels", "\n", "\n", "if", "dim", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv1d", "\n", "", "elif", "dim", "==", "2", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv2d", "\n", "", "elif", "dim", "==", "3", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv3d", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'Only 1, 2 and 3 dimensions are supported. Received {}.'", ".", "format", "(", "dim", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree_helper.Gaussiansmoothing.forward": [[241, 250], ["datafree_helper.Gaussiansmoothing.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Apply gaussian filter to input.\n        Arguments:\n            input (torch.Tensor): Input to apply gaussian filter on.\n        Returns:\n            filtered (torch.Tensor): Filtered output.\n        \"\"\"", "\n", "return", "self", ".", "conv", "(", "input", ",", "weight", "=", "self", ".", "weight", ",", "groups", "=", "self", ".", "groups", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.LWF.__init__": [[13, 20], ["default.NormalNN.__init__"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "learner_config", ")", ":", "\n", "        ", "super", "(", "LWF", ",", "self", ")", ".", "__init__", "(", "learner_config", ")", "\n", "self", ".", "previous_teacher", "=", "None", "\n", "self", ".", "replay", "=", "False", "\n", "self", ".", "past_tasks", "=", "[", "]", "\n", "self", ".", "bic_layers", "=", "None", "\n", "self", ".", "ete_flag", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.LWF.learn_batch": [[25, 166], ["kd.LWF.model.eval", "kd.LWF.past_tasks.append", "kd.LWF.data_weighting", "kd.LWF.log", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.Timer", "range", "numpy.arange", "default.Teacher", "copy.deepcopy", "kd.LWF.load_model", "kd.LWF.log", "kd.LWF.init_optimizer", "kd.LWF.validation", "utils.metric.AverageMeter", "utils.metric.Timer.tic", "enumerate", "kd.LWF.log", "kd.LWF.log", "kd.LWF.log", "utils.metric.AverageMeter", "train_dataset.update_coreset_ete", "default.Teacher", "copy.deepcopy", "kd.TeacherBiC", "copy.deepcopy", "range", "kd.LWF.scheduler.step", "kd.LWF.log", "kd.LWF.model.train", "kd.LWF.update_model", "utils.metric.AverageMeter.update", "y.cuda.cuda.detach", "default.accumulate_acc", "losses[].update", "losses[].update", "losses[].update", "utils.metric.Timer.tic", "kd.LWF.validation", "utils.metric.AverageMeter", "numpy.arange", "train_dataset.update_coreset", "len", "copy.deepcopy", "copy.deepcopy", "train_dataset.update_coreset_ic", "x.cuda.cuda.cuda", "y.cuda.cuda.cuda", "list", "kd.LWF.previous_teacher.generate_scores", "utils.metric.Timer.toc", "y.cuda.cuda.size", "y.cuda.cuda.size", "y.cuda.cuda.size", "range", "numpy.arange", "numpy.arange", "range"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.data_weighting", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.load_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.init_optimizer", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.update_coreset_ete", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.AlwaysBeDreaming.update_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.accumulate_acc", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.update_coreset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.update_coreset_ic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr_helper.Scholar.generate_scores", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.toc"], ["", "def", "learn_batch", "(", "self", ",", "train_loader", ",", "train_dataset", ",", "model_save_dir", ",", "val_loader", "=", "None", ")", ":", "\n", "\n", "# try to load model", "\n", "        ", "need_train", "=", "True", "\n", "if", "not", "self", ".", "overwrite", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "load_model", "(", "model_save_dir", ")", "\n", "need_train", "=", "False", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "# train", "\n", "", "", "if", "need_train", ":", "\n", "            ", "if", "self", ".", "reset_optimizer", ":", "# Reset optimizer before learning each task", "\n", "                ", "self", ".", "log", "(", "'Optimizer is reset!'", ")", "\n", "self", ".", "init_optimizer", "(", ")", "\n", "\n", "# data weighting", "\n", "", "self", ".", "data_weighting", "(", "train_dataset", ")", "\n", "\n", "# Evaluate the performance of current task", "\n", "self", ".", "log", "(", "'Epoch:{epoch:.0f}/{total:.0f}'", ".", "format", "(", "epoch", "=", "0", ",", "total", "=", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ")", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                ", "self", ".", "validation", "(", "val_loader", ")", "\n", "\n", "", "losses", "=", "[", "AverageMeter", "(", ")", "for", "l", "in", "range", "(", "3", ")", "]", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "batch_timer", "=", "Timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ":", "\n", "                ", "self", ".", "epoch", "=", "epoch", "\n", "\n", "if", "epoch", ">", "0", ":", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                    ", "self", ".", "log", "(", "'LR:'", ",", "param_group", "[", "'lr'", "]", ")", "\n", "", "batch_timer", ".", "tic", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ",", "task", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "# verify in train mode", "\n", "                    ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "# send data to gpu", "\n", "if", "self", ".", "gpu", ":", "\n", "                        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "y", "=", "y", ".", "cuda", "(", ")", "\n", "\n", "# if KD", "\n", "", "if", "self", ".", "replay", ":", "\n", "                        ", "allowed_predictions", "=", "list", "(", "range", "(", "self", ".", "last_valid_out_dim", ")", ")", "\n", "y_hat", ",", "_", "=", "self", ".", "previous_teacher", ".", "generate_scores", "(", "x", ",", "allowed_predictions", "=", "allowed_predictions", ")", "\n", "", "else", ":", "\n", "                        ", "y_hat", "=", "None", "\n", "\n", "# model update - training data", "\n", "", "loss", ",", "loss_class", ",", "loss_distill", ",", "output", "=", "self", ".", "update_model", "(", "x", ",", "y", ",", "y_hat", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "batch_timer", ".", "toc", "(", ")", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "y", "=", "y", ".", "detach", "(", ")", "\n", "accumulate_acc", "(", "output", ",", "y", ",", "task", ",", "acc", ",", "topk", "=", "(", "self", ".", "top_k", ",", ")", ")", "\n", "losses", "[", "0", "]", ".", "update", "(", "loss", ",", "y", ".", "size", "(", "0", ")", ")", "\n", "losses", "[", "1", "]", ".", "update", "(", "loss_class", ",", "y", ".", "size", "(", "0", ")", ")", "\n", "losses", "[", "2", "]", ".", "update", "(", "loss_distill", ",", "y", ".", "size", "(", "0", ")", ")", "\n", "batch_timer", ".", "tic", "(", ")", "\n", "\n", "# eval update", "\n", "", "self", ".", "log", "(", "'Epoch:{epoch:.0f}/{total:.0f}'", ".", "format", "(", "epoch", "=", "self", ".", "epoch", "+", "1", ",", "total", "=", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "log", "(", "' * Loss {loss.avg:.3f} | Train Acc {acc.avg:.3f}'", ".", "format", "(", "loss", "=", "losses", "[", "0", "]", ",", "acc", "=", "acc", ")", ")", "\n", "self", ".", "log", "(", "' * Class Loss {loss.avg:.3f} | KD Loss {lossb.avg:.3f}'", ".", "format", "(", "loss", "=", "losses", "[", "1", "]", ",", "lossb", "=", "losses", "[", "2", "]", ")", ")", "\n", "\n", "# Evaluate the performance of current task", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                    ", "self", ".", "validation", "(", "val_loader", ")", "\n", "\n", "# reset", "\n", "", "losses", "=", "[", "AverageMeter", "(", ")", "for", "l", "in", "range", "(", "3", ")", "]", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "\n", "", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "past_tasks", ".", "append", "(", "np", ".", "arange", "(", "self", ".", "last_valid_out_dim", ",", "self", ".", "valid_out_dim", ")", ")", "\n", "self", ".", "last_valid_out_dim", "=", "self", ".", "valid_out_dim", "\n", "self", ".", "first_task", "=", "False", "\n", "\n", "# E2W", "\n", "if", "self", ".", "ete_flag", ":", "\n", "\n", "# for eval", "\n", "            ", "if", "self", ".", "previous_teacher", "is", "not", "None", ":", "\n", "                ", "self", ".", "previous_previous_teacher", "=", "self", ".", "previous_teacher", "\n", "\n", "# new teacher", "\n", "", "teacher", "=", "Teacher", "(", "solver", "=", "self", ".", "model", ")", "\n", "self", ".", "previous_teacher", "=", "copy", ".", "deepcopy", "(", "teacher", ")", "\n", "\n", "# Extend memory", "\n", "self", ".", "task_count", "+=", "1", "\n", "if", "self", ".", "memory_size", ">", "0", ":", "\n", "                ", "train_dataset", ".", "update_coreset_ete", "(", "self", ".", "memory_size", ",", "np", ".", "arange", "(", "self", ".", "last_valid_out_dim", ")", ",", "teacher", ")", "\n", "\n", "# BiC", "\n", "", "", "elif", "self", ".", "bic_layers", "is", "None", ":", "\n", "\n", "# Extend memory", "\n", "            ", "self", ".", "task_count", "+=", "1", "\n", "if", "self", ".", "memory_size", ">", "0", ":", "\n", "                ", "train_dataset", ".", "update_coreset", "(", "self", ".", "memory_size", ",", "np", ".", "arange", "(", "self", ".", "last_valid_out_dim", ")", ")", "\n", "\n", "# for eval", "\n", "", "if", "self", ".", "previous_teacher", "is", "not", "None", ":", "\n", "                ", "self", ".", "previous_previous_teacher", "=", "self", ".", "previous_teacher", "\n", "\n", "# new teacher", "\n", "", "teacher", "=", "Teacher", "(", "solver", "=", "self", ".", "model", ")", "\n", "self", ".", "previous_teacher", "=", "copy", ".", "deepcopy", "(", "teacher", ")", "\n", "if", "len", "(", "self", ".", "config", "[", "'gpuid'", "]", ")", ">", "1", ":", "\n", "                ", "self", ".", "previous_linear", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ".", "module", ".", "last", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "previous_linear", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ".", "last", ")", "\n", "\n", "# LwF", "\n", "", "", "else", ":", "\n", "# for eval", "\n", "            ", "if", "self", ".", "previous_teacher", "is", "not", "None", ":", "\n", "                ", "self", ".", "previous_previous_teacher", "=", "self", ".", "previous_teacher", "\n", "\n", "# new teacher", "\n", "", "teacher", "=", "TeacherBiC", "(", "solver", "=", "self", ".", "model", ",", "bic_layers", "=", "self", ".", "bic_layers", ")", "\n", "self", ".", "previous_teacher", "=", "copy", ".", "deepcopy", "(", "teacher", ")", "\n", "\n", "# Extend memory", "\n", "self", ".", "task_count", "+=", "1", "\n", "if", "self", ".", "memory_size", ">", "0", ":", "\n", "                ", "train_dataset", ".", "update_coreset_ic", "(", "self", ".", "memory_size", ",", "np", ".", "arange", "(", "self", ".", "last_valid_out_dim", ")", ",", "teacher", ")", "\n", "\n", "", "", "self", ".", "replay", "=", "True", "\n", "try", ":", "\n", "            ", "return", "batch_time", ".", "avg", "\n", "", "except", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.LWF.update_model": [[167, 193], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "kd.LWF.forward", "kd.LWF.criterion", "kd.LWF.optimizer.zero_grad", "torch.zeros().cuda.backward", "torch.zeros().cuda.backward", "kd.LWF.optimizer.step", "targets.long", "default.loss_fn_kd", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.detach", "torch.zeros().cuda.detach", "kd.LWF.detach", "torch.zeros().cuda.detach", "torch.zeros().cuda.detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.arange().tolist", "targets.long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "numpy.arange", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "targets.size", "len"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.criterion", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.loss_fn_kd", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["", "", "def", "update_model", "(", "self", ",", "inputs", ",", "targets", ",", "target_KD", "=", "None", ")", ":", "\n", "\n", "        ", "total_loss", "=", "torch", ".", "zeros", "(", "(", "1", ",", ")", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "# classification loss", "\n", "if", "self", ".", "dw", ":", "\n", "            ", "dw_cls", "=", "self", ".", "dw_k", "[", "targets", ".", "long", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "dw_cls", "=", "self", ".", "dw_k", "[", "-", "1", "*", "torch", ".", "ones", "(", "targets", ".", "size", "(", ")", ")", ".", "long", "(", ")", "]", "\n", "", "logits", "=", "self", ".", "forward", "(", "inputs", ")", "\n", "loss_class", "=", "self", ".", "criterion", "(", "logits", ",", "targets", ".", "long", "(", ")", ",", "dw_cls", ")", "\n", "total_loss", "+=", "loss_class", "\n", "\n", "# KD", "\n", "if", "target_KD", "is", "not", "None", ":", "\n", "            ", "dw_KD", "=", "self", ".", "dw_k", "[", "-", "1", "*", "torch", ".", "ones", "(", "len", "(", "target_KD", ")", ",", ")", ".", "long", "(", ")", "]", "\n", "logits_KD", "=", "logits", "\n", "loss_distill", "=", "loss_fn_kd", "(", "logits_KD", ",", "target_KD", ",", "dw_KD", ",", "np", ".", "arange", "(", "self", ".", "last_valid_out_dim", ")", ".", "tolist", "(", ")", ",", "self", ".", "DTemp", ")", "\n", "total_loss", "+=", "self", ".", "mu", "*", "loss_distill", "\n", "", "else", ":", "\n", "            ", "loss_distill", "=", "torch", ".", "zeros", "(", "(", "1", ",", ")", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "total_loss", ".", "detach", "(", ")", ",", "loss_class", ".", "detach", "(", ")", ",", "loss_distill", ".", "detach", "(", ")", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.LWF.combine_data": [[198, 205], ["range", "len", "x.append", "y.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "combine_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", ",", "y", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "            ", "x", ".", "append", "(", "data", "[", "i", "]", "[", "0", "]", ")", "\n", "y", ".", "append", "(", "data", "[", "i", "]", "[", "1", "]", ")", "\n", "", "x", ",", "y", "=", "torch", ".", "cat", "(", "x", ")", ",", "torch", ".", "cat", "(", "y", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.LWF_MC.__init__": [[208, 211], ["kd.LWF.__init__", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "learner_config", ")", ":", "\n", "        ", "super", "(", "LWF_MC", ",", "self", ")", ".", "__init__", "(", "learner_config", ")", "\n", "self", ".", "ce_loss", "=", "nn", ".", "BCELoss", "(", "reduction", "=", "'sum'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.LWF_MC.update_model": [[212, 230], ["kd.LWF_MC.forward", "kd.LWF_MC.optimizer.zero_grad", "total_loss.backward", "kd.LWF_MC.optimizer.step", "kd.get_one_hot", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "kd.get_one_hot", "total_loss.detach", "total_loss.detach", "torch.zeros().cuda().detach", "torch.zeros().cuda().detach", "torch.zeros().cuda().detach", "torch.zeros().cuda().detach", "kd.LWF_MC.ce_loss", "len", "kd.LWF_MC.ce_loss", "len", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.get_one_hot", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.get_one_hot", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["", "def", "update_model", "(", "self", ",", "inputs", ",", "targets", ",", "target_KD", "=", "None", ")", ":", "\n", "\n", "# get output", "\n", "        ", "logits", "=", "self", ".", "forward", "(", "inputs", ")", "\n", "\n", "# KD", "\n", "if", "target_KD", "is", "not", "None", ":", "\n", "            ", "target_mod", "=", "get_one_hot", "(", "targets", ",", "self", ".", "valid_out_dim", ")", "\n", "target_mod", "[", ":", ",", ":", "self", ".", "last_valid_out_dim", "]", "=", "torch", ".", "sigmoid", "(", "target_KD", ")", "\n", "total_loss", "=", "self", ".", "ce_loss", "(", "torch", ".", "sigmoid", "(", "logits", ")", ",", "target_mod", ")", "/", "len", "(", "logits", ")", "\n", "", "else", ":", "\n", "            ", "target_mod", "=", "get_one_hot", "(", "targets", ",", "self", ".", "valid_out_dim", ")", "\n", "total_loss", "=", "self", ".", "ce_loss", "(", "torch", ".", "sigmoid", "(", "logits", ")", ",", "target_mod", ")", "/", "len", "(", "logits", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "total_loss", ".", "detach", "(", ")", ",", "total_loss", ".", "detach", "(", ")", ",", "torch", ".", "zeros", "(", "(", "1", ",", ")", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", ".", "detach", "(", ")", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.ETE.__init__": [[233, 236], ["kd.LWF.__init__"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "learner_config", ")", ":", "\n", "        ", "super", "(", "ETE", ",", "self", ")", ".", "__init__", "(", "learner_config", ")", "\n", "self", ".", "ete_flag", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.ETE.update_model": [[237, 260], ["kd.ETE.forward", "kd.ETE.criterion", "kd.ETE.optimizer.zero_grad", "total_loss.backward", "kd.ETE.optimizer.step", "targets.long", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "total_loss.detach", "kd.ETE.detach", "default.loss_fn_kd.detach", "default.loss_fn_kd", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "task_l.tolist", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "targets.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.criterion", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.loss_fn_kd"], ["", "def", "update_model", "(", "self", ",", "inputs", ",", "targets", ",", "target_KD", "=", "None", ")", ":", "\n", "\n", "# classification loss", "\n", "        ", "dw_cls", "=", "self", ".", "dw_k", "[", "-", "1", "*", "torch", ".", "ones", "(", "targets", ".", "size", "(", ")", ")", ".", "long", "(", ")", "]", "\n", "logits", "=", "self", ".", "forward", "(", "inputs", ")", "\n", "loss_class", "=", "self", ".", "criterion", "(", "logits", ",", "targets", ".", "long", "(", ")", ",", "dw_cls", ")", "\n", "total_loss", "=", "loss_class", "\n", "\n", "# KD", "\n", "if", "target_KD", "is", "not", "None", ":", "\n", "\n", "            ", "dw_KD", "=", "self", ".", "dw_k", "[", "-", "1", "*", "torch", ".", "ones", "(", "len", "(", "target_KD", ")", ",", ")", ".", "long", "(", ")", "]", "\n", "logits_KD", "=", "logits", "\n", "for", "task_l", "in", "self", ".", "past_tasks", ":", "\n", "                ", "loss_distill", "=", "loss_fn_kd", "(", "logits_KD", ",", "target_KD", ",", "dw_KD", ",", "task_l", ".", "tolist", "(", ")", ",", "self", ".", "DTemp", ")", "\n", "total_loss", "+=", "self", ".", "mu", "*", "loss_distill", "*", "(", "len", "(", "task_l", ")", "/", "self", ".", "last_valid_out_dim", ")", "\n", "", "", "else", ":", "\n", "            ", "loss_distill", "=", "torch", ".", "zeros", "(", "(", "1", ",", ")", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "total_loss", ".", "detach", "(", ")", ",", "loss_class", ".", "detach", "(", ")", ",", "loss_distill", ".", "detach", "(", ")", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.ETE.update_model_b": [[261, 289], ["kd.ETE.forward", "kd.ETE.criterion", "kd.ETE.optimizer.zero_grad", "total_loss.backward", "kd.ETE.optimizer.step", "targets.long", "default.loss_fn_kd", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "total_loss.detach", "kd.ETE.detach", "default.loss_fn_kd.detach", "default.loss_fn_kd", "numpy.arange", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "task_l.tolist", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "targets.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.criterion", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.loss_fn_kd", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.loss_fn_kd"], ["", "def", "update_model_b", "(", "self", ",", "inputs", ",", "targets", ",", "target_KD", "=", "None", ",", "target_KD_B", "=", "None", ")", ":", "\n", "\n", "# classification loss", "\n", "        ", "dw_cls", "=", "self", ".", "dw_k", "[", "-", "1", "*", "torch", ".", "ones", "(", "targets", ".", "size", "(", ")", ")", ".", "long", "(", ")", "]", "\n", "logits", "=", "self", ".", "forward", "(", "inputs", ")", "\n", "loss_class", "=", "self", ".", "criterion", "(", "logits", ",", "targets", ".", "long", "(", ")", ",", "dw_cls", ")", "\n", "total_loss", "=", "loss_class", "\n", "\n", "# KD", "\n", "if", "target_KD", "is", "not", "None", ":", "\n", "\n", "            ", "dw_KD", "=", "self", ".", "dw_k", "[", "-", "1", "*", "torch", ".", "ones", "(", "len", "(", "target_KD", ")", ",", ")", ".", "long", "(", ")", "]", "\n", "logits_KD", "=", "logits", "\n", "for", "task_l", "in", "self", ".", "past_tasks", ":", "\n", "                ", "loss_distill", "=", "loss_fn_kd", "(", "logits_KD", ",", "target_KD", ",", "dw_KD", ",", "task_l", ".", "tolist", "(", ")", ",", "self", ".", "DTemp", ")", "\n", "total_loss", "+=", "self", ".", "mu", "*", "loss_distill", "*", "(", "len", "(", "task_l", ")", "/", "self", ".", "valid_out_dim", ")", "\n", "\n", "# current task", "\n", "", "loss_distill", "=", "loss_fn_kd", "(", "logits_KD", "[", ":", ",", "self", ".", "last_valid_out_dim", ":", "self", ".", "valid_out_dim", "]", ",", "target_KD", ",", "dw_KD", ",", "np", ".", "arange", "(", "self", ".", "valid_out_dim", "-", "self", ".", "last_valid_out_dim", ")", ",", "self", ".", "DTemp", ")", "\n", "total_loss", "+=", "self", ".", "mu", "*", "loss_distill", "*", "(", "(", "self", ".", "valid_out_dim", "-", "self", ".", "last_valid_out_dim", ")", "/", "self", ".", "valid_out_dim", ")", "\n", "\n", "", "else", ":", "\n", "            ", "loss_distill", "=", "torch", ".", "zeros", "(", "(", "1", ",", ")", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "total_loss", ".", "detach", "(", ")", ",", "loss_class", ".", "detach", "(", ")", ",", "loss_distill", ".", "detach", "(", ")", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.ETE.learn_batch": [[290, 480], ["default.Teacher", "copy.deepcopy", "kd.ETE.model.eval", "kd.ETE.past_tasks.append", "default.Teacher", "copy.deepcopy", "kd.LWF.learn_batch", "kd.ETE.data_weighting", "kd.ETE.log", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.Timer", "range", "train_dataset.update_coreset_ete", "train_dataset.load_dataset", "train_dataset.append_coreset", "kd.ETE.log", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.Timer", "range", "train_dataset.load_dataset", "train_dataset.append_coreset", "numpy.arange", "kd.ETE.load_model", "kd.ETE.log", "kd.ETE.init_optimizer", "kd.ETE.validation", "utils.metric.AverageMeter", "utils.metric.Timer.tic", "enumerate", "kd.ETE.log", "kd.ETE.log", "kd.ETE.log", "utils.metric.AverageMeter", "numpy.arange", "len", "kd.ETE.new_optimizer", "kd.ETE.new_optimizer", "kd.ETE.validation", "utils.metric.AverageMeter", "utils.metric.Timer.tic", "enumerate", "kd.ETE.log", "kd.ETE.log", "kd.ETE.log", "utils.metric.AverageMeter", "range", "kd.ETE.scheduler.step", "kd.ETE.log", "kd.ETE.model.train", "kd.ETE.update_model", "utils.metric.AverageMeter.update", "y.cuda.cuda.detach", "default.accumulate_acc", "losses[].update", "losses[].update", "losses[].update", "utils.metric.Timer.tic", "kd.ETE.validation", "utils.metric.AverageMeter", "range", "kd.ETE.scheduler.step", "kd.ETE.log", "kd.ETE.model.train", "kd.ETE.update_model_b", "utils.metric.AverageMeter.update", "y.cuda.cuda.detach", "default.accumulate_acc", "losses[].update", "losses[].update", "losses[].update", "utils.metric.Timer.tic", "kd.ETE.validation", "utils.metric.AverageMeter", "x.cuda.cuda.cuda", "y.cuda.cuda.cuda", "list", "kd.ETE.previous_teacher.generate_scores", "utils.metric.Timer.toc", "y.cuda.cuda.size", "y.cuda.cuda.size", "y.cuda.cuda.size", "range", "x.cuda.cuda.cuda", "y.cuda.cuda.cuda", "list", "kd.ETE.previous_teacher.generate_scores", "kd.ETE.current_teacher.generate_scores", "utils.metric.Timer.toc", "y.cuda.cuda.size", "y.cuda.cuda.size", "y.cuda.cuda.size", "range", "range", "range", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.learn_batch", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.data_weighting", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.update_coreset_ete", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.load_dataset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.append_coreset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.load_dataset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.append_coreset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.load_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.init_optimizer", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.new_optimizer", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.new_optimizer", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.AlwaysBeDreaming.update_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.accumulate_acc", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.ETE.update_model_b", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.accumulate_acc", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr_helper.Scholar.generate_scores", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.toc", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr_helper.Scholar.generate_scores", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr_helper.Scholar.generate_scores", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.toc"], ["", "def", "learn_batch", "(", "self", ",", "train_loader", ",", "train_dataset", ",", "model_save_dir", ",", "val_loader", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "task_count", "==", "0", ":", "\n", "            ", "return", "super", "(", "ETE", ",", "self", ")", ".", "learn_batch", "(", "train_loader", ",", "train_dataset", ",", "model_save_dir", ",", "val_loader", ")", "\n", "\n", "# try to load model", "\n", "", "need_train", "=", "True", "\n", "if", "not", "self", ".", "overwrite", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "load_model", "(", "model_save_dir", ")", "\n", "need_train", "=", "False", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "# trains", "\n", "", "", "if", "need_train", ":", "\n", "            ", "if", "self", ".", "reset_optimizer", ":", "# Reset optimizer before learning each task", "\n", "                ", "self", ".", "log", "(", "'Optimizer is reset!'", ")", "\n", "self", ".", "init_optimizer", "(", ")", "\n", "\n", "# data weighting", "\n", "", "self", ".", "data_weighting", "(", "train_dataset", ")", "\n", "\n", "# Evaluate the performance of current task", "\n", "self", ".", "log", "(", "'Epoch:{epoch:.0f}/{total:.0f}'", ".", "format", "(", "epoch", "=", "0", ",", "total", "=", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ")", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                ", "self", ".", "validation", "(", "val_loader", ")", "\n", "\n", "", "losses", "=", "[", "AverageMeter", "(", ")", "for", "l", "in", "range", "(", "3", ")", "]", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "batch_timer", "=", "Timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ":", "\n", "                ", "self", ".", "epoch", "=", "epoch", "\n", "\n", "if", "epoch", ">", "0", ":", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                    ", "self", ".", "log", "(", "'LR:'", ",", "param_group", "[", "'lr'", "]", ")", "\n", "", "batch_timer", ".", "tic", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ",", "task", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "# verify in train mode", "\n", "                    ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "# send data to gpu", "\n", "if", "self", ".", "gpu", ":", "\n", "                        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "y", "=", "y", ".", "cuda", "(", ")", "\n", "\n", "# if KD", "\n", "", "if", "self", ".", "replay", ":", "\n", "                        ", "allowed_predictions", "=", "list", "(", "range", "(", "self", ".", "last_valid_out_dim", ")", ")", "\n", "y_hat", ",", "_", "=", "self", ".", "previous_teacher", ".", "generate_scores", "(", "x", ",", "allowed_predictions", "=", "allowed_predictions", ")", "\n", "", "else", ":", "\n", "                        ", "y_hat", "=", "None", "\n", "\n", "# model update - training data", "\n", "", "loss", ",", "loss_class", ",", "loss_distill", ",", "output", "=", "self", ".", "update_model", "(", "x", ",", "y", ",", "y_hat", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "batch_timer", ".", "toc", "(", ")", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "y", "=", "y", ".", "detach", "(", ")", "\n", "accumulate_acc", "(", "output", ",", "y", ",", "task", ",", "acc", ",", "topk", "=", "(", "self", ".", "top_k", ",", ")", ")", "\n", "losses", "[", "0", "]", ".", "update", "(", "loss", ",", "y", ".", "size", "(", "0", ")", ")", "\n", "losses", "[", "1", "]", ".", "update", "(", "loss_class", ",", "y", ".", "size", "(", "0", ")", ")", "\n", "losses", "[", "2", "]", ".", "update", "(", "loss_distill", ",", "y", ".", "size", "(", "0", ")", ")", "\n", "batch_timer", ".", "tic", "(", ")", "\n", "\n", "# eval update", "\n", "", "self", ".", "log", "(", "'Epoch:{epoch:.0f}/{total:.0f}'", ".", "format", "(", "epoch", "=", "self", ".", "epoch", "+", "1", ",", "total", "=", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "log", "(", "' * Loss {loss.avg:.3f} | Train Acc {acc.avg:.3f}'", ".", "format", "(", "loss", "=", "losses", "[", "0", "]", ",", "acc", "=", "acc", ")", ")", "\n", "self", ".", "log", "(", "' * Class Loss {loss.avg:.3f} | KD Loss {lossb.avg:.3f}'", ".", "format", "(", "loss", "=", "losses", "[", "1", "]", ",", "lossb", "=", "losses", "[", "2", "]", ")", ")", "\n", "\n", "# Evaluate the performance of current task", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                    ", "self", ".", "validation", "(", "val_loader", ")", "\n", "\n", "# reset", "\n", "", "losses", "=", "[", "AverageMeter", "(", ")", "for", "l", "in", "range", "(", "3", ")", "]", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "\n", "# new teacher", "\n", "", "", "teacher", "=", "Teacher", "(", "solver", "=", "self", ".", "model", ")", "\n", "self", ".", "current_teacher", "=", "copy", ".", "deepcopy", "(", "teacher", ")", "\n", "\n", "# Extend memory", "\n", "self", ".", "task_count", "+=", "1", "\n", "if", "self", ".", "memory_size", ">", "0", ":", "\n", "            ", "train_dataset", ".", "update_coreset_ete", "(", "self", ".", "memory_size", ",", "np", ".", "arange", "(", "self", ".", "valid_out_dim", ")", ",", "teacher", ")", "\n", "\n", "# trains", "\n", "", "if", "need_train", ":", "\n", "\n", "# part b", "\n", "# dataset tune", "\n", "            ", "train_dataset", ".", "load_dataset", "(", "train_dataset", ".", "t", ",", "train", "=", "True", ")", "\n", "train_dataset", ".", "append_coreset", "(", "only", "=", "True", ")", "\n", "\n", "self", ".", "config", "[", "'lr'", "]", "=", "self", ".", "config", "[", "'lr'", "]", "/", "1e2", "\n", "if", "len", "(", "self", ".", "config", "[", "'gpuid'", "]", ")", ">", "1", ":", "\n", "                ", "self", ".", "optimizer", ",", "self", ".", "scheduler", "=", "self", ".", "new_optimizer", "(", "self", ".", "model", ".", "module", ".", "last", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "optimizer", ",", "self", ".", "scheduler", "=", "self", ".", "new_optimizer", "(", "self", ".", "model", ".", "last", ")", "\n", "", "self", ".", "config", "[", "'lr'", "]", "=", "self", ".", "config", "[", "'lr'", "]", "*", "1e2", "\n", "\n", "# Evaluate the performance of current task", "\n", "self", ".", "log", "(", "'Balance Epoch:{epoch:.0f}/{total:.0f}'", ".", "format", "(", "epoch", "=", "0", ",", "total", "=", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ")", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                ", "self", ".", "validation", "(", "val_loader", ")", "\n", "\n", "", "losses", "=", "[", "AverageMeter", "(", ")", "for", "l", "in", "range", "(", "3", ")", "]", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "batch_timer", "=", "Timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ":", "\n", "                ", "self", ".", "epoch", "=", "epoch", "\n", "\n", "if", "epoch", ">", "0", ":", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                    ", "self", ".", "log", "(", "'LR:'", ",", "param_group", "[", "'lr'", "]", ")", "\n", "", "batch_timer", ".", "tic", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ",", "task", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "# verify in train mode", "\n", "                    ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "# send data to gpu", "\n", "if", "self", ".", "gpu", ":", "\n", "                        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "y", "=", "y", ".", "cuda", "(", ")", "\n", "\n", "# if KD", "\n", "", "if", "self", ".", "replay", ":", "\n", "                        ", "allowed_predictions", "=", "list", "(", "range", "(", "self", ".", "last_valid_out_dim", ")", ")", "\n", "y_hat", ",", "_", "=", "self", ".", "previous_teacher", ".", "generate_scores", "(", "x", ",", "allowed_predictions", "=", "allowed_predictions", ")", "\n", "y_hat_b", ",", "_", "=", "self", ".", "current_teacher", ".", "generate_scores", "(", "x", ",", "allowed_predictions", "=", "np", ".", "arange", "(", "self", ".", "last_valid_out_dim", ",", "self", ".", "valid_out_dim", ")", ")", "\n", "", "else", ":", "\n", "                        ", "y_hat", "=", "None", "\n", "\n", "# model update - training data", "\n", "", "loss", ",", "loss_class", ",", "loss_distill", ",", "output", "=", "self", ".", "update_model_b", "(", "x", ",", "y", ",", "y_hat", ",", "y_hat_b", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "batch_timer", ".", "toc", "(", ")", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "y", "=", "y", ".", "detach", "(", ")", "\n", "accumulate_acc", "(", "output", ",", "y", ",", "task", ",", "acc", ",", "topk", "=", "(", "self", ".", "top_k", ",", ")", ")", "\n", "losses", "[", "0", "]", ".", "update", "(", "loss", ",", "y", ".", "size", "(", "0", ")", ")", "\n", "losses", "[", "1", "]", ".", "update", "(", "loss_class", ",", "y", ".", "size", "(", "0", ")", ")", "\n", "losses", "[", "2", "]", ".", "update", "(", "loss_distill", ",", "y", ".", "size", "(", "0", ")", ")", "\n", "batch_timer", ".", "tic", "(", ")", "\n", "\n", "# eval update", "\n", "", "self", ".", "log", "(", "'Balanced Epoch:{epoch:.0f}/{total:.0f}'", ".", "format", "(", "epoch", "=", "self", ".", "epoch", "+", "1", ",", "total", "=", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "log", "(", "' * Loss {loss.avg:.3f} | Train Acc {acc.avg:.3f}'", ".", "format", "(", "loss", "=", "losses", "[", "0", "]", ",", "acc", "=", "acc", ")", ")", "\n", "self", ".", "log", "(", "' * Class Loss {loss.avg:.3f} | KD Loss {lossb.avg:.3f}'", ".", "format", "(", "loss", "=", "losses", "[", "1", "]", ",", "lossb", "=", "losses", "[", "2", "]", ")", ")", "\n", "\n", "# Evaluate the performance of current task", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                    ", "self", ".", "validation", "(", "val_loader", ")", "\n", "\n", "# reset", "\n", "", "losses", "=", "[", "AverageMeter", "(", ")", "for", "l", "in", "range", "(", "3", ")", "]", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "\n", "# dataset final", "\n", "", "train_dataset", ".", "load_dataset", "(", "train_dataset", ".", "t", ",", "train", "=", "True", ")", "\n", "train_dataset", ".", "append_coreset", "(", "only", "=", "False", ")", "\n", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "past_tasks", ".", "append", "(", "np", ".", "arange", "(", "self", ".", "last_valid_out_dim", ",", "self", ".", "valid_out_dim", ")", ")", "\n", "self", ".", "last_valid_out_dim", "=", "self", ".", "valid_out_dim", "\n", "self", ".", "first_task", "=", "False", "\n", "\n", "## for eval", "\n", "if", "self", ".", "previous_teacher", "is", "not", "None", ":", "\n", "            ", "self", ".", "previous_previous_teacher", "=", "self", ".", "previous_teacher", "\n", "\n", "# new teacher", "\n", "", "teacher", "=", "Teacher", "(", "solver", "=", "self", ".", "model", ")", "\n", "self", ".", "previous_teacher", "=", "copy", ".", "deepcopy", "(", "teacher", ")", "\n", "self", ".", "replay", "=", "True", "\n", "\n", "try", ":", "\n", "            ", "return", "batch_time", ".", "avg", "\n", "", "except", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.BIC.__init__": [[483, 486], ["kd.LWF.__init__"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "learner_config", ")", ":", "\n", "        ", "super", "(", "BIC", ",", "self", ")", ".", "__init__", "(", "learner_config", ")", "\n", "self", ".", "bic_layers", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.BIC.forward": [[487, 495], ["range", "kd.BIC.model.forward", "len"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y_hat", "=", "self", ".", "model", ".", "forward", "(", "x", ")", "[", ":", ",", ":", "self", ".", "valid_out_dim", "]", "\n", "\n", "# forward with bic", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "bic_layers", ")", ")", ":", "\n", "            ", "y_hat", "[", ":", ",", "self", ".", "bic_layers", "[", "i", "]", "[", "0", "]", "]", "=", "self", ".", "bic_layers", "[", "i", "]", "[", "1", "]", "(", "y_hat", "[", ":", ",", "self", ".", "bic_layers", "[", "i", "]", "[", "0", "]", "]", ")", "\n", "\n", "", "return", "y_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.BIC.update_model": [[496, 521], ["kd.BIC.forward", "kd.BIC.criterion", "kd.BIC.optimizer.zero_grad", "total_loss.backward", "kd.BIC.optimizer.step", "targets.long", "default.loss_fn_kd", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "total_loss.detach", "kd.BIC.detach", "torch.zeros().cuda.detach", "torch.zeros().cuda.detach", "numpy.arange", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "targets.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.criterion", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.loss_fn_kd", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["", "def", "update_model", "(", "self", ",", "inputs", ",", "targets", ",", "target_KD", "=", "None", ")", ":", "\n", "\n", "# classification loss", "\n", "        ", "dw_cls", "=", "self", ".", "dw_k", "[", "-", "1", "*", "torch", ".", "ones", "(", "targets", ".", "size", "(", ")", ")", ".", "long", "(", ")", "]", "\n", "logits", "=", "self", ".", "forward", "(", "inputs", ")", "\n", "loss_class", "=", "self", ".", "criterion", "(", "logits", ",", "targets", ".", "long", "(", ")", ",", "dw_cls", ")", "\n", "total_loss", "=", "loss_class", "\n", "\n", "# KD", "\n", "if", "target_KD", "is", "not", "None", ":", "\n", "\n", "            ", "mu", "=", "self", ".", "last_valid_out_dim", "/", "self", ".", "valid_out_dim", "\n", "total_loss", "=", "(", "1", "-", "mu", ")", "*", "total_loss", "\n", "\n", "dw_KD", "=", "self", ".", "dw_k", "[", "-", "1", "*", "torch", ".", "ones", "(", "len", "(", "target_KD", ")", ",", ")", ".", "long", "(", ")", "]", "\n", "logits_KD", "=", "logits", "\n", "loss_distill", "=", "loss_fn_kd", "(", "logits_KD", ",", "target_KD", ",", "dw_KD", ",", "np", ".", "arange", "(", "0", ",", "self", ".", "last_valid_out_dim", ")", ",", "self", ".", "DTemp", ")", "\n", "total_loss", "+=", "mu", "*", "loss_distill", "\n", "", "else", ":", "\n", "            ", "loss_distill", "=", "torch", ".", "zeros", "(", "(", "1", ",", ")", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "total_loss", ".", "detach", "(", ")", ",", "loss_class", ".", "detach", "(", ")", ",", "loss_distill", ".", "detach", "(", ")", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.BIC.learn_batch": [[523, 717], ["kd.BIC.model.eval", "kd.BIC.past_tasks.append", "kd.TeacherBiC", "copy.deepcopy", "kd.LWF.learn_batch", "train_dataset.load_dataset", "train_dataset.load_bic_dataset", "train_dataset.append_coreset_ic", "kd.BIC.model.eval", "kd.BIC.save_model", "train_dataset.load_dataset", "train_dataset.load_bic_dataset", "train_dataset.append_coreset_ic", "kd.BIC.bic_layers.append", "kd.BIC.new_optimizer", "kd.BIC.data_weighting", "kd.BIC.log", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.Timer", "range", "train_dataset.load_dataset", "train_dataset.append_coreset", "numpy.arange", "train_dataset.update_coreset_ic", "kd.BIC.load_model", "kd.BIC.log", "kd.BIC.init_optimizer", "kd.BIC.load_model", "kd.BIC.validation", "utils.metric.AverageMeter", "utils.metric.Timer.tic", "enumerate", "kd.BIC.log", "kd.BIC.log", "utils.metric.AverageMeter", "numpy.arange", "kd.BIC.data_weighting", "kd.BIC.log", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.Timer", "range", "numpy.arange", "models.resnet.BiasLayer().cuda", "range", "kd.BIC.scheduler.step", "kd.BIC.log", "kd.BIC.model.train", "kd.BIC.forward", "kd.BIC.criterion", "kd.BIC.optimizer.zero_grad", "kd.BIC.backward", "kd.BIC.optimizer.step", "utils.metric.AverageMeter.update", "y.cuda.cuda.detach", "default.accumulate_acc", "losses[].update", "utils.metric.Timer.tic", "kd.BIC.validation", "utils.metric.AverageMeter", "kd.BIC.validation", "utils.metric.AverageMeter", "utils.metric.Timer.tic", "enumerate", "kd.BIC.log", "kd.BIC.log", "kd.BIC.log", "utils.metric.AverageMeter", "x.cuda.cuda.cuda", "y.cuda.cuda.cuda", "y.cuda.cuda.long", "utils.metric.Timer.toc", "kd.BIC.detach", "y.cuda.cuda.size", "range", "range", "kd.BIC.scheduler.step", "kd.BIC.log", "kd.BIC.model.train", "kd.BIC.update_model", "utils.metric.AverageMeter.update", "y.cuda.cuda.detach", "default.accumulate_acc", "losses[].update", "losses[].update", "losses[].update", "utils.metric.Timer.tic", "kd.BIC.validation", "utils.metric.AverageMeter", "models.resnet.BiasLayer", "x.cuda.cuda.cuda", "y.cuda.cuda.cuda", "list", "kd.BIC.previous_teacher.generate_scores", "utils.metric.Timer.toc", "y.cuda.cuda.size", "y.cuda.cuda.size", "y.cuda.cuda.size", "range", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "range", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "y.cuda.cuda.size"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.learn_batch", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.load_dataset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.load_bic_dataset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.append_coreset_ic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.save_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.load_dataset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.load_bic_dataset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.append_coreset_ic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.new_optimizer", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.data_weighting", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.load_dataset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.append_coreset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.update_coreset_ic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.load_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.init_optimizer", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.load_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.data_weighting", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.criterion", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.accumulate_acc", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.toc", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.AlwaysBeDreaming.update_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.accumulate_acc", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr_helper.Scholar.generate_scores", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.toc"], ["", "def", "learn_batch", "(", "self", ",", "train_loader", ",", "train_dataset", ",", "model_save_dir", ",", "val_loader", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "task_count", "==", "0", ":", "\n", "            ", "return", "super", "(", "BIC", ",", "self", ")", ".", "learn_batch", "(", "train_loader", ",", "train_dataset", ",", "model_save_dir", ",", "val_loader", ")", "\n", "\n", "# try to load model", "\n", "", "need_train", "=", "True", "\n", "if", "not", "self", ".", "overwrite", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "load_model", "(", "model_save_dir", ")", "\n", "need_train", "=", "False", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "# trains", "\n", "", "", "if", "need_train", ":", "\n", "            ", "if", "self", ".", "reset_optimizer", ":", "# Reset optimizer before learning each task", "\n", "                ", "self", ".", "log", "(", "'Optimizer is reset!'", ")", "\n", "self", ".", "init_optimizer", "(", ")", "\n", "\n", "# dataset start", "\n", "", "train_dataset", ".", "load_dataset", "(", "train_dataset", ".", "t", ",", "train", "=", "True", ")", "\n", "train_dataset", ".", "load_bic_dataset", "(", ")", "\n", "train_dataset", ".", "append_coreset_ic", "(", ")", "\n", "\n", "try", ":", "\n", "                ", "self", ".", "load_model", "(", "model_save_dir", ",", "class_only", "=", "True", ")", "\n", "", "except", ":", "\n", "# data weighting", "\n", "                ", "self", ".", "data_weighting", "(", "train_dataset", ")", "\n", "\n", "# Evaluate the performance of current task", "\n", "self", ".", "log", "(", "'Epoch:{epoch:.0f}/{total:.0f}'", ".", "format", "(", "epoch", "=", "0", ",", "total", "=", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ")", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                    ", "self", ".", "validation", "(", "val_loader", ")", "\n", "\n", "", "losses", "=", "[", "AverageMeter", "(", ")", "for", "l", "in", "range", "(", "3", ")", "]", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "batch_timer", "=", "Timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ":", "\n", "                    ", "self", ".", "epoch", "=", "epoch", "\n", "\n", "if", "epoch", ">", "0", ":", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                        ", "self", ".", "log", "(", "'LR:'", ",", "param_group", "[", "'lr'", "]", ")", "\n", "", "batch_timer", ".", "tic", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ",", "task", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "# verify in train mode", "\n", "                        ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "# send data to gpu", "\n", "if", "self", ".", "gpu", ":", "\n", "                            ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "y", "=", "y", ".", "cuda", "(", ")", "\n", "\n", "# if KD", "\n", "", "if", "self", ".", "replay", ":", "\n", "                            ", "allowed_predictions", "=", "list", "(", "range", "(", "self", ".", "last_valid_out_dim", ")", ")", "\n", "y_hat", ",", "_", "=", "self", ".", "previous_teacher", ".", "generate_scores", "(", "x", ",", "allowed_predictions", "=", "allowed_predictions", ")", "\n", "", "else", ":", "\n", "                            ", "y_hat", "=", "None", "\n", "\n", "# model update - training data", "\n", "", "loss", ",", "loss_class", ",", "loss_distill", ",", "output", "=", "self", ".", "update_model", "(", "x", ",", "y", ",", "y_hat", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "batch_timer", ".", "toc", "(", ")", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "y", "=", "y", ".", "detach", "(", ")", "\n", "accumulate_acc", "(", "output", ",", "y", ",", "task", ",", "acc", ",", "topk", "=", "(", "self", ".", "top_k", ",", ")", ")", "\n", "losses", "[", "0", "]", ".", "update", "(", "loss", ",", "y", ".", "size", "(", "0", ")", ")", "\n", "losses", "[", "1", "]", ".", "update", "(", "loss_class", ",", "y", ".", "size", "(", "0", ")", ")", "\n", "losses", "[", "2", "]", ".", "update", "(", "loss_distill", ",", "y", ".", "size", "(", "0", ")", ")", "\n", "batch_timer", ".", "tic", "(", ")", "\n", "\n", "# eval update", "\n", "", "self", ".", "log", "(", "'Epoch:{epoch:.0f}/{total:.0f}'", ".", "format", "(", "epoch", "=", "self", ".", "epoch", "+", "1", ",", "total", "=", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "log", "(", "' * Loss {loss.avg:.3f} | Train Acc {acc.avg:.3f}'", ".", "format", "(", "loss", "=", "losses", "[", "0", "]", ",", "acc", "=", "acc", ")", ")", "\n", "self", ".", "log", "(", "' * Class Loss {loss.avg:.3f} | KD Loss {lossb.avg:.3f}'", ".", "format", "(", "loss", "=", "losses", "[", "1", "]", ",", "lossb", "=", "losses", "[", "2", "]", ")", ")", "\n", "\n", "# Evaluate the performance of current task", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                        ", "self", ".", "validation", "(", "val_loader", ")", "\n", "\n", "# reset", "\n", "", "losses", "=", "[", "AverageMeter", "(", ")", "for", "l", "in", "range", "(", "3", ")", "]", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "\n", "# save halfway point", "\n", "", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "save_model", "(", "model_save_dir", ",", "class_only", "=", "True", ")", "\n", "\n", "# part b", "\n", "# dataset tune", "\n", "train_dataset", ".", "load_dataset", "(", "train_dataset", ".", "t", ",", "train", "=", "True", ")", "\n", "train_dataset", ".", "load_bic_dataset", "(", "post", "=", "True", ")", "\n", "train_dataset", ".", "append_coreset_ic", "(", "post", "=", "True", ")", "\n", "\n", "# bias correction layer", "\n", "self", ".", "bic_layers", ".", "append", "(", "[", "np", ".", "arange", "(", "self", ".", "last_valid_out_dim", ",", "self", ".", "valid_out_dim", ")", ",", "BiasLayer", "(", ")", ".", "cuda", "(", ")", "]", ")", "\n", "self", ".", "config", "[", "'lr'", "]", "=", "self", ".", "config", "[", "'lr'", "]", "/", "1e2", "\n", "self", ".", "optimizer", ",", "self", ".", "scheduler", "=", "self", ".", "new_optimizer", "(", "self", ".", "bic_layers", "[", "-", "1", "]", "[", "1", "]", ")", "\n", "self", ".", "config", "[", "'lr'", "]", "=", "self", ".", "config", "[", "'lr'", "]", "*", "1e2", "\n", "\n", "# data weighting", "\n", "self", ".", "data_weighting", "(", "train_dataset", ")", "\n", "\n", "# Evaluate the performance of current task", "\n", "self", ".", "log", "(", "'Balance Epoch:{epoch:.0f}/{total:.0f}'", ".", "format", "(", "epoch", "=", "0", ",", "total", "=", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ")", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                ", "self", ".", "validation", "(", "val_loader", ")", "\n", "\n", "", "losses", "=", "[", "AverageMeter", "(", ")", "for", "l", "in", "range", "(", "1", ")", "]", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "batch_timer", "=", "Timer", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ":", "\n", "                ", "self", ".", "epoch", "=", "epoch", "\n", "\n", "if", "epoch", ">", "0", ":", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                    ", "self", ".", "log", "(", "'LR:'", ",", "param_group", "[", "'lr'", "]", ")", "\n", "", "batch_timer", ".", "tic", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ",", "task", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "# verify in train mode", "\n", "                    ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "# send data to gpu", "\n", "if", "self", ".", "gpu", ":", "\n", "                        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "y", "=", "y", ".", "cuda", "(", ")", "\n", "\n", "# model update - training data", "\n", "", "dw_cls", "=", "self", ".", "dw_k", "[", "-", "1", "*", "torch", ".", "ones", "(", "y", ".", "size", "(", ")", ")", ".", "long", "(", ")", "]", "\n", "output", "=", "self", ".", "forward", "(", "x", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "y", ".", "long", "(", ")", ",", "dw_cls", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "batch_timer", ".", "toc", "(", ")", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "y", "=", "y", ".", "detach", "(", ")", "\n", "accumulate_acc", "(", "output", ",", "y", ",", "task", ",", "acc", ",", "topk", "=", "(", "self", ".", "top_k", ",", ")", ")", "\n", "losses", "[", "0", "]", ".", "update", "(", "loss", ".", "detach", "(", ")", ",", "y", ".", "size", "(", "0", ")", ")", "\n", "batch_timer", ".", "tic", "(", ")", "\n", "\n", "# eval update", "\n", "", "self", ".", "log", "(", "'Balance Epoch:{epoch:.0f}/{total:.0f}'", ".", "format", "(", "epoch", "=", "self", ".", "epoch", "+", "1", ",", "total", "=", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "log", "(", "' * Loss {loss.avg:.3f} | Train Acc {acc.avg:.3f}'", ".", "format", "(", "loss", "=", "losses", "[", "0", "]", ",", "acc", "=", "acc", ")", ")", "\n", "\n", "# Evaluate the performance of current task", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                    ", "self", ".", "validation", "(", "val_loader", ")", "\n", "\n", "# reset", "\n", "", "losses", "=", "[", "AverageMeter", "(", ")", "for", "l", "in", "range", "(", "1", ")", "]", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "\n", "# dataset final", "\n", "", "train_dataset", ".", "load_dataset", "(", "train_dataset", ".", "t", ",", "train", "=", "True", ")", "\n", "train_dataset", ".", "append_coreset", "(", "only", "=", "False", ")", "\n", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "past_tasks", ".", "append", "(", "np", ".", "arange", "(", "self", ".", "last_valid_out_dim", ",", "self", ".", "valid_out_dim", ")", ")", "\n", "self", ".", "last_valid_out_dim", "=", "self", ".", "valid_out_dim", "\n", "self", ".", "first_task", "=", "False", "\n", "\n", "# for eval", "\n", "if", "self", ".", "previous_teacher", "is", "not", "None", ":", "\n", "            ", "self", ".", "previous_previous_teacher", "=", "self", ".", "previous_teacher", "\n", "\n", "# new teacher", "\n", "", "teacher", "=", "TeacherBiC", "(", "solver", "=", "self", ".", "model", ",", "bic_layers", "=", "self", ".", "bic_layers", ")", "\n", "self", ".", "previous_teacher", "=", "copy", ".", "deepcopy", "(", "teacher", ")", "\n", "self", ".", "replay", "=", "True", "\n", "\n", "# Extend memory", "\n", "self", ".", "task_count", "+=", "1", "\n", "if", "self", ".", "memory_size", ">", "0", ":", "\n", "            ", "train_dataset", ".", "update_coreset_ic", "(", "self", ".", "memory_size", ",", "np", ".", "arange", "(", "self", ".", "last_valid_out_dim", ")", ",", "teacher", ")", "\n", "\n", "", "try", ":", "\n", "            ", "return", "batch_time", ".", "avg", "\n", "", "except", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.BIC.save_model": [[718, 732], ["kd.BIC.model.state_dict", "[].state_dict.keys", "kd.BIC.log", "torch.save", "torch.save", "torch.save", "torch.save", "kd.BIC.log", "model_state[].cpu", "range", "[].state_dict", "[].state_dict.keys", "model_state[].cpu", "torch.save", "torch.save", "torch.save", "torch.save", "str"], "methods", ["None"], ["", "", "def", "save_model", "(", "self", ",", "filename", ",", "class_only", "=", "False", ")", ":", "\n", "        ", "model_state", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "for", "key", "in", "model_state", ".", "keys", "(", ")", ":", "# Always save it to cpu", "\n", "            ", "model_state", "[", "key", "]", "=", "model_state", "[", "key", "]", ".", "cpu", "(", ")", "\n", "", "self", ".", "log", "(", "'=> Saving class model to:'", ",", "filename", ")", "\n", "torch", ".", "save", "(", "model_state", ",", "filename", "+", "'class.pth'", ")", "\n", "self", ".", "log", "(", "'=> Save Done'", ")", "\n", "if", "not", "class_only", ":", "\n", "            ", "for", "tc", "in", "range", "(", "1", ",", "self", ".", "task_count", ")", ":", "\n", "                ", "tci", "=", "tc", "+", "1", "\n", "model_state", "=", "self", ".", "bic_layers", "[", "tc", "-", "1", "]", "[", "1", "]", ".", "state_dict", "(", ")", "\n", "for", "key", "in", "model_state", ".", "keys", "(", ")", ":", "# Always save it to cpu", "\n", "                    ", "model_state", "[", "key", "]", "=", "model_state", "[", "key", "]", ".", "cpu", "(", ")", "\n", "torch", ".", "save", "(", "model_state", ",", "filename", "+", "'BiC-'", "+", "str", "(", "tci", "+", "1", ")", "+", "'.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.BIC.load_model": [[733, 748], ["kd.BIC.model.load_state_dict", "kd.BIC.log", "kd.BIC.model.eval", "torch.load", "torch.load", "torch.load", "torch.load", "kd.BIC.model.cuda", "range", "bic_layers.append", "[].load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "models.resnet.BiasLayer().cuda", "models.resnet.BiasLayer", "str"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["", "", "", "", "def", "load_model", "(", "self", ",", "filename", ",", "class_only", "=", "False", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "'class.pth'", ")", ")", "\n", "self", ".", "log", "(", "'=> Load Done'", ")", "\n", "if", "self", ".", "gpu", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "if", "not", "class_only", ":", "\n", "            ", "bic_layers", "=", "[", "]", "\n", "for", "tc", "in", "range", "(", "1", ",", "self", ".", "task_count", "+", "1", ")", ":", "\n", "                ", "tci", "=", "tc", "+", "1", "\n", "bic_layers", ".", "append", "(", "[", "self", ".", "tasks", "[", "tc", "]", ",", "BiasLayer", "(", ")", ".", "cuda", "(", ")", "]", ")", "\n", "bic_layers", "[", "tc", "-", "1", "]", "[", "1", "]", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "'BiC-'", "+", "str", "(", "tci", "+", "1", ")", "+", "'.pth'", ")", ")", "\n", "\n", "", "", "self", ".", "bic_layers", "=", "bic_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.TeacherBiC.__init__": [[752, 757], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "solver", ",", "bic_layers", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "solver", "=", "solver", "\n", "self", ".", "bic_layers", "=", "bic_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.TeacherBiC.generate_scores": [[758, 778], ["kd.TeacherBiC.eval", "range", "torch.max", "torch.max", "torch.max", "torch.max", "kd.TeacherBiC.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "kd.TeacherBiC.solver.forward", "len"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "def", "generate_scores", "(", "self", ",", "x", ",", "allowed_predictions", "=", "None", ",", "threshold", "=", "None", ")", ":", "\n", "\n", "# set model to eval()-mode", "\n", "        ", "mode", "=", "self", ".", "training", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "# get predicted logit-scores", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "y_hat", "=", "self", ".", "solver", ".", "forward", "(", "x", ")", "\n", "\n", "# forward with bic", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "bic_layers", ")", ")", ":", "\n", "            ", "y_hat", "[", ":", ",", "self", ".", "bic_layers", "[", "i", "]", "[", "0", "]", "]", "=", "self", ".", "bic_layers", "[", "i", "]", "[", "1", "]", "(", "y_hat", "[", ":", ",", "self", ".", "bic_layers", "[", "i", "]", "[", "0", "]", "]", ")", "\n", "", "y_hat", "=", "y_hat", "[", ":", ",", "allowed_predictions", "]", "\n", "ymax", ",", "y", "=", "torch", ".", "max", "(", "y_hat", ",", "dim", "=", "1", ")", "\n", "\n", "# set model back to its initial mode", "\n", "self", ".", "train", "(", "mode", "=", "mode", ")", "\n", "\n", "return", "y_hat", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.TeacherBiC.generate_scores_pen": [[779, 793], ["kd.TeacherBiC.eval", "kd.TeacherBiC.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "kd.TeacherBiC.solver.forward"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "def", "generate_scores_pen", "(", "self", ",", "x", ")", ":", "\n", "\n", "# set model to eval()-mode", "\n", "        ", "mode", "=", "self", ".", "training", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "# get predicted logit-scores", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "y_hat", "=", "self", ".", "solver", ".", "forward", "(", "x", "=", "x", ",", "pen", "=", "True", ")", "\n", "\n", "# set model back to its initial mode", "\n", "", "self", ".", "train", "(", "mode", "=", "mode", ")", "\n", "\n", "return", "y_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.kd.get_one_hot": [[794, 798], ["torch.zeros().cuda", "torch.zeros().cuda", "one_hot.scatter.scatter", "target.long().view", "torch.zeros", "torch.zeros", "target.long"], "function", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["", "", "def", "get_one_hot", "(", "target", ",", "num_class", ")", ":", "\n", "    ", "one_hot", "=", "torch", ".", "zeros", "(", "target", ".", "shape", "[", "0", "]", ",", "num_class", ")", ".", "cuda", "(", ")", "\n", "one_hot", "=", "one_hot", ".", "scatter", "(", "1", ",", "target", ".", "long", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1.", ")", "\n", "return", "one_hot", "", "", ""]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr_helper.Scholar.__init__": [[6, 17], ["torch.nn.Module.__init__", "list", "list", "len", "dgr_helper.Scholar.stats.keys"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "generator", ",", "solver", ",", "stats", "=", "None", ",", "class_idx", "=", "None", ",", "temp", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "generator", "=", "generator", "\n", "self", ".", "solver", "=", "solver", "\n", "\n", "# get class keys", "\n", "if", "class_idx", "is", "not", "None", ":", "\n", "            ", "self", ".", "class_idx", "=", "list", "(", "class_idx", ")", "\n", "self", ".", "layer_idx", "=", "list", "(", "self", ".", "stats", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_k", "=", "len", "(", "self", ".", "class_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr_helper.Scholar.sample": [[19, 40], ["dgr_helper.Scholar.eval", "dgr_helper.Scholar.generator.sample", "torch.max", "dgr_helper.Scholar.train", "torch.no_grad", "dgr_helper.Scholar.solver.forward"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.sample", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "", "def", "sample", "(", "self", ",", "size", ",", "allowed_predictions", "=", "None", ",", "return_scores", "=", "False", ")", ":", "\n", "\n", "# set model to eval()-mode", "\n", "        ", "mode", "=", "self", ".", "training", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "# sample images", "\n", "x", "=", "self", ".", "generator", ".", "sample", "(", "size", ")", "\n", "\n", "# get predicted logit-scores", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "y_hat", "=", "self", ".", "solver", ".", "forward", "(", "x", ")", "\n", "", "y_hat", "=", "y_hat", "[", ":", ",", "allowed_predictions", "]", "\n", "\n", "# get predicted class-labels (indexed according to each class' position in [allowed_predictions]!)", "\n", "_", ",", "y", "=", "torch", ".", "max", "(", "y_hat", ",", "dim", "=", "1", ")", "\n", "\n", "# set model back to its initial mode", "\n", "self", ".", "train", "(", "mode", "=", "mode", ")", "\n", "\n", "return", "(", "x", ",", "y", ",", "y_hat", ")", "if", "return_scores", "else", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr_helper.Scholar.generate_scores": [[41, 59], ["dgr_helper.Scholar.eval", "torch.max", "dgr_helper.Scholar.train", "torch.no_grad", "dgr_helper.Scholar.solver.forward"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "def", "generate_scores", "(", "self", ",", "x", ",", "allowed_predictions", "=", "None", ")", ":", "\n", "\n", "# set model to eval()-mode", "\n", "        ", "mode", "=", "self", ".", "training", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "# get predicted logit-scores", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "y_hat", "=", "self", ".", "solver", ".", "forward", "(", "x", ")", "\n", "", "y_hat", "=", "y_hat", "[", ":", ",", "allowed_predictions", "]", "\n", "\n", "# get predicted class-labels (indexed according to each class' position in [allowed_predictions]!)", "\n", "_", ",", "y", "=", "torch", ".", "max", "(", "y_hat", ",", "dim", "=", "1", ")", "\n", "\n", "# set model back to its initial mode", "\n", "self", ".", "train", "(", "mode", "=", "mode", ")", "\n", "\n", "return", "y_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr_helper.Scholar.generate_scores_pen": [[60, 74], ["dgr_helper.Scholar.eval", "dgr_helper.Scholar.train", "torch.no_grad", "dgr_helper.Scholar.solver.forward"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "def", "generate_scores_pen", "(", "self", ",", "x", ")", ":", "\n", "\n", "# set model to eval()-mode", "\n", "        ", "mode", "=", "self", ".", "training", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "# get predicted logit-scores", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "y_hat", "=", "self", ".", "solver", ".", "forward", "(", "x", "=", "x", ",", "pen", "=", "True", ")", "\n", "\n", "# set model back to its initial mode", "\n", "", "self", ".", "train", "(", "mode", "=", "mode", ")", "\n", "\n", "return", "y_hat", "", "", "", ""]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr.Generative_Replay.__init__": [[13, 27], ["default.NormalNN.__init__", "dgr.Generative_Replay.create_generator", "torch.BCELoss", "torch.BCELoss", "dgr.Generative_Replay.new_optimizer", "dgr.Generative_Replay.cuda_gen"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.create_generator", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.new_optimizer", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.cuda_gen"], ["    ", "def", "__init__", "(", "self", ",", "learner_config", ")", ":", "\n", "        ", "super", "(", "Generative_Replay", ",", "self", ")", ".", "__init__", "(", "learner_config", ")", "\n", "self", ".", "generator", "=", "self", ".", "create_generator", "(", ")", "\n", "self", ".", "generative_replay", "=", "False", "\n", "self", ".", "previous_scholar", "=", "None", "\n", "self", ".", "generator", ".", "recon_criterion", "=", "nn", ".", "BCELoss", "(", "reduction", "=", "\"none\"", ")", "\n", "self", ".", "dw", "=", "self", ".", "config", "[", "'DW'", "]", "\n", "\n", "# generator optimizor", "\n", "self", ".", "generator", ".", "optimizer", ",", "self", ".", "generator_scheduler", "=", "self", ".", "new_optimizer", "(", "self", ".", "generator", ")", "\n", "\n", "# repeat call for generator network", "\n", "if", "self", ".", "gpu", ":", "\n", "            ", "self", ".", "cuda_gen", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr.Generative_Replay.learn_batch": [[32, 160], ["dgr.Generative_Replay.model.eval", "dgr.Generative_Replay.generator.eval", "dgr_helper.Scholar", "copy.deepcopy", "dgr.Generative_Replay.log", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.Timer", "range", "train_dataset.update_coreset", "dgr.Generative_Replay.load_model", "dgr.Generative_Replay.log", "dgr.Generative_Replay.init_optimizer", "dgr.Generative_Replay.new_optimizer", "dgr.Generative_Replay.validation", "utils.metric.Timer.tic", "enumerate", "dgr.Generative_Replay.log", "dgr.Generative_Replay.log", "dgr.Generative_Replay.log", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "numpy.arange", "dgr.Generative_Replay.scheduler.step", "dgr.Generative_Replay.generator_scheduler.step", "dgr.Generative_Replay.log", "dgr.Generative_Replay.model.train", "dgr.Generative_Replay.generator.train", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "dgr.Generative_Replay.update_model", "dgr.Generative_Replay.generator.train_batch", "utils.metric.AverageMeter.update", "y_com.detach.detach.detach", "default.accumulate_acc", "utils.metric.AverageMeter.update", "utils.metric.AverageMeter.update", "utils.metric.Timer.tic", "dgr.Generative_Replay.validation", "x.cuda.cuda.cuda", "y.cuda.cuda.cuda", "list", "dgr.Generative_Replay.previous_scholar.sample", "dgr.Generative_Replay.previous_scholar.generate_scores", "dgr.Generative_Replay.combine_data", "dgr.Generative_Replay.combine_data", "y_com.detach.detach.size", "mappings.cuda.cuda.cuda", "list", "utils.metric.Timer.toc", "y_com.detach.detach.size", "y_com.detach.detach.size", "range", "len", "y_com.detach.detach.long", "numpy.arange", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.update_coreset", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.load_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.init_optimizer", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.new_optimizer", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.AlwaysBeDreaming.update_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.train_batch", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.accumulate_acc", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.sample", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr_helper.Scholar.generate_scores", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.combine_data", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.combine_data", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.toc"], ["", "", "def", "learn_batch", "(", "self", ",", "train_loader", ",", "train_dataset", ",", "model_save_dir", ",", "val_loader", "=", "None", ")", ":", "\n", "\n", "# try to load model", "\n", "        ", "need_train", "=", "True", "\n", "if", "not", "self", ".", "overwrite", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "load_model", "(", "model_save_dir", ")", "\n", "need_train", "=", "False", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "# trains", "\n", "", "", "if", "need_train", ":", "\n", "            ", "if", "self", ".", "reset_optimizer", ":", "# Reset optimizer before learning each task", "\n", "                ", "self", ".", "log", "(", "'Optimizer is reset!'", ")", "\n", "self", ".", "init_optimizer", "(", ")", "\n", "self", ".", "generator", ".", "optimizer", ",", "self", ".", "generator_scheduler", "=", "self", ".", "new_optimizer", "(", "self", ".", "generator", ")", "\n", "\n", "# Evaluate the performance of current task", "\n", "", "self", ".", "log", "(", "'Epoch:{epoch:.0f}/{total:.0f}'", ".", "format", "(", "epoch", "=", "0", ",", "total", "=", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ")", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                ", "self", ".", "validation", "(", "val_loader", ")", "\n", "\n", "", "losses", "=", "AverageMeter", "(", ")", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "gen_losses", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "batch_timer", "=", "Timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ":", "\n", "                ", "self", ".", "epoch", "=", "epoch", "\n", "\n", "if", "epoch", ">", "0", ":", "\n", "                    ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "self", ".", "generator_scheduler", ".", "step", "(", ")", "\n", "", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                    ", "self", ".", "log", "(", "'LR:'", ",", "param_group", "[", "'lr'", "]", ")", "\n", "", "batch_timer", ".", "tic", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ",", "task", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "# verify in train mode", "\n", "                    ", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "generator", ".", "train", "(", ")", "\n", "\n", "# send data to gpu", "\n", "if", "self", ".", "gpu", ":", "\n", "                        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "y", "=", "y", ".", "cuda", "(", ")", "\n", "\n", "# data replay", "\n", "", "if", "not", "self", ".", "generative_replay", ":", "\n", "                        ", "x_replay", "=", "None", "#-> if no replay", "\n", "", "else", ":", "\n", "                        ", "allowed_predictions", "=", "list", "(", "range", "(", "self", ".", "last_valid_out_dim", ")", ")", "\n", "x_replay", ",", "y_replay", ",", "y_replay_hat", "=", "self", ".", "previous_scholar", ".", "sample", "(", "len", "(", "x", ")", ",", "allowed_predictions", "=", "allowed_predictions", ",", "\n", "return_scores", "=", "True", ")", "\n", "\n", "# if KD", "\n", "", "if", "self", ".", "generative_replay", ":", "\n", "                        ", "y_hat", "=", "self", ".", "previous_scholar", ".", "generate_scores", "(", "x", ",", "allowed_predictions", "=", "allowed_predictions", ")", "\n", "_", ",", "y_hat_com", "=", "self", ".", "combine_data", "(", "(", "(", "x", ",", "y_hat", ")", ",", "(", "x_replay", ",", "y_replay_hat", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "y_hat_com", "=", "None", "\n", "\n", "# combine inputs and generated samples for classification", "\n", "", "if", "self", ".", "generative_replay", ":", "\n", "                        ", "x_com", ",", "y_com", "=", "self", ".", "combine_data", "(", "(", "(", "x", ",", "y", ")", ",", "(", "x_replay", ",", "y_replay", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "x_com", ",", "y_com", "=", "x", ",", "y", "\n", "\n", "# dgr data weighting", "\n", "", "mappings", "=", "torch", ".", "ones", "(", "y_com", ".", "size", "(", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "self", ".", "gpu", ":", "\n", "                        ", "mappings", "=", "mappings", ".", "cuda", "(", ")", "\n", "", "rnt", "=", "1.0", "*", "self", ".", "last_valid_out_dim", "/", "self", ".", "valid_out_dim", "\n", "mappings", "[", ":", "self", ".", "last_valid_out_dim", "]", "=", "rnt", "\n", "mappings", "[", "self", ".", "last_valid_out_dim", ":", "]", "=", "1", "-", "rnt", "\n", "dw_cls", "=", "mappings", "[", "y_com", ".", "long", "(", ")", "]", "\n", "\n", "# model update", "\n", "loss", ",", "output", "=", "self", ".", "update_model", "(", "x_com", ",", "y_com", ",", "y_hat_com", ",", "dw_force", "=", "dw_cls", ",", "kd_index", "=", "np", ".", "arange", "(", "len", "(", "x", ")", ",", "len", "(", "x_com", ")", ")", ")", "\n", "\n", "# generator update", "\n", "loss_gen", "=", "self", ".", "generator", ".", "train_batch", "(", "x_com", ",", "dw_cls", ",", "list", "(", "range", "(", "self", ".", "valid_out_dim", ")", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "batch_timer", ".", "toc", "(", ")", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "y_com", "=", "y_com", ".", "detach", "(", ")", "\n", "accumulate_acc", "(", "output", ",", "y_com", ",", "task", ",", "acc", ",", "topk", "=", "(", "self", ".", "top_k", ",", ")", ")", "\n", "losses", ".", "update", "(", "loss", ",", "y_com", ".", "size", "(", "0", ")", ")", "\n", "gen_losses", ".", "update", "(", "loss_gen", ",", "y_com", ".", "size", "(", "0", ")", ")", "\n", "batch_timer", ".", "tic", "(", ")", "\n", "\n", "# eval update", "\n", "", "self", ".", "log", "(", "'Epoch:{epoch:.0f}/{total:.0f}'", ".", "format", "(", "epoch", "=", "self", ".", "epoch", "+", "1", ",", "total", "=", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "log", "(", "' * Loss {loss.avg:.3f} | Train Acc {acc.avg:.3f}'", ".", "format", "(", "loss", "=", "losses", ",", "acc", "=", "acc", ")", ")", "\n", "self", ".", "log", "(", "' * Gen Loss {loss.avg:.3f}'", ".", "format", "(", "loss", "=", "gen_losses", ")", ")", "\n", "\n", "# Evaluate the performance of current task", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                    ", "self", ".", "validation", "(", "val_loader", ")", "\n", "\n", "# reset", "\n", "", "losses", "=", "AverageMeter", "(", ")", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "gen_losses", "=", "AverageMeter", "(", ")", "\n", "\n", "", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "generator", ".", "eval", "(", ")", "\n", "\n", "self", ".", "last_valid_out_dim", "=", "self", ".", "valid_out_dim", "\n", "self", ".", "first_task", "=", "False", "\n", "\n", "# Extend memory", "\n", "self", ".", "task_count", "+=", "1", "\n", "if", "self", ".", "memory_size", ">", "0", ":", "\n", "            ", "train_dataset", ".", "update_coreset", "(", "self", ".", "memory_size", ",", "np", ".", "arange", "(", "self", ".", "last_valid_out_dim", ")", ")", "\n", "\n", "# new scholar", "\n", "", "scholar", "=", "Scholar", "(", "generator", "=", "self", ".", "generator", ",", "solver", "=", "self", ".", "model", ")", "\n", "self", ".", "previous_scholar", "=", "copy", ".", "deepcopy", "(", "scholar", ")", "\n", "self", ".", "generative_replay", "=", "True", "\n", "\n", "try", ":", "\n", "            ", "return", "batch_time", ".", "avg", "\n", "", "except", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr.Generative_Replay.save_model": [[165, 173], ["dgr.Generative_Replay.generator.state_dict", "dgr.Generative_Replay.keys", "dgr.Generative_Replay.log", "torch.save", "torch.save", "torch.save", "torch.save", "super().save_model", "model_state[].cpu"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.save_model"], ["", "", "def", "save_model", "(", "self", ",", "filename", ")", ":", "\n", "\n", "        ", "model_state", "=", "self", ".", "generator", ".", "state_dict", "(", ")", "\n", "for", "key", "in", "model_state", ".", "keys", "(", ")", ":", "# Always save it to cpu", "\n", "            ", "model_state", "[", "key", "]", "=", "model_state", "[", "key", "]", ".", "cpu", "(", ")", "\n", "", "self", ".", "log", "(", "'=> Saving generator model to:'", ",", "filename", ")", "\n", "torch", ".", "save", "(", "model_state", ",", "filename", "+", "'generator.pth'", ")", "\n", "super", "(", "Generative_Replay", ",", "self", ")", ".", "save_model", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr.Generative_Replay.load_model": [[174, 181], ["dgr.Generative_Replay.generator.load_state_dict", "dgr.Generative_Replay.generator.eval", "super().load_model", "torch.load", "torch.load", "torch.load", "torch.load", "dgr.Generative_Replay.generator.cuda"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.load_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["", "def", "load_model", "(", "self", ",", "filename", ")", ":", "\n", "\n", "        ", "self", ".", "generator", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "'generator.pth'", ")", ")", "\n", "if", "self", ".", "gpu", ":", "\n", "            ", "self", ".", "generator", "=", "self", ".", "generator", ".", "cuda", "(", ")", "\n", "", "self", ".", "generator", ".", "eval", "(", ")", "\n", "super", "(", "Generative_Replay", ",", "self", ")", ".", "load_model", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr.Generative_Replay.create_generator": [[182, 188], ["None"], "methods", ["None"], ["", "def", "create_generator", "(", "self", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", "\n", "\n", "# Define the backbone (MLP, LeNet, VGG, ResNet ... etc) of model", "\n", "generator", "=", "models", ".", "__dict__", "[", "cfg", "[", "'gen_model_type'", "]", "]", ".", "__dict__", "[", "cfg", "[", "'gen_model_name'", "]", "]", "(", ")", "\n", "return", "generator", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr.Generative_Replay.print_model": [[189, 193], ["super().print_model", "dgr.Generative_Replay.log", "dgr.Generative_Replay.log", "dgr.Generative_Replay.count_parameter_gen"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.print_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.count_parameter_gen"], ["", "def", "print_model", "(", "self", ")", ":", "\n", "        ", "super", "(", "Generative_Replay", ",", "self", ")", ".", "print_model", "(", ")", "\n", "self", ".", "log", "(", "self", ".", "generator", ")", "\n", "self", ".", "log", "(", "'#parameter of generator:'", ",", "self", ".", "count_parameter_gen", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr.Generative_Replay.reset_model": [[194, 197], ["super().reset_model", "dgr.Generative_Replay.generator.apply"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.reset_model"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "super", "(", "Generative_Replay", ",", "self", ")", ".", "reset_model", "(", ")", "\n", "self", ".", "generator", ".", "apply", "(", "weight_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr.Generative_Replay.count_parameter_gen": [[198, 200], ["sum", "p.numel", "dgr.Generative_Replay.generator.parameters"], "methods", ["None"], ["", "def", "count_parameter_gen", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "generator", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr.Generative_Replay.count_memory": [[201, 203], ["dgr.Generative_Replay.count_parameter", "dgr.Generative_Replay.count_parameter_gen"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.count_parameter", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.count_parameter_gen"], ["", "def", "count_memory", "(", "self", ",", "dataset_size", ")", ":", "\n", "        ", "return", "self", ".", "count_parameter", "(", ")", "+", "self", ".", "count_parameter_gen", "(", ")", "+", "self", ".", "memory_size", "*", "dataset_size", "[", "0", "]", "*", "dataset_size", "[", "1", "]", "*", "dataset_size", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr.Generative_Replay.cuda_gen": [[204, 210], ["dgr.Generative_Replay.generator.cuda", "len", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["", "def", "cuda_gen", "(", "self", ")", ":", "\n", "        ", "self", ".", "generator", "=", "self", ".", "generator", ".", "cuda", "(", ")", "\n", "# Multi-GPU", "\n", "if", "len", "(", "self", ".", "config", "[", "'gpuid'", "]", ")", ">", "1", ":", "\n", "            ", "self", ".", "generator", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "generator", ",", "device_ids", "=", "self", ".", "config", "[", "'gpuid'", "]", ",", "output_device", "=", "self", ".", "config", "[", "'gpuid'", "]", "[", "0", "]", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr.Generative_Replay.combine_data": [[211, 218], ["range", "len", "x.append", "y.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "combine_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", ",", "y", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "            ", "x", ".", "append", "(", "data", "[", "i", "]", "[", "0", "]", ")", "\n", "y", ".", "append", "(", "data", "[", "i", "]", "[", "1", "]", ")", "\n", "", "x", ",", "y", "=", "torch", ".", "cat", "(", "x", ")", ",", "torch", ".", "cat", "(", "y", ")", "\n", "return", "x", ",", "y", "", "", "", ""]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.__init__": [[15, 33], ["default.NormalNN.__init__", "torch.MSELoss", "torch.MSELoss", "datafree.DeepInversionGenBN.create_generator", "torch.optim.Adam", "torch.optim.Adam", "datafree.DeepInversionGenBN.cuda_gen", "datafree.DeepInversionGenBN.generator.parameters"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.create_generator", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.cuda_gen"], ["    ", "def", "__init__", "(", "self", ",", "learner_config", ")", ":", "\n", "        ", "super", "(", "DeepInversionGenBN", ",", "self", ")", ".", "__init__", "(", "learner_config", ")", "\n", "self", ".", "inversion_replay", "=", "False", "\n", "self", ".", "previous_teacher", "=", "None", "\n", "self", ".", "dw", "=", "self", ".", "config", "[", "'DW'", "]", "\n", "self", ".", "device", "=", "'cuda'", "if", "self", ".", "gpu", "else", "'cpu'", "\n", "self", ".", "power_iters", "=", "self", ".", "config", "[", "'power_iters'", "]", "\n", "self", ".", "deep_inv_params", "=", "self", ".", "config", "[", "'deep_inv_params'", "]", "\n", "self", ".", "kd_criterion", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "\"none\"", ")", "\n", "\n", "# gen parameters", "\n", "self", ".", "generator", "=", "self", ".", "create_generator", "(", ")", "\n", "self", ".", "generator_optimizer", "=", "Adam", "(", "params", "=", "self", ".", "generator", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "deep_inv_params", "[", "0", "]", ")", "\n", "self", ".", "beta", "=", "self", ".", "config", "[", "'beta'", "]", "\n", "\n", "# repeat call for generator network", "\n", "if", "self", ".", "gpu", ":", "\n", "            ", "self", ".", "cuda_gen", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.learn_batch": [[38, 164], ["datafree.DeepInversionGenBN.pre_steps", "datafree.DeepInversionGenBN.model.eval", "datafree_helper.Teacher", "datafree.DeepInversionGenBN.sample", "datafree.DeepInversionGenBN.data_weighting", "datafree.DeepInversionGenBN.log", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.Timer", "range", "len", "copy.deepcopy", "copy.deepcopy", "datafree.DeepInversionGenBN.load_model", "datafree.DeepInversionGenBN.log", "datafree.DeepInversionGenBN.init_optimizer", "datafree.DeepInversionGenBN.validation", "utils.metric.AverageMeter", "utils.metric.Timer.tic", "enumerate", "datafree.DeepInversionGenBN.log", "datafree.DeepInversionGenBN.log", "datafree.DeepInversionGenBN.log", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "copy.deepcopy", "numpy.arange", "range", "datafree.DeepInversionGenBN.scheduler.step", "datafree.DeepInversionGenBN.log", "datafree.DeepInversionGenBN.model.train", "datafree.DeepInversionGenBN.update_model", "utils.metric.AverageMeter.update", "y_com.detach.detach.detach", "default.accumulate_acc", "losses[].update", "losses[].update", "losses[].update", "utils.metric.Timer.tic", "datafree.DeepInversionGenBN.validation", "utils.metric.AverageMeter", "x.cuda.cuda.cuda", "y.cuda.cuda.cuda", "datafree.DeepInversionGenBN.sample", "datafree.DeepInversionGenBN.previous_teacher.generate_scores", "datafree.DeepInversionGenBN.combine_data", "datafree.DeepInversionGenBN.combine_data", "utils.metric.Timer.toc", "default.accumulate_acc", "y_com.detach.detach.size", "y_com.detach.detach.size", "y_com.detach.detach.size", "range", "len", "numpy.arange", "numpy.arange", "y_com.detach.detach.long", "len", "len"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.pre_steps", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.sample", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.data_weighting", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.load_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.init_optimizer", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.AlwaysBeDreaming.update_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.accumulate_acc", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.tic", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.validation", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.sample", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr_helper.Scholar.generate_scores", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.combine_data", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.combine_data", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.Timer.toc", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.accumulate_acc"], ["", "", "def", "learn_batch", "(", "self", ",", "train_loader", ",", "train_dataset", ",", "model_save_dir", ",", "val_loader", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "pre_steps", "(", ")", "\n", "\n", "# try to load model", "\n", "need_train", "=", "True", "\n", "if", "not", "self", ".", "overwrite", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "load_model", "(", "model_save_dir", ")", "\n", "need_train", "=", "False", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "# trains", "\n", "", "", "if", "need_train", ":", "\n", "            ", "if", "self", ".", "reset_optimizer", ":", "# Reset optimizer before learning each task", "\n", "                ", "self", ".", "log", "(", "'Optimizer is reset!'", ")", "\n", "self", ".", "init_optimizer", "(", ")", "\n", "\n", "# data weighting", "\n", "", "self", ".", "data_weighting", "(", "train_dataset", ")", "\n", "\n", "# Evaluate the performance of current task", "\n", "self", ".", "log", "(", "'Epoch:{epoch:.0f}/{total:.0f}'", ".", "format", "(", "epoch", "=", "0", ",", "total", "=", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ")", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                ", "self", ".", "validation", "(", "val_loader", ")", "\n", "\n", "", "losses", "=", "[", "AverageMeter", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "accg", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "batch_timer", "=", "Timer", "(", ")", "\n", "self", ".", "save_gen", "=", "False", "\n", "self", ".", "save_gen_later", "=", "False", "\n", "for", "epoch", "in", "range", "(", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ":", "\n", "                ", "self", ".", "epoch", "=", "epoch", "\n", "if", "epoch", ">", "0", ":", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                    ", "self", ".", "log", "(", "'LR:'", ",", "param_group", "[", "'lr'", "]", ")", "\n", "", "batch_timer", ".", "tic", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ",", "task", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "# verify in train mode", "\n", "                    ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "# send data to gpu", "\n", "if", "self", ".", "gpu", ":", "\n", "                        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "y", "=", "y", ".", "cuda", "(", ")", "\n", "\n", "# data replay", "\n", "", "if", "self", ".", "inversion_replay", ":", "\n", "                        ", "x_replay", ",", "y_replay", ",", "y_replay_hat", "=", "self", ".", "sample", "(", "self", ".", "previous_teacher", ",", "len", "(", "x", ")", ",", "self", ".", "device", ")", "\n", "\n", "# if KD", "\n", "", "if", "self", ".", "inversion_replay", ":", "\n", "                        ", "y_hat", "=", "self", ".", "previous_teacher", ".", "generate_scores", "(", "x", ",", "allowed_predictions", "=", "np", ".", "arange", "(", "self", ".", "last_valid_out_dim", ")", ")", "\n", "_", ",", "y_hat_com", "=", "self", ".", "combine_data", "(", "(", "(", "x", ",", "y_hat", ")", ",", "(", "x_replay", ",", "y_replay_hat", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "y_hat_com", "=", "None", "\n", "\n", "# combine inputs and generated samples for classification", "\n", "", "if", "self", ".", "inversion_replay", ":", "\n", "                        ", "x_com", ",", "y_com", "=", "self", ".", "combine_data", "(", "(", "(", "x", ",", "y", ")", ",", "(", "x_replay", ",", "y_replay", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "x_com", ",", "y_com", "=", "x", ",", "y", "\n", "\n", "# sd data weighting (NOT online learning compatible)", "\n", "", "if", "self", ".", "dw", ":", "\n", "                        ", "dw_cls", "=", "self", ".", "dw_k", "[", "y_com", ".", "long", "(", ")", "]", "\n", "", "else", ":", "\n", "                        ", "dw_cls", "=", "None", "\n", "\n", "# model update", "\n", "", "loss", ",", "loss_class", ",", "loss_kd", ",", "output", "=", "self", ".", "update_model", "(", "x_com", ",", "y_com", ",", "y_hat_com", ",", "dw_force", "=", "dw_cls", ",", "kd_index", "=", "np", ".", "arange", "(", "len", "(", "x", ")", ",", "len", "(", "x_com", ")", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "batch_timer", ".", "toc", "(", ")", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "y_com", "=", "y_com", ".", "detach", "(", ")", "\n", "accumulate_acc", "(", "output", "[", ":", "self", ".", "batch_size", "]", ",", "y_com", "[", ":", "self", ".", "batch_size", "]", ",", "task", ",", "acc", ",", "topk", "=", "(", "self", ".", "top_k", ",", ")", ")", "\n", "if", "self", ".", "inversion_replay", ":", "accumulate_acc", "(", "output", "[", "self", ".", "batch_size", ":", "]", ",", "y_com", "[", "self", ".", "batch_size", ":", "]", ",", "task", ",", "accg", ",", "topk", "=", "(", "self", ".", "top_k", ",", ")", ")", "\n", "losses", "[", "0", "]", ".", "update", "(", "loss", ",", "y_com", ".", "size", "(", "0", ")", ")", "\n", "losses", "[", "1", "]", ".", "update", "(", "loss_class", ",", "y_com", ".", "size", "(", "0", ")", ")", "\n", "losses", "[", "2", "]", ".", "update", "(", "loss_kd", ",", "y_com", ".", "size", "(", "0", ")", ")", "\n", "batch_timer", ".", "tic", "(", ")", "\n", "\n", "# eval update", "\n", "", "self", ".", "log", "(", "'Epoch:{epoch:.0f}/{total:.0f}'", ".", "format", "(", "epoch", "=", "self", ".", "epoch", "+", "1", ",", "total", "=", "self", ".", "config", "[", "'schedule'", "]", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "log", "(", "' * Loss {loss.avg:.3f} | CE Loss {lossb.avg:.3f} | KD Loss {lossc.avg:.3f}'", ".", "format", "(", "loss", "=", "losses", "[", "0", "]", ",", "lossb", "=", "losses", "[", "1", "]", ",", "lossc", "=", "losses", "[", "2", "]", ")", ")", "\n", "self", ".", "log", "(", "' * Train Acc {acc.avg:.3f} | Train Acc Gen {accg.avg:.3f}'", ".", "format", "(", "acc", "=", "acc", ",", "accg", "=", "accg", ")", ")", "\n", "\n", "# Evaluate the performance of current task", "\n", "if", "val_loader", "is", "not", "None", ":", "\n", "                    ", "self", ".", "validation", "(", "val_loader", ")", "\n", "\n", "# reset", "\n", "", "losses", "=", "[", "AverageMeter", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "accg", "=", "AverageMeter", "(", ")", "\n", "\n", "\n", "", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "last_last_valid_out_dim", "=", "self", ".", "last_valid_out_dim", "\n", "self", ".", "last_valid_out_dim", "=", "self", ".", "valid_out_dim", "\n", "self", ".", "first_task", "=", "False", "\n", "\n", "# for eval", "\n", "if", "self", ".", "previous_teacher", "is", "not", "None", ":", "\n", "            ", "self", ".", "previous_previous_teacher", "=", "self", ".", "previous_teacher", "\n", "\n", "# new teacher", "\n", "", "if", "(", "self", ".", "out_dim", "==", "self", ".", "valid_out_dim", ")", ":", "need_train", "=", "False", "\n", "self", ".", "previous_teacher", "=", "Teacher", "(", "solver", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", ",", "generator", "=", "self", ".", "generator", ",", "gen_opt", "=", "self", ".", "generator_optimizer", ",", "img_shape", "=", "(", "-", "1", ",", "train_dataset", ".", "nch", ",", "train_dataset", ".", "im_size", ",", "train_dataset", ".", "im_size", ")", ",", "iters", "=", "self", ".", "power_iters", ",", "deep_inv_params", "=", "self", ".", "deep_inv_params", ",", "class_idx", "=", "np", ".", "arange", "(", "self", ".", "valid_out_dim", ")", ",", "train", "=", "need_train", ",", "config", "=", "self", ".", "config", ")", "\n", "self", ".", "sample", "(", "self", ".", "previous_teacher", ",", "self", ".", "batch_size", ",", "self", ".", "device", ",", "return_scores", "=", "False", ")", "\n", "if", "len", "(", "self", ".", "config", "[", "'gpuid'", "]", ")", ">", "1", ":", "\n", "            ", "self", ".", "previous_linear", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ".", "module", ".", "last", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "previous_linear", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ".", "last", ")", "\n", "", "self", ".", "inversion_replay", "=", "True", "\n", "\n", "try", ":", "\n", "            ", "return", "batch_time", ".", "avg", "\n", "", "except", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.update_model": [[165, 200], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "datafree.DeepInversionGenBN.forward", "numpy.arange", "datafree.DeepInversionGenBN.criterion", "datafree.DeepInversionGenBN.optimizer.zero_grad", "total_loss.backward", "datafree.DeepInversionGenBN.optimizer.step", "targets[].long", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "total_loss.detach", "datafree.DeepInversionGenBN.detach", "torch.zeros().cuda.detach", "torch.zeros().cuda.detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "default.loss_fn_kd", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "default.loss_fn_kd", "numpy.arange().tolist", "numpy.arange().tolist", "targets.long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "numpy.arange", "numpy.arange", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "targets.size"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.criterion", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.loss_fn_kd", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.loss_fn_kd"], ["", "", "def", "update_model", "(", "self", ",", "inputs", ",", "targets", ",", "target_scores", "=", "None", ",", "dw_force", "=", "None", ",", "kd_index", "=", "None", ")", ":", "\n", "\n", "        ", "loss_kd", "=", "torch", ".", "zeros", "(", "(", "1", ",", ")", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "dw_force", "is", "not", "None", ":", "\n", "            ", "dw_cls", "=", "dw_force", "\n", "", "elif", "self", ".", "dw", ":", "\n", "            ", "dw_cls", "=", "self", ".", "dw_k", "[", "targets", ".", "long", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "dw_cls", "=", "self", ".", "dw_k", "[", "-", "1", "*", "torch", ".", "ones", "(", "targets", ".", "size", "(", ")", ")", ".", "long", "(", ")", "]", "\n", "\n", "# forward pass", "\n", "", "logits", "=", "self", ".", "forward", "(", "inputs", ")", "\n", "\n", "# classification ", "\n", "class_idx", "=", "np", ".", "arange", "(", "self", ".", "batch_size", ")", "\n", "loss_class", "=", "self", ".", "criterion", "(", "logits", "[", "class_idx", "]", ",", "targets", "[", "class_idx", "]", ".", "long", "(", ")", ",", "dw_cls", "[", "class_idx", "]", ")", "\n", "\n", "# KD old", "\n", "if", "target_scores", "is", "not", "None", ":", "\n", "            ", "loss_kd", "=", "self", ".", "mu", "*", "loss_fn_kd", "(", "logits", "[", "class_idx", "]", ",", "target_scores", "[", "class_idx", "]", ",", "dw_cls", "[", "class_idx", "]", ",", "np", ".", "arange", "(", "self", ".", "last_valid_out_dim", ")", ".", "tolist", "(", ")", ",", "self", ".", "DTemp", ")", "\n", "\n", "# KD new", "\n", "", "if", "target_scores", "is", "not", "None", ":", "\n", "            ", "target_scores", "=", "F", ".", "softmax", "(", "target_scores", "[", ":", ",", ":", "self", ".", "last_valid_out_dim", "]", "/", "self", ".", "DTemp", ",", "dim", "=", "1", ")", "\n", "target_scores", "=", "[", "target_scores", "]", "\n", "target_scores", ".", "append", "(", "torch", ".", "zeros", "(", "(", "len", "(", "targets", ")", ",", "self", ".", "valid_out_dim", "-", "self", ".", "last_valid_out_dim", ")", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", ")", "\n", "target_scores", "=", "torch", ".", "cat", "(", "target_scores", ",", "dim", "=", "1", ")", "\n", "loss_kd", "+=", "self", ".", "mu", "*", "loss_fn_kd", "(", "logits", "[", "kd_index", "]", ",", "target_scores", "[", "kd_index", "]", ",", "dw_cls", "[", "kd_index", "]", ",", "np", ".", "arange", "(", "self", ".", "valid_out_dim", ")", ".", "tolist", "(", ")", ",", "self", ".", "DTemp", ",", "soft_t", "=", "True", ")", "\n", "\n", "", "total_loss", "=", "loss_class", "+", "loss_kd", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "total_loss", ".", "detach", "(", ")", ",", "loss_class", ".", "detach", "(", ")", ",", "loss_kd", ".", "detach", "(", ")", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.combine_data": [[205, 212], ["range", "len", "x.append", "y.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "combine_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", ",", "y", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "            ", "x", ".", "append", "(", "data", "[", "i", "]", "[", "0", "]", ")", "\n", "y", ".", "append", "(", "data", "[", "i", "]", "[", "1", "]", ")", "\n", "", "x", ",", "y", "=", "torch", ".", "cat", "(", "x", ")", ",", "torch", ".", "cat", "(", "y", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.save_model": [[213, 221], ["datafree.DeepInversionGenBN.generator.state_dict", "datafree.DeepInversionGenBN.keys", "datafree.DeepInversionGenBN.log", "torch.save", "torch.save", "torch.save", "torch.save", "super().save_model", "model_state[].cpu"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.save_model"], ["", "def", "save_model", "(", "self", ",", "filename", ")", ":", "\n", "\n", "        ", "model_state", "=", "self", ".", "generator", ".", "state_dict", "(", ")", "\n", "for", "key", "in", "model_state", ".", "keys", "(", ")", ":", "# Always save it to cpu", "\n", "            ", "model_state", "[", "key", "]", "=", "model_state", "[", "key", "]", ".", "cpu", "(", ")", "\n", "", "self", ".", "log", "(", "'=> Saving generator model to:'", ",", "filename", ")", "\n", "torch", ".", "save", "(", "model_state", ",", "filename", "+", "'generator.pth'", ")", "\n", "super", "(", "DeepInversionGenBN", ",", "self", ")", ".", "save_model", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.load_model": [[222, 228], ["datafree.DeepInversionGenBN.generator.load_state_dict", "datafree.DeepInversionGenBN.generator.eval", "super().load_model", "torch.load", "torch.load", "torch.load", "torch.load", "datafree.DeepInversionGenBN.generator.cuda"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.load_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["", "def", "load_model", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "generator", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", "+", "'generator.pth'", ")", ")", "\n", "if", "self", ".", "gpu", ":", "\n", "            ", "self", ".", "generator", "=", "self", ".", "generator", ".", "cuda", "(", ")", "\n", "", "self", ".", "generator", ".", "eval", "(", ")", "\n", "super", "(", "DeepInversionGenBN", ",", "self", ")", ".", "load_model", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.create_generator": [[229, 235], ["None"], "methods", ["None"], ["", "def", "create_generator", "(", "self", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", "\n", "\n", "# Define the backbone (MLP, LeNet, VGG, ResNet ... etc) of model", "\n", "generator", "=", "models", ".", "__dict__", "[", "cfg", "[", "'gen_model_type'", "]", "]", ".", "__dict__", "[", "cfg", "[", "'gen_model_name'", "]", "]", "(", ")", "\n", "return", "generator", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.print_model": [[236, 240], ["super().print_model", "datafree.DeepInversionGenBN.log", "datafree.DeepInversionGenBN.log", "datafree.DeepInversionGenBN.count_parameter_gen"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.print_model", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.count_parameter_gen"], ["", "def", "print_model", "(", "self", ")", ":", "\n", "        ", "super", "(", "DeepInversionGenBN", ",", "self", ")", ".", "print_model", "(", ")", "\n", "self", ".", "log", "(", "self", ".", "generator", ")", "\n", "self", ".", "log", "(", "'#parameter of generator:'", ",", "self", ".", "count_parameter_gen", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.reset_model": [[241, 244], ["super().reset_model", "datafree.DeepInversionGenBN.generator.apply"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.reset_model"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "super", "(", "DeepInversionGenBN", ",", "self", ")", ".", "reset_model", "(", ")", "\n", "self", ".", "generator", ".", "apply", "(", "weight_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.count_parameter_gen": [[245, 247], ["sum", "p.numel", "datafree.DeepInversionGenBN.generator.parameters"], "methods", ["None"], ["", "def", "count_parameter_gen", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "generator", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.count_memory": [[248, 250], ["datafree.DeepInversionGenBN.count_parameter", "datafree.DeepInversionGenBN.count_parameter_gen"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.count_parameter", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.count_parameter_gen"], ["", "def", "count_memory", "(", "self", ",", "dataset_size", ")", ":", "\n", "        ", "return", "self", ".", "count_parameter", "(", ")", "+", "self", ".", "count_parameter_gen", "(", ")", "+", "self", ".", "memory_size", "*", "dataset_size", "[", "0", "]", "*", "dataset_size", "[", "1", "]", "*", "dataset_size", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.cuda_gen": [[251, 254], ["datafree.DeepInversionGenBN.generator.cuda"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["", "def", "cuda_gen", "(", "self", ")", ":", "\n", "        ", "self", ".", "generator", "=", "self", ".", "generator", ".", "cuda", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionGenBN.sample": [[255, 257], ["teacher.sample"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.sample"], ["", "def", "sample", "(", "self", ",", "teacher", ",", "dim", ",", "device", ",", "return_scores", "=", "True", ")", ":", "\n", "        ", "return", "teacher", ".", "sample", "(", "dim", ",", "device", ",", "return_scores", "=", "return_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionLWF.__init__": [[260, 263], ["datafree.DeepInversionGenBN.__init__", "torch.KLDivLoss().cuda", "torch.KLDivLoss().cuda", "torch.KLDivLoss", "torch.KLDivLoss"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["    ", "def", "__init__", "(", "self", ",", "learner_config", ")", ":", "\n", "        ", "super", "(", "DeepInversionLWF", ",", "self", ")", ".", "__init__", "(", "learner_config", ")", "\n", "self", ".", "kl_loss", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'batchmean'", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.DeepInversionLWF.update_model": [[264, 291], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "datafree.DeepInversionLWF.forward", "numpy.arange", "datafree.DeepInversionLWF.criterion", "datafree.DeepInversionLWF.optimizer.zero_grad", "total_loss.backward", "datafree.DeepInversionLWF.optimizer.step", "targets[].long", "total_loss.detach", "datafree.DeepInversionLWF.detach", "torch.zeros().cuda.detach", "torch.zeros().cuda.detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "default.loss_fn_kd", "numpy.arange().tolist", "targets.long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "numpy.arange", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "targets.size"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.criterion", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.loss_fn_kd"], ["", "def", "update_model", "(", "self", ",", "inputs", ",", "targets", ",", "target_scores", "=", "None", ",", "dw_force", "=", "None", ",", "kd_index", "=", "None", ")", ":", "\n", "\n", "        ", "loss_kd", "=", "torch", ".", "zeros", "(", "(", "1", ",", ")", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "dw_force", "is", "not", "None", ":", "\n", "            ", "dw_cls", "=", "dw_force", "\n", "", "elif", "self", ".", "dw", ":", "\n", "            ", "dw_cls", "=", "self", ".", "dw_k", "[", "targets", ".", "long", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "dw_cls", "=", "self", ".", "dw_k", "[", "-", "1", "*", "torch", ".", "ones", "(", "targets", ".", "size", "(", ")", ")", ".", "long", "(", ")", "]", "\n", "\n", "# forward pass", "\n", "", "logits", "=", "self", ".", "forward", "(", "inputs", ")", "\n", "\n", "# classification ", "\n", "class_idx", "=", "np", ".", "arange", "(", "self", ".", "batch_size", ")", "\n", "loss_class", "=", "self", ".", "criterion", "(", "logits", "[", "class_idx", "]", ",", "targets", "[", "class_idx", "]", ".", "long", "(", ")", ",", "dw_cls", "[", "class_idx", "]", ")", "\n", "\n", "# KD", "\n", "if", "target_scores", "is", "not", "None", ":", "\n", "            ", "loss_kd", "=", "self", ".", "mu", "*", "loss_fn_kd", "(", "logits", ",", "target_scores", ",", "dw_cls", ",", "np", ".", "arange", "(", "self", ".", "last_valid_out_dim", ")", ".", "tolist", "(", ")", ",", "self", ".", "DTemp", ")", "\n", "\n", "", "total_loss", "=", "loss_class", "+", "loss_kd", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "total_loss", ".", "detach", "(", ")", ",", "loss_class", ".", "detach", "(", ")", ",", "loss_kd", ".", "detach", "(", ")", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.AlwaysBeDreaming.__init__": [[294, 297], ["datafree.DeepInversionGenBN.__init__", "torch.KLDivLoss().cuda", "torch.KLDivLoss().cuda", "torch.KLDivLoss", "torch.KLDivLoss"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["    ", "def", "__init__", "(", "self", ",", "learner_config", ")", ":", "\n", "        ", "super", "(", "AlwaysBeDreaming", ",", "self", ")", ".", "__init__", "(", "learner_config", ")", "\n", "self", ".", "kl_loss", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'batchmean'", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.datafree.AlwaysBeDreaming.update_model": [[298, 354], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "datafree.AlwaysBeDreaming.model.forward", "numpy.arange", "datafree.AlwaysBeDreaming.optimizer.zero_grad", "total_loss.backward", "datafree.AlwaysBeDreaming.optimizer.step", "targets.size", "mappings.cuda.cuda.cuda", "len", "datafree.AlwaysBeDreaming.model.module.last", "datafree.AlwaysBeDreaming.model.last", "datafree.AlwaysBeDreaming.criterion", "datafree.AlwaysBeDreaming.criterion", "numpy.arange", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "total_loss.detach", "datafree.AlwaysBeDreaming.detach", "torch.zeros().cuda.detach", "torch.zeros().cuda.detach", "targets.long", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "datafree.AlwaysBeDreaming.model.forward().detach", "len", "datafree.AlwaysBeDreaming.criterion", "datafree.AlwaysBeDreaming.criterion", "targets[].long", "datafree.AlwaysBeDreaming.previous_linear", "datafree.AlwaysBeDreaming.previous_linear", "logits_KD.size", "datafree.AlwaysBeDreaming.model.module.last", "targets.long", "datafree.AlwaysBeDreaming.model.last", "targets.long", "datafree.AlwaysBeDreaming.previous_teacher.generate_scores_pen", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "datafree.AlwaysBeDreaming.model.forward", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "datafree.AlwaysBeDreaming.kd_criterion().sum", "len", "datafree.AlwaysBeDreaming.kd_criterion"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.criterion", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.criterion", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.criterion", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.criterion", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr_helper.Scholar.generate_scores_pen", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "def", "update_model", "(", "self", ",", "inputs", ",", "targets", ",", "target_scores", "=", "None", ",", "dw_force", "=", "None", ",", "kd_index", "=", "None", ")", ":", "\n", "\n", "# class balancing", "\n", "        ", "mappings", "=", "torch", ".", "ones", "(", "targets", ".", "size", "(", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "self", ".", "gpu", ":", "\n", "            ", "mappings", "=", "mappings", ".", "cuda", "(", ")", "\n", "", "rnt", "=", "1.0", "*", "self", ".", "last_valid_out_dim", "/", "self", ".", "valid_out_dim", "\n", "mappings", "[", ":", "self", ".", "last_valid_out_dim", "]", "=", "rnt", "\n", "mappings", "[", "self", ".", "last_valid_out_dim", ":", "]", "=", "1", "-", "rnt", "\n", "dw_cls", "=", "mappings", "[", "targets", ".", "long", "(", ")", "]", "\n", "\n", "# forward pass", "\n", "logits_pen", "=", "self", ".", "model", ".", "forward", "(", "x", "=", "inputs", ",", "pen", "=", "True", ")", "\n", "if", "len", "(", "self", ".", "config", "[", "'gpuid'", "]", ")", ">", "1", ":", "\n", "            ", "logits", "=", "self", ".", "model", ".", "module", ".", "last", "(", "logits_pen", ")", "\n", "", "else", ":", "\n", "            ", "logits", "=", "self", ".", "model", ".", "last", "(", "logits_pen", ")", "\n", "\n", "# classification ", "\n", "", "class_idx", "=", "np", ".", "arange", "(", "self", ".", "batch_size", ")", "\n", "if", "self", ".", "inversion_replay", ":", "\n", "\n", "# local classification", "\n", "            ", "loss_class", "=", "self", ".", "criterion", "(", "logits", "[", "class_idx", ",", "self", ".", "last_valid_out_dim", ":", "self", ".", "valid_out_dim", "]", ",", "(", "targets", "[", "class_idx", "]", "-", "self", ".", "last_valid_out_dim", ")", ".", "long", "(", ")", ",", "dw_cls", "[", "class_idx", "]", ")", "\n", "\n", "# ft classification  ", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "feat_class", "=", "self", ".", "model", ".", "forward", "(", "x", "=", "inputs", ",", "pen", "=", "True", ")", ".", "detach", "(", ")", "\n", "", "if", "len", "(", "self", ".", "config", "[", "'gpuid'", "]", ")", ">", "1", ":", "\n", "                ", "loss_class", "+=", "self", ".", "criterion", "(", "self", ".", "model", ".", "module", ".", "last", "(", "feat_class", ")", ",", "targets", ".", "long", "(", ")", ",", "dw_cls", ")", "\n", "", "else", ":", "\n", "                ", "loss_class", "+=", "self", ".", "criterion", "(", "self", ".", "model", ".", "last", "(", "feat_class", ")", ",", "targets", ".", "long", "(", ")", ",", "dw_cls", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "loss_class", "=", "self", ".", "criterion", "(", "logits", "[", "class_idx", "]", ",", "targets", "[", "class_idx", "]", ".", "long", "(", ")", ",", "dw_cls", "[", "class_idx", "]", ")", "\n", "\n", "# KD", "\n", "", "if", "target_scores", "is", "not", "None", ":", "\n", "\n", "# hard - linear", "\n", "            ", "kd_index", "=", "np", ".", "arange", "(", "2", "*", "self", ".", "batch_size", ")", "\n", "dw_KD", "=", "self", ".", "dw_k", "[", "-", "1", "*", "torch", ".", "ones", "(", "len", "(", "kd_index", ")", ",", ")", ".", "long", "(", ")", "]", "\n", "logits_KD", "=", "self", ".", "previous_linear", "(", "logits_pen", "[", "kd_index", "]", ")", "[", ":", ",", ":", "self", ".", "last_valid_out_dim", "]", "\n", "logits_KD_past", "=", "self", ".", "previous_linear", "(", "self", ".", "previous_teacher", ".", "generate_scores_pen", "(", "inputs", "[", "kd_index", "]", ")", ")", "[", ":", ",", ":", "self", ".", "last_valid_out_dim", "]", "\n", "loss_kd", "=", "self", ".", "mu", "*", "(", "self", ".", "kd_criterion", "(", "logits_KD", ",", "logits_KD_past", ")", ".", "sum", "(", "dim", "=", "1", ")", "*", "dw_KD", ")", ".", "mean", "(", ")", "/", "(", "logits_KD", ".", "size", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "loss_kd", "=", "torch", ".", "zeros", "(", "(", "1", ",", ")", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "", "total_loss", "=", "loss_class", "+", "loss_kd", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "\n", "# step", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "total_loss", ".", "detach", "(", ")", ",", "loss_class", ".", "detach", "(", ")", ",", "loss_kd", ".", "detach", "(", ")", ",", "logits", "", "", "", ""]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.resnet.LambdaLayer.__init__": [[38, 41], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.resnet.LambdaLayer.forward": [[42, 44], ["resnet.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.resnet.BasicBlock.__init__": [[48, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "'A'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "'A'", ":", "\n", "                ", "\"\"\"\n                For CIFAR10 ResNet paper uses option A.\n                \"\"\"", "\n", "self", ".", "shortcut", "=", "LambdaLayer", "(", "lambda", "x", ":", "\n", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "planes", "//", "4", ",", "planes", "//", "4", ")", ",", "\"constant\"", ",", "0", ")", ")", "\n", "", "elif", "option", "==", "'B'", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.resnet.BasicBlock.forward": [[69, 75], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.resnet.ResNet.__init__": [[77, 89], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.apply"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "last", "=", "nn", ".", "Linear", "(", "64", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.resnet.ResNet._make_layer": [[90, 98], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.resnet.ResNet.forward": [[99, 111], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.last", "resnet.ResNet.conv1", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "pen", "=", "False", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "pen", ":", "\n", "            ", "return", "out", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "last", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.resnet.BiasLayer.__init__": [[119, 123], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BiasLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "requires_grad", "=", "True", ",", "device", "=", "\"cuda\"", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "requires_grad", "=", "True", ",", "device", "=", "\"cuda\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.resnet.BiasLayer.forward": [[124, 126], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "alpha", "*", "x", "+", "self", ".", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.resnet.BiasLayer.printParam": [[127, 129], ["print", "resnet.BiasLayer.alpha.item", "resnet.BiasLayer.beta.item"], "methods", ["None"], ["", "def", "printParam", "(", "self", ",", "i", ")", ":", "\n", "        ", "print", "(", "i", ",", "self", ".", "alpha", ".", "item", "(", ")", ",", "self", ".", "beta", ".", "item", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.resnet._weights_init": [[32, 36], ["isinstance", "isinstance", "torch.kaiming_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "#print(classname)", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.resnet.resnet32": [[112, 114], ["resnet.ResNet"], "function", ["None"], ["", "", "", "def", "resnet32", "(", "out_dim", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "num_classes", "=", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.resnet.resnet18": [[115, 117], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet18", "(", "out_dim", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.generator.Generator.__init__": [[14, 36], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "zdim", ",", "in_channel", ",", "img_sz", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "zdim", "\n", "\n", "self", ".", "init_size", "=", "img_sz", "//", "4", "\n", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "zdim", ",", "128", "*", "self", ".", "init_size", "**", "2", ")", ")", "\n", "\n", "self", ".", "conv_blocks0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", ")", "\n", "self", ".", "conv_blocks1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "conv_blocks2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "0.8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "in_channel", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channel", ",", "affine", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.generator.Generator.forward": [[38, 47], ["generator.Generator.l1", "out.view.view.view", "generator.Generator.conv_blocks0", "torch.functional.interpolate", "torch.functional.interpolate", "generator.Generator.conv_blocks1", "torch.functional.interpolate", "torch.functional.interpolate", "generator.Generator.conv_blocks2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "out", "=", "self", ".", "l1", "(", "z", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "128", ",", "self", ".", "init_size", ",", "self", ".", "init_size", ")", "\n", "img", "=", "self", ".", "conv_blocks0", "(", "out", ")", "\n", "img", "=", "nn", ".", "functional", ".", "interpolate", "(", "img", ",", "scale_factor", "=", "2", ")", "\n", "img", "=", "self", ".", "conv_blocks1", "(", "img", ")", "\n", "img", "=", "nn", ".", "functional", ".", "interpolate", "(", "img", ",", "scale_factor", "=", "2", ")", "\n", "img", "=", "self", ".", "conv_blocks2", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.generator.Generator.sample": [[48, 55], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "z.cuda.cuda.cuda", "generator.Generator.forward"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "def", "sample", "(", "self", ",", "size", ")", ":", "\n", "\n", "# sample z", "\n", "        ", "z", "=", "torch", ".", "randn", "(", "size", ",", "self", ".", "z_dim", ")", "\n", "z", "=", "z", ".", "cuda", "(", ")", "\n", "X", "=", "self", ".", "forward", "(", "z", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.generator.GeneratorMed.__init__": [[57, 84], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "zdim", ",", "in_channel", ",", "img_sz", ")", ":", "\n", "        ", "super", "(", "GeneratorMed", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "zdim", "\n", "\n", "self", ".", "init_size", "=", "img_sz", "//", "8", "\n", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "zdim", ",", "128", "*", "self", ".", "init_size", "**", "2", ")", ")", "\n", "\n", "self", ".", "conv_blocks0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", ")", "\n", "self", ".", "conv_blocks1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "conv_blocks2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "conv_blocks3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "0.8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "in_channel", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channel", ",", "affine", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.generator.GeneratorMed.forward": [[86, 97], ["generator.GeneratorMed.l1", "out.view.view.view", "generator.GeneratorMed.conv_blocks0", "torch.functional.interpolate", "torch.functional.interpolate", "generator.GeneratorMed.conv_blocks1", "torch.functional.interpolate", "torch.functional.interpolate", "generator.GeneratorMed.conv_blocks2", "torch.functional.interpolate", "torch.functional.interpolate", "generator.GeneratorMed.conv_blocks3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "out", "=", "self", ".", "l1", "(", "z", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "128", ",", "self", ".", "init_size", ",", "self", ".", "init_size", ")", "\n", "img", "=", "self", ".", "conv_blocks0", "(", "out", ")", "\n", "img", "=", "nn", ".", "functional", ".", "interpolate", "(", "img", ",", "scale_factor", "=", "2", ")", "\n", "img", "=", "self", ".", "conv_blocks1", "(", "img", ")", "\n", "img", "=", "nn", ".", "functional", ".", "interpolate", "(", "img", ",", "scale_factor", "=", "2", ")", "\n", "img", "=", "self", ".", "conv_blocks2", "(", "img", ")", "\n", "img", "=", "nn", ".", "functional", ".", "interpolate", "(", "img", ",", "scale_factor", "=", "2", ")", "\n", "img", "=", "self", ".", "conv_blocks3", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.generator.GeneratorMed.sample": [[98, 105], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "z.cuda.cuda.cuda", "generator.GeneratorMed.forward"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "def", "sample", "(", "self", ",", "size", ")", ":", "\n", "\n", "# sample z", "\n", "        ", "z", "=", "torch", ".", "randn", "(", "size", ",", "self", ".", "z_dim", ")", "\n", "z", "=", "z", ".", "cuda", "(", ")", "\n", "X", "=", "self", ".", "forward", "(", "z", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.generator.GeneratorBig.__init__": [[107, 146], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "zdim", ",", "in_channel", ",", "img_sz", ")", ":", "\n", "        ", "super", "(", "GeneratorBig", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "zdim", "\n", "\n", "self", ".", "init_size", "=", "img_sz", "//", "(", "2", "**", "5", ")", "\n", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "zdim", ",", "64", "*", "self", ".", "init_size", "**", "2", ")", ")", "\n", "\n", "self", ".", "conv_blocks0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", ")", "\n", "self", ".", "conv_blocks1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "0.8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "conv_blocks2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "0.8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "conv_blocks3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "0.8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "conv_blocks4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "0.8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "conv_blocks5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "0.8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "conv_blocks6", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "in_channel", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channel", ",", "affine", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.generator.GeneratorBig.forward": [[148, 164], ["generator.GeneratorBig.l1", "out.view.view.view", "generator.GeneratorBig.conv_blocks0", "torch.functional.interpolate", "torch.functional.interpolate", "generator.GeneratorBig.conv_blocks1", "torch.functional.interpolate", "torch.functional.interpolate", "generator.GeneratorBig.conv_blocks2", "torch.functional.interpolate", "torch.functional.interpolate", "generator.GeneratorBig.conv_blocks3", "torch.functional.interpolate", "torch.functional.interpolate", "generator.GeneratorBig.conv_blocks4", "torch.functional.interpolate", "torch.functional.interpolate", "generator.GeneratorBig.conv_blocks5", "generator.GeneratorBig.conv_blocks6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "out", "=", "self", ".", "l1", "(", "z", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "64", ",", "self", ".", "init_size", ",", "self", ".", "init_size", ")", "\n", "img", "=", "self", ".", "conv_blocks0", "(", "out", ")", "\n", "img", "=", "nn", ".", "functional", ".", "interpolate", "(", "img", ",", "scale_factor", "=", "2", ")", "\n", "img", "=", "self", ".", "conv_blocks1", "(", "img", ")", "\n", "img", "=", "nn", ".", "functional", ".", "interpolate", "(", "img", ",", "scale_factor", "=", "2", ")", "\n", "img", "=", "self", ".", "conv_blocks2", "(", "img", ")", "\n", "img", "=", "nn", ".", "functional", ".", "interpolate", "(", "img", ",", "scale_factor", "=", "2", ")", "\n", "img", "=", "self", ".", "conv_blocks3", "(", "img", ")", "\n", "img", "=", "nn", ".", "functional", ".", "interpolate", "(", "img", ",", "scale_factor", "=", "2", ")", "\n", "img", "=", "self", ".", "conv_blocks4", "(", "img", ")", "\n", "img", "=", "nn", ".", "functional", ".", "interpolate", "(", "img", ",", "scale_factor", "=", "2", ")", "\n", "img", "=", "self", ".", "conv_blocks5", "(", "img", ")", "\n", "img", "=", "self", ".", "conv_blocks6", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.generator.GeneratorBig.sample": [[165, 172], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "z.cuda.cuda.cuda", "generator.GeneratorBig.forward"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward"], ["", "def", "sample", "(", "self", ",", "size", ")", ":", "\n", "\n", "# sample z", "\n", "        ", "z", "=", "torch", ".", "randn", "(", "size", ",", "self", ".", "z_dim", ")", "\n", "z", "=", "z", ".", "cuda", "(", ")", "\n", "X", "=", "self", ".", "forward", "(", "z", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.generator.CIFAR_GEN": [[173, 175], ["generator.Generator"], "function", ["None"], ["", "", "def", "CIFAR_GEN", "(", "bn", "=", "False", ")", ":", "\n", "    ", "return", "Generator", "(", "zdim", "=", "1000", ",", "in_channel", "=", "3", ",", "img_sz", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.generator.TINYIMNET_GEN": [[176, 178], ["generator.GeneratorMed"], "function", ["None"], ["", "def", "TINYIMNET_GEN", "(", "bn", "=", "False", ")", ":", "\n", "   ", "return", "GeneratorMed", "(", "zdim", "=", "1000", ",", "in_channel", "=", "3", ",", "img_sz", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.generator.IMNET_GEN": [[179, 181], ["generator.GeneratorBig"], "function", ["None"], ["", "def", "IMNET_GEN", "(", "bn", "=", "False", ")", ":", "\n", "    ", "return", "GeneratorBig", "(", "zdim", "=", "1000", ",", "in_channel", "=", "3", ",", "img_sz", "=", "224", ")", "", "", ""]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.__init__": [[22, 63], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "autoencoder.AutoEncoder._linear", "autoencoder.AutoEncoder._linear", "autoencoder.AutoEncoder._linear", "autoencoder.AutoEncoder._conv", "autoencoder.AutoEncoder._conv", "autoencoder.AutoEncoder._conv", "autoencoder.AutoEncoder._deconv", "autoencoder.AutoEncoder._deconv", "autoencoder.AutoEncoder._deconv", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder._linear", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder._linear", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder._linear", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder._conv", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder._conv", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder._conv", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder._deconv", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder._deconv", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder._deconv"], ["    ", "def", "__init__", "(", "self", ",", "kernel_num", ",", "in_channel", "=", "1", ",", "img_sz", "=", "32", ",", "hidden_dim", "=", "256", ",", "z_size", "=", "100", ",", "bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "AutoEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "BN", "=", "bn", "\n", "self", ".", "in_dim", "=", "in_channel", "*", "img_sz", "*", "img_sz", "\n", "self", ".", "image_size", "=", "img_sz", "\n", "self", ".", "channel_num", "=", "in_channel", "\n", "self", ".", "kernel_num", "=", "kernel_num", "\n", "self", ".", "z_size", "=", "z_size", "\n", "\n", "# -weigths of different components of the loss function", "\n", "self", ".", "lamda_rcl", "=", "1.", "\n", "self", ".", "lamda_vl", "=", "1.", "\n", "\n", "# Training related components that should be set before training", "\n", "# -criterion for reconstruction", "\n", "self", ".", "recon_criterion", "=", "None", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "_conv", "(", "in_channel", ",", "64", ")", ",", "\n", "self", ".", "_conv", "(", "64", ",", "128", ")", ",", "\n", "self", ".", "_conv", "(", "128", ",", "512", ")", ",", "\n", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "_deconv", "(", "512", ",", "256", ")", ",", "\n", "self", ".", "_deconv", "(", "256", ",", "64", ")", ",", "\n", "self", ".", "_deconv", "(", "64", ",", "in_channel", ",", "ReLU", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "feature_size", "=", "img_sz", "//", "8", "\n", "\n", "\n", "self", ".", "kernel_num", "=", "512", "\n", "self", ".", "feature_volume", "=", "self", ".", "kernel_num", "*", "(", "self", ".", "feature_size", "**", "2", ")", "\n", "\n", "# q", "\n", "self", ".", "q_mean", "=", "self", ".", "_linear", "(", "self", ".", "feature_volume", ",", "z_size", ",", "relu", "=", "False", ")", "\n", "self", ".", "q_logvar", "=", "self", ".", "_linear", "(", "self", ".", "feature_volume", ",", "z_size", ",", "relu", "=", "False", ")", "\n", "\n", "# projection", "\n", "self", ".", "project", "=", "self", ".", "_linear", "(", "z_size", ",", "self", ".", "feature_volume", ",", "relu", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.reparameterize": [[65, 70], ["logvar.mul().exp_", "logvar.mul().exp_.new().normal_", "logvar.mul().exp_.new().normal_.mul().add_", "logvar.mul", "logvar.mul().exp_.new", "logvar.mul().exp_.new().normal_.mul", "logvar.mul().exp_.size"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "'''Perform \"reparametrization trick\" to make these stochastic variables differentiable.'''", "\n", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "eps", "=", "std", ".", "new", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward": [[71, 78], ["autoencoder.AutoEncoder.encode", "autoencoder.AutoEncoder.decode", "autoencoder.AutoEncoder.reparameterize"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.encode", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.decode", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.reparameterize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "# encode (forward), reparameterize and decode (backward)", "\n", "        ", "mu", ",", "logvar", ",", "hE", "=", "self", ".", "encode", "(", "x", ")", "\n", "z", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "if", "self", ".", "training", "else", "mu", "\n", "x_recon", "=", "self", ".", "decode", "(", "z", ")", "\n", "return", "(", "x_recon", ",", "mu", ",", "logvar", ",", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.sample": [[79, 93], ["autoencoder.AutoEncoder.eval", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "z.cuda.cuda.cuda", "autoencoder.AutoEncoder.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "autoencoder.AutoEncoder.decode"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.decode"], ["", "def", "sample", "(", "self", ",", "size", ")", ":", "\n", "\n", "# set model to eval()-mode", "\n", "            ", "mode", "=", "self", ".", "training", "\n", "self", ".", "eval", "(", ")", "\n", "# sample z", "\n", "z", "=", "torch", ".", "randn", "(", "size", ",", "self", ".", "z_size", ")", "\n", "z", "=", "z", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "X", "=", "self", ".", "decode", "(", "z", ")", "\n", "# set model back to its initial mode", "\n", "", "self", ".", "train", "(", "mode", "=", "mode", ")", "\n", "# return samples as [batch_size]x[channels]x[image_size]x[image_size] tensor, plus classes-labels", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.loss_function": [[94, 115], ["x.size", "autoencoder.AutoEncoder.recon_criterion().mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "variatL.cuda.cuda.cuda", "autoencoder.AutoEncoder.recon_criterion", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "recon_x.view", "x.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "logvar.exp", "mu.pow"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda"], ["", "def", "loss_function", "(", "self", ",", "recon_x", ",", "x", ",", "dw", ",", "mu", "=", "None", ",", "logvar", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "###-----Reconstruction loss-----###", "\n", "reconL", "=", "(", "self", ".", "recon_criterion", "(", "input", "=", "recon_x", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "target", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ")", ")", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "reconL", "=", "torch", ".", "mean", "(", "reconL", "*", "dw", ")", "\n", "\n", "###-----Variational loss-----###", "\n", "if", "logvar", "is", "not", "None", ":", "\n", "#---- see Appendix B from: Kingma and Welling. Auto-Encoding Variational Bayes. ICLR, 2014 ----#", "\n", "            ", "variatL", "=", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "logvar", "-", "mu", ".", "pow", "(", "2", ")", "-", "logvar", ".", "exp", "(", ")", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "# -normalise by same number of elements as in reconstruction", "\n", "variatL", "/=", "self", ".", "in_dim", "\n", "# --> because self.recon_criterion averages over batch-size but also over all pixels/elements in recon!!", "\n", "\n", "", "else", ":", "\n", "            ", "variatL", "=", "torch", ".", "tensor", "(", "0.", ")", "\n", "variatL", "=", "variatL", ".", "cuda", "(", ")", "\n", "\n", "# Return a tuple of the calculated losses", "\n", "", "return", "reconL", ",", "variatL", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.train_batch": [[116, 139], ["autoencoder.AutoEncoder.train", "autoencoder.AutoEncoder.forward", "autoencoder.AutoEncoder.loss_function", "autoencoder.AutoEncoder.optimizer.zero_grad", "loss_total.backward", "autoencoder.AutoEncoder.optimizer.step", "loss_total.detach"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.forward", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.loss_function"], ["", "def", "train_batch", "(", "self", ",", "x", ",", "data_weights", ",", "allowed_predictions", ")", ":", "\n", "        ", "'''Train model for one batch ([x],[y]), possibly supplemented with replayed data ([x_],[y_]).\n\n        [x]               <tensor> batch of inputs (could be None, in which case only 'replayed' data is used)'''", "\n", "\n", "# Set model to training-mode", "\n", "self", ".", "train", "(", ")", "\n", "\n", "##--(1)-- CURRENT DATA --##", "\n", "# Run the model", "\n", "recon_batch", ",", "mu", ",", "logvar", ",", "z", "=", "self", ".", "forward", "(", "x", ")", "\n", "\n", "# Calculate all losses", "\n", "reconL", ",", "variatL", "=", "self", ".", "loss_function", "(", "recon_x", "=", "recon_batch", ",", "x", "=", "x", ",", "dw", "=", "data_weights", ",", "mu", "=", "mu", ",", "logvar", "=", "logvar", ")", "\n", "\n", "# Weigh losses as requested", "\n", "loss_total", "=", "self", ".", "lamda_rcl", "*", "reconL", "+", "self", ".", "lamda_vl", "*", "variatL", "\n", "\n", "# perform update", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_total", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "loss_total", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.decode": [[140, 148], ["autoencoder.AutoEncoder.project().view", "autoencoder.AutoEncoder.decoder", "autoencoder.AutoEncoder.project"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "        ", "'''Pass latent variable activations through feedback connections, to give reconstructed image [image_recon].'''", "\n", "z_projected", "=", "self", ".", "project", "(", "z", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "kernel_num", ",", "\n", "self", ".", "feature_size", ",", "\n", "self", ".", "feature_size", ",", "\n", ")", "\n", "return", "self", ".", "decoder", "(", "z_projected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.encode": [[149, 156], ["autoencoder.AutoEncoder.encoder", "autoencoder.AutoEncoder.q"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.q"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Pass input through feed-forward connections, to get [hE], [z_mean] and [z_logvar].'''", "\n", "# encode x", "\n", "encoded", "=", "self", ".", "encoder", "(", "x", ")", "\n", "# sample latent code z from q given x.", "\n", "z_mean", ",", "z_logvar", "=", "self", ".", "q", "(", "encoded", ")", "\n", "return", "z_mean", ",", "z_logvar", ",", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder.q": [[157, 160], ["encoded.view", "autoencoder.AutoEncoder.q_mean", "autoencoder.AutoEncoder.q_logvar"], "methods", ["None"], ["", "def", "q", "(", "self", ",", "encoded", ")", ":", "\n", "        ", "unrolled", "=", "encoded", ".", "view", "(", "-", "1", ",", "self", ".", "feature_volume", ")", "\n", "return", "self", ".", "q_mean", "(", "unrolled", ")", ",", "self", ".", "q_logvar", "(", "unrolled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder._conv": [[161, 178], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_conv", "(", "self", ",", "channel_size", ",", "kernel_num", ",", "kernel_size_", "=", "4", ",", "stride_", "=", "2", ")", ":", "\n", "        ", "if", "self", ".", "BN", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "channel_size", ",", "kernel_num", ",", "\n", "kernel_size", "=", "kernel_size_", ",", "stride", "=", "stride_", ",", "padding", "=", "1", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "kernel_num", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "channel_size", ",", "kernel_num", ",", "\n", "kernel_size", "=", "kernel_size_", ",", "stride", "=", "stride_", ",", "padding", "=", "1", ",", "\n", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder._deconv": [[180, 213], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["None"], ["", "", "def", "_deconv", "(", "self", ",", "channel_num", ",", "kernel_num", ",", "ReLU", "=", "True", ",", "kernel_size_", "=", "4", ",", "stride_", "=", "2", ")", ":", "\n", "        ", "if", "ReLU", ":", "\n", "            ", "if", "self", ".", "BN", ":", "\n", "                ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "channel_num", ",", "kernel_num", ",", "\n", "kernel_size", "=", "kernel_size_", ",", "stride", "=", "stride_", ",", "padding", "=", "1", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "kernel_num", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "channel_num", ",", "kernel_num", ",", "\n", "kernel_size", "=", "kernel_size_", ",", "stride", "=", "stride_", ",", "padding", "=", "1", ",", "\n", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "BN", ":", "\n", "                ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "channel_num", ",", "kernel_num", ",", "\n", "kernel_size", "=", "kernel_size_", ",", "stride", "=", "stride_", ",", "padding", "=", "1", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "kernel_num", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "channel_num", ",", "kernel_num", ",", "\n", "kernel_size", "=", "kernel_size_", ",", "stride", "=", "stride_", ",", "padding", "=", "1", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.AutoEncoder._linear": [[216, 221], ["torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "", "", "def", "_linear", "(", "self", ",", "in_size", ",", "out_size", ",", "relu", "=", "True", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_size", ",", "out_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "if", "relu", "else", "nn", ".", "Linear", "(", "in_size", ",", "out_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.models.autoencoder.CIFAR_GEN": [[222, 224], ["autoencoder.AutoEncoder"], "function", ["None"], ["", "", "def", "CIFAR_GEN", "(", "bn", "=", "False", ")", ":", "\n", "    ", "return", "AutoEncoder", "(", "in_channel", "=", "3", ",", "img_sz", "=", "32", ",", "kernel_num", "=", "512", ",", "z_size", "=", "1024", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.utils.get_transform": [[23, 71], ["torchvision.transforms.Compose", "len", "transform_list.extend", "transform_list.extend", "transform_list.extend", "transform_list.extend", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "get_transform", "(", "dataset", "=", "'cifar100'", ",", "phase", "=", "'test'", ",", "aug", "=", "True", ",", "dgr", "=", "False", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "\n", "# get crop size", "\n", "crop_size", "=", "dataset_stats", "[", "dataset", "]", "[", "'size'", "]", "\n", "\n", "# get mean and std", "\n", "dset_mean", "=", "dataset_stats", "[", "dataset", "]", "[", "'mean'", "]", "\n", "dset_std", "=", "dataset_stats", "[", "dataset", "]", "[", "'std'", "]", "\n", "if", "dgr", ":", "\n", "        ", "if", "len", "(", "dset_mean", ")", "==", "1", ":", "\n", "            ", "dset_mean", "=", "(", "0.0", ",", ")", "\n", "dset_std", "=", "(", "1.0", ",", ")", "\n", "", "else", ":", "\n", "            ", "dset_mean", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", "\n", "dset_std", "=", "(", "1.0", ",", "1.0", ",", "1.0", ")", "\n", "\n", "", "", "if", "phase", "==", "'train'", "and", "aug", ":", "\n", "        ", "if", "dataset", "==", "'ImageNet'", ":", "\n", "            ", "transform_list", ".", "extend", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "dset_mean", ",", "dset_std", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "transform_list", ".", "extend", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "63", "/", "255", ",", "contrast", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "crop_size", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "dset_mean", ",", "dset_std", ")", ",", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "dataset", "==", "'ImageNet'", ":", "\n", "            ", "transform_list", ".", "extend", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "dset_mean", ",", "dset_std", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "transform_list", ".", "extend", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "dset_mean", ",", "dset_std", ")", ",", "\n", "]", ")", "\n", "\n", "", "", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.utils.check_integrity": [[72, 84], ["hashlib.md5", "hashlib.md5.hexdigest", "os.path.isfile", "os.path.isfile", "open", "iter", "hashlib.md5.update", "f.read"], "function", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.utils.metric.AverageMeter.update"], ["", "def", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "\n", "        ", "return", "False", "\n", "", "md5o", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "fpath", ",", "'rb'", ")", "as", "f", ":", "\n", "# read in 1MB chunks", "\n", "        ", "for", "chunk", "in", "iter", "(", "lambda", ":", "f", ".", "read", "(", "1024", "*", "1024", ")", ",", "b''", ")", ":", "\n", "            ", "md5o", ".", "update", "(", "chunk", ")", "\n", "", "", "md5c", "=", "md5o", ".", "hexdigest", "(", ")", "\n", "if", "md5c", "!=", "md5", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.utils.download_url": [[85, 112], ["os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.path.isfile", "os.path.isfile", "utils.check_integrity", "print", "print", "urllib.request.urlretrieve", "url.replace.replace", "print", "urllib.request.urlretrieve"], "function", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.utils.check_integrity"], ["", "def", "download_url", "(", "url", ",", "root", ",", "filename", ",", "md5", ")", ":", "\n", "    ", "from", "six", ".", "moves", "import", "urllib", "\n", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "root", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "==", "errno", ".", "EEXIST", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n", "# downloads file", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "fpath", ")", "and", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "        ", "print", "(", "'Using downloaded and verified file: '", "+", "fpath", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "'Downloading '", "+", "url", "+", "' to '", "+", "fpath", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "fpath", ")", "\n", "", "except", ":", "\n", "            ", "if", "url", "[", ":", "5", "]", "==", "'https'", ":", "\n", "                ", "url", "=", "url", ".", "replace", "(", "'https:'", ",", "'http:'", ")", "\n", "print", "(", "'Failed download. Trying https -> http instead.'", "\n", "' Downloading '", "+", "url", "+", "' to '", "+", "fpath", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "fpath", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__init__": [[26, 108], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "loader.iDataset.load", "len", "numpy.asarray", "numpy.asarray", "numpy.unique", "numpy.random.get_state", "numpy.random.seed", "numpy.random.permutation", "numpy.random.set_state", "int", "range", "len", "loader.iDataset.archive.append", "numpy.zeros", "numpy.zeros", "len", "locs_val.extend", "locs_train.extend", "loader.iDataset.archive.append", "loader.iDataset.archive.append", "numpy.isin().nonzero", "numpy.arange", "numpy.arange", "numpy.isin().nonzero", "numpy.isin().nonzero", "loader.iDataset.data[].copy", "loader.iDataset.targets[].copy", "[].copy", "[].copy", "[].copy", "[].copy", "numpy.isin", "numpy.isin", "numpy.isin"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "\n", "train", "=", "True", ",", "transform", "=", "None", ",", "download_flag", "=", "False", ",", "\n", "tasks", "=", "None", ",", "seed", "=", "-", "1", ",", "validation", "=", "False", ",", "kfolds", "=", "5", ")", ":", "\n", "\n", "# process rest of args", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "self", ".", "validation", "=", "validation", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "t", "=", "-", "1", "\n", "self", ".", "tasks", "=", "tasks", "\n", "self", ".", "download_flag", "=", "download_flag", "\n", "self", ".", "ic_dict", "=", "{", "}", "\n", "self", ".", "ic", "=", "False", "\n", "self", ".", "dw", "=", "True", "\n", "\n", "# load dataset", "\n", "self", ".", "load", "(", ")", "\n", "self", ".", "num_classes", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "targets", ")", ")", "\n", "\n", "# remap labels to match task order", "\n", "c", "=", "0", "\n", "self", ".", "class_mapping", "=", "{", "}", "\n", "self", ".", "class_mapping", "[", "-", "1", "]", "=", "-", "1", "\n", "for", "task", "in", "self", ".", "tasks", ":", "\n", "            ", "for", "k", "in", "task", ":", "\n", "                ", "self", ".", "class_mapping", "[", "k", "]", "=", "c", "\n", "c", "+=", "1", "\n", "\n", "# targets as numpy.array", "\n", "", "", "self", ".", "data", "=", "np", ".", "asarray", "(", "self", ".", "data", ")", "\n", "self", ".", "targets", "=", "np", ".", "asarray", "(", "self", ".", "targets", ")", "\n", "\n", "# if validation", "\n", "if", "self", ".", "validation", ":", "\n", "\n", "# shuffle", "\n", "            ", "state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "randomize", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "targets", ")", ")", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "randomize", "]", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", "randomize", "]", "\n", "np", ".", "random", ".", "set_state", "(", "state", ")", "\n", "\n", "# sample", "\n", "num_data_per_fold", "=", "int", "(", "len", "(", "self", ".", "targets", ")", "/", "kfolds", ")", "\n", "start", "=", "0", "\n", "stop", "=", "num_data_per_fold", "\n", "locs_train", "=", "[", "]", "\n", "locs_val", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "kfolds", ")", ":", "\n", "                ", "if", "self", ".", "seed", "==", "f", ":", "\n", "                    ", "locs_val", ".", "extend", "(", "np", ".", "arange", "(", "start", ",", "stop", ")", ")", "\n", "", "else", ":", "\n", "                    ", "locs_train", ".", "extend", "(", "np", ".", "arange", "(", "start", ",", "stop", ")", ")", "\n", "", "start", "+=", "num_data_per_fold", "\n", "stop", "+=", "num_data_per_fold", "\n", "\n", "# train set", "\n", "", "if", "self", ".", "train", ":", "\n", "                ", "self", ".", "archive", "=", "[", "]", "\n", "for", "task", "in", "self", ".", "tasks", ":", "\n", "                    ", "locs", "=", "np", ".", "isin", "(", "self", ".", "targets", "[", "locs_train", "]", ",", "task", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "self", ".", "archive", ".", "append", "(", "(", "self", ".", "data", "[", "locs_train", "]", "[", "locs", "]", ".", "copy", "(", ")", ",", "self", ".", "targets", "[", "locs_train", "]", "[", "locs", "]", ".", "copy", "(", ")", ")", ")", "\n", "\n", "# val set", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "archive", "=", "[", "]", "\n", "for", "task", "in", "self", ".", "tasks", ":", "\n", "                    ", "locs", "=", "np", ".", "isin", "(", "self", ".", "targets", "[", "locs_val", "]", ",", "task", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "self", ".", "archive", ".", "append", "(", "(", "self", ".", "data", "[", "locs_val", "]", "[", "locs", "]", ".", "copy", "(", ")", ",", "self", ".", "targets", "[", "locs_val", "]", "[", "locs", "]", ".", "copy", "(", ")", ")", ")", "\n", "\n", "# else", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "archive", "=", "[", "]", "\n", "for", "task", "in", "self", ".", "tasks", ":", "\n", "                ", "locs", "=", "np", ".", "isin", "(", "self", ".", "targets", ",", "task", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "self", ".", "archive", ".", "append", "(", "(", "self", ".", "data", "[", "locs", "]", ".", "copy", "(", ")", ",", "self", ".", "targets", "[", "locs", "]", ".", "copy", "(", ")", ")", ")", "\n", "\n", "", "", "if", "self", ".", "train", ":", "\n", "            ", "self", ".", "coreset", "=", "(", "np", ".", "zeros", "(", "0", ",", "dtype", "=", "self", ".", "data", ".", "dtype", ")", ",", "np", ".", "zeros", "(", "0", ",", "dtype", "=", "self", ".", "targets", ".", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__getitem__": [[110, 131], ["PIL.Image.fromarray", "loader.iDataset.simple_transform", "loader.iDataset.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ",", "simple", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "if", "simple", ":", "\n", "                ", "img", "=", "self", ".", "simple_transform", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "", "return", "img", ",", "self", ".", "class_mapping", "[", "target", "]", ",", "self", ".", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.load_bic_dataset": [[133, 164], ["len", "int", "range", "int", "range", "len", "len", "range", "idx_a.append", "idx_b.append"], "methods", ["None"], ["", "def", "load_bic_dataset", "(", "self", ",", "post", "=", "False", ")", ":", "\n", "\n", "        ", "if", "post", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "targets", "=", "self", ".", "data_a", ",", "self", ".", "targets_a", "\n", "\n", "", "else", ":", "\n", "\n", "# get number of holdout", "\n", "            ", "len_coreset", "=", "len", "(", "self", ".", "coreset", "[", "0", "]", ")", "\n", "self", ".", "coreset_idx_change", "=", "int", "(", "VAL_HOLD", "*", "len_coreset", ")", "\n", "\n", "# get number of holdout for training data (balanced)", "\n", "num_class_past", "=", "0", "\n", "for", "i_", "in", "range", "(", "self", ".", "t", ")", ":", "\n", "                ", "num_class_past", "+=", "len", "(", "self", ".", "tasks", "[", "i_", "]", ")", "\n", "", "k_per_class", "=", "int", "(", "self", ".", "coreset_idx_change", "/", "num_class_past", ")", "\n", "\n", "num_k_hold", "=", "[", "0", "for", "i_", "in", "range", "(", "1000", ")", "]", "\n", "idx_a", "=", "[", "]", "\n", "idx_b", "=", "[", "]", "\n", "for", "i_", "in", "range", "(", "len", "(", "self", ".", "data", ")", ")", ":", "\n", "\n", "                ", "k", "=", "self", ".", "targets", "[", "i_", "]", "\n", "if", "num_k_hold", "[", "k", "]", "<", "k_per_class", ":", "\n", "                    ", "idx_a", ".", "append", "(", "i_", ")", "\n", "", "else", ":", "\n", "                    ", "idx_b", ".", "append", "(", "i_", ")", "\n", "", "num_k_hold", "[", "k", "]", "+=", "1", "\n", "\n", "", "self", ".", "data_a", ",", "self", ".", "targets_a", "=", "self", ".", "data", "[", "idx_a", "]", ",", "self", ".", "targets", "[", "idx_a", "]", "\n", "self", ".", "data", ",", "self", ".", "targets", "=", "self", ".", "data", "[", "idx_b", "]", ",", "self", ".", "targets", "[", "idx_b", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.append_coreset_ic": [[166, 194], ["numpy.concatenate", "numpy.concatenate", "range", "int", "range", "numpy.concatenate", "numpy.concatenate", "len", "len", "range", "idx_a.append", "idx_b.append"], "methods", ["None"], ["", "", "def", "append_coreset_ic", "(", "self", ",", "post", "=", "False", ")", ":", "\n", "        ", "if", "post", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "concatenate", "(", "[", "self", ".", "data", ",", "self", ".", "coreset", "[", "0", "]", "[", "self", ".", "coreset_sample_a_idx", "]", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "targets", "=", "np", ".", "concatenate", "(", "[", "self", ".", "targets", ",", "self", ".", "coreset", "[", "1", "]", "[", "self", ".", "coreset_sample_a_idx", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "else", ":", "\n", "\n", "# get number of holdout for training data (balanced)", "\n", "            ", "num_class_past", "=", "0", "\n", "for", "i_", "in", "range", "(", "self", ".", "t", ")", ":", "\n", "                ", "num_class_past", "+=", "len", "(", "self", ".", "tasks", "[", "i_", "]", ")", "\n", "", "k_per_class", "=", "int", "(", "self", ".", "coreset_idx_change", "/", "num_class_past", ")", "\n", "\n", "num_k_hold", "=", "[", "0", "for", "i_", "in", "range", "(", "1000", ")", "]", "\n", "idx_a", "=", "[", "]", "\n", "idx_b", "=", "[", "]", "\n", "for", "i_", "in", "range", "(", "len", "(", "self", ".", "coreset", "[", "0", "]", ")", ")", ":", "\n", "\n", "                ", "k", "=", "self", ".", "coreset", "[", "1", "]", "[", "i_", "]", "\n", "if", "num_k_hold", "[", "k", "]", "<", "k_per_class", ":", "\n", "                    ", "idx_a", ".", "append", "(", "i_", ")", "\n", "", "else", ":", "\n", "                    ", "idx_b", ".", "append", "(", "i_", ")", "\n", "", "num_k_hold", "[", "k", "]", "+=", "1", "\n", "\n", "", "self", ".", "coreset_sample_a_idx", "=", "idx_a", "\n", "self", ".", "data", "=", "np", ".", "concatenate", "(", "[", "self", ".", "data", ",", "self", ".", "coreset", "[", "0", "]", "[", "idx_b", "]", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "targets", "=", "np", ".", "concatenate", "(", "[", "self", ".", "targets", ",", "self", ".", "coreset", "[", "1", "]", "[", "idx_b", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.update_coreset_ic": [[196, 276], ["reversed", "len", "len", "torch.append", "targets.append", "numpy.concatenate", "numpy.concatenate", "min", "numpy.asarray", "numpy.mean", "numpy.squeeze", "numpy.linalg.norm", "numpy.arange", "numpy.copy", "range", "list", "list", "range", "len", "len", "loader.iDataset.__getitem__", "x.cuda.cuda.cuda", "teacher.generate_scores_pen", "numpy.asarray.append", "len", "reversed", "reversed", "len", "teacher.generate_scores_pen.detach().cpu().tolist", "len", "len", "locs_chosen.append", "numpy.delete", "numpy.delete", "numpy.sum", "numpy.squeeze", "numpy.squeeze", "numpy.linalg.norm", "numpy.argmin", "locs_chosen.append", "numpy.delete", "numpy.delete", "teacher.generate_scores_pen.detach().cpu", "len", "teacher.generate_scores_pen.detach"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.__getitem__", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr_helper.Scholar.generate_scores_pen"], ["", "", "def", "update_coreset_ic", "(", "self", ",", "coreset_size", ",", "seen", ",", "teacher", ")", ":", "\n", "        ", "self", ".", "ic", "=", "True", "\n", "num_data_per", "=", "coreset_size", "//", "len", "(", "seen", ")", "\n", "remainder", "=", "coreset_size", "%", "len", "(", "seen", ")", "\n", "data", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "for", "k", "in", "reversed", "(", "seen", ")", ":", "\n", "            ", "mapped_targets", "=", "[", "self", ".", "class_mapping", "[", "self", ".", "targets", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "targets", ")", ")", "]", "\n", "locs", "=", "(", "mapped_targets", "==", "k", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "if", "(", "remainder", ">", "0", ")", "and", "(", "len", "(", "locs", ")", ">", "num_data_per", ")", ":", "\n", "                ", "num_data_k", "=", "num_data_per", "+", "1", "\n", "remainder", "-=", "1", "\n", "", "else", ":", "\n", "                ", "num_data_k", "=", "min", "(", "len", "(", "locs", ")", ",", "num_data_per", ")", "\n", "\n", "", "if", "not", "(", "k", "in", "self", ".", "ic_dict", ")", ":", "\n", "\n", "# get numpy array of all feature embeddings", "\n", "                ", "feat_emb", "=", "[", "]", "\n", "for", "loc", "in", "locs", ":", "\n", "\n", "# get data to gpu", "\n", "                    ", "x", ",", "y", ",", "t", "=", "self", ".", "__getitem__", "(", "loc", ",", "simple", "=", "True", ")", "\n", "x", "=", "x", ".", "cuda", "(", ")", "\n", "x", "=", "x", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "# get feat embedding", "\n", "z", "=", "teacher", ".", "generate_scores_pen", "(", "x", ")", "\n", "feat_emb", ".", "append", "(", "z", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "feat_emb", "=", "np", ".", "asarray", "(", "feat_emb", ")", "\n", "\n", "# calculate mean", "\n", "k_mean", "=", "np", ".", "mean", "(", "feat_emb", ",", "axis", "=", "0", ")", "\n", "k_dist", "=", "feat_emb", "-", "k_mean", "[", ":", "]", "\n", "k_dist", "=", "np", ".", "squeeze", "(", "k_dist", ")", "\n", "k_dist", "=", "np", ".", "linalg", ".", "norm", "(", "k_dist", ",", "axis", "=", "1", ")", "\n", "\n", "locs_chosen", "=", "[", "]", "\n", "locs_k_array", "=", "np", ".", "arange", "(", "len", "(", "feat_emb", ")", ")", "\n", "feat_emb_cp", "=", "np", ".", "copy", "(", "feat_emb", ")", "\n", "for", "k_", "in", "range", "(", "num_data_k", ")", ":", "\n", "\n", "                    ", "if", "len", "(", "locs_k_array", ")", "==", "0", ":", "\n", "                        ", "pass", "\n", "", "elif", "len", "(", "locs_k_array", ")", "==", "1", ":", "\n", "# append to save array", "\n", "                        ", "p_idx", "=", "0", "\n", "locs_chosen", ".", "append", "(", "locs_k_array", "[", "p_idx", "]", ")", "\n", "\n", "# remove from calculate array", "\n", "locs_k_array", "=", "np", ".", "delete", "(", "locs_k_array", ",", "p_idx", ",", "axis", "=", "0", ")", "\n", "feat_emb_cp", "=", "np", ".", "delete", "(", "feat_emb_cp", ",", "p_idx", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "\n", "# get idx of closest to mean", "\n", "                        ", "chosen_feat", "=", "feat_emb", "[", "locs_chosen", "]", "\n", "new_sum", "=", "np", ".", "sum", "(", "chosen_feat", ",", "axis", "=", "0", ")", "\n", "term_b", "=", "(", "feat_emb_cp", "+", "new_sum", ")", "/", "(", "len", "(", "locs_chosen", ")", "+", "1", ")", "\n", "term_b", "=", "np", ".", "squeeze", "(", "term_b", ")", "\n", "k_dist_loop", "=", "k_mean", "-", "term_b", "\n", "k_dist_loop", "=", "np", ".", "squeeze", "(", "k_dist_loop", ")", "\n", "k_dist_loop", "=", "np", ".", "linalg", ".", "norm", "(", "k_dist_loop", ",", "axis", "=", "1", ")", "\n", "p_idx", "=", "np", ".", "argmin", "(", "k_dist_loop", ")", "\n", "\n", "# append to save array", "\n", "locs_chosen", ".", "append", "(", "locs_k_array", "[", "p_idx", "]", ")", "\n", "\n", "# remove from calculate array", "\n", "locs_k_array", "=", "np", ".", "delete", "(", "locs_k_array", ",", "p_idx", ",", "axis", "=", "0", ")", "\n", "feat_emb_cp", "=", "np", ".", "delete", "(", "feat_emb_cp", ",", "p_idx", ",", "axis", "=", "0", ")", "\n", "\n", "# partition data", "\n", "", "", "locs_chosen", "=", "locs", "[", "locs_chosen", "]", "\n", "self", ".", "ic_dict", "[", "k", "]", "=", "[", "[", "self", ".", "data", "[", "loc", "]", "for", "loc", "in", "locs_chosen", "]", ",", "[", "self", ".", "targets", "[", "loc", "]", "for", "loc", "in", "locs_chosen", "]", "]", "\n", "\n", "", "data", ".", "append", "(", "self", ".", "ic_dict", "[", "k", "]", "[", "0", "]", "[", ":", "num_data_k", "]", ")", "\n", "targets", ".", "append", "(", "self", ".", "ic_dict", "[", "k", "]", "[", "1", "]", "[", ":", "num_data_k", "]", ")", "\n", "\n", "", "self", ".", "coreset", "=", "(", "np", ".", "concatenate", "(", "list", "(", "reversed", "(", "data", ")", ")", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "list", "(", "reversed", "(", "targets", ")", ")", ",", "axis", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.update_coreset_ete": [[278, 354], ["reversed", "len", "len", "torch.append", "targets.append", "numpy.concatenate", "numpy.concatenate", "min", "numpy.asarray", "numpy.mean", "numpy.squeeze", "numpy.linalg.norm", "numpy.arange", "numpy.copy", "range", "list", "list", "range", "len", "len", "loader.iDataset.__getitem__", "x.cuda.cuda.cuda", "teacher.generate_scores_pen", "numpy.asarray.append", "len", "reversed", "reversed", "len", "teacher.generate_scores_pen.detach().cpu().tolist", "len", "len", "locs_chosen.append", "numpy.delete", "numpy.delete", "numpy.squeeze", "numpy.linalg.norm", "numpy.argmin", "locs_chosen.append", "numpy.delete", "numpy.delete", "teacher.generate_scores_pen.detach().cpu", "teacher.generate_scores_pen.detach"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.__getitem__", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.default.NormalNN.cuda", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.learners.dgr_helper.Scholar.generate_scores_pen"], ["", "def", "update_coreset_ete", "(", "self", ",", "coreset_size", ",", "seen", ",", "teacher", ")", ":", "\n", "        ", "self", ".", "ic", "=", "True", "\n", "num_data_per", "=", "coreset_size", "//", "len", "(", "seen", ")", "\n", "remainder", "=", "coreset_size", "%", "len", "(", "seen", ")", "\n", "data", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "for", "k", "in", "reversed", "(", "seen", ")", ":", "\n", "            ", "mapped_targets", "=", "[", "self", ".", "class_mapping", "[", "self", ".", "targets", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "targets", ")", ")", "]", "\n", "locs", "=", "(", "mapped_targets", "==", "k", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "if", "(", "remainder", ">", "0", ")", "and", "(", "len", "(", "locs", ")", ">", "num_data_per", ")", ":", "\n", "                ", "num_data_k", "=", "num_data_per", "+", "1", "\n", "remainder", "-=", "1", "\n", "", "else", ":", "\n", "                ", "num_data_k", "=", "min", "(", "len", "(", "locs", ")", ",", "num_data_per", ")", "\n", "\n", "", "if", "not", "(", "k", "in", "self", ".", "ic_dict", ")", ":", "\n", "\n", "# get numpy array of all feature embeddings", "\n", "                ", "feat_emb", "=", "[", "]", "\n", "for", "loc", "in", "locs", ":", "\n", "\n", "# get data to gpu", "\n", "                    ", "x", ",", "y", ",", "t", "=", "self", ".", "__getitem__", "(", "loc", ",", "simple", "=", "True", ")", "\n", "x", "=", "x", ".", "cuda", "(", ")", "\n", "x", "=", "x", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "# get feat embedding", "\n", "z", "=", "teacher", ".", "generate_scores_pen", "(", "x", ")", "\n", "feat_emb", ".", "append", "(", "z", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "feat_emb", "=", "np", ".", "asarray", "(", "feat_emb", ")", "\n", "\n", "# calculate mean", "\n", "k_mean", "=", "np", ".", "mean", "(", "feat_emb", ",", "axis", "=", "0", ")", "\n", "k_dist", "=", "feat_emb", "-", "k_mean", "[", ":", "]", "\n", "k_dist", "=", "np", ".", "squeeze", "(", "k_dist", ")", "\n", "k_dist", "=", "np", ".", "linalg", ".", "norm", "(", "k_dist", ",", "axis", "=", "1", ")", "\n", "\n", "locs_chosen", "=", "[", "]", "\n", "locs_k_array", "=", "np", ".", "arange", "(", "len", "(", "feat_emb", ")", ")", "\n", "feat_emb_cp", "=", "np", ".", "copy", "(", "feat_emb", ")", "\n", "for", "k_", "in", "range", "(", "num_data_k", ")", ":", "\n", "\n", "                    ", "if", "len", "(", "locs_k_array", ")", "==", "0", ":", "\n", "                        ", "pass", "\n", "", "elif", "len", "(", "locs_k_array", ")", "==", "1", ":", "\n", "# append to save array", "\n", "                        ", "p_idx", "=", "0", "\n", "locs_chosen", ".", "append", "(", "locs_k_array", "[", "p_idx", "]", ")", "\n", "\n", "# remove from calculate array", "\n", "locs_k_array", "=", "np", ".", "delete", "(", "locs_k_array", ",", "p_idx", ",", "axis", "=", "0", ")", "\n", "feat_emb_cp", "=", "np", ".", "delete", "(", "feat_emb_cp", ",", "p_idx", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "\n", "# get idx of closest to mean", "\n", "                        ", "k_dist_loop", "=", "k_mean", "-", "feat_emb_cp", "\n", "k_dist_loop", "=", "np", ".", "squeeze", "(", "k_dist_loop", ")", "\n", "k_dist_loop", "=", "np", ".", "linalg", ".", "norm", "(", "k_dist_loop", ",", "axis", "=", "1", ")", "\n", "p_idx", "=", "np", ".", "argmin", "(", "k_dist_loop", ")", "\n", "\n", "# append to save array", "\n", "locs_chosen", ".", "append", "(", "locs_k_array", "[", "p_idx", "]", ")", "\n", "\n", "# remove from calculate array", "\n", "locs_k_array", "=", "np", ".", "delete", "(", "locs_k_array", ",", "p_idx", ",", "axis", "=", "0", ")", "\n", "feat_emb_cp", "=", "np", ".", "delete", "(", "feat_emb_cp", ",", "p_idx", ",", "axis", "=", "0", ")", "\n", "\n", "# partition data", "\n", "", "", "locs_chosen", "=", "locs", "[", "locs_chosen", "]", "\n", "self", ".", "ic_dict", "[", "k", "]", "=", "[", "[", "self", ".", "data", "[", "loc", "]", "for", "loc", "in", "locs_chosen", "]", ",", "[", "self", ".", "targets", "[", "loc", "]", "for", "loc", "in", "locs_chosen", "]", "]", "\n", "\n", "", "data", ".", "append", "(", "self", ".", "ic_dict", "[", "k", "]", "[", "0", "]", "[", ":", "num_data_k", "]", ")", "\n", "targets", ".", "append", "(", "self", ".", "ic_dict", "[", "k", "]", "[", "1", "]", "[", ":", "num_data_k", "]", ")", "\n", "\n", "", "self", ".", "coreset", "=", "(", "np", ".", "concatenate", "(", "list", "(", "reversed", "(", "data", ")", ")", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "list", "(", "reversed", "(", "targets", ")", ")", ",", "axis", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.load_dataset": [[355, 365], ["print", "numpy.concatenate", "numpy.concatenate", "numpy.unique", "range", "range"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "t", ",", "train", "=", "True", ")", ":", "\n", "\n", "        ", "if", "train", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "targets", "=", "self", ".", "archive", "[", "t", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "concatenate", "(", "[", "self", ".", "archive", "[", "s", "]", "[", "0", "]", "for", "s", "in", "range", "(", "t", "+", "1", ")", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "targets", "=", "np", ".", "concatenate", "(", "[", "self", ".", "archive", "[", "s", "]", "[", "1", "]", "for", "s", "in", "range", "(", "t", "+", "1", ")", "]", ",", "axis", "=", "0", ")", "\n", "", "self", ".", "t", "=", "t", "\n", "\n", "print", "(", "np", ".", "unique", "(", "self", ".", "targets", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.append_coreset": [[367, 381], ["len", "len", "numpy.random.choice", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["", "def", "append_coreset", "(", "self", ",", "only", "=", "False", ",", "interp", "=", "False", ")", ":", "\n", "        ", "len_core", "=", "len", "(", "self", ".", "coreset", "[", "0", "]", ")", "\n", "if", "self", ".", "train", "and", "(", "len_core", ">", "0", ")", ":", "\n", "            ", "if", "only", ":", "\n", "                ", "self", ".", "data", ",", "self", ".", "targets", "=", "self", ".", "coreset", "\n", "", "else", ":", "\n", "                ", "len_data", "=", "len", "(", "self", ".", "data", ")", "\n", "sample_ind", "=", "np", ".", "random", ".", "choice", "(", "len_core", ",", "len_data", ")", "\n", "if", "self", ".", "ic", ":", "\n", "                    ", "self", ".", "data", "=", "np", ".", "concatenate", "(", "[", "self", ".", "data", ",", "self", ".", "coreset", "[", "0", "]", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "targets", "=", "np", ".", "concatenate", "(", "[", "self", ".", "targets", ",", "self", ".", "coreset", "[", "1", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "data", "=", "np", ".", "concatenate", "(", "[", "self", ".", "data", ",", "self", ".", "coreset", "[", "0", "]", "[", "sample_ind", "]", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "targets", "=", "np", ".", "concatenate", "(", "[", "self", ".", "targets", ",", "self", ".", "coreset", "[", "1", "]", "[", "sample_ind", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.update_coreset": [[383, 406], ["numpy.random.get_state", "numpy.random.seed", "reversed", "numpy.random.set_state", "len", "len", "torch.append", "targets.append", "numpy.concatenate", "numpy.concatenate", "min", "list", "list", "range", "len", "len", "numpy.random.choice", "reversed", "reversed", "len", "len"], "methods", ["None"], ["", "", "", "", "def", "update_coreset", "(", "self", ",", "coreset_size", ",", "seen", ")", ":", "\n", "        ", "num_data_per", "=", "coreset_size", "//", "len", "(", "seen", ")", "\n", "remainder", "=", "coreset_size", "%", "len", "(", "seen", ")", "\n", "data", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "\n", "# random coreset management; latest classes take memory remainder", "\n", "# coreset selection without affecting RNG state", "\n", "state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", "*", "10000", "+", "self", ".", "t", ")", "\n", "for", "k", "in", "reversed", "(", "seen", ")", ":", "\n", "            ", "mapped_targets", "=", "[", "self", ".", "class_mapping", "[", "self", ".", "targets", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "targets", ")", ")", "]", "\n", "locs", "=", "(", "mapped_targets", "==", "k", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "if", "(", "remainder", ">", "0", ")", "and", "(", "len", "(", "locs", ")", ">", "num_data_per", ")", ":", "\n", "                ", "num_data_k", "=", "num_data_per", "+", "1", "\n", "remainder", "-=", "1", "\n", "", "else", ":", "\n", "                ", "num_data_k", "=", "min", "(", "len", "(", "locs", ")", ",", "num_data_per", ")", "\n", "", "locs_chosen", "=", "locs", "[", "np", ".", "random", ".", "choice", "(", "len", "(", "locs", ")", ",", "num_data_k", ",", "replace", "=", "False", ")", "]", "\n", "data", ".", "append", "(", "[", "self", ".", "data", "[", "loc", "]", "for", "loc", "in", "locs_chosen", "]", ")", "\n", "targets", ".", "append", "(", "[", "self", ".", "targets", "[", "loc", "]", "for", "loc", "in", "locs_chosen", "]", ")", "\n", "", "self", ".", "coreset", "=", "(", "np", ".", "concatenate", "(", "list", "(", "reversed", "(", "data", ")", ")", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "list", "(", "reversed", "(", "targets", ")", ")", ",", "axis", "=", "0", ")", ")", "\n", "np", ".", "random", ".", "set_state", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.load": [[407, 409], ["None"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__len__": [[410, 412], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__repr__": [[413, 422], ["loader.iDataset.__len__", "loader.iDataset.transform.__repr__().replace", "loader.iDataset.transform.__repr__", "len"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__len__", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iDataset.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "tmp", "=", "'train'", "if", "self", ".", "train", "is", "True", "else", "'test'", "\n", "fmt_str", "+=", "'    Split: {}\\n'", ".", "format", "(", "tmp", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iCIFAR10.load": [[450, 488], ["numpy.vstack().reshape", "loader.iCIFAR10.data.transpose", "loader.iCIFAR10._load_meta", "loader.iCIFAR10.download", "loader.iCIFAR10._check_integrity", "RuntimeError", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "loader.iCIFAR10.data.append", "numpy.vstack", "pickle.load", "pickle.load", "loader.iCIFAR10.targets.extend", "loader.iCIFAR10.targets.extend", "loader.iCIFAR10.course_targets.extend"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iCIFAR10._load_meta", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iCIFAR10.download", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iCIFAR10._check_integrity", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load"], ["def", "load", "(", "self", ")", ":", "\n", "\n", "# download dataset", "\n", "        ", "if", "self", ".", "download_flag", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "\n", "", "if", "self", ".", "train", "or", "self", ".", "validation", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "train_list", "\n", "", "else", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "test_list", "\n", "\n", "", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "course_targets", "=", "[", "]", "\n", "\n", "# now load the picked numpy arrays", "\n", "for", "file_name", ",", "checksum", "in", "downloaded_list", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "file_name", ")", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'labels'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'fine_labels'", "]", ")", "\n", "", "if", "'coarse_labels'", "in", "entry", ":", "\n", "                    ", "self", ".", "course_targets", ".", "extend", "(", "entry", "[", "'coarse_labels'", "]", ")", "\n", "\n", "", "", "", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "self", ".", "_load_meta", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iCIFAR10.download": [[489, 501], ["loader.iCIFAR10._check_integrity", "utils.download_url", "print", "tarfile.open", "tar.extractall", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iCIFAR10._check_integrity", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.utils.download_url"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "tarfile", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "'Files already downloaded and verified'", ")", "\n", "return", "\n", "\n", "", "download_url", "(", "self", ".", "url", ",", "self", ".", "root", ",", "self", ".", "filename", ",", "self", ".", "tgz_md5", ")", "\n", "\n", "# extract file", "\n", "with", "tarfile", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", ",", "\"r:gz\"", ")", "as", "tar", ":", "\n", "            ", "tar", ".", "extractall", "(", "path", "=", "self", ".", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iCIFAR10._load_meta": [[502, 514], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "utils.check_integrity", "RuntimeError", "open", "pickle.load", "pickle.load", "enumerate"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.utils.check_integrity", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load"], ["", "", "def", "_load_meta", "(", "self", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "meta", "[", "'filename'", "]", ")", "\n", "if", "not", "check_integrity", "(", "path", ",", "self", ".", "meta", "[", "'md5'", "]", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset metadata file not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "", "with", "open", "(", "path", ",", "'rb'", ")", "as", "infile", ":", "\n", "            ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "classes", "=", "data", "[", "self", ".", "meta", "[", "'key'", "]", "]", "\n", "", "self", ".", "class_to_idx", "=", "{", "_class", ":", "i", "for", "i", ",", "_class", "in", "enumerate", "(", "self", ".", "classes", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iCIFAR10._check_integrity": [[515, 523], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "utils.check_integrity"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.utils.check_integrity"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "test_list", ")", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iIMAGENET.load": [[552, 568], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "get_data.keys", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "loader.get_data", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "loader.get_data", "len", "loader.iIMAGENET.data.extend", "loader.iIMAGENET.targets.extend", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.get_data", "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.get_data"], ["def", "load", "(", "self", ")", ":", "\n", "        ", "self", ".", "dw", "=", "False", "\n", "self", ".", "data", ",", "self", ".", "targets", "=", "[", "]", ",", "[", "]", "\n", "images_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ")", "\n", "if", "self", ".", "train", "or", "self", ".", "validation", ":", "\n", "            ", "images_path", "=", "os", ".", "path", ".", "join", "(", "images_path", ",", "'train'", ")", "\n", "data_dict", "=", "get_data", "(", "images_path", ")", "\n", "", "else", ":", "\n", "            ", "images_path", "=", "os", ".", "path", ".", "join", "(", "images_path", ",", "'val'", ")", "\n", "data_dict", "=", "get_data", "(", "images_path", ")", "\n", "", "y", "=", "0", "\n", "for", "key", "in", "data_dict", ".", "keys", "(", ")", ":", "\n", "            ", "num_y", "=", "len", "(", "data_dict", "[", "key", "]", ")", "\n", "self", ".", "data", ".", "extend", "(", "[", "data_dict", "[", "key", "]", "[", "i", "]", "for", "i", "in", "np", ".", "arange", "(", "0", ",", "num_y", ")", "]", ")", "\n", "self", ".", "targets", ".", "extend", "(", "[", "y", "for", "i", "in", "np", ".", "arange", "(", "0", ",", "num_y", ")", "]", ")", "\n", "y", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iIMAGENET.__getitem__": [[570, 592], ["loader.jpg_image_to_array", "PIL.Image.fromarray", "loader.iIMAGENET.simple_transform", "loader.iIMAGENET.transform"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.jpg_image_to_array"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ",", "simple", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class\n        \"\"\"", "\n", "img_path", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "img", "=", "jpg_image_to_array", "(", "img_path", ")", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "if", "simple", ":", "\n", "                ", "img", "=", "self", ".", "simple_transform", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "", "return", "img", ",", "self", ".", "class_mapping", "[", "target", "]", ",", "self", ".", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iIMAGENET.parse_archives": [[594, 603], ["utils.check_integrity", "parse_devkit_archive", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "parse_train_archive", "parse_val_archive"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.utils.check_integrity"], ["", "def", "parse_archives", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "not", "check_integrity", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "META_FILE", ")", ")", ":", "\n", "            ", "parse_devkit_archive", "(", "self", ".", "root", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "split_folder", ")", ":", "\n", "            ", "if", "self", ".", "split", "==", "'train'", ":", "\n", "                ", "parse_train_archive", "(", "self", ".", "root", ")", "\n", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "                ", "parse_val_archive", "(", "self", ".", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iIMAGENET.split_folder": [[604, 607], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "split_folder", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iIMAGENET.extra_repr": [[608, 610], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"Split: {split}\"", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.load": [[616, 645], ["path.join", "sorted", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "path.join", "enumerate", "path.join", "os.walk", "os.walk", "os.walk", "os.walk", "open", "f.read().strip().split", "path.join", "path.join", "path.join", "path.join.endswith", "f.read().strip", "info.strip().split", "loader.iTinyIMNET.data.append", "loader.iTinyIMNET.targets.append", "f.read", "info.strip"], "methods", ["None"], ["def", "load", "(", "self", ")", ":", "\n", "        ", "self", ".", "dw", "=", "False", "\n", "self", ".", "data", ",", "self", ".", "targets", "=", "[", "]", ",", "[", "]", "\n", "\n", "from", "os", "import", "path", "\n", "root", "=", "self", ".", "root", "\n", "FileNameEnd", "=", "'JPEG'", "\n", "train_dir", "=", "path", ".", "join", "(", "root", ",", "'tiny-imagenet/tiny-imagenet-200/train'", ")", "\n", "self", ".", "class_names", "=", "sorted", "(", "os", ".", "listdir", "(", "train_dir", ")", ")", "\n", "self", ".", "names2index", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "class_names", ")", "}", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "for", "label", "in", "self", ".", "class_names", ":", "\n", "                ", "d", "=", "path", ".", "join", "(", "root", ",", "'tiny-imagenet/tiny-imagenet-200/train'", ",", "label", ")", "\n", "for", "directory", ",", "_", ",", "names", "in", "os", ".", "walk", "(", "d", ")", ":", "\n", "                    ", "for", "name", "in", "names", ":", "\n", "                        ", "filename", "=", "path", ".", "join", "(", "directory", ",", "name", ")", "\n", "if", "filename", ".", "endswith", "(", "FileNameEnd", ")", ":", "\n", "                            ", "self", ".", "data", ".", "append", "(", "filename", ")", "\n", "self", ".", "targets", ".", "append", "(", "self", ".", "names2index", "[", "label", "]", ")", "\n", "", "", "", "", "", "else", ":", "\n", "            ", "val_dir", "=", "path", ".", "join", "(", "root", ",", "'tiny-imagenet/tiny-imagenet-200/val'", ")", "\n", "with", "open", "(", "path", ".", "join", "(", "val_dir", ",", "'val_annotations.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "infos", "=", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "infos", "=", "[", "info", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "[", ":", "2", "]", "for", "info", "in", "infos", "]", "\n", "self", ".", "data", "=", "[", "path", ".", "join", "(", "val_dir", ",", "'images'", ",", "info", "[", "0", "]", ")", "for", "info", "in", "infos", "]", "\n", "self", ".", "targets", "=", "[", "self", ".", "names2index", "[", "info", "[", "1", "]", "]", "for", "info", "in", "infos", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.iTinyIMNET.__getitem__": [[647, 669], ["loader.jpg_image_to_array", "PIL.Image.fromarray", "loader.iTinyIMNET.simple_transform", "loader.iTinyIMNET.transform"], "methods", ["home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.jpg_image_to_array"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ",", "simple", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class\n        \"\"\"", "\n", "img_path", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "img", "=", "jpg_image_to_array", "(", "img_path", ")", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "if", "simple", ":", "\n", "                ", "img", "=", "self", ".", "simple_transform", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "", "return", "img", ",", "self", ".", "class_mapping", "[", "target", "]", ",", "self", ".", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.jpg_image_to_array": [[670, 680], ["PIL.Image.open", "image.convert.convert", "numpy.fromstring", "im_arr.reshape.reshape", "image.convert.tobytes"], "function", ["None"], ["", "", "def", "jpg_image_to_array", "(", "image_path", ")", ":", "\n", "    ", "\"\"\"\n    Loads JPEG image into 3D Numpy array of shape \n    (width, height, channels)\n    \"\"\"", "\n", "with", "Image", ".", "open", "(", "image_path", ")", "as", "image", ":", "\n", "        ", "image", "=", "image", ".", "convert", "(", "'RGB'", ")", "\n", "im_arr", "=", "np", ".", "fromstring", "(", "image", ".", "tobytes", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "im_arr", "=", "im_arr", ".", "reshape", "(", "(", "image", ".", "size", "[", "1", "]", ",", "image", ".", "size", "[", "0", "]", ",", "3", ")", ")", "\n", "", "return", "im_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.GT-RIPL_AlwaysBeDreaming-DFCIL.dataloaders.loader.get_data": [[681, 693], ["glob.glob", "os.path.basename", "os.path.basename", "os.path.dirname", "os.path.dirname", "data[].append"], "function", ["None"], ["", "def", "get_data", "(", "root_images", ")", ":", "\n", "\n", "    ", "import", "glob", "\n", "files", "=", "glob", ".", "glob", "(", "root_images", "+", "'/*/*.JPEG'", ")", "\n", "data", "=", "{", "}", "\n", "for", "path", "in", "files", ":", "\n", "        ", "y", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", "\n", "if", "y", "in", "data", ":", "\n", "            ", "data", "[", "y", "]", ".", "append", "(", "path", ")", "\n", "", "else", ":", "\n", "            ", "data", "[", "y", "]", "=", "[", "path", "]", "\n", "", "", "return", "data", "", "", ""]]}