{"home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.test_feedforward.TestFeedForward.test_MNIST": [[14, 116], ["pytorch_lightning.seed_everything", "sklearn.datasets.load_digits", "torch.tensor", "sklearn.model_selection.train_test_split", "list", "list", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "comet.modules.feedforward.FeedForward", "torch.nn.CrossEntropyLoss", "torch.optim.SGD", "range", "test_feedforward.TestFeedForward.assertGreaterEqual", "torch.Tensor", "zip", "zip", "comet.modules.feedforward.FeedForward.parameters", "enumerate", "range", "len", "images.view().requires_grad_.view().requires_grad_.view().requires_grad_", "torch.optim.SGD.zero_grad", "comet.modules.feedforward.FeedForward.", "torch.nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.backward", "torch.optim.SGD.step", "images.view().requires_grad_.view().requires_grad_.view", "images.view().requires_grad_.view().requires_grad_.view().requires_grad_", "comet.modules.feedforward.FeedForward.", "torch.max", "torch.tensor.size", "images.view().requires_grad_.view().requires_grad_.view"], "methods", ["None"], ["    ", "def", "test_MNIST", "(", "self", ")", ":", "\n", "        ", "seed_everything", "(", "3", ")", "\n", "\"\"\"\n        STEP 1: LOADING DATASET\n        \"\"\"", "\n", "images", ",", "labels", "=", "load_digits", "(", "return_X_y", "=", "True", ")", "\n", "images", "=", "[", "torch", ".", "Tensor", "(", "images", "[", "i", ",", ":", "]", ")", "for", "i", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", "]", "\n", "labels", "=", "torch", ".", "tensor", "(", "labels", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "train_images", ",", "test_images", ",", "train_labels", ",", "test_labels", "=", "train_test_split", "(", "\n", "images", ",", "labels", ",", "test_size", "=", "0.2", ",", "random_state", "=", "42", "\n", ")", "\n", "\n", "train_dataset", "=", "list", "(", "zip", "(", "train_images", ",", "train_labels", ")", ")", "\n", "test_dataset", "=", "list", "(", "zip", "(", "test_images", ",", "test_labels", ")", ")", "\n", "\n", "\"\"\"\n        STEP 2: MAKING DATASET ITERABLE\n        \"\"\"", "\n", "batch_size", "=", "256", "\n", "n_iters", "=", "80", "\n", "num_epochs", "=", "n_iters", "/", "(", "len", "(", "train_dataset", ")", "/", "batch_size", ")", "\n", "num_epochs", "=", "int", "(", "num_epochs", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", "\n", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "test_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", "\n", ")", "\n", "\n", "\"\"\"\n        STEP 3: INSTANTIATE MODEL CLASS\n        \"\"\"", "\n", "model", "=", "FeedForward", "(", "\n", "in_dim", "=", "8", "*", "8", ",", "\n", "out_dim", "=", "10", ",", "\n", "hidden_sizes", "=", "[", "100", "]", ",", "\n", "activations", "=", "\"Tanh\"", ",", "\n", ")", "\n", "\n", "\"\"\"\n        STEP 4: INSTANTIATE LOSS CLASS\n        \"\"\"", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "\"\"\"\n        STEP 5: INSTANTIATE OPTIMIZER CLASS\n        \"\"\"", "\n", "learning_rate", "=", "0.1", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ")", "\n", "\n", "\"\"\"\n        STEP 7: TRAIN THE MODEL\n        \"\"\"", "\n", "iter", "=", "0", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "            ", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# Load images with gradient accumulation capabilities", "\n", "                ", "images", "=", "images", ".", "view", "(", "-", "1", ",", "8", "*", "8", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "# Clear gradients w.r.t. parameters", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Forward pass to get output/logits", "\n", "outputs", "=", "model", "(", "images", ")", "\n", "\n", "# Calculate Loss: softmax --> cross entropy loss", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "\n", "# Getting gradients w.r.t. parameters", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Updating parameters", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "iter", "+=", "1", "\n", "\n", "if", "iter", "%", "10", "==", "0", ":", "\n", "# Calculate Accuracy", "\n", "                    ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "# Iterate through test dataset", "\n", "for", "images", ",", "labels", "in", "test_loader", ":", "\n", "# Load images with gradient accumulation capabilities", "\n", "                        ", "images", "=", "images", ".", "view", "(", "-", "1", ",", "8", "*", "8", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "# Forward pass only to get logits/output", "\n", "outputs", "=", "model", "(", "images", ")", "\n", "\n", "# Get predictions from the maximum value", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "\n", "# Total number of labels", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "\n", "# Total correct predictions", "\n", "correct", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", "\n", "\n", "", "accuracy", "=", "100", "*", "correct", "//", "total", "\n", "", "", "", "self", ".", "assertGreaterEqual", "(", "accuracy", ",", "95", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.layerwise_attention.LayerwiseAttention.__init__": [[39, 78], ["super().__init__", "torch.nn.ParameterList", "torch.nn.Parameter", "torch.FloatTensor", "torch.zeros", "torch.empty().fill_", "layerwise_attention.LayerwiseAttention.register_buffer", "layerwise_attention.LayerwiseAttention.register_buffer", "len", "Exception", "torch.nn.Parameter", "len", "torch.FloatTensor", "range", "torch.empty", "len"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_layers", ":", "int", ",", "\n", "layer_norm", ":", "bool", "=", "False", ",", "\n", "layer_weights", ":", "Optional", "[", "List", "[", "int", "]", "]", "=", "None", ",", "\n", "dropout", ":", "float", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "LayerwiseAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "if", "layer_weights", "is", "None", ":", "\n", "            ", "layer_weights", "=", "[", "0.0", "]", "*", "num_layers", "\n", "", "elif", "len", "(", "layer_weights", ")", "!=", "num_layers", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"Length of layer_weights {} differs \\\n                from num_layers {}\"", ".", "format", "(", "\n", "layer_weights", ",", "num_layers", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "scalar_parameters", "=", "ParameterList", "(", "\n", "[", "\n", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "[", "layer_weights", "[", "i", "]", "]", ")", ",", "\n", "requires_grad", "=", "True", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "gamma", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "1.0", "]", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "dropout_mask", "=", "torch", ".", "zeros", "(", "len", "(", "self", ".", "scalar_parameters", ")", ")", "\n", "dropout_fill", "=", "torch", ".", "empty", "(", "len", "(", "self", ".", "scalar_parameters", ")", ")", ".", "fill_", "(", "-", "1e20", ")", "\n", "self", ".", "register_buffer", "(", "\"dropout_mask\"", ",", "dropout_mask", ")", "\n", "self", ".", "register_buffer", "(", "\"dropout_fill\"", ",", "dropout_fill", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.layerwise_attention.LayerwiseAttention.forward": [[79, 138], ["torch.nn.functional.softmax", "torch.split", "len", "Exception", "len", "torch.tensor", "torch.tensor", "torch.cat", "torch.where", "zip", "mask.float", "mask.float.unsqueeze", "tensors[].size", "zip", "torch.sum", "torch.sum", "torch.sqrt", "pieces.append", "sum", "torch.sum", "pieces.append", "sum", "len", "layerwise_attention.LayerwiseAttention.dropout_mask.uniform_", "layerwise_attention.LayerwiseAttention.forward._layer_norm"], "methods", ["None"], ["", "", "def", "forward", "(", "\n", "self", ",", "\n", "tensors", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "# pylint: disable=arguments-differ", "\n", "mask", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "if", "len", "(", "tensors", ")", "!=", "self", ".", "num_layers", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"{} tensors were passed, but the module was initialized to \\\n                mix {} tensors.\"", ".", "format", "(", "\n", "len", "(", "tensors", ")", ",", "self", ".", "num_layers", "\n", ")", "\n", ")", "\n", "\n", "", "def", "_layer_norm", "(", "tensor", ",", "broadcast_mask", ",", "num_elements_not_masked", ")", ":", "\n", "            ", "tensor_masked", "=", "tensor", "*", "broadcast_mask", "\n", "mean", "=", "torch", ".", "sum", "(", "tensor_masked", ")", "/", "num_elements_not_masked", "\n", "variance", "=", "(", "\n", "torch", ".", "sum", "(", "(", "(", "tensor_masked", "-", "mean", ")", "*", "broadcast_mask", ")", "**", "2", ")", "\n", "/", "num_elements_not_masked", "\n", ")", "\n", "return", "(", "tensor", "-", "mean", ")", "/", "torch", ".", "sqrt", "(", "variance", "+", "1e-12", ")", "\n", "\n", "# BUG: Pytorch bug fix when Parameters are not well copied across GPUs", "\n", "# https://github.com/pytorch/pytorch/issues/36035", "\n", "", "if", "len", "(", "[", "parameter", "for", "parameter", "in", "self", ".", "scalar_parameters", "]", ")", "!=", "self", ".", "num_layers", ":", "\n", "            ", "weights", "=", "torch", ".", "tensor", "(", "self", ".", "weights", ",", "device", "=", "tensors", "[", "0", "]", ".", "device", ")", "\n", "gamma", "=", "torch", ".", "tensor", "(", "self", ".", "gamma_value", ",", "device", "=", "tensors", "[", "0", "]", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "weights", "=", "torch", ".", "cat", "(", "[", "parameter", "for", "parameter", "in", "self", ".", "scalar_parameters", "]", ")", "\n", "gamma", "=", "self", ".", "gamma", "\n", "\n", "", "if", "self", ".", "training", "and", "self", ".", "dropout", ":", "\n", "            ", "weights", "=", "torch", ".", "where", "(", "\n", "self", ".", "dropout_mask", ".", "uniform_", "(", ")", ">", "self", ".", "dropout", ",", "weights", ",", "self", ".", "dropout_fill", "\n", ")", "\n", "\n", "", "normed_weights", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "weights", ",", "dim", "=", "0", ")", "\n", "normed_weights", "=", "torch", ".", "split", "(", "normed_weights", ",", "split_size_or_sections", "=", "1", ")", "\n", "\n", "if", "not", "self", ".", "layer_norm", ":", "\n", "            ", "pieces", "=", "[", "]", "\n", "for", "weight", ",", "tensor", "in", "zip", "(", "normed_weights", ",", "tensors", ")", ":", "\n", "                ", "pieces", ".", "append", "(", "weight", "*", "tensor", ")", "\n", "", "return", "gamma", "*", "sum", "(", "pieces", ")", "\n", "\n", "", "else", ":", "\n", "            ", "mask_float", "=", "mask", ".", "float", "(", ")", "\n", "broadcast_mask", "=", "mask_float", ".", "unsqueeze", "(", "-", "1", ")", "\n", "input_dim", "=", "tensors", "[", "0", "]", ".", "size", "(", "-", "1", ")", "\n", "num_elements_not_masked", "=", "torch", ".", "sum", "(", "mask_float", ")", "*", "input_dim", "\n", "\n", "pieces", "=", "[", "]", "\n", "for", "weight", ",", "tensor", "in", "zip", "(", "normed_weights", ",", "tensors", ")", ":", "\n", "                ", "pieces", ".", "append", "(", "\n", "weight", "\n", "*", "_layer_norm", "(", "tensor", ",", "broadcast_mask", ",", "num_elements_not_masked", ")", "\n", ")", "\n", "", "return", "gamma", "*", "sum", "(", "pieces", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.bottleneck.Bottleneck.__init__": [[38, 56], ["torch.nn.Module.__init__", "modules.append", "modules.append", "modules.append", "range", "torch.nn.Sequential", "torch.nn.Linear", "bottleneck.Bottleneck.build_activation", "torch.nn.Dropout", "len", "modules.append", "modules.append", "modules.append", "torch.nn.Linear", "bottleneck.Bottleneck.build_activation", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.__init__", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.feedforward.FeedForward.build_activation", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.feedforward.FeedForward.build_activation"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_dim", ":", "int", ",", "\n", "hidden_sizes", ":", "List", "[", "int", "]", "=", "[", "3072", ",", "256", "]", ",", "\n", "activations", ":", "str", "=", "\"Sigmoid\"", ",", "\n", "dropout", ":", "float", "=", "0.1", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "modules", "=", "[", "]", "\n", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_sizes", "[", "0", "]", ")", ")", "\n", "modules", ".", "append", "(", "self", ".", "build_activation", "(", "activations", ")", ")", "\n", "modules", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hidden_sizes", ")", ")", ":", "\n", "            ", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_sizes", "[", "i", "-", "1", "]", ",", "hidden_sizes", "[", "i", "]", ")", ")", "\n", "modules", ".", "append", "(", "self", ".", "build_activation", "(", "activations", ")", ")", "\n", "modules", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "", "self", ".", "ff", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.bottleneck.Bottleneck.build_activation": [[57, 60], ["hasattr", "getattr"], "methods", ["None"], ["", "def", "build_activation", "(", "self", ",", "activation", ":", "str", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "if", "hasattr", "(", "nn", ",", "activation", ")", ":", "\n", "            ", "return", "getattr", "(", "nn", ",", "activation", ")", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.bottleneck.Bottleneck.forward": [[61, 63], ["bottleneck.Bottleneck.ff"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "in_features", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "ff", "(", "in_features", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.feedforward.FeedForward.__init__": [[38, 63], ["torch.nn.Module.__init__", "modules.append", "modules.append", "modules.append", "range", "modules.append", "torch.nn.Sequential", "torch.nn.Linear", "feedforward.FeedForward.build_activation", "torch.nn.Dropout", "len", "modules.append", "modules.append", "modules.append", "torch.nn.Linear", "modules.append", "torch.nn.Linear", "feedforward.FeedForward.build_activation", "torch.nn.Dropout", "int", "feedforward.FeedForward.build_activation"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.__init__", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.feedforward.FeedForward.build_activation", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.feedforward.FeedForward.build_activation", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.feedforward.FeedForward.build_activation"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_dim", ":", "int", ",", "\n", "out_dim", ":", "int", "=", "1", ",", "\n", "hidden_sizes", ":", "List", "[", "int", "]", "=", "[", "3072", ",", "768", "]", ",", "\n", "activations", ":", "str", "=", "\"Sigmoid\"", ",", "\n", "final_activation", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "dropout", ":", "float", "=", "0.1", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "modules", "=", "[", "]", "\n", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_sizes", "[", "0", "]", ")", ")", "\n", "modules", ".", "append", "(", "self", ".", "build_activation", "(", "activations", ")", ")", "\n", "modules", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hidden_sizes", ")", ")", ":", "\n", "            ", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_sizes", "[", "i", "-", "1", "]", ",", "hidden_sizes", "[", "i", "]", ")", ")", "\n", "modules", ".", "append", "(", "self", ".", "build_activation", "(", "activations", ")", ")", "\n", "modules", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_sizes", "[", "-", "1", "]", ",", "int", "(", "out_dim", ")", ")", ")", "\n", "if", "final_activation", "is", "not", "None", ":", "\n", "            ", "modules", ".", "append", "(", "self", ".", "build_activation", "(", "final_activation", ")", ")", "\n", "\n", "", "self", ".", "ff", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.feedforward.FeedForward.build_activation": [[64, 67], ["hasattr", "getattr"], "methods", ["None"], ["", "def", "build_activation", "(", "self", ",", "activation", ":", "str", ")", "->", "nn", ".", "Module", ":", "\n", "        ", "if", "hasattr", "(", "nn", ",", "activation", ")", ":", "\n", "            ", "return", "getattr", "(", "nn", ",", "activation", ")", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.feedforward.FeedForward.forward": [[68, 70], ["feedforward.FeedForward.ff"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "in_features", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "ff", "(", "in_features", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.losses.HeteroscedasticLoss.forward": [[6, 12], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.neg().exp", "torch.neg().exp", "torch.neg().exp", "torch.neg().exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.neg", "torch.neg", "torch.neg", "torch.neg", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "mu", ":", "torch", ".", "Tensor", ",", "std", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "sigma", "=", "std", "**", "2", "\n", "log1", "=", "0.5", "*", "torch", ".", "neg", "(", "torch", ".", "log", "(", "sigma", ")", ")", ".", "exp", "(", ")", "\n", "mse", "=", "(", "target", "-", "mu", ")", "**", "2", "\n", "log2", "=", "0.5", "*", "torch", ".", "log", "(", "sigma", ")", "\n", "return", "torch", ".", "sum", "(", "log1", "*", "mse", "+", "log2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.losses.HeteroscedasticLossv2.forward": [[16, 22], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.neg().exp", "torch.neg().exp", "torch.neg().exp", "torch.neg().exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.neg", "torch.neg", "torch.neg", "torch.neg", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "mu", ":", "torch", ".", "Tensor", ",", "std", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "sigma", "=", "std", "\n", "log1", "=", "0.5", "*", "torch", ".", "neg", "(", "torch", ".", "log", "(", "sigma", ")", ")", ".", "exp", "(", ")", "\n", "mse", "=", "(", "target", "-", "mu", ")", "**", "2", "\n", "log2", "=", "0.5", "*", "torch", ".", "log", "(", "sigma", ")", "\n", "return", "torch", ".", "sum", "(", "log1", "*", "mse", "+", "log2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.losses.HeteroApproxLoss.forward": [[26, 33], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.neg().exp", "torch.neg().exp", "torch.neg().exp", "torch.neg().exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.neg", "torch.neg", "torch.neg", "torch.neg", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "pred", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "sigma", "=", "pred", "**", "2", "\n", "l1", "=", "0.5", "*", "torch", ".", "neg", "(", "torch", ".", "log", "(", "sigma", ")", ")", ".", "exp", "(", ")", "\n", "l2", "=", "0.5", "*", "torch", ".", "log", "(", "sigma", ")", "\n", "mse", "=", "target", "**", "2", "\n", "#return torch.mean(0.5*pred**(-2)*(target**2)+(0.5*torch.log(pred**2)))", "\n", "return", "torch", ".", "sum", "(", "l1", "*", "mse", "+", "l2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.losses.HeteroApproxLossv2.forward": [[37, 44], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.neg().exp", "torch.neg().exp", "torch.neg().exp", "torch.neg().exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.neg", "torch.neg", "torch.neg", "torch.neg", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "pred", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "sigma", "=", "pred", "\n", "l1", "=", "0.5", "*", "torch", ".", "neg", "(", "torch", ".", "log", "(", "sigma", ")", ")", ".", "exp", "(", ")", "\n", "l2", "=", "0.5", "*", "torch", ".", "log", "(", "sigma", ")", "\n", "mse", "=", "target", "**", "2", "\n", "#return torch.mean(0.5*pred**(-2)*(target**2)+(0.5*torch.log(pred**2)))", "\n", "return", "torch", ".", "sum", "(", "l1", "*", "mse", "+", "l2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.modules.losses.SquaredLoss.forward": [[46, 51], ["torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "pred", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "mse", "=", "(", "target", "**", "2", "-", "pred", "**", "2", ")", "**", "2", "\n", "\n", "#return torch.mean(0.5*pred**(-2)*(target**2)+(0.5*torch.log(pred**2)))", "\n", "return", "torch", ".", "mean", "(", "mse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.test_ranking_metric.TestRankingMetric.tearDownClass": [[20, 23], ["shutil.rmtree", "os.path.join"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "tearDownClass", "(", "cls", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"checkpoints\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.test_ranking_metric.TestRankingMetric.test_training": [[24, 74], ["pytorch_lightning.seed_everything", "pytorch_lightning.trainer.trainer.Trainer", "comet.models.RankingMetric", "pytorch_lightning.trainer.trainer.Trainer.fit", "test_ranking_metric.TestRankingMetric.assertTrue", "comet.models.RankingMetric.load_from_checkpoint", "comet.models.RankingMetric.load_from_checkpoint.read_csv", "torch.utils.data.DataLoader", "torch.cat().cpu().tolist", "os.path.exists", "os.path.join", "os.path.join", "scipy.stats.pearsonr", "os.path.join", "os.path.join", "os.path.join", "multiprocessing.cpu_count", "torch.cat().cpu", "comet.models.RankingMetric.load_from_checkpoint.prepare_sample", "torch.cat", "pytorch_lightning.trainer.trainer.Trainer.predict"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.__init__.load_from_checkpoint", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.read_csv", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.predict"], ["", "def", "test_training", "(", "self", ")", ":", "\n", "        ", "seed_everything", "(", "12", ")", "\n", "trainer", "=", "Trainer", "(", "\n", "gpus", "=", "0", ",", "\n", "max_epochs", "=", "4", ",", "\n", "deterministic", "=", "True", ",", "\n", "checkpoint_callback", "=", "True", ",", "\n", "default_root_dir", "=", "DATA_PATH", ",", "\n", "logger", "=", "False", ",", "\n", "weights_summary", "=", "None", ",", "\n", "progress_bar_refresh_rate", "=", "0", ",", "\n", ")", "\n", "model", "=", "RankingMetric", "(", "\n", "encoder_model", "=", "\"BERT\"", ",", "\n", "pretrained_model", "=", "\"google/bert_uncased_L-2_H-128_A-2\"", ",", "\n", "train_data", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"test_ranking_data.csv\"", ")", ",", "\n", "validation_data", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"test_ranking_data.csv\"", ")", ",", "\n", "layerwise_decay", "=", "0.95", ",", "\n", "batch_size", "=", "32", ",", "\n", "learning_rate", "=", "1e-04", ",", "\n", "encoder_learning_rate", "=", "1e-04", ",", "\n", ")", "\n", "trainer", ".", "fit", "(", "model", ")", "\n", "self", ".", "assertTrue", "(", "\n", "os", ".", "path", ".", "exists", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"checkpoints\"", ",", "\"epoch=3-step=15.ckpt\"", ")", "\n", ")", "\n", ")", "\n", "saved_model", "=", "RankingMetric", ".", "load_from_checkpoint", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"checkpoints\"", ",", "\"epoch=3-step=15.ckpt\"", ")", "\n", ")", "\n", "dataset", "=", "saved_model", ".", "read_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"test_regression_data.csv\"", ")", ",", "regression", "=", "True", "\n", ")", "\n", "y", "=", "[", "s", "[", "\"score\"", "]", "for", "s", "in", "dataset", "]", "\n", "dataloader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "256", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "saved_model", ".", "prepare_sample", "(", "x", ",", "inference", "=", "True", ")", ",", "\n", "num_workers", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "\n", ")", "\n", "y_hat", "=", "(", "\n", "torch", ".", "cat", "(", "\n", "trainer", ".", "predict", "(", "dataloaders", "=", "dataloader", ",", "return_predictions", "=", "True", ")", ",", "dim", "=", "0", "\n", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "tolist", "(", ")", "\n", ")", "\n", "# This shouldn't break!", "\n", "pearsonr", "(", "y_hat", ",", "y", ")", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.test_referenceless_regression.TestReferencelessRegression.tearDownClass": [[20, 23], ["shutil.rmtree", "os.path.join"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "tearDownClass", "(", "cls", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"checkpoints\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.test_referenceless_regression.TestReferencelessRegression.test_training": [[24, 76], ["pytorch_lightning.seed_everything", "pytorch_lightning.trainer.trainer.Trainer", "comet.models.ReferencelessRegression", "pytorch_lightning.trainer.trainer.Trainer.fit", "test_referenceless_regression.TestReferencelessRegression.assertTrue", "comet.models.ReferencelessRegression.load_from_checkpoint", "comet.models.ReferencelessRegression.load_from_checkpoint.read_csv", "torch.utils.data.DataLoader", "torch.cat().cpu().tolist", "test_referenceless_regression.TestReferencelessRegression.assertAlmostEqual", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "multiprocessing.cpu_count", "torch.cat().cpu", "scipy.stats.pearsonr", "comet.models.ReferencelessRegression.load_from_checkpoint.prepare_sample", "torch.cat", "pytorch_lightning.trainer.trainer.Trainer.predict"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.__init__.load_from_checkpoint", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.read_csv", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.predict"], ["", "def", "test_training", "(", "self", ")", ":", "\n", "\n", "        ", "seed_everything", "(", "12", ")", "\n", "trainer", "=", "Trainer", "(", "\n", "gpus", "=", "0", ",", "\n", "max_epochs", "=", "10", ",", "\n", "deterministic", "=", "True", ",", "\n", "checkpoint_callback", "=", "True", ",", "\n", "default_root_dir", "=", "DATA_PATH", ",", "\n", "logger", "=", "False", ",", "\n", "weights_summary", "=", "None", ",", "\n", "progress_bar_refresh_rate", "=", "0", ",", "\n", ")", "\n", "model", "=", "ReferencelessRegression", "(", "\n", "encoder_model", "=", "\"BERT\"", ",", "\n", "pretrained_model", "=", "\"google/bert_uncased_L-2_H-128_A-2\"", ",", "\n", "train_data", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"test_regression_data.csv\"", ")", ",", "\n", "validation_data", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"test_regression_data.csv\"", ")", ",", "\n", "hidden_sizes", "=", "[", "256", "]", ",", "\n", "layerwise_decay", "=", "0.95", ",", "\n", "batch_size", "=", "32", ",", "\n", "learning_rate", "=", "1e-04", ",", "\n", "encoder_learning_rate", "=", "1e-04", ",", "\n", ")", "\n", "trainer", ".", "fit", "(", "model", ")", "\n", "self", ".", "assertTrue", "(", "\n", "os", ".", "path", ".", "exists", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"checkpoints\"", ",", "\"epoch=9-step=159.ckpt\"", ")", "\n", ")", "\n", ")", "\n", "\n", "saved_model", "=", "ReferencelessRegression", ".", "load_from_checkpoint", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"checkpoints\"", ",", "\"epoch=9-step=159.ckpt\"", ")", "\n", ")", "\n", "dataset", "=", "saved_model", ".", "read_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"test_regression_data.csv\"", ")", "\n", ")", "\n", "y", "=", "[", "s", "[", "\"score\"", "]", "for", "s", "in", "dataset", "]", "\n", "dataloader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "256", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "saved_model", ".", "prepare_sample", "(", "x", ",", "inference", "=", "True", ")", ",", "\n", "num_workers", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "\n", ")", "\n", "y_hat", "=", "(", "\n", "torch", ".", "cat", "(", "\n", "trainer", ".", "predict", "(", "dataloaders", "=", "dataloader", ",", "return_predictions", "=", "True", ")", ",", "dim", "=", "0", "\n", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "tolist", "(", ")", "\n", ")", "\n", "self", ".", "assertAlmostEqual", "(", "pearsonr", "(", "y_hat", ",", "y", ")", "[", "0", "]", ",", "0.8", ",", "places", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.test_regression_metric.TestRegressionMetric.tearDownClass": [[20, 23], ["shutil.rmtree", "os.path.join"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "tearDownClass", "(", "cls", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"checkpoints\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.test_regression_metric.TestRegressionMetric.test_training": [[24, 75], ["pytorch_lightning.seed_everything", "pytorch_lightning.trainer.trainer.Trainer", "comet.models.RegressionMetric", "pytorch_lightning.trainer.trainer.Trainer.fit", "test_regression_metric.TestRegressionMetric.assertTrue", "comet.models.RegressionMetric.load_from_checkpoint", "comet.models.RegressionMetric.load_from_checkpoint.read_csv", "torch.utils.data.DataLoader", "torch.cat().cpu().tolist", "test_regression_metric.TestRegressionMetric.assertAlmostEqual", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "multiprocessing.cpu_count", "torch.cat().cpu", "scipy.stats.pearsonr", "comet.models.RegressionMetric.load_from_checkpoint.prepare_sample", "torch.cat", "pytorch_lightning.trainer.trainer.Trainer.predict"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.__init__.load_from_checkpoint", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.read_csv", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.predict"], ["", "def", "test_training", "(", "self", ")", ":", "\n", "        ", "seed_everything", "(", "12", ")", "\n", "trainer", "=", "Trainer", "(", "\n", "gpus", "=", "0", ",", "\n", "max_epochs", "=", "10", ",", "\n", "deterministic", "=", "True", ",", "\n", "checkpoint_callback", "=", "True", ",", "\n", "default_root_dir", "=", "DATA_PATH", ",", "\n", "logger", "=", "False", ",", "\n", "weights_summary", "=", "None", ",", "\n", "progress_bar_refresh_rate", "=", "0", ",", "\n", ")", "\n", "model", "=", "RegressionMetric", "(", "\n", "encoder_model", "=", "\"BERT\"", ",", "\n", "pretrained_model", "=", "\"google/bert_uncased_L-2_H-128_A-2\"", ",", "\n", "train_data", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"test_regression_data.csv\"", ")", ",", "\n", "validation_data", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"test_regression_data.csv\"", ")", ",", "\n", "hidden_sizes", "=", "[", "384", "]", ",", "\n", "layerwise_decay", "=", "0.95", ",", "\n", "batch_size", "=", "32", ",", "\n", "learning_rate", "=", "1e-04", ",", "\n", "encoder_learning_rate", "=", "1e-04", ",", "\n", ")", "\n", "trainer", ".", "fit", "(", "model", ")", "\n", "self", ".", "assertTrue", "(", "\n", "os", ".", "path", ".", "exists", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"checkpoints\"", ",", "\"epoch=9-step=159.ckpt\"", ")", "\n", ")", "\n", ")", "\n", "\n", "saved_model", "=", "RegressionMetric", ".", "load_from_checkpoint", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"checkpoints\"", ",", "\"epoch=9-step=159.ckpt\"", ")", "\n", ")", "\n", "dataset", "=", "saved_model", ".", "read_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"test_regression_data.csv\"", ")", "\n", ")", "\n", "y", "=", "[", "s", "[", "\"score\"", "]", "for", "s", "in", "dataset", "]", "\n", "dataloader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "256", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "saved_model", ".", "prepare_sample", "(", "x", ",", "inference", "=", "True", ")", ",", "\n", "num_workers", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "\n", ")", "\n", "y_hat", "=", "(", "\n", "torch", ".", "cat", "(", "\n", "trainer", ".", "predict", "(", "dataloaders", "=", "dataloader", ",", "return_predictions", "=", "True", ")", ",", "dim", "=", "0", "\n", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "tolist", "(", ")", "\n", ")", "\n", "self", ".", "assertAlmostEqual", "(", "pearsonr", "(", "y_hat", ",", "y", ")", "[", "0", "]", ",", "0.8", ",", "places", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.__init__": [[65, 126], ["pytorch_lightning.LightningModule.__init__", "base.CometModel.save_hyperparameters", "str2encoder[].from_pretrained", "comet.modules.LayerwiseAttention", "base.CometModel.freeze_encoder", "base.CometModel.freeze_encoder", "base.CometModel.encoder.freeze_embeddings", "os.path.exists", "base.CometModel.load_weights", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.__init__", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.xlmr.XLMREncoder.from_pretrained", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.freeze_encoder", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.freeze_encoder", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.bert.BERTEncoder.freeze_embeddings", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.load_weights"], ["def", "__init__", "(", "\n", "self", ",", "\n", "nr_frozen_epochs", ":", "Union", "[", "float", ",", "int", "]", "=", "0.3", ",", "\n", "keep_embeddings_frozen", ":", "bool", "=", "False", ",", "\n", "keep_encoder_frozen", ":", "bool", "=", "False", ",", "\n", "optimizer", ":", "str", "=", "\"AdamW\"", ",", "\n", "encoder_learning_rate", ":", "float", "=", "1e-05", ",", "\n", "learning_rate", ":", "float", "=", "3e-05", ",", "\n", "layerwise_decay", ":", "float", "=", "0.95", ",", "\n", "encoder_model", ":", "str", "=", "\"XLM-RoBERTa\"", ",", "\n", "pretrained_model", ":", "str", "=", "\"xlm-roberta-large\"", ",", "\n", "pool", ":", "str", "=", "\"avg\"", ",", "\n", "layer", ":", "Union", "[", "str", ",", "int", "]", "=", "\"mix\"", ",", "\n", "dropout", ":", "float", "=", "0.1", ",", "\n", "batch_size", ":", "int", "=", "4", ",", "\n", "train_data", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "validation_data", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "load_weights_from_checkpoint", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "class_identifier", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "loss", ":", "Optional", "[", "str", "]", "=", "\"mse\"", ",", "\n", "data_portion", ":", "Optional", "[", "float", "]", "=", "1.0", ",", "\n", "feature_size", ":", "Optional", "[", "int", "]", "=", "0", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "save_hyperparameters", "(", "\n", "ignore", "=", "[", "\"train_data\"", ",", "\"validation_data\"", ",", "\"load_weights_from_checkpoint\"", "]", "\n", ")", "\n", "self", ".", "encoder", "=", "str2encoder", "[", "self", ".", "hparams", ".", "encoder_model", "]", ".", "from_pretrained", "(", "\n", "self", ".", "hparams", ".", "pretrained_model", "\n", ")", "\n", "self", ".", "epoch_nr", "=", "0", "\n", "if", "self", ".", "hparams", ".", "layer", "==", "\"mix\"", ":", "\n", "            ", "self", ".", "layerwise_attention", "=", "LayerwiseAttention", "(", "\n", "num_layers", "=", "self", ".", "encoder", ".", "num_layers", ",", "\n", "dropout", "=", "self", ".", "hparams", ".", "dropout", ",", "\n", "layer_norm", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layerwise_attention", "=", "None", "\n", "\n", "", "if", "self", ".", "hparams", ".", "nr_frozen_epochs", ">", "0", ":", "\n", "            ", "self", ".", "_frozen", "=", "True", "\n", "self", ".", "freeze_encoder", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_frozen", "=", "False", "\n", "", "if", "self", ".", "hparams", ".", "keep_encoder_frozen", ":", "\n", "            ", "self", ".", "_frozen", "=", "True", "\n", "self", ".", "freeze_encoder", "(", ")", "\n", "\n", "", "if", "self", ".", "hparams", ".", "keep_embeddings_frozen", ":", "\n", "            ", "self", ".", "encoder", ".", "freeze_embeddings", "(", ")", "\n", "\n", "", "self", ".", "nr_frozen_epochs", "=", "self", ".", "hparams", ".", "nr_frozen_epochs", "\n", "\n", "if", "load_weights_from_checkpoint", "is", "not", "None", ":", "\n", "            ", "if", "path", ".", "exists", "(", "load_weights_from_checkpoint", ")", ":", "\n", "                ", "self", ".", "load_weights", "(", "load_weights_from_checkpoint", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"Path {load_weights_from_checkpoint} does not exist!\"", ")", "\n", "\n", "", "", "self", ".", "mc_dropout", "=", "False", "# Flag used to control usage of MC Dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.set_mc_dropout": [[127, 129], ["None"], "methods", ["None"], ["", "def", "set_mc_dropout", "(", "self", ",", "value", ":", "bool", ")", ":", "\n", "        ", "self", ".", "mc_dropout", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.load_weights": [[130, 148], ["logger.info", "torch.load", "base.CometModel.state_dict", "base.CometModel.update", "base.CometModel.load_state_dict", "pretrained_dict.items"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.wmt_kendall.WMTKendall.update"], ["", "def", "load_weights", "(", "self", ",", "checkpoint", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"Function that loads the weights from a given checkpoint file.\n        Note:\n            If the checkpoint model architecture is different then `self`, only\n            the common parts will be loaded.\n\n        :param checkpoint: Path to the checkpoint containing the weights to be loaded.\n        \"\"\"", "\n", "logger", ".", "info", "(", "f\"Loading weights from {checkpoint}.\"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "pretrained_dict", "=", "checkpoint", "[", "\"state_dict\"", "]", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "# 1. filter out unnecessary keys", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "# 2. overwrite entries in the existing state dict", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "# 3. load the new state dict", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.read_csv": [[149, 152], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "read_csv", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.prepare_sample": [[153, 158], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "prepare_sample", "(", "\n", "self", ",", "sample", ":", "List", "[", "Dict", "[", "str", ",", "Union", "[", "str", ",", "float", "]", "]", "]", ",", "*", "args", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.configure_optimizers": [[159, 162], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.init_metrics": [[163, 166], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "init_metrics", "(", "self", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.forward": [[167, 170], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.freeze_encoder": [[171, 174], ["logger.info", "base.CometModel.encoder.freeze"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.base.Encoder.freeze"], ["", "def", "freeze_encoder", "(", "self", ")", "->", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Encoder model frozen.\"", ")", "\n", "self", ".", "encoder", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.loss": [[175, 188], ["torch.nn.MSELoss", "comet.modules.HeteroscedasticLoss", "comet.modules.HeteroscedasticLossv2", "comet.modules.HeteroApproxLoss", "comet.modules.HeteroApproxLossv2", "comet.modules.SquaredLoss"], "methods", ["None"], ["", "@", "property", "\n", "def", "loss", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "hparams", ".", "loss", "in", "[", "\"var\"", ",", "\"hts\"", "]", ":", "\n", "            ", "return", "HeteroscedasticLoss", "(", ")", "\n", "", "elif", "self", ".", "hparams", ".", "loss", "in", "[", "\"var2\"", ",", "\"hts2\"", "]", ":", "\n", "            ", "return", "HeteroscedasticLossv2", "(", ")", "\n", "", "elif", "self", ".", "hparams", ".", "loss", "in", "[", "\"var_approx\"", ",", "\"hts_approx\"", "]", ":", "\n", "            ", "return", "HeteroApproxLoss", "(", ")", "\n", "", "elif", "self", ".", "hparams", ".", "loss", "in", "[", "\"var_approx2\"", ",", "\"hts_approx2\"", "]", ":", "\n", "            ", "return", "HeteroApproxLossv2", "(", ")", "\n", "", "elif", "self", ".", "hparams", ".", "loss", "in", "[", "\"squared\"", "]", ":", "\n", "            ", "return", "SquaredLoss", "(", ")", "\n", "", "return", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.compute_loss": [[189, 196], ["base.CometModel.loss", "base.CometModel.loss", "predictions[].view", "predictions[].view", "predictions[].view"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.ranking_metric.RankingMetric.loss", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.ranking_metric.RankingMetric.loss"], ["", "def", "compute_loss", "(", "\n", "self", ",", "predictions", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "targets", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "self", ".", "hparams", ".", "loss", "in", "[", "\"var\"", ",", "\"hts\"", "]", ":", "\n", "            ", "return", "self", ".", "loss", "(", "predictions", "[", "\"score\"", "]", ".", "view", "(", "-", "1", ")", ",", "predictions", "[", "\"variance\"", "]", ".", "view", "(", "-", "1", ")", ",", "targets", "[", "\"score\"", "]", ")", "\n", "\n", "", "return", "self", ".", "loss", "(", "predictions", "[", "\"score\"", "]", ".", "view", "(", "-", "1", ")", ",", "targets", "[", "\"score\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.unfreeze_encoder": [[197, 206], ["base.CometModel.encoder.unfreeze", "logger.info", "base.CometModel.encoder.freeze_embeddings"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.base.Encoder.unfreeze", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.bert.BERTEncoder.freeze_embeddings"], ["", "def", "unfreeze_encoder", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "_frozen", ":", "\n", "            ", "if", "self", ".", "trainer", ".", "is_global_zero", ":", "\n", "                ", "logger", ".", "info", "(", "\"Encoder model fine-tuning\"", ")", "\n", "\n", "", "self", ".", "encoder", ".", "unfreeze", "(", ")", "\n", "self", ".", "_frozen", "=", "False", "\n", "if", "self", ".", "hparams", ".", "keep_embeddings_frozen", ":", "\n", "                ", "self", ".", "encoder", ".", "freeze_embeddings", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.on_train_epoch_end": [[207, 213], ["base.CometModel.unfreeze_encoder"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.unfreeze_encoder"], ["", "", "", "def", "on_train_epoch_end", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Hook used to unfreeze encoder during training.\"\"\"", "\n", "self", ".", "epoch_nr", "+=", "1", "\n", "if", "self", ".", "epoch_nr", ">=", "self", ".", "nr_frozen_epochs", "and", "self", ".", "_frozen", "and", "not", "self", ".", "hparams", ".", "keep_encoder_frozen", ":", "\n", "            ", "self", ".", "unfreeze_encoder", "(", ")", "\n", "self", ".", "_frozen", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.get_sentence_embedding": [[214, 275], ["base.CometModel.encoder", "len", "range", "torch.cat", "base.CometModel.layerwise_attention", "Exception", "pooling_utils.max_pooling", "torch.split", "range", "base.CometModel.append", "pooling_utils.average_pooling", "len", "torch.split", "all_layers.append", "torch.split", "base.CometModel.layerwise_attention", "Exception"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.pooling_utils.max_pooling", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.pooling_utils.average_pooling"], ["", "", "def", "get_sentence_embedding", "(", "\n", "self", ",", "input_ids", ":", "torch", ".", "Tensor", ",", "attention_mask", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Function that extracts sentence embeddings for\n            a single sentence.\n\n        :param tokens: sequences [batch_size x seq_len]\n        :param lengths: lengths [batch_size]\n\n        :return: torch.Tensor [batch_size x hidden_size]\n        \"\"\"", "\n", "encoder_out", "=", "self", ".", "encoder", "(", "input_ids", ",", "attention_mask", ")", "\n", "if", "self", ".", "layerwise_attention", ":", "\n", "# HACK: LayerNorm is applied at the MiniBatch. This means that for big batch sizes the variance", "\n", "# and norm within the batch will create small differences in the final score", "\n", "# If we are predicting we split the data into equal size batches to minimize this variance.", "\n", "            ", "if", "not", "self", ".", "training", ":", "\n", "                ", "n_splits", "=", "len", "(", "torch", ".", "split", "(", "encoder_out", "[", "\"all_layers\"", "]", "[", "-", "1", "]", ",", "8", ")", ")", "\n", "embeddings", "=", "[", "]", "\n", "for", "split", "in", "range", "(", "n_splits", ")", ":", "\n", "                    ", "all_layers", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "len", "(", "encoder_out", "[", "\"all_layers\"", "]", ")", ")", ":", "\n", "                        ", "layer_embs", "=", "torch", ".", "split", "(", "encoder_out", "[", "\"all_layers\"", "]", "[", "layer", "]", ",", "8", ")", "\n", "all_layers", ".", "append", "(", "layer_embs", "[", "split", "]", ")", "\n", "", "split_attn", "=", "torch", ".", "split", "(", "attention_mask", ",", "8", ")", "[", "split", "]", "\n", "embeddings", ".", "append", "(", "self", ".", "layerwise_attention", "(", "all_layers", ",", "split_attn", ")", ")", "\n", "", "embeddings", "=", "torch", ".", "cat", "(", "embeddings", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "embeddings", "=", "self", ".", "layerwise_attention", "(", "\n", "encoder_out", "[", "\"all_layers\"", "]", ",", "attention_mask", "\n", ")", "\n", "\n", "", "", "elif", "self", ".", "hparams", ".", "layer", ">=", "0", "and", "self", ".", "hparams", ".", "layer", "<", "self", ".", "encoder", ".", "num_layers", ":", "\n", "            ", "embeddings", "=", "encoder_out", "[", "\"all_layers\"", "]", "[", "self", ".", "hparams", ".", "layer", "]", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Invalid model layer {}.\"", ".", "format", "(", "self", ".", "hparams", ".", "layer", ")", ")", "\n", "\n", "", "if", "self", ".", "hparams", ".", "pool", "==", "\"default\"", ":", "\n", "            ", "sentemb", "=", "encoder_out", "[", "\"sentemb\"", "]", "\n", "\n", "", "elif", "self", ".", "hparams", ".", "pool", "==", "\"max\"", ":", "\n", "            ", "sentemb", "=", "max_pooling", "(", "\n", "input_ids", ",", "embeddings", ",", "self", ".", "encoder", ".", "tokenizer", ".", "pad_token_id", "\n", ")", "\n", "\n", "", "elif", "self", ".", "hparams", ".", "pool", "==", "\"avg\"", ":", "\n", "            ", "sentemb", "=", "average_pooling", "(", "\n", "input_ids", ",", "\n", "embeddings", ",", "\n", "attention_mask", ",", "\n", "self", ".", "encoder", ".", "tokenizer", ".", "pad_token_id", ",", "\n", ")", "\n", "\n", "", "elif", "self", ".", "hparams", ".", "pool", "==", "\"cls\"", ":", "\n", "            ", "sentemb", "=", "embeddings", "[", ":", ",", "0", ",", ":", "]", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Invalid pooling technique.\"", ")", "\n", "\n", "", "return", "sentemb", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.training_step": [[276, 305], ["base.CometModel.forward", "base.CometModel.compute_loss", "base.CometModel.log", "base.CometModel.unfreeze_encoder"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.forward", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.compute_loss", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.unfreeze_encoder"], ["", "def", "training_step", "(", "\n", "self", ",", "\n", "batch", ":", "Tuple", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ",", "\n", "batch_nb", ":", "int", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Runs one training step and logs the training loss.\n\n        :param batch: The output of your prepare_sample function.\n        :param batch_nb: Integer displaying which batch this is.\n\n        :returns: Loss value\n        \"\"\"", "\n", "batch_input", ",", "batch_target", "=", "batch", "\n", "batch_prediction", "=", "self", ".", "forward", "(", "**", "batch_input", ")", "\n", "#if not self.lossalternate:", "\n", "loss_value", "=", "self", ".", "compute_loss", "(", "batch_prediction", ",", "batch_target", ")", "\n", "\n", "if", "(", "\n", "self", ".", "nr_frozen_epochs", "<", "1.0", "\n", "and", "self", ".", "nr_frozen_epochs", ">", "0.0", "\n", "and", "batch_nb", ">", "self", ".", "epoch_total_steps", "*", "self", ".", "nr_frozen_epochs", "\n", "and", "not", "self", ".", "hparams", ".", "keep_encoder_frozen", "\n", ")", ":", "\n", "            ", "self", ".", "unfreeze_encoder", "(", ")", "\n", "self", ".", "_frozen", "=", "False", "\n", "\n", "", "self", ".", "log", "(", "\"train_loss\"", ",", "loss_value", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ")", "\n", "return", "loss_value", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.validation_step": [[306, 337], ["base.CometModel.forward", "base.CometModel.compute_loss", "base.CometModel.log", "batch_prediction[].view().size", "torch.Size", "base.CometModel.train_metrics.update", "batch_prediction[].view", "batch_prediction[].view", "base.CometModel.val_metrics.update", "batch_prediction[].view"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.forward", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.compute_loss", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.wmt_kendall.WMTKendall.update", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.wmt_kendall.WMTKendall.update"], ["", "def", "validation_step", "(", "\n", "self", ",", "\n", "batch", ":", "Tuple", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ",", "\n", "batch_nb", ":", "int", ",", "\n", "dataloader_idx", ":", "int", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Runs one validation step and logs metrics.\n\n        :param batch: The output of your prepare_sample function.\n        :param batch_nb: Integer displaying which batch this is.\n        :param dataloader_idx: Integer displaying which dataloader this is.\n        \"\"\"", "\n", "batch_input", ",", "batch_target", "=", "batch", "\n", "batch_prediction", "=", "self", ".", "forward", "(", "**", "batch_input", ")", "\n", "loss_value", "=", "self", ".", "compute_loss", "(", "batch_prediction", ",", "batch_target", ")", "\n", "\n", "self", ".", "log", "(", "\"val_loss\"", ",", "loss_value", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ")", "\n", "\n", "# TODO: REMOVE if condition after torchmetrics bug fix", "\n", "if", "batch_prediction", "[", "\"score\"", "]", ".", "view", "(", "-", "1", ")", ".", "size", "(", ")", "!=", "torch", ".", "Size", "(", "[", "1", "]", ")", ":", "\n", "            ", "if", "dataloader_idx", "==", "0", ":", "\n", "                ", "self", ".", "train_metrics", ".", "update", "(", "\n", "batch_prediction", "[", "\"score\"", "]", ".", "view", "(", "-", "1", ")", ",", "batch_target", "[", "\"score\"", "]", "\n", ")", "\n", "", "elif", "dataloader_idx", "==", "1", ":", "\n", "                ", "self", ".", "val_metrics", ".", "update", "(", "\n", "batch_prediction", "[", "\"score\"", "]", ".", "view", "(", "-", "1", ")", ",", "batch_target", "[", "\"score\"", "]", "\n", ")", "\n", "#print(loss_value)", "\n", "", "", "return", "loss_value", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.on_predict_start": [[338, 344], ["base.CometModel.train", "base.CometModel.eval"], "methods", ["None"], ["", "def", "on_predict_start", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Called when predict begins.\"\"\"", "\n", "if", "self", ".", "mc_dropout", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.predict_step": [[345, 389], ["base.CometModel.", "isinstance", "output[].view", "torch.empty", "torch.empty", "range", "torch.empty.mean", "torch.empty.std", "isinstance", "base.CometModel.", "outputs[].view", "isinstance", "torch.empty.mean", "torch.empty.std", "output[].view", "output[].view", "outputs[].view"], "methods", ["None"], ["", "", "def", "predict_step", "(", "\n", "self", ",", "\n", "batch", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "\n", "batch_idx", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "dataloader_idx", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Runs one prediction step and returns the predicted values.\n\n        :param batch: The output of your prepare_sample function.\n        :param batch_nb: Integer displaying which batch this is.\n        :param dataloader_idx: Integer displaying which dataloader this is.\n        \"\"\"", "\n", "if", "self", ".", "mc_dropout", ":", "\n", "#print(self.loss)", "\n", "#print(isinstance(self.loss, HeteroscedasticLoss))", "\n", "#mcd_outputs = torch.stack(", "\n", "#    [self(**batch)[\"score\"].view(-1) for _ in range(self.mc_dropout)]", "\n", "#)", "\n", "            ", "mcd_outputs", "=", "torch", ".", "empty", "(", "size", "=", "(", "self", ".", "mc_dropout", ",", "2", ")", ")", "\n", "hts_outputs", "=", "torch", ".", "empty", "(", "size", "=", "(", "self", ".", "mc_dropout", ",", "2", ")", ")", "\n", "\n", "# mcd_outputs = torch.empty(size=(self.mc_dropout, self.hparams.batch_size))", "\n", "# hts_outputs = torch.empty(size=(self.mc_dropout, self.hparams.batch_size))", "\n", "for", "i", "in", "range", "(", "self", ".", "mc_dropout", ")", ":", "\n", "                ", "outputs", "=", "self", "(", "**", "batch", ")", "\n", "\n", "mcd_outputs", "[", "i", ",", ":", "]", "=", "outputs", "[", "\"score\"", "]", ".", "view", "(", "-", "1", ")", "\n", "if", "isinstance", "(", "self", ".", "loss", ",", "HeteroscedasticLoss", ")", ":", "\n", "                    ", "hts_outputs", "[", "i", "]", "=", "outputs", "[", "\"variance\"", "]", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "", "mcd_mean", "=", "mcd_outputs", ".", "mean", "(", "dim", "=", "0", ")", "\n", "mcd_std", "=", "mcd_outputs", ".", "std", "(", "dim", "=", "0", ")", "\n", "#print(mcd_mean)", "\n", "if", "isinstance", "(", "self", ".", "loss", ",", "HeteroscedasticLoss", ")", ":", "\n", "                ", "hts_mean", "=", "hts_outputs", ".", "mean", "(", "dim", "=", "0", ")", "\n", "hts_std", "=", "hts_outputs", ".", "std", "(", "dim", "=", "0", ")", "\n", "return", "mcd_mean", ",", "mcd_std", ",", "hts_mean", ",", "hts_std", "\n", "", "return", "mcd_mean", ",", "mcd_std", "\n", "\n", "", "output", "=", "self", "(", "**", "batch", ")", "\n", "if", "isinstance", "(", "self", ".", "loss", ",", "HeteroscedasticLoss", ")", ":", "\n", "            ", "return", "output", "[", "\"score\"", "]", ".", "view", "(", "-", "1", ")", ",", "output", "[", "\"variance\"", "]", ".", "view", "(", "-", "1", ")", "\n", "", "return", "output", "[", "\"score\"", "]", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.validation_epoch_end": [[390, 399], ["torch.stack().mean", "base.CometModel.logger.experiment.add_scalar", "base.CometModel.log_dict", "base.CometModel.log_dict", "base.CometModel.train_metrics.reset", "base.CometModel.val_metrics.reset", "base.CometModel.train_metrics.compute", "base.CometModel.val_metrics.compute", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.wmt_kendall.WMTKendall.compute", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.wmt_kendall.WMTKendall.compute"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ",", "*", "args", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "\"\"\" \" Computes and logs metrics.\"\"\"", "\n", "#print(outputs)", "\n", "avg_loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "0", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "self", ".", "logger", ".", "experiment", ".", "add_scalar", "(", "'validation_loss'", ",", "avg_loss", ",", "self", ".", "current_epoch", ")", "\n", "self", ".", "log_dict", "(", "self", ".", "train_metrics", ".", "compute", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "self", ".", "log_dict", "(", "self", ".", "val_metrics", ".", "compute", "(", ")", ",", "prog_bar", "=", "True", ")", "\n", "self", ".", "train_metrics", ".", "reset", "(", ")", "\n", "self", ".", "val_metrics", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.setup": [[400, 424], ["base.CometModel.read_csv", "base.CometModel.read_csv", "numpy.random.choice", "torch.utils.data.Subset", "base.CometModel.init_metrics", "print", "len", "int", "list", "print", "len", "float", "len", "random.sample", "len", "max", "len"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.read_csv", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.read_csv", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.regression_metric_hybrid.RegressionMetric.init_metrics"], ["", "def", "setup", "(", "self", ",", "stage", ")", "->", "None", ":", "\n", "        ", "\"\"\"Data preparation function called before training by Lightning.\n\n        :param stage: either 'fit', 'validate', 'test', or 'predict'\n        \"\"\"", "\n", "if", "stage", "in", "(", "None", ",", "\"fit\"", ")", ":", "\n", "            ", "self", ".", "train_dataset", "=", "self", ".", "read_csv", "(", "self", ".", "hparams", ".", "train_data", ")", "\n", "if", "self", ".", "hparams", ".", "data_portion", "<", "1.0", ":", "\n", "                ", "print", "(", "len", "(", "self", ".", "train_dataset", ")", ")", "\n", "length", "=", "len", "(", "self", ".", "train_dataset", ")", "\n", "data_size", "=", "int", "(", "self", ".", "hparams", ".", "data_portion", "*", "length", ")", "\n", "self", ".", "train_dataset", "=", "list", "(", "random", ".", "sample", "(", "self", ".", "train_dataset", ",", "data_size", ")", ")", "\n", "print", "(", "len", "(", "self", ".", "train_dataset", ")", ")", "\n", "", "self", ".", "validation_dataset", "=", "self", ".", "read_csv", "(", "self", ".", "hparams", ".", "validation_data", ")", "\n", "\n", "self", ".", "epoch_total_steps", "=", "len", "(", "self", ".", "train_dataset", ")", "//", "(", "\n", "self", ".", "hparams", ".", "batch_size", "*", "max", "(", "1", ",", "self", ".", "trainer", ".", "num_gpus", ")", "\n", ")", "\n", "self", ".", "total_steps", "=", "self", ".", "epoch_total_steps", "*", "float", "(", "self", ".", "trainer", ".", "max_epochs", ")", "\n", "\n", "# Always validate the model with 2k examples to control overfit.", "\n", "train_subset", "=", "np", ".", "random", ".", "choice", "(", "a", "=", "len", "(", "self", ".", "train_dataset", ")", ",", "size", "=", "2000", ")", "\n", "self", ".", "train_subset", "=", "Subset", "(", "self", ".", "train_dataset", ",", "train_subset", ")", "\n", "self", ".", "init_metrics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.train_dataloader": [[425, 433], ["torch.utils.data.DataLoader", "torch.utils.data.RandomSampler", "multiprocessing.cpu_count", "base.CometModel.prepare_sample"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample"], ["", "", "def", "train_dataloader", "(", "self", ")", "->", "DataLoader", ":", "\n", "        ", "\"\"\"Function that loads the train set.\"\"\"", "\n", "return", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "train_dataset", ",", "\n", "sampler", "=", "RandomSampler", "(", "self", ".", "train_dataset", ")", ",", "\n", "batch_size", "=", "self", ".", "hparams", ".", "batch_size", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "self", ".", "prepare_sample", "(", "x", ",", "inference", "=", "False", ",", "data_portion", "=", "self", ".", "hparams", ".", "data_portion", ")", ",", "\n", "num_workers", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.val_dataloader": [[435, 449], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "min", "min", "base.CometModel.prepare_sample", "multiprocessing.cpu_count", "multiprocessing.cpu_count"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample"], ["", "def", "val_dataloader", "(", "self", ")", "->", "DataLoader", ":", "\n", "        ", "\"\"\"Function that loads the validation set.\"\"\"", "\n", "return", "[", "\n", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "train_subset", ",", "\n", "batch_size", "=", "self", ".", "hparams", ".", "batch_size", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "self", ".", "prepare_sample", "(", "x", ",", "inference", "=", "False", ",", "data_portion", "=", "self", ".", "hparams", ".", "data_portion", ")", ",", "\n", "num_workers", "=", "min", "(", "8", ",", "multiprocessing", ".", "cpu_count", "(", ")", ")", ",", "\n", ")", ",", "\n", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "validation_dataset", ",", "\n", "batch_size", "=", "self", ".", "hparams", ".", "batch_size", ",", "\n", "collate_fn", "=", "self", ".", "prepare_sample", ",", "\n", "num_workers", "=", "min", "(", "8", ",", "multiprocessing", ".", "cpu_count", "(", ")", ")", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.predict": [[452, 558], ["base.CometModel.eval", "torch.utils.data.DataLoader", "PredictProgressBar", "pytorch_lightning.Trainer", "float", "base.CometModel.set_mc_dropout", "pytorch_lightning.Trainer.predict", "torch.cat().tolist", "torch.cat().tolist", "isinstance", "pytorch_lightning.Trainer.predict", "isinstance", "tqdm.tqdm.tqdm", "float", "multiprocessing.cpu_count", "torch.cat().tolist", "torch.cat().tolist", "torch.cat().tolist", "torch.cat().tolist", "torch.cat().tolist", "base.CometModel.prepare_sample", "torch.cat", "torch.cat", "sum", "len", "torch.cat", "torch.cat", "sum", "len", "torch.cat", "torch.cat", "sum", "len", "torch.cat", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.set_mc_dropout", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.predict", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.predict", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample"], ["", "def", "predict", "(", "\n", "self", ",", "\n", "samples", ":", "List", "[", "Dict", "[", "str", ",", "str", "]", "]", ",", "\n", "batch_size", ":", "int", "=", "8", ",", "\n", "gpus", ":", "int", "=", "1", ",", "\n", "mc_dropout", ":", "Union", "[", "int", ",", "bool", "]", "=", "False", ",", "\n", ")", "->", "Union", "[", "Tuple", "[", "List", "[", "float", "]", ",", "float", "]", ",", "Tuple", "[", "List", "[", "float", "]", ",", "List", "[", "float", "]", ",", "float", "]", "]", ":", "\n", "        ", "\"\"\"Function that receives a list of samples (dictionaries with translations, sources and/or references)\n        and returns segment level scores and a system level score. If `mc_dropout` is set, it also returns for each\n        segment score, a confidence value.\n\n        :param samples: List with dictionaries with source, translations and/or references.\n        :param batch_size: Batch size used during inference.\n        :gpus: Number of GPUs to be used.\n\n        :return: List with segment-level scores and a system-score or segment-level scores, segment-level\n            confidence and a system-score.\n        \"\"\"", "\n", "\n", "class", "PredictProgressBar", "(", "ptl", ".", "callbacks", ".", "ProgressBar", ")", ":", "\n", "            ", "\"\"\"Default Lightning Progress bar writes to stdout, we replace stdout with stderr\"\"\"", "\n", "\n", "def", "init_predict_tqdm", "(", "self", ")", "->", "tqdm", ":", "\n", "                ", "bar", "=", "tqdm", "(", "\n", "desc", "=", "\"Predicting\"", ",", "\n", "initial", "=", "self", ".", "train_batch_idx", ",", "\n", "position", "=", "(", "2", "*", "self", ".", "process_position", ")", ",", "\n", "disable", "=", "self", ".", "is_disabled", ",", "\n", "leave", "=", "True", ",", "\n", "dynamic_ncols", "=", "True", ",", "\n", "file", "=", "sys", ".", "stderr", ",", "\n", "smoothing", "=", "0", ",", "\n", ")", "\n", "return", "bar", "\n", "\n", "# HACK: Workaround pytorch bug that prevents ParameterList to be used in DP", "\n", "# https://github.com/pytorch/pytorch/issues/36035", "\n", "", "", "if", "self", ".", "layerwise_attention", "is", "not", "None", "and", "gpus", ">", "1", ":", "\n", "            ", "self", ".", "layerwise_attention", ".", "gamma_value", "=", "float", "(", "\n", "self", ".", "layerwise_attention", ".", "gamma", "[", "0", "]", "\n", ")", "\n", "self", ".", "layerwise_attention", ".", "weights", "=", "[", "\n", "float", "(", "parameter", "[", "0", "]", ")", "\n", "for", "parameter", "in", "self", ".", "layerwise_attention", ".", "scalar_parameters", "\n", "]", "\n", "\n", "", "self", ".", "eval", "(", ")", "\n", "dataloader", "=", "DataLoader", "(", "\n", "dataset", "=", "samples", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "self", ".", "prepare_sample", "(", "x", ",", "inference", "=", "True", ")", ",", "\n", "num_workers", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "\n", ")", "\n", "\n", "prog_bar", "=", "PredictProgressBar", "(", ")", "\n", "#tb_logger = TensorBoardLogger(\"tb_logs\", name=\"DEUP_logger\")", "\n", "trainer", "=", "ptl", ".", "Trainer", "(", "\n", "gpus", "=", "gpus", ",", "\n", "deterministic", "=", "True", ",", "\n", "logger", "=", "False", ",", "\n", "callbacks", "=", "[", "prog_bar", "]", ",", "\n", "accelerator", "=", "\"dp\"", "if", "gpus", ">", "1", "else", "None", ",", "\n", ")", "\n", "\n", "if", "mc_dropout", ":", "\n", "            ", "self", ".", "set_mc_dropout", "(", "mc_dropout", ")", "\n", "predictions", "=", "trainer", ".", "predict", "(", "\n", "self", ",", "dataloaders", "=", "dataloader", ",", "return_predictions", "=", "True", "\n", ")", "\n", "mean_scores", "=", "[", "out", "[", "0", "]", "for", "out", "in", "predictions", "]", "\n", "std_scores", "=", "[", "out", "[", "1", "]", "for", "out", "in", "predictions", "]", "\n", "mean_scores", "=", "torch", ".", "cat", "(", "mean_scores", ",", "dim", "=", "0", ")", ".", "tolist", "(", ")", "\n", "std_scores", "=", "torch", ".", "cat", "(", "std_scores", ",", "dim", "=", "0", ")", ".", "tolist", "(", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "loss", ",", "HeteroscedasticLoss", ")", ":", "\n", "                ", "hts_scores", "=", "[", "out", "[", "2", "]", "for", "out", "in", "predictions", "]", "\n", "hts_std_scores", "=", "[", "out", "[", "3", "]", "for", "out", "in", "predictions", "]", "\n", "hts_scores", "=", "torch", ".", "cat", "(", "hts_scores", ",", "dim", "=", "0", ")", ".", "tolist", "(", ")", "\n", "hts_std_scores", "=", "torch", ".", "cat", "(", "hts_std_scores", ",", "dim", "=", "0", ")", ".", "tolist", "(", ")", "\n", "return", "mean_scores", ",", "std_scores", ",", "hts_scores", ",", "hts_std_scores", ",", "sum", "(", "mean_scores", ")", "/", "len", "(", "mean_scores", ")", "\n", "\n", "", "return", "mean_scores", ",", "std_scores", ",", "sum", "(", "mean_scores", ")", "/", "len", "(", "mean_scores", ")", "\n", "\n", "", "else", ":", "\n", "            ", "predictions", "=", "trainer", ".", "predict", "(", "\n", "self", ",", "dataloaders", "=", "dataloader", ",", "return_predictions", "=", "True", "\n", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "loss", ",", "HeteroscedasticLoss", ")", ":", "\n", "#print(predictions)", "\n", "                ", "mean_scores", "=", "[", "out", "[", "0", "]", "for", "out", "in", "predictions", "]", "\n", "\n", "hts_scores", "=", "[", "out", "[", "1", "]", "for", "out", "in", "predictions", "]", "\n", "#print(hts_scores)", "\n", "#print(len(predictions))", "\n", "\n", "\n", "quality_predictions", "=", "torch", ".", "cat", "(", "mean_scores", ",", "dim", "=", "0", ")", ".", "tolist", "(", ")", "\n", "variance_predictions", "=", "torch", ".", "cat", "(", "hts_scores", ",", "dim", "=", "0", ")", ".", "tolist", "(", ")", "\n", "#print(variance_predictions)", "\n", "#print(len(variance_predictions))", "\n", "\n", "return", "quality_predictions", ",", "variance_predictions", ",", "sum", "(", "quality_predictions", ")", "/", "len", "(", "quality_predictions", ")", "\n", "", "else", ":", "\n", "                ", "predictions", "=", "torch", ".", "cat", "(", "predictions", ",", "dim", "=", "0", ")", ".", "tolist", "(", ")", "\n", "return", "predictions", ",", "sum", "(", "predictions", ")", "/", "len", "(", "predictions", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.__init__.load_from_checkpoint": [[44, 62], ["os.path.exists", "os.path.exists", "Exception", "model_class.load_from_checkpoint", "Exception", "open", "yaml.load", "checkpoint_path.split", "yaml_file.read"], "function", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.__init__.load_from_checkpoint"], []], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.pooling_utils.average_pooling": [[18, 34], ["pooling_utils.mask_fill", "torch.sum", "mask.unsqueeze().expand().float().sum", "mask.unsqueeze().expand().float", "mask.unsqueeze().expand", "embeddings.size", "mask.unsqueeze"], "function", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.pooling_utils.mask_fill"], ["def", "average_pooling", "(", "\n", "tokens", ":", "torch", ".", "Tensor", ",", "\n", "embeddings", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "torch", ".", "Tensor", ",", "\n", "padding_index", ":", "int", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Average pooling function.\n    :param tokens: Word ids [batch_size x seq_length]\n    :param embeddings: Word embeddings [batch_size x seq_length x hidden_size]\n    :param mask: Padding mask [batch_size x seq_length]\n    :param padding_index: Padding value.\n    \"\"\"", "\n", "wordemb", "=", "mask_fill", "(", "0.0", ",", "tokens", ",", "embeddings", ",", "padding_index", ")", "\n", "sentemb", "=", "torch", ".", "sum", "(", "wordemb", ",", "1", ")", "\n", "sum_mask", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "embeddings", ".", "size", "(", ")", ")", ".", "float", "(", ")", ".", "sum", "(", "1", ")", "\n", "return", "sentemb", "/", "sum_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.pooling_utils.max_pooling": [[36, 45], ["mask_fill().max", "pooling_utils.mask_fill", "float"], "function", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.pooling_utils.mask_fill"], ["", "def", "max_pooling", "(", "\n", "tokens", ":", "torch", ".", "Tensor", ",", "embeddings", ":", "torch", ".", "Tensor", ",", "padding_index", ":", "int", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Max pooling function.\n    :param tokens: Word ids [batch_size x seq_length]\n    :param embeddings: Word embeddings [batch_size x seq_length x hidden_size]\n    :param padding_index: Padding value.\n    \"\"\"", "\n", "return", "mask_fill", "(", "float", "(", "\"-inf\"", ")", ",", "tokens", ",", "embeddings", ",", "padding_index", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.pooling_utils.mask_fill": [[47, 62], ["tokens.eq().unsqueeze", "embeddings.float().masked_fill_().type_as", "tokens.eq", "embeddings.float().masked_fill_", "embeddings.float"], "function", ["None"], ["", "def", "mask_fill", "(", "\n", "fill_value", ":", "float", ",", "\n", "tokens", ":", "torch", ".", "Tensor", ",", "\n", "embeddings", ":", "torch", ".", "Tensor", ",", "\n", "padding_index", ":", "int", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Function that masks embeddings representing padded elements.\n    :param fill_value: the value to fill the embeddings belonging to padded tokens.\n    :param tokens: The input sequences [bsz x seq_len].\n    :param embeddings: word embeddings [bsz x seq_len x hiddens].\n    :param padding_index: Index of the padding token.\n    \"\"\"", "\n", "padding_mask", "=", "tokens", ".", "eq", "(", "padding_index", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "embeddings", ".", "float", "(", ")", ".", "masked_fill_", "(", "padding_mask", ",", "fill_value", ")", ".", "type_as", "(", "embeddings", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.unit.test_download_utils.TestDownloadModel.tearDownClass": [[11, 14], ["shutil.rmtree", "os.path.join"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "tearDownClass", "(", "cls", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"wmt21-cometinho-da\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.unit.test_download_utils.TestDownloadModel.test_download_from_s3": [[15, 24], ["comet.download_utils.download_model", "test_download_utils.TestDownloadModel.assertTrue", "test_download_utils.TestDownloadModel.assertTrue", "comet.models.load_from_checkpoint", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils.download_model", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.__init__.load_from_checkpoint"], ["", "def", "test_download_from_s3", "(", "self", ")", ":", "\n", "        ", "data_path", "=", "download_model", "(", "\"wmt21-cometinho-da\"", ",", "saving_directory", "=", "DATA_PATH", ")", "\n", "self", ".", "assertTrue", "(", "\n", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"wmt21-cometinho-da/hparams.yaml\"", ")", ")", "\n", ")", "\n", "self", ".", "assertTrue", "(", "\n", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "\"wmt21-cometinho-da/checkpoints/\"", ")", ")", "\n", ")", "\n", "load_from_checkpoint", "(", "data_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.test_bert.TestBERTEncoder.test_num_layers": [[11, 13], ["test_bert.TestBERTEncoder.assertEqual"], "methods", ["None"], ["def", "test_num_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "self", ".", "bert", ".", "num_layers", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.test_bert.TestBERTEncoder.test_output_units": [[14, 16], ["test_bert.TestBERTEncoder.assertEqual"], "methods", ["None"], ["", "def", "test_output_units", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "self", ".", "bert", ".", "output_units", ",", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.test_bert.TestBERTEncoder.test_max_positions": [[17, 19], ["test_bert.TestBERTEncoder.assertEqual"], "methods", ["None"], ["", "def", "test_max_positions", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "self", ".", "bert", ".", "max_positions", ",", "512", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.test_bert.TestBERTEncoder.test_prepare_sample": [[20, 25], ["test_bert.TestBERTEncoder.bert.prepare_sample", "test_bert.TestBERTEncoder.assertIn", "test_bert.TestBERTEncoder.assertIn"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample"], ["", "def", "test_prepare_sample", "(", "self", ")", ":", "\n", "        ", "sample", "=", "[", "\"hello world, welcome to COMET!\"", ",", "\"This is a batch\"", "]", "\n", "model_input", "=", "self", ".", "bert", ".", "prepare_sample", "(", "sample", ")", "\n", "self", ".", "assertIn", "(", "\"input_ids\"", ",", "model_input", ")", "\n", "self", ".", "assertIn", "(", "\"attention_mask\"", ",", "model_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.test_bert.TestBERTEncoder.test_forward": [[26, 34], ["test_bert.TestBERTEncoder.bert.prepare_sample", "test_bert.TestBERTEncoder.bert", "test_bert.TestBERTEncoder.assertIn", "test_bert.TestBERTEncoder.assertIn", "test_bert.TestBERTEncoder.assertIn", "test_bert.TestBERTEncoder.assertIn"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "sample", "=", "[", "\"hello world, welcome to COMET!\"", ",", "\"This is a batch\"", "]", "\n", "model_input", "=", "self", ".", "bert", ".", "prepare_sample", "(", "sample", ")", "\n", "model_output", "=", "self", ".", "bert", "(", "**", "model_input", ")", "\n", "self", ".", "assertIn", "(", "\"wordemb\"", ",", "model_output", ")", "\n", "self", ".", "assertIn", "(", "\"sentemb\"", ",", "model_output", ")", "\n", "self", ".", "assertIn", "(", "\"all_layers\"", ",", "model_output", ")", "\n", "self", ".", "assertIn", "(", "\"attention_mask\"", ",", "model_output", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.test_xlmr.TestXLMREncoder.test_num_layers": [[11, 13], ["test_xlmr.TestXLMREncoder.assertEqual"], "methods", ["None"], ["def", "test_num_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "self", ".", "xlmr", ".", "num_layers", ",", "7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.test_xlmr.TestXLMREncoder.test_output_units": [[14, 16], ["test_xlmr.TestXLMREncoder.assertEqual"], "methods", ["None"], ["", "def", "test_output_units", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "self", ".", "xlmr", ".", "output_units", ",", "384", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.test_xlmr.TestXLMREncoder.test_max_positions": [[17, 19], ["test_xlmr.TestXLMREncoder.assertEqual"], "methods", ["None"], ["", "def", "test_max_positions", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "self", ".", "xlmr", ".", "max_positions", ",", "514", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.test_xlmr.TestXLMREncoder.test_prepare_sample": [[20, 25], ["test_xlmr.TestXLMREncoder.xlmr.prepare_sample", "test_xlmr.TestXLMREncoder.assertIn", "test_xlmr.TestXLMREncoder.assertIn"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample"], ["", "def", "test_prepare_sample", "(", "self", ")", ":", "\n", "        ", "sample", "=", "[", "\"hello world, welcome to COMET!\"", ",", "\"This is a batch\"", "]", "\n", "model_input", "=", "self", ".", "xlmr", ".", "prepare_sample", "(", "sample", ")", "\n", "self", ".", "assertIn", "(", "\"input_ids\"", ",", "model_input", ")", "\n", "self", ".", "assertIn", "(", "\"attention_mask\"", ",", "model_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.test_xlmr.TestXLMREncoder.test_forward": [[26, 34], ["test_xlmr.TestXLMREncoder.xlmr.prepare_sample", "test_xlmr.TestXLMREncoder.xlmr", "test_xlmr.TestXLMREncoder.assertIn", "test_xlmr.TestXLMREncoder.assertIn", "test_xlmr.TestXLMREncoder.assertIn", "test_xlmr.TestXLMREncoder.assertIn"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "sample", "=", "[", "\"hello world, welcome to COMET!\"", ",", "\"This is a batch\"", "]", "\n", "model_input", "=", "self", ".", "xlmr", ".", "prepare_sample", "(", "sample", ")", "\n", "model_output", "=", "self", ".", "xlmr", "(", "**", "model_input", ")", "\n", "self", ".", "assertIn", "(", "\"wordemb\"", ",", "model_output", ")", "\n", "self", ".", "assertIn", "(", "\"sentemb\"", ",", "model_output", ")", "\n", "self", ".", "assertIn", "(", "\"all_layers\"", ",", "model_output", ")", "\n", "self", ".", "assertIn", "(", "\"attention_mask\"", ",", "model_output", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.base.Encoder.output_units": [[29, 34], ["None"], "methods", ["None"], ["import", "pytorch_lightning", "as", "ptl", "\n", "import", "torch", "\n", "from", "comet", ".", "encoders", "import", "str2encoder", "\n", "from", "comet", ".", "modules", "import", "LayerwiseAttention", ",", "HeteroscedasticLoss", ",", "HeteroscedasticLossv2", ",", "HeteroApproxLoss", ",", "HeteroApproxLossv2", ",", "SquaredLoss", "\n", "from", "torch", "import", "nn", "\n", "from", "torch", ".", "utils", ".", "data", "import", "DataLoader", ",", "RandomSampler", ",", "Subset", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.base.Encoder.max_positions": [[35, 40], ["None"], "methods", ["None"], ["from", "pytorch_lightning", ".", "loggers", "import", "TensorBoardLogger", "\n", "from", "tqdm", "import", "tqdm", "\n", "\n", "from", ".", "pooling_utils", "import", "average_pooling", ",", "max_pooling", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.base.Encoder.num_layers": [[41, 46], ["None"], "methods", ["None"], ["\n", "\n", "class", "CometModel", "(", "ptl", ".", "LightningModule", ",", "metaclass", "=", "abc", ".", "ABCMeta", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.base.Encoder.from_pretrained": [[47, 55], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.base.Encoder.prepare_sample": [[56, 71], ["base.Encoder.tokenizer"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "nr_frozen_epochs", ":", "Union", "[", "float", ",", "int", "]", "=", "0.3", ",", "\n", "keep_embeddings_frozen", ":", "bool", "=", "False", ",", "\n", "keep_encoder_frozen", ":", "bool", "=", "False", ",", "\n", "optimizer", ":", "str", "=", "\"AdamW\"", ",", "\n", "encoder_learning_rate", ":", "float", "=", "1e-05", ",", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.base.Encoder.freeze": [[72, 76], ["base.Encoder.parameters"], "methods", ["None"], ["learning_rate", ":", "float", "=", "3e-05", ",", "\n", "layerwise_decay", ":", "float", "=", "0.95", ",", "\n", "encoder_model", ":", "str", "=", "\"XLM-RoBERTa\"", ",", "\n", "pretrained_model", ":", "str", "=", "\"xlm-roberta-large\"", ",", "\n", "pool", ":", "str", "=", "\"avg\"", ",", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.base.Encoder.unfreeze": [[77, 81], ["base.Encoder.parameters"], "methods", ["None"], ["layer", ":", "Union", "[", "str", ",", "int", "]", "=", "\"mix\"", ",", "\n", "dropout", ":", "float", "=", "0.1", ",", "\n", "batch_size", ":", "int", "=", "4", ",", "\n", "train_data", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "validation_data", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.base.Encoder.freeze_embeddings": [[82, 86], ["None"], "methods", ["None"], ["load_weights_from_checkpoint", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "class_identifier", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "loss", ":", "Optional", "[", "str", "]", "=", "\"mse\"", ",", "\n", "data_portion", ":", "Optional", "[", "float", "]", "=", "1.0", ",", "\n", "feature_size", ":", "Optional", "[", "int", "]", "=", "0", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.base.Encoder.layerwise_lr": [[87, 96], ["None"], "methods", ["None"], [")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "save_hyperparameters", "(", "\n", "ignore", "=", "[", "\"train_data\"", ",", "\"validation_data\"", ",", "\"load_weights_from_checkpoint\"", "]", "\n", ")", "\n", "self", ".", "encoder", "=", "str2encoder", "[", "self", ".", "hparams", ".", "encoder_model", "]", ".", "from_pretrained", "(", "\n", "self", ".", "hparams", ".", "pretrained_model", "\n", ")", "\n", "self", ".", "epoch_nr", "=", "0", "\n", "if", "self", ".", "hparams", ".", "layer", "==", "\"mix\"", ":", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.base.Encoder.forward": [[97, 102], ["None"], "methods", ["None"], ["            ", "self", ".", "layerwise_attention", "=", "LayerwiseAttention", "(", "\n", "num_layers", "=", "self", ".", "encoder", ".", "num_layers", ",", "\n", "dropout", "=", "self", ".", "hparams", ".", "dropout", ",", "\n", "layer_norm", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.bert.BERTEncoder.__init__": [[33, 38], ["comet.encoders.base.Encoder.__init__", "transformers.AutoTokenizer.from_pretrained", "transformers.AutoModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.__init__", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.xlmr.XLMREncoder.from_pretrained", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.xlmr.XLMREncoder.from_pretrained"], ["def", "__init__", "(", "self", ",", "pretrained_model", ":", "str", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "pretrained_model", ",", "use_fast", "=", "True", ")", "\n", "self", ".", "model", "=", "AutoModel", ".", "from_pretrained", "(", "pretrained_model", ")", "\n", "self", ".", "model", ".", "encoder", ".", "output_hidden_states", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.bert.BERTEncoder.output_units": [[39, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_units", "(", "self", ")", ":", "\n", "        ", "\"\"\"Max number of tokens the encoder handles.\"\"\"", "\n", "return", "self", ".", "model", ".", "config", ".", "hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.bert.BERTEncoder.max_positions": [[44, 48], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Max number of tokens the encoder handles.\"\"\"", "\n", "return", "self", ".", "model", ".", "config", ".", "max_position_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.bert.BERTEncoder.num_layers": [[49, 53], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_layers", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of model layers available.\"\"\"", "\n", "return", "self", ".", "model", ".", "config", ".", "num_hidden_layers", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.bert.BERTEncoder.from_pretrained": [[54, 62], ["bert.BERTEncoder"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model", ":", "str", ")", "->", "Encoder", ":", "\n", "        ", "\"\"\"Function that loads a pretrained encoder from Hugging Face.\n        :param pretrained_model: Name of the pretrain model to be loaded.\n\n        :return: Encoder model\n        \"\"\"", "\n", "return", "BERTEncoder", "(", "pretrained_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.bert.BERTEncoder.freeze_embeddings": [[63, 67], ["bert.BERTEncoder.model.embeddings.parameters"], "methods", ["None"], ["", "def", "freeze_embeddings", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Frezees the embedding layer.\"\"\"", "\n", "for", "param", "in", "self", ".", "model", ".", "embeddings", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.bert.BERTEncoder.layerwise_lr": [[68, 91], ["bert.BERTEncoder.model.embeddings.parameters", "bert.BERTEncoder.model.encoder.layer[].parameters", "range"], "methods", ["None"], ["", "", "def", "layerwise_lr", "(", "self", ",", "lr", ":", "float", ",", "decay", ":", "float", ")", ":", "\n", "        ", "\"\"\"\n        :param lr: Learning rate for the highest encoder layer.\n        :param decay: decay percentage for the lower layers.\n\n        :return: List of model parameters with layer-wise decay learning rate\n        \"\"\"", "\n", "# Embedding Layer", "\n", "opt_parameters", "=", "[", "\n", "{", "\n", "\"params\"", ":", "self", ".", "model", ".", "embeddings", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "lr", "*", "decay", "**", "(", "self", ".", "num_layers", ")", ",", "\n", "}", "\n", "]", "\n", "# All layers", "\n", "opt_parameters", "+=", "[", "\n", "{", "\n", "\"params\"", ":", "self", ".", "model", ".", "encoder", ".", "layer", "[", "i", "]", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "lr", "*", "decay", "**", "i", ",", "\n", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "2", ",", "0", ",", "-", "1", ")", "\n", "]", "\n", "return", "opt_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.bert.BERTEncoder.forward": [[92, 106], ["bert.BERTEncoder.model"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "input_ids", ":", "torch", ".", "Tensor", ",", "attention_mask", ":", "torch", ".", "Tensor", ",", "**", "kwargs", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "last_hidden_states", ",", "pooler_output", ",", "all_layers", "=", "self", ".", "model", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "output_hidden_states", "=", "True", ",", "\n", "return_dict", "=", "False", ",", "\n", ")", "\n", "return", "{", "\n", "\"sentemb\"", ":", "pooler_output", ",", "\n", "\"wordemb\"", ":", "last_hidden_states", ",", "\n", "\"all_layers\"", ":", "all_layers", ",", "\n", "\"attention_mask\"", ":", "attention_mask", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.xlmr.XLMREncoder.__init__": [[34, 41], ["comet.encoders.bert.BERTEncoder.__init__", "transformers.XLMRobertaTokenizer.from_pretrained", "transformers.XLMRobertaModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.__init__", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.xlmr.XLMREncoder.from_pretrained", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.xlmr.XLMREncoder.from_pretrained"], ["def", "__init__", "(", "self", ",", "pretrained_model", ":", "str", ")", "->", "None", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tokenizer", "=", "XLMRobertaTokenizer", ".", "from_pretrained", "(", "pretrained_model", ")", "\n", "self", ".", "model", "=", "XLMRobertaModel", ".", "from_pretrained", "(", "\n", "pretrained_model", ",", "add_pooling_layer", "=", "False", "\n", ")", "\n", "self", ".", "model", ".", "encoder", ".", "output_hidden_states", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.xlmr.XLMREncoder.from_pretrained": [[42, 50], ["xlmr.XLMREncoder"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model", ":", "str", ")", "->", "Encoder", ":", "\n", "        ", "\"\"\"Function that loads a pretrained encoder from Hugging Face.\n        :param pretrained_model: Name of the pretrain model to be loaded.\n\n        :return: Encoder model\n        \"\"\"", "\n", "return", "XLMREncoder", "(", "pretrained_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.xlmr.XLMREncoder.forward": [[51, 65], ["xlmr.XLMREncoder.model"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "input_ids", ":", "torch", ".", "Tensor", ",", "attention_mask", ":", "torch", ".", "Tensor", ",", "**", "kwargs", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "last_hidden_states", ",", "_", ",", "all_layers", "=", "self", ".", "model", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "output_hidden_states", "=", "True", ",", "\n", "return_dict", "=", "False", ",", "\n", ")", "\n", "return", "{", "\n", "\"sentemb\"", ":", "last_hidden_states", "[", ":", ",", "0", ",", ":", "]", ",", "\n", "\"wordemb\"", ":", "last_hidden_states", ",", "\n", "\"all_layers\"", ":", "all_layers", ",", "\n", "\"attention_mask\"", ":", "attention_mask", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils.get_cache_folder": [[31, 39], ["Exception", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "get_cache_folder", "(", ")", ":", "\n", "    ", "if", "\"HOME\"", "in", "os", ".", "environ", ":", "\n", "        ", "cache_directory", "=", "os", ".", "environ", "[", "\"HOME\"", "]", "+", "\"/.cache/torch/unbabel_comet/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "cache_directory", ")", "\n", "", "return", "cache_directory", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"HOME environment variable is not defined.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils._reporthook": [[41, 66], ["t.update"], "function", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.wmt_kendall.WMTKendall.update"], ["", "", "def", "_reporthook", "(", "t", ")", ":", "\n", "    ", "\"\"\"``reporthook`` to use with ``urllib.request`` that prints the\n        process of the download.\n\n    Uses ``tqdm`` for progress bar.\n\n    **Reference:**\n    https://github.com/tqdm/tqdm\n\n    \"\"\"", "\n", "last_b", "=", "[", "0", "]", "\n", "\n", "def", "inner", "(", "b", ":", "int", "=", "1", ",", "bsize", ":", "int", "=", "1", ",", "tsize", ":", "int", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param b: Number of blocks just transferred [default: 1].\n        :param bsize: Size of each block (in tqdm units) [default: 1].\n        :param tsize: Total size (in tqdm units).\n            If [default: None] remains unchanged.\n        \"\"\"", "\n", "if", "tsize", "is", "not", "None", ":", "\n", "            ", "t", ".", "total", "=", "tsize", "\n", "", "t", ".", "update", "(", "(", "b", "-", "last_b", "[", "0", "]", ")", "*", "bsize", ")", "\n", "last_b", "[", "0", "]", "=", "b", "\n", "\n", "", "return", "inner", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils._maybe_extract": [[68, 100], ["logger.info", "logger.info", "os.path.basename", "os.path.basename.split", "zipfile.ZipFile", "zip_.extractall", "open", "subprocess.call", "open", "subprocess.call"], "function", ["None"], ["", "def", "_maybe_extract", "(", "compressed_filename", ":", "str", ",", "directory", ":", "str", ",", "extension", ":", "str", "=", "None", ")", ":", "\n", "    ", "\"\"\"Extract a compressed file to ``directory``.\n\n    :param compressed_filename: Compressed file.\n    :param directory: Extract to directory.\n    :param extension: Extension of the file; Otherwise, attempts to\n        extract extension from the filename.\n    \"\"\"", "\n", "logger", ".", "info", "(", "\"Extracting {}\"", ".", "format", "(", "compressed_filename", ")", ")", "\n", "\n", "if", "extension", "is", "None", ":", "\n", "        ", "basename", "=", "os", ".", "path", ".", "basename", "(", "compressed_filename", ")", "\n", "extension", "=", "basename", ".", "split", "(", "\".\"", ",", "1", ")", "[", "1", "]", "\n", "\n", "", "if", "\"zip\"", "in", "extension", ":", "\n", "        ", "with", "zipfile", ".", "ZipFile", "(", "compressed_filename", ",", "\"r\"", ")", "as", "zip_", ":", "\n", "            ", "zip_", ".", "extractall", "(", "directory", ")", "\n", "\n", "", "", "elif", "\"tar.gz\"", "in", "extension", "or", "\"tgz\"", "in", "extension", ":", "\n", "# `tar` is much faster than python's `tarfile` implementation", "\n", "        ", "with", "open", "(", "os", ".", "devnull", ",", "\"w\"", ")", "as", "devnull", ":", "\n", "            ", "subprocess", ".", "call", "(", "\n", "[", "\"tar\"", ",", "\"-C\"", ",", "directory", ",", "\"-zxvf\"", ",", "compressed_filename", "]", ",", "stdout", "=", "devnull", "\n", ")", "\n", "\n", "", "", "elif", "\"tar\"", "in", "extension", ":", "\n", "        ", "with", "open", "(", "os", ".", "devnull", ",", "\"w\"", ")", "as", "devnull", ":", "\n", "            ", "subprocess", ".", "call", "(", "\n", "[", "\"tar\"", ",", "\"-C\"", ",", "directory", ",", "\"-xvf\"", ",", "compressed_filename", "]", ",", "stdout", "=", "devnull", "\n", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"Extracted {}\"", ".", "format", "(", "compressed_filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils._get_filename_from_url": [[102, 113], ["urllib.parse.urlparse", "os.path.basename"], "function", ["None"], ["", "def", "_get_filename_from_url", "(", "url", ")", ":", "\n", "    ", "\"\"\"Return a filename from a URL\n\n    Args:\n        url (str): URL to extract filename from\n\n    Returns:\n        (str): Filename in URL\n    \"\"\"", "\n", "parse", "=", "urlparse", "(", "url", ")", "\n", "return", "os", ".", "path", ".", "basename", "(", "parse", ".", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils._check_download": [[115, 125], ["all", "os.path.isfile"], "function", ["None"], ["", "def", "_check_download", "(", "*", "filepaths", ")", ":", "\n", "    ", "\"\"\"Check if the downloaded files are found.\n\n    Args:\n        filepaths (list of str): Check if these filepaths exist\n\n    Returns:\n        (bool): Returns True if all filepaths exist\n    \"\"\"", "\n", "return", "all", "(", "[", "os", ".", "path", ".", "isfile", "(", "filepath", ")", "for", "filepath", "in", "filepaths", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils.download_file_maybe_extract": [[127, 175], ["str", "os.path.join", "logger.info", "download_utils._maybe_extract", "download_utils._get_filename_from_url", "os.path.join", "download_utils._check_download", "os.path.isdir", "os.makedirs", "tqdm.tqdm", "urllib.request.urlretrieve", "download_utils._check_download", "ValueError", "str", "len", "download_utils._reporthook"], "function", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils._maybe_extract", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils._get_filename_from_url", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils._check_download", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils._check_download", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils._reporthook"], ["", "def", "download_file_maybe_extract", "(", "\n", "url", ":", "str", ",", "\n", "directory", ":", "str", ",", "\n", "filename", ":", "str", "=", "None", ",", "\n", "extension", ":", "str", "=", "None", ",", "\n", "check_files", ":", "List", "[", "str", "]", "=", "[", "]", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Download the file at ``url`` to ``directory``.\n        Extract to ``directory`` if tar or zip.\n\n    :param url: Url of file (str or Path).\n    :param directory: Directory to download to.\n    :param filename: Name of the file to download; Otherwise, a filename is extracted\n        from the url.\n    :param extension: Extension of the file; Otherwise, attempts to extract extension\n        from the filename.\n    :param check_files: Check if these files exist, ensuring the download\n        succeeded. If these files exist before the download, the download is skipped.\n\n    :return: Filename of download file.\n    \"\"\"", "\n", "if", "filename", "is", "None", ":", "\n", "        ", "filename", "=", "_get_filename_from_url", "(", "url", ")", "\n", "\n", "", "directory", "=", "str", "(", "directory", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "filename", ")", "\n", "check_files", "=", "[", "os", ".", "path", ".", "join", "(", "directory", ",", "str", "(", "f", ")", ")", "for", "f", "in", "check_files", "]", "\n", "\n", "if", "len", "(", "check_files", ")", ">", "0", "and", "_check_download", "(", "*", "check_files", ")", ":", "\n", "        ", "return", "filepath", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Downloading {}\"", ".", "format", "(", "filename", ")", ")", "\n", "\n", "# Download", "\n", "with", "tqdm", "(", "unit", "=", "\"B\"", ",", "unit_scale", "=", "True", ",", "miniters", "=", "1", ",", "desc", "=", "filename", ")", "as", "t", ":", "\n", "        ", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "filename", "=", "filepath", ",", "reporthook", "=", "_reporthook", "(", "t", ")", ")", "\n", "\n", "", "_maybe_extract", "(", "\n", "compressed_filename", "=", "filepath", ",", "directory", "=", "directory", ",", "extension", "=", "extension", "\n", ")", "\n", "\n", "if", "not", "_check_download", "(", "*", "check_files", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"[DOWNLOAD FAILED] `*check_files` not found\"", ")", "\n", "\n", "", "return", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils.download_model": [[177, 230], ["os.path.isdir", "os.path.exists", "os.path.exists", "os.path.exists", "download_utils.get_cache_folder", "get_cache_folder.endswith", "os.path.exists", "os.makedirs", "logger.info", "os.remove", "os.remove", "os.remove", "model.endswith", "comet.models.available_metrics.keys", "Exception", "available_metrics[].startswith", "os.listdir", "file.endswith", "download_utils.download_file_maybe_extract", "Exception"], "function", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils.get_cache_folder", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils.download_file_maybe_extract"], ["", "def", "download_model", "(", "model", ":", "str", ",", "saving_directory", ":", "str", "=", "None", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Function that loads pretrained models from AWS.\n\n    :param model: Name of the model to be loaded.\n    :param saving_directory: RELATIVE path to the saving folder (must end with /).\n\n    Return:\n        - Path to model checkpoint.\n    \"\"\"", "\n", "\n", "if", "saving_directory", "is", "None", ":", "\n", "        ", "saving_directory", "=", "get_cache_folder", "(", ")", "\n", "\n", "", "if", "not", "saving_directory", ".", "endswith", "(", "\"/\"", ")", ":", "\n", "        ", "saving_directory", "+=", "\"/\"", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "saving_directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "saving_directory", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isdir", "(", "saving_directory", "+", "model", ")", ":", "\n", "        ", "logger", ".", "info", "(", "f\"{model} is already in cache.\"", ")", "\n", "if", "not", "model", ".", "endswith", "(", "\"/\"", ")", ":", "\n", "            ", "model", "+=", "\"/\"", "\n", "\n", "", "", "elif", "model", "not", "in", "available_metrics", ".", "keys", "(", ")", ":", "\n", "        ", "raise", "Exception", "(", "\n", "f\"{model} is not in the `availale_metrics` or is a valid checkpoint folder.\"", "\n", ")", "\n", "\n", "", "elif", "available_metrics", "[", "model", "]", ".", "startswith", "(", "\"https://\"", ")", ":", "\n", "        ", "download_file_maybe_extract", "(", "\n", "available_metrics", "[", "model", "]", ",", "directory", "=", "saving_directory", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Invalid model name!\"", ")", "\n", "\n", "# CLEAN Cache", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "saving_directory", "+", "model", "+", "\".zip\"", ")", ":", "\n", "        ", "os", ".", "remove", "(", "saving_directory", "+", "model", "+", "\".zip\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "saving_directory", "+", "model", "+", "\".tar.gz\"", ")", ":", "\n", "        ", "os", ".", "remove", "(", "saving_directory", "+", "model", "+", "\".tar.gz\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "saving_directory", "+", "model", "+", "\".tar\"", ")", ":", "\n", "        ", "os", ".", "remove", "(", "saving_directory", "+", "model", "+", "\".tar\"", ")", "\n", "\n", "", "checkpoints_folder", "=", "saving_directory", "+", "model", "+", "\"/checkpoints\"", "\n", "checkpoints", "=", "[", "\n", "file", "for", "file", "in", "os", ".", "listdir", "(", "checkpoints_folder", ")", "if", "file", ".", "endswith", "(", "\".ckpt\"", ")", "\n", "]", "\n", "checkpoint", "=", "checkpoints", "[", "-", "1", "]", "\n", "checkpoint_path", "=", "checkpoints_folder", "+", "\"/\"", "+", "checkpoint", "\n", "return", "checkpoint_path", "\n", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.cli.train.train_command": [[43, 106], ["jsonargparse.ArgumentParser", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_class_arguments", "jsonargparse.ArgumentParser.add_subclass_arguments", "jsonargparse.ArgumentParser.add_subclass_arguments", "jsonargparse.ArgumentParser.add_subclass_arguments", "jsonargparse.ArgumentParser.add_subclass_arguments", "jsonargparse.ArgumentParser.add_subclass_arguments", "jsonargparse.ArgumentParser.add_subclass_arguments", "jsonargparse.ArgumentParser.parse_args", "pytorch_lightning.seed_everything", "pytorch_lightning.callbacks.ModelCheckpoint", "pytorch_lightning.callbacks.EarlyStopping", "jsonargparse.namespace_to_dict", "print", "print", "pytorch_lightning.trainer.trainer.Trainer", "print", "pytorch_lightning.trainer.trainer.Trainer.fit", "json.dumps", "print", "comet.models.RegressionMetric", "jsonargparse.namespace_to_dict", "jsonargparse.namespace_to_dict", "json.dumps", "print", "comet.models.ReferencelessRegression", "jsonargparse.namespace_to_dict", "json.dumps", "print", "comet.models.RankingMetric", "Exception", "jsonargparse.namespace_to_dict", "json.dumps", "jsonargparse.namespace_to_dict"], "function", ["None"], ["def", "train_command", "(", ")", "->", "None", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "\"Command for training COMET models.\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed_everything\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "12", ",", "\n", "help", "=", "\"Training Seed.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--cfg\"", ",", "action", "=", "ActionConfigFile", ")", "\n", "parser", ".", "add_class_arguments", "(", "CometModel", ",", "\"model\"", ")", "\n", "parser", ".", "add_subclass_arguments", "(", "RegressionMetric", ",", "\"regression_metric\"", ")", "\n", "parser", ".", "add_subclass_arguments", "(", "\n", "ReferencelessRegression", ",", "\"referenceless_regression_metric\"", "\n", ")", "\n", "parser", ".", "add_subclass_arguments", "(", "RankingMetric", ",", "\"ranking_metric\"", ")", "\n", "parser", ".", "add_subclass_arguments", "(", "EarlyStopping", ",", "\"early_stopping\"", ")", "\n", "parser", ".", "add_subclass_arguments", "(", "ModelCheckpoint", ",", "\"model_checkpoint\"", ")", "\n", "parser", ".", "add_subclass_arguments", "(", "Trainer", ",", "\"trainer\"", ")", "\n", "cfg", "=", "parser", ".", "parse_args", "(", ")", "\n", "seed_everything", "(", "cfg", ".", "seed_everything", ")", "\n", "\n", "checkpoint_callback", "=", "ModelCheckpoint", "(", "\n", "**", "namespace_to_dict", "(", "cfg", ".", "model_checkpoint", ".", "init_args", ")", "\n", ")", "\n", "early_stop_callback", "=", "EarlyStopping", "(", "\n", "**", "namespace_to_dict", "(", "cfg", ".", "early_stopping", ".", "init_args", ")", "\n", ")", "\n", "trainer_args", "=", "namespace_to_dict", "(", "cfg", ".", "trainer", ".", "init_args", ")", "\n", "trainer_args", "[", "\"callbacks\"", "]", "=", "[", "early_stop_callback", ",", "checkpoint_callback", "]", "\n", "print", "(", "\"TRAINER ARGUMENTS: \"", ")", "\n", "print", "(", "json", ".", "dumps", "(", "trainer_args", ",", "indent", "=", "4", ",", "default", "=", "lambda", "x", ":", "x", ".", "__dict__", ")", ")", "\n", "trainer", "=", "Trainer", "(", "**", "trainer_args", ")", "\n", "\n", "print", "(", "\"MODEL ARGUMENTS: \"", ")", "\n", "if", "cfg", ".", "regression_metric", "is", "not", "None", ":", "\n", "        ", "print", "(", "\n", "json", ".", "dumps", "(", "\n", "cfg", ".", "regression_metric", ".", "init_args", ",", "indent", "=", "4", ",", "default", "=", "lambda", "x", ":", "x", ".", "__dict__", "\n", ")", "\n", ")", "\n", "model", "=", "RegressionMetric", "(", "**", "namespace_to_dict", "(", "cfg", ".", "regression_metric", ".", "init_args", ")", ")", "\n", "", "elif", "cfg", ".", "referenceless_regression_metric", "is", "not", "None", ":", "\n", "        ", "print", "(", "\n", "json", ".", "dumps", "(", "\n", "cfg", ".", "referenceless_regression_metric", ".", "init_args", ",", "\n", "indent", "=", "4", ",", "\n", "default", "=", "lambda", "x", ":", "x", ".", "__dict__", ",", "\n", ")", "\n", ")", "\n", "model", "=", "ReferencelessRegression", "(", "\n", "**", "namespace_to_dict", "(", "cfg", ".", "referenceless_regression_metric", ".", "init_args", ")", "\n", ")", "\n", "", "elif", "cfg", ".", "ranking_metric", "is", "not", "None", ":", "\n", "        ", "print", "(", "\n", "json", ".", "dumps", "(", "\n", "cfg", ".", "ranking_metric", ".", "init_args", ",", "indent", "=", "4", ",", "default", "=", "lambda", "x", ":", "x", ".", "__dict__", "\n", ")", "\n", ")", "\n", "model", "=", "RankingMetric", "(", "**", "namespace_to_dict", "(", "cfg", ".", "ranking_metric", ".", "init_args", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Model configurations missing!\"", ")", "\n", "\n", "", "trainer", ".", "fit", "(", "model", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.cli.compare.compare_command": [[54, 185], ["jsonargparse.ArgumentParser", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.parse_args", "pytorch_lightning.seed_everything", "comet.models.load_from_checkpoint", "comet.models.load_from_checkpoint.eval", "comet.models.load_from_checkpoint.predict", "comet.models.load_from_checkpoint.predict", "enumerate", "len", "list", "max", "range", "data.insert", "data[].items", "isinstance", "jsonargparse.ArgumentParser.error", "comet.download_utils.download_model", "open", "open", "open", "dict", "dict", "zip", "print", "data.append", "range", "int", "numpy.random.choice", "x_sys_scores.append", "y_sys_scores.append", "print", "print", "comet.models.available_metrics.keys", "parser.parse_args.sources", "line.strip", "parser.parse_args.system_x", "line.strip", "parser.parse_args.system_y", "line.strip", "open", "zip", "zip", "zip", "zip", "sum", "sum", "numpy.mean", "numpy.mean", "open", "json.dump", "fp.readlines", "fp.readlines", "fp.readlines", "parser.parse_args.references", "line.strip", "numpy.array", "numpy.array", "sum", "sum", "sum", "fp.readlines", "system_x.values", "system_y.values"], "function", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.__init__.load_from_checkpoint", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.predict", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.predict", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils.download_model"], ["def", "compare_command", "(", ")", "->", "None", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "\"Command for comparing two MT systems.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-s\"", ",", "\"--sources\"", ",", "type", "=", "Path_fr", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"-x\"", ",", "\"--system_x\"", ",", "type", "=", "Path_fr", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"-y\"", ",", "\"--system_y\"", ",", "type", "=", "Path_fr", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"-r\"", ",", "\"--references\"", ",", "type", "=", "Path_fr", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpus\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_splits\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "300", ",", "\n", "help", "=", "\"Number of random partitions used in Bootstrap resampling.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sample_ratio\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.4", ",", "\n", "help", "=", "\"Percentage of the testset to use in each bootstrap resampling partition.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--to_json\"", ",", "\n", "type", "=", "Union", "[", "bool", ",", "str", "]", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Exports results to a json file.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model\"", ",", "\n", "type", "=", "Union", "[", "str", ",", "Path_fr", "]", ",", "\n", "required", "=", "False", ",", "\n", "default", "=", "\"wmt20-comet-da\"", ",", "\n", "choices", "=", "available_metrics", ".", "keys", "(", ")", ",", "\n", "help", "=", "\"COMET model to be used.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed_everything\"", ",", "\n", "help", "=", "\"Prediction seed.\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "12", ",", "\n", ")", "\n", "cfg", "=", "parser", ".", "parse_args", "(", ")", "\n", "seed_everything", "(", "cfg", ".", "seed_everything", ")", "\n", "\n", "if", "(", "cfg", ".", "references", "is", "None", ")", "and", "(", "\"refless\"", "not", "in", "cfg", ".", "model", ")", ":", "\n", "        ", "parser", ".", "error", "(", "\"{} requires -r/--references.\"", ".", "format", "(", "cfg", ".", "model", ")", ")", "\n", "\n", "", "model_path", "=", "(", "\n", "download_model", "(", "cfg", ".", "model", ")", "if", "cfg", ".", "model", "in", "available_metrics", "else", "cfg", ".", "model", "\n", ")", "\n", "model", "=", "load_from_checkpoint", "(", "model_path", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "open", "(", "cfg", ".", "sources", "(", ")", ")", "as", "fp", ":", "\n", "        ", "sources", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "fp", ".", "readlines", "(", ")", "]", "\n", "\n", "", "with", "open", "(", "cfg", ".", "system_x", "(", ")", ")", "as", "fp", ":", "\n", "        ", "system_x", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "fp", ".", "readlines", "(", ")", "]", "\n", "\n", "", "with", "open", "(", "cfg", ".", "system_y", "(", ")", ")", "as", "fp", ":", "\n", "        ", "system_y", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "fp", ".", "readlines", "(", ")", "]", "\n", "\n", "", "if", "\"refless\"", "in", "cfg", ".", "model", ":", "\n", "        ", "system_x", "=", "{", "\"src\"", ":", "sources", ",", "\"mt\"", ":", "system_x", "}", "\n", "system_y", "=", "{", "\"src\"", ":", "sources", ",", "\"mt\"", ":", "system_y", "}", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "cfg", ".", "references", "(", ")", ")", "as", "fp", ":", "\n", "            ", "references", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "fp", ".", "readlines", "(", ")", "]", "\n", "", "system_x", "=", "{", "\"src\"", ":", "sources", ",", "\"mt\"", ":", "system_x", ",", "\"ref\"", ":", "references", "}", "\n", "system_y", "=", "{", "\"src\"", ":", "sources", ",", "\"mt\"", ":", "system_y", ",", "\"ref\"", ":", "references", "}", "\n", "\n", "", "system_x", "=", "[", "dict", "(", "zip", "(", "system_x", ",", "t", ")", ")", "for", "t", "in", "zip", "(", "*", "system_x", ".", "values", "(", ")", ")", "]", "\n", "system_y", "=", "[", "dict", "(", "zip", "(", "system_y", ",", "t", ")", ")", "for", "t", "in", "zip", "(", "*", "system_y", ".", "values", "(", ")", ")", "]", "\n", "\n", "x_seg_scores", ",", "_", "=", "model", ".", "predict", "(", "system_x", ",", "cfg", ".", "batch_size", ",", "cfg", ".", "gpus", ")", "\n", "y_seg_scores", ",", "_", "=", "model", ".", "predict", "(", "system_y", ",", "cfg", ".", "batch_size", ",", "cfg", ".", "gpus", ")", "\n", "\n", "data", "=", "[", "]", "\n", "for", "i", ",", "(", "x_score", ",", "y_score", ")", "in", "enumerate", "(", "zip", "(", "x_seg_scores", ",", "y_seg_scores", ")", ")", ":", "\n", "        ", "print", "(", "\n", "\"Segment {}\\tsystem_x score: {:.4f}\\tsystem_y score: {:.4f}\"", ".", "format", "(", "\n", "i", ",", "x_score", ",", "y_score", "\n", ")", "\n", ")", "\n", "data", ".", "append", "(", "\n", "{", "\n", "\"src\"", ":", "system_x", "[", "0", "]", "[", "\"src\"", "]", ",", "\n", "\"system_x\"", ":", "{", "\"mt\"", ":", "system_x", "[", "0", "]", "[", "\"mt\"", "]", ",", "\"score\"", ":", "x_score", "}", ",", "\n", "\"system_y\"", ":", "{", "\"mt\"", ":", "system_y", "[", "0", "]", "[", "\"mt\"", "]", ",", "\"score\"", ":", "y_score", "}", ",", "\n", "\"ref\"", ":", "system_y", "[", "0", "]", "[", "\"ref\"", "]", ",", "\n", "}", "\n", ")", "\n", "\n", "", "n", "=", "len", "(", "sources", ")", "\n", "ids", "=", "list", "(", "range", "(", "n", ")", ")", "\n", "sample_size", "=", "max", "(", "int", "(", "n", "*", "cfg", ".", "sample_ratio", ")", ",", "1", ")", "\n", "\n", "x_sys_scores", ",", "y_sys_scores", "=", "[", "]", ",", "[", "]", "\n", "win_count", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "for", "_", "in", "range", "(", "cfg", ".", "num_splits", ")", ":", "\n", "# Subsample the gold and system outputs (with replacement)", "\n", "        ", "subsample_ids", "=", "np", ".", "random", ".", "choice", "(", "ids", ",", "size", "=", "sample_size", ",", "replace", "=", "True", ")", "\n", "subsample_x_scr", "=", "sum", "(", "[", "x_seg_scores", "[", "i", "]", "for", "i", "in", "subsample_ids", "]", ")", "/", "sample_size", "\n", "subsample_y_scr", "=", "sum", "(", "[", "y_seg_scores", "[", "i", "]", "for", "i", "in", "subsample_ids", "]", ")", "/", "sample_size", "\n", "\n", "if", "subsample_x_scr", ">", "subsample_y_scr", ":", "\n", "            ", "win_count", "[", "0", "]", "+=", "1", "\n", "", "elif", "subsample_y_scr", ">", "subsample_x_scr", ":", "\n", "            ", "win_count", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "            ", "win_count", "[", "2", "]", "+=", "1", "\n", "\n", "", "x_sys_scores", ".", "append", "(", "subsample_x_scr", ")", "\n", "y_sys_scores", ".", "append", "(", "subsample_y_scr", ")", "\n", "\n", "", "data", ".", "insert", "(", "\n", "0", ",", "\n", "{", "\n", "\"x-mean\"", ":", "np", ".", "mean", "(", "np", ".", "array", "(", "x_sys_scores", ")", ")", ",", "\n", "\"y-mean\"", ":", "np", ".", "mean", "(", "np", ".", "array", "(", "y_sys_scores", ")", ")", ",", "\n", "\"ties (%)\"", ":", "win_count", "[", "2", "]", "/", "sum", "(", "win_count", ")", ",", "\n", "\"x_wins (%)\"", ":", "win_count", "[", "0", "]", "/", "sum", "(", "win_count", ")", ",", "\n", "\"y_wins (%)\"", ":", "win_count", "[", "1", "]", "/", "sum", "(", "win_count", ")", ",", "\n", "}", ",", "\n", ")", "\n", "for", "k", ",", "v", "in", "data", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "\"{}:\\t{:.4f}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "cfg", ".", "to_json", ",", "str", ")", ":", "\n", "        ", "with", "open", "(", "cfg", ".", "to_json", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "            ", "json", ".", "dump", "(", "data", ",", "outfile", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", "\n", "", "print", "(", "\"Predictions saved in: {}.\"", ".", "format", "(", "cfg", ".", "to_json", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.cli.score.score_command": [[44, 165], ["jsonargparse.ArgumentParser", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.add_argument", "jsonargparse.ArgumentParser.parse_args", "pytorch_lightning.seed_everything", "comet.models.load_from_checkpoint", "comet.models.load_from_checkpoint.eval", "jsonargparse.ArgumentParser.error", "comet.download_utils.download_model", "open", "open", "dict", "isinstance", "enumerate", "print", "isinstance", "isinstance", "enumerate", "print", "isinstance", "parser.parse_args.sources", "line.strip", "parser.parse_args.translations", "line.strip", "open", "list", "enumerate", "open", "enumerate", "zip", "zip", "comet.models.load_from_checkpoint.predict", "comet.models.load_from_checkpoint.predict", "zip", "print", "isinstance", "print", "comet.models.load_from_checkpoint.predict", "comet.models.load_from_checkpoint.predict", "zip", "print", "isinstance", "print", "fp.readlines", "fp.readlines", "parser.parse_args.features", "line.strip().split", "map", "parser.parse_args.references", "line.strip", "open", "json.dump", "open", "json.dump", "fp.readlines", "zip", "float", "fp.readlines", "data.values", "line.strip", "str", "str"], "function", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.__init__.load_from_checkpoint", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.comet.download_utils.download_model", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.predict", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.predict", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.predict", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.predict"], ["def", "score_command", "(", ")", "->", "None", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "\"Command for scoring MT systems.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-s\"", ",", "\"--sources\"", ",", "type", "=", "Path_fr", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"-t\"", ",", "\"--translations\"", ",", "type", "=", "Path_fr", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"-r\"", ",", "\"--references\"", ",", "type", "=", "Path_fr", ")", "\n", "parser", ".", "add_argument", "(", "\"-f\"", ",", "\"--features\"", ",", "type", "=", "Path_fr", ",", "help", "=", "\"Path to additional features for predictor (optional)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpus\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--to_json\"", ",", "\n", "type", "=", "Union", "[", "bool", ",", "str", "]", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Exports results to a json file.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model\"", ",", "\n", "type", "=", "Union", "[", "str", ",", "Path_fr", "]", ",", "\n", "required", "=", "False", ",", "\n", "default", "=", "\"wmt20-comet-da\"", ",", "\n", "#choices=available_metrics.keys(),", "\n", "help", "=", "\"COMET model to be used.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--mc_dropout\"", ",", "\n", "type", "=", "Union", "[", "bool", ",", "int", "]", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Number of inference runs for each sample in MC Dropout.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--refless\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"flag for heteroschedastic loss\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed_everything\"", ",", "\n", "help", "=", "\"Prediction seed.\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "12", ",", "\n", ")", "\n", "cfg", "=", "parser", ".", "parse_args", "(", ")", "\n", "seed_everything", "(", "cfg", ".", "seed_everything", ")", "\n", "\n", "if", "(", "cfg", ".", "references", "is", "None", ")", "and", "(", "\"refless\"", "not", "in", "cfg", ".", "model", ")", "and", "(", "not", "cfg", ".", "refless", ")", ":", "\n", "        ", "parser", ".", "error", "(", "\"{} requires -r/--references.\"", ".", "format", "(", "cfg", ".", "model", ")", ")", "\n", "\n", "", "model_path", "=", "(", "\n", "download_model", "(", "cfg", ".", "model", ")", "if", "cfg", ".", "model", "in", "available_metrics", "else", "cfg", ".", "model", "\n", ")", "\n", "model", "=", "load_from_checkpoint", "(", "model_path", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "open", "(", "cfg", ".", "sources", "(", ")", ")", "as", "fp", ":", "\n", "        ", "sources", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "fp", ".", "readlines", "(", ")", "]", "\n", "\n", "", "with", "open", "(", "cfg", ".", "translations", "(", ")", ")", "as", "fp", ":", "\n", "        ", "translations", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "fp", ".", "readlines", "(", ")", "]", "\n", "\n", "", "if", "cfg", ".", "features", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "cfg", ".", "features", "(", ")", ")", "as", "fp", ":", "\n", "            ", "features", "=", "[", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", ")", "for", "line", "in", "fp", ".", "readlines", "(", ")", "]", "\n", "features", "=", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "features", ")", ")", ")", "\n", "features", "=", "[", "[", "float", "(", "i", ")", "for", "i", "in", "f", "]", "for", "f", "in", "features", "]", "\n", "\n", "\n", "\n", "", "", "if", "\"refless\"", "in", "cfg", ".", "model", "or", "cfg", ".", "refless", ":", "\n", "        ", "if", "cfg", ".", "features", "is", "not", "None", ":", "\n", "            ", "data", "=", "{", "\"src\"", ":", "sources", ",", "\"mt\"", ":", "translations", "}", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "features", ")", ":", "\n", "                ", "data", "[", "'f'", "+", "str", "(", "i", "+", "1", ")", "]", "=", "f", "\n", "", "", "else", ":", "\n", "            ", "data", "=", "{", "\"src\"", ":", "sources", ",", "\"mt\"", ":", "translations", "}", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "cfg", ".", "references", "(", ")", ")", "as", "fp", ":", "\n", "            ", "references", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "fp", ".", "readlines", "(", ")", "]", "\n", "", "if", "cfg", ".", "features", "is", "not", "None", ":", "\n", "            ", "data", "=", "{", "\"src\"", ":", "sources", ",", "\"mt\"", ":", "translations", ",", "\"ref\"", ":", "references", "}", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "features", ")", ":", "\n", "                ", "data", "[", "'f'", "+", "str", "(", "i", "+", "1", ")", "]", "=", "f", "\n", "", "", "else", ":", "\n", "            ", "data", "=", "{", "\"src\"", ":", "sources", ",", "\"mt\"", ":", "translations", ",", "\"ref\"", ":", "references", "}", "\n", "\n", "", "", "data", "=", "[", "dict", "(", "zip", "(", "data", ",", "t", ")", ")", "for", "t", "in", "zip", "(", "*", "data", ".", "values", "(", ")", ")", "]", "\n", "if", "cfg", ".", "mc_dropout", ":", "\n", "        ", "if", "isinstance", "(", "model", ".", "loss", ",", "HeteroscedasticLoss", ")", ":", "\n", "           ", "mean_scores", ",", "std_scores", ",", "hts_mean", ",", "hts_std", ",", "sys_score", "=", "model", ".", "predict", "(", "\n", "data", ",", "cfg", ".", "batch_size", ",", "cfg", ".", "gpus", ",", "cfg", ".", "mc_dropout", ")", "\n", "", "else", ":", "\n", "            ", "mean_scores", ",", "std_scores", ",", "sys_score", "=", "model", ".", "predict", "(", "\n", "data", ",", "cfg", ".", "batch_size", ",", "cfg", ".", "gpus", ",", "cfg", ".", "mc_dropout", ")", "\n", "", "for", "i", ",", "(", "mean", ",", "std", ",", "sample", ")", "in", "enumerate", "(", "zip", "(", "mean_scores", ",", "std_scores", ",", "data", ")", ")", ":", "\n", "            ", "print", "(", "\"Segment {}\\tscore: {:.4f}\\tvariance: {:.4f}\"", ".", "format", "(", "i", ",", "mean", ",", "std", ")", ")", "\n", "sample", "[", "\"COMET score\"", "]", "=", "mean", "\n", "sample", "[", "\"COMET variance\"", "]", "=", "std", "\n", "if", "isinstance", "(", "model", ".", "loss", ",", "HeteroscedasticLoss", ")", ":", "\n", "                ", "sample", "[", "\"Heteroscedastic score\"", "]", "=", "hts_mean", "\n", "sample", "[", "\"Heteroscedastic variance\"", "]", "=", "hts_std", "\n", "\n", "", "", "print", "(", "\"System score: {:.4f}\"", ".", "format", "(", "sys_score", ")", ")", "\n", "if", "isinstance", "(", "cfg", ".", "to_json", ",", "str", ")", ":", "\n", "            ", "with", "open", "(", "cfg", ".", "to_json", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "                ", "json", ".", "dump", "(", "data", ",", "outfile", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", "\n", "", "print", "(", "\"Predictions saved in: {}.\"", ".", "format", "(", "cfg", ".", "to_json", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "if", "isinstance", "(", "model", ".", "loss", ",", "HeteroscedasticLoss", ")", ":", "\n", "            ", "predictions", ",", "hts", ",", "sys_score", "=", "model", ".", "predict", "(", "data", ",", "cfg", ".", "batch_size", ",", "cfg", ".", "gpus", ")", "\n", "", "else", ":", "\n", "            ", "predictions", ",", "sys_score", "=", "model", ".", "predict", "(", "data", ",", "cfg", ".", "batch_size", ",", "cfg", ".", "gpus", ")", "\n", "", "for", "i", ",", "(", "score", ",", "sample", ")", "in", "enumerate", "(", "zip", "(", "predictions", ",", "data", ")", ")", ":", "\n", "            ", "print", "(", "\"Segment {}\\tscore: {:.4f}\"", ".", "format", "(", "i", ",", "score", ")", ")", "\n", "sample", "[", "\"COMET score\"", "]", "=", "score", "\n", "if", "isinstance", "(", "model", ".", "loss", ",", "HeteroscedasticLoss", ")", ":", "\n", "                ", "sample", "[", "\"Heteroscedastic score\"", "]", "=", "hts", "[", "i", "]", "\n", "\n", "", "", "print", "(", "\"System score: {:.4f}\"", ".", "format", "(", "sys_score", ")", ")", "\n", "if", "isinstance", "(", "cfg", ".", "to_json", ",", "str", ")", ":", "\n", "            ", "with", "open", "(", "cfg", ".", "to_json", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "                ", "json", ".", "dump", "(", "data", ",", "outfile", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", "\n", "", "print", "(", "\"Predictions saved in: {}.\"", ".", "format", "(", "cfg", ".", "to_json", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.wmt_kendall.WMTKendall.__init__": [[27, 32], ["torchmetrics.Metric.__init__", "wmt_kendall.WMTKendall.add_state", "wmt_kendall.WMTKendall.add_state", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dist_sync_on_step", "=", "False", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dist_sync_on_step", "=", "dist_sync_on_step", ")", "\n", "self", ".", "add_state", "(", "\"concordance\"", ",", "default", "=", "torch", ".", "tensor", "(", "0", ")", ",", "dist_reduce_fx", "=", "\"sum\"", ")", "\n", "self", ".", "add_state", "(", "\"discordance\"", ",", "default", "=", "torch", ".", "tensor", "(", "0", ")", ",", "dist_reduce_fx", "=", "\"sum\"", ")", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.wmt_kendall.WMTKendall.update": [[33, 37], ["torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "distance_pos", ":", "torch", ".", "Tensor", ",", "distance_neg", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "assert", "distance_pos", ".", "shape", "==", "distance_neg", ".", "shape", "\n", "self", ".", "concordance", "=", "torch", ".", "sum", "(", "(", "distance_pos", "<", "distance_neg", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "discordance", "=", "torch", ".", "sum", "(", "(", "distance_pos", ">=", "distance_neg", ")", ".", "float", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.wmt_kendall.WMTKendall.compute": [[38, 43], ["None"], "methods", ["None"], ["", "def", "compute", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "self", ".", "prefix", "\n", "+", "\"_kendall\"", ":", "(", "self", ".", "concordance", "-", "self", ".", "discordance", ")", "\n", "/", "(", "self", ".", "concordance", "+", "self", ".", "discordance", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.ranking_metric.RankingMetric.__init__": [[56, 93], ["comet.models.base.CometModel.__init__", "ranking_metric.RankingMetric.save_hyperparameters"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "nr_frozen_epochs", ":", "Union", "[", "float", ",", "int", "]", "=", "0.05", ",", "\n", "keep_embeddings_frozen", ":", "bool", "=", "False", ",", "\n", "optimizer", ":", "str", "=", "\"AdamW\"", ",", "\n", "encoder_learning_rate", ":", "float", "=", "1e-05", ",", "\n", "learning_rate", ":", "float", "=", "3e-05", ",", "\n", "layerwise_decay", ":", "float", "=", "0.95", ",", "\n", "encoder_model", ":", "str", "=", "\"XLM-RoBERTa\"", ",", "\n", "pretrained_model", ":", "str", "=", "\"xlm-roberta-base\"", ",", "\n", "pool", ":", "str", "=", "\"avg\"", ",", "\n", "layer", ":", "Union", "[", "str", ",", "int", "]", "=", "\"mix\"", ",", "\n", "dropout", ":", "float", "=", "0.1", ",", "\n", "batch_size", ":", "int", "=", "8", ",", "\n", "train_data", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "validation_data", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "load_weights_from_checkpoint", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "nr_frozen_epochs", ",", "\n", "keep_embeddings_frozen", ",", "\n", "optimizer", ",", "\n", "encoder_learning_rate", ",", "\n", "learning_rate", ",", "\n", "layerwise_decay", ",", "\n", "encoder_model", ",", "\n", "pretrained_model", ",", "\n", "pool", ",", "\n", "layer", ",", "\n", "dropout", ",", "\n", "batch_size", ",", "\n", "train_data", ",", "\n", "validation_data", ",", "\n", "load_weights_from_checkpoint", ",", "\n", "\"ranking_metric\"", ",", "\n", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.ranking_metric.RankingMetric.init_metrics": [[94, 97], ["wmt_kendall.WMTKendall", "wmt_kendall.WMTKendall"], "methods", ["None"], ["", "def", "init_metrics", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_metrics", "=", "WMTKendall", "(", "prefix", "=", "\"train\"", ")", "\n", "self", ".", "val_metrics", "=", "WMTKendall", "(", "prefix", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.ranking_metric.RankingMetric.loss": [[98, 101], ["torch.nn.TripletMarginLoss", "torch.nn.TripletMarginLoss", "torch.nn.TripletMarginLoss", "torch.nn.TripletMarginLoss"], "methods", ["None"], ["", "@", "property", "\n", "def", "loss", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "TripletMarginLoss", "(", "margin", "=", "1.0", ",", "p", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.ranking_metric.RankingMetric.configure_optimizers": [[102, 127], ["ranking_metric.RankingMetric.encoder.layerwise_lr", "transformers.AdamW", "ranking_metric.RankingMetric.layerwise_attention.parameters"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.bert.BERTEncoder.layerwise_lr"], ["", "def", "configure_optimizers", "(", "\n", "self", ",", "\n", ")", "->", "Tuple", "[", "List", "[", "torch", ".", "optim", ".", "Optimizer", "]", ",", "List", "[", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "]", "]", ":", "\n", "        ", "\"\"\"Sets the optimizers to be used during training.\"\"\"", "\n", "layer_parameters", "=", "self", ".", "encoder", ".", "layerwise_lr", "(", "\n", "self", ".", "hparams", ".", "encoder_learning_rate", ",", "self", ".", "hparams", ".", "layerwise_decay", "\n", ")", "\n", "if", "self", ".", "layerwise_attention", ":", "\n", "            ", "layerwise_attn_params", "=", "[", "\n", "{", "\n", "\"params\"", ":", "self", ".", "layerwise_attention", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "self", ".", "hparams", ".", "learning_rate", ",", "\n", "}", "\n", "]", "\n", "params", "=", "layer_parameters", "+", "layerwise_attn_params", "\n", "", "else", ":", "\n", "            ", "params", "=", "layer_parameters", "\n", "\n", "", "optimizer", "=", "AdamW", "(", "\n", "params", ",", "\n", "lr", "=", "self", ".", "hparams", ".", "learning_rate", ",", "\n", "correct_bias", "=", "True", ",", "\n", ")", "\n", "# scheduler = self._build_scheduler(optimizer)", "\n", "return", "[", "optimizer", "]", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.ranking_metric.RankingMetric.prepare_sample": [[128, 156], ["ranking_metric.RankingMetric.encoder.prepare_sample", "ranking_metric.RankingMetric.encoder.prepare_sample", "ranking_metric.RankingMetric.encoder.prepare_sample", "ranking_metric.RankingMetric.encoder.prepare_sample", "ranking_metric.RankingMetric.encoder.prepare_sample", "ranking_metric.RankingMetric.encoder.prepare_sample", "ranking_metric.RankingMetric.encoder.prepare_sample", "ranking_metric.RankingMetric.items", "ranking_metric.RankingMetric.items", "ranking_metric.RankingMetric.items", "ranking_metric.RankingMetric.items", "ranking_metric.RankingMetric.items", "ranking_metric.RankingMetric.items", "ranking_metric.RankingMetric.items"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample"], ["", "def", "prepare_sample", "(", "\n", "self", ",", "sample", ":", "List", "[", "Dict", "[", "str", ",", "Union", "[", "str", ",", "float", "]", "]", "]", ",", "inference", ":", "bool", "=", "False", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "\n", "        ", "sample", "=", "{", "k", ":", "[", "dic", "[", "k", "]", "for", "dic", "in", "sample", "]", "for", "k", "in", "sample", "[", "0", "]", "}", "\n", "\n", "if", "inference", ":", "\n", "            ", "src_inputs", "=", "self", ".", "encoder", ".", "prepare_sample", "(", "sample", "[", "\"src\"", "]", ")", "\n", "mt_inputs", "=", "self", ".", "encoder", ".", "prepare_sample", "(", "sample", "[", "\"mt\"", "]", ")", "\n", "ref_inputs", "=", "self", ".", "encoder", ".", "prepare_sample", "(", "sample", "[", "\"ref\"", "]", ")", "\n", "\n", "ref_inputs", "=", "{", "\"ref_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "ref_inputs", ".", "items", "(", ")", "}", "\n", "src_inputs", "=", "{", "\"src_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "src_inputs", ".", "items", "(", ")", "}", "\n", "mt_inputs", "=", "{", "\"mt_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "mt_inputs", ".", "items", "(", ")", "}", "\n", "\n", "return", "{", "**", "ref_inputs", ",", "**", "src_inputs", ",", "**", "mt_inputs", "}", "\n", "\n", "", "ref_inputs", "=", "self", ".", "encoder", ".", "prepare_sample", "(", "sample", "[", "\"ref\"", "]", ")", "\n", "src_inputs", "=", "self", ".", "encoder", ".", "prepare_sample", "(", "sample", "[", "\"src\"", "]", ")", "\n", "pos_inputs", "=", "self", ".", "encoder", ".", "prepare_sample", "(", "sample", "[", "\"pos\"", "]", ")", "\n", "neg_inputs", "=", "self", ".", "encoder", ".", "prepare_sample", "(", "sample", "[", "\"neg\"", "]", ")", "\n", "\n", "ref_inputs", "=", "{", "\"ref_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "ref_inputs", ".", "items", "(", ")", "}", "\n", "src_inputs", "=", "{", "\"src_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "src_inputs", ".", "items", "(", ")", "}", "\n", "pos_inputs", "=", "{", "\"pos_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "pos_inputs", ".", "items", "(", ")", "}", "\n", "neg_inputs", "=", "{", "\"neg_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "neg_inputs", ".", "items", "(", ")", "}", "\n", "\n", "return", "{", "**", "ref_inputs", ",", "**", "src_inputs", ",", "**", "pos_inputs", ",", "**", "neg_inputs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.ranking_metric.RankingMetric.forward": [[157, 196], ["ranking_metric.RankingMetric.get_sentence_embedding", "ranking_metric.RankingMetric.get_sentence_embedding", "ranking_metric.RankingMetric.get_sentence_embedding", "ranking_metric.RankingMetric.get_sentence_embedding", "torch.pairwise_distance", "torch.pairwise_distance", "torch.pairwise_distance", "torch.pairwise_distance", "torch.pairwise_distance", "torch.pairwise_distance", "torch.pairwise_distance", "torch.pairwise_distance", "ranking_metric.RankingMetric.loss", "ranking_metric.RankingMetric.loss"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.get_sentence_embedding", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.get_sentence_embedding", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.get_sentence_embedding", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.get_sentence_embedding", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.ranking_metric.RankingMetric.loss", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.ranking_metric.RankingMetric.loss"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "src_input_ids", ":", "torch", ".", "tensor", ",", "\n", "ref_input_ids", ":", "torch", ".", "tensor", ",", "\n", "pos_input_ids", ":", "torch", ".", "tensor", ",", "\n", "neg_input_ids", ":", "torch", ".", "tensor", ",", "\n", "src_attention_mask", ":", "torch", ".", "tensor", ",", "\n", "ref_attention_mask", ":", "torch", ".", "tensor", ",", "\n", "pos_attention_mask", ":", "torch", ".", "tensor", ",", "\n", "neg_attention_mask", ":", "torch", ".", "tensor", ",", "\n", "**", "kwargs", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "src_sentemb", "=", "self", ".", "get_sentence_embedding", "(", "src_input_ids", ",", "src_attention_mask", ")", "\n", "ref_sentemb", "=", "self", ".", "get_sentence_embedding", "(", "ref_input_ids", ",", "ref_attention_mask", ")", "\n", "pos_sentemb", "=", "self", ".", "get_sentence_embedding", "(", "pos_input_ids", ",", "pos_attention_mask", ")", "\n", "neg_sentemb", "=", "self", ".", "get_sentence_embedding", "(", "neg_input_ids", ",", "neg_attention_mask", ")", "\n", "\n", "loss", "=", "self", ".", "loss", "(", "src_sentemb", ",", "pos_sentemb", ",", "neg_sentemb", ")", "+", "self", ".", "loss", "(", "\n", "ref_sentemb", ",", "pos_sentemb", ",", "neg_sentemb", "\n", ")", "\n", "\n", "distance_src_pos", "=", "F", ".", "pairwise_distance", "(", "pos_sentemb", ",", "src_sentemb", ")", "\n", "distance_ref_pos", "=", "F", ".", "pairwise_distance", "(", "pos_sentemb", ",", "ref_sentemb", ")", "\n", "# Harmonic mean between anchors and the positive example", "\n", "distance_pos", "=", "(", "2", "*", "distance_src_pos", "*", "distance_ref_pos", ")", "/", "(", "\n", "distance_src_pos", "+", "distance_ref_pos", "\n", ")", "\n", "\n", "# Harmonic mean between anchors and the negative example", "\n", "distance_src_neg", "=", "F", ".", "pairwise_distance", "(", "neg_sentemb", ",", "src_sentemb", ")", "\n", "distance_ref_neg", "=", "F", ".", "pairwise_distance", "(", "neg_sentemb", ",", "ref_sentemb", ")", "\n", "distance_neg", "=", "(", "2", "*", "distance_src_neg", "*", "distance_ref_neg", ")", "/", "(", "\n", "distance_src_neg", "+", "distance_ref_neg", "\n", ")", "\n", "\n", "return", "{", "\n", "\"loss\"", ":", "loss", ",", "\n", "\"distance_pos\"", ":", "distance_pos", ",", "\n", "\"distance_neg\"", ":", "distance_neg", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.ranking_metric.RankingMetric.read_csv": [[198, 221], ["pandas.read_csv", "df[].astype", "df[].astype", "df[].astype", "df[].astype", "pandas.read_csv.to_dict", "df[].astype", "df[].astype", "df[].astype", "df[].astype", "pandas.read_csv.to_dict"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.read_csv"], ["", "def", "read_csv", "(", "self", ",", "path", ":", "str", ",", "regression", ":", "bool", "=", "False", ")", "->", "List", "[", "dict", "]", ":", "\n", "        ", "\"\"\"Reads a comma separated value file.\n\n        :param path: path to a csv file.\n\n        :return: List of records as dictionaries\n        \"\"\"", "\n", "df", "=", "pd", ".", "read_csv", "(", "path", ")", "\n", "\n", "if", "regression", ":", "\n", "            ", "df", "=", "df", "[", "[", "\"src\"", ",", "\"mt\"", ",", "\"ref\"", ",", "\"score\"", "]", "]", "\n", "df", "[", "\"src\"", "]", "=", "df", "[", "\"src\"", "]", ".", "astype", "(", "str", ")", "\n", "df", "[", "\"mt\"", "]", "=", "df", "[", "\"mt\"", "]", ".", "astype", "(", "str", ")", "\n", "df", "[", "\"ref\"", "]", "=", "df", "[", "\"ref\"", "]", ".", "astype", "(", "str", ")", "\n", "df", "[", "\"score\"", "]", "=", "df", "[", "\"score\"", "]", ".", "astype", "(", "float", ")", "\n", "return", "df", ".", "to_dict", "(", "\"records\"", ")", "\n", "\n", "", "df", "=", "df", "[", "[", "\"src\"", ",", "\"pos\"", ",", "\"neg\"", ",", "\"ref\"", "]", "]", "\n", "df", "[", "\"src\"", "]", "=", "df", "[", "\"src\"", "]", ".", "astype", "(", "str", ")", "\n", "df", "[", "\"pos\"", "]", "=", "df", "[", "\"pos\"", "]", ".", "astype", "(", "str", ")", "\n", "df", "[", "\"neg\"", "]", "=", "df", "[", "\"neg\"", "]", ".", "astype", "(", "str", ")", "\n", "df", "[", "\"ref\"", "]", "=", "df", "[", "\"ref\"", "]", ".", "astype", "(", "str", ")", "\n", "return", "df", ".", "to_dict", "(", "\"records\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.ranking_metric.RankingMetric.training_step": [[222, 250], ["ranking_metric.RankingMetric.forward", "ranking_metric.RankingMetric.log", "ranking_metric.RankingMetric.unfreeze_encoder"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.forward", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.unfreeze_encoder"], ["", "def", "training_step", "(", "\n", "self", ",", "\n", "batch", ":", "Tuple", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ",", "\n", "batch_nb", ":", "int", ",", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Runs one training step.\n        This usually consists in the forward function followed by the loss function.\n\n        :param batch: The output of your prepare_sample function.\n        :param batch_nb: Integer displaying which batch this is.\n\n        :returns: dictionary containing the loss and the metrics to be added to the\n            lightning logger.\n        \"\"\"", "\n", "batch_prediction", "=", "self", ".", "forward", "(", "**", "batch", ")", "\n", "loss_value", "=", "batch_prediction", "[", "\"loss\"", "]", "\n", "\n", "if", "(", "\n", "self", ".", "nr_frozen_epochs", "<", "1.0", "\n", "and", "self", ".", "nr_frozen_epochs", ">", "0.0", "\n", "and", "batch_nb", ">", "self", ".", "epoch_total_steps", "*", "self", ".", "nr_frozen_epochs", "\n", ")", ":", "\n", "            ", "self", ".", "unfreeze_encoder", "(", ")", "\n", "self", ".", "_frozen", "=", "False", "\n", "\n", "", "self", ".", "log", "(", "\"train_loss\"", ",", "loss_value", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ")", "\n", "return", "loss_value", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.ranking_metric.RankingMetric.validation_step": [[251, 278], ["ranking_metric.RankingMetric.forward", "ranking_metric.RankingMetric.log", "ranking_metric.RankingMetric.train_metrics.update", "ranking_metric.RankingMetric.val_metrics.update"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.forward", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.wmt_kendall.WMTKendall.update", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.wmt_kendall.WMTKendall.update"], ["", "def", "validation_step", "(", "\n", "self", ",", "\n", "batch", ":", "Tuple", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ",", "\n", "batch_nb", ":", "int", ",", "\n", "dataloader_idx", ":", "int", ",", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Similar to the training step but with the model in eval mode.\n\n        :param batch: The output of your prepare_sample function.\n        :param batch_nb: Integer displaying which batch this is.\n        :param dataloader_idx: Integer displaying which dataloader this is.\n\n        :returns: dictionary passed to the validation_end function.\n        \"\"\"", "\n", "batch_prediction", "=", "self", ".", "forward", "(", "**", "batch", ")", "\n", "loss_value", "=", "batch_prediction", "[", "\"loss\"", "]", "\n", "self", ".", "log", "(", "\"val_loss\"", ",", "loss_value", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ")", "\n", "\n", "# TODO: REMOVE if condition after torchmetrics bug fix", "\n", "if", "dataloader_idx", "==", "0", ":", "\n", "            ", "self", ".", "train_metrics", ".", "update", "(", "\n", "batch_prediction", "[", "\"distance_pos\"", "]", ",", "batch_prediction", "[", "\"distance_neg\"", "]", "\n", ")", "\n", "", "elif", "dataloader_idx", "==", "1", ":", "\n", "            ", "self", ".", "val_metrics", ".", "update", "(", "\n", "batch_prediction", "[", "\"distance_pos\"", "]", ",", "batch_prediction", "[", "\"distance_neg\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.ranking.ranking_metric.RankingMetric.predict_step": [[280, 301], ["ranking_metric.RankingMetric.get_sentence_embedding", "ranking_metric.RankingMetric.get_sentence_embedding", "ranking_metric.RankingMetric.get_sentence_embedding", "torch.pairwise_distance", "torch.pairwise_distance", "torch.pairwise_distance", "torch.pairwise_distance", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.get_sentence_embedding", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.get_sentence_embedding", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.get_sentence_embedding"], ["", "", "def", "predict_step", "(", "\n", "self", ",", "\n", "batch", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "\n", "batch_idx", ":", "int", ",", "\n", "dataloader_idx", ":", "Optional", "[", "int", "]", ",", "\n", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "src_sentemb", "=", "self", ".", "get_sentence_embedding", "(", "\n", "batch", "[", "\"src_input_ids\"", "]", ",", "batch", "[", "\"src_attention_mask\"", "]", "\n", ")", "\n", "ref_sentemb", "=", "self", ".", "get_sentence_embedding", "(", "\n", "batch", "[", "\"ref_input_ids\"", "]", ",", "batch", "[", "\"ref_attention_mask\"", "]", "\n", ")", "\n", "mt_sentemb", "=", "self", ".", "get_sentence_embedding", "(", "\n", "batch", "[", "\"mt_input_ids\"", "]", ",", "batch", "[", "\"mt_attention_mask\"", "]", "\n", ")", "\n", "\n", "src_distance", "=", "F", ".", "pairwise_distance", "(", "mt_sentemb", ",", "src_sentemb", ")", "\n", "ref_distance", "=", "F", ".", "pairwise_distance", "(", "mt_sentemb", ",", "ref_sentemb", ")", "\n", "\n", "distances", "=", "(", "2", "*", "ref_distance", "*", "src_distance", ")", "/", "(", "ref_distance", "+", "src_distance", ")", "\n", "return", "torch", ".", "ones_like", "(", "distances", ")", "/", "(", "1", "+", "distances", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.regression_metric.RegressionMetric.__init__": [[55, 126], ["comet.models.base.CometModel.__init__", "regression_metric.RegressionMetric.save_hyperparameters", "comet.modules.Bottleneck", "comet.modules.FeedForward", "comet.modules.FeedForward"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "nr_frozen_epochs", ":", "Union", "[", "float", ",", "int", "]", "=", "0.3", ",", "\n", "keep_embeddings_frozen", ":", "bool", "=", "False", ",", "\n", "keep_encoder_frozen", ":", "bool", "=", "False", ",", "\n", "optimizer", ":", "str", "=", "\"AdamW\"", ",", "\n", "encoder_learning_rate", ":", "float", "=", "1e-05", ",", "\n", "learning_rate", ":", "float", "=", "3e-05", ",", "\n", "layerwise_decay", ":", "float", "=", "0.95", ",", "\n", "encoder_model", ":", "str", "=", "\"XLM-RoBERTa\"", ",", "\n", "pretrained_model", ":", "str", "=", "\"xlm-roberta-base\"", ",", "\n", "pool", ":", "str", "=", "\"avg\"", ",", "\n", "layer", ":", "Union", "[", "str", ",", "int", "]", "=", "\"mix\"", ",", "\n", "dropout", ":", "float", "=", "0.1", ",", "\n", "batch_size", ":", "int", "=", "4", ",", "\n", "train_data", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "validation_data", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "hidden_sizes_bottleneck", ":", "List", "[", "int", "]", "=", "[", "3072", ",", "1024", "]", ",", "\n", "hidden_sizes", ":", "List", "[", "int", "]", "=", "[", "256", "]", ",", "\n", "activations", ":", "str", "=", "\"Tanh\"", ",", "\n", "final_activation", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "load_weights_from_checkpoint", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "loss", ":", "Optional", "[", "str", "]", "=", "\"mse\"", ",", "\n", "data_portion", ":", "Optional", "[", "float", "]", "=", "1.0", ",", "\n", "feature_size", ":", "Optional", "[", "int", "]", "=", "0", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "nr_frozen_epochs", ",", "\n", "keep_embeddings_frozen", ",", "\n", "keep_encoder_frozen", ",", "\n", "optimizer", ",", "\n", "encoder_learning_rate", ",", "\n", "learning_rate", ",", "\n", "layerwise_decay", ",", "\n", "encoder_model", ",", "\n", "pretrained_model", ",", "\n", "pool", ",", "\n", "layer", ",", "\n", "dropout", ",", "\n", "batch_size", ",", "\n", "train_data", ",", "\n", "validation_data", ",", "\n", "load_weights_from_checkpoint", ",", "\n", "\"regression_metric\"", ",", "\n", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "hidden_sizes_bottleneck", "[", "0", "]", ">", "0", ":", "\n", "            ", "self", ".", "bottleneck", "=", "Bottleneck", "(", "\n", "in_dim", "=", "self", ".", "encoder", ".", "output_units", "*", "6", ",", "\n", "hidden_sizes", "=", "[", "self", ".", "hparams", ".", "hidden_sizes", "[", "0", "]", ",", "self", ".", "hparams", ".", "hidden_sizes_bottleneck", "[", "-", "1", "]", "]", ",", "\n", "activations", "=", "self", ".", "hparams", ".", "activations", ",", "\n", "dropout", "=", "self", ".", "hparams", ".", "dropout", ",", "\n", ")", "\n", "\n", "self", ".", "estimator", "=", "FeedForward", "(", "\n", "in_dim", "=", "self", ".", "hparams", ".", "hidden_sizes_bottleneck", "[", "-", "1", "]", "+", "self", ".", "hparams", ".", "feature_size", ",", "\n", "out_dim", "=", "2", "if", "self", ".", "hparams", ".", "loss", "in", "[", "\"var\"", ",", "\"hts\"", "]", "else", "1", ",", "\n", "hidden_sizes", "=", "[", "self", ".", "hparams", ".", "hidden_sizes", "[", "-", "1", "]", "]", ",", "\n", "activations", "=", "self", ".", "hparams", ".", "activations", ",", "\n", "dropout", "=", "self", ".", "hparams", ".", "dropout", ",", "\n", "final_activation", "=", "self", ".", "hparams", ".", "final_activation", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "estimator", "=", "FeedForward", "(", "\n", "in_dim", "=", "self", ".", "encoder", ".", "output_units", "*", "6", ",", "\n", "out_dim", "=", "2", "if", "self", ".", "hparams", ".", "loss", "in", "[", "\"var\"", ",", "\"hts\"", "]", "else", "1", ",", "\n", "hidden_sizes", "=", "self", ".", "hparams", ".", "hidden_sizes", ",", "\n", "activations", "=", "self", ".", "hparams", ".", "activations", ",", "\n", "dropout", "=", "self", ".", "hparams", ".", "dropout", ",", "\n", "final_activation", "=", "self", ".", "hparams", ".", "final_activation", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.regression_metric.RegressionMetric.init_metrics": [[128, 134], ["torchmetrics.MetricCollection", "torchmetrics.MetricCollection.clone", "torchmetrics.MetricCollection.clone", "torchmetrics.SpearmanCorrcoef", "torchmetrics.PearsonCorrcoef"], "methods", ["None"], ["", "", "def", "init_metrics", "(", "self", ")", ":", "\n", "        ", "metrics", "=", "MetricCollection", "(", "\n", "{", "\"spearman\"", ":", "SpearmanCorrcoef", "(", ")", ",", "\"pearson\"", ":", "PearsonCorrcoef", "(", ")", "}", "\n", ")", "\n", "self", ".", "train_metrics", "=", "metrics", ".", "clone", "(", "prefix", "=", "\"train_\"", ")", "\n", "self", ".", "val_metrics", "=", "metrics", ".", "clone", "(", "prefix", "=", "\"val_\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.regression_metric.RegressionMetric.configure_optimizers": [[135, 173], ["regression_metric.RegressionMetric.encoder.layerwise_lr", "transformers.AdamW", "regression_metric.RegressionMetric.estimator.parameters", "regression_metric.RegressionMetric.bottleneck.parameters", "regression_metric.RegressionMetric.layerwise_attention.parameters"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.bert.BERTEncoder.layerwise_lr"], ["", "def", "configure_optimizers", "(", "\n", "self", ",", "\n", ")", "->", "Tuple", "[", "List", "[", "torch", ".", "optim", ".", "Optimizer", "]", ",", "List", "[", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "]", "]", ":", "\n", "        ", "\"\"\"Sets the optimizers to be used during training.\"\"\"", "\n", "layer_parameters", "=", "self", ".", "encoder", ".", "layerwise_lr", "(", "\n", "self", ".", "hparams", ".", "encoder_learning_rate", ",", "self", ".", "hparams", ".", "layerwise_decay", "\n", ")", "\n", "top_layers_parameters", "=", "[", "\n", "{", "\"params\"", ":", "self", ".", "estimator", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "self", ".", "hparams", ".", "learning_rate", "}", "\n", "]", "\n", "if", "self", ".", "hparams", ".", "hidden_sizes_bottleneck", "[", "0", "]", ">", "0", ":", "\n", "            ", "bott_layers_parameters", "=", "[", "\n", "{", "\"params\"", ":", "self", ".", "bottleneck", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "self", ".", "hparams", ".", "learning_rate", "}", "\n", "]", "\n", "", "if", "self", ".", "layerwise_attention", ":", "\n", "            ", "layerwise_attn_params", "=", "[", "\n", "{", "\n", "\"params\"", ":", "self", ".", "layerwise_attention", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "self", ".", "hparams", ".", "learning_rate", ",", "\n", "}", "\n", "]", "\n", "if", "self", ".", "hparams", ".", "hidden_sizes_bottleneck", "[", "0", "]", ">", "0", ":", "\n", "                ", "params", "=", "layer_parameters", "+", "top_layers_parameters", "+", "bott_layers_parameters", "+", "layerwise_attn_params", "\n", "", "else", ":", "\n", "                ", "params", "=", "layer_parameters", "+", "top_layers_parameters", "+", "layerwise_attn_params", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "hparams", ".", "hidden_sizes_bottleneck", "[", "0", "]", ">", "0", ":", "\n", "                ", "params", "=", "layer_parameters", "+", "top_layers_parameters", "+", "bott_layers_parameters", "\n", "", "else", ":", "\n", "                ", "params", "=", "layer_parameters", "+", "top_layers_parameters", "\n", "\n", "", "", "optimizer", "=", "AdamW", "(", "\n", "params", ",", "\n", "lr", "=", "self", ".", "hparams", ".", "learning_rate", ",", "\n", "correct_bias", "=", "True", ",", "\n", ")", "\n", "# scheduler = self._build_scheduler(optimizer)", "\n", "return", "[", "optimizer", "]", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.regression_metric.RegressionMetric.prepare_sample": [[174, 218], ["regression_metric.RegressionMetric.encoder.prepare_sample", "regression_metric.RegressionMetric.encoder.prepare_sample", "regression_metric.RegressionMetric.encoder.prepare_sample", "torch.as_tensor", "torch.tensor", "regression_metric.RegressionMetric.items", "regression_metric.RegressionMetric.items", "regression_metric.RegressionMetric.items", "feat.startswith", "torch.Tensor", "feats.append"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample"], ["", "def", "prepare_sample", "(", "\n", "self", ",", "sample", ":", "List", "[", "Dict", "[", "str", ",", "Union", "[", "str", ",", "float", "]", "]", "]", ",", "inference", ":", "bool", "=", "False", ",", "data_portion", ":", "float", "=", "1.0", ",", "\n", ")", "->", "Union", "[", "\n", "Tuple", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ",", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "\n", "]", ":", "\n", "        ", "\"\"\"\n        Function that prepares a sample to input the model.\n\n        :param sample: list of dictionaries.\n        :param inference: If set to true prepares only the model inputs.\n\n        :returns: Tuple with 2 dictionaries (model inputs and targets).\n            If `inference=True` returns only the model inputs.\n        \"\"\"", "\n", "#print(sample[0])", "\n", "sample", "=", "{", "k", ":", "[", "dic", "[", "k", "]", "for", "dic", "in", "sample", "]", "for", "k", "in", "sample", "[", "0", "]", "}", "\n", "src_inputs", "=", "self", ".", "encoder", ".", "prepare_sample", "(", "sample", "[", "\"src\"", "]", ")", "\n", "mt_inputs", "=", "self", ".", "encoder", ".", "prepare_sample", "(", "sample", "[", "\"mt\"", "]", ")", "\n", "ref_inputs", "=", "self", ".", "encoder", ".", "prepare_sample", "(", "sample", "[", "\"ref\"", "]", ")", "\n", "\n", "src_inputs", "=", "{", "\"src_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "src_inputs", ".", "items", "(", ")", "}", "\n", "mt_inputs", "=", "{", "\"mt_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "mt_inputs", ".", "items", "(", ")", "}", "\n", "ref_inputs", "=", "{", "\"ref_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "ref_inputs", ".", "items", "(", ")", "}", "\n", "if", "self", ".", "hparams", ".", "feature_size", ">", "0", ":", "\n", "            ", "feats", "=", "[", "]", "\n", "for", "feat", "in", "sample", ":", "\n", "                ", "if", "feat", ".", "startswith", "(", "\"f\"", ")", ":", "\n", "                    ", "feats", ".", "append", "(", "sample", "[", "feat", "]", ")", "\n", "#print(len(feats))", "\n", "", "", "feature_tensor", "=", "torch", ".", "as_tensor", "(", "feats", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "#print(feature_tensor.shape)", "\n", "#print('------------------')", "\n", "features", "=", "{", "\"custom_features\"", ":", "feature_tensor", ".", "T", "}", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "features", "=", "{", "\"custom_features\"", ":", "torch", ".", "Tensor", "(", ")", "}", "\n", "\n", "", "inputs", "=", "{", "**", "src_inputs", ",", "**", "mt_inputs", ",", "**", "ref_inputs", ",", "**", "features", "}", "\n", "if", "inference", ":", "\n", "            ", "return", "inputs", "\n", "\n", "", "targets", "=", "{", "\"score\"", ":", "torch", ".", "tensor", "(", "sample", "[", "\"score\"", "]", ",", "dtype", "=", "torch", ".", "float", ")", "}", "\n", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.regression_metric.RegressionMetric.forward": [[219, 258], ["regression_metric.RegressionMetric.get_sentence_embedding", "regression_metric.RegressionMetric.get_sentence_embedding", "regression_metric.RegressionMetric.get_sentence_embedding", "torch.abs", "torch.abs", "torch.cat", "regression_metric.RegressionMetric.bottleneck", "torch.cat", "regression_metric.RegressionMetric.estimator", "regression_metric.RegressionMetric.bottleneck", "regression_metric.RegressionMetric.estimator", "regression_metric.RegressionMetric.estimator"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.get_sentence_embedding", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.get_sentence_embedding", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.get_sentence_embedding"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "src_input_ids", ":", "torch", ".", "tensor", ",", "\n", "src_attention_mask", ":", "torch", ".", "tensor", ",", "\n", "mt_input_ids", ":", "torch", ".", "tensor", ",", "\n", "mt_attention_mask", ":", "torch", ".", "tensor", ",", "\n", "ref_input_ids", ":", "torch", ".", "tensor", ",", "\n", "ref_attention_mask", ":", "torch", ".", "tensor", ",", "\n", "custom_features", ":", "torch", ".", "tensor", ",", "\n", "**", "kwargs", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "src_sentemb", "=", "self", ".", "get_sentence_embedding", "(", "src_input_ids", ",", "src_attention_mask", ")", "\n", "mt_sentemb", "=", "self", ".", "get_sentence_embedding", "(", "mt_input_ids", ",", "mt_attention_mask", ")", "\n", "ref_sentemb", "=", "self", ".", "get_sentence_embedding", "(", "ref_input_ids", ",", "ref_attention_mask", ")", "\n", "\n", "diff_ref", "=", "torch", ".", "abs", "(", "mt_sentemb", "-", "ref_sentemb", ")", "\n", "diff_src", "=", "torch", ".", "abs", "(", "mt_sentemb", "-", "src_sentemb", ")", "\n", "\n", "prod_ref", "=", "mt_sentemb", "*", "ref_sentemb", "\n", "prod_src", "=", "mt_sentemb", "*", "src_sentemb", "\n", "\n", "embedded_sequences", "=", "torch", ".", "cat", "(", "\n", "(", "mt_sentemb", ",", "ref_sentemb", ",", "prod_ref", ",", "diff_ref", ",", "prod_src", ",", "diff_src", ")", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "if", "self", ".", "hparams", ".", "feature_size", ">", "0", "and", "self", ".", "hparams", ".", "hidden_sizes_bottleneck", "[", "0", "]", ">", "0", ":", "\n", "            ", "bottleneck", "=", "self", ".", "bottleneck", "(", "embedded_sequences", ")", "\n", "seq_feats", "=", "torch", ".", "cat", "(", "(", "bottleneck", ",", "custom_features", ")", ",", "dim", "=", "1", ")", "\n", "score", "=", "self", ".", "estimator", "(", "seq_feats", ")", "\n", "", "elif", "self", ".", "hparams", ".", "feature_size", "==", "0", "and", "self", ".", "hparams", ".", "hidden_sizes_bottleneck", "[", "0", "]", ">", "0", ":", "\n", "            ", "bottleneck", "=", "self", ".", "bottleneck", "(", "embedded_sequences", ")", "\n", "score", "=", "self", ".", "estimator", "(", "bottleneck", ")", "\n", "", "else", ":", "\n", "#bottleneck = self.bottleneck(embedded_sequences)", "\n", "            ", "score", "=", "self", ".", "estimator", "(", "embedded_sequences", ")", "\n", "", "if", "self", ".", "hparams", ".", "loss", "in", "[", "\"var\"", ",", "\"hts\"", "]", ":", "\n", "            ", "return", "{", "\"score\"", ":", "score", "[", ":", ",", "0", "]", ",", "\"variance\"", ":", "score", "[", ":", ",", "1", "]", "}", "\n", "\n", "", "return", "{", "\"score\"", ":", "score", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.regression_metric.RegressionMetric.read_csv": [[259, 283], ["pandas.read_csv", "range", "df[].astype", "df[].astype", "df[].astype", "df[].astype", "pandas.read_csv.to_dict", "print", "columns.append", "feats.append", "df[].astype", "str", "str"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.read_csv"], ["", "def", "read_csv", "(", "self", ",", "path", ":", "str", ")", "->", "List", "[", "dict", "]", ":", "\n", "        ", "\"\"\"Reads a comma separated value file.\n\n        :param path: path to a csv file.\n\n        :return: List of records as dictionaries\n        \"\"\"", "\n", "feats", "=", "[", "]", "\n", "df", "=", "pd", ".", "read_csv", "(", "path", ")", "\n", "flen", "=", "self", ".", "hparams", ".", "feature_size", "\n", "columns", "=", "[", "\"src\"", ",", "\"mt\"", ",", "\"ref\"", ",", "\"score\"", "]", "\n", "for", "i", "in", "range", "(", "flen", ")", ":", "\n", "            ", "fstring", "=", "'f'", "+", "str", "(", "i", "+", "1", ")", "\n", "print", "(", "'feature added: '", "+", "str", "(", "fstring", ")", ")", "\n", "columns", ".", "append", "(", "fstring", ")", "\n", "feats", ".", "append", "(", "fstring", ")", "\n", "", "df", "=", "df", "[", "columns", "]", "\n", "df", "[", "\"src\"", "]", "=", "df", "[", "\"src\"", "]", ".", "astype", "(", "str", ")", "\n", "df", "[", "\"mt\"", "]", "=", "df", "[", "\"mt\"", "]", ".", "astype", "(", "str", ")", "\n", "df", "[", "\"ref\"", "]", "=", "df", "[", "\"ref\"", "]", ".", "astype", "(", "str", ")", "\n", "df", "[", "\"score\"", "]", "=", "df", "[", "\"score\"", "]", ".", "astype", "(", "float", ")", "\n", "for", "feat", "in", "feats", ":", "\n", "            ", "df", "[", "feat", "]", "=", "df", "[", "feat", "]", ".", "astype", "(", "float", ")", "\n", "", "return", "df", ".", "to_dict", "(", "\"records\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.regression_metric_hybrid.RegressionMetric.__init__": [[55, 115], ["comet.models.base.CometModel.__init__", "regression_metric_hybrid.RegressionMetric.save_hyperparameters", "comet.modules.Bottleneck", "comet.modules.FeedForward"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "nr_frozen_epochs", ":", "Union", "[", "float", ",", "int", "]", "=", "0.3", ",", "\n", "keep_embeddings_frozen", ":", "bool", "=", "False", ",", "\n", "keep_encoder_frozen", ":", "bool", "=", "False", ",", "\n", "optimizer", ":", "str", "=", "\"AdamW\"", ",", "\n", "encoder_learning_rate", ":", "float", "=", "1e-05", ",", "\n", "learning_rate", ":", "float", "=", "3e-05", ",", "\n", "layerwise_decay", ":", "float", "=", "0.95", ",", "\n", "encoder_model", ":", "str", "=", "\"XLM-RoBERTa\"", ",", "\n", "pretrained_model", ":", "str", "=", "\"xlm-roberta-base\"", ",", "\n", "pool", ":", "str", "=", "\"avg\"", ",", "\n", "layer", ":", "Union", "[", "str", ",", "int", "]", "=", "\"mix\"", ",", "\n", "dropout", ":", "float", "=", "0.1", ",", "\n", "batch_size", ":", "int", "=", "4", ",", "\n", "train_data", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "validation_data", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "hidden_sizes_bottleneck", ":", "List", "[", "int", "]", "=", "[", "2304", ",", "256", "]", ",", "\n", "hidden_sizes", ":", "List", "[", "int", "]", "=", "[", "768", "]", ",", "\n", "activations", ":", "str", "=", "\"Tanh\"", ",", "\n", "final_activation", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "load_weights_from_checkpoint", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "loss", ":", "Optional", "[", "str", "]", "=", "\"mse\"", ",", "\n", "data_portion", ":", "Optional", "[", "float", "]", "=", "1.0", ",", "\n", "feature_size", ":", "Optional", "[", "int", "]", "=", "0", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "nr_frozen_epochs", ",", "\n", "keep_embeddings_frozen", ",", "\n", "keep_encoder_frozen", ",", "\n", "optimizer", ",", "\n", "encoder_learning_rate", ",", "\n", "learning_rate", ",", "\n", "layerwise_decay", ",", "\n", "encoder_model", ",", "\n", "pretrained_model", ",", "\n", "pool", ",", "\n", "layer", ",", "\n", "dropout", ",", "\n", "batch_size", ",", "\n", "train_data", ",", "\n", "validation_data", ",", "\n", "load_weights_from_checkpoint", ",", "\n", "\"regression_metric\"", ",", "\n", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "self", ".", "bottleneck", "=", "Bottleneck", "(", "\n", "in_dim", "=", "self", ".", "encoder", ".", "output_units", "*", "6", ",", "\n", "hidden_sizes", "=", "[", "self", ".", "hparams", ".", "hidden_sizes", "[", "0", "]", ",", "self", ".", "hparams", ".", "hidden_sizes_bottleneck", "[", "-", "1", "]", "]", ",", "\n", "activations", "=", "self", ".", "hparams", ".", "activations", ",", "\n", "dropout", "=", "self", ".", "hparams", ".", "dropout", ",", "\n", ")", "\n", "\n", "self", ".", "estimator", "=", "FeedForward", "(", "\n", "in_dim", "=", "self", ".", "hparams", ".", "hidden_sizes_bottleneck", "[", "-", "1", "]", "+", "self", ".", "hparams", ".", "feature_size", ",", "\n", "out_dim", "=", "2", "if", "self", ".", "hparams", ".", "loss", "in", "[", "\"var\"", ",", "\"hts\"", "]", "else", "1", ",", "\n", "hidden_sizes", "=", "[", "self", ".", "hparams", ".", "hidden_sizes", "[", "-", "1", "]", "]", ",", "\n", "activations", "=", "self", ".", "hparams", ".", "activations", ",", "\n", "dropout", "=", "self", ".", "hparams", ".", "dropout", ",", "\n", "final_activation", "=", "self", ".", "hparams", ".", "final_activation", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.regression_metric_hybrid.RegressionMetric.init_metrics": [[117, 123], ["torchmetrics.MetricCollection", "torchmetrics.MetricCollection.clone", "torchmetrics.MetricCollection.clone", "torchmetrics.SpearmanCorrcoef", "torchmetrics.PearsonCorrcoef"], "methods", ["None"], ["", "def", "init_metrics", "(", "self", ")", ":", "\n", "        ", "metrics", "=", "MetricCollection", "(", "\n", "{", "\"spearman\"", ":", "SpearmanCorrcoef", "(", ")", ",", "\"pearson\"", ":", "PearsonCorrcoef", "(", ")", "}", "\n", ")", "\n", "self", ".", "train_metrics", "=", "metrics", ".", "clone", "(", "prefix", "=", "\"train_\"", ")", "\n", "self", ".", "val_metrics", "=", "metrics", ".", "clone", "(", "prefix", "=", "\"val_\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.regression_metric_hybrid.RegressionMetric.configure_optimizers": [[124, 155], ["regression_metric_hybrid.RegressionMetric.encoder.layerwise_lr", "transformers.AdamW", "regression_metric_hybrid.RegressionMetric.estimator.parameters", "regression_metric_hybrid.RegressionMetric.bottleneck.parameters", "regression_metric_hybrid.RegressionMetric.layerwise_attention.parameters"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.encoders.bert.BERTEncoder.layerwise_lr"], ["", "def", "configure_optimizers", "(", "\n", "self", ",", "\n", ")", "->", "Tuple", "[", "List", "[", "torch", ".", "optim", ".", "Optimizer", "]", ",", "List", "[", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "]", "]", ":", "\n", "        ", "\"\"\"Sets the optimizers to be used during training.\"\"\"", "\n", "layer_parameters", "=", "self", ".", "encoder", ".", "layerwise_lr", "(", "\n", "self", ".", "hparams", ".", "encoder_learning_rate", ",", "self", ".", "hparams", ".", "layerwise_decay", "\n", ")", "\n", "top_layers_parameters", "=", "[", "\n", "{", "\"params\"", ":", "self", ".", "estimator", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "self", ".", "hparams", ".", "learning_rate", "}", "\n", "]", "\n", "bott_layers_parameters", "=", "[", "\n", "{", "\"params\"", ":", "self", ".", "bottleneck", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "self", ".", "hparams", ".", "learning_rate", "}", "\n", "]", "\n", "if", "self", ".", "layerwise_attention", ":", "\n", "            ", "layerwise_attn_params", "=", "[", "\n", "{", "\n", "\"params\"", ":", "self", ".", "layerwise_attention", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "self", ".", "hparams", ".", "learning_rate", ",", "\n", "}", "\n", "]", "\n", "params", "=", "layer_parameters", "+", "top_layers_parameters", "+", "bott_layers_parameters", "+", "layerwise_attn_params", "\n", "", "else", ":", "\n", "            ", "params", "=", "layer_parameters", "+", "top_layers_parameters", "+", "bott_layers_parameters", "\n", "\n", "", "optimizer", "=", "AdamW", "(", "\n", "params", ",", "\n", "lr", "=", "self", ".", "hparams", ".", "learning_rate", ",", "\n", "correct_bias", "=", "True", ",", "\n", ")", "\n", "# scheduler = self._build_scheduler(optimizer)", "\n", "return", "[", "optimizer", "]", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.regression_metric_hybrid.RegressionMetric.prepare_sample": [[156, 200], ["regression_metric_hybrid.RegressionMetric.encoder.prepare_sample", "regression_metric_hybrid.RegressionMetric.encoder.prepare_sample", "regression_metric_hybrid.RegressionMetric.encoder.prepare_sample", "torch.as_tensor", "torch.tensor", "regression_metric_hybrid.RegressionMetric.items", "regression_metric_hybrid.RegressionMetric.items", "regression_metric_hybrid.RegressionMetric.items", "feat.startswith", "torch.Tensor", "feats.append"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample"], ["", "def", "prepare_sample", "(", "\n", "self", ",", "sample", ":", "List", "[", "Dict", "[", "str", ",", "Union", "[", "str", ",", "float", "]", "]", "]", ",", "inference", ":", "bool", "=", "False", ",", "data_portion", ":", "float", "=", "1.0", ",", "\n", ")", "->", "Union", "[", "\n", "Tuple", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ",", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "\n", "]", ":", "\n", "        ", "\"\"\"\n        Function that prepares a sample to input the model.\n\n        :param sample: list of dictionaries.\n        :param inference: If set to true prepares only the model inputs.\n\n        :returns: Tuple with 2 dictionaries (model inputs and targets).\n            If `inference=True` returns only the model inputs.\n        \"\"\"", "\n", "#print(sample[0])", "\n", "sample", "=", "{", "k", ":", "[", "dic", "[", "k", "]", "for", "dic", "in", "sample", "]", "for", "k", "in", "sample", "[", "0", "]", "}", "\n", "src_inputs", "=", "self", ".", "encoder", ".", "prepare_sample", "(", "sample", "[", "\"src\"", "]", ")", "\n", "mt_inputs", "=", "self", ".", "encoder", ".", "prepare_sample", "(", "sample", "[", "\"mt\"", "]", ")", "\n", "ref_inputs", "=", "self", ".", "encoder", ".", "prepare_sample", "(", "sample", "[", "\"ref\"", "]", ")", "\n", "\n", "src_inputs", "=", "{", "\"src_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "src_inputs", ".", "items", "(", ")", "}", "\n", "mt_inputs", "=", "{", "\"mt_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "mt_inputs", ".", "items", "(", ")", "}", "\n", "ref_inputs", "=", "{", "\"ref_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "ref_inputs", ".", "items", "(", ")", "}", "\n", "if", "self", ".", "hparams", ".", "feature_size", ">", "0", ":", "\n", "            ", "feats", "=", "[", "]", "\n", "for", "feat", "in", "sample", ":", "\n", "                ", "if", "feat", ".", "startswith", "(", "\"f\"", ")", ":", "\n", "                    ", "feats", ".", "append", "(", "sample", "[", "feat", "]", ")", "\n", "#print(len(feats))", "\n", "", "", "feature_tensor", "=", "torch", ".", "as_tensor", "(", "feats", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "#print(feature_tensor.shape)", "\n", "#print('------------------')", "\n", "features", "=", "{", "\"custom_features\"", ":", "feature_tensor", ".", "T", "}", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "features", "=", "{", "\"custom_features\"", ":", "torch", ".", "Tensor", "(", ")", "}", "\n", "\n", "", "inputs", "=", "{", "**", "src_inputs", ",", "**", "mt_inputs", ",", "**", "ref_inputs", ",", "**", "features", "}", "\n", "if", "inference", ":", "\n", "            ", "return", "inputs", "\n", "\n", "", "targets", "=", "{", "\"score\"", ":", "torch", ".", "tensor", "(", "sample", "[", "\"score\"", "]", ",", "dtype", "=", "torch", ".", "float", ")", "}", "\n", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.regression_metric_hybrid.RegressionMetric.forward": [[201, 245], ["regression_metric_hybrid.RegressionMetric.get_sentence_embedding", "regression_metric_hybrid.RegressionMetric.get_sentence_embedding", "regression_metric_hybrid.RegressionMetric.get_sentence_embedding", "torch.abs", "torch.abs", "torch.cat", "regression_metric_hybrid.RegressionMetric.bottleneck", "torch.cat", "regression_metric_hybrid.RegressionMetric.estimator", "regression_metric_hybrid.RegressionMetric.bottleneck", "regression_metric_hybrid.RegressionMetric.estimator"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.get_sentence_embedding", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.get_sentence_embedding", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.get_sentence_embedding"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "src_input_ids", ":", "torch", ".", "tensor", ",", "\n", "src_attention_mask", ":", "torch", ".", "tensor", ",", "\n", "mt_input_ids", ":", "torch", ".", "tensor", ",", "\n", "mt_attention_mask", ":", "torch", ".", "tensor", ",", "\n", "ref_input_ids", ":", "torch", ".", "tensor", ",", "\n", "ref_attention_mask", ":", "torch", ".", "tensor", ",", "\n", "custom_features", ":", "torch", ".", "tensor", ",", "\n", "**", "kwargs", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "src_sentemb", "=", "self", ".", "get_sentence_embedding", "(", "src_input_ids", ",", "src_attention_mask", ")", "\n", "mt_sentemb", "=", "self", ".", "get_sentence_embedding", "(", "mt_input_ids", ",", "mt_attention_mask", ")", "\n", "ref_sentemb", "=", "self", ".", "get_sentence_embedding", "(", "ref_input_ids", ",", "ref_attention_mask", ")", "\n", "\n", "diff_ref", "=", "torch", ".", "abs", "(", "mt_sentemb", "-", "ref_sentemb", ")", "\n", "diff_src", "=", "torch", ".", "abs", "(", "mt_sentemb", "-", "src_sentemb", ")", "\n", "\n", "prod_ref", "=", "mt_sentemb", "*", "ref_sentemb", "\n", "prod_src", "=", "mt_sentemb", "*", "src_sentemb", "\n", "\n", "embedded_sequences", "=", "torch", ".", "cat", "(", "\n", "(", "mt_sentemb", ",", "ref_sentemb", ",", "prod_ref", ",", "diff_ref", ",", "prod_src", ",", "diff_src", ")", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "if", "self", ".", "hparams", ".", "feature_size", ">", "0", ":", "\n", "#custom_features=torch.unsqueeze(custom_features, 1)", "\n", "#print(embedded_sequences.shape)", "\n", "#print(f1.shape)", "\n", "\n", "            ", "bottleneck", "=", "self", ".", "bottleneck", "(", "embedded_sequences", ")", "\n", "#print(bottleneck.shape)", "\n", "#print(custom_features.shape)", "\n", "seq_feats", "=", "torch", ".", "cat", "(", "(", "bottleneck", ",", "custom_features", ")", ",", "dim", "=", "1", ")", "\n", "#print(seq_feats.shape)", "\n", "\n", "score", "=", "self", ".", "estimator", "(", "seq_feats", ")", "\n", "", "else", ":", "\n", "            ", "bottleneck", "=", "self", ".", "bottleneck", "(", "embedded_sequences", ")", "\n", "score", "=", "self", ".", "estimator", "(", "bottleneck", ")", "\n", "", "if", "self", ".", "hparams", ".", "loss", "in", "[", "\"var\"", ",", "\"hts\"", "]", ":", "\n", "            ", "return", "{", "\"score\"", ":", "score", "[", ":", ",", "0", "]", ",", "\"variance\"", ":", "score", "[", ":", ",", "1", "]", "}", "\n", "\n", "", "return", "{", "\"score\"", ":", "score", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.regression_metric_hybrid.RegressionMetric.read_csv": [[246, 270], ["pandas.read_csv", "range", "df[].astype", "df[].astype", "df[].astype", "df[].astype", "pandas.read_csv.to_dict", "print", "columns.append", "feats.append", "df[].astype", "str", "str"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.read_csv"], ["", "def", "read_csv", "(", "self", ",", "path", ":", "str", ")", "->", "List", "[", "dict", "]", ":", "\n", "        ", "\"\"\"Reads a comma separated value file.\n\n        :param path: path to a csv file.\n\n        :return: List of records as dictionaries\n        \"\"\"", "\n", "feats", "=", "[", "]", "\n", "df", "=", "pd", ".", "read_csv", "(", "path", ")", "\n", "flen", "=", "self", ".", "hparams", ".", "feature_size", "\n", "columns", "=", "[", "\"src\"", ",", "\"mt\"", ",", "\"ref\"", ",", "\"score\"", "]", "\n", "for", "i", "in", "range", "(", "flen", ")", ":", "\n", "            ", "fstring", "=", "'f'", "+", "str", "(", "i", "+", "1", ")", "\n", "print", "(", "'feature added: '", "+", "str", "(", "fstring", ")", ")", "\n", "columns", ".", "append", "(", "fstring", ")", "\n", "feats", ".", "append", "(", "fstring", ")", "\n", "", "df", "=", "df", "[", "columns", "]", "\n", "df", "[", "\"src\"", "]", "=", "df", "[", "\"src\"", "]", ".", "astype", "(", "str", ")", "\n", "df", "[", "\"mt\"", "]", "=", "df", "[", "\"mt\"", "]", ".", "astype", "(", "str", ")", "\n", "df", "[", "\"ref\"", "]", "=", "df", "[", "\"ref\"", "]", ".", "astype", "(", "str", ")", "\n", "df", "[", "\"score\"", "]", "=", "df", "[", "\"score\"", "]", ".", "astype", "(", "float", ")", "\n", "for", "feat", "in", "feats", ":", "\n", "            ", "df", "[", "feat", "]", "=", "df", "[", "feat", "]", ".", "astype", "(", "float", ")", "\n", "", "return", "df", ".", "to_dict", "(", "\"records\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.__init__": [[53, 114], ["comet.models.regression.regression_metric.RegressionMetric.__init__", "referenceless.ReferencelessRegression.save_hyperparameters", "comet.modules.Bottleneck", "comet.modules.FeedForward"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "nr_frozen_epochs", ":", "Union", "[", "float", ",", "int", "]", "=", "0.3", ",", "\n", "keep_embeddings_frozen", ":", "bool", "=", "False", ",", "\n", "keep_encoder_frozen", ":", "bool", "=", "False", ",", "\n", "optimizer", ":", "str", "=", "\"AdamW\"", ",", "\n", "encoder_learning_rate", ":", "float", "=", "1e-05", ",", "\n", "learning_rate", ":", "float", "=", "3e-05", ",", "\n", "layerwise_decay", ":", "float", "=", "0.95", ",", "\n", "encoder_model", ":", "str", "=", "\"XLM-RoBERTa\"", ",", "\n", "pretrained_model", ":", "str", "=", "\"xlm-roberta-base\"", ",", "\n", "pool", ":", "str", "=", "\"avg\"", ",", "\n", "layer", ":", "Union", "[", "str", ",", "int", "]", "=", "\"mix\"", ",", "\n", "dropout", ":", "float", "=", "0.1", ",", "\n", "batch_size", ":", "int", "=", "4", ",", "\n", "train_data", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "validation_data", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "hidden_sizes_bottleneck", ":", "List", "[", "int", "]", "=", "[", "1536", ",", "256", "]", ",", "\n", "hidden_sizes", ":", "List", "[", "int", "]", "=", "[", "768", "]", ",", "\n", "activations", ":", "str", "=", "\"Tanh\"", ",", "\n", "final_activation", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "load_weights_from_checkpoint", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "loss", ":", "Optional", "[", "str", "]", "=", "\"mse\"", ",", "\n", "data_portion", ":", "Optional", "[", "float", "]", "=", "1.0", ",", "\n", "feature_size", ":", "Optional", "[", "int", "]", "=", "0", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "RegressionMetric", ",", "self", ")", ".", "__init__", "(", "\n", "nr_frozen_epochs", ",", "\n", "keep_embeddings_frozen", ",", "\n", "keep_encoder_frozen", ",", "\n", "optimizer", ",", "\n", "encoder_learning_rate", ",", "\n", "learning_rate", ",", "\n", "layerwise_decay", ",", "\n", "encoder_model", ",", "\n", "pretrained_model", ",", "\n", "pool", ",", "\n", "layer", ",", "\n", "dropout", ",", "\n", "batch_size", ",", "\n", "train_data", ",", "\n", "validation_data", ",", "\n", "load_weights_from_checkpoint", ",", "\n", "\"referenceless_regression_metric\"", ",", "\n", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n", "self", ".", "bottleneck", "=", "Bottleneck", "(", "\n", "in_dim", "=", "self", ".", "encoder", ".", "output_units", "*", "4", ",", "\n", "hidden_sizes", "=", "self", ".", "hparams", ".", "hidden_sizes_bottleneck", ",", "\n", "activations", "=", "self", ".", "hparams", ".", "activations", ",", "\n", "dropout", "=", "self", ".", "hparams", ".", "dropout", ",", "\n", ")", "\n", "\n", "self", ".", "estimator", "=", "FeedForward", "(", "\n", "in_dim", "=", "self", ".", "hparams", ".", "hidden_sizes_bottleneck", "[", "-", "1", "]", "+", "self", ".", "hparams", ".", "feature_size", ",", "\n", "out_dim", "=", "2", "if", "self", ".", "hparams", ".", "loss", "in", "[", "\"var\"", ",", "\"hts\"", "]", "else", "1", ",", "\n", "hidden_sizes", "=", "self", ".", "hparams", ".", "hidden_sizes", ",", "\n", "activations", "=", "self", ".", "hparams", ".", "activations", ",", "\n", "dropout", "=", "self", ".", "hparams", ".", "dropout", ",", "\n", "final_activation", "=", "self", ".", "hparams", ".", "final_activation", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample": [[116, 158], ["referenceless.ReferencelessRegression.encoder.prepare_sample", "referenceless.ReferencelessRegression.encoder.prepare_sample", "torch.as_tensor", "torch.tensor", "referenceless.ReferencelessRegression.items", "referenceless.ReferencelessRegression.items", "feat.startswith", "torch.Tensor", "feats.append"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.prepare_sample"], ["", "def", "prepare_sample", "(", "\n", "self", ",", "sample", ":", "List", "[", "Dict", "[", "str", ",", "Union", "[", "str", ",", "float", "]", "]", "]", ",", "inference", ":", "bool", "=", "False", ",", "data_portion", ":", "float", "=", "1.0", ",", "\n", ")", "->", "Union", "[", "\n", "Tuple", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ",", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "\n", "]", ":", "\n", "        ", "\"\"\"\n        Function that prepares a sample to input the model.\n\n        :param sample: list of dictionaries.\n        :param inference: If set to true prepares only the model inputs.\n\n        :returns: Tuple with 2 dictionaries (model inputs and targets).\n            If `inference=True` returns only the model inputs.\n        \"\"\"", "\n", "sample", "=", "{", "k", ":", "[", "dic", "[", "k", "]", "for", "dic", "in", "sample", "]", "for", "k", "in", "sample", "[", "0", "]", "}", "\n", "src_inputs", "=", "self", ".", "encoder", ".", "prepare_sample", "(", "sample", "[", "\"src\"", "]", ")", "\n", "mt_inputs", "=", "self", ".", "encoder", ".", "prepare_sample", "(", "sample", "[", "\"mt\"", "]", ")", "\n", "\n", "src_inputs", "=", "{", "\"src_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "src_inputs", ".", "items", "(", ")", "}", "\n", "mt_inputs", "=", "{", "\"mt_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "mt_inputs", ".", "items", "(", ")", "}", "\n", "if", "self", ".", "hparams", ".", "feature_size", ">", "0", ":", "\n", "            ", "feats", "=", "[", "]", "\n", "for", "feat", "in", "sample", ":", "\n", "                ", "if", "feat", ".", "startswith", "(", "\"f\"", ")", ":", "\n", "                    ", "feats", ".", "append", "(", "sample", "[", "feat", "]", ")", "\n", "#print(len(feats))", "\n", "", "", "feature_tensor", "=", "torch", ".", "as_tensor", "(", "feats", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "#print(feature_tensor.shape)", "\n", "#print('------------------')", "\n", "features", "=", "{", "\"custom_features\"", ":", "feature_tensor", ".", "T", "}", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "features", "=", "{", "\"custom_features\"", ":", "torch", ".", "Tensor", "(", ")", "}", "\n", "\n", "", "inputs", "=", "{", "**", "src_inputs", ",", "**", "mt_inputs", ",", "**", "features", "}", "\n", "\n", "if", "inference", ":", "\n", "            ", "return", "inputs", "\n", "\n", "", "targets", "=", "{", "\"score\"", ":", "torch", ".", "tensor", "(", "sample", "[", "\"score\"", "]", ",", "dtype", "=", "torch", ".", "float", ")", "}", "\n", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.forward": [[159, 197], ["referenceless.ReferencelessRegression.get_sentence_embedding", "referenceless.ReferencelessRegression.get_sentence_embedding", "torch.abs", "torch.cat", "referenceless.ReferencelessRegression.bottleneck", "torch.cat", "referenceless.ReferencelessRegression.estimator", "referenceless.ReferencelessRegression.bottleneck", "referenceless.ReferencelessRegression.estimator"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.get_sentence_embedding", "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.models.base.CometModel.get_sentence_embedding"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "src_input_ids", ":", "torch", ".", "tensor", ",", "\n", "src_attention_mask", ":", "torch", ".", "tensor", ",", "\n", "mt_input_ids", ":", "torch", ".", "tensor", ",", "\n", "mt_attention_mask", ":", "torch", ".", "tensor", ",", "\n", "custom_features", ":", "torch", ".", "tensor", ",", "\n", "**", "kwargs", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "src_sentemb", "=", "self", ".", "get_sentence_embedding", "(", "src_input_ids", ",", "src_attention_mask", ")", "\n", "mt_sentemb", "=", "self", ".", "get_sentence_embedding", "(", "mt_input_ids", ",", "mt_attention_mask", ")", "\n", "\n", "diff_src", "=", "torch", ".", "abs", "(", "mt_sentemb", "-", "src_sentemb", ")", "\n", "prod_src", "=", "mt_sentemb", "*", "src_sentemb", "\n", "\n", "embedded_sequences", "=", "torch", ".", "cat", "(", "\n", "(", "mt_sentemb", ",", "src_sentemb", ",", "prod_src", ",", "diff_src", ")", ",", "dim", "=", "1", "\n", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "feature_size", ">", "0", ":", "\n", "#custom_features=torch.unsqueeze(custom_features, 1)", "\n", "#print(embedded_sequences.shape)", "\n", "#print(f1.shape)", "\n", "\n", "            ", "bottleneck", "=", "self", ".", "bottleneck", "(", "embedded_sequences", ")", "\n", "#print(bottleneck.shape)", "\n", "#print(custom_features.shape)", "\n", "seq_feats", "=", "torch", ".", "cat", "(", "(", "bottleneck", ",", "custom_features", ")", ",", "dim", "=", "1", ")", "\n", "#print(seq_feats.shape)", "\n", "\n", "score", "=", "self", ".", "estimator", "(", "seq_feats", ")", "\n", "", "else", ":", "\n", "            ", "bottleneck", "=", "self", ".", "bottleneck", "(", "embedded_sequences", ")", "\n", "score", "=", "self", ".", "estimator", "(", "bottleneck", ")", "\n", "", "if", "self", ".", "hparams", ".", "loss", "in", "[", "\"var\"", ",", "\"hts\"", "]", ":", "\n", "            ", "return", "{", "\"score\"", ":", "score", "[", ":", ",", "0", "]", ",", "\"variance\"", ":", "score", "[", ":", ",", "1", "]", "}", "\n", "\n", "", "return", "{", "\"score\"", ":", "score", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.read_csv": [[198, 222], ["pandas.read_csv", "range", "df[].astype", "df[].astype", "df[].astype", "pandas.read_csv.to_dict", "print", "columns.append", "feats.append", "df[].astype", "str", "str"], "methods", ["home.repos.pwc.inspect_result.deep-spin_uncertainties_mt_eval.regression.referenceless.ReferencelessRegression.read_csv"], ["", "def", "read_csv", "(", "self", ",", "path", ":", "str", ")", "->", "List", "[", "dict", "]", ":", "\n", "        ", "\"\"\"Reads a comma separated value file.\n\n        :param path: path to a csv file.\n\n        :return: List of records as dictionaries\n        \"\"\"", "\n", "feats", "=", "[", "]", "\n", "df", "=", "pd", ".", "read_csv", "(", "path", ")", "\n", "flen", "=", "self", ".", "hparams", ".", "feature_size", "\n", "columns", "=", "[", "\"src\"", ",", "\"mt\"", ",", "\"score\"", "]", "\n", "for", "i", "in", "range", "(", "flen", ")", ":", "\n", "            ", "fstring", "=", "'f'", "+", "str", "(", "i", "+", "1", ")", "\n", "print", "(", "'feature added: '", "+", "str", "(", "fstring", ")", ")", "\n", "columns", ".", "append", "(", "fstring", ")", "\n", "feats", ".", "append", "(", "fstring", ")", "\n", "", "df", "=", "df", "[", "columns", "]", "\n", "\n", "df", "[", "\"src\"", "]", "=", "df", "[", "\"src\"", "]", ".", "astype", "(", "str", ")", "\n", "df", "[", "\"mt\"", "]", "=", "df", "[", "\"mt\"", "]", ".", "astype", "(", "str", ")", "\n", "df", "[", "\"score\"", "]", "=", "df", "[", "\"score\"", "]", ".", "astype", "(", "float", ")", "\n", "for", "feat", "in", "feats", ":", "\n", "            ", "df", "[", "feat", "]", "=", "df", "[", "feat", "]", ".", "astype", "(", "float", ")", "\n", "", "return", "df", ".", "to_dict", "(", "\"records\"", ")", "\n", "", "", ""]]}