{"home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.argparser.parse_args": [[3, 63], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.argparser.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Training for calibration'", ")", "\n", "\n", "# Datasets", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--dataset'", ",", "default", "=", "'cifar10'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'-j'", ",", "'--workers'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of data loading workers (default: 4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "\n", "help", "=", "'seed to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--imbalance'", ",", "default", "=", "0.02", ",", "type", "=", "float", ",", "\n", "help", "=", "'Imbalance to use in long tailed CIFAR10/100'", ")", "\n", "parser", ".", "add_argument", "(", "'--delta'", ",", "default", "=", "0.25", ",", "type", "=", "float", ",", "\n", "help", "=", "'delta to use in Huber Loss in MDCA'", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "150", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of total epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--start-epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'manual epoch number (useful on restarts)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--train-batch-size'", ",", "default", "=", "128", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'train batchsize'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'test batchsize'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "'--learning-rate'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'LR'", ",", "help", "=", "'initial learning rate'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "default", "=", "5.0", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'ALPHA'", ",", "help", "=", "'alpha to train Label Smoothing with'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "default", "=", "10", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'BETA'", ",", "help", "=", "'beta to train DCA/MDCA with'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'GAMMA'", ",", "help", "=", "'gamma to train Focal Loss with'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--drop'", ",", "'--dropout'", ",", "default", "=", "0", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'Dropout'", ",", "help", "=", "'Dropout ratio'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--schedule-steps'", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "]", ",", "\n", "help", "=", "'Decrease learning rate at these epochs.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-decay-factor'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'LR is multiplied by this on schedule.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "5e-4", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'W'", ",", "help", "=", "'weight decay (default: 1e-4)'", ")", "\n", "# Checkpoints", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--checkpoint'", ",", "default", "=", "'checkpoint'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to save checkpoint (default: checkpoint)'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to latest checkpoint (default: none)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--loss'", ",", "default", "=", "'cross_entropy'", ",", "type", "=", "str", ",", "metavar", "=", "'LNAME'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'resnet20'", ",", "type", "=", "str", ",", "metavar", "=", "'MNAME'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "default", "=", "'sgd'", ",", "type", "=", "str", ",", "metavar", "=", "'ONAME'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--prefix'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PRNAME'", ")", "\n", "parser", ".", "add_argument", "(", "'--regularizer'", ",", "default", "=", "'l2'", ",", "type", "=", "str", ",", "metavar", "=", "'RNAME'", ")", "\n", "parser", ".", "add_argument", "(", "'--patience'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.earlystopper.EarlyStopping.__init__": [[6, 26], ["float"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "patience", "=", "7", ",", "verbose", "=", "False", ",", "delta", "=", "1e-4", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            patience (int): How long to wait after last time validation loss improved.\n                            Default: 7\n            verbose (bool): If True, prints a message for each validation loss improvement. \n                            Default: False\n            delta (float): Minimum change in the monitored quantity to qualify as an improvement.\n                            Default: 0\n            path (str): Path for the checkpoint to be saved to.\n                            Default: 'checkpoint.pt'\n            trace_func (function): trace print function.\n                            Default: print            \n        \"\"\"", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "best_score", "=", "None", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "val_loss_min", "=", "float", "(", "'inf'", ")", "\n", "self", ".", "delta", "=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.earlystopper.EarlyStopping.step": [[27, 43], ["print"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "val_loss", ")", ":", "\n", "\n", "        ", "score", "=", "-", "val_loss", "\n", "\n", "if", "self", ".", "best_score", "is", "None", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "", "elif", "score", "<", "self", ".", "best_score", "+", "self", ".", "delta", ":", "\n", "            ", "self", ".", "counter", "+=", "1", "\n", "if", "self", ".", "counter", ">=", "self", ".", "patience", ":", "\n", "                ", "print", "(", "\"Early stopping patience exceeded!!\"", ")", "\n", "self", ".", "early_stop", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "counter", "=", "0", "\n", "\n", "", "return", "self", ".", "early_stop", "", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.eval.accuracy": [[3, 19], ["max", "min", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "maxk", "=", "min", "(", "output", ".", "shape", "[", "-", "1", "]", ",", "maxk", ")", "\n", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.__init__": [[22, 44], ["open", "logger.Logger.file.readline", "logger.Logger.rstrip().split", "enumerate", "logger.Logger.file.close", "open", "open", "numbers.rstrip().split.rstrip().split.rstrip().split", "range", "logger.Logger.rstrip", "len", "logger.Logger.numbers[].append", "numbers.rstrip().split.rstrip().split.rstrip"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.close", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append"], ["def", "__init__", "(", "self", ",", "fpath", ",", "title", "=", "None", ",", "resume", "=", "False", ")", ":", "\n", "        ", "self", ".", "file", "=", "None", "\n", "self", ".", "resume", "=", "resume", "\n", "self", ".", "title", "=", "''", "if", "title", "==", "None", "else", "title", "\n", "self", ".", "path_name", "=", "fpath", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "if", "resume", ":", "\n", "                ", "self", ".", "file", "=", "open", "(", "fpath", ",", "'r'", ")", "\n", "name", "=", "self", ".", "file", ".", "readline", "(", ")", "\n", "self", ".", "names", "=", "name", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "=", "{", "}", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "                    ", "self", ".", "numbers", "[", "name", "]", "=", "[", "]", "\n", "\n", "", "for", "numbers", "in", "self", ".", "file", ":", "\n", "                    ", "numbers", "=", "numbers", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "numbers", ")", ")", ":", "\n", "                        ", "self", ".", "numbers", "[", "self", ".", "names", "[", "i", "]", "]", ".", "append", "(", "numbers", "[", "i", "]", ")", "\n", "", "", "self", ".", "file", ".", "close", "(", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'a'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.set_names": [[45, 57], ["enumerate", "logger.Logger.file.write", "logger.Logger.file.flush", "logger.Logger.file.write", "logger.Logger.file.write"], "methods", ["None"], ["", "", "", "def", "set_names", "(", "self", ",", "names", ")", ":", "\n", "        ", "if", "self", ".", "resume", ":", "\n", "            ", "return", "\n", "# initialize numbers as empty list", "\n", "", "self", ".", "numbers", "=", "{", "}", "\n", "self", ".", "names", "=", "names", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "name", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "[", "name", "]", "=", "[", "]", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append": [[59, 70], ["enumerate", "logger.Logger.file.write", "logger.Logger.file.flush", "len", "len", "logger.Logger.file.write", "logger.Logger.numbers[].append", "logger.Logger.file.write", "logger.Logger.file.write", "type", "type", "type", "type"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append"], ["", "def", "append", "(", "self", ",", "numbers", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "names", ")", "==", "len", "(", "numbers", ")", ",", "'Numbers do not match names'", "\n", "for", "index", ",", "num", "in", "enumerate", "(", "numbers", ")", ":", "\n", "            ", "if", "type", "(", "num", ")", "==", "type", "(", "1", ")", "or", "type", "(", "num", ")", "==", "type", "(", "1.0", ")", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "\"{0:.6f}\"", ".", "format", "(", "num", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "\"{}\"", ".", "format", "(", "num", ")", ")", "\n", "", "self", ".", "file", ".", "write", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "[", "self", ".", "names", "[", "index", "]", "]", ".", "append", "(", "num", ")", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.plot": [[71, 80], ["enumerate", "matplotlib.legend", "matplotlib.grid", "matplotlib.savefig", "numpy.arange", "matplotlib.plot", "len", "numpy.asarray", "str"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.savefig", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.LoggerMonitor.plot"], ["", "def", "plot", "(", "self", ",", "names", "=", "None", ")", ":", "\n", "        ", "names", "=", "self", ".", "names", "if", "names", "==", "None", "else", "names", "\n", "numbers", "=", "self", ".", "numbers", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "            ", "x", "=", "np", ".", "arange", "(", "len", "(", "numbers", "[", "name", "]", ")", ")", "\n", "plt", ".", "plot", "(", "x", ",", "np", ".", "asarray", "(", "numbers", "[", "name", "]", ")", ")", "\n", "", "plt", ".", "legend", "(", "[", "self", ".", "title", "+", "'('", "+", "name", "+", "')'", "for", "name", "in", "names", "]", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "savefig", "(", "str", "(", "self", ".", "path_name", ")", "+", "\"_plot.png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.close": [[81, 84], ["logger.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.LoggerMonitor.__init__": [[87, 93], ["paths.items", "Logger.Logger", "Logger.LoggerMonitor.loggers.append"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append"], ["def", "__init__", "(", "self", ",", "paths", ")", ":", "\n", "        ", "'''paths is a distionary with {name:filepath} pair'''", "\n", "self", ".", "loggers", "=", "[", "]", "\n", "for", "title", ",", "path", "in", "paths", ".", "items", "(", ")", ":", "\n", "            ", "logger", "=", "Logger", "(", "path", ",", "title", "=", "title", ",", "resume", "=", "True", ")", "\n", "self", ".", "loggers", ".", "append", "(", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.LoggerMonitor.plot": [[94, 102], ["matplotlib.figure", "matplotlib.subplot", "matplotlib.legend", "matplotlib.grid", "logger.plot_overlap"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.plot_overlap"], ["", "", "def", "plot", "(", "self", ",", "names", "=", "None", ")", ":", "\n", "        ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "subplot", "(", "121", ")", "\n", "legend_text", "=", "[", "]", "\n", "for", "logger", "in", "self", ".", "loggers", ":", "\n", "            ", "legend_text", "+=", "plot_overlap", "(", "logger", ",", "names", ")", "\n", "", "plt", ".", "legend", "(", "legend_text", ",", "bbox_to_anchor", "=", "(", "1.05", ",", "1", ")", ",", "loc", "=", "2", ",", "borderaxespad", "=", "0.", ")", "\n", "plt", ".", "grid", "(", "True", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.savefig": [[8, 11], ["matplotlib.savefig"], "function", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.savefig"], ["def", "savefig", "(", "fname", ",", "dpi", "=", "None", ")", ":", "\n", "    ", "dpi", "=", "150", "if", "dpi", "==", "None", "else", "dpi", "\n", "plt", ".", "savefig", "(", "fname", ",", "dpi", "=", "dpi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.plot_overlap": [[12, 19], ["enumerate", "numpy.arange", "matplotlib.plot", "len", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.LoggerMonitor.plot"], ["", "def", "plot_overlap", "(", "logger", ",", "names", "=", "None", ")", ":", "\n", "    ", "names", "=", "logger", ".", "names", "if", "names", "==", "None", "else", "names", "\n", "numbers", "=", "logger", ".", "numbers", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "        ", "x", "=", "np", ".", "arange", "(", "len", "(", "numbers", "[", "name", "]", ")", ")", "\n", "plt", ".", "plot", "(", "x", ",", "np", ".", "asarray", "(", "numbers", "[", "name", "]", ")", ")", "\n", "", "return", "[", "logger", ".", "title", "+", "'('", "+", "name", "+", "')'", "for", "name", "in", "names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.misc.AverageMeter.__init__": [[63, 65], ["misc.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.misc.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.misc.AverageMeter.reset": [[66, 71], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.misc.AverageMeter.update": [[72, 77], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.misc.get_mean_and_std": [[19, 33], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "inputs[].mean", "inputs[].std"], "function", ["None"], ["def", "get_mean_and_std", "(", "dataset", ")", ":", "\n", "    ", "'''Compute the mean and std value of dataset.'''", "\n", "dataloader", "=", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "mean", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "std", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "print", "(", "'==> Computing mean and std..'", ")", "\n", "for", "inputs", ",", "targets", "in", "dataloader", ":", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "mean", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "\n", "std", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "std", "(", ")", "\n", "", "", "mean", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "std", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.misc.init_params": [[34, 48], ["net.modules", "isinstance", "torch.kaiming_normal", "isinstance", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.constant"], "function", ["None"], ["", "def", "init_params", "(", "net", ")", ":", "\n", "    ", "'''Init layer parameters.'''", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "init", ".", "normal", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.misc.mkdir_p": [[49, 58], ["os.makedirs", "os.path.isdir"], "function", ["None"], ["", "", "", "", "def", "mkdir_p", "(", "path", ")", ":", "\n", "    ", "'''make dir if not exist'''", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "        ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.__init__.get_lr": [[11, 14], ["None"], "function", ["None"], ["def", "get_lr", "(", "optimizer", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "return", "param_group", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.__init__.save_checkpoint": [[15, 20], ["os.path.join", "torch.save", "shutil.copyfile", "os.path.join"], "function", ["None"], ["", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "checkpoint", "=", "'checkpoint'", ",", "filename", "=", "'checkpoint.pth'", ")", ":", "\n", "    ", "filepath", "=", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filepath", ",", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "f\"model_best.pth\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.__init__.create_save_path": [[21, 43], ["None"], "function", ["None"], ["", "", "def", "create_save_path", "(", "args", ")", ":", "\n", "\n", "    ", "ans_str", "=", "f\"_{args.model}_{args.loss}\"", "\n", "\n", "if", "args", ".", "loss", "==", "\"FLSD\"", ":", "\n", "        ", "ans_str", "+=", "f\"_gamma={args.gamma}\"", "\n", "return", "ans_str", "\n", "\n", "", "if", "\"focal_loss\"", "in", "args", ".", "loss", "or", "\"FL\"", "in", "args", ".", "loss", ":", "\n", "        ", "ans_str", "+=", "f\"_gamma={args.gamma}\"", "\n", "\n", "", "if", "\"LS\"", "in", "args", ".", "loss", ":", "\n", "        ", "ans_str", "+=", "f\"_alpha={args.alpha}\"", "\n", "\n", "", "if", "\"MDCA\"", "in", "args", ".", "loss", ":", "\n", "        ", "ans_str", "+=", "f\"_beta={args.beta}\"", "\n", "return", "ans_str", "\n", "\n", "", "if", "\"DCA\"", "in", "args", ".", "loss", "or", "\"MMCE\"", "in", "args", ".", "loss", ":", "\n", "        ", "ans_str", "+=", "f\"_beta={args.beta}\"", "\n", "\n", "", "return", "ans_str", "\n", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.cifar100.get_train_valid_test_loader": [[19, 40], ["torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "list", "random.seed", "random.shuffle", "int", "torch.utils.data.SubsetRandomSampler", "torch.utils.data.SubsetRandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "range", "len", "len"], "function", ["None"], ["def", "get_train_valid_test_loader", "(", "args", ")", ":", "\n", "    ", "train_set", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "val_set", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "\n", "# create a val set from training set", "\n", "idxs", "=", "list", "(", "range", "(", "len", "(", "train_set", ")", ")", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "shuffle", "(", "idxs", ")", "\n", "split", "=", "int", "(", "0.1", "*", "len", "(", "idxs", ")", ")", "\n", "train_idxs", ",", "valid_idxs", "=", "idxs", "[", "split", ":", "]", ",", "idxs", "[", ":", "split", "]", "\n", "\n", "train_sampler", "=", "data", ".", "SubsetRandomSampler", "(", "train_idxs", ")", "\n", "val_sampler", "=", "data", ".", "SubsetRandomSampler", "(", "valid_idxs", ")", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "train_set", ",", "batch_size", "=", "args", ".", "train_batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "sampler", "=", "train_sampler", ")", "\n", "val_loader", "=", "data", ".", "DataLoader", "(", "val_set", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "sampler", "=", "val_sampler", ",", "drop_last", "=", "False", ")", "\n", "\n", "test_set", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "data", ".", "DataLoader", "(", "test_set", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.cifar100.get_datasets": [[41, 45], ["torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100"], "function", ["None"], ["", "def", "get_datasets", "(", "args", ")", ":", "\n", "    ", "trainset", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "None", ")", "\n", "testset", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "None", ")", "\n", "return", "trainset", ",", "testset", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.cifar100.get_transforms": [[46, 48], ["None"], "function", ["None"], ["", "def", "get_transforms", "(", ")", ":", "\n", "    ", "return", "transform_train", ",", "transform_test", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.pacs.get_train_valid_test_loader": [[26, 35], ["torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torch.DataLoader", "torch.DataLoader"], "function", ["None"], ["def", "get_train_valid_test_loader", "(", "args", ",", "target_type", "=", "\"art\"", ")", ":", "\n", "# Prepare Pytorch train/test Datasets", "\n", "    ", "train_set", "=", "datasets", ".", "ImageFolder", "(", "path_dict", "[", "\"photo\"", "]", ",", "transform", "=", "transf", ")", "\n", "test_set", "=", "datasets", ".", "ImageFolder", "(", "path_dict", "[", "target_type", "]", ",", "transform", "=", "transf", ")", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "train_set", ",", "batch_size", "=", "args", ".", "train_batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "shuffle", "=", "True", ")", "\n", "test_loader", "=", "data", ".", "DataLoader", "(", "test_set", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.pacs.get_datasets": [[36, 40], ["torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder"], "function", ["None"], ["", "def", "get_datasets", "(", "args", ",", "target_type", "=", "\"art\"", ")", ":", "\n", "    ", "train_set", "=", "datasets", ".", "ImageFolder", "(", "path_dict", "[", "\"photo\"", "]", ")", "\n", "test_set", "=", "datasets", ".", "ImageFolder", "(", "path_dict", "[", "target_type", "]", ")", "\n", "return", "train_set", ",", "test_set", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.pacs.get_transforms": [[41, 43], ["None"], "function", ["None"], ["", "def", "get_transforms", "(", ")", ":", "\n", "    ", "return", "transf", ",", "transf", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imbalanced_cifar.IMBALANCECIFAR10.__init__": [[22, 37], ["super().__init__", "print", "imbalanced_cifar.IMBALANCECIFAR10.get_img_num_per_cls", "imbalanced_cifar.IMBALANCECIFAR10.gen_imbalanced_data", "print", "len"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imbalanced_cifar.IMBALANCECIFAR10.get_img_num_per_cls", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imbalanced_cifar.IMBALANCECIFAR10.gen_imbalanced_data"], ["def", "__init__", "(", "self", ",", "phase", "=", "\"train\"", ",", "imbalance_ratio", "=", "10", ",", "root", "=", "'data'", ",", "imb_type", "=", "'exp'", ",", "transform", "=", "None", ")", ":", "\n", "        ", "train", "=", "True", "if", "phase", "==", "\"train\"", "else", "False", "\n", "super", "(", "IMBALANCECIFAR10", ",", "self", ")", ".", "__init__", "(", "root", ",", "train", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "True", ")", "\n", "self", ".", "train", "=", "train", "\n", "if", "self", ".", "train", ":", "\n", "            ", "img_num_list", "=", "self", ".", "get_img_num_per_cls", "(", "self", ".", "cls_num", ",", "imb_type", ",", "imbalance_ratio", ")", "\n", "self", ".", "gen_imbalanced_data", "(", "img_num_list", ")", "\n", "print", "(", "img_num_list", ")", "\n", "\n", "", "self", ".", "labels", "=", "self", ".", "targets", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "# import pdb; pdb.set_trace()", "\n", "\n", "print", "(", "\"{} Mode: Contain {} images\"", ".", "format", "(", "phase", ",", "len", "(", "self", ".", "data", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imbalanced_cifar.IMBALANCECIFAR10._get_class_dict": [[38, 46], ["dict", "enumerate", "imbalanced_cifar.IMBALANCECIFAR10.get_annotations", "class_dict[].append"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imbalanced_cifar.IMBALANCECIFAR10.get_annotations", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append"], ["", "def", "_get_class_dict", "(", "self", ")", ":", "\n", "        ", "class_dict", "=", "dict", "(", ")", "\n", "for", "i", ",", "anno", "in", "enumerate", "(", "self", ".", "get_annotations", "(", ")", ")", ":", "\n", "            ", "cat_id", "=", "anno", "[", "\"category_id\"", "]", "\n", "if", "not", "cat_id", "in", "class_dict", ":", "\n", "                ", "class_dict", "[", "cat_id", "]", "=", "[", "]", "\n", "", "class_dict", "[", "cat_id", "]", ".", "append", "(", "i", ")", "\n", "", "return", "class_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imbalanced_cifar.IMBALANCECIFAR10.get_img_num_per_cls": [[48, 63], ["len", "range", "img_num_per_cls.append", "range", "range", "img_num_per_cls.extend", "int", "img_num_per_cls.append", "img_num_per_cls.append", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append"], ["", "def", "get_img_num_per_cls", "(", "self", ",", "cls_num", ",", "imb_type", ",", "imb_factor", ")", ":", "\n", "        ", "img_max", "=", "len", "(", "self", ".", "data", ")", "/", "cls_num", "\n", "img_num_per_cls", "=", "[", "]", "\n", "if", "imb_type", "==", "'exp'", ":", "\n", "            ", "for", "cls_idx", "in", "range", "(", "cls_num", ")", ":", "\n", "                ", "num", "=", "img_max", "*", "(", "imb_factor", "**", "(", "cls_idx", "/", "(", "cls_num", "-", "1.0", ")", ")", ")", "\n", "img_num_per_cls", ".", "append", "(", "int", "(", "num", ")", ")", "\n", "", "", "elif", "imb_type", "==", "'step'", ":", "\n", "            ", "for", "cls_idx", "in", "range", "(", "cls_num", "//", "2", ")", ":", "\n", "                ", "img_num_per_cls", ".", "append", "(", "int", "(", "img_max", ")", ")", "\n", "", "for", "cls_idx", "in", "range", "(", "cls_num", "//", "2", ")", ":", "\n", "                ", "img_num_per_cls", ".", "append", "(", "int", "(", "img_max", "*", "imb_factor", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "img_num_per_cls", ".", "extend", "(", "[", "int", "(", "img_max", ")", "]", "*", "cls_num", ")", "\n", "", "return", "img_num_per_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imbalanced_cifar.IMBALANCECIFAR10.gen_imbalanced_data": [[64, 81], ["numpy.array", "numpy.unique", "dict", "zip", "numpy.vstack", "numpy.random.shuffle", "numpy.vstack.append", "new_targets.extend", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append"], ["", "def", "gen_imbalanced_data", "(", "self", ",", "img_num_per_cls", ")", ":", "\n", "        ", "new_data", "=", "[", "]", "\n", "new_targets", "=", "[", "]", "\n", "targets_np", "=", "np", ".", "array", "(", "self", ".", "targets", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "classes", "=", "np", ".", "unique", "(", "targets_np", ")", "\n", "\n", "self", ".", "num_per_cls_dict", "=", "dict", "(", ")", "\n", "for", "the_class", ",", "the_img_num", "in", "zip", "(", "classes", ",", "img_num_per_cls", ")", ":", "\n", "            ", "self", ".", "num_per_cls_dict", "[", "the_class", "]", "=", "the_img_num", "\n", "idx", "=", "np", ".", "where", "(", "targets_np", "==", "the_class", ")", "[", "0", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "selec_idx", "=", "idx", "[", ":", "the_img_num", "]", "\n", "new_data", ".", "append", "(", "self", ".", "data", "[", "selec_idx", ",", "...", "]", ")", "\n", "new_targets", ".", "extend", "(", "[", "the_class", ",", "]", "*", "the_img_num", ")", "\n", "", "new_data", "=", "np", ".", "vstack", "(", "new_data", ")", "\n", "self", ".", "data", "=", "new_data", "\n", "self", ".", "targets", "=", "new_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imbalanced_cifar.IMBALANCECIFAR10.__getitem__": [[82, 96], ["PIL.Image.fromarray", "imbalanced_cifar.IMBALANCECIFAR10.transform", "imbalanced_cifar.IMBALANCECIFAR10.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imbalanced_cifar.IMBALANCECIFAR10.__len__": [[97, 99], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imbalanced_cifar.IMBALANCECIFAR10.get_num_classes": [[100, 102], ["None"], "methods", ["None"], ["", "def", "get_num_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cls_num", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imbalanced_cifar.IMBALANCECIFAR10.get_annotations": [[103, 108], ["annos.append", "int"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append"], ["", "def", "get_annotations", "(", "self", ")", ":", "\n", "        ", "annos", "=", "[", "]", "\n", "for", "label", "in", "self", ".", "labels", ":", "\n", "            ", "annos", ".", "append", "(", "{", "'category_id'", ":", "int", "(", "label", ")", "}", ")", "\n", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imbalanced_cifar.IMBALANCECIFAR10.get_cls_num_list": [[109, 114], ["range", "cls_num_list.append"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append"], ["", "def", "get_cls_num_list", "(", "self", ")", ":", "\n", "        ", "cls_num_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "cls_num", ")", ":", "\n", "            ", "cls_num_list", ".", "append", "(", "self", ".", "num_per_cls_dict", "[", "i", "]", ")", "\n", "", "return", "cls_num_list", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imbalanced_cifar.get_train_valid_test_loader": [[115, 135], ["imbalanced_cifar.IMBALANCECIFAR10", "torch.utils.data.DataLoader", "imbalanced_cifar.IMBALANCECIFAR10", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "get_train_valid_test_loader", "(", "args", ")", ":", "\n", "    ", "train_set", "=", "IMBALANCECIFAR10", "(", "phase", "=", "'train'", ",", "imbalance_ratio", "=", "args", ".", "imbalance", ",", "root", "=", "'./data'", ",", "transform", "=", "transform_train", ")", "\n", "\n", "# create a val set from training set", "\n", "# idxs = list(range(len(train_set)))", "\n", "# random.seed(args.seed)", "\n", "# random.shuffle(idxs)", "\n", "# split = int(0.1 * len(idxs))", "\n", "# train_idxs, valid_idxs = idxs[split:], idxs[:split]", "\n", "\n", "# train_sampler = data.SubsetRandomSampler(idxs)", "\n", "# val_sampler = data.SubsetRandomSampler(valid_idxs)", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "train_set", ",", "batch_size", "=", "args", ".", "train_batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "shuffle", "=", "True", ")", "\n", "# val_loader = data.DataLoader(train_set, batch_size=args.test_batch_size, num_workers=args.workers, sampler=val_sampler, drop_last=False)", "\n", "\n", "test_set", "=", "IMBALANCECIFAR10", "(", "phase", "=", "'test'", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "data", ".", "DataLoader", "(", "test_set", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "train_loader", ",", "None", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imbalanced_cifar.get_datasets": [[136, 140], ["imbalanced_cifar.IMBALANCECIFAR10", "imbalanced_cifar.IMBALANCECIFAR10"], "function", ["None"], ["", "def", "get_datasets", "(", "args", ")", ":", "\n", "    ", "trainset", "=", "IMBALANCECIFAR10", "(", "phase", "=", "'train'", ",", "root", "=", "'./data'", ",", "transform", "=", "None", ")", "\n", "testset", "=", "IMBALANCECIFAR10", "(", "phase", "=", "'test'", ",", "root", "=", "'./data'", ",", "transform", "=", "None", ")", "\n", "return", "trainset", ",", "testset", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imbalanced_cifar.get_transforms": [[141, 143], ["None"], "function", ["None"], ["", "def", "get_transforms", "(", ")", ":", "\n", "    ", "return", "transform_train", ",", "transform_test", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.mnist.MyRotationTransform.__init__": [[57, 59], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "angle", "=", "0", ")", ":", "\n", "        ", "self", ".", "angle", "=", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.mnist.MyRotationTransform.__call__": [[60, 62], ["torchvision.rotate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "TF", ".", "rotate", "(", "x", ",", "self", ".", "angle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.mnist.get_train_valid_test_loader": [[22, 43], ["torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "list", "random.seed", "random.shuffle", "int", "torch.utils.data.SubsetRandomSampler", "torch.utils.data.SubsetRandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.MNIST", "torch.utils.data.DataLoader", "range", "len", "len"], "function", ["None"], ["def", "get_train_valid_test_loader", "(", "args", ")", ":", "\n", "    ", "train_set", "=", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "val_set", "=", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "\n", "# create a val set from training set", "\n", "idxs", "=", "list", "(", "range", "(", "len", "(", "train_set", ")", ")", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "shuffle", "(", "idxs", ")", "\n", "split", "=", "int", "(", "0.1", "*", "len", "(", "idxs", ")", ")", "\n", "train_idxs", ",", "valid_idxs", "=", "idxs", "[", "split", ":", "]", ",", "idxs", "[", ":", "split", "]", "\n", "\n", "train_sampler", "=", "data", ".", "SubsetRandomSampler", "(", "train_idxs", ")", "\n", "val_sampler", "=", "data", ".", "SubsetRandomSampler", "(", "valid_idxs", ")", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "train_set", ",", "batch_size", "=", "args", ".", "train_batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "sampler", "=", "train_sampler", ")", "\n", "val_loader", "=", "data", ".", "DataLoader", "(", "val_set", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "sampler", "=", "val_sampler", ",", "drop_last", "=", "False", ")", "\n", "\n", "test_set", "=", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "data", ".", "DataLoader", "(", "test_set", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.mnist.get_datasets": [[44, 48], ["torchvision.datasets.MNIST", "torchvision.datasets.MNIST"], "function", ["None"], ["", "def", "get_datasets", "(", "args", ")", ":", "\n", "    ", "trainset", "=", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "None", ")", "\n", "testset", "=", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "None", ")", "\n", "return", "trainset", ",", "testset", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.mnist.get_transforms": [[49, 51], ["None"], "function", ["None"], ["", "def", "get_transforms", "(", ")", ":", "\n", "    ", "return", "transform_train", ",", "transform_test", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.mnist.get_rotated_set": [[63, 73], ["torchvision.transforms.Compose", "torchvision.datasets.MNIST", "torch.utils.data.DataLoader", "mnist.MyRotationTransform", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "", "def", "get_rotated_set", "(", "args", ",", "angle", "=", "0", ")", ":", "\n", "    ", "transform_rotate", "=", "transforms", ".", "Compose", "(", "[", "\n", "MyRotationTransform", "(", "angle", "=", "angle", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", "\n", "test_set", "=", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_rotate", ")", "\n", "test_loader", "=", "data", ".", "DataLoader", "(", "test_set", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "test_loader", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imagenet.TinyImageNet.__init__": [[45, 75], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "sorted", "glob.iglob", "open", "sorted", "imagenet.TinyImageNet.label_text_to_number.items", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "enumerate", "range", "imagenet.TinyImageNet.read_image", "text.strip", "open", "fp.readlines", "fp.readlines", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "line.split"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imagenet.TinyImageNet.read_image"], ["def", "__init__", "(", "self", ",", "root", "=", "'data/tiny-imagenet-200'", ",", "split", "=", "'train'", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "in_memory", "=", "False", ")", ":", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "in_memory", "=", "in_memory", "\n", "self", ".", "split_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "split", ")", "\n", "self", ".", "image_paths", "=", "sorted", "(", "glob", ".", "iglob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "'**'", ",", "'*.%s'", "%", "EXTENSION", ")", ",", "recursive", "=", "True", ")", ")", "\n", "self", ".", "labels", "=", "{", "}", "# fname - label number mapping", "\n", "self", ".", "images", "=", "[", "]", "# used for in-memory processing", "\n", "\n", "# build class label - number mapping", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "CLASS_LIST_FILE", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "self", ".", "label_texts", "=", "sorted", "(", "[", "text", ".", "strip", "(", ")", "for", "text", "in", "fp", ".", "readlines", "(", ")", "]", ")", "\n", "", "self", ".", "label_text_to_number", "=", "{", "text", ":", "i", "for", "i", ",", "text", "in", "enumerate", "(", "self", ".", "label_texts", ")", "}", "\n", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "for", "label_text", ",", "i", "in", "self", ".", "label_text_to_number", ".", "items", "(", ")", ":", "\n", "                ", "for", "cnt", "in", "range", "(", "NUM_IMAGES_PER_CLASS", ")", ":", "\n", "                    ", "self", ".", "labels", "[", "'%s_%d.%s'", "%", "(", "label_text", ",", "cnt", ",", "EXTENSION", ")", "]", "=", "i", "\n", "", "", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "VAL_ANNOTATION_FILE", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "                ", "for", "line", "in", "fp", ".", "readlines", "(", ")", ":", "\n", "                    ", "terms", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "file_name", ",", "label_text", "=", "terms", "[", "0", "]", ",", "terms", "[", "1", "]", "\n", "self", ".", "labels", "[", "file_name", "]", "=", "self", ".", "label_text_to_number", "[", "label_text", "]", "\n", "\n", "# read all images into torch tensor in memory to minimize disk IO overhead", "\n", "", "", "", "if", "self", ".", "in_memory", ":", "\n", "            ", "self", ".", "images", "=", "[", "self", ".", "read_image", "(", "path", ")", "for", "path", "in", "self", ".", "image_paths", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imagenet.TinyImageNet.__len__": [[76, 78], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imagenet.TinyImageNet.__getitem__": [[79, 92], ["imagenet.TinyImageNet.read_image", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imagenet.TinyImageNet.read_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "file_path", "=", "self", ".", "image_paths", "[", "index", "]", "\n", "\n", "if", "self", ".", "in_memory", ":", "\n", "            ", "img", "=", "self", ".", "images", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "read_image", "(", "file_path", ")", "\n", "\n", "", "if", "self", ".", "split", "==", "'test'", ":", "\n", "            ", "return", "img", "\n", "", "else", ":", "\n", "# file_name = file_path.split('/')[-1]", "\n", "            ", "return", "img", ",", "self", ".", "labels", "[", "os", ".", "path", ".", "basename", "(", "file_path", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imagenet.TinyImageNet.__repr__": [[93, 104], ["imagenet.TinyImageNet.__len__", "imagenet.TinyImageNet.transform.__repr__().replace", "imagenet.TinyImageNet.target_transform.__repr__().replace", "imagenet.TinyImageNet.transform.__repr__", "imagenet.TinyImageNet.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.mendley.MendleyDataset.__len__", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imagenet.TinyImageNet.__repr__", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imagenet.TinyImageNet.__repr__"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "tmp", "=", "self", ".", "split", "\n", "fmt_str", "+=", "'    Split: {}\\n'", ".", "format", "(", "tmp", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imagenet.TinyImageNet.read_image": [[105, 110], ["PIL.Image.open", "img.convert.convert.convert", "imagenet.TinyImageNet.transform"], "methods", ["None"], ["", "def", "read_image", "(", "self", ",", "path", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "path", ")", "\n", "if", "(", "img", ".", "mode", "==", "'L'", ")", ":", "\n", "            ", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "", "return", "self", ".", "transform", "(", "img", ")", "if", "self", ".", "transform", "else", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imagenet.get_train_valid_test_loader": [[128, 158], ["imagenet.TinyImageNet", "print", "imagenet.TinyImageNet", "list", "random.seed", "random.shuffle", "int", "torch.utils.data.SubsetRandomSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "imagenet.TinyImageNet", "print", "torch.utils.data.DataLoader", "range", "len", "len"], "function", ["None"], ["def", "get_train_valid_test_loader", "(", "args", ")", ":", "\n", "    ", "train_set", "=", "TinyImageNet", "(", "split", "=", "'train'", ",", "\n", "transform", "=", "transform_train", ",", "\n", "in_memory", "=", "False", ")", "\n", "print", "(", "train_set", ")", "\n", "\n", "val_set", "=", "TinyImageNet", "(", "split", "=", "'train'", ",", "\n", "transform", "=", "transform_test", ",", "\n", "in_memory", "=", "False", ")", "\n", "\n", "# create a val set from training set", "\n", "idxs", "=", "list", "(", "range", "(", "len", "(", "train_set", ")", ")", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "shuffle", "(", "idxs", ")", "\n", "split", "=", "int", "(", "0.1", "*", "len", "(", "idxs", ")", ")", "\n", "train_idxs", ",", "valid_idxs", "=", "idxs", "[", "split", ":", "]", ",", "idxs", "[", ":", "split", "]", "\n", "\n", "train_sampler", "=", "data", ".", "SubsetRandomSampler", "(", "train_idxs", ")", "\n", "val_sampler", "=", "data", ".", "SequentialSampler", "(", "valid_idxs", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "args", ".", "train_batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "sampler", "=", "train_sampler", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_set", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "False", ",", "sampler", "=", "val_sampler", ")", "\n", "\n", "test_set", "=", "TinyImageNet", "(", "split", "=", "'val'", ",", "\n", "transform", "=", "transform_test", ",", "\n", "in_memory", "=", "False", ")", "\n", "print", "(", "test_set", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imagenet.get_datasets": [[159, 167], ["imagenet.TinyImageNet", "imagenet.TinyImageNet"], "function", ["None"], ["", "def", "get_datasets", "(", "args", ")", ":", "\n", "    ", "train_set", "=", "TinyImageNet", "(", "split", "=", "'train'", ",", "\n", "transform", "=", "None", ",", "\n", "in_memory", "=", "False", ")", "\n", "test_set", "=", "TinyImageNet", "(", "split", "=", "'val'", ",", "\n", "transform", "=", "None", ",", "\n", "in_memory", "=", "False", ")", "\n", "return", "train_set", ",", "test_set", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.imagenet.get_transforms": [[168, 170], ["None"], "function", ["None"], ["", "def", "get_transforms", "(", ")", ":", "\n", "    ", "return", "transform_train", ",", "transform_test", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.cifar10.get_train_valid_test_loader": [[22, 43], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "list", "random.seed", "random.shuffle", "int", "torch.utils.data.SubsetRandomSampler", "torch.utils.data.SubsetRandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "range", "len", "len"], "function", ["None"], ["def", "get_train_valid_test_loader", "(", "args", ")", ":", "\n", "    ", "train_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "val_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "\n", "# create a val set from training set", "\n", "idxs", "=", "list", "(", "range", "(", "len", "(", "train_set", ")", ")", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "shuffle", "(", "idxs", ")", "\n", "split", "=", "int", "(", "0.1", "*", "len", "(", "idxs", ")", ")", "\n", "train_idxs", ",", "valid_idxs", "=", "idxs", "[", "split", ":", "]", ",", "idxs", "[", ":", "split", "]", "\n", "\n", "train_sampler", "=", "data", ".", "SubsetRandomSampler", "(", "train_idxs", ")", "\n", "val_sampler", "=", "data", ".", "SubsetRandomSampler", "(", "valid_idxs", ")", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "train_set", ",", "batch_size", "=", "args", ".", "train_batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "sampler", "=", "train_sampler", ")", "\n", "val_loader", "=", "data", ".", "DataLoader", "(", "val_set", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "sampler", "=", "val_sampler", ",", "drop_last", "=", "False", ")", "\n", "\n", "test_set", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "False", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "data", ".", "DataLoader", "(", "test_set", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.cifar10.get_datasets": [[44, 48], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10"], "function", ["None"], ["", "def", "get_datasets", "(", "args", ")", ":", "\n", "    ", "trainset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "None", ")", "\n", "testset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "False", ",", "transform", "=", "None", ")", "\n", "return", "trainset", ",", "testset", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.cifar10.get_transforms": [[49, 51], ["None"], "function", ["None"], ["", "def", "get_transforms", "(", ")", ":", "\n", "    ", "return", "transform_train", ",", "transform_test", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.mendley.MendleyDataset.__init__": [[29, 39], ["mendley.read_csv"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.mendley.read_csv"], ["    ", "def", "__init__", "(", "self", ",", "\n", "label_file", ",", "\n", "resize", "=", "True", ",", "\n", "augmentation", "=", "True", ",", "\n", "transforms", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "resize", "=", "resize", "\n", "self", ".", "augmentation", "=", "augmentation", "\n", "self", ".", "files", "=", "read_csv", "(", "label_file", ")", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.mendley.MendleyDataset.__len__": [[40, 42], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.mendley.MendleyDataset.__getitem__": [[43, 92], ["PIL.Image.fromarray", "cv2.imread", "cv2.resize", "numpy.random.randint", "numpy.random.randint", "mendley.MendleyDataset.transforms", "int", "cv2.flip", "cv2.getRotationMatrix2D", "cv2.warpAffine", "cv2.flip", "cv2.getRotationMatrix2D", "cv2.warpAffine", "cv2.flip", "cv2.getRotationMatrix2D", "cv2.warpAffine"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "temp", "=", "self", ".", "files", "[", "idx", "]", "\n", "full_path", "=", "temp", "[", "0", "]", "\n", "label", "=", "temp", "[", "1", "]", "\n", "\n", "im", "=", "cv2", ".", "imread", "(", "full_path", ")", "/", "255.", "\n", "\n", "if", "(", "self", ".", "resize", ")", ":", "\n", "            ", "im", "=", "cv2", ".", "resize", "(", "im", ",", "(", "832", ",", "832", ")", ")", "\n", "\n", "", "if", "(", "self", ".", "augmentation", ")", ":", "\n", "# apply random flip", "\n", "            ", "flip", "=", "np", ".", "random", ".", "randint", "(", "4", ",", "size", "=", "3", ")", "\n", "if", "(", "flip", "[", "0", "]", ")", ":", "\n", "                ", "im", "=", "cv2", ".", "flip", "(", "im", ",", "0", ")", "# flip horizontally", "\n", "", "elif", "(", "flip", "[", "1", "]", ")", ":", "\n", "                ", "im", "=", "cv2", ".", "flip", "(", "im", ",", "1", ")", "# flip vertically", "\n", "", "elif", "(", "flip", "[", "2", "]", ")", ":", "\n", "                ", "im", "=", "cv2", ".", "flip", "(", "im", ",", "-", "1", ")", "# flip both horizontally and vertically", "\n", "\n", "# random rotate", "\n", "", "rotate", "=", "np", ".", "random", ".", "randint", "(", "4", ")", "\n", "(", "h", ",", "w", ")", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "# calculate the center of the image", "\n", "center", "=", "(", "w", "/", "2", ",", "h", "/", "2", ")", "\n", "angle90", "=", "90", "\n", "angle180", "=", "180", "\n", "angle270", "=", "270", "\n", "scale", "=", "1.0", "\n", "\n", "# Perform the counter clockwise rotation holding at the center", "\n", "if", "(", "rotate", "==", "0", ")", ":", "\n", "                ", "M", "=", "cv2", ".", "getRotationMatrix2D", "(", "center", ",", "angle90", ",", "scale", ")", "\n", "im", "=", "cv2", ".", "warpAffine", "(", "im", ",", "M", ",", "(", "h", ",", "w", ")", ")", "\n", "", "elif", "(", "rotate", "==", "1", ")", ":", "\n", "                ", "M", "=", "cv2", ".", "getRotationMatrix2D", "(", "center", ",", "angle180", ",", "scale", ")", "\n", "im", "=", "cv2", ".", "warpAffine", "(", "im", ",", "M", ",", "(", "h", ",", "w", ")", ")", "\n", "", "elif", "(", "rotate", "==", "2", ")", ":", "\n", "                ", "M", "=", "cv2", ".", "getRotationMatrix2D", "(", "center", ",", "angle270", ",", "scale", ")", "\n", "im", "=", "cv2", ".", "warpAffine", "(", "im", ",", "M", ",", "(", "h", ",", "w", ")", ")", "\n", "\n", "# print(im.shape)", "\n", "# print(im)", "\n", "", "", "image", "=", "Image", ".", "fromarray", "(", "(", "im", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "if", "self", ".", "transforms", ":", "\n", "            ", "image", "=", "self", ".", "transforms", "(", "image", ")", "\n", "\n", "", "return", "image", ",", "int", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.mendley.read_csv": [[12, 19], ["open", "csv.reader", "list", "numpy.asarray"], "function", ["None"], ["def", "read_csv", "(", "data_file_path", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "with", "open", "(", "data_file_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "data", "=", "list", "(", "reader", ")", "\n", "data", "=", "np", ".", "asarray", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.mendley.get_train_valid_test_loader": [[94, 115], ["mendley.MendleyDataset", "mendley.MendleyDataset", "list", "random.seed", "random.shuffle", "int", "torch.utils.data.SubsetRandomSampler", "torch.utils.data.SubsetRandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "mendley.MendleyDataset", "torch.utils.data.DataLoader", "range", "len", "len"], "function", ["None"], ["", "", "def", "get_train_valid_test_loader", "(", "args", ")", ":", "\n", "    ", "train_set", "=", "MendleyDataset", "(", "label_file", "=", "\"data/mendley/mendley_train.csv\"", ",", "resize", "=", "True", ",", "augmentation", "=", "True", ",", "transforms", "=", "transform_train", ")", "\n", "val_set", "=", "MendleyDataset", "(", "label_file", "=", "\"data/mendley/mendley_train.csv\"", ",", "resize", "=", "True", ",", "augmentation", "=", "True", ",", "transforms", "=", "transform_test", ")", "\n", "\n", "# create a val set from training set", "\n", "idxs", "=", "list", "(", "range", "(", "len", "(", "train_set", ")", ")", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "shuffle", "(", "idxs", ")", "\n", "split", "=", "int", "(", "0.1", "*", "len", "(", "idxs", ")", ")", "\n", "train_idxs", ",", "valid_idxs", "=", "idxs", "[", "split", ":", "]", ",", "idxs", "[", ":", "split", "]", "\n", "\n", "train_sampler", "=", "data", ".", "SubsetRandomSampler", "(", "train_idxs", ")", "\n", "val_sampler", "=", "data", ".", "SubsetRandomSampler", "(", "valid_idxs", ")", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "train_set", ",", "batch_size", "=", "args", ".", "train_batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "sampler", "=", "train_sampler", ")", "\n", "val_loader", "=", "data", ".", "DataLoader", "(", "val_set", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "sampler", "=", "val_sampler", ",", "drop_last", "=", "False", ")", "\n", "\n", "test_set", "=", "MendleyDataset", "(", "label_file", "=", "\"data/mendley/mendley_test.csv\"", ",", "resize", "=", "True", ",", "augmentation", "=", "False", ",", "transforms", "=", "transform_test", ")", "\n", "test_loader", "=", "data", ".", "DataLoader", "(", "test_set", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.mendley.get_datasets": [[116, 120], ["mendley.MendleyDataset", "mendley.MendleyDataset"], "function", ["None"], ["", "def", "get_datasets", "(", "args", ")", ":", "\n", "    ", "trainset", "=", "MendleyDataset", "(", "label_file", "=", "\"data/mendley/mendley_train.csv\"", ",", "resize", "=", "True", ",", "augmentation", "=", "False", ")", "\n", "testset", "=", "MendleyDataset", "(", "label_file", "=", "\"data/mendley/mendley_test.csv\"", ",", "resize", "=", "True", ",", "augmentation", "=", "False", ")", "\n", "return", "trainset", ",", "testset", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.mendley.get_transforms": [[121, 123], ["None"], "function", ["None"], ["", "def", "get_transforms", "(", ")", ":", "\n", "    ", "return", "transform_train", ",", "transform_test", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.svhn.get_train_valid_test_loader": [[27, 48], ["torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "list", "random.seed", "random.shuffle", "int", "torch.utils.data.SubsetRandomSampler", "torch.utils.data.SubsetRandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.SVHN", "torch.utils.data.DataLoader", "range", "len", "len"], "function", ["None"], ["def", "get_train_valid_test_loader", "(", "args", ")", ":", "\n", "    ", "train_set", "=", "datasets", ".", "SVHN", "(", "root", "=", "'./data'", ",", "split", "=", "\"train\"", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "val_set", "=", "datasets", ".", "SVHN", "(", "root", "=", "'./data'", ",", "split", "=", "\"train\"", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "\n", "# create a val set from training set", "\n", "idxs", "=", "list", "(", "range", "(", "len", "(", "train_set", ")", ")", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "shuffle", "(", "idxs", ")", "\n", "split", "=", "int", "(", "0.1", "*", "len", "(", "idxs", ")", ")", "\n", "train_idxs", ",", "valid_idxs", "=", "idxs", "[", "split", ":", "]", ",", "idxs", "[", ":", "split", "]", "\n", "\n", "train_sampler", "=", "data", ".", "SubsetRandomSampler", "(", "train_idxs", ")", "\n", "val_sampler", "=", "data", ".", "SubsetRandomSampler", "(", "valid_idxs", ")", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "train_set", ",", "batch_size", "=", "args", ".", "train_batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "sampler", "=", "train_sampler", ")", "\n", "val_loader", "=", "data", ".", "DataLoader", "(", "val_set", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "num_workers", "=", "args", ".", "workers", ",", "sampler", "=", "val_sampler", ",", "drop_last", "=", "False", ")", "\n", "\n", "test_set", "=", "datasets", ".", "SVHN", "(", "root", "=", "'./data'", ",", "split", "=", "\"test\"", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "data", ".", "DataLoader", "(", "test_set", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.svhn.get_datasets": [[49, 53], ["torchvision.datasets.SVHN", "torchvision.datasets.SVHN"], "function", ["None"], ["", "def", "get_datasets", "(", "args", ")", ":", "\n", "    ", "trainset", "=", "datasets", ".", "SVHN", "(", "root", "=", "'./data'", ",", "split", "=", "\"train\"", ",", "download", "=", "True", ",", "transform", "=", "None", ")", "\n", "testset", "=", "datasets", ".", "SVHN", "(", "root", "=", "'./data'", ",", "split", "=", "\"test\"", ",", "download", "=", "True", ",", "transform", "=", "None", ")", "\n", "return", "trainset", ",", "testset", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.datasets.svhn.get_transforms": [[54, 56], ["None"], "function", ["None"], ["", "def", "get_transforms", "(", ")", ":", "\n", "    ", "return", "transform_train", ",", "transform_test", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_imagenet.BasicBlock.__init__": [[28, 37], ["torch.Module.__init__", "resnet_imagenet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_imagenet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.conv3x3", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_imagenet.BasicBlock.forward": [[38, 55], ["resnet_imagenet.BasicBlock.conv1", "resnet_imagenet.BasicBlock.bn1", "resnet_imagenet.BasicBlock.relu", "resnet_imagenet.BasicBlock.conv2", "resnet_imagenet.BasicBlock.bn2", "resnet_imagenet.BasicBlock.relu", "resnet_imagenet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_imagenet.Bottleneck.__init__": [[62, 73], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_imagenet.Bottleneck.forward": [[74, 95], ["resnet_imagenet.Bottleneck.conv1", "resnet_imagenet.Bottleneck.bn1", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.conv2", "resnet_imagenet.Bottleneck.bn2", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.conv3", "resnet_imagenet.Bottleneck.bn3", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_imagenet.ResNet.__init__": [[99, 120], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_imagenet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "200", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "#self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "2", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", "*", "4", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_imagenet.ResNet._make_layer": [[121, 136], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_imagenet.ResNet.forward": [[137, 153], ["resnet_imagenet.ResNet.conv1", "resnet_imagenet.ResNet.bn1", "resnet_imagenet.ResNet.relu", "resnet_imagenet.ResNet.layer1", "resnet_imagenet.ResNet.layer2", "resnet_imagenet.ResNet.layer3", "resnet_imagenet.ResNet.layer4", "resnet_imagenet.ResNet.avgpool", "resnet_imagenet.ResNet.view", "resnet_imagenet.ResNet.fc", "resnet_imagenet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "#x = self.maxpool(x)", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_imagenet.conv3x3": [[15, 20], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "'''\n        3x3 convolution with padding\n    '''", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_imagenet.resnet18": [[155, 158], ["resnet_imagenet.ResNet"], "function", ["None"], ["", "", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_imagenet.resnet34": [[160, 163], ["resnet_imagenet.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_imagenet.resnet50": [[165, 168], ["resnet_imagenet.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_imagenet.resnet101": [[170, 173], ["resnet_imagenet.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_imagenet.resnet110": [[175, 178], ["resnet_imagenet.ResNet"], "function", ["None"], ["", "def", "resnet110", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "26", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_imagenet.resnet152": [[180, 183], ["resnet_imagenet.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_mnist.BasicBlock.__init__": [[22, 31], ["torch.Module.__init__", "resnet_mnist.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_mnist.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.conv3x3", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_mnist.BasicBlock.forward": [[32, 49], ["resnet_mnist.BasicBlock.conv1", "resnet_mnist.BasicBlock.bn1", "resnet_mnist.BasicBlock.relu", "resnet_mnist.BasicBlock.conv2", "resnet_mnist.BasicBlock.bn2", "resnet_mnist.BasicBlock.relu", "resnet_mnist.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_mnist.Bottleneck.__init__": [[54, 66], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_mnist.Bottleneck.forward": [[67, 88], ["resnet_mnist.Bottleneck.conv1", "resnet_mnist.Bottleneck.bn1", "resnet_mnist.Bottleneck.relu", "resnet_mnist.Bottleneck.conv2", "resnet_mnist.Bottleneck.bn2", "resnet_mnist.Bottleneck.relu", "resnet_mnist.Bottleneck.conv3", "resnet_mnist.Bottleneck.bn3", "resnet_mnist.Bottleneck.relu", "resnet_mnist.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_mnist.ResNet.__init__": [[92, 126], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_mnist.ResNet._make_layer", "resnet_mnist.ResNet._make_layer", "resnet_mnist.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet_mnist.ResNet.modules", "block_name.lower", "isinstance", "block_name.lower", "ValueError", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", "=", "1000", ",", "block_name", "=", "'BasicBlock'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Model type specifies number of layers for CIFAR-10 model", "\n", "if", "block_name", ".", "lower", "(", ")", "==", "'basicblock'", ":", "\n", "            ", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'When use basicblock, depth should be 6n+2, e.g. 20, 32, 44, 56, 110, 1202'", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "self", ".", "block", "=", "BasicBlock", "\n", "", "elif", "block_name", ".", "lower", "(", ")", "==", "'bottleneck'", ":", "\n", "            ", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'When use bottleneck, depth should be 9n+2, e.g. 20, 29, 47, 56, 110, 1199'", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "self", ".", "block", "=", "Bottleneck", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'block_name shoule be Basicblock or Bottleneck'", ")", "\n", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "16", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "self", ".", "block", ",", "16", ",", "n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "self", ".", "block", ",", "32", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "self", ".", "block", ",", "64", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "64", "*", "self", ".", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_mnist.ResNet._make_layer": [[127, 143], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_mnist.ResNet.forward": [[144, 157], ["resnet_mnist.ResNet.conv1", "resnet_mnist.ResNet.bn1", "resnet_mnist.ResNet.relu", "resnet_mnist.ResNet.layer1", "resnet_mnist.ResNet.layer2", "resnet_mnist.ResNet.layer3", "resnet_mnist.ResNet.avgpool", "resnet_mnist.ResNet.view", "resnet_mnist.ResNet.fc", "resnet_mnist.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "# 28x28", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "# 28x28", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "# 14x14", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "# 7x7", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "# 1x1", "\n", "image_embedding", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "classifier_scores", "=", "self", ".", "fc", "(", "image_embedding", ")", "\n", "\n", "return", "classifier_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_mnist.conv3x3": [[14, 18], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_mnist.resnet20_mnist": [[158, 161], ["resnet_mnist.ResNet"], "function", ["None"], ["", "", "def", "resnet20_mnist", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "depth", "=", "20", ",", "**", "kwargs", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.mendley_networks.CNN.__init__": [[10, 72], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "mendley_networks.CNN.ft_ext.parameters", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torchvision.alexnet", "int", "int", "int", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "list", "torchvision.resnet50", "int", "mendley_networks.CNN.ft_ext.children", "list", "torchvision.squeezenet1_1", "mendley_networks.CNN.ft_ext.children", "list", "torchvision.densenet161", "mendley_networks.CNN.ft_ext.children", "list", "mendley_networks.CNN.ft_ext.children"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_imagenet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_classes", "=", "2", ",", "\n", "feature", "=", "'Alex'", ",", "\n", "feature_shape", "=", "(", "256", ",", "25", ",", "25", ")", ",", "\n", "pretrained", "=", "True", ",", "\n", "requires_grad", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "# Feature Extraction", "\n", "if", "(", "feature", "==", "'Alex'", ")", ":", "\n", "            ", "self", ".", "ft_ext", "=", "models", ".", "alexnet", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "ft_ext_modules", "=", "list", "(", "self", ".", "ft_ext", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", "\n", "", "elif", "(", "feature", "==", "'Res'", ")", ":", "\n", "            ", "self", ".", "ft_ext", "=", "models", ".", "resnet50", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "ft_ext_modules", "=", "list", "(", "self", ".", "ft_ext", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", "\n", "", "elif", "(", "feature", "==", "'Squeeze'", ")", ":", "\n", "            ", "self", ".", "ft_ext", "=", "models", ".", "squeezenet1_1", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "ft_ext_modules", "=", "list", "(", "self", ".", "ft_ext", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", "\n", "", "elif", "(", "feature", "==", "'Dense'", ")", ":", "\n", "            ", "self", ".", "ft_ext", "=", "models", ".", "densenet161", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "ft_ext_modules", "=", "list", "(", "self", ".", "ft_ext", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "self", ".", "ft_ext", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "ft_ext_modules", ")", "\n", "for", "p", "in", "self", ".", "ft_ext", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "# Classifier                   ", "\n", "", "if", "(", "feature", "==", "'Res'", ")", ":", "\n", "            ", "conv1_output_features", "=", "int", "(", "feature_shape", "[", "0", "]", "/", "4", ")", "\n", "", "else", ":", "\n", "            ", "conv1_output_features", "=", "int", "(", "feature_shape", "[", "0", "]", "/", "2", ")", "\n", "", "fc_1_input_features", "=", "conv1_output_features", "*", "int", "(", "feature_shape", "[", "1", "]", "/", "2", ")", "*", "int", "(", "feature_shape", "[", "2", "]", "/", "2", ")", "\n", "# print(\"fc1_in_shape:\", fc_1_input_features)", "\n", "fc1_output_features", "=", "256", "\n", "fc2_output_features", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "feature_shape", "[", "0", "]", ",", "\n", "out_channels", "=", "conv1_output_features", ",", "\n", "kernel_size", "=", "1", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "conv1_output_features", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", "\n", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "fc_1_input_features", ",", "fc1_output_features", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "fc1_output_features", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "fc1_output_features", ",", "fc2_output_features", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "fc2_output_features", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "fc2_output_features", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.mendley_networks.CNN.forward": [[73, 85], ["mendley_networks.CNN.ft_ext", "mendley_networks.CNN.conv1", "mendley_networks.CNN.view", "mendley_networks.CNN.fc1", "mendley_networks.CNN.fc2", "mendley_networks.CNN.out", "mendley_networks.CNN.size", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "drop_prob", "=", "0.5", ")", ":", "\n", "        ", "ft", "=", "self", ".", "ft_ext", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "ft", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "# print(x.shape)          ", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "nn", ".", "Dropout", "(", "drop_prob", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "nn", ".", "Dropout", "(", "drop_prob", ")", "(", "x", ")", "\n", "prob", "=", "self", ".", "out", "(", "x", ")", "\n", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.mendley_networks.resnet50_mendley": [[86, 88], ["mendley_networks.CNN"], "function", ["None"], ["", "", "def", "resnet50_mendley", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "CNN", "(", "**", "kwargs", ",", "feature", "=", "'Res'", ",", "feature_shape", "=", "[", "2048", ",", "26", ",", "26", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.mendley_networks.alexnet_mendley": [[89, 91], ["mendley_networks.CNN"], "function", ["None"], ["", "def", "alexnet_mendley", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "CNN", "(", "**", "kwargs", ",", "feature", "=", "'Alex'", ",", "feature_shape", "=", "[", "256", ",", "6", ",", "6", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.BasicBlock.__init__": [[22, 31], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.conv3x3", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.BasicBlock.forward": [[32, 49], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.Bottleneck.__init__": [[54, 66], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.Bottleneck.forward": [[67, 88], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.ResNet.__init__": [[92, 126], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.Linear", "resnet.ResNet.modules", "block_name.lower", "isinstance", "block_name.lower", "ValueError", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", "=", "1000", ",", "block_name", "=", "'BasicBlock'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Model type specifies number of layers for CIFAR-10 model", "\n", "if", "block_name", ".", "lower", "(", ")", "==", "'basicblock'", ":", "\n", "            ", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'When use basicblock, depth should be 6n+2, e.g. 20, 32, 44, 56, 110, 1202'", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "self", ".", "block", "=", "BasicBlock", "\n", "", "elif", "block_name", ".", "lower", "(", ")", "==", "'bottleneck'", ":", "\n", "            ", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'When use bottleneck, depth should be 9n+2, e.g. 20, 29, 47, 56, 110, 1199'", "\n", "n", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "self", ".", "block", "=", "Bottleneck", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'block_name shoule be Basicblock or Bottleneck'", ")", "\n", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "self", ".", "block", ",", "16", ",", "n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "self", ".", "block", ",", "32", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "self", ".", "block", ",", "64", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "64", "*", "self", ".", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.ResNet._make_layer": [[127, 143], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.ResNet.forward": [[144, 160], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "# 32x32", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "# 32x32", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "# 16x16", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "# 8x8", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "image_embedding", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "classifier_scores", "=", "self", ".", "fc", "(", "image_embedding", ")", "\n", "\n", "return", "classifier_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.conv3x3": [[14, 18], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.resnet20": [[161, 164], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet20", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "depth", "=", "20", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.resnet32": [[165, 168], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet32", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "depth", "=", "32", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.resnet56": [[169, 172], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet56", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "depth", "=", "56", ",", "block_name", "=", "\"bottleneck\"", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet.resnet110": [[173, 176], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet110", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "depth", "=", "110", ",", "block_name", "=", "\"bottleneck\"", ",", "**", "kwargs", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.models.resnet_pacs.resnet18_pacs": [[7, 15], ["torchvision.models.resnet.ResNet", "torch.hub.load_state_dict_from_url", "torchvision.models.resnet.ResNet.load_state_dict", "torchvision.models.resnet.ResNet.parameters", "torch.nn.Linear"], "function", ["None"], ["def", "resnet18_pacs", "(", "num_classes", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "resnet18_url", ",", "progress", "=", "True", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "for", "params", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "params", ".", "requires_grad", "=", "False", "\n", "", "model", ".", "fc", "=", "torch", ".", "nn", ".", "Linear", "(", "BasicBlock", ".", "expansion", "*", "512", ",", "num_classes", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.TemperatureScaling.__init__": [[13, 26], ["torch.Module.__init__", "calibrators._freeze_model", "calibrators.TemperatureScaling.base_model.eval", "calibrators.TemperatureScaling.temp_list.append"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators._freeze_model", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append"], ["    ", "def", "__init__", "(", "self", ",", "base_model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_model", "=", "base_model", "\n", "self", ".", "T", "=", "1.0", "\n", "_freeze_model", "(", "self", ".", "base_model", ")", "\n", "self", ".", "base_model", ".", "eval", "(", ")", "\n", "\n", "# set up temperature list", "\n", "self", ".", "temp_list", "=", "[", "]", "\n", "t", "=", "0.1", "\n", "while", "t", "<=", "10", ":", "\n", "            ", "self", ".", "temp_list", ".", "append", "(", "t", ")", "\n", "t", "+=", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.TemperatureScaling.forward": [[27, 31], ["calibrators.TemperatureScaling.base_model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "base_model", "(", "x", ")", "\n", "x", "/=", "self", ".", "T", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.TemperatureScaling.calibrate": [[32, 54], ["float", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "tqdm.std.tqdm.std.tqdm", "calibrators.TemperatureScaling.base_model", "torch.CrossEntropyLoss.", "nn.CrossEntropyLoss.item", "images.cuda", "targets.cuda"], "methods", ["None"], ["", "def", "calibrate", "(", "self", ",", "train_loader", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "min_error", "=", "float", "(", "'inf'", ")", "\n", "min_T", "=", "1.0", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "for", "T", "in", "tqdm", "(", "self", ".", "temp_list", ",", "desc", "=", "\"Running temp scaling\"", ")", ":", "\n", "            ", "error", "=", "0.", "\n", "for", "images", ",", "targets", "in", "train_loader", ":", "\n", "                ", "images", ",", "targets", "=", "images", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "outputs", "=", "self", ".", "base_model", "(", "images", ")", "\n", "outputs", "/=", "T", "\n", "\n", "cur_error", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "error", "+=", "cur_error", ".", "item", "(", ")", "\n", "\n", "", "if", "error", "<", "min_error", ":", "\n", "                ", "min_T", "=", "T", "\n", "min_error", "=", "error", "\n", "\n", "", "", "self", ".", "T", "=", "min_T", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.DirichletScaling.__init__": [[56, 68], ["torch.Module.__init__", "calibrators._freeze_model", "calibrators.DirichletScaling.setup_model"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators._freeze_model", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.DirichletScaling.setup_model"], ["    ", "def", "__init__", "(", "self", ",", "base_model", ",", "num_classes", ",", "optim", "=", "'adam'", ",", "Lambda", "=", "0.", ",", "Mu", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_model", "=", "base_model", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "optim", "=", "optim", "\n", "self", ".", "Lambda", "=", "Lambda", "\n", "self", ".", "Mu", "=", "Mu", "\n", "\n", "_freeze_model", "(", "self", ".", "base_model", ")", "\n", "self", ".", "setup_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.DirichletScaling.setup_model": [[69, 71], ["torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "num_classes", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.DirichletScaling.forward": [[72, 77], ["calibrators.DirichletScaling.base_model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "calibrators.DirichletScaling.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "base_model", "(", "x", ")", "\n", "x", "=", "torch", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.DirichletScaling.regularizer": [[78, 87], ["calibrators.DirichletScaling.fc.parameters", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal"], "methods", ["None"], ["", "def", "regularizer", "(", "self", ")", ":", "\n", "        ", "k", "=", "self", ".", "num_classes", "\n", "W", ",", "b", "=", "self", ".", "fc", ".", "parameters", "(", ")", "\n", "\n", "# keep loss value ", "\n", "w_loss", "=", "(", "(", "W", "**", "2", ")", ".", "sum", "(", ")", "-", "(", "torch", ".", "diagonal", "(", "W", ",", "0", ")", "**", "2", ")", ".", "sum", "(", ")", ")", "/", "(", "k", "*", "(", "k", "-", "1", ")", ")", "\n", "b_loss", "=", "(", "(", "b", "**", "2", ")", ".", "sum", "(", ")", ")", "/", "k", "\n", "\n", "return", "self", ".", "Lambda", "*", "w_loss", "+", "self", ".", "Mu", "*", "b_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.DirichletScaling.loss_func": [[88, 91], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "calibrators.DirichletScaling.regularizer"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.DirichletScaling.regularizer"], ["", "def", "loss_func", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "crit", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "return", "crit", "(", "outputs", ",", "targets", ")", "+", "self", ".", "regularizer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.DirichletScaling.give_params": [[92, 94], ["calibrators.DirichletScaling.fc.parameters"], "methods", ["None"], ["", "def", "give_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fc", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.DirichletScaling.fit": [[95, 138], ["calibrators.DirichletScaling.train", "torch.Adam", "torch.Adam", "torch.Adam", "utils.EarlyStopping", "calibrators.DirichletScaling.cuda", "tqdm.std.tqdm.std.tqdm", "calibrators.DirichletScaling.give_params", "range", "utils.AverageMeter", "tqdm.std.tqdm.std.tqdm.set_postfix_str", "utils.EarlyStopping.step", "torch.Adam.zero_grad", "calibrators.DirichletScaling.forward", "calibrators.DirichletScaling.loss_func", "calibrators.DirichletScaling.backward", "torch.Adam.step", "utils.AverageMeter.update", "imgs.cuda", "labels.cuda", "calibrators.DirichletScaling.item"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.runners.train", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.DirichletScaling.give_params", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.earlystopper.EarlyStopping.step", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.forward", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.DirichletScaling.loss_func", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.earlystopper.EarlyStopping.step", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.misc.AverageMeter.update"], ["", "def", "fit", "(", "self", ",", "train_loader", ",", "lr", "=", "0.001", ",", "epochs", "=", "25", ",", "patience", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "train", "(", ")", "\n", "\n", "# if self.optim == \"sgd\":", "\n", "#     optimizer = optim.SGD(self.give_params(), ", "\n", "#                         lr=lr,", "\n", "#                         weight_decay=0.0)", "\n", "\n", "# elif self.optim == \"adam\":", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "give_params", "(", ")", ",", "\n", "lr", "=", "lr", ",", "\n", "weight_decay", "=", "0.0", ")", "\n", "\n", "scheduler", "=", "EarlyStopping", "(", "patience", "=", "patience", ")", "\n", "\n", "# send model to gpu", "\n", "self", ".", "cuda", "(", ")", "\n", "\n", "last_loss", "=", "0.0", "\n", "\n", "bar", "=", "tqdm", "(", "range", "(", "epochs", ")", ",", "desc", "=", "\"running dir for ({:.2f},{:.2f})\"", ".", "format", "(", "self", ".", "Lambda", ",", "self", ".", "Mu", ")", ")", "\n", "for", "i", "in", "bar", ":", "\n", "# for i in range(epochs):", "\n", "            ", "avg_loss", "=", "AverageMeter", "(", ")", "\n", "for", "imgs", ",", "labels", "in", "train_loader", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "imgs", ",", "labels", "=", "imgs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "outs", "=", "self", ".", "forward", "(", "imgs", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "outs", ",", "labels", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "avg_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "last_loss", "=", "avg_loss", ".", "avg", "\n", "bar", ".", "set_postfix_str", "(", "\"loss : {:.5f} | lr : {:.5f}\"", ".", "format", "(", "avg_loss", ".", "avg", ",", "lr", ")", ")", "\n", "if", "scheduler", ".", "step", "(", "avg_loss", ".", "avg", ")", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "last_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.DirichletScaling.calibrate": [[139, 149], ["calibrators.DirichletScaling.fit", "print", "calibrators.DirichletScaling.fit"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.DirichletScaling.fit", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators.DirichletScaling.fit"], ["", "def", "calibrate", "(", "self", ",", "train_loader", ",", "lr", "=", "0.001", ",", "epochs", "=", "25", ",", "double_fit", "=", "True", ",", "patience", "=", "10", ")", ":", "\n", "\n", "        ", "loss", "=", "self", ".", "fit", "(", "train_loader", ",", "lr", ",", "epochs", ",", "patience", ")", "\n", "\n", "if", "double_fit", ":", "\n", "            ", "print", "(", "\"Trying to double fit...\"", ")", "\n", "lr", "/=", "10", "\n", "loss", "=", "self", ".", "fit", "(", "train_loader", ",", "lr", ",", "epochs", ",", "patience", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.calibrators._freeze_model": [[8, 11], ["model.parameters"], "function", ["None"], ["def", "_freeze_model", "(", "model", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "for", "params", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "params", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.BrierScore.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.BrierScore.loss": [[10, 15], ["scipy.special.softmax", "numpy.mean", "numpy.eye", "numpy.sum"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "K", "=", "outputs", ".", "shape", "[", "1", "]", "\n", "one_hot", "=", "np", ".", "eye", "(", "K", ")", "[", "targets", "]", "\n", "probs", "=", "softmax", "(", "outputs", ",", "axis", "=", "1", ")", "\n", "return", "np", ".", "mean", "(", "np", ".", "sum", "(", "(", "probs", "-", "one_hot", ")", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.CELoss.compute_bin_boundaries": [[19, 40], ["numpy.array", "numpy.linspace", "int", "numpy.array", "numpy.sort", "range", "numpy.append", "numpy.append"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append"], ["    ", "def", "compute_bin_boundaries", "(", "self", ",", "probabilities", "=", "np", ".", "array", "(", "[", "]", ")", ")", ":", "\n", "\n", "#uniform bin spacing", "\n", "        ", "if", "probabilities", ".", "size", "==", "0", ":", "\n", "            ", "bin_boundaries", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "self", ".", "n_bins", "+", "1", ")", "\n", "self", ".", "bin_lowers", "=", "bin_boundaries", "[", ":", "-", "1", "]", "\n", "self", ".", "bin_uppers", "=", "bin_boundaries", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "#size of bins ", "\n", "            ", "bin_n", "=", "int", "(", "self", ".", "n_data", "/", "self", ".", "n_bins", ")", "\n", "\n", "bin_boundaries", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "probabilities_sort", "=", "np", ".", "sort", "(", "probabilities", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_bins", ")", ":", "\n", "                ", "bin_boundaries", "=", "np", ".", "append", "(", "bin_boundaries", ",", "probabilities_sort", "[", "i", "*", "bin_n", "]", ")", "\n", "", "bin_boundaries", "=", "np", ".", "append", "(", "bin_boundaries", ",", "1.0", ")", "\n", "\n", "self", ".", "bin_lowers", "=", "bin_boundaries", "[", ":", "-", "1", "]", "\n", "self", ".", "bin_uppers", "=", "bin_boundaries", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.CELoss.get_probabilities": [[42, 53], ["numpy.max", "numpy.argmax", "numpy.equal", "scipy.special.softmax"], "methods", ["None"], ["", "", "def", "get_probabilities", "(", "self", ",", "output", ",", "labels", ",", "logits", ")", ":", "\n", "#If not probabilities apply softmax!", "\n", "        ", "if", "logits", ":", "\n", "            ", "self", ".", "probabilities", "=", "softmax", "(", "output", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "probabilities", "=", "output", "\n", "\n", "", "self", ".", "labels", "=", "labels", "\n", "self", ".", "confidences", "=", "np", ".", "max", "(", "self", ".", "probabilities", ",", "axis", "=", "1", ")", "\n", "self", ".", "predictions", "=", "np", ".", "argmax", "(", "self", ".", "probabilities", ",", "axis", "=", "1", ")", "\n", "self", ".", "accuracies", "=", "np", ".", "equal", "(", "self", ".", "predictions", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.CELoss.binary_matrices": [[54, 64], ["numpy.arange", "numpy.zeros", "numpy.zeros", "numpy.equal"], "methods", ["None"], ["", "def", "binary_matrices", "(", "self", ")", ":", "\n", "        ", "idx", "=", "np", ".", "arange", "(", "self", ".", "n_data", ")", "\n", "#make matrices of zeros", "\n", "pred_matrix", "=", "np", ".", "zeros", "(", "[", "self", ".", "n_data", ",", "self", ".", "n_class", "]", ")", "\n", "label_matrix", "=", "np", ".", "zeros", "(", "[", "self", ".", "n_data", ",", "self", ".", "n_class", "]", ")", "\n", "#self.acc_matrix = np.zeros([self.n_data,self.n_class])", "\n", "pred_matrix", "[", "idx", ",", "self", ".", "predictions", "]", "=", "1", "\n", "label_matrix", "[", "idx", ",", "self", ".", "labels", "]", "=", "1", "\n", "\n", "self", ".", "acc_matrix", "=", "np", ".", "equal", "(", "pred_matrix", ",", "label_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.CELoss.compute_bins": [[66, 89], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "zip", "numpy.mean", "numpy.greater", "numpy.less_equal", "metrics.CELoss.bin_prop[].item", "numpy.mean", "numpy.mean", "numpy.abs", "bin_lower.item", "bin_upper.item"], "methods", ["None"], ["", "def", "compute_bins", "(", "self", ",", "index", "=", "None", ")", ":", "\n", "        ", "self", ".", "bin_prop", "=", "np", ".", "zeros", "(", "self", ".", "n_bins", ")", "\n", "self", ".", "bin_acc", "=", "np", ".", "zeros", "(", "self", ".", "n_bins", ")", "\n", "self", ".", "bin_conf", "=", "np", ".", "zeros", "(", "self", ".", "n_bins", ")", "\n", "self", ".", "bin_score", "=", "np", ".", "zeros", "(", "self", ".", "n_bins", ")", "\n", "\n", "if", "index", "==", "None", ":", "\n", "            ", "confidences", "=", "self", ".", "confidences", "\n", "accuracies", "=", "self", ".", "accuracies", "\n", "", "else", ":", "\n", "            ", "confidences", "=", "self", ".", "probabilities", "[", ":", ",", "index", "]", "\n", "accuracies", "=", "(", "self", ".", "labels", "==", "index", ")", ".", "astype", "(", "\"float\"", ")", "\n", "\n", "\n", "", "for", "i", ",", "(", "bin_lower", ",", "bin_upper", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "bin_lowers", ",", "self", ".", "bin_uppers", ")", ")", ":", "\n", "# Calculated |confidence - accuracy| in each bin", "\n", "            ", "in_bin", "=", "np", ".", "greater", "(", "confidences", ",", "bin_lower", ".", "item", "(", ")", ")", "*", "np", ".", "less_equal", "(", "confidences", ",", "bin_upper", ".", "item", "(", ")", ")", "\n", "self", ".", "bin_prop", "[", "i", "]", "=", "np", ".", "mean", "(", "in_bin", ")", "\n", "\n", "if", "self", ".", "bin_prop", "[", "i", "]", ".", "item", "(", ")", ">", "0", ":", "\n", "                ", "self", ".", "bin_acc", "[", "i", "]", "=", "np", ".", "mean", "(", "accuracies", "[", "in_bin", "]", ")", "\n", "self", ".", "bin_conf", "[", "i", "]", "=", "np", ".", "mean", "(", "confidences", "[", "in_bin", "]", ")", "\n", "self", ".", "bin_score", "[", "i", "]", "=", "np", ".", "abs", "(", "self", ".", "bin_conf", "[", "i", "]", "-", "self", ".", "bin_acc", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.MaxProbCELoss.loss": [[91, 96], ["metrics.CELoss.compute_bin_boundaries", "metrics.CELoss.get_probabilities", "metrics.CELoss.compute_bins"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.CELoss.compute_bin_boundaries", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.CELoss.get_probabilities", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.CELoss.compute_bins"], ["    ", "def", "loss", "(", "self", ",", "output", ",", "labels", ",", "n_bins", "=", "15", ",", "logits", "=", "True", ")", ":", "\n", "        ", "self", ".", "n_bins", "=", "n_bins", "\n", "super", "(", ")", ".", "compute_bin_boundaries", "(", ")", "\n", "super", "(", ")", ".", "get_probabilities", "(", "output", ",", "labels", ",", "logits", ")", "\n", "super", "(", ")", ".", "compute_bins", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.ECELoss.loss": [[100, 103], ["metrics.MaxProbCELoss.loss", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.ACELoss.loss"], ["    ", "def", "loss", "(", "self", ",", "output", ",", "labels", ",", "n_bins", "=", "15", ",", "logits", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "loss", "(", "output", ",", "labels", ",", "n_bins", ",", "logits", ")", "\n", "return", "np", ".", "dot", "(", "self", ".", "bin_prop", ",", "self", ".", "bin_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.MCELoss.loss": [[106, 109], ["metrics.MaxProbCELoss.loss", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.ACELoss.loss"], ["    ", "def", "loss", "(", "self", ",", "output", ",", "labels", ",", "n_bins", "=", "15", ",", "logits", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "loss", "(", "output", ",", "labels", ",", "n_bins", ",", "logits", ")", "\n", "return", "np", ".", "max", "(", "self", ".", "bin_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.OELoss.loss": [[114, 117], ["metrics.MaxProbCELoss.loss", "numpy.dot", "numpy.maximum", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.ACELoss.loss"], ["    ", "def", "loss", "(", "self", ",", "output", ",", "labels", ",", "n_bins", "=", "15", ",", "logits", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "loss", "(", "output", ",", "labels", ",", "n_bins", ",", "logits", ")", "\n", "return", "np", ".", "dot", "(", "self", ".", "bin_prop", ",", "self", ".", "bin_conf", "*", "np", ".", "maximum", "(", "self", ".", "bin_conf", "-", "self", ".", "bin_acc", ",", "np", ".", "zeros", "(", "self", ".", "n_bins", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.SCELoss.loss": [[122, 137], ["len", "len", "metrics.CELoss.compute_bin_boundaries", "metrics.CELoss.get_probabilities", "metrics.CELoss.binary_matrices", "range", "metrics.CELoss.compute_bins", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.CELoss.compute_bin_boundaries", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.CELoss.get_probabilities", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.CELoss.binary_matrices", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.CELoss.compute_bins"], ["    ", "def", "loss", "(", "self", ",", "output", ",", "labels", ",", "n_bins", "=", "15", ",", "logits", "=", "True", ")", ":", "\n", "        ", "sce", "=", "0.0", "\n", "self", ".", "n_bins", "=", "n_bins", "\n", "self", ".", "n_data", "=", "len", "(", "output", ")", "\n", "self", ".", "n_class", "=", "len", "(", "output", "[", "0", "]", ")", "\n", "\n", "super", "(", ")", ".", "compute_bin_boundaries", "(", ")", "\n", "super", "(", ")", ".", "get_probabilities", "(", "output", ",", "labels", ",", "logits", ")", "\n", "super", "(", ")", ".", "binary_matrices", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_class", ")", ":", "\n", "            ", "super", "(", ")", ".", "compute_bins", "(", "i", ")", "\n", "sce", "+=", "np", ".", "dot", "(", "self", ".", "bin_prop", ",", "self", ".", "bin_score", ")", "\n", "\n", "", "return", "sce", "/", "self", ".", "n_class", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.TACELoss.loss": [[140, 156], ["len", "len", "metrics.CELoss.get_probabilities", "metrics.CELoss.binary_matrices", "range", "metrics.CELoss.compute_bin_boundaries", "metrics.CELoss.compute_bins", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.CELoss.get_probabilities", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.CELoss.binary_matrices", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.CELoss.compute_bin_boundaries", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.CELoss.compute_bins"], ["    ", "def", "loss", "(", "self", ",", "output", ",", "labels", ",", "threshold", "=", "0.01", ",", "n_bins", "=", "15", ",", "logits", "=", "True", ")", ":", "\n", "        ", "tace", "=", "0.0", "\n", "self", ".", "n_bins", "=", "n_bins", "\n", "self", ".", "n_data", "=", "len", "(", "output", ")", "\n", "self", ".", "n_class", "=", "len", "(", "output", "[", "0", "]", ")", "\n", "\n", "super", "(", ")", ".", "get_probabilities", "(", "output", ",", "labels", ",", "logits", ")", "\n", "self", ".", "probabilities", "[", "self", ".", "probabilities", "<", "threshold", "]", "=", "0", "\n", "super", "(", ")", ".", "binary_matrices", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_class", ")", ":", "\n", "            ", "super", "(", ")", ".", "compute_bin_boundaries", "(", "self", ".", "probabilities", "[", ":", ",", "i", "]", ")", "\n", "super", "(", ")", ".", "compute_bins", "(", "i", ")", "\n", "tace", "+=", "np", ".", "dot", "(", "self", ".", "bin_prop", ",", "self", ".", "bin_score", ")", "\n", "\n", "", "return", "tace", "/", "self", ".", "n_class", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.ACELoss.loss": [[160, 162], ["metrics.TACELoss.loss"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.ACELoss.loss"], ["    ", "def", "loss", "(", "self", ",", "output", ",", "labels", ",", "n_bins", "=", "15", ",", "logits", "=", "True", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "loss", "(", "output", ",", "labels", ",", "0.0", ",", "n_bins", ",", "logits", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.runners.train": [[7, 43], ["model.train", "utils.AverageMeter", "utils.AverageMeter", "tqdm.tqdm", "enumerate", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "tqdm.tqdm.set_postfix_str", "len", "inputs.cuda", "targets.cuda", "criterion.item", "inputs.size", "prec1.item", "inputs.size", "len"], "function", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.runners.train", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.eval.accuracy", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.earlystopper.EarlyStopping.step"], ["def", "train", "(", "trainloader", ",", "model", ",", "optimizer", ",", "criterion", ")", ":", "\n", "# switch to train mode", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "bar", "=", "tqdm", "(", "enumerate", "(", "trainloader", ")", ",", "total", "=", "len", "(", "trainloader", ")", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "bar", ":", "\n", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "=", "accuracy", "(", "outputs", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# plot progress", "\n", "bar", ".", "set_postfix_str", "(", "'({batch}/{size}) Loss: {loss:.8f} | top1: {top1: .4f}'", ".", "format", "(", "\n", "batch", "=", "batch_idx", "+", "1", ",", "\n", "size", "=", "len", "(", "trainloader", ")", ",", "\n", "loss", "=", "losses", ".", "avg", ",", "\n", "top1", "=", "top1", ".", "avg", "\n", ")", ")", "\n", "\n", "", "return", "(", "losses", ".", "avg", ",", "top1", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.runners.test": [[44, 97], ["torch.no_grad", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.eval", "tqdm.tqdm", "calibration_library.metrics.ECELoss().loss", "calibration_library.metrics.SCELoss().loss", "enumerate", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "targets.cpu().numpy.cpu().numpy", "outputs.cpu().numpy.cpu().numpy", "tqdm.tqdm.set_postfix_str", "len", "inputs.cuda", "targets.cpu().numpy.cuda", "criterion.item", "inputs.size", "prec1.item", "inputs.size", "prec3.item", "inputs.size", "prec5.item", "inputs.size", "numpy.concatenate", "numpy.concatenate", "calibration_library.metrics.ECELoss", "calibration_library.metrics.SCELoss", "targets.cpu().numpy.cpu", "outputs.cpu().numpy.cpu", "len"], "function", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.ACELoss.loss", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.calibration_library.metrics.ACELoss.loss", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.eval.accuracy", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.misc.AverageMeter.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test", "(", "testloader", ",", "model", ",", "criterion", ")", ":", "\n", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top3", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "all_targets", "=", "None", "\n", "all_outputs", "=", "None", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "bar", "=", "tqdm", "(", "enumerate", "(", "testloader", ")", ",", "total", "=", "len", "(", "testloader", ")", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "bar", ":", "\n", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "prec1", ",", "prec3", ",", "prec5", "=", "accuracy", "(", "outputs", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "3", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top3", ".", "update", "(", "prec3", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "targets", "=", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "outputs", "=", "outputs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "all_targets", "is", "None", ":", "\n", "            ", "all_outputs", "=", "outputs", "\n", "all_targets", "=", "targets", "\n", "", "else", ":", "\n", "            ", "all_targets", "=", "np", ".", "concatenate", "(", "[", "all_targets", ",", "targets", "]", ",", "axis", "=", "0", ")", "\n", "all_outputs", "=", "np", ".", "concatenate", "(", "[", "all_outputs", ",", "outputs", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# plot progress", "\n", "", "bar", ".", "set_postfix_str", "(", "'({batch}/{size}) Loss: {loss:.8f} | top1: {top1: .4f} | top3: {top3: .4f} | top5: {top5: .4f}'", ".", "format", "(", "\n", "batch", "=", "batch_idx", "+", "1", ",", "\n", "size", "=", "len", "(", "testloader", ")", ",", "\n", "loss", "=", "losses", ".", "avg", ",", "\n", "top1", "=", "top1", ".", "avg", ",", "\n", "top3", "=", "top3", ".", "avg", ",", "\n", "top5", "=", "top5", ".", "avg", ",", "\n", ")", ")", "\n", "\n", "", "eces", "=", "ECELoss", "(", ")", ".", "loss", "(", "all_outputs", ",", "all_targets", ",", "n_bins", "=", "15", ")", "\n", "cces", "=", "SCELoss", "(", ")", ".", "loss", "(", "all_outputs", ",", "all_targets", ",", "n_bins", "=", "15", ")", "\n", "\n", "return", "(", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top3", ".", "avg", ",", "top5", ".", "avg", ",", "cces", ",", "eces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.runners.get_logits_from_model_dataloader": [[98, 124], ["torch.no_grad", "model.eval", "tqdm.tqdm", "inputs.cuda.cuda", "model", "targets.cpu().numpy.cpu().numpy", "outputs.cpu().numpy.cpu().numpy", "torch.from_numpy", "torch.from_numpy", "len", "numpy.concatenate", "numpy.concatenate", "targets.cpu().numpy.cpu", "outputs.cpu().numpy.cpu"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_logits_from_model_dataloader", "(", "testloader", ",", "model", ")", ":", "\n", "    ", "\"\"\"Returns torch tensor of logits and targets on cpu\"\"\"", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "all_targets", "=", "None", "\n", "all_outputs", "=", "None", "\n", "\n", "bar", "=", "tqdm", "(", "testloader", ",", "total", "=", "len", "(", "testloader", ")", ",", "desc", "=", "\"Evaluating logits\"", ")", "\n", "for", "inputs", ",", "targets", "in", "bar", ":", "\n", "        ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "# compute output", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "# to numpy", "\n", "targets", "=", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "outputs", "=", "outputs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "all_targets", "is", "None", ":", "\n", "            ", "all_outputs", "=", "outputs", "\n", "all_targets", "=", "targets", "\n", "", "else", ":", "\n", "            ", "all_targets", "=", "np", ".", "concatenate", "(", "[", "all_targets", ",", "targets", "]", ",", "axis", "=", "0", ")", "\n", "all_outputs", "=", "np", ".", "concatenate", "(", "[", "all_outputs", ",", "outputs", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "return", "torch", ".", "from_numpy", "(", "all_outputs", ")", ",", "torch", ".", "from_numpy", "(", "all_targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.FocalLoss.__init__": [[11, 16], ["torch.Module.__init__", "logging.info"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gamma", "=", "gamma", "\n", "logging", ".", "info", "(", "\"using gamma={}\"", ".", "format", "(", "gamma", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.FocalLoss.forward": [[17, 29], ["target.view.view.view", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "logpt.view.view.gather", "logpt.view.view.view", "logpt.view.view.exp", "loss.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "\n", "        ", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "logpt", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "logpt", "=", "logpt", ".", "gather", "(", "1", ",", "target", ")", "\n", "logpt", "=", "logpt", ".", "view", "(", "-", "1", ")", "\n", "pt", "=", "logpt", ".", "exp", "(", ")", "\n", "\n", "loss", "=", "-", "1", "*", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", "*", "logpt", "\n", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.CrossEntropy.__init__": [[31, 34], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "super", "(", "CrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.CrossEntropy.forward": [[35, 37], ["loss.CrossEntropy.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "criterion", "(", "input", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.LabelSmoothingLoss.__init__": [[39, 44], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.0", ",", "dim", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LabelSmoothingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "alpha", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.LabelSmoothingLoss.forward": [[45, 54], ["pred.log_softmax.log_softmax.log_softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "target.data.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "pred", "=", "pred", ".", "log_softmax", "(", "dim", "=", "self", ".", "dim", ")", "\n", "num_classes", "=", "pred", ".", "shape", "[", "self", ".", "dim", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# true_dist = pred.data.clone()", "\n", "            ", "true_dist", "=", "torch", ".", "zeros_like", "(", "pred", ")", "\n", "true_dist", ".", "fill_", "(", "self", ".", "alpha", "/", "(", "num_classes", "-", "1", ")", ")", "\n", "true_dist", ".", "scatter_", "(", "1", ",", "target", ".", "data", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "confidence", ")", "\n", "", "return", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "-", "true_dist", "*", "pred", ",", "dim", "=", "self", ".", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.MDCA.__init__": [[56, 58], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MDCA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.MDCA.forward": [[59, 71], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "output", "=", "torch", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "# [batch, classes]", "\n", "loss", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "batch", ",", "classes", "=", "output", ".", "shape", "\n", "for", "c", "in", "range", "(", "classes", ")", ":", "\n", "            ", "avg_count", "=", "(", "target", "==", "c", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "avg_conf", "=", "torch", ".", "mean", "(", "output", "[", ":", ",", "c", "]", ")", "\n", "loss", "+=", "torch", ".", "abs", "(", "avg_conf", "-", "avg_count", ")", "\n", "", "denom", "=", "classes", "\n", "loss", "/=", "denom", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.ClassficationAndMDCA.__init__": [[73, 86], ["torch.Module.__init__", "loss.MDCA", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "loss.FocalLoss", "loss.LabelSmoothingLoss"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss", "=", "\"NLL+MDCA\"", ",", "alpha", "=", "0.1", ",", "beta", "=", "1.0", ",", "gamma", "=", "1.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ClassficationAndMDCA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "gamma", "=", "gamma", "\n", "if", "\"NLL\"", "in", "loss", ":", "\n", "            ", "self", ".", "classification_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "elif", "\"FL\"", "in", "loss", ":", "\n", "            ", "self", ".", "classification_loss", "=", "FocalLoss", "(", "gamma", "=", "self", ".", "gamma", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classification_loss", "=", "LabelSmoothingLoss", "(", "alpha", "=", "self", ".", "alpha", ")", "\n", "", "self", ".", "MDCA", "=", "MDCA", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.ClassficationAndMDCA.forward": [[87, 91], ["loss.ClassficationAndMDCA.classification_loss", "loss.ClassficationAndMDCA.MDCA"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "targets", ")", ":", "\n", "        ", "loss_cls", "=", "self", ".", "classification_loss", "(", "logits", ",", "targets", ")", "\n", "loss_cal", "=", "self", ".", "MDCA", "(", "logits", ",", "targets", ")", "\n", "return", "loss_cls", "+", "self", ".", "beta", "*", "loss_cal", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.BrierScore.__init__": [[93, 95], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BrierScore", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.BrierScore.forward": [[96, 108], ["target.view.view.view", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to.zero_", "torch.FloatTensor().to.zero_", "torch.FloatTensor().to.scatter_", "torch.FloatTensor().to.scatter_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "target.view.view.get_device", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "target", ")", ":", "\n", "\n", "        ", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "target_one_hot", "=", "torch", ".", "FloatTensor", "(", "logits", ".", "shape", ")", ".", "to", "(", "target", ".", "get_device", "(", ")", ")", "\n", "target_one_hot", ".", "zero_", "(", ")", "\n", "target_one_hot", ".", "scatter_", "(", "1", ",", "target", ",", "1", ")", "\n", "\n", "pt", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "squared_diff", "=", "(", "target_one_hot", "-", "pt", ")", "**", "2", "\n", "\n", "loss", "=", "torch", ".", "sum", "(", "squared_diff", ")", "/", "float", "(", "logits", ".", "shape", "[", "0", "]", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.DCA.__init__": [[110, 114], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "beta", "=", "1.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "cls_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.DCA.forward": [[115, 120], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.max", "torch.max", "torch.max", "torch.max", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "loss.DCA.cls_loss", "conf.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "targets", ")", ":", "\n", "        ", "output", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "conf", ",", "pred_labels", "=", "torch", ".", "max", "(", "output", ",", "dim", "=", "1", ")", "\n", "calib_loss", "=", "torch", ".", "abs", "(", "conf", ".", "mean", "(", ")", "-", "(", "pred_labels", "==", "targets", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "return", "self", ".", "cls_loss", "(", "logits", ",", "targets", ")", "+", "self", ".", "beta", "*", "calib_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.MMCE.__init__": [[122, 127], ["torch.Module.__init__", "mmce.MMCE_weighted", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "beta", "=", "2.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "mmce", "=", "MMCE_weighted", "(", ")", "\n", "self", ".", "cls_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.MMCE.forward": [[128, 132], ["loss.MMCE.cls_loss", "loss.MMCE.mmce"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "targets", ")", ":", "\n", "        ", "cls", "=", "self", ".", "cls_loss", "(", "logits", ",", "targets", ")", "\n", "calib", "=", "self", ".", "mmce", "(", "logits", ",", "targets", ")", "\n", "return", "cls", "+", "self", ".", "beta", "*", "calib", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.FLSD.__init__": [[134, 138], ["torch.Module.__init__", "flsd.FocalLossAdaptive"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "3.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "criterion", "=", "FocalLossAdaptive", "(", "gamma", "=", "self", ".", "gamma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.loss.FLSD.forward": [[139, 141], ["loss.FLSD.criterion.forward"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.forward"], ["", "def", "forward", "(", "self", ",", "logits", ",", "targets", ")", ":", "\n", "        ", "return", "self", ".", "criterion", ".", "forward", "(", "logits", ",", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.mmce.MMCE_weighted.__init__": [[10, 13], ["torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MMCE_weighted", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.mmce.MMCE_weighted.torch_kernel": [[14, 16], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "torch_kernel", "(", "self", ",", "matrix", ")", ":", "\n", "        ", "return", "torch", ".", "exp", "(", "-", "1.0", "*", "torch", ".", "abs", "(", "matrix", "[", ":", ",", ":", ",", "0", "]", "-", "matrix", "[", ":", ",", ":", ",", "1", "]", ")", "/", "(", "0.4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.mmce.MMCE_weighted.get_pairs": [[17, 32], ["tensor1.unsqueeze().repeat().unsqueeze", "tensor2.unsqueeze().repeat().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tensor1.unsqueeze().repeat().unsqueeze", "tensor2.unsqueeze().repeat().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tensor1.unsqueeze().repeat", "tensor2.unsqueeze().repeat", "tensor1.unsqueeze().repeat().unsqueeze.permute", "tensor2.unsqueeze().repeat().unsqueeze.permute", "tensor1.unsqueeze().repeat", "tensor2.unsqueeze().repeat", "tensor2.unsqueeze().repeat().unsqueeze.permute", "tensor1.unsqueeze", "tensor2.unsqueeze", "tensor1.unsqueeze", "tensor2.unsqueeze"], "methods", ["None"], ["", "def", "get_pairs", "(", "self", ",", "tensor1", ",", "tensor2", ")", ":", "\n", "        ", "correct_prob_tiled", "=", "tensor1", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "tensor1", ".", "shape", "[", "0", "]", ")", ".", "unsqueeze", "(", "2", ")", "\n", "incorrect_prob_tiled", "=", "tensor2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "tensor2", ".", "shape", "[", "0", "]", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "correct_prob_pairs", "=", "torch", ".", "cat", "(", "[", "correct_prob_tiled", ",", "correct_prob_tiled", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "]", ",", "\n", "dim", "=", "2", ")", "\n", "incorrect_prob_pairs", "=", "torch", ".", "cat", "(", "[", "incorrect_prob_tiled", ",", "incorrect_prob_tiled", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "]", ",", "\n", "dim", "=", "2", ")", "\n", "\n", "correct_prob_tiled_1", "=", "tensor1", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "tensor2", ".", "shape", "[", "0", "]", ")", ".", "unsqueeze", "(", "2", ")", "\n", "incorrect_prob_tiled_1", "=", "tensor2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "tensor1", ".", "shape", "[", "0", "]", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "correct_incorrect_pairs", "=", "torch", ".", "cat", "(", "[", "correct_prob_tiled_1", ",", "incorrect_prob_tiled_1", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "]", ",", "\n", "dim", "=", "2", ")", "\n", "return", "correct_prob_pairs", ",", "incorrect_prob_pairs", ",", "correct_incorrect_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.mmce.MMCE_weighted.get_out_tensor": [[33, 35], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "get_out_tensor", "(", "self", ",", "tensor1", ",", "tensor2", ")", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "tensor1", "*", "tensor2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.mmce.MMCE_weighted.forward": [[36, 92], ["target.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.sum().type", "torch.sum().type", "torch.sum().type", "torch.sum().type", "torch.sum().type", "torch.sum().type", "torch.sum().type", "torch.sum().type", "torch.sum().type", "torch.sum().type", "torch.sum().type", "torch.sum().type", "torch.sum().type", "torch.sum().type", "torch.sum().type", "torch.sum().type", "torch.sum().type", "torch.sum().type", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "mmce.MMCE_weighted.get_pairs", "mmce.MMCE_weighted.torch_kernel", "mmce.MMCE_weighted.torch_kernel", "mmce.MMCE_weighted.torch_kernel", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "mmce.MMCE_weighted.get_out_tensor", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "mmce.MMCE_weighted.get_out_tensor", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "mmce.MMCE_weighted.get_out_tensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "input.contiguous().view.contiguous().view.dim", "input.contiguous().view.contiguous().view.view", "input.contiguous().view.contiguous().view.transpose", "input.contiguous().view.contiguous().view.contiguous().view", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "incorrect_prob.unsqueeze", "incorrect_prob.unsqueeze", "incorrect_prob.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "input.contiguous().view.contiguous().view.contiguous", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.mmce.MMCE_weighted.get_pairs", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.mmce.MMCE_weighted.torch_kernel", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.mmce.MMCE_weighted.torch_kernel", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.mmce.MMCE_weighted.torch_kernel", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.mmce.MMCE_weighted.get_out_tensor", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.mmce.MMCE_weighted.get_out_tensor", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.mmce.MMCE_weighted.get_out_tensor"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", "# N,C,H,W => N,C,H*W", "\n", "input", "=", "input", ".", "transpose", "(", "1", ",", "2", ")", "# N,C,H*W => N,H*W,C", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", "# N,H*W,C => N*H*W,C", "\n", "\n", "", "target", "=", "target", ".", "view", "(", "-", "1", ")", "#For CIFAR-10 and CIFAR-100, target.shape is [N] to begin with", "\n", "\n", "predicted_probs", "=", "F", ".", "softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "predicted_probs", ",", "predicted_labels", "=", "torch", ".", "max", "(", "predicted_probs", ",", "1", ")", "\n", "\n", "correct_mask", "=", "torch", ".", "where", "(", "torch", ".", "eq", "(", "predicted_labels", ",", "target", ")", ",", "\n", "torch", ".", "ones", "(", "predicted_labels", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "zeros", "(", "predicted_labels", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n", "k", "=", "torch", ".", "sum", "(", "correct_mask", ")", ".", "type", "(", "torch", ".", "int64", ")", "\n", "k_p", "=", "torch", ".", "sum", "(", "1.0", "-", "correct_mask", ")", ".", "type", "(", "torch", ".", "int64", ")", "\n", "cond_k", "=", "torch", ".", "where", "(", "torch", ".", "eq", "(", "k", ",", "0", ")", ",", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", ",", "torch", ".", "tensor", "(", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "cond_k_p", "=", "torch", ".", "where", "(", "torch", ".", "eq", "(", "k_p", ",", "0", ")", ",", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", ",", "torch", ".", "tensor", "(", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "k", "=", "torch", ".", "max", "(", "k", ",", "torch", ".", "tensor", "(", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "*", "cond_k", "*", "cond_k_p", "+", "(", "1", "-", "cond_k", "*", "cond_k_p", ")", "*", "2", "\n", "k_p", "=", "torch", ".", "max", "(", "k_p", ",", "torch", ".", "tensor", "(", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "*", "cond_k_p", "*", "cond_k", "+", "(", "(", "1", "-", "cond_k_p", "*", "cond_k", ")", "*", "\n", "(", "correct_mask", ".", "shape", "[", "0", "]", "-", "2", ")", ")", "\n", "\n", "\n", "correct_prob", ",", "_", "=", "torch", ".", "topk", "(", "predicted_probs", "*", "correct_mask", ",", "k", ")", "\n", "incorrect_prob", ",", "_", "=", "torch", ".", "topk", "(", "predicted_probs", "*", "(", "1", "-", "correct_mask", ")", ",", "k_p", ")", "\n", "\n", "correct_prob_pairs", ",", "incorrect_prob_pairs", ",", "correct_incorrect_pairs", "=", "self", ".", "get_pairs", "(", "correct_prob", ",", "incorrect_prob", ")", "\n", "\n", "correct_kernel", "=", "self", ".", "torch_kernel", "(", "correct_prob_pairs", ")", "\n", "incorrect_kernel", "=", "self", ".", "torch_kernel", "(", "incorrect_prob_pairs", ")", "\n", "correct_incorrect_kernel", "=", "self", ".", "torch_kernel", "(", "correct_incorrect_pairs", ")", "\n", "\n", "sampling_weights_correct", "=", "torch", ".", "mm", "(", "(", "1.0", "-", "correct_prob", ")", ".", "unsqueeze", "(", "1", ")", ",", "(", "1.0", "-", "correct_prob", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "correct_correct_vals", "=", "self", ".", "get_out_tensor", "(", "correct_kernel", ",", "\n", "sampling_weights_correct", ")", "\n", "sampling_weights_incorrect", "=", "torch", ".", "mm", "(", "incorrect_prob", ".", "unsqueeze", "(", "1", ")", ",", "incorrect_prob", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "incorrect_incorrect_vals", "=", "self", ".", "get_out_tensor", "(", "incorrect_kernel", ",", "\n", "sampling_weights_incorrect", ")", "\n", "sampling_correct_incorrect", "=", "torch", ".", "mm", "(", "(", "1.0", "-", "correct_prob", ")", ".", "unsqueeze", "(", "1", ")", ",", "incorrect_prob", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "correct_incorrect_vals", "=", "self", ".", "get_out_tensor", "(", "correct_incorrect_kernel", ",", "\n", "sampling_correct_incorrect", ")", "\n", "\n", "correct_denom", "=", "torch", ".", "sum", "(", "1.0", "-", "correct_prob", ")", "\n", "incorrect_denom", "=", "torch", ".", "sum", "(", "incorrect_prob", ")", "\n", "\n", "m", "=", "torch", ".", "sum", "(", "correct_mask", ")", "\n", "n", "=", "torch", ".", "sum", "(", "1.0", "-", "correct_mask", ")", "\n", "mmd_error", "=", "1.0", "/", "(", "m", "*", "m", "+", "1e-5", ")", "*", "torch", ".", "sum", "(", "correct_correct_vals", ")", "\n", "mmd_error", "+=", "1.0", "/", "(", "n", "*", "n", "+", "1e-5", ")", "*", "torch", ".", "sum", "(", "incorrect_incorrect_vals", ")", "\n", "mmd_error", "-=", "2.0", "/", "(", "m", "*", "n", "+", "1e-5", ")", "*", "torch", ".", "sum", "(", "correct_incorrect_vals", ")", "\n", "return", "torch", ".", "max", "(", "(", "cond_k", "*", "cond_k_p", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "*", "torch", ".", "sqrt", "(", "mmd_error", "+", "1e-10", ")", ",", "torch", ".", "tensor", "(", "0.0", ")", ".", "to", "(", "self", ".", "device", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__": [[35, 39], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "0", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalLossAdaptive", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.get_gamma_list": [[40, 54], ["range", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "pt[].item", "sorted", "gamma_list.append", "gamma_dic.keys", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "gamma_list.append"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append", "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.utils.logger.Logger.append"], ["", "def", "get_gamma_list", "(", "self", ",", "pt", ")", ":", "\n", "        ", "gamma_list", "=", "[", "]", "\n", "batch_size", "=", "pt", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "pt_sample", "=", "pt", "[", "i", "]", ".", "item", "(", ")", "\n", "if", "(", "pt_sample", ">=", "0.5", ")", ":", "\n", "                ", "gamma_list", ".", "append", "(", "self", ".", "gamma", ")", "\n", "continue", "\n", "# Choosing the gamma for the sample", "\n", "", "for", "key", "in", "sorted", "(", "gamma_dic", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "pt_sample", "<", "key", ":", "\n", "                    ", "gamma_list", ".", "append", "(", "gamma_dic", "[", "key", "]", ")", "\n", "break", "\n", "", "", "", "return", "torch", ".", "tensor", "(", "gamma_list", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.forward": [[55, 65], ["target.view.view.view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "logpt.view.view.gather", "logpt.view.view.view", "logpt.view.view.exp", "flsd.FocalLossAdaptive.get_gamma_list", "loss.mean", "loss.sum"], "methods", ["home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.FocalLossAdaptive.get_gamma_list"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "logpt", "=", "F", ".", "log_softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "logpt", "=", "logpt", ".", "gather", "(", "1", ",", "target", ")", "\n", "logpt", "=", "logpt", ".", "view", "(", "-", "1", ")", "\n", "pt", "=", "logpt", ".", "exp", "(", ")", "\n", "gamma", "=", "self", ".", "get_gamma_list", "(", "pt", ")", "\n", "loss", "=", "-", "1", "*", "(", "1", "-", "pt", ")", "**", "gamma", "*", "logpt", "\n", "if", "self", ".", "size_average", ":", "return", "loss", ".", "mean", "(", ")", "\n", "else", ":", "return", "loss", ".", "sum", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mdca-loss_mdca-calibration.solvers.flsd.get_gamma": [[17, 25], ["numpy.real", "numpy.log", "scipy.special.lambertw", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "function", ["None"], ["def", "get_gamma", "(", "p", "=", "0.2", ")", ":", "\n", "    ", "'''\n    Get the gamma for a given pt where the function g(p, gamma) = 1\n    '''", "\n", "y", "=", "(", "(", "1", "-", "p", ")", "**", "(", "1", "-", "(", "1", "-", "p", ")", "/", "(", "p", "*", "np", ".", "log", "(", "p", ")", ")", ")", "/", "(", "p", "*", "np", ".", "log", "(", "p", ")", ")", ")", "*", "np", ".", "log", "(", "1", "-", "p", ")", "\n", "gamma_complex", "=", "(", "1", "-", "p", ")", "/", "(", "p", "*", "np", ".", "log", "(", "p", ")", ")", "+", "lambertw", "(", "-", "y", "+", "1e-12", ",", "k", "=", "-", "1", ")", "/", "np", ".", "log", "(", "1", "-", "p", ")", "\n", "gamma", "=", "np", ".", "real", "(", "gamma_complex", ")", "#gamma for which p_t > p results in g(p_t,gamma)<1", "\n", "return", "gamma", "\n", "\n"]]}