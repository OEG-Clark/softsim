{"home.repos.pwc.inspect_result.Acciorocketships_pymarl2.None.experiments.arguments": [[6, 36], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "range", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "arguments", "(", ")", ":", "\n", "\t", "cli", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# the environment to use (separate run for each arg)", "\n", "cli", ".", "add_argument", "(", "\n", "\"--env\"", ",", "\n", "nargs", "=", "\"*\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "[", "\"sc2\"", "]", ",", "\n", ")", "\n", "\n", "# the config file to use (separate run for each arg)", "\n", "cli", ".", "add_argument", "(", "\n", "\"--config\"", ",", "\n", "nargs", "=", "\"*\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "[", "\"qgnn\"", "]", ",", "\n", ")", "\n", "\n", "# extra config arguments", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "\t\t", "cli", ".", "add_argument", "(", "\n", "\"--params%d\"", "%", "(", "i", "+", "1", ")", ",", "\n", "nargs", "=", "\"*\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "[", "]", ",", "\n", ")", "\n", "\n", "", "args", "=", "cli", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.None.experiments.build_cmd": [[38, 40], ["None"], "function", ["None"], ["", "def", "build_cmd", "(", "env", ",", "config", ",", "params", ")", ":", "\n", "\t", "return", "\"/usr/local/bin/python3.9 src/main.py --config={config} --env-config={env} with {params}\"", ".", "format", "(", "env", "=", "env", ",", "config", "=", "config", ",", "params", "=", "\" \"", ".", "join", "(", "params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.None.experiments.run_cmd": [[42, 45], ["os.system"], "function", ["None"], ["", "def", "run_cmd", "(", "cmd", ")", ":", "\n", "# print(cmd)", "\n", "\t", "os", ".", "system", "(", "cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.None.experiments.build_params": [[47, 60], ["getattr", "len", "experiments.build_params", "experiments.build_params", "new_list.append"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.None.experiments.build_params", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.None.experiments.build_params"], ["", "def", "build_params", "(", "args", ",", "params_list", ",", "i", ")", ":", "\n", "\t", "if", "i", "==", "N", ":", "\n", "\t\t", "return", "params_list", "\n", "", "argname_i", "=", "\"params%d\"", "%", "(", "i", "+", "1", ")", "\n", "params_i", "=", "getattr", "(", "args", ",", "argname_i", ")", "\n", "if", "len", "(", "params_i", ")", ">", "0", ":", "\n", "\t\t", "new_list", "=", "[", "]", "\n", "for", "params", "in", "params_list", ":", "\n", "\t\t\t", "for", "param_i", "in", "params_i", ":", "\n", "\t\t\t\t", "new_list", ".", "append", "(", "params", "+", "[", "param_i", "]", ")", "\n", "", "", "return", "build_params", "(", "args", ",", "new_list", ",", "i", "+", "1", ")", "\n", "", "else", ":", "\n", "\t\t", "return", "build_params", "(", "args", ",", "params_list", ",", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.src.main.my_main": [[26, 41], ["main.config_copy", "numpy.random.seed", "torch.manual_seed"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.src.main.config_copy", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.seed"], ["@", "ex", ".", "main", "\n", "def", "my_main", "(", "_run", ",", "_config", ",", "_log", ")", ":", "\n", "# Setting the random seed throughout the modules", "\n", "\t", "config", "=", "config_copy", "(", "_config", ")", "\n", "np", ".", "random", ".", "seed", "(", "config", "[", "\"seed\"", "]", ")", "\n", "th", ".", "manual_seed", "(", "config", "[", "\"seed\"", "]", ")", "\n", "# config['env_args']['seed'] = config[\"seed\"]", "\n", "config", "[", "'env_args'", "]", "[", "'save_replay'", "]", "=", "config", "[", "\"save_replay\"", "]", "\n", "config", "[", "'env_args'", "]", "[", "'render'", "]", "=", "config", "[", "\"render\"", "]", "\n", "\n", "# run", "\n", "if", "\"use_per\"", "in", "_config", "and", "_config", "[", "\"use_per\"", "]", ":", "\n", "\t\t", "run_REGISTRY", "[", "'per_run'", "]", "(", "_run", ",", "config", ",", "_log", ")", "\n", "", "else", ":", "\n", "\t\t", "run_REGISTRY", "[", "_config", "[", "'run'", "]", "]", "(", "_run", ",", "config", ",", "_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.src.main._get_config": [[42, 57], ["enumerate", "open", "_v.split", "_v.split", "os.path.join", "yaml.load", "os.path.dirname"], "function", ["None"], ["", "", "def", "_get_config", "(", "params", ",", "arg_name", ",", "subfolder", ")", ":", "\n", "\t", "config_name", "=", "None", "\n", "for", "_i", ",", "_v", "in", "enumerate", "(", "params", ")", ":", "\n", "\t\t", "if", "_v", ".", "split", "(", "\"=\"", ")", "[", "0", "]", "==", "arg_name", ":", "\n", "\t\t\t", "config_name", "=", "_v", ".", "split", "(", "\"=\"", ")", "[", "1", "]", "\n", "del", "params", "[", "_i", "]", "\n", "break", "\n", "\n", "", "", "if", "config_name", "is", "not", "None", ":", "\n", "\t\t", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"config\"", ",", "subfolder", ",", "\"{}.yaml\"", ".", "format", "(", "config_name", ")", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "config_dict", "=", "yaml", ".", "load", "(", "f", ")", "\n", "", "except", "yaml", ".", "YAMLError", "as", "exc", ":", "\n", "\t\t\t\t", "assert", "False", ",", "\"{}.yaml error: {}\"", ".", "format", "(", "config_name", ",", "exc", ")", "\n", "", "", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.src.main.recursive_dict_update": [[59, 66], ["u.items", "isinstance", "main.recursive_dict_update", "d.get"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.src.main.recursive_dict_update"], ["", "", "def", "recursive_dict_update", "(", "d", ",", "u", ")", ":", "\n", "\t", "for", "k", ",", "v", "in", "u", ".", "items", "(", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "v", ",", "collections", ".", "Mapping", ")", ":", "\n", "\t\t\t", "d", "[", "k", "]", "=", "recursive_dict_update", "(", "d", ".", "get", "(", "k", ",", "{", "}", ")", ",", "v", ")", "\n", "", "else", ":", "\n", "\t\t\t", "d", "[", "k", "]", "=", "v", "\n", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.src.main.config_copy": [[68, 75], ["isinstance", "isinstance", "main.config_copy", "copy.deepcopy", "config.items", "main.config_copy"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.src.main.config_copy", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.src.main.config_copy"], ["", "def", "config_copy", "(", "config", ")", ":", "\n", "\t", "if", "isinstance", "(", "config", ",", "dict", ")", ":", "\n", "\t\t", "return", "{", "k", ":", "config_copy", "(", "v", ")", "for", "k", ",", "v", "in", "config", ".", "items", "(", ")", "}", "\n", "", "elif", "isinstance", "(", "config", ",", "list", ")", ":", "\n", "\t\t", "return", "[", "config_copy", "(", "v", ")", "for", "v", "in", "config", "]", "\n", "", "else", ":", "\n", "\t\t", "return", "deepcopy", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.src.main.parse_command": [[77, 84], ["enumerate", "[].strip", "_v[].strip", "_v.split", "_v.index"], "function", ["None"], ["", "", "def", "parse_command", "(", "params", ",", "key", ",", "default", ")", ":", "\n", "\t", "result", "=", "default", "\n", "for", "_i", ",", "_v", "in", "enumerate", "(", "params", ")", ":", "\n", "\t\t", "if", "_v", ".", "split", "(", "\"=\"", ")", "[", "0", "]", ".", "strip", "(", ")", "==", "key", ":", "\n", "\t\t\t", "result", "=", "_v", "[", "_v", ".", "index", "(", "'='", ")", "+", "1", ":", "]", ".", "strip", "(", ")", "\n", "break", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.RunningMeanStd.__init__": [[64, 68], ["numpy.zeros", "numpy.ones"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-4", ",", "shape", "=", "(", ")", ")", ":", "\n", "        ", "self", ".", "mean", "=", "np", ".", "zeros", "(", "shape", ",", "'float64'", ")", "\n", "self", ".", "var", "=", "np", ".", "ones", "(", "shape", ",", "'float64'", ")", "\n", "self", ".", "count", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.RunningMeanStd.update": [[69, 74], ["numpy.mean", "numpy.var", "rl_utils.RunningMeanStd.update_from_moments"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.RunningMeanStd.update_from_moments"], ["", "def", "update", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_mean", "=", "np", ".", "mean", "(", "x", ",", "axis", "=", "0", ")", "\n", "batch_var", "=", "np", ".", "var", "(", "x", ",", "axis", "=", "0", ")", "\n", "batch_count", "=", "x", ".", "shape", "[", "0", "]", "\n", "self", ".", "update_from_moments", "(", "batch_mean", ",", "batch_var", ",", "batch_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.RunningMeanStd.update_from_moments": [[75, 90], ["numpy.square"], "methods", ["None"], ["", "def", "update_from_moments", "(", "self", ",", "batch_mean", ",", "batch_var", ",", "batch_count", ")", ":", "\n", "        ", "delta", "=", "batch_mean", "-", "self", ".", "mean", "\n", "tot_count", "=", "self", ".", "count", "+", "batch_count", "\n", "\n", "new_mean", "=", "self", ".", "mean", "+", "delta", "*", "batch_count", "/", "tot_count", "\n", "m_a", "=", "self", ".", "var", "*", "(", "self", ".", "count", ")", "\n", "m_b", "=", "batch_var", "*", "(", "batch_count", ")", "\n", "M2", "=", "m_a", "+", "m_b", "+", "np", ".", "square", "(", "delta", ")", "*", "self", ".", "count", "*", "batch_count", "/", "(", "self", ".", "count", "+", "batch_count", ")", "\n", "new_var", "=", "M2", "/", "(", "self", ".", "count", "+", "batch_count", ")", "\n", "\n", "new_count", "=", "batch_count", "+", "self", ".", "count", "\n", "\n", "self", ".", "mean", "=", "new_mean", "\n", "self", ".", "var", "=", "new_var", "\n", "self", ".", "count", "=", "new_count", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.build_td_lambda_targets": [[6, 17], ["target_qs.new_zeros", "range", "torch.sum"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["def", "build_td_lambda_targets", "(", "rewards", ",", "terminated", ",", "mask", ",", "target_qs", ",", "n_agents", ",", "gamma", ",", "td_lambda", ")", ":", "\n", "# Assumes  <target_qs > in B*T*A and <reward >, <terminated >, <mask > in (at least) B*T-1*1", "\n", "# Initialise  last  lambda -return  for  not  terminated  episodes", "\n", "    ", "ret", "=", "target_qs", ".", "new_zeros", "(", "*", "target_qs", ".", "shape", ")", "\n", "ret", "[", ":", ",", "-", "1", "]", "=", "target_qs", "[", ":", ",", "-", "1", "]", "*", "(", "1", "-", "th", ".", "sum", "(", "terminated", ",", "dim", "=", "1", ")", ")", "\n", "# Backwards  recursive  update  of the \"forward  view\"", "\n", "for", "t", "in", "range", "(", "ret", ".", "shape", "[", "1", "]", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "ret", "[", ":", ",", "t", "]", "=", "td_lambda", "*", "gamma", "*", "ret", "[", ":", ",", "t", "+", "1", "]", "+", "mask", "[", ":", ",", "t", "]", "*", "(", "rewards", "[", ":", ",", "t", "]", "+", "(", "1", "-", "td_lambda", ")", "*", "gamma", "*", "target_qs", "[", ":", ",", "t", "+", "1", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", "t", "]", ")", ")", "\n", "# Returns lambda-return from t=0 to t=T-1, i.e. in B*T-1*A", "\n", "", "return", "ret", "[", ":", ",", "0", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.build_gae_targets": [[19, 32], ["values.size", "torch.zeros().to", "torch.zeros().to", "reversed", "range", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to"], ["", "def", "build_gae_targets", "(", "rewards", ",", "masks", ",", "values", ",", "gamma", ",", "lambd", ")", ":", "\n", "    ", "B", ",", "T", ",", "A", ",", "_", "=", "values", ".", "size", "(", ")", "\n", "T", "-=", "1", "\n", "advantages", "=", "th", ".", "zeros", "(", "B", ",", "T", ",", "A", ",", "1", ")", ".", "to", "(", "device", "=", "values", ".", "device", ")", "\n", "advantage_t", "=", "th", ".", "zeros", "(", "B", ",", "A", ",", "1", ")", ".", "to", "(", "device", "=", "values", ".", "device", ")", "\n", "\n", "for", "t", "in", "reversed", "(", "range", "(", "T", ")", ")", ":", "\n", "        ", "delta", "=", "rewards", "[", ":", ",", "t", "]", "+", "values", "[", ":", ",", "t", "+", "1", "]", "*", "gamma", "*", "masks", "[", ":", ",", "t", "]", "-", "values", "[", ":", ",", "t", "]", "\n", "advantage_t", "=", "delta", "+", "advantage_t", "*", "gamma", "*", "lambd", "*", "masks", "[", ":", ",", "t", "]", "\n", "advantages", "[", ":", ",", "t", "]", "=", "advantage_t", "\n", "\n", "", "returns", "=", "values", "[", ":", ",", ":", "T", "]", "+", "advantages", "\n", "return", "advantages", ",", "returns", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.build_q_lambda_targets": [[34, 46], ["exp_qvals.new_zeros", "range", "torch.sum"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "build_q_lambda_targets", "(", "rewards", ",", "terminated", ",", "mask", ",", "exp_qvals", ",", "qvals", ",", "gamma", ",", "td_lambda", ")", ":", "\n", "# Assumes  <target_qs > in B*T*A and <reward >, <terminated >, <mask > in (at least) B*T-1*1", "\n", "# Initialise  last  lambda -return  for  not  terminated  episodes", "\n", "    ", "ret", "=", "exp_qvals", ".", "new_zeros", "(", "*", "exp_qvals", ".", "shape", ")", "\n", "ret", "[", ":", ",", "-", "1", "]", "=", "exp_qvals", "[", ":", ",", "-", "1", "]", "*", "(", "1", "-", "th", ".", "sum", "(", "terminated", ",", "dim", "=", "1", ")", ")", "\n", "# Backwards  recursive  update  of the \"forward  view\"", "\n", "for", "t", "in", "range", "(", "ret", ".", "shape", "[", "1", "]", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "reward", "=", "rewards", "[", ":", ",", "t", "]", "+", "exp_qvals", "[", ":", ",", "t", "]", "-", "qvals", "[", ":", ",", "t", "]", "#off-policy correction", "\n", "ret", "[", ":", ",", "t", "]", "=", "td_lambda", "*", "gamma", "*", "ret", "[", ":", ",", "t", "+", "1", "]", "+", "mask", "[", ":", ",", "t", "]", "*", "(", "reward", "+", "(", "1", "-", "td_lambda", ")", "*", "gamma", "*", "exp_qvals", "[", ":", ",", "t", "+", "1", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", "t", "]", ")", ")", "\n", "# Returns lambda-return from t=0 to t=T-1, i.e. in B*T-1*A", "\n", "", "return", "ret", "[", ":", ",", "0", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.build_target_q": [[48, 61], ["torch.zeros_like", "torch.zeros_like", "range", "torch.cat"], "function", ["None"], ["", "def", "build_target_q", "(", "td_q", ",", "target_q", ",", "mac", ",", "mask", ",", "gamma", ",", "td_lambda", ",", "n", ")", ":", "\n", "    ", "aug", "=", "th", ".", "zeros_like", "(", "td_q", "[", ":", ",", ":", "1", "]", ")", "\n", "\n", "#Tree diagram", "\n", "mac", "=", "mac", "[", ":", ",", ":", "-", "1", "]", "\n", "tree_q_vals", "=", "th", ".", "zeros_like", "(", "td_q", ")", "\n", "coeff", "=", "1.0", "\n", "t1", "=", "td_q", "[", ":", "]", "\n", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "        ", "tree_q_vals", "+=", "t1", "*", "coeff", "\n", "t1", "=", "th", ".", "cat", "(", "(", "(", "t1", "*", "mac", ")", "[", ":", ",", "1", ":", "]", ",", "aug", ")", ",", "dim", "=", "1", ")", "\n", "coeff", "*=", "gamma", "*", "td_lambda", "\n", "", "return", "target_q", "+", "tree_q_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.__init__": [[8, 15], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "console_logger", ")", ":", "\n", "        ", "self", ".", "console_logger", "=", "console_logger", "\n", "\n", "self", ".", "use_tb", "=", "False", "\n", "self", ".", "use_wandb", "=", "False", "\n", "\n", "self", ".", "stats", "=", "defaultdict", "(", "lambda", ":", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.setup_tb": [[16, 22], ["configure"], "methods", ["None"], ["", "def", "setup_tb", "(", "self", ",", "directory_name", ")", ":", "\n", "# Import here so it doesn't have to be installed if you don't use it", "\n", "        ", "from", "tensorboard_logger", "import", "configure", ",", "log_value", "\n", "configure", "(", "directory_name", ")", "\n", "self", ".", "tb_logger", "=", "log_value", "\n", "self", ".", "use_tb", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.setup_wandb": [[23, 41], ["isinstance", "isinstance", "args.__dict__.copy", "args.__dict__.copy.update", "wandb.init"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.th_utils.init"], ["", "def", "setup_wandb", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "use_wandb", "=", "True", "\n", "if", "isinstance", "(", "args", ".", "wandb_project", ",", "str", ")", ":", "\n", "            ", "project_name", "=", "args", ".", "wandb_project", "\n", "", "else", ":", "\n", "            ", "project_name", "=", "args", ".", "env", "+", "\"-\"", "+", "args", ".", "env_args", "[", "\"map_name\"", "]", "\n", "", "if", "isinstance", "(", "args", ".", "wandb", ",", "str", ")", ":", "\n", "            ", "group_name", "=", "args", ".", "wandb", "\n", "", "else", ":", "\n", "            ", "group_name", "=", "args", ".", "name", "\n", "", "config", "=", "args", ".", "__dict__", ".", "copy", "(", ")", "\n", "config", ".", "update", "(", "config", "[", "\"env_args\"", "]", ")", "\n", "del", "config", "[", "\"env_args\"", "]", "\n", "wandb", ".", "init", "(", "\n", "entity", "=", "args", ".", "wandb_user", ",", "\n", "project", "=", "project_name", ",", "\n", "group", "=", "group_name", ",", "\n", "config", "=", "config", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat": [[43, 51], ["logging.Logger.stats[].append", "logging.Logger.tb_logger", "wandb.log"], "methods", ["None"], ["", "def", "log_stat", "(", "self", ",", "key", ",", "value", ",", "t", ")", ":", "\n", "        ", "self", ".", "stats", "[", "key", "]", ".", "append", "(", "(", "t", ",", "value", ")", ")", "\n", "\n", "if", "self", ".", "use_tb", ":", "\n", "            ", "self", ".", "tb_logger", "(", "key", ",", "value", ",", "t", ")", "\n", "\n", "", "if", "self", ".", "use_wandb", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "key", ":", "value", "}", ",", "step", "=", "t", ",", "commit", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_video": [[52, 57], ["numpy.transpose", "wandb.Video", "wandb.log"], "methods", ["None"], ["", "", "def", "log_video", "(", "self", ",", "video", ",", "t", ",", "name", "=", "\"visualisation\"", ")", ":", "\n", "        ", "if", "self", ".", "use_wandb", ":", "\n", "            ", "vid_seq", "=", "np", ".", "transpose", "(", "video", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "# from (time x height x width x channel) to (time x channel x height x width)", "\n", "wandb_video", "=", "wandb", ".", "Video", "(", "vid_seq", ",", "fps", "=", "30", ",", "format", "=", "\"mp4\"", ")", "\n", "wandb", ".", "log", "(", "{", "name", ":", "wandb_video", "}", ",", "step", "=", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.print_recent_stats": [[58, 72], ["sorted", "logging.Logger.console_logger.info", "collections.defaultdict", "logging.Logger.stats.items", "torch.mean", "torch.tensor", "float"], "methods", ["None"], ["", "", "def", "print_recent_stats", "(", "self", ")", ":", "\n", "        ", "log_str", "=", "\"Recent Stats | t_env: {:>10} | Episode: {:>8}\\n\"", ".", "format", "(", "*", "self", ".", "stats", "[", "\"episode\"", "]", "[", "-", "1", "]", ")", "\n", "i", "=", "0", "\n", "for", "(", "k", ",", "v", ")", "in", "sorted", "(", "self", ".", "stats", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "k", "==", "\"episode\"", ":", "\n", "                ", "continue", "\n", "", "i", "+=", "1", "\n", "window", "=", "5", "if", "k", "!=", "\"epsilon\"", "else", "1", "\n", "item", "=", "\"{:.4f}\"", ".", "format", "(", "th", ".", "mean", "(", "th", ".", "tensor", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "self", ".", "stats", "[", "k", "]", "[", "-", "window", ":", "]", "]", ")", ")", ")", "\n", "log_str", "+=", "\"{:<25}{:>8}\"", ".", "format", "(", "k", "+", "\":\"", ",", "item", ")", "\n", "log_str", "+=", "\"\\n\"", "if", "i", "%", "4", "==", "0", "else", "\"\\t\"", "\n", "", "self", ".", "console_logger", ".", "info", "(", "log_str", ")", "\n", "# Reset stats to avoid accumulating logs in memory", "\n", "self", ".", "stats", "=", "defaultdict", "(", "lambda", ":", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.get_logger": [[75, 85], ["logging.getLogger", "logging.StreamHandler", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel"], "function", ["None"], ["", "", "def", "get_logger", "(", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "handlers", "=", "[", "]", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'[%(levelname)s %(asctime)s] %(name)s %(message)s'", ",", "'%H:%M:%S'", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "logger", ".", "setLevel", "(", "'DEBUG'", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.param_update.LinearHyper.__init__": [[10, 21], ["torch.nn.Module.__init__", "params[].reshape", "params[].reshape"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["\t", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "params", ",", "bias", "=", "True", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "input_dim", "\n", "self", ".", "out_features", "=", "output_dim", "\n", "self", ".", "batch", "=", "params", ".", "shape", "[", "0", "]", "\n", "self", ".", "include_bias", "=", "bias", "\n", "self", ".", "weight", "=", "params", "[", ":", ",", ":", "input_dim", "*", "output_dim", "]", ".", "reshape", "(", "self", ".", "batch", ",", "input_dim", ",", "output_dim", ")", "\n", "self", ".", "num_params", "=", "input_dim", "*", "output_dim", "\n", "if", "self", ".", "include_bias", ":", "\n", "\t\t\t", "self", ".", "bias", "=", "params", "[", ":", ",", "output_dim", "*", "input_dim", ":", "output_dim", "*", "input_dim", "+", "output_dim", "]", ".", "reshape", "(", "self", ".", "batch", ",", "1", ",", "output_dim", ")", "\n", "self", ".", "num_params", "+=", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.param_update.LinearHyper.__repr__": [[23, 25], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "\t\t", "return", "\"LinearHyper(in_features={infeat}, out_features={outfeat}, batch={batch}, bias={bias})\"", ".", "format", "(", "infeat", "=", "self", ".", "in_features", ",", "outfeat", "=", "self", ".", "out_features", ",", "batch", "=", "self", ".", "batch", ",", "bias", "=", "self", ".", "include_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.param_update.LinearHyper.forward": [[27, 42], ["len", "torch.bmm", "x.unsqueeze", "len", "torch.bmm", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "if", "len", "(", "x", ".", "shape", ")", "==", "2", ":", "\n", "# x: batch x in_dim", "\n", "\t\t\t", "y", "=", "torch", ".", "bmm", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "weight", ")", "\n", "if", "self", ".", "include_bias", ":", "\n", "\t\t\t\t", "y", "+=", "self", ".", "bias", "\n", "", "return", "y", "[", ":", ",", "0", ",", ":", "]", "\n", "", "elif", "len", "(", "x", ".", "shape", ")", "==", "3", ":", "\n", "# x: batch x N x in_dim", "\n", "\t\t\t", "y", "=", "torch", ".", "bmm", "(", "x", ",", "self", ".", "weight", ")", "\n", "if", "self", ".", "include_bias", ":", "\n", "\t\t\t\t", "y", "+=", "self", ".", "bias", "\n", "", "return", "y", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "\"Input shape of {shape} not valid in LinearHyper\"", ".", "format", "(", "x", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.param_update.batch_linear": [[45, 53], ["param_update.LinearHyper", "torch.abs"], "function", ["None"], ["", "", "", "def", "batch_linear", "(", "module", ",", "params", ",", "absweight", "=", "False", ")", ":", "\n", "\t", "input_dim", "=", "module", ".", "in_features", "\n", "output_dim", "=", "module", ".", "out_features", "\n", "bias", "=", "(", "module", ".", "bias", "!=", "None", ")", "\n", "linear", "=", "LinearHyper", "(", "input_dim", "=", "input_dim", ",", "output_dim", "=", "output_dim", ",", "params", "=", "params", ",", "bias", "=", "bias", ")", "\n", "if", "absweight", ":", "\n", "\t\t", "linear", ".", "weight", "=", "torch", ".", "abs", "(", "linear", ".", "weight", ")", "\n", "", "return", "linear", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.param_update.abs_linear": [[55, 58], ["torch.abs"], "function", ["None"], ["", "def", "abs_linear", "(", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t", "module", ".", "weight", ".", "data", "=", "torch", ".", "abs", "(", "module", ".", "weight", ".", "data", ")", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.param_update.update_module_params": [[60, 74], ["module._modules.items", "any", "isinstance", "isinstance", "submodule.children", "param_update.update_module_params", "filter_cond", "replace_func", "param_update.get_num_params", "param_update.select_index", "slice"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.param_update.update_module_params", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.param_update.get_num_params", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.select_index"], ["", "def", "update_module_params", "(", "module", ",", "params", "=", "None", ",", "i", "=", "0", ",", "param_dim", "=", "1", ",", "\n", "filter_cond", "=", "lambda", "module", ":", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "LinearHyper", ")", ",", "\n", "replace_func", "=", "lambda", "module", ",", "params", ":", "batch_linear", ")", ":", "\n", "# params: batch x n_params", "\n", "\t", "for", "name", ",", "submodule", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "\t\t", "if", "any", "(", "submodule", ".", "children", "(", ")", ")", ":", "\n", "\t\t\t", "update_module_params", "(", "submodule", ",", "params", "=", "params", ",", "filter_cond", "=", "filter_cond", ",", "replace_func", "=", "replace_func", ",", "i", "=", "i", ",", "param_dim", "=", "param_dim", ")", "\n", "", "elif", "filter_cond", "(", "submodule", ")", ":", "\n", "\t\t\t", "new_param", "=", "None", "\n", "if", "params", "is", "not", "None", ":", "\n", "\t\t\t\t", "num_params", "=", "get_num_params", "(", "submodule", ")", "\n", "new_param", "=", "select_index", "(", "params", ",", "dim", "=", "param_dim", ",", "idx", "=", "slice", "(", "i", ",", "i", "+", "num_params", ")", ")", "\n", "i", "+=", "num_params", "\n", "", "module", ".", "_modules", "[", "name", "]", "=", "replace_func", "(", "submodule", ",", "params", "=", "new_param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.param_update.get_num_params": [[76, 80], ["hasattr", "sum", "param.numel", "module.parameters"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters"], ["", "", "", "def", "get_num_params", "(", "module", ")", ":", "\n", "\t", "if", "hasattr", "(", "module", ",", "\"num_params\"", ")", ":", "\n", "\t\t", "return", "module", ".", "num_params", "\n", "", "return", "sum", "(", "param", ".", "numel", "(", ")", "for", "param", "in", "module", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.param_update.select_index": [[82, 85], ["arr.__getitem__", "slice"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.__getitem__"], ["", "def", "select_index", "(", "arr", ",", "dim", ",", "idx", ")", ":", "\n", "\t", "idx_list", "=", "[", "slice", "(", "None", ")", "]", "*", "dim", "+", "[", "idx", "]", "\n", "return", "arr", ".", "__getitem__", "(", "idx_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.noisy_liner.NoisyLinear.__init__": [[42, 56], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "noisy_liner.NoisyLinear.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "noisy_liner.NoisyLinear.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.value_norm.ValueNorm.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ":", "int", ",", "out_features", ":", "int", ",", "bias", ":", "bool", "=", "True", ",", "device", ":", "str", "=", "'cpu'", ")", "->", "None", ":", "\n", "        ", "super", "(", "NoisyLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "u_w", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "self", ".", "s_w", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "u_b", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "self", ".", "s_b", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.noisy_liner.NoisyLinear.reset_parameters": [[57, 63], ["torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", "->", "None", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "u_w", ",", "a", "=", "math", ".", "sqrt", "(", "3", "/", "self", ".", "in_features", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "s_w", ",", "0.017", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "u_b", ",", "a", "=", "math", ".", "sqrt", "(", "3", "/", "self", ".", "in_features", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "s_b", ",", "0.017", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.noisy_liner.NoisyLinear.forward": [[64, 74], ["torch.linear", "torch.linear", "torch.linear", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "e_w", "=", "torch", ".", "randn", "(", "self", ".", "s_w", ".", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "e_b", "=", "torch", ".", "randn", "(", "self", ".", "s_b", ".", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "weight", "=", "self", ".", "u_w", "+", "(", "self", ".", "s_w", "*", "e_w", ")", "\n", "bias", "=", "self", ".", "u_b", "+", "(", "self", ".", "s_b", "*", "e_b", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "self", ".", "u_w", "\n", "bias", "=", "self", ".", "u_b", "\n", "", "return", "F", ".", "linear", "(", "input", ",", "weight", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.noisy_liner.NoisyLinear.extra_repr": [[75, 78], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "'in_features={}, out_features={}, bias={}'", ".", "format", "(", "\n", "self", ".", "in_features", ",", "self", ".", "out_features", ",", "self", ".", "bias", "is", "not", "None", "\n", ")", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.th_utils.clip_by_tensor": [[4, 19], ["t.float.float", "t_min.float.float", "t_max.float.float"], "function", ["None"], ["def", "clip_by_tensor", "(", "t", ",", "t_min", ",", "t_max", ")", ":", "\n", "    ", "\"\"\"\n    clip_by_tensor\n    :param t: tensor\n    :param t_min: min\n    :param t_max: max\n    :return: cliped tensor\n    \"\"\"", "\n", "t", "=", "t", ".", "float", "(", ")", "\n", "t_min", "=", "t_min", ".", "float", "(", ")", "\n", "t_max", "=", "t_max", ".", "float", "(", ")", "\n", "\n", "result", "=", "(", "t", ">=", "t_min", ")", ".", "float", "(", ")", "*", "t", "+", "(", "t", "<", "t_min", ")", ".", "float", "(", ")", "*", "t_min", "\n", "result", "=", "(", "result", "<=", "t_max", ")", ".", "float", "(", ")", "*", "result", "+", "(", "result", ">", "t_max", ")", ".", "float", "(", ")", "*", "t_max", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.th_utils.get_parameters_num": [[20, 22], ["str", "sum", "p.numel"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "get_parameters_num", "(", "param_list", ")", ":", "\n", "    ", "return", "str", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "param_list", ")", "/", "1000", ")", "+", "'K'", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.th_utils.init": [[24, 28], ["bias_init", "torch.nn.init.orthogonal_"], "function", ["None"], ["", "def", "init", "(", "module", ",", "weight_init", ",", "bias_init", ",", "gain", "=", "1", ")", ":", "\n", "    ", "weight_init", "(", "module", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "bias_init", "(", "module", ".", "bias", ".", "data", ")", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.th_utils.orthogonal_init_": [[30, 34], ["isinstance", "th_utils.init", "torch.nn.init.constant_"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.th_utils.init"], ["", "def", "orthogonal_init_", "(", "m", ",", "gain", "=", "1", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "\n", "lambda", "x", ":", "nn", ".", "init", ".", "constant_", "(", "x", ",", "0", ")", ",", "gain", "=", "gain", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.dict2namedtuple.convert": [[4, 6], ["collections.namedtuple", "dictionary.keys"], "function", ["None"], ["def", "convert", "(", "dictionary", ")", ":", "\n", "    ", "return", "namedtuple", "(", "'GenericDict'", ",", "dictionary", ".", "keys", "(", ")", ")", "(", "**", "dictionary", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.timehelper.print_time": [[5, 15], ["max", "min", "print", "time.time", "len", "numpy.mean", "timehelper.time_str", "timehelper.time_str"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.timehelper.time_str", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.timehelper.time_str"], ["def", "print_time", "(", "start_time", ",", "T", ",", "t_max", ",", "episode", ",", "episode_rewards", ")", ":", "\n", "    ", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "T", "=", "max", "(", "1", ",", "T", ")", "\n", "time_left", "=", "time_elapsed", "*", "(", "t_max", "-", "T", ")", "/", "T", "\n", "# Just in case its over 100 days", "\n", "time_left", "=", "min", "(", "time_left", ",", "60", "*", "60", "*", "24", "*", "100", ")", "\n", "last_reward", "=", "\"N\\A\"", "\n", "if", "len", "(", "episode_rewards", ")", ">", "5", ":", "\n", "        ", "last_reward", "=", "\"{:.2f}\"", ".", "format", "(", "np", ".", "mean", "(", "episode_rewards", "[", "-", "50", ":", "]", ")", ")", "\n", "", "print", "(", "\"\\033[F\\033[F\\x1b[KEp: {:,}, T: {:,}/{:,}, Reward: {}, \\n\\x1b[KElapsed: {}, Left: {}\\n\"", ".", "format", "(", "episode", ",", "T", ",", "t_max", ",", "last_reward", ",", "time_str", "(", "time_elapsed", ")", ",", "time_str", "(", "time_left", ")", ")", ",", "\" \"", "*", "10", ",", "end", "=", "\"\\r\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.timehelper.time_left": [[17, 26], ["max", "min", "timehelper.time_str", "time.time"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.timehelper.time_str"], ["", "def", "time_left", "(", "start_time", ",", "t_start", ",", "t_current", ",", "t_max", ")", ":", "\n", "    ", "if", "t_current", ">=", "t_max", ":", "\n", "        ", "return", "\"-\"", "\n", "", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "t_current", "=", "max", "(", "1", ",", "t_current", ")", "\n", "time_left", "=", "time_elapsed", "*", "(", "t_max", "-", "t_current", ")", "/", "(", "t_current", "-", "t_start", ")", "\n", "# Just in case its over 100 days", "\n", "time_left", "=", "min", "(", "time_left", ",", "60", "*", "60", "*", "24", "*", "100", ")", "\n", "return", "time_str", "(", "time_left", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.timehelper.time_str": [[28, 44], ["divmod", "divmod", "divmod", "int", "int", "int", "int", "timehelper.time_left", "timehelper.time_left"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.timehelper.time_left", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.timehelper.time_left"], ["", "def", "time_str", "(", "s", ")", ":", "\n", "    ", "\"\"\"\n    Convert seconds to a nicer string showing days, hours, minutes and seconds\n    \"\"\"", "\n", "days", ",", "remainder", "=", "divmod", "(", "s", ",", "60", "*", "60", "*", "24", ")", "\n", "hours", ",", "remainder", "=", "divmod", "(", "remainder", ",", "60", "*", "60", ")", "\n", "minutes", ",", "seconds", "=", "divmod", "(", "remainder", ",", "60", ")", "\n", "string", "=", "\"\"", "\n", "if", "days", ">", "0", ":", "\n", "        ", "string", "+=", "\"{:d} days, \"", ".", "format", "(", "int", "(", "days", ")", ")", "\n", "", "if", "hours", ">", "0", ":", "\n", "        ", "string", "+=", "\"{:d} hours, \"", ".", "format", "(", "int", "(", "hours", ")", ")", "\n", "", "if", "minutes", ">", "0", ":", "\n", "        ", "string", "+=", "\"{:d} minutes, \"", ".", "format", "(", "int", "(", "minutes", ")", ")", "\n", "", "string", "+=", "\"{:d} seconds\"", ".", "format", "(", "int", "(", "seconds", ")", ")", "\n", "return", "string", "\n", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.value_norm.ValueNorm.__init__": [[10, 25], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "dict", "torch.Parameter().to", "torch.Parameter().to", "torch.Parameter().to", "torch.Parameter().to", "torch.Parameter().to", "torch.Parameter().to", "value_norm.ValueNorm.reset_parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.value_norm.ValueNorm.reset_parameters"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "norm_axes", "=", "1", ",", "beta", "=", "0.99999", ",", "per_element_update", "=", "False", ",", "epsilon", "=", "1e-5", ",", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", ":", "\n", "        ", "super", "(", "ValueNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_shape", "=", "input_shape", "\n", "self", ".", "norm_axes", "=", "norm_axes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "per_element_update", "=", "per_element_update", "\n", "self", ".", "tpdv", "=", "dict", "(", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "\n", "self", ".", "running_mean", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "input_shape", ")", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "**", "self", ".", "tpdv", ")", "\n", "self", ".", "running_mean_sq", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "input_shape", ")", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "**", "self", ".", "tpdv", ")", "\n", "self", ".", "debiasing_term", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.0", ")", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "**", "self", ".", "tpdv", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.value_norm.ValueNorm.reset_parameters": [[26, 30], ["value_norm.ValueNorm.running_mean.zero_", "value_norm.ValueNorm.running_mean_sq.zero_", "value_norm.ValueNorm.debiasing_term.zero_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_mean_sq", ".", "zero_", "(", ")", "\n", "self", ".", "debiasing_term", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.value_norm.ValueNorm.running_mean_var": [[31, 36], ["value_norm.ValueNorm.debiasing_term.clamp", "value_norm.ValueNorm.debiasing_term.clamp"], "methods", ["None"], ["", "def", "running_mean_var", "(", "self", ")", ":", "\n", "        ", "debiased_mean", "=", "self", ".", "running_mean", "/", "self", ".", "debiasing_term", ".", "clamp", "(", "min", "=", "self", ".", "epsilon", ")", "\n", "debiased_mean_sq", "=", "self", ".", "running_mean_sq", "/", "self", ".", "debiasing_term", ".", "clamp", "(", "min", "=", "self", ".", "epsilon", ")", "\n", "debiased_var", "=", "(", "debiased_mean_sq", "-", "debiased_mean", "**", "2", ")", ".", "clamp", "(", "min", "=", "1e-2", ")", "\n", "return", "debiased_mean", ",", "debiased_var", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.value_norm.ValueNorm.update": [[37, 55], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.from_numpy.to", "torch.from_numpy.to", "torch.from_numpy.mean", "torch.from_numpy.mean", "value_norm.ValueNorm.running_mean.mul_().add_", "value_norm.ValueNorm.running_mean_sq.mul_().add_", "value_norm.ValueNorm.debiasing_term.mul_().add_", "type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.prod", "tuple", "tuple", "value_norm.ValueNorm.running_mean.mul_", "value_norm.ValueNorm.running_mean_sq.mul_", "value_norm.ValueNorm.debiasing_term.mul_", "range", "range", "torch.from_numpy.size", "torch.from_numpy.size"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update", "(", "self", ",", "input_vector", ")", ":", "\n", "        ", "if", "type", "(", "input_vector", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "input_vector", "=", "torch", ".", "from_numpy", "(", "input_vector", ")", "\n", "", "input_vector", "=", "input_vector", ".", "to", "(", "**", "self", ".", "tpdv", ")", "\n", "\n", "batch_mean", "=", "input_vector", ".", "mean", "(", "dim", "=", "tuple", "(", "range", "(", "self", ".", "norm_axes", ")", ")", ")", "\n", "batch_sq_mean", "=", "(", "input_vector", "**", "2", ")", ".", "mean", "(", "dim", "=", "tuple", "(", "range", "(", "self", ".", "norm_axes", ")", ")", ")", "\n", "\n", "if", "self", ".", "per_element_update", ":", "\n", "            ", "batch_size", "=", "np", ".", "prod", "(", "input_vector", ".", "size", "(", ")", "[", ":", "self", ".", "norm_axes", "]", ")", "\n", "weight", "=", "self", ".", "beta", "**", "batch_size", "\n", "", "else", ":", "\n", "            ", "weight", "=", "self", ".", "beta", "\n", "\n", "", "self", ".", "running_mean", ".", "mul_", "(", "weight", ")", ".", "add_", "(", "batch_mean", "*", "(", "1.0", "-", "weight", ")", ")", "\n", "self", ".", "running_mean_sq", ".", "mul_", "(", "weight", ")", ".", "add_", "(", "batch_sq_mean", "*", "(", "1.0", "-", "weight", ")", ")", "\n", "self", ".", "debiasing_term", ".", "mul_", "(", "weight", ")", ".", "add_", "(", "1.0", "*", "(", "1.0", "-", "weight", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.value_norm.ValueNorm.normalize": [[56, 66], ["torch.from_numpy.to", "torch.from_numpy.to", "value_norm.ValueNorm.running_mean_var", "type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.value_norm.ValueNorm.running_mean_var"], ["", "def", "normalize", "(", "self", ",", "input_vector", ")", ":", "\n", "# Make sure input is float32", "\n", "        ", "if", "type", "(", "input_vector", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "input_vector", "=", "torch", ".", "from_numpy", "(", "input_vector", ")", "\n", "", "input_vector", "=", "input_vector", ".", "to", "(", "**", "self", ".", "tpdv", ")", "\n", "\n", "mean", ",", "var", "=", "self", ".", "running_mean_var", "(", ")", "\n", "out", "=", "(", "input_vector", "-", "mean", "[", "(", "None", ",", ")", "*", "self", ".", "norm_axes", "]", ")", "/", "torch", ".", "sqrt", "(", "var", ")", "[", "(", "None", ",", ")", "*", "self", ".", "norm_axes", "]", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.value_norm.ValueNorm.denormalize": [[67, 77], ["torch.from_numpy.to", "torch.from_numpy.to", "value_norm.ValueNorm.running_mean_var", "type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.value_norm.ValueNorm.running_mean_var"], ["", "def", "denormalize", "(", "self", ",", "input_vector", ")", ":", "\n", "        ", "\"\"\" Transform normalized data back into original distribution \"\"\"", "\n", "if", "type", "(", "input_vector", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "input_vector", "=", "torch", ".", "from_numpy", "(", "input_vector", ")", "\n", "", "input_vector", "=", "input_vector", ".", "to", "(", "**", "self", ".", "tpdv", ")", "\n", "\n", "mean", ",", "var", "=", "self", ".", "running_mean_var", "(", ")", "\n", "out", "=", "input_vector", "*", "torch", ".", "sqrt", "(", "var", ")", "[", "(", "None", ",", ")", "*", "self", ".", "norm_axes", "]", "+", "mean", "[", "(", "None", ",", ")", "*", "self", ".", "norm_axes", "]", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.transforms.Transform.transform": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "transform", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.transforms.Transform.infer_output_info": [[8, 10], ["None"], "methods", ["None"], ["", "def", "infer_output_info", "(", "self", ",", "vshape_in", ",", "dtype_in", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.transforms.OneHot.__init__": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "out_dim", ")", ":", "\n", "        ", "self", ".", "out_dim", "=", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.transforms.OneHot.transform": [[16, 20], ["tensor.new().zero_", "tensor.new().zero_.scatter_", "tensor.new().zero_.float", "tensor.long", "tensor.new"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "y_onehot", "=", "tensor", ".", "new", "(", "*", "tensor", ".", "shape", "[", ":", "-", "1", "]", ",", "self", ".", "out_dim", ")", ".", "zero_", "(", ")", "\n", "y_onehot", ".", "scatter_", "(", "-", "1", ",", "tensor", ".", "long", "(", ")", ",", "1", ")", "\n", "return", "y_onehot", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.transforms.OneHot.infer_output_info": [[21, 23], ["None"], "methods", ["None"], ["", "def", "infer_output_info", "(", "self", ",", "vshape_in", ",", "dtype_in", ")", ":", "\n", "        ", "return", "(", "self", ".", "out_dim", ",", ")", ",", "th", ".", "float32", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GumbelSoftmax.__init__": [[9, 13], ["torch.distributions.one_hot_categorical.OneHotCategorical.__init__"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "logits", ",", "probs", "=", "None", ",", "temperature", "=", "1", ")", ":", "\n", "        ", "super", "(", "GumbelSoftmax", ",", "self", ")", ".", "__init__", "(", "logits", "=", "logits", ",", "probs", "=", "probs", ")", "\n", "self", ".", "eps", "=", "1e-20", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GumbelSoftmax.sample_gumbel": [[14, 18], ["action_selectors.GumbelSoftmax.logits.clone", "action_selectors.GumbelSoftmax.uniform_", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "sample_gumbel", "(", "self", ")", ":", "\n", "        ", "U", "=", "self", ".", "logits", ".", "clone", "(", ")", "\n", "U", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "return", "-", "th", ".", "log", "(", "-", "th", ".", "log", "(", "U", "+", "self", ".", "eps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GumbelSoftmax.gumbel_softmax_sample": [[19, 22], ["torch.softmax", "action_selectors.GumbelSoftmax.sample_gumbel"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GumbelSoftmax.sample_gumbel"], ["", "def", "gumbel_softmax_sample", "(", "self", ")", ":", "\n", "        ", "y", "=", "self", ".", "logits", "+", "self", ".", "sample_gumbel", "(", ")", "\n", "return", "th", ".", "softmax", "(", "y", "/", "self", ".", "temperature", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GumbelSoftmax.hard_gumbel_softmax_sample": [[23, 26], ["action_selectors.GumbelSoftmax.gumbel_softmax_sample", "torch.max"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GumbelSoftmax.gumbel_softmax_sample"], ["", "def", "hard_gumbel_softmax_sample", "(", "self", ")", ":", "\n", "        ", "y", "=", "self", ".", "gumbel_softmax_sample", "(", ")", "\n", "return", "(", "th", ".", "max", "(", "y", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "==", "y", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GumbelSoftmax.rsample": [[27, 29], ["action_selectors.GumbelSoftmax.gumbel_softmax_sample"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GumbelSoftmax.gumbel_softmax_sample"], ["", "def", "rsample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "gumbel_softmax_sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GumbelSoftmax.sample": [[30, 32], ["action_selectors.GumbelSoftmax.rsample().detach", "action_selectors.GumbelSoftmax.rsample"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GumbelSoftmax.rsample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rsample", "(", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GumbelSoftmax.hard_sample": [[33, 35], ["action_selectors.GumbelSoftmax.hard_gumbel_softmax_sample"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GumbelSoftmax.hard_gumbel_softmax_sample"], ["", "def", "hard_sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "hard_gumbel_softmax_sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GumbelSoftmaxMultinomialActionSelector.__init__": [[44, 52], ["pymarl.components.epsilon_schedules.DecayThenFlatSchedule", "action_selectors.GumbelSoftmaxMultinomialActionSelector.schedule.eval", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.epsilon_schedules.LinearIncreaseSchedule.eval"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "schedule", "=", "DecayThenFlatSchedule", "(", "args", ".", "epsilon_start", ",", "args", ".", "epsilon_finish", ",", "args", ".", "epsilon_anneal_time", ",", "\n", "decay", "=", "\"linear\"", ")", "\n", "self", ".", "epsilon", "=", "self", ".", "schedule", ".", "eval", "(", "0", ")", "\n", "self", ".", "test_greedy", "=", "getattr", "(", "args", ",", "\"test_greedy\"", ",", "True", ")", "\n", "self", ".", "save_probs", "=", "getattr", "(", "self", ".", "args", ",", "'save_probs'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GumbelSoftmaxMultinomialActionSelector.select_action": [[53, 67], ["agent_logits.clone", "action_selectors.GumbelSoftmaxMultinomialActionSelector.schedule.eval", "action_selectors.GumbelSoftmax.sample", "torch.argmax().long", "agent_logits.clone.max", "action_selectors.GumbelSoftmax", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.epsilon_schedules.LinearIncreaseSchedule.eval", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.sample"], ["", "def", "select_action", "(", "self", ",", "agent_logits", ",", "avail_actions", ",", "t_env", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "masked_policies", "=", "agent_logits", ".", "clone", "(", ")", "\n", "self", ".", "epsilon", "=", "self", ".", "schedule", ".", "eval", "(", "t_env", ")", "\n", "\n", "if", "test_mode", "and", "self", ".", "test_greedy", ":", "\n", "            ", "picked_actions", "=", "masked_policies", ".", "max", "(", "dim", "=", "2", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "picked_actions", "=", "GumbelSoftmax", "(", "logits", "=", "masked_policies", ")", ".", "sample", "(", ")", "\n", "picked_actions", "=", "th", ".", "argmax", "(", "picked_actions", ",", "dim", "=", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "", "if", "self", ".", "save_probs", ":", "\n", "            ", "return", "picked_actions", ",", "masked_policies", "\n", "", "else", ":", "\n", "            ", "return", "picked_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.MultinomialActionSelector.__init__": [[74, 83], ["pymarl.components.epsilon_schedules.DecayThenFlatSchedule", "action_selectors.MultinomialActionSelector.schedule.eval", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.epsilon_schedules.LinearIncreaseSchedule.eval"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "schedule", "=", "DecayThenFlatSchedule", "(", "args", ".", "epsilon_start", ",", "args", ".", "epsilon_finish", ",", "args", ".", "epsilon_anneal_time", ",", "\n", "decay", "=", "\"linear\"", ")", "\n", "self", ".", "epsilon", "=", "self", ".", "schedule", ".", "eval", "(", "0", ")", "\n", "\n", "self", ".", "test_greedy", "=", "getattr", "(", "args", ",", "\"test_greedy\"", ",", "True", ")", "\n", "self", ".", "save_probs", "=", "getattr", "(", "self", ".", "args", ",", "'save_probs'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.MultinomialActionSelector.select_action": [[84, 105], ["agent_inputs.clone", "action_selectors.MultinomialActionSelector.schedule.eval", "torch.distributions.Categorical().sample().long", "agent_inputs.clone.sum", "agent_inputs.clone.max", "avail_actions.sum", "torch.distributions.Categorical().sample", "torch.distributions.Categorical"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.epsilon_schedules.LinearIncreaseSchedule.eval", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.sample"], ["", "def", "select_action", "(", "self", ",", "agent_inputs", ",", "avail_actions", ",", "t_env", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "masked_policies", "=", "agent_inputs", ".", "clone", "(", ")", "\n", "masked_policies", "[", "avail_actions", "==", "0", "]", "=", "0", "\n", "masked_policies", "=", "masked_policies", "/", "(", "masked_policies", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n", "if", "test_mode", "and", "self", ".", "test_greedy", ":", "\n", "            ", "picked_actions", "=", "masked_policies", ".", "max", "(", "dim", "=", "2", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "epsilon", "=", "self", ".", "schedule", ".", "eval", "(", "t_env", ")", "\n", "\n", "epsilon_action_num", "=", "(", "avail_actions", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "masked_policies", "=", "(", "(", "1", "-", "self", ".", "epsilon", ")", "*", "masked_policies", "\n", "+", "avail_actions", "*", "self", ".", "epsilon", "/", "epsilon_action_num", ")", "\n", "masked_policies", "[", "avail_actions", "==", "0", "]", "=", "0", "\n", "\n", "picked_actions", "=", "Categorical", "(", "masked_policies", ")", ".", "sample", "(", ")", ".", "long", "(", ")", "\n", "\n", "", "if", "self", ".", "save_probs", ":", "\n", "            ", "return", "picked_actions", ",", "masked_policies", "\n", "", "else", ":", "\n", "            ", "return", "picked_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.EpsilonGreedyActionSelector.__init__": [[115, 121], ["pymarl.components.epsilon_schedules.DecayThenFlatSchedule", "action_selectors.EpsilonGreedyActionSelector.schedule.eval"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.epsilon_schedules.LinearIncreaseSchedule.eval"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "schedule", "=", "DecayThenFlatSchedule", "(", "args", ".", "epsilon_start", ",", "args", ".", "epsilon_finish", ",", "args", ".", "epsilon_anneal_time", ",", "\n", "decay", "=", "\"linear\"", ")", "\n", "self", ".", "epsilon", "=", "self", ".", "schedule", ".", "eval", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.EpsilonGreedyActionSelector.select_action": [[123, 146], ["action_selectors.EpsilonGreedyActionSelector.schedule.eval", "agent_inputs.clone", "torch.rand_like", "torch.distributions.Categorical().sample().long", "getattr", "float", "torch.distributions.Categorical().sample", "agent_inputs.clone.max", "torch.distributions.Categorical", "avail_actions.float", "avail_actions.sum"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.epsilon_schedules.LinearIncreaseSchedule.eval", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "select_action", "(", "self", ",", "agent_inputs", ",", "avail_actions", ",", "t_env", ",", "test_mode", "=", "False", ")", ":", "\n", "\n", "# Assuming agent_inputs is a batch of Q-Values for each agent bav", "\n", "        ", "self", ".", "epsilon", "=", "self", ".", "schedule", ".", "eval", "(", "t_env", ")", "\n", "\n", "if", "test_mode", ":", "\n", "# Greedy action selection only", "\n", "            ", "self", ".", "epsilon", "=", "getattr", "(", "self", ".", "args", ",", "\"test_noise\"", ",", "0.0", ")", "\n", "\n", "# mask actions that are excluded from selection", "\n", "", "masked_q_values", "=", "agent_inputs", ".", "clone", "(", ")", "\n", "masked_q_values", "[", "avail_actions", "==", "0", "]", "=", "-", "float", "(", "\"inf\"", ")", "# should never be selected!", "\n", "\n", "random_numbers", "=", "th", ".", "rand_like", "(", "agent_inputs", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "pick_random", "=", "(", "random_numbers", "<", "self", ".", "epsilon", ")", ".", "long", "(", ")", "\n", "\n", "# When all actions are 0, set them to 1 to avoid error with Categorical sampling", "\n", "avail_actions", "[", "(", "avail_actions", ".", "sum", "(", "dim", "=", "-", "1", ")", "==", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "avail_actions", ".", "shape", "[", "-", "1", "]", ")", "]", "=", "1", "\n", "\n", "random_actions", "=", "Categorical", "(", "avail_actions", ".", "float", "(", ")", ")", ".", "sample", "(", ")", ".", "long", "(", ")", "\n", "\n", "picked_actions", "=", "pick_random", "*", "random_actions", "+", "(", "1", "-", "pick_random", ")", "*", "masked_q_values", ".", "max", "(", "dim", "=", "2", ")", "[", "1", "]", "\n", "return", "picked_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GaussianActionSelector.__init__": [[153, 156], ["getattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "test_greedy", "=", "getattr", "(", "args", ",", "\"test_greedy\"", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GaussianActionSelector.select_action": [[157, 179], ["sigma.view.view.view", "mu.dim", "sigma.view.view.dim", "torch.distributions.MultivariateNormal", "mu.view", "sigma.view.view.view", "torch.distributions.MultivariateNormal.sample().view", "torch.distributions.MultivariateNormal.sample"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.sample"], ["", "def", "select_action", "(", "self", ",", "mu", ",", "sigma", ",", "test_mode", "=", "False", ")", ":", "\n", "# Expects the following input dimensions:", "\n", "# mu: [b x a x u]", "\n", "# sigma: [b x a x u x u]", "\n", "        ", "assert", "mu", ".", "dim", "(", ")", "==", "3", ",", "\"incorrect input dim: mu\"", "\n", "assert", "sigma", ".", "dim", "(", ")", "==", "3", ",", "\"incorrect input dim: sigma\"", "\n", "sigma", "=", "sigma", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "n_agents", ",", "self", ".", "args", ".", "n_actions", ",", "self", ".", "args", ".", "n_actions", ")", "\n", "\n", "if", "test_mode", "and", "self", ".", "test_greedy", ":", "\n", "            ", "picked_actions", "=", "mu", "\n", "", "else", ":", "\n", "            ", "dst", "=", "th", ".", "distributions", ".", "MultivariateNormal", "(", "mu", ".", "view", "(", "-", "1", ",", "\n", "mu", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "sigma", ".", "view", "(", "-", "1", ",", "\n", "mu", ".", "shape", "[", "-", "1", "]", ",", "\n", "mu", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "try", ":", "\n", "                ", "picked_actions", "=", "dst", ".", "sample", "(", ")", ".", "view", "(", "*", "mu", ".", "shape", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "a", "=", "5", "\n", "pass", "\n", "", "", "return", "picked_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.multinomial_entropy": [[36, 39], ["GumbelSoftmax().entropy", "logits.size", "action_selectors.GumbelSoftmax"], "function", ["None"], ["", "", "def", "multinomial_entropy", "(", "logits", ")", ":", "\n", "    ", "assert", "logits", ".", "size", "(", "-", "1", ")", ">", "1", "\n", "return", "GumbelSoftmax", "(", "logits", "=", "logits", ")", ".", "entropy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.categorical_entropy": [[108, 111], ["torch.distributions.Categorical().entropy", "probs.size", "torch.distributions.Categorical"], "function", ["None"], ["def", "categorical_entropy", "(", "probs", ")", ":", "\n", "    ", "assert", "probs", ".", "size", "(", "-", "1", ")", ">", "1", "\n", "return", "Categorical", "(", "probs", "=", "probs", ")", ".", "entropy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.epsilon_schedules.DecayThenFlatSchedule.__init__": [[6, 20], ["numpy.log"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "start", ",", "\n", "finish", ",", "\n", "time_length", ",", "\n", "decay", "=", "\"exp\"", ")", ":", "\n", "\n", "        ", "self", ".", "start", "=", "start", "\n", "self", ".", "finish", "=", "finish", "\n", "self", ".", "time_length", "=", "time_length", "\n", "self", ".", "delta", "=", "(", "self", ".", "start", "-", "self", ".", "finish", ")", "/", "self", ".", "time_length", "\n", "self", ".", "decay", "=", "decay", "\n", "\n", "if", "self", ".", "decay", "in", "[", "\"exp\"", "]", ":", "\n", "            ", "self", ".", "exp_scaling", "=", "(", "-", "1", ")", "*", "self", ".", "time_length", "/", "np", ".", "log", "(", "self", ".", "finish", ")", "if", "self", ".", "finish", ">", "0", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.epsilon_schedules.DecayThenFlatSchedule.eval": [[21, 26], ["max", "min", "max", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min"], ["", "", "def", "eval", "(", "self", ",", "T", ")", ":", "\n", "        ", "if", "self", ".", "decay", "in", "[", "\"linear\"", "]", ":", "\n", "            ", "return", "max", "(", "self", ".", "finish", ",", "self", ".", "start", "-", "self", ".", "delta", "*", "T", ")", "\n", "", "elif", "self", ".", "decay", "in", "[", "\"exp\"", "]", ":", "\n", "            ", "return", "min", "(", "self", ".", "start", ",", "max", "(", "self", ".", "finish", ",", "np", ".", "exp", "(", "-", "T", "/", "self", ".", "exp_scaling", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.epsilon_schedules.LinearIncreaseSchedule.__init__": [[29, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "start", ",", "\n", "finish", ",", "\n", "time_length", ")", ":", "\n", "\n", "        ", "self", ".", "start", "=", "start", "\n", "self", ".", "finish", "=", "finish", "\n", "self", ".", "time_length", "=", "time_length", "\n", "self", ".", "delta", "=", "(", "self", ".", "start", "-", "self", ".", "finish", ")", "/", "self", ".", "time_length", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.epsilon_schedules.LinearIncreaseSchedule.eval": [[39, 41], ["min"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min"], ["", "def", "eval", "(", "self", ",", "T", ")", ":", "\n", "        ", "return", "min", "(", "self", ".", "finish", ",", "self", ".", "start", "-", "self", ".", "delta", "*", "T", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SegmentTree.__init__": [[6, 32], ["range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ",", "operation", ",", "neutral_element", ")", ":", "\n", "        ", "\"\"\"Build a Segment Tree data structure.\n        https://en.wikipedia.org/wiki/Segment_tree\n        Can be used as regular array, but with two\n        important differences:\n            a) setting item's value is slightly slower.\n               It is O(lg capacity) instead of O(1).\n            b) user has access to an efficient ( O(log segment size) )\n               `reduce` operation which reduces `operation` over\n               a contiguous subsequence of items in the array.\n        Paramters\n        ---------\n        capacity: int\n            Total size of the array - must be a power of two.\n        operation: lambda obj, obj -> obj\n            and operation for combining elements (eg. sum, max)\n            must form a mathematical group together with the set of\n            possible values for array elements (i.e. be associative)\n        neutral_element: obj\n            neutral element for the operation above. eg. float('-inf')\n            for max and 0 for sum.\n        \"\"\"", "\n", "assert", "capacity", ">", "0", "and", "capacity", "&", "(", "capacity", "-", "1", ")", "==", "0", ",", "\"capacity must be positive and a power of 2.\"", "\n", "self", ".", "_capacity", "=", "capacity", "\n", "self", ".", "_value", "=", "[", "neutral_element", "for", "_", "in", "range", "(", "2", "*", "capacity", ")", "]", "\n", "self", ".", "_operation", "=", "operation", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SegmentTree._reduce_helper": [[33, 46], ["segment_tree.SegmentTree._reduce_helper", "segment_tree.SegmentTree._reduce_helper", "segment_tree.SegmentTree._operation", "segment_tree.SegmentTree._reduce_helper", "segment_tree.SegmentTree._reduce_helper"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SegmentTree._reduce_helper", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SegmentTree._reduce_helper", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SegmentTree._reduce_helper", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SegmentTree._reduce_helper"], ["", "def", "_reduce_helper", "(", "self", ",", "start", ",", "end", ",", "node", ",", "node_start", ",", "node_end", ")", ":", "\n", "        ", "if", "start", "==", "node_start", "and", "end", "==", "node_end", ":", "\n", "            ", "return", "self", ".", "_value", "[", "node", "]", "\n", "", "mid", "=", "(", "node_start", "+", "node_end", ")", "//", "2", "\n", "if", "end", "<=", "mid", ":", "\n", "            ", "return", "self", ".", "_reduce_helper", "(", "start", ",", "end", ",", "2", "*", "node", ",", "node_start", ",", "mid", ")", "\n", "", "else", ":", "\n", "            ", "if", "mid", "+", "1", "<=", "start", ":", "\n", "                ", "return", "self", ".", "_reduce_helper", "(", "start", ",", "end", ",", "2", "*", "node", "+", "1", ",", "mid", "+", "1", ",", "node_end", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "_operation", "(", "\n", "self", ".", "_reduce_helper", "(", "start", ",", "mid", ",", "2", "*", "node", ",", "node_start", ",", "mid", ")", ",", "\n", "self", ".", "_reduce_helper", "(", "mid", "+", "1", ",", "end", ",", "2", "*", "node", "+", "1", ",", "mid", "+", "1", ",", "node_end", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SegmentTree.reduce": [[48, 69], ["segment_tree.SegmentTree._reduce_helper"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SegmentTree._reduce_helper"], ["", "", "", "def", "reduce", "(", "self", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns result of applying `self.operation`\n        to a contiguous subsequence of the array.\n            self.operation(arr[start], operation(arr[start+1], operation(... arr[end])))\n        Parameters\n        ----------\n        start: int\n            beginning of the subsequence\n        end: int\n            end of the subsequences\n        Returns\n        -------\n        reduced: obj\n            result of reducing self.operation over the specified range of array elements.\n        \"\"\"", "\n", "if", "end", "is", "None", ":", "\n", "            ", "end", "=", "self", ".", "_capacity", "\n", "", "if", "end", "<", "0", ":", "\n", "            ", "end", "+=", "self", ".", "_capacity", "\n", "", "end", "-=", "1", "\n", "return", "self", ".", "_reduce_helper", "(", "start", ",", "end", ",", "1", ",", "0", ",", "self", ".", "_capacity", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SegmentTree.__setitem__": [[70, 81], ["segment_tree.SegmentTree._operation"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "idx", ",", "val", ")", ":", "\n", "# index of the leaf", "\n", "        ", "idx", "+=", "self", ".", "_capacity", "\n", "self", ".", "_value", "[", "idx", "]", "=", "val", "\n", "idx", "//=", "2", "\n", "while", "idx", ">=", "1", ":", "\n", "            ", "self", ".", "_value", "[", "idx", "]", "=", "self", ".", "_operation", "(", "\n", "self", ".", "_value", "[", "2", "*", "idx", "]", ",", "\n", "self", ".", "_value", "[", "2", "*", "idx", "+", "1", "]", "\n", ")", "\n", "idx", "//=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SegmentTree.__getitem__": [[82, 85], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "0", "<=", "idx", "<", "self", ".", "_capacity", "\n", "return", "self", ".", "_value", "[", "self", ".", "_capacity", "+", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.__init__": [[88, 93], ["segment_tree.SegmentTree.__init__"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "super", "(", "SumSegmentTree", ",", "self", ")", ".", "__init__", "(", "\n", "capacity", "=", "capacity", ",", "\n", "operation", "=", "operator", ".", "add", ",", "\n", "neutral_element", "=", "0.0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum": [[95, 98], ["segment_tree.SegmentTree.reduce"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SegmentTree.reduce"], ["", "def", "sum", "(", "self", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns arr[start] + ... + arr[end]\"\"\"", "\n", "return", "super", "(", "SumSegmentTree", ",", "self", ")", ".", "reduce", "(", "start", ",", "end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.find_prefixsum_idx": [[99, 123], ["segment_tree.SumSegmentTree.sum"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "find_prefixsum_idx", "(", "self", ",", "prefixsum", ")", ":", "\n", "        ", "\"\"\"Find the highest index `i` in the array such that\n            sum(arr[0] + arr[1] + ... + arr[i - i]) <= prefixsum\n        if array values are probabilities, this function\n        allows to sample indexes according to the discrete\n        probability efficiently.\n        Parameters\n        ----------\n        perfixsum: float\n            upperbound on the sum of array prefix\n        Returns\n        -------\n        idx: int\n            highest index satisfying the prefixsum constraint\n        \"\"\"", "\n", "assert", "0", "<=", "prefixsum", "<=", "self", ".", "sum", "(", ")", "+", "1e-5", "\n", "idx", "=", "1", "\n", "while", "idx", "<", "self", ".", "_capacity", ":", "# while non-leaf", "\n", "            ", "if", "self", ".", "_value", "[", "2", "*", "idx", "]", ">", "prefixsum", ":", "\n", "                ", "idx", "=", "2", "*", "idx", "\n", "", "else", ":", "\n", "                ", "prefixsum", "-=", "self", ".", "_value", "[", "2", "*", "idx", "]", "\n", "idx", "=", "2", "*", "idx", "+", "1", "\n", "", "", "return", "idx", "-", "self", ".", "_capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.__init__": [[126, 131], ["segment_tree.SegmentTree.__init__", "float"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "super", "(", "MinSegmentTree", ",", "self", ")", ".", "__init__", "(", "\n", "capacity", "=", "capacity", ",", "\n", "operation", "=", "min", ",", "\n", "neutral_element", "=", "float", "(", "'inf'", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min": [[133, 137], ["segment_tree.SegmentTree.reduce"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SegmentTree.reduce"], ["", "def", "min", "(", "self", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns min(arr[start], ...,  arr[end])\"\"\"", "\n", "\n", "return", "super", "(", "MinSegmentTree", ",", "self", ")", ".", "reduce", "(", "start", ",", "end", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.__init__": [[9, 31], ["scheme.copy", "types.SimpleNamespace", "episode_buffer.EpisodeBatch._setup_data"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch._setup_data"], ["    ", "def", "__init__", "(", "self", ",", "\n", "scheme", ",", "\n", "groups", ",", "\n", "batch_size", ",", "\n", "max_seq_length", ",", "\n", "data", "=", "None", ",", "\n", "preprocess", "=", "None", ",", "\n", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "self", ".", "scheme", "=", "scheme", ".", "copy", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "self", ".", "preprocess", "=", "{", "}", "if", "preprocess", "is", "None", "else", "preprocess", "\n", "self", ".", "device", "=", "device", "# TODO: store on cpu", "\n", "\n", "if", "data", "is", "not", "None", ":", "\n", "            ", "self", ".", "data", "=", "data", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "SN", "(", ")", "\n", "self", ".", "data", ".", "transition_data", "=", "{", "}", "\n", "self", ".", "data", ".", "episode_data", "=", "{", "}", "\n", "self", ".", "_setup_data", "(", "self", ".", "scheme", ",", "self", ".", "groups", ",", "batch_size", ",", "max_seq_length", ",", "self", ".", "preprocess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch._setup_data": [[32, 86], ["scheme.update", "scheme.items", "field_info.get", "field_info.get", "field_info.get", "isinstance", "torch.zeros", "torch.zeros", "transform.infer_output_info", "numpy.empty", "numpy.empty"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.transforms.OneHot.infer_output_info"], ["", "", "def", "_setup_data", "(", "self", ",", "scheme", ",", "groups", ",", "batch_size", ",", "max_seq_length", ",", "preprocess", ")", ":", "\n", "        ", "if", "preprocess", "is", "not", "None", ":", "\n", "            ", "for", "k", "in", "preprocess", ":", "\n", "                ", "assert", "k", "in", "scheme", "\n", "new_k", "=", "preprocess", "[", "k", "]", "[", "0", "]", "\n", "transforms", "=", "preprocess", "[", "k", "]", "[", "1", "]", "\n", "\n", "vshape", "=", "self", ".", "scheme", "[", "k", "]", "[", "\"vshape\"", "]", "\n", "dtype", "=", "self", ".", "scheme", "[", "k", "]", "[", "\"dtype\"", "]", "\n", "for", "transform", "in", "transforms", ":", "\n", "                    ", "vshape", ",", "dtype", "=", "transform", ".", "infer_output_info", "(", "vshape", ",", "dtype", ")", "\n", "\n", "", "self", ".", "scheme", "[", "new_k", "]", "=", "{", "\n", "\"vshape\"", ":", "vshape", ",", "\n", "\"dtype\"", ":", "dtype", "\n", "}", "\n", "if", "\"group\"", "in", "self", ".", "scheme", "[", "k", "]", ":", "\n", "                    ", "self", ".", "scheme", "[", "new_k", "]", "[", "\"group\"", "]", "=", "self", ".", "scheme", "[", "k", "]", "[", "\"group\"", "]", "\n", "", "if", "\"episode_const\"", "in", "self", ".", "scheme", "[", "k", "]", ":", "\n", "                    ", "self", ".", "scheme", "[", "new_k", "]", "[", "\"episode_const\"", "]", "=", "self", ".", "scheme", "[", "k", "]", "[", "\"episode_const\"", "]", "\n", "\n", "", "", "", "assert", "\"filled\"", "not", "in", "scheme", ",", "'\"filled\" is a reserved key for masking.'", "\n", "scheme", ".", "update", "(", "{", "\n", "\"filled\"", ":", "{", "\"vshape\"", ":", "(", "1", ",", ")", ",", "\"dtype\"", ":", "th", ".", "long", "}", ",", "\n", "}", ")", "\n", "\n", "for", "field_key", ",", "field_info", "in", "scheme", ".", "items", "(", ")", ":", "\n", "            ", "assert", "\"vshape\"", "in", "field_info", ",", "\"Scheme must define vshape for {}\"", ".", "format", "(", "field_key", ")", "\n", "vshape", "=", "field_info", "[", "\"vshape\"", "]", "\n", "episode_const", "=", "field_info", ".", "get", "(", "\"episode_const\"", ",", "False", ")", "\n", "group", "=", "field_info", ".", "get", "(", "\"group\"", ",", "None", ")", "\n", "dtype", "=", "field_info", ".", "get", "(", "\"dtype\"", ",", "th", ".", "float32", ")", "\n", "\n", "if", "isinstance", "(", "vshape", ",", "int", ")", ":", "\n", "                ", "vshape", "=", "(", "vshape", ",", ")", "\n", "\n", "", "if", "dtype", "==", "Data", ":", "\n", "# self.data.transition_data[field_key] = np.array([[Data(x=th.zeros(0,*vshape[0]), edge_index=th.zeros(2,0), edge_attr=th.zeros(0,*vshape[1])) for t in range(max_seq_length)] for b in range(batch_size)])", "\n", "                ", "if", "episode_const", ":", "\n", "                    ", "self", ".", "data", ".", "episode_data", "[", "field_key", "]", "=", "np", ".", "empty", "(", "(", "batch_size", ",", ")", ",", "dtype", "=", "object", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "data", ".", "transition_data", "[", "field_key", "]", "=", "np", ".", "empty", "(", "(", "batch_size", ",", "max_seq_length", ")", ",", "dtype", "=", "object", ")", "\n", "", "continue", "\n", "\n", "", "if", "group", ":", "\n", "                ", "assert", "group", "in", "groups", ",", "\"Group {} must have its number of members defined in _groups_\"", ".", "format", "(", "group", ")", "\n", "shape", "=", "(", "groups", "[", "group", "]", ",", "*", "vshape", ")", "\n", "", "else", ":", "\n", "                ", "shape", "=", "vshape", "\n", "\n", "", "if", "episode_const", ":", "\n", "                ", "self", ".", "data", ".", "episode_data", "[", "field_key", "]", "=", "th", ".", "zeros", "(", "(", "batch_size", ",", "*", "shape", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "data", ".", "transition_data", "[", "field_key", "]", "=", "th", ".", "zeros", "(", "(", "batch_size", ",", "max_seq_length", ",", "*", "shape", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.extend": [[87, 89], ["episode_buffer.EpisodeBatch._setup_data"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch._setup_data"], ["", "", "", "def", "extend", "(", "self", ",", "scheme", ",", "groups", "=", "None", ")", ":", "\n", "        ", "self", ".", "_setup_data", "(", "scheme", ",", "self", ".", "groups", "if", "groups", "is", "None", "else", "groups", ",", "self", ".", "batch_size", ",", "self", ".", "max_seq_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to": [[90, 102], ["episode_buffer.EpisodeBatch.data.transition_data.items", "episode_buffer.EpisodeBatch.data.episode_data.items", "isinstance", "isinstance", "v.to", "isinstance", "list", "v.to", "isinstance", "list", "map", "map", "v.reshape", "v.reshape", "x.to", "x.to"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "self", ".", "data", ".", "transition_data", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "th", ".", "Tensor", ")", ":", "\n", "                ", "self", ".", "data", ".", "transition_data", "[", "k", "]", "=", "v", ".", "to", "(", "device", ")", "\n", "", "if", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", "and", "v", ".", "dtype", "==", "object", ":", "\n", "                ", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "to", "(", "device", ")", ",", "v", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", ")", ")", "\n", "", "", "for", "k", ",", "v", "in", "self", ".", "data", ".", "episode_data", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "th", ".", "Tensor", ")", ":", "\n", "                ", "self", ".", "data", ".", "episode_data", "[", "k", "]", "=", "v", ".", "to", "(", "device", ")", "\n", "", "if", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", "and", "v", ".", "dtype", "==", "object", ":", "\n", "                ", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "to", "(", "device", ")", ",", "v", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", ")", ")", "\n", "", "", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update": [[103, 139], ["slice", "slice", "episode_buffer.EpisodeBatch._parse_slices", "data.items", "isinstance", "list", "KeyError", "map", "isinstance", "isinstance", "list", "episode_buffer.EpisodeBatch.scheme[].get", "isinstance", "torch.as_tensor", "episode_buffer.EpisodeBatch._check_safe_view", "transform.transform.view_as", "tuple", "len", "map", "numpy.array", "transform.transform.view_as", "x.to", "isinstance", "transform.transform.tolist", "transform.transform.reshape", "tuple", "transform.transform", "x.to"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch._parse_slices", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch._check_safe_view", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.transforms.OneHot.transform", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to"], ["", "def", "update", "(", "self", ",", "data", ",", "bs", "=", "slice", "(", "None", ")", ",", "ts", "=", "slice", "(", "None", ")", ",", "mark_filled", "=", "True", ")", ":", "\n", "        ", "slices", "=", "self", ".", "_parse_slices", "(", "(", "bs", ",", "ts", ")", ")", "\n", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "self", ".", "data", ".", "transition_data", ":", "\n", "                ", "target", "=", "self", ".", "data", ".", "transition_data", "\n", "if", "mark_filled", ":", "\n", "                    ", "target", "[", "\"filled\"", "]", "[", "slices", "]", "=", "1", "\n", "mark_filled", "=", "False", "\n", "", "_slices", "=", "slices", "\n", "", "elif", "k", "in", "self", ".", "data", ".", "episode_data", ":", "\n", "                ", "target", "=", "self", ".", "data", ".", "episode_data", "\n", "_slices", "=", "slices", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "raise", "KeyError", "(", "\"{} not found in transition or episode data\"", ".", "format", "(", "k", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "v", "[", "0", "]", ",", "Data", ")", ":", "\n", "                ", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "to", "(", "self", ".", "device", ")", ",", "v", ".", "tolist", "(", ")", "if", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", "else", "v", ")", ")", "\n", "target", "[", "k", "]", "[", "tuple", "(", "_slices", ")", "]", "=", "[", "[", "e", "]", "for", "e", "in", "v", "]", "\n", "", "elif", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", "and", "len", "(", "v", ".", "shape", ")", "==", "2", "and", "isinstance", "(", "v", "[", "0", ",", "0", "]", ",", "Data", ")", ":", "\n", "                ", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "to", "(", "self", ".", "device", ")", ",", "v", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", ")", ")", "\n", "target", "[", "k", "]", "[", "tuple", "(", "_slices", ")", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "dtype", "=", "self", ".", "scheme", "[", "k", "]", ".", "get", "(", "\"dtype\"", ",", "th", ".", "float32", ")", "\n", "if", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "v", "=", "np", ".", "array", "(", "v", ")", "\n", "", "v", "=", "th", ".", "as_tensor", "(", "v", ",", "dtype", "=", "dtype", ",", "device", "=", "self", ".", "device", ")", "\n", "# v = th.tensor(v, dtype=dtype, device=self.device)", "\n", "self", ".", "_check_safe_view", "(", "v", ",", "target", "[", "k", "]", "[", "_slices", "]", ")", "\n", "target", "[", "k", "]", "[", "_slices", "]", "=", "v", ".", "view_as", "(", "target", "[", "k", "]", "[", "_slices", "]", ")", "\n", "\n", "if", "k", "in", "self", ".", "preprocess", ":", "\n", "                    ", "new_k", "=", "self", ".", "preprocess", "[", "k", "]", "[", "0", "]", "\n", "v", "=", "target", "[", "k", "]", "[", "_slices", "]", "\n", "for", "transform", "in", "self", ".", "preprocess", "[", "k", "]", "[", "1", "]", ":", "\n", "                        ", "v", "=", "transform", ".", "transform", "(", "v", ")", "\n", "", "target", "[", "new_k", "]", "[", "_slices", "]", "=", "v", ".", "view_as", "(", "target", "[", "new_k", "]", "[", "_slices", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch._check_safe_view": [[140, 148], ["len", "ValueError"], "methods", ["None"], ["", "", "", "", "def", "_check_safe_view", "(", "self", ",", "v", ",", "dest", ")", ":", "\n", "        ", "idx", "=", "len", "(", "v", ".", "shape", ")", "-", "1", "\n", "for", "s", "in", "dest", ".", "shape", "[", ":", ":", "-", "1", "]", ":", "\n", "            ", "if", "v", ".", "shape", "[", "idx", "]", "!=", "s", ":", "\n", "                ", "if", "s", "!=", "1", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Unsafe reshape of {} to {}\"", ".", "format", "(", "v", ".", "shape", ",", "dest", ".", "shape", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "idx", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.__getitem__": [[149, 186], ["isinstance", "isinstance", "all", "episode_buffer.EpisodeBatch._new_data_sn", "episode_buffer.EpisodeBatch", "episode_buffer.EpisodeBatch._parse_slices", "episode_buffer.EpisodeBatch._new_data_sn", "episode_buffer.EpisodeBatch.data.transition_data.items", "episode_buffer.EpisodeBatch.data.episode_data.items", "episode_buffer.EpisodeBatch._get_num_items", "episode_buffer.EpisodeBatch._get_num_items", "episode_buffer.EpisodeBatch", "isinstance", "KeyError"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch._new_data_sn", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch._parse_slices", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch._new_data_sn", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch._get_num_items", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch._get_num_items"], ["", "", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "str", ")", ":", "\n", "            ", "if", "item", "in", "self", ".", "data", ".", "episode_data", ":", "\n", "                ", "return", "self", ".", "data", ".", "episode_data", "[", "item", "]", "\n", "", "elif", "item", "in", "self", ".", "data", ".", "transition_data", ":", "\n", "                ", "return", "self", ".", "data", ".", "transition_data", "[", "item", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "\n", "", "", "elif", "isinstance", "(", "item", ",", "tuple", ")", "and", "all", "(", "[", "isinstance", "(", "it", ",", "str", ")", "for", "it", "in", "item", "]", ")", ":", "\n", "            ", "new_data", "=", "self", ".", "_new_data_sn", "(", ")", "\n", "for", "key", "in", "item", ":", "\n", "                ", "if", "key", "in", "self", ".", "data", ".", "transition_data", ":", "\n", "                    ", "new_data", ".", "transition_data", "[", "key", "]", "=", "self", ".", "data", ".", "transition_data", "[", "key", "]", "\n", "", "elif", "key", "in", "self", ".", "data", ".", "episode_data", ":", "\n", "                    ", "new_data", ".", "episode_data", "[", "key", "]", "=", "self", ".", "data", ".", "episode_data", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "KeyError", "(", "\"Unrecognised key {}\"", ".", "format", "(", "key", ")", ")", "\n", "\n", "# Update the scheme to only have the requested keys", "\n", "", "", "new_scheme", "=", "{", "key", ":", "self", ".", "scheme", "[", "key", "]", "for", "key", "in", "item", "}", "\n", "new_groups", "=", "{", "self", ".", "scheme", "[", "key", "]", "[", "\"group\"", "]", ":", "self", ".", "groups", "[", "self", ".", "scheme", "[", "key", "]", "[", "\"group\"", "]", "]", "\n", "for", "key", "in", "item", "if", "\"group\"", "in", "self", ".", "scheme", "[", "key", "]", "}", "\n", "ret", "=", "EpisodeBatch", "(", "new_scheme", ",", "new_groups", ",", "self", ".", "batch_size", ",", "self", ".", "max_seq_length", ",", "data", "=", "new_data", ",", "device", "=", "self", ".", "device", ")", "\n", "return", "ret", "\n", "", "else", ":", "\n", "            ", "item", "=", "self", ".", "_parse_slices", "(", "item", ")", "\n", "new_data", "=", "self", ".", "_new_data_sn", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "data", ".", "transition_data", ".", "items", "(", ")", ":", "\n", "                ", "new_data", ".", "transition_data", "[", "k", "]", "=", "v", "[", "item", "]", "\n", "", "for", "k", ",", "v", "in", "self", ".", "data", ".", "episode_data", ".", "items", "(", ")", ":", "\n", "                ", "new_data", ".", "episode_data", "[", "k", "]", "=", "v", "[", "item", "[", "0", "]", "]", "\n", "\n", "", "ret_bs", "=", "self", ".", "_get_num_items", "(", "item", "[", "0", "]", ",", "self", ".", "batch_size", ")", "\n", "ret_max_t", "=", "self", ".", "_get_num_items", "(", "item", "[", "1", "]", ",", "self", ".", "max_seq_length", ")", "\n", "\n", "ret", "=", "EpisodeBatch", "(", "self", ".", "scheme", ",", "self", ".", "groups", ",", "ret_bs", ",", "ret_max_t", ",", "data", "=", "new_data", ",", "device", "=", "self", ".", "device", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch._get_num_items": [[187, 193], ["isinstance", "isinstance", "len", "isinstance", "indexing_item.indices"], "methods", ["None"], ["", "", "def", "_get_num_items", "(", "self", ",", "indexing_item", ",", "max_size", ")", ":", "\n", "        ", "if", "isinstance", "(", "indexing_item", ",", "list", ")", "or", "isinstance", "(", "indexing_item", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "len", "(", "indexing_item", ")", "\n", "", "elif", "isinstance", "(", "indexing_item", ",", "slice", ")", ":", "\n", "            ", "_range", "=", "indexing_item", ".", "indices", "(", "max_size", ")", "\n", "return", "1", "+", "(", "_range", "[", "1", "]", "-", "_range", "[", "0", "]", "-", "1", ")", "//", "_range", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch._new_data_sn": [[194, 199], ["types.SimpleNamespace"], "methods", ["None"], ["", "", "def", "_new_data_sn", "(", "self", ")", ":", "\n", "        ", "new_data", "=", "SN", "(", ")", "\n", "new_data", ".", "transition_data", "=", "{", "}", "\n", "new_data", ".", "episode_data", "=", "{", "}", "\n", "return", "new_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch._parse_slices": [[200, 222], ["isinstance", "tuple", "isinstance", "isinstance", "isinstance", "IndexError", "isinstance", "slice", "parsed.append", "parsed.append", "slice"], "methods", ["None"], ["", "def", "_parse_slices", "(", "self", ",", "items", ")", ":", "\n", "        ", "parsed", "=", "[", "]", "\n", "# Only batch slice given, add full time slice", "\n", "if", "(", "isinstance", "(", "items", ",", "slice", ")", "# slice a:b", "\n", "or", "isinstance", "(", "items", ",", "int", ")", "# int i", "\n", "or", "(", "isinstance", "(", "items", ",", "(", "list", ",", "np", ".", "ndarray", ",", "th", ".", "LongTensor", ",", "th", ".", "cuda", ".", "LongTensor", ")", ")", ")", "# [a,b,c]", "\n", ")", ":", "\n", "            ", "items", "=", "(", "items", ",", "slice", "(", "None", ")", ")", "\n", "\n", "# Need the time indexing to be contiguous", "\n", "", "if", "isinstance", "(", "items", "[", "1", "]", ",", "list", ")", ":", "\n", "            ", "raise", "IndexError", "(", "\"Indexing across Time must be contiguous\"", ")", "\n", "\n", "", "for", "item", "in", "items", ":", "\n", "#TODO: stronger checks to ensure only supported options get through", "\n", "            ", "if", "isinstance", "(", "item", ",", "int", ")", ":", "\n", "# Convert single indices to slices", "\n", "                ", "parsed", ".", "append", "(", "slice", "(", "item", ",", "item", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "# Leave slices and lists as is", "\n", "                ", "parsed", ".", "append", "(", "item", ")", "\n", "", "", "return", "tuple", "(", "parsed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.max_t_filled": [[223, 225], ["torch.sum().max", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "max_t_filled", "(", "self", ")", ":", "\n", "        ", "return", "th", ".", "sum", "(", "self", ".", "data", ".", "transition_data", "[", "\"filled\"", "]", ",", "1", ")", ".", "max", "(", "0", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.__repr__": [[226, 231], ["episode_buffer.EpisodeBatch.scheme.keys", "episode_buffer.EpisodeBatch.groups.keys"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"EpisodeBatch. Batch Size:{} Max_seq_len:{} Keys:{} Groups:{}\"", ".", "format", "(", "self", ".", "batch_size", ",", "\n", "self", ".", "max_seq_length", ",", "\n", "self", ".", "scheme", ".", "keys", "(", ")", ",", "\n", "self", ".", "groups", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.__init__": [[234, 239], ["episode_buffer.EpisodeBatch.__init__"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scheme", ",", "groups", ",", "buffer_size", ",", "max_seq_length", ",", "preprocess", "=", "None", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "super", "(", "ReplayBuffer", ",", "self", ")", ".", "__init__", "(", "scheme", ",", "groups", ",", "buffer_size", ",", "max_seq_length", ",", "preprocess", "=", "preprocess", ",", "device", "=", "device", ")", "\n", "self", ".", "buffer_size", "=", "buffer_size", "# same as self.batch_size but more explicit", "\n", "self", ".", "buffer_index", "=", "0", "\n", "self", ".", "episodes_in_buffer", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.insert_episode_batch": [[240, 256], ["episode_buffer.ReplayBuffer.update", "episode_buffer.ReplayBuffer.update", "max", "episode_buffer.ReplayBuffer.insert_episode_batch", "episode_buffer.ReplayBuffer.insert_episode_batch", "slice", "slice", "slice"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.insert_episode_batch", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.insert_episode_batch"], ["", "def", "insert_episode_batch", "(", "self", ",", "ep_batch", ")", ":", "\n", "        ", "if", "self", ".", "buffer_index", "+", "ep_batch", ".", "batch_size", "<=", "self", ".", "buffer_size", ":", "\n", "            ", "self", ".", "update", "(", "ep_batch", ".", "data", ".", "transition_data", ",", "\n", "slice", "(", "self", ".", "buffer_index", ",", "self", ".", "buffer_index", "+", "ep_batch", ".", "batch_size", ")", ",", "\n", "slice", "(", "0", ",", "ep_batch", ".", "max_seq_length", ")", ",", "\n", "mark_filled", "=", "False", ")", "\n", "self", ".", "update", "(", "ep_batch", ".", "data", ".", "episode_data", ",", "\n", "slice", "(", "self", ".", "buffer_index", ",", "self", ".", "buffer_index", "+", "ep_batch", ".", "batch_size", ")", ")", "\n", "self", ".", "buffer_index", "=", "(", "self", ".", "buffer_index", "+", "ep_batch", ".", "batch_size", ")", "\n", "self", ".", "episodes_in_buffer", "=", "max", "(", "self", ".", "episodes_in_buffer", ",", "self", ".", "buffer_index", ")", "\n", "self", ".", "buffer_index", "=", "self", ".", "buffer_index", "%", "self", ".", "buffer_size", "\n", "assert", "self", ".", "buffer_index", "<", "self", ".", "buffer_size", "\n", "", "else", ":", "\n", "            ", "buffer_left", "=", "self", ".", "buffer_size", "-", "self", ".", "buffer_index", "\n", "self", ".", "insert_episode_batch", "(", "ep_batch", "[", "0", ":", "buffer_left", ",", ":", "]", ")", "\n", "self", ".", "insert_episode_batch", "(", "ep_batch", "[", "buffer_left", ":", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.can_sample": [[257, 259], ["None"], "methods", ["None"], ["", "", "def", "can_sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "return", "self", ".", "episodes_in_buffer", ">=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.sample": [[260, 268], ["episode_buffer.ReplayBuffer.can_sample", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.can_sample"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "assert", "self", ".", "can_sample", "(", "batch_size", ")", "\n", "if", "self", ".", "episodes_in_buffer", "==", "batch_size", ":", "\n", "            ", "return", "self", "[", ":", "batch_size", "]", "\n", "", "else", ":", "\n", "# Uniform sampling only atm", "\n", "            ", "ep_ids", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "episodes_in_buffer", ",", "batch_size", ",", "replace", "=", "False", ")", "\n", "return", "self", "[", "ep_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.uni_sample": [[269, 271], ["episode_buffer.ReplayBuffer.sample"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.sample"], ["", "", "def", "uni_sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "return", "self", ".", "sample", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.sample_latest": [[272, 280], ["episode_buffer.ReplayBuffer.can_sample", "episode_buffer.ReplayBuffer.uni_sample"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.can_sample", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.uni_sample"], ["", "def", "sample_latest", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "assert", "self", ".", "can_sample", "(", "batch_size", ")", "\n", "if", "self", ".", "buffer_index", "-", "batch_size", "<", "0", ":", "\n", "#Uniform sampling", "\n", "            ", "return", "self", ".", "uni_sample", "(", "batch_size", ")", "\n", "", "else", ":", "\n", "# Return the latest", "\n", "            ", "return", "self", "[", "self", ".", "buffer_index", "-", "batch_size", ":", "self", ".", "buffer_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.__repr__": [[281, 286], ["episode_buffer.ReplayBuffer.scheme.keys", "episode_buffer.ReplayBuffer.groups.keys"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"ReplayBuffer. {}/{} episodes. Keys:{} Groups:{}\"", ".", "format", "(", "self", ".", "episodes_in_buffer", ",", "\n", "self", ".", "buffer_size", ",", "\n", "self", ".", "scheme", ".", "keys", "(", ")", ",", "\n", "self", ".", "groups", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.__init__": [[290, 305], ["episode_buffer.ReplayBuffer.__init__", "pymarl.components.segment_tree.SumSegmentTree", "pymarl.components.segment_tree.MinSegmentTree"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scheme", ",", "groups", ",", "buffer_size", ",", "max_seq_length", ",", "alpha", ",", "beta", ",", "t_max", ",", "preprocess", "=", "None", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "super", "(", "PrioritizedReplayBuffer", ",", "self", ")", ".", "__init__", "(", "scheme", ",", "groups", ",", "buffer_size", ",", "max_seq_length", ",", "\n", "preprocess", "=", "preprocess", ",", "device", "=", "\"cpu\"", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta_original", "=", "beta", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "beta_increment", "=", "(", "1.0", "-", "beta", ")", "/", "t_max", "\n", "self", ".", "max_priority", "=", "1.0", "\n", "\n", "it_capacity", "=", "1", "\n", "while", "it_capacity", "<", "buffer_size", ":", "\n", "            ", "it_capacity", "*=", "2", "\n", "\n", "", "self", ".", "_it_sum", "=", "SumSegmentTree", "(", "it_capacity", ")", "\n", "self", ".", "_it_min", "=", "MinSegmentTree", "(", "it_capacity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.insert_episode_batch": [[306, 322], ["episode_buffer.ReplayBuffer.insert_episode_batch", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.insert_episode_batch"], ["", "def", "insert_episode_batch", "(", "self", ",", "ep_batch", ")", ":", "\n", "# TODO: convert batch/episode to idx?", "\n", "        ", "pre_idx", "=", "self", ".", "buffer_index", "\n", "super", "(", ")", ".", "insert_episode_batch", "(", "ep_batch", ")", "\n", "idx", "=", "self", ".", "buffer_index", "\n", "if", "idx", ">=", "pre_idx", ":", "\n", "            ", "for", "i", "in", "range", "(", "idx", "-", "pre_idx", ")", ":", "\n", "                ", "self", ".", "_it_sum", "[", "pre_idx", "+", "i", "]", "=", "self", ".", "max_priority", "**", "self", ".", "alpha", "\n", "self", ".", "_it_min", "[", "pre_idx", "+", "i", "]", "=", "self", ".", "max_priority", "**", "self", ".", "alpha", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "buffer_size", "-", "pre_idx", ")", ":", "\n", "                ", "self", ".", "_it_sum", "[", "pre_idx", "+", "i", "]", "=", "self", ".", "max_priority", "**", "self", ".", "alpha", "\n", "self", ".", "_it_min", "[", "pre_idx", "+", "i", "]", "=", "self", ".", "max_priority", "**", "self", ".", "alpha", "\n", "", "for", "i", "in", "range", "(", "self", ".", "buffer_index", ")", ":", "\n", "                ", "self", ".", "_it_sum", "[", "i", "]", "=", "self", ".", "max_priority", "**", "self", ".", "alpha", "\n", "self", ".", "_it_min", "[", "i", "]", "=", "self", ".", "max_priority", "**", "self", ".", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer._sample_proportional": [[323, 332], ["episode_buffer.PrioritizedReplayBuffer._it_sum.sum", "range", "episode_buffer.PrioritizedReplayBuffer._it_sum.find_prefixsum_idx", "res.append", "random.random"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.find_prefixsum_idx"], ["", "", "", "def", "_sample_proportional", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "p_total", "=", "self", ".", "_it_sum", ".", "sum", "(", "0", ",", "self", ".", "episodes_in_buffer", "-", "1", ")", "\n", "every_range_len", "=", "p_total", "/", "batch_size", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "mass", "=", "random", ".", "random", "(", ")", "*", "every_range_len", "+", "i", "*", "every_range_len", "\n", "idx", "=", "self", ".", "_it_sum", ".", "find_prefixsum_idx", "(", "mass", ")", "\n", "res", ".", "append", "(", "idx", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.sample": [[333, 349], ["episode_buffer.PrioritizedReplayBuffer.can_sample", "episode_buffer.PrioritizedReplayBuffer._sample_proportional", "numpy.array", "episode_buffer.PrioritizedReplayBuffer._it_min.min", "episode_buffer.PrioritizedReplayBuffer._it_sum.sum", "numpy.array.append", "episode_buffer.PrioritizedReplayBuffer._it_sum.sum"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.can_sample", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer._sample_proportional", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "sample", "(", "self", ",", "batch_size", ",", "t", ")", ":", "\n", "        ", "assert", "self", ".", "can_sample", "(", "batch_size", ")", "\n", "self", ".", "beta", "=", "self", ".", "beta_original", "+", "(", "t", "*", "self", ".", "beta_increment", ")", "\n", "\n", "idxes", "=", "self", ".", "_sample_proportional", "(", "batch_size", ")", "\n", "weights", "=", "[", "]", "\n", "p_min", "=", "self", ".", "_it_min", ".", "min", "(", ")", "/", "self", ".", "_it_sum", ".", "sum", "(", ")", "\n", "max_weight", "=", "(", "p_min", "*", "self", ".", "episodes_in_buffer", ")", "**", "(", "-", "self", ".", "beta", ")", "\n", "\n", "for", "idx", "in", "idxes", ":", "\n", "            ", "p_sample", "=", "self", ".", "_it_sum", "[", "idx", "]", "/", "self", ".", "_it_sum", ".", "sum", "(", ")", "\n", "weight", "=", "(", "p_sample", "*", "self", ".", "episodes_in_buffer", ")", "**", "(", "-", "self", ".", "beta", ")", "\n", "weights", ".", "append", "(", "weight", "/", "max_weight", ")", "\n", "", "weights", "=", "np", ".", "array", "(", "weights", ")", "\n", "\n", "return", "self", "[", "idxes", "]", ",", "idxes", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.update_priorities": [[350, 370], ["zip", "len", "len", "max"], "methods", ["None"], ["", "def", "update_priorities", "(", "self", ",", "idxes", ",", "priorities", ")", ":", "\n", "        ", "\"\"\"Update priorities of sampled transitions.\n        sets priority of transition at index idxes[i] in buffer\n        to priorities[i].\n        Parameters\n        ----------\n        idxes: [int]\n            List of idxes of sampled transitions\n        priorities: [float]\n            List of updated priorities corresponding to\n            transitions at the sampled idxes denoted by\n            variable `idxes`.\n        \"\"\"", "\n", "assert", "len", "(", "idxes", ")", "==", "len", "(", "priorities", ")", "\n", "for", "idx", ",", "priority", "in", "zip", "(", "idxes", ",", "priorities", ")", ":", "\n", "            ", "assert", "priority", ">", "0", "\n", "assert", "0", "<=", "idx", "<", "self", ".", "episodes_in_buffer", "\n", "self", ".", "_it_sum", "[", "idx", "]", "=", "priority", "**", "self", ".", "alpha", "\n", "self", ".", "_it_min", "[", "idx", "]", "=", "priority", "**", "self", ".", "alpha", "\n", "self", ".", "max_priority", "=", "max", "(", "self", ".", "max_priority", ",", "priority", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.nq_learner.NQLearner.__init__": [[16, 58], ["torch.device", "list", "copy.deepcopy", "list", "print", "print", "copy.deepcopy", "getattr", "getattr", "mac.parameters", "pymarl.modules.mixers.qatten.QattenMixer", "nq_learner.NQLearner.mixer.parameters", "pymarl.utils.th_utils.get_parameters_num", "torch.optim.Adam", "torch.optim.RMSprop", "float", "float", "pymarl.modules.mixers.vdn.VDNMixer", "nq_learner.NQLearner.mixer.parameters", "pymarl.modules.mixers.nmix.Mixer", "getattr", "pymarl.modules.mixers.qgnn.QGNNMixer"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.th_utils.get_parameters_num", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters"], ["\t", "def", "__init__", "(", "self", ",", "mac", ",", "scheme", ",", "logger", ",", "callback", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "self", ".", "args", "=", "args", "\n", "self", ".", "mac", "=", "mac", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "callback", "=", "callback", "\n", "\n", "self", ".", "last_target_update_episode", "=", "0", "\n", "self", ".", "device", "=", "th", ".", "device", "(", "'cuda'", "if", "args", ".", "use_cuda", "else", "'cpu'", ")", "\n", "self", ".", "params", "=", "list", "(", "mac", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "args", ".", "mixer", "==", "\"qatten\"", ":", "\n", "\t\t\t", "self", ".", "mixer", "=", "QattenMixer", "(", "args", ")", "\n", "", "elif", "args", ".", "mixer", "==", "\"vdn\"", ":", "\n", "\t\t\t", "self", ".", "mixer", "=", "VDNMixer", "(", ")", "\n", "", "elif", "args", ".", "mixer", "==", "\"qmix\"", ":", "\n", "\t\t\t", "self", ".", "mixer", "=", "Mixer", "(", "args", ")", "\n", "", "elif", "args", ".", "mixer", "==", "\"qgnn\"", ":", "\n", "\t\t\t", "self", ".", "mixer", "=", "QGNNMixer", "(", "args", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "\"mixer error\"", "\n", "", "self", ".", "target_mixer", "=", "copy", ".", "deepcopy", "(", "self", ".", "mixer", ")", "\n", "self", ".", "params", "+=", "list", "(", "self", ".", "mixer", ".", "parameters", "(", ")", ")", "\n", "\n", "print", "(", "'Mixer Size: '", ")", "\n", "print", "(", "get_parameters_num", "(", "self", ".", "mixer", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "if", "self", ".", "args", ".", "optimizer", "==", "'adam'", ":", "\n", "\t\t\t", "self", ".", "optimiser", "=", "Adam", "(", "params", "=", "self", ".", "params", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "getattr", "(", "args", ",", "\"weight_decay\"", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "optimiser", "=", "RMSprop", "(", "params", "=", "self", ".", "params", ",", "lr", "=", "args", ".", "lr", ",", "alpha", "=", "args", ".", "optim_alpha", ",", "eps", "=", "args", ".", "optim_eps", ")", "\n", "\n", "# a little wasteful to deepcopy (e.g. duplicates action selector), but should work for any MAC", "\n", "", "self", ".", "target_mac", "=", "copy", ".", "deepcopy", "(", "mac", ")", "\n", "self", ".", "log_stats_t", "=", "-", "self", ".", "args", ".", "learner_log_interval", "-", "1", "\n", "self", ".", "train_t", "=", "0", "\n", "\n", "# priority replay", "\n", "self", ".", "use_per", "=", "getattr", "(", "self", ".", "args", ",", "'use_per'", ",", "False", ")", "\n", "self", ".", "return_priority", "=", "getattr", "(", "self", ".", "args", ",", "\"return_priority\"", ",", "False", ")", "\n", "if", "self", ".", "use_per", ":", "\n", "\t\t\t", "self", ".", "priority_max", "=", "float", "(", "'-inf'", ")", "\n", "self", ".", "priority_min", "=", "float", "(", "'inf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.nq_learner.NQLearner.train": [[59, 177], ["[].float", "[].float", "nq_learner.NQLearner.mac.agent.train", "nq_learner.NQLearner.mac.init_hidden", "range", "torch.stack", "torch.gather().squeeze", "nq_learner.NQLearner.mixer", "mask.expand_as.expand_as.expand_as", "nq_learner.NQLearner.optimiser.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "nq_learner.NQLearner.optimiser.step", "nq_learner.NQLearner.mac.forward", "torch.stack.append", "torch.no_grad", "nq_learner.NQLearner.target_mac.agent.train", "nq_learner.NQLearner.target_mac.init_hidden", "range", "torch.stack", "torch.stack.clone().detach", "torch.gather().squeeze", "nq_learner.NQLearner.target_mixer", "getattr", "pymarl.utils.rl_utils.build_td_lambda_targets.detach", "td_error.pow", "torch.from_numpy().unsqueeze().to", "masked_td_error.sum", "mask.expand_as.expand_as.sum", "nq_learner.NQLearner._update_targets", "nq_learner.NQLearner.logger.log_stat", "nq_learner.NQLearner.logger.log_stat", "mask.expand_as.expand_as.sum().item", "nq_learner.NQLearner.logger.log_stat", "nq_learner.NQLearner.logger.log_stat", "nq_learner.NQLearner.logger.log_stat", "nq_learner.NQLearner.logger.log_stat", "torch.gather", "nq_learner.NQLearner.target_mac.forward", "torch.stack.append", "th.stack.clone().detach.max", "torch.gather().squeeze", "nq_learner.NQLearner.target_mixer", "pymarl.utils.rl_utils.build_q_lambda_targets", "pymarl.utils.rl_utils.build_td_lambda_targets", "masked_td_error.sum", "L_td.item", "nq_learner.NQLearner.callback.metrics", "nq_learner.NQLearner.items", "pymarl.envs.matrix_game.print_matrix_status", "rewards.sum().detach().to", "max", "min", "torch.stack.clone", "torch.gather", "torch.from_numpy().unsqueeze", "mask.expand_as.expand_as.sum", "masked_td_error.abs().sum().item", "type", "torch.stack.detach", "torch.gather().squeeze.detach", "nq_learner.NQLearner.detach", "nq_learner.NQLearner.logger.log_stat", "torch.max().item", "torch.min().item", "torch.gather", "rewards.sum().detach", "torch.from_numpy", "masked_td_error.abs().sum", "torch.max", "torch.min", "rewards.sum", "masked_td_error.abs", "torch.sqrt", "mask.expand_as.expand_as.sum", "td_error.abs"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner.train", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner.train", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner._update_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.build_q_lambda_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.build_td_lambda_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.callbacks.callback.Callback.metrics", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.print_matrix_status", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "", "def", "train", "(", "self", ",", "batch", ":", "EpisodeBatch", ",", "t_env", ":", "int", ",", "episode_num", ":", "int", ",", "per_weight", "=", "None", ")", ":", "\n", "# Get the relevant quantities", "\n", "\t\t", "rewards", "=", "batch", "[", "\"reward\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "actions", "=", "batch", "[", "\"actions\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "terminated", "=", "batch", "[", "\"terminated\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "=", "batch", "[", "\"filled\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "[", ":", ",", "1", ":", "]", "=", "mask", "[", ":", ",", "1", ":", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "avail_actions", "=", "batch", "[", "\"avail_actions\"", "]", "\n", "\n", "# Calculate estimated Q-Values", "\n", "self", ".", "mac", ".", "agent", ".", "train", "(", ")", "\n", "mac_out", "=", "[", "]", "\n", "self", ".", "mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", ")", ":", "\n", "\t\t\t", "agent_outs", "=", "self", ".", "mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "mac_out", ".", "append", "(", "agent_outs", ")", "\n", "", "mac_out", "=", "th", ".", "stack", "(", "mac_out", ",", "dim", "=", "1", ")", "# Concat over time", "\n", "\n", "# Pick the Q-Values for the actions taken by each agent", "\n", "chosen_action_qvals", "=", "th", ".", "gather", "(", "mac_out", "[", ":", ",", ":", "-", "1", "]", ",", "dim", "=", "3", ",", "index", "=", "actions", ")", ".", "squeeze", "(", "3", ")", "# Remove the last dim", "\n", "\n", "# Calculate the Q-Values necessary for the target", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "self", ".", "target_mac", ".", "agent", ".", "train", "(", ")", "\n", "target_mac_out", "=", "[", "]", "\n", "self", ".", "target_mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", ")", ":", "\n", "\t\t\t\t", "target_agent_outs", "=", "self", ".", "target_mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "target_mac_out", ".", "append", "(", "target_agent_outs", ")", "\n", "\n", "# We don't need the first timesteps Q-Value estimate for calculating targets", "\n", "", "target_mac_out", "=", "th", ".", "stack", "(", "target_mac_out", ",", "dim", "=", "1", ")", "# Concat across time", "\n", "\n", "# Max over target Q-Values/ Double q learning", "\n", "mac_out_detach", "=", "mac_out", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mac_out_detach", "[", "avail_actions", "==", "0", "]", "=", "-", "9999999", "\n", "cur_max_actions", "=", "mac_out_detach", ".", "max", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "target_max_qvals", "=", "th", ".", "gather", "(", "target_mac_out", ",", "3", ",", "cur_max_actions", ")", ".", "squeeze", "(", "3", ")", "\n", "\n", "# Calculate n-step Q-Learning targets", "\n", "target_max_qvals", "=", "self", ".", "target_mixer", "(", "target_max_qvals", ",", "batch", "[", "\"state\"", "]", ")", "\n", "\n", "if", "getattr", "(", "self", ".", "args", ",", "'q_lambda'", ",", "False", ")", ":", "\n", "\t\t\t\t", "qvals", "=", "th", ".", "gather", "(", "target_mac_out", ",", "3", ",", "batch", "[", "\"actions\"", "]", ")", ".", "squeeze", "(", "3", ")", "\n", "qvals", "=", "self", ".", "target_mixer", "(", "qvals", ",", "batch", "[", "\"state\"", "]", ")", "\n", "\n", "targets", "=", "build_q_lambda_targets", "(", "rewards", ",", "terminated", ",", "mask", ",", "target_max_qvals", ",", "qvals", ",", "\n", "self", ".", "args", ".", "gamma", ",", "self", ".", "args", ".", "td_lambda", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "targets", "=", "build_td_lambda_targets", "(", "rewards", ",", "terminated", ",", "mask", ",", "target_max_qvals", ",", "\n", "self", ".", "args", ".", "n_agents", ",", "self", ".", "args", ".", "gamma", ",", "self", ".", "args", ".", "td_lambda", ")", "\n", "\n", "# Mixer", "\n", "", "", "global_qvals", "=", "self", ".", "mixer", "(", "chosen_action_qvals", ",", "batch", "[", "\"state\"", "]", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "\n", "td_error", "=", "(", "global_qvals", "-", "targets", ".", "detach", "(", ")", ")", "\n", "td_error2", "=", "0.5", "*", "td_error", ".", "pow", "(", "2", ")", "\n", "\n", "mask", "=", "mask", ".", "expand_as", "(", "td_error2", ")", "\n", "masked_td_error", "=", "td_error2", "*", "mask", "\n", "\n", "# important sampling for PER", "\n", "if", "self", ".", "use_per", ":", "\n", "\t\t\t", "per_weight", "=", "th", ".", "from_numpy", "(", "per_weight", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "masked_td_error", "=", "masked_td_error", ".", "sum", "(", "1", ")", "*", "per_weight", "\n", "\n", "", "loss", "=", "L_td", "=", "masked_td_error", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n", "# Optimise", "\n", "self", ".", "optimiser", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_norm", "=", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "params", ",", "self", ".", "args", ".", "grad_norm_clip", ")", "\n", "self", ".", "optimiser", ".", "step", "(", ")", "\n", "\n", "if", "(", "episode_num", "-", "self", ".", "last_target_update_episode", ")", "/", "self", ".", "args", ".", "target_update_interval", ">=", "1.0", ":", "\n", "\t\t\t", "self", ".", "_update_targets", "(", ")", "\n", "self", ".", "last_target_update_episode", "=", "episode_num", "\n", "\n", "", "if", "t_env", "-", "self", ".", "log_stats_t", ">=", "self", ".", "args", ".", "learner_log_interval", ":", "\n", "\t\t\t", "self", ".", "logger", ".", "log_stat", "(", "\"loss_td\"", ",", "L_td", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"grad_norm\"", ",", "grad_norm", ",", "t_env", ")", "\n", "mask_elems", "=", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"td_error_abs\"", ",", "(", "masked_td_error", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"q_global_mean\"", ",", "(", "global_qvals", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "(", "mask_elems", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"target_global_mean\"", ",", "(", "targets", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "(", "mask_elems", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"q_local_mean\"", ",", "(", "chosen_action_qvals", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "(", "mask_elems", "*", "self", ".", "args", ".", "n_agents", ")", ",", "t_env", ")", "\n", "self", ".", "log_stats_t", "=", "t_env", "\n", "\n", "if", "type", "(", "self", ".", "callback", ")", ".", "metrics", "!=", "Callback", ".", "metrics", ":", "\n", "\t\t\t\t", "model_data", "=", "{", "\n", "\"local_q_all\"", ":", "mac_out", ".", "detach", "(", ")", ",", "\n", "\"local_q_chosen\"", ":", "chosen_action_qvals", ".", "detach", "(", ")", ",", "\n", "\"global_q\"", ":", "global_qvals", ".", "detach", "(", ")", ",", "\n", "}", "\n", "metrics", "=", "self", ".", "callback", ".", "metrics", "(", "env_data", "=", "batch", ",", "model_data", "=", "model_data", ")", "\n", "for", "key", ",", "val", "in", "metrics", ".", "items", "(", ")", ":", "\n", "\t\t\t\t\t", "self", ".", "logger", ".", "log_stat", "(", "key", ",", "val", ",", "t_env", ")", "\n", "\n", "\n", "# print estimated matrix", "\n", "", "", "if", "self", ".", "args", ".", "env", "==", "\"one_step_matrix_game\"", ":", "\n", "\t\t\t\t", "print_matrix_status", "(", "batch", ",", "self", ".", "mixer", ",", "mac_out", ")", "\n", "\n", "# return info", "\n", "", "", "info", "=", "{", "}", "\n", "# calculate priority", "\n", "if", "self", ".", "use_per", ":", "\n", "\t\t\t", "if", "self", ".", "return_priority", ":", "\n", "\t\t\t\t", "info", "[", "\"td_errors_abs\"", "]", "=", "rewards", ".", "sum", "(", "1", ")", ".", "detach", "(", ")", ".", "to", "(", "'cpu'", ")", "\n", "# normalize to [0, 1]", "\n", "self", ".", "priority_max", "=", "max", "(", "th", ".", "max", "(", "info", "[", "\"td_errors_abs\"", "]", ")", ".", "item", "(", ")", ",", "self", ".", "priority_max", ")", "\n", "self", ".", "priority_min", "=", "min", "(", "th", ".", "min", "(", "info", "[", "\"td_errors_abs\"", "]", ")", ".", "item", "(", ")", ",", "self", ".", "priority_min", ")", "\n", "info", "[", "\"td_errors_abs\"", "]", "=", "(", "info", "[", "\"td_errors_abs\"", "]", "-", "self", ".", "priority_min", ")", "/", "(", "self", ".", "priority_max", "-", "self", ".", "priority_min", "+", "1e-5", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "info", "[", "\"td_errors_abs\"", "]", "=", "(", "(", "td_error", ".", "abs", "(", ")", "*", "mask", ")", ".", "sum", "(", "1", ")", "/", "th", ".", "sqrt", "(", "mask", ".", "sum", "(", "1", ")", ")", ")", ".", "detach", "(", ")", ".", "to", "(", "'cpu'", ")", "\n", "", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.nq_learner.NQLearner._update_targets": [[178, 183], ["nq_learner.NQLearner.target_mac.load_state", "nq_learner.NQLearner.logger.console_logger.info", "nq_learner.NQLearner.target_mixer.load_state_dict", "nq_learner.NQLearner.mixer.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_state"], ["", "def", "_update_targets", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "target_mac", ".", "load_state", "(", "self", ".", "mac", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "target_mixer", ".", "load_state_dict", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ")", "\n", "", "self", ".", "logger", ".", "console_logger", ".", "info", "(", "\"Updated target network\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.nq_learner.NQLearner.cuda": [[184, 190], ["nq_learner.NQLearner.mac.cuda", "nq_learner.NQLearner.target_mac.cuda", "nq_learner.NQLearner.mixer.cuda", "nq_learner.NQLearner.target_mixer.cuda"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "mac", ".", "cuda", "(", ")", "\n", "self", ".", "target_mac", ".", "cuda", "(", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "mixer", ".", "cuda", "(", ")", "\n", "self", ".", "target_mixer", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.nq_learner.NQLearner.save_models": [[191, 196], ["nq_learner.NQLearner.mac.save_models", "torch.save", "torch.save", "nq_learner.NQLearner.optimiser.state_dict", "nq_learner.NQLearner.mixer.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models"], ["", "", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "self", ".", "mac", ".", "save_models", "(", "path", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "\t\t\t", "th", ".", "save", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ",", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ")", "\n", "", "th", ".", "save", "(", "self", ".", "optimiser", ".", "state_dict", "(", ")", ",", "\"{}/opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.nq_learner.NQLearner.load_models": [[197, 204], ["nq_learner.NQLearner.mac.load_models", "nq_learner.NQLearner.target_mac.load_models", "nq_learner.NQLearner.optimiser.load_state_dict", "nq_learner.NQLearner.mixer.load_state_dict", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models"], ["", "def", "load_models", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "self", ".", "mac", ".", "load_models", "(", "path", ")", "\n", "# Not quite right but I don't want to save target networks", "\n", "self", ".", "target_mac", ".", "load_models", "(", "path", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "mixer", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "self", ".", "optimiser", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.offpg_learner.OffPGLearner.__init__": [[14, 43], ["pymarl.modules.critics.offpg.OffPGCritic", "pymarl.modules.mixers.qmix.QMixer", "copy.deepcopy", "copy.deepcopy", "list", "list", "list", "torch.optim.rmsprop.RMSprop", "torch.optim.rmsprop.RMSprop", "torch.optim.rmsprop.RMSprop", "print", "print", "mac.parameters", "offpg_learner.OffPGLearner.critic.parameters", "offpg_learner.OffPGLearner.mixer.parameters", "pymarl.utils.th_utils.get_parameters_num", "list"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.th_utils.get_parameters_num"], ["    ", "def", "__init__", "(", "self", ",", "mac", ",", "scheme", ",", "logger", ",", "callback", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "n_actions", "=", "args", ".", "n_actions", "\n", "self", ".", "mac", "=", "mac", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "last_target_update_step", "=", "0", "\n", "self", ".", "critic_training_steps", "=", "0", "\n", "\n", "self", ".", "log_stats_t", "=", "-", "self", ".", "args", ".", "learner_log_interval", "-", "1", "\n", "\n", "self", ".", "critic", "=", "OffPGCritic", "(", "scheme", ",", "args", ")", "\n", "self", ".", "mixer", "=", "QMixer", "(", "args", ")", "\n", "self", ".", "target_critic", "=", "copy", ".", "deepcopy", "(", "self", ".", "critic", ")", "\n", "self", ".", "target_mixer", "=", "copy", ".", "deepcopy", "(", "self", ".", "mixer", ")", "\n", "\n", "self", ".", "agent_params", "=", "list", "(", "mac", ".", "parameters", "(", ")", ")", "\n", "self", ".", "critic_params", "=", "list", "(", "self", ".", "critic", ".", "parameters", "(", ")", ")", "\n", "self", ".", "mixer_params", "=", "list", "(", "self", ".", "mixer", ".", "parameters", "(", ")", ")", "\n", "self", ".", "params", "=", "self", ".", "agent_params", "+", "self", ".", "critic_params", "\n", "self", ".", "c_params", "=", "self", ".", "critic_params", "+", "self", ".", "mixer_params", "\n", "\n", "self", ".", "agent_optimiser", "=", "RMSprop", "(", "params", "=", "self", ".", "agent_params", ",", "lr", "=", "args", ".", "lr", ")", "\n", "self", ".", "critic_optimiser", "=", "RMSprop", "(", "params", "=", "self", ".", "critic_params", ",", "lr", "=", "args", ".", "lr", ")", "\n", "self", ".", "mixer_optimiser", "=", "RMSprop", "(", "params", "=", "self", ".", "mixer_params", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "print", "(", "'Mixer Size: '", ")", "\n", "print", "(", "get_parameters_num", "(", "list", "(", "self", ".", "c_params", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.offpg_learner.OffPGLearner.train": [[44, 119], ["[].float", "[].float", "mask.repeat().view.repeat().view.repeat().view", "offpg_learner.OffPGLearner.critic._build_inputs", "offpg_learner.OffPGLearner.mac.init_hidden", "range", "torch.stack", "torch.gather().squeeze", "torch.stack.view", "torch.sum().view().detach", "torch.gather().squeeze", "torch.log", "offpg_learner.OffPGLearner.mixer.k().view", "offpg_learner.OffPGLearner.agent_optimiser.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "offpg_learner.OffPGLearner.agent_optimiser.step", "offpg_learner.OffPGLearner.critic.forward().detach", "offpg_learner.OffPGLearner.mac.forward", "torch.stack.append", "torch.stack.sum", "torch.gather().squeeze.view", "mask.repeat().view.repeat().view.sum", "len", "offpg_learner.OffPGLearner.logger.log_stat", "offpg_learner.OffPGLearner.logger.log_stat", "offpg_learner.OffPGLearner.logger.log_stat", "offpg_learner.OffPGLearner.logger.log_stat", "offpg_learner.OffPGLearner.logger.log_stat", "mask.repeat().view.repeat().view.repeat", "torch.gather", "torch.sum().view", "torch.gather", "offpg_learner.OffPGLearner.mixer.k", "p.data.abs().sum().item", "offpg_learner.OffPGLearner.logger.log_stat", "coma_loss.item", "offpg_learner.OffPGLearner.critic.forward", "mask.repeat().view.repeat().view.sum().item", "torch.sum", "actions.reshape", "p.data.abs().sum", "sum", "mask.repeat().view.repeat().view.sum", "p.data.abs", "advantages.detach", "th.stack.view.max"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.qmix.QMixer.k", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "train", "(", "self", ",", "batch", ":", "EpisodeBatch", ",", "t_env", ":", "int", ",", "log", ")", ":", "\n", "# Get the relevant quantities", "\n", "        ", "bs", "=", "batch", ".", "batch_size", "\n", "max_t", "=", "batch", ".", "max_seq_length", "\n", "actions", "=", "batch", "[", "\"actions\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "terminated", "=", "batch", "[", "\"terminated\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "avail_actions", "=", "batch", "[", "\"avail_actions\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "mask", "=", "batch", "[", "\"filled\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "[", ":", ",", "1", ":", "]", "=", "mask", "[", ":", ",", "1", ":", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "mask", "=", "mask", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ")", ".", "view", "(", "-", "1", ")", "\n", "states", "=", "batch", "[", "\"state\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "#build q", "\n", "inputs", "=", "self", ".", "critic", ".", "_build_inputs", "(", "batch", ",", "bs", ",", "max_t", ")", "\n", "q_vals", "=", "self", ".", "critic", ".", "forward", "(", "inputs", ")", ".", "detach", "(", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "mac_out", "=", "[", "]", "\n", "self", ".", "mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", "-", "1", ")", ":", "\n", "            ", "agent_outs", "=", "self", ".", "mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "mac_out", ".", "append", "(", "agent_outs", ")", "\n", "", "mac_out", "=", "th", ".", "stack", "(", "mac_out", ",", "dim", "=", "1", ")", "# Concat over time", "\n", "\n", "# Mask out unavailable actions, renormalise (as in action selection)", "\n", "mac_out", "[", "avail_actions", "==", "0", "]", "=", "0", "\n", "mac_out", "=", "mac_out", "/", "mac_out", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "mac_out", "[", "avail_actions", "==", "0", "]", "=", "0", "\n", "\n", "# Calculated baseline", "\n", "q_taken", "=", "th", ".", "gather", "(", "q_vals", ",", "dim", "=", "3", ",", "index", "=", "actions", ")", ".", "squeeze", "(", "3", ")", "\n", "pi", "=", "mac_out", ".", "view", "(", "-", "1", ",", "self", ".", "n_actions", ")", "\n", "baseline", "=", "th", ".", "sum", "(", "mac_out", "*", "q_vals", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", "\n", "\n", "# Calculate policy grad with mask", "\n", "pi_taken", "=", "th", ".", "gather", "(", "pi", ",", "dim", "=", "1", ",", "index", "=", "actions", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "pi_taken", "[", "mask", "==", "0", "]", "=", "1.0", "\n", "log_pi_taken", "=", "th", ".", "log", "(", "pi_taken", ")", "\n", "coe", "=", "self", ".", "mixer", ".", "k", "(", "states", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "advantages", "=", "(", "q_taken", ".", "view", "(", "-", "1", ")", "-", "baseline", ")", "\n", "# advantages = (advantages - advantages.mean()) / (advantages.std() + 1e-8)", "\n", "\n", "coma_loss", "=", "-", "(", "(", "coe", "*", "advantages", ".", "detach", "(", ")", "*", "log_pi_taken", ")", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n", "# dist_entropy = Categorical(pi).entropy().view(-1)", "\n", "# dist_entropy[mask == 0] = 0 # fill nan", "\n", "# entropy_loss = (dist_entropy * mask).sum() / mask.sum()", "\n", "\n", "# loss = coma_loss - self.args.ent_coef * entropy_loss / entropy_loss.item()", "\n", "loss", "=", "coma_loss", "\n", "\n", "# Optimise agents", "\n", "self", ".", "agent_optimiser", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_norm", "=", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "agent_params", ",", "self", ".", "args", ".", "grad_norm_clip", ")", "\n", "self", ".", "agent_optimiser", ".", "step", "(", ")", "\n", "\n", "#compute parameters sum for debugging", "\n", "p_sum", "=", "0.", "\n", "for", "p", "in", "self", ".", "agent_params", ":", "\n", "            ", "p_sum", "+=", "p", ".", "data", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "100.0", "\n", "\n", "\n", "", "if", "t_env", "-", "self", ".", "log_stats_t", ">=", "self", ".", "args", ".", "learner_log_interval", ":", "\n", "            ", "ts_logged", "=", "len", "(", "log", "[", "\"critic_loss\"", "]", ")", "\n", "for", "key", "in", "[", "\"critic_loss\"", ",", "\"critic_grad_norm\"", ",", "\"td_error_abs\"", ",", "\"q_taken_mean\"", ",", "\"target_mean\"", ",", "\"q_max_mean\"", ",", "\"q_min_mean\"", ",", "\"q_max_var\"", ",", "\"q_min_var\"", "]", ":", "\n", "                ", "self", ".", "logger", ".", "log_stat", "(", "key", ",", "sum", "(", "log", "[", "key", "]", ")", "/", "ts_logged", ",", "t_env", ")", "\n", "", "self", ".", "logger", ".", "log_stat", "(", "\"q_max_first\"", ",", "log", "[", "\"q_max_first\"", "]", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"q_min_first\"", ",", "log", "[", "\"q_min_first\"", "]", ",", "t_env", ")", "\n", "#self.logger.log_stat(\"advantage_mean\", (advantages * mask).sum().item() / mask.sum().item(), t_env)", "\n", "# self.logger.log_stat(\"entropy_loss\", entropy_loss.item(), t_env)", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"coma_loss\"", ",", "coma_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"agent_grad_norm\"", ",", "grad_norm", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"pi_max\"", ",", "(", "pi", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "log_stats_t", "=", "t_env", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.offpg_learner.OffPGLearner.train_critic": [[120, 189], ["[].float", "[].float", "offpg_learner.OffPGLearner.target_critic._build_inputs", "offpg_learner.OffPGLearner.target_critic.forward().detach", "offpg_learner.OffPGLearner.target_mixer", "pymarl.utils.rl_utils.build_td_lambda_targets().detach", "offpg_learner.OffPGLearner.critic._build_inputs", "range", "torch.gather().squeeze", "offpg_learner.OffPGLearner.train_critic_best", "torch.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "offpg_learner.OffPGLearner.critic.forward", "torch.gather().squeeze", "offpg_learner.OffPGLearner.mixer.forward", "target_q[].detach", "offpg_learner.OffPGLearner.critic_optimiser.zero_grad", "offpg_learner.OffPGLearner.mixer_optimiser.zero_grad", "critic_loss.backward", "torch.nn.utils.clip_grad_norm_", "offpg_learner.OffPGLearner.critic_optimiser.step", "offpg_learner.OffPGLearner.mixer_optimiser.step", "log[].append", "log[].append", "mask_t.sum().item", "log[].append", "log[].append", "log[].append", "log[].append", "log[].append", "log[].append", "log[].append", "offpg_learner.OffPGLearner._update_targets", "offpg_learner.OffPGLearner.target_critic.forward", "pymarl.utils.rl_utils.build_td_lambda_targets", "[].squeeze().sum", "mask_t.sum", "mask_t.sum", "critic_loss.item", "torch.gather", "torch.gather", "mask_t.sum", "q_err.abs().sum().item", "[].squeeze", "q_err.abs().sum", "q_err.abs", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.mean", "torch.mean", "q_ori.max", "q_ori.min", "q_ori.max", "q_ori.min", "q_ori.max", "q_ori.min"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.offpg_learner.OffPGLearner.train_critic_best", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner._update_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.build_td_lambda_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min"], ["", "", "def", "train_critic", "(", "self", ",", "on_batch", ",", "best_batch", "=", "None", ",", "log", "=", "None", ")", ":", "\n", "        ", "bs", "=", "on_batch", ".", "batch_size", "\n", "max_t", "=", "on_batch", ".", "max_seq_length", "\n", "rewards", "=", "on_batch", "[", "\"reward\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "actions", "=", "on_batch", "[", "\"actions\"", "]", "[", ":", ",", ":", "]", "\n", "terminated", "=", "on_batch", "[", "\"terminated\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "=", "on_batch", "[", "\"filled\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "[", ":", ",", "1", ":", "]", "=", "mask", "[", ":", ",", "1", ":", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "avail_actions", "=", "on_batch", "[", "\"avail_actions\"", "]", "[", ":", "]", "\n", "states", "=", "on_batch", "[", "\"state\"", "]", "\n", "\n", "#build_target_q", "\n", "target_inputs", "=", "self", ".", "target_critic", ".", "_build_inputs", "(", "on_batch", ",", "bs", ",", "max_t", ")", "\n", "target_q_vals", "=", "self", ".", "target_critic", ".", "forward", "(", "target_inputs", ")", ".", "detach", "(", ")", "\n", "targets_taken", "=", "self", ".", "target_mixer", "(", "th", ".", "gather", "(", "target_q_vals", ",", "dim", "=", "3", ",", "index", "=", "actions", ")", ".", "squeeze", "(", "3", ")", ",", "states", ")", "\n", "target_q", "=", "build_td_lambda_targets", "(", "rewards", ",", "terminated", ",", "mask", ",", "targets_taken", ",", "self", ".", "n_agents", ",", "self", ".", "args", ".", "gamma", ",", "self", ".", "args", ".", "td_lambda", ")", ".", "detach", "(", ")", "\n", "\n", "inputs", "=", "self", ".", "critic", ".", "_build_inputs", "(", "on_batch", ",", "bs", ",", "max_t", ")", "\n", "\n", "\n", "if", "best_batch", "is", "not", "None", ":", "\n", "            ", "best_target_q", ",", "best_inputs", ",", "best_mask", ",", "best_actions", ",", "best_mac_out", "=", "self", ".", "train_critic_best", "(", "best_batch", ")", "\n", "log", "[", "\"best_reward\"", "]", "=", "th", ".", "mean", "(", "best_batch", "[", "\"reward\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "squeeze", "(", "2", ")", ".", "sum", "(", "-", "1", ")", ",", "dim", "=", "0", ")", "\n", "target_q", "=", "th", ".", "cat", "(", "(", "target_q", ",", "best_target_q", ")", ",", "dim", "=", "0", ")", "\n", "inputs", "=", "th", ".", "cat", "(", "(", "inputs", ",", "best_inputs", ")", ",", "dim", "=", "0", ")", "\n", "mask", "=", "th", ".", "cat", "(", "(", "mask", ",", "best_mask", ")", ",", "dim", "=", "0", ")", "\n", "actions", "=", "th", ".", "cat", "(", "(", "actions", ",", "best_actions", ")", ",", "dim", "=", "0", ")", "\n", "states", "=", "th", ".", "cat", "(", "(", "states", ",", "best_batch", "[", "\"state\"", "]", ")", ",", "dim", "=", "0", ")", "\n", "\n", "#train critic", "\n", "", "for", "t", "in", "range", "(", "max_t", "-", "1", ")", ":", "\n", "            ", "mask_t", "=", "mask", "[", ":", ",", "t", ":", "t", "+", "1", "]", "\n", "if", "mask_t", ".", "sum", "(", ")", "<", "0.5", ":", "\n", "                ", "continue", "\n", "", "q_vals", "=", "self", ".", "critic", ".", "forward", "(", "inputs", "[", ":", ",", "t", ":", "t", "+", "1", "]", ")", "\n", "q_ori", "=", "q_vals", "\n", "q_vals", "=", "th", ".", "gather", "(", "q_vals", ",", "3", ",", "index", "=", "actions", "[", ":", ",", "t", ":", "t", "+", "1", "]", ")", ".", "squeeze", "(", "3", ")", "\n", "q_vals", "=", "self", ".", "mixer", ".", "forward", "(", "q_vals", ",", "states", "[", ":", ",", "t", ":", "t", "+", "1", "]", ")", "\n", "target_q_t", "=", "target_q", "[", ":", ",", "t", ":", "t", "+", "1", "]", ".", "detach", "(", ")", "\n", "q_err", "=", "(", "q_vals", "-", "target_q_t", ")", "*", "mask_t", "\n", "critic_loss", "=", "(", "q_err", "**", "2", ")", ".", "sum", "(", ")", "/", "mask_t", ".", "sum", "(", ")", "\n", "\n", "self", ".", "critic_optimiser", ".", "zero_grad", "(", ")", "\n", "self", ".", "mixer_optimiser", ".", "zero_grad", "(", ")", "\n", "critic_loss", ".", "backward", "(", ")", "\n", "grad_norm", "=", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "c_params", ",", "self", ".", "args", ".", "grad_norm_clip", ")", "\n", "self", ".", "critic_optimiser", ".", "step", "(", ")", "\n", "self", ".", "mixer_optimiser", ".", "step", "(", ")", "\n", "self", ".", "critic_training_steps", "+=", "1", "\n", "\n", "log", "[", "\"critic_loss\"", "]", ".", "append", "(", "critic_loss", ".", "item", "(", ")", ")", "\n", "log", "[", "\"critic_grad_norm\"", "]", ".", "append", "(", "grad_norm", ")", "\n", "mask_elems", "=", "mask_t", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "log", "[", "\"td_error_abs\"", "]", ".", "append", "(", "(", "q_err", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", ")", "\n", "log", "[", "\"target_mean\"", "]", ".", "append", "(", "(", "target_q_t", "*", "mask_t", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", "\n", "log", "[", "\"q_taken_mean\"", "]", ".", "append", "(", "(", "q_vals", "*", "mask_t", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", "\n", "log", "[", "\"q_max_mean\"", "]", ".", "append", "(", "(", "th", ".", "mean", "(", "q_ori", ".", "max", "(", "dim", "=", "3", ")", "[", "0", "]", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "*", "mask_t", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", "\n", "log", "[", "\"q_min_mean\"", "]", ".", "append", "(", "(", "th", ".", "mean", "(", "q_ori", ".", "min", "(", "dim", "=", "3", ")", "[", "0", "]", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "*", "mask_t", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", "\n", "log", "[", "\"q_max_var\"", "]", ".", "append", "(", "(", "th", ".", "var", "(", "q_ori", ".", "max", "(", "dim", "=", "3", ")", "[", "0", "]", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "*", "mask_t", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", "\n", "log", "[", "\"q_min_var\"", "]", ".", "append", "(", "(", "th", ".", "var", "(", "q_ori", ".", "min", "(", "dim", "=", "3", ")", "[", "0", "]", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "*", "mask_t", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", "\n", "\n", "if", "(", "t", "==", "0", ")", ":", "\n", "                ", "log", "[", "\"q_max_first\"", "]", "=", "(", "th", ".", "mean", "(", "q_ori", ".", "max", "(", "dim", "=", "3", ")", "[", "0", "]", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "*", "mask_t", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", "\n", "log", "[", "\"q_min_first\"", "]", "=", "(", "th", ".", "mean", "(", "q_ori", ".", "min", "(", "dim", "=", "3", ")", "[", "0", "]", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "*", "mask_t", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", "\n", "\n", "#update target network", "\n", "", "", "if", "(", "self", ".", "critic_training_steps", "-", "self", ".", "last_target_update_step", ")", "/", "self", ".", "args", ".", "target_update_interval", ">=", "1.0", ":", "\n", "            ", "self", ".", "_update_targets", "(", ")", "\n", "self", ".", "last_target_update_step", "=", "self", ".", "critic_training_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.offpg_learner.OffPGLearner.train_critic_best": [[192, 237], ["[].float", "[].float", "torch.no_grad", "offpg_learner.OffPGLearner.mac.init_hidden", "range", "torch.stack().detach", "torch.gather().squeeze().prod", "offpg_learner.OffPGLearner.target_critic._build_inputs", "offpg_learner.OffPGLearner.target_critic.forward().detach", "offpg_learner.OffPGLearner.target_mixer", "offpg_learner.OffPGLearner.build_exp_q().detach", "pymarl.utils.rl_utils.build_target_q().detach", "offpg_learner.OffPGLearner.critic._build_inputs", "offpg_learner.OffPGLearner.mac.forward", "torch.stack().detach.append", "torch.stack().detach.sum", "torch.gather().squeeze", "torch.stack", "torch.gather().squeeze", "offpg_learner.OffPGLearner.target_critic.forward", "offpg_learner.OffPGLearner.build_exp_q", "torch.sum", "torch.sum", "pymarl.utils.rl_utils.build_target_q", "torch.gather", "torch.gather"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.offpg_learner.OffPGLearner.build_exp_q", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.build_target_q"], ["", "", "def", "train_critic_best", "(", "self", ",", "batch", ")", ":", "\n", "        ", "bs", "=", "batch", ".", "batch_size", "\n", "max_t", "=", "batch", ".", "max_seq_length", "\n", "rewards", "=", "batch", "[", "\"reward\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "actions", "=", "batch", "[", "\"actions\"", "]", "[", ":", ",", ":", "]", "\n", "terminated", "=", "batch", "[", "\"terminated\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "=", "batch", "[", "\"filled\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "[", ":", ",", "1", ":", "]", "=", "mask", "[", ":", ",", "1", ":", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "avail_actions", "=", "batch", "[", "\"avail_actions\"", "]", "[", ":", "]", "\n", "states", "=", "batch", "[", "\"state\"", "]", "\n", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "# pr for all actions of the episode", "\n", "            ", "mac_out", "=", "[", "]", "\n", "self", ".", "mac", ".", "init_hidden", "(", "bs", ")", "\n", "for", "i", "in", "range", "(", "max_t", ")", ":", "\n", "                ", "agent_outs", "=", "self", ".", "mac", ".", "forward", "(", "batch", ",", "t", "=", "i", ")", "\n", "mac_out", ".", "append", "(", "agent_outs", ")", "\n", "", "mac_out", "=", "th", ".", "stack", "(", "mac_out", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", "\n", "# Mask out unavailable actions, renormalise (as in action selection)", "\n", "mac_out", "[", "avail_actions", "==", "0", "]", "=", "0", "\n", "mac_out", "=", "mac_out", "/", "mac_out", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "mac_out", "[", "avail_actions", "==", "0", "]", "=", "0", "\n", "critic_mac", "=", "th", ".", "gather", "(", "mac_out", ",", "3", ",", "actions", ")", ".", "squeeze", "(", "3", ")", ".", "prod", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "#target_q take", "\n", "target_inputs", "=", "self", ".", "target_critic", ".", "_build_inputs", "(", "batch", ",", "bs", ",", "max_t", ")", "\n", "target_q_vals", "=", "self", ".", "target_critic", ".", "forward", "(", "target_inputs", ")", ".", "detach", "(", ")", "\n", "targets_taken", "=", "self", ".", "target_mixer", "(", "th", ".", "gather", "(", "target_q_vals", ",", "dim", "=", "3", ",", "index", "=", "actions", ")", ".", "squeeze", "(", "3", ")", ",", "states", ")", "\n", "\n", "#expected q", "\n", "exp_q", "=", "self", ".", "build_exp_q", "(", "target_q_vals", ",", "mac_out", ",", "states", ")", ".", "detach", "(", ")", "\n", "# td-error", "\n", "targets_taken", "[", ":", ",", "-", "1", "]", "=", "targets_taken", "[", ":", ",", "-", "1", "]", "*", "(", "1", "-", "th", ".", "sum", "(", "terminated", ",", "dim", "=", "1", ")", ")", "\n", "exp_q", "[", ":", ",", "-", "1", "]", "=", "exp_q", "[", ":", ",", "-", "1", "]", "*", "(", "1", "-", "th", ".", "sum", "(", "terminated", ",", "dim", "=", "1", ")", ")", "\n", "targets_taken", "[", ":", ",", ":", "-", "1", "]", "=", "targets_taken", "[", ":", ",", ":", "-", "1", "]", "*", "mask", "\n", "exp_q", "[", ":", ",", ":", "-", "1", "]", "=", "exp_q", "[", ":", ",", ":", "-", "1", "]", "*", "mask", "\n", "td_q", "=", "(", "rewards", "+", "self", ".", "args", ".", "gamma", "*", "exp_q", "[", ":", ",", "1", ":", "]", "-", "targets_taken", "[", ":", ",", ":", "-", "1", "]", ")", "*", "mask", "\n", "\n", "#compute target", "\n", "target_q", "=", "build_target_q", "(", "td_q", ",", "targets_taken", "[", ":", ",", ":", "-", "1", "]", ",", "critic_mac", ",", "mask", ",", "self", ".", "args", ".", "gamma", ",", "self", ".", "args", ".", "tb_lambda", ",", "self", ".", "args", ".", "step", ")", ".", "detach", "(", ")", "\n", "\n", "inputs", "=", "self", ".", "critic", ".", "_build_inputs", "(", "batch", ",", "bs", ",", "max_t", ")", "\n", "\n", "", "return", "target_q", ",", "inputs", ",", "mask", ",", "actions", ",", "mac_out", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.offpg_learner.OffPGLearner.build_exp_q": [[239, 243], ["torch.sum", "offpg_learner.OffPGLearner.target_mixer.forward"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward"], ["", "def", "build_exp_q", "(", "self", ",", "target_q_vals", ",", "mac_out", ",", "states", ")", ":", "\n", "        ", "target_exp_q_vals", "=", "th", ".", "sum", "(", "target_q_vals", "*", "mac_out", ",", "dim", "=", "3", ")", "\n", "target_exp_q_vals", "=", "self", ".", "target_mixer", ".", "forward", "(", "target_exp_q_vals", ",", "states", ")", "\n", "return", "target_exp_q_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.offpg_learner.OffPGLearner._update_targets": [[244, 248], ["offpg_learner.OffPGLearner.target_critic.load_state_dict", "offpg_learner.OffPGLearner.target_mixer.load_state_dict", "offpg_learner.OffPGLearner.logger.console_logger.info", "offpg_learner.OffPGLearner.critic.state_dict", "offpg_learner.OffPGLearner.mixer.state_dict"], "methods", ["None"], ["", "def", "_update_targets", "(", "self", ")", ":", "\n", "        ", "self", ".", "target_critic", ".", "load_state_dict", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "target_mixer", ".", "load_state_dict", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "logger", ".", "console_logger", ".", "info", "(", "\"Updated target network\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.offpg_learner.OffPGLearner.cuda": [[249, 255], ["offpg_learner.OffPGLearner.mac.cuda", "offpg_learner.OffPGLearner.critic.cuda", "offpg_learner.OffPGLearner.mixer.cuda", "offpg_learner.OffPGLearner.target_critic.cuda", "offpg_learner.OffPGLearner.target_mixer.cuda"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "mac", ".", "cuda", "(", ")", "\n", "self", ".", "critic", ".", "cuda", "(", ")", "\n", "self", ".", "mixer", ".", "cuda", "(", ")", "\n", "self", ".", "target_critic", ".", "cuda", "(", ")", "\n", "self", ".", "target_mixer", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.offpg_learner.OffPGLearner.save_models": [[256, 263], ["offpg_learner.OffPGLearner.mac.save_models", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "offpg_learner.OffPGLearner.critic.state_dict", "offpg_learner.OffPGLearner.mixer.state_dict", "offpg_learner.OffPGLearner.agent_optimiser.state_dict", "offpg_learner.OffPGLearner.critic_optimiser.state_dict", "offpg_learner.OffPGLearner.mixer_optimiser.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models"], ["", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "save_models", "(", "path", ")", "\n", "th", ".", "save", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ",", "\"{}/critic.th\"", ".", "format", "(", "path", ")", ")", "\n", "th", ".", "save", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ",", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ")", "\n", "th", ".", "save", "(", "self", ".", "agent_optimiser", ".", "state_dict", "(", ")", ",", "\"{}/agent_opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "th", ".", "save", "(", "self", ".", "critic_optimiser", ".", "state_dict", "(", ")", ",", "\"{}/critic_opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "th", ".", "save", "(", "self", ".", "mixer_optimiser", ".", "state_dict", "(", ")", ",", "\"{}/mixer_opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.offpg_learner.OffPGLearner.load_models": [[264, 274], ["offpg_learner.OffPGLearner.mac.load_models", "offpg_learner.OffPGLearner.critic.load_state_dict", "offpg_learner.OffPGLearner.mixer.load_state_dict", "offpg_learner.OffPGLearner.target_mixer.load_state_dict", "offpg_learner.OffPGLearner.agent_optimiser.load_state_dict", "offpg_learner.OffPGLearner.critic_optimiser.load_state_dict", "offpg_learner.OffPGLearner.mixer_optimiser.load_state_dict", "torch.load", "torch.load", "offpg_learner.OffPGLearner.mixer.state_dict", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models"], ["", "def", "load_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "load_models", "(", "path", ")", "\n", "self", ".", "critic", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/critic.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "self", ".", "mixer", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "# Not quite right but I don't want to save target networks", "\n", "# self.target_critic.load_state_dict(self.critic.agent.state_dict())", "\n", "self", ".", "target_mixer", ".", "load_state_dict", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "agent_optimiser", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/agent_opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "self", ".", "critic_optimiser", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/critic_opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "self", ".", "mixer_optimiser", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/mixer_opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.max_q_learner.MAXQLearner.__init__": [[14, 75], ["list", "list", "copy.deepcopy", "list", "copy.deepcopy", "print", "print", "torch.optim.Adam", "collections.deque", "mac.parameters", "max_q_learner.MAXQLearner.mac.parameters", "list", "list", "copy.deepcopy", "Exception", "max_q_learner.MAXQLearner.central_mixer.parameters", "pymarl.utils.th_utils.get_parameters_num", "pymarl.modules.mixers.vdn.VDNMixer", "max_q_learner.MAXQLearner.mixer.parameters", "max_q_learner.MAXQLearner.mixer.parameters", "copy.deepcopy", "list", "pymarl.modules.mixers.qmix.QMixer", "ValueError", "pymarl.modules.mixers.qmix_central_no_hyper.QMixerCentralFF", "Exception", "max_q_learner.MAXQLearner.central_mac.parameters", "list", "list", "max_q_learner.MAXQLearner.mixer.parameters", "max_q_learner.MAXQLearner.central_mixer.parameters"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.th_utils.get_parameters_num", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters"], ["    ", "def", "__init__", "(", "self", ",", "mac", ",", "scheme", ",", "logger", ",", "callback", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "mac", "=", "mac", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "mac_params", "=", "list", "(", "mac", ".", "parameters", "(", ")", ")", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "mac", ".", "parameters", "(", ")", ")", "\n", "\n", "self", ".", "last_target_update_episode", "=", "0", "\n", "\n", "self", ".", "mixer", "=", "None", "\n", "assert", "args", ".", "mixer", "is", "not", "None", "\n", "if", "args", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "if", "args", ".", "mixer", "==", "\"vdn\"", ":", "\n", "                ", "self", ".", "mixer", "=", "VDNMixer", "(", ")", "\n", "", "elif", "args", ".", "mixer", "==", "\"qmix\"", ":", "\n", "                ", "self", ".", "mixer", "=", "QMixer", "(", "args", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Mixer {} not recognised.\"", ".", "format", "(", "args", ".", "mixer", ")", ")", "\n", "", "self", ".", "mixer_params", "=", "list", "(", "self", ".", "mixer", ".", "parameters", "(", ")", ")", "\n", "self", ".", "params", "+=", "list", "(", "self", ".", "mixer", ".", "parameters", "(", ")", ")", "\n", "self", ".", "target_mixer", "=", "copy", ".", "deepcopy", "(", "self", ".", "mixer", ")", "\n", "\n", "# a little wasteful to deepcopy (e.g. duplicates action selector), but should work for any MAC", "\n", "", "self", ".", "target_mac", "=", "copy", ".", "deepcopy", "(", "mac", ")", "\n", "\n", "# Central Q", "\n", "# TODO: Clean this mess up!", "\n", "self", ".", "central_mac", "=", "None", "\n", "if", "self", ".", "args", ".", "central_mixer", "in", "[", "\"ff\"", ",", "\"atten\"", "]", ":", "\n", "            ", "if", "self", ".", "args", ".", "central_loss", "==", "0", ":", "\n", "                ", "self", ".", "central_mixer", "=", "self", ".", "mixer", "\n", "self", ".", "central_mac", "=", "self", ".", "mac", "\n", "self", ".", "target_central_mac", "=", "self", ".", "target_mac", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "args", ".", "central_mixer", "==", "\"ff\"", ":", "\n", "                    ", "self", ".", "central_mixer", "=", "QMixerCentralFF", "(", "args", ")", "# Feedforward network that takes state and agent utils as input", "\n", "# elif self.args.central_mixer == \"atten\":", "\n", "# self.central_mixer = QMixerCentralAtten(args)", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "\"Error with central_mixer\"", ")", "\n", "\n", "", "assert", "args", ".", "central_mac", "==", "\"basic_central_mac\"", "\n", "self", ".", "central_mac", "=", "mac_REGISTRY", "[", "args", ".", "central_mac", "]", "(", "scheme", ",", "args", ")", "# Groups aren't used in the CentralBasicController. Little hacky", "\n", "self", ".", "target_central_mac", "=", "copy", ".", "deepcopy", "(", "self", ".", "central_mac", ")", "\n", "self", ".", "params", "+=", "list", "(", "self", ".", "central_mac", ".", "parameters", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Error with qCentral\"", ")", "\n", "", "self", ".", "params", "+=", "list", "(", "self", ".", "central_mixer", ".", "parameters", "(", ")", ")", "\n", "self", ".", "target_central_mixer", "=", "copy", ".", "deepcopy", "(", "self", ".", "central_mixer", ")", "\n", "\n", "print", "(", "'Mixer Size: '", ")", "\n", "print", "(", "get_parameters_num", "(", "list", "(", "self", ".", "mixer", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "central_mixer", ".", "parameters", "(", ")", ")", ")", ")", "\n", "\n", "self", ".", "optimiser", "=", "Adam", "(", "params", "=", "self", ".", "params", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "self", ".", "log_stats_t", "=", "-", "self", ".", "args", ".", "learner_log_interval", "-", "1", "\n", "\n", "self", ".", "grad_norm", "=", "1", "\n", "self", ".", "mixer_norm", "=", "1", "\n", "self", ".", "mixer_norms", "=", "deque", "(", "[", "1", "]", ",", "maxlen", "=", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.max_q_learner.MAXQLearner.train": [[76, 222], ["[].float", "[].float", "max_q_learner.MAXQLearner.mac.init_hidden", "range", "torch.stack", "torch.gather().squeeze", "max_q_learner.MAXQLearner.target_mac.init_hidden", "range", "torch.stack", "max_q_learner.MAXQLearner.central_mac.init_hidden", "range", "torch.stack", "torch.gather().squeeze", "max_q_learner.MAXQLearner.target_central_mac.init_hidden", "range", "torch.stack", "torch.gather().squeeze", "max_q_learner.MAXQLearner.mixer", "max_q_learner.MAXQLearner.target_central_mixer", "pymarl.utils.rl_utils.build_td_lambda_targets", "mask.expand_as.expand_as.expand_as", "max_q_learner.MAXQLearner.central_mixer", "mask.expand_as.expand_as.expand_as", "max_q_learner.MAXQLearner.optimiser.zero_grad", "loss.backward", "max_q_learner.MAXQLearner.mixer_norms.append", "torch.nn.utils.clip_grad_norm_", "max_q_learner.MAXQLearner.optimiser.step", "max_q_learner.MAXQLearner.mac.forward", "torch.stack.append", "max_q_learner.MAXQLearner.target_mac.forward", "torch.stack.append", "torch.stack.clone().detach", "mac_out_detach[].max", "torch.gather().squeeze", "Exception", "max_q_learner.MAXQLearner.central_mac.forward", "torch.stack.append", "max_q_learner.MAXQLearner.target_central_mac.forward", "torch.stack.append", "pymarl.utils.rl_utils.build_td_lambda_targets.detach", "pymarl.utils.rl_utils.build_td_lambda_targets.detach", "mask.expand_as.expand_as.sum", "torch.ones_like", "torch.where", "torch.where.mean().item", "max_q_learner.MAXQLearner.target_central_mixer", "torch.where", "torch.where.mean().item", "mask.expand_as.expand_as.sum", "p.grad.data.norm", "p.grad.data.norm", "max_q_learner.MAXQLearner._update_targets", "max_q_learner.MAXQLearner.logger.log_stat", "max_q_learner.MAXQLearner.logger.log_stat", "max_q_learner.MAXQLearner.logger.log_stat", "max_q_learner.MAXQLearner.logger.log_stat", "max_q_learner.MAXQLearner.logger.log_stat", "mask.expand_as.expand_as.sum().item", "max_q_learner.MAXQLearner.logger.log_stat", "max_q_learner.MAXQLearner.logger.log_stat", "max_q_learner.MAXQLearner.logger.log_stat", "max_q_learner.MAXQLearner.logger.log_stat", "max_q_learner.MAXQLearner.logger.log_stat", "torch.gather", "torch.gather", "torch.gather", "p.grad.data.norm.item", "p.grad.data.norm.item", "loss.item", "qmix_loss.item", "central_loss.item", "torch.stack.clone", "torch.gather", "cur_max_actions[].unsqueeze().repeat", "torch.ones_like", "torch.where.mean", "torch.ones_like", "torch.where.mean", "mask.expand_as.expand_as.sum", "masked_td_error.abs().sum().item", "actions.unsqueeze().repeat", "torch.where.detach", "cur_max_actions[].unsqueeze", "masked_td_error.abs().sum", "actions.unsqueeze", "masked_td_error.abs"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.build_td_lambda_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner._update_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "train", "(", "self", ",", "batch", ":", "EpisodeBatch", ",", "t_env", ":", "int", ",", "episode_num", ":", "int", ")", ":", "\n", "# Get the relevant quantities", "\n", "        ", "rewards", "=", "batch", "[", "\"reward\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "actions", "=", "batch", "[", "\"actions\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "terminated", "=", "batch", "[", "\"terminated\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "=", "batch", "[", "\"filled\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "[", ":", ",", "1", ":", "]", "=", "mask", "[", ":", ",", "1", ":", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "avail_actions", "=", "batch", "[", "\"avail_actions\"", "]", "\n", "\n", "# Calculate estimated Q-Values", "\n", "mac_out", "=", "[", "]", "\n", "self", ".", "mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", ")", ":", "\n", "            ", "agent_outs", "=", "self", ".", "mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "mac_out", ".", "append", "(", "agent_outs", ")", "\n", "", "mac_out", "=", "th", ".", "stack", "(", "mac_out", ",", "dim", "=", "1", ")", "# Concat over time", "\n", "\n", "# Pick the Q-Values for the actions taken by each agent", "\n", "chosen_action_qvals_agents", "=", "th", ".", "gather", "(", "mac_out", "[", ":", ",", ":", "-", "1", "]", ",", "dim", "=", "3", ",", "index", "=", "actions", ")", ".", "squeeze", "(", "3", ")", "# Remove the last dim", "\n", "chosen_action_qvals", "=", "chosen_action_qvals_agents", "\n", "\n", "# Calculate the Q-Values necessary for the target", "\n", "target_mac_out", "=", "[", "]", "\n", "self", ".", "target_mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", ")", ":", "\n", "            ", "target_agent_outs", "=", "self", ".", "target_mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "target_mac_out", ".", "append", "(", "target_agent_outs", ")", "\n", "\n", "# We don't need the first timesteps Q-Value estimate for calculating targets", "\n", "", "target_mac_out", "=", "th", ".", "stack", "(", "target_mac_out", "[", ":", "]", ",", "dim", "=", "1", ")", "# Concat across time", "\n", "\n", "# Mask out unavailable actions", "\n", "target_mac_out", "[", "avail_actions", "[", ":", ",", ":", "]", "==", "0", "]", "=", "-", "9999999", "# From OG deepmarl", "\n", "\n", "# Max over target Q-Values", "\n", "if", "self", ".", "args", ".", "double_q", ":", "\n", "# Get actions that maximise live Q (for double q-learning)", "\n", "            ", "mac_out_detach", "=", "mac_out", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mac_out_detach", "[", "avail_actions", "==", "0", "]", "=", "-", "9999999", "\n", "cur_max_action_targets", ",", "cur_max_actions", "=", "mac_out_detach", "[", ":", ",", ":", "]", ".", "max", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "\n", "target_max_agent_qvals", "=", "th", ".", "gather", "(", "target_mac_out", "[", ":", ",", ":", "]", ",", "3", ",", "cur_max_actions", "[", ":", ",", ":", "]", ")", ".", "squeeze", "(", "3", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Use double q\"", ")", "\n", "\n", "# Central MAC stuff", "\n", "", "central_mac_out", "=", "[", "]", "\n", "self", ".", "central_mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", ")", ":", "\n", "            ", "agent_outs", "=", "self", ".", "central_mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "central_mac_out", ".", "append", "(", "agent_outs", ")", "\n", "", "central_mac_out", "=", "th", ".", "stack", "(", "central_mac_out", ",", "dim", "=", "1", ")", "# Concat over time", "\n", "central_chosen_action_qvals_agents", "=", "th", ".", "gather", "(", "central_mac_out", "[", ":", ",", ":", "-", "1", "]", ",", "dim", "=", "3", ",", "index", "=", "actions", ".", "unsqueeze", "(", "4", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "1", ",", "self", ".", "args", ".", "central_action_embed", ")", ")", ".", "squeeze", "(", "3", ")", "# Remove the last dim", "\n", "\n", "central_target_mac_out", "=", "[", "]", "\n", "self", ".", "target_central_mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", ")", ":", "\n", "            ", "target_agent_outs", "=", "self", ".", "target_central_mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "central_target_mac_out", ".", "append", "(", "target_agent_outs", ")", "\n", "", "central_target_mac_out", "=", "th", ".", "stack", "(", "central_target_mac_out", "[", ":", "]", ",", "dim", "=", "1", ")", "# Concat across time", "\n", "# Mask out unavailable actions", "\n", "central_target_mac_out", "[", "avail_actions", "[", ":", ",", ":", "]", "==", "0", "]", "=", "-", "9999999", "# From OG deepmarl", "\n", "# Use the Qmix max actions", "\n", "central_target_max_agent_qvals", "=", "th", ".", "gather", "(", "central_target_mac_out", "[", ":", ",", ":", "]", ",", "3", ",", "cur_max_actions", "[", ":", ",", ":", "]", ".", "unsqueeze", "(", "4", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "1", ",", "self", ".", "args", ".", "central_action_embed", ")", ")", ".", "squeeze", "(", "3", ")", "\n", "# ---", "\n", "\n", "# Mix", "\n", "chosen_action_qvals", "=", "self", ".", "mixer", "(", "chosen_action_qvals", ",", "batch", "[", "\"state\"", "]", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "target_max_qvals", "=", "self", ".", "target_central_mixer", "(", "central_target_max_agent_qvals", ",", "batch", "[", "\"state\"", "]", ")", "\n", "\n", "# We use the calculation function of sarsa lambda to approximate q star lambda", "\n", "targets", "=", "build_td_lambda_targets", "(", "rewards", ",", "terminated", ",", "mask", ",", "target_max_qvals", ",", "\n", "self", ".", "args", ".", "n_agents", ",", "self", ".", "args", ".", "gamma", ",", "self", ".", "args", ".", "td_lambda", ")", "\n", "\n", "# Td-error", "\n", "td_error", "=", "(", "chosen_action_qvals", "-", "(", "targets", ".", "detach", "(", ")", ")", ")", "\n", "\n", "mask", "=", "mask", ".", "expand_as", "(", "td_error", ")", "\n", "\n", "# 0-out the targets that came from padded data", "\n", "masked_td_error", "=", "td_error", "*", "mask", "\n", "\n", "# Training central Q", "\n", "central_chosen_action_qvals", "=", "self", ".", "central_mixer", "(", "central_chosen_action_qvals_agents", ",", "batch", "[", "\"state\"", "]", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "central_td_error", "=", "(", "central_chosen_action_qvals", "-", "targets", ".", "detach", "(", ")", ")", "\n", "central_mask", "=", "mask", ".", "expand_as", "(", "central_td_error", ")", "\n", "central_masked_td_error", "=", "central_td_error", "*", "central_mask", "\n", "central_loss", "=", "0.5", "*", "(", "central_masked_td_error", "**", "2", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n", "# QMIX loss with weighting", "\n", "ws", "=", "th", ".", "ones_like", "(", "td_error", ")", "*", "self", ".", "args", ".", "w", "\n", "if", "self", ".", "args", ".", "hysteretic_qmix", ":", "# OW-QMIX", "\n", "            ", "ws", "=", "th", ".", "where", "(", "td_error", "<", "0", ",", "th", ".", "ones_like", "(", "td_error", ")", "*", "1", ",", "ws", ")", "# Target is greater than current max", "\n", "w_to_use", "=", "ws", ".", "mean", "(", ")", ".", "item", "(", ")", "# For logging", "\n", "", "else", ":", "# CW-QMIX", "\n", "            ", "is_max_action", "=", "(", "actions", "==", "cur_max_actions", "[", ":", ",", ":", "-", "1", "]", ")", ".", "min", "(", "dim", "=", "2", ")", "[", "0", "]", "\n", "max_action_qtot", "=", "self", ".", "target_central_mixer", "(", "central_target_max_agent_qvals", "[", ":", ",", ":", "-", "1", "]", ",", "batch", "[", "\"state\"", "]", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "qtot_larger", "=", "targets", ">", "max_action_qtot", "\n", "ws", "=", "th", ".", "where", "(", "is_max_action", "|", "qtot_larger", ",", "th", ".", "ones_like", "(", "td_error", ")", "*", "1", ",", "ws", ")", "# Target is greater than current max", "\n", "w_to_use", "=", "ws", ".", "mean", "(", ")", ".", "item", "(", ")", "# Average of ws for logging", "\n", "\n", "", "qmix_loss", "=", "(", "ws", ".", "detach", "(", ")", "*", "(", "masked_td_error", "**", "2", ")", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n", "# The weightings for the different losses aren't used (they are always set to 1)", "\n", "loss", "=", "self", ".", "args", ".", "qmix_loss", "*", "qmix_loss", "+", "self", ".", "args", ".", "central_loss", "*", "central_loss", "\n", "\n", "# Optimise", "\n", "self", ".", "optimiser", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Logging", "\n", "agent_norm", "=", "0", "\n", "for", "p", "in", "self", ".", "mac_params", ":", "\n", "            ", "param_norm", "=", "p", ".", "grad", ".", "data", ".", "norm", "(", "2", ")", "\n", "agent_norm", "+=", "param_norm", ".", "item", "(", ")", "**", "2", "\n", "", "agent_norm", "=", "agent_norm", "**", "(", "1.", "/", "2", ")", "\n", "\n", "mixer_norm", "=", "0", "\n", "for", "p", "in", "self", ".", "mixer_params", ":", "\n", "            ", "param_norm", "=", "p", ".", "grad", ".", "data", ".", "norm", "(", "2", ")", "\n", "mixer_norm", "+=", "param_norm", ".", "item", "(", ")", "**", "2", "\n", "", "mixer_norm", "=", "mixer_norm", "**", "(", "1.", "/", "2", ")", "\n", "self", ".", "mixer_norm", "=", "mixer_norm", "\n", "self", ".", "mixer_norms", ".", "append", "(", "mixer_norm", ")", "\n", "\n", "grad_norm", "=", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "params", ",", "self", ".", "args", ".", "grad_norm_clip", ")", "\n", "self", ".", "grad_norm", "=", "grad_norm", "\n", "\n", "self", ".", "optimiser", ".", "step", "(", ")", "\n", "\n", "if", "(", "episode_num", "-", "self", ".", "last_target_update_episode", ")", "/", "self", ".", "args", ".", "target_update_interval", ">=", "1.0", ":", "\n", "            ", "self", ".", "_update_targets", "(", ")", "\n", "self", ".", "last_target_update_episode", "=", "episode_num", "\n", "\n", "", "if", "t_env", "-", "self", ".", "log_stats_t", ">=", "self", ".", "args", ".", "learner_log_interval", ":", "\n", "            ", "self", ".", "logger", ".", "log_stat", "(", "\"loss\"", ",", "loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"qmix_loss\"", ",", "qmix_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"grad_norm\"", ",", "grad_norm", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"mixer_norm\"", ",", "mixer_norm", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"agent_norm\"", ",", "agent_norm", ",", "t_env", ")", "\n", "mask_elems", "=", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"td_error_abs\"", ",", "(", "masked_td_error", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"q_taken_mean\"", ",", "(", "chosen_action_qvals", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "(", "mask_elems", "*", "self", ".", "args", ".", "n_agents", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"target_mean\"", ",", "(", "targets", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "(", "mask_elems", "*", "self", ".", "args", ".", "n_agents", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"central_loss\"", ",", "central_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"w_to_use\"", ",", "w_to_use", ",", "t_env", ")", "\n", "self", ".", "log_stats_t", "=", "t_env", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.max_q_learner.MAXQLearner._update_targets": [[223, 231], ["max_q_learner.MAXQLearner.target_mac.load_state", "max_q_learner.MAXQLearner.target_central_mixer.load_state_dict", "max_q_learner.MAXQLearner.logger.console_logger.info", "max_q_learner.MAXQLearner.target_mixer.load_state_dict", "max_q_learner.MAXQLearner.target_central_mac.load_state", "max_q_learner.MAXQLearner.central_mixer.state_dict", "max_q_learner.MAXQLearner.mixer.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_state", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_state"], ["", "", "def", "_update_targets", "(", "self", ")", ":", "\n", "        ", "self", ".", "target_mac", ".", "load_state", "(", "self", ".", "mac", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "self", ".", "target_mixer", ".", "load_state_dict", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ")", "\n", "", "if", "self", ".", "central_mac", "is", "not", "None", ":", "\n", "            ", "self", ".", "target_central_mac", ".", "load_state", "(", "self", ".", "central_mac", ")", "\n", "", "self", ".", "target_central_mixer", ".", "load_state_dict", "(", "self", ".", "central_mixer", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "logger", ".", "console_logger", ".", "info", "(", "\"Updated target network\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.max_q_learner.MAXQLearner.cuda": [[232, 243], ["max_q_learner.MAXQLearner.mac.cuda", "max_q_learner.MAXQLearner.target_mac.cuda", "max_q_learner.MAXQLearner.central_mixer.cuda", "max_q_learner.MAXQLearner.target_central_mixer.cuda", "max_q_learner.MAXQLearner.mixer.cuda", "max_q_learner.MAXQLearner.target_mixer.cuda", "max_q_learner.MAXQLearner.central_mac.cuda", "max_q_learner.MAXQLearner.target_central_mac.cuda"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "mac", ".", "cuda", "(", ")", "\n", "self", ".", "target_mac", ".", "cuda", "(", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "self", ".", "mixer", ".", "cuda", "(", ")", "\n", "self", ".", "target_mixer", ".", "cuda", "(", ")", "\n", "", "if", "self", ".", "central_mac", "is", "not", "None", ":", "\n", "            ", "self", ".", "central_mac", ".", "cuda", "(", ")", "\n", "self", ".", "target_central_mac", ".", "cuda", "(", ")", "\n", "", "self", ".", "central_mixer", ".", "cuda", "(", ")", "\n", "self", ".", "target_central_mixer", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.max_q_learner.MAXQLearner.save_models": [[245, 250], ["max_q_learner.MAXQLearner.mac.save_models", "torch.save", "torch.save", "max_q_learner.MAXQLearner.optimiser.state_dict", "max_q_learner.MAXQLearner.mixer.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models"], ["", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "save_models", "(", "path", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "th", ".", "save", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ",", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ")", "\n", "", "th", ".", "save", "(", "self", ".", "optimiser", ".", "state_dict", "(", ")", ",", "\"{}/opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.max_q_learner.MAXQLearner.load_models": [[251, 258], ["max_q_learner.MAXQLearner.mac.load_models", "max_q_learner.MAXQLearner.target_mac.load_models", "max_q_learner.MAXQLearner.optimiser.load_state_dict", "max_q_learner.MAXQLearner.mixer.load_state_dict", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models"], ["", "def", "load_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "load_models", "(", "path", ")", "\n", "# Not quite right but I don't want to save target networks", "\n", "self", ".", "target_mac", ".", "load_models", "(", "path", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "self", ".", "mixer", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "self", ".", "optimiser", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.lica_learner.LICALearner.__init__": [[11, 38], ["pymarl.modules.critics.lica.LICACritic", "copy.deepcopy", "list", "list", "torch.optim.Adam", "torch.optim.Adam", "print", "print", "lica_learner.LICALearner.mac.parameters", "lica_learner.LICALearner.critic.parameters", "pymarl.utils.th_utils.get_parameters_num", "lica_learner.LICALearner.critic.parameters"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.th_utils.get_parameters_num", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters"], ["    ", "def", "__init__", "(", "self", ",", "mac", ",", "scheme", ",", "logger", ",", "callback", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "n_actions", "=", "args", ".", "n_actions", "\n", "self", ".", "mac", "=", "mac", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "last_target_update_episode", "=", "0", "\n", "self", ".", "critic_training_steps", "=", "0", "\n", "\n", "self", ".", "log_stats_t", "=", "-", "self", ".", "args", ".", "learner_log_interval", "-", "1", "\n", "self", ".", "log_stats_t_agent", "=", "-", "self", ".", "args", ".", "learner_log_interval", "-", "1", "\n", "\n", "self", ".", "critic", "=", "LICACritic", "(", "scheme", ",", "args", ")", "\n", "self", ".", "target_critic", "=", "copy", ".", "deepcopy", "(", "self", ".", "critic", ")", "\n", "\n", "self", ".", "agent_params", "=", "list", "(", "self", ".", "mac", ".", "parameters", "(", ")", ")", "\n", "self", ".", "critic_params", "=", "list", "(", "self", ".", "critic", ".", "parameters", "(", ")", ")", "\n", "self", ".", "params", "=", "self", ".", "agent_params", "+", "self", ".", "critic_params", "\n", "\n", "self", ".", "agent_optimiser", "=", "Adam", "(", "params", "=", "self", ".", "agent_params", ",", "lr", "=", "args", ".", "lr", ")", "\n", "self", ".", "critic_optimiser", "=", "Adam", "(", "params", "=", "self", ".", "critic_params", ",", "lr", "=", "args", ".", "critic_lr", ")", "\n", "\n", "self", ".", "entropy_coef", "=", "args", ".", "entropy_coef", "\n", "\n", "print", "(", "'Mixer Size: '", ")", "\n", "print", "(", "get_parameters_num", "(", "self", ".", "critic", ".", "parameters", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.lica_learner.LICALearner.train": [[39, 94], ["lica_learner.LICALearner.train_critic_td", "[].float", "[].float", "lica_learner.LICALearner.mac.init_hidden", "range", "torch.stack", "torch.stack", "lica_learner.LICALearner.critic", "mask.expand_as.expand_as.expand_as", "copy.deepcopy", "lica_learner.LICALearner.agent_optimiser.zero_grad", "lica_learner.LICALearner.backward", "torch.nn.utils.clip_grad_norm_", "lica_learner.LICALearner.agent_optimiser.step", "lica_learner.LICALearner.mac.forward", "pymarl.components.action_selectors.multinomial_entropy().mean", "torch.nn.functional.softmax", "torch.stack.append", "torch.stack.append", "torch.stack.sum", "mask.expand_as.expand_as.sum", "copy.deepcopy.sum", "entropy_loss.item", "lica_learner.LICALearner.logger.log_stat", "lica_learner.LICALearner.logger.log_stat", "lica_learner.LICALearner.logger.log_stat", "lica_learner.LICALearner.item", "entropy_loss.item", "pymarl.components.action_selectors.multinomial_entropy"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.lica_learner.LICALearner.train_critic_td", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.multinomial_entropy"], ["", "def", "train", "(", "self", ",", "batch", ":", "EpisodeBatch", ",", "t_env", ":", "int", ",", "episode_num", ":", "int", ")", ":", "\n", "        ", "self", ".", "train_critic_td", "(", "batch", ",", "t_env", ",", "episode_num", ")", "\n", "\n", "# Get the relevant quantities", "\n", "bs", "=", "batch", ".", "batch_size", "\n", "max_t", "=", "batch", ".", "max_seq_length", "\n", "rewards", "=", "batch", "[", "\"reward\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "actions", "=", "batch", "[", "\"actions\"", "]", "[", ":", ",", ":", "]", "\n", "terminated", "=", "batch", "[", "\"terminated\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "=", "batch", "[", "\"filled\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "[", ":", ",", "1", ":", "]", "=", "mask", "[", ":", ",", "1", ":", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "avail_actions", "=", "batch", "[", "\"avail_actions\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "mac_out", "=", "[", "]", "\n", "mac_out_entropy", "=", "[", "]", "\n", "self", ".", "mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", "-", "1", ")", ":", "\n", "# -------------------------------------------------------------------------------------#", "\n", "# NOTE: We hard-coded the forward pass arguments for experiment, we will fix this later", "\n", "# -------------------------------------------------------------------------------------#", "\n", "            ", "agent_outs", "=", "self", ".", "mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ",", "test_mode", "=", "True", ",", "gumbel", "=", "True", ")", "\n", "agent_entropy", "=", "multinomial_entropy", "(", "agent_outs", ")", ".", "mean", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "agent_probs", "=", "th", ".", "nn", ".", "functional", ".", "softmax", "(", "agent_outs", ",", "dim", "=", "-", "1", ")", "\n", "mac_out", ".", "append", "(", "agent_probs", ")", "\n", "mac_out_entropy", ".", "append", "(", "agent_entropy", ")", "\n", "", "mac_out", "=", "th", ".", "stack", "(", "mac_out", ",", "dim", "=", "1", ")", "# Concat over time", "\n", "mac_out_entropy", "=", "th", ".", "stack", "(", "mac_out_entropy", ",", "dim", "=", "1", ")", "\n", "\n", "# Mask out unavailable actions, renormalise (as in action selection)", "\n", "mac_out", "[", "avail_actions", "==", "0", "]", "=", "0", "\n", "mac_out", "=", "mac_out", "/", "mac_out", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "mac_out", "[", "avail_actions", "==", "0", "]", "=", "0", "\n", "\n", "mix_loss", "=", "self", ".", "critic", "(", "mac_out", ",", "batch", "[", "\"state\"", "]", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "\n", "mask", "=", "mask", ".", "expand_as", "(", "mix_loss", ")", "\n", "entropy_mask", "=", "copy", ".", "deepcopy", "(", "mask", ")", "\n", "\n", "mix_loss", "=", "(", "mix_loss", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "entropy_loss", "=", "(", "mac_out_entropy", "*", "entropy_mask", ")", ".", "sum", "(", ")", "/", "entropy_mask", ".", "sum", "(", ")", "\n", "entropy_ratio", "=", "self", ".", "entropy_coef", "/", "entropy_loss", ".", "item", "(", ")", "\n", "\n", "mix_loss", "=", "-", "mix_loss", "-", "entropy_ratio", "*", "entropy_loss", "\n", "\n", "# Optimise agents", "\n", "self", ".", "agent_optimiser", ".", "zero_grad", "(", ")", "\n", "mix_loss", ".", "backward", "(", ")", "\n", "grad_norm", "=", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "agent_params", ",", "self", ".", "args", ".", "grad_norm_clip", ")", "\n", "self", ".", "agent_optimiser", ".", "step", "(", ")", "\n", "\n", "if", "t_env", "-", "self", ".", "log_stats_t_agent", ">=", "self", ".", "args", ".", "learner_log_interval", ":", "\n", "            ", "self", ".", "logger", ".", "log_stat", "(", "\"mix_loss\"", ",", "mix_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"entropy\"", ",", "entropy_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"agent_grad_norm\"", ",", "grad_norm", ",", "t_env", ")", "\n", "self", ".", "log_stats_t_agent", "=", "t_env", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.lica_learner.LICALearner.train_critic_td": [[96, 152], ["batch[].float", "batch[].float", "lica_learner.LICALearner.critic", "lica_learner.LICALearner.critic_optimiser.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "lica_learner.LICALearner.critic_optimiser.step", "running_log[].append", "running_log[].append", "batch[].float.sum().item", "running_log[].append", "running_log[].append", "running_log[].append", "torch.no_grad", "pymarl.utils.rl_utils.build_td_lambda_targets", "pymarl.utils.rl_utils.build_td_lambda_targets.detach", "batch[].float.sum", "loss.item", "len", "lica_learner.LICALearner._update_targets", "lica_learner.LICALearner.target_critic", "batch[].float.sum", "masked_td_error.abs().sum().item", "lica_learner.LICALearner.logger.log_stat", "masked_td_error.abs().sum", "sum", "masked_td_error.abs"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.build_td_lambda_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner._update_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "", "def", "train_critic_td", "(", "self", ",", "batch", ":", "EpisodeBatch", ",", "t_env", ":", "int", ",", "episode_num", ":", "int", ")", ":", "\n", "        ", "rewards", "=", "batch", "[", "\"reward\"", "]", "\n", "actions", "=", "batch", "[", "\"actions_onehot\"", "]", "\n", "terminated", "=", "batch", "[", "\"terminated\"", "]", ".", "float", "(", ")", "\n", "mask", "=", "batch", "[", "\"filled\"", "]", ".", "float", "(", ")", "\n", "mask", "[", ":", ",", "1", ":", "]", "=", "mask", "[", ":", ",", "1", ":", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "avail_actions", "=", "batch", "[", "\"avail_actions\"", "]", "\n", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "# Optimise critic", "\n", "            ", "target_q_vals", "=", "self", ".", "target_critic", "(", "actions", ",", "batch", "[", "\"state\"", "]", ")", "[", ":", ",", ":", "]", "\n", "\n", "# Calculate td-lambda targets", "\n", "targets", "=", "build_td_lambda_targets", "(", "rewards", ",", "terminated", ",", "mask", ",", "target_q_vals", ",", "self", ".", "n_agents", ",", "self", ".", "args", ".", "gamma", ",", "self", ".", "args", ".", "td_lambda", ")", "\n", "\n", "", "running_log", "=", "{", "\n", "\"critic_loss\"", ":", "[", "]", ",", "\n", "\"critic_grad_norm\"", ":", "[", "]", ",", "\n", "\"td_error_abs\"", ":", "[", "]", ",", "\n", "\"target_mean\"", ":", "[", "]", ",", "\n", "\"q_t_mean\"", ":", "[", "]", ",", "\n", "}", "\n", "\n", "mask", "=", "mask", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "q_t", "=", "self", ".", "critic", "(", "actions", "[", ":", ",", ":", "-", "1", "]", ",", "batch", "[", "\"state\"", "]", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "\n", "td_error", "=", "(", "q_t", "-", "targets", ".", "detach", "(", ")", ")", "\n", "\n", "# 0-out the targets that came from padded data", "\n", "masked_td_error", "=", "td_error", "*", "mask", "\n", "\n", "# Normal L2 loss, take mean over actual data", "\n", "loss", "=", "(", "masked_td_error", "**", "2", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "self", ".", "critic_optimiser", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_norm", "=", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "critic_params", ",", "self", ".", "args", ".", "grad_norm_clip", ")", "\n", "self", ".", "critic_optimiser", ".", "step", "(", ")", "\n", "self", ".", "critic_training_steps", "+=", "1", "\n", "\n", "running_log", "[", "\"critic_loss\"", "]", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "running_log", "[", "\"critic_grad_norm\"", "]", ".", "append", "(", "grad_norm", ")", "\n", "mask_elems", "=", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "running_log", "[", "\"td_error_abs\"", "]", ".", "append", "(", "(", "masked_td_error", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", ")", "\n", "running_log", "[", "\"q_t_mean\"", "]", ".", "append", "(", "(", "q_t", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", "\n", "running_log", "[", "\"target_mean\"", "]", ".", "append", "(", "(", "targets", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", "\n", "\n", "if", "t_env", "-", "self", ".", "log_stats_t", ">=", "self", ".", "args", ".", "learner_log_interval", ":", "\n", "            ", "ts_logged", "=", "len", "(", "running_log", "[", "\"critic_loss\"", "]", ")", "\n", "for", "key", "in", "[", "\"critic_loss\"", ",", "\"critic_grad_norm\"", ",", "\"td_error_abs\"", ",", "\"q_t_mean\"", ",", "\"target_mean\"", "]", ":", "\n", "                ", "self", ".", "logger", ".", "log_stat", "(", "key", ",", "sum", "(", "running_log", "[", "key", "]", ")", "/", "ts_logged", ",", "t_env", ")", "\n", "", "self", ".", "log_stats_t", "=", "t_env", "\n", "\n", "", "if", "(", "self", ".", "critic_training_steps", "-", "self", ".", "last_target_update_episode", ")", "/", "self", ".", "args", ".", "target_update_interval", ">=", "1.0", ":", "\n", "            ", "self", ".", "_update_targets", "(", ")", "\n", "self", ".", "last_target_update_episode", "=", "self", ".", "critic_training_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.lica_learner.LICALearner._update_targets": [[153, 156], ["lica_learner.LICALearner.target_critic.load_state_dict", "lica_learner.LICALearner.logger.console_logger.info", "lica_learner.LICALearner.critic.state_dict"], "methods", ["None"], ["", "", "def", "_update_targets", "(", "self", ")", ":", "\n", "        ", "self", ".", "target_critic", ".", "load_state_dict", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "logger", ".", "console_logger", ".", "info", "(", "\"Updated target network\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.lica_learner.LICALearner.cuda": [[157, 161], ["lica_learner.LICALearner.mac.cuda", "lica_learner.LICALearner.critic.cuda", "lica_learner.LICALearner.target_critic.cuda"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "mac", ".", "cuda", "(", ")", "\n", "self", ".", "critic", ".", "cuda", "(", ")", "\n", "self", ".", "target_critic", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.lica_learner.LICALearner.save_models": [[162, 167], ["lica_learner.LICALearner.mac.save_models", "torch.save", "torch.save", "torch.save", "lica_learner.LICALearner.critic.state_dict", "lica_learner.LICALearner.agent_optimiser.state_dict", "lica_learner.LICALearner.critic_optimiser.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models"], ["", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "save_models", "(", "path", ")", "\n", "th", ".", "save", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ",", "\"{}/critic.th\"", ".", "format", "(", "path", ")", ")", "\n", "th", ".", "save", "(", "self", ".", "agent_optimiser", ".", "state_dict", "(", ")", ",", "\"{}/agent_opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "th", ".", "save", "(", "self", ".", "critic_optimiser", ".", "state_dict", "(", ")", ",", "\"{}/critic_opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.lica_learner.LICALearner.load_models": [[168, 174], ["lica_learner.LICALearner.mac.load_models", "lica_learner.LICALearner.critic.load_state_dict", "lica_learner.LICALearner.target_critic.load_state_dict", "lica_learner.LICALearner.agent_optimiser.load_state_dict", "lica_learner.LICALearner.critic_optimiser.load_state_dict", "torch.load", "lica_learner.LICALearner.critic.state_dict", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models"], ["", "def", "load_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "load_models", "(", "path", ")", "\n", "self", ".", "critic", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/critic.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "self", ".", "target_critic", ".", "load_state_dict", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "agent_optimiser", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/agent_opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "self", ".", "critic_optimiser", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/critic_opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_gnn_learner.ComaGNNLearner.__init__": [[17, 42], ["pymarl.modules.critics.coma_gnn.ComaGNNCritic", "copy.deepcopy", "list", "list", "torch.optim.Adam", "torch.optim.Adam", "pymarl.components.transforms.OneHot", "mac.parameters", "coma_gnn_learner.ComaGNNLearner.critic.parameters", "torch.max"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters"], ["    ", "def", "__init__", "(", "self", ",", "mac", ",", "scheme", ",", "logger", ",", "callback", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "n_actions", "=", "args", ".", "n_actions", "\n", "self", ".", "mac", "=", "mac", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "last_target_update_step", "=", "0", "\n", "self", ".", "critic_training_steps", "=", "0", "\n", "\n", "self", ".", "log_stats_t", "=", "-", "self", ".", "args", ".", "learner_log_interval", "-", "1", "\n", "\n", "self", ".", "critic", "=", "ComaGNNCritic", "(", "scheme", ",", "args", ")", "\n", "self", ".", "target_critic", "=", "copy", ".", "deepcopy", "(", "self", ".", "critic", ")", "\n", "\n", "self", ".", "agent_params", "=", "list", "(", "mac", ".", "parameters", "(", ")", ")", "\n", "self", ".", "critic_params", "=", "list", "(", "self", ".", "critic", ".", "parameters", "(", ")", ")", "\n", "self", ".", "params", "=", "self", ".", "agent_params", "+", "self", ".", "critic_params", "\n", "\n", "self", ".", "agent_optimiser", "=", "Adam", "(", "params", "=", "self", ".", "agent_params", ",", "lr", "=", "args", ".", "lr", ")", "\n", "self", ".", "critic_optimiser", "=", "Adam", "(", "params", "=", "self", ".", "critic_params", ",", "lr", "=", "args", ".", "critic_lr", ")", "\n", "\n", "self", ".", "onehot_transform", "=", "OneHot", "(", "self", ".", "n_actions", ")", "\n", "self", ".", "baseline_agg", "=", "lambda", "x", ",", "dim", ":", "torch", ".", "max", "(", "x", ",", "dim", "=", "dim", ")", "[", "0", "]", "\n", "self", ".", "num_baseline_actions", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_gnn_learner.ComaGNNLearner.train": [[43, 137], ["[].float", "[].float", "coma_gnn_learner.ComaGNNLearner.build_critic_inputs", "coma_gnn_learner.ComaGNNLearner.target_critic", "pymarl.utils.rl_utils.build_td_lambda_targets", "coma_gnn_learner.ComaGNNLearner.build_critic_inputs", "coma_gnn_learner.ComaGNNLearner.critic", "coma_gnn_learner.ComaGNNLearner.sample_actions", "actions.unsqueeze().unsqueeze().repeat", "range", "actions_baseline.permute.permute.permute", "obs.unsqueeze().unsqueeze().repeat", "coma_gnn_learner.ComaGNNLearner.build_critic_inputs", "coma_gnn_learner.ComaGNNLearner.critic", "qvals_baseline_raw.view.view.view", "coma_gnn_learner.ComaGNNLearner.baseline_agg", "qvals_baseline.permute.permute.permute", "[].float.repeat().unsqueeze", "coma_gnn_learner.ComaGNNLearner.eval_policy", "torch.gather", "torch.log", "torch.distributions.Categorical().entropy", "coma_gnn_learner.ComaGNNLearner.critic_optimiser.zero_grad", "critic_loss.backward", "coma_gnn_learner.ComaGNNLearner.critic_optimiser.step", "coma_gnn_learner.ComaGNNLearner.agent_optimiser.zero_grad", "policy_loss.backward", "torch.nn.utils.clip_grad_norm_", "coma_gnn_learner.ComaGNNLearner.agent_optimiser.step", "pymarl.utils.rl_utils.build_td_lambda_targets.detach", "obs.unsqueeze().unsqueeze().repeat.view", "actions_baseline.permute.permute.reshape", "coma_gnn_learner.ComaGNNLearner.unsqueeze().detach", "qvals_baseline.permute.permute.detach", "[].float.repeat().unsqueeze.sum", "[].float.repeat().unsqueeze.sum", "[].float.sum", "coma_gnn_learner.ComaGNNLearner._update_targets", "coma_gnn_learner.ComaGNNLearner.logger.log_stat", "coma_gnn_learner.ComaGNNLearner.logger.log_stat", "[].float.sum().item", "coma_gnn_learner.ComaGNNLearner.logger.log_stat", "coma_gnn_learner.ComaGNNLearner.logger.log_stat", "coma_gnn_learner.ComaGNNLearner.logger.log_stat", "coma_gnn_learner.ComaGNNLearner.logger.log_stat", "coma_gnn_learner.ComaGNNLearner.logger.log_stat", "coma_gnn_learner.ComaGNNLearner.logger.log_stat", "coma_gnn_learner.ComaGNNLearner.logger.log_stat", "actions.unsqueeze().unsqueeze", "obs.unsqueeze().unsqueeze", "[].float.repeat", "torch.distributions.Categorical", "critic_loss.item", "critic_loss.item", "policy_loss.item", "coma_gnn_learner.ComaGNNLearner.unsqueeze", "[].float.sum", "masked_td_error.abs().sum().item", "[].float.sum().item", "[].float.sum().item", "actions.unsqueeze", "obs.unsqueeze", "masked_td_error.abs().sum", "[].float.sum", "[].float.sum", "masked_td_error.abs", "coma_gnn_learner.ComaGNNLearner.max"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_gnn_learner.ComaGNNLearner.build_critic_inputs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.build_td_lambda_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_gnn_learner.ComaGNNLearner.build_critic_inputs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_gnn_learner.ComaGNNLearner.sample_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_gnn_learner.ComaGNNLearner.build_critic_inputs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_gnn_learner.ComaGNNLearner.eval_policy", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner._update_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "train", "(", "self", ",", "batch", ":", "EpisodeBatch", ",", "t_env", ":", "int", ",", "episode_num", ":", "int", ")", ":", "\n", "# Get the relevant quantities", "\n", "# bs = batch.batch_size", "\n", "# max_t = batch.max_seq_length", "\n", "        ", "rewards", "=", "batch", "[", "\"reward\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "obs", "=", "batch", "[", "\"obs\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "actions", "=", "batch", "[", "\"actions\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "terminated", "=", "batch", "[", "\"terminated\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "=", "batch", "[", "\"filled\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "[", ":", ",", "1", ":", "]", "=", "mask", "[", ":", ",", "1", ":", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "avail_actions", "=", "batch", "[", "\"avail_actions\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "## Train Critic", "\n", "\n", "# Calculate td-lambda targets", "\n", "critic_input", "=", "self", ".", "build_critic_inputs", "(", "batch", "[", "\"obs\"", "]", ",", "batch", "[", "\"actions\"", "]", ")", "\n", "target_qvals", "=", "self", ".", "target_critic", "(", "critic_input", ")", "\n", "targets", "=", "build_td_lambda_targets", "(", "rewards", ",", "terminated", ",", "mask", ",", "target_qvals", ",", "self", ".", "n_agents", ",", "self", ".", "args", ".", "gamma", ",", "\n", "self", ".", "args", ".", "td_lambda", ")", "\n", "\n", "critic_input", "=", "self", ".", "build_critic_inputs", "(", "obs", ",", "actions", ")", "\n", "qvals", "=", "self", ".", "critic", "(", "critic_input", ")", "\n", "td_error", "=", "(", "qvals", "-", "targets", ".", "detach", "(", ")", ")", "\n", "masked_td_error", "=", "td_error", "*", "mask", "# 0-out the targets that came from padded data", "\n", "\n", "## Calculate Advantages", "\n", "\n", "actions_baseline_sampled", "=", "self", ".", "sample_actions", "(", "batch", ",", "n_actions", "=", "self", ".", "num_baseline_actions", ")", "\n", "n_actions_sampled", "=", "actions_baseline_sampled", ".", "shape", "[", "-", "1", "]", "\n", "actions_baseline", "=", "actions", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "(", "1", ",", "1", ",", "1", ",", "1", ",", "self", ".", "n_agents", ",", "n_actions_sampled", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_agents", ")", ":", "\n", "            ", "actions_baseline", "[", ":", ",", ":", ",", "i", ",", "0", ",", "i", ",", ":", "]", "=", "actions_baseline_sampled", "[", ":", ",", ":", ",", "i", ",", ":", "]", "\n", "", "actions_baseline", "=", "actions_baseline", ".", "permute", "(", "4", ",", "5", ",", "0", ",", "1", ",", "2", ",", "3", ")", "\n", "obs_baseline", "=", "obs", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "(", "self", ".", "n_agents", ",", "n_actions_sampled", ",", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "critic_input_baseline", "=", "self", ".", "build_critic_inputs", "(", "\n", "obs_baseline", ".", "view", "(", "self", ".", "n_agents", "*", "n_actions_sampled", "*", "batch", ".", "batch_size", ",", "obs", ".", "shape", "[", "1", "]", ",", "obs", ".", "shape", "[", "2", "]", ",", "obs", ".", "shape", "[", "3", "]", ")", ",", "\n", "actions_baseline", ".", "reshape", "(", "self", ".", "n_agents", "*", "n_actions_sampled", "*", "batch", ".", "batch_size", ",", "actions", ".", "shape", "[", "1", "]", ",", "actions", ".", "shape", "[", "2", "]", ",", "1", ")", "\n", ")", "\n", "qvals_baseline_raw", "=", "self", ".", "critic", "(", "critic_input_baseline", ")", "\n", "qvals_baseline_raw", "=", "qvals_baseline_raw", ".", "view", "(", "self", ".", "n_agents", ",", "n_actions_sampled", ",", "batch", ".", "batch_size", ",", "*", "qvals_baseline_raw", ".", "shape", "[", "1", ":", "]", ")", "\n", "qvals_baseline", "=", "self", ".", "baseline_agg", "(", "qvals_baseline_raw", ",", "dim", "=", "1", ")", "\n", "qvals_baseline", "=", "qvals_baseline", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", "# B x T x N x 1", "\n", "advantages", "=", "qvals", ".", "unsqueeze", "(", "2", ")", ".", "detach", "(", ")", "-", "qvals_baseline", ".", "detach", "(", ")", "\n", "\n", "## Train Actor", "\n", "\n", "n_mask", "=", "mask", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "logits", "=", "self", ".", "eval_policy", "(", "batch", ")", "\n", "probs", "=", "torch", ".", "gather", "(", "logits", ",", "dim", "=", "-", "1", ",", "index", "=", "actions", ")", "\n", "probs", "[", "n_mask", "==", "0", "]", "=", "1.0", "\n", "log_probs", "=", "torch", ".", "log", "(", "probs", ")", "\n", "\n", "pi_loss", "=", "-", "(", "(", "advantages", "*", "log_probs", ")", "*", "n_mask", ")", ".", "sum", "(", ")", "/", "n_mask", ".", "sum", "(", ")", "\n", "\n", "dist_entropy", "=", "Categorical", "(", "logits", ")", ".", "entropy", "(", ")", "\n", "dist_entropy", "[", "n_mask", "[", ":", ",", ":", ",", ":", ",", "0", "]", "==", "0", "]", "=", "0", "# fill nan", "\n", "entropy_loss", "=", "(", "dist_entropy", "*", "n_mask", ")", ".", "sum", "(", ")", "/", "n_mask", ".", "sum", "(", ")", "\n", "\n", "## Optimise", "\n", "\n", "critic_loss", "=", "(", "masked_td_error", "**", "2", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "self", ".", "critic_optimiser", ".", "zero_grad", "(", ")", "\n", "critic_loss", ".", "backward", "(", ")", "\n", "self", ".", "critic_optimiser", ".", "step", "(", ")", "\n", "self", ".", "critic_training_steps", "+=", "1", "\n", "\n", "self", ".", "agent_optimiser", ".", "zero_grad", "(", ")", "\n", "policy_loss", "=", "pi_loss", "-", "self", ".", "args", ".", "entropy", "*", "entropy_loss", "\n", "policy_loss", ".", "backward", "(", ")", "\n", "grad_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "agent_params", ",", "self", ".", "args", ".", "grad_norm_clip", ")", "\n", "self", ".", "agent_optimiser", ".", "step", "(", ")", "\n", "\n", "## Update Target", "\n", "\n", "if", "(", "self", ".", "critic_training_steps", "-", "self", ".", "last_target_update_step", ")", "/", "self", ".", "args", ".", "target_update_interval", ">=", "1.0", ":", "\n", "            ", "self", ".", "_update_targets", "(", ")", "\n", "self", ".", "last_target_update_step", "=", "self", ".", "critic_training_steps", "\n", "\n", "## Stats", "\n", "\n", "", "if", "t_env", "-", "self", ".", "log_stats_t", ">=", "self", ".", "args", ".", "learner_log_interval", ":", "\n", "\n", "            ", "self", ".", "logger", ".", "log_stat", "(", "\"critic_loss\"", ",", "critic_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"critic_grad_norm\"", ",", "critic_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "mask_elems", "=", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"td_error_abs\"", ",", "masked_td_error", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"q_taken_mean\"", ",", "(", "qvals", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"target_mean\"", ",", "(", "targets", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ",", "t_env", ")", "\n", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"advantage_mean\"", ",", "(", "advantages", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"policy_loss\"", ",", "policy_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"agent_grad_norm\"", ",", "grad_norm", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"pi_max\"", ",", "(", "logits", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "log_stats_t", "=", "t_env", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_gnn_learner.ComaGNNLearner.eval_policy": [[139, 144], ["coma_gnn_learner.ComaGNNLearner.mac.init_hidden", "torch.stack", "coma_gnn_learner.ComaGNNLearner.mac.forward", "range"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward"], ["", "", "def", "eval_policy", "(", "self", ",", "batch", ")", ":", "\n", "        ", "self", ".", "mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "return", "torch", ".", "stack", "(", "[", "\n", "self", ".", "mac", ".", "forward", "(", "ep_batch", "=", "batch", ",", "t", "=", "t", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", "-", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_gnn_learner.ComaGNNLearner.sample_actions": [[145, 158], ["range", "torch.stack", "[].expand", "coma_gnn_learner.ComaGNNLearner.mac.init_hidden", "torch.stack", "torch.stack.append", "coma_gnn_learner.ComaGNNLearner.mac.select_actions", "torch.arange", "range"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.lica_controller.LICAMAC.select_actions"], ["", "def", "sample_actions", "(", "self", ",", "batch", ",", "n_actions", ")", ":", "\n", "        ", "if", "n_actions", "is", "not", "None", ":", "\n", "            ", "actions", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_actions", ")", ":", "\n", "                ", "self", ".", "mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "actions_sample", "=", "torch", ".", "stack", "(", "[", "\n", "self", ".", "mac", ".", "select_actions", "(", "ep_batch", "=", "batch", ",", "t_ep", "=", "t", ",", "t_env", "=", "np", ".", "Inf", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", "-", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "actions", ".", "append", "(", "actions_sample", ")", "\n", "", "actions", "=", "torch", ".", "stack", "(", "actions", ",", "dim", "=", "-", "1", ")", "\n", "return", "actions", "# B x T x N x n_actions", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "arange", "(", "self", ".", "n_actions", ")", "[", "None", ",", "None", ",", "None", ",", ":", "]", ".", "expand", "(", "batch", ".", "batch_size", ",", "batch", ".", "max_seq_length", "-", "1", ",", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_gnn_learner.ComaGNNLearner.build_critic_inputs": [[159, 162], ["coma_gnn_learner.ComaGNNLearner.onehot_transform.transform", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.transforms.OneHot.transform"], ["", "", "def", "build_critic_inputs", "(", "self", ",", "obs", ",", "actions", ")", ":", "\n", "        ", "actions_onehot", "=", "self", ".", "onehot_transform", ".", "transform", "(", "actions", ")", "\n", "return", "torch", ".", "cat", "(", "[", "obs", ",", "actions_onehot", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_gnn_learner.ComaGNNLearner._update_targets": [[163, 166], ["coma_gnn_learner.ComaGNNLearner.target_critic.load_state_dict", "coma_gnn_learner.ComaGNNLearner.logger.console_logger.info", "coma_gnn_learner.ComaGNNLearner.critic.state_dict"], "methods", ["None"], ["", "def", "_update_targets", "(", "self", ")", ":", "\n", "        ", "self", ".", "target_critic", ".", "load_state_dict", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "logger", ".", "console_logger", ".", "info", "(", "\"Updated target network\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_gnn_learner.ComaGNNLearner.cuda": [[167, 171], ["coma_gnn_learner.ComaGNNLearner.mac.cuda", "coma_gnn_learner.ComaGNNLearner.critic.cuda", "coma_gnn_learner.ComaGNNLearner.target_critic.cuda"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "mac", ".", "cuda", "(", ")", "\n", "self", ".", "critic", ".", "cuda", "(", ")", "\n", "self", ".", "target_critic", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_gnn_learner.ComaGNNLearner.save_models": [[172, 177], ["coma_gnn_learner.ComaGNNLearner.mac.save_models", "torch.save", "torch.save", "torch.save", "coma_gnn_learner.ComaGNNLearner.critic.state_dict", "coma_gnn_learner.ComaGNNLearner.agent_optimiser.state_dict", "coma_gnn_learner.ComaGNNLearner.critic_optimiser.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models"], ["", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "save_models", "(", "path", ")", "\n", "torch", ".", "save", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ",", "\"{}/critic.th\"", ".", "format", "(", "path", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "agent_optimiser", ".", "state_dict", "(", ")", ",", "\"{}/agent_opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "critic_optimiser", ".", "state_dict", "(", ")", ",", "\"{}/critic_opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_gnn_learner.ComaGNNLearner.load_models": [[178, 185], ["coma_gnn_learner.ComaGNNLearner.mac.load_models", "coma_gnn_learner.ComaGNNLearner.critic.load_state_dict", "coma_gnn_learner.ComaGNNLearner.target_critic.load_state_dict", "coma_gnn_learner.ComaGNNLearner.agent_optimiser.load_state_dict", "coma_gnn_learner.ComaGNNLearner.critic_optimiser.load_state_dict", "torch.load", "coma_gnn_learner.ComaGNNLearner.critic.state_dict", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models"], ["", "def", "load_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "load_models", "(", "path", ")", "\n", "self", ".", "critic", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"{}/critic.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "# Not quite right but I don't want to save target networks", "\n", "self", ".", "target_critic", ".", "load_state_dict", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "agent_optimiser", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"{}/agent_opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "self", ".", "critic_optimiser", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"{}/critic_opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.dmaq_qatten_learner.DMAQ_qattenLearner.__init__": [[13, 42], ["list", "torch.optim.Adam", "torch.optim.Adam", "print", "print", "copy.deepcopy", "mac.parameters", "list", "copy.deepcopy", "pymarl.utils.th_utils.get_parameters_num", "pymarl.modules.mixers.dmaq_general.DMAQer", "ValueError", "dmaq_qatten_learner.DMAQ_qattenLearner.mixer.parameters", "dmaq_qatten_learner.DMAQ_qattenLearner.mixer.parameters"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.th_utils.get_parameters_num", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters"], ["    ", "def", "__init__", "(", "self", ",", "mac", ",", "scheme", ",", "logger", ",", "callback", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "mac", "=", "mac", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "params", "=", "list", "(", "mac", ".", "parameters", "(", ")", ")", "\n", "\n", "self", ".", "last_target_update_episode", "=", "0", "\n", "\n", "self", ".", "mixer", "=", "None", "\n", "if", "args", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "if", "args", ".", "mixer", "==", "\"dmaq\"", ":", "\n", "                ", "self", ".", "mixer", "=", "DMAQer", "(", "args", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Mixer {} not recognised.\"", ".", "format", "(", "args", ".", "mixer", ")", ")", "\n", "", "self", ".", "params", "+=", "list", "(", "self", ".", "mixer", ".", "parameters", "(", ")", ")", "\n", "self", ".", "target_mixer", "=", "copy", ".", "deepcopy", "(", "self", ".", "mixer", ")", "\n", "\n", "", "self", ".", "optimiser", "=", "Adam", "(", "params", "=", "self", ".", "params", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "print", "(", "'Mixer Size: '", ")", "\n", "print", "(", "get_parameters_num", "(", "self", ".", "mixer", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "# a little wasteful to deepcopy (e.g. duplicates action selector), but should work for any MAC", "\n", "self", ".", "target_mac", "=", "copy", ".", "deepcopy", "(", "mac", ")", "\n", "\n", "self", ".", "log_stats_t", "=", "-", "self", ".", "args", ".", "learner_log_interval", "-", "1", "\n", "\n", "self", ".", "n_actions", "=", "self", ".", "args", ".", "n_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.dmaq_qatten_learner.DMAQ_qattenLearner.sub_train": [[43, 165], ["[].float", "[].float", "mac.init_hidden", "range", "torch.stack", "torch.stack", "torch.gather().squeeze", "torch.gather().squeeze", "torch.stack.clone().detach", "x_mac_out[].max", "max_action_index.detach().unsqueeze.detach().unsqueeze.detach().unsqueeze", "dmaq_qatten_learner.DMAQ_qattenLearner.target_mac.init_hidden", "range", "torch.stack", "torch.stack", "pymarl.utils.rl_utils.build_td_lambda_targets", "mask.expand_as.expand_as.expand_as", "optimiser.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimiser.step", "mac.forward", "torch.stack.append", "torch.gather().squeeze.detach().cpu().numpy", "dmaq_qatten_learner.DMAQ_qattenLearner.target_mac.forward", "torch.stack.append", "torch.stack.clone().detach", "torch.gather().squeeze", "torch.gather().squeeze", "torch.zeros().cuda", "torch.zeros().cuda", "cur_max_actions_onehot.scatter_.scatter_.scatter_", "mixer", "mixer", "torch.gather().squeeze.detach().cpu().numpy", "pymarl.utils.rl_utils.build_td_lambda_targets.detach().cpu().numpy", "print", "dmaq_qatten_learner.DMAQ_qattenLearner.logger.log_stat", "pymarl.utils.rl_utils.build_td_lambda_targets.detach", "mask.expand_as.expand_as.sum", "torch.mean", "torch.mean", "masked_hit_prob.sum", "mask.expand_as.expand_as.sum", "dmaq_qatten_learner.DMAQ_qattenLearner.logger.log_stat", "dmaq_qatten_learner.DMAQ_qattenLearner.logger.log_stat", "dmaq_qatten_learner.DMAQ_qattenLearner.logger.log_stat", "mask.expand_as.expand_as.sum().item", "dmaq_qatten_learner.DMAQ_qattenLearner.logger.log_stat", "dmaq_qatten_learner.DMAQ_qattenLearner.logger.log_stat", "dmaq_qatten_learner.DMAQ_qattenLearner.logger.log_stat", "torch.gather", "torch.gather", "torch.stack.clone", "max_action_index.detach().unsqueeze.detach().unsqueeze.detach", "th.stack.clone().detach.max", "torch.stack.max", "dmaq_qatten_learner.DMAQ_qattenLearner.target_mixer", "dmaq_qatten_learner.DMAQ_qattenLearner.target_mixer", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "loss.item", "hit_prob.item", "torch.gather().squeeze.detach().cpu", "torch.stack.clone", "torch.gather", "torch.gather", "torch.zeros", "torch.zeros", "torch.gather().squeeze.detach().cpu", "pymarl.utils.rl_utils.build_td_lambda_targets.detach().cpu", "mask.expand_as.expand_as.sum", "masked_td_error.abs().sum().item", "torch.gather().squeeze.detach", "torch.gather().squeeze.detach", "pymarl.utils.rl_utils.build_td_lambda_targets.detach", "masked_td_error.abs().sum", "cur_max_actions.squeeze", "masked_td_error.abs"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.build_td_lambda_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "sub_train", "(", "self", ",", "batch", ":", "EpisodeBatch", ",", "t_env", ":", "int", ",", "episode_num", ":", "int", ",", "mac", ",", "mixer", ",", "optimiser", ",", "params", ",", "\n", "show_demo", "=", "False", ",", "save_data", "=", "None", ")", ":", "\n", "# Get the relevant quantities", "\n", "        ", "rewards", "=", "batch", "[", "\"reward\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "actions", "=", "batch", "[", "\"actions\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "terminated", "=", "batch", "[", "\"terminated\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "=", "batch", "[", "\"filled\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "[", ":", ",", "1", ":", "]", "=", "mask", "[", ":", ",", "1", ":", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "avail_actions", "=", "batch", "[", "\"avail_actions\"", "]", "\n", "actions_onehot", "=", "batch", "[", "\"actions_onehot\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "# Calculate estimated Q-Values", "\n", "mac_out", "=", "[", "]", "\n", "mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", ")", ":", "\n", "            ", "agent_outs", "=", "mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "mac_out", ".", "append", "(", "agent_outs", ")", "\n", "", "mac_out", "=", "th", ".", "stack", "(", "mac_out", ",", "dim", "=", "1", ")", "# Concat over time", "\n", "\n", "# Pick the Q-Values for the actions taken by each agent", "\n", "chosen_action_qvals", "=", "th", ".", "gather", "(", "mac_out", "[", ":", ",", ":", "-", "1", "]", ",", "dim", "=", "3", ",", "index", "=", "actions", ")", ".", "squeeze", "(", "3", ")", "# Remove the last dim", "\n", "\n", "x_mac_out", "=", "mac_out", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "x_mac_out", "[", "avail_actions", "==", "0", "]", "=", "-", "9999999", "\n", "max_action_qvals", ",", "max_action_index", "=", "x_mac_out", "[", ":", ",", ":", "-", "1", "]", ".", "max", "(", "dim", "=", "3", ")", "\n", "\n", "max_action_index", "=", "max_action_index", ".", "detach", "(", ")", ".", "unsqueeze", "(", "3", ")", "\n", "is_max_action", "=", "(", "max_action_index", "==", "actions", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "\n", "if", "show_demo", ":", "\n", "            ", "q_i_data", "=", "chosen_action_qvals", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "q_data", "=", "(", "max_action_qvals", "-", "chosen_action_qvals", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# self.logger.log_stat('agent_1_%d_q_1' % save_data[0], np.squeeze(q_data)[0], t_env)", "\n", "# self.logger.log_stat('agent_2_%d_q_2' % save_data[1], np.squeeze(q_data)[1], t_env)", "\n", "\n", "# Calculate the Q-Values necessary for the target", "\n", "", "target_mac_out", "=", "[", "]", "\n", "self", ".", "target_mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", ")", ":", "\n", "            ", "target_agent_outs", "=", "self", ".", "target_mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "target_mac_out", ".", "append", "(", "target_agent_outs", ")", "\n", "\n", "# We don't need the first timesteps Q-Value estimate for calculating targets", "\n", "", "target_mac_out", "=", "th", ".", "stack", "(", "target_mac_out", ",", "dim", "=", "1", ")", "# Concat across time", "\n", "\n", "# Mask out unavailable actions", "\n", "target_mac_out", "[", "avail_actions", "==", "0", "]", "=", "-", "9999999", "\n", "\n", "# Max over target Q-Values", "\n", "if", "self", ".", "args", ".", "double_q", ":", "\n", "# Get actions that maximise live Q (for double q-learning)", "\n", "            ", "mac_out_detach", "=", "mac_out", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mac_out_detach", "[", "avail_actions", "==", "0", "]", "=", "-", "9999999", "\n", "cur_max_actions", "=", "mac_out_detach", ".", "max", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "target_chosen_qvals", "=", "th", ".", "gather", "(", "target_mac_out", ",", "3", ",", "cur_max_actions", ")", ".", "squeeze", "(", "3", ")", "\n", "target_max_qvals", "=", "target_mac_out", ".", "max", "(", "dim", "=", "3", ")", "[", "0", "]", "\n", "\n", "cur_max_actions_onehot", "=", "th", ".", "zeros", "(", "cur_max_actions", ".", "squeeze", "(", "3", ")", ".", "shape", "+", "(", "self", ".", "n_actions", ",", ")", ")", ".", "cuda", "(", ")", "\n", "cur_max_actions_onehot", "=", "cur_max_actions_onehot", ".", "scatter_", "(", "3", ",", "cur_max_actions", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "\"Use Double Q\"", "\n", "\n", "# Mix", "\n", "", "if", "mixer", "is", "not", "None", ":", "\n", "            ", "ans_chosen", "=", "mixer", "(", "chosen_action_qvals", ",", "batch", "[", "\"state\"", "]", "[", ":", ",", ":", "-", "1", "]", ",", "is_v", "=", "True", ")", "\n", "ans_adv", "=", "mixer", "(", "chosen_action_qvals", ",", "batch", "[", "\"state\"", "]", "[", ":", ",", ":", "-", "1", "]", ",", "actions", "=", "actions_onehot", ",", "\n", "max_q_i", "=", "max_action_qvals", ",", "is_v", "=", "False", ")", "\n", "chosen_action_qvals", "=", "ans_chosen", "+", "ans_adv", "\n", "\n", "if", "self", ".", "args", ".", "double_q", ":", "\n", "                ", "target_chosen", "=", "self", ".", "target_mixer", "(", "target_chosen_qvals", ",", "batch", "[", "\"state\"", "]", ",", "is_v", "=", "True", ")", "\n", "target_adv", "=", "self", ".", "target_mixer", "(", "target_chosen_qvals", ",", "batch", "[", "\"state\"", "]", ",", "\n", "actions", "=", "cur_max_actions_onehot", ",", "\n", "max_q_i", "=", "target_max_qvals", ",", "is_v", "=", "False", ")", "\n", "target_max_qvals", "=", "target_chosen", "+", "target_adv", "\n", "", "else", ":", "\n", "                ", "raise", "\"Use Double Q\"", "\n", "\n", "# Calculate 1-step Q-Learning targets", "\n", "", "", "targets", "=", "build_td_lambda_targets", "(", "rewards", ",", "terminated", ",", "mask", ",", "target_max_qvals", ",", "\n", "self", ".", "args", ".", "n_agents", ",", "self", ".", "args", ".", "gamma", ",", "self", ".", "args", ".", "td_lambda", ")", "\n", "\n", "if", "show_demo", ":", "\n", "            ", "tot_q_data", "=", "chosen_action_qvals", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "tot_target", "=", "targets", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "print", "(", "'action_pair_%d_%d'", "%", "(", "save_data", "[", "0", "]", ",", "save_data", "[", "1", "]", ")", ",", "np", ".", "squeeze", "(", "q_data", "[", ":", ",", "0", "]", ")", ",", "\n", "np", ".", "squeeze", "(", "q_i_data", "[", ":", ",", "0", "]", ")", ",", "np", ".", "squeeze", "(", "tot_q_data", "[", ":", ",", "0", "]", ")", ",", "np", ".", "squeeze", "(", "tot_target", "[", ":", ",", "0", "]", ")", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "'action_pair_%d_%d'", "%", "(", "save_data", "[", "0", "]", ",", "save_data", "[", "1", "]", ")", ",", "\n", "np", ".", "squeeze", "(", "tot_q_data", "[", ":", ",", "0", "]", ")", ",", "t_env", ")", "\n", "return", "\n", "\n", "# Td-error", "\n", "", "td_error", "=", "(", "chosen_action_qvals", "-", "targets", ".", "detach", "(", ")", ")", "\n", "\n", "mask", "=", "mask", ".", "expand_as", "(", "td_error", ")", "\n", "\n", "# 0-out the targets that came from padded data", "\n", "masked_td_error", "=", "td_error", "*", "mask", "\n", "\n", "# Normal L2 loss, take mean over actual data", "\n", "loss", "=", "0.5", "*", "(", "masked_td_error", "**", "2", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n", "masked_hit_prob", "=", "th", ".", "mean", "(", "is_max_action", ",", "dim", "=", "2", ")", "*", "mask", "\n", "hit_prob", "=", "masked_hit_prob", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n", "# Optimise", "\n", "optimiser", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_norm", "=", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "params", ",", "self", ".", "args", ".", "grad_norm_clip", ")", "\n", "optimiser", ".", "step", "(", ")", "\n", "\n", "if", "t_env", "-", "self", ".", "log_stats_t", ">=", "self", ".", "args", ".", "learner_log_interval", ":", "\n", "            ", "self", ".", "logger", ".", "log_stat", "(", "\"loss\"", ",", "loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"hit_prob\"", ",", "hit_prob", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"grad_norm\"", ",", "grad_norm", ",", "t_env", ")", "\n", "mask_elems", "=", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"td_error_abs\"", ",", "(", "masked_td_error", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"q_taken_mean\"", ",", "\n", "(", "chosen_action_qvals", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "(", "mask_elems", "*", "self", ".", "args", ".", "n_agents", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"target_mean\"", ",", "(", "targets", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "(", "mask_elems", "*", "self", ".", "args", ".", "n_agents", ")", ",", "\n", "t_env", ")", "\n", "self", ".", "log_stats_t", "=", "t_env", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.dmaq_qatten_learner.DMAQ_qattenLearner.train": [[166, 172], ["dmaq_qatten_learner.DMAQ_qattenLearner.sub_train", "dmaq_qatten_learner.DMAQ_qattenLearner._update_targets"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.dmaq_qatten_learner.DMAQ_qattenLearner.sub_train", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner._update_targets"], ["", "", "def", "train", "(", "self", ",", "batch", ":", "EpisodeBatch", ",", "t_env", ":", "int", ",", "episode_num", ":", "int", ",", "show_demo", "=", "False", ",", "save_data", "=", "None", ")", ":", "\n", "        ", "self", ".", "sub_train", "(", "batch", ",", "t_env", ",", "episode_num", ",", "self", ".", "mac", ",", "self", ".", "mixer", ",", "self", ".", "optimiser", ",", "self", ".", "params", ",", "\n", "show_demo", "=", "show_demo", ",", "save_data", "=", "save_data", ")", "\n", "if", "(", "episode_num", "-", "self", ".", "last_target_update_episode", ")", "/", "self", ".", "args", ".", "target_update_interval", ">=", "1.0", ":", "\n", "            ", "self", ".", "_update_targets", "(", ")", "\n", "self", ".", "last_target_update_episode", "=", "episode_num", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.dmaq_qatten_learner.DMAQ_qattenLearner._update_targets": [[173, 178], ["dmaq_qatten_learner.DMAQ_qattenLearner.target_mac.load_state", "dmaq_qatten_learner.DMAQ_qattenLearner.logger.console_logger.info", "dmaq_qatten_learner.DMAQ_qattenLearner.target_mixer.load_state_dict", "dmaq_qatten_learner.DMAQ_qattenLearner.mixer.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_state"], ["", "", "def", "_update_targets", "(", "self", ")", ":", "\n", "        ", "self", ".", "target_mac", ".", "load_state", "(", "self", ".", "mac", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "self", ".", "target_mixer", ".", "load_state_dict", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ")", "\n", "", "self", ".", "logger", ".", "console_logger", ".", "info", "(", "\"Updated target network\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.dmaq_qatten_learner.DMAQ_qattenLearner.cuda": [[179, 185], ["dmaq_qatten_learner.DMAQ_qattenLearner.mac.cuda", "dmaq_qatten_learner.DMAQ_qattenLearner.target_mac.cuda", "dmaq_qatten_learner.DMAQ_qattenLearner.mixer.cuda", "dmaq_qatten_learner.DMAQ_qattenLearner.target_mixer.cuda"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "mac", ".", "cuda", "(", ")", "\n", "self", ".", "target_mac", ".", "cuda", "(", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "self", ".", "mixer", ".", "cuda", "(", ")", "\n", "self", ".", "target_mixer", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.dmaq_qatten_learner.DMAQ_qattenLearner.save_models": [[186, 191], ["dmaq_qatten_learner.DMAQ_qattenLearner.mac.save_models", "torch.save", "torch.save", "torch.save", "torch.save", "dmaq_qatten_learner.DMAQ_qattenLearner.optimiser.state_dict", "dmaq_qatten_learner.DMAQ_qattenLearner.mixer.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models"], ["", "", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "save_models", "(", "path", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "th", ".", "save", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ",", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ")", "\n", "", "th", ".", "save", "(", "self", ".", "optimiser", ".", "state_dict", "(", ")", ",", "\"{}/opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.dmaq_qatten_learner.DMAQ_qattenLearner.load_models": [[192, 201], ["dmaq_qatten_learner.DMAQ_qattenLearner.mac.load_models", "dmaq_qatten_learner.DMAQ_qattenLearner.target_mac.load_models", "dmaq_qatten_learner.DMAQ_qattenLearner.optimiser.load_state_dict", "dmaq_qatten_learner.DMAQ_qattenLearner.mixer.load_state_dict", "dmaq_qatten_learner.DMAQ_qattenLearner.target_mixer.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models"], ["", "def", "load_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "load_models", "(", "path", ")", "\n", "# Not quite right but I don't want to save target networks", "\n", "self", ".", "target_mac", ".", "load_models", "(", "path", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "self", ".", "mixer", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "self", ".", "target_mixer", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "self", ".", "optimiser", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.ppo_learner.PPOLearner.__init__": [[11, 35], ["copy.deepcopy", "pymarl.controllers.n_controller.NMAC", "torch.optim.Adam", "getattr", "list", "list", "pymarl.utils.value_norm.ValueNorm", "mac.parameters", "ppo_learner.PPOLearner.critic.parameters"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters"], ["    ", "def", "__init__", "(", "self", ",", "mac", ",", "scheme", ",", "logger", ",", "callback", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "n_actions", "=", "args", ".", "n_actions", "\n", "self", ".", "mac", "=", "mac", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "last_target_update_step", "=", "0", "\n", "self", ".", "critic_training_steps", "=", "0", "\n", "\n", "self", ".", "log_stats_t", "=", "-", "self", ".", "args", ".", "learner_log_interval", "-", "1", "\n", "\n", "# a trick to reuse mac", "\n", "dummy_args", "=", "copy", ".", "deepcopy", "(", "args", ")", "\n", "dummy_args", ".", "n_actions", "=", "1", "\n", "self", ".", "critic", "=", "NMAC", "(", "scheme", ",", "None", ",", "dummy_args", ")", "\n", "self", ".", "params", "=", "list", "(", "mac", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "critic", ".", "parameters", "(", ")", ")", "\n", "\n", "self", ".", "optimiser", "=", "Adam", "(", "params", "=", "self", ".", "params", ",", "lr", "=", "args", ".", "lr", ")", "\n", "self", ".", "last_lr", "=", "args", ".", "lr", "\n", "\n", "self", ".", "use_value_norm", "=", "getattr", "(", "self", ".", "args", ",", "\"use_value_norm\"", ",", "False", ")", "\n", "if", "self", ".", "use_value_norm", ":", "\n", "            ", "self", ".", "value_norm", "=", "ValueNorm", "(", "1", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.ppo_learner.PPOLearner.train": [[36, 133], ["[].float", "[].float", "torch.log().detach", "[].float.unsqueeze().repeat", "range", "torch.no_grad", "ppo_learner.PPOLearner.critic.init_hidden", "range", "torch.stack", "pymarl.utils.rl_utils.build_gae_targets", "ppo_learner.PPOLearner.critic.init_hidden", "range", "torch.stack", "torch.max", "ppo_learner.PPOLearner.mac.init_hidden", "range", "torch.stack", "torch.gather", "torch.log", "torch.exp", "pymarl.components.action_selectors.categorical_entropy().mean", "ppo_learner.PPOLearner.optimiser.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "ppo_learner.PPOLearner.optimiser.step", "[].float.unsqueeze().repeat.sum().item", "ppo_learner.PPOLearner.logger.log_stat", "ppo_learner.PPOLearner.logger.log_stat", "ppo_learner.PPOLearner.logger.log_stat", "ppo_learner.PPOLearner.logger.log_stat", "ppo_learner.PPOLearner.logger.log_stat", "ppo_learner.PPOLearner.logger.log_stat", "ppo_learner.PPOLearner.logger.log_stat", "torch.log", "[].float.unsqueeze", "ppo_learner.PPOLearner.critic.forward", "torch.stack.append", "ppo_learner.PPOLearner.value_norm.denormalize().view", "rewards.unsqueeze().repeat", "ppo_learner.PPOLearner.reshape", "ppo_learner.PPOLearner.value_norm.update", "ppo_learner.PPOLearner.value_norm.normalize().view", "advantages.mean", "advantages.std", "ppo_learner.PPOLearner.critic.forward", "ppo_learner.PPOLearner.append", "[].float.unsqueeze().repeat.sum", "ppo_learner.PPOLearner.mac.forward", "torch.stack.append", "torch.clamp", "[].float.unsqueeze().repeat.sum", "[].float.sum", "actor_loss.item", "pymarl.components.action_selectors.categorical_entropy().mean.item", "critic_loss.item", "torch.gather", "masked_td_error.sum", "pymarl.components.action_selectors.categorical_entropy", "pymarl.components.action_selectors.categorical_entropy().mean.item", "[].float.unsqueeze().repeat.sum", "ppo_learner.PPOLearner.value_norm.denormalize", "rewards.unsqueeze", "ppo_learner.PPOLearner.value_norm.normalize", "ppo_learner.PPOLearner.detach", "ppo_learner.PPOLearner.detach", "torch.stack.view", "torch.min"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.build_gae_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.categorical_entropy", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.value_norm.ValueNorm.denormalize", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.value_norm.ValueNorm.normalize", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min"], ["", "", "def", "train", "(", "self", ",", "batch", ":", "EpisodeBatch", ",", "t_env", ":", "int", ",", "episode_num", ":", "int", ")", ":", "\n", "# Get the relevant quantities", "\n", "        ", "rewards", "=", "batch", "[", "\"reward\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "actions", "=", "batch", "[", "\"actions\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "terminated", "=", "batch", "[", "\"terminated\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "=", "batch", "[", "\"filled\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "[", ":", ",", "1", ":", "]", "=", "mask", "[", ":", ",", "1", ":", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "avail_actions", "=", "batch", "[", "\"avail_actions\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "old_probs", "=", "batch", "[", "\"probs\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "old_probs", "[", "avail_actions", "==", "0", "]", "=", "1e-10", "\n", "old_logprob", "=", "th", ".", "log", "(", "th", ".", "gather", "(", "old_probs", ",", "dim", "=", "3", ",", "index", "=", "actions", ")", ")", ".", "detach", "(", ")", "\n", "mask_agent", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ",", "1", ")", "\n", "\n", "# targets and advantages", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "            ", "old_values", "=", "[", "]", "\n", "self", ".", "critic", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", ")", ":", "\n", "                ", "agent_outs", "=", "self", ".", "critic", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "old_values", ".", "append", "(", "agent_outs", ")", "\n", "", "old_values", "=", "th", ".", "stack", "(", "old_values", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "use_value_norm", ":", "\n", "                ", "value_shape", "=", "old_values", ".", "shape", "\n", "values", "=", "self", ".", "value_norm", ".", "denormalize", "(", "old_values", ".", "view", "(", "-", "1", ")", ")", ".", "view", "(", "value_shape", ")", "\n", "\n", "", "advantages", ",", "targets", "=", "build_gae_targets", "(", "rewards", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ",", "1", ")", ",", "\n", "mask_agent", ",", "values", ",", "self", ".", "args", ".", "gamma", ",", "self", ".", "args", ".", "gae_lambda", ")", "\n", "\n", "if", "self", ".", "use_value_norm", ":", "\n", "                ", "targets_shape", "=", "targets", ".", "shape", "\n", "targets", "=", "targets", ".", "reshape", "(", "-", "1", ")", "\n", "self", ".", "value_norm", ".", "update", "(", "targets", ")", "\n", "targets", "=", "self", ".", "value_norm", ".", "normalize", "(", "targets", ")", ".", "view", "(", "targets_shape", ")", "\n", "\n", "", "", "advantages", "=", "(", "advantages", "-", "advantages", ".", "mean", "(", ")", ")", "/", "(", "advantages", ".", "std", "(", ")", "+", "1e-6", ")", "\n", "\n", "# PPO Loss", "\n", "for", "_", "in", "range", "(", "self", ".", "args", ".", "mini_epochs", ")", ":", "\n", "# Critic", "\n", "            ", "values", "=", "[", "]", "\n", "self", ".", "critic", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", "-", "1", ")", ":", "\n", "                ", "agent_outs", "=", "self", ".", "critic", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "values", ".", "append", "(", "agent_outs", ")", "\n", "", "values", "=", "th", ".", "stack", "(", "values", ",", "dim", "=", "1", ")", "\n", "\n", "# value clip", "\n", "values_clipped", "=", "old_values", "[", ":", ",", ":", "-", "1", "]", "+", "(", "values", "-", "old_values", "[", ":", ",", ":", "-", "1", "]", ")", ".", "clamp", "(", "-", "self", ".", "args", ".", "eps_clip", ",", "\n", "self", ".", "args", ".", "eps_clip", ")", "\n", "\n", "# 0-out the targets that came from padded data", "\n", "td_error", "=", "th", ".", "max", "(", "(", "values", "-", "targets", ".", "detach", "(", ")", ")", "**", "2", ",", "(", "values_clipped", "-", "targets", ".", "detach", "(", ")", ")", "**", "2", ")", "\n", "masked_td_error", "=", "td_error", "*", "mask_agent", "\n", "critic_loss", "=", "0.5", "*", "masked_td_error", ".", "sum", "(", ")", "/", "mask_agent", ".", "sum", "(", ")", "\n", "\n", "# Actor", "\n", "pi", "=", "[", "]", "\n", "self", ".", "mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", "-", "1", ")", ":", "\n", "                ", "agent_outs", "=", "self", ".", "mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "pi", ".", "append", "(", "agent_outs", ")", "\n", "", "pi", "=", "th", ".", "stack", "(", "pi", ",", "dim", "=", "1", ")", "# Concat over time", "\n", "\n", "pi", "[", "avail_actions", "==", "0", "]", "=", "1e-10", "\n", "pi_taken", "=", "th", ".", "gather", "(", "pi", ",", "dim", "=", "3", ",", "index", "=", "actions", ")", "\n", "log_pi_taken", "=", "th", ".", "log", "(", "pi_taken", ")", "\n", "\n", "ratios", "=", "th", ".", "exp", "(", "log_pi_taken", "-", "old_logprob", ")", "\n", "surr1", "=", "ratios", "*", "advantages", "\n", "surr2", "=", "th", ".", "clamp", "(", "ratios", ",", "1", "-", "self", ".", "args", ".", "eps_clip", ",", "1", "+", "self", ".", "args", ".", "eps_clip", ")", "*", "advantages", "\n", "actor_loss", "=", "-", "(", "th", ".", "min", "(", "surr1", ",", "surr2", ")", "*", "mask_agent", ")", ".", "sum", "(", ")", "/", "mask_agent", ".", "sum", "(", ")", "\n", "\n", "# entropy", "\n", "entropy_loss", "=", "categorical_entropy", "(", "pi", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "# mean over agents", "\n", "entropy_loss", "[", "mask", "==", "0", "]", "=", "0", "# fill nan", "\n", "entropy_loss", "=", "(", "entropy_loss", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "loss", "=", "actor_loss", "+", "self", ".", "args", ".", "critic_coef", "*", "critic_loss", "-", "self", ".", "args", ".", "entropy", "*", "entropy_loss", "/", "entropy_loss", ".", "item", "(", ")", "\n", "\n", "# Optimise agents", "\n", "self", ".", "optimiser", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_norm", "=", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "params", ",", "self", ".", "args", ".", "grad_norm_clip", ")", "\n", "self", ".", "optimiser", ".", "step", "(", ")", "\n", "\n", "\n", "", "if", "t_env", "-", "self", ".", "log_stats_t", ">=", "self", ".", "args", ".", "learner_log_interval", ":", "\n", "            ", "mask_elems", "=", "mask_agent", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"advantage_mean\"", ",", "(", "advantages", "*", "mask_agent", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"actor_loss\"", ",", "actor_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"entropy_loss\"", ",", "entropy_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"grad_norm\"", ",", "grad_norm", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"lr\"", ",", "self", ".", "last_lr", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"critic_loss\"", ",", "critic_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"target_mean\"", ",", "(", "targets", "*", "mask_agent", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ",", "t_env", ")", "\n", "self", ".", "log_stats_t", "=", "t_env", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.ppo_learner.PPOLearner.cuda": [[135, 138], ["ppo_learner.PPOLearner.mac.cuda", "ppo_learner.PPOLearner.critic.cuda"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda"], ["", "", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "mac", ".", "cuda", "(", ")", "\n", "self", ".", "critic", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.ppo_learner.PPOLearner.save_models": [[139, 142], ["ppo_learner.PPOLearner.mac.save_models", "torch.save", "ppo_learner.PPOLearner.optimiser.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models"], ["", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "save_models", "(", "path", ")", "\n", "th", ".", "save", "(", "self", ".", "optimiser", ".", "state_dict", "(", ")", ",", "\"{}/agent_opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.ppo_learner.PPOLearner.load_models": [[143, 147], ["ppo_learner.PPOLearner.mac.load_models", "ppo_learner.PPOLearner.optimiser.load_state_dict", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models"], ["", "def", "load_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "load_models", "(", "path", ")", "\n", "# Not quite right but I don't want to save target networks", "\n", "self", ".", "optimiser", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/agent_opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.policy_gradient_v2.PGLearner_v2.__init__": [[15, 43], ["copy.deepcopy", "list", "policy_gradient_v2.PGLearner_v2.mac.parameters", "list", "torch.optim.Adam", "torch.optim.RMSprop", "pymarl.modules.mixers.vdn.VDNMixer", "policy_gradient_v2.PGLearner_v2.mixer.parameters", "pymarl.modules.mixers.qmix.QMixer", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters"], ["    ", "def", "__init__", "(", "self", ",", "mac", ",", "scheme", ",", "logger", ",", "callback", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "n_actions", "=", "args", ".", "n_actions", "\n", "self", ".", "mac", "=", "mac", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "last_target_update_step", "=", "0", "\n", "self", ".", "critic_training_steps", "=", "0", "\n", "\n", "self", ".", "log_stats_t", "=", "-", "self", ".", "args", ".", "learner_log_interval", "-", "1", "\n", "\n", "self", ".", "target_mac", "=", "copy", ".", "deepcopy", "(", "mac", ")", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "mac", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "args", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "if", "args", ".", "mixer", "==", "\"vdn\"", ":", "\n", "                ", "self", ".", "mixer", "=", "VDNMixer", "(", ")", "\n", "", "elif", "args", ".", "mixer", "==", "\"qmix\"", ":", "\n", "                ", "self", ".", "mixer", "=", "QMixer", "(", "args", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Mixer {} not recognised.\"", ".", "format", "(", "args", ".", "mixer", ")", ")", "\n", "", "self", ".", "params", "+=", "list", "(", "self", ".", "mixer", ".", "parameters", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "optim", "==", "'adam'", ":", "\n", "            ", "self", ".", "optimiser", "=", "Adam", "(", "params", "=", "self", ".", "params", ",", "lr", "=", "args", ".", "lr", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimiser", "=", "RMSprop", "(", "params", "=", "self", ".", "params", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.policy_gradient_v2.PGLearner_v2.train": [[44, 89], ["[].float", "[].float", "mask.repeat().view.repeat().view.clone", "mask.repeat().view.repeat().view.repeat().view", "policy_gradient_v2.PGLearner_v2._calculate_advs", "policy_gradient_v2.PGLearner_v2.optimiser.zero_grad", "coma_loss.backward", "torch.nn.utils.clip_grad_norm_", "policy_gradient_v2.PGLearner_v2.optimiser.step", "mask.repeat().view.repeat().view.sum", "mask.repeat().view.repeat().view.sum", "mask.repeat().view.repeat().view.sum", "policy_gradient_v2.PGLearner_v2.logger.log_stat", "policy_gradient_v2.PGLearner_v2.logger.log_stat", "policy_gradient_v2.PGLearner_v2.logger.log_stat", "policy_gradient_v2.PGLearner_v2.logger.log_stat", "policy_gradient_v2.PGLearner_v2.logger.log_stat", "policy_gradient_v2.PGLearner_v2.logger.log_stat", "policy_gradient_v2.PGLearner_v2.logger.log_stat", "policy_gradient_v2.PGLearner_v2.logger.log_stat", "policy_gradient_v2.PGLearner_v2.logger.log_stat", "mask.repeat().view.repeat().view.repeat", "coma_loss.item", "entropy_loss.item", "mask.repeat().view.repeat().view.sum().item", "mask.repeat().view.repeat().view.sum().item", "mask.repeat().view.repeat().view.sum().item", "mask.repeat().view.repeat().view.sum().item", "mask.repeat().view.repeat().view.sum().item", "mask.repeat().view.repeat().view.sum().item", "mask.repeat().view.repeat().view.sum", "mask.repeat().view.repeat().view.sum", "mask.repeat().view.repeat().view.sum", "mask.repeat().view.repeat().view.sum", "mask.repeat().view.repeat().view.sum", "mask.repeat().view.repeat().view.sum", "advantages.detach", "td_error.abs", "advantages.detach"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.policy_gradient_v2.PGLearner_v2._calculate_advs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "", "def", "train", "(", "self", ",", "batch", ":", "EpisodeBatch", ",", "t_env", ":", "int", ",", "episode_num", ":", "int", ")", ":", "\n", "# Get the relevant quantities", "\n", "        ", "bs", "=", "batch", ".", "batch_size", "\n", "max_t", "=", "batch", ".", "max_seq_length", "\n", "rewards", "=", "batch", "[", "\"reward\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "actions", "=", "batch", "[", "\"actions\"", "]", "[", ":", ",", ":", "]", "\n", "terminated", "=", "batch", "[", "\"terminated\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "=", "batch", "[", "\"filled\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "[", ":", ",", "1", ":", "]", "=", "mask", "[", ":", ",", "1", ":", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "avail_actions", "=", "batch", "[", "\"avail_actions\"", "]", "[", ":", ",", ":", "]", "\n", "\n", "critic_mask", "=", "mask", ".", "clone", "(", ")", "\n", "mask", "=", "mask", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "advantages", ",", "td_error", ",", "targets_taken", ",", "log_pi_taken", ",", "entropy", "=", "self", ".", "_calculate_advs", "(", "batch", ",", "rewards", ",", "terminated", ",", "actions", ",", "avail_actions", ",", "\n", "critic_mask", ",", "bs", ",", "max_t", ")", "\n", "\n", "pg_loss", "=", "-", "(", "(", "advantages", ".", "detach", "(", ")", "*", "log_pi_taken", ")", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "vf_loss", "=", "(", "(", "td_error", "**", "2", ")", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "entropy", "[", "mask", "==", "0", "]", "=", "0", "\n", "entropy_loss", "=", "(", "entropy", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n", "coma_loss", "=", "pg_loss", "+", "self", ".", "args", ".", "vf_coef", "*", "vf_loss", "\n", "if", "self", ".", "args", ".", "ent_coef", ":", "\n", "            ", "coma_loss", "-=", "self", ".", "args", ".", "ent_coef", "*", "entropy_loss", "\n", "\n", "# Optimise agents", "\n", "", "self", ".", "optimiser", ".", "zero_grad", "(", ")", "\n", "coma_loss", ".", "backward", "(", ")", "\n", "grad_norm", "=", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "params", ",", "self", ".", "args", ".", "grad_norm_clip", ")", "\n", "self", ".", "optimiser", ".", "step", "(", ")", "\n", "\n", "\n", "if", "t_env", "-", "self", ".", "log_stats_t", ">=", "self", ".", "args", ".", "learner_log_interval", ":", "\n", "            ", "self", ".", "logger", ".", "log_stat", "(", "\"critic_loss\"", ",", "(", "(", "td_error", "**", "2", ")", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"td_error_abs\"", ",", "(", "td_error", ".", "abs", "(", ")", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"q_taken_mean\"", ",", "(", "targets_taken", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"target_mean\"", ",", "(", "(", "targets_taken", "+", "advantages", ")", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"pg_loss\"", ",", "-", "(", "(", "advantages", ".", "detach", "(", ")", "*", "log_pi_taken", ")", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"advantage_mean\"", ",", "(", "advantages", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"coma_loss\"", ",", "coma_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"entropy_loss\"", ",", "entropy_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"agent_grad_norm\"", ",", "grad_norm", ",", "t_env", ")", "\n", "# self.logger.log_stat(\"pi_max\", (pi.max(dim=1)[0] * mask).sum().item() / mask.sum().item(), t_env)", "\n", "self", ".", "log_stats_t", "=", "t_env", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.policy_gradient_v2.PGLearner_v2._calculate_advs": [[90, 132], ["policy_gradient_v2.PGLearner_v2.mac.init_hidden", "range", "torch.stack", "torch.stack", "torch.gather().squeeze", "mask.repeat", "torch.log().reshape", "pymarl.components.action_selectors.categorical_entropy().reshape", "torch.stack.squeeze", "pymarl.utils.rl_utils.build_td_lambda_targets", "advantages.unsqueeze().repeat().reshape.unsqueeze().repeat().reshape.unsqueeze().repeat().reshape", "td_error.unsqueeze().repeat().reshape.unsqueeze().repeat().reshape.unsqueeze().repeat().reshape", "policy_gradient_v2.PGLearner_v2.mac.forward", "torch.stack.append", "torch.stack.append", "policy_gradient_v2.PGLearner_v2.mixer", "pymarl.utils.rl_utils.build_td_lambda_targets.detach", "targets_taken[].unsqueeze().repeat().reshape", "torch.gather", "torch.log", "pymarl.components.action_selectors.categorical_entropy", "advantages.unsqueeze().repeat().reshape.unsqueeze().repeat().reshape.unsqueeze().repeat", "td_error.unsqueeze().repeat().reshape.unsqueeze().repeat().reshape.unsqueeze().repeat", "targets_taken[].unsqueeze().repeat", "advantages.unsqueeze().repeat().reshape.unsqueeze().repeat().reshape.unsqueeze", "td_error.unsqueeze().repeat().reshape.unsqueeze().repeat().reshape.unsqueeze", "targets_taken[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.build_td_lambda_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.categorical_entropy"], ["", "", "def", "_calculate_advs", "(", "self", ",", "batch", ",", "rewards", ",", "terminated", ",", "actions", ",", "avail_actions", ",", "mask", ",", "bs", ",", "max_t", ")", ":", "\n", "        ", "mac_out", "=", "[", "]", "\n", "q_outs", "=", "[", "]", "\n", "# Roll out experiences", "\n", "self", ".", "mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", ")", ":", "\n", "            ", "agent_out", ",", "q_out", "=", "self", ".", "mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "mac_out", ".", "append", "(", "agent_out", ")", "\n", "q_outs", ".", "append", "(", "q_out", ")", "\n", "", "mac_out", "=", "th", ".", "stack", "(", "mac_out", ",", "dim", "=", "1", ")", "# Concat over time", "\n", "q_outs", "=", "th", ".", "stack", "(", "q_outs", ",", "dim", "=", "1", ")", "# Concat over time", "\n", "\n", "# Mask out unavailable actions, renormalise (as in action selection)", "\n", "# mac_out[avail_actions == 0] = 0", "\n", "# mac_out = mac_out/(mac_out.sum(dim=-1, keepdim=True) + 1e-5)", "\n", "\n", "# Calculated baseline", "\n", "pi", "=", "mac_out", "[", ":", ",", ":", "-", "1", "]", "#[bs, t, n_agents, n_actions]", "\n", "pi_taken", "=", "th", ".", "gather", "(", "pi", ",", "dim", "=", "-", "1", ",", "index", "=", "actions", "[", ":", ",", ":", "-", "1", "]", ")", ".", "squeeze", "(", "-", "1", ")", "#[bs, t, n_agents]", "\n", "action_mask", "=", "mask", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ")", "\n", "pi_taken", "[", "action_mask", "==", "0", "]", "=", "1.0", "\n", "log_pi_taken", "=", "th", ".", "log", "(", "pi_taken", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "# Calculate entropy", "\n", "entropy", "=", "categorical_entropy", "(", "pi", ")", ".", "reshape", "(", "-", "1", ")", "#[bs, t, n_agents, 1]", "\n", "\n", "# Calculate q targets", "\n", "targets_taken", "=", "q_outs", ".", "squeeze", "(", "-", "1", ")", "#[bs, t, n_agents]", "\n", "if", "self", ".", "args", ".", "mixer", ":", "\n", "            ", "targets_taken", "=", "self", ".", "mixer", "(", "targets_taken", ",", "batch", "[", "\"state\"", "]", "[", ":", ",", ":", "]", ")", "#[bs, t, 1]", "\n", "\n", "# Calculate td-lambda targets", "\n", "", "targets", "=", "build_td_lambda_targets", "(", "rewards", ",", "terminated", ",", "mask", ",", "targets_taken", ",", "self", ".", "n_agents", ",", "self", ".", "args", ".", "gamma", ",", "self", ".", "args", ".", "td_lambda", ")", "\n", "\n", "advantages", "=", "targets", "-", "targets_taken", "[", ":", ",", ":", "-", "1", "]", "\n", "advantages", "=", "advantages", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "td_error", "=", "targets_taken", "[", ":", ",", ":", "-", "1", "]", "-", "targets", ".", "detach", "(", ")", "\n", "td_error", "=", "td_error", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "\n", "return", "advantages", ",", "td_error", ",", "targets_taken", "[", ":", ",", ":", "-", "1", "]", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", ",", "log_pi_taken", ",", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.policy_gradient_v2.PGLearner_v2.cuda": [[134, 138], ["policy_gradient_v2.PGLearner_v2.mac.cuda", "policy_gradient_v2.PGLearner_v2.mixer.cuda"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "mac", ".", "cuda", "(", ")", "\n", "if", "self", ".", "args", ".", "mixer", ":", "\n", "            ", "self", ".", "mixer", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.policy_gradient_v2.PGLearner_v2.save_models": [[139, 144], ["policy_gradient_v2.PGLearner_v2.mac.save_models", "torch.save", "torch.save", "policy_gradient_v2.PGLearner_v2.optimiser.state_dict", "policy_gradient_v2.PGLearner_v2.mixer.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models"], ["", "", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "save_models", "(", "path", ")", "\n", "if", "self", ".", "args", ".", "mixer", ":", "\n", "            ", "th", ".", "save", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ",", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ")", "\n", "", "th", ".", "save", "(", "self", ".", "optimiser", ".", "state_dict", "(", ")", ",", "\"{}/opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.policy_gradient_v2.PGLearner_v2.load_models": [[145, 150], ["policy_gradient_v2.PGLearner_v2.mac.load_models", "policy_gradient_v2.PGLearner_v2.optimiser.load_state_dict", "policy_gradient_v2.PGLearner_v2.mixer.load_state_dict", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models"], ["", "def", "load_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "load_models", "(", "path", ")", "\n", "if", "self", ".", "args", ".", "mixer", ":", "\n", "            ", "self", ".", "mixer", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "self", ".", "optimiser", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_learner.COMALearner.__init__": [[11, 32], ["pymarl.modules.critics.coma.COMACritic", "copy.deepcopy", "list", "list", "torch.optim.Adam", "torch.optim.Adam", "mac.parameters", "coma_learner.COMALearner.critic.parameters"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters"], ["    ", "def", "__init__", "(", "self", ",", "mac", ",", "scheme", ",", "logger", ",", "callback", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "n_actions", "=", "args", ".", "n_actions", "\n", "self", ".", "mac", "=", "mac", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "last_target_update_step", "=", "0", "\n", "self", ".", "critic_training_steps", "=", "0", "\n", "\n", "self", ".", "log_stats_t", "=", "-", "self", ".", "args", ".", "learner_log_interval", "-", "1", "\n", "\n", "self", ".", "critic", "=", "COMACritic", "(", "scheme", ",", "args", ")", "\n", "self", ".", "target_critic", "=", "copy", ".", "deepcopy", "(", "self", ".", "critic", ")", "\n", "\n", "self", ".", "agent_params", "=", "list", "(", "mac", ".", "parameters", "(", ")", ")", "\n", "self", ".", "critic_params", "=", "list", "(", "self", ".", "critic", ".", "parameters", "(", ")", ")", "\n", "self", ".", "params", "=", "self", ".", "agent_params", "+", "self", ".", "critic_params", "\n", "\n", "self", ".", "agent_optimiser", "=", "Adam", "(", "params", "=", "self", ".", "agent_params", ",", "lr", "=", "args", ".", "lr", ")", "\n", "self", ".", "critic_optimiser", "=", "Adam", "(", "params", "=", "self", ".", "critic_params", ",", "lr", "=", "args", ".", "critic_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_learner.COMALearner.train": [[33, 107], ["[].float", "[].float", "mask.repeat().view.repeat().view.clone", "mask.repeat().view.repeat().view.repeat().view", "coma_learner.COMALearner._train_critic", "coma_learner.COMALearner.mac.init_hidden", "range", "torch.stack", "q_vals.reshape.reshape.reshape", "torch.stack.view", "torch.gather().squeeze", "torch.gather().squeeze", "torch.log", "torch.distributions.Categorical().entropy().view", "breakpoint", "coma_learner.COMALearner.agent_optimiser.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "coma_learner.COMALearner.agent_optimiser.step", "coma_learner.COMALearner.mac.forward", "torch.stack.append", "torch.stack.sum", "mask.repeat().view.repeat().view.sum", "mask.repeat().view.repeat().view.sum", "coma_learner.COMALearner._update_targets", "len", "coma_learner.COMALearner.logger.log_stat", "coma_learner.COMALearner.logger.log_stat", "coma_learner.COMALearner.logger.log_stat", "coma_learner.COMALearner.logger.log_stat", "mask.repeat().view.repeat().view.repeat", "torch.gather", "torch.gather", "torch.distributions.Categorical().entropy", "coma_learner.COMALearner.logger.log_stat", "coma_loss.item", "mask.repeat().view.repeat().view.sum().item", "mask.repeat().view.repeat().view.sum().item", "actions.reshape", "actions.reshape", "torch.distributions.Categorical", "sum", "mask.repeat().view.repeat().view.sum", "mask.repeat().view.repeat().view.sum", "th.stack.view.max"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_learner.COMALearner._train_critic", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner._update_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "train", "(", "self", ",", "batch", ":", "EpisodeBatch", ",", "t_env", ":", "int", ",", "episode_num", ":", "int", ")", ":", "\n", "# Get the relevant quantities", "\n", "        ", "bs", "=", "batch", ".", "batch_size", "\n", "max_t", "=", "batch", ".", "max_seq_length", "\n", "rewards", "=", "batch", "[", "\"reward\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "actions", "=", "batch", "[", "\"actions\"", "]", "[", ":", ",", ":", "]", "\n", "terminated", "=", "batch", "[", "\"terminated\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "=", "batch", "[", "\"filled\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "[", ":", ",", "1", ":", "]", "=", "mask", "[", ":", ",", "1", ":", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "avail_actions", "=", "batch", "[", "\"avail_actions\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "critic_mask", "=", "mask", ".", "clone", "(", ")", "\n", "\n", "mask", "=", "mask", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "q_vals", ",", "critic_train_stats", "=", "self", ".", "_train_critic", "(", "batch", ",", "rewards", ",", "terminated", ",", "actions", ",", "avail_actions", ",", "\n", "critic_mask", ",", "bs", ",", "max_t", ")", "\n", "\n", "actions", "=", "actions", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "mac_out", "=", "[", "]", "\n", "self", ".", "mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", "-", "1", ")", ":", "\n", "            ", "agent_outs", "=", "self", ".", "mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "mac_out", ".", "append", "(", "agent_outs", ")", "\n", "", "mac_out", "=", "th", ".", "stack", "(", "mac_out", ",", "dim", "=", "1", ")", "# Concat over time", "\n", "\n", "# Mask out unavailable actions, renormalise (as in action selection)", "\n", "mac_out", "[", "avail_actions", "==", "0", "]", "=", "0", "\n", "mac_out", "=", "mac_out", "/", "mac_out", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "mac_out", "[", "avail_actions", "==", "0", "]", "=", "0", "\n", "\n", "# Calculated baseline (weighted sum of global qvals, weighted by prob of taking that action)", "\n", "q_vals", "=", "q_vals", ".", "reshape", "(", "-", "1", ",", "self", ".", "n_actions", ")", "\n", "pi", "=", "mac_out", ".", "view", "(", "-", "1", ",", "self", ".", "n_actions", ")", "\n", "baseline", "=", "(", "pi", "*", "q_vals", ")", ".", "sum", "(", "-", "1", ")", ".", "detach", "(", ")", "\n", "\n", "# Calculate policy grad with mask", "\n", "q_taken", "=", "th", ".", "gather", "(", "q_vals", ",", "dim", "=", "1", ",", "index", "=", "actions", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "pi_taken", "=", "th", ".", "gather", "(", "pi", ",", "dim", "=", "1", ",", "index", "=", "actions", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "pi_taken", "[", "mask", "==", "0", "]", "=", "1.0", "\n", "log_pi_taken", "=", "th", ".", "log", "(", "pi_taken", ")", "\n", "\n", "advantages", "=", "(", "q_taken", "-", "baseline", ")", ".", "detach", "(", ")", "\n", "\n", "coma_loss", "=", "-", "(", "(", "advantages", "*", "log_pi_taken", ")", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n", "dist_entropy", "=", "Categorical", "(", "pi", ")", ".", "entropy", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "dist_entropy", "[", "mask", "==", "0", "]", "=", "0", "# fill nan", "\n", "entropy_loss", "=", "(", "dist_entropy", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n", "breakpoint", "(", ")", "\n", "\n", "# Optimise agents", "\n", "self", ".", "agent_optimiser", ".", "zero_grad", "(", ")", "\n", "loss", "=", "coma_loss", "-", "self", ".", "args", ".", "entropy", "*", "entropy_loss", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_norm", "=", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "agent_params", ",", "self", ".", "args", ".", "grad_norm_clip", ")", "\n", "self", ".", "agent_optimiser", ".", "step", "(", ")", "\n", "\n", "if", "(", "self", ".", "critic_training_steps", "-", "self", ".", "last_target_update_step", ")", "/", "self", ".", "args", ".", "target_update_interval", ">=", "1.0", ":", "\n", "            ", "self", ".", "_update_targets", "(", ")", "\n", "self", ".", "last_target_update_step", "=", "self", ".", "critic_training_steps", "\n", "\n", "", "if", "t_env", "-", "self", ".", "log_stats_t", ">=", "self", ".", "args", ".", "learner_log_interval", ":", "\n", "            ", "ts_logged", "=", "len", "(", "critic_train_stats", "[", "\"critic_loss\"", "]", ")", "\n", "for", "key", "in", "[", "\"critic_loss\"", ",", "\"critic_grad_norm\"", ",", "\"td_error_abs\"", ",", "\"q_taken_mean\"", ",", "\"target_mean\"", "]", ":", "\n", "                ", "self", ".", "logger", ".", "log_stat", "(", "key", ",", "sum", "(", "critic_train_stats", "[", "key", "]", ")", "/", "ts_logged", ",", "t_env", ")", "\n", "\n", "", "self", ".", "logger", ".", "log_stat", "(", "\"advantage_mean\"", ",", "(", "advantages", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"coma_loss\"", ",", "coma_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"agent_grad_norm\"", ",", "grad_norm", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"pi_max\"", ",", "(", "pi", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "log_stats_t", "=", "t_env", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_learner.COMALearner._train_critic": [[108, 157], ["torch.gather().squeeze", "pymarl.utils.rl_utils.build_td_lambda_targets", "reversed", "coma_learner.COMALearner.target_critic", "torch.zeros_like", "range", "mask[].expand", "coma_learner.COMALearner.critic", "coma_learner.COMALearner.view", "torch.gather().squeeze().squeeze", "coma_learner.COMALearner.critic_optimiser.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "coma_learner.COMALearner.critic_optimiser.step", "running_log[].append", "running_log[].append", "mask[].expand.sum().item", "running_log[].append", "running_log[].append", "running_log[].append", "torch.gather", "rewards.size", "mask[].expand.sum", "targets_t.detach", "mask[].expand.sum", "loss.item", "torch.gather().squeeze", "mask[].expand.sum", "masked_td_error.abs().sum().item", "torch.gather", "masked_td_error.abs().sum", "masked_td_error.abs"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.build_td_lambda_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "", "def", "_train_critic", "(", "self", ",", "batch", ",", "rewards", ",", "terminated", ",", "actions", ",", "avail_actions", ",", "mask", ",", "bs", ",", "max_t", ")", ":", "\n", "# Optimise critic", "\n", "        ", "target_q_vals", "=", "self", ".", "target_critic", "(", "batch", ")", "[", ":", ",", ":", "]", "\n", "targets_taken", "=", "th", ".", "gather", "(", "target_q_vals", ",", "dim", "=", "3", ",", "index", "=", "actions", ")", ".", "squeeze", "(", "3", ")", "\n", "\n", "# Calculate td-lambda targets", "\n", "targets", "=", "build_td_lambda_targets", "(", "rewards", ",", "terminated", ",", "mask", ",", "targets_taken", ",", "self", ".", "n_agents", ",", "self", ".", "args", ".", "gamma", ",", "self", ".", "args", ".", "td_lambda", ")", "\n", "\n", "q_vals", "=", "th", ".", "zeros_like", "(", "target_q_vals", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "running_log", "=", "{", "\n", "\"critic_loss\"", ":", "[", "]", ",", "\n", "\"critic_grad_norm\"", ":", "[", "]", ",", "\n", "\"td_error_abs\"", ":", "[", "]", ",", "\n", "\"target_mean\"", ":", "[", "]", ",", "\n", "\"q_taken_mean\"", ":", "[", "]", ",", "\n", "}", "\n", "\n", "for", "t", "in", "reversed", "(", "range", "(", "rewards", ".", "size", "(", "1", ")", ")", ")", ":", "\n", "            ", "mask_t", "=", "mask", "[", ":", ",", "t", "]", ".", "expand", "(", "-", "1", ",", "self", ".", "n_agents", ")", "\n", "if", "mask_t", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "q_t", "=", "self", ".", "critic", "(", "batch", ",", "t", ")", "\n", "q_vals", "[", ":", ",", "t", "]", "=", "q_t", ".", "view", "(", "bs", ",", "self", ".", "n_agents", ",", "self", ".", "n_actions", ")", "\n", "q_taken", "=", "th", ".", "gather", "(", "q_t", ",", "dim", "=", "3", ",", "index", "=", "actions", "[", ":", ",", "t", ":", "t", "+", "1", "]", ")", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "1", ")", "\n", "targets_t", "=", "targets", "[", ":", ",", "t", "]", "\n", "\n", "td_error", "=", "(", "q_taken", "-", "targets_t", ".", "detach", "(", ")", ")", "\n", "\n", "# 0-out the targets that came from padded data", "\n", "masked_td_error", "=", "td_error", "*", "mask_t", "\n", "\n", "# Normal L2 loss, take mean over actual data", "\n", "loss", "=", "(", "masked_td_error", "**", "2", ")", ".", "sum", "(", ")", "/", "mask_t", ".", "sum", "(", ")", "\n", "self", ".", "critic_optimiser", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_norm", "=", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "critic_params", ",", "self", ".", "args", ".", "grad_norm_clip", ")", "\n", "self", ".", "critic_optimiser", ".", "step", "(", ")", "\n", "self", ".", "critic_training_steps", "+=", "1", "\n", "\n", "running_log", "[", "\"critic_loss\"", "]", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "running_log", "[", "\"critic_grad_norm\"", "]", ".", "append", "(", "grad_norm", ")", "\n", "mask_elems", "=", "mask_t", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "running_log", "[", "\"td_error_abs\"", "]", ".", "append", "(", "(", "masked_td_error", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", ")", "\n", "running_log", "[", "\"q_taken_mean\"", "]", ".", "append", "(", "(", "q_taken", "*", "mask_t", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", "\n", "running_log", "[", "\"target_mean\"", "]", ".", "append", "(", "(", "targets_t", "*", "mask_t", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", "\n", "\n", "", "return", "q_vals", ",", "running_log", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_learner.COMALearner._update_targets": [[158, 161], ["coma_learner.COMALearner.target_critic.load_state_dict", "coma_learner.COMALearner.logger.console_logger.info", "coma_learner.COMALearner.critic.state_dict"], "methods", ["None"], ["", "def", "_update_targets", "(", "self", ")", ":", "\n", "        ", "self", ".", "target_critic", ".", "load_state_dict", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "logger", ".", "console_logger", ".", "info", "(", "\"Updated target network\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_learner.COMALearner.cuda": [[162, 166], ["coma_learner.COMALearner.mac.cuda", "coma_learner.COMALearner.critic.cuda", "coma_learner.COMALearner.target_critic.cuda"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "mac", ".", "cuda", "(", ")", "\n", "self", ".", "critic", ".", "cuda", "(", ")", "\n", "self", ".", "target_critic", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_learner.COMALearner.save_models": [[167, 172], ["coma_learner.COMALearner.mac.save_models", "torch.save", "torch.save", "torch.save", "coma_learner.COMALearner.critic.state_dict", "coma_learner.COMALearner.agent_optimiser.state_dict", "coma_learner.COMALearner.critic_optimiser.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models"], ["", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "save_models", "(", "path", ")", "\n", "th", ".", "save", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ",", "\"{}/critic.th\"", ".", "format", "(", "path", ")", ")", "\n", "th", ".", "save", "(", "self", ".", "agent_optimiser", ".", "state_dict", "(", ")", ",", "\"{}/agent_opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "th", ".", "save", "(", "self", ".", "critic_optimiser", ".", "state_dict", "(", ")", ",", "\"{}/critic_opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.coma_learner.COMALearner.load_models": [[173, 180], ["coma_learner.COMALearner.mac.load_models", "coma_learner.COMALearner.critic.load_state_dict", "coma_learner.COMALearner.target_critic.load_state_dict", "coma_learner.COMALearner.agent_optimiser.load_state_dict", "coma_learner.COMALearner.critic_optimiser.load_state_dict", "torch.load", "coma_learner.COMALearner.critic.state_dict", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models"], ["", "def", "load_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "load_models", "(", "path", ")", "\n", "self", ".", "critic", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/critic.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "# Not quite right but I don't want to save target networks", "\n", "self", ".", "target_critic", ".", "load_state_dict", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "agent_optimiser", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/agent_opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "self", ".", "critic_optimiser", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/critic_opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.qtran_learner.QLearner.__init__": [[9, 33], ["list", "list", "copy.deepcopy", "torch.optim.Adam", "copy.deepcopy", "mac.parameters", "pymarl.modules.mixers.qtran.QTranBase", "qtran_learner.QLearner.mixer.parameters", "Exception"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters"], ["    ", "def", "__init__", "(", "self", ",", "mac", ",", "scheme", ",", "logger", ",", "callback", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "mac", "=", "mac", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "params", "=", "list", "(", "mac", ".", "parameters", "(", ")", ")", "\n", "\n", "self", ".", "last_target_update_episode", "=", "0", "\n", "\n", "self", ".", "mixer", "=", "None", "\n", "if", "args", ".", "mixer", "==", "\"qtran_base\"", ":", "\n", "            ", "self", ".", "mixer", "=", "QTranBase", "(", "args", ")", "\n", "", "elif", "args", ".", "mixer", "==", "\"qtran_alt\"", ":", "\n", "            ", "raise", "Exception", "(", "\"Not implemented here!\"", ")", "\n", "\n", "", "self", ".", "params", "+=", "list", "(", "self", ".", "mixer", ".", "parameters", "(", ")", ")", "\n", "self", ".", "target_mixer", "=", "copy", ".", "deepcopy", "(", "self", ".", "mixer", ")", "\n", "\n", "self", ".", "optimiser", "=", "Adam", "(", "params", "=", "self", ".", "params", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "# a little wasteful to deepcopy (e.g. duplicates action selector), but should work for any MAC", "\n", "self", ".", "target_mac", "=", "copy", ".", "deepcopy", "(", "mac", ")", "\n", "\n", "self", ".", "log_stats_t", "=", "-", "self", ".", "args", ".", "learner_log_interval", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.qtran_learner.QLearner.train": [[34, 154], ["[].float", "[].float", "qtran_learner.QLearner.mac.init_hidden", "range", "torch.stack", "torch.stack", "mac_hidden_states.reshape().transpose.reshape().transpose.reshape().transpose", "torch.gather().squeeze", "qtran_learner.QLearner.target_mac.init_hidden", "range", "torch.stack", "torch.stack", "target_mac_hidden_states.reshape().transpose.reshape().transpose.reshape().transpose", "torch.stack.clone", "mac_out_maxs[].max", "qtran_learner.QLearner.optimiser.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "qtran_learner.QLearner.optimiser.step", "qtran_learner.QLearner.mac.forward", "torch.stack.append", "mac_hidden_states.reshape().transpose.reshape().transpose.append", "qtran_learner.QLearner.target_mac.forward", "torch.stack.append", "target_mac_hidden_states.reshape().transpose.reshape().transpose.append", "torch.stack.max", "qtran_learner.QLearner.mixer", "qtran_learner.QLearner.target_mixer", "qtran_learner.QLearner.mixer", "nopt_values.clamp", "qtran_learner.QLearner._update_targets", "qtran_learner.QLearner.logger.log_stat", "qtran_learner.QLearner.logger.log_stat", "qtran_learner.QLearner.logger.log_stat", "qtran_learner.QLearner.logger.log_stat", "qtran_learner.QLearner.logger.log_stat", "mac_hidden_states.reshape().transpose.reshape().transpose.reshape", "torch.gather", "target_mac_hidden_states.reshape().transpose.reshape().transpose.reshape", "torch.zeros", "torch.zeros.scatter", "torch.zeros", "torch.zeros.scatter", "rewards.reshape", "td_targets.detach", "[].float.reshape", "[].float.sum", "torch.zeros", "torch.zeros.scatter", "[].float.reshape", "[].float.sum", "[].float.reshape", "[].float.sum", "Exception", "loss.item", "td_loss.item", "opt_loss.item", "nopt_loss.item", "[].float.sum().item", "qtran_learner.QLearner.logger.log_stat", "qtran_learner.QLearner.logger.log_stat", "qtran_learner.QLearner.logger.log_stat", "qtran_learner.QLearner.logger.log_stat", "qtran_learner.QLearner.logger.log_stat", "max_actions_qvals[].sum().reshape", "max_joint_qs.detach", "torch.gather().squeeze.sum().reshape", "joint_qs.detach", "[].float.sum", "masked_td_error.abs().sum().item", "masked_td_error.sum().item", "joint_qs.sum().item", "vs.sum().item", "[].float.reshape", "max_actions_qvals[].sum", "torch.gather().squeeze.sum", "masked_td_error.abs().sum", "masked_td_error.sum", "joint_qs.sum", "vs.sum", "masked_td_error.abs"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner._update_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "train", "(", "self", ",", "batch", ":", "EpisodeBatch", ",", "t_env", ":", "int", ",", "episode_num", ":", "int", ")", ":", "\n", "# Get the relevant quantities", "\n", "        ", "rewards", "=", "batch", "[", "\"reward\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "actions", "=", "batch", "[", "\"actions\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "terminated", "=", "batch", "[", "\"terminated\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "=", "batch", "[", "\"filled\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "[", ":", ",", "1", ":", "]", "=", "mask", "[", ":", ",", "1", ":", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "avail_actions", "=", "batch", "[", "\"avail_actions\"", "]", "\n", "\n", "# Calculate estimated Q-Values", "\n", "mac_out", "=", "[", "]", "\n", "mac_hidden_states", "=", "[", "]", "\n", "self", ".", "mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", ")", ":", "\n", "            ", "agent_outs", "=", "self", ".", "mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "mac_out", ".", "append", "(", "agent_outs", ")", "\n", "mac_hidden_states", ".", "append", "(", "self", ".", "mac", ".", "hidden_states", ")", "\n", "", "mac_out", "=", "th", ".", "stack", "(", "mac_out", ",", "dim", "=", "1", ")", "# Concat over time", "\n", "mac_hidden_states", "=", "th", ".", "stack", "(", "mac_hidden_states", ",", "dim", "=", "1", ")", "\n", "mac_hidden_states", "=", "mac_hidden_states", ".", "reshape", "(", "batch", ".", "batch_size", ",", "self", ".", "args", ".", "n_agents", ",", "batch", ".", "max_seq_length", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "#btav", "\n", "\n", "# Pick the Q-Values for the actions taken by each agent", "\n", "chosen_action_qvals", "=", "th", ".", "gather", "(", "mac_out", "[", ":", ",", ":", "-", "1", "]", ",", "dim", "=", "3", ",", "index", "=", "actions", ")", ".", "squeeze", "(", "3", ")", "# Remove the last dim", "\n", "\n", "# Calculate the Q-Values necessary for the target", "\n", "target_mac_out", "=", "[", "]", "\n", "target_mac_hidden_states", "=", "[", "]", "\n", "self", ".", "target_mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", ")", ":", "\n", "            ", "target_agent_outs", "=", "self", ".", "target_mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "target_mac_out", ".", "append", "(", "target_agent_outs", ")", "\n", "target_mac_hidden_states", ".", "append", "(", "self", ".", "target_mac", ".", "hidden_states", ")", "\n", "\n", "# We don't need the first timesteps Q-Value estimate for calculating targets", "\n", "", "target_mac_out", "=", "th", ".", "stack", "(", "target_mac_out", "[", ":", "]", ",", "dim", "=", "1", ")", "# Concat across time", "\n", "target_mac_hidden_states", "=", "th", ".", "stack", "(", "target_mac_hidden_states", ",", "dim", "=", "1", ")", "\n", "target_mac_hidden_states", "=", "target_mac_hidden_states", ".", "reshape", "(", "batch", ".", "batch_size", ",", "self", ".", "args", ".", "n_agents", ",", "batch", ".", "max_seq_length", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "#btav", "\n", "\n", "# Mask out unavailable actions", "\n", "target_mac_out", "[", "avail_actions", "[", ":", ",", ":", "]", "==", "0", "]", "=", "-", "9999999", "# From OG deepmarl", "\n", "mac_out_maxs", "=", "mac_out", ".", "clone", "(", ")", "\n", "mac_out_maxs", "[", "avail_actions", "==", "0", "]", "=", "-", "9999999", "\n", "\n", "# Best joint action computed by target agents", "\n", "target_max_actions", "=", "target_mac_out", ".", "max", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "# Best joint-action computed by regular agents", "\n", "max_actions_qvals", ",", "max_actions_current", "=", "mac_out_maxs", "[", ":", ",", ":", "]", ".", "max", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "\n", "\n", "if", "self", ".", "args", ".", "mixer", "==", "\"qtran_base\"", ":", "\n", "# -- TD Loss --", "\n", "# Joint-action Q-Value estimates", "\n", "            ", "joint_qs", ",", "vs", "=", "self", ".", "mixer", "(", "batch", "[", ":", ",", ":", "-", "1", "]", ",", "mac_hidden_states", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "\n", "# Need to argmax across the target agents' actions to compute target joint-action Q-Values", "\n", "if", "self", ".", "args", ".", "double_q", ":", "\n", "                ", "max_actions_current_", "=", "th", ".", "zeros", "(", "size", "=", "(", "batch", ".", "batch_size", ",", "batch", ".", "max_seq_length", ",", "self", ".", "args", ".", "n_agents", ",", "self", ".", "args", ".", "n_actions", ")", ",", "device", "=", "batch", ".", "device", ")", "\n", "max_actions_current_onehot", "=", "max_actions_current_", ".", "scatter", "(", "3", ",", "max_actions_current", "[", ":", ",", ":", "]", ",", "1", ")", "\n", "max_actions_onehot", "=", "max_actions_current_onehot", "\n", "", "else", ":", "\n", "                ", "max_actions", "=", "th", ".", "zeros", "(", "size", "=", "(", "batch", ".", "batch_size", ",", "batch", ".", "max_seq_length", ",", "self", ".", "args", ".", "n_agents", ",", "self", ".", "args", ".", "n_actions", ")", ",", "device", "=", "batch", ".", "device", ")", "\n", "max_actions_onehot", "=", "max_actions", ".", "scatter", "(", "3", ",", "target_max_actions", "[", ":", ",", ":", "]", ",", "1", ")", "\n", "", "target_joint_qs", ",", "target_vs", "=", "self", ".", "target_mixer", "(", "batch", "[", ":", ",", "1", ":", "]", ",", "hidden_states", "=", "target_mac_hidden_states", "[", ":", ",", "1", ":", "]", ",", "actions", "=", "max_actions_onehot", "[", ":", ",", "1", ":", "]", ")", "\n", "\n", "# Td loss targets", "\n", "td_targets", "=", "rewards", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "self", ".", "args", ".", "gamma", "*", "(", "1", "-", "terminated", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "*", "target_joint_qs", "\n", "td_error", "=", "(", "joint_qs", "-", "td_targets", ".", "detach", "(", ")", ")", "\n", "masked_td_error", "=", "td_error", "*", "mask", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "td_loss", "=", "(", "masked_td_error", "**", "2", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "# -- TD Loss --", "\n", "\n", "# -- Opt Loss --", "\n", "# Argmax across the current agents' actions", "\n", "if", "not", "self", ".", "args", ".", "double_q", ":", "# Already computed if we're doing double Q-Learning", "\n", "                ", "max_actions_current_", "=", "th", ".", "zeros", "(", "size", "=", "(", "batch", ".", "batch_size", ",", "batch", ".", "max_seq_length", ",", "self", ".", "args", ".", "n_agents", ",", "self", ".", "args", ".", "n_actions", ")", ",", "device", "=", "batch", ".", "device", ")", "\n", "max_actions_current_onehot", "=", "max_actions_current_", ".", "scatter", "(", "3", ",", "max_actions_current", "[", ":", ",", ":", "]", ",", "1", ")", "\n", "", "max_joint_qs", ",", "_", "=", "self", ".", "mixer", "(", "batch", "[", ":", ",", ":", "-", "1", "]", ",", "mac_hidden_states", "[", ":", ",", ":", "-", "1", "]", ",", "actions", "=", "max_actions_current_onehot", "[", ":", ",", ":", "-", "1", "]", ")", "# Don't use the target network and target agent max actions as per author's email", "\n", "\n", "# max_actions_qvals = th.gather(mac_out[:, :-1], dim=3, index=max_actions_current[:,:-1])", "\n", "opt_error", "=", "max_actions_qvals", "[", ":", ",", ":", "-", "1", "]", ".", "sum", "(", "dim", "=", "2", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "-", "max_joint_qs", ".", "detach", "(", ")", "+", "vs", "\n", "masked_opt_error", "=", "opt_error", "*", "mask", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "opt_loss", "=", "(", "masked_opt_error", "**", "2", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "# -- Opt Loss --", "\n", "\n", "# -- Nopt Loss --", "\n", "# target_joint_qs, _ = self.target_mixer(batch[:, :-1])", "\n", "nopt_values", "=", "chosen_action_qvals", ".", "sum", "(", "dim", "=", "2", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "-", "joint_qs", ".", "detach", "(", ")", "+", "vs", "# Don't use target networks here either", "\n", "nopt_error", "=", "nopt_values", ".", "clamp", "(", "max", "=", "0", ")", "\n", "masked_nopt_error", "=", "nopt_error", "*", "mask", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "nopt_loss", "=", "(", "masked_nopt_error", "**", "2", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "# -- Nopt loss --", "\n", "\n", "", "elif", "self", ".", "args", ".", "mixer", "==", "\"qtran_alt\"", ":", "\n", "            ", "raise", "Exception", "(", "\"Not supported yet.\"", ")", "\n", "\n", "", "loss", "=", "td_loss", "+", "self", ".", "args", ".", "opt_loss", "*", "opt_loss", "+", "self", ".", "args", ".", "nopt_min_loss", "*", "nopt_loss", "\n", "\n", "# Optimise", "\n", "self", ".", "optimiser", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_norm", "=", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "params", ",", "self", ".", "args", ".", "grad_norm_clip", ")", "\n", "self", ".", "optimiser", ".", "step", "(", ")", "\n", "\n", "if", "(", "episode_num", "-", "self", ".", "last_target_update_episode", ")", "/", "self", ".", "args", ".", "target_update_interval", ">=", "1.0", ":", "\n", "            ", "self", ".", "_update_targets", "(", ")", "\n", "self", ".", "last_target_update_episode", "=", "episode_num", "\n", "\n", "", "if", "t_env", "-", "self", ".", "log_stats_t", ">=", "self", ".", "args", ".", "learner_log_interval", ":", "\n", "            ", "self", ".", "logger", ".", "log_stat", "(", "\"loss\"", ",", "loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"td_loss\"", ",", "td_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"opt_loss\"", ",", "opt_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"nopt_loss\"", ",", "nopt_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"grad_norm\"", ",", "grad_norm", ",", "t_env", ")", "\n", "if", "self", ".", "args", ".", "mixer", "==", "\"qtran_base\"", ":", "\n", "                ", "mask_elems", "=", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"td_error_abs\"", ",", "(", "masked_td_error", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"td_targets\"", ",", "(", "(", "masked_td_error", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"td_chosen_qs\"", ",", "(", "joint_qs", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"v_mean\"", ",", "(", "vs", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"agent_indiv_qs\"", ",", "(", "(", "chosen_action_qvals", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "(", "mask_elems", "*", "self", ".", "args", ".", "n_agents", ")", ")", ",", "t_env", ")", "\n", "", "self", ".", "log_stats_t", "=", "t_env", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.qtran_learner.QLearner._update_targets": [[155, 160], ["qtran_learner.QLearner.target_mac.load_state", "qtran_learner.QLearner.logger.console_logger.info", "qtran_learner.QLearner.target_mixer.load_state_dict", "qtran_learner.QLearner.mixer.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_state"], ["", "", "def", "_update_targets", "(", "self", ")", ":", "\n", "        ", "self", ".", "target_mac", ".", "load_state", "(", "self", ".", "mac", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "self", ".", "target_mixer", ".", "load_state_dict", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ")", "\n", "", "self", ".", "logger", ".", "console_logger", ".", "info", "(", "\"Updated target network\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.qtran_learner.QLearner.cuda": [[161, 167], ["qtran_learner.QLearner.mac.cuda", "qtran_learner.QLearner.target_mac.cuda", "qtran_learner.QLearner.mixer.cuda", "qtran_learner.QLearner.target_mixer.cuda"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "mac", ".", "cuda", "(", ")", "\n", "self", ".", "target_mac", ".", "cuda", "(", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "self", ".", "mixer", ".", "cuda", "(", ")", "\n", "self", ".", "target_mixer", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.qtran_learner.QLearner.save_models": [[168, 173], ["qtran_learner.QLearner.mac.save_models", "torch.save", "torch.save", "qtran_learner.QLearner.optimiser.state_dict", "qtran_learner.QLearner.mixer.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models"], ["", "", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "save_models", "(", "path", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "th", ".", "save", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ",", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ")", "\n", "", "th", ".", "save", "(", "self", ".", "optimiser", ".", "state_dict", "(", ")", ",", "\"{}/opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.qtran_learner.QLearner.load_models": [[174, 181], ["qtran_learner.QLearner.mac.load_models", "qtran_learner.QLearner.target_mac.load_models", "qtran_learner.QLearner.optimiser.load_state_dict", "qtran_learner.QLearner.mixer.load_state_dict", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models"], ["", "def", "load_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "load_models", "(", "path", ")", "\n", "# Not quite right but I don't want to save target networks", "\n", "self", ".", "target_mac", ".", "load_models", "(", "path", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "self", ".", "mixer", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "self", ".", "optimiser", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.fmac_learner.FMACLearner.__init__": [[16, 60], ["copy.deepcopy", "list", "pymarl.modules.critics.fmac_critic.FMACCritic", "copy.deepcopy", "list", "print", "print", "mac.parameters", "fmac_learner.FMACLearner.critic.parameters", "list", "copy.deepcopy", "pymarl.utils.th_utils.get_parameters_num", "getattr", "torch.optim.RMSprop", "getattr", "torch.optim.RMSprop", "pymarl.modules.mixers.vdn.VDNMixer", "fmac_learner.FMACLearner.mixer.parameters", "getattr", "torch.optim.Adam", "Exception", "getattr", "torch.optim.Adam", "Exception", "pymarl.modules.mixers.qmix.QMixer", "ValueError", "getattr", "getattr", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.th_utils.get_parameters_num", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters"], ["    ", "def", "__init__", "(", "self", ",", "mac", ",", "scheme", ",", "logger", ",", "callback", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "n_actions", "=", "args", ".", "n_actions", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "mac", "=", "mac", "\n", "self", ".", "target_mac", "=", "copy", ".", "deepcopy", "(", "self", ".", "mac", ")", "\n", "self", ".", "agent_params", "=", "list", "(", "mac", ".", "parameters", "(", ")", ")", "\n", "\n", "self", ".", "critic", "=", "FMACCritic", "(", "scheme", ",", "args", ")", "\n", "self", ".", "target_critic", "=", "copy", ".", "deepcopy", "(", "self", ".", "critic", ")", "\n", "self", ".", "critic_params", "=", "list", "(", "self", ".", "critic", ".", "parameters", "(", ")", ")", "\n", "\n", "self", ".", "mixer", "=", "None", "\n", "if", "args", ".", "mixer", "is", "not", "None", "and", "self", ".", "args", ".", "n_agents", ">", "1", ":", "# if just 1 agent do not mix anything", "\n", "            ", "if", "args", ".", "mixer", "==", "\"vdn\"", ":", "\n", "                ", "self", ".", "mixer", "=", "VDNMixer", "(", ")", "\n", "", "elif", "args", ".", "mixer", "==", "\"qmix\"", ":", "\n", "                ", "self", ".", "mixer", "=", "QMixer", "(", "args", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Mixer {} not recognised.\"", ".", "format", "(", "args", ".", "mixer", ")", ")", "\n", "", "self", ".", "critic_params", "+=", "list", "(", "self", ".", "mixer", ".", "parameters", "(", ")", ")", "\n", "self", ".", "target_mixer", "=", "copy", ".", "deepcopy", "(", "self", ".", "mixer", ")", "\n", "\n", "", "print", "(", "'Mixer Size: '", ")", "\n", "print", "(", "get_parameters_num", "(", "self", ".", "critic_params", ")", ")", "\n", "\n", "if", "getattr", "(", "self", ".", "args", ",", "\"optimizer\"", ",", "\"rmsprop\"", ")", "==", "\"rmsprop\"", ":", "\n", "            ", "self", ".", "agent_optimiser", "=", "RMSprop", "(", "params", "=", "self", ".", "agent_params", ",", "lr", "=", "args", ".", "lr", ",", "alpha", "=", "args", ".", "optim_alpha", ",", "eps", "=", "args", ".", "optim_eps", ")", "\n", "", "elif", "getattr", "(", "self", ".", "args", ",", "\"optimizer\"", ",", "\"rmsprop\"", ")", "==", "\"adam\"", ":", "\n", "            ", "self", ".", "agent_optimiser", "=", "Adam", "(", "params", "=", "self", ".", "agent_params", ",", "lr", "=", "args", ".", "lr", ",", "eps", "=", "getattr", "(", "args", ",", "\"optimizer_epsilon\"", ",", "10E-8", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"unknown optimizer {}\"", ".", "format", "(", "getattr", "(", "self", ".", "args", ",", "\"optimizer\"", ",", "\"rmsprop\"", ")", ")", ")", "\n", "\n", "", "if", "getattr", "(", "self", ".", "args", ",", "\"optimizer\"", ",", "\"rmsprop\"", ")", "==", "\"rmsprop\"", ":", "\n", "            ", "self", ".", "critic_optimiser", "=", "RMSprop", "(", "params", "=", "self", ".", "critic_params", ",", "lr", "=", "args", ".", "critic_lr", ",", "alpha", "=", "args", ".", "optim_alpha", ",", "eps", "=", "args", ".", "optim_eps", ")", "\n", "", "elif", "getattr", "(", "self", ".", "args", ",", "\"optimizer\"", ",", "\"rmsprop\"", ")", "==", "\"adam\"", ":", "\n", "            ", "self", ".", "critic_optimiser", "=", "Adam", "(", "params", "=", "self", ".", "critic_params", ",", "lr", "=", "args", ".", "critic_lr", ",", "eps", "=", "getattr", "(", "args", ",", "\"optimizer_epsilon\"", ",", "10E-8", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"unknown optimizer {}\"", ".", "format", "(", "getattr", "(", "self", ".", "args", ",", "\"optimizer\"", ",", "\"rmsprop\"", ")", ")", ")", "\n", "\n", "", "self", ".", "log_stats_t", "=", "-", "self", ".", "args", ".", "learner_log_interval", "-", "1", "\n", "self", ".", "last_target_update_episode", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.fmac_learner.FMACLearner.train": [[61, 132], ["[].float", "[].float", "fmac_learner.FMACLearner.critic", "fmac_learner.FMACLearner.mixer", "fmac_learner.FMACLearner.critic_optimiser.zero_grad", "critic_loss.backward", "torch.nn.utils.clip_grad_norm_", "fmac_learner.FMACLearner.critic_optimiser.step", "torch.no_grad", "fmac_learner.FMACLearner.target_critic", "fmac_learner.FMACLearner.target_mixer", "pymarl.utils.rl_utils.build_td_lambda_targets", "actions_onehot.detach", "[].float.sum", "fmac_learner.FMACLearner.mac.init_hidden", "range", "torch.stack", "fmac_learner.FMACLearner.critic", "fmac_learner.FMACLearner.mixer", "pymarl.components.action_selectors.categorical_entropy().mean", "fmac_learner.FMACLearner.agent_optimiser.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "fmac_learner.FMACLearner.agent_optimiser.step", "fmac_learner.FMACLearner._update_targets", "fmac_learner.FMACLearner.logger.log_stat", "fmac_learner.FMACLearner.logger.log_stat", "fmac_learner.FMACLearner.logger.log_stat", "batch[].detach", "fmac_learner.FMACLearner.mac.forward", "torch.stack.append", "[].float.sum", "[].float.sum", "critic_loss.item", "torch.nn.utils.clip_grad_norm_.item", "fmac_learner.FMACLearner.logger.log_stat", "fmac_learner.FMACLearner.logger.log_stat", "fmac_learner.FMACLearner.logger.log_stat", "[].float.repeat", "fmac_learner.FMACLearner.logger.log_stat", "pymarl.components.action_selectors.categorical_entropy", "pymarl.components.action_selectors.categorical_entropy().mean.item", "[].float.sum().item", "pg_loss.item", "pymarl.components.action_selectors.categorical_entropy().mean.item", "torch.nn.utils.clip_grad_norm_.item", "[].float.repeat.sum().item", "[].float.sum", "[].float.repeat.sum", "pymarl.utils.rl_utils.build_td_lambda_targets.detach", "torch.stack.max"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.rl_utils.build_td_lambda_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner._update_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.categorical_entropy", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "train", "(", "self", ",", "batch", ":", "EpisodeBatch", ",", "t_env", ":", "int", ",", "episode_num", ":", "int", ",", "off", "=", "False", ")", ":", "\n", "# Get the relevant data", "\n", "        ", "rewards", "=", "batch", "[", "\"reward\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "actions", "=", "batch", "[", "\"actions\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "actions_onehot", "=", "batch", "[", "\"actions_onehot\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "terminated", "=", "batch", "[", "\"terminated\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "=", "batch", "[", "\"filled\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "[", ":", ",", "1", ":", "]", "=", "mask", "[", ":", ",", "1", ":", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "avail_actions", "=", "batch", "[", "\"avail_actions\"", "]", "\n", "\n", "# Retrace Q target", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "            ", "q1", ",", "_", "=", "self", ".", "target_critic", "(", "batch", ",", "batch", "[", "\"actions_onehot\"", "]", ".", "detach", "(", ")", ")", "\n", "target_vals", "=", "self", ".", "target_mixer", "(", "q1", ",", "batch", "[", "\"state\"", "]", ")", "\n", "\n", "lambd", "=", "0", "if", "off", "else", "self", ".", "args", ".", "lambd", "\n", "target_vals", "=", "build_td_lambda_targets", "(", "rewards", ",", "\n", "terminated", ",", "mask", ",", "target_vals", ",", "self", ".", "n_agents", ",", "self", ".", "args", ".", "gamma", ",", "lambd", ")", "\n", "\n", "# Train the critic", "\n", "# Current Q network forward", "\n", "", "q1", ",", "_", "=", "self", ".", "critic", "(", "batch", "[", ":", ",", ":", "-", "1", "]", ",", "actions_onehot", ".", "detach", "(", ")", ")", "\n", "q_taken", "=", "self", ".", "mixer", "(", "q1", ",", "batch", "[", "\"state\"", "]", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "critic_loss", "=", "0.5", "*", "(", "(", "q_taken", "-", "target_vals", ".", "detach", "(", ")", ")", "*", "mask", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n", "self", ".", "critic_optimiser", ".", "zero_grad", "(", ")", "\n", "critic_loss", ".", "backward", "(", ")", "\n", "critic_grad_norm", "=", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "critic_params", ",", "self", ".", "args", ".", "grad_norm_clip", ")", "\n", "self", ".", "critic_optimiser", ".", "step", "(", ")", "\n", "\n", "# Train the actor", "\n", "if", "not", "off", ":", "\n", "            ", "pi", "=", "[", "]", "\n", "self", ".", "mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", "-", "1", ")", ":", "\n", "                ", "agent_outs", "=", "self", ".", "mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "pi", ".", "append", "(", "agent_outs", ")", "\n", "", "pi", "=", "th", ".", "stack", "(", "pi", ",", "dim", "=", "1", ")", "# Concat over time b, t, a, probs", "\n", "\n", "q1", ",", "_", "=", "self", ".", "critic", "(", "batch", "[", ":", ",", ":", "-", "1", "]", ",", "pi", ")", "\n", "q", "=", "self", ".", "mixer", "(", "q1", ",", "batch", "[", "\"state\"", "]", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "pg_loss", "=", "-", "(", "q", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n", "entropy_loss", "=", "categorical_entropy", "(", "pi", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "# mean over agents", "\n", "entropy_loss", "[", "mask", "==", "0", "]", "=", "0", "# fill nan", "\n", "entropy_loss", "=", "(", "entropy_loss", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "loss", "=", "pg_loss", "-", "self", ".", "args", ".", "entropy_coef", "*", "entropy_loss", "/", "entropy_loss", ".", "item", "(", ")", "\n", "\n", "self", ".", "agent_optimiser", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "agent_grad_norm", "=", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "agent_params", ",", "self", ".", "args", ".", "grad_norm_clip", ")", "\n", "self", ".", "agent_optimiser", ".", "step", "(", ")", "\n", "\n", "# target_update", "\n", "", "if", "(", "episode_num", "-", "self", ".", "last_target_update_episode", ")", "/", "self", ".", "args", ".", "target_update_interval", ">=", "1.0", ":", "\n", "            ", "self", ".", "_update_targets", "(", ")", "\n", "self", ".", "last_target_update_episode", "=", "episode_num", "\n", "\n", "# log", "\n", "", "if", "t_env", "-", "self", ".", "log_stats_t", ">=", "self", ".", "args", ".", "learner_log_interval", ":", "\n", "            ", "self", ".", "logger", ".", "log_stat", "(", "\"critic_loss\"", ",", "critic_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"critic_grad_norm\"", ",", "critic_grad_norm", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"target_vals\"", ",", "(", "target_vals", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "t_env", ")", "\n", "\n", "if", "not", "off", ":", "\n", "                ", "self", ".", "logger", ".", "log_stat", "(", "\"pg_loss\"", ",", "pg_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"entropy_loss\"", ",", "entropy_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"agent_grad_norm\"", ",", "agent_grad_norm", ".", "item", "(", ")", ",", "t_env", ")", "\n", "agent_mask", "=", "mask", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"pi_max\"", ",", "(", "pi", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "*", "agent_mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "agent_mask", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "log_stats_t", "=", "t_env", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.fmac_learner.FMACLearner._update_targets": [[133, 139], ["fmac_learner.FMACLearner.target_mac.load_state", "fmac_learner.FMACLearner.target_critic.load_state_dict", "fmac_learner.FMACLearner.critic.state_dict", "fmac_learner.FMACLearner.target_mixer.load_state_dict", "fmac_learner.FMACLearner.mixer.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_state"], ["", "", "", "def", "_update_targets", "(", "self", ")", ":", "\n", "        ", "self", ".", "target_mac", ".", "load_state", "(", "self", ".", "mac", ")", "\n", "\n", "self", ".", "target_critic", ".", "load_state_dict", "(", "self", ".", "critic", ".", "state_dict", "(", ")", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "self", ".", "target_mixer", ".", "load_state_dict", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.fmac_learner.FMACLearner.cuda": [[142, 150], ["fmac_learner.FMACLearner.mac.cuda", "fmac_learner.FMACLearner.target_mac.cuda", "fmac_learner.FMACLearner.critic.to", "fmac_learner.FMACLearner.target_critic.to", "fmac_learner.FMACLearner.mixer.to", "fmac_learner.FMACLearner.target_mixer.to"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to"], ["", "", "def", "cuda", "(", "self", ",", "device", "=", "\"cuda\"", ")", ":", "\n", "        ", "self", ".", "mac", ".", "cuda", "(", ")", "\n", "self", ".", "target_mac", ".", "cuda", "(", ")", "\n", "self", ".", "critic", ".", "to", "(", "device", "=", "device", ")", "\n", "self", ".", "target_critic", ".", "to", "(", "device", "=", "device", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "self", ".", "mixer", ".", "to", "(", "device", "=", "device", ")", "\n", "self", ".", "target_mixer", ".", "to", "(", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.fmac_learner.FMACLearner.save_models": [[151, 156], ["fmac_learner.FMACLearner.mac.save_models", "torch.save", "torch.save", "fmac_learner.FMACLearner.agent_optimiser.state_dict", "fmac_learner.FMACLearner.mixer.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models"], ["", "", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "save_models", "(", "path", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "th", ".", "save", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ",", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ")", "\n", "", "th", ".", "save", "(", "self", ".", "agent_optimiser", ".", "state_dict", "(", ")", ",", "\"{}/opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.fmac_learner.FMACLearner.load_models": [[157, 165], ["fmac_learner.FMACLearner.mac.load_models", "fmac_learner.FMACLearner.target_mac.load_models", "fmac_learner.FMACLearner.agent_optimiser.load_state_dict", "fmac_learner.FMACLearner.mixer.load_state_dict", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models"], ["", "def", "load_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "load_models", "(", "path", ")", "\n", "# Not quite right but I don't want to save target networks", "\n", "self", ".", "target_mac", ".", "load_models", "(", "path", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "self", ".", "mixer", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "self", ".", "agent_optimiser", ".", "load_state_dict", "(", "\n", "th", ".", "load", "(", "\"{}/opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner.__init__": [[10, 37], ["list", "torch.optim.RMSprop", "copy.deepcopy", "mac.parameters", "list", "copy.deepcopy", "pymarl.modules.mixers.vdn.VDNMixer", "q_learner.QLearner.mixer.parameters", "pymarl.modules.mixers.qmix.QMixer", "pymarl.modules.mixers.graphmix.GraphMixer", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters"], ["    ", "def", "__init__", "(", "self", ",", "mac", ",", "scheme", ",", "logger", ",", "callback", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "mac", "=", "mac", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "params", "=", "list", "(", "mac", ".", "parameters", "(", ")", ")", "\n", "\n", "self", ".", "last_target_update_episode", "=", "0", "\n", "\n", "self", ".", "mixer", "=", "None", "\n", "if", "args", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "if", "args", ".", "mixer", "==", "\"vdn\"", ":", "\n", "                ", "self", ".", "mixer", "=", "VDNMixer", "(", ")", "\n", "", "elif", "args", ".", "mixer", "==", "\"qmix\"", ":", "\n", "                ", "self", ".", "mixer", "=", "QMixer", "(", "args", ")", "\n", "", "elif", "args", ".", "mixer", "==", "\"graphmix\"", ":", "\n", "                ", "self", ".", "mixer", "=", "GraphMixer", "(", "args", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Mixer {} not recognised.\"", ".", "format", "(", "args", ".", "mixer", ")", ")", "\n", "", "self", ".", "params", "+=", "list", "(", "self", ".", "mixer", ".", "parameters", "(", ")", ")", "\n", "self", ".", "target_mixer", "=", "copy", ".", "deepcopy", "(", "self", ".", "mixer", ")", "\n", "\n", "", "self", ".", "optimiser", "=", "RMSprop", "(", "params", "=", "self", ".", "params", ",", "lr", "=", "args", ".", "lr", ",", "alpha", "=", "args", ".", "optim_alpha", ",", "eps", "=", "args", ".", "optim_eps", ")", "\n", "\n", "self", ".", "target_mac", "=", "copy", ".", "deepcopy", "(", "mac", ")", "\n", "\n", "self", ".", "log_stats_t", "=", "-", "self", ".", "args", ".", "learner_log_interval", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner.train": [[38, 184], ["[].float", "[].float", "q_learner.QLearner.mac.init_hidden", "range", "torch.stack", "torch.stack", "torch.gather().squeeze", "q_learner.QLearner.target_mac.init_hidden", "range", "torch.stack", "torch.stack", "q_learner.QLearner.optimiser.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "q_learner.QLearner.optimiser.step", "q_learner.QLearner.mac.forward", "torch.stack.append", "torch.stack.append", "q_learner.QLearner.target_mac.forward", "torch.stack.append", "torch.stack.append", "torch.stack.clone().detach", "torch.gather().squeeze", "q_learner.QLearner.clone", "q_learner.QLearner.detach", "q_learner.QLearner.mixer", "mask.expand_as.expand_as.expand_as", "mask.expand_as.expand_as.expand_as", "q_learner.QLearner._update_targets", "q_learner.QLearner.logger.log_stat", "q_learner.QLearner.logger.log_stat", "mask.expand_as.expand_as.sum().item", "q_learner.QLearner.logger.log_stat", "q_learner.QLearner.logger.log_stat", "q_learner.QLearner.logger.log_stat", "q_learner.QLearner.mac.hidden_states.view", "torch.gather", "q_learner.QLearner.target_mac.hidden_states.view", "mac_out_detach[].max", "torch.stack.max", "q_learner.QLearner.target_mixer", "targets.detach", "mask.expand_as.expand_as.sum", "mask.expand_as.expand_as.repeat", "mask.expand_as.expand_as.sum", "q_learner.QLearner.mixer", "q_learner.QLearner.target_mixer", "targets.detach", "mask.expand_as.expand_as.sum", "loss.item", "q_learner.QLearner.logger.log_stat", "q_learner.QLearner.logger.log_stat", "torch.stack.clone", "torch.gather", "global_loss.item", "local_loss.item", "mask.expand_as.expand_as.sum", "masked_td_error.abs().sum().item", "masked_td_error.abs().sum", "masked_td_error.abs"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner._update_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "train", "(", "self", ",", "batch", ":", "EpisodeBatch", ",", "t_env", ":", "int", ",", "episode_num", ":", "int", ")", ":", "\n", "# Get the relevant quantities", "\n", "        ", "rewards", "=", "batch", "[", "\"reward\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "actions", "=", "batch", "[", "\"actions\"", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "terminated", "=", "batch", "[", "\"terminated\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "=", "batch", "[", "\"filled\"", "]", "[", ":", ",", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "[", ":", ",", "1", ":", "]", "=", "mask", "[", ":", ",", "1", ":", "]", "*", "(", "1", "-", "terminated", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "avail_actions", "=", "batch", "[", "\"avail_actions\"", "]", "\n", "\n", "# Calculate estimated Q-Values", "\n", "mac_out", "=", "[", "]", "\n", "hidden_states", "=", "[", "]", "\n", "self", ".", "mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", ")", ":", "\n", "            ", "agent_outs", "=", "self", ".", "mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "mac_out", ".", "append", "(", "agent_outs", ")", "\n", "hidden_states", ".", "append", "(", "self", ".", "mac", ".", "hidden_states", ".", "view", "(", "batch", ".", "batch_size", ",", "self", ".", "args", ".", "n_agents", ",", "-", "1", ")", ")", "\n", "\n", "", "mac_out", "=", "th", ".", "stack", "(", "mac_out", ",", "dim", "=", "1", ")", "# Concat over time", "\n", "hidden_states", "=", "th", ".", "stack", "(", "hidden_states", ",", "dim", "=", "1", ")", "\n", "\n", "# Pick the Q-Values for the actions taken by each agent", "\n", "chosen_action_qvals", "=", "th", ".", "gather", "(", "mac_out", "[", ":", ",", ":", "-", "1", "]", ",", "dim", "=", "3", ",", "index", "=", "actions", ")", ".", "squeeze", "(", "3", ")", "# Remove the last dim", "\n", "\n", "# Calculate the Q-Values necessary for the target", "\n", "target_mac_out", "=", "[", "]", "\n", "target_hidden_states", "=", "[", "]", "\n", "self", ".", "target_mac", ".", "init_hidden", "(", "batch", ".", "batch_size", ")", "\n", "for", "t", "in", "range", "(", "batch", ".", "max_seq_length", ")", ":", "\n", "            ", "target_agent_outs", "=", "self", ".", "target_mac", ".", "forward", "(", "batch", ",", "t", "=", "t", ")", "\n", "target_mac_out", ".", "append", "(", "target_agent_outs", ")", "\n", "target_hidden_states", ".", "append", "(", "self", ".", "target_mac", ".", "hidden_states", ".", "view", "(", "batch", ".", "batch_size", ",", "self", ".", "args", ".", "n_agents", ",", "-", "1", ")", ")", "\n", "\n", "# We don't need the first timesteps Q-Value estimate for calculating targets", "\n", "", "target_mac_out", "=", "th", ".", "stack", "(", "target_mac_out", "[", "1", ":", "]", ",", "dim", "=", "1", ")", "# Concat across time", "\n", "target_hidden_states", "=", "th", ".", "stack", "(", "target_hidden_states", "[", "1", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# Mask out unavailable actions", "\n", "target_mac_out", "[", "avail_actions", "[", ":", ",", "1", ":", "]", "==", "0", "]", "=", "-", "9999999", "\n", "\n", "# Max over target Q-Values", "\n", "if", "self", ".", "args", ".", "double_q", ":", "\n", "# Get actions that maximise live Q (for double q-learning)", "\n", "            ", "mac_out_detach", "=", "mac_out", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mac_out_detach", "[", "avail_actions", "==", "0", "]", "=", "-", "9999999", "\n", "cur_max_actions", "=", "mac_out_detach", "[", ":", ",", "1", ":", "]", ".", "max", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "target_max_qvals", "=", "th", ".", "gather", "(", "target_mac_out", ",", "3", ",", "cur_max_actions", ")", ".", "squeeze", "(", "3", ")", "\n", "", "else", ":", "\n", "            ", "target_max_qvals", "=", "target_mac_out", ".", "max", "(", "dim", "=", "3", ")", "[", "0", "]", "\n", "\n", "", "if", "self", ".", "args", ".", "mixer", "==", "'graphmix'", ":", "\n", "\n", "# Mix", "\n", "            ", "chosen_action_qvals_peragent", "=", "chosen_action_qvals", ".", "clone", "(", ")", "\n", "target_max_qvals_peragent", "=", "target_max_qvals", ".", "detach", "(", ")", "\n", "\n", "chosen_action_qvals", ",", "local_rewards", ",", "alive_agents_mask", "=", "self", ".", "mixer", "(", "chosen_action_qvals", ",", "\n", "batch", "[", "\"state\"", "]", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "agent_obs", "=", "batch", "[", "\"obs\"", "]", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "team_rewards", "=", "rewards", ",", "\n", "hidden_states", "=", "hidden_states", "[", ":", ",", ":", "-", "1", "]", "\n", ")", "\n", "\n", "target_max_qvals", "=", "self", ".", "target_mixer", "(", "target_max_qvals", ",", "\n", "batch", "[", "\"state\"", "]", "[", ":", ",", "1", ":", "]", ",", "\n", "agent_obs", "=", "batch", "[", "\"obs\"", "]", "[", ":", ",", "1", ":", "]", ",", "\n", "hidden_states", "=", "target_hidden_states", "\n", ")", "[", "0", "]", "\n", "\n", "## Global loss", "\n", "# Calculate 1-step Q-Learning targets", "\n", "targets", "=", "rewards", "+", "self", ".", "args", ".", "gamma", "*", "(", "1", "-", "terminated", ")", "*", "target_max_qvals", "\n", "\n", "# Td-error", "\n", "td_error", "=", "(", "chosen_action_qvals", "-", "targets", ".", "detach", "(", ")", ")", "\n", "\n", "mask", "=", "mask", ".", "expand_as", "(", "td_error", ")", "\n", "\n", "# 0-out the targets that came from padded data", "\n", "masked_td_error", "=", "td_error", "*", "mask", "\n", "\n", "# Normal L2 loss, take mean over actual data", "\n", "global_loss", "=", "(", "masked_td_error", "**", "2", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n", "## Local losses", "\n", "# Calculate 1-step Q-Learning targets            ", "\n", "local_targets", "=", "local_rewards", "+", "self", ".", "args", ".", "gamma", "*", "(", "1", "-", "terminated", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "args", ".", "n_agents", ")", "*", "target_max_qvals_peragent", "\n", "\n", "# Td-error", "\n", "local_td_error", "=", "(", "chosen_action_qvals_peragent", "-", "local_targets", ")", "\n", "local_mask", "=", "mask", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "args", ".", "n_agents", ")", "*", "alive_agents_mask", "\n", "\n", "# 0-out the targets that came from padded data", "\n", "local_masked_td_error", "=", "local_td_error", "*", "local_mask", "\n", "\n", "# Normal L2 loss, take mean over actual data", "\n", "local_loss", "=", "(", "local_masked_td_error", "**", "2", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n", "# total loss", "\n", "lambda_local", "=", "self", ".", "args", ".", "lambda_local", "\n", "loss", "=", "global_loss", "+", "lambda_local", "*", "local_loss", "\n", "\n", "", "else", ":", "\n", "# Mix", "\n", "            ", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "                ", "chosen_action_qvals", "=", "self", ".", "mixer", "(", "chosen_action_qvals", ",", "batch", "[", "\"state\"", "]", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "target_max_qvals", "=", "self", ".", "target_mixer", "(", "target_max_qvals", ",", "batch", "[", "\"state\"", "]", "[", ":", ",", "1", ":", "]", ")", "\n", "\n", "# Calculate 1-step Q-Learning targets", "\n", "", "targets", "=", "rewards", "+", "self", ".", "args", ".", "gamma", "*", "(", "1", "-", "terminated", ")", "*", "target_max_qvals", "\n", "\n", "# Td-error", "\n", "td_error", "=", "(", "chosen_action_qvals", "-", "targets", ".", "detach", "(", ")", ")", "\n", "\n", "mask", "=", "mask", ".", "expand_as", "(", "td_error", ")", "\n", "\n", "# 0-out the targets that came from padded data", "\n", "masked_td_error", "=", "td_error", "*", "mask", "\n", "\n", "# Normal L2 loss, take mean over actual data", "\n", "loss", "=", "(", "masked_td_error", "**", "2", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n", "# Optimise", "\n", "", "self", ".", "optimiser", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_norm", "=", "th", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "params", ",", "self", ".", "args", ".", "grad_norm_clip", ")", "\n", "self", ".", "optimiser", ".", "step", "(", ")", "\n", "\n", "if", "(", "episode_num", "-", "self", ".", "last_target_update_episode", ")", "/", "self", ".", "args", ".", "target_update_interval", ">=", "1.0", ":", "\n", "            ", "self", ".", "_update_targets", "(", ")", "\n", "self", ".", "last_target_update_episode", "=", "episode_num", "\n", "\n", "", "if", "t_env", "-", "self", ".", "log_stats_t", ">=", "self", ".", "args", ".", "learner_log_interval", ":", "\n", "            ", "self", ".", "logger", ".", "log_stat", "(", "\"loss\"", ",", "loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "\n", "if", "self", ".", "args", ".", "mixer", "==", "'graphmix'", ":", "\n", "                ", "self", ".", "logger", ".", "log_stat", "(", "\"global_loss\"", ",", "global_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"local_loss\"", ",", "local_loss", ".", "item", "(", ")", ",", "t_env", ")", "\n", "\n", "", "self", ".", "logger", ".", "log_stat", "(", "\"grad_norm\"", ",", "grad_norm", ",", "t_env", ")", "\n", "mask_elems", "=", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"td_error_abs\"", ",", "(", "masked_td_error", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask_elems", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"q_taken_mean\"", ",", "(", "chosen_action_qvals", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "(", "mask_elems", "*", "self", ".", "args", ".", "n_agents", ")", ",", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "\"target_mean\"", ",", "(", "targets", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "(", "mask_elems", "*", "self", ".", "args", ".", "n_agents", ")", ",", "t_env", ")", "\n", "self", ".", "log_stats_t", "=", "t_env", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner._update_targets": [[185, 190], ["q_learner.QLearner.target_mac.load_state", "q_learner.QLearner.logger.console_logger.info", "q_learner.QLearner.target_mixer.load_state_dict", "q_learner.QLearner.mixer.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_state"], ["", "", "def", "_update_targets", "(", "self", ")", ":", "\n", "        ", "self", ".", "target_mac", ".", "load_state", "(", "self", ".", "mac", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "self", ".", "target_mixer", ".", "load_state_dict", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ")", "\n", "", "self", ".", "logger", ".", "console_logger", ".", "info", "(", "\"Updated target network\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner.cuda": [[191, 197], ["q_learner.QLearner.mac.cuda", "q_learner.QLearner.target_mac.cuda", "q_learner.QLearner.mixer.cuda", "q_learner.QLearner.target_mixer.cuda"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "mac", ".", "cuda", "(", ")", "\n", "self", ".", "target_mac", ".", "cuda", "(", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "self", ".", "mixer", ".", "cuda", "(", ")", "\n", "self", ".", "target_mixer", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner.save_models": [[198, 203], ["q_learner.QLearner.mac.save_models", "torch.save", "torch.save", "q_learner.QLearner.optimiser.state_dict", "q_learner.QLearner.mixer.state_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models"], ["", "", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "save_models", "(", "path", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "th", ".", "save", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ",", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ")", "\n", "", "th", ".", "save", "(", "self", ".", "optimiser", ".", "state_dict", "(", ")", ",", "\"{}/opt.th\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner.load_models": [[204, 210], ["q_learner.QLearner.mac.load_models", "q_learner.QLearner.target_mac.load_models", "q_learner.QLearner.optimiser.load_state_dict", "q_learner.QLearner.mixer.load_state_dict", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models"], ["", "def", "load_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "mac", ".", "load_models", "(", "path", ")", "\n", "self", ".", "target_mac", ".", "load_models", "(", "path", ")", "\n", "if", "self", ".", "mixer", "is", "not", "None", ":", "\n", "            ", "self", ".", "mixer", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/mixer.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "self", ".", "optimiser", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/opt.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.dop_run.run": [[21, 68], ["dop_run.args_sanity_check", "types.SimpleNamespace", "pymarl.utils.logging.Logger", "_log.info", "pprint.pformat", "_log.info", "pymarl.utils.logging.Logger.setup_sacred", "dop_run.run_sequential", "print", "print", "threading.enumerate", "print", "os._exit", "datetime.datetime.now().strftime", "os.path.join", "os.path.join().format", "pymarl.utils.logging.Logger.setup_tb", "pymarl.utils.logging.Logger.setup_wandb", "os.path.dirname", "print", "t.join", "print", "datetime.datetime.now", "os.path.dirname", "os.path.join", "os.path.dirname", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.args_sanity_check", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.run_sequential", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.setup_tb", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.setup_wandb"], ["def", "run", "(", "_run", ",", "_config", ",", "_log", ")", ":", "\n", "\n", "# check args sanity", "\n", "    ", "_config", "=", "args_sanity_check", "(", "_config", ",", "_log", ")", "\n", "\n", "args", "=", "SN", "(", "**", "_config", ")", "\n", "args", ".", "device", "=", "\"cuda\"", "if", "args", ".", "use_cuda", "else", "\"cpu\"", "\n", "\n", "# setup loggers", "\n", "logger", "=", "Logger", "(", "_log", ")", "\n", "\n", "_log", ".", "info", "(", "\"Experiment Parameters:\"", ")", "\n", "experiment_params", "=", "pprint", ".", "pformat", "(", "_config", ",", "\n", "indent", "=", "4", ",", "\n", "width", "=", "1", ")", "\n", "_log", ".", "info", "(", "\"\\n\\n\"", "+", "experiment_params", "+", "\"\\n\"", ")", "\n", "\n", "# configure tensorboard logger", "\n", "unique_token", "=", "\"{}__{}\"", ".", "format", "(", "args", ".", "name", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d_%H-%M-%S\"", ")", ")", "\n", "args", ".", "unique_token", "=", "unique_token", "\n", "if", "args", ".", "use_tensorboard", ":", "\n", "        ", "tb_logs_direc", "=", "os", ".", "path", ".", "join", "(", "dirname", "(", "dirname", "(", "dirname", "(", "abspath", "(", "__file__", ")", ")", ")", ")", ",", "\"results\"", ",", "\"tb_logs\"", ")", "\n", "tb_exp_direc", "=", "os", ".", "path", ".", "join", "(", "tb_logs_direc", ",", "\"{}\"", ")", ".", "format", "(", "unique_token", ")", "\n", "logger", ".", "setup_tb", "(", "tb_exp_direc", ")", "\n", "", "if", "args", ".", "wandb", ":", "\n", "        ", "logger", ".", "setup_wandb", "(", "args", ")", "\n", "\n", "# sacred is on by default", "\n", "", "logger", ".", "setup_sacred", "(", "_run", ")", "\n", "\n", "# Run and train", "\n", "run_sequential", "(", "args", "=", "args", ",", "logger", "=", "logger", ")", "\n", "\n", "# Clean up after finishing", "\n", "print", "(", "\"Exiting Main\"", ")", "\n", "\n", "print", "(", "\"Stopping all threads\"", ")", "\n", "for", "t", "in", "threading", ".", "enumerate", "(", ")", ":", "\n", "        ", "if", "t", ".", "name", "!=", "\"MainThread\"", ":", "\n", "            ", "print", "(", "\"Thread {} is alive! Is daemon: {}\"", ".", "format", "(", "t", ".", "name", ",", "t", ".", "daemon", ")", ")", "\n", "t", ".", "join", "(", "timeout", "=", "1", ")", "\n", "print", "(", "\"Thread joined\"", ")", "\n", "\n", "", "", "print", "(", "\"Exiting script\"", ")", "\n", "\n", "# Making sure framework really exits", "\n", "os", ".", "_exit", "(", "os", ".", "EX_OK", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.dop_run.evaluate_sequential": [[70, 76], ["range", "runner.close_env", "runner.run"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.close_env", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.run"], ["", "def", "evaluate_sequential", "(", "args", ",", "runner", ")", ":", "\n", "\n", "    ", "for", "_", "in", "range", "(", "args", ".", "test_nepisode", ")", ":", "\n", "        ", "runner", ".", "run", "(", "test_mode", "=", "True", ")", "\n", "\n", "", "runner", ".", "close_env", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.dop_run.run_sequential": [[77, 248], ["runner.get_env_info", "hasattr", "pymarl.components.episode_buffer.ReplayBuffer", "pymarl.components.episode_buffer.ReplayBuffer", "runner.setup", "time.time", "logger.console_logger.info", "runner.close_env", "logger.console_logger.info", "scheme.update", "learner.cuda", "os.listdir", "os.path.join", "logger.console_logger.info", "learner.load_models", "runner.run", "pymarl.components.episode_buffer.ReplayBuffer.insert_episode_batch", "pymarl.components.episode_buffer.ReplayBuffer.insert_episode_batch", "max", "os.path.isdir", "logger.console_logger.info", "os.path.join", "max", "min", "str", "dop_run.evaluate_sequential", "pymarl.components.episode_buffer.ReplayBuffer.can_sample", "pymarl.components.episode_buffer.ReplayBuffer.can_sample", "pymarl.components.episode_buffer.ReplayBuffer.uni_sample", "pymarl.components.episode_buffer.ReplayBuffer.uni_sample", "max", "dop_run.process_batch", "dop_run.process_batch", "learner.train_critic", "pymarl.components.episode_buffer.ReplayBuffer.sample_latest", "process_batch.max_t_filled", "dop_run.process_batch", "learner.train", "logger.console_logger.info", "logger.console_logger.info", "time.time", "range", "os.path.join", "os.makedirs", "logger.console_logger.info", "learner.save_models", "logger.log_stat", "logger.print_recent_stats", "pymarl.components.transforms.OneHot", "os.path.isdir", "name.isdigit", "timesteps.append", "process_batch.max_t_filled", "process_batch.max_t_filled", "runner.run", "str", "int", "pymarl.utils.timehelper.time_left", "pymarl.utils.timehelper.time_str", "abs", "time.time"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.get_env_info", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.setup", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.close_env", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.run", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.insert_episode_batch", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.insert_episode_batch", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.evaluate_sequential", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.can_sample", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.can_sample", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.uni_sample", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.uni_sample", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.process_batch", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.process_batch", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.offpg_learner.OffPGLearner.train_critic", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.sample_latest", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.max_t_filled", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.process_batch", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner.train", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.print_recent_stats", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.max_t_filled", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.max_t_filled", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.run", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.timehelper.time_left", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.timehelper.time_str"], ["", "def", "run_sequential", "(", "args", ",", "logger", ")", ":", "\n", "\n", "# Init runner so we can get env info", "\n", "    ", "runner", "=", "r_REGISTRY", "[", "args", ".", "runner", "]", "(", "args", "=", "args", ",", "logger", "=", "logger", ")", "\n", "\n", "callback", "=", "cb_REGISTRY", "[", "args", ".", "callback", "]", "(", ")", "\n", "\n", "# Set up schemes and groups here", "\n", "env_info", "=", "runner", ".", "get_env_info", "(", ")", "\n", "args", ".", "n_agents", "=", "env_info", "[", "\"n_agents\"", "]", "\n", "args", ".", "n_actions", "=", "env_info", "[", "\"n_actions\"", "]", "\n", "args", ".", "state_shape", "=", "env_info", "[", "\"state_shape\"", "]", "\n", "# args.unit_type_bits = env_info[\"unit_type_bits\"]", "\n", "# args.shield_bits_ally = env_info[\"shield_bits_ally\"]", "\n", "# args.shield_bits_enemy = env_info[\"shield_bits_enemy\"]", "\n", "# args.n_enemies = env_info[\"n_enemies\"]", "\n", "\n", "# Default/Base scheme", "\n", "scheme", "=", "{", "\n", "\"state\"", ":", "{", "\"vshape\"", ":", "env_info", "[", "\"state_shape\"", "]", "}", ",", "\n", "\"obs\"", ":", "{", "\"vshape\"", ":", "env_info", "[", "\"obs_shape\"", "]", ",", "\"group\"", ":", "\"agents\"", "}", ",", "\n", "\"actions\"", ":", "{", "\"vshape\"", ":", "(", "1", ",", ")", ",", "\"group\"", ":", "\"agents\"", ",", "\"dtype\"", ":", "th", ".", "long", "}", ",", "\n", "\"avail_actions\"", ":", "{", "\"vshape\"", ":", "(", "env_info", "[", "\"n_actions\"", "]", ",", ")", ",", "\"group\"", ":", "\"agents\"", ",", "\"dtype\"", ":", "th", ".", "int", "}", ",", "\n", "\"reward\"", ":", "{", "\"vshape\"", ":", "(", "1", ",", ")", "}", ",", "\n", "\"terminated\"", ":", "{", "\"vshape\"", ":", "(", "1", ",", ")", ",", "\"dtype\"", ":", "th", ".", "uint8", "}", ",", "\n", "#\"policy\": {\"vshape\": (env_info[\"n_agents\"],)}", "\n", "}", "\n", "groups", "=", "{", "\n", "\"agents\"", ":", "args", ".", "n_agents", "\n", "}", "\n", "preprocess", "=", "{", "\n", "\"actions\"", ":", "(", "\"actions_onehot\"", ",", "[", "OneHot", "(", "out_dim", "=", "args", ".", "n_actions", ")", "]", ")", "\n", "}", "\n", "\n", "if", "hasattr", "(", "runner", ",", "'info_scheme'", ")", ":", "\n", "        ", "scheme", ".", "update", "(", "runner", ".", "info_scheme", ")", "\n", "\n", "", "buffer", "=", "ReplayBuffer", "(", "scheme", ",", "groups", ",", "args", ".", "buffer_size", ",", "env_info", "[", "\"episode_limit\"", "]", "+", "1", ",", "\n", "preprocess", "=", "preprocess", ",", "\n", "device", "=", "\"cpu\"", "if", "args", ".", "buffer_cpu_only", "else", "args", ".", "device", ")", "\n", "off_buffer", "=", "ReplayBuffer", "(", "scheme", ",", "groups", ",", "args", ".", "off_buffer_size", ",", "env_info", "[", "\"episode_limit\"", "]", "+", "1", ",", "\n", "preprocess", "=", "preprocess", ",", "\n", "device", "=", "\"cpu\"", "if", "args", ".", "buffer_cpu_only", "else", "args", ".", "device", ")", "\n", "\n", "# Setup multiagent controller here", "\n", "mac", "=", "mac_REGISTRY", "[", "args", ".", "mac", "]", "(", "buffer", ".", "scheme", ",", "groups", ",", "args", ")", "\n", "\n", "# Give runner the scheme", "\n", "runner", ".", "setup", "(", "scheme", "=", "scheme", ",", "groups", "=", "groups", ",", "preprocess", "=", "preprocess", ",", "mac", "=", "mac", ")", "\n", "\n", "# Learner", "\n", "learner", "=", "le_REGISTRY", "[", "args", ".", "learner", "]", "(", "mac", "=", "mac", ",", "scheme", "=", "buffer", ".", "scheme", ",", "logger", "=", "logger", ",", "callback", "=", "callback", ",", "args", "=", "args", ")", "\n", "\n", "if", "args", ".", "use_cuda", ":", "\n", "        ", "learner", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "checkpoint_path", "!=", "\"\"", ":", "\n", "\n", "        ", "timesteps", "=", "[", "]", "\n", "timestep_to_load", "=", "0", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "checkpoint_path", ")", ":", "\n", "            ", "logger", ".", "console_logger", ".", "info", "(", "\"Checkpoint directiory {} doesn't exist\"", ".", "format", "(", "args", ".", "checkpoint_path", ")", ")", "\n", "return", "\n", "\n", "# Go through all files in args.checkpoint_path", "\n", "", "for", "name", "in", "os", ".", "listdir", "(", "args", ".", "checkpoint_path", ")", ":", "\n", "            ", "full_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_path", ",", "name", ")", "\n", "# Check if they are dirs the names of which are numbers", "\n", "if", "os", ".", "path", ".", "isdir", "(", "full_name", ")", "and", "name", ".", "isdigit", "(", ")", ":", "\n", "                ", "timesteps", ".", "append", "(", "int", "(", "name", ")", ")", "\n", "\n", "", "", "if", "args", ".", "load_step", "==", "0", ":", "\n", "# choose the max timestep", "\n", "            ", "timestep_to_load", "=", "max", "(", "timesteps", ")", "\n", "", "else", ":", "\n", "# choose the timestep closest to load_step", "\n", "            ", "timestep_to_load", "=", "min", "(", "timesteps", ",", "key", "=", "lambda", "x", ":", "abs", "(", "x", "-", "args", ".", "load_step", ")", ")", "\n", "\n", "", "model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_path", ",", "str", "(", "timestep_to_load", ")", ")", "\n", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Loading model from {}\"", ".", "format", "(", "model_path", ")", ")", "\n", "learner", ".", "load_models", "(", "model_path", ")", "\n", "runner", ".", "t_env", "=", "timestep_to_load", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "            ", "evaluate_sequential", "(", "args", ",", "runner", ")", "\n", "return", "\n", "\n", "# start training", "\n", "", "", "episode", "=", "0", "\n", "last_test_T", "=", "-", "args", ".", "test_interval", "-", "1", "\n", "last_log_T", "=", "0", "\n", "model_save_time", "=", "0", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "last_time", "=", "start_time", "\n", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Beginning training for {} timesteps\"", ".", "format", "(", "args", ".", "t_max", ")", ")", "\n", "\n", "while", "runner", ".", "t_env", "<=", "args", ".", "t_max", ":", "\n", "\n", "# critic running log", "\n", "        ", "running_log", "=", "{", "\n", "\"critic_loss\"", ":", "[", "]", ",", "\n", "\"critic_grad_norm\"", ":", "[", "]", ",", "\n", "\"td_error_abs\"", ":", "[", "]", ",", "\n", "\"target_mean\"", ":", "[", "]", ",", "\n", "\"q_taken_mean\"", ":", "[", "]", ",", "\n", "\"q_max_mean\"", ":", "[", "]", ",", "\n", "\"q_min_mean\"", ":", "[", "]", ",", "\n", "\"q_max_var\"", ":", "[", "]", ",", "\n", "\"q_min_var\"", ":", "[", "]", "\n", "}", "\n", "\n", "# Run for a whole episode at a time", "\n", "episode_batch", "=", "runner", ".", "run", "(", "test_mode", "=", "False", ")", "\n", "buffer", ".", "insert_episode_batch", "(", "episode_batch", ")", "\n", "off_buffer", ".", "insert_episode_batch", "(", "episode_batch", ")", "\n", "\n", "\n", "\n", "if", "buffer", ".", "can_sample", "(", "args", ".", "batch_size", ")", "and", "off_buffer", ".", "can_sample", "(", "args", ".", "off_batch_size", ")", ":", "\n", "#train critic normall", "\n", "            ", "uni_episode_sample", "=", "buffer", ".", "uni_sample", "(", "args", ".", "batch_size", ")", "\n", "off_episode_sample", "=", "off_buffer", ".", "uni_sample", "(", "args", ".", "off_batch_size", ")", "\n", "max_ep_t", "=", "max", "(", "uni_episode_sample", ".", "max_t_filled", "(", ")", ",", "off_episode_sample", ".", "max_t_filled", "(", ")", ")", "\n", "uni_episode_sample", "=", "process_batch", "(", "uni_episode_sample", "[", ":", ",", ":", "max_ep_t", "]", ",", "args", ")", "\n", "off_episode_sample", "=", "process_batch", "(", "off_episode_sample", "[", ":", ",", ":", "max_ep_t", "]", ",", "args", ")", "\n", "learner", ".", "train_critic", "(", "uni_episode_sample", ",", "best_batch", "=", "off_episode_sample", ",", "log", "=", "running_log", ")", "\n", "\n", "#train actor", "\n", "episode_sample", "=", "buffer", ".", "sample_latest", "(", "args", ".", "batch_size", ")", "\n", "max_ep_t", "=", "episode_sample", ".", "max_t_filled", "(", ")", "\n", "episode_sample", "=", "process_batch", "(", "episode_sample", "[", ":", ",", ":", "max_ep_t", "]", ",", "args", ")", "\n", "learner", ".", "train", "(", "episode_sample", ",", "runner", ".", "t_env", ",", "running_log", ")", "\n", "\n", "\n", "# Execute test runs once in a while", "\n", "", "n_test_runs", "=", "max", "(", "1", ",", "args", ".", "test_nepisode", "//", "runner", ".", "batch_size", ")", "\n", "if", "(", "runner", ".", "t_env", "-", "last_test_T", ")", "/", "args", ".", "test_interval", ">=", "1.0", ":", "\n", "\n", "            ", "logger", ".", "console_logger", ".", "info", "(", "\"t_env: {} / {}\"", ".", "format", "(", "runner", ".", "t_env", ",", "args", ".", "t_max", ")", ")", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Estimated time left: {}. Time passed: {}\"", ".", "format", "(", "\n", "time_left", "(", "last_time", ",", "last_test_T", ",", "runner", ".", "t_env", ",", "args", ".", "t_max", ")", ",", "time_str", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", ")", "\n", "last_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "last_test_T", "=", "runner", ".", "t_env", "\n", "for", "_", "in", "range", "(", "n_test_runs", ")", ":", "\n", "                ", "runner", ".", "run", "(", "test_mode", "=", "True", ")", "\n", "\n", "", "", "if", "args", ".", "save_model", "and", "(", "runner", ".", "t_env", "-", "model_save_time", ">=", "args", ".", "save_model_interval", "or", "model_save_time", "==", "0", ")", ":", "\n", "            ", "model_save_time", "=", "runner", ".", "t_env", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "local_results_path", ",", "\"models\"", ",", "args", ".", "unique_token", ",", "str", "(", "runner", ".", "t_env", ")", ")", "\n", "#\"results/models/{}\".format(unique_token)", "\n", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Saving models to {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "\n", "# learner should handle saving/loading -- delegate actor save/load to mac,", "\n", "# use appropriate filenames to do critics, optimizer states", "\n", "learner", ".", "save_models", "(", "save_path", ")", "\n", "\n", "", "episode", "+=", "args", ".", "batch_size_run", "\n", "\n", "if", "(", "runner", ".", "t_env", "-", "last_log_T", ")", ">=", "args", ".", "log_interval", ":", "\n", "            ", "logger", ".", "log_stat", "(", "\"episode\"", ",", "episode", ",", "runner", ".", "t_env", ")", "\n", "logger", ".", "print_recent_stats", "(", ")", "\n", "last_log_T", "=", "runner", ".", "t_env", "\n", "\n", "", "", "runner", ".", "close_env", "(", ")", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Finished Training\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.dop_run.args_sanity_check": [[250, 264], ["_log.warning", "torch.cuda.is_available"], "function", ["None"], ["", "def", "args_sanity_check", "(", "config", ",", "_log", ")", ":", "\n", "\n", "# set CUDA flags", "\n", "# config[\"use_cuda\"] = True # Use cuda whenever possible!", "\n", "    ", "if", "config", "[", "\"use_cuda\"", "]", "and", "not", "th", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "config", "[", "\"use_cuda\"", "]", "=", "False", "\n", "_log", ".", "warning", "(", "\"CUDA flag use_cuda was switched OFF automatically because no CUDA devices are available!\"", ")", "\n", "\n", "", "if", "config", "[", "\"test_nepisode\"", "]", "<", "config", "[", "\"batch_size_run\"", "]", ":", "\n", "        ", "config", "[", "\"test_nepisode\"", "]", "=", "config", "[", "\"batch_size_run\"", "]", "\n", "", "else", ":", "\n", "        ", "config", "[", "\"test_nepisode\"", "]", "=", "(", "config", "[", "\"test_nepisode\"", "]", "//", "config", "[", "\"batch_size_run\"", "]", ")", "*", "config", "[", "\"batch_size_run\"", "]", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.dop_run.process_batch": [[266, 271], ["batch.to"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to"], ["", "def", "process_batch", "(", "batch", ",", "args", ")", ":", "\n", "\n", "    ", "if", "batch", ".", "device", "!=", "args", ".", "device", ":", "\n", "        ", "batch", ".", "to", "(", "args", ".", "device", ")", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.per_run.run": [[20, 64], ["per_run.args_sanity_check", "types.SimpleNamespace", "pymarl.utils.logging.Logger", "_log.info", "pprint.pformat", "_log.info", "per_run.run_sequential", "print", "print", "threading.enumerate", "print", "os._exit", "datetime.datetime.now().strftime", "os.path.join", "os.path.join().format", "pymarl.utils.logging.Logger.setup_tb", "pymarl.utils.logging.Logger.setup_wandb", "os.path.dirname", "print", "t.join", "print", "datetime.datetime.now", "os.path.dirname", "os.path.join", "os.path.dirname", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.args_sanity_check", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.run_sequential", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.setup_tb", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.setup_wandb"], ["def", "run", "(", "_run", ",", "_config", ",", "_log", ")", ":", "\n", "\n", "# check args sanity", "\n", "    ", "_config", "=", "args_sanity_check", "(", "_config", ",", "_log", ")", "\n", "\n", "args", "=", "SN", "(", "**", "_config", ")", "\n", "args", ".", "device", "=", "\"cuda\"", "if", "args", ".", "use_cuda", "else", "\"cpu\"", "\n", "\n", "# setup loggers", "\n", "logger", "=", "Logger", "(", "_log", ")", "\n", "\n", "_log", ".", "info", "(", "\"Experiment Parameters:\"", ")", "\n", "experiment_params", "=", "pprint", ".", "pformat", "(", "_config", ",", "\n", "indent", "=", "4", ",", "\n", "width", "=", "1", ")", "\n", "_log", ".", "info", "(", "\"\\n\\n\"", "+", "experiment_params", "+", "\"\\n\"", ")", "\n", "\n", "# configure tensorboard logger", "\n", "unique_token", "=", "\"{}__{}\"", ".", "format", "(", "args", ".", "name", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d_%H-%M-%S\"", ")", ")", "\n", "args", ".", "unique_token", "=", "unique_token", "\n", "if", "args", ".", "use_tensorboard", ":", "\n", "        ", "tb_logs_direc", "=", "os", ".", "path", ".", "join", "(", "dirname", "(", "dirname", "(", "dirname", "(", "abspath", "(", "__file__", ")", ")", ")", ")", ",", "\"results\"", ",", "\"tb_logs\"", ")", "\n", "tb_exp_direc", "=", "os", ".", "path", ".", "join", "(", "tb_logs_direc", ",", "\"{}\"", ")", ".", "format", "(", "unique_token", ")", "\n", "logger", ".", "setup_tb", "(", "tb_exp_direc", ")", "\n", "", "if", "args", ".", "wandb", ":", "\n", "        ", "logger", ".", "setup_wandb", "(", "args", ")", "\n", "\n", "# Run and train", "\n", "", "run_sequential", "(", "args", "=", "args", ",", "logger", "=", "logger", ")", "\n", "\n", "# Clean up after finishing", "\n", "print", "(", "\"Exiting Main\"", ")", "\n", "\n", "print", "(", "\"Stopping all threads\"", ")", "\n", "for", "t", "in", "threading", ".", "enumerate", "(", ")", ":", "\n", "        ", "if", "t", ".", "name", "!=", "\"MainThread\"", ":", "\n", "            ", "print", "(", "\"Thread {} is alive! Is daemon: {}\"", ".", "format", "(", "t", ".", "name", ",", "t", ".", "daemon", ")", ")", "\n", "t", ".", "join", "(", "timeout", "=", "1", ")", "\n", "print", "(", "\"Thread joined\"", ")", "\n", "\n", "", "", "print", "(", "\"Exiting script\"", ")", "\n", "\n", "# Making sure framework really exits", "\n", "os", ".", "_exit", "(", "os", ".", "EX_OK", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.per_run.evaluate_sequential": [[66, 72], ["range", "runner.close_env", "runner.run"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.close_env", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.run"], ["", "def", "evaluate_sequential", "(", "args", ",", "runner", ")", ":", "\n", "\n", "    ", "for", "_", "in", "range", "(", "args", ".", "test_nepisode", ")", ":", "\n", "        ", "runner", ".", "run", "(", "test_mode", "=", "True", ")", "\n", "\n", "", "runner", ".", "close_env", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.per_run.run_sequential": [[73, 231], ["runner.get_env_info", "getattr", "getattr", "hasattr", "pymarl.components.episode_buffer.PrioritizedReplayBuffer", "runner.setup", "time.time", "logger.console_logger.info", "runner.close_env", "logger.console_logger.info", "per_run.get_agent_own_state_size", "scheme.update", "learner.cuda", "os.listdir", "os.path.join", "logger.console_logger.info", "learner.load_models", "pymarl.components.episode_buffer.PrioritizedReplayBuffer.can_sample", "max", "os.path.isdir", "logger.console_logger.info", "os.path.join", "max", "min", "str", "per_run.evaluate_sequential", "torch.no_grad", "runner.run", "pymarl.components.episode_buffer.PrioritizedReplayBuffer.insert_episode_batch", "pymarl.components.episode_buffer.PrioritizedReplayBuffer.sample", "episode_sample.max_t_filled", "learner.train", "pymarl.components.episode_buffer.PrioritizedReplayBuffer.update_priorities", "logger.console_logger.info", "logger.console_logger.info", "time.time", "range", "os.path.join", "os.makedirs", "logger.console_logger.info", "learner.save_models", "logger.log_stat", "logger.print_recent_stats", "pymarl.components.transforms.OneHot", "os.path.isdir", "name.isdigit", "timesteps.append", "episode_sample.to", "info[].flatten", "new_priorities.numpy().tolist", "runner.run", "str", "int", "pymarl.utils.timehelper.time_left", "pymarl.utils.timehelper.time_str", "abs", "new_priorities.numpy", "time.time"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.get_env_info", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.setup", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.close_env", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.run.get_agent_own_state_size", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.can_sample", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.evaluate_sequential", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.run", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.insert_episode_batch", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.max_t_filled", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner.train", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.update_priorities", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.print_recent_stats", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.run", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.timehelper.time_left", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.timehelper.time_str"], ["", "def", "run_sequential", "(", "args", ",", "logger", ")", ":", "\n", "\n", "# Init runner so we can get env info", "\n", "    ", "runner", "=", "r_REGISTRY", "[", "args", ".", "runner", "]", "(", "args", "=", "args", ",", "logger", "=", "logger", ")", "\n", "\n", "callback", "=", "cb_REGISTRY", "[", "args", ".", "callback", "]", "(", ")", "\n", "\n", "# Set up schemes and groups here", "\n", "env_info", "=", "runner", ".", "get_env_info", "(", ")", "\n", "args", ".", "n_agents", "=", "env_info", "[", "\"n_agents\"", "]", "\n", "args", ".", "n_actions", "=", "env_info", "[", "\"n_actions\"", "]", "\n", "args", ".", "state_shape", "=", "env_info", "[", "\"state_shape\"", "]", "\n", "args", ".", "accumulated_episodes", "=", "getattr", "(", "args", ",", "\"accumulated_episodes\"", ",", "None", ")", "\n", "\n", "if", "getattr", "(", "args", ",", "'agent_own_state_size'", ",", "False", ")", ":", "\n", "        ", "args", ".", "agent_own_state_size", "=", "get_agent_own_state_size", "(", "args", ".", "env_args", ")", "\n", "\n", "# Default/Base scheme", "\n", "", "scheme", "=", "{", "\n", "\"state\"", ":", "{", "\"vshape\"", ":", "env_info", "[", "\"state_shape\"", "]", "}", ",", "\n", "\"obs\"", ":", "{", "\"vshape\"", ":", "env_info", "[", "\"obs_shape\"", "]", ",", "\"group\"", ":", "\"agents\"", "}", ",", "\n", "\"actions\"", ":", "{", "\"vshape\"", ":", "(", "1", ",", ")", ",", "\"group\"", ":", "\"agents\"", ",", "\"dtype\"", ":", "th", ".", "long", "}", ",", "\n", "\"avail_actions\"", ":", "{", "\"vshape\"", ":", "(", "env_info", "[", "\"n_actions\"", "]", ",", ")", ",", "\"group\"", ":", "\"agents\"", ",", "\"dtype\"", ":", "th", ".", "int", "}", ",", "\n", "\"probs\"", ":", "{", "\"vshape\"", ":", "(", "env_info", "[", "\"n_actions\"", "]", ",", ")", ",", "\"group\"", ":", "\"agents\"", ",", "\"dtype\"", ":", "th", ".", "float", "}", ",", "\n", "\"reward\"", ":", "{", "\"vshape\"", ":", "(", "1", ",", ")", "}", ",", "\n", "\"terminated\"", ":", "{", "\"vshape\"", ":", "(", "1", ",", ")", ",", "\"dtype\"", ":", "th", ".", "uint8", "}", ",", "\n", "}", "\n", "groups", "=", "{", "\n", "\"agents\"", ":", "args", ".", "n_agents", "\n", "}", "\n", "preprocess", "=", "{", "\n", "\"actions\"", ":", "(", "\"actions_onehot\"", ",", "[", "OneHot", "(", "out_dim", "=", "args", ".", "n_actions", ")", "]", ")", "\n", "}", "\n", "\n", "if", "hasattr", "(", "runner", ",", "'info_scheme'", ")", ":", "\n", "        ", "scheme", ".", "update", "(", "runner", ".", "info_scheme", ")", "\n", "\n", "", "buffer", "=", "PrioritizedReplayBuffer", "(", "scheme", ",", "groups", ",", "args", ".", "buffer_size", ",", "env_info", "[", "\"episode_limit\"", "]", "+", "1", ",", "\n", "args", ".", "per_alpha", ",", "args", ".", "per_beta", ",", "args", ".", "t_max", ",", "\n", "preprocess", "=", "preprocess", ",", "\n", "device", "=", "\"cpu\"", "if", "args", ".", "buffer_cpu_only", "else", "args", ".", "device", ")", "\n", "# Setup multiagent controller here", "\n", "mac", "=", "mac_REGISTRY", "[", "args", ".", "mac", "]", "(", "buffer", ".", "scheme", ",", "groups", ",", "args", ")", "\n", "\n", "# Give runner the scheme", "\n", "runner", ".", "setup", "(", "scheme", "=", "scheme", ",", "groups", "=", "groups", ",", "preprocess", "=", "preprocess", ",", "mac", "=", "mac", ")", "\n", "\n", "# Learner", "\n", "learner", "=", "le_REGISTRY", "[", "args", ".", "learner", "]", "(", "mac", "=", "mac", ",", "scheme", "=", "buffer", ".", "scheme", ",", "logger", "=", "logger", ",", "callback", "=", "callback", ",", "args", "=", "args", ")", "\n", "\n", "if", "args", ".", "use_cuda", ":", "\n", "        ", "learner", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "checkpoint_path", "!=", "\"\"", ":", "\n", "\n", "        ", "timesteps", "=", "[", "]", "\n", "timestep_to_load", "=", "0", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "checkpoint_path", ")", ":", "\n", "            ", "logger", ".", "console_logger", ".", "info", "(", "\"Checkpoint directiory {} doesn't exist\"", ".", "format", "(", "args", ".", "checkpoint_path", ")", ")", "\n", "return", "\n", "\n", "# Go through all files in args.checkpoint_path", "\n", "", "for", "name", "in", "os", ".", "listdir", "(", "args", ".", "checkpoint_path", ")", ":", "\n", "            ", "full_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_path", ",", "name", ")", "\n", "# Check if they are dirs the names of which are numbers", "\n", "if", "os", ".", "path", ".", "isdir", "(", "full_name", ")", "and", "name", ".", "isdigit", "(", ")", ":", "\n", "                ", "timesteps", ".", "append", "(", "int", "(", "name", ")", ")", "\n", "\n", "", "", "if", "args", ".", "load_step", "==", "0", ":", "\n", "# choose the max timestep", "\n", "            ", "timestep_to_load", "=", "max", "(", "timesteps", ")", "\n", "", "else", ":", "\n", "# choose the timestep closest to load_step", "\n", "            ", "timestep_to_load", "=", "min", "(", "timesteps", ",", "key", "=", "lambda", "x", ":", "abs", "(", "x", "-", "args", ".", "load_step", ")", ")", "\n", "\n", "", "model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_path", ",", "str", "(", "timestep_to_load", ")", ")", "\n", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Loading model from {}\"", ".", "format", "(", "model_path", ")", ")", "\n", "learner", ".", "load_models", "(", "model_path", ")", "\n", "runner", ".", "t_env", "=", "timestep_to_load", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "            ", "evaluate_sequential", "(", "args", ",", "runner", ")", "\n", "return", "\n", "\n", "# start training", "\n", "", "", "episode", "=", "0", "\n", "last_test_T", "=", "-", "args", ".", "test_interval", "-", "1", "\n", "last_log_T", "=", "0", "\n", "model_save_time", "=", "0", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "last_time", "=", "start_time", "\n", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Beginning training for {} timesteps\"", ".", "format", "(", "args", ".", "t_max", ")", ")", "\n", "\n", "while", "runner", ".", "t_env", "<=", "args", ".", "t_max", ":", "\n", "\n", "# Run for a whole episode at a time", "\n", "        ", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "            ", "episode_batch", "=", "runner", ".", "run", "(", "test_mode", "=", "False", ")", "\n", "buffer", ".", "insert_episode_batch", "(", "episode_batch", ")", "\n", "\n", "", "if", "buffer", ".", "can_sample", "(", "args", ".", "batch_size", ")", ":", "\n", "            ", "next_episode", "=", "episode", "+", "args", ".", "batch_size_run", "\n", "if", "args", ".", "accumulated_episodes", "and", "next_episode", "%", "args", ".", "accumulated_episodes", "!=", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "episode_sample", ",", "idx", ",", "weights", "=", "buffer", ".", "sample", "(", "args", ".", "batch_size", ",", "runner", ".", "t_env", ")", "\n", "\n", "# Truncate batch to only filled timesteps", "\n", "max_ep_t", "=", "episode_sample", ".", "max_t_filled", "(", ")", "\n", "episode_sample", "=", "episode_sample", "[", ":", ",", ":", "max_ep_t", "]", "\n", "\n", "if", "episode_sample", ".", "device", "!=", "args", ".", "device", ":", "\n", "                ", "episode_sample", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "", "info", "=", "learner", ".", "train", "(", "episode_sample", ",", "runner", ".", "t_env", ",", "episode", ",", "weights", ")", "\n", "del", "episode_sample", "\n", "\n", "# update priorities", "\n", "new_priorities", "=", "info", "[", "\"td_errors_abs\"", "]", ".", "flatten", "(", ")", "+", "1e-6", "\n", "buffer", ".", "update_priorities", "(", "idx", ",", "new_priorities", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "# Execute test runs once in a while", "\n", "", "n_test_runs", "=", "max", "(", "1", ",", "args", ".", "test_nepisode", "//", "runner", ".", "batch_size", ")", "\n", "if", "(", "runner", ".", "t_env", "-", "last_test_T", ")", "/", "args", ".", "test_interval", ">=", "1.0", ":", "\n", "\n", "            ", "logger", ".", "console_logger", ".", "info", "(", "\"t_env: {} / {}\"", ".", "format", "(", "runner", ".", "t_env", ",", "args", ".", "t_max", ")", ")", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Estimated time left: {}. Time passed: {}\"", ".", "format", "(", "\n", "time_left", "(", "last_time", ",", "last_test_T", ",", "runner", ".", "t_env", ",", "args", ".", "t_max", ")", ",", "time_str", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", ")", "\n", "last_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "last_test_T", "=", "runner", ".", "t_env", "\n", "for", "_", "in", "range", "(", "n_test_runs", ")", ":", "\n", "                ", "runner", ".", "run", "(", "test_mode", "=", "True", ")", "\n", "\n", "", "", "if", "args", ".", "save_model", "and", "(", "runner", ".", "t_env", "-", "model_save_time", ">=", "args", ".", "save_model_interval", "or", "model_save_time", "==", "0", ")", ":", "\n", "            ", "model_save_time", "=", "runner", ".", "t_env", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "local_results_path", ",", "\"models\"", ",", "args", ".", "unique_token", ",", "str", "(", "runner", ".", "t_env", ")", ")", "\n", "#\"results/models/{}\".format(unique_token)", "\n", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Saving models to {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "\n", "# learner should handle saving/loading -- delegate actor save/load to mac,", "\n", "# use appropriate filenames to do critics, optimizer states", "\n", "learner", ".", "save_models", "(", "save_path", ")", "\n", "\n", "", "episode", "+=", "args", ".", "batch_size_run", "\n", "\n", "if", "(", "runner", ".", "t_env", "-", "last_log_T", ")", ">=", "args", ".", "log_interval", ":", "\n", "            ", "logger", ".", "log_stat", "(", "\"episode\"", ",", "episode", ",", "runner", ".", "t_env", ")", "\n", "logger", ".", "print_recent_stats", "(", ")", "\n", "last_log_T", "=", "runner", ".", "t_env", "\n", "\n", "", "", "runner", ".", "close_env", "(", ")", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Finished Training\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.per_run.args_sanity_check": [[233, 247], ["_log.warning", "torch.cuda.is_available"], "function", ["None"], ["", "def", "args_sanity_check", "(", "config", ",", "_log", ")", ":", "\n", "\n", "# set CUDA flags", "\n", "# config[\"use_cuda\"] = True # Use cuda whenever possible!", "\n", "    ", "if", "config", "[", "\"use_cuda\"", "]", "and", "not", "th", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "config", "[", "\"use_cuda\"", "]", "=", "False", "\n", "_log", ".", "warning", "(", "\"CUDA flag use_cuda was switched OFF automatically because no CUDA devices are available!\"", ")", "\n", "\n", "", "if", "config", "[", "\"test_nepisode\"", "]", "<", "config", "[", "\"batch_size_run\"", "]", ":", "\n", "        ", "config", "[", "\"test_nepisode\"", "]", "=", "config", "[", "\"batch_size_run\"", "]", "\n", "", "else", ":", "\n", "        ", "config", "[", "\"test_nepisode\"", "]", "=", "(", "config", "[", "\"test_nepisode\"", "]", "//", "config", "[", "\"batch_size_run\"", "]", ")", "*", "config", "[", "\"batch_size_run\"", "]", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.per_run.get_agent_own_state_size": [[248, 253], ["StarCraft2Env"], "function", ["None"], ["", "def", "get_agent_own_state_size", "(", "env_args", ")", ":", "\n", "    ", "from", "smac", ".", "env", "import", "StarCraft2Env", "\n", "sc_env", "=", "StarCraft2Env", "(", "**", "env_args", ")", "\n", "# qatten parameter setting (only use in qatten)", "\n", "return", "4", "+", "sc_env", ".", "shield_bits_ally", "+", "sc_env", ".", "unit_type_bits", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.run.run": [[20, 64], ["run.args_sanity_check", "types.SimpleNamespace", "pymarl.utils.logging.Logger", "_log.info", "pprint.pformat", "_log.info", "run.run_sequential", "print", "print", "threading.enumerate", "print", "os._exit", "datetime.datetime.now().strftime", "os.path.join", "os.path.join().format", "pymarl.utils.logging.Logger.setup_tb", "pymarl.utils.logging.Logger.setup_wandb", "os.path.dirname", "print", "t.join", "print", "datetime.datetime.now", "os.path.dirname", "os.path.join", "os.path.dirname", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.args_sanity_check", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.run_sequential", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.setup_tb", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.setup_wandb"], ["def", "run", "(", "_run", ",", "_config", ",", "_log", ")", ":", "\n", "\n", "# check args sanity", "\n", "    ", "_config", "=", "args_sanity_check", "(", "_config", ",", "_log", ")", "\n", "\n", "args", "=", "SN", "(", "**", "_config", ")", "\n", "args", ".", "device", "=", "\"cuda\"", "if", "args", ".", "use_cuda", "else", "\"cpu\"", "\n", "\n", "# setup loggers", "\n", "logger", "=", "Logger", "(", "_log", ")", "\n", "\n", "_log", ".", "info", "(", "\"Experiment Parameters:\"", ")", "\n", "experiment_params", "=", "pprint", ".", "pformat", "(", "_config", ",", "\n", "indent", "=", "4", ",", "\n", "width", "=", "1", ")", "\n", "_log", ".", "info", "(", "\"\\n\\n\"", "+", "experiment_params", "+", "\"\\n\"", ")", "\n", "\n", "# configure tensorboard logger", "\n", "unique_token", "=", "\"{}__{}\"", ".", "format", "(", "args", ".", "name", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d_%H-%M-%S\"", ")", ")", "\n", "args", ".", "unique_token", "=", "unique_token", "\n", "if", "args", ".", "use_tensorboard", ":", "\n", "        ", "tb_logs_direc", "=", "os", ".", "path", ".", "join", "(", "dirname", "(", "dirname", "(", "dirname", "(", "abspath", "(", "__file__", ")", ")", ")", ")", ",", "\"results\"", ",", "\"tb_logs\"", ")", "\n", "tb_exp_direc", "=", "os", ".", "path", ".", "join", "(", "tb_logs_direc", ",", "\"{}\"", ")", ".", "format", "(", "unique_token", ")", "\n", "logger", ".", "setup_tb", "(", "tb_exp_direc", ")", "\n", "", "if", "args", ".", "wandb", ":", "\n", "        ", "logger", ".", "setup_wandb", "(", "args", ")", "\n", "\n", "# Run and train", "\n", "", "run_sequential", "(", "args", "=", "args", ",", "logger", "=", "logger", ")", "\n", "\n", "# Clean up after finishing", "\n", "print", "(", "\"Exiting Main\"", ")", "\n", "\n", "print", "(", "\"Stopping all threads\"", ")", "\n", "for", "t", "in", "threading", ".", "enumerate", "(", ")", ":", "\n", "        ", "if", "t", ".", "name", "!=", "\"MainThread\"", ":", "\n", "            ", "print", "(", "\"Thread {} is alive! Is daemon: {}\"", ".", "format", "(", "t", ".", "name", ",", "t", ".", "daemon", ")", ")", "\n", "t", ".", "join", "(", "timeout", "=", "1", ")", "\n", "print", "(", "\"Thread joined\"", ")", "\n", "\n", "", "", "print", "(", "\"Exiting script\"", ")", "\n", "\n", "# Making sure framework really exits", "\n", "os", ".", "_exit", "(", "os", ".", "EX_OK", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.run.evaluate_sequential": [[66, 72], ["range", "runner.close_env", "runner.run"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.close_env", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.run"], ["", "def", "evaluate_sequential", "(", "args", ",", "runner", ")", ":", "\n", "\n", "    ", "for", "_", "in", "range", "(", "args", ".", "test_nepisode", ")", ":", "\n", "        ", "runner", ".", "run", "(", "test_mode", "=", "True", ")", "\n", "\n", "", "runner", ".", "close_env", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.run.run_sequential": [[73, 226], ["runner.get_env_info", "getattr", "getattr", "hasattr", "pymarl.components.episode_buffer.ReplayBuffer", "runner.setup", "time.time", "logger.console_logger.info", "runner.close_env", "logger.console_logger.info", "run.get_agent_own_state_size", "scheme.update", "learner.cuda", "os.listdir", "os.path.join", "logger.console_logger.info", "learner.load_models", "pymarl.components.episode_buffer.ReplayBuffer.can_sample", "max", "os.path.isdir", "logger.console_logger.info", "os.path.join", "max", "min", "str", "run.evaluate_sequential", "torch.no_grad", "runner.run", "pymarl.components.episode_buffer.ReplayBuffer.insert_episode_batch", "pymarl.components.episode_buffer.ReplayBuffer.sample", "buffer.sample.max_t_filled", "learner.train", "logger.console_logger.info", "logger.console_logger.info", "time.time", "range", "os.path.join", "os.makedirs", "logger.console_logger.info", "learner.save_models", "logger.log_stat", "logger.print_recent_stats", "pymarl.components.transforms.OneHot", "os.path.isdir", "name.isdigit", "timesteps.append", "buffer.sample.to", "runner.run", "str", "int", "pymarl.utils.timehelper.time_left", "pymarl.utils.timehelper.time_str", "abs", "time.time"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.get_env_info", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.setup", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.close_env", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.run.get_agent_own_state_size", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.can_sample", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.evaluate_sequential", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.run", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.insert_episode_batch", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.max_t_filled", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner.train", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.print_recent_stats", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.run", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.timehelper.time_left", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.timehelper.time_str"], ["", "def", "run_sequential", "(", "args", ",", "logger", ")", ":", "\n", "\n", "# Init runner so we can get env info", "\n", "    ", "runner", "=", "r_REGISTRY", "[", "args", ".", "runner", "]", "(", "args", "=", "args", ",", "logger", "=", "logger", ")", "\n", "\n", "callback", "=", "cb_REGISTRY", "[", "args", ".", "callback", "]", "(", ")", "\n", "\n", "# Set up schemes and groups here", "\n", "env_info", "=", "runner", ".", "get_env_info", "(", ")", "\n", "args", ".", "n_agents", "=", "env_info", "[", "\"n_agents\"", "]", "\n", "args", ".", "n_actions", "=", "env_info", "[", "\"n_actions\"", "]", "\n", "args", ".", "state_shape", "=", "env_info", "[", "\"state_shape\"", "]", "\n", "args", ".", "accumulated_episodes", "=", "getattr", "(", "args", ",", "\"accumulated_episodes\"", ",", "None", ")", "\n", "\n", "if", "getattr", "(", "args", ",", "'agent_own_state_size'", ",", "False", ")", ":", "\n", "        ", "args", ".", "agent_own_state_size", "=", "get_agent_own_state_size", "(", "args", ".", "env_args", ")", "\n", "\n", "# Default/Base scheme", "\n", "", "scheme", "=", "{", "\n", "\"state\"", ":", "{", "\"vshape\"", ":", "env_info", "[", "\"state_shape\"", "]", "}", ",", "\n", "\"obs\"", ":", "{", "\"vshape\"", ":", "env_info", "[", "\"obs_shape\"", "]", ",", "\"group\"", ":", "\"agents\"", "}", ",", "\n", "\"actions\"", ":", "{", "\"vshape\"", ":", "(", "1", ",", ")", ",", "\"group\"", ":", "\"agents\"", ",", "\"dtype\"", ":", "th", ".", "long", "}", ",", "\n", "\"avail_actions\"", ":", "{", "\"vshape\"", ":", "(", "env_info", "[", "\"n_actions\"", "]", ",", ")", ",", "\"group\"", ":", "\"agents\"", ",", "\"dtype\"", ":", "th", ".", "int", "}", ",", "\n", "\"probs\"", ":", "{", "\"vshape\"", ":", "(", "env_info", "[", "\"n_actions\"", "]", ",", ")", ",", "\"group\"", ":", "\"agents\"", ",", "\"dtype\"", ":", "th", ".", "float", "}", ",", "\n", "\"reward\"", ":", "{", "\"vshape\"", ":", "(", "1", ",", ")", "}", ",", "\n", "\"terminated\"", ":", "{", "\"vshape\"", ":", "(", "1", ",", ")", ",", "\"dtype\"", ":", "th", ".", "uint8", "}", ",", "\n", "}", "\n", "groups", "=", "{", "\n", "\"agents\"", ":", "args", ".", "n_agents", "\n", "}", "\n", "preprocess", "=", "{", "\n", "\"actions\"", ":", "(", "\"actions_onehot\"", ",", "[", "OneHot", "(", "out_dim", "=", "args", ".", "n_actions", ")", "]", ")", "\n", "}", "\n", "\n", "if", "hasattr", "(", "runner", ",", "'info_scheme'", ")", ":", "\n", "        ", "scheme", ".", "update", "(", "runner", ".", "info_scheme", ")", "\n", "\n", "", "buffer", "=", "ReplayBuffer", "(", "scheme", ",", "groups", ",", "args", ".", "buffer_size", ",", "env_info", "[", "\"episode_limit\"", "]", "+", "1", ",", "\n", "preprocess", "=", "preprocess", ",", "\n", "device", "=", "\"cpu\"", "if", "args", ".", "buffer_cpu_only", "else", "args", ".", "device", ")", "\n", "# Setup multiagent controller here", "\n", "mac", "=", "mac_REGISTRY", "[", "args", ".", "mac", "]", "(", "buffer", ".", "scheme", ",", "groups", ",", "args", ")", "\n", "\n", "# Give runner the scheme", "\n", "runner", ".", "setup", "(", "scheme", "=", "scheme", ",", "groups", "=", "groups", ",", "preprocess", "=", "preprocess", ",", "mac", "=", "mac", ")", "\n", "\n", "# Learner", "\n", "learner", "=", "le_REGISTRY", "[", "args", ".", "learner", "]", "(", "mac", "=", "mac", ",", "scheme", "=", "buffer", ".", "scheme", ",", "logger", "=", "logger", ",", "callback", "=", "callback", ",", "args", "=", "args", ")", "\n", "\n", "if", "args", ".", "use_cuda", ":", "\n", "        ", "learner", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "checkpoint_path", "!=", "\"\"", ":", "\n", "\n", "        ", "timesteps", "=", "[", "]", "\n", "timestep_to_load", "=", "0", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "checkpoint_path", ")", ":", "\n", "            ", "logger", ".", "console_logger", ".", "info", "(", "\"Checkpoint directiory {} doesn't exist\"", ".", "format", "(", "args", ".", "checkpoint_path", ")", ")", "\n", "return", "\n", "\n", "# Go through all files in args.checkpoint_path", "\n", "", "for", "name", "in", "os", ".", "listdir", "(", "args", ".", "checkpoint_path", ")", ":", "\n", "            ", "full_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_path", ",", "name", ")", "\n", "# Check if they are dirs the names of which are numbers", "\n", "if", "os", ".", "path", ".", "isdir", "(", "full_name", ")", "and", "name", ".", "isdigit", "(", ")", ":", "\n", "                ", "timesteps", ".", "append", "(", "int", "(", "name", ")", ")", "\n", "\n", "", "", "if", "args", ".", "load_step", "==", "0", ":", "\n", "# choose the max timestep", "\n", "            ", "timestep_to_load", "=", "max", "(", "timesteps", ")", "\n", "", "else", ":", "\n", "# choose the timestep closest to load_step", "\n", "            ", "timestep_to_load", "=", "min", "(", "timesteps", ",", "key", "=", "lambda", "x", ":", "abs", "(", "x", "-", "args", ".", "load_step", ")", ")", "\n", "\n", "", "model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_path", ",", "str", "(", "timestep_to_load", ")", ")", "\n", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Loading model from {}\"", ".", "format", "(", "model_path", ")", ")", "\n", "learner", ".", "load_models", "(", "model_path", ")", "\n", "runner", ".", "t_env", "=", "timestep_to_load", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "            ", "evaluate_sequential", "(", "args", ",", "runner", ")", "\n", "return", "\n", "\n", "# start training", "\n", "", "", "episode", "=", "0", "\n", "last_test_T", "=", "-", "args", ".", "test_interval", "-", "1", "\n", "last_log_T", "=", "0", "\n", "model_save_time", "=", "0", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "last_time", "=", "start_time", "\n", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Beginning training for {} timesteps\"", ".", "format", "(", "args", ".", "t_max", ")", ")", "\n", "\n", "while", "runner", ".", "t_env", "<=", "args", ".", "t_max", ":", "\n", "\n", "# Run for a whole episode at a time", "\n", "\n", "        ", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "            ", "episode_batch", "=", "runner", ".", "run", "(", "test_mode", "=", "False", ")", "\n", "buffer", ".", "insert_episode_batch", "(", "episode_batch", ")", "\n", "\n", "", "if", "buffer", ".", "can_sample", "(", "args", ".", "batch_size", ")", ":", "\n", "            ", "next_episode", "=", "episode", "+", "args", ".", "batch_size_run", "\n", "if", "args", ".", "accumulated_episodes", "and", "next_episode", "%", "args", ".", "accumulated_episodes", "!=", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "episode_sample", "=", "buffer", ".", "sample", "(", "args", ".", "batch_size", ")", "\n", "\n", "# Truncate batch to only filled timesteps", "\n", "max_ep_t", "=", "episode_sample", ".", "max_t_filled", "(", ")", "\n", "episode_sample", "=", "episode_sample", "[", ":", ",", ":", "max_ep_t", "]", "\n", "\n", "if", "episode_sample", ".", "device", "!=", "args", ".", "device", ":", "\n", "                ", "episode_sample", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "", "learner", ".", "train", "(", "episode_sample", ",", "runner", ".", "t_env", ",", "episode", ")", "\n", "del", "episode_sample", "\n", "\n", "# Execute test runs once in a while", "\n", "", "n_test_runs", "=", "max", "(", "1", ",", "args", ".", "test_nepisode", "//", "runner", ".", "batch_size", ")", "\n", "if", "(", "runner", ".", "t_env", "-", "last_test_T", ")", "/", "args", ".", "test_interval", ">=", "1.0", ":", "\n", "            ", "logger", ".", "console_logger", ".", "info", "(", "\"t_env: {} / {}\"", ".", "format", "(", "runner", ".", "t_env", ",", "args", ".", "t_max", ")", ")", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Estimated time left: {}. Time passed: {}\"", ".", "format", "(", "\n", "time_left", "(", "last_time", ",", "last_test_T", ",", "runner", ".", "t_env", ",", "args", ".", "t_max", ")", ",", "time_str", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", ")", "\n", "last_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "last_test_T", "=", "runner", ".", "t_env", "\n", "for", "_", "in", "range", "(", "n_test_runs", ")", ":", "\n", "                ", "runner", ".", "run", "(", "test_mode", "=", "True", ")", "\n", "\n", "", "", "if", "args", ".", "save_model", "and", "(", "runner", ".", "t_env", "-", "model_save_time", ">=", "args", ".", "save_model_interval", "or", "model_save_time", "==", "0", ")", ":", "\n", "            ", "model_save_time", "=", "runner", ".", "t_env", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "local_results_path", ",", "\"models\"", ",", "args", ".", "unique_token", ",", "str", "(", "runner", ".", "t_env", ")", ")", "\n", "#\"results/models/{}\".format(unique_token)", "\n", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Saving models to {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "\n", "# learner should handle saving/loading -- delegate actor save/load to mac,", "\n", "# use appropriate filenames to do critics, optimizer states", "\n", "learner", ".", "save_models", "(", "save_path", ")", "\n", "\n", "", "episode", "+=", "args", ".", "batch_size_run", "\n", "\n", "if", "(", "runner", ".", "t_env", "-", "last_log_T", ")", ">=", "args", ".", "log_interval", ":", "\n", "            ", "logger", ".", "log_stat", "(", "\"episode\"", ",", "episode", ",", "runner", ".", "t_env", ")", "\n", "logger", ".", "print_recent_stats", "(", ")", "\n", "last_log_T", "=", "runner", ".", "t_env", "\n", "\n", "", "", "runner", ".", "close_env", "(", ")", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Finished Training\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.run.args_sanity_check": [[228, 242], ["_log.warning", "torch.cuda.is_available"], "function", ["None"], ["", "def", "args_sanity_check", "(", "config", ",", "_log", ")", ":", "\n", "\n", "# set CUDA flags", "\n", "# config[\"use_cuda\"] = True # Use cuda whenever possible!", "\n", "    ", "if", "config", "[", "\"use_cuda\"", "]", "and", "not", "th", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "config", "[", "\"use_cuda\"", "]", "=", "False", "\n", "_log", ".", "warning", "(", "\"CUDA flag use_cuda was switched OFF automatically because no CUDA devices are available!\"", ")", "\n", "\n", "", "if", "config", "[", "\"test_nepisode\"", "]", "<", "config", "[", "\"batch_size_run\"", "]", ":", "\n", "        ", "config", "[", "\"test_nepisode\"", "]", "=", "config", "[", "\"batch_size_run\"", "]", "\n", "", "else", ":", "\n", "        ", "config", "[", "\"test_nepisode\"", "]", "=", "(", "config", "[", "\"test_nepisode\"", "]", "//", "config", "[", "\"batch_size_run\"", "]", ")", "*", "config", "[", "\"batch_size_run\"", "]", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.run.get_agent_own_state_size": [[244, 249], ["StarCraft2Env"], "function", ["None"], ["", "def", "get_agent_own_state_size", "(", "env_args", ")", ":", "\n", "    ", "from", "smac", ".", "env", "import", "StarCraft2Env", "\n", "sc_env", "=", "StarCraft2Env", "(", "**", "env_args", ")", "\n", "# qatten parameter setting (only use in qatten)", "\n", "return", "4", "+", "sc_env", ".", "shield_bits_ally", "+", "sc_env", ".", "unit_type_bits", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.run": [[21, 68], ["on_off_run.args_sanity_check", "types.SimpleNamespace", "pymarl.utils.logging.Logger", "_log.info", "pprint.pformat", "_log.info", "pymarl.utils.logging.Logger.setup_sacred", "on_off_run.run_sequential", "print", "print", "threading.enumerate", "print", "os._exit", "datetime.datetime.now().strftime", "os.path.join", "os.path.join().format", "pymarl.utils.logging.Logger.setup_tb", "pymarl.utils.logging.Logger.setup_wandb", "os.path.dirname", "print", "t.join", "print", "datetime.datetime.now", "os.path.dirname", "os.path.join", "os.path.dirname", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.args_sanity_check", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.run_sequential", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.setup_tb", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.setup_wandb"], ["def", "run", "(", "_run", ",", "_config", ",", "_log", ")", ":", "\n", "\n", "# check args sanity", "\n", "    ", "_config", "=", "args_sanity_check", "(", "_config", ",", "_log", ")", "\n", "\n", "args", "=", "SN", "(", "**", "_config", ")", "\n", "args", ".", "device", "=", "\"cuda\"", "if", "args", ".", "use_cuda", "else", "\"cpu\"", "\n", "\n", "# setup loggers", "\n", "logger", "=", "Logger", "(", "_log", ")", "\n", "\n", "_log", ".", "info", "(", "\"Experiment Parameters:\"", ")", "\n", "experiment_params", "=", "pprint", ".", "pformat", "(", "_config", ",", "\n", "indent", "=", "4", ",", "\n", "width", "=", "1", ")", "\n", "_log", ".", "info", "(", "\"\\n\\n\"", "+", "experiment_params", "+", "\"\\n\"", ")", "\n", "\n", "# configure tensorboard logger", "\n", "unique_token", "=", "\"{}__{}\"", ".", "format", "(", "args", ".", "name", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d_%H-%M-%S\"", ")", ")", "\n", "args", ".", "unique_token", "=", "unique_token", "\n", "if", "args", ".", "use_tensorboard", ":", "\n", "        ", "tb_logs_direc", "=", "os", ".", "path", ".", "join", "(", "dirname", "(", "dirname", "(", "dirname", "(", "abspath", "(", "__file__", ")", ")", ")", ")", ",", "\"results\"", ",", "\"tb_logs\"", ")", "\n", "tb_exp_direc", "=", "os", ".", "path", ".", "join", "(", "tb_logs_direc", ",", "\"{}\"", ")", ".", "format", "(", "unique_token", ")", "\n", "logger", ".", "setup_tb", "(", "tb_exp_direc", ")", "\n", "", "if", "args", ".", "wandb", ":", "\n", "        ", "logger", ".", "setup_wandb", "(", "args", ")", "\n", "\n", "# sacred is on by default", "\n", "", "logger", ".", "setup_sacred", "(", "_run", ")", "\n", "\n", "# Run and train", "\n", "run_sequential", "(", "args", "=", "args", ",", "logger", "=", "logger", ")", "\n", "\n", "# Clean up after finishing", "\n", "print", "(", "\"Exiting Main\"", ")", "\n", "\n", "print", "(", "\"Stopping all threads\"", ")", "\n", "for", "t", "in", "threading", ".", "enumerate", "(", ")", ":", "\n", "        ", "if", "t", ".", "name", "!=", "\"MainThread\"", ":", "\n", "            ", "print", "(", "\"Thread {} is alive! Is daemon: {}\"", ".", "format", "(", "t", ".", "name", ",", "t", ".", "daemon", ")", ")", "\n", "t", ".", "join", "(", "timeout", "=", "1", ")", "\n", "print", "(", "\"Thread joined\"", ")", "\n", "\n", "", "", "print", "(", "\"Exiting script\"", ")", "\n", "\n", "# Making sure framework really exits", "\n", "os", ".", "_exit", "(", "os", ".", "EX_OK", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.evaluate_sequential": [[70, 76], ["range", "runner.close_env", "runner.run"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.close_env", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.run"], ["", "def", "evaluate_sequential", "(", "args", ",", "runner", ")", ":", "\n", "\n", "    ", "for", "_", "in", "range", "(", "args", ".", "test_nepisode", ")", ":", "\n", "        ", "runner", ".", "run", "(", "test_mode", "=", "True", ")", "\n", "\n", "", "runner", ".", "close_env", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.run_sequential": [[77, 233], ["runner.get_env_info", "hasattr", "pymarl.components.episode_buffer.ReplayBuffer", "pymarl.components.episode_buffer.ReplayBuffer", "runner.setup", "time.time", "logger.console_logger.info", "runner.close_env", "logger.console_logger.info", "scheme.update", "learner.cuda", "os.listdir", "os.path.join", "logger.console_logger.info", "learner.load_models", "runner.run", "pymarl.components.episode_buffer.ReplayBuffer.insert_episode_batch", "pymarl.components.episode_buffer.ReplayBuffer.insert_episode_batch", "pymarl.components.episode_buffer.ReplayBuffer.can_sample", "pymarl.components.episode_buffer.ReplayBuffer.can_sample", "max", "os.path.isdir", "logger.console_logger.info", "os.path.join", "max", "min", "str", "on_off_run.evaluate_sequential", "pymarl.components.episode_buffer.ReplayBuffer.uni_sample", "process_batch.max_t_filled", "on_off_run.process_batch", "learner.train", "pymarl.components.episode_buffer.ReplayBuffer.sample_latest", "process_batch.max_t_filled", "on_off_run.process_batch", "learner.train", "logger.console_logger.info", "logger.console_logger.info", "time.time", "range", "os.path.join", "os.makedirs", "logger.console_logger.info", "learner.save_models", "logger.log_stat", "logger.print_recent_stats", "pymarl.components.transforms.OneHot", "os.path.isdir", "name.isdigit", "timesteps.append", "runner.run", "str", "int", "pymarl.utils.timehelper.time_left", "pymarl.utils.timehelper.time_str", "abs", "time.time"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.get_env_info", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.setup", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.close_env", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.run", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.insert_episode_batch", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.insert_episode_batch", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.can_sample", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.can_sample", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.evaluate_sequential", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.uni_sample", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.max_t_filled", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.process_batch", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner.train", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.ReplayBuffer.sample_latest", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.max_t_filled", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.process_batch", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.learners.q_learner.QLearner.train", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.print_recent_stats", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.run", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.timehelper.time_left", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.timehelper.time_str"], ["", "def", "run_sequential", "(", "args", ",", "logger", ")", ":", "\n", "\n", "# Init runner so we can get env info", "\n", "    ", "runner", "=", "r_REGISTRY", "[", "args", ".", "runner", "]", "(", "args", "=", "args", ",", "logger", "=", "logger", ")", "\n", "\n", "callback", "=", "cb_REGISTRY", "[", "args", ".", "callback", "]", "(", ")", "\n", "\n", "# Set up schemes and groups here", "\n", "env_info", "=", "runner", ".", "get_env_info", "(", ")", "\n", "args", ".", "n_agents", "=", "env_info", "[", "\"n_agents\"", "]", "\n", "args", ".", "n_actions", "=", "env_info", "[", "\"n_actions\"", "]", "\n", "args", ".", "state_shape", "=", "env_info", "[", "\"state_shape\"", "]", "\n", "# args.unit_type_bits = env_info[\"unit_type_bits\"]", "\n", "# args.shield_bits_ally = env_info[\"shield_bits_ally\"]", "\n", "# args.shield_bits_enemy = env_info[\"shield_bits_enemy\"]", "\n", "# args.n_enemies = env_info[\"n_enemies\"]", "\n", "\n", "# Default/Base scheme", "\n", "scheme", "=", "{", "\n", "\"state\"", ":", "{", "\"vshape\"", ":", "env_info", "[", "\"state_shape\"", "]", "}", ",", "\n", "\"obs\"", ":", "{", "\"vshape\"", ":", "env_info", "[", "\"obs_shape\"", "]", ",", "\"group\"", ":", "\"agents\"", "}", ",", "\n", "\"actions\"", ":", "{", "\"vshape\"", ":", "(", "1", ",", ")", ",", "\"group\"", ":", "\"agents\"", ",", "\"dtype\"", ":", "th", ".", "long", "}", ",", "\n", "\"avail_actions\"", ":", "{", "\"vshape\"", ":", "(", "env_info", "[", "\"n_actions\"", "]", ",", ")", ",", "\"group\"", ":", "\"agents\"", ",", "\"dtype\"", ":", "th", ".", "int", "}", ",", "\n", "\"reward\"", ":", "{", "\"vshape\"", ":", "(", "1", ",", ")", "}", ",", "\n", "\"terminated\"", ":", "{", "\"vshape\"", ":", "(", "1", ",", ")", ",", "\"dtype\"", ":", "th", ".", "uint8", "}", ",", "\n", "#\"policy\": {\"vshape\": (env_info[\"n_agents\"],)}", "\n", "}", "\n", "groups", "=", "{", "\n", "\"agents\"", ":", "args", ".", "n_agents", "\n", "}", "\n", "preprocess", "=", "{", "\n", "\"actions\"", ":", "(", "\"actions_onehot\"", ",", "[", "OneHot", "(", "out_dim", "=", "args", ".", "n_actions", ")", "]", ")", "\n", "}", "\n", "\n", "if", "hasattr", "(", "runner", ",", "'info_scheme'", ")", ":", "\n", "        ", "scheme", ".", "update", "(", "runner", ".", "info_scheme", ")", "\n", "\n", "", "on_buffer", "=", "ReplayBuffer", "(", "scheme", ",", "groups", ",", "args", ".", "buffer_size", ",", "env_info", "[", "\"episode_limit\"", "]", "+", "1", ",", "\n", "preprocess", "=", "preprocess", ",", "\n", "device", "=", "\"cpu\"", ")", "\n", "off_buffer", "=", "ReplayBuffer", "(", "scheme", ",", "groups", ",", "args", ".", "off_buffer_size", ",", "env_info", "[", "\"episode_limit\"", "]", "+", "1", ",", "\n", "preprocess", "=", "preprocess", ",", "\n", "device", "=", "\"cpu\"", ")", "\n", "\n", "# Setup multiagent controller here", "\n", "mac", "=", "mac_REGISTRY", "[", "args", ".", "mac", "]", "(", "on_buffer", ".", "scheme", ",", "groups", ",", "args", ")", "\n", "\n", "# Give runner the scheme", "\n", "runner", ".", "setup", "(", "scheme", "=", "scheme", ",", "groups", "=", "groups", ",", "preprocess", "=", "preprocess", ",", "mac", "=", "mac", ")", "\n", "\n", "# Learner", "\n", "learner", "=", "le_REGISTRY", "[", "args", ".", "learner", "]", "(", "mac", "=", "mac", ",", "scheme", "=", "on_buffer", ".", "scheme", ",", "logger", "=", "logger", ",", "callback", "=", "callback", ",", "args", "=", "args", ")", "\n", "\n", "if", "args", ".", "use_cuda", ":", "\n", "        ", "learner", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "checkpoint_path", "!=", "\"\"", ":", "\n", "\n", "        ", "timesteps", "=", "[", "]", "\n", "timestep_to_load", "=", "0", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "checkpoint_path", ")", ":", "\n", "            ", "logger", ".", "console_logger", ".", "info", "(", "\"Checkpoint directiory {} doesn't exist\"", ".", "format", "(", "args", ".", "checkpoint_path", ")", ")", "\n", "return", "\n", "\n", "# Go through all files in args.checkpoint_path", "\n", "", "for", "name", "in", "os", ".", "listdir", "(", "args", ".", "checkpoint_path", ")", ":", "\n", "            ", "full_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_path", ",", "name", ")", "\n", "# Check if they are dirs the names of which are numbers", "\n", "if", "os", ".", "path", ".", "isdir", "(", "full_name", ")", "and", "name", ".", "isdigit", "(", ")", ":", "\n", "                ", "timesteps", ".", "append", "(", "int", "(", "name", ")", ")", "\n", "\n", "", "", "if", "args", ".", "load_step", "==", "0", ":", "\n", "# choose the max timestep", "\n", "            ", "timestep_to_load", "=", "max", "(", "timesteps", ")", "\n", "", "else", ":", "\n", "# choose the timestep closest to load_step", "\n", "            ", "timestep_to_load", "=", "min", "(", "timesteps", ",", "key", "=", "lambda", "x", ":", "abs", "(", "x", "-", "args", ".", "load_step", ")", ")", "\n", "\n", "", "model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_path", ",", "str", "(", "timestep_to_load", ")", ")", "\n", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Loading model from {}\"", ".", "format", "(", "model_path", ")", ")", "\n", "learner", ".", "load_models", "(", "model_path", ")", "\n", "runner", ".", "t_env", "=", "timestep_to_load", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "            ", "evaluate_sequential", "(", "args", ",", "runner", ")", "\n", "return", "\n", "\n", "# start training", "\n", "", "", "episode", "=", "0", "\n", "last_test_T", "=", "-", "args", ".", "test_interval", "-", "1", "\n", "last_log_T", "=", "0", "\n", "model_save_time", "=", "0", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "last_time", "=", "start_time", "\n", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Beginning training for {} timesteps\"", ".", "format", "(", "args", ".", "t_max", ")", ")", "\n", "\n", "while", "runner", ".", "t_env", "<=", "args", ".", "t_max", ":", "\n", "\n", "# Run for a whole episode at a time", "\n", "        ", "episode_batch", "=", "runner", ".", "run", "(", "test_mode", "=", "False", ")", "\n", "on_buffer", ".", "insert_episode_batch", "(", "episode_batch", ")", "\n", "off_buffer", ".", "insert_episode_batch", "(", "episode_batch", ")", "\n", "\n", "if", "off_buffer", ".", "can_sample", "(", "args", ".", "buffer_size", ")", ":", "\n", "# off samples", "\n", "            ", "episode_sample", "=", "off_buffer", ".", "uni_sample", "(", "args", ".", "off_batch_size", ")", "\n", "max_ep_t", "=", "episode_sample", ".", "max_t_filled", "(", ")", "\n", "episode_sample", "=", "process_batch", "(", "episode_sample", "[", ":", ",", ":", "max_ep_t", "]", ",", "args", ")", "\n", "learner", ".", "train", "(", "episode_sample", ",", "runner", ".", "t_env", ",", "episode", ",", "off", "=", "True", ")", "\n", "del", "episode_sample", "\n", "\n", "", "if", "on_buffer", ".", "can_sample", "(", "args", ".", "buffer_size", ")", ":", "\n", "# on samples", "\n", "            ", "episode_sample", "=", "on_buffer", ".", "sample_latest", "(", "args", ".", "batch_size", ")", "\n", "max_ep_t", "=", "episode_sample", ".", "max_t_filled", "(", ")", "\n", "episode_sample", "=", "process_batch", "(", "episode_sample", "[", ":", ",", ":", "max_ep_t", "]", ",", "args", ")", "\n", "learner", ".", "train", "(", "episode_sample", ",", "runner", ".", "t_env", ",", "episode", ",", "off", "=", "False", ")", "\n", "del", "episode_sample", "\n", "\n", "# Execute test runs once in a while", "\n", "", "n_test_runs", "=", "max", "(", "1", ",", "args", ".", "test_nepisode", "//", "runner", ".", "batch_size", ")", "\n", "if", "(", "runner", ".", "t_env", "-", "last_test_T", ")", "/", "args", ".", "test_interval", ">=", "1.0", ":", "\n", "\n", "            ", "logger", ".", "console_logger", ".", "info", "(", "\"t_env: {} / {}\"", ".", "format", "(", "runner", ".", "t_env", ",", "args", ".", "t_max", ")", ")", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Estimated time left: {}. Time passed: {}\"", ".", "format", "(", "\n", "time_left", "(", "last_time", ",", "last_test_T", ",", "runner", ".", "t_env", ",", "args", ".", "t_max", ")", ",", "time_str", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", ")", "\n", "last_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "last_test_T", "=", "runner", ".", "t_env", "\n", "for", "_", "in", "range", "(", "n_test_runs", ")", ":", "\n", "                ", "runner", ".", "run", "(", "test_mode", "=", "True", ")", "\n", "\n", "", "", "if", "args", ".", "save_model", "and", "(", "runner", ".", "t_env", "-", "model_save_time", ">=", "args", ".", "save_model_interval", "or", "model_save_time", "==", "0", ")", ":", "\n", "            ", "model_save_time", "=", "runner", ".", "t_env", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "local_results_path", ",", "\"models\"", ",", "args", ".", "unique_token", ",", "str", "(", "runner", ".", "t_env", ")", ")", "\n", "#\"results/models/{}\".format(unique_token)", "\n", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Saving models to {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "\n", "# learner should handle saving/loading -- delegate actor save/load to mac,", "\n", "# use appropriate filenames to do critics, optimizer states", "\n", "learner", ".", "save_models", "(", "save_path", ")", "\n", "\n", "", "episode", "+=", "args", ".", "batch_size_run", "\n", "\n", "if", "(", "runner", ".", "t_env", "-", "last_log_T", ")", ">=", "args", ".", "log_interval", ":", "\n", "            ", "logger", ".", "log_stat", "(", "\"episode\"", ",", "episode", ",", "runner", ".", "t_env", ")", "\n", "logger", ".", "print_recent_stats", "(", ")", "\n", "last_log_T", "=", "runner", ".", "t_env", "\n", "\n", "", "", "runner", ".", "close_env", "(", ")", "\n", "logger", ".", "console_logger", ".", "info", "(", "\"Finished Training\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.args_sanity_check": [[235, 249], ["_log.warning", "torch.cuda.is_available"], "function", ["None"], ["", "def", "args_sanity_check", "(", "config", ",", "_log", ")", ":", "\n", "\n", "# set CUDA flags", "\n", "# config[\"use_cuda\"] = True # Use cuda whenever possible!", "\n", "    ", "if", "config", "[", "\"use_cuda\"", "]", "and", "not", "th", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "config", "[", "\"use_cuda\"", "]", "=", "False", "\n", "_log", ".", "warning", "(", "\"CUDA flag use_cuda was switched OFF automatically because no CUDA devices are available!\"", ")", "\n", "\n", "", "if", "config", "[", "\"test_nepisode\"", "]", "<", "config", "[", "\"batch_size_run\"", "]", ":", "\n", "        ", "config", "[", "\"test_nepisode\"", "]", "=", "config", "[", "\"batch_size_run\"", "]", "\n", "", "else", ":", "\n", "        ", "config", "[", "\"test_nepisode\"", "]", "=", "(", "config", "[", "\"test_nepisode\"", "]", "//", "config", "[", "\"batch_size_run\"", "]", ")", "*", "config", "[", "\"batch_size_run\"", "]", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.run.on_off_run.process_batch": [[251, 256], ["batch.to"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to"], ["", "def", "process_batch", "(", "batch", ",", "args", ")", ":", "\n", "\n", "    ", "if", "batch", ".", "device", "!=", "args", ".", "device", ":", "\n", "        ", "batch", ".", "to", "(", "args", ".", "device", ")", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.info_controller.InfoMAC.__init__": [[11, 14], ["pymarl.controllers.basic_controller.BasicMAC.__init__", "set"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scheme", ",", "groups", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "scheme", ",", "groups", ",", "args", ")", "\n", "self", ".", "existing_keys", "=", "set", "(", "[", "'state'", ",", "'obs'", ",", "'actions'", ",", "'avail_actions'", ",", "'probs'", ",", "'reward'", ",", "'terminated'", ",", "'actions_onehot'", ",", "'filled'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.info_controller.InfoMAC.select_actions": [[15, 21], ["slice", "info_controller.InfoMAC.forward", "info_controller.InfoMAC.action_selector.select_action"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GaussianActionSelector.select_action"], ["", "def", "select_actions", "(", "self", ",", "ep_batch", ",", "t_ep", ",", "t_env", ",", "bs", "=", "slice", "(", "None", ")", ",", "test_mode", "=", "False", ")", ":", "\n", "# Only select actions for the selected batch elements in bs", "\n", "        ", "avail_actions", "=", "ep_batch", "[", "\"avail_actions\"", "]", "[", ":", ",", "t_ep", "]", "\n", "qvals", "=", "self", ".", "forward", "(", "ep_batch", ",", "t_ep", ",", "test_mode", "=", "test_mode", ")", "\n", "chosen_actions", "=", "self", ".", "action_selector", ".", "select_action", "(", "qvals", "[", "bs", "]", ",", "avail_actions", "[", "bs", "]", ",", "t_env", ",", "test_mode", "=", "test_mode", ")", "\n", "return", "chosen_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.info_controller.InfoMAC.build_info": [[22, 28], ["info.items", "batch.data.transition_data.items", "isinstance", "torch_geometric.data.Batch.from_data_list"], "methods", ["None"], ["", "def", "build_info", "(", "self", ",", "batch", ",", "t", ")", ":", "\n", "        ", "info", "=", "{", "key", ":", "val", "[", ":", ",", "t", "]", "for", "key", ",", "val", "in", "batch", ".", "data", ".", "transition_data", ".", "items", "(", ")", "if", "key", "not", "in", "self", ".", "existing_keys", "}", "\n", "for", "key", ",", "val", "in", "info", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "np", ".", "ndarray", ")", "and", "val", ".", "dtype", "==", "'object'", ":", "\n", "                ", "info", "[", "key", "]", "=", "Batch", ".", "from_data_list", "(", "val", ")", "\n", "", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.info_controller.InfoMAC.forward": [[29, 47], ["info_controller.InfoMAC.build_info", "info_controller.InfoMAC._build_inputs", "info_controller.InfoMAC.agent", "info_controller.InfoMAC.agent.eval", "getattr", "torch.nn.functional.softmax", "agent_outs.reshape.reshape.reshape", "avail_actions.reshape"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.info_controller.InfoMAC.build_info", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.epsilon_schedules.LinearIncreaseSchedule.eval"], ["", "def", "forward", "(", "self", ",", "ep_batch", ",", "t", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "if", "test_mode", ":", "\n", "            ", "self", ".", "agent", ".", "eval", "(", ")", "\n", "\n", "", "info", "=", "self", ".", "build_info", "(", "ep_batch", ",", "t", ")", "\n", "agent_inputs", "=", "self", ".", "_build_inputs", "(", "ep_batch", ",", "t", ")", "\n", "avail_actions", "=", "ep_batch", "[", "\"avail_actions\"", "]", "[", ":", ",", "t", "]", "\n", "agent_outs", ",", "self", ".", "hidden_states", "=", "self", ".", "agent", "(", "agent_inputs", ",", "self", ".", "hidden_states", ",", "info", "=", "info", ")", "\n", "\n", "if", "self", ".", "agent_output_type", "==", "\"pi_logits\"", ":", "\n", "            ", "if", "getattr", "(", "self", ".", "args", ",", "\"mask_before_softmax\"", ",", "True", ")", ":", "\n", "# Make the logits for unavailable actions very negative to minimise their affect on the softmax", "\n", "                ", "agent_outs", "=", "agent_outs", ".", "reshape", "(", "ep_batch", ".", "batch_size", ",", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "reshaped_avail_actions", "=", "avail_actions", ".", "reshape", "(", "ep_batch", ".", "batch_size", ",", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "agent_outs", "[", "reshaped_avail_actions", "==", "0", "]", "=", "-", "1e10", "\n", "", "agent_outs", "=", "th", ".", "nn", ".", "functional", ".", "softmax", "(", "agent_outs", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "agent_outs", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.ppo_controller.PPOMAC.__init__": [[8, 18], ["ppo_controller.PPOMAC._get_input_shape", "ppo_controller.PPOMAC._build_agents"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._get_input_shape", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC._build_agents"], ["    ", "def", "__init__", "(", "self", ",", "scheme", ",", "groups", ",", "args", ")", ":", "\n", "        ", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "args", "=", "args", "\n", "input_shape", "=", "self", ".", "_get_input_shape", "(", "scheme", ")", "\n", "self", ".", "_build_agents", "(", "input_shape", ")", "\n", "self", ".", "agent_output_type", "=", "args", ".", "agent_output_type", "\n", "\n", "self", ".", "action_selector", "=", "action_REGISTRY", "[", "args", ".", "action_selector", "]", "(", "args", ")", "\n", "\n", "self", ".", "hidden_states", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.ppo_controller.PPOMAC.select_actions": [[19, 24], ["slice", "ppo_controller.PPOMAC.forward", "ppo_controller.PPOMAC.action_selector.select_action"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GaussianActionSelector.select_action"], ["", "def", "select_actions", "(", "self", ",", "ep_batch", ",", "t_ep", ",", "t_env", ",", "bs", "=", "slice", "(", "None", ")", ",", "test_mode", "=", "False", ")", ":", "\n", "# Only select actions for the selected batch elements in bs", "\n", "        ", "avail_actions", "=", "ep_batch", "[", "\"avail_actions\"", "]", "[", ":", ",", "t_ep", "]", "\n", "agent_outputs", ",", "qs", "=", "self", ".", "forward", "(", "ep_batch", ",", "t_ep", ",", "test_mode", "=", "test_mode", ")", "\n", "return", "self", ".", "action_selector", ".", "select_action", "(", "agent_outputs", "[", "bs", "]", ",", "avail_actions", "[", "bs", "]", ",", "t_env", ",", "test_mode", "=", "test_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.ppo_controller.PPOMAC.forward": [[25, 40], ["ppo_controller.PPOMAC._build_inputs", "ppo_controller.PPOMAC.agent", "getattr", "torch.nn.functional.softmax", "avail_actions.reshape", "torch.nn.functional.softmax.view", "agent_outs1.view"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs"], ["", "def", "forward", "(", "self", ",", "ep_batch", ",", "t", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "agent_inputs", "=", "self", ".", "_build_inputs", "(", "ep_batch", ",", "t", ")", "\n", "avail_actions", "=", "ep_batch", "[", "\"avail_actions\"", "]", "[", ":", ",", "t", "]", "\n", "agent_outs", ",", "agent_outs1", ",", "self", ".", "hidden_states", "=", "self", ".", "agent", "(", "agent_inputs", ",", "self", ".", "hidden_states", ")", "\n", "\n", "# Softmax the agent outputs if they're policy logits", "\n", "assert", "self", ".", "agent_output_type", "==", "'pi_logits'", "\n", "\n", "if", "getattr", "(", "self", ".", "args", ",", "\"mask_before_softmax\"", ",", "True", ")", ":", "\n", "# Make the logits for unavailable actions very negative to minimise their affect on the softmax", "\n", "            ", "reshaped_avail_actions", "=", "avail_actions", ".", "reshape", "(", "ep_batch", ".", "batch_size", "*", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "agent_outs", "[", "reshaped_avail_actions", "==", "0", "]", "=", "-", "1e10", "\n", "\n", "", "agent_outs", "=", "th", ".", "nn", ".", "functional", ".", "softmax", "(", "agent_outs", ",", "dim", "=", "-", "1", ")", "\n", "return", "agent_outs", ".", "view", "(", "ep_batch", ".", "batch_size", ",", "self", ".", "n_agents", ",", "-", "1", ")", ",", "agent_outs1", ".", "view", "(", "ep_batch", ".", "batch_size", ",", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.ppo_controller.PPOMAC.init_hidden": [[41, 43], ["ppo_controller.PPOMAC.agent.init_hidden().unsqueeze().expand", "ppo_controller.PPOMAC.agent.init_hidden().unsqueeze", "ppo_controller.PPOMAC.agent.init_hidden"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "hidden_states", "=", "self", ".", "agent", ".", "init_hidden", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "self", ".", "n_agents", ",", "-", "1", ")", "# bav", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.ppo_controller.PPOMAC.parameters": [[44, 46], ["ppo_controller.PPOMAC.agent.parameters"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "agent", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.ppo_controller.PPOMAC.load_state": [[47, 49], ["ppo_controller.PPOMAC.agent.load_state_dict", "other_mac.agent.state_dict"], "methods", ["None"], ["", "def", "load_state", "(", "self", ",", "other_mac", ")", ":", "\n", "        ", "self", ".", "agent", ".", "load_state_dict", "(", "other_mac", ".", "agent", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.ppo_controller.PPOMAC.cuda": [[50, 52], ["ppo_controller.PPOMAC.agent.cuda"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "agent", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.ppo_controller.PPOMAC.save_models": [[53, 55], ["torch.save", "ppo_controller.PPOMAC.agent.state_dict"], "methods", ["None"], ["", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "th", ".", "save", "(", "self", ".", "agent", ".", "state_dict", "(", ")", ",", "\"{}/agent.th\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.ppo_controller.PPOMAC.load_models": [[56, 58], ["ppo_controller.PPOMAC.agent.load_state_dict", "torch.load"], "methods", ["None"], ["", "def", "load_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "agent", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/agent.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.ppo_controller.PPOMAC._build_agents": [[59, 61], ["None"], "methods", ["None"], ["", "def", "_build_agents", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "agent", "=", "agent_REGISTRY", "[", "self", ".", "args", ".", "agent", "]", "(", "input_shape", ",", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.ppo_controller.PPOMAC._build_inputs": [[62, 78], ["torch.cat.append", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.eye().unsqueeze().expand", "x.reshape", "torch.zeros_like", "torch.eye().unsqueeze", "torch.eye"], "methods", ["None"], ["", "def", "_build_inputs", "(", "self", ",", "batch", ",", "t", ")", ":", "\n", "# Assumes homogenous agents with flat observations.", "\n", "# Other MACs might want to e.g. delegate building inputs to each agent", "\n", "        ", "bs", "=", "batch", ".", "batch_size", "\n", "inputs", "=", "[", "]", "\n", "inputs", ".", "append", "(", "batch", "[", "\"obs\"", "]", "[", ":", ",", "t", "]", ")", "# b1av", "\n", "if", "self", ".", "args", ".", "obs_last_action", ":", "\n", "            ", "if", "t", "==", "0", ":", "\n", "                ", "inputs", ".", "append", "(", "th", ".", "zeros_like", "(", "batch", "[", "\"actions_onehot\"", "]", "[", ":", ",", "t", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "inputs", ".", "append", "(", "batch", "[", "\"actions_onehot\"", "]", "[", ":", ",", "t", "-", "1", "]", ")", "\n", "", "", "if", "self", ".", "args", ".", "obs_agent_id", ":", "\n", "            ", "inputs", ".", "append", "(", "th", ".", "eye", "(", "self", ".", "n_agents", ",", "device", "=", "batch", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "bs", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "inputs", "=", "th", ".", "cat", "(", "[", "x", ".", "reshape", "(", "bs", "*", "self", ".", "n_agents", ",", "-", "1", ")", "for", "x", "in", "inputs", "]", ",", "dim", "=", "1", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.ppo_controller.PPOMAC._get_input_shape": [[79, 87], ["None"], "methods", ["None"], ["", "def", "_get_input_shape", "(", "self", ",", "scheme", ")", ":", "\n", "        ", "input_shape", "=", "scheme", "[", "\"obs\"", "]", "[", "\"vshape\"", "]", "\n", "if", "self", ".", "args", ".", "obs_last_action", ":", "\n", "            ", "input_shape", "+=", "scheme", "[", "\"actions_onehot\"", "]", "[", "\"vshape\"", "]", "[", "0", "]", "\n", "", "if", "self", ".", "args", ".", "obs_agent_id", ":", "\n", "            ", "input_shape", "+=", "self", ".", "n_agents", "\n", "\n", "", "return", "input_shape", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.conv_controller.ConvMAC.__init__": [[10, 13], ["pymarl.controllers.basic_controller.BasicMAC.__init__"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scheme", ",", "groups", ",", "args", ")", ":", "\n", "        ", "super", "(", "ConvMAC", ",", "self", ")", ".", "__init__", "(", "scheme", ",", "groups", ",", "args", ")", "\n", "self", ".", "buffer", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.conv_controller.ConvMAC.select_actions": [[14, 19], ["slice", "conv_controller.ConvMAC.forward().squeeze", "conv_controller.ConvMAC.action_selector.select_action", "conv_controller.ConvMAC.forward"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GaussianActionSelector.select_action", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward"], ["", "def", "select_actions", "(", "self", ",", "ep_batch", ",", "t_ep", ",", "t_env", ",", "bs", "=", "slice", "(", "None", ")", ",", "test_mode", "=", "False", ")", ":", "\n", "# Only select actions for the selected batch elements in bs", "\n", "        ", "avail_actions", "=", "ep_batch", "[", "\"avail_actions\"", "]", "[", ":", ",", "t_ep", "]", "\n", "qvals", "=", "self", ".", "forward", "(", "ep_batch", ",", "t_ep", ",", "test_mode", "=", "test_mode", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "return", "self", ".", "action_selector", ".", "select_action", "(", "qvals", "[", "bs", "]", ",", "avail_actions", "[", "bs", "]", ",", "t_env", ",", "test_mode", "=", "test_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.conv_controller.ConvMAC.forward": [[20, 44], ["conv_controller.ConvMAC.agent", "agent_outs.reshape.reshape.view", "torch.no_grad", "conv_controller.ConvMAC._build_inputs", "torch.stack", "getattr", "torch.nn.functional.softmax", "len", "agent_outs.reshape.reshape.reshape", "avail_actions.reshape", "torch.zeros_like", "range"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs"], ["", "def", "forward", "(", "self", ",", "ep_batch", ",", "t", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "avail_actions", "=", "ep_batch", "[", "\"avail_actions\"", "]", "[", ":", ",", "t", "]", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "            ", "agent_inputs", "=", "self", ".", "_build_inputs", "(", "ep_batch", ",", "t", ")", "\n", "if", "len", "(", "self", ".", "buffer", ")", "<", "self", ".", "args", ".", "frames", ":", "\n", "                ", "self", ".", "buffer", "=", "[", "th", ".", "zeros_like", "(", "agent_inputs", ")", "for", "i", "in", "range", "(", "self", ".", "args", ".", "frames", ")", "]", "\n", "# stack", "\n", "", "self", ".", "buffer", "=", "self", ".", "buffer", "[", "1", ":", "]", "+", "[", "agent_inputs", "]", "\n", "batch_agent_inputs", "=", "th", ".", "stack", "(", "self", ".", "buffer", ",", "dim", "=", "1", ")", "# b, t, a, c", "\n", "\n", "", "agent_outs", ",", "self", ".", "hidden_states", "=", "self", ".", "agent", "(", "batch_agent_inputs", ",", "self", ".", "hidden_states", ")", "\n", "\n", "# Softmax the agent outputs if they're policy logits", "\n", "if", "self", ".", "agent_output_type", "==", "\"pi_logits\"", ":", "\n", "\n", "            ", "if", "getattr", "(", "self", ".", "args", ",", "\"mask_before_softmax\"", ",", "True", ")", ":", "\n", "# Make the logits for unavailable actions very negative to minimise their affect on the softmax", "\n", "                ", "agent_outs", "=", "agent_outs", ".", "reshape", "(", "ep_batch", ".", "batch_size", "*", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "reshaped_avail_actions", "=", "avail_actions", ".", "reshape", "(", "ep_batch", ".", "batch_size", "*", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "agent_outs", "[", "reshaped_avail_actions", "==", "0", "]", "=", "-", "1e10", "\n", "\n", "", "agent_outs", "=", "th", ".", "nn", ".", "functional", ".", "softmax", "(", "agent_outs", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "agent_outs", ".", "view", "(", "ep_batch", ".", "batch_size", ",", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.conv_controller.ConvMAC.init_hidden": [[45, 48], ["super().init_hidden"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "ConvMAC", ",", "self", ")", ".", "init_hidden", "(", "batch_size", ")", "\n", "self", ".", "buffer", "=", "[", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_controller.BasicMAC.__init__": [[8, 19], ["basic_controller.BasicMAC._get_input_shape", "basic_controller.BasicMAC._build_agents", "getattr"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._get_input_shape", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC._build_agents"], ["    ", "def", "__init__", "(", "self", ",", "scheme", ",", "groups", ",", "args", ")", ":", "\n", "        ", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "args", "=", "args", "\n", "input_shape", "=", "self", ".", "_get_input_shape", "(", "scheme", ")", "\n", "self", ".", "_build_agents", "(", "input_shape", ")", "\n", "self", ".", "agent_output_type", "=", "args", ".", "agent_output_type", "\n", "\n", "self", ".", "action_selector", "=", "action_REGISTRY", "[", "args", ".", "action_selector", "]", "(", "args", ")", "\n", "self", ".", "save_probs", "=", "getattr", "(", "self", ".", "args", ",", "'save_probs'", ",", "False", ")", "\n", "\n", "self", ".", "hidden_states", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_controller.BasicMAC.select_actions": [[20, 26], ["slice", "basic_controller.BasicMAC.forward", "basic_controller.BasicMAC.action_selector.select_action"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GaussianActionSelector.select_action"], ["", "def", "select_actions", "(", "self", ",", "ep_batch", ",", "t_ep", ",", "t_env", ",", "bs", "=", "slice", "(", "None", ")", ",", "test_mode", "=", "False", ")", ":", "\n", "# Only select actions for the selected batch elements in bs", "\n", "        ", "avail_actions", "=", "ep_batch", "[", "\"avail_actions\"", "]", "[", ":", ",", "t_ep", "]", "\n", "agent_outputs", "=", "self", ".", "forward", "(", "ep_batch", ",", "t_ep", ",", "test_mode", "=", "test_mode", ")", "\n", "chosen_actions", "=", "self", ".", "action_selector", ".", "select_action", "(", "agent_outputs", "[", "bs", "]", ",", "avail_actions", "[", "bs", "]", ",", "t_env", ",", "test_mode", "=", "test_mode", ")", "\n", "return", "chosen_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_controller.BasicMAC.forward": [[27, 46], ["basic_controller.BasicMAC._build_inputs", "basic_controller.BasicMAC.agent", "agent_outs.reshape.reshape.view", "basic_controller.BasicMAC.agent.eval", "getattr", "torch.nn.functional.softmax", "agent_outs.reshape.reshape.reshape", "avail_actions.reshape"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.epsilon_schedules.LinearIncreaseSchedule.eval"], ["", "def", "forward", "(", "self", ",", "ep_batch", ",", "t", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "agent_inputs", "=", "self", ".", "_build_inputs", "(", "ep_batch", ",", "t", ")", "\n", "avail_actions", "=", "ep_batch", "[", "\"avail_actions\"", "]", "[", ":", ",", "t", "]", "\n", "if", "test_mode", ":", "\n", "            ", "self", ".", "agent", ".", "eval", "(", ")", "\n", "", "agent_outs", ",", "self", ".", "hidden_states", "=", "self", ".", "agent", "(", "agent_inputs", ",", "self", ".", "hidden_states", ")", "\n", "\n", "# Softmax the agent outputs if they're policy logits", "\n", "if", "self", ".", "agent_output_type", "==", "\"pi_logits\"", ":", "\n", "\n", "            ", "if", "getattr", "(", "self", ".", "args", ",", "\"mask_before_softmax\"", ",", "True", ")", ":", "\n", "# Make the logits for unavailable actions very negative to minimise their affect on the softmax", "\n", "                ", "agent_outs", "=", "agent_outs", ".", "reshape", "(", "ep_batch", ".", "batch_size", "*", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "reshaped_avail_actions", "=", "avail_actions", ".", "reshape", "(", "ep_batch", ".", "batch_size", "*", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "agent_outs", "[", "reshaped_avail_actions", "==", "0", "]", "=", "-", "1e10", "\n", "\n", "", "agent_outs", "=", "th", ".", "nn", ".", "functional", ".", "softmax", "(", "agent_outs", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "agent_outs", ".", "view", "(", "ep_batch", ".", "batch_size", ",", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_controller.BasicMAC.init_hidden": [[47, 51], ["basic_controller.BasicMAC.agent.init_hidden", "basic_controller.BasicMAC.hidden_states.unsqueeze().expand", "basic_controller.BasicMAC.hidden_states.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "hidden_states", "=", "self", ".", "agent", ".", "init_hidden", "(", ")", "\n", "if", "self", ".", "hidden_states", "is", "not", "None", ":", "\n", "            ", "self", ".", "hidden_states", "=", "self", ".", "hidden_states", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "self", ".", "n_agents", ",", "-", "1", ")", "# bav", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_controller.BasicMAC.parameters": [[52, 54], ["basic_controller.BasicMAC.agent.parameters"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters"], ["", "", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "agent", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_controller.BasicMAC.load_state": [[55, 57], ["basic_controller.BasicMAC.agent.load_state_dict", "other_mac.agent.state_dict"], "methods", ["None"], ["", "def", "load_state", "(", "self", ",", "other_mac", ")", ":", "\n", "        ", "self", ".", "agent", ".", "load_state_dict", "(", "other_mac", ".", "agent", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_controller.BasicMAC.cuda": [[58, 60], ["basic_controller.BasicMAC.agent.cuda"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "agent", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_controller.BasicMAC.save_models": [[61, 63], ["torch.save", "basic_controller.BasicMAC.agent.state_dict"], "methods", ["None"], ["", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "th", ".", "save", "(", "self", ".", "agent", ".", "state_dict", "(", ")", ",", "\"{}/agent.th\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_controller.BasicMAC.load_models": [[64, 66], ["basic_controller.BasicMAC.agent.load_state_dict", "torch.load"], "methods", ["None"], ["", "def", "load_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "agent", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/agent.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_controller.BasicMAC._build_agents": [[67, 69], ["None"], "methods", ["None"], ["", "def", "_build_agents", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "agent", "=", "agent_REGISTRY", "[", "self", ".", "args", ".", "agent", "]", "(", "input_shape", ",", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_controller.BasicMAC._build_inputs": [[70, 86], ["torch.cat.append", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.eye().unsqueeze().expand", "x.reshape", "torch.zeros_like", "torch.eye().unsqueeze", "torch.eye"], "methods", ["None"], ["", "def", "_build_inputs", "(", "self", ",", "batch", ",", "t", ")", ":", "\n", "# Assumes homogenous agents with flat observations.", "\n", "# Other MACs might want to e.g. delegate building inputs to each agent", "\n", "        ", "bs", "=", "batch", ".", "batch_size", "\n", "inputs", "=", "[", "]", "\n", "inputs", ".", "append", "(", "batch", "[", "\"obs\"", "]", "[", ":", ",", "t", "]", ")", "# b1av", "\n", "if", "self", ".", "args", ".", "obs_last_action", ":", "\n", "            ", "if", "t", "==", "0", ":", "\n", "                ", "inputs", ".", "append", "(", "th", ".", "zeros_like", "(", "batch", "[", "\"actions_onehot\"", "]", "[", ":", ",", "t", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "inputs", ".", "append", "(", "batch", "[", "\"actions_onehot\"", "]", "[", ":", ",", "t", "-", "1", "]", ")", "\n", "", "", "if", "self", ".", "args", ".", "obs_agent_id", ":", "\n", "            ", "inputs", ".", "append", "(", "th", ".", "eye", "(", "self", ".", "n_agents", ",", "device", "=", "batch", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "bs", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "inputs", "=", "th", ".", "cat", "(", "[", "x", ".", "reshape", "(", "bs", ",", "self", ".", "n_agents", ",", "-", "1", ")", "for", "x", "in", "inputs", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_controller.BasicMAC._get_input_shape": [[87, 95], ["None"], "methods", ["None"], ["", "def", "_get_input_shape", "(", "self", ",", "scheme", ")", ":", "\n", "        ", "input_shape", "=", "scheme", "[", "\"obs\"", "]", "[", "\"vshape\"", "]", "\n", "if", "self", ".", "args", ".", "obs_last_action", ":", "\n", "            ", "input_shape", "+=", "scheme", "[", "\"actions_onehot\"", "]", "[", "\"vshape\"", "]", "[", "0", "]", "\n", "", "if", "self", ".", "args", ".", "obs_agent_id", ":", "\n", "            ", "input_shape", "+=", "self", ".", "n_agents", "\n", "\n", "", "return", "input_shape", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.dop_controller.DOPMAC.__init__": [[8, 18], ["dop_controller.DOPMAC._get_input_shape", "dop_controller.DOPMAC._build_agents"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._get_input_shape", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC._build_agents"], ["    ", "def", "__init__", "(", "self", ",", "scheme", ",", "groups", ",", "args", ")", ":", "\n", "        ", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "args", "=", "args", "\n", "input_shape", "=", "self", ".", "_get_input_shape", "(", "scheme", ")", "\n", "self", ".", "_build_agents", "(", "input_shape", ")", "\n", "self", ".", "agent_output_type", "=", "args", ".", "agent_output_type", "\n", "\n", "self", ".", "action_selector", "=", "action_REGISTRY", "[", "args", ".", "action_selector", "]", "(", "args", ")", "\n", "\n", "self", ".", "hidden_states", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.dop_controller.DOPMAC.select_actions": [[19, 25], ["slice", "dop_controller.DOPMAC.forward", "dop_controller.DOPMAC.action_selector.select_action"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GaussianActionSelector.select_action"], ["", "def", "select_actions", "(", "self", ",", "ep_batch", ",", "t_ep", ",", "t_env", ",", "bs", "=", "slice", "(", "None", ")", ",", "test_mode", "=", "False", ")", ":", "\n", "# Only select actions for the selected batch elements in bs", "\n", "        ", "avail_actions", "=", "ep_batch", "[", "\"avail_actions\"", "]", "[", ":", ",", "t_ep", "]", "\n", "agent_outputs", "=", "self", ".", "forward", "(", "ep_batch", ",", "t_ep", ",", "test_mode", "=", "test_mode", ")", "\n", "chosen_actions", "=", "self", ".", "action_selector", ".", "select_action", "(", "agent_outputs", "[", "bs", "]", ",", "avail_actions", "[", "bs", "]", ",", "t_env", ",", "test_mode", "=", "test_mode", ")", "\n", "return", "chosen_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.dop_controller.DOPMAC.forward": [[26, 56], ["dop_controller.DOPMAC._build_inputs", "dop_controller.DOPMAC.agent", "torch.nn.functional.softmax.view", "getattr", "torch.nn.functional.softmax", "avail_actions.reshape", "torch.nn.functional.softmax.size", "getattr", "getattr", "avail_actions.reshape.sum().float", "avail_actions.reshape.sum", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "forward", "(", "self", ",", "ep_batch", ",", "t", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "agent_inputs", "=", "self", ".", "_build_inputs", "(", "ep_batch", ",", "t", ")", "\n", "avail_actions", "=", "ep_batch", "[", "\"avail_actions\"", "]", "[", ":", ",", "t", "]", "\n", "agent_outs", ",", "self", ".", "hidden_states", "=", "self", ".", "agent", "(", "agent_inputs", ",", "self", ".", "hidden_states", ")", "\n", "\n", "# Softmax the agent outputs if they're policy logits", "\n", "if", "self", ".", "agent_output_type", "==", "\"pi_logits\"", ":", "\n", "\n", "            ", "if", "getattr", "(", "self", ".", "args", ",", "\"mask_before_softmax\"", ",", "True", ")", ":", "\n", "# Make the logits for unavailable actions very negative to minimise their affect on the softmax", "\n", "                ", "reshaped_avail_actions", "=", "avail_actions", ".", "reshape", "(", "ep_batch", ".", "batch_size", "*", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "agent_outs", "[", "reshaped_avail_actions", "==", "0", "]", "=", "-", "1e11", "\n", "\n", "", "agent_outs", "=", "th", ".", "nn", ".", "functional", ".", "softmax", "(", "agent_outs", ",", "dim", "=", "-", "1", ")", "\n", "if", "not", "test_mode", ":", "\n", "# Epsilon floor", "\n", "                ", "epsilon_action_num", "=", "agent_outs", ".", "size", "(", "-", "1", ")", "\n", "if", "getattr", "(", "self", ".", "args", ",", "\"mask_before_softmax\"", ",", "True", ")", ":", "\n", "# With probability epsilon, we will pick an available action uniformly", "\n", "                    ", "epsilon_action_num", "=", "reshaped_avail_actions", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "\n", "# DOP add noise to probs two times (another noise is in action_selectors.py)", "\n", "", "agent_outs", "=", "(", "(", "1", "-", "self", ".", "action_selector", ".", "epsilon", ")", "*", "agent_outs", "\n", "+", "th", ".", "ones_like", "(", "agent_outs", ")", "*", "self", ".", "action_selector", ".", "epsilon", "/", "epsilon_action_num", ")", "\n", "\n", "if", "getattr", "(", "self", ".", "args", ",", "\"mask_before_softmax\"", ",", "True", ")", ":", "\n", "# Zero out the unavailable actions", "\n", "                    ", "agent_outs", "[", "reshaped_avail_actions", "==", "0", "]", "=", "0.0", "\n", "\n", "", "", "", "return", "agent_outs", ".", "view", "(", "ep_batch", ".", "batch_size", ",", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.dop_controller.DOPMAC.init_hidden": [[57, 60], ["dop_controller.DOPMAC.agent.init_hidden().unsqueeze().expand", "dop_controller.DOPMAC.agent.init_hidden().unsqueeze", "dop_controller.DOPMAC.agent.init_hidden"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "hidden_states", "=", "self", ".", "agent", ".", "init_hidden", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "self", ".", "n_agents", ",", "-", "1", ")", "# bav", "\n", "a", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.dop_controller.DOPMAC.parameters": [[61, 63], ["dop_controller.DOPMAC.agent.parameters"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "agent", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.dop_controller.DOPMAC.load_state": [[64, 66], ["dop_controller.DOPMAC.agent.load_state_dict", "other_mac.agent.state_dict"], "methods", ["None"], ["", "def", "load_state", "(", "self", ",", "other_mac", ")", ":", "\n", "        ", "self", ".", "agent", ".", "load_state_dict", "(", "other_mac", ".", "agent", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.dop_controller.DOPMAC.cuda": [[67, 69], ["dop_controller.DOPMAC.agent.cuda"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "agent", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.dop_controller.DOPMAC.save_models": [[70, 72], ["torch.save", "dop_controller.DOPMAC.agent.state_dict"], "methods", ["None"], ["", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "th", ".", "save", "(", "self", ".", "agent", ".", "state_dict", "(", ")", ",", "\"{}/agent.th\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.dop_controller.DOPMAC.load_models": [[73, 75], ["dop_controller.DOPMAC.agent.load_state_dict", "torch.load"], "methods", ["None"], ["", "def", "load_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "agent", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/agent.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.dop_controller.DOPMAC._build_agents": [[76, 78], ["None"], "methods", ["None"], ["", "def", "_build_agents", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "agent", "=", "agent_REGISTRY", "[", "self", ".", "args", ".", "agent", "]", "(", "input_shape", ",", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.dop_controller.DOPMAC._build_inputs": [[79, 95], ["torch.cat.append", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.eye().unsqueeze().expand", "x.reshape", "torch.zeros_like", "torch.eye().unsqueeze", "torch.eye"], "methods", ["None"], ["", "def", "_build_inputs", "(", "self", ",", "batch", ",", "t", ")", ":", "\n", "# Assumes homogenous agents with flat observations.", "\n", "# Other MACs might want to e.g. delegate building inputs to each agent", "\n", "        ", "bs", "=", "batch", ".", "batch_size", "\n", "inputs", "=", "[", "]", "\n", "inputs", ".", "append", "(", "batch", "[", "\"obs\"", "]", "[", ":", ",", "t", "]", ")", "# b1av", "\n", "if", "self", ".", "args", ".", "obs_last_action", ":", "\n", "            ", "if", "t", "==", "0", ":", "\n", "                ", "inputs", ".", "append", "(", "th", ".", "zeros_like", "(", "batch", "[", "\"actions_onehot\"", "]", "[", ":", ",", "t", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "inputs", ".", "append", "(", "batch", "[", "\"actions_onehot\"", "]", "[", ":", ",", "t", "-", "1", "]", ")", "\n", "", "", "if", "self", ".", "args", ".", "obs_agent_id", ":", "\n", "            ", "inputs", ".", "append", "(", "th", ".", "eye", "(", "self", ".", "n_agents", ",", "device", "=", "batch", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "bs", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "inputs", "=", "th", ".", "cat", "(", "[", "x", ".", "reshape", "(", "bs", ",", "self", ".", "n_agents", ",", "-", "1", ")", "for", "x", "in", "inputs", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.dop_controller.DOPMAC._get_input_shape": [[96, 104], ["None"], "methods", ["None"], ["", "def", "_get_input_shape", "(", "self", ",", "scheme", ")", ":", "\n", "        ", "input_shape", "=", "scheme", "[", "\"obs\"", "]", "[", "\"vshape\"", "]", "\n", "if", "self", ".", "args", ".", "obs_last_action", ":", "\n", "            ", "input_shape", "+=", "scheme", "[", "\"actions_onehot\"", "]", "[", "\"vshape\"", "]", "[", "0", "]", "\n", "", "if", "self", ".", "args", ".", "obs_agent_id", ":", "\n", "            ", "input_shape", "+=", "self", ".", "n_agents", "\n", "\n", "", "return", "input_shape", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.__init__": [[8, 16], ["basic_central_controller.CentralBasicMAC._get_input_shape", "basic_central_controller.CentralBasicMAC._build_agents"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._get_input_shape", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC._build_agents"], ["    ", "def", "__init__", "(", "self", ",", "scheme", ",", "args", ")", ":", "\n", "        ", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "args", "=", "args", "\n", "input_shape", "=", "self", ".", "_get_input_shape", "(", "scheme", ")", "\n", "self", ".", "_build_agents", "(", "input_shape", ")", "\n", "self", ".", "agent_output_type", "=", "args", ".", "agent_output_type", "\n", "\n", "self", ".", "hidden_states", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.forward": [[17, 22], ["basic_central_controller.CentralBasicMAC._build_inputs", "basic_central_controller.CentralBasicMAC.agent", "agent_outs.view"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs"], ["", "def", "forward", "(", "self", ",", "ep_batch", ",", "t", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "agent_inputs", "=", "self", ".", "_build_inputs", "(", "ep_batch", ",", "t", ")", "\n", "agent_outs", ",", "self", ".", "hidden_states", "=", "self", ".", "agent", "(", "agent_inputs", ",", "self", ".", "hidden_states", ")", "\n", "\n", "return", "agent_outs", ".", "view", "(", "ep_batch", ".", "batch_size", ",", "self", ".", "n_agents", ",", "self", ".", "args", ".", "n_actions", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.init_hidden": [[23, 25], ["basic_central_controller.CentralBasicMAC.agent.init_hidden().unsqueeze().expand", "basic_central_controller.CentralBasicMAC.agent.init_hidden().unsqueeze", "basic_central_controller.CentralBasicMAC.agent.init_hidden"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "hidden_states", "=", "self", ".", "agent", ".", "init_hidden", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "self", ".", "n_agents", ",", "-", "1", ")", "# bav", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters": [[26, 28], ["basic_central_controller.CentralBasicMAC.agent.parameters"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.parameters"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "agent", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_state": [[29, 31], ["basic_central_controller.CentralBasicMAC.agent.load_state_dict", "other_mac.agent.state_dict"], "methods", ["None"], ["", "def", "load_state", "(", "self", ",", "other_mac", ")", ":", "\n", "        ", "self", ".", "agent", ".", "load_state_dict", "(", "other_mac", ".", "agent", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda": [[32, 34], ["basic_central_controller.CentralBasicMAC.agent.cuda"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "agent", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.save_models": [[35, 37], ["torch.save", "basic_central_controller.CentralBasicMAC.agent.state_dict"], "methods", ["None"], ["", "def", "save_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "th", ".", "save", "(", "self", ".", "agent", ".", "state_dict", "(", ")", ",", "\"{}/central_agent.th\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC.load_models": [[38, 40], ["basic_central_controller.CentralBasicMAC.agent.load_state_dict", "torch.load"], "methods", ["None"], ["", "def", "load_models", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "agent", ".", "load_state_dict", "(", "th", ".", "load", "(", "\"{}/central_agent.th\"", ".", "format", "(", "path", ")", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC._build_agents": [[41, 43], ["None"], "methods", ["None"], ["", "def", "_build_agents", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "agent", "=", "agent_REGISTRY", "[", "self", ".", "args", ".", "central_agent", "]", "(", "input_shape", ",", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC._build_inputs": [[44, 63], ["torch.cat.append", "torch.cat", "[].unsqueeze().repeat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.eye().unsqueeze().expand", "x.reshape", "[].unsqueeze", "torch.zeros_like", "torch.eye().unsqueeze", "torch.eye"], "methods", ["None"], ["", "def", "_build_inputs", "(", "self", ",", "batch", ",", "t", ")", ":", "\n", "# Assumes homogenous agents with flat observations.", "\n", "# Other MACs might want to e.g. delegate building inputs to each agent", "\n", "        ", "bs", "=", "batch", ".", "batch_size", "\n", "inputs", "=", "[", "]", "\n", "inputs", ".", "append", "(", "batch", "[", "\"obs\"", "]", "[", ":", ",", "t", "]", ")", "# b1av", "\n", "if", "self", ".", "args", ".", "central_agent", "==", "\"central_rnn_big\"", ":", "\n", "            ", "inputs", "[", "0", "]", "=", "(", "batch", "[", "\"state\"", "]", "[", ":", ",", "t", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "args", ".", "n_agents", ",", "1", ")", ")", "# b1av", "\n", "# inputs.append(batch[\"state\"][:,t].unsqueeze(1).repeat(1,self.args.n_agents,1))  # b1av", "\n", "", "if", "self", ".", "args", ".", "obs_last_action", ":", "\n", "            ", "if", "t", "==", "0", ":", "\n", "                ", "inputs", ".", "append", "(", "th", ".", "zeros_like", "(", "batch", "[", "\"actions_onehot\"", "]", "[", ":", ",", "t", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "inputs", ".", "append", "(", "batch", "[", "\"actions_onehot\"", "]", "[", ":", ",", "t", "-", "1", "]", ")", "\n", "", "", "if", "self", ".", "args", ".", "obs_agent_id", ":", "\n", "            ", "inputs", ".", "append", "(", "th", ".", "eye", "(", "self", ".", "n_agents", ",", "device", "=", "batch", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "bs", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "inputs", "=", "th", ".", "cat", "(", "[", "x", ".", "reshape", "(", "bs", "*", "self", ".", "n_agents", ",", "-", "1", ")", "for", "x", "in", "inputs", "]", ",", "dim", "=", "1", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.basic_central_controller.CentralBasicMAC._get_input_shape": [[64, 75], ["None"], "methods", ["None"], ["", "def", "_get_input_shape", "(", "self", ",", "scheme", ")", ":", "\n", "        ", "input_shape", "=", "scheme", "[", "\"obs\"", "]", "[", "\"vshape\"", "]", "\n", "if", "self", ".", "args", ".", "central_agent", "==", "\"central_rnn_big\"", ":", "\n", "            ", "input_shape", "+=", "scheme", "[", "\"state\"", "]", "[", "\"vshape\"", "]", "\n", "input_shape", "-=", "scheme", "[", "\"obs\"", "]", "[", "\"vshape\"", "]", "\n", "", "if", "self", ".", "args", ".", "obs_last_action", ":", "\n", "            ", "input_shape", "+=", "scheme", "[", "\"actions_onehot\"", "]", "[", "\"vshape\"", "]", "[", "0", "]", "\n", "", "if", "self", ".", "args", ".", "obs_agent_id", ":", "\n", "            ", "input_shape", "+=", "self", ".", "n_agents", "\n", "\n", "", "return", "input_shape", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.n_controller.NMAC.__init__": [[10, 12], ["pymarl.controllers.basic_controller.BasicMAC.__init__"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scheme", ",", "groups", ",", "args", ")", ":", "\n", "        ", "super", "(", "NMAC", ",", "self", ")", ".", "__init__", "(", "scheme", ",", "groups", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.n_controller.NMAC.select_actions": [[13, 19], ["slice", "n_controller.NMAC.forward", "n_controller.NMAC.action_selector.select_action"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GaussianActionSelector.select_action"], ["", "def", "select_actions", "(", "self", ",", "ep_batch", ",", "t_ep", ",", "t_env", ",", "bs", "=", "slice", "(", "None", ")", ",", "test_mode", "=", "False", ")", ":", "\n", "# Only select actions for the selected batch elements in bs", "\n", "        ", "avail_actions", "=", "ep_batch", "[", "\"avail_actions\"", "]", "[", ":", ",", "t_ep", "]", "\n", "qvals", "=", "self", ".", "forward", "(", "ep_batch", ",", "t_ep", ",", "test_mode", "=", "test_mode", ")", "\n", "chosen_actions", "=", "self", ".", "action_selector", ".", "select_action", "(", "qvals", "[", "bs", "]", ",", "avail_actions", "[", "bs", "]", ",", "t_env", ",", "test_mode", "=", "test_mode", ")", "\n", "return", "chosen_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.n_controller.NMAC.forward": [[20, 29], ["n_controller.NMAC._build_inputs", "n_controller.NMAC.agent", "n_controller.NMAC.agent.eval"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.epsilon_schedules.LinearIncreaseSchedule.eval"], ["", "def", "forward", "(", "self", ",", "ep_batch", ",", "t", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "if", "test_mode", ":", "\n", "            ", "self", ".", "agent", ".", "eval", "(", ")", "\n", "\n", "", "agent_inputs", "=", "self", ".", "_build_inputs", "(", "ep_batch", ",", "t", ")", "\n", "avail_actions", "=", "ep_batch", "[", "\"avail_actions\"", "]", "[", ":", ",", "t", "]", "\n", "agent_outs", ",", "self", ".", "hidden_states", "=", "self", ".", "agent", "(", "agent_inputs", ",", "self", ".", "hidden_states", ")", "\n", "\n", "return", "agent_outs", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.lica_controller.LICAMAC.select_actions": [[9, 14], ["slice", "lica_controller.LICAMAC.forward", "lica_controller.LICAMAC.action_selector.select_action"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.action_selectors.GaussianActionSelector.select_action"], ["    ", "def", "select_actions", "(", "self", ",", "ep_batch", ",", "t_ep", ",", "t_env", ",", "bs", "=", "slice", "(", "None", ")", ",", "test_mode", "=", "False", ")", ":", "\n", "# Only select actions for the selected batch elements in bs", "\n", "        ", "avail_actions", "=", "ep_batch", "[", "\"avail_actions\"", "]", "[", ":", ",", "t_ep", "]", "\n", "agent_outputs", "=", "self", ".", "forward", "(", "ep_batch", ",", "t_ep", ",", "test_mode", "=", "test_mode", ",", "gumbel", "=", "(", "not", "test_mode", ")", ")", "\n", "return", "self", ".", "action_selector", ".", "select_action", "(", "agent_outputs", "[", "bs", "]", ",", "avail_actions", "[", "bs", "]", ",", "t_env", ",", "test_mode", "=", "test_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.lica_controller.LICAMAC.forward": [[15, 35], ["lica_controller.LICAMAC._build_inputs", "lica_controller.LICAMAC.agent", "agent_outs.reshape.reshape.view", "getattr", "torch.nn.functional.softmax", "agent_outs.reshape.reshape.reshape", "avail_actions.reshape", "agent_outs.reshape.reshape.view"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs"], ["", "def", "forward", "(", "self", ",", "ep_batch", ",", "t", ",", "test_mode", "=", "False", ",", "gumbel", "=", "False", ")", ":", "\n", "        ", "agent_inputs", "=", "self", ".", "_build_inputs", "(", "ep_batch", ",", "t", ")", "\n", "avail_actions", "=", "ep_batch", "[", "\"avail_actions\"", "]", "[", ":", ",", "t", "]", "\n", "agent_outs", ",", "self", ".", "hidden_states", "=", "self", ".", "agent", "(", "agent_inputs", ",", "self", ".", "hidden_states", ")", "\n", "\n", "# Softmax the agent outputs if they're policy logits", "\n", "if", "self", ".", "agent_output_type", "==", "\"pi_logits\"", ":", "\n", "\n", "            ", "if", "getattr", "(", "self", ".", "args", ",", "\"mask_before_softmax\"", ",", "True", ")", ":", "\n", "# Make the logits for unavailable actions very negative to minimise their affect on the softmax", "\n", "                ", "agent_outs", "=", "agent_outs", ".", "reshape", "(", "ep_batch", ".", "batch_size", "*", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "reshaped_avail_actions", "=", "avail_actions", ".", "reshape", "(", "ep_batch", ".", "batch_size", "*", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "agent_outs", "[", "reshaped_avail_actions", "==", "0", "]", "=", "-", "1e10", "\n", "\n", "", "if", "gumbel", ":", "\n", "                ", "return", "agent_outs", ".", "view", "(", "ep_batch", ".", "batch_size", ",", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "\n", "", "agent_outs", "=", "th", ".", "nn", ".", "functional", ".", "softmax", "(", "agent_outs", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "agent_outs", ".", "view", "(", "ep_batch", ".", "batch_size", ",", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.agggnn.AggGNN.__init__": [[35, 48], ["torch_geometric.nn.MessagePassing.__init__", "pymarl.modules.layer.genagg.GenAggSparse"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["\t", "def", "__init__", "(", "self", ",", "\n", "fupdate", ":", "Callable", "=", "lambda", "x_i", ",", "x_j_agg", ":", "x_i", "+", "x_j_agg", ",", "\n", "fcom", ":", "Callable", "=", "lambda", "x_i", ",", "x_j", ":", "x_j", ",", "\n", "learnable", ":", "bool", "=", "True", ",", "\n", "aggr", ":", "str", "=", "'genagg'", ",", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "aggr", "==", "'genagg'", ":", "\n", "\t\t\t", "self", ".", "aggr", "=", "GenAggSparse", "(", "p", "=", "1.", ",", "a", "=", "0.", ",", "shift", "=", "False", ",", "learnable", "=", "learnable", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "aggr", "=", "aggr", "\n", "", "self", ".", "fcom", "=", "fcom", "\n", "self", ".", "fupdate", "=", "fupdate", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.agggnn.AggGNN.forward": [[49, 53], ["agggnn.AggGNN.propagate", "agggnn.AggGNN.fupdate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ",", "edge_index", ":", "Adj", ")", "->", "Tensor", ":", "\n", "\t\t", "neighbour_agg", "=", "self", ".", "propagate", "(", "edge_index", "=", "edge_index", ",", "x", "=", "x", ")", "\n", "y", "=", "self", ".", "fupdate", "(", "x", ",", "neighbour_agg", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.agggnn.AggGNN.aggregate": [[54, 59], ["agggnn.AggGNN.aggr", "super().aggregate"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.gnns.MHAconv.aggregate"], ["", "def", "aggregate", "(", "self", ",", "inputs", ":", "Tensor", ",", "index", ":", "Tensor", ",", "ptr", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "dim_size", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "\t\t", "if", "self", ".", "aggr", "==", "'genagg'", ":", "\n", "\t\t\t", "return", "self", ".", "aggr", "(", "inputs", ",", "index", ",", "dim_size", "=", "dim_size", ")", "\n", "", "else", ":", "\n", "\t\t\t", "return", "super", "(", ")", ".", "aggregate", "(", "inputs", "=", "inputs", ",", "index", "=", "index", ",", "ptr", "=", "ptr", ",", "dim_size", "=", "dim_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.agggnn.AggGNN.message": [[60, 62], ["agggnn.AggGNN.fcom"], "methods", ["None"], ["", "", "def", "message", "(", "self", ",", "x_i", ":", "Tensor", ",", "x_j", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "\t\t", "return", "self", ".", "fcom", "(", "x_i", ",", "x_j", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.agggnn.patch_conv_with_aggr": [[15, 33], ["super().__init__", "aggr_cls", "agggnn..aggr"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["def", "patch_conv_with_aggr", "(", "cls", ",", "aggr_cls", ",", "*", "aggr_args", ",", "**", "aggr_kwargs", ")", ":", "\n", "\t", "\"\"\"Patch a general pytorch_geometric conv layer to\n\tuse a custom aggregation function\"\"\"", "\n", "class", "PatchedConv", "(", "cls", ")", ":", "\n", "\t\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# Build aggr at init so we can create", "\n", "# multiple gnn layers with differing weights", "\n", "self", ".", "aggr", "=", "aggr_cls", "(", "*", "aggr_args", ",", "**", "aggr_kwargs", ")", "\n", "\n", "", "def", "aggregate", "(", "self", ",", "\n", "inputs", ":", "Tensor", ",", "index", ":", "Tensor", ",", "\n", "ptr", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "dim_size", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", "->", "Tensor", ":", "\n", "\t\t\t", "return", "self", ".", "aggr", "(", "inputs", ",", "index", ",", "dim_size", "=", "dim_size", ")", "\n", "\n", "", "", "return", "PatchedConv", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.agggnn.create_agg_gnn": [[64, 85], ["pymarl.modules.layer.mlp.MLP", "functools.partial", "agggnn.AggGNN", "AggGNN.add_module", "f", "pymarl.modules.layer.mlp.MLP", "functools.partial", "AggGNN.add_module", "torch.cat", "pymarl.modules.layer.mlp.layers", "pymarl.modules.layer.mlp.layers"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.layers", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.layers"], ["", "", "def", "create_agg_gnn", "(", "in_dim", ",", "out_dim", ",", "nlayers", "=", "2", ",", "layernorm", "=", "True", ",", "midmult", "=", "1.", ",", "fcom", "=", "None", ",", "aggr", "=", "'genagg'", ")", ":", "\n", "# Creates a GNN with the given parameters", "\n", "# nlayers: the number of layers for both MLPs (3 layers means [input_dim, hidden1, hidden2, output_dim])", "\n", "# layernorm: whether or not to include layernorm in both MLPs", "\n", "# midmult: the middle layer of each MLP will be of size [midmult * (input_dim + output_dim) / 2]", "\n", "\t", "def", "compose", "(", "*", "inputs", ",", "f", "=", "None", ")", ":", "\n", "\t\t", "return", "f", "(", "torch", ".", "cat", "(", "inputs", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "", "fcom_mlp", "=", "(", "fcom", "is", "None", ")", "\n", "if", "fcom_mlp", ":", "\n", "\t\t", "fcom_net", "=", "MLP", "(", "input_dim", "=", "in_dim", "*", "2", ",", "output_dim", "=", "in_dim", ",", "layernorm", "=", "layernorm", ",", "\n", "layer_sizes", "=", "layers", "(", "input_dim", "=", "in_dim", "*", "2", ",", "output_dim", "=", "in_dim", ",", "nlayers", "=", "nlayers", ",", "midmult", "=", "midmult", ")", ")", "\n", "fcom", "=", "partial", "(", "compose", ",", "f", "=", "fcom_net", ")", "\n", "", "fupdate_net", "=", "MLP", "(", "input_dim", "=", "in_dim", "*", "2", ",", "output_dim", "=", "out_dim", ",", "layernorm", "=", "layernorm", ",", "\n", "layer_sizes", "=", "layers", "(", "input_dim", "=", "in_dim", "*", "2", ",", "output_dim", "=", "out_dim", ",", "nlayers", "=", "nlayers", ",", "midmult", "=", "midmult", ")", ")", "\n", "fupdate", "=", "partial", "(", "compose", ",", "f", "=", "fupdate_net", ")", "\n", "gnn", "=", "AggGNN", "(", "fupdate", "=", "fupdate", ",", "fcom", "=", "fcom", ",", "aggr", "=", "aggr", ")", "\n", "if", "fcom_mlp", ":", "\n", "\t\t", "gnn", ".", "add_module", "(", "'f_com'", ",", "fcom_net", ")", "\n", "", "gnn", ".", "add_module", "(", "'f_update'", ",", "fupdate_net", ")", "\n", "return", "gnn", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.gnns.MHAconv.__init__": [[12, 22], ["torch_geometric.nn.MessagePassing.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "heads", ",", "embed_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "emb_size", "=", "embed_size", "\n", "self", ".", "aggr", "=", "'sum'", "\n", "\n", "self", ".", "tokeys", "=", "nn", ".", "Linear", "(", "self", ".", "input_size", ",", "self", ".", "emb_size", "*", "self", ".", "heads", ",", "bias", "=", "False", ")", "\n", "self", ".", "toqueries", "=", "nn", ".", "Linear", "(", "self", ".", "input_size", ",", "self", ".", "emb_size", "*", "self", ".", "heads", ",", "bias", "=", "False", ")", "\n", "self", ".", "tovalues", "=", "nn", ".", "Linear", "(", "self", ".", "input_size", ",", "self", ".", "emb_size", "*", "self", ".", "heads", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.gnns.MHAconv.forward": [[23, 39], ["x.size", "gnns.MHAconv.tokeys", "gnns.MHAconv.toqueries", "gnns.MHAconv.tovalues", "gnns.MHAconv.edge_updater", "gnns.MHAconv.propagate", "gnns.MHAconv.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ",", "edge_index", ":", "Tensor", ")", ":", "\n", "# x: batch*n_agents x  input_size", "\n", "        ", "n_agents", ",", "input_size", "=", "x", ".", "size", "(", ")", "\n", "\n", "keys", "=", "self", ".", "tokeys", "(", "x", ")", "\n", "queries", "=", "self", ".", "toqueries", "(", "x", ")", "\n", "values", "=", "self", ".", "tovalues", "(", "x", ")", "\n", "\n", "queries", "=", "queries", "/", "(", "self", ".", "emb_size", "**", "(", "1", "/", "4", ")", ")", "\n", "keys", "=", "keys", "/", "(", "self", ".", "emb_size", "**", "(", "1", "/", "4", ")", ")", "\n", "\n", "weights", "=", "self", ".", "edge_updater", "(", "edge_index", "=", "edge_index", ",", "keys", "=", "keys", ",", "queries", "=", "queries", ",", "adj", "=", "edge_index", ")", "\n", "\n", "agg", "=", "self", ".", "propagate", "(", "edge_index", "=", "edge_index", ",", "x", "=", "x", ",", "weights", "=", "weights", ",", "values", "=", "values", ")", "\n", "\n", "return", "agg", ".", "view", "(", "n_agents", ",", "self", ".", "heads", "*", "self", ".", "emb_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.gnns.MHAconv.message": [[41, 46], ["values_j.view.view.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "values_j", ":", "Tensor", ",", "weights", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "n_edges", ",", "_", "=", "values_j", ".", "shape", "\n", "values_j", "=", "values_j", ".", "view", "(", "n_edges", ",", "self", ".", "heads", ",", "self", ".", "emb_size", ")", "\n", "out", "=", "values_j", "*", "weights", "[", ":", ",", ":", ",", "None", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.gnns.MHAconv.aggregate": [[47, 53], ["torch_scatter.scatter", "torch_scatter.scatter.view", "inputs.view"], "methods", ["None"], ["", "def", "aggregate", "(", "self", ",", "inputs", ":", "Tensor", ",", "index", ":", "Tensor", ",", "\n", "ptr", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "dim_size", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "n_edges", ",", "heads", ",", "emb_size", "=", "inputs", ".", "shape", "\n", "out", "=", "scatter", "(", "inputs", ".", "view", "(", "n_edges", ",", "self", ".", "heads", "*", "self", ".", "emb_size", ")", ",", "index", ",", "dim", "=", "self", ".", "node_dim", ",", "dim_size", "=", "dim_size", ",", "reduce", "=", "'sum'", ")", "\n", "return", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "self", ".", "heads", ",", "self", ".", "emb_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.gnns.MHAconv.edge_update": [[54, 61], ["keys_j.view.view.view", "queries_i.view.view.view", "torch_scatter.composite.scatter_softmax"], "methods", ["None"], ["", "def", "edge_update", "(", "self", ",", "keys_j", ":", "Tensor", ",", "queries_i", ":", "Tensor", ",", "adj", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "n_edges", ",", "_", "=", "keys_j", ".", "shape", "\n", "keys_j", "=", "keys_j", ".", "view", "(", "n_edges", ",", "self", ".", "heads", ",", "self", ".", "emb_size", ")", "\n", "queries_i", "=", "queries_i", ".", "view", "(", "n_edges", ",", "self", ".", "heads", ",", "self", ".", "emb_size", ")", "\n", "dot", "=", "(", "keys_j", "*", "queries_i", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "weights", "=", "scatter_softmax", "(", "src", "=", "dot", ",", "index", "=", "adj", "[", "1", ",", ":", "]", ",", "dim", "=", "0", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.gnns.MHAconv.forward_batch": [[62, 95], ["x.size", "gnns.MHAconv.tokeys().view", "gnns.MHAconv.toqueries().view", "gnns.MHAconv.tovalues().view", "keys.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "queries.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "values.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "torch.bmm", "torch.nn.functional.softmax", "torch.bmm().view", "out.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "keys.transpose().contiguous().view.transpose().contiguous().view.transpose", "torch.nn.functional.softmax.size", "adj.unsqueeze().repeat().view().transpose", "gnns.MHAconv.tokeys", "gnns.MHAconv.toqueries", "gnns.MHAconv.tovalues", "keys.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "queries.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "values.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "float", "torch.bmm", "out.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "torch.isnan", "adj.unsqueeze().repeat().view", "keys.transpose().contiguous().view.transpose().contiguous().view.transpose", "queries.transpose().contiguous().view.transpose().contiguous().view.transpose", "values.transpose().contiguous().view.transpose().contiguous().view.transpose", "out.transpose().contiguous().view.transpose().contiguous().view.transpose", "adj.unsqueeze().repeat", "adj.unsqueeze"], "methods", ["None"], ["", "def", "forward_batch", "(", "self", ",", "x", ",", "adj", "=", "None", ")", ":", "\n", "        ", "b", ",", "t", ",", "hin", "=", "x", ".", "size", "(", ")", "\n", "assert", "hin", "==", "self", ".", "input_size", ",", "f'Input size {{hin}} should match {{self.input_size}}'", "\n", "\n", "h", "=", "self", ".", "heads", "\n", "e", "=", "self", ".", "emb_size", "\n", "\n", "keys", "=", "self", ".", "tokeys", "(", "x", ")", ".", "view", "(", "b", ",", "t", ",", "h", ",", "e", ")", "\n", "queries", "=", "self", ".", "toqueries", "(", "x", ")", ".", "view", "(", "b", ",", "t", ",", "h", ",", "e", ")", "\n", "values", "=", "self", ".", "tovalues", "(", "x", ")", ".", "view", "(", "b", ",", "t", ",", "h", ",", "e", ")", "\n", "\n", "# dot-product attention", "\n", "# folding heads to batch dimensions", "\n", "keys", "=", "keys", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", "*", "h", ",", "t", ",", "e", ")", "\n", "queries", "=", "queries", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", "*", "h", ",", "t", ",", "e", ")", "\n", "values", "=", "values", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", "*", "h", ",", "t", ",", "e", ")", "\n", "\n", "queries", "=", "queries", "/", "(", "e", "**", "(", "1", "/", "4", ")", ")", "\n", "keys", "=", "keys", "/", "(", "e", "**", "(", "1", "/", "4", ")", ")", "\n", "\n", "dot", "=", "torch", ".", "bmm", "(", "queries", ",", "keys", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "assert", "dot", ".", "size", "(", ")", "==", "(", "b", "*", "h", ",", "t", ",", "t", ")", "\n", "\n", "if", "adj", "is", "not", "None", ":", "\n", "            ", "adj_exp", "=", "adj", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "(", "1", ",", "h", ",", "1", ",", "1", ")", ")", ".", "view", "(", "b", "*", "h", ",", "t", ",", "t", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "dot", "[", "adj_exp", "==", "0", "]", "=", "-", "float", "(", "'inf'", ")", "\n", "\n", "# row wise self attention probabilities", "\n", "", "dot", "=", "nn", ".", "functional", ".", "softmax", "(", "dot", ",", "dim", "=", "2", ")", "\n", "out", "=", "torch", ".", "bmm", "(", "dot", ",", "values", ")", ".", "view", "(", "b", ",", "h", ",", "t", ",", "e", ")", "\n", "out", "=", "out", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "t", ",", "h", "*", "e", ")", "\n", "out", "[", "torch", ".", "isnan", "(", "out", ")", "]", "=", "0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.gnns.test1": [[101, 121], ["torch.randn", "gnns.MHAconv", "GNNwrapper", "gnns.MHAconv.forward_batch", "GNNwrapper.forward", "print", "print", "torch.rand", "torch.norm"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.gnns.MHAconv.forward_batch", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward"], ["", "", "def", "test1", "(", ")", ":", "\n", "    ", "from", "pymarl", ".", "modules", ".", "layer", ".", "gnn_wrapper", "import", "GNNwrapper", "\n", "\n", "batch_size", "=", "1", "\n", "n_agents", "=", "5", "\n", "input_size", "=", "4", "\n", "heads", "=", "2", "\n", "embed_size", "=", "3", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "batch_size", ",", "n_agents", ",", "input_size", ")", "\n", "A", "=", "torch", ".", "rand", "(", "batch_size", ",", "n_agents", ",", "n_agents", ")", "<", "0.3", "\n", "\n", "gnn", "=", "MHAconv", "(", "input_size", "=", "input_size", ",", "heads", "=", "heads", ",", "embed_size", "=", "embed_size", ")", "\n", "dense_gnn", "=", "GNNwrapper", "(", "gnn", ")", "\n", "\n", "out_truth", "=", "gnn", ".", "forward_batch", "(", "x", "=", "x", ",", "adj", "=", "A", ")", "\n", "out_gnn", "=", "dense_gnn", ".", "forward", "(", "X", "=", "x", ",", "A", "=", "A", ")", "\n", "\n", "print", "(", "out_gnn", ",", "out_truth", ")", "\n", "print", "(", "torch", ".", "norm", "(", "out_truth", "-", "out_gnn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.gnns.test2": [[122, 141], ["torch.randn", "torch.eye().repeat", "gnns.MHAconv", "GNNwrapper", "GNNwrapper.forward", "print", "torch.eye"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward"], ["", "def", "test2", "(", ")", ":", "\n", "    ", "from", "pymarl", ".", "modules", ".", "layer", ".", "gnn_wrapper", "import", "GNNwrapper", "\n", "\n", "batch_size", "=", "1", "\n", "n_agents", "=", "5", "\n", "input_size", "=", "4", "\n", "heads", "=", "2", "\n", "embed_size", "=", "3", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "batch_size", ",", "n_agents", ",", "input_size", ")", "\n", "A", "=", "torch", ".", "eye", "(", "n_agents", ")", ".", "repeat", "(", "(", "batch_size", ",", "1", ",", "1", ")", ")", "\n", "A", "[", ":", ",", "0", ",", "1", "]", "=", "1", "\n", "\n", "gnn", "=", "MHAconv", "(", "input_size", "=", "input_size", ",", "heads", "=", "heads", ",", "embed_size", "=", "embed_size", ")", "\n", "dense_gnn", "=", "GNNwrapper", "(", "gnn", ")", "\n", "\n", "out_gnn", "=", "dense_gnn", ".", "forward", "(", "X", "=", "x", ",", "A", "=", "A", ")", "\n", "\n", "print", "(", "out_gnn", ")", "\n", "# if a_ij = 1 then agent i receives data from agent j", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.self_atten.SelfAttention.__init__": [[6, 15], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "heads", ",", "embed_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "emb_size", "=", "embed_size", "\n", "\n", "self", ".", "tokeys", "=", "nn", ".", "Linear", "(", "self", ".", "input_size", ",", "self", ".", "emb_size", "*", "heads", ",", "bias", "=", "False", ")", "\n", "self", ".", "toqueries", "=", "nn", ".", "Linear", "(", "self", ".", "input_size", ",", "self", ".", "emb_size", "*", "heads", ",", "bias", "=", "False", ")", "\n", "self", ".", "tovalues", "=", "nn", ".", "Linear", "(", "self", ".", "input_size", ",", "self", ".", "emb_size", "*", "heads", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.self_atten.SelfAttention.forward": [[16, 48], ["x.size", "self_atten.SelfAttention.SelfAttention.tokeys().view", "self_atten.SelfAttention.SelfAttention.toqueries().view", "self_atten.SelfAttention.SelfAttention.tovalues().view", "keys.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "queries.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "values.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "out.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "keys.transpose().contiguous().view.transpose().contiguous().view.transpose", "torch.softmax.size", "adj.unsqueeze().repeat().view().transpose", "self_atten.SelfAttention.SelfAttention.tokeys", "self_atten.SelfAttention.SelfAttention.toqueries", "self_atten.SelfAttention.SelfAttention.tovalues", "keys.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "queries.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "values.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "adj.unsqueeze().repeat().view", "keys.transpose().contiguous().view.transpose().contiguous().view.transpose", "queries.transpose().contiguous().view.transpose().contiguous().view.transpose", "values.transpose().contiguous().view.transpose().contiguous().view.transpose", "out.transpose().contiguous().view.transpose().contiguous().view.transpose", "adj.unsqueeze().repeat", "adj.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", "=", "None", ")", ":", "\n", "        ", "b", ",", "t", ",", "hin", "=", "x", ".", "size", "(", ")", "\n", "assert", "hin", "==", "self", ".", "input_size", ",", "f'Input size {{hin}} should match {{self.input_size}}'", "\n", "\n", "h", "=", "self", ".", "heads", "\n", "e", "=", "self", ".", "emb_size", "\n", "\n", "keys", "=", "self", ".", "tokeys", "(", "x", ")", ".", "view", "(", "b", ",", "t", ",", "h", ",", "e", ")", "\n", "queries", "=", "self", ".", "toqueries", "(", "x", ")", ".", "view", "(", "b", ",", "t", ",", "h", ",", "e", ")", "\n", "values", "=", "self", ".", "tovalues", "(", "x", ")", ".", "view", "(", "b", ",", "t", ",", "h", ",", "e", ")", "\n", "\n", "# dot-product attention", "\n", "# folding heads to batch dimensions", "\n", "keys", "=", "keys", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", "*", "h", ",", "t", ",", "e", ")", "\n", "queries", "=", "queries", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", "*", "h", ",", "t", ",", "e", ")", "\n", "values", "=", "values", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", "*", "h", ",", "t", ",", "e", ")", "\n", "\n", "queries", "=", "queries", "/", "(", "e", "**", "(", "1", "/", "4", ")", ")", "\n", "keys", "=", "keys", "/", "(", "e", "**", "(", "1", "/", "4", ")", ")", "\n", "\n", "dot", "=", "torch", ".", "bmm", "(", "queries", ",", "keys", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "assert", "dot", ".", "size", "(", ")", "==", "(", "b", "*", "h", ",", "t", ",", "t", ")", "\n", "\n", "if", "adj", "is", "not", "None", ":", "\n", "            ", "adj_exp", "=", "adj", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "(", "1", ",", "h", ",", "1", ",", "1", ")", ")", ".", "view", "(", "b", "*", "h", ",", "t", ",", "t", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "dot", "[", "adj_exp", "==", "0", "]", "=", "-", "1e38", "# substitute fo -inf so that softmax works if all elements are -inf (otherwise nan)", "\n", "\n", "# row wise self attention probabilities", "\n", "", "dot", "=", "F", ".", "softmax", "(", "dot", ",", "dim", "=", "2", ")", "\n", "out", "=", "torch", ".", "bmm", "(", "dot", ",", "values", ")", ".", "view", "(", "b", ",", "h", ",", "t", ",", "e", ")", "\n", "out", "=", "out", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "t", ",", "h", "*", "e", ")", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mixer.Mixer.__init__": [[9, 25], ["torch.nn.Module.__init__", "pymarl.modules.layer.mlp.layers", "pymarl.modules.layer.mlp.layers", "pymarl.modules.layer.mlp.MLP", "pymarl.modules.layer.mlp.MultiModule", "pymarl.modules.layer.mlp.MLP", "pymarl.modules.layer.mlp.MultiModule"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.layers", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.layers"], ["\t", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "hidden_dim", ",", "psi_layers", "=", "2", ",", "phi_layers", "=", "2", ",", "batchnorm", "=", "False", ",", "midmult", "=", "1.", ",", "heterogeneous", "=", "False", ",", "n_agents", "=", "None", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "psi_layers", "=", "psi_layers", "\n", "self", ".", "phi_layers", "=", "phi_layers", "\n", "if", "self", ".", "psi_layers", ">", "0", ":", "\n", "\t\t\t", "psi_layer_sizes", "=", "layers", "(", "input_dim", "=", "input_dim", ",", "output_dim", "=", "hidden_dim", ",", "nlayers", "=", "psi_layers", ",", "midmult", "=", "midmult", ")", "\n", "if", "not", "heterogeneous", ":", "\n", "\t\t\t\t", "self", ".", "psi", "=", "MLP", "(", "input_dim", "=", "input_dim", ",", "output_dim", "=", "hidden_dim", ",", "layer_sizes", "=", "psi_layer_sizes", ",", "batchnorm", "=", "batchnorm", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "psi", "=", "MultiModule", "(", "n_agents", "=", "n_agents", ",", "module", "=", "MLP", ",", "input_dim", "=", "input_dim", ",", "output_dim", "=", "hidden_dim", ",", "layer_sizes", "=", "psi_layer_sizes", ",", "batchnorm", "=", "batchnorm", ")", "\n", "", "", "if", "self", ".", "phi_layers", ">", "0", ":", "\n", "\t\t\t", "phi_layer_sizes", "=", "layers", "(", "input_dim", "=", "hidden_dim", ",", "output_dim", "=", "output_dim", ",", "nlayers", "=", "phi_layers", ",", "midmult", "=", "midmult", ")", "\n", "if", "not", "heterogeneous", ":", "\n", "\t\t\t\t", "self", ".", "phi", "=", "MLP", "(", "input_dim", "=", "hidden_dim", ",", "output_dim", "=", "output_dim", ",", "layer_sizes", "=", "phi_layer_sizes", ",", "batchnorm", "=", "batchnorm", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "phi", "=", "MultiModule", "(", "n_agents", "=", "n_agents", ",", "module", "=", "MLP", ",", "input_dim", "=", "hidden_dim", ",", "output_dim", "=", "output_dim", ",", "layer_sizes", "=", "phi_layer_sizes", ",", "batchnorm", "=", "batchnorm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mixer.Mixer.forward": [[27, 40], ["mixer.Mixer.sum", "mixer.Mixer.psi", "mixer.Mixer.phi"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "# X: batch x N x input_dim", "\n", "# output: batch x output_dim", "\n", "\t\t", "if", "self", ".", "psi_layers", ">", "0", ":", "\n", "\t\t\t", "local_embed", "=", "self", ".", "psi", "(", "X", ")", "\n", "", "else", ":", "\n", "\t\t\t", "local_embed", "=", "X", "\n", "", "local_embed_sum", "=", "local_embed", ".", "sum", "(", "dim", "=", "-", "2", ")", "\n", "if", "self", ".", "phi_layers", ">", "0", ":", "\n", "\t\t\t", "global_embed", "=", "self", ".", "phi", "(", "local_embed_sum", ")", "\n", "", "else", ":", "\n", "\t\t\t", "global_embed", "=", "local_embed_sum", "\n", "", "return", "global_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mixer.AggMixer.__init__": [[45, 59], ["torch.nn.Module.__init__", "pymarl.modules.layer.genagg.GenAgg", "pymarl.modules.layer.mlp.layers", "pymarl.modules.layer.mlp.layers", "pymarl.modules.layer.mlp.MLP", "pymarl.modules.layer.mlp.MLP", "pymarl.modules.layer.mlp.MultiModule"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.layers", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.layers"], ["\t", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "hidden_dim", ",", "psi_layers", "=", "2", ",", "phi_layers", "=", "2", ",", "batchnorm", "=", "False", ",", "midmult", "=", "1.", ",", "heterogeneous", "=", "False", ",", "n_agents", "=", "None", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "psi_layers", "=", "psi_layers", "\n", "self", ".", "phi_layers", "=", "phi_layers", "\n", "self", ".", "agg", "=", "GenAgg", "(", "p", "=", "1.", ",", "a", "=", "0.", ",", "shift", "=", "True", ",", "learnable", "=", "True", ")", "\n", "if", "self", ".", "psi_layers", ">", "0", ":", "\n", "\t\t\t", "psi_layer_sizes", "=", "layers", "(", "input_dim", "=", "input_dim", ",", "output_dim", "=", "hidden_dim", ",", "nlayers", "=", "psi_layers", ",", "midmult", "=", "midmult", ")", "\n", "if", "not", "heterogeneous", ":", "\n", "\t\t\t\t", "self", ".", "psi", "=", "MLP", "(", "input_dim", "=", "input_dim", ",", "output_dim", "=", "hidden_dim", ",", "layer_sizes", "=", "psi_layer_sizes", ",", "batchnorm", "=", "batchnorm", ",", "nonlinearity", "=", "nn", ".", "PReLU", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "psi", "=", "MultiModule", "(", "n_agents", "=", "n_agents", ",", "module", "=", "MLP", ",", "input_dim", "=", "input_dim", ",", "output_dim", "=", "hidden_dim", ",", "layer_sizes", "=", "psi_layer_sizes", ",", "batchnorm", "=", "batchnorm", ",", "nonlinearity", "=", "nn", ".", "PReLU", ")", "\n", "", "", "if", "self", ".", "phi_layers", ">", "0", ":", "\n", "\t\t\t", "phi_layer_sizes", "=", "layers", "(", "input_dim", "=", "hidden_dim", ",", "output_dim", "=", "output_dim", ",", "nlayers", "=", "phi_layers", ",", "midmult", "=", "midmult", ")", "\n", "self", ".", "phi", "=", "MLP", "(", "input_dim", "=", "hidden_dim", ",", "output_dim", "=", "output_dim", ",", "layer_sizes", "=", "phi_layer_sizes", ",", "batchnorm", "=", "batchnorm", ",", "nonlinearity", "=", "nn", ".", "PReLU", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mixer.AggMixer.forward": [[61, 74], ["mixer.AggMixer.agg", "mixer.AggMixer.psi", "mixer.AggMixer.phi", "mixer.AggMixer.sum().unsqueeze", "mixer.AggMixer.sum"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "# X: batch x N x input_dim", "\n", "# output: batch x output_dim", "\n", "\t\t", "if", "self", ".", "psi_layers", ">", "0", ":", "\n", "\t\t\t", "local_embed", "=", "self", ".", "psi", "(", "X", ")", "\n", "", "else", ":", "\n", "\t\t\t", "local_embed", "=", "X", "\n", "", "local_embed_sum", "=", "self", ".", "agg", "(", "local_embed", ")", "\n", "if", "self", ".", "phi_layers", ">", "0", ":", "\n", "\t\t\t", "global_embed", "=", "self", ".", "phi", "(", "local_embed_sum", ")", "\n", "", "else", ":", "\n", "\t\t\t", "global_embed", "=", "local_embed_sum", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "return", "global_embed", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.MLP.__init__": [[7, 23], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "layers.append", "len", "torch.Linear", "torch.Linear", "layers.append", "len", "layers.append", "layers.append", "nonlinearity", "mlp.BatchNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["\t", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "layer_sizes", ",", "batchnorm", "=", "False", ",", "layernorm", "=", "False", ",", "nonlinearity", "=", "nn", ".", "ReLU", ")", ":", "\n", "\t\t", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "batchnorm", "=", "batchnorm", "\n", "layer_sizes_full", "=", "[", "input_dim", "]", "+", "layer_sizes", "+", "[", "output_dim", "]", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "layer_sizes_full", ")", "-", "1", ")", ":", "\n", "\t\t\t", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "layer_sizes_full", "[", "i", "]", ",", "layer_sizes_full", "[", "i", "+", "1", "]", ")", ")", "\n", "if", "i", "!=", "len", "(", "layer_sizes_full", ")", "-", "2", ":", "\n", "\t\t\t\t", "if", "batchnorm", ":", "\n", "\t\t\t\t\t", "layers", ".", "append", "(", "BatchNorm", "(", "layer_sizes_full", "[", "i", "+", "1", "]", ")", ")", "\n", "", "if", "layernorm", ":", "\n", "\t\t\t\t\t", "layers", ".", "append", "(", "nn", ".", "LayerNorm", "(", "layer_sizes_full", "[", "i", "+", "1", "]", ")", ")", "\n", "", "layers", ".", "append", "(", "nonlinearity", "(", ")", ")", "\n", "", "", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.MLP.forward": [[24, 26], ["mlp.MLP.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "\t\t", "return", "self", ".", "net", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.MultiModule.__init__": [[31, 36], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "list", "mlp.MultiModule.mlps.children", "module", "range"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["\t", "def", "__init__", "(", "self", ",", "n_agents", ",", "module", "=", "MLP", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_agents", "=", "n_agents", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", "[", "module", "(", "*", "args", ",", "**", "kwargs", ")", "for", "_", "in", "range", "(", "self", ".", "n_agents", ")", "]", ")", "\n", "self", ".", "mlp_modules", "=", "list", "(", "self", ".", "mlps", ".", "children", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.MultiModule.forward": [[37, 40], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "mlp.select_index", "range"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.select_index"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "# B1, ..., Bn, n_agents, input_dim", "\n", "\t\t", "return", "torch", ".", "stack", "(", "[", "self", ".", "mlp_modules", "[", "i", "]", "(", "select_index", "(", "X", ",", "-", "2", ",", "i", ")", ")", "for", "i", "in", "range", "(", "self", ".", "n_agents", ")", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.BatchNorm.__init__": [[45, 48], ["torch.Module.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.BatchNorm.forward": [[49, 55], ["x.reshape", "mlp.BatchNorm.bn", "mlp.BatchNorm.reshape", "numpy.prod"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "shape", "=", "x", ".", "shape", "\n", "x_r", "=", "x", ".", "reshape", "(", "np", ".", "prod", "(", "shape", "[", ":", "-", "1", "]", ")", ",", "shape", "[", "-", "1", "]", ")", "\n", "y_r", "=", "self", ".", "bn", "(", "x_r", ")", "\n", "y", "=", "y_r", ".", "reshape", "(", "shape", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.layers": [[57, 64], ["max", "numpy.around().astype", "list", "numpy.around().astype", "numpy.around", "numpy.concatenate", "numpy.logspace", "numpy.around", "numpy.log10", "numpy.log10", "numpy.logspace", "numpy.log10", "numpy.log10"], "function", ["None"], ["", "", "def", "layers", "(", "input_dim", ",", "output_dim", ",", "nlayers", "=", "1", ",", "midmult", "=", "1", ")", ":", "\n", "\t", "midlayersize", "=", "midmult", "*", "(", "input_dim", "+", "output_dim", ")", "//", "2", "\n", "midlayersize", "=", "max", "(", "midlayersize", ",", "1", ")", "\n", "nlayers", "+=", "2", "\n", "layers1", "=", "np", ".", "around", "(", "np", ".", "logspace", "(", "np", ".", "log10", "(", "input_dim", ")", ",", "np", ".", "log10", "(", "midlayersize", ")", ",", "num", "=", "(", "nlayers", ")", "//", "2", ")", ")", ".", "astype", "(", "int", ")", "\n", "layers2", "=", "np", ".", "around", "(", "np", ".", "logspace", "(", "np", ".", "log10", "(", "midlayersize", ")", ",", "np", ".", "log10", "(", "output_dim", ")", ",", "num", "=", "(", "nlayers", "+", "1", ")", "//", "2", ")", ")", ".", "astype", "(", "int", ")", "[", "1", ":", "]", "\n", "return", "list", "(", "np", ".", "concatenate", "(", "[", "layers1", ",", "layers2", "]", ")", "[", "1", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.build_mlp": [[66, 70], ["mlp.layers", "mlp.MLP"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.layers"], ["", "def", "build_mlp", "(", "input_dim", ",", "output_dim", ",", "nlayers", "=", "1", ",", "midmult", "=", "1.", ",", "batchnorm", "=", "False", ",", "layernorm", "=", "False", ",", "nonlinearity", "=", "nn", ".", "ReLU", ")", ":", "\n", "\t", "mlp_layers", "=", "layers", "(", "input_dim", "=", "input_dim", ",", "output_dim", "=", "output_dim", ",", "nlayers", "=", "nlayers", ",", "midmult", "=", "midmult", ")", "\n", "mlp", "=", "MLP", "(", "input_dim", "=", "input_dim", ",", "output_dim", "=", "output_dim", ",", "layer_sizes", "=", "layers", ",", "batchnorm", "=", "batchnorm", ",", "layernorm", "=", "layernorm", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "return", "mlp", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.select_index": [[72, 76], ["arr.__getitem__", "len", "slice"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.__getitem__"], ["", "def", "select_index", "(", "arr", ",", "dim", ",", "idx", ")", ":", "\n", "\t", "idx_list", "=", "[", "slice", "(", "None", ")", "]", "*", "len", "(", "arr", ".", "shape", ")", "\n", "idx_list", "[", "dim", "]", "=", "idx", "\n", "return", "arr", ".", "__getitem__", "(", "idx_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.genagg.GenAgg.__init__": [[10, 38], ["super().__init__", "torch.tan", "torch.nn.Parameter", "torch.tensor().float", "torch.nn.Parameter", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["\t", "def", "__init__", "(", "self", ",", "\n", "# p term in generalized mean", "\n", "p", ":", "float", "=", "1.0", ",", "\n", "# premultiply gen-mean by N^a ", "\n", "# so we can normalize wrt to num neighbors", "\n", "a", ":", "float", "=", "0.0", ",", "\n", "# Whether to shift x into positive real to avoid", "\n", "# complex numbers", "\n", "shift", ":", "bool", "=", "False", ",", "\n", "# Whether a,p should be learnable or fixed", "\n", "learnable", ":", "bool", "=", "True", ",", "\n", "# Mapping function from parameter p' => actual p", "\n", "# use this if we don't want p to change linearly", "\n", "# (e.g. we want to approach p=inf faster, so map ", "\n", "# p = tan(p'))", "\n", "map_fn", ":", "Callable", "=", "lambda", "p", ":", "torch", ".", "tan", "(", "p", "*", "math", ".", "pi", "/", "4", ")", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "tensor", "(", "[", "p", "]", ")", ".", "float", "(", ")", "\n", ")", "if", "learnable", "else", "torch", ".", "tensor", "(", "[", "p", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "a", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "tensor", "(", "[", "a", "]", ")", ".", "float", "(", ")", "\n", ")", "if", "learnable", "else", "torch", ".", "tensor", "(", "[", "a", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "shift", "=", "shift", "\n", "self", ".", "learnable", "=", "learnable", "\n", "self", ".", "p_domain", "=", "[", "-", "1.99", ",", "1.99", "]", "\n", "self", ".", "map_fn", "=", "map_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.genagg.GenAgg.forward": [[39, 50], ["genagg.gen_agg", "torch.is_complex", "genagg.GenAgg.p.data.clamp", "genagg.GenAgg.map_fn"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.genagg.gen_agg"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Clamp p parameter to prevent over/underflows", "\n", "\t\t", "if", "self", ".", "learnable", ":", "\n", "\t\t\t", "self", ".", "p", ".", "data", "=", "self", ".", "p", ".", "data", ".", "clamp", "(", "*", "self", ".", "p_domain", ")", "\n", "", "if", "self", ".", "map_fn", ":", "\n", "\t\t\t", "p", "=", "self", ".", "map_fn", "(", "self", ".", "p", ")", "\n", "\n", "", "y", "=", "gen_agg", "(", "x", ",", "p", "=", "p", ",", "a", "=", "self", ".", "a", ",", "shift", "=", "self", ".", "shift", ",", "special", "=", "(", "not", "self", ".", "learnable", ")", ")", "\n", "if", "torch", ".", "is_complex", "(", "y", ")", ":", "\n", "\t\t\t", "y", "=", "y", ".", "real", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.genagg.GenAggSparse.__init__": [[121, 148], ["super().__init__", "torch.tan", "torch.nn.Parameter", "torch.tensor().float", "torch.nn.Parameter", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["def", "__init__", "(", "self", ",", "\n", "# p term in generalized mean", "\n", "p", ":", "float", "=", "1.0", ",", "\n", "# premultiply gen-mean by N^a ", "\n", "# so we can normalize wrt to num neighbors", "\n", "a", ":", "float", "=", "0.0", ",", "\n", "# Whether to shift x into positive real to avoid", "\n", "# complex numbers", "\n", "shift", ":", "bool", "=", "False", ",", "\n", "# Whether a,p should be learnable or fixed", "\n", "learnable", ":", "bool", "=", "True", ",", "\n", "# Mapping function from parameter p' => actual p", "\n", "# use this if we don't want p to change linearly", "\n", "# (e.g. we want to approach p=inf faster, so map ", "\n", "# p = tan(p'))", "\n", "map_fn", ":", "Callable", "=", "lambda", "p", ":", "torch", ".", "tan", "(", "p", "*", "math", ".", "pi", "/", "4", ")", ",", "\n", "# Bounds the domain of p to prevent over/underflow", "\n", "# for the default map_fn, this should be betwee -1.99.. and 1.99..", "\n", "p_domain", ":", "Tuple", "[", "float", ",", "float", "]", "=", "[", "-", "1.9999", ",", "1.9999", "]", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "p", "]", ")", ".", "float", "(", ")", ")", "if", "learnable", "else", "torch", ".", "tensor", "(", "[", "p", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "a", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "a", "]", ")", ".", "float", "(", ")", ")", "if", "learnable", "else", "torch", ".", "tensor", "(", "[", "a", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "shift", "=", "shift", "\n", "self", ".", "learnable", "=", "learnable", "\n", "self", ".", "p_domain", "=", "p_domain", "\n", "self", ".", "map_fn", "=", "map_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.genagg.GenAggSparse.forward": [[149, 160], ["genagg.gen_agg_sparse", "torch.is_complex", "genagg.GenAggSparse.p.data.clamp", "genagg.GenAggSparse.map_fn"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.genagg.gen_agg_sparse"], ["", "def", "forward", "(", "self", ",", "x", ",", "index", ",", "**", "kwargs", ")", ":", "\n", "# Clamp p parameter to prevent over/underflows", "\n", "\t\t", "if", "self", ".", "learnable", ":", "\n", "\t\t\t", "self", ".", "p", ".", "data", "=", "self", ".", "p", ".", "data", ".", "clamp", "(", "*", "self", ".", "p_domain", ")", "\n", "", "if", "self", ".", "map_fn", ":", "\n", "\t\t\t", "p", "=", "self", ".", "map_fn", "(", "self", ".", "p", ")", "\n", "\n", "", "y", "=", "gen_agg_sparse", "(", "x", ",", "index", ",", "p", "=", "p", ",", "a", "=", "self", ".", "a", ",", "shift", "=", "self", ".", "shift", ",", "special", "=", "(", "not", "self", ".", "learnable", ")", ",", "**", "kwargs", ")", "\n", "if", "torch", ".", "is_complex", "(", "y", ")", ":", "\n", "\t\t\t", "y", "=", "y", ".", "real", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.genagg.gen_agg": [[52, 94], ["torch.tensor().float", "torch.is_complex", "[].unsqueeze", "torch.exp", "res.select.select", "torch.exp", "res.select.select", "torch.is_complex", "torch.tensor", "torch.max", "torch.is_complex", "torch.min", "torch.is_complex", "torch.prod", "torch.pow", "torch.pow.type", "x.min", "genagg.logsumexp", "torch.log", "torch.prod.cfloat", "torch.log", "genagg.logsumexp", "torch.log", "torch.log", "torch.log", "torch.abs"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.genagg.logsumexp", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.genagg.logsumexp"], ["", "", "def", "gen_agg", "(", "x", ",", "p", "=", "1", ",", "a", "=", "0", ",", "agg_dim", "=", "-", "2", ",", "shift", "=", "False", ",", "special", "=", "True", ")", ":", "\n", "\t", "\"\"\"Generalized mean aggregation. If shift is true,\n\tthen apply transformations to ensure well-behaved outputs.\n\tWhen calling this method, ensure p is bounded to a reasonable\n\tvalue to prevent overflows\"\"\"", "\n", "\n", "# special cases", "\n", "if", "special", ":", "\n", "\t\t", "if", "p", "==", "math", ".", "inf", ":", "\n", "\t\t\t", "if", "torch", ".", "is_complex", "(", "x", ")", ":", "\n", "\t\t\t\t", "x", "=", "x", ".", "real", "\n", "", "return", "torch", ".", "max", "(", "x", ",", "dim", "=", "agg_dim", ")", "[", "0", "]", "\n", "", "elif", "p", "==", "-", "math", ".", "inf", ":", "\n", "\t\t\t", "if", "torch", ".", "is_complex", "(", "x", ")", ":", "\n", "\t\t\t\t", "x", "=", "x", ".", "real", "\n", "", "return", "torch", ".", "min", "(", "x", ",", "dim", "=", "agg_dim", ")", "[", "0", "]", "\n", "", "elif", "p", "==", "0", ":", "\n", "\t\t\t", "dtype", "=", "x", ".", "dtype", "\n", "if", "torch", ".", "is_complex", "(", "x", ")", ":", "\n", "\t\t\t\t", "x", "=", "x", ".", "real", "\n", "", "prod", "=", "torch", ".", "prod", "(", "x", ",", "dim", "=", "agg_dim", ")", "\n", "Y", "=", "torch", ".", "pow", "(", "prod", ".", "cfloat", "(", ")", ",", "1", "/", "x", ".", "shape", "[", "agg_dim", "]", ")", "\n", "return", "Y", ".", "type", "(", "dtype", ")", "\n", "\n", "# number of neighbours", "\n", "", "", "N", "=", "torch", ".", "tensor", "(", "x", ".", "shape", "[", "agg_dim", "]", ",", "device", "=", "x", ".", "device", ")", ".", "float", "(", ")", "\n", "\n", "# when shift is True, p=0 is min, p=1 is avg, p=inf is max", "\n", "if", "shift", ":", "\n", "\t\t", "if", "torch", ".", "is_complex", "(", "x", ")", ":", "\n", "\t\t\t", "x", "=", "x", ".", "real", "\n", "", "shifts", "=", "x", ".", "min", "(", "dim", "=", "agg_dim", ")", "[", "0", "]", ".", "unsqueeze", "(", "agg_dim", ")", "\n", "shifts", "-=", "1e-3", "\n", "x", "=", "x", "-", "shifts", "\n", "Y", "=", "torch", ".", "exp", "(", "1", "/", "p", "*", "(", "-", "torch", ".", "log", "(", "N", ")", "+", "logsumexp", "(", "p", "*", "torch", ".", "log", "(", "x", ")", ",", "agg_dim", "=", "agg_dim", ")", ")", ")", "\n", "res", "=", "N", "**", "a", "*", "(", "Y", "+", "shifts", ")", "\n", "return", "res", ".", "select", "(", "dim", "=", "agg_dim", ",", "index", "=", "0", ")", "\n", "# when shift is False, p=-inf is min, p=0 is prod, p=1 is avg, p=inf is max", "\n", "", "else", ":", "\n", "\t\t", "res", "=", "torch", ".", "exp", "(", "a", "*", "torch", ".", "log", "(", "N", ")", "+", "(", "1", "/", "p", "*", "(", "-", "torch", ".", "log", "(", "N", ")", "+", "logsumexp", "(", "p", "*", "torch", ".", "log", "(", "torch", ".", "abs", "(", "x", ")", ")", ",", "agg_dim", "=", "agg_dim", ")", ")", ")", ")", "\n", "res", "=", "res", ".", "select", "(", "dim", "=", "agg_dim", ",", "index", "=", "0", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.genagg.logsumexp": [[98, 116], ["torch.is_complex", "c.unsqueeze.unsqueeze", "torch.exp", "torch.sum().unsqueeze", "x.double.real.max", "x.double.real.min", "x.double.cdouble", "x.double.max", "x.double.min", "x.double.double", "torch.log().type", "torch.sum", "torch.log"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "", "def", "logsumexp", "(", "x", ",", "agg_dim", "=", "-", "2", ")", ":", "\n", "\t", "\"\"\"log-sum-exp that works for both real and complex\n\ttorch tensors\"\"\"", "\n", "dtype", "=", "x", ".", "dtype", "\n", "if", "torch", ".", "is_complex", "(", "x", ")", ":", "\n", "\t\t", "c_max", ",", "_", "=", "x", ".", "real", ".", "max", "(", "dim", "=", "agg_dim", ")", "\n", "c_min", ",", "_", "=", "x", ".", "real", ".", "min", "(", "dim", "=", "agg_dim", ")", "\n", "x", "=", "x", ".", "cdouble", "(", ")", "\n", "", "else", ":", "\n", "\t\t", "c_max", ",", "_", "=", "x", ".", "max", "(", "dim", "=", "agg_dim", ")", "\n", "c_min", ",", "_", "=", "x", ".", "min", "(", "dim", "=", "agg_dim", ")", "\n", "x", "=", "x", ".", "double", "(", ")", "\n", "", "c", "=", "c_max", "\n", "c", "=", "c", ".", "unsqueeze", "(", "agg_dim", ")", "\n", "shifted", "=", "torch", ".", "exp", "(", "x", "-", "c", ")", "\n", "summed", "=", "torch", ".", "sum", "(", "shifted", ",", "dim", "=", "agg_dim", ")", ".", "unsqueeze", "(", "agg_dim", ")", "\n", "res", "=", "c", "+", "torch", ".", "log", "(", "summed", ")", ".", "type", "(", "dtype", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.genagg.gen_agg_sparse": [[163, 210], ["torch_scatter.scatter", "x.numel", "list", "torch.zeros", "torch.ones", "torch.is_complex", "x.min", "torch.exp", "torch.exp", "torch.is_complex", "torch_scatter.scatter", "torch.is_complex", "torch_scatter.scatter", "torch.is_complex", "torch_scatter.scatter", "torch_scatter.scatter", "torch.pow", "torch.pow.type", "genagg.logsumexp_sparse", "torch.ones", "torch_scatter.scatter.cfloat", "torch.log", "genagg.logsumexp_sparse", "torch.log", "torch.log", "torch.log", "torch.log", "torch.abs"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.genagg.logsumexp_sparse", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.genagg.logsumexp_sparse"], ["", "", "def", "gen_agg_sparse", "(", "x", ",", "index", ",", "p", "=", "1", ",", "a", "=", "0", ",", "shift", "=", "False", ",", "special", "=", "False", ",", "agg_dim", "=", "0", ",", "dim_size", "=", "None", ")", ":", "\n", "\t", "\"\"\"Generalized mean aggregation. If shift is true,\n\tthen apply transformations to ensure well-behaved outputs.\"\"\"", "\n", "\n", "if", "x", ".", "numel", "(", ")", "==", "0", ":", "\n", "\t\t", "shape", "=", "list", "(", "x", ".", "shape", ")", "\n", "shape", "[", "agg_dim", "]", "=", "dim_size", "\n", "return", "torch", ".", "zeros", "(", "shape", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "# special cases", "\n", "", "if", "special", ":", "\n", "\t\t", "if", "p", "==", "math", ".", "inf", ":", "\n", "\t\t\t", "if", "torch", ".", "is_complex", "(", "x", ")", ":", "\n", "\t\t\t\t", "x", "=", "x", ".", "real", "\n", "", "return", "scatter", "(", "x", ",", "index", ",", "dim", "=", "agg_dim", ",", "dim_size", "=", "dim_size", ",", "reduce", "=", "\"max\"", ")", "\n", "", "elif", "p", "==", "-", "math", ".", "inf", ":", "\n", "\t\t\t", "if", "torch", ".", "is_complex", "(", "x", ")", ":", "\n", "\t\t\t\t", "x", "=", "x", ".", "real", "\n", "", "return", "scatter", "(", "x", ",", "index", ",", "dim", "=", "agg_dim", ",", "dim_size", "=", "dim_size", ",", "reduce", "=", "\"min\"", ")", "\n", "", "elif", "p", "==", "0", ":", "\n", "\t\t\t", "dtype", "=", "x", ".", "dtype", "\n", "if", "torch", ".", "is_complex", "(", "x", ")", ":", "\n", "\t\t\t\t", "x", "=", "x", ".", "real", "\n", "", "N", "=", "scatter", "(", "torch", ".", "ones", "(", "x", ".", "shape", "[", "agg_dim", "]", ",", "device", "=", "x", ".", "device", ")", ",", "index", ",", "dim", "=", "agg_dim", ",", "dim_size", "=", "dim_size", ",", "reduce", "=", "\"sum\"", ")", "\n", "prod", "=", "scatter", "(", "x", ",", "index", ",", "dim", "=", "agg_dim", ",", "dim_size", "=", "dim_size", ",", "reduce", "=", "\"mul\"", ")", "\n", "Y", "=", "torch", ".", "pow", "(", "prod", ".", "cfloat", "(", ")", ",", "1", "/", "N", ")", "\n", "return", "Y", ".", "type", "(", "dtype", ")", "\n", "\n", "# number of neighbours", "\n", "", "", "N", "=", "scatter", "(", "torch", ".", "ones", "(", "x", ".", "shape", "[", "agg_dim", "]", ",", "device", "=", "x", ".", "device", ")", ",", "index", ",", "dim", "=", "agg_dim", ",", "dim_size", "=", "dim_size", ",", "reduce", "=", "\"sum\"", ")", "\n", "# Can't have divide by zero error, this should not affect final results", "\n", "N", "[", "N", "==", "0", "]", "=", "1", "\n", "\n", "# when shift is True, p=0 is min, p=1 is avg, p=inf is max", "\n", "if", "shift", ":", "\n", "\t\t", "if", "torch", ".", "is_complex", "(", "x", ")", ":", "\n", "\t\t\t", "x", "=", "x", ".", "real", "\n", "# TODO: handle empty x", "\n", "", "shifts", ",", "_", "=", "x", ".", "min", "(", "dim", "=", "agg_dim", ")", "\n", "shifts", "-=", "1e-3", "\n", "x", "=", "x", "-", "shifts", "\n", "Y", "=", "torch", ".", "exp", "(", "1", "/", "p", "*", "(", "-", "torch", ".", "log", "(", "N", ")", "[", ":", ",", "None", "]", "+", "logsumexp_sparse", "(", "p", "*", "torch", ".", "log", "(", "x", ")", ",", "index", "=", "index", ",", "agg_dim", "=", "agg_dim", ",", "dim_size", "=", "dim_size", ")", ")", ")", "\n", "return", "(", "N", "[", ":", ",", "None", "]", "**", "a", ")", "*", "(", "Y", "+", "shifts", ")", "\n", "# when shift is False, p=-inf is min, p=0 is prod, p=1 is avg, p=inf is max", "\n", "", "else", ":", "\n", "\t\t", "res", "=", "torch", ".", "exp", "(", "(", "a", "*", "torch", ".", "log", "(", "N", ")", "[", ":", ",", "None", "]", ")", "+", "1", "/", "p", "*", "(", "-", "torch", ".", "log", "(", "N", ")", "[", ":", ",", "None", "]", "+", "logsumexp_sparse", "(", "p", "*", "torch", ".", "log", "(", "torch", ".", "abs", "(", "x", ")", ")", ",", "index", "=", "index", ",", "agg_dim", "=", "agg_dim", ",", "dim_size", "=", "dim_size", ")", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.genagg.logsumexp_sparse": [[213, 231], ["torch.is_complex", "c.unsqueeze", "torch.exp", "torch_scatter.scatter", "x.double.real.max", "x.double.real.min", "x.double.cdouble", "x.double.max", "x.double.min", "x.double.double", "torch.log().type", "torch.log"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min"], ["", "", "def", "logsumexp_sparse", "(", "x", ",", "index", ",", "agg_dim", "=", "0", ",", "dim_size", "=", "None", ")", ":", "\n", "\t", "\"\"\"log-sum-exp that works for both real and complex\n\ttorch tensors\"\"\"", "\n", "dtype", "=", "x", ".", "dtype", "\n", "if", "torch", ".", "is_complex", "(", "x", ")", ":", "\n", "\t\t", "c_max", ",", "_", "=", "x", ".", "real", ".", "max", "(", "dim", "=", "agg_dim", ")", "\n", "c_min", ",", "_", "=", "x", ".", "real", ".", "min", "(", "dim", "=", "agg_dim", ")", "\n", "x", "=", "x", ".", "cdouble", "(", ")", "\n", "", "else", ":", "\n", "\t\t", "c_max", ",", "_", "=", "x", ".", "max", "(", "dim", "=", "agg_dim", ")", "\n", "c_min", ",", "_", "=", "x", ".", "min", "(", "dim", "=", "agg_dim", ")", "\n", "x", "=", "x", ".", "double", "(", ")", "\n", "", "c", "=", "c_max", "\n", "c", ".", "unsqueeze", "(", "agg_dim", ")", "\n", "shifted", "=", "torch", ".", "exp", "(", "x", "-", "c", ")", "\n", "summed", "=", "scatter", "(", "shifted", ",", "index", ",", "dim", "=", "agg_dim", ",", "dim_size", "=", "dim_size", ",", "reduce", "=", "\"sum\"", ")", "\n", "res", "=", "c", "+", "torch", ".", "log", "(", "summed", ")", ".", "type", "(", "dtype", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.gnn_wrapper.GNNwrapper.__init__": [[11, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["\t", "def", "__init__", "(", "self", ",", "gnn", ",", "input_func", "=", "lambda", "data", ":", "{", "\"edge_index\"", ":", "data", ".", "edge_index", ",", "\"x\"", ":", "data", ".", "x", "}", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gnn", "=", "gnn", "\n", "self", ".", "input_func", "=", "input_func", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.gnn_wrapper.GNNwrapper.forward": [[17, 27], ["isinstance", "gnn_wrapper.GNNwrapper.gnn", "gnn_wrapper.GNNwrapper.reshape", "X.reshape", "to_geometric().to", "gnn_wrapper.GNNwrapper.input_func", "gnn_wrapper.to_geometric"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.gnn_wrapper.to_geometric"], ["", "def", "forward", "(", "self", ",", "X", ",", "A", ")", ":", "\n", "\t\t", "B", ",", "n_agents", ",", "_", "=", "X", ".", "shape", "\n", "if", "isinstance", "(", "A", ",", "Batch", ")", ":", "\n", "\t\t\t", "data", "=", "A", "\n", "data", ".", "x", "=", "X", ".", "reshape", "(", "B", "*", "n_agents", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "data", "=", "to_geometric", "(", "A", ",", "x", "=", "X", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "", "output", "=", "self", ".", "gnn", "(", "**", "self", ".", "input_func", "(", "data", ")", ")", "\n", "\n", "return", "output", ".", "reshape", "(", "B", ",", "n_agents", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.gnn_wrapper.to_geometric": [[30, 41], ["torch.as_tensor().cpu", "torch.as_tensor().cpu", "kwargs.items", "len", "int", "A.reshape.reshape", "kwargs.items", "gnn_wrapper.dense_to_geometric", "torch.as_tensor", "torch.as_tensor", "numpy.prod", "val.reshape", "torch.as_tensor", "torch.as_tensor"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.gnn_wrapper.dense_to_geometric"], ["", "", "def", "to_geometric", "(", "A", ",", "**", "kwargs", ")", ":", "\n", "\t", "A", "=", "torch", ".", "as_tensor", "(", "A", ")", ".", "cpu", "(", ")", "\n", "for", "name", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "\t\t", "kwargs", "[", "name", "]", "=", "torch", ".", "as_tensor", "(", "val", ")", "\n", "", "numdim", "=", "len", "(", "A", ".", "shape", ")", "\n", "numbatchdim", "=", "numdim", "-", "2", "\n", "batchdimsize", "=", "int", "(", "np", ".", "prod", "(", "A", ".", "shape", "[", ":", "numbatchdim", "]", ")", ")", "\n", "A", "=", "A", ".", "reshape", "(", "batchdimsize", ",", "*", "A", ".", "shape", "[", "numbatchdim", ":", "]", ")", "\n", "for", "name", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "\t\t", "kwargs", "[", "name", "]", "=", "val", ".", "reshape", "(", "batchdimsize", ",", "*", "val", ".", "shape", "[", "numbatchdim", ":", "]", ")", "\n", "", "return", "dense_to_geometric", "(", "A", "=", "A", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.gnn_wrapper.dense_to_geometric": [[44, 49], ["torch_geometric.data.Batch.from_data_list", "torch_geometric.utils.convert.from_scipy_sparse_matrix", "torch_geometric.data.Data", "scipy.sparse.coo_matrix", "range", "enumerate", "kwargs.items", "arg_slice"], "function", ["None"], ["", "def", "dense_to_geometric", "(", "A", ",", "**", "kwargs", ")", ":", "\n", "\t", "edge_list", "=", "[", "from_scipy_sparse_matrix", "(", "coo_matrix", "(", "A", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "A", ".", "shape", "[", "0", "]", ")", "]", "\n", "arg_slice", "=", "lambda", "i", ":", "{", "key", ":", "val", "[", "i", "]", "for", "key", ",", "val", "in", "kwargs", ".", "items", "(", ")", "}", "\n", "data_list", "=", "[", "Data", "(", "edge_index", "=", "edge_index", ",", "edge_attr", "=", "edge_attr", ",", "**", "(", "arg_slice", "(", "i", ")", ")", ")", "for", "i", ",", "(", "edge_index", ",", "edge_attr", ")", "in", "enumerate", "(", "edge_list", ")", "]", "\n", "return", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.graphmix.layers_gin.GINGraphConvolution.__init__": [[7, 27], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "state_dim", ",", "hypernet_embed", ",", "weights_operation", "=", "None", ")", ":", "\n", "        ", "super", "(", "GINGraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "state_dim", "=", "state_dim", "\n", "self", ".", "weights_operation", "=", "weights_operation", "\n", "\n", "self", ".", "hidden_features", "=", "int", "(", "(", "in_features", "+", "out_features", ")", "/", "2", ")", "\n", "\n", "# breaking the MLP to hypernetworks for deriving the weights and biases", "\n", "self", ".", "w1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hypernet_embed", ",", "in_features", "*", "self", ".", "hidden_features", ")", ")", "\n", "self", ".", "b1", "=", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "self", ".", "hidden_features", ")", "\n", "\n", "self", ".", "w2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hypernet_embed", ",", "self", ".", "hidden_features", "*", "out_features", ")", ")", "\n", "self", ".", "b2", "=", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.graphmix.layers_gin.GINGraphConvolution.forward": [[28, 55], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.size", "torch.matmul.size", "layers_gin.GINGraphConvolution.w1().view", "layers_gin.GINGraphConvolution.w2().view", "layers_gin.GINGraphConvolution.b1().view().repeat", "layers_gin.GINGraphConvolution.b2().view().repeat", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "layers_gin.GINGraphConvolution.w1", "layers_gin.GINGraphConvolution.w2", "layers_gin.GINGraphConvolution.b1().view", "layers_gin.GINGraphConvolution.b2().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "NotImplementedError", "layers_gin.GINGraphConvolution.b1", "layers_gin.GINGraphConvolution.b2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_features", ",", "adj", ",", "states", ")", ":", "\n", "\n", "        ", "aggregated_input", "=", "torch", ".", "matmul", "(", "adj", ",", "input_features", ")", "\n", "\n", "batch_size", "=", "aggregated_input", ".", "size", "(", "0", ")", "\n", "\n", "w1", "=", "self", ".", "w1", "(", "states", ")", ".", "view", "(", "-", "1", ",", "self", ".", "in_features", ",", "self", ".", "hidden_features", ")", "\n", "w2", "=", "self", ".", "w2", "(", "states", ")", ".", "view", "(", "-", "1", ",", "self", ".", "hidden_features", ",", "self", ".", "out_features", ")", "\n", "\n", "if", "self", ".", "weights_operation", "==", "'abs'", ":", "\n", "            ", "w1", "=", "torch", ".", "abs", "(", "w1", ")", "\n", "w2", "=", "torch", ".", "abs", "(", "w2", ")", "\n", "", "elif", "self", ".", "weights_operation", "==", "'clamp'", ":", "\n", "            ", "w1", "=", "nn", ".", "ReLU", "(", ")", "(", "w1", ")", "\n", "w2", "=", "nn", ".", "ReLU", "(", ")", "(", "w2", ")", "\n", "", "elif", "self", ".", "weights_operation", "is", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'The operation {} on the weights not implemented'", ".", "format", "(", "self", ".", "weights_operation", ")", ")", "\n", "\n", "", "b1", "=", "self", ".", "b1", "(", "states", ")", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "aggregated_input", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "b2", "=", "self", ".", "b2", "(", "states", ")", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "aggregated_input", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "\n", "output1", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", ")", "(", "torch", ".", "matmul", "(", "aggregated_input", ",", "w1", ")", "+", "b1", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "output1", ",", "w2", ")", "+", "b2", "\n", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.graphmix.gnn.GNN.__init__": [[12, 47], ["torch.Module.__init__", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "gnn.GNN.layers.append", "NotImplementedError", "pymarl.modules.layer.graphmix.layers_gin.GINGraphConvolution"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "hidden_layers", ",", "state_dim", ",", "hypernet_embed", ",", "\n", "weights_operation", "=", "None", ",", "combine_type", "=", "'gin'", ")", ":", "\n", "        ", "super", "(", "GNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_input_features", "=", "num_input_features", "\n", "self", ".", "hidden_layers", "=", "hidden_layers", "\n", "self", ".", "state_dim", "=", "state_dim", "\n", "self", ".", "weights_operation", "=", "weights_operation", "\n", "\n", "self", ".", "nonlinearity", "=", "nn", ".", "ELU", "(", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "hidden_layers", ")", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "in_features", "=", "num_input_features", "\n", "", "else", ":", "\n", "                ", "in_features", "=", "hidden_layers", "[", "i", "-", "1", "]", "\n", "", "out_features", "=", "hidden_layers", "[", "i", "]", "\n", "\n", "if", "combine_type", "==", "'gin'", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "GINGraphConvolution", "(", "in_features", ",", "out_features", ",", "state_dim", ",", "hypernet_embed", ",", "\n", "weights_operation", "=", "weights_operation", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Layer type {} not supported!'", ".", "format", "(", "combine_type", ")", ")", "\n", "\n", "# output layer parameters", "\n", "", "", "self", ".", "wout", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hypernet_embed", ",", "hidden_layers", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "wout_perNode", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hypernet_embed", ",", "hidden_layers", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "bout_perNode", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "hidden_layers", "[", "-", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_layers", "[", "-", "1", "]", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.graphmix.gnn.GNN.node_embedding": [[48, 54], ["range", "len", "gnn.GNN.nonlinearity"], "methods", ["None"], ["", "def", "node_embedding", "(", "self", ",", "input_features", ",", "adj", ",", "states", ")", ":", "\n", "        ", "x", "=", "input_features", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "layers", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "nonlinearity", "(", "self", ".", "layers", "[", "i", "]", "(", "x", ",", "adj", ",", "states", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.graphmix.gnn.GNN.forward": [[55, 78], ["input_features.size", "gnn.GNN.node_embedding", "gnn.GNN.readout", "gnn.GNN.wout().view", "gnn.GNN.wout_perNode().view", "gnn.GNN.bout_perNode().view().repeat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "readout.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.Softmax", "torch.Softmax", "torch.Softmax", "gnn.GNN.wout", "gnn.GNN.wout_perNode", "gnn.GNN.bout_perNode().view", "gnn.GNN.view", "torch.ReLU", "torch.ReLU", "torch.ReLU", "NotImplementedError", "gnn.GNN.bout_perNode"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.graphmix.gnn.GNN.node_embedding", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.graphmix.gnn.GNN.readout"], ["", "def", "forward", "(", "self", ",", "input_features", ",", "adj", ",", "states", ",", "num_agents", ")", ":", "\n", "        ", "batch_size", "=", "input_features", ".", "size", "(", "0", ")", "\n", "output_features", "=", "self", ".", "node_embedding", "(", "input_features", ",", "adj", ",", "states", ")", "#[:, :num_agents] # discard the outputs of entities", "\n", "readout", ",", "alive_agents_flags_1d", "=", "self", ".", "readout", "(", "output_features", ",", "adj", ",", "num_agents", ")", "\n", "\n", "wout", "=", "self", ".", "wout", "(", "states", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ")", "\n", "wout_perNode", "=", "self", ".", "wout_perNode", "(", "states", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ")", "\n", "bout_perNode", "=", "self", ".", "bout_perNode", "(", "states", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "num_agents", ",", "1", ")", "\n", "\n", "if", "self", ".", "weights_operation", "==", "'abs'", ":", "\n", "            ", "wout", "=", "torch", ".", "abs", "(", "wout", ")", "\n", "", "elif", "self", ".", "weights_operation", "==", "'clamp'", ":", "\n", "            ", "wout", "=", "nn", ".", "ReLU", "(", ")", "(", "wout", ")", "\n", "", "elif", "self", ".", "weights_operation", "is", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'The operation {} on the weights not implemented!'", ".", "format", "(", "self", ".", "weights_operation", ")", ")", "\n", "\n", "", "scalar_out", "=", "torch", ".", "matmul", "(", "readout", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ",", "wout", ")", "\n", "per_node_scalars", "=", "torch", ".", "matmul", "(", "output_features", ".", "view", "(", "batch_size", ",", "num_agents", ",", "-", "1", ")", ",", "wout_perNode", ")", "+", "bout_perNode", "\n", "per_node_scalars", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "per_node_scalars", "+", "(", "-", "1e10", "*", "(", "1", "-", "1.", "*", "alive_agents_flags_1d", ")", ")", ")", "\n", "\n", "return", "per_node_scalars", ",", "scalar_out", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.graphmix.gnn.GNN.readout": [[79, 87], ["alive_agents_flags_1d.repeat", "x.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "alive_agents_flags_1d.repeat.float", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "readout", "(", "self", ",", "x", ",", "adj", ",", "num_agents", ")", ":", "\n", "        ", "alive_agents_flags_1d", "=", "(", "torch", ".", "max", "(", "adj", ",", "dim", "=", "2", ")", "[", "0", "]", ">", "0", ")", ".", "unsqueeze", "(", "2", ")", "\n", "alive_agents_flags", "=", "alive_agents_flags_1d", ".", "repeat", "(", "1", ",", "1", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "\n", "# the constant in the denominator is to prevent \"nan\"s", "\n", "out", "=", "torch", ".", "sum", "(", "x", "*", "alive_agents_flags", ".", "float", "(", ")", ",", "dim", "=", "1", ")", "/", "(", "torch", ".", "sum", "(", "alive_agents_flags", ",", "dim", "=", "1", ")", "+", "1e-10", ")", "\n", "\n", "return", "out", ",", "alive_agents_flags_1d", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.rnn_agent.RNNAgent.__init__": [[6, 13], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.GRUCell", "torch.GRUCell", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "args", ")", ":", "\n", "        ", "super", "(", "RNNAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_shape", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRUCell", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "n_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.rnn_agent.RNNAgent.init_hidden": [[14, 17], ["rnn_agent.RNNAgent.fc1.weight.new().zero_", "rnn_agent.RNNAgent.fc1.weight.new"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "# make hidden states on same device as model", "\n", "        ", "return", "self", ".", "fc1", ".", "weight", ".", "new", "(", "1", ",", "self", ".", "args", ".", "rnn_hidden_dim", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.rnn_agent.RNNAgent.forward": [[18, 27], ["inputs.size", "torch.relu", "torch.relu", "rnn_agent.RNNAgent.rnn", "rnn_agent.RNNAgent.fc2", "rnn_agent.RNNAgent.fc1", "hidden_state.reshape.reshape.reshape", "rnn_agent.RNNAgent.view", "rnn_agent.RNNAgent.view", "inputs.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_state", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "b", ",", "a", ",", "e", "=", "inputs", ".", "size", "(", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "inputs", ".", "view", "(", "-", "1", ",", "e", ")", ")", ",", "inplace", "=", "True", ")", "\n", "if", "hidden_state", "is", "not", "None", ":", "\n", "            ", "hidden_state", "=", "hidden_state", ".", "reshape", "(", "-", "1", ",", "self", ".", "args", ".", "rnn_hidden_dim", ")", "\n", "", "h", "=", "self", ".", "rnn", "(", "x", ",", "hidden_state", ")", "\n", "q", "=", "self", ".", "fc2", "(", "h", ")", "\n", "return", "q", ".", "view", "(", "b", ",", "a", ",", "-", "1", ")", ",", "h", ".", "view", "(", "b", ",", "a", ",", "-", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.mlp_agent.MLPAgent.__init__": [[6, 15], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "getattr"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "args", ")", ":", "\n", "        ", "super", "(", "MLPAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_shape", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "n_actions", ")", "\n", "\n", "self", ".", "agent_return_logits", "=", "getattr", "(", "self", ".", "args", ",", "\"agent_return_logits\"", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.mlp_agent.MLPAgent.init_hidden": [[16, 18], ["None"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.mlp_agent.MLPAgent.forward": [[19, 27], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "mlp_agent.MLPAgent.fc1", "mlp_agent.MLPAgent.fc2", "mlp_agent.MLPAgent.fc3", "torch.tanh", "torch.tanh", "mlp_agent.MLPAgent.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "h", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "inputs", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "if", "self", ".", "agent_return_logits", ":", "\n", "            ", "actions", "=", "self", ".", "fc3", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "actions", "=", "F", ".", "tanh", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "", "return", "actions", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.rnn_ppo_agent.RNNPPOAgent.__init__": [[5, 13], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.GRUCell", "torch.GRUCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "args", ")", ":", "\n", "        ", "super", "(", "RNNPPOAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_shape", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRUCell", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "n_actions", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "args", ".", "rnn_hidden_dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.rnn_ppo_agent.RNNPPOAgent.init_hidden": [[14, 17], ["rnn_ppo_agent.RNNPPOAgent.fc1.weight.new().zero_", "rnn_ppo_agent.RNNPPOAgent.fc1.weight.new"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "# make hidden states on same device as model", "\n", "        ", "return", "self", ".", "fc1", ".", "weight", ".", "new", "(", "1", ",", "self", ".", "args", ".", "rnn_hidden_dim", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.rnn_ppo_agent.RNNPPOAgent.forward": [[18, 25], ["torch.relu", "torch.relu", "hidden_state.reshape", "rnn_ppo_agent.RNNPPOAgent.rnn", "rnn_ppo_agent.RNNPPOAgent.fc2", "rnn_ppo_agent.RNNPPOAgent.fc3", "rnn_ppo_agent.RNNPPOAgent.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_state", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "inputs", ")", ")", "\n", "h_in", "=", "hidden_state", ".", "reshape", "(", "-", "1", ",", "self", ".", "args", ".", "rnn_hidden_dim", ")", "\n", "h", "=", "self", ".", "rnn", "(", "x", ",", "h_in", ")", "\n", "pi", "=", "self", ".", "fc2", "(", "h", ")", "\n", "q", "=", "self", ".", "fc3", "(", "h", ")", "\n", "return", "pi", ",", "q", ",", "h", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.noisy_agents.NoisyRNNAgent.__init__": [[7, 17], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.GRUCell", "torch.GRUCell", "pymarl.utils.noisy_liner.NoisyLinear", "getattr", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "args", ")", ":", "\n", "        ", "super", "(", "NoisyRNNAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_shape", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRUCell", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "self", ".", "fc2", "=", "NoisyLinear", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "n_actions", ",", "True", ",", "args", ".", "device", ")", "\n", "\n", "if", "getattr", "(", "args", ",", "\"use_layer_norm\"", ",", "False", ")", ":", "\n", "            ", "self", ".", "layer_norm", "=", "LayerNorm", "(", "args", ".", "rnn_hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.noisy_agents.NoisyRNNAgent.init_hidden": [[18, 21], ["noisy_agents.NoisyRNNAgent.fc1.weight.new().zero_", "noisy_agents.NoisyRNNAgent.fc1.weight.new"], "methods", ["None"], ["", "", "def", "init_hidden", "(", "self", ")", ":", "\n", "# make hidden states on same device as model", "\n", "        ", "return", "self", ".", "fc1", ".", "weight", ".", "new", "(", "1", ",", "self", ".", "args", ".", "rnn_hidden_dim", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.noisy_agents.NoisyRNNAgent.forward": [[22, 36], ["inputs.view.view.size", "inputs.view.view.view", "torch.relu", "torch.relu", "hidden_state.reshape", "noisy_agents.NoisyRNNAgent.rnn", "getattr", "noisy_agents.NoisyRNNAgent.fc1", "noisy_agents.NoisyRNNAgent.fc2", "noisy_agents.NoisyRNNAgent.fc2", "noisy_agents.NoisyRNNAgent.view", "noisy_agents.NoisyRNNAgent.view", "noisy_agents.NoisyRNNAgent.layer_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_state", ",", "**", "kwargs", ")", ":", "\n", "        ", "b", ",", "a", ",", "e", "=", "inputs", ".", "size", "(", ")", "\n", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "e", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "inputs", ")", ",", "inplace", "=", "True", ")", "\n", "h_in", "=", "hidden_state", ".", "reshape", "(", "-", "1", ",", "self", ".", "args", ".", "rnn_hidden_dim", ")", "\n", "hh", "=", "self", ".", "rnn", "(", "x", ",", "h_in", ")", "\n", "\n", "if", "getattr", "(", "self", ".", "args", ",", "\"use_layer_norm\"", ",", "False", ")", ":", "\n", "            ", "q", "=", "self", ".", "fc2", "(", "self", ".", "layer_norm", "(", "hh", ")", ")", "\n", "", "else", ":", "\n", "            ", "q", "=", "self", ".", "fc2", "(", "hh", ")", "\n", "\n", "", "return", "q", ".", "view", "(", "b", ",", "a", ",", "-", "1", ")", ",", "hh", ".", "view", "(", "b", ",", "a", ",", "-", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.conv_agent.ConvAgent.__init__": [[6, 17], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "args", ")", ":", "\n", "        ", "super", "(", "ConvAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "hidden_dim", "=", "self", ".", "args", ".", "rnn_hidden_dim", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "input_shape", ",", "self", ".", "hidden_dim", ",", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "3", ")", "\n", "self", ".", "linear_hidden_dim", "=", "(", "self", ".", "args", ".", "frames", "-", "3", ")", "*", "self", ".", "hidden_dim", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "linear_hidden_dim", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "args", ".", "n_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.conv_agent.ConvAgent.init_hidden": [[18, 20], ["None"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.conv_agent.ConvAgent.forward": [[21, 32], ["inputs.permute().reshape.permute().reshape.size", "inputs.permute().reshape.permute().reshape.permute().reshape", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu.view", "torch.relu", "torch.relu", "conv_agent.ConvAgent.fc2", "conv_agent.ConvAgent.conv1", "conv_agent.ConvAgent.conv2", "conv_agent.ConvAgent.fc1", "conv_agent.ConvAgent.view", "inputs.permute().reshape.permute().reshape.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_state", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "b", ",", "t", ",", "a", ",", "c", "=", "inputs", ".", "size", "(", ")", "\n", "inputs", "=", "inputs", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "c", ",", "t", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "inputs", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "a", ",", "self", ".", "linear_hidden_dim", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "q", "=", "self", ".", "fc2", "(", "x", ")", "\n", "\n", "return", "q", ".", "view", "(", "b", ",", "a", ",", "-", "1", ")", ",", "None", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.ff_agent.FFAgent.__init__": [[6, 14], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "args", ")", ":", "\n", "        ", "super", "(", "FFAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "# Easiest to reuse rnn_hidden_dim variable", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_shape", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "n_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.ff_agent.FFAgent.init_hidden": [[15, 18], ["ff_agent.FFAgent.fc1.weight.new().zero_", "ff_agent.FFAgent.fc1.weight.new"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "# make hidden states on same device as model", "\n", "        ", "return", "self", ".", "fc1", ".", "weight", ".", "new", "(", "1", ",", "self", ".", "args", ".", "rnn_hidden_dim", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.ff_agent.FFAgent.forward": [[19, 25], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "ff_agent.FFAgent.fc3", "ff_agent.FFAgent.fc1", "ff_agent.FFAgent.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_state", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "inputs", ")", ")", "\n", "# h_in = hidden_state.reshape(-1, self.args.rnn_hidden_dim)", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "q", "=", "self", ".", "fc3", "(", "h", ")", "\n", "return", "q", ",", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.atten_rnn_agent.ATTRNNAgent.__init__": [[9, 22], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "pymarl.modules.layer.self_atten.SelfAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "args", ")", ":", "\n", "        ", "super", "(", "ATTRNNAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_shape", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRUCell", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "\n", "self", ".", "att", "=", "SelfAttention", "(", "input_shape", ",", "args", ".", "att_heads", ",", "args", ".", "att_embed_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "att_heads", "*", "args", ".", "att_embed_dim", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "\n", "self", ".", "fc3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "args", ".", "rnn_hidden_dim", "*", "2", ",", "args", ".", "rnn_hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "n_actions", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.atten_rnn_agent.ATTRNNAgent.init_hidden": [[23, 26], ["atten_rnn_agent.ATTRNNAgent.fc1.weight.new().zero_", "atten_rnn_agent.ATTRNNAgent.fc1.weight.new"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "# make hidden states on same device as model", "\n", "        ", "return", "self", ".", "fc1", ".", "weight", ".", "new", "(", "1", ",", "self", ".", "args", ".", "rnn_hidden_dim", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.atten_rnn_agent.ATTRNNAgent.forward": [[27, 45], ["inputs.size", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "hidden_state.reshape", "atten_rnn_agent.ATTRNNAgent.rnn", "atten_rnn_agent.ATTRNNAgent.att", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "atten_rnn_agent.ATTRNNAgent.fc3", "atten_rnn_agent.ATTRNNAgent.fc1", "inputs.view", "atten_rnn_agent.ATTRNNAgent.view", "atten_rnn_agent.ATTRNNAgent.view", "inputs.view", "info.get", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "atten_rnn_agent.ATTRNNAgent.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_state", ",", "info", "=", "{", "}", ")", ":", "\n", "# INPUT", "\n", "        ", "b", ",", "a", ",", "e", "=", "inputs", ".", "size", "(", ")", "\n", "\n", "# RNN", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "inputs", ".", "view", "(", "-", "1", ",", "e", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h_in", "=", "hidden_state", ".", "reshape", "(", "-", "1", ",", "self", ".", "args", ".", "rnn_hidden_dim", ")", "\n", "h", "=", "self", ".", "rnn", "(", "x", ",", "h_in", ")", "\n", "\n", "# ATT", "\n", "att", "=", "self", ".", "att", "(", "inputs", ".", "view", "(", "b", ",", "a", ",", "-", "1", ")", ",", "adj", "=", "info", ".", "get", "(", "'adj'", ",", "None", ")", ")", "\n", "att", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "att", ")", ",", "inplace", "=", "True", ")", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "rnn_hidden_dim", ")", "\n", "\n", "# Q", "\n", "q", "=", "th", ".", "cat", "(", "(", "h", ",", "att", ")", ",", "dim", "=", "-", "1", ")", "\n", "q", "=", "self", ".", "fc3", "(", "q", ")", "\n", "\n", "return", "q", ".", "view", "(", "b", ",", "a", ",", "-", "1", ")", ",", "h", ".", "view", "(", "b", ",", "a", ",", "-", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.qgnn_agent.RNN.__init__": [[14, 23], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.GRUCell", "getattr", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["\t", "def", "__init__", "(", "self", ",", "input_shape", ",", "args", ")", ":", "\n", "\t\t", "super", "(", "RNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_shape", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRUCell", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "\n", "if", "getattr", "(", "args", ",", "\"model_use_layernorm\"", ",", "False", ")", ":", "\n", "\t\t\t", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "args", ".", "rnn_hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.qgnn_agent.RNN.init_hidden": [[25, 28], ["qgnn_agent.RNN.fc1.weight.new().zero_", "qgnn_agent.RNN.fc1.weight.new"], "methods", ["None"], ["", "", "def", "init_hidden", "(", "self", ")", ":", "\n", "# make hidden states on same device as model", "\n", "\t\t", "return", "self", ".", "fc1", ".", "weight", ".", "new", "(", "1", ",", "self", ".", "args", ".", "rnn_hidden_dim", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.qgnn_agent.RNN.forward": [[29, 38], ["inputs.view.view.size", "inputs.view.view.view", "torch.nn.functional.relu", "hidden_state.reshape", "qgnn_agent.RNN.rnn", "qgnn_agent.RNN.view", "qgnn_agent.RNN.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_state", ")", ":", "\n", "\t\t", "b", ",", "a", ",", "e", "=", "inputs", ".", "size", "(", ")", "\n", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "e", ")", "\n", "x", "=", "nn", ".", "functional", ".", "relu", "(", "self", ".", "fc1", "(", "inputs", ")", ",", "inplace", "=", "True", ")", "\n", "h_in", "=", "hidden_state", ".", "reshape", "(", "-", "1", ",", "self", ".", "args", ".", "rnn_hidden_dim", ")", "\n", "hh", "=", "self", ".", "rnn", "(", "x", ",", "h_in", ")", "\n", "\n", "return", "hh", ".", "view", "(", "b", ",", "a", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.qgnn_agent.QGNNAgent.__init__": [[43, 59], ["torch.nn.Module.__init__", "getattr", "getattr", "getattr", "getattr", "qgnn_agent.RNN", "qgnn_agent.gnn_builder", "pymarl.modules.layer.mlp.MLP"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.qgnn_agent.gnn_builder"], ["\t", "def", "__init__", "(", "self", ",", "input_shape", ",", "args", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "args", ".", "rnn_hidden_dim", "\n", "self", ".", "out_dim", "=", "args", ".", "n_actions", "\n", "self", ".", "use_layernorm", "=", "getattr", "(", "args", ",", "\"model_use_layernorm\"", ",", "False", ")", "\n", "self", ".", "adj_dropout", "=", "getattr", "(", "args", ",", "\"model_adj_dropout\"", ",", "0.", ")", "\n", "self", ".", "model_gnn_type", "=", "getattr", "(", "args", ",", "\"model_gnn_type\"", ",", "\"edgeconv\"", ")", "\n", "self", ".", "model_gnn_layers", "=", "getattr", "(", "args", ",", "\"model_gnn_layers\"", ",", "1", ")", "\n", "\n", "# Trajectory Encoder", "\n", "self", ".", "rnn", "=", "RNN", "(", "input_shape", ",", "args", ")", "\n", "\n", "# GNNs", "\n", "self", ".", "gnn", "=", "gnn_builder", "(", "gnn_type", "=", "self", ".", "model_gnn_type", ",", "layers", "=", "self", ".", "model_gnn_layers", ",", "dim", "=", "self", ".", "hidden_dim", ",", "layernorm", "=", "self", ".", "use_layernorm", ")", "\n", "# Q Net", "\n", "self", ".", "q_net", "=", "MLP", "(", "input_dim", "=", "2", "*", "self", ".", "hidden_dim", ",", "output_dim", "=", "self", ".", "out_dim", ",", "layer_sizes", "=", "[", "(", "input_shape", "+", "self", ".", "hidden_dim", "+", "self", ".", "out_dim", ")", "//", "2", "]", ",", "layernorm", "=", "self", ".", "use_layernorm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.qgnn_agent.QGNNAgent.forward": [[61, 75], ["inputs.size", "qgnn_agent.QGNNAgent.rnn", "info.get", "qgnn_agent.QGNNAgent.get_adj", "qgnn_agent.QGNNAgent.gnn", "torch.cat", "qgnn_agent.QGNNAgent.q_net"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.qgnn_agent.QGNNAgent.get_adj"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_state", ",", "info", "=", "{", "}", ")", ":", "\n", "\t\t", "batch", ",", "n_agents", ",", "obs_dim", "=", "inputs", ".", "size", "(", ")", "\n", "\n", "h", "=", "self", ".", "rnn", "(", "inputs", ",", "hidden_state", ")", "\n", "\n", "adj_raw", "=", "info", ".", "get", "(", "'adj'", ",", "None", ")", "\n", "adj", "=", "self", ".", "get_adj", "(", "adj_raw", ",", "batch", ",", "n_agents", ")", "\n", "gnn_out", "=", "self", ".", "gnn", "(", "h", ",", "adj", ")", "\n", "\n", "embedding", "=", "torch", ".", "cat", "(", "[", "h", ",", "gnn_out", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "qvals", "=", "self", ".", "q_net", "(", "embedding", ")", "\n", "\n", "return", "qvals", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.qgnn_agent.QGNNAgent.get_adj": [[78, 106], ["isinstance", "isinstance", "numpy.zeros.diagonal", "np.zeros.diagonal.setflags", "np.zeros.diagonal.fill", "torch_geometric.utils.add_self_loops", "numpy.zeros.reshape", "numpy.ones", "numpy.zeros.cpu().numpy", "torch_geometric.utils.dropout_adj", "[].repeat", "numpy.zeros", "numpy.zeros.nonzero", "len", "tuple", "numpy.zeros.cpu", "numpy.random.rand", "numpy.eye"], "methods", ["None"], ["", "def", "get_adj", "(", "self", ",", "adj", ",", "batch", ",", "n_agents", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "adj", ",", "Data", ")", ":", "\n", "\t\t\t", "adj", ".", "edge_index", "=", "utils", ".", "add_self_loops", "(", "adj", ".", "edge_index", ")", "[", "0", "]", "\n", "if", "self", ".", "adj_dropout", "!=", "0", ":", "\n", "\t\t\t\t", "adj", ".", "edge_index", "=", "utils", ".", "dropout_adj", "(", "adj", ".", "edge_index", ",", "p", "=", "self", ".", "adj_dropout", ")", "[", "0", "]", "\n", "", "return", "adj", "\n", "", "else", ":", "\n", "\t\t\t", "if", "adj", "is", "not", "None", ":", "\n", "\t\t\t\t", "adj", "=", "adj", ".", "reshape", "(", "batch", ",", "n_agents", ",", "n_agents", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "adj", "=", "np", ".", "ones", "(", "(", "batch", ",", "n_agents", ",", "n_agents", ")", ")", "\n", "", "if", "self", ".", "adj_dropout", "!=", "0", ":", "\n", "\t\t\t\t", "if", "self", ".", "adj_dropout", "==", "1", ":", "\n", "\t\t\t\t\t", "adj", "=", "np", ".", "eye", "(", "n_agents", ")", "[", "np", ".", "newaxis", "]", ".", "repeat", "(", "batch", ",", "axis", "=", "0", ")", "\n", "", "elif", "self", ".", "adj_dropout", "==", "None", ":", "\n", "\t\t\t\t\t", "adj", "=", "np", ".", "zeros", "(", "batch", ",", "n_agents", ",", "n_agents", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "edges", "=", "adj", ".", "nonzero", "(", ")", "\n", "n_edges", "=", "len", "(", "edges", "[", "0", "]", ")", "\n", "mask", "=", "np", ".", "random", ".", "rand", "(", "n_edges", ")", "<", "self", ".", "adj_dropout", "\n", "dropped_edges", "=", "tuple", "(", "[", "dim", "[", "mask", "]", "for", "dim", "in", "edges", "]", ")", "\n", "adj", "[", "dropped_edges", "]", "=", "0", "\n", "", "", "if", "isinstance", "(", "adj", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t\t", "adj", "=", "adj", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "diag", "=", "adj", ".", "diagonal", "(", "axis1", "=", "-", "2", ",", "axis2", "=", "-", "1", ")", "\n", "diag", ".", "setflags", "(", "write", "=", "True", ")", "\n", "diag", ".", "fill", "(", "1", ")", "\n", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.qgnn_agent.QGNNAgent.init_hidden": [[109, 111], ["qgnn_agent.QGNNAgent.rnn.init_hidden"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden"], ["", "", "def", "init_hidden", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "rnn", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.qgnn_agent.gnn_builder": [[114, 152], ["torch_geometric.nn.Sequential", "pymarl.modules.layer.gnn_wrapper.GNNwrapper", "range", "pymarl.modules.layer.mlp.MLP", "torch_geometric.nn.EdgeConv", "gnn_layers.append", "range", "gnn_layers.append", "torch_geometric.nn.GraphConv", "gnn_layers.append", "range", "torch.nn.ReLU", "gnn_layers.append", "pymarl.modules.layer.agggnn.create_agg_gnn", "gnn_layers.append", "range", "torch.nn.ReLU", "gnn_layers.append", "MHAconv", "gnn_layers.append", "torch.nn.ReLU", "gnn_layers.append", "torch.nn.ReLU"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.agggnn.create_agg_gnn"], ["", "", "def", "gnn_builder", "(", "gnn_type", "=", "'edgeconv'", ",", "layers", "=", "1", ",", "dim", "=", "64", ",", "layernorm", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "\t", "gnn_layers", "=", "[", "]", "\n", "\n", "if", "gnn_type", "==", "'edgeconv'", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "\t\t\t", "net", "=", "MLP", "(", "input_dim", "=", "2", "*", "dim", ",", "output_dim", "=", "dim", ",", "layer_sizes", "=", "[", "dim", "*", "3", "//", "2", "]", ",", "layernorm", "=", "layernorm", ")", "\n", "edgeconv_layer", "=", "EdgeConv", "(", "nn", "=", "net", ",", "aggr", "=", "'mean'", ")", "\n", "gnn_layers", ".", "append", "(", "(", "edgeconv_layer", ",", "'x, edge_index -> x'", ")", ")", "\n", "if", "i", "+", "1", "<", "layers", ":", "\n", "\t\t\t\t", "gnn_layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "", "", "elif", "gnn_type", "==", "'graphconv'", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "\t\t\t", "graphconv_layer", "=", "GraphConv", "(", "in_channels", "=", "dim", ",", "out_channels", "=", "dim", ",", "aggr", "=", "'mean'", ")", "\n", "gnn_layers", ".", "append", "(", "(", "graphconv_layer", ",", "'x, edge_index -> x'", ")", ")", "\n", "if", "i", "+", "1", "<", "layers", ":", "\n", "\t\t\t\t", "gnn_layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "", "", "elif", "gnn_type", "==", "'agggnn'", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "\t\t\t", "agggnn_layer", "=", "create_agg_gnn", "(", "in_dim", "=", "dim", ",", "out_dim", "=", "dim", ",", "nlayers", "=", "2", ",", "midmult", "=", "1.", ",", "layernorm", "=", "layernorm", ",", "fcom", "=", "None", ",", "aggr", "=", "'mean'", ")", "\n", "gnn_layers", ".", "append", "(", "(", "agggnn_layer", ",", "'x, edge_index -> x'", ")", ")", "\n", "if", "i", "+", "1", "<", "layers", ":", "\n", "\t\t\t\t", "gnn_layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "", "", "elif", "gnn_type", "==", "'mha'", ":", "\n", "\t\t", "from", "pymarl", ".", "modules", ".", "layer", ".", "gnns", "import", "MHAconv", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "\t\t\t", "heads", "=", "2", "\n", "mha_layer", "=", "MHAconv", "(", "input_size", "=", "dim", ",", "heads", "=", "heads", ",", "embed_size", "=", "dim", "//", "heads", ")", "\n", "gnn_layers", ".", "append", "(", "(", "mha_layer", ",", "'x, edge_index -> x'", ")", ")", "\n", "if", "i", "+", "1", "<", "layers", ":", "\n", "\t\t\t\t", "gnn_layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "", "", "gnn_geometric", "=", "Sequential", "(", "'x, edge_index'", ",", "gnn_layers", ")", "\n", "gnn", "=", "GNNwrapper", "(", "gnn_geometric", ")", "\n", "return", "gnn", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.central_rnn_agent.CentralRNNAgent.__init__": [[6, 13], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "args", ")", ":", "\n", "        ", "super", "(", "CentralRNNAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_shape", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRUCell", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "n_actions", "*", "args", ".", "central_action_embed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.central_rnn_agent.CentralRNNAgent.init_hidden": [[14, 17], ["central_rnn_agent.CentralRNNAgent.fc1.weight.new().zero_", "central_rnn_agent.CentralRNNAgent.fc1.weight.new"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "# make hidden states on same device as model", "\n", "        ", "return", "self", ".", "fc1", ".", "weight", ".", "new", "(", "1", ",", "self", ".", "args", ".", "rnn_hidden_dim", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.central_rnn_agent.CentralRNNAgent.forward": [[18, 25], ["torch.relu", "torch.relu", "torch.relu", "hidden_state.reshape", "central_rnn_agent.CentralRNNAgent.rnn", "central_rnn_agent.CentralRNNAgent.fc2", "q.reshape.reshape.reshape", "central_rnn_agent.CentralRNNAgent.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_state", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "inputs", ")", ")", "\n", "h_in", "=", "hidden_state", ".", "reshape", "(", "-", "1", ",", "self", ".", "args", ".", "rnn_hidden_dim", ")", "\n", "h", "=", "self", ".", "rnn", "(", "x", ",", "h_in", ")", "\n", "q", "=", "self", ".", "fc2", "(", "h", ")", "\n", "q", "=", "q", ".", "reshape", "(", "-", "1", ",", "self", ".", "args", ".", "n_actions", ",", "self", ".", "args", ".", "central_action_embed", ")", "\n", "return", "q", ",", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.__init__": [[10, 24], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "getattr", "getattr", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "pymarl.utils.th_utils.orthogonal_init_", "pymarl.utils.th_utils.orthogonal_init_"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.th_utils.orthogonal_init_", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.th_utils.orthogonal_init_"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "args", ")", ":", "\n", "        ", "super", "(", "NRNNAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_shape", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRUCell", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "rnn_hidden_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "rnn_hidden_dim", ",", "args", ".", "n_actions", ")", "\n", "\n", "if", "getattr", "(", "args", ",", "\"use_layer_norm\"", ",", "False", ")", ":", "\n", "            ", "self", ".", "layer_norm", "=", "LayerNorm", "(", "args", ".", "rnn_hidden_dim", ")", "\n", "\n", "", "if", "getattr", "(", "args", ",", "\"use_orthogonal\"", ",", "False", ")", ":", "\n", "            ", "orthogonal_init_", "(", "self", ".", "fc1", ")", "\n", "orthogonal_init_", "(", "self", ".", "fc2", ",", "gain", "=", "args", ".", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden": [[25, 28], ["n_rnn_agent.NRNNAgent.fc1.weight.new().zero_", "n_rnn_agent.NRNNAgent.fc1.weight.new"], "methods", ["None"], ["", "", "def", "init_hidden", "(", "self", ")", ":", "\n", "# make hidden states on same device as model", "\n", "        ", "return", "self", ".", "fc1", ".", "weight", ".", "new", "(", "1", ",", "self", ".", "args", ".", "rnn_hidden_dim", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.forward": [[29, 43], ["inputs.view.view.size", "inputs.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "hidden_state.reshape", "n_rnn_agent.NRNNAgent.rnn", "getattr", "n_rnn_agent.NRNNAgent.fc1", "n_rnn_agent.NRNNAgent.fc2", "n_rnn_agent.NRNNAgent.fc2", "n_rnn_agent.NRNNAgent.view", "n_rnn_agent.NRNNAgent.view", "n_rnn_agent.NRNNAgent.layer_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_state", ",", "**", "kwargs", ")", ":", "\n", "        ", "b", ",", "a", ",", "e", "=", "inputs", ".", "size", "(", ")", "\n", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "e", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "inputs", ")", ",", "inplace", "=", "True", ")", "\n", "h_in", "=", "hidden_state", ".", "reshape", "(", "-", "1", ",", "self", ".", "args", ".", "rnn_hidden_dim", ")", "\n", "hh", "=", "self", ".", "rnn", "(", "x", ",", "h_in", ")", "\n", "\n", "if", "getattr", "(", "self", ".", "args", ",", "\"use_layer_norm\"", ",", "False", ")", ":", "\n", "            ", "q", "=", "self", ".", "fc2", "(", "self", ".", "layer_norm", "(", "hh", ")", ")", "\n", "", "else", ":", "\n", "            ", "q", "=", "self", ".", "fc2", "(", "hh", ")", "\n", "\n", "", "return", "q", ".", "view", "(", "b", ",", "a", ",", "-", "1", ")", ",", "hh", ".", "view", "(", "b", ",", "a", ",", "-", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.fmac_critic.FMACCritic.__init__": [[9, 23], ["torch.Module.__init__", "fmac_critic.FMACCritic._get_input_shape", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._get_input_shape"], ["    ", "def", "__init__", "(", "self", ",", "scheme", ",", "args", ")", ":", "\n", "        ", "super", "(", "FMACCritic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "n_actions", "=", "args", ".", "n_actions", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "input_shape", "=", "self", ".", "_get_input_shape", "(", "scheme", ")", "\n", "self", ".", "output_type", "=", "\"q\"", "\n", "self", ".", "hidden_states", "=", "None", "\n", "self", ".", "critic_hidden_dim", "=", "args", ".", "critic_hidden_dim", "\n", "\n", "# Set up network layers", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "input_shape", "+", "self", ".", "n_actions", ",", "self", ".", "critic_hidden_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "critic_hidden_dim", ",", "self", ".", "critic_hidden_dim", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "self", ".", "critic_hidden_dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.fmac_critic.FMACCritic.forward": [[24, 35], ["fmac_critic.FMACCritic._build_inputs", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "fmac_critic.FMACCritic.fc3", "fmac_critic.FMACCritic.fc1", "fmac_critic.FMACCritic.fc2"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "actions", ",", "hidden_state", "=", "None", ")", ":", "\n", "        ", "bs", "=", "inputs", ".", "batch_size", "\n", "ts", "=", "inputs", ".", "max_seq_length", "\n", "\n", "inputs", "=", "self", ".", "_build_inputs", "(", "inputs", ")", "\n", "inputs", "=", "th", ".", "cat", "(", "[", "inputs", ",", "actions", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "inputs", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "q1", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "return", "q1", ",", "hidden_state", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.fmac_critic.FMACCritic._build_inputs": [[36, 49], ["torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.eye().unsqueeze().unsqueeze().expand", "torch.eye().unsqueeze().unsqueeze().expand", "torch.eye().unsqueeze().unsqueeze().expand", "x.reshape", "torch.eye().unsqueeze().unsqueeze", "torch.eye().unsqueeze().unsqueeze", "torch.eye().unsqueeze().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye"], "methods", ["None"], ["", "def", "_build_inputs", "(", "self", ",", "batch", ")", ":", "\n", "# Assumes homogenous agents with flat observations.", "\n", "# Other MACs might want to e.g. delegate building inputs to each agent", "\n", "        ", "bs", "=", "batch", ".", "batch_size", "\n", "ts", "=", "batch", ".", "max_seq_length", "\n", "inputs", "=", "[", "]", "\n", "inputs", ".", "append", "(", "batch", "[", "\"obs\"", "]", ")", "# b1av", "\n", "# inputs.append(batch[\"state\"].unsqueeze(2).repeat(1, 1, self.n_agents, 1))  # b1av", "\n", "if", "self", ".", "args", ".", "obs_agent_id", ":", "\n", "            ", "inputs", ".", "append", "(", "th", ".", "eye", "(", "self", ".", "n_agents", ",", "device", "=", "batch", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "bs", ",", "ts", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "", "inputs", "=", "th", ".", "cat", "(", "[", "x", ".", "reshape", "(", "bs", ",", "ts", ",", "self", ".", "n_agents", ",", "-", "1", ")", "for", "x", "in", "inputs", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.fmac_critic.FMACCritic._get_input_shape": [[50, 57], ["None"], "methods", ["None"], ["", "def", "_get_input_shape", "(", "self", ",", "scheme", ")", ":", "\n", "        ", "input_shape", "=", "scheme", "[", "\"obs\"", "]", "[", "\"vshape\"", "]", "\n", "# input_shape += scheme[\"state\"][\"vshape\"]", "\n", "if", "self", ".", "args", ".", "obs_agent_id", ":", "\n", "            ", "input_shape", "+=", "self", ".", "n_agents", "\n", "\n", "", "return", "input_shape", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.coma_gnn.ComaGNNCritic.__init__": [[10, 25], ["torch.Module.__init__", "coma_gnn.ComaGNNCritic._get_input_shape", "pymarl.modules.layer.gnn_wrapper.GNNwrapper", "pymarl.modules.layer.mixer.Mixer", "coma_gnn.ComaGNNCritic.build_gnn"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._get_input_shape", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.coma_gnn.ComaGNNCritic.build_gnn"], ["    ", "def", "__init__", "(", "self", ",", "scheme", ",", "args", ")", ":", "\n", "        ", "super", "(", "ComaGNNCritic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "n_actions", "=", "args", ".", "n_actions", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "\n", "self", ".", "input_shape", "=", "self", ".", "_get_input_shape", "(", "scheme", ")", "\n", "self", ".", "output_type", "=", "\"q\"", "\n", "\n", "# Set up network layers", "\n", "self", ".", "gnn_layers", "=", "[", "32", ",", "32", ",", "32", "]", "\n", "self", ".", "gnn", "=", "GNNwrapper", "(", "self", ".", "build_gnn", "(", ")", ")", "\n", "self", ".", "pooling", "=", "Mixer", "(", "input_dim", "=", "self", ".", "gnn_layers", "[", "-", "1", "]", ",", "output_dim", "=", "1", ",", "hidden_dim", "=", "self", ".", "gnn_layers", "[", "-", "1", "]", "//", "2", ",", "\n", "psi_layers", "=", "2", ",", "phi_layers", "=", "2", ",", "batchnorm", "=", "False", ",", "midmult", "=", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.coma_gnn.ComaGNNCritic.forward": [[26, 35], ["inputs.view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "coma_gnn.ComaGNNCritic.gnn", "coma_gnn.ComaGNNCritic.pooling", "coma_gnn.ComaGNNCritic.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# B x T x N x D", "\n", "        ", "b", ",", "t", ",", "n", ",", "d", "=", "inputs", ".", "shape", "\n", "inputs_reshaped", "=", "inputs", ".", "view", "(", "b", "*", "t", ",", "n", ",", "d", ")", "\n", "adj", "=", "torch", ".", "ones", "(", "b", "*", "t", ",", "n", ",", "n", ")", "\n", "x", "=", "self", ".", "gnn", "(", "X", "=", "inputs_reshaped", ",", "A", "=", "adj", ")", "\n", "y", "=", "self", ".", "pooling", "(", "x", ")", "\n", "out", "=", "y", ".", "view", "(", "b", ",", "t", ",", "1", ")", "\n", "return", "out", "# B x T x 1", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.coma_gnn.ComaGNNCritic._get_input_shape": [[38, 41], ["None"], "methods", ["None"], ["", "def", "_get_input_shape", "(", "self", ",", "scheme", ")", ":", "\n", "# observation and action", "\n", "        ", "return", "scheme", "[", "\"obs\"", "]", "[", "\"vshape\"", "]", "+", "scheme", "[", "\"actions_onehot\"", "]", "[", "\"vshape\"", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.coma_gnn.ComaGNNCritic.build_gnn": [[43, 55], ["zip", "torch_geometric.nn.Sequential", "pymarl.modules.layer.mlp.MLP", "torch_geometric.nn.EdgeConv", "gnn_layers.append", "len", "gnn_layers.append", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "build_gnn", "(", "self", ")", ":", "\n", "        ", "gnn_layers", "=", "[", "]", "\n", "l", "=", "1", "\n", "for", "in_dim", ",", "out_dim", "in", "zip", "(", "[", "self", ".", "input_shape", "]", "+", "self", ".", "gnn_layers", "[", ":", "-", "1", "]", ",", "self", ".", "gnn_layers", ")", ":", "\n", "            ", "net", "=", "MLP", "(", "input_dim", "=", "2", "*", "in_dim", ",", "output_dim", "=", "out_dim", ",", "layer_sizes", "=", "[", "(", "in_dim", "+", "out_dim", ")", "//", "2", "]", ",", "layernorm", "=", "True", ")", "\n", "edgeconv_layer", "=", "EdgeConv", "(", "nn", "=", "net", ",", "aggr", "=", "'mean'", ")", "\n", "gnn_layers", ".", "append", "(", "(", "edgeconv_layer", ",", "'x, edge_index -> x'", ")", ")", "\n", "if", "l", "<", "len", "(", "self", ".", "gnn_layers", ")", ":", "\n", "                ", "gnn_layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "l", "+=", "1", "\n", "", "gnn", "=", "Sequential", "(", "'x, edge_index'", ",", "gnn_layers", ")", "\n", "return", "gnn", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.centralv.CentralVCritic.__init__": [[7, 23], ["torch.Module.__init__", "centralv.CentralVCritic._get_input_shape", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._get_input_shape"], ["    ", "def", "__init__", "(", "self", ",", "scheme", ",", "args", ")", ":", "\n", "        ", "super", "(", "CentralVCritic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "n_actions", "=", "args", ".", "n_actions", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "\n", "input_shape", "=", "self", ".", "_get_input_shape", "(", "scheme", ")", "\n", "self", ".", "output_type", "=", "\"v\"", "\n", "\n", "# Set up network layers", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "input_shape", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.centralv.CentralVCritic.forward": [[25, 29], ["centralv.CentralVCritic._build_inputs", "centralv.CentralVCritic.fc1"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs"], ["", "def", "forward", "(", "self", ",", "batch", ",", "t", "=", "None", ")", ":", "\n", "        ", "inputs", "=", "self", ".", "_build_inputs", "(", "batch", ",", "t", "=", "t", ")", "\n", "q", "=", "self", ".", "fc1", "(", "inputs", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.centralv.CentralVCritic._build_inputs": [[30, 33], ["slice", "slice"], "methods", ["None"], ["", "def", "_build_inputs", "(", "self", ",", "batch", ",", "t", "=", "None", ")", ":", "\n", "        ", "ts", "=", "slice", "(", "None", ")", "if", "t", "is", "None", "else", "slice", "(", "t", ",", "t", "+", "1", ")", "\n", "return", "batch", "[", "\"state\"", "]", "[", ":", ",", "ts", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.centralv.CentralVCritic._get_input_shape": [[34, 37], ["None"], "methods", ["None"], ["", "def", "_get_input_shape", "(", "self", ",", "scheme", ")", ":", "\n", "        ", "input_shape", "=", "scheme", "[", "\"state\"", "]", "[", "\"vshape\"", "]", "\n", "return", "input_shape", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.coma.COMACritic.__init__": [[7, 21], ["torch.Module.__init__", "coma.COMACritic._get_input_shape", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._get_input_shape"], ["    ", "def", "__init__", "(", "self", ",", "scheme", ",", "args", ")", ":", "\n", "        ", "super", "(", "COMACritic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "n_actions", "=", "args", ".", "n_actions", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "\n", "input_shape", "=", "self", ".", "_get_input_shape", "(", "scheme", ")", "\n", "self", ".", "output_type", "=", "\"q\"", "\n", "\n", "# Set up network layers", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_shape", ",", "128", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "128", ",", "128", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "128", ",", "self", ".", "n_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.coma.COMACritic.forward": [[22, 28], ["coma.COMACritic._build_inputs", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "coma.COMACritic.fc3", "coma.COMACritic.fc1", "coma.COMACritic.fc2"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs"], ["", "def", "forward", "(", "self", ",", "batch", ",", "t", "=", "None", ")", ":", "\n", "        ", "inputs", "=", "self", ".", "_build_inputs", "(", "batch", ",", "t", "=", "t", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "inputs", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "q", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.coma.COMACritic._build_inputs": [[29, 60], ["torch.cat.append", "torch.cat.append", "[].view().repeat", "agent_mask.view().repeat().view.view().repeat().view.view().repeat().view", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "slice", "slice", "[].unsqueeze().repeat", "torch.eye", "torch.eye", "torch.eye", "torch.cat.append", "isinstance", "torch.eye().unsqueeze().unsqueeze().expand", "torch.eye().unsqueeze().unsqueeze().expand", "torch.eye().unsqueeze().unsqueeze().expand", "[].view", "agent_mask.view().repeat().view.view().repeat().view.view().repeat", "agent_mask.view().repeat().view.view().repeat().view.unsqueeze().unsqueeze", "torch.zeros_like().view().repeat", "torch.zeros_like().view().repeat", "torch.zeros_like().view().repeat", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "last_actions.view().repeat.view().repeat.view().repeat", "torch.cat.append", "x.reshape", "[].unsqueeze", "[].view().repeat", "torch.eye().unsqueeze().unsqueeze", "torch.eye().unsqueeze().unsqueeze", "torch.eye().unsqueeze().unsqueeze", "agent_mask.view().repeat().view.view().repeat().view.view", "agent_mask.view().repeat().view.view().repeat().view.unsqueeze", "torch.zeros_like().view", "torch.zeros_like().view", "torch.zeros_like().view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "last_actions.view().repeat.view().repeat.view", "[].view", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.eye", "torch.eye", "torch.eye", "slice"], "methods", ["None"], ["", "def", "_build_inputs", "(", "self", ",", "batch", ",", "t", "=", "None", ")", ":", "\n", "        ", "bs", "=", "batch", ".", "batch_size", "\n", "max_t", "=", "batch", ".", "max_seq_length", "if", "t", "is", "None", "else", "1", "\n", "ts", "=", "slice", "(", "None", ")", "if", "t", "is", "None", "else", "slice", "(", "t", ",", "t", "+", "1", ")", "\n", "inputs", "=", "[", "]", "\n", "# state", "\n", "inputs", ".", "append", "(", "batch", "[", "\"state\"", "]", "[", ":", ",", "ts", "]", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ",", "1", ")", ")", "\n", "\n", "# observation", "\n", "inputs", ".", "append", "(", "batch", "[", "\"obs\"", "]", "[", ":", ",", "ts", "]", ")", "\n", "\n", "# actions (masked out by agent)", "\n", "actions", "=", "batch", "[", "\"actions_onehot\"", "]", "[", ":", ",", "ts", "]", ".", "view", "(", "bs", ",", "max_t", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ",", "1", ")", "\n", "agent_mask", "=", "(", "1", "-", "th", ".", "eye", "(", "self", ".", "n_agents", ",", "device", "=", "batch", ".", "device", ")", ")", "\n", "agent_mask", "=", "agent_mask", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "n_actions", ")", ".", "view", "(", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "inputs", ".", "append", "(", "actions", "*", "agent_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "# last actions", "\n", "if", "t", "==", "0", ":", "\n", "            ", "inputs", ".", "append", "(", "th", ".", "zeros_like", "(", "batch", "[", "\"actions_onehot\"", "]", "[", ":", ",", "0", ":", "1", "]", ")", ".", "view", "(", "bs", ",", "max_t", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ",", "1", ")", ")", "\n", "", "elif", "isinstance", "(", "t", ",", "int", ")", ":", "\n", "            ", "inputs", ".", "append", "(", "batch", "[", "\"actions_onehot\"", "]", "[", ":", ",", "slice", "(", "t", "-", "1", ",", "t", ")", "]", ".", "view", "(", "bs", ",", "max_t", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "last_actions", "=", "th", ".", "cat", "(", "[", "th", ".", "zeros_like", "(", "batch", "[", "\"actions_onehot\"", "]", "[", ":", ",", "0", ":", "1", "]", ")", ",", "batch", "[", "\"actions_onehot\"", "]", "[", ":", ",", ":", "-", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "last_actions", "=", "last_actions", ".", "view", "(", "bs", ",", "max_t", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ",", "1", ")", "\n", "inputs", ".", "append", "(", "last_actions", ")", "\n", "\n", "", "inputs", ".", "append", "(", "th", ".", "eye", "(", "self", ".", "n_agents", ",", "device", "=", "batch", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "bs", ",", "max_t", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "inputs", "=", "th", ".", "cat", "(", "[", "x", ".", "reshape", "(", "bs", ",", "max_t", ",", "self", ".", "n_agents", ",", "-", "1", ")", "for", "x", "in", "inputs", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.coma.COMACritic._get_input_shape": [[61, 71], ["None"], "methods", ["None"], ["", "def", "_get_input_shape", "(", "self", ",", "scheme", ")", ":", "\n", "# state", "\n", "        ", "input_shape", "=", "scheme", "[", "\"state\"", "]", "[", "\"vshape\"", "]", "\n", "# observation", "\n", "input_shape", "+=", "scheme", "[", "\"obs\"", "]", "[", "\"vshape\"", "]", "\n", "# actions and last actions", "\n", "input_shape", "+=", "scheme", "[", "\"actions_onehot\"", "]", "[", "\"vshape\"", "]", "[", "0", "]", "*", "self", ".", "n_agents", "*", "2", "\n", "# agent id", "\n", "input_shape", "+=", "self", ".", "n_agents", "\n", "return", "input_shape", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic.__init__": [[7, 22], ["torch.Module.__init__", "offpg.OffPGCritic._get_input_shape", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._get_input_shape"], ["    ", "def", "__init__", "(", "self", ",", "scheme", ",", "args", ")", ":", "\n", "        ", "super", "(", "OffPGCritic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "n_actions", "=", "args", ".", "n_actions", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "\n", "input_shape", "=", "self", ".", "_get_input_shape", "(", "scheme", ")", "\n", "self", ".", "output_type", "=", "\"q\"", "\n", "\n", "# Set up network layers", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_shape", ",", "256", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "256", ",", "256", ")", "\n", "self", ".", "fc_v", "=", "nn", ".", "Linear", "(", "256", ",", "1", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "self", ".", "n_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic.forward": [[23, 30], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "offpg.OffPGCritic.fc_v", "offpg.OffPGCritic.fc3", "offpg.OffPGCritic.fc1", "offpg.OffPGCritic.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "inputs", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "v", "=", "self", ".", "fc_v", "(", "x", ")", "\n", "a", "=", "self", ".", "fc3", "(", "x", ")", "\n", "q", "=", "a", "+", "v", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._build_inputs": [[31, 51], ["torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "[].unsqueeze().repeat", "torch.eye().unsqueeze().unsqueeze().expand", "torch.eye().unsqueeze().unsqueeze().expand", "torch.eye().unsqueeze().unsqueeze().expand", "x.reshape", "[].unsqueeze", "torch.eye().unsqueeze().unsqueeze", "torch.eye().unsqueeze().unsqueeze", "torch.eye().unsqueeze().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye"], "methods", ["None"], ["", "def", "_build_inputs", "(", "self", ",", "batch", ",", "bs", ",", "max_t", ")", ":", "\n", "        ", "inputs", "=", "[", "]", "\n", "# state, obs, action", "\n", "inputs", ".", "append", "(", "batch", "[", "\"state\"", "]", "[", ":", "]", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ",", "1", ")", ")", "\n", "inputs", ".", "append", "(", "batch", "[", "\"obs\"", "]", "[", ":", "]", ")", "\n", "#actions = batch[\"actions_onehot\"][:].view(bs, max_t, 1, -1).repeat(1, 1, self.n_agents, 1)", "\n", "#agent_mask = (1 - th.eye(self.n_agents, device=batch.device))", "\n", "#agent_mask = agent_mask.view(-1, 1).repeat(1, self.n_actions).view(self.n_agents, -1)", "\n", "#inputs.append(actions * agent_mask.unsqueeze(0).unsqueeze(0))", "\n", "# last actions", "\n", "#if self.args.obs_last_action:", "\n", "#    last_action = []", "\n", "#    last_action.append(actions[:, 0:1].squeeze(2))", "\n", "#    last_action.append(actions[:, :-1].squeeze(2))", "\n", "#    last_action = th.cat([x for x in last_action], dim = 1)", "\n", "#    inputs.append(last_action)", "\n", "#agent id", "\n", "inputs", ".", "append", "(", "th", ".", "eye", "(", "self", ".", "n_agents", ",", "device", "=", "batch", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "bs", ",", "max_t", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "inputs", "=", "th", ".", "cat", "(", "[", "x", ".", "reshape", "(", "bs", ",", "max_t", ",", "self", ".", "n_agents", ",", "-", "1", ")", "for", "x", "in", "inputs", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.offpg.OffPGCritic._get_input_shape": [[54, 66], ["None"], "methods", ["None"], ["", "def", "_get_input_shape", "(", "self", ",", "scheme", ")", ":", "\n", "# state", "\n", "        ", "input_shape", "=", "scheme", "[", "\"state\"", "]", "[", "\"vshape\"", "]", "\n", "# observation", "\n", "input_shape", "+=", "scheme", "[", "\"obs\"", "]", "[", "\"vshape\"", "]", "\n", "# actions and last actions", "\n", "#input_shape += scheme[\"actions_onehot\"][\"vshape\"][0] * self.n_agents", "\n", "#if self.args.obs_last_action:", "\n", "#    input_shape += scheme[\"actions_onehot\"][\"vshape\"][0] * self.n_agents", "\n", "# agent id", "\n", "input_shape", "+=", "self", ".", "n_agents", "\n", "return", "input_shape", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.lica.LICACritic.__init__": [[8, 35], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "numpy.prod", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scheme", ",", "args", ")", ":", "\n", "        ", "super", "(", "LICACritic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "n_actions", "=", "args", ".", "n_actions", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "\n", "self", ".", "output_type", "=", "\"q\"", "\n", "\n", "# Set up network layers", "\n", "self", ".", "state_dim", "=", "int", "(", "np", ".", "prod", "(", "args", ".", "state_shape", ")", ")", "\n", "self", ".", "weight_dim", "=", "args", ".", "lica_mixing_embed_dim", "*", "self", ".", "n_agents", "*", "self", ".", "n_actions", "\n", "self", ".", "hid_dim", "=", "args", ".", "hypernet_embed_dim", "\n", "\n", "self", ".", "hyper_w_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "self", ".", "hid_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hid_dim", ",", "self", ".", "weight_dim", ")", ")", "\n", "self", ".", "hyper_w_final", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "self", ".", "hid_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hid_dim", ",", "args", ".", "lica_mixing_embed_dim", ")", ")", "\n", "\n", "# State dependent bias for hidden layer", "\n", "self", ".", "hyper_b_1", "=", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "args", ".", "lica_mixing_embed_dim", ")", "\n", "\n", "self", ".", "hyper_b_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "self", ".", "hid_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hid_dim", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.critics.lica.LICACritic.forward": [[36, 58], ["states.reshape.reshape.size", "states.reshape.reshape.reshape", "act.reshape", "lica.LICACritic.hyper_w_1", "lica.LICACritic.hyper_b_1", "w1.view.view.view", "b1.view.view.view", "torch.relu", "torch.relu", "torch.relu", "lica.LICACritic.hyper_w_final", "w_final.view.view.view", "lica.LICACritic.hyper_b_2().view", "q.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "lica.LICACritic.hyper_b_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "act", ",", "states", ")", ":", "\n", "        ", "bs", "=", "states", ".", "size", "(", "0", ")", "\n", "states", "=", "states", ".", "reshape", "(", "-", "1", ",", "self", ".", "state_dim", ")", "\n", "action_probs", "=", "act", ".", "reshape", "(", "-", "1", ",", "1", ",", "self", ".", "n_agents", "*", "self", ".", "n_actions", ")", "\n", "\n", "# first layer", "\n", "w1", "=", "self", ".", "hyper_w_1", "(", "states", ")", "\n", "b1", "=", "self", ".", "hyper_b_1", "(", "states", ")", "\n", "w1", "=", "w1", ".", "view", "(", "-", "1", ",", "self", ".", "n_agents", "*", "self", ".", "n_actions", ",", "self", ".", "args", ".", "lica_mixing_embed_dim", ")", "\n", "b1", "=", "b1", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "args", ".", "lica_mixing_embed_dim", ")", "\n", "\n", "h", "=", "th", ".", "relu", "(", "th", ".", "bmm", "(", "action_probs", ",", "w1", ")", "+", "b1", ")", "\n", "\n", "# second layer", "\n", "w_final", "=", "self", ".", "hyper_w_final", "(", "states", ")", "\n", "w_final", "=", "w_final", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "lica_mixing_embed_dim", ",", "1", ")", "\n", "b2", "=", "self", ".", "hyper_b_2", "(", "states", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "q", "=", "th", ".", "bmm", "(", "h", ",", "w_final", ")", "+", "b2", "\n", "q", "=", "q", ".", "view", "(", "bs", ",", "-", "1", ",", "1", ")", "\n", "\n", "return", "q", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.nmix.Mixer.__init__": [[9, 37], ["torch.Module.__init__", "int", "getattr", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "getattr", "numpy.prod", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "nmix.Mixer.modules", "pymarl.utils.th_utils.orthogonal_init_"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.th_utils.orthogonal_init_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "abs", "=", "True", ")", ":", "\n", "        ", "super", "(", "Mixer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "embed_dim", "=", "args", ".", "mixing_embed_dim", "\n", "self", ".", "input_dim", "=", "self", ".", "state_dim", "=", "int", "(", "np", ".", "prod", "(", "args", ".", "state_shape", ")", ")", "\n", "\n", "self", ".", "abs", "=", "abs", "# monotonicity constraint", "\n", "self", ".", "qmix_pos_func", "=", "getattr", "(", "self", ".", "args", ",", "\"qmix_pos_func\"", ",", "\"abs\"", ")", "\n", "\n", "# hyper w1 b1", "\n", "self", ".", "hyper_w1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "args", ".", "hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "args", ".", "hypernet_embed", ",", "self", ".", "n_agents", "*", "self", ".", "embed_dim", ")", ")", "\n", "self", ".", "hyper_b1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "embed_dim", ")", ")", "\n", "\n", "# hyper w2 b2", "\n", "self", ".", "hyper_w2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "args", ".", "hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "args", ".", "hypernet_embed", ",", "self", ".", "embed_dim", ")", ")", "\n", "self", ".", "hyper_b2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "embed_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "1", ")", ")", "\n", "\n", "if", "getattr", "(", "args", ",", "\"use_orthogonal\"", ",", "False", ")", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "orthogonal_init_", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.nmix.Mixer.forward": [[38, 62], ["qvals.reshape.reshape.size", "qvals.reshape.reshape.reshape", "states.reshape.reshape.reshape", "nmix.Mixer.hyper_w1().view", "nmix.Mixer.hyper_b1().view", "nmix.Mixer.hyper_w2().view", "nmix.Mixer.hyper_b2().view", "torch.elu", "torch.elu", "torch.elu", "y.view", "nmix.Mixer.pos_func", "nmix.Mixer.pos_func", "torch.matmul", "torch.matmul", "torch.matmul", "nmix.Mixer.hyper_w1", "nmix.Mixer.hyper_b1", "nmix.Mixer.hyper_w2", "nmix.Mixer.hyper_b2", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.nmix.Mixer.pos_func", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.nmix.Mixer.pos_func"], ["", "", "", "def", "forward", "(", "self", ",", "qvals", ",", "states", ")", ":", "\n", "# reshape", "\n", "        ", "b", ",", "t", ",", "_", "=", "qvals", ".", "size", "(", ")", "\n", "\n", "qvals", "=", "qvals", ".", "reshape", "(", "b", "*", "t", ",", "1", ",", "self", ".", "n_agents", ")", "\n", "states", "=", "states", ".", "reshape", "(", "-", "1", ",", "self", ".", "state_dim", ")", "\n", "\n", "# First layer", "\n", "w1", "=", "self", ".", "hyper_w1", "(", "states", ")", ".", "view", "(", "-", "1", ",", "self", ".", "n_agents", ",", "self", ".", "embed_dim", ")", "# b * t, n_agents, emb", "\n", "b1", "=", "self", ".", "hyper_b1", "(", "states", ")", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "embed_dim", ")", "\n", "\n", "# Second layer", "\n", "w2", "=", "self", ".", "hyper_w2", "(", "states", ")", ".", "view", "(", "-", "1", ",", "self", ".", "embed_dim", ",", "1", ")", "# b * t, emb, 1", "\n", "b2", "=", "self", ".", "hyper_b2", "(", "states", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "abs", ":", "\n", "            ", "w1", "=", "self", ".", "pos_func", "(", "w1", ")", "\n", "w2", "=", "self", ".", "pos_func", "(", "w2", ")", "\n", "\n", "# Forward", "\n", "", "hidden", "=", "F", ".", "elu", "(", "th", ".", "matmul", "(", "qvals", ",", "w1", ")", "+", "b1", ")", "# b * t, 1, emb", "\n", "y", "=", "th", ".", "matmul", "(", "hidden", ",", "w2", ")", "+", "b2", "# b * t, 1, 1", "\n", "\n", "return", "y", ".", "view", "(", "b", ",", "t", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.nmix.Mixer.pos_func": [[63, 70], ["torch.nn.Softplus", "torch.nn.Softplus", "torch.nn.Softplus", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "pos_func", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "qmix_pos_func", "==", "\"softplus\"", ":", "\n", "            ", "return", "th", ".", "nn", ".", "Softplus", "(", "beta", "=", "self", ".", "args", ".", "qmix_pos_func_beta", ")", "(", "x", ")", "\n", "", "elif", "self", ".", "qmix_pos_func", "==", "\"quadratic\"", ":", "\n", "            ", "return", "0.5", "*", "x", "**", "2", "\n", "", "else", ":", "\n", "            ", "return", "th", ".", "abs", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.dmaq_general.DMAQer.__init__": [[10, 31], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "pymarl.modules.mixers.dmaq_si_weight.DMAQ_SI_Weight", "numpy.prod", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "DMAQer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "n_actions", "=", "args", ".", "n_actions", "\n", "self", ".", "state_dim", "=", "int", "(", "np", ".", "prod", "(", "args", ".", "state_shape", ")", ")", "\n", "self", ".", "action_dim", "=", "args", ".", "n_agents", "*", "self", ".", "n_actions", "\n", "self", ".", "state_action_dim", "=", "self", ".", "state_dim", "+", "self", ".", "action_dim", "+", "1", "\n", "\n", "self", ".", "embed_dim", "=", "args", ".", "mixing_embed_dim", "\n", "\n", "hypernet_embed", "=", "self", ".", "args", ".", "hypernet_embed", "\n", "self", ".", "hyper_w_final", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hypernet_embed", ",", "self", ".", "n_agents", ")", ")", "\n", "self", ".", "V", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hypernet_embed", ",", "self", ".", "n_agents", ")", ")", "\n", "\n", "self", ".", "si_weight", "=", "DMAQ_SI_Weight", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.dmaq_general.DMAQer.calc_v": [[32, 36], ["agent_qs.view.view.view", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "calc_v", "(", "self", ",", "agent_qs", ")", ":", "\n", "        ", "agent_qs", "=", "agent_qs", ".", "view", "(", "-", "1", ",", "self", ".", "n_agents", ")", "\n", "v_tot", "=", "th", ".", "sum", "(", "agent_qs", ",", "dim", "=", "-", "1", ")", "\n", "return", "v_tot", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.dmaq_general.DMAQer.calc_adv": [[37, 53], ["states.reshape.reshape.reshape", "actions.reshape.reshape.reshape", "agent_qs.view.view.view", "max_q_i.view.view.view", "dmaq_general.DMAQer.si_weight", "adv_w_final.view.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "calc_adv", "(", "self", ",", "agent_qs", ",", "states", ",", "actions", ",", "max_q_i", ")", ":", "\n", "        ", "states", "=", "states", ".", "reshape", "(", "-", "1", ",", "self", ".", "state_dim", ")", "\n", "actions", "=", "actions", ".", "reshape", "(", "-", "1", ",", "self", ".", "action_dim", ")", "\n", "agent_qs", "=", "agent_qs", ".", "view", "(", "-", "1", ",", "self", ".", "n_agents", ")", "\n", "max_q_i", "=", "max_q_i", ".", "view", "(", "-", "1", ",", "self", ".", "n_agents", ")", "\n", "\n", "adv_q", "=", "(", "agent_qs", "-", "max_q_i", ")", ".", "view", "(", "-", "1", ",", "self", ".", "n_agents", ")", ".", "detach", "(", ")", "\n", "\n", "adv_w_final", "=", "self", ".", "si_weight", "(", "states", ",", "actions", ")", "\n", "adv_w_final", "=", "adv_w_final", ".", "view", "(", "-", "1", ",", "self", ".", "n_agents", ")", "\n", "\n", "if", "self", ".", "args", ".", "is_minus_one", ":", "\n", "            ", "adv_tot", "=", "th", ".", "sum", "(", "adv_q", "*", "(", "adv_w_final", "-", "1.", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "adv_tot", "=", "th", ".", "sum", "(", "adv_q", "*", "adv_w_final", ",", "dim", "=", "1", ")", "\n", "", "return", "adv_tot", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.dmaq_general.DMAQer.calc": [[54, 61], ["dmaq_general.DMAQer.calc_v", "dmaq_general.DMAQer.calc_adv"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.dmaq_general.DMAQer.calc_v", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.dmaq_general.DMAQer.calc_adv"], ["", "def", "calc", "(", "self", ",", "agent_qs", ",", "states", ",", "actions", "=", "None", ",", "max_q_i", "=", "None", ",", "is_v", "=", "False", ")", ":", "\n", "        ", "if", "is_v", ":", "\n", "            ", "v_tot", "=", "self", ".", "calc_v", "(", "agent_qs", ")", "\n", "return", "v_tot", "\n", "", "else", ":", "\n", "            ", "adv_tot", "=", "self", ".", "calc_adv", "(", "agent_qs", ",", "states", ",", "actions", ",", "max_q_i", ")", "\n", "return", "adv_tot", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.dmaq_general.DMAQer.forward": [[62, 84], ["agent_qs.view.view.size", "states.reshape.reshape.reshape", "agent_qs.view.view.view", "dmaq_general.DMAQer.hyper_w_final", "torch.abs", "torch.abs", "torch.abs", "dmaq_general.DMAQer.V", "v.view.view.view", "dmaq_general.DMAQer.calc", "dmaq_general.DMAQer.view", "torch.abs.view", "max_q_i.view.view.view"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.dmaq_general.DMAQer.calc"], ["", "", "def", "forward", "(", "self", ",", "agent_qs", ",", "states", ",", "actions", "=", "None", ",", "max_q_i", "=", "None", ",", "is_v", "=", "False", ")", ":", "\n", "        ", "bs", "=", "agent_qs", ".", "size", "(", "0", ")", "\n", "states", "=", "states", ".", "reshape", "(", "-", "1", ",", "self", ".", "state_dim", ")", "\n", "agent_qs", "=", "agent_qs", ".", "view", "(", "-", "1", ",", "self", ".", "n_agents", ")", "\n", "\n", "w_final", "=", "self", ".", "hyper_w_final", "(", "states", ")", "\n", "w_final", "=", "th", ".", "abs", "(", "w_final", ")", "\n", "w_final", "=", "w_final", ".", "view", "(", "-", "1", ",", "self", ".", "n_agents", ")", "+", "1e-10", "\n", "v", "=", "self", ".", "V", "(", "states", ")", "\n", "v", "=", "v", ".", "view", "(", "-", "1", ",", "self", ".", "n_agents", ")", "\n", "\n", "if", "self", ".", "args", ".", "weighted_head", ":", "\n", "            ", "agent_qs", "=", "w_final", "*", "agent_qs", "+", "v", "\n", "", "if", "not", "is_v", ":", "\n", "            ", "max_q_i", "=", "max_q_i", ".", "view", "(", "-", "1", ",", "self", ".", "n_agents", ")", "\n", "if", "self", ".", "args", ".", "weighted_head", ":", "\n", "                ", "max_q_i", "=", "w_final", "*", "max_q_i", "+", "v", "\n", "\n", "", "", "y", "=", "self", ".", "calc", "(", "agent_qs", ",", "states", ",", "actions", "=", "actions", ",", "max_q_i", "=", "max_q_i", ",", "is_v", "=", "is_v", ")", "\n", "v_tot", "=", "y", ".", "view", "(", "bs", ",", "-", "1", ",", "1", ")", "\n", "\n", "return", "v_tot", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.qtran.QTranBase.__init__": [[8, 69], ["torch.Module.__init__", "int", "numpy.prod", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "Exception", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "QTranBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "n_actions", "=", "args", ".", "n_actions", "\n", "self", ".", "state_dim", "=", "int", "(", "np", ".", "prod", "(", "args", ".", "state_shape", ")", ")", "\n", "self", ".", "arch", "=", "self", ".", "args", ".", "qtran_arch", "# QTran architecture", "\n", "\n", "self", ".", "embed_dim", "=", "args", ".", "mixing_embed_dim", "\n", "\n", "# Q(s,u)", "\n", "if", "self", ".", "arch", "==", "\"coma_critic\"", ":", "\n", "# Q takes [state, u] as input", "\n", "            ", "q_input_size", "=", "self", ".", "state_dim", "+", "(", "self", ".", "n_agents", "*", "self", ".", "n_actions", ")", "\n", "", "elif", "self", ".", "arch", "==", "\"qtran_paper\"", ":", "\n", "# Q takes [state, agent_action_observation_encodings]", "\n", "            ", "q_input_size", "=", "self", ".", "state_dim", "+", "self", ".", "args", ".", "rnn_hidden_dim", "+", "self", ".", "n_actions", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"{} is not a valid QTran architecture\"", ".", "format", "(", "self", ".", "arch", ")", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "network_size", "==", "\"small\"", ":", "\n", "            ", "self", ".", "Q", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "q_input_size", ",", "self", ".", "embed_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "1", ")", ")", "\n", "\n", "# V(s)", "\n", "self", ".", "V", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "self", ".", "embed_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "1", ")", ")", "\n", "ae_input", "=", "self", ".", "args", ".", "rnn_hidden_dim", "+", "self", ".", "n_actions", "\n", "self", ".", "action_encoding", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "ae_input", ",", "ae_input", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "ae_input", ",", "ae_input", ")", ")", "\n", "", "elif", "self", ".", "args", ".", "network_size", "==", "\"big\"", ":", "\n", "            ", "self", ".", "Q", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "q_input_size", ",", "self", ".", "embed_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "1", ")", ")", "\n", "# V(s)", "\n", "self", ".", "V", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "self", ".", "embed_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "1", ")", ")", "\n", "ae_input", "=", "self", ".", "args", ".", "rnn_hidden_dim", "+", "self", ".", "n_actions", "\n", "self", ".", "action_encoding", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "ae_input", ",", "ae_input", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "ae_input", ",", "ae_input", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.qtran.QTranBase.forward": [[70, 105], ["batch[].reshape", "qtran.QTranBase.Q", "batch[].reshape", "qtran.QTranBase.V", "torch.cat", "torch.cat", "torch.cat", "batch[].reshape", "actions.reshape.reshape.reshape", "hidden_states.reshape.reshape.reshape", "torch.cat", "torch.cat", "torch.cat", "qtran.QTranBase.action_encoding().reshape", "agent_state_action_encoding.sum.sum.sum", "torch.cat", "torch.cat", "torch.cat", "batch[].reshape", "actions.reshape.reshape.reshape", "qtran.QTranBase.action_encoding", "torch.cat.reshape"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "", "def", "forward", "(", "self", ",", "batch", ",", "hidden_states", ",", "actions", "=", "None", ")", ":", "\n", "        ", "bs", "=", "batch", ".", "batch_size", "\n", "ts", "=", "batch", ".", "max_seq_length", "\n", "\n", "states", "=", "batch", "[", "\"state\"", "]", ".", "reshape", "(", "bs", "*", "ts", ",", "self", ".", "state_dim", ")", "\n", "\n", "if", "self", ".", "arch", "==", "\"coma_critic\"", ":", "\n", "            ", "if", "actions", "is", "None", ":", "\n", "# Use the actions taken by the agents", "\n", "                ", "actions", "=", "batch", "[", "\"actions_onehot\"", "]", ".", "reshape", "(", "bs", "*", "ts", ",", "self", ".", "n_agents", "*", "self", ".", "n_actions", ")", "\n", "", "else", ":", "\n", "# It will arrive as (bs, ts, agents, actions), we need to reshape it", "\n", "                ", "actions", "=", "actions", ".", "reshape", "(", "bs", "*", "ts", ",", "self", ".", "n_agents", "*", "self", ".", "n_actions", ")", "\n", "", "inputs", "=", "th", ".", "cat", "(", "[", "states", ",", "actions", "]", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "arch", "==", "\"qtran_paper\"", ":", "\n", "            ", "if", "actions", "is", "None", ":", "\n", "# Use the actions taken by the agents", "\n", "                ", "actions", "=", "batch", "[", "\"actions_onehot\"", "]", ".", "reshape", "(", "bs", "*", "ts", ",", "self", ".", "n_agents", ",", "self", ".", "n_actions", ")", "\n", "", "else", ":", "\n", "# It will arrive as (bs, ts, agents, actions), we need to reshape it", "\n", "                ", "actions", "=", "actions", ".", "reshape", "(", "bs", "*", "ts", ",", "self", ".", "n_agents", ",", "self", ".", "n_actions", ")", "\n", "\n", "", "hidden_states", "=", "hidden_states", ".", "reshape", "(", "bs", "*", "ts", ",", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "agent_state_action_input", "=", "th", ".", "cat", "(", "[", "hidden_states", ",", "actions", "]", ",", "dim", "=", "2", ")", "\n", "agent_state_action_encoding", "=", "self", ".", "action_encoding", "(", "agent_state_action_input", ".", "reshape", "(", "bs", "*", "ts", "*", "self", ".", "n_agents", ",", "-", "1", ")", ")", ".", "reshape", "(", "bs", "*", "ts", ",", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "agent_state_action_encoding", "=", "agent_state_action_encoding", ".", "sum", "(", "dim", "=", "1", ")", "# Sum across agents", "\n", "\n", "inputs", "=", "th", ".", "cat", "(", "[", "states", ",", "agent_state_action_encoding", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "q_outputs", "=", "self", ".", "Q", "(", "inputs", ")", "\n", "\n", "states", "=", "batch", "[", "\"state\"", "]", ".", "reshape", "(", "bs", "*", "ts", ",", "self", ".", "state_dim", ")", "\n", "v_outputs", "=", "self", ".", "V", "(", "states", ")", "\n", "\n", "return", "q_outputs", ",", "v_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.qmix.QMixer.__init__": [[8, 41], ["torch.Module.__init__", "int", "getattr", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "numpy.prod", "getattr", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "getattr", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "getattr", "Exception", "Exception"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "QMixer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "state_dim", "=", "int", "(", "np", ".", "prod", "(", "args", ".", "state_shape", ")", ")", "\n", "\n", "self", ".", "embed_dim", "=", "args", ".", "mixing_embed_dim", "\n", "self", ".", "abs", "=", "getattr", "(", "self", ".", "args", ",", "'abs'", ",", "True", ")", "\n", "\n", "if", "getattr", "(", "args", ",", "\"hypernet_layers\"", ",", "1", ")", "==", "1", ":", "\n", "            ", "self", ".", "hyper_w_1", "=", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "self", ".", "embed_dim", "*", "self", ".", "n_agents", ")", "\n", "self", ".", "hyper_w_final", "=", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "self", ".", "embed_dim", ")", "\n", "", "elif", "getattr", "(", "args", ",", "\"hypernet_layers\"", ",", "1", ")", "==", "2", ":", "\n", "            ", "hypernet_embed", "=", "self", ".", "args", ".", "hypernet_embed", "\n", "self", ".", "hyper_w_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "hypernet_embed", ",", "self", ".", "embed_dim", "*", "self", ".", "n_agents", ")", ")", "\n", "self", ".", "hyper_w_final", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "hypernet_embed", ",", "self", ".", "embed_dim", ")", ")", "\n", "", "elif", "getattr", "(", "args", ",", "\"hypernet_layers\"", ",", "1", ")", ">", "2", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry >2 hypernet layers is not implemented!\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Error setting number of hypernet layers.\"", ")", "\n", "\n", "# State dependent bias for hidden layer", "\n", "", "self", ".", "hyper_b_1", "=", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "self", ".", "embed_dim", ")", "\n", "\n", "# V(s) instead of a bias for the last layers", "\n", "self", ".", "V", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "self", ".", "embed_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.qmix.QMixer.forward": [[43, 65], ["agent_qs.reshape.reshape.size", "states.reshape.reshape.reshape", "agent_qs.reshape.reshape.reshape", "qmix.QMixer.hyper_b_1", "w1.view.view.view", "b1.view.view.view", "torch.elu", "torch.elu", "torch.elu", "w_final.view.view.view", "qmix.QMixer.V().view", "y.view", "qmix.QMixer.hyper_w_1().abs", "qmix.QMixer.hyper_w_1", "qmix.QMixer.hyper_w_final().abs", "qmix.QMixer.hyper_w_final", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "qmix.QMixer.V", "qmix.QMixer.hyper_w_1", "qmix.QMixer.hyper_w_final"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "agent_qs", ",", "states", ")", ":", "\n", "        ", "bs", "=", "agent_qs", ".", "size", "(", "0", ")", "\n", "states", "=", "states", ".", "reshape", "(", "-", "1", ",", "self", ".", "state_dim", ")", "\n", "agent_qs", "=", "agent_qs", ".", "reshape", "(", "-", "1", ",", "1", ",", "self", ".", "n_agents", ")", "\n", "# First layer", "\n", "w1", "=", "self", ".", "hyper_w_1", "(", "states", ")", ".", "abs", "(", ")", "if", "self", ".", "abs", "else", "self", ".", "hyper_w_1", "(", "states", ")", "\n", "b1", "=", "self", ".", "hyper_b_1", "(", "states", ")", "\n", "w1", "=", "w1", ".", "view", "(", "-", "1", ",", "self", ".", "n_agents", ",", "self", ".", "embed_dim", ")", "\n", "b1", "=", "b1", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "embed_dim", ")", "\n", "hidden", "=", "F", ".", "elu", "(", "th", ".", "bmm", "(", "agent_qs", ",", "w1", ")", "+", "b1", ")", "\n", "\n", "# Second layer", "\n", "w_final", "=", "self", ".", "hyper_w_final", "(", "states", ")", ".", "abs", "(", ")", "if", "self", ".", "abs", "else", "self", ".", "hyper_w_final", "(", "states", ")", "\n", "w_final", "=", "w_final", ".", "view", "(", "-", "1", ",", "self", ".", "embed_dim", ",", "1", ")", "\n", "# State-dependent bias", "\n", "v", "=", "self", ".", "V", "(", "states", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "# Compute final output", "\n", "y", "=", "th", ".", "bmm", "(", "hidden", ",", "w_final", ")", "+", "v", "\n", "# Reshape and return", "\n", "q_tot", "=", "y", ".", "view", "(", "bs", ",", "-", "1", ",", "1", ")", "\n", "\n", "return", "q_tot", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.qmix.QMixer.k": [[66, 75], ["states.size", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "w1.view.view.view", "w_final.view.view.view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "qmix.QMixer.hyper_w_1", "qmix.QMixer.hyper_w_final", "torch.sum", "torch.sum", "torch.sum", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "k", "(", "self", ",", "states", ")", ":", "\n", "        ", "bs", "=", "states", ".", "size", "(", "0", ")", "\n", "w1", "=", "th", ".", "abs", "(", "self", ".", "hyper_w_1", "(", "states", ")", ")", "\n", "w_final", "=", "th", ".", "abs", "(", "self", ".", "hyper_w_final", "(", "states", ")", ")", "\n", "w1", "=", "w1", ".", "view", "(", "-", "1", ",", "self", ".", "n_agents", ",", "self", ".", "embed_dim", ")", "\n", "w_final", "=", "w_final", ".", "view", "(", "-", "1", ",", "self", ".", "embed_dim", ",", "1", ")", "\n", "k", "=", "th", ".", "bmm", "(", "w1", ",", "w_final", ")", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "n_agents", ")", "\n", "k", "=", "k", "/", "th", ".", "sum", "(", "k", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.qmix.QMixer.b": [[76, 85], ["states.size", "torch.abs", "torch.abs", "torch.abs", "w_final.view.view.view", "qmix.QMixer.hyper_b_1", "b1.view.view.view", "qmix.QMixer.V().view", "qmix.QMixer.hyper_w_final", "torch.bmm", "torch.bmm", "torch.bmm", "qmix.QMixer.V"], "methods", ["None"], ["", "def", "b", "(", "self", ",", "states", ")", ":", "\n", "        ", "bs", "=", "states", ".", "size", "(", "0", ")", "\n", "w_final", "=", "th", ".", "abs", "(", "self", ".", "hyper_w_final", "(", "states", ")", ")", "\n", "w_final", "=", "w_final", ".", "view", "(", "-", "1", ",", "self", ".", "embed_dim", ",", "1", ")", "\n", "b1", "=", "self", ".", "hyper_b_1", "(", "states", ")", "\n", "b1", "=", "b1", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "embed_dim", ")", "\n", "v", "=", "self", ".", "V", "(", "states", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "b", "=", "th", ".", "bmm", "(", "b1", ",", "w_final", ")", "+", "v", "\n", "return", "b", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.qgnn.QGNNMixer.__init__": [[11, 48], ["torch.Module.__init__", "int", "getattr", "getattr", "getattr", "getattr", "getattr", "pymarl.utils.param_update.get_num_params", "pymarl.modules.layer.mixer.AggMixer", "pymarl.modules.layer.mixer.Mixer", "numpy.prod", "pymarl.modules.layer.mlp.MLP", "pymarl.modules.layer.mixer.AggMixer", "pymarl.modules.layer.mlp.layers"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.param_update.get_num_params", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.layer.mlp.layers"], ["\t", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "state_dim", "=", "int", "(", "np", ".", "prod", "(", "args", ".", "state_shape", ")", "/", "self", ".", "n_agents", ")", "\n", "self", ".", "embed_dim", "=", "args", ".", "mixer_embed_dim", "\n", "self", ".", "mixer_psi_layers", "=", "args", ".", "mixer_psi_layers", "\n", "self", ".", "mixer_phi_layers", "=", "args", ".", "mixer_phi_layers", "\n", "self", ".", "mixer_midmult", "=", "args", ".", "mixer_midmult", "\n", "self", ".", "hypernet_flat", "=", "getattr", "(", "args", ",", "\"mixer_hypernet_flat\"", ",", "True", ")", "\n", "self", ".", "use_hypernet", "=", "getattr", "(", "args", ",", "\"mixer_use_hypernet\"", ",", "False", ")", "\n", "self", ".", "use_batchnorm", "=", "getattr", "(", "args", ",", "\"mixer_use_batchnorm\"", ",", "False", ")", "\n", "self", ".", "use_genagg", "=", "getattr", "(", "args", ",", "\"mixer_use_genagg\"", ",", "True", ")", "\n", "self", ".", "heterogeneous", "=", "getattr", "(", "args", ",", "\"mixer_heterogeneous\"", ",", "False", ")", "\n", "\n", "if", "self", ".", "use_genagg", ":", "\n", "\t\t\t", "self", ".", "mixer", "=", "AggMixer", "(", "input_dim", "=", "1", ",", "hidden_dim", "=", "self", ".", "embed_dim", ",", "output_dim", "=", "1", ",", "\n", "psi_layers", "=", "self", ".", "mixer_psi_layers", ",", "phi_layers", "=", "self", ".", "mixer_phi_layers", ",", "\n", "midmult", "=", "self", ".", "mixer_midmult", ",", "batchnorm", "=", "self", ".", "use_batchnorm", ",", "\n", "heterogeneous", "=", "self", ".", "heterogeneous", ",", "n_agents", "=", "self", ".", "n_agents", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "mixer", "=", "Mixer", "(", "input_dim", "=", "1", ",", "hidden_dim", "=", "self", ".", "embed_dim", ",", "output_dim", "=", "1", ",", "\n", "psi_layers", "=", "self", ".", "mixer_psi_layers", ",", "phi_layers", "=", "self", ".", "mixer_phi_layers", ",", "\n", "midmult", "=", "self", ".", "mixer_midmult", ",", "batchnorm", "=", "self", ".", "use_batchnorm", ",", "\n", "heterogeneous", "=", "self", ".", "heterogeneous", ",", "n_agents", "=", "self", ".", "n_agents", ")", "\n", "\n", "", "self", ".", "num_params_mixer", "=", "get_num_params", "(", "self", ".", "mixer", ")", "\n", "\n", "if", "self", ".", "use_hypernet", ":", "\n", "\t\t\t", "if", "self", ".", "hypernet_flat", ":", "\n", "\t\t\t\t", "self", ".", "hypernet", "=", "MLP", "(", "input_dim", "=", "self", ".", "state_dim", "*", "self", ".", "n_agents", ",", "output_dim", "=", "self", ".", "num_params_mixer", ",", "\n", "layer_sizes", "=", "layers", "(", "input_dim", "=", "self", ".", "state_dim", "*", "self", ".", "n_agents", ",", "output_dim", "=", "self", ".", "num_params_mixer", ",", "nlayers", "=", "2", ",", "midmult", "=", "1.", ")", ",", "\n", "batchnorm", "=", "self", ".", "use_batchnorm", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "hypernet", "=", "AggMixer", "(", "input_dim", "=", "self", ".", "state_dim", ",", "hidden_dim", "=", "self", ".", "state_dim", ",", "\n", "output_dim", "=", "self", ".", "num_params_mixer", ",", "batchnorm", "=", "self", ".", "use_batchnorm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.qgnn.QGNNMixer.forward": [[50, 69], ["q_values.reshape.reshape.reshape", "qgnn.QGNNMixer.mixer", "global_q.reshape.reshape.reshape", "qgnn.QGNNMixer.hypernet", "params.reshape.reshape.reshape", "pymarl.utils.param_update.update_module_params", "pymarl.utils.param_update.update_module_params", "states.reshape.reshape.reshape", "functools.partial", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.param_update.update_module_params", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.param_update.update_module_params"], ["", "", "", "def", "forward", "(", "self", ",", "q_values", ",", "states", ")", ":", "\n", "# q_values: batch x episode_len x n_agents", "\n", "# states: batch x episode_len x n_agents * obs_shape", "\n", "# output: batch x episode_len x 1", "\n", "\t\t", "B", ",", "episode_len", ",", "n_agents", "=", "q_values", ".", "shape", "\n", "if", "self", ".", "use_hypernet", ":", "\n", "\t\t\t", "if", "not", "self", ".", "hypernet_flat", ":", "\n", "\t\t\t\t", "states", "=", "states", ".", "reshape", "(", "B", ",", "episode_len", ",", "self", ".", "n_agents", ",", "self", ".", "state_dim", ")", "\n", "", "params", "=", "self", ".", "hypernet", "(", "states", ")", "\n", "params", "=", "params", ".", "reshape", "(", "B", "*", "episode_len", ",", "self", ".", "num_params_mixer", ")", "\n", "update_module_params", "(", "module", "=", "self", ".", "mixer", ",", "params", "=", "params", ",", "param_dim", "=", "1", ",", "\n", "filter_cond", "=", "lambda", "module", ":", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "LinearHyper", ")", ",", "\n", "replace_func", "=", "partial", "(", "batch_linear", ",", "absweight", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "update_module_params", "(", "module", "=", "self", ".", "mixer", ",", "filter_cond", "=", "lambda", "module", ":", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ",", "replace_func", "=", "abs_linear", ")", "\n", "", "q_values", "=", "q_values", ".", "reshape", "(", "B", "*", "episode_len", ",", "self", ".", "n_agents", ",", "1", ")", "\n", "global_q", "=", "self", ".", "mixer", "(", "q_values", ")", "\n", "global_q", "=", "global_q", ".", "reshape", "(", "B", ",", "episode_len", ",", "1", ")", "\n", "return", "global_q", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.qatten.QattenMixer.__init__": [[8, 44], ["torch.Module.__init__", "int", "int", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "numpy.sqrt", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "numpy.prod", "numpy.prod", "qatten.QattenMixer.query_embedding_layers.append", "qatten.QattenMixer.key_embedding_layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "QattenMixer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "state_dim", "=", "int", "(", "np", ".", "prod", "(", "args", ".", "state_shape", ")", ")", "\n", "self", ".", "u_dim", "=", "int", "(", "np", ".", "prod", "(", "args", ".", "agent_own_state_size", ")", ")", "\n", "\n", "self", ".", "n_query_embedding_layer1", "=", "args", ".", "n_query_embedding_layer1", "\n", "self", ".", "n_query_embedding_layer2", "=", "args", ".", "n_query_embedding_layer2", "\n", "self", ".", "n_key_embedding_layer1", "=", "args", ".", "n_key_embedding_layer1", "\n", "self", ".", "n_head_embedding_layer1", "=", "args", ".", "n_head_embedding_layer1", "\n", "self", ".", "n_head_embedding_layer2", "=", "args", ".", "n_head_embedding_layer2", "\n", "self", ".", "n_attention_head", "=", "args", ".", "n_attention_head", "\n", "self", ".", "n_constrant_value", "=", "args", ".", "n_constrant_value", "\n", "\n", "self", ".", "query_embedding_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_attention_head", ")", ":", "\n", "            ", "self", ".", "query_embedding_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "self", ".", "n_query_embedding_layer1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "n_query_embedding_layer1", ",", "self", ".", "n_query_embedding_layer2", ")", ")", ")", "\n", "\n", "", "self", ".", "key_embedding_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_attention_head", ")", ":", "\n", "            ", "self", ".", "key_embedding_layers", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "u_dim", ",", "self", ".", "n_key_embedding_layer1", ")", ")", "\n", "\n", "\n", "", "self", ".", "scaled_product_value", "=", "np", ".", "sqrt", "(", "args", ".", "n_query_embedding_layer2", ")", "\n", "\n", "self", ".", "head_embedding_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "self", ".", "n_head_embedding_layer1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "n_head_embedding_layer1", ",", "self", ".", "n_head_embedding_layer2", ")", ")", "\n", "\n", "self", ".", "constrant_value_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "self", ".", "n_constrant_value", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "n_constrant_value", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.qatten.QattenMixer.forward": [[46, 95], ["agent_qs.view.view.size", "states.reshape.reshape.reshape", "qatten.QattenMixer._get_us", "agent_qs.view.view.view", "range", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "q_lambda_list.permute.permute.permute", "torch.matmul", "torch.matmul", "torch.matmul", "qatten.QattenMixer.constrant_value_layer", "q_tot.view.view.view", "state_embedding.reshape.reshape.reshape", "u_embedding.permute.permute.reshape", "u_embedding.permute.permute.permute", "torch.softmax", "torch.softmax", "torch.softmax", "q_lambda_list.permute.permute.append", "torch.abs", "torch.abs", "torch.abs", "w_h.reshape.reshape.reshape", "torch.matmul", "torch.matmul", "torch.matmul", "sum_q_h.reshape.reshape.reshape", "torch.matmul.sum", "sum_q_h.reshape.reshape.reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.stack", "torch.stack", "torch.stack", "qatten.QattenMixer.head_embedding_layer"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.qatten.QattenMixer._get_us", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "forward", "(", "self", ",", "agent_qs", ",", "states", ")", ":", "\n", "        ", "bs", "=", "agent_qs", ".", "size", "(", "0", ")", "\n", "states", "=", "states", ".", "reshape", "(", "-", "1", ",", "self", ".", "state_dim", ")", "\n", "us", "=", "self", ".", "_get_us", "(", "states", ")", "\n", "agent_qs", "=", "agent_qs", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "n_agents", ")", "\n", "\n", "q_lambda_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_attention_head", ")", ":", "\n", "            ", "state_embedding", "=", "self", ".", "query_embedding_layers", "[", "i", "]", "(", "states", ")", "\n", "u_embedding", "=", "self", ".", "key_embedding_layers", "[", "i", "]", "(", "us", ")", "\n", "\n", "# shape: [-1, 1, state_dim]", "\n", "state_embedding", "=", "state_embedding", ".", "reshape", "(", "-", "1", ",", "1", ",", "self", ".", "n_query_embedding_layer2", ")", "\n", "# shape: [-1, state_dim, n_agent]", "\n", "u_embedding", "=", "u_embedding", ".", "reshape", "(", "-", "1", ",", "self", ".", "n_agents", ",", "self", ".", "n_key_embedding_layer1", ")", "\n", "u_embedding", "=", "u_embedding", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# shape: [-1, 1, n_agent]", "\n", "raw_lambda", "=", "th", ".", "matmul", "(", "state_embedding", ",", "u_embedding", ")", "/", "self", ".", "scaled_product_value", "\n", "q_lambda", "=", "F", ".", "softmax", "(", "raw_lambda", ",", "dim", "=", "-", "1", ")", "\n", "\n", "q_lambda_list", ".", "append", "(", "q_lambda", ")", "\n", "\n", "# shape: [-1, n_attention_head, n_agent]", "\n", "", "q_lambda_list", "=", "th", ".", "stack", "(", "q_lambda_list", ",", "dim", "=", "1", ")", ".", "squeeze", "(", "-", "2", ")", "\n", "\n", "# shape: [-1, n_agent, n_attention_head]", "\n", "q_lambda_list", "=", "q_lambda_list", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# shape: [-1, 1, n_attention_head]", "\n", "q_h", "=", "th", ".", "matmul", "(", "agent_qs", ",", "q_lambda_list", ")", "\n", "\n", "if", "self", ".", "args", ".", "type", "==", "'weighted'", ":", "\n", "# shape: [-1, n_attention_head, 1]", "\n", "            ", "w_h", "=", "th", ".", "abs", "(", "self", ".", "head_embedding_layer", "(", "states", ")", ")", "\n", "w_h", "=", "w_h", ".", "reshape", "(", "-", "1", ",", "self", ".", "n_head_embedding_layer2", ",", "1", ")", "\n", "\n", "# shape: [-1, 1]", "\n", "sum_q_h", "=", "th", ".", "matmul", "(", "q_h", ",", "w_h", ")", "\n", "sum_q_h", "=", "sum_q_h", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "# shape: [-1, 1]", "\n", "            ", "sum_q_h", "=", "q_h", ".", "sum", "(", "-", "1", ")", "\n", "sum_q_h", "=", "sum_q_h", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "c", "=", "self", ".", "constrant_value_layer", "(", "states", ")", "\n", "q_tot", "=", "sum_q_h", "+", "c", "\n", "q_tot", "=", "q_tot", ".", "view", "(", "bs", ",", "-", "1", ",", "1", ")", "\n", "return", "q_tot", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.qatten.QattenMixer._get_us": [[96, 101], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "states[].reshape"], "methods", ["None"], ["", "def", "_get_us", "(", "self", ",", "states", ")", ":", "\n", "        ", "agent_own_state_size", "=", "self", ".", "args", ".", "agent_own_state_size", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "            ", "us", "=", "states", "[", ":", ",", ":", "agent_own_state_size", "*", "self", ".", "n_agents", "]", ".", "reshape", "(", "-", "1", ",", "agent_own_state_size", ")", "\n", "", "return", "us", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.qmix_central_no_hyper.QMixerCentralFF.__init__": [[8, 33], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "numpy.prod", "torch.Linear", "torch.Linear", "torch.Linear", "non_lin", "torch.Linear", "torch.Linear", "torch.Linear", "non_lin", "torch.Linear", "torch.Linear", "torch.Linear", "non_lin", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "non_lin", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "QMixerCentralFF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "state_dim", "=", "int", "(", "np", ".", "prod", "(", "args", ".", "state_shape", ")", ")", "\n", "\n", "self", ".", "input_dim", "=", "self", ".", "n_agents", "*", "self", ".", "args", ".", "central_action_embed", "+", "self", ".", "state_dim", "\n", "self", ".", "embed_dim", "=", "args", ".", "central_mixing_embed_dim", "\n", "\n", "non_lin", "=", "nn", ".", "ReLU", "\n", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "embed_dim", ")", ",", "\n", "non_lin", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", ",", "\n", "non_lin", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "embed_dim", ")", ",", "\n", "non_lin", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "1", ")", ")", "\n", "\n", "# V(s) instead of a bias for the last layers", "\n", "self", ".", "V", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "self", ".", "embed_dim", ")", ",", "\n", "non_lin", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.qmix_central_no_hyper.QMixerCentralFF.forward": [[34, 48], ["agent_qs.reshape.reshape.size", "states.reshape.reshape.reshape", "agent_qs.reshape.reshape.reshape", "torch.cat", "torch.cat", "torch.cat", "qmix_central_no_hyper.QMixerCentralFF.net", "qmix_central_no_hyper.QMixerCentralFF.V", "y.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "agent_qs", ",", "states", ")", ":", "\n", "        ", "bs", "=", "agent_qs", ".", "size", "(", "0", ")", "\n", "states", "=", "states", ".", "reshape", "(", "-", "1", ",", "self", ".", "state_dim", ")", "\n", "agent_qs", "=", "agent_qs", ".", "reshape", "(", "-", "1", ",", "self", ".", "n_agents", "*", "self", ".", "args", ".", "central_action_embed", ")", "\n", "\n", "inputs", "=", "th", ".", "cat", "(", "[", "states", ",", "agent_qs", "]", ",", "dim", "=", "1", ")", "\n", "\n", "advs", "=", "self", ".", "net", "(", "inputs", ")", "\n", "vs", "=", "self", ".", "V", "(", "states", ")", "\n", "\n", "y", "=", "advs", "+", "vs", "\n", "\n", "q_tot", "=", "y", ".", "view", "(", "bs", ",", "-", "1", ",", "1", ")", "\n", "return", "q_tot", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.graphmix.GraphMixer.__init__": [[8, 45], ["torch.Module.__init__", "int", "pymarl.modules.layer.graphmix.gnn.GNN", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "numpy.prod", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "GraphMixer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "state_dim", "=", "int", "(", "np", ".", "prod", "(", "args", ".", "state_shape", ")", ")", "\n", "# self.obs_dim = args.obs_shape", "\n", "self", ".", "rnn_hidden_dim", "=", "args", ".", "rnn_hidden_dim", "\n", "self", ".", "embed_dim", "=", "args", ".", "mixing_embed_dim", "\n", "hypernet_embed", "=", "self", ".", "args", ".", "hypernet_embed", "\n", "\n", "# mixing GNN", "\n", "combine_type", "=", "'gin'", "\n", "self", ".", "mixing_GNN", "=", "GNN", "(", "num_input_features", "=", "1", ",", "hidden_layers", "=", "[", "self", ".", "embed_dim", "]", ",", "\n", "state_dim", "=", "self", ".", "state_dim", ",", "hypernet_embed", "=", "hypernet_embed", ",", "\n", "weights_operation", "=", "'abs'", ",", "\n", "combine_type", "=", "combine_type", ")", "\n", "\n", "# attention mechanism", "\n", "self", ".", "enc_obs", "=", "True", "\n", "obs_dim", "=", "self", ".", "rnn_hidden_dim", "\n", "if", "self", ".", "enc_obs", ":", "\n", "            ", "self", ".", "obs_enc_dim", "=", "16", "\n", "self", ".", "obs_encoder", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "obs_dim", ",", "self", ".", "obs_enc_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "obs_dim_effective", "=", "self", ".", "obs_enc_dim", "\n", "", "else", ":", "\n", "            ", "self", ".", "obs_encoder", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "obs_dim_effective", "=", "obs_dim", "\n", "\n", "", "self", ".", "W_attn_query", "=", "nn", ".", "Linear", "(", "self", ".", "obs_dim_effective", ",", "self", ".", "obs_dim_effective", ",", "bias", "=", "False", ")", "\n", "self", ".", "W_attn_key", "=", "nn", ".", "Linear", "(", "self", ".", "obs_dim_effective", ",", "self", ".", "obs_dim_effective", ",", "bias", "=", "False", ")", "\n", "\n", "# output bias", "\n", "self", ".", "V", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "self", ".", "embed_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.graphmix.GraphMixer.forward": [[46, 87], ["agent_qs.view.view.size", "states.reshape.reshape.reshape", "agent_qs.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "graphmix.GraphMixer.obs_encoder", "encoded_hidden_states.contiguous().view.contiguous().view.contiguous().view", "graphmix.GraphMixer.W_attn_query", "graphmix.GraphMixer.W_attn_key", "graphmix.GraphMixer.mixing_GNN", "graphmix.GraphMixer.V().view", "alive_agents.unsqueeze", "alive_agents.unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "numpy.sqrt", "torch.Softmax", "torch.Softmax", "torch.Softmax", "alive_agents.view", "encoded_hidden_states.contiguous().view.contiguous().view.contiguous", "torch.transpose", "torch.transpose", "torch.transpose", "graphmix.GraphMixer.V", "local_reward_fractions.view", "team_rewards.repeat", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "forward", "(", "self", ",", "agent_qs", ",", "states", ",", "\n", "agent_obs", "=", "None", ",", "\n", "team_rewards", "=", "None", ",", "\n", "hidden_states", "=", "None", ")", ":", "\n", "\n", "        ", "bs", "=", "agent_qs", ".", "size", "(", "0", ")", "\n", "states", "=", "states", ".", "reshape", "(", "-", "1", ",", "self", ".", "state_dim", ")", "\n", "agent_qs", "=", "agent_qs", ".", "view", "(", "-", "1", ",", "self", ".", "n_agents", ",", "1", ")", "\n", "\n", "# find the agents which are alive", "\n", "alive_agents", "=", "1.", "*", "(", "th", ".", "sum", "(", "agent_obs", ",", "dim", "=", "3", ")", ">", "0", ")", ".", "view", "(", "-", "1", ",", "self", ".", "n_agents", ")", "\n", "# create a mask for isolating nodes which are dead by taking the outer product of the above tensor with itself", "\n", "alive_agents_mask", "=", "th", ".", "bmm", "(", "alive_agents", ".", "unsqueeze", "(", "2", ")", ",", "alive_agents", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "# encode hidden states", "\n", "encoded_hidden_states", "=", "self", ".", "obs_encoder", "(", "hidden_states", ")", "\n", "encoded_hidden_states", "=", "encoded_hidden_states", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "n_agents", ",", "self", ".", "obs_dim_effective", ")", "\n", "\n", "# adjacency based on the attention mechanism", "\n", "attn_query", "=", "self", ".", "W_attn_query", "(", "encoded_hidden_states", ")", "\n", "attn_key", "=", "self", ".", "W_attn_key", "(", "encoded_hidden_states", ")", "\n", "attn", "=", "th", ".", "matmul", "(", "attn_query", ",", "th", ".", "transpose", "(", "attn_key", ",", "1", ",", "2", ")", ")", "/", "np", ".", "sqrt", "(", "self", ".", "obs_dim_effective", ")", "\n", "\n", "# make the attention with softmax very small for dead agents so they get zero attention", "\n", "attn", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "(", "attn", "+", "(", "-", "1e10", "*", "(", "1", "-", "alive_agents_mask", ")", ")", ")", "\n", "batch_adj", "=", "attn", "*", "alive_agents_mask", "# completely isolate the dead agents in the graph", "\n", "\n", "GNN_inputs", "=", "agent_qs", "\n", "local_reward_fractions", ",", "y", "=", "self", ".", "mixing_GNN", "(", "GNN_inputs", ",", "batch_adj", ",", "states", ",", "self", ".", "n_agents", ")", "\n", "\n", "# state-dependent bias", "\n", "v", "=", "self", ".", "V", "(", "states", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "q_tot", "=", "(", "y", "+", "v", ")", ".", "view", "(", "bs", ",", "-", "1", ",", "1", ")", "\n", "\n", "# effective local rewards", "\n", "if", "team_rewards", "is", "None", ":", "\n", "            ", "local_rewards", "=", "None", "\n", "", "else", ":", "\n", "            ", "local_rewards", "=", "local_reward_fractions", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "n_agents", ")", "*", "team_rewards", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "n_agents", ")", "\n", "\n", "", "return", "q_tot", ",", "local_rewards", ",", "alive_agents", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "n_agents", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.dmaq_si_weight.DMAQ_SI_Weight.__init__": [[9, 59], ["torch.Module.__init__", "int", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "numpy.prod", "getattr", "dmaq_si_weight.DMAQ_SI_Weight.key_extractors.append", "dmaq_si_weight.DMAQ_SI_Weight.agents_extractors.append", "dmaq_si_weight.DMAQ_SI_Weight.action_extractors.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "getattr", "dmaq_si_weight.DMAQ_SI_Weight.key_extractors.append", "dmaq_si_weight.DMAQ_SI_Weight.agents_extractors.append", "dmaq_si_weight.DMAQ_SI_Weight.action_extractors.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "getattr", "dmaq_si_weight.DMAQ_SI_Weight.key_extractors.append", "dmaq_si_weight.DMAQ_SI_Weight.agents_extractors.append", "dmaq_si_weight.DMAQ_SI_Weight.action_extractors.append", "Exception", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "DMAQ_SI_Weight", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "n_actions", "=", "args", ".", "n_actions", "\n", "self", ".", "state_dim", "=", "int", "(", "np", ".", "prod", "(", "args", ".", "state_shape", ")", ")", "\n", "self", ".", "action_dim", "=", "args", ".", "n_agents", "*", "self", ".", "n_actions", "\n", "self", ".", "state_action_dim", "=", "self", ".", "state_dim", "+", "self", ".", "action_dim", "\n", "\n", "self", ".", "num_kernel", "=", "args", ".", "num_kernel", "\n", "\n", "self", ".", "key_extractors", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "agents_extractors", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "action_extractors", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "adv_hypernet_embed", "=", "self", ".", "args", ".", "adv_hypernet_embed", "\n", "for", "i", "in", "range", "(", "self", ".", "num_kernel", ")", ":", "# multi-head attention", "\n", "            ", "if", "getattr", "(", "args", ",", "\"adv_hypernet_layers\"", ",", "1", ")", "==", "1", ":", "\n", "                ", "self", ".", "key_extractors", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "1", ")", ")", "# key", "\n", "self", ".", "agents_extractors", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "self", ".", "n_agents", ")", ")", "# agent", "\n", "self", ".", "action_extractors", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "state_action_dim", ",", "self", ".", "n_agents", ")", ")", "# action", "\n", "", "elif", "getattr", "(", "args", ",", "\"adv_hypernet_layers\"", ",", "1", ")", "==", "2", ":", "\n", "                ", "self", ".", "key_extractors", ".", "append", "(", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "adv_hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "adv_hypernet_embed", ",", "1", ")", ")", ")", "# key", "\n", "self", ".", "agents_extractors", ".", "append", "(", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "adv_hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "adv_hypernet_embed", ",", "self", ".", "n_agents", ")", ")", ")", "# agent", "\n", "self", ".", "action_extractors", ".", "append", "(", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_action_dim", ",", "adv_hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "adv_hypernet_embed", ",", "self", ".", "n_agents", ")", ")", ")", "# action", "\n", "", "elif", "getattr", "(", "args", ",", "\"adv_hypernet_layers\"", ",", "1", ")", "==", "3", ":", "\n", "                ", "self", ".", "key_extractors", ".", "append", "(", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "adv_hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "adv_hypernet_embed", ",", "adv_hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "adv_hypernet_embed", ",", "1", ")", ")", ")", "# key", "\n", "self", ".", "agents_extractors", ".", "append", "(", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_dim", ",", "adv_hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "adv_hypernet_embed", ",", "adv_hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "adv_hypernet_embed", ",", "self", ".", "n_agents", ")", ")", ")", "# agent", "\n", "self", ".", "action_extractors", ".", "append", "(", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "state_action_dim", ",", "adv_hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "adv_hypernet_embed", ",", "adv_hypernet_embed", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "adv_hypernet_embed", ",", "self", ".", "n_agents", ")", ")", ")", "# action", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Error setting number of adv hypernet layers.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.dmaq_si_weight.DMAQ_SI_Weight.forward": [[60, 82], ["states.reshape.reshape.reshape", "actions.reshape.reshape.reshape", "torch.cat", "torch.cat", "torch.cat", "zip", "torch.stack", "torch.stack", "torch.stack", "torch.sum.view", "torch.sum", "torch.sum", "torch.sum", "k_ext", "k_ext", "sel_ext", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "head_attend_weights.append", "torch.abs().repeat", "torch.abs().repeat", "torch.abs().repeat", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "", "", "def", "forward", "(", "self", ",", "states", ",", "actions", ")", ":", "\n", "        ", "states", "=", "states", ".", "reshape", "(", "-", "1", ",", "self", ".", "state_dim", ")", "\n", "actions", "=", "actions", ".", "reshape", "(", "-", "1", ",", "self", ".", "action_dim", ")", "\n", "data", "=", "th", ".", "cat", "(", "[", "states", ",", "actions", "]", ",", "dim", "=", "1", ")", "\n", "\n", "all_head_key", "=", "[", "k_ext", "(", "states", ")", "for", "k_ext", "in", "self", ".", "key_extractors", "]", "\n", "all_head_agents", "=", "[", "k_ext", "(", "states", ")", "for", "k_ext", "in", "self", ".", "agents_extractors", "]", "\n", "all_head_action", "=", "[", "sel_ext", "(", "data", ")", "for", "sel_ext", "in", "self", ".", "action_extractors", "]", "\n", "\n", "head_attend_weights", "=", "[", "]", "\n", "for", "curr_head_key", ",", "curr_head_agents", ",", "curr_head_action", "in", "zip", "(", "all_head_key", ",", "all_head_agents", ",", "all_head_action", ")", ":", "\n", "            ", "x_key", "=", "th", ".", "abs", "(", "curr_head_key", ")", ".", "repeat", "(", "1", ",", "self", ".", "n_agents", ")", "+", "1e-10", "\n", "x_agents", "=", "F", ".", "sigmoid", "(", "curr_head_agents", ")", "\n", "x_action", "=", "F", ".", "sigmoid", "(", "curr_head_action", ")", "\n", "weights", "=", "x_key", "*", "x_agents", "*", "x_action", "\n", "head_attend_weights", ".", "append", "(", "weights", ")", "\n", "\n", "", "head_attend", "=", "th", ".", "stack", "(", "head_attend_weights", ",", "dim", "=", "1", ")", "\n", "head_attend", "=", "head_attend", ".", "view", "(", "-", "1", ",", "self", ".", "num_kernel", ",", "self", ".", "n_agents", ")", "\n", "head_attend", "=", "th", ".", "sum", "(", "head_attend", ",", "dim", "=", "1", ")", "\n", "\n", "return", "head_attend", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.__init__": [[6, 8], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VDNMixer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.mixers.vdn.VDNMixer.forward": [[9, 11], ["torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "forward", "(", "self", ",", "agent_qs", ",", "batch", ")", ":", "\n", "        ", "return", "th", ".", "sum", "(", "agent_qs", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.__init__": [[8, 27], ["maps_wrapper.MapsWrapper.reset"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.reset"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "render", "=", "False", ",", "save_replay", "=", "False", ")", ":", "\n", "        ", "self", ".", "env", "=", "env", "\n", "self", ".", "_obs", "=", "None", "\n", "self", ".", "_rew", "=", "None", "\n", "self", ".", "_done", "=", "None", "\n", "self", ".", "_info", "=", "None", "\n", "self", ".", "test_mode", "=", "False", "\n", "self", ".", "show_frames", "=", "render", "\n", "self", ".", "save_frames", "=", "save_replay", "\n", "self", ".", "frame_list", "=", "[", "]", "\n", "self", ".", "batch_size", "=", "self", ".", "env", ".", "num_envs", "\n", "self", ".", "obs_size", "=", "self", ".", "env", ".", "observation_space", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "self", ".", "n_agents", "=", "self", ".", "env", ".", "n_agents", "\n", "self", ".", "episode_limit", "=", "self", ".", "env", ".", "max_steps", "\n", "if", "self", ".", "env", ".", "continuous_actions", ":", "\n", "            ", "self", ".", "action_size", "=", "self", ".", "env", ".", "action_space", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "action_size", "=", "self", ".", "env", ".", "action_space", "[", "0", "]", ".", "n", "\n", "", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.step": [[28, 40], ["actions.unsqueeze.unsqueeze.transpose", "maps_wrapper.MapsWrapper.env.step", "maps_wrapper.MapsWrapper.render", "maps_wrapper.MapsWrapper.vectorise_obs", "numpy.mean", "maps_wrapper.MapsWrapper.vectorise_obs", "done.cpu().numpy", "maps_wrapper.MapsWrapper.vectorise_infos", "len", "actions.unsqueeze.unsqueeze.unsqueeze", "done.cpu"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.render", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.vectorise_obs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.vectorise_obs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.vectorise_infos"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "actions", "=", "actions", ".", "transpose", "(", "1", ",", "0", ")", "# batch x n_agents x action_dim to n_agents x batch x action_dim", "\n", "if", "len", "(", "actions", ".", "shape", ")", "==", "2", ":", "\n", "            ", "actions", "=", "actions", ".", "unsqueeze", "(", "2", ")", "\n", "", "obs", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "actions", ")", "\n", "self", ".", "render", "(", ")", "\n", "local_rew", "=", "self", ".", "vectorise_obs", "(", "rew", ")", "\n", "self", ".", "_rew", "=", "np", ".", "mean", "(", "local_rew", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "_obs", "=", "self", ".", "vectorise_obs", "(", "obs", ")", "\n", "self", ".", "_done", "=", "done", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "_info", "=", "self", ".", "vectorise_infos", "(", "info", ")", "\n", "return", "self", ".", "_rew", ",", "self", ".", "_done", ",", "self", ".", "_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.reset": [[41, 48], ["maps_wrapper.MapsWrapper.env.reset", "maps_wrapper.MapsWrapper.vectorise_obs", "maps_wrapper.MapsWrapper.vectorise_infos", "maps_wrapper.MapsWrapper.env.scenario.info"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.reset", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.vectorise_obs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.vectorise_infos"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "_obs", "=", "self", ".", "vectorise_obs", "(", "obs", ")", "\n", "info_list", "=", "[", "self", ".", "env", ".", "scenario", ".", "info", "(", "agent", ")", "for", "agent", "in", "self", ".", "env", ".", "agents", "]", "\n", "self", ".", "_info", "=", "self", ".", "vectorise_infos", "(", "info_list", ")", "\n", "self", ".", "frame_list", "=", "[", "]", "\n", "return", "self", ".", "_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.get_obs": [[49, 51], ["slice"], "methods", ["None"], ["", "def", "get_obs", "(", "self", ",", "batch", "=", "slice", "(", "None", ")", ")", ":", "\n", "        ", "return", "self", ".", "_obs", "[", "batch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.get_obs_agent": [[52, 54], ["slice"], "methods", ["None"], ["", "def", "get_obs_agent", "(", "self", ",", "agent_id", ",", "batch", "=", "slice", "(", "None", ")", ")", ":", "\n", "        ", "return", "self", ".", "_obs", "[", "batch", ",", "agent_id", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.get_obs_size": [[55, 57], ["None"], "methods", ["None"], ["", "def", "get_obs_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "obs_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.get_state": [[58, 60], ["slice", "maps_wrapper.MapsWrapper._obs.reshape"], "methods", ["None"], ["", "def", "get_state", "(", "self", ",", "batch", "=", "slice", "(", "None", ")", ")", ":", "\n", "        ", "return", "self", ".", "_obs", ".", "reshape", "(", "self", ".", "batch_size", ",", "self", ".", "n_agents", "*", "self", ".", "obs_size", ")", "[", "batch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.get_info": [[61, 66], ["slice", "slice", "maps_wrapper.MapsWrapper._info.items"], "methods", ["None"], ["", "def", "get_info", "(", "self", ",", "batch", "=", "slice", "(", "None", ")", ")", ":", "\n", "        ", "if", "batch", "==", "slice", "(", "None", ")", ":", "\n", "            ", "return", "self", ".", "_info", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "val", "[", "batch", "]", "for", "key", ",", "val", "in", "self", ".", "_info", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.get_state_size": [[67, 69], ["maps_wrapper.MapsWrapper.get_obs_size"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_size"], ["", "", "def", "get_state_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_agents", "*", "self", ".", "get_obs_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.get_avail_actions": [[70, 72], ["slice", "torch.ones"], "methods", ["None"], ["", "def", "get_avail_actions", "(", "self", ",", "batch", "=", "slice", "(", "None", ")", ")", ":", "\n", "        ", "return", "torch", ".", "ones", "(", "self", ".", "batch_size", ",", "self", ".", "n_agents", ",", "self", ".", "action_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.get_avail_agent_actions": [[73, 75], ["slice", "torch.ones"], "methods", ["None"], ["", "def", "get_avail_agent_actions", "(", "self", ",", "agent_id", ",", "batch", "=", "slice", "(", "None", ")", ")", ":", "\n", "        ", "return", "torch", ".", "ones", "(", "self", ".", "batch_size", ",", "self", ".", "action_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.get_total_actions": [[76, 78], ["None"], "methods", ["None"], ["", "def", "get_total_actions", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "action_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.render": [[79, 86], ["maps_wrapper.MapsWrapper.env.render", "maps_wrapper.MapsWrapper.frame_list.append", "maps_wrapper.MapsWrapper.env.render"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.render", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.render"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "show_frames", "or", "(", "self", ".", "save_frames", "and", "self", ".", "test_mode", ")", ":", "\n", "            ", "if", "(", "self", ".", "save_frames", "and", "self", ".", "test_mode", ")", ":", "\n", "                ", "img", "=", "self", ".", "env", ".", "render", "(", "mode", "=", "\"rgb_array\"", ",", "visualize_when_rgb", "=", "self", ".", "show_frames", ",", ")", "\n", "self", ".", "frame_list", ".", "append", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "env", ".", "render", "(", "mode", "=", "\"human\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.close": [[87, 89], ["None"], "methods", ["None"], ["", "", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.seed": [[90, 92], ["maps_wrapper.MapsWrapper.env.seed"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.seed"], ["", "def", "seed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.save_replay": [[93, 95], ["numpy.array"], "methods", ["None"], ["", "def", "save_replay", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "self", ".", "frame_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.get_env_info": [[96, 103], ["maps_wrapper.MapsWrapper.get_state_size", "maps_wrapper.MapsWrapper.get_obs_size", "maps_wrapper.MapsWrapper.get_total_actions"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state_size", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_size", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_total_actions"], ["", "def", "get_env_info", "(", "self", ")", ":", "\n", "        ", "env_info", "=", "{", "\"state_shape\"", ":", "self", ".", "get_state_size", "(", ")", ",", "\n", "\"obs_shape\"", ":", "self", ".", "get_obs_size", "(", ")", ",", "\n", "\"n_actions\"", ":", "self", ".", "get_total_actions", "(", ")", ",", "\n", "\"n_agents\"", ":", "self", ".", "n_agents", ",", "\n", "\"episode_limit\"", ":", "self", ".", "episode_limit", "}", "\n", "return", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.vectorise_infos": [[104, 106], ["torch.stack", "infos[].keys", "[].cpu().numpy", "range", "[].cpu"], "methods", ["None"], ["", "def", "vectorise_infos", "(", "self", ",", "infos", ")", ":", "\n", "        ", "return", "{", "key", ":", "torch", ".", "stack", "(", "[", "infos", "[", "i", "]", "[", "key", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "i", "in", "range", "(", "self", ".", "n_agents", ")", "]", ",", "dim", "=", "1", ")", "for", "key", "in", "infos", "[", "0", "]", ".", "keys", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.MapsWrapper.vectorise_obs": [[107, 109], ["torch.stack().cpu().numpy", "torch.stack().cpu", "torch.stack"], "methods", ["None"], ["", "def", "vectorise_obs", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "obs", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.maps_wrapper.get_maps_env": [[112, 141], ["kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.copy", "maps_wrapper.get_maps_env.delete"], "function", ["None"], ["", "", "def", "get_maps_env", "(", "**", "kwargs", ")", ":", "\n", "    ", "def", "delete", "(", "dictionary", ",", "key", ")", ":", "\n", "        ", "if", "key", "in", "dictionary", ":", "\n", "            ", "del", "dictionary", "[", "key", "]", "\n", "", "", "map_name", "=", "kwargs", ".", "get", "(", "\"map_name\"", ",", "None", ")", "\n", "batch_size", "=", "kwargs", ".", "get", "(", "\"batch_size\"", ",", "1", ")", "\n", "device", "=", "kwargs", ".", "get", "(", "\"device\"", ",", "\"cpu\"", ")", "\n", "continuous", "=", "kwargs", ".", "get", "(", "\"continuous\"", ",", "False", ")", "\n", "save_replay", "=", "kwargs", ".", "get", "(", "\"save_replay\"", ",", "False", ")", "\n", "render", "=", "kwargs", ".", "get", "(", "\"render\"", ",", "False", ")", "\n", "assert", "map_name", "is", "not", "None", ",", "\"must specify env_args.map_name\"", "\n", "env_kwargs", "=", "kwargs", ".", "copy", "(", ")", "\n", "delete", "(", "env_kwargs", ",", "\"map_name\"", ")", "\n", "delete", "(", "env_kwargs", ",", "\"batch_size\"", ")", "\n", "delete", "(", "env_kwargs", ",", "\"device\"", ")", "\n", "delete", "(", "env_kwargs", ",", "\"continuous\"", ")", "\n", "delete", "(", "env_kwargs", ",", "\"save_replay\"", ")", "\n", "delete", "(", "env_kwargs", ",", "\"render\"", ")", "\n", "env", "=", "make_env", "(", "\n", "map_name", ",", "\n", "num_envs", "=", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "continuous_actions", "=", "continuous", ",", "\n", "rllib_wrapped", "=", "False", ",", "\n", "# Environment specific variables", "\n", "**", "env_kwargs", ",", "\n", ")", "\n", "wrapped_env", "=", "MapsWrapper", "(", "env", ",", "render", "=", "render", ",", "save_replay", "=", "save_replay", ")", "\n", "return", "wrapped_env", "\n", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.multiagentenv.MultiAgentEnv.step": [[3, 6], ["None"], "methods", ["None"], ["    ", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "\"\"\" Returns reward, terminated, info \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.multiagentenv.MultiAgentEnv.get_obs": [[7, 10], ["None"], "methods", ["None"], ["", "def", "get_obs", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns all agent observations in a list \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.multiagentenv.MultiAgentEnv.get_obs_agent": [[11, 14], ["None"], "methods", ["None"], ["", "def", "get_obs_agent", "(", "self", ",", "agent_id", ")", ":", "\n", "        ", "\"\"\" Returns observation for agent_id \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.multiagentenv.MultiAgentEnv.get_obs_size": [[15, 18], ["None"], "methods", ["None"], ["", "def", "get_obs_size", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns the shape of the observation \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.multiagentenv.MultiAgentEnv.get_state": [[19, 21], ["None"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.multiagentenv.MultiAgentEnv.get_info": [[22, 24], ["None"], "methods", ["None"], ["", "def", "get_info", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.multiagentenv.MultiAgentEnv.get_state_size": [[25, 28], ["None"], "methods", ["None"], ["", "def", "get_state_size", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns the shape of the state\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.multiagentenv.MultiAgentEnv.get_avail_actions": [[29, 31], ["None"], "methods", ["None"], ["", "def", "get_avail_actions", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.multiagentenv.MultiAgentEnv.get_avail_agent_actions": [[32, 35], ["None"], "methods", ["None"], ["", "def", "get_avail_agent_actions", "(", "self", ",", "agent_id", ")", ":", "\n", "        ", "\"\"\" Returns the available actions for agent_id \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.multiagentenv.MultiAgentEnv.get_total_actions": [[36, 40], ["None"], "methods", ["None"], ["", "def", "get_total_actions", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns the total number of actions an agent could ever take \"\"\"", "\n", "# TODO: This is only suitable for a discrete 1 dimensional action space for each agent", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.multiagentenv.MultiAgentEnv.reset": [[41, 44], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns initial observations and states\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.multiagentenv.MultiAgentEnv.render": [[45, 47], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.multiagentenv.MultiAgentEnv.close": [[48, 50], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.multiagentenv.MultiAgentEnv.seed": [[51, 53], ["None"], "methods", ["None"], ["", "def", "seed", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.multiagentenv.MultiAgentEnv.save_replay": [[54, 56], ["None"], "methods", ["None"], ["", "def", "save_replay", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.multiagentenv.MultiAgentEnv.get_env_info": [[57, 64], ["multiagentenv.MultiAgentEnv.get_state_size", "multiagentenv.MultiAgentEnv.get_obs_size", "multiagentenv.MultiAgentEnv.get_total_actions"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state_size", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_size", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_total_actions"], ["", "def", "get_env_info", "(", "self", ")", ":", "\n", "        ", "env_info", "=", "{", "\"state_shape\"", ":", "self", ".", "get_state_size", "(", ")", ",", "\n", "\"obs_shape\"", ":", "self", ".", "get_obs_size", "(", ")", ",", "\n", "\"n_actions\"", ":", "self", ".", "get_total_actions", "(", ")", ",", "\n", "\"n_agents\"", ":", "self", ".", "n_agents", ",", "\n", "\"episode_limit\"", ":", "self", ".", "episode_limit", "}", "\n", "return", "env_info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.envs.__init__.env_fn": [[24, 26], ["env"], "function", ["None"], []], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.__init__": [[54, 166], ["isinstance", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "numpy.asarray", "numpy.asarray", "numpy.zeros", "getattr", "getattr", "numpy.asarray", "numpy.asarray", "numpy.asarray", "getattr", "getattr", "getattr", "getattr", "float", "getattr", "getattr", "getattr", "numpy.zeros", "numpy.ones", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.ones", "stag_hunt.StagHunt.reset", "pymarl.utils.dict2namedtuple.convert", "getattr", "getattr", "getattr", "getattr", "numpy.asarray", "getattr", "int", "getattr"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.reset", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.dict2namedtuple.convert"], ["def", "__init__", "(", "self", ",", "batch_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# Unpack arguments from sacred", "\n", "        ", "args", "=", "kwargs", "\n", "if", "isinstance", "(", "args", ",", "dict", ")", ":", "\n", "            ", "args", "=", "convert", "(", "args", ")", "\n", "", "self", ".", "args", "=", "args", "\n", "self", ".", "print_caught_prey", "=", "getattr", "(", "args", ",", "\"print_caught_prey\"", ",", "False", ")", "\n", "self", ".", "print_frozen_agents", "=", "getattr", "(", "args", ",", "\"print_frozen_agents\"", ",", "False", ")", "\n", "\n", "# Add-on for graph interface", "\n", "self", ".", "state_as_graph", "=", "args", ".", "state_as_graph", "\n", "if", "self", ".", "state_as_graph", ":", "\n", "            ", "self", ".", "absolute_distance", "=", "getattr", "(", "args", ",", "\"absolute_distance\"", ",", "False", ")", "\n", "self", ".", "normalise_distance", "=", "getattr", "(", "args", ",", "\"normalise_distance\"", ",", "False", ")", "\n", "self", ".", "add_walls", "=", "getattr", "(", "args", ",", "\"add_walls\"", ",", "False", ")", "\n", "self", ".", "prey_relational", "=", "getattr", "(", "args", ",", "\"prey_relational\"", ",", "True", ")", "\n", "\n", "# Add-on for goat-hunts (which like to climb mountains)", "\n", "", "self", ".", "mountain_slope", "=", "getattr", "(", "args", ",", "\"mountain_slope\"", ",", "0.0", ")", "\n", "self", ".", "capture_conditions", "=", "getattr", "(", "args", ",", "\"capture_conditions\"", ",", "[", "0", ",", "1", "]", ")", "\n", "self", ".", "mountain_spawn", "=", "getattr", "(", "args", ",", "\"mountain_spawn\"", ",", "False", ")", "\n", "self", ".", "mountain_agent_row", "=", "getattr", "(", "args", ",", "\"mountain_agent_row\"", ",", "-", "1", ")", "\n", "\n", "# Downwards compatibility of batch_mode", "\n", "self", ".", "batch_mode", "=", "batch_size", "is", "not", "None", "\n", "self", ".", "batch_size", "=", "batch_size", "if", "self", ".", "batch_mode", "else", "1", "\n", "\n", "# Define the environment grid", "\n", "self", ".", "truncate_episodes", "=", "getattr", "(", "args", ",", "\"truncate_episodes\"", ",", "True", ")", "\n", "self", ".", "observe_ids", "=", "getattr", "(", "args", ",", "\"observe_ids\"", ",", "False", ")", "\n", "self", ".", "intersection_global_view", "=", "getattr", "(", "args", ",", "\"intersection_global_view\"", ",", "False", ")", "\n", "self", ".", "intersection_unknown", "=", "getattr", "(", "args", ",", "\"intersection_unknown\"", ",", "False", ")", "\n", "self", ".", "directed_observations", "=", "getattr", "(", "args", ",", "\"directed_observations\"", ",", "False", ")", "\n", "self", ".", "directed_cone_narrow", "=", "getattr", "(", "args", ",", "\"directed_cone_narrow\"", ",", "True", ")", "\n", "self", ".", "directed_exta_actions", "=", "getattr", "(", "args", ",", "\"directed_exta_actions\"", ",", "True", ")", "\n", "self", ".", "random_ghosts", "=", "getattr", "(", "args", ",", "\"random_ghosts\"", ",", "False", ")", "\n", "self", ".", "random_ghosts_prob", "=", "getattr", "(", "args", ",", "\"random_ghosts_prob\"", ",", "0.5", ")", "\n", "self", ".", "random_ghosts_mul", "=", "getattr", "(", "args", ",", "\"random_ghosts_mul\"", ",", "-", "1.0", ")", "\n", "self", ".", "random_ghosts_random_indicator", "=", "getattr", "(", "args", ",", "\"random_ghosts_indicator\"", ",", "False", ")", "\n", "self", ".", "observe_state", "=", "getattr", "(", "args", ",", "\"observe_state\"", ",", "False", ")", "\n", "self", ".", "observe_walls", "=", "getattr", "(", "args", ",", "\"observe_walls\"", ",", "True", ")", "\n", "self", ".", "observe_one_hot", "=", "getattr", "(", "args", ",", "\"observe_one_hot\"", ",", "False", ")", "\n", "self", ".", "n_feats", "=", "(", "5", "if", "self", ".", "observe_one_hot", "else", "3", ")", "+", "(", "1", "if", "self", ".", "random_ghosts", "else", "0", ")", "\n", "self", ".", "toroidal", "=", "args", ".", "toroidal", "\n", "shape", "=", "args", ".", "world_shape", "\n", "self", ".", "x_max", ",", "self", ".", "y_max", "=", "shape", "\n", "self", ".", "state_size", "=", "self", ".", "x_max", "*", "self", ".", "y_max", "*", "self", ".", "n_feats", "\n", "self", ".", "env_max", "=", "np", ".", "asarray", "(", "shape", ",", "dtype", "=", "int_type", ")", "\n", "self", ".", "grid_shape", "=", "np", ".", "asarray", "(", "shape", ",", "dtype", "=", "int_type", ")", "\n", "self", ".", "grid", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "x_max", ",", "self", ".", "y_max", ",", "self", ".", "n_feats", ")", ",", "dtype", "=", "float_type", ")", "\n", "# 0=agents, 1=stag, 2=hare, [3=wall, 4=unknown], [-1=ghost-indicator]", "\n", "\n", "if", "self", ".", "random_ghosts", ":", "\n", "            ", "self", ".", "ghost_indicator", "=", "False", "# indicator whether whether prey is a ghost (True) or not (False)", "\n", "self", ".", "ghost_indicator_potential_positions", "=", "np", ".", "asarray", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "self", ".", "x_max", "-", "1", "]", ",", "[", "self", ".", "y_max", "-", "1", ",", "0", "]", ",", "\n", "[", "self", ".", "y_max", "-", "1", ",", "self", ".", "x_max", "-", "1", "]", "]", ",", "dtype", "=", "int_type", ")", "\n", "self", ".", "ghost_indicator_pos", "=", "[", "0", ",", "0", "]", "# position of the indicator whether prey is a ghost (-1) or not (+1)", "\n", "\n", "# Define the agents and their action space", "\n", "", "self", ".", "capture_action", "=", "getattr", "(", "args", ",", "\"capture_action\"", ",", "False", ")", "\n", "self", ".", "capture_action_conditions", "=", "getattr", "(", "args", ",", "\"capture_action_conditions\"", ",", "(", "2", ",", "1", ")", ")", "\n", "self", ".", "actions", "=", "np", ".", "asarray", "(", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", ",", "[", "0", ",", "-", "1", "]", ",", "[", "-", "1", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ",", "dtype", "=", "int_type", ")", "\n", "self", ".", "action_names", "=", "[", "\"right\"", ",", "\"down\"", ",", "\"left\"", ",", "\"up\"", ",", "\"stay\"", ",", "\"catch\"", ",", "\n", "'look-right'", ",", "'look-down'", ",", "'look-left'", ",", "'look-up'", "]", "\n", "self", ".", "agent_move_block", "=", "np", ".", "asarray", "(", "getattr", "(", "args", ",", "\"agent_move_block\"", ",", "[", "0", "]", ")", ",", "dtype", "=", "int_type", ")", "\n", "self", ".", "n_actions", "=", "10", "if", "self", ".", "directed_observations", "and", "self", ".", "directed_exta_actions", "else", "(", "6", "if", "self", ".", "capture_action", "else", "5", ")", "\n", "self", ".", "n_agents", "=", "args", ".", "n_agents", "\n", "self", ".", "n_stags", "=", "args", ".", "n_stags", "\n", "self", ".", "p_stags_rest", "=", "args", ".", "p_stags_rest", "\n", "self", ".", "n_hare", "=", "args", ".", "n_hare", "\n", "self", ".", "p_hare_rest", "=", "args", ".", "p_hare_rest", "\n", "self", ".", "n_prey", "=", "self", ".", "n_stags", "+", "self", ".", "n_hare", "\n", "self", ".", "agent_obs", "=", "args", ".", "agent_obs", "\n", "self", ".", "agent_obs_dim", "=", "np", ".", "asarray", "(", "self", ".", "agent_obs", ",", "dtype", "=", "int_type", ")", "\n", "\n", "if", "self", ".", "observe_state", ":", "\n", "# The size of the global state as observation (with one additional position feature)", "\n", "            ", "self", ".", "obs_size", "=", "int", "(", "self", ".", "state_size", "+", "self", ".", "grid_shape", "[", "0", "]", "*", "self", ".", "grid_shape", "[", "1", "]", ")", "\n", "", "elif", "self", ".", "directed_observations", "and", "self", ".", "directed_cone_narrow", ":", "\n", "# The size of the visible observation cones for this option", "\n", "            ", "self", ".", "obs_size", "=", "self", ".", "n_feats", "*", "(", "2", "*", "args", ".", "agent_obs", "[", "0", "]", "-", "1", ")", "*", "(", "2", "*", "args", ".", "agent_obs", "[", "1", "]", "-", "1", ")", "\n", "", "else", ":", "\n", "# The agent-centric observation size", "\n", "            ", "self", ".", "obs_size", "=", "self", ".", "n_feats", "*", "(", "2", "*", "args", ".", "agent_obs", "[", "0", "]", "+", "1", ")", "*", "(", "2", "*", "args", ".", "agent_obs", "[", "1", "]", "+", "1", ")", "\n", "\n", "# Define the episode and rewards", "\n", "", "self", ".", "episode_limit", "=", "args", ".", "episode_limit", "\n", "self", ".", "time_reward", "=", "getattr", "(", "args", ",", "\"reward_time\"", ",", "-", "0.1", ")", "\n", "self", ".", "collision_reward", "=", "getattr", "(", "args", ",", "\"reward_collision\"", ",", "0.0", ")", "\n", "self", ".", "capture_hare_reward", "=", "getattr", "(", "args", ",", "\"reward_hare\"", ",", "1.0", ")", "\n", "self", ".", "capture_stag_reward", "=", "getattr", "(", "args", ",", "\"reward_stag\"", ",", "2.0", ")", "\n", "self", ".", "miscapture_punishment", "=", "float", "(", "getattr", "(", "args", ",", "\"miscapture_punishment\"", ",", "-", "self", ".", "capture_stag_reward", ")", ")", "\n", "self", ".", "capture_terminal", "=", "getattr", "(", "args", ",", "\"capture_terminal\"", ",", "True", ")", "\n", "self", ".", "capture_freezes", "=", "getattr", "(", "args", ",", "\"capture_freezes\"", ",", "True", ")", "\n", "self", ".", "remove_frozen", "=", "getattr", "(", "args", ",", "\"remove_frozen\"", ",", "False", ")", "\n", "\n", "# Define the internal state", "\n", "self", ".", "agents", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_agents", ",", "self", ".", "batch_size", ",", "2", ")", ",", "dtype", "=", "int_type", ")", "\n", "self", ".", "agents_not_frozen", "=", "np", ".", "ones", "(", "(", "self", ".", "n_agents", ",", "self", ".", "batch_size", ")", ",", "dtype", "=", "int_type", ")", "\n", "self", ".", "agents_orientation", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_agents", ",", "self", ".", "batch_size", ")", ",", "dtype", "=", "int_type", ")", "# use action_labels 0..3", "\n", "self", ".", "prey", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_prey", ",", "self", ".", "batch_size", ",", "2", ")", ",", "dtype", "=", "int_type", ")", "\n", "self", ".", "prey_alive", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_prey", ",", "self", ".", "batch_size", ")", ",", "dtype", "=", "int_type", ")", "\n", "self", ".", "prey_type", "=", "np", ".", "ones", "(", "(", "self", ".", "n_prey", ",", "self", ".", "batch_size", ")", ",", "dtype", "=", "int_type", ")", "# fill with stag (1)", "\n", "self", ".", "prey_type", "[", "self", ".", "n_stags", ":", ",", ":", "]", "=", "2", "# set hares to 2", "\n", "self", ".", "steps", "=", "0", "\n", "self", ".", "sum_rewards", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "self", ".", "made_screen", "=", "False", "\n", "self", ".", "scaling", "=", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.reset": [[168, 194], ["stag_hunt.StagHunt.prey_alive.fill", "stag_hunt.StagHunt.agents_not_frozen.fill", "stag_hunt.StagHunt.grid.fill", "stag_hunt.StagHunt._place_actors", "stag_hunt.StagHunt._place_actors", "stag_hunt.StagHunt._place_actors", "numpy.random.random_integers", "stag_hunt.StagHunt.ghost_indicator_potential_positions[].tolist", "stag_hunt.StagHunt.get_obs", "stag_hunt.StagHunt.get_state", "random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._place_actors", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._place_actors", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._place_actors", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# Reset old episode", "\n", "        ", "self", ".", "prey_alive", ".", "fill", "(", "1", ")", "\n", "self", ".", "agents_not_frozen", ".", "fill", "(", "1", ")", "\n", "self", ".", "steps", "=", "0", "\n", "self", ".", "sum_rewards", "=", "0", "\n", "\n", "# Clear the grid", "\n", "self", ".", "grid", ".", "fill", "(", "0.0", ")", "\n", "\n", "# Place n_agents and n_preys on the grid", "\n", "self", ".", "_place_actors", "(", "self", ".", "agents", ",", "0", ",", "row", "=", "self", ".", "mountain_agent_row", "if", "self", ".", "mountain_agent_row", ">=", "0", "else", "None", ")", "\n", "# Place the stags/goats", "\n", "self", ".", "_place_actors", "(", "self", ".", "prey", "[", ":", "self", ".", "n_stags", ",", ":", ",", ":", "]", ",", "1", ",", "row", "=", "0", "if", "self", ".", "mountain_spawn", "else", "None", ")", "\n", "# Place the hares/sheep", "\n", "self", ".", "_place_actors", "(", "self", ".", "prey", "[", "self", ".", "n_stags", ":", ",", ":", ",", ":", "]", ",", "2", ",", "row", "=", "self", ".", "env_max", "[", "1", "]", "-", "1", "if", "self", ".", "mountain_spawn", "else", "None", ")", "\n", "\n", "# Agent orientations are initialized randomly", "\n", "self", ".", "agents_orientation", "=", "np", ".", "random", ".", "random_integers", "(", "low", "=", "0", ",", "high", "=", "3", ",", "size", "=", "(", "self", ".", "n_agents", ",", "self", ".", "batch_size", ")", ")", "\n", "\n", "if", "self", ".", "random_ghosts", "and", "self", ".", "random_ghosts_random_indicator", ":", "\n", "            ", "self", ".", "ghost_indicator_pos", "=", "self", ".", "ghost_indicator_potential_positions", "[", "\n", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "ghost_indicator_potential_positions", ")", "-", "1", ")", "]", ".", "tolist", "(", ")", "\n", "\n", "# self.step(th.zeros(self.n_agents).fill_(self.action_labels['stay']))", "\n", "", "return", "self", ".", "get_obs", "(", ")", ",", "self", ".", "get_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.step": [[195, 349], ["numpy.expand_dims.astype", "range", "range", "numpy.expand_dims", "numpy.ones", "numpy.random.permutation", "numpy.random.permutation", "print", "numpy.asarray", "len", "range", "reward[].item", "int", "range", "sum", "sum", "random.random", "range", "stag_hunt.StagHunt._move_actor", "range", "possible.append", "stag_hunt.StagHunt._move_actor", "len", "range", "print", "numpy.random.rand", "stag_hunt.StagHunt._move_actor", "numpy.asarray", "range", "len", "stag_hunt.StagHunt._move_actor", "numpy.asarray", "range", "numpy.random.rand", "numpy.random.randint", "numpy.asarray", "len", "numpy.random.rand", "print"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._move_actor", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._move_actor", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._move_actor", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._move_actor"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "\"\"\" Execute a*bs actions in the environment. \"\"\"", "\n", "if", "not", "self", ".", "batch_mode", ":", "\n", "            ", "actions", "=", "np", ".", "expand_dims", "(", "np", ".", "asarray", "(", "actions", ",", "dtype", "=", "int_type", ")", ",", "axis", "=", "1", ")", "\n", "", "assert", "len", "(", "actions", ".", "shape", ")", "==", "2", "and", "actions", ".", "shape", "[", "0", "]", "==", "self", ".", "n_agents", "and", "actions", ".", "shape", "[", "1", "]", "==", "self", ".", "batch_size", ",", "\"improper number of agents and/or parallel environments!\"", "\n", "actions", "=", "actions", ".", "astype", "(", "dtype", "=", "int_type", ")", "\n", "\n", "# Initialise returned values and grid", "\n", "reward", "=", "np", ".", "ones", "(", "self", ".", "batch_size", ",", "dtype", "=", "float_type", ")", "*", "self", ".", "time_reward", "\n", "terminated", "=", "[", "False", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "\n", "# Move the agents sequentially in random order", "\n", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "for", "a", "in", "np", ".", "random", ".", "permutation", "(", "self", ".", "n_agents", ")", ":", "\n", "# Only move if not frozen", "\n", "                ", "if", "self", ".", "agents_not_frozen", "[", "a", ",", "b", "]", ">", "0", ":", "\n", "# Only moves \"up\" if the mountain permits it (as defined by mountain_slope)", "\n", "                    ", "if", "not", "(", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "mountain_slope", "and", "actions", "[", "a", ",", "b", "]", "==", "3", ")", ":", "\n", "                        ", "self", ".", "agents", "[", "a", ",", "b", ",", ":", "]", ",", "collide", "=", "self", ".", "_move_actor", "(", "self", ".", "agents", "[", "a", ",", "b", ",", ":", "]", ",", "actions", "[", "a", ",", "b", "]", ",", "b", ",", "\n", "self", ".", "agent_move_block", ",", "0", ")", "\n", "if", "collide", ":", "\n", "                            ", "reward", "[", "b", "]", "=", "reward", "[", "b", "]", "+", "self", ".", "collision_reward", "\n", "# Set the agent's orientation (if the observation depends on it)", "\n", "", "", "if", "self", ".", "directed_observations", ":", "\n", "                        ", "if", "self", ".", "directed_exta_actions", ":", "\n", "                            ", "if", "actions", "[", "a", ",", "b", "]", ">=", "self", ".", "action_look_to_act", ":", "\n", "                                ", "self", ".", "agents_orientation", "[", "a", ",", "b", "]", "=", "actions", "[", "a", ",", "b", "]", "-", "self", ".", "action_look_to_act", "\n", "", "", "else", ":", "\n", "                            ", "if", "actions", "[", "a", ",", "b", "]", "<", "4", ":", "\n", "                                ", "self", ".", "agents_orientation", "[", "a", ",", "b", "]", "=", "actions", "[", "a", ",", "b", "]", "\n", "\n", "# Move the prey", "\n", "", "", "", "", "", "", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "for", "p", "in", "np", ".", "random", ".", "permutation", "(", "self", ".", "n_prey", ")", ":", "\n", "                ", "if", "self", ".", "prey_alive", "[", "p", ",", "b", "]", ">", "0", ":", "\n", "# Collect all allowed actions for the prey", "\n", "                    ", "possible", "=", "[", "]", "\n", "next_to_agent", "=", "False", "\n", "# Run through all potential movement actions (without actually moving)", "\n", "for", "u", "in", "range", "(", "4", ")", ":", "\n", "                        ", "if", "not", "self", ".", "_move_actor", "(", "self", ".", "prey", "[", "p", ",", "b", ",", ":", "]", ",", "u", ",", "b", ",", "np", ".", "asarray", "(", "[", "0", ",", "1", ",", "2", "]", ",", "dtype", "=", "int_type", ")", ")", "[", "1", "]", ":", "\n", "                            ", "possible", ".", "append", "(", "u", ")", "\n", "", "if", "self", ".", "_move_actor", "(", "self", ".", "prey", "[", "p", ",", "b", ",", ":", "]", ",", "u", ",", "b", ",", "np", ".", "asarray", "(", "[", "0", "]", ",", "dtype", "=", "int_type", ")", ")", "[", "1", "]", ":", "\n", "                            ", "next_to_agent", "=", "True", "\n", "# Capturing prey works differently when the agents have a 'catch' action", "\n", "", "", "if", "self", ".", "capture_action", ":", "\n", "                        ", "n_catching_agents", "=", "0", "\n", "# Prey does not move (rest) if they have capture_conditions or less available moves", "\n", "# if len(possible) <= self.capture_conditions[self.prey_type[p, b] - 1]:", "\n", "#     possible = []", "\n", "# Capturing happens if capture_action_conditions many agents execute 'catch'", "\n", "for", "a", "in", "range", "(", "self", ".", "n_agents", ")", ":", "\n", "                            ", "if", "actions", "[", "a", ",", "b", "]", "==", "self", ".", "action_labels", "[", "'catch'", "]", "and", "self", ".", "agents_not_frozen", "[", "a", ",", "b", "]", ">", "0", ":", "\n", "# If any movement action in [0, 4) would end up on agent a, that agent can 'catch' p", "\n", "                                ", "for", "u", "in", "range", "(", "4", ")", ":", "\n", "                                    ", "pos", "=", "self", ".", "prey", "[", "p", ",", "b", "]", "+", "self", ".", "actions", "[", "u", "]", "\n", "if", "pos", "[", "0", "]", "==", "self", ".", "agents", "[", "a", ",", "b", ",", "0", "]", "and", "pos", "[", "1", "]", "==", "self", ".", "agents", "[", "a", ",", "b", ",", "1", "]", ":", "\n", "                                        ", "n_catching_agents", "+=", "1", "\n", "break", "\n", "# If the number of neighboring agents that execute 'catch' >= condition, prey is captured", "\n", "", "", "", "", "captured", "=", "n_catching_agents", ">=", "self", ".", "capture_action_conditions", "[", "self", ".", "prey_type", "[", "p", ",", "b", "]", "-", "1", "]", "\n", "#          and len(possible) == 0", "\n", "if", "n_catching_agents", ">", "0", "and", "not", "captured", ":", "\n", "                            ", "reward", "[", "b", "]", "+=", "self", ".", "miscapture_punishment", "\n", "", "", "else", ":", "\n", "# Prey is caught when the number of possible moves is less or equal to their capture_condition", "\n", "                        ", "captured", "=", "len", "(", "possible", ")", "<=", "self", ".", "capture_conditions", "[", "self", ".", "prey_type", "[", "p", ",", "b", "]", "-", "1", "]", "\n", "", "captured", "=", "captured", "and", "next_to_agent", "if", "self", ".", "args", ".", "prevent_cannibalism", "else", "captured", "\n", "# If the prey is captured, remove it from the grid and terminate episode if specified", "\n", "if", "captured", ":", "\n", "# kill prey", "\n", "                        ", "self", ".", "prey_alive", "[", "p", ",", "b", "]", "=", "0", "\n", "self", ".", "grid", "[", "b", ",", "self", ".", "prey", "[", "p", ",", "b", ",", "0", "]", ",", "self", ".", "prey", "[", "p", ",", "b", ",", "1", "]", ",", "self", ".", "prey_type", "[", "p", ",", "b", "]", "]", "=", "0", "\n", "# terminate if capture_terminal=True", "\n", "terminated", "[", "b", "]", "=", "terminated", "[", "b", "]", "or", "self", ".", "capture_terminal", "\n", "# determine reward for capture", "\n", "rew", "=", "0", "\n", "rew", "+=", "self", ".", "capture_stag_reward", "if", "self", ".", "prey_type", "[", "p", ",", "b", "]", "==", "1", "else", "0", "\n", "rew", "+=", "self", ".", "capture_hare_reward", "if", "self", ".", "prey_type", "[", "p", ",", "b", "]", "==", "2", "else", "0", "\n", "if", "self", ".", "random_ghosts", "and", "self", ".", "ghost_indicator", ":", "\n", "                            ", "rew", "*=", "self", ".", "random_ghosts_mul", "\n", "", "reward", "[", "b", "]", "+=", "rew", "\n", "# freeze all surrounding agents if capture_freezes=True", "\n", "if", "self", ".", "capture_freezes", ":", "\n", "# each agent a...", "\n", "                            ", "for", "a", "in", "range", "(", "self", ".", "n_agents", ")", ":", "\n", "# ... which is not frozen...", "\n", "                                ", "if", "self", ".", "agents_not_frozen", "[", "a", ",", "b", "]", ">", "0", "and", "(", "not", "self", ".", "capture_action", "or", "actions", "[", "a", ",", "b", "]", "==", "self", ".", "action_labels", "[", "'catch'", "]", ")", ":", "\n", "# ... checks all possible movement actions ...", "\n", "                                    ", "for", "u", "in", "range", "(", "self", ".", "n_actions", "-", "1", ")", ":", "\n", "                                        ", "x", "=", "self", ".", "agents", "[", "a", ",", "b", ",", ":", "]", "+", "self", ".", "actions", "[", "u", "]", "\n", "# ... to see if it would have moved onto prey p's position ...", "\n", "if", "x", "[", "0", "]", "==", "self", ".", "prey", "[", "p", ",", "b", ",", "0", "]", "and", "x", "[", "1", "]", "==", "self", ".", "prey", "[", "p", ",", "b", ",", "1", "]", ":", "\n", "# ... which freezes the agent!", "\n", "                                            ", "self", ".", "agents_not_frozen", "[", "a", ",", "b", "]", "=", "0", "\n", "# remove frozen agents from the grid if specified", "\n", "if", "self", ".", "remove_frozen", ":", "\n", "                                                ", "self", ".", "grid", "[", "b", ",", "self", ".", "agents", "[", "a", ",", "b", ",", "0", "]", ",", "self", ".", "agents", "[", "a", ",", "b", ",", "1", "]", ",", "0", "]", "=", "0", "\n", "# debug message if requested", "\n", "", "if", "self", ".", "print_frozen_agents", ":", "\n", "                                                ", "print", "(", "\"Freeze agent %u at height %u and pos %u.\"", "%", "\n", "(", "a", ",", "self", ".", "env_max", "[", "0", "]", "-", "1", "-", "self", ".", "agents", "[", "a", ",", "b", ",", "0", "]", ",", "self", ".", "agents", "[", "a", ",", "b", ",", "1", "]", ")", ",", "\n", "\"    Agents active:\"", ",", "self", ".", "agents_not_frozen", "[", ":", ",", "b", "]", ")", "\n", "# print debug messages", "\n", "", "", "", "", "", "", "if", "self", ".", "print_caught_prey", ":", "\n", "                            ", "print", "(", "\"Captured %s at time %u, height %d and pos %u.\"", "%", "\n", "(", "(", "\"stag\"", "if", "self", ".", "prey_type", "[", "p", ",", "b", "]", "==", "1", "else", "\"hare\"", ")", ",", "self", ".", "steps", ",", "\n", "self", ".", "env_max", "[", "0", "]", "-", "1", "-", "self", ".", "prey", "[", "p", ",", "b", ",", "0", "]", ",", "self", ".", "prey", "[", "p", ",", "b", ",", "1", "]", ")", ",", "\n", "\"   Agents: \"", ",", "self", ".", "agents_not_frozen", "[", ":", ",", "b", "]", ",", "\n", "\"   reward %g\"", "%", "reward", "[", "b", "]", "\n", ")", "\n", "", "", "else", ":", "\n", "# If not, check if the prey can rest and if so determine randomly whether it wants to", "\n", "                        ", "rest", "=", "(", "self", ".", "grid", "[", "b", ",", "self", ".", "prey", "[", "p", ",", "b", ",", "0", "]", ",", "self", ".", "prey", "[", "p", ",", "b", ",", "1", "]", ",", "0", "]", "==", "0", ")", "and", "(", "np", ".", "random", ".", "rand", "(", ")", "<", "(", "self", ".", "p_stags_rest", "if", "self", ".", "prey_type", "[", "p", ",", "b", "]", "==", "1", "\n", "else", "self", ".", "p_hare_rest", ")", ")", "or", "len", "(", "possible", ")", "==", "0", "\n", "# If the prey decides not to rest, choose a movement action randomly", "\n", "if", "not", "rest", ":", "\n", "                            ", "u", "=", "possible", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "possible", ")", ")", "]", "\n", "# Only moves up/down if the mountain permits it (as defined by mountain_slope)", "\n", "if", "not", "(", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "mountain_slope", "\n", "and", "self", ".", "grid", "[", "b", ",", "self", ".", "prey", "[", "p", ",", "b", ",", "0", "]", ",", "self", ".", "prey", "[", "p", ",", "b", ",", "1", "]", ",", "0", "]", "==", "0", "\n", "and", "(", "self", ".", "prey_type", "[", "p", ",", "b", "]", "==", "2", "and", "u", "==", "3", "or", "self", ".", "prey_type", "[", "p", ",", "b", "]", "==", "1", "and", "u", "==", "1", ")", ")", ":", "\n", "# Execute movement", "\n", "                                ", "self", ".", "prey", "[", "p", ",", "b", ",", ":", "]", ",", "_", "=", "self", ".", "_move_actor", "(", "self", ".", "prey", "[", "p", ",", "b", ",", ":", "]", ",", "u", ",", "b", ",", "\n", "np", ".", "asarray", "(", "[", "0", ",", "1", ",", "2", "]", ",", "dtype", "=", "int_type", ")", ",", "\n", "self", ".", "prey_type", "[", "p", ",", "b", "]", ")", "\n", "# Terminate batch if all prey are caught or all agents are frozen", "\n", "", "", "", "", "", "terminated", "[", "b", "]", "=", "terminated", "[", "b", "]", "or", "sum", "(", "self", ".", "prey_alive", "[", ":", ",", "b", "]", ")", "==", "0", "or", "sum", "(", "self", ".", "agents_not_frozen", "[", ":", ",", "b", "]", ")", "==", "0", "\n", "\n", "", "if", "self", ".", "random_ghosts", ":", "\n", "            ", "self", ".", "ghost_indicator", "=", "not", "(", "random", ".", "random", "(", ")", "<", "self", ".", "random_ghosts_prob", ")", "\n", "\n", "# Terminate if episode_limit is reached", "\n", "", "info", "=", "{", "}", "\n", "self", ".", "sum_rewards", "+=", "reward", "[", "0", "]", "\n", "self", ".", "steps", "+=", "1", "\n", "if", "self", ".", "steps", ">=", "self", ".", "episode_limit", ":", "\n", "            ", "terminated", "=", "[", "True", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "info", "[", "\"episode_limit\"", "]", "=", "self", ".", "truncate_episodes", "\n", "", "else", ":", "\n", "            ", "info", "[", "\"episode_limit\"", "]", "=", "False", "\n", "\n", "", "if", "terminated", "[", "0", "]", "and", "self", ".", "print_caught_prey", ":", "\n", "            ", "print", "(", "\"Episode terminated at time %u with return %g\"", "%", "(", "self", ".", "steps", ",", "self", ".", "sum_rewards", ")", ")", "\n", "\n", "", "if", "self", ".", "batch_mode", ":", "\n", "            ", "return", "reward", ",", "terminated", ",", "info", "\n", "", "else", ":", "\n", "            ", "return", "reward", "[", "0", "]", ".", "item", "(", ")", ",", "int", "(", "terminated", "[", "0", "]", ")", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.get_obs_agent": [[351, 370], ["list", "numpy.zeros", "obs.flatten.flatten.flatten", "stag_hunt.StagHunt._observe", "numpy.reshape", "stag_hunt.StagHunt.get_state"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._observe", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state"], ["", "", "def", "get_obs_agent", "(", "self", ",", "agent_id", ",", "batch", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "observe_state", ":", "\n", "# Get the state as observation (in the right format)", "\n", "            ", "dim", "=", "list", "(", "self", ".", "grid", ".", "shape", ")", "\n", "state", "=", "np", ".", "reshape", "(", "self", ".", "get_state", "(", ")", ",", "dim", ")", "[", "batch", ",", ":", "]", "\n", "# Reshape and add a blank feature (last dimension) for the agent's position", "\n", "dim", "=", "dim", "[", "1", ":", "]", "# only one batch", "\n", "dim", "[", "-", "1", "]", "+=", "1", "# one more feature", "\n", "obs", "=", "np", ".", "zeros", "(", "dim", ")", "\n", "obs", "[", ":", ",", ":", ",", ":", "-", "1", "]", "=", "state", "\n", "# Mark the position of agent_id in the new feature", "\n", "obs", "[", "self", ".", "agents", "[", "agent_id", ",", "batch", ",", "0", "]", ",", "self", ".", "agents", "[", "agent_id", ",", "batch", ",", "1", "]", ",", "-", "1", "]", "=", "1.0", "\n", "obs", "=", "obs", ".", "flatten", "(", ")", "\n", "", "else", ":", "\n", "            ", "obs", ",", "_", "=", "self", ".", "_observe", "(", "[", "agent_id", "]", ")", "\n", "# If the frozen agents are removed, their observation is blank", "\n", "", "if", "self", ".", "capture_freezes", "and", "self", ".", "remove_frozen", "and", "self", ".", "agents_not_frozen", "[", "agent_id", ",", "batch", "]", "==", "0", ":", "\n", "            ", "obs", "*=", "0", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.get_obs": [[371, 374], ["stag_hunt.StagHunt.get_obs_agent", "range"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_agent"], ["", "def", "get_obs", "(", "self", ")", ":", "\n", "        ", "agents_obs", "=", "[", "self", ".", "get_obs_agent", "(", "i", ")", "for", "i", "in", "range", "(", "self", ".", "n_agents", ")", "]", "\n", "return", "agents_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.get_state_as_graph": [[375, 394], ["range", "range", "range", "state.append", "range", "[].append", "state.append", "state.append", "stag_hunt.StagHunt._move_actor", "[].append", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._move_actor"], ["", "def", "get_state_as_graph", "(", "self", ")", ":", "\n", "        ", "state", "=", "[", "]", "\n", "# Enqueue all agents", "\n", "for", "a", "in", "range", "(", "self", ".", "n_agents", ")", ":", "\n", "            ", "state", ".", "append", "(", "{", "'type'", ":", "'agent'", ",", "'pos'", ":", "self", ".", "agents", "[", "a", ",", "0", "]", ",", "'avail_actions'", ":", "[", "]", ",", "'id'", ":", "a", "}", ")", "\n", "# check the 4 movement actions for availability", "\n", "for", "u", "in", "range", "(", "self", ".", "n_actions", "-", "1", ")", ":", "\n", "                ", "_", ",", "c", "=", "self", ".", "_move_actor", "(", "self", ".", "agents", "[", "a", ",", "0", ",", ":", "]", ",", "u", ",", "0", ",", "np", ".", "asarray", "(", "[", "0", "]", ",", "dtype", "=", "int_type", ")", ")", "\n", "state", "[", "-", "1", "]", "[", "'avail_actions'", "]", ".", "append", "(", "0", "if", "c", "else", "1", ")", "\n", "# 'pass' action (4) is always available", "\n", "", "state", "[", "-", "1", "]", "[", "'avail_actions'", "]", ".", "append", "(", "1", ")", "\n", "# Enqueue all stags", "\n", "", "for", "s", "in", "range", "(", "self", ".", "n_stags", ")", ":", "\n", "            ", "state", ".", "append", "(", "{", "'type'", ":", "'stag'", ",", "'pos'", ":", "self", ".", "prey", "[", "s", ",", "0", "]", "}", ")", "\n", "# Enqueue all hares", "\n", "", "for", "h", "in", "range", "(", "self", ".", "n_hare", ")", ":", "\n", "            ", "state", ".", "append", "(", "{", "'type'", ":", "'hare'", ",", "'pos'", ":", "self", ".", "prey", "[", "self", ".", "n_stags", "+", "h", ",", "0", "]", "}", ")", "\n", "# Return list f entities", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.get_state": [[395, 404], ["stag_hunt.StagHunt.state_to_graph", "stag_hunt.StagHunt.grid.copy().reshape", "stag_hunt.StagHunt.grid[].reshape", "stag_hunt.StagHunt.get_state_as_graph", "stag_hunt.StagHunt.grid.copy"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.state_to_graph", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.get_state_as_graph"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "# Either return the state as a list of entities...", "\n", "        ", "if", "self", ".", "state_as_graph", ":", "\n", "            ", "return", "self", ".", "state_to_graph", "(", "self", ".", "get_state_as_graph", "(", ")", ")", "\n", "# ... or return the entire grid", "\n", "", "if", "self", ".", "batch_mode", ":", "\n", "            ", "return", "self", ".", "grid", ".", "copy", "(", ")", ".", "reshape", "(", "self", ".", "state_size", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "grid", "[", "0", ",", ":", ",", ":", ",", ":", "]", ".", "reshape", "(", "self", ".", "state_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.get_obs_intersect_pair_size": [[405, 407], ["stag_hunt.StagHunt.get_obs_size"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_size"], ["", "", "def", "get_obs_intersect_pair_size", "(", "self", ")", ":", "\n", "        ", "return", "2", "*", "self", ".", "get_obs_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.get_obs_intersect_all_size": [[408, 410], ["stag_hunt.StagHunt.get_obs_size"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_size"], ["", "def", "get_obs_intersect_all_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_agents", "*", "self", ".", "get_obs_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.get_obs_intersection": [[411, 413], ["stag_hunt.StagHunt._observe"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._observe"], ["", "def", "get_obs_intersection", "(", "self", ",", "agent_ids", ")", ":", "\n", "        ", "return", "self", ".", "_observe", "(", "agent_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.get_total_actions": [[415, 417], ["None"], "methods", ["None"], ["", "def", "get_total_actions", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.get_avail_agent_actions": [[418, 444], ["numpy.logical_and().all", "numpy.any", "range", "range", "range", "int", "stag_hunt.StagHunt._move_actor", "range", "numpy.logical_and", "range", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._move_actor"], ["", "def", "get_avail_agent_actions", "(", "self", ",", "agent_id", ")", ":", "\n", "        ", "\"\"\" Currently runs only with batch_size==1. \"\"\"", "\n", "if", "self", ".", "agents_not_frozen", "[", "agent_id", "]", "==", "0", ":", "\n", "# All agents that are frozen can only perform the \"stay\" action", "\n", "            ", "avail_actions", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "n_actions", ")", "]", "\n", "avail_actions", "[", "self", ".", "action_labels", "[", "'stay'", "]", "]", "=", "1", "\n", "", "elif", "self", ".", "toroidal", ":", "\n", "# In a toroidal environment, all actions are allowed", "\n", "            ", "avail_actions", "=", "[", "1", "for", "_", "in", "range", "(", "self", ".", "n_actions", ")", "]", "\n", "", "else", ":", "\n", "# In a bounded environment, you cannot move into walls", "\n", "            ", "new_pos", "=", "self", ".", "agents", "[", "agent_id", ",", "0", ",", ":", "]", "+", "self", ".", "actions", "[", ":", "self", ".", "n_actions", "]", "\n", "allowed", "=", "np", ".", "logical_and", "(", "new_pos", ">=", "0", ",", "new_pos", "<", "self", ".", "grid_shape", ")", ".", "all", "(", "axis", "=", "1", ")", "\n", "assert", "np", ".", "any", "(", "allowed", ")", ",", "\"No available action in the environment: this should never happen!\"", "\n", "avail_actions", "=", "[", "int", "(", "allowed", "[", "a", "]", ")", "for", "a", "in", "range", "(", "self", ".", "n_actions", ")", "]", "\n", "# If the agent is not frozen, the 'catch' action is only available next to a prey", "\n", "", "if", "self", ".", "capture_action", "and", "self", ".", "agents_not_frozen", "[", "agent_id", "]", ">", "0", ":", "\n", "            ", "avail_actions", "[", "self", ".", "action_labels", "[", "'catch'", "]", "]", "=", "0", "\n", "# Check with virtual move actions if there is a prey next to the agent", "\n", "possible_catches", "=", "range", "(", "4", ")", "if", "not", "self", ".", "directed_observations", "else", "range", "(", "self", ".", "agents_orientation", "[", "agent_id", ",", "0", "]", ",", "self", ".", "agents_orientation", "[", "agent_id", ",", "0", "]", "+", "1", ")", "\n", "for", "u", "in", "possible_catches", ":", "\n", "                ", "if", "self", ".", "_move_actor", "(", "self", ".", "agents", "[", "agent_id", ",", "0", ",", ":", "]", ",", "u", ",", "0", ",", "np", ".", "asarray", "(", "[", "1", ",", "2", "]", ",", "dtype", "=", "int_type", ")", ")", "[", "1", "]", ":", "\n", "                    ", "avail_actions", "[", "self", ".", "action_labels", "[", "'catch'", "]", "]", "=", "1", "\n", "break", "\n", "", "", "", "return", "avail_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.get_avail_actions": [[445, 450], ["range", "avail_actions.append", "stag_hunt.StagHunt.get_avail_agent_actions"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions"], ["", "def", "get_avail_actions", "(", "self", ")", ":", "\n", "        ", "avail_actions", "=", "[", "]", "\n", "for", "agent_id", "in", "range", "(", "self", ".", "n_agents", ")", ":", "\n", "            ", "avail_actions", ".", "append", "(", "self", ".", "get_avail_agent_actions", "(", "agent_id", ")", ")", "\n", "", "return", "avail_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.get_obs_size": [[451, 453], ["None"], "methods", ["None"], ["", "def", "get_obs_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "obs_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.get_state_size": [[454, 456], ["None"], "methods", ["None"], ["", "def", "get_state_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.get_stats": [[457, 459], ["None"], "methods", ["None"], ["", "def", "get_stats", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.get_env_info": [[460, 465], ["pymarl.envs.multiagentenv.MultiAgentEnv.get_env_info"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.get_env_info"], ["", "def", "get_env_info", "(", "self", ")", ":", "\n", "        ", "info", "=", "MultiAgentEnv", ".", "get_env_info", "(", "self", ")", "\n", "if", "self", ".", "state_as_graph", ":", "\n", "            ", "raise", "Exception", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.close": [[467, 471], ["print", "pygame.quit"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "made_screen", ":", "\n", "            ", "pygame", ".", "quit", "(", ")", "\n", "", "print", "(", "\"Closing Multi-Agent Navigation\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.render_array": [[472, 475], ["None"], "methods", ["None"], ["", "def", "render_array", "(", "self", ")", ":", "\n", "# Return an rgb array of the frame", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.render": [[476, 479], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ")", ":", "\n", "# TODO!", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.seed": [[480, 482], ["None"], "methods", ["None"], ["", "def", "seed", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._place_actors": [[484, 495], ["range", "range", "numpy.random.randint", "numpy.random.randint", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "_place_actors", "(", "self", ",", "actors", ":", "np", ".", "ndarray", ",", "type_id", ":", "int", ",", "row", "=", "None", ",", "col", "=", "None", ")", ":", "\n", "        ", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "for", "a", "in", "range", "(", "actors", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "is_free", "=", "False", "\n", "while", "not", "is_free", ":", "\n", "# Draw actors's position randomly", "\n", "                    ", "actors", "[", "a", ",", "b", ",", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "env_max", "[", "0", "]", ")", "if", "row", "is", "None", "else", "row", "\n", "actors", "[", "a", ",", "b", ",", "1", "]", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "env_max", "[", "1", "]", ")", "if", "col", "is", "None", "else", "col", "\n", "# Check if position is valid", "\n", "is_free", "=", "np", ".", "sum", "(", "self", ".", "grid", "[", "b", ",", "actors", "[", "a", ",", "b", ",", "0", "]", ",", "actors", "[", "a", ",", "b", ",", "1", "]", ",", ":", "]", ")", "==", "0", "\n", "", "self", ".", "grid", "[", "b", ",", "actors", "[", "a", ",", "b", ",", "0", "]", ",", "actors", "[", "a", ",", "b", ",", "1", "]", ",", "type_id", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.print_grid": [[496, 504], ["grid[].squeeze().copy", "range", "numpy.sum", "print", "grid[].squeeze"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "", "", "def", "print_grid", "(", "self", ",", "batch", "=", "0", ",", "grid", "=", "None", ")", ":", "\n", "        ", "if", "grid", "is", "None", ":", "\n", "            ", "grid", "=", "self", ".", "grid", "\n", "", "grid", "=", "grid", "[", "batch", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "grid", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "grid", "[", ":", ",", ":", ",", "i", "]", "*=", "i", "+", "1", "\n", "", "grid", "=", "np", ".", "sum", "(", "grid", ",", "axis", "=", "2", ")", "\n", "print", "(", "grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.print_agents": [[505, 513], ["numpy.zeros", "range", "range", "print"], "methods", ["None"], ["", "def", "print_agents", "(", "self", ",", "batch", "=", "0", ")", ":", "\n", "        ", "obs", "=", "np", ".", "zeros", "(", "(", "self", ".", "grid_shape", "[", "0", "]", ",", "self", ".", "grid_shape", "[", "1", "]", ")", ")", "\n", "for", "a", "in", "range", "(", "self", ".", "n_agents", ")", ":", "\n", "            ", "obs", "[", "self", ".", "agents", "[", "a", ",", "batch", ",", "0", "]", ",", "self", ".", "agents", "[", "a", ",", "batch", ",", "1", "]", "]", "=", "a", "+", "1", "\n", "", "for", "p", "in", "range", "(", "self", ".", "n_prey", ")", ":", "\n", "            ", "if", "self", ".", "prey_alive", "[", "p", "]", ":", "\n", "                ", "obs", "[", "self", ".", "prey", "[", "p", ",", "batch", ",", "0", "]", ",", "self", ".", "prey", "[", "p", ",", "batch", ",", "1", "]", "]", "=", "-", "p", "-", "1", "\n", "", "", "print", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._env_bounds": [[514, 522], ["numpy.minimum", "numpy.maximum"], "methods", ["None"], ["", "def", "_env_bounds", "(", "self", ",", "positions", ":", "np", ".", "ndarray", ")", ":", "\n", "# positions is 2 dimensional", "\n", "        ", "if", "self", ".", "toroidal", ":", "\n", "            ", "positions", "=", "positions", "%", "self", ".", "env_max", "\n", "", "else", ":", "\n", "            ", "positions", "=", "np", ".", "minimum", "(", "positions", ",", "self", ".", "env_max", "-", "1", ")", "\n", "positions", "=", "np", ".", "maximum", "(", "positions", ",", "0", ")", "\n", "", "return", "positions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._move_actor": [[523, 537], ["stag_hunt.StagHunt._env_bounds", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._env_bounds", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "_move_actor", "(", "self", ",", "pos", ":", "np", ".", "ndarray", ",", "action", ":", "int", ",", "batch", ":", "int", ",", "collision_mask", ":", "np", ".", "ndarray", ",", "move_type", "=", "None", ")", ":", "\n", "# compute hypothetical next position", "\n", "        ", "new_pos", "=", "self", ".", "_env_bounds", "(", "pos", "+", "self", ".", "actions", "[", "action", "]", ")", "\n", "# check for a collision with anything in the collision_mask", "\n", "found_at_new_pos", "=", "self", ".", "grid", "[", "batch", ",", "new_pos", "[", "0", "]", ",", "new_pos", "[", "1", "]", ",", ":", "]", "\n", "collision", "=", "np", ".", "sum", "(", "found_at_new_pos", "[", "collision_mask", "]", ")", ">", "0", "\n", "if", "collision", ":", "\n", "# No change in position", "\n", "            ", "new_pos", "=", "pos", "\n", "", "elif", "move_type", "is", "not", "None", ":", "\n", "# change the agent's state and position on the grid", "\n", "            ", "self", ".", "grid", "[", "batch", ",", "pos", "[", "0", "]", ",", "pos", "[", "1", "]", ",", "move_type", "]", "=", "0", "\n", "self", ".", "grid", "[", "batch", ",", "new_pos", "[", "0", "]", ",", "new_pos", "[", "1", "]", ",", "move_type", "]", "=", "1", "\n", "", "return", "new_pos", ",", "collision", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._is_visible": [[538, 552], ["target.reshape().repeat.reshape().repeat.reshape().repeat", "numpy.all", "numpy.minimum", "numpy.maximum", "numpy.abs", "numpy.abs", "target.reshape().repeat.reshape().repeat.reshape", "numpy.minimum"], "methods", ["None"], ["", "def", "_is_visible", "(", "self", ",", "agents", ",", "target", ")", ":", "\n", "        ", "\"\"\" agents are plural and target is singular. \"\"\"", "\n", "target", "=", "target", ".", "reshape", "(", "1", ",", "2", ")", ".", "repeat", "(", "agents", ".", "shape", "[", "0", "]", ",", "0", ")", "\n", "# Determine the Manhattan distance of all agents to the target", "\n", "if", "self", ".", "toroidal", ":", "\n", "# Account for the environment wrapping around in a toroidal fashion", "\n", "            ", "lower", "=", "np", ".", "minimum", "(", "agents", ",", "target", ")", "\n", "higher", "=", "np", ".", "maximum", "(", "agents", ",", "target", ")", "\n", "d", "=", "np", ".", "abs", "(", "np", ".", "minimum", "(", "higher", "-", "lower", ",", "lower", "-", "higher", "+", "self", ".", "grid_shape", ")", ")", "\n", "", "else", ":", "\n", "# Account for the environment being bounded", "\n", "            ", "d", "=", "np", ".", "abs", "(", "agents", "-", "target", ")", "\n", "# Return true if all targets are visible by all agents", "\n", "", "return", "np", ".", "all", "(", "d", "<=", "self", ".", "agent_obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._intersect_targets": [[553, 563], ["range", "stag_hunt.StagHunt._is_visible", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._is_visible"], ["", "def", "_intersect_targets", "(", "self", ",", "grid", ",", "agent_ids", ",", "targets", ",", "batch", "=", "0", ",", "target_id", "=", "0", ",", "targets_alive", "=", "None", ",", "offset", "=", "0", ")", ":", "\n", "        ", "\"\"\"\" Helper for get_obs_intersection(). \"\"\"", "\n", "for", "a", "in", "range", "(", "targets", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "marker", "=", "a", "+", "1", "if", "self", ".", "observe_ids", "else", "1", "\n", "if", "targets_alive", "is", "None", "or", "targets_alive", "[", "a", ",", "batch", "]", ":", "\n", "# If the target is visible to all agents", "\n", "                ", "if", "self", ".", "_is_visible", "(", "self", ".", "agents", "[", "agent_ids", ",", "batch", ",", ":", "]", ",", "targets", "[", "a", ",", "batch", ",", ":", "]", ")", ":", "\n", "# include the target in all observations (in relative positions)", "\n", "                    ", "for", "o", "in", "range", "(", "len", "(", "agent_ids", ")", ")", ":", "\n", "                        ", "grid", "[", "batch", ",", "targets", "[", "a", ",", "batch", ",", "0", "]", "+", "offset", ",", "targets", "[", "a", ",", "batch", ",", "1", "]", "+", "offset", ",", "target_id", "]", "=", "marker", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._observe": [[564, 648], ["numpy.array", "numpy.zeros", "range", "len", "stag_hunt.StagHunt.get_avail_agent_actions", "all", "range", "obs.reshape.reshape.reshape", "numpy.zeros", "range", "obs.reshape.reshape.reshape", "stag_hunt.StagHunt._mask_invisible", "len", "numpy.reshape", "numpy.reshape", "numpy.reshape.dot", "stag_hunt.StagHunt._intersect_targets", "stag_hunt.StagHunt._intersect_targets", "stag_hunt.StagHunt._intersect_targets", "enumerate", "len", "obs.reshape.reshape.reshape", "obs.reshape.reshape.fill", "obs.reshape.reshape.reshape", "obs[].squeeze", "numpy.array", "numpy.array", "range", "stag_hunt.StagHunt._is_visible", "stag_hunt.StagHunt._mask_agent", "len", "stag_hunt.StagHunt.get_avail_agent_actions", "stag_hunt.StagHunt.get_avail_agent_actions", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._mask_invisible", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._intersect_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._intersect_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._intersect_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._is_visible", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._mask_agent", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions"], ["", "", "", "", "", "def", "_observe", "(", "self", ",", "agent_ids", ")", ":", "\n", "# Compute available actions", "\n", "        ", "if", "len", "(", "agent_ids", ")", "==", "1", ":", "\n", "            ", "avail_all", "=", "self", ".", "get_avail_agent_actions", "(", "agent_ids", "[", "0", "]", ")", "\n", "", "elif", "len", "(", "agent_ids", ")", "==", "2", ":", "\n", "            ", "a_a1", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "self", ".", "get_avail_agent_actions", "(", "agent_ids", "[", "0", "]", ")", ")", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "a_a2", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "self", ".", "get_avail_agent_actions", "(", "agent_ids", "[", "1", "]", ")", ")", ",", "[", "1", ",", "-", "1", "]", ")", "\n", "avail_actions", "=", "a_a1", ".", "dot", "(", "a_a2", ")", "\n", "avail_all", "=", "avail_actions", "*", "0", "+", "1", "\n", "", "else", ":", "\n", "            ", "avail_all", "=", "[", "]", "\n", "# Create over-sized grid", "\n", "", "ashape", "=", "np", ".", "array", "(", "self", ".", "agent_obs", ")", "\n", "ushape", "=", "self", ".", "grid_shape", "+", "2", "*", "ashape", "\n", "grid", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "ushape", "[", "0", "]", ",", "ushape", "[", "1", "]", ",", "self", ".", "n_feats", ")", ",", "dtype", "=", "float_type", ")", "\n", "# Make walls", "\n", "if", "self", ".", "observe_walls", ":", "\n", "            ", "wall_dim", "=", "3", "if", "self", ".", "observe_one_hot", "else", "0", "\n", "wall_id", "=", "1", "if", "self", ".", "observe_one_hot", "else", "-", "1", "\n", "grid", "[", ":", ",", ":", "ashape", "[", "0", "]", ",", ":", ",", "wall_dim", "]", "=", "wall_id", "\n", "grid", "[", ":", ",", "(", "self", ".", "grid_shape", "[", "0", "]", "+", "ashape", "[", "0", "]", ")", ":", ",", ":", ",", "wall_dim", "]", "=", "wall_id", "\n", "grid", "[", ":", ",", ":", ",", ":", "ashape", "[", "1", "]", ",", "wall_dim", "]", "=", "wall_id", "\n", "grid", "[", ":", ",", ":", ",", "(", "self", ".", "grid_shape", "[", "1", "]", "+", "ashape", "[", "1", "]", ")", ":", ",", "wall_dim", "]", "=", "wall_id", "\n", "# Mark the ghost-indicator, if specified", "\n", "", "if", "self", ".", "random_ghosts", ":", "\n", "            ", "pos", "=", "[", "ashape", "[", "i", "]", "+", "self", ".", "ghost_indicator_pos", "[", "i", "]", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "grid", "[", "0", ",", "pos", "[", "0", "]", ",", "pos", "[", "1", "]", ",", "-", "1", "]", "=", "-", "1", "if", "self", ".", "ghost_indicator", "else", "1", "\n", "# Mark the grid with all intersected entities", "\n", "", "noinformation", "=", "False", "\n", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "if", "all", "(", "[", "self", ".", "_is_visible", "(", "self", ".", "agents", "[", "agent_ids", ",", "b", ",", ":", "]", ",", "self", ".", "agents", "[", "agent_ids", "[", "a", "]", ",", "b", ",", ":", "]", ")", "\n", "for", "a", "in", "range", "(", "len", "(", "agent_ids", ")", ")", "]", ")", ":", "\n", "# Every agent sees other intersected agents", "\n", "                ", "self", ".", "_intersect_targets", "(", "grid", ",", "agent_ids", ",", "targets", "=", "self", ".", "agents", ",", "batch", "=", "b", ",", "target_id", "=", "0", ",", "\n", "targets_alive", "=", "self", ".", "agents_not_frozen", ",", "offset", "=", "ashape", ")", "\n", "# Every agent sees intersected stags", "\n", "self", ".", "_intersect_targets", "(", "grid", ",", "agent_ids", ",", "targets", "=", "self", ".", "prey", "[", ":", "self", ".", "n_stags", ",", ":", ",", ":", "]", ",", "batch", "=", "b", ",", "target_id", "=", "1", ",", "\n", "targets_alive", "=", "self", ".", "prey_alive", "[", ":", "self", ".", "n_stags", ",", ":", "]", ",", "offset", "=", "ashape", ")", "\n", "# Every agent sees intersected hares", "\n", "self", ".", "_intersect_targets", "(", "grid", ",", "agent_ids", ",", "targets", "=", "self", ".", "prey", "[", "self", ".", "n_stags", ":", ",", ":", ",", ":", "]", ",", "batch", "=", "b", ",", "target_id", "=", "2", ",", "\n", "targets_alive", "=", "self", ".", "prey_alive", "[", "self", ".", "n_stags", ":", ",", ":", "]", ",", "offset", "=", "ashape", ")", "\n", "", "else", ":", "\n", "                ", "noinformation", "=", "True", "\n", "# Mask out all unknown if specified", "\n", "", "", "if", "self", ".", "intersection_unknown", ":", "\n", "            ", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "                ", "for", "a", "in", "agent_ids", ":", "\n", "                    ", "self", ".", "_mask_agent", "(", "grid", ",", "self", ".", "agents", "[", "a", ",", "b", ",", ":", "]", "+", "ashape", ",", "ashape", ")", "\n", "\n", "", "", "", "if", "self", ".", "intersection_global_view", ":", "\n", "# In case of the global view", "\n", "            ", "obs", "=", "grid", "[", ":", ",", "ashape", "[", "0", "]", ":", "(", "ashape", "[", "0", "]", "+", "self", ".", "grid_shape", "[", "0", "]", ")", ",", "ashape", "[", "1", "]", ":", "(", "ashape", "[", "1", "]", "+", "self", ".", "grid_shape", "[", "1", "]", ")", ",", ":", "]", "\n", "obs", "=", "obs", ".", "reshape", "(", "(", "1", ",", "self", ".", "batch_size", ",", "self", ".", "state_size", ")", ")", "\n", "", "else", ":", "\n", "# otherwise local view", "\n", "            ", "obs", "=", "np", ".", "zeros", "(", "(", "len", "(", "agent_ids", ")", ",", "self", ".", "batch_size", ",", "2", "*", "ashape", "[", "0", "]", "+", "1", ",", "2", "*", "ashape", "[", "1", "]", "+", "1", ",", "self", ".", "n_feats", ")", ",", "\n", "dtype", "=", "float_type", ")", "\n", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "                ", "for", "i", ",", "a", "in", "enumerate", "(", "agent_ids", ")", ":", "\n", "                    ", "obs", "[", "i", ",", "b", ",", ":", ",", ":", ",", ":", "]", "=", "grid", "[", "b", ",", "(", "self", ".", "agents", "[", "a", ",", "b", ",", "0", "]", ")", ":", "(", "self", ".", "agents", "[", "a", ",", "b", ",", "0", "]", "+", "2", "*", "ashape", "[", "0", "]", "+", "1", ")", ",", "\n", "(", "self", ".", "agents", "[", "a", ",", "b", ",", "1", "]", ")", ":", "(", "self", ".", "agents", "[", "a", ",", "b", ",", "1", "]", "+", "2", "*", "ashape", "[", "1", "]", "+", "1", ")", ",", ":", "]", "\n", "", "", "obs", "=", "obs", ".", "reshape", "(", "len", "(", "agent_ids", ")", ",", "self", ".", "batch_size", ",", "-", "1", ")", "\n", "\n", "# Final check: if not all agents can see each other, the mutual knowledge is empty", "\n", "", "if", "noinformation", ":", "\n", "            ", "if", "self", ".", "intersection_unknown", ":", "\n", "                ", "obs", "=", "obs", ".", "reshape", "(", "obs", ".", "shape", "[", "0", "]", ",", "obs", ".", "shape", "[", "1", "]", ",", "obs", ".", "shape", "[", "2", "]", "//", "self", ".", "n_feats", ",", "self", ".", "n_feats", ")", "\n", "unknown_dim", "=", "4", "if", "self", ".", "observe_one_hot", "else", "1", "\n", "unknown_id", "=", "1", "if", "self", ".", "observe_one_hot", "else", "-", "1", "\n", "obs", ".", "fill", "(", "0.0", ")", "\n", "obs", "[", ":", ",", ":", ",", ":", ",", "unknown_dim", "]", "=", "unknown_id", "\n", "obs", "=", "obs", ".", "reshape", "(", "obs", ".", "shape", "[", "0", "]", ",", "obs", ".", "shape", "[", "1", "]", ",", "self", ".", "n_feats", "*", "obs", ".", "shape", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "                ", "obs", "=", "0", "*", "obs", "\n", "\n", "# Mask out everything that is not in the cone, if directed_observations=True", "\n", "", "", "if", "self", ".", "directed_observations", ":", "\n", "            ", "obs", "=", "self", ".", "_mask_invisible", "(", "obs", ",", "agent_ids", ")", "\n", "\n", "# Return considering batch-mode", "\n", "", "if", "self", ".", "batch_mode", ":", "\n", "            ", "return", "obs", ",", "avail_all", "\n", "", "else", ":", "\n", "            ", "return", "obs", "[", ":", ",", "0", ",", ":", "]", ".", "squeeze", "(", ")", ",", "avail_all", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._mask_agent": [[649, 660], ["grid[].fill", "grid[].fill", "grid[].fill", "grid[].fill"], "methods", ["None"], ["", "", "def", "_mask_agent", "(", "self", ",", "grid", ",", "pos", ",", "ashape", ")", ":", "\n", "        ", "unknown_dim", "=", "4", "if", "self", ".", "observe_one_hot", "else", "1", "\n", "unknown_id", "=", "1", "if", "self", ".", "observe_one_hot", "else", "-", "1", "\n", "grid", "[", ":", ",", ":", "(", "pos", "[", "0", "]", "-", "ashape", "[", "0", "]", ")", ",", ":", ",", ":", "]", ".", "fill", "(", "0.0", ")", "\n", "grid", "[", ":", ",", ":", "(", "pos", "[", "0", "]", "-", "ashape", "[", "0", "]", ")", ",", ":", ",", "unknown_dim", "]", "=", "unknown_id", "\n", "grid", "[", ":", ",", "(", "pos", "[", "0", "]", "+", "ashape", "[", "0", "]", "+", "1", ")", ":", ",", ":", ",", ":", "]", ".", "fill", "(", "0.0", ")", "\n", "grid", "[", ":", ",", "(", "pos", "[", "0", "]", "+", "ashape", "[", "0", "]", "+", "1", ")", ":", ",", ":", ",", "unknown_dim", "]", "=", "unknown_id", "\n", "grid", "[", ":", ",", ":", ",", ":", "(", "pos", "[", "1", "]", "-", "ashape", "[", "1", "]", ")", ",", ":", "]", ".", "fill", "(", "0", ")", "\n", "grid", "[", ":", ",", ":", ",", ":", "(", "pos", "[", "1", "]", "-", "ashape", "[", "1", "]", ")", ",", "unknown_dim", "]", "=", "unknown_id", "\n", "grid", "[", ":", ",", ":", ",", "(", "pos", "[", "1", "]", "+", "ashape", "[", "1", "]", "+", "1", ")", ":", ",", ":", "]", ".", "fill", "(", "0.0", ")", "\n", "grid", "[", ":", ",", ":", ",", "(", "pos", "[", "1", "]", "+", "ashape", "[", "1", "]", "+", "1", ")", ":", ",", "unknown_dim", "]", "=", "unknown_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._mask_invisible": [[661, 688], ["numpy.reshape", "range", "vis.reshape", "tuple", "numpy.ones", "enumerate", "list", "range", "range", "range", "range"], "methods", ["None"], ["", "def", "_mask_invisible", "(", "self", ",", "obs", ",", "agent_ids", ")", ":", "\n", "        ", "\"\"\" Generates new observations from obs that only contain the visible cone. \"\"\"", "\n", "narrow", "=", "1", "if", "self", ".", "directed_cone_narrow", "else", "0", "\n", "dim", "=", "list", "(", "obs", ".", "shape", "[", ":", "2", "]", ")", "+", "[", "2", "*", "i", "+", "1", "for", "i", "in", "self", ".", "agent_obs", "]", "+", "[", "self", ".", "n_feats", "]", "\n", "obs", "=", "np", ".", "reshape", "(", "obs", ",", "tuple", "(", "dim", ")", ")", "\n", "vis", "=", "-", "np", ".", "ones", "(", "(", "dim", "[", "0", "]", ",", "dim", "[", "1", "]", ",", "2", "*", "self", ".", "agent_obs", "[", "0", "]", "+", "1", "-", "2", "*", "narrow", ",", "2", "*", "self", ".", "agent_obs", "[", "1", "]", "+", "1", "-", "2", "*", "narrow", ",", "self", ".", "n_feats", ")", ")", "\n", "for", "b", "in", "range", "(", "dim", "[", "1", "]", ")", ":", "\n", "            ", "for", "i", ",", "a", "in", "enumerate", "(", "agent_ids", ")", ":", "\n", "                ", "if", "self", ".", "agents_orientation", "[", "a", ",", "b", "]", "==", "self", ".", "action_labels", "[", "'up'", "]", ":", "\n", "                    ", "for", "j", "in", "range", "(", "self", ".", "agent_obs", "[", "0", "]", "+", "1", "-", "narrow", ")", ":", "\n", "                        ", "vis", "[", "i", ",", "b", ",", "j", ",", "j", ":", "(", "vis", ".", "shape", "[", "3", "]", "-", "j", ")", ",", ":", "]", "=", "obs", "[", "i", ",", "b", ",", "j", ",", "(", "j", "+", "narrow", ")", ":", "(", "obs", ".", "shape", "[", "3", "]", "-", "j", "-", "narrow", ")", ",", ":", "]", "\n", "", "", "elif", "self", ".", "agents_orientation", "[", "a", ",", "b", "]", "==", "self", ".", "action_labels", "[", "'down'", "]", ":", "\n", "                    ", "for", "j", "in", "range", "(", "self", ".", "agent_obs", "[", "0", "]", "+", "1", "-", "narrow", ")", ":", "\n", "                        ", "vis", "[", "i", ",", "b", ",", "-", "j", "-", "1", ",", "j", ":", "(", "vis", ".", "shape", "[", "3", "]", "-", "j", ")", ",", ":", "]", "=", "obs", "[", "i", ",", "b", ",", "-", "j", "-", "1", ",", "(", "j", "+", "narrow", ")", ":", "(", "obs", ".", "shape", "[", "3", "]", "-", "j", "-", "narrow", ")", ",", ":", "]", "\n", "", "", "elif", "self", ".", "agents_orientation", "[", "a", ",", "b", "]", "==", "self", ".", "action_labels", "[", "'left'", "]", ":", "\n", "                    ", "for", "j", "in", "range", "(", "self", ".", "agent_obs", "[", "0", "]", "+", "1", "-", "narrow", ")", ":", "\n", "                        ", "vis", "[", "i", ",", "b", ",", "j", ":", "(", "vis", ".", "shape", "[", "2", "]", "-", "j", ")", ",", "j", ",", ":", "]", "=", "obs", "[", "i", ",", "b", ",", "(", "j", "+", "narrow", ")", ":", "(", "obs", ".", "shape", "[", "2", "]", "-", "j", "-", "narrow", ")", ",", "j", ",", ":", "]", "\n", "", "", "elif", "self", ".", "agents_orientation", "[", "a", ",", "b", "]", "==", "self", ".", "action_labels", "[", "'right'", "]", ":", "\n", "                    ", "for", "j", "in", "range", "(", "self", ".", "agent_obs", "[", "0", "]", "+", "1", "-", "narrow", ")", ":", "\n", "                        ", "vis", "[", "i", ",", "b", ",", "j", ":", "(", "vis", ".", "shape", "[", "2", "]", "-", "j", ")", ",", "-", "j", "-", "1", ",", ":", "]", "=", "obs", "[", "i", ",", "b", ",", "(", "j", "+", "narrow", ")", ":", "(", "obs", ".", "shape", "[", "2", "]", "-", "j", "-", "narrow", ")", ",", "-", "j", "-", "1", ",", ":", "]", "\n", "", "", "else", ":", "\n", "                    ", "assert", "True", ",", "\"Agent directions need to be 0..3!\"", "\n", "", "", "", "return", "vis", ".", "reshape", "(", "dim", "[", ":", "2", "]", "+", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._get_obs_from_grid": [[689, 695], ["stag_hunt.StagHunt._get_obs_from_grid_troidal", "stag_hunt.StagHunt._get_obs_from_grid_bounded"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._get_obs_from_grid_troidal", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._get_obs_from_grid_bounded"], ["", "def", "_get_obs_from_grid", "(", "self", ",", "grid", ",", "agent_id", ",", "batch", "=", "0", ")", ":", "\n", "        ", "\"\"\" OBSOLETE! \"\"\"", "\n", "if", "self", ".", "toroidal", ":", "\n", "            ", "return", "self", ".", "_get_obs_from_grid_troidal", "(", "grid", ",", "agent_id", ",", "batch", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_get_obs_from_grid_bounded", "(", "grid", ",", "agent_id", ",", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._get_obs_from_grid_bounded": [[696, 715], ["numpy.zeros", "numpy.maximum", "numpy.minimum", "numpy.reshape"], "methods", ["None"], ["", "", "def", "_get_obs_from_grid_bounded", "(", "self", ",", "grid", ",", "agent_id", ",", "batch", "=", "0", ")", ":", "\n", "        ", "\"\"\" Return a bounded observation for other agents' locations and targets, the size specified by observation\n            shape, centered on the agent. Values outside the bounds of the grid are set to 0.\n            OBSOLETE! \"\"\"", "\n", "# Create the empty observation grid", "\n", "agent_obs", "=", "np", ".", "zeros", "(", "(", "2", "*", "self", ".", "agent_obs", "[", "0", "]", "+", "1", ",", "2", "*", "self", ".", "agent_obs", "[", "1", "]", "+", "1", ",", "3", ")", ",", "dtype", "=", "float_type", ")", "\n", "# Determine the unbounded limits of the agent's observation", "\n", "ul", "=", "self", ".", "agents", "[", "agent_id", ",", "batch", ",", ":", "]", "-", "self", ".", "agent_obs", "\n", "lr", "=", "self", ".", "agents", "[", "agent_id", ",", "batch", ",", ":", "]", "+", "self", ".", "agent_obs", "\n", "# Bound the limits to the grid", "\n", "bul", "=", "np", ".", "maximum", "(", "ul", ",", "[", "0", ",", "0", "]", ")", "\n", "blr", "=", "np", ".", "minimum", "(", "lr", ",", "self", ".", "grid_shape", "-", "1", ")", "\n", "# Compute the ranges in x/y direction in the agent's observation", "\n", "bias", "=", "bul", "-", "ul", "\n", "aoy", "=", "[", "bias", "[", "0", "]", ",", "blr", "[", "0", "]", "-", "bul", "[", "0", "]", "+", "bias", "[", "0", "]", "]", "\n", "aox", "=", "[", "bias", "[", "1", "]", ",", "blr", "[", "1", "]", "-", "bul", "[", "1", "]", "+", "bias", "[", "1", "]", "]", "\n", "# Copy the bounded observations", "\n", "agent_obs", "[", "aoy", "[", "0", "]", ":", "(", "aoy", "[", "1", "]", "+", "1", ")", ",", "aox", "[", "0", "]", ":", "(", "aox", "[", "1", "]", "+", "1", ")", ",", ":", "]", "=", "grid", "[", "batch", ",", "bul", "[", "0", "]", ":", "(", "blr", "[", "0", "]", "+", "1", ")", ",", "bul", "[", "1", "]", ":", "(", "blr", "[", "1", "]", "+", "1", ")", ",", ":", "]", "\n", "return", "np", ".", "reshape", "(", "agent_obs", ",", "self", ".", "obs_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._get_obs_from_grid_troidal": [[716, 727], ["range", "range", "grid[].astype", "grid[].astype.take().take", "numpy.reshape", "grid[].astype.take"], "methods", ["None"], ["", "def", "_get_obs_from_grid_troidal", "(", "self", ",", "grid", ",", "agent_id", ",", "batch", "=", "0", ")", ":", "\n", "        ", "\"\"\" Return a wrapped observation for other agents' locations and targets, the size specified by observation\n            shape, centered on the agent.\n            OBSOLETE! \"\"\"", "\n", "a_x", ",", "a_y", "=", "self", ".", "agents", "[", "agent_id", ",", "batch", ",", ":", "]", "\n", "o_x", ",", "o_y", "=", "self", ".", "agent_obs", "\n", "x_range", "=", "range", "(", "(", "a_x", "-", "o_x", ")", ",", "(", "a_x", "+", "o_x", "+", "1", ")", ")", "\n", "y_range", "=", "range", "(", "(", "a_y", "-", "o_y", ")", ",", "(", "a_y", "+", "o_y", "+", "1", ")", ")", "\n", "ex_grid", "=", "grid", "[", "batch", ",", ":", ",", ":", ",", ":", "]", ".", "astype", "(", "dtype", "=", "float_type", ")", "\n", "agent_obs", "=", "ex_grid", ".", "take", "(", "x_range", ",", "0", ",", "mode", "=", "'wrap'", ")", ".", "take", "(", "y_range", ",", "1", ",", "mode", "=", "'wrap'", ")", "\n", "return", "np", ".", "reshape", "(", "agent_obs", ",", "self", ".", "obs_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._get_obs_intersection_old": [[728, 769], ["numpy.zeros", "numpy.reshape", "numpy.reshape", "numpy.reshape.dot", "range", "numpy.array", "numpy.array", "all", "numpy.zeros", "range", "stag_hunt.StagHunt.get_avail_agent_actions", "stag_hunt.StagHunt.get_avail_agent_actions", "stag_hunt.StagHunt._intersect_targets", "stag_hunt.StagHunt._intersect_targets", "range", "stag_hunt.StagHunt._is_visible", "numpy.zeros.reshape", "grid[].reshape", "len", "len", "stag_hunt.StagHunt._get_obs_from_grid", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._intersect_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._intersect_targets", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._is_visible", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt._get_obs_from_grid"], ["", "def", "_get_obs_intersection_old", "(", "self", ",", "agent_ids", ")", ":", "\n", "        ", "\"\"\" Returns the intersection of the all of agent_ids agents' observations.\n            OBSOLETE, only maintained for legacy issues! \"\"\"", "\n", "# Create grid", "\n", "grid", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "grid_shape", "[", "0", "]", ",", "self", ".", "grid_shape", "[", "0", "]", ",", "3", ")", ",", "dtype", "=", "float_type", ")", "\n", "\n", "a_a1", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "self", ".", "get_avail_agent_actions", "(", "agent_ids", "[", "0", "]", ")", ")", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "a_a2", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "self", ".", "get_avail_agent_actions", "(", "agent_ids", "[", "1", "]", ")", ")", ",", "[", "1", ",", "-", "1", "]", ")", "\n", "avail_actions", "=", "a_a1", ".", "dot", "(", "a_a2", ")", "\n", "avail_all", "=", "avail_actions", "*", "0", "+", "1", "\n", "# If all agent_ids can see each other (otherwise the observation is empty)", "\n", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "if", "all", "(", "[", "self", ".", "_is_visible", "(", "self", ".", "agents", "[", "agent_ids", ",", "b", ",", ":", "]", ",", "self", ".", "agents", "[", "agent_ids", "[", "a", "]", ",", "b", ",", ":", "]", ")", "\n", "for", "a", "in", "range", "(", "len", "(", "agent_ids", ")", ")", "]", ")", ":", "\n", "# Every agent sees other intersected agents", "\n", "                ", "self", ".", "_intersect_targets", "(", "grid", ",", "agent_ids", ",", "targets", "=", "self", ".", "agents", ",", "batch", "=", "b", ",", "target_id", "=", "0", ")", "\n", "# Every agent sees intersected prey", "\n", "self", ".", "_intersect_targets", "(", "grid", ",", "agent_ids", ",", "targets", "=", "self", ".", "prey", ",", "batch", "=", "b", ",", "target_id", "=", "1", ",", "\n", "targets_alive", "=", "self", ".", "prey_alive", ")", "\n", "avail_all", "=", "avail_actions", "\n", "# Return 0-1 encoded intersection if necessary", "\n", "", "", "if", "not", "self", ".", "observe_ids", ":", "\n", "            ", "grid", "=", "(", "grid", "!=", "0.0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# The intersection grid is constructed, now we have to generate the observations from it", "\n", "", "if", "self", ".", "intersection_global_view", ":", "\n", "# Return the intersection as a state", "\n", "            ", "if", "self", ".", "batch_mode", ":", "\n", "                ", "return", "grid", ".", "reshape", "(", "(", "self", ".", "batch_size", ",", "self", ".", "state_size", ")", ")", ",", "avail_all", "\n", "", "else", ":", "\n", "                ", "return", "grid", "[", "0", ",", ":", ",", ":", ",", ":", "]", ".", "reshape", "(", "self", ".", "state_size", ")", ",", "avail_all", "\n", "", "", "else", ":", "\n", "# Return the intersection as individual observations", "\n", "            ", "obs", "=", "np", ".", "zeros", "(", "(", "len", "(", "agent_ids", ")", ",", "self", ".", "batch_size", ",", "self", ".", "obs_size", ")", ",", "\n", "dtype", "=", "float_type", ")", "\n", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "                ", "for", "a", "in", "range", "(", "len", "(", "agent_ids", ")", ")", ":", "\n", "                    ", "obs", "[", "a", ",", "b", ",", ":", "]", "=", "self", ".", "_get_obs_from_grid", "(", "grid", ",", "a", ",", "b", ")", "\n", "", "", "if", "self", ".", "batch_mode", ":", "\n", "                ", "return", "obs", ",", "avail_all", "\n", "", "else", ":", "\n", "                ", "return", "obs", "[", ":", ",", "0", ",", ":", "]", ",", "avail_all", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.state_to_graph": [[770, 772], ["None"], "methods", ["None"], ["", "", "", "def", "state_to_graph", "(", "self", ",", "state_list", ")", ":", "\n", "        ", "raise", "Exception", "\n", "#     return build_stag_hunt_env_graph(state_list, self.args)", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.stag_hunt.stag_hunt.StagHunt.get_action_id": [[775, 778], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_action_id", "(", "cls", ",", "label", ")", ":", "\n", "        ", "return", "cls", ".", "action_labels", "[", "label", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.__init__": [[9, 23], ["numpy.min"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min"], ["\t", "def", "__init__", "(", "self", ",", "batch_size", "=", "None", ",", "n_agents", "=", "8", ",", "**", "kwargs", ")", ":", "\n", "# Params", "\n", "\t\t", "self", ".", "batch_mode", "=", "(", "batch_size", "!=", "None", ")", "\n", "self", ".", "n_agents", "=", "n_agents", "\n", "self", ".", "batch_size", "=", "batch_size", "if", "self", ".", "batch_mode", "else", "1", "\n", "self", ".", "mixfunc", "=", "lambda", "x", ":", "np", ".", "min", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "n_actions", "=", "10", "\n", "self", ".", "episode_limit", "=", "1", "\n", "self", ".", "density", "=", "0.2", "\n", "self", ".", "localperc", "=", "0.3", "\n", "\n", "self", ".", "state", "=", "None", "\n", "self", ".", "adjacency", "=", "None", "\n", "self", ".", "t", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.local_reward": [[25, 33], ["numpy.maximum", "numpy.abs"], "methods", ["None"], ["", "def", "local_reward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "# state: batch x n_agents x 1", "\n", "# action: batch x n_agents x 1", "\n", "\t\t", "gap", "=", "1", "/", "self", ".", "n_actions", "\n", "guess", "=", "action", "*", "gap", "+", "gap", "/", "2", "\n", "error", "=", "np", ".", "maximum", "(", "np", ".", "abs", "(", "guess", "-", "state", ")", "-", "gap", "/", "2", ",", "0", ")", "\n", "# error: batch x n_agents x 1", "\n", "return", "-", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.mix_states": [[35, 51], ["numpy.arange", "numpy.minimum", "numpy.maximum", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "mix_states", "(", "self", ",", "state", ",", "adjacency", ")", ":", "\n", "# state: batch x n_agents x 1", "\n", "# adjacency: batch x n_agents x n_agents", "\n", "\n", "\t\t", "diag_indices", "=", "np", ".", "arange", "(", "self", ".", "n_agents", ")", "\n", "adjacency", "[", ":", ",", "diag_indices", ",", "diag_indices", "]", "=", "0", "\n", "neighbour_states", "=", "adjacency", "[", ":", ",", ":", ",", ":", ",", "None", "]", "*", "state", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "degree", "=", "np", ".", "sum", "(", "adjacency", ",", "axis", "=", "-", "2", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "degree", "[", "degree", "==", "0", "]", "=", "1", "\n", "neighbour_states_sum", "=", "np", ".", "sum", "(", "neighbour_states", ",", "axis", "=", "-", "2", ")", "/", "degree", "\n", "mixed_state", "=", "self", ".", "localperc", "*", "state", "+", "(", "1", "-", "self", ".", "localperc", ")", "*", "neighbour_states_sum", "\n", "new_state", "=", "1.4", "/", "(", "self", ".", "localperc", "+", "0.4", ")", "*", "(", "mixed_state", "-", "0.5", ")", "+", "0.5", "\n", "new_state", "=", "np", ".", "minimum", "(", "new_state", ",", "1.0", ")", "\n", "new_state", "=", "np", ".", "maximum", "(", "new_state", ",", "0.0", ")", "\n", "# new_state: batch x n_agents x state_dim", "\n", "return", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.gen_adjacency": [[53, 61], ["numpy.sqrt", "numpy.arange", "A.astype", "numpy.random.rand", "A.transpose"], "methods", ["None"], ["", "def", "gen_adjacency", "(", "self", ")", ":", "\n", "\t\t", "orig_density", "=", "np", ".", "sqrt", "(", "self", ".", "density", ")", "\n", "A", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "batch_size", ",", "self", ".", "n_agents", ",", "self", ".", "n_agents", ")", "<", "orig_density", "\n", "A", "=", "A", "*", "A", ".", "transpose", "(", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "diag_indices", "=", "np", ".", "arange", "(", "self", ".", "n_agents", ")", "\n", "A", "[", ":", ",", "diag_indices", ",", "diag_indices", "]", "=", "1", "\n", "# A: batch x n_agents x n_agents", "\n", "return", "A", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.gen_state": [[63, 66], ["numpy.random.rand"], "methods", ["None"], ["", "def", "gen_state", "(", "self", ")", ":", "\n", "# state: batch x n_agents x 1", "\n", "\t\t", "return", "np", ".", "random", ".", "rand", "(", "self", ".", "batch_size", ",", "self", ".", "n_agents", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.rectify_actions": [[68, 77], ["isinstance", "actions.cpu.cpu.cpu", "numpy.array"], "methods", ["None"], ["", "def", "rectify_actions", "(", "self", ",", "actions", ")", ":", "\n", "# actions: batch x n_agents OR n_agents", "\n", "\t\t", "if", "not", "self", ".", "batch_mode", ":", "\n", "\t\t\t", "actions", "=", "actions", "[", "None", ",", ":", "]", "\n", "", "assert", "actions", ".", "shape", "[", "0", "]", "==", "self", ".", "batch_size", "and", "actions", ".", "shape", "[", "1", "]", "==", "self", ".", "n_agents", ",", "\"incorrect actions dimensions\"", "\n", "# actions: batch x n_agents x 1", "\n", "if", "isinstance", "(", "actions", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t", "actions", "=", "actions", ".", "cpu", "(", ")", "\n", "", "return", "np", ".", "array", "(", "actions", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.step": [[79, 90], ["estimate_game.EstimateGame.rectify_actions", "estimate_game.EstimateGame.mix_states", "estimate_game.EstimateGame.mixfunc", "numpy.array", "estimate_game.EstimateGame.local_reward", "qglobal[].item", "range"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.rectify_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.mix_states", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.local_reward"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "\t\t", "self", ".", "t", "+=", "1", "\n", "actions", "=", "self", ".", "rectify_actions", "(", "actions", ")", "\n", "mixed_state", "=", "self", ".", "mix_states", "(", "self", ".", "state", ",", "self", ".", "adjacency", ")", "\n", "qind", "=", "self", ".", "local_reward", "(", "mixed_state", ",", "actions", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "qglobal", "=", "self", ".", "mixfunc", "(", "qind", ")", "\n", "terminated", "=", "np", ".", "array", "(", "[", "(", "self", ".", "t", ">=", "self", ".", "episode_limit", ")", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", ")", "\n", "if", "not", "self", ".", "batch_mode", ":", "\n", "\t\t\t", "qglobal", "=", "qglobal", "[", "0", "]", ".", "item", "(", ")", "\n", "terminated", "=", "terminated", "[", "0", "]", "\n", "", "return", "qglobal", ",", "terminated", ",", "{", "\"local_rewards\"", ":", "qind", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.reset": [[92, 98], ["estimate_game.EstimateGame.gen_state", "estimate_game.EstimateGame.gen_adjacency", "numpy.ones", "estimate_game.EstimateGame.get_obs"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.gen_state", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.gen_adjacency", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "state", "=", "self", ".", "gen_state", "(", ")", "\n", "self", ".", "adjacency", "=", "self", ".", "gen_adjacency", "(", ")", "\n", "self", ".", "avail_actions", "=", "np", ".", "ones", "(", "(", "self", ".", "state", ".", "shape", "[", "0", "]", ",", "self", ".", "state", ".", "shape", "[", "1", "]", ",", "self", ".", "n_actions", ")", ")", "\n", "self", ".", "t", "=", "0", "\n", "return", "self", ".", "get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.get_obs_agent": [[100, 102], ["slice", "slice"], "methods", ["None"], ["", "def", "get_obs_agent", "(", "self", ",", "agent_id", "=", "slice", "(", "None", ")", ",", "batch", "=", "slice", "(", "None", ")", ")", ":", "\n", "\t\t", "return", "self", ".", "state", "[", "batch", ",", "agent_id", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.get_info": [[104, 114], ["None"], "methods", ["None"], ["", "def", "get_info", "(", "self", ",", "batch", "=", "0", ")", ":", "\n", "\n", "\t\t", "adj", "=", "self", ".", "adjacency", "[", "batch", "]", "\n", "# if len(adj.shape) == 2:", "\n", "# \tcoo = dense_to_sparse(torch.tensor(adj))[0]", "\n", "# \tadj_sparse = Data(edge_index=coo, num_nodes=adj.shape[-1])", "\n", "# elif len(adj.shape) == 3:", "\n", "# \tadj_sparse = [Data(edge_index=dense_to_sparse(torch.tensor(adj[i]))[0], num_nodes=adj.shape[-1]) for i in range(adj.shape[0])]", "\n", "return", "{", "\n", "\"adj\"", ":", "adj", ",", "\n", "# \"adj\": adj_sparse,", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.get_obs": [[118, 123], ["estimate_game.EstimateGame.get_obs_agent", "estimate_game.EstimateGame.get_obs_agent", "slice", "slice"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_agent", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_agent"], ["", "def", "get_obs", "(", "self", ",", "batch", "=", "0", ")", ":", "\n", "\t\t", "if", "not", "self", ".", "batch_mode", ":", "\n", "\t\t\t", "return", "self", ".", "get_obs_agent", "(", "agent_id", "=", "slice", "(", "None", ")", ",", "batch", "=", "batch", ")", "\n", "", "else", ":", "\n", "\t\t\t", "return", "self", ".", "get_obs_agent", "(", "agent_id", "=", "slice", "(", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.get_obs_size": [[125, 127], ["None"], "methods", ["None"], ["", "", "def", "get_obs_size", "(", "self", ")", ":", "\n", "\t\t", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.get_state": [[129, 131], ["slice", "estimate_game.EstimateGame.state[].reshape", "estimate_game.EstimateGame.get_state_size"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state_size"], ["", "def", "get_state", "(", "self", ",", "batch", "=", "slice", "(", "None", ")", ")", ":", "\n", "\t\t", "return", "self", ".", "state", "[", "batch", "]", ".", "reshape", "(", "-", "1", ",", "self", ".", "get_state_size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.get_state_size": [[133, 135], ["None"], "methods", ["None"], ["", "def", "get_state_size", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "n_agents", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.get_avail_agent_actions": [[137, 139], ["slice", "slice"], "methods", ["None"], ["", "def", "get_avail_agent_actions", "(", "self", ",", "agent_id", "=", "slice", "(", "None", ")", ",", "batch", "=", "slice", "(", "None", ")", ")", ":", "\n", "\t\t", "return", "self", ".", "avail_actions", "[", "batch", ",", "agent_id", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.get_avail_actions": [[141, 146], ["estimate_game.EstimateGame.get_avail_agent_actions", "estimate_game.EstimateGame.get_avail_agent_actions", "slice", "slice"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions"], ["", "def", "get_avail_actions", "(", "self", ",", "batch", "=", "0", ")", ":", "\n", "\t\t", "if", "not", "self", ".", "batch_mode", ":", "\n", "\t\t\t", "return", "self", ".", "get_avail_agent_actions", "(", "agent_id", "=", "slice", "(", "None", ")", ",", "batch", "=", "batch", ")", "\n", "", "else", ":", "\n", "\t\t\t", "return", "self", ".", "get_avail_agent_actions", "(", "agent_id", "=", "slice", "(", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.get_total_actions": [[148, 150], ["None"], "methods", ["None"], ["", "", "def", "get_total_actions", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "n_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.get_stats": [[152, 154], ["None"], "methods", ["None"], ["", "def", "get_stats", "(", "self", ")", ":", "\n", "\t\t", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.close": [[156, 158], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.render": [[159, 161], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.seed": [[162, 164], ["None"], "methods", ["None"], ["", "def", "seed", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.estimate_game.estimate_game.EstimateGame.save_replay": [[165, 167], ["None"], "methods", ["None"], ["", "def", "save_replay", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.OneStepMatrixGame.__init__": [[27, 35], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# Define the agents", "\n", "        ", "self", ".", "n_agents", "=", "2", "\n", "\n", "# Define the internal state", "\n", "self", ".", "steps", "=", "0", "\n", "self", ".", "n_actions", "=", "len", "(", "payoff_values", "[", "0", "]", ")", "\n", "self", ".", "episode_limit", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.OneStepMatrixGame.reset": [[37, 41], ["one_step_matrix_game.OneStepMatrixGame.get_obs", "one_step_matrix_game.OneStepMatrixGame.get_state"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns initial observations and states\"\"\"", "\n", "self", ".", "steps", "=", "0", "\n", "return", "self", ".", "get_obs", "(", ")", ",", "self", ".", "get_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.OneStepMatrixGame.step": [[42, 51], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "\"\"\" Returns reward, terminated, info \"\"\"", "\n", "reward", "=", "payoff_values", "[", "actions", "[", "0", "]", "]", "[", "actions", "[", "1", "]", "]", "\n", "\n", "self", ".", "steps", "=", "1", "\n", "terminated", "=", "True", "\n", "\n", "info", "=", "{", "}", "\n", "return", "reward", ",", "terminated", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.OneStepMatrixGame.get_obs": [[52, 57], ["numpy.zeros", "numpy.copy", "range"], "methods", ["None"], ["", "def", "get_obs", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns all agent observations in a list \"\"\"", "\n", "one_hot_step", "=", "np", ".", "zeros", "(", "2", ")", "\n", "one_hot_step", "[", "self", ".", "steps", "]", "=", "1", "\n", "return", "[", "np", ".", "copy", "(", "one_hot_step", ")", "for", "_", "in", "range", "(", "self", ".", "n_agents", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.OneStepMatrixGame.get_obs_agent": [[58, 61], ["one_step_matrix_game.OneStepMatrixGame.get_obs"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs"], ["", "def", "get_obs_agent", "(", "self", ",", "agent_id", ")", ":", "\n", "        ", "\"\"\" Returns observation for agent_id \"\"\"", "\n", "return", "self", ".", "get_obs", "(", ")", "[", "agent_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.OneStepMatrixGame.get_obs_size": [[62, 65], ["len", "one_step_matrix_game.OneStepMatrixGame.get_obs_agent"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_agent"], ["", "def", "get_obs_size", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns the shape of the observation \"\"\"", "\n", "return", "len", "(", "self", ".", "get_obs_agent", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.OneStepMatrixGame.get_state": [[66, 68], ["one_step_matrix_game.OneStepMatrixGame.get_obs_agent"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_agent"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_obs_agent", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.OneStepMatrixGame.get_state_size": [[69, 72], ["one_step_matrix_game.OneStepMatrixGame.get_obs_size"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_size"], ["", "def", "get_state_size", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns the shape of the state\"\"\"", "\n", "return", "self", ".", "get_obs_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.OneStepMatrixGame.get_avail_actions": [[73, 79], ["range", "one_step_matrix_game.OneStepMatrixGame.get_avail_agent_actions", "avail_actions.append"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions"], ["", "def", "get_avail_actions", "(", "self", ")", ":", "\n", "        ", "avail_actions", "=", "[", "]", "\n", "for", "agent_id", "in", "range", "(", "self", ".", "n_agents", ")", ":", "\n", "            ", "avail_agent", "=", "self", ".", "get_avail_agent_actions", "(", "agent_id", ")", "\n", "avail_actions", ".", "append", "(", "avail_agent", ")", "\n", "", "return", "avail_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.OneStepMatrixGame.get_avail_agent_actions": [[80, 83], ["numpy.ones"], "methods", ["None"], ["", "def", "get_avail_agent_actions", "(", "self", ",", "agent_id", ")", ":", "\n", "        ", "\"\"\" Returns the available actions for agent_id \"\"\"", "\n", "return", "np", ".", "ones", "(", "self", ".", "n_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.OneStepMatrixGame.get_total_actions": [[84, 87], ["None"], "methods", ["None"], ["", "def", "get_total_actions", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns the total number of actions an agent could ever take \"\"\"", "\n", "return", "self", ".", "n_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.OneStepMatrixGame.get_stats": [[88, 90], ["None"], "methods", ["None"], ["", "def", "get_stats", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.OneStepMatrixGame.render": [[91, 93], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.OneStepMatrixGame.close": [[94, 96], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.OneStepMatrixGame.seed": [[97, 99], ["None"], "methods", ["None"], ["", "def", "seed", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.matrix_game.one_step_matrix_game.print_matrix_status": [[102, 124], ["len", "torch.zeros", "torch.set_printoptions", "print", "print", "torch.set_printoptions", "torch.no_grad", "range", "len", "mac_out.mean.mean", "mac_out.mean.mean().detach().cpu", "range", "mac_out.mean.size", "torch.LongTensor().to().repeat", "torch.gather().squeeze", "mixer().mean", "mixer().mean.item", "mac_out.mean.mean().detach", "len", "actions.unsqueeze().repeat.unsqueeze().repeat", "torch.LongTensor().to", "mac_out.mean.size", "mac_out.mean.size", "torch.gather", "mixer", "mac_out.mean.mean", "actions.unsqueeze().repeat.unsqueeze", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to"], ["", "", "def", "print_matrix_status", "(", "batch", ",", "mixer", ",", "mac_out", ")", ":", "\n", "    ", "batch_size", "=", "batch", ".", "batch_size", "\n", "matrix_size", "=", "len", "(", "payoff_values", ")", "\n", "results", "=", "th", ".", "zeros", "(", "(", "matrix_size", ",", "matrix_size", ")", ")", "\n", "\n", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "results", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "results", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "actions", "=", "th", ".", "LongTensor", "(", "[", "[", "[", "[", "i", "]", ",", "[", "j", "]", "]", "]", "]", ")", ".", "to", "(", "device", "=", "mac_out", ".", "device", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "if", "len", "(", "mac_out", ".", "size", "(", ")", ")", "==", "5", ":", "# n qvals", "\n", "                    ", "actions", "=", "actions", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "1", ",", "mac_out", ".", "size", "(", "-", "1", ")", ")", "# b, t, a, actions, n", "\n", "", "qvals", "=", "th", ".", "gather", "(", "mac_out", "[", ":", "batch_size", ",", "0", ":", "1", "]", ",", "dim", "=", "3", ",", "index", "=", "actions", ")", ".", "squeeze", "(", "3", ")", "\n", "\n", "global_q", "=", "mixer", "(", "qvals", ",", "batch", "[", "\"state\"", "]", "[", ":", "batch_size", ",", "0", ":", "1", "]", ")", ".", "mean", "(", ")", "\n", "results", "[", "i", "]", "[", "j", "]", "=", "global_q", ".", "item", "(", ")", "\n", "\n", "", "", "", "th", ".", "set_printoptions", "(", "1", ",", "sci_mode", "=", "False", ")", "\n", "print", "(", "results", ")", "\n", "if", "len", "(", "mac_out", ".", "size", "(", ")", ")", "==", "5", ":", "\n", "        ", "mac_out", "=", "mac_out", ".", "mean", "(", "-", "1", ")", "\n", "", "print", "(", "mac_out", ".", "mean", "(", "dim", "=", "(", "0", ",", "1", ")", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "th", ".", "set_printoptions", "(", "4", ")", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.__init__": [[10, 44], ["set_partitioning.SetPartitioning.set_params", "torch.distributions.gamma.Gamma", "numpy.ones", "numpy.ones", "set_partitioning.SetPartitioning.reset", "numpy.mean", "numpy.sum", "set_partitioning.SetPartitioning.coalition_func", "set_partitioning.SetPartitioning.mix_func", "torch.ones", "torch.ones", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.set_params", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.reset", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["\t", "def", "__init__", "(", "self", ",", "batch_size", "=", "None", ",", "n_agents", "=", "16", ",", "n_actions", "=", "4", ",", "**", "kwargs", ")", ":", "\n", "\n", "# User Params", "\n", "\t\t", "self", ".", "n_agents", "=", "n_agents", "\n", "self", ".", "n_actions", "=", "n_actions", "\n", "self", ".", "coalition_func", "=", "lambda", "x", ":", "np", ".", "mean", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "mix_func", "=", "lambda", "x", ":", "np", ".", "sum", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "reward_lambda", "=", "1.", "\n", "self", ".", "empty_reward", "=", "-", "10.", "\n", "self", ".", "episode_limit", "=", "1", "\n", "self", ".", "reset_characteristic", "=", "True", "\n", "self", ".", "reset_deterministic", "=", "True", "\n", "\n", "self", ".", "batch_mode", "=", "(", "batch_size", "!=", "None", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "if", "self", ".", "batch_mode", "else", "1", "\n", "\n", "self", ".", "set_params", "(", "kwargs", ")", "\n", "self", ".", "coalition_func_full", "=", "lambda", "x", ":", "self", ".", "coalition_func", "(", "x", ")", "if", "len", "(", "x", ")", ">", "0", "else", "self", ".", "empty_reward", "\n", "self", ".", "mix_func_full", "=", "lambda", "x", ":", "self", ".", "mix_func", "(", "x", ")", "if", "len", "(", "x", ")", ">", "0", "else", "self", ".", "empty_reward", "\n", "\n", "# Internal Params", "\n", "\n", "self", ".", "reset_counter", "=", "0", "\n", "\n", "self", ".", "reward_mat_dist", "=", "Gamma", "(", "2.0", "*", "torch", ".", "ones", "(", "(", "self", ".", "batch_size", ",", "self", ".", "n_agents", ",", "self", ".", "n_actions", ")", ")", ",", "\n", "1", "/", "self", ".", "reward_lambda", "*", "torch", ".", "ones", "(", "(", "self", ".", "batch_size", ",", "self", ".", "n_agents", ",", "self", ".", "n_actions", ")", ")", ")", "\n", "\n", "\n", "self", ".", "reward_mat", "=", "None", "\n", "self", ".", "obs", "=", "None", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "adj", "=", "np", ".", "ones", "(", "(", "self", ".", "batch_size", ",", "self", ".", "n_agents", ",", "self", ".", "n_agents", ")", ")", "\n", "self", ".", "avail_actions", "=", "np", ".", "ones", "(", "(", "self", ".", "batch_size", ",", "self", ".", "n_agents", ",", "self", ".", "n_actions", ")", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.set_params": [[46, 49], ["params.items", "setattr"], "methods", ["None"], ["", "def", "set_params", "(", "self", ",", "params", ")", ":", "\n", "\t\t", "for", "name", ",", "value", "in", "params", ".", "items", "(", ")", ":", "\n", "\t\t\t", "setattr", "(", "self", ",", "name", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.rectify_action": [[51, 58], ["numpy.array"], "methods", ["None"], ["", "", "def", "rectify_action", "(", "self", ",", "action", ")", ":", "\n", "# action: batch x n_agents OR n_agents", "\n", "\t\t", "if", "not", "self", ".", "batch_mode", ":", "\n", "\t\t\t", "action", "=", "action", "[", "None", ",", ":", "]", "\n", "", "assert", "action", ".", "shape", "[", "0", "]", "==", "self", ".", "batch_size", "and", "action", ".", "shape", "[", "1", "]", "==", "self", ".", "n_agents", ",", "\"incorrect action dimensions\"", "\n", "# action: batch x n_agents x 1", "\n", "return", "np", ".", "array", "(", "action", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.step": [[60, 74], ["set_partitioning.SetPartitioning.rectify_action", "set_partitioning.SetPartitioning.get_reward", "set_partitioning.SetPartitioning.local_rewards", "numpy.array", "range"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.rectify_action", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.get_reward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.local_rewards"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "# action: batch x n_agents x 1", "\n", "\t\t", "self", ".", "t", "+=", "1", "\n", "action", "=", "self", ".", "rectify_action", "(", "action", ")", "\n", "global_reward", "=", "self", ".", "get_reward", "(", "action", ")", "\n", "local_adv", ",", "all_rewards", "=", "self", ".", "local_rewards", "(", "action", ")", "\n", "terminated", "=", "np", ".", "array", "(", "[", "(", "self", ".", "t", ">=", "self", ".", "episode_limit", ")", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", ")", "\n", "if", "not", "self", ".", "batch_mode", ":", "\n", "\t\t\t", "global_reward", "=", "global_reward", "[", "0", "]", "\n", "terminated", "=", "terminated", "[", "0", "]", "\n", "# global_reward: (batch)", "\n", "# terminated: (batch)", "\n", "# local_adv: (batch x n_agents)", "\n", "", "return", "global_reward", ",", "terminated", ",", "{", "\"local_rewards\"", ":", "local_adv", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.get_reward": [[76, 83], ["numpy.array", "set_partitioning.SetPartitioning.coalition_func_full", "set_partitioning.SetPartitioning.coalition_func_full", "range", "range", "numpy.take_along_axis"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "action", ")", ":", "\n", "\t\t", "loc_rew", "=", "np", ".", "array", "(", "[", "[", "self", ".", "coalition_func_full", "(", "\n", "np", ".", "take_along_axis", "(", "self", ".", "reward_mat", "[", "b", ",", ":", ",", ":", "]", ",", "action", "[", "b", ",", ":", ",", ":", "]", ",", "axis", "=", "-", "1", ")", "[", "action", "[", "b", ",", ":", ",", ":", "]", "==", "a", "]", ")", "\n", "for", "a", "in", "range", "(", "self", ".", "n_actions", ")", "]", "for", "b", "in", "range", "(", "self", ".", "batch_size", ")", "]", ")", "\n", "rew", "=", "self", ".", "coalition_func_full", "(", "loc_rew", ")", "\n", "# rew: (batch)", "\n", "return", "rew", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.local_rewards": [[84, 95], ["set_partitioning.SetPartitioning.get_reward", "numpy.zeros", "numpy.zeros", "range", "numpy.max", "numpy.array", "set_partitioning.SetPartitioning.get_reward", "set_partitioning.SetPartitioning.local_rewards.set_element"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.get_reward", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.get_reward"], ["", "def", "local_rewards", "(", "self", ",", "action", ")", ":", "\n", "\t\t", "def", "set_element", "(", "arr", ",", "idx", ",", "val", ")", ":", "\n", "\t\t\t", "arr", "[", ":", ",", "idx", "]", "=", "val", "\n", "return", "arr", "\n", "", "orig_reward", "=", "self", ".", "get_reward", "(", "action", ")", "\n", "all_rewards", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "n_agents", ",", "self", ".", "n_actions", ")", ")", "\n", "max_other_rewards", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "n_agents", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_agents", ")", ":", "\n", "\t\t\t", "all_rewards", "[", ":", ",", "i", ",", ":", "]", "=", "np", ".", "array", "(", "[", "self", ".", "get_reward", "(", "set_element", "(", "action", ",", "i", ",", "j", ")", ")", "for", "j", "in", "range", "(", "self", ".", "n_actions", ")", "]", ")", ".", "T", "\n", "max_other_rewards", "[", ":", ",", "i", "]", "=", "np", ".", "max", "(", "all_rewards", "[", ":", ",", "i", ",", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "return", "orig_reward", "[", ":", ",", "None", "]", "-", "max_other_rewards", ",", "all_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.reset": [[96, 108], ["set_partitioning.SetPartitioning.get_obs", "torch.get_rng_state", "torch.random.manual_seed", "set_partitioning.SetPartitioning.reward_mat_dist.sample().numpy", "torch.set_rng_state", "set_partitioning.SetPartitioning.reward_mat_dist.sample().numpy", "set_partitioning.SetPartitioning.reward_mat_dist.sample", "set_partitioning.SetPartitioning.reward_mat_dist.sample"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.sample", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.PrioritizedReplayBuffer.sample"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "reset_characteristic", "or", "self", ".", "reward_mat", "is", "None", ":", "\n", "\t\t\t", "if", "self", ".", "reset_characteristic", ":", "\n", "\t\t\t\t", "rng_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "self", ".", "reset_counter", ")", "\n", "self", ".", "reward_mat", "=", "self", ".", "reward_mat_dist", ".", "sample", "(", ")", ".", "numpy", "(", ")", "\n", "torch", ".", "set_rng_state", "(", "rng_state", ")", "\n", "self", ".", "reset_counter", "+=", "1", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "reward_mat", "=", "self", ".", "reward_mat_dist", ".", "sample", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "self", ".", "t", "=", "0", "\n", "return", "self", ".", "get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.get_obs": [[109, 115], ["set_partitioning.SetPartitioning.get_obs_agent", "set_partitioning.SetPartitioning.get_obs_agent", "slice", "slice"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_agent", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_agent"], ["", "def", "get_obs", "(", "self", ",", "batch", "=", "0", ")", ":", "\n", "\t\t", "if", "not", "self", ".", "batch_mode", ":", "\n", "\t\t\t", "return", "self", ".", "get_obs_agent", "(", "agent_id", "=", "slice", "(", "None", ")", ",", "batch", "=", "batch", ")", "\n", "", "else", ":", "\n", "# obs: (batch x n_agents x obs_size)", "\n", "\t\t\t", "return", "self", ".", "get_obs_agent", "(", "agent_id", "=", "slice", "(", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.get_obs_agent": [[116, 118], ["slice", "slice"], "methods", ["None"], ["", "", "def", "get_obs_agent", "(", "self", ",", "agent_id", "=", "slice", "(", "None", ")", ",", "batch", "=", "slice", "(", "None", ")", ")", ":", "\n", "\t\t", "return", "self", ".", "reward_mat", "[", "batch", ",", "agent_id", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.get_obs_size": [[119, 121], ["None"], "methods", ["None"], ["", "def", "get_obs_size", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "n_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.get_info": [[122, 125], ["slice"], "methods", ["None"], ["", "def", "get_info", "(", "self", ",", "batch", "=", "slice", "(", "None", ")", ")", ":", "\n", "# adj: (batch x n_agents x n_agents)", "\n", "\t\t", "return", "{", "\"adj\"", ":", "self", ".", "adj", "[", "batch", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.get_state": [[126, 128], ["slice", "set_partitioning.SetPartitioning.reward_mat[].reshape", "set_partitioning.SetPartitioning.get_state_size"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state_size"], ["", "def", "get_state", "(", "self", ",", "batch", "=", "slice", "(", "None", ")", ")", ":", "\n", "\t\t", "return", "self", ".", "reward_mat", "[", "batch", "]", ".", "reshape", "(", "-", "1", ",", "self", ".", "get_state_size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.get_state_size": [[129, 131], ["None"], "methods", ["None"], ["", "def", "get_state_size", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "n_agents", "*", "self", ".", "n_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.get_avail_agent_actions": [[132, 134], ["slice", "slice"], "methods", ["None"], ["", "def", "get_avail_agent_actions", "(", "self", ",", "agent_id", "=", "slice", "(", "None", ")", ",", "batch", "=", "slice", "(", "None", ")", ")", ":", "\n", "\t\t", "return", "self", ".", "avail_actions", "[", "batch", ",", "agent_id", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.get_avail_actions": [[135, 141], ["set_partitioning.SetPartitioning.get_avail_agent_actions", "set_partitioning.SetPartitioning.get_avail_agent_actions", "slice", "slice"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions"], ["", "def", "get_avail_actions", "(", "self", ",", "batch", "=", "0", ")", ":", "\n", "\t\t", "if", "not", "self", ".", "batch_mode", ":", "\n", "\t\t\t", "return", "self", ".", "get_avail_agent_actions", "(", "agent_id", "=", "slice", "(", "None", ")", ",", "batch", "=", "batch", ")", "\n", "", "else", ":", "\n", "# avail_actions: (batch x n_agents x n_actions)", "\n", "\t\t\t", "return", "self", ".", "get_avail_agent_actions", "(", "agent_id", "=", "slice", "(", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.get_total_actions": [[142, 144], ["None"], "methods", ["None"], ["", "", "def", "get_total_actions", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "n_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.close": [[145, 147], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.render": [[148, 150], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.seed": [[151, 153], ["None"], "methods", ["None"], ["", "def", "seed", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.set_partitioning.set_partitioning.SetPartitioning.save_replay": [[154, 156], ["None"], "methods", ["None"], ["", "def", "save_replay", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.__init__": [[64, 294], ["pymarl.envs.starcraft.smac_maps.get_map_params", "numpy.zeros", "numpy.zeros", "numpy.zeros", "atexit.register", "StarCraft2Env.StarCraft2Env.close"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.smac_maps.get_map_params", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.close"], ["def", "__init__", "(", "\n", "self", ",", "\n", "map_name", "=", "\"8m\"", ",", "\n", "step_mul", "=", "8", ",", "\n", "move_amount", "=", "2", ",", "\n", "difficulty", "=", "\"7\"", ",", "\n", "game_version", "=", "None", ",", "\n", "seed", "=", "None", ",", "\n", "continuing_episode", "=", "False", ",", "\n", "obs_all_health", "=", "True", ",", "\n", "obs_own_health", "=", "True", ",", "\n", "obs_last_action", "=", "False", ",", "\n", "obs_pathing_grid", "=", "False", ",", "\n", "obs_terrain_height", "=", "False", ",", "\n", "obs_instead_of_state", "=", "False", ",", "\n", "obs_timestep_number", "=", "False", ",", "\n", "sight_range", "=", "9", ",", "\n", "comm_range", "=", "9", ",", "\n", "state_last_action", "=", "True", ",", "\n", "state_timestep_number", "=", "False", ",", "\n", "reward_sparse", "=", "False", ",", "\n", "reward_only_positive", "=", "True", ",", "\n", "reward_death_value", "=", "10", ",", "\n", "reward_win", "=", "200", ",", "\n", "reward_defeat", "=", "0", ",", "\n", "reward_negative_scale", "=", "0.5", ",", "\n", "reward_scale", "=", "True", ",", "\n", "reward_scale_rate", "=", "20", ",", "\n", "replay_dir", "=", "\"\"", ",", "\n", "replay_prefix", "=", "\"\"", ",", "\n", "window_size_x", "=", "1920", ",", "\n", "window_size_y", "=", "1200", ",", "\n", "heuristic_ai", "=", "False", ",", "\n", "heuristic_rest", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Create a StarCraftC2Env environment.\n\n        Parameters\n        ----------\n        map_name : str, optional\n            The name of the SC2 map to play (default is \"8m\"). The full list\n            can be found by running bin/map_list.\n        step_mul : int, optional\n            How many game steps per agent step (default is 8). None\n            indicates to use the default map step_mul.\n        move_amount : float, optional\n            How far away units are ordered to move per step (default is 2).\n        difficulty : str, optional\n            The difficulty of built-in computer AI bot (default is \"7\").\n        game_version : str, optional\n            StarCraft II game version (default is None). None indicates the\n            latest version.\n        seed : int, optional\n            Random seed used during game initialisation. This allows to\n        continuing_episode : bool, optional\n            Whether to consider episodes continuing or finished after time\n            limit is reached (default is False).\n        obs_all_health : bool, optional\n            Agents receive the health of all units (in the sight range) as part\n            of observations (default is True).\n        obs_own_health : bool, optional\n            Agents receive their own health as a part of observations (default\n            is False). This flag is ignored when obs_all_health == True.\n        obs_last_action : bool, optional\n            Agents receive the last actions of all units (in the sight range)\n            as part of observations (default is False).\n        obs_pathing_grid : bool, optional\n            Whether observations include pathing values surrounding the agent\n            (default is False).\n        obs_terrain_height : bool, optional\n            Whether observations include terrain height values surrounding the\n            agent (default is False).\n        obs_instead_of_state : bool, optional\n            Use combination of all agents' observations as the global state\n            (default is False).\n        obs_timestep_number : bool, optional\n            Whether observations include the current timestep of the episode\n            (default is False).\n        state_last_action : bool, optional\n            Include the last actions of all agents as part of the global state\n            (default is True).\n        state_timestep_number : bool, optional\n            Whether the state include the current timestep of the episode\n            (default is False).\n        reward_sparse : bool, optional\n            Receive 1/-1 reward for winning/loosing an episode (default is\n            False). Whe rest of reward parameters are ignored if True.\n        reward_only_positive : bool, optional\n            Reward is always positive (default is True).\n        reward_death_value : float, optional\n            The amount of reward received for killing an enemy unit (default\n            is 10). This is also the negative penalty for having an allied unit\n            killed if reward_only_positive == False.\n        reward_win : float, optional\n            The reward for winning in an episode (default is 200).\n        reward_defeat : float, optional\n            The reward for loosing in an episode (default is 0). This value\n            should be nonpositive.\n        reward_negative_scale : float, optional\n            Scaling factor for negative rewards (default is 0.5). This\n            parameter is ignored when reward_only_positive == True.\n        reward_scale : bool, optional\n            Whether or not to scale the reward (default is True).\n        reward_scale_rate : float, optional\n            Reward scale rate (default is 20). When reward_scale == True, the\n            reward received by the agents is divided by (max_reward /\n            reward_scale_rate), where max_reward is the maximum possible\n            reward per episode without considering the shield regeneration\n            of Protoss units.\n        replay_dir : str, optional\n            The directory to save replays (default is None). If None, the\n            replay will be saved in Replays directory where StarCraft II is\n            installed.\n        replay_prefix : str, optional\n            The prefix of the replay to be saved (default is None). If None,\n            the name of the map will be used.\n        window_size_x : int, optional\n            The length of StarCraft II window size (default is 1920).\n        window_size_y: int, optional\n            The height of StarCraft II window size (default is 1200).\n        heuristic_ai: bool, optional\n            Whether or not to use a non-learning heuristic AI (default False).\n        heuristic_rest: bool, optional\n            At any moment, restrict the actions of the heuristic AI to be\n            chosen from actions available to RL agents (default is False).\n            Ignored if heuristic_ai == False.\n        debug: bool, optional\n            Log messages about observations, state, actions and rewards for\n            debugging purposes (default is False).\n        \"\"\"", "\n", "# Map arguments", "\n", "self", ".", "map_name", "=", "map_name", "\n", "map_params", "=", "get_map_params", "(", "self", ".", "map_name", ")", "\n", "self", ".", "n_agents", "=", "map_params", "[", "\"n_agents\"", "]", "\n", "self", ".", "n_enemies", "=", "map_params", "[", "\"n_enemies\"", "]", "\n", "self", ".", "episode_limit", "=", "map_params", "[", "\"limit\"", "]", "\n", "self", ".", "_move_amount", "=", "move_amount", "\n", "self", ".", "_step_mul", "=", "step_mul", "\n", "self", ".", "difficulty", "=", "difficulty", "\n", "\n", "# Observations and state", "\n", "self", ".", "obs_own_health", "=", "obs_own_health", "\n", "self", ".", "obs_all_health", "=", "obs_all_health", "\n", "self", ".", "obs_instead_of_state", "=", "obs_instead_of_state", "\n", "self", ".", "obs_last_action", "=", "obs_last_action", "\n", "self", ".", "obs_pathing_grid", "=", "obs_pathing_grid", "\n", "self", ".", "obs_terrain_height", "=", "obs_terrain_height", "\n", "self", ".", "obs_timestep_number", "=", "obs_timestep_number", "\n", "self", ".", "state_last_action", "=", "state_last_action", "\n", "self", ".", "state_timestep_number", "=", "state_timestep_number", "\n", "if", "self", ".", "obs_all_health", ":", "\n", "            ", "self", ".", "obs_own_health", "=", "True", "\n", "", "self", ".", "n_obs_pathing", "=", "8", "\n", "self", ".", "n_obs_height", "=", "9", "\n", "\n", "self", ".", "sight_range", "=", "sight_range", "\n", "self", ".", "comm_range", "=", "comm_range", "\n", "\n", "# Rewards args", "\n", "self", ".", "reward_sparse", "=", "reward_sparse", "\n", "self", ".", "reward_only_positive", "=", "reward_only_positive", "\n", "self", ".", "reward_negative_scale", "=", "reward_negative_scale", "\n", "self", ".", "reward_death_value", "=", "reward_death_value", "\n", "self", ".", "reward_win", "=", "reward_win", "\n", "self", ".", "reward_defeat", "=", "reward_defeat", "\n", "self", ".", "reward_scale", "=", "reward_scale", "\n", "self", ".", "reward_scale_rate", "=", "reward_scale_rate", "\n", "\n", "# Other", "\n", "self", ".", "game_version", "=", "game_version", "\n", "self", ".", "continuing_episode", "=", "continuing_episode", "\n", "self", ".", "_seed", "=", "seed", "\n", "self", ".", "heuristic_ai", "=", "heuristic_ai", "\n", "self", ".", "heuristic_rest", "=", "heuristic_rest", "\n", "self", ".", "debug", "=", "debug", "\n", "self", ".", "window_size", "=", "(", "window_size_x", ",", "window_size_y", ")", "\n", "self", ".", "replay_dir", "=", "replay_dir", "\n", "self", ".", "replay_prefix", "=", "replay_prefix", "\n", "\n", "# Actions", "\n", "self", ".", "n_actions_no_attack", "=", "6", "\n", "self", ".", "n_actions_move", "=", "4", "\n", "self", ".", "n_actions", "=", "self", ".", "n_actions_no_attack", "+", "self", ".", "n_enemies", "\n", "\n", "# Map info", "\n", "self", ".", "_agent_race", "=", "map_params", "[", "\"a_race\"", "]", "\n", "self", ".", "_bot_race", "=", "map_params", "[", "\"b_race\"", "]", "\n", "self", ".", "shield_bits_ally", "=", "1", "if", "self", ".", "_agent_race", "==", "\"P\"", "else", "0", "\n", "self", ".", "shield_bits_enemy", "=", "1", "if", "self", ".", "_bot_race", "==", "\"P\"", "else", "0", "\n", "self", ".", "unit_type_bits", "=", "map_params", "[", "\"unit_type_bits\"", "]", "\n", "self", ".", "map_type", "=", "map_params", "[", "\"map_type\"", "]", "\n", "\n", "self", ".", "max_reward", "=", "(", "\n", "self", ".", "n_enemies", "*", "self", ".", "reward_death_value", "+", "self", ".", "reward_win", "\n", ")", "\n", "\n", "self", ".", "agents", "=", "{", "}", "\n", "self", ".", "enemies", "=", "{", "}", "\n", "self", ".", "_episode_count", "=", "0", "\n", "self", ".", "_episode_steps", "=", "0", "\n", "self", ".", "_total_steps", "=", "0", "\n", "self", ".", "_obs", "=", "None", "\n", "self", ".", "battles_won", "=", "0", "\n", "self", ".", "battles_game", "=", "0", "\n", "self", ".", "timeouts", "=", "0", "\n", "self", ".", "force_restarts", "=", "0", "\n", "self", ".", "last_stats", "=", "None", "\n", "self", ".", "death_tracker_ally", "=", "np", ".", "zeros", "(", "self", ".", "n_agents", ")", "\n", "self", ".", "death_tracker_enemy", "=", "np", ".", "zeros", "(", "self", ".", "n_enemies", ")", "\n", "self", ".", "previous_ally_units", "=", "None", "\n", "self", ".", "previous_enemy_units", "=", "None", "\n", "self", ".", "last_action", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_agents", ",", "self", ".", "n_actions", ")", ")", "\n", "self", ".", "_min_unit_type", "=", "0", "\n", "self", ".", "marine_id", "=", "self", ".", "marauder_id", "=", "self", ".", "medivac_id", "=", "0", "\n", "self", ".", "hydralisk_id", "=", "self", ".", "zergling_id", "=", "self", ".", "baneling_id", "=", "0", "\n", "self", ".", "stalker_id", "=", "self", ".", "colossus_id", "=", "self", ".", "zealot_id", "=", "0", "\n", "self", ".", "max_distance_x", "=", "0", "\n", "self", ".", "max_distance_y", "=", "0", "\n", "self", ".", "map_x", "=", "0", "\n", "self", ".", "map_y", "=", "0", "\n", "self", ".", "terrain_height", "=", "None", "\n", "self", ".", "pathing_grid", "=", "None", "\n", "self", ".", "_run_config", "=", "None", "\n", "self", ".", "_sc2_proc", "=", "None", "\n", "self", ".", "_controller", "=", "None", "\n", "\n", "# Try to avoid leaking SC2 processes on shutdown", "\n", "atexit", ".", "register", "(", "lambda", ":", "self", ".", "close", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env._launch": [[295, 344], ["pysc2.run_configs.get", "pysc2.maps.get", "s2clientprotocol.sc2api_pb2.InterfaceOptions", "StarCraft2Env.StarCraft2Env._run_config.start", "s2clientprotocol.sc2api_pb2.RequestCreateGame", "s2clientprotocol.sc2api_pb2.RequestCreateGame.player_setup.add", "s2clientprotocol.sc2api_pb2.RequestCreateGame.player_setup.add", "StarCraft2Env.StarCraft2Env._controller.create_game", "s2clientprotocol.sc2api_pb2.RequestJoinGame", "StarCraft2Env.StarCraft2Env._controller.join_game", "StarCraft2Env.StarCraft2Env._controller.game_info", "numpy.array().reshape", "numpy.transpose", "numpy.invert", "numpy.flip", "s2clientprotocol.sc2api_pb2.LocalMap", "int", "numpy.array", "numpy.flip", "numpy.transpose", "numpy.array", "numpy.transpose", "numpy.array().reshape", "StarCraft2Env.StarCraft2Env._run_config.map_data", "list", "numpy.array().reshape", "numpy.array", "range", "numpy.array", "list", "list"], "methods", ["None"], ["", "def", "_launch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Launch the StarCraft II game.\"\"\"", "\n", "self", ".", "_run_config", "=", "run_configs", ".", "get", "(", "version", "=", "self", ".", "game_version", ")", "\n", "_map", "=", "maps", ".", "get", "(", "self", ".", "map_name", ")", "\n", "\n", "# Setting up the interface", "\n", "interface_options", "=", "sc_pb", ".", "InterfaceOptions", "(", "raw", "=", "True", ",", "score", "=", "False", ")", "\n", "self", ".", "_sc2_proc", "=", "self", ".", "_run_config", ".", "start", "(", "window_size", "=", "self", ".", "window_size", ",", "want_rgb", "=", "False", ")", "\n", "self", ".", "_controller", "=", "self", ".", "_sc2_proc", ".", "controller", "\n", "\n", "# Request to create the game", "\n", "create", "=", "sc_pb", ".", "RequestCreateGame", "(", "\n", "local_map", "=", "sc_pb", ".", "LocalMap", "(", "\n", "map_path", "=", "_map", ".", "path", ",", "\n", "map_data", "=", "self", ".", "_run_config", ".", "map_data", "(", "_map", ".", "path", ")", ")", ",", "\n", "realtime", "=", "False", ",", "\n", "random_seed", "=", "self", ".", "_seed", ")", "\n", "create", ".", "player_setup", ".", "add", "(", "type", "=", "sc_pb", ".", "Participant", ")", "\n", "create", ".", "player_setup", ".", "add", "(", "type", "=", "sc_pb", ".", "Computer", ",", "race", "=", "races", "[", "self", ".", "_bot_race", "]", ",", "\n", "difficulty", "=", "difficulties", "[", "self", ".", "difficulty", "]", ")", "\n", "self", ".", "_controller", ".", "create_game", "(", "create", ")", "\n", "\n", "join", "=", "sc_pb", ".", "RequestJoinGame", "(", "race", "=", "races", "[", "self", ".", "_agent_race", "]", ",", "\n", "options", "=", "interface_options", ")", "\n", "self", ".", "_controller", ".", "join_game", "(", "join", ")", "\n", "\n", "game_info", "=", "self", ".", "_controller", ".", "game_info", "(", ")", "\n", "map_info", "=", "game_info", ".", "start_raw", "\n", "map_play_area_min", "=", "map_info", ".", "playable_area", ".", "p0", "\n", "map_play_area_max", "=", "map_info", ".", "playable_area", ".", "p1", "\n", "self", ".", "max_distance_x", "=", "map_play_area_max", ".", "x", "-", "map_play_area_min", ".", "x", "\n", "self", ".", "max_distance_y", "=", "map_play_area_max", ".", "y", "-", "map_play_area_min", ".", "y", "\n", "self", ".", "map_x", "=", "map_info", ".", "map_size", ".", "x", "\n", "self", ".", "map_y", "=", "map_info", ".", "map_size", ".", "y", "\n", "\n", "if", "map_info", ".", "pathing_grid", ".", "bits_per_pixel", "==", "1", ":", "\n", "            ", "vals", "=", "np", ".", "array", "(", "list", "(", "map_info", ".", "pathing_grid", ".", "data", ")", ")", ".", "reshape", "(", "\n", "self", ".", "map_x", ",", "int", "(", "self", ".", "map_y", "/", "8", ")", ")", "\n", "self", ".", "pathing_grid", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "[", "\n", "[", "(", "b", ">>", "i", ")", "&", "1", "for", "b", "in", "row", "for", "i", "in", "range", "(", "7", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "for", "row", "in", "vals", "]", ",", "dtype", "=", "np", ".", "bool", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pathing_grid", "=", "np", ".", "invert", "(", "np", ".", "flip", "(", "np", ".", "transpose", "(", "np", ".", "array", "(", "\n", "list", "(", "map_info", ".", "pathing_grid", ".", "data", ")", ",", "dtype", "=", "np", ".", "bool", ")", ".", "reshape", "(", "\n", "self", ".", "map_x", ",", "self", ".", "map_y", ")", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "self", ".", "terrain_height", "=", "np", ".", "flip", "(", "\n", "np", ".", "transpose", "(", "np", ".", "array", "(", "list", "(", "map_info", ".", "terrain_height", ".", "data", ")", ")", "\n", ".", "reshape", "(", "self", ".", "map_x", ",", "self", ".", "map_y", ")", ")", ",", "1", ")", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.reset": [[345, 380], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "StarCraft2Env.StarCraft2Env._launch", "StarCraft2Env.StarCraft2Env._restart", "StarCraft2Env.StarCraft2Env._controller.observe", "StarCraft2Env.StarCraft2Env.init_units", "absl.logging.debug", "StarCraft2Env.StarCraft2Env.get_obs", "StarCraft2Env.StarCraft2Env.get_state", "StarCraft2Env.StarCraft2Env.full_restart"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env._launch", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env._restart", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.init_units", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.full_restart"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the environment. Required after each full episode.\n        Returns initial observations and states.\n        \"\"\"", "\n", "self", ".", "_episode_steps", "=", "0", "\n", "if", "self", ".", "_episode_count", "==", "0", ":", "\n", "# Launch StarCraft II", "\n", "            ", "self", ".", "_launch", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_restart", "(", ")", "\n", "\n", "# Information kept for counting the reward", "\n", "", "self", ".", "death_tracker_ally", "=", "np", ".", "zeros", "(", "self", ".", "n_agents", ")", "\n", "self", ".", "death_tracker_enemy", "=", "np", ".", "zeros", "(", "self", ".", "n_enemies", ")", "\n", "self", ".", "previous_ally_units", "=", "None", "\n", "self", ".", "previous_enemy_units", "=", "None", "\n", "self", ".", "win_counted", "=", "False", "\n", "self", ".", "defeat_counted", "=", "False", "\n", "\n", "self", ".", "last_action", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_agents", ",", "self", ".", "n_actions", ")", ")", "\n", "\n", "if", "self", ".", "heuristic_ai", ":", "\n", "            ", "self", ".", "heuristic_targets", "=", "[", "None", "]", "*", "self", ".", "n_agents", "\n", "\n", "", "try", ":", "\n", "            ", "self", ".", "_obs", "=", "self", ".", "_controller", ".", "observe", "(", ")", "\n", "self", ".", "init_units", "(", ")", "\n", "", "except", "(", "protocol", ".", "ProtocolError", ",", "protocol", ".", "ConnectionError", ")", ":", "\n", "            ", "self", ".", "full_restart", "(", ")", "\n", "\n", "", "if", "self", ".", "debug", ":", "\n", "            ", "logging", ".", "debug", "(", "\"Started Episode {}\"", "\n", ".", "format", "(", "self", ".", "_episode_count", ")", ".", "center", "(", "60", ",", "\"*\"", ")", ")", "\n", "\n", "", "return", "self", ".", "get_obs", "(", ")", ",", "self", ".", "get_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env._restart": [[381, 391], ["StarCraft2Env.StarCraft2Env._kill_all_units", "StarCraft2Env.StarCraft2Env._controller.step", "StarCraft2Env.StarCraft2Env.full_restart"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env._kill_all_units", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.full_restart"], ["", "def", "_restart", "(", "self", ")", ":", "\n", "        ", "\"\"\"Restart the environment by killing all units on the map.\n        There is a trigger in the SC2Map file, which restarts the\n        episode when there are no units left.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "self", ".", "_kill_all_units", "(", ")", "\n", "self", ".", "_controller", ".", "step", "(", "2", ")", "\n", "", "except", "(", "protocol", ".", "ProtocolError", ",", "protocol", ".", "ConnectionError", ")", ":", "\n", "            ", "self", ".", "full_restart", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.full_restart": [[392, 397], ["StarCraft2Env.StarCraft2Env._sc2_proc.close", "StarCraft2Env.StarCraft2Env._launch"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.close", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env._launch"], ["", "", "def", "full_restart", "(", "self", ")", ":", "\n", "        ", "\"\"\"Full restart. Closes the SC2 process and launches a new one. \"\"\"", "\n", "self", ".", "_sc2_proc", ".", "close", "(", ")", "\n", "self", ".", "_launch", "(", ")", "\n", "self", ".", "force_restarts", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.step": [[398, 478], ["enumerate", "s2clientprotocol.sc2api_pb2.RequestAction", "StarCraft2Env.StarCraft2Env.update_units", "StarCraft2Env.StarCraft2Env.reward_battle", "int", "numpy.eye", "absl.logging.debug", "StarCraft2Env.StarCraft2Env._controller.actions", "StarCraft2Env.StarCraft2Env._controller.step", "StarCraft2Env.StarCraft2Env._controller.observe", "absl.logging.debug", "numpy.array", "StarCraft2Env.StarCraft2Env.get_agent_action", "StarCraft2Env.StarCraft2Env.get_agent_action_heuristic", "sc_actions.append", "StarCraft2Env.StarCraft2Env.full_restart"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.update_units", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.reward_battle", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_agent_action", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_agent_action_heuristic", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.full_restart"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "\"\"\"A single environment step. Returns reward, terminated, info.\"\"\"", "\n", "actions_int", "=", "[", "int", "(", "a", ")", "for", "a", "in", "actions", "]", "\n", "\n", "self", ".", "last_action", "=", "np", ".", "eye", "(", "self", ".", "n_actions", ")", "[", "np", ".", "array", "(", "actions_int", ")", "]", "\n", "\n", "# Collect individual actions", "\n", "sc_actions", "=", "[", "]", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "logging", ".", "debug", "(", "\"Actions\"", ".", "center", "(", "60", ",", "\"-\"", ")", ")", "\n", "\n", "", "for", "a_id", ",", "action", "in", "enumerate", "(", "actions_int", ")", ":", "\n", "            ", "if", "not", "self", ".", "heuristic_ai", ":", "\n", "                ", "sc_action", "=", "self", ".", "get_agent_action", "(", "a_id", ",", "action", ")", "\n", "", "else", ":", "\n", "                ", "sc_action", ",", "action_num", "=", "self", ".", "get_agent_action_heuristic", "(", "\n", "a_id", ",", "action", ")", "\n", "actions", "[", "a_id", "]", "=", "action_num", "\n", "", "if", "sc_action", ":", "\n", "                ", "sc_actions", ".", "append", "(", "sc_action", ")", "\n", "\n", "# Send action request", "\n", "", "", "req_actions", "=", "sc_pb", ".", "RequestAction", "(", "actions", "=", "sc_actions", ")", "\n", "try", ":", "\n", "            ", "self", ".", "_controller", ".", "actions", "(", "req_actions", ")", "\n", "# Make step in SC2, i.e. apply actions", "\n", "self", ".", "_controller", ".", "step", "(", "self", ".", "_step_mul", ")", "\n", "# Observe here so that we know if the episode is over.", "\n", "self", ".", "_obs", "=", "self", ".", "_controller", ".", "observe", "(", ")", "\n", "", "except", "(", "protocol", ".", "ProtocolError", ",", "protocol", ".", "ConnectionError", ")", ":", "\n", "            ", "self", ".", "full_restart", "(", ")", "\n", "return", "0", ",", "True", ",", "{", "}", "\n", "\n", "", "self", ".", "_total_steps", "+=", "1", "\n", "self", ".", "_episode_steps", "+=", "1", "\n", "\n", "# Update units", "\n", "game_end_code", "=", "self", ".", "update_units", "(", ")", "\n", "\n", "terminated", "=", "False", "\n", "reward", "=", "self", ".", "reward_battle", "(", ")", "\n", "info", "=", "{", "\"battle_won\"", ":", "False", "}", "\n", "\n", "if", "game_end_code", "is", "not", "None", ":", "\n", "# Battle is over", "\n", "            ", "terminated", "=", "True", "\n", "self", ".", "battles_game", "+=", "1", "\n", "if", "game_end_code", "==", "1", "and", "not", "self", ".", "win_counted", ":", "\n", "                ", "self", ".", "battles_won", "+=", "1", "\n", "self", ".", "win_counted", "=", "True", "\n", "info", "[", "\"battle_won\"", "]", "=", "True", "\n", "if", "not", "self", ".", "reward_sparse", ":", "\n", "                    ", "reward", "+=", "self", ".", "reward_win", "\n", "", "else", ":", "\n", "                    ", "reward", "=", "1", "\n", "", "", "elif", "game_end_code", "==", "-", "1", "and", "not", "self", ".", "defeat_counted", ":", "\n", "                ", "self", ".", "defeat_counted", "=", "True", "\n", "if", "not", "self", ".", "reward_sparse", ":", "\n", "                    ", "reward", "+=", "self", ".", "reward_defeat", "\n", "", "else", ":", "\n", "                    ", "reward", "=", "-", "1", "\n", "\n", "", "", "", "elif", "self", ".", "_episode_steps", ">=", "self", ".", "episode_limit", ":", "\n", "# Episode limit reached", "\n", "            ", "terminated", "=", "True", "\n", "if", "self", ".", "continuing_episode", ":", "\n", "                ", "info", "[", "\"episode_limit\"", "]", "=", "True", "\n", "", "self", ".", "battles_game", "+=", "1", "\n", "self", ".", "timeouts", "+=", "1", "\n", "\n", "", "if", "self", ".", "debug", ":", "\n", "            ", "logging", ".", "debug", "(", "\"Reward = {}\"", ".", "format", "(", "reward", ")", ".", "center", "(", "60", ",", "'-'", ")", ")", "\n", "\n", "", "if", "terminated", ":", "\n", "            ", "self", ".", "_episode_count", "+=", "1", "\n", "\n", "", "if", "self", ".", "reward_scale", ":", "\n", "            ", "reward", "/=", "self", ".", "max_reward", "/", "self", ".", "reward_scale_rate", "\n", "\n", "", "return", "reward", ",", "terminated", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_agent_action": [[479, 573], ["StarCraft2Env.StarCraft2Env.get_avail_agent_actions", "StarCraft2Env.StarCraft2Env.get_unit_by_id", "s2clientprotocol.sc2api_pb2.Action", "absl.logging.debug", "s2clientprotocol.raw_pb2.ActionRawUnitCommand", "s2clientprotocol.raw_pb2.ActionRaw", "absl.logging.debug", "s2clientprotocol.raw_pb2.ActionRawUnitCommand", "absl.logging.debug", "s2clientprotocol.raw_pb2.ActionRawUnitCommand", "s2clientprotocol.common_pb2.Point2D", "absl.logging.debug", "s2clientprotocol.raw_pb2.ActionRawUnitCommand", "s2clientprotocol.common_pb2.Point2D", "absl.logging.debug", "s2clientprotocol.raw_pb2.ActionRawUnitCommand", "s2clientprotocol.raw_pb2.ActionRawUnitCommand", "s2clientprotocol.common_pb2.Point2D", "absl.logging.debug", "absl.logging.debug", "s2clientprotocol.common_pb2.Point2D"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_unit_by_id"], ["", "def", "get_agent_action", "(", "self", ",", "a_id", ",", "action", ")", ":", "\n", "        ", "\"\"\"Construct the action for agent a_id.\"\"\"", "\n", "avail_actions", "=", "self", ".", "get_avail_agent_actions", "(", "a_id", ")", "\n", "assert", "avail_actions", "[", "action", "]", "==", "1", ",", "\"Agent {} cannot perform action {}\"", ".", "format", "(", "a_id", ",", "action", ")", "\n", "\n", "unit", "=", "self", ".", "get_unit_by_id", "(", "a_id", ")", "\n", "tag", "=", "unit", ".", "tag", "\n", "x", "=", "unit", ".", "pos", ".", "x", "\n", "y", "=", "unit", ".", "pos", ".", "y", "\n", "\n", "if", "action", "==", "0", ":", "\n", "# no-op (valid only when dead)", "\n", "            ", "assert", "unit", ".", "health", "==", "0", ",", "\"No-op only available for dead agents.\"", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "logging", ".", "debug", "(", "\"Agent {}: Dead\"", ".", "format", "(", "a_id", ")", ")", "\n", "", "return", "None", "\n", "", "elif", "action", "==", "1", ":", "\n", "# stop", "\n", "            ", "cmd", "=", "r_pb", ".", "ActionRawUnitCommand", "(", "\n", "ability_id", "=", "actions", "[", "\"stop\"", "]", ",", "\n", "unit_tags", "=", "[", "tag", "]", ",", "\n", "queue_command", "=", "False", ")", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "logging", ".", "debug", "(", "\"Agent {}: Stop\"", ".", "format", "(", "a_id", ")", ")", "\n", "\n", "", "", "elif", "action", "==", "2", ":", "\n", "# move north", "\n", "            ", "cmd", "=", "r_pb", ".", "ActionRawUnitCommand", "(", "\n", "ability_id", "=", "actions", "[", "\"move\"", "]", ",", "\n", "target_world_space_pos", "=", "sc_common", ".", "Point2D", "(", "\n", "x", "=", "x", ",", "y", "=", "y", "+", "self", ".", "_move_amount", ")", ",", "\n", "unit_tags", "=", "[", "tag", "]", ",", "\n", "queue_command", "=", "False", ")", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "logging", ".", "debug", "(", "\"Agent {}: Move North\"", ".", "format", "(", "a_id", ")", ")", "\n", "\n", "", "", "elif", "action", "==", "3", ":", "\n", "# move south", "\n", "            ", "cmd", "=", "r_pb", ".", "ActionRawUnitCommand", "(", "\n", "ability_id", "=", "actions", "[", "\"move\"", "]", ",", "\n", "target_world_space_pos", "=", "sc_common", ".", "Point2D", "(", "\n", "x", "=", "x", ",", "y", "=", "y", "-", "self", ".", "_move_amount", ")", ",", "\n", "unit_tags", "=", "[", "tag", "]", ",", "\n", "queue_command", "=", "False", ")", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "logging", ".", "debug", "(", "\"Agent {}: Move South\"", ".", "format", "(", "a_id", ")", ")", "\n", "\n", "", "", "elif", "action", "==", "4", ":", "\n", "# move east", "\n", "            ", "cmd", "=", "r_pb", ".", "ActionRawUnitCommand", "(", "\n", "ability_id", "=", "actions", "[", "\"move\"", "]", ",", "\n", "target_world_space_pos", "=", "sc_common", ".", "Point2D", "(", "\n", "x", "=", "x", "+", "self", ".", "_move_amount", ",", "y", "=", "y", ")", ",", "\n", "unit_tags", "=", "[", "tag", "]", ",", "\n", "queue_command", "=", "False", ")", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "logging", ".", "debug", "(", "\"Agent {}: Move East\"", ".", "format", "(", "a_id", ")", ")", "\n", "\n", "", "", "elif", "action", "==", "5", ":", "\n", "# move west", "\n", "            ", "cmd", "=", "r_pb", ".", "ActionRawUnitCommand", "(", "\n", "ability_id", "=", "actions", "[", "\"move\"", "]", ",", "\n", "target_world_space_pos", "=", "sc_common", ".", "Point2D", "(", "\n", "x", "=", "x", "-", "self", ".", "_move_amount", ",", "y", "=", "y", ")", ",", "\n", "unit_tags", "=", "[", "tag", "]", ",", "\n", "queue_command", "=", "False", ")", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "logging", ".", "debug", "(", "\"Agent {}: Move West\"", ".", "format", "(", "a_id", ")", ")", "\n", "", "", "else", ":", "\n", "# attack/heal units that are in range", "\n", "            ", "target_id", "=", "action", "-", "self", ".", "n_actions_no_attack", "\n", "if", "self", ".", "map_type", "==", "\"MMM\"", "and", "unit", ".", "unit_type", "==", "self", ".", "medivac_id", ":", "\n", "                ", "target_unit", "=", "self", ".", "agents", "[", "target_id", "]", "\n", "action_name", "=", "\"heal\"", "\n", "", "else", ":", "\n", "                ", "target_unit", "=", "self", ".", "enemies", "[", "target_id", "]", "\n", "action_name", "=", "\"attack\"", "\n", "\n", "", "action_id", "=", "actions", "[", "action_name", "]", "\n", "target_tag", "=", "target_unit", ".", "tag", "\n", "\n", "cmd", "=", "r_pb", ".", "ActionRawUnitCommand", "(", "\n", "ability_id", "=", "action_id", ",", "\n", "target_unit_tag", "=", "target_tag", ",", "\n", "unit_tags", "=", "[", "tag", "]", ",", "\n", "queue_command", "=", "False", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "logging", ".", "debug", "(", "\"Agent {} {}s unit # {}\"", ".", "format", "(", "\n", "a_id", ",", "action_name", ",", "target_id", ")", ")", "\n", "\n", "", "", "sc_action", "=", "sc_pb", ".", "Action", "(", "action_raw", "=", "r_pb", ".", "ActionRaw", "(", "unit_command", "=", "cmd", ")", ")", "\n", "return", "sc_action", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_agent_action_heuristic": [[574, 670], ["StarCraft2Env.StarCraft2Env.get_unit_by_id", "s2clientprotocol.sc2api_pb2.Action", "s2clientprotocol.raw_pb2.ActionRawUnitCommand", "s2clientprotocol.raw_pb2.ActionRawUnitCommand", "math.hypot", "StarCraft2Env.StarCraft2Env.agents.items", "math.hypot", "StarCraft2Env.StarCraft2Env.enemies.items", "abs", "abs", "s2clientprotocol.raw_pb2.ActionRaw", "StarCraft2Env.StarCraft2Env.get_avail_agent_actions", "s2clientprotocol.common_pb2.Point2D", "s2clientprotocol.common_pb2.Point2D", "s2clientprotocol.common_pb2.Point2D", "s2clientprotocol.common_pb2.Point2D", "StarCraft2Env.StarCraft2Env.distance", "StarCraft2Env.StarCraft2Env.distance"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_unit_by_id", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.distance", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.distance"], ["", "def", "get_agent_action_heuristic", "(", "self", ",", "a_id", ",", "action", ")", ":", "\n", "        ", "unit", "=", "self", ".", "get_unit_by_id", "(", "a_id", ")", "\n", "tag", "=", "unit", ".", "tag", "\n", "\n", "target", "=", "self", ".", "heuristic_targets", "[", "a_id", "]", "\n", "if", "unit", ".", "unit_type", "==", "self", ".", "medivac_id", ":", "\n", "            ", "if", "(", "target", "is", "None", "or", "self", ".", "agents", "[", "target", "]", ".", "health", "==", "0", "or", "\n", "self", ".", "agents", "[", "target", "]", ".", "health", "==", "self", ".", "agents", "[", "target", "]", ".", "health_max", ")", ":", "\n", "                ", "min_dist", "=", "math", ".", "hypot", "(", "self", ".", "max_distance_x", ",", "self", ".", "max_distance_y", ")", "\n", "min_id", "=", "-", "1", "\n", "for", "al_id", ",", "al_unit", "in", "self", ".", "agents", ".", "items", "(", ")", ":", "\n", "                    ", "if", "al_unit", ".", "unit_type", "==", "self", ".", "medivac_id", ":", "\n", "                        ", "continue", "\n", "", "if", "(", "al_unit", ".", "health", "!=", "0", "and", "\n", "al_unit", ".", "health", "!=", "al_unit", ".", "health_max", ")", ":", "\n", "                        ", "dist", "=", "self", ".", "distance", "(", "unit", ".", "pos", ".", "x", ",", "unit", ".", "pos", ".", "y", ",", "\n", "al_unit", ".", "pos", ".", "x", ",", "al_unit", ".", "pos", ".", "y", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                            ", "min_dist", "=", "dist", "\n", "min_id", "=", "al_id", "\n", "", "", "", "self", ".", "heuristic_targets", "[", "a_id", "]", "=", "min_id", "\n", "if", "min_id", "==", "-", "1", ":", "\n", "                    ", "self", ".", "heuristic_targets", "[", "a_id", "]", "=", "None", "\n", "return", "None", ",", "0", "\n", "", "", "action_id", "=", "actions", "[", "'heal'", "]", "\n", "target_tag", "=", "self", ".", "agents", "[", "self", ".", "heuristic_targets", "[", "a_id", "]", "]", ".", "tag", "\n", "", "else", ":", "\n", "            ", "if", "target", "is", "None", "or", "self", ".", "enemies", "[", "target", "]", ".", "health", "==", "0", ":", "\n", "                ", "min_dist", "=", "math", ".", "hypot", "(", "self", ".", "max_distance_x", ",", "self", ".", "max_distance_y", ")", "\n", "min_id", "=", "-", "1", "\n", "for", "e_id", ",", "e_unit", "in", "self", ".", "enemies", ".", "items", "(", ")", ":", "\n", "                    ", "if", "(", "unit", ".", "unit_type", "==", "self", ".", "marauder_id", "and", "\n", "e_unit", ".", "unit_type", "==", "self", ".", "medivac_id", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "e_unit", ".", "health", ">", "0", ":", "\n", "                        ", "dist", "=", "self", ".", "distance", "(", "unit", ".", "pos", ".", "x", ",", "unit", ".", "pos", ".", "y", ",", "\n", "e_unit", ".", "pos", ".", "x", ",", "e_unit", ".", "pos", ".", "y", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                            ", "min_dist", "=", "dist", "\n", "min_id", "=", "e_id", "\n", "", "", "", "self", ".", "heuristic_targets", "[", "a_id", "]", "=", "min_id", "\n", "if", "min_id", "==", "-", "1", ":", "\n", "                    ", "self", ".", "heuristic_targets", "[", "a_id", "]", "=", "None", "\n", "return", "None", ",", "0", "\n", "", "", "action_id", "=", "actions", "[", "'attack'", "]", "\n", "target_tag", "=", "self", ".", "enemies", "[", "self", ".", "heuristic_targets", "[", "a_id", "]", "]", ".", "tag", "\n", "\n", "", "action_num", "=", "self", ".", "heuristic_targets", "[", "a_id", "]", "+", "self", ".", "n_actions_no_attack", "\n", "\n", "# Check if the action is available", "\n", "if", "(", "self", ".", "heuristic_rest", "and", "\n", "self", ".", "get_avail_agent_actions", "(", "a_id", ")", "[", "action_num", "]", "==", "0", ")", ":", "\n", "\n", "# Move towards the target rather than attacking/healing", "\n", "            ", "if", "unit", ".", "unit_type", "==", "self", ".", "medivac_id", ":", "\n", "                ", "target_unit", "=", "self", ".", "agents", "[", "self", ".", "heuristic_targets", "[", "a_id", "]", "]", "\n", "", "else", ":", "\n", "                ", "target_unit", "=", "self", ".", "enemies", "[", "self", ".", "heuristic_targets", "[", "a_id", "]", "]", "\n", "\n", "", "delta_x", "=", "target_unit", ".", "pos", ".", "x", "-", "unit", ".", "pos", ".", "x", "\n", "delta_y", "=", "target_unit", ".", "pos", ".", "y", "-", "unit", ".", "pos", ".", "y", "\n", "\n", "if", "abs", "(", "delta_x", ")", ">", "abs", "(", "delta_y", ")", ":", "# east or west", "\n", "                ", "if", "delta_x", ">", "0", ":", "# east", "\n", "                    ", "target_pos", "=", "sc_common", ".", "Point2D", "(", "\n", "x", "=", "unit", ".", "pos", ".", "x", "+", "self", ".", "_move_amount", ",", "y", "=", "unit", ".", "pos", ".", "y", ")", "\n", "action_num", "=", "4", "\n", "", "else", ":", "# west", "\n", "                    ", "target_pos", "=", "sc_common", ".", "Point2D", "(", "\n", "x", "=", "unit", ".", "pos", ".", "x", "-", "self", ".", "_move_amount", ",", "y", "=", "unit", ".", "pos", ".", "y", ")", "\n", "action_num", "=", "5", "\n", "", "", "else", ":", "# north or south", "\n", "                ", "if", "delta_y", ">", "0", ":", "# north", "\n", "                    ", "target_pos", "=", "sc_common", ".", "Point2D", "(", "\n", "x", "=", "unit", ".", "pos", ".", "x", ",", "y", "=", "unit", ".", "pos", ".", "y", "+", "self", ".", "_move_amount", ")", "\n", "action_num", "=", "2", "\n", "", "else", ":", "# south", "\n", "                    ", "target_pos", "=", "sc_common", ".", "Point2D", "(", "\n", "x", "=", "unit", ".", "pos", ".", "x", ",", "y", "=", "unit", ".", "pos", ".", "y", "-", "self", ".", "_move_amount", ")", "\n", "action_num", "=", "3", "\n", "\n", "", "", "cmd", "=", "r_pb", ".", "ActionRawUnitCommand", "(", "\n", "ability_id", "=", "actions", "[", "'move'", "]", ",", "\n", "target_world_space_pos", "=", "target_pos", ",", "\n", "unit_tags", "=", "[", "tag", "]", ",", "\n", "queue_command", "=", "False", ")", "\n", "", "else", ":", "\n", "# Attack/heal the target", "\n", "            ", "cmd", "=", "r_pb", ".", "ActionRawUnitCommand", "(", "\n", "ability_id", "=", "action_id", ",", "\n", "target_unit_tag", "=", "target_tag", ",", "\n", "unit_tags", "=", "[", "tag", "]", ",", "\n", "queue_command", "=", "False", ")", "\n", "\n", "", "sc_action", "=", "sc_pb", ".", "Action", "(", "action_raw", "=", "r_pb", ".", "ActionRaw", "(", "unit_command", "=", "cmd", ")", ")", "\n", "return", "sc_action", ",", "action_num", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.reward_battle": [[671, 727], ["StarCraft2Env.StarCraft2Env.agents.items", "StarCraft2Env.StarCraft2Env.enemies.items", "abs"], "methods", ["None"], ["", "def", "reward_battle", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reward function when self.reward_spare==False.\n        Returns accumulative hit/shield point damage dealt to the enemy\n        + reward_death_value per enemy unit killed, and, in case\n        self.reward_only_positive == False, - (damage dealt to ally units\n        + reward_death_value per ally unit killed) * self.reward_negative_scale\n        \"\"\"", "\n", "if", "self", ".", "reward_sparse", ":", "\n", "            ", "return", "0", "\n", "\n", "", "reward", "=", "0", "\n", "delta_deaths", "=", "0", "\n", "delta_ally", "=", "0", "\n", "delta_enemy", "=", "0", "\n", "\n", "neg_scale", "=", "self", ".", "reward_negative_scale", "\n", "\n", "# update deaths", "\n", "for", "al_id", ",", "al_unit", "in", "self", ".", "agents", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "self", ".", "death_tracker_ally", "[", "al_id", "]", ":", "\n", "# did not die so far", "\n", "                ", "prev_health", "=", "(", "\n", "self", ".", "previous_ally_units", "[", "al_id", "]", ".", "health", "\n", "+", "self", ".", "previous_ally_units", "[", "al_id", "]", ".", "shield", "\n", ")", "\n", "if", "al_unit", ".", "health", "==", "0", ":", "\n", "# just died", "\n", "                    ", "self", ".", "death_tracker_ally", "[", "al_id", "]", "=", "1", "\n", "if", "not", "self", ".", "reward_only_positive", ":", "\n", "                        ", "delta_deaths", "-=", "self", ".", "reward_death_value", "*", "neg_scale", "\n", "", "delta_ally", "+=", "prev_health", "*", "neg_scale", "\n", "", "else", ":", "\n", "# still alive", "\n", "                    ", "delta_ally", "+=", "neg_scale", "*", "(", "\n", "prev_health", "-", "al_unit", ".", "health", "-", "al_unit", ".", "shield", "\n", ")", "\n", "\n", "", "", "", "for", "e_id", ",", "e_unit", "in", "self", ".", "enemies", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "self", ".", "death_tracker_enemy", "[", "e_id", "]", ":", "\n", "                ", "prev_health", "=", "(", "\n", "self", ".", "previous_enemy_units", "[", "e_id", "]", ".", "health", "\n", "+", "self", ".", "previous_enemy_units", "[", "e_id", "]", ".", "shield", "\n", ")", "\n", "if", "e_unit", ".", "health", "==", "0", ":", "\n", "                    ", "self", ".", "death_tracker_enemy", "[", "e_id", "]", "=", "1", "\n", "delta_deaths", "+=", "self", ".", "reward_death_value", "\n", "delta_enemy", "+=", "prev_health", "\n", "", "else", ":", "\n", "                    ", "delta_enemy", "+=", "prev_health", "-", "e_unit", ".", "health", "-", "e_unit", ".", "shield", "\n", "\n", "", "", "", "if", "self", ".", "reward_only_positive", ":", "\n", "            ", "reward", "=", "abs", "(", "delta_enemy", "+", "delta_deaths", ")", "# shield regeneration", "\n", "", "else", ":", "\n", "            ", "reward", "=", "delta_enemy", "+", "delta_deaths", "-", "delta_ally", "\n", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_total_actions": [[728, 731], ["None"], "methods", ["None"], ["", "def", "get_total_actions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the total number of actions an agent could ever take.\"\"\"", "\n", "return", "self", ".", "n_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.distance": [[732, 736], ["math.hypot"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "distance", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ":", "\n", "        ", "\"\"\"Distance between two points.\"\"\"", "\n", "return", "math", ".", "hypot", "(", "x2", "-", "x1", ",", "y2", "-", "y1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.unit_shoot_range": [[737, 740], ["None"], "methods", ["None"], ["", "def", "unit_shoot_range", "(", "self", ",", "agent_id", ")", ":", "\n", "        ", "\"\"\"Returns the shooting range for an agent.\"\"\"", "\n", "return", "6", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.unit_sight_range": [[741, 744], ["None"], "methods", ["None"], ["", "def", "unit_sight_range", "(", "self", ",", "agent_id", ")", ":", "\n", "        ", "\"\"\"Returns the sight range for an agent.\"\"\"", "\n", "return", "self", ".", "sight_range", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.unit_max_cooldown": [[745, 759], ["switcher.get"], "methods", ["None"], ["", "def", "unit_max_cooldown", "(", "self", ",", "unit", ")", ":", "\n", "        ", "\"\"\"Returns the maximal cooldown for a unit.\"\"\"", "\n", "switcher", "=", "{", "\n", "self", ".", "marine_id", ":", "15", ",", "\n", "self", ".", "marauder_id", ":", "25", ",", "\n", "self", ".", "medivac_id", ":", "200", ",", "# max energy", "\n", "self", ".", "stalker_id", ":", "35", ",", "\n", "self", ".", "zealot_id", ":", "22", ",", "\n", "self", ".", "colossus_id", ":", "24", ",", "\n", "self", ".", "hydralisk_id", ":", "10", ",", "\n", "self", ".", "zergling_id", ":", "11", ",", "\n", "self", ".", "baneling_id", ":", "1", "\n", "}", "\n", "return", "switcher", ".", "get", "(", "unit", ".", "unit_type", ",", "15", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.save_replay": [[760, 767], ["StarCraft2Env.StarCraft2Env._run_config.save_replay", "absl.logging.info", "StarCraft2Env.StarCraft2Env._controller.save_replay"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.save_replay", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.save_replay"], ["", "def", "save_replay", "(", "self", ")", ":", "\n", "        ", "\"\"\"Save a replay.\"\"\"", "\n", "prefix", "=", "self", ".", "replay_prefix", "or", "self", ".", "map_name", "\n", "replay_dir", "=", "self", ".", "replay_dir", "or", "\"\"", "\n", "replay_path", "=", "self", ".", "_run_config", ".", "save_replay", "(", "\n", "self", ".", "_controller", ".", "save_replay", "(", ")", ",", "replay_dir", "=", "replay_dir", ",", "prefix", "=", "prefix", ")", "\n", "logging", ".", "info", "(", "\"Replay saved at: %s\"", "%", "replay_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.unit_max_shield": [[768, 776], ["None"], "methods", ["None"], ["", "def", "unit_max_shield", "(", "self", ",", "unit", ")", ":", "\n", "        ", "\"\"\"Returns maximal shield for a given unit.\"\"\"", "\n", "if", "unit", ".", "unit_type", "==", "74", "or", "unit", ".", "unit_type", "==", "self", ".", "stalker_id", ":", "\n", "            ", "return", "80", "# Protoss's Stalker", "\n", "", "if", "unit", ".", "unit_type", "==", "73", "or", "unit", ".", "unit_type", "==", "self", ".", "zealot_id", ":", "\n", "            ", "return", "50", "# Protoss's Zaelot", "\n", "", "if", "unit", ".", "unit_type", "==", "4", "or", "unit", ".", "unit_type", "==", "self", ".", "colossus_id", ":", "\n", "            ", "return", "150", "# Protoss's Colossus", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.can_move": [[777, 794], ["StarCraft2Env.StarCraft2Env.check_bounds", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.check_bounds"], ["", "", "def", "can_move", "(", "self", ",", "unit", ",", "direction", ")", ":", "\n", "        ", "\"\"\"Whether a unit can move in a given direction.\"\"\"", "\n", "m", "=", "self", ".", "_move_amount", "/", "2", "\n", "\n", "if", "direction", "==", "Direction", ".", "NORTH", ":", "\n", "            ", "x", ",", "y", "=", "int", "(", "unit", ".", "pos", ".", "x", ")", ",", "int", "(", "unit", ".", "pos", ".", "y", "+", "m", ")", "\n", "", "elif", "direction", "==", "Direction", ".", "SOUTH", ":", "\n", "            ", "x", ",", "y", "=", "int", "(", "unit", ".", "pos", ".", "x", ")", ",", "int", "(", "unit", ".", "pos", ".", "y", "-", "m", ")", "\n", "", "elif", "direction", "==", "Direction", ".", "EAST", ":", "\n", "            ", "x", ",", "y", "=", "int", "(", "unit", ".", "pos", ".", "x", "+", "m", ")", ",", "int", "(", "unit", ".", "pos", ".", "y", ")", "\n", "", "else", ":", "\n", "            ", "x", ",", "y", "=", "int", "(", "unit", ".", "pos", ".", "x", "-", "m", ")", ",", "int", "(", "unit", ".", "pos", ".", "y", ")", "\n", "\n", "", "if", "self", ".", "check_bounds", "(", "x", ",", "y", ")", "and", "self", ".", "pathing_grid", "[", "x", ",", "y", "]", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_surrounding_points": [[795, 817], ["int", "int", "points.append"], "methods", ["None"], ["", "def", "get_surrounding_points", "(", "self", ",", "unit", ",", "include_self", "=", "False", ")", ":", "\n", "        ", "\"\"\"Returns the surrounding points of the unit in 8 directions.\"\"\"", "\n", "x", "=", "int", "(", "unit", ".", "pos", ".", "x", ")", "\n", "y", "=", "int", "(", "unit", ".", "pos", ".", "y", ")", "\n", "\n", "ma", "=", "self", ".", "_move_amount", "\n", "\n", "points", "=", "[", "\n", "(", "x", ",", "y", "+", "2", "*", "ma", ")", ",", "\n", "(", "x", ",", "y", "-", "2", "*", "ma", ")", ",", "\n", "(", "x", "+", "2", "*", "ma", ",", "y", ")", ",", "\n", "(", "x", "-", "2", "*", "ma", ",", "y", ")", ",", "\n", "(", "x", "+", "ma", ",", "y", "+", "ma", ")", ",", "\n", "(", "x", "-", "ma", ",", "y", "-", "ma", ")", ",", "\n", "(", "x", "+", "ma", ",", "y", "-", "ma", ")", ",", "\n", "(", "x", "-", "ma", ",", "y", "+", "ma", ")", ",", "\n", "]", "\n", "\n", "if", "include_self", ":", "\n", "            ", "points", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "\n", "", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.check_bounds": [[818, 821], ["None"], "methods", ["None"], ["", "def", "check_bounds", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"Whether a point is within the map bounds.\"\"\"", "\n", "return", "(", "0", "<=", "x", "<", "self", ".", "map_x", "and", "0", "<=", "y", "<", "self", ".", "map_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_surrounding_pathing": [[822, 830], ["StarCraft2Env.StarCraft2Env.get_surrounding_points", "StarCraft2Env.StarCraft2Env.check_bounds"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_surrounding_points", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.check_bounds"], ["", "def", "get_surrounding_pathing", "(", "self", ",", "unit", ")", ":", "\n", "        ", "\"\"\"Returns pathing values of the grid surrounding the given unit.\"\"\"", "\n", "points", "=", "self", ".", "get_surrounding_points", "(", "unit", ",", "include_self", "=", "False", ")", "\n", "vals", "=", "[", "\n", "self", ".", "pathing_grid", "[", "x", ",", "y", "]", "if", "self", ".", "check_bounds", "(", "x", ",", "y", ")", "else", "1", "\n", "for", "x", ",", "y", "in", "points", "\n", "]", "\n", "return", "vals", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_surrounding_height": [[831, 839], ["StarCraft2Env.StarCraft2Env.get_surrounding_points", "StarCraft2Env.StarCraft2Env.check_bounds"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_surrounding_points", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.check_bounds"], ["", "def", "get_surrounding_height", "(", "self", ",", "unit", ")", ":", "\n", "        ", "\"\"\"Returns height values of the grid surrounding the given unit.\"\"\"", "\n", "points", "=", "self", ".", "get_surrounding_points", "(", "unit", ",", "include_self", "=", "True", ")", "\n", "vals", "=", "[", "\n", "self", ".", "terrain_height", "[", "x", ",", "y", "]", "if", "self", ".", "check_bounds", "(", "x", ",", "y", ")", "else", "1", "\n", "for", "x", ",", "y", "in", "points", "\n", "]", "\n", "return", "vals", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_obs_agent": [[840, 1013], ["StarCraft2Env.StarCraft2Env.get_unit_by_id", "StarCraft2Env.StarCraft2Env.get_obs_move_feats_size", "StarCraft2Env.StarCraft2Env.get_obs_enemy_feats_size", "StarCraft2Env.StarCraft2Env.get_obs_ally_feats_size", "StarCraft2Env.StarCraft2Env.get_obs_own_feats_size", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.concatenate", "StarCraft2Env.StarCraft2Env.unit_sight_range", "StarCraft2Env.StarCraft2Env.get_avail_agent_actions", "range", "StarCraft2Env.StarCraft2Env.enemies.items", "enumerate", "numpy.append", "absl.logging.debug", "absl.logging.debug", "absl.logging.debug", "absl.logging.debug", "absl.logging.debug", "absl.logging.debug", "StarCraft2Env.StarCraft2Env.get_surrounding_pathing", "StarCraft2Env.StarCraft2Env.get_surrounding_height", "StarCraft2Env.StarCraft2Env.distance", "StarCraft2Env.StarCraft2Env.get_unit_by_id", "StarCraft2Env.StarCraft2Env.distance", "StarCraft2Env.StarCraft2Env.get_unit_type_id", "numpy.zeros.flatten", "numpy.zeros.flatten", "numpy.zeros.flatten", "numpy.zeros.flatten", "range", "StarCraft2Env.StarCraft2Env.unit_max_shield", "StarCraft2Env.StarCraft2Env.get_avail_agent_actions", "StarCraft2Env.StarCraft2Env.get_unit_type_id", "StarCraft2Env.StarCraft2Env.get_unit_type_id", "StarCraft2Env.StarCraft2Env.unit_max_shield", "StarCraft2Env.StarCraft2Env.unit_max_shield"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_unit_by_id", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_obs_move_feats_size", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_obs_enemy_feats_size", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_obs_ally_feats_size", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_obs_own_feats_size", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.unit_sight_range", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_surrounding_pathing", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_surrounding_height", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.distance", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_unit_by_id", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.distance", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_unit_type_id", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.unit_max_shield", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_unit_type_id", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_unit_type_id", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.unit_max_shield", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.unit_max_shield"], ["", "def", "get_obs_agent", "(", "self", ",", "agent_id", ")", ":", "\n", "        ", "\"\"\"Returns observation for agent_id. The observation is composed of:\n\n           - agent movement features (where it can move to, height information and pathing grid)\n           - enemy features (available_to_attack, health, relative_x, relative_y, shield, unit_type)\n           - ally features (visible, distance, relative_x, relative_y, shield, unit_type)\n           - agent unit features (health, shield, unit_type)\n\n           All of this information is flattened and concatenated into a list,\n           in the aforementioned order. To know the sizes of each of the\n           features inside the final list of features, take a look at the\n           functions ``get_obs_move_feats_size()``,\n           ``get_obs_enemy_feats_size()``, ``get_obs_ally_feats_size()`` and\n           ``get_obs_own_feats_size()``.\n\n           The size of the observation vector may vary, depending on the\n           environment configuration and type of units present in the map.\n           For instance, non-Protoss units will not have shields, movement\n           features may or may not include terrain height and pathing grid,\n           unit_type is not included if there is only one type of unit in the\n           map etc.).\n\n           NOTE: Agents should have access only to their local observations\n           during decentralised execution.\n        \"\"\"", "\n", "unit", "=", "self", ".", "get_unit_by_id", "(", "agent_id", ")", "\n", "\n", "move_feats_dim", "=", "self", ".", "get_obs_move_feats_size", "(", ")", "\n", "enemy_feats_dim", "=", "self", ".", "get_obs_enemy_feats_size", "(", ")", "\n", "ally_feats_dim", "=", "self", ".", "get_obs_ally_feats_size", "(", ")", "\n", "own_feats_dim", "=", "self", ".", "get_obs_own_feats_size", "(", ")", "\n", "\n", "move_feats", "=", "np", ".", "zeros", "(", "move_feats_dim", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "enemy_feats", "=", "np", ".", "zeros", "(", "enemy_feats_dim", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ally_feats", "=", "np", ".", "zeros", "(", "ally_feats_dim", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "own_feats", "=", "np", ".", "zeros", "(", "own_feats_dim", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "unit", ".", "health", ">", "0", ":", "# otherwise dead, return all zeros", "\n", "            ", "x", "=", "unit", ".", "pos", ".", "x", "\n", "y", "=", "unit", ".", "pos", ".", "y", "\n", "sight_range", "=", "self", ".", "unit_sight_range", "(", "agent_id", ")", "\n", "\n", "# Movement features", "\n", "avail_actions", "=", "self", ".", "get_avail_agent_actions", "(", "agent_id", ")", "\n", "for", "m", "in", "range", "(", "self", ".", "n_actions_move", ")", ":", "\n", "                ", "move_feats", "[", "m", "]", "=", "avail_actions", "[", "m", "+", "2", "]", "\n", "\n", "", "ind", "=", "self", ".", "n_actions_move", "\n", "\n", "if", "self", ".", "obs_pathing_grid", ":", "\n", "                ", "move_feats", "[", "\n", "ind", ":", "ind", "+", "self", ".", "n_obs_pathing", "\n", "]", "=", "self", ".", "get_surrounding_pathing", "(", "unit", ")", "\n", "ind", "+=", "self", ".", "n_obs_pathing", "\n", "\n", "", "if", "self", ".", "obs_terrain_height", ":", "\n", "                ", "move_feats", "[", "ind", ":", "]", "=", "self", ".", "get_surrounding_height", "(", "unit", ")", "\n", "\n", "# Enemy features", "\n", "", "for", "e_id", ",", "e_unit", "in", "self", ".", "enemies", ".", "items", "(", ")", ":", "\n", "                ", "e_x", "=", "e_unit", ".", "pos", ".", "x", "\n", "e_y", "=", "e_unit", ".", "pos", ".", "y", "\n", "dist", "=", "self", ".", "distance", "(", "x", ",", "y", ",", "e_x", ",", "e_y", ")", "\n", "\n", "if", "(", "\n", "dist", "<", "sight_range", "and", "e_unit", ".", "health", ">", "0", "\n", ")", ":", "# visible and alive", "\n", "# Sight range > shoot range", "\n", "                    ", "enemy_feats", "[", "e_id", ",", "0", "]", "=", "avail_actions", "[", "\n", "self", ".", "n_actions_no_attack", "+", "e_id", "\n", "]", "# available", "\n", "enemy_feats", "[", "e_id", ",", "1", "]", "=", "dist", "/", "sight_range", "# distance", "\n", "enemy_feats", "[", "e_id", ",", "2", "]", "=", "(", "\n", "e_x", "-", "x", "\n", ")", "/", "sight_range", "# relative X", "\n", "enemy_feats", "[", "e_id", ",", "3", "]", "=", "(", "\n", "e_y", "-", "y", "\n", ")", "/", "sight_range", "# relative Y", "\n", "\n", "ind", "=", "4", "\n", "if", "self", ".", "obs_all_health", ":", "\n", "                        ", "enemy_feats", "[", "e_id", ",", "ind", "]", "=", "(", "\n", "e_unit", ".", "health", "/", "e_unit", ".", "health_max", "\n", ")", "# health", "\n", "ind", "+=", "1", "\n", "if", "self", ".", "shield_bits_enemy", ">", "0", ":", "\n", "                            ", "max_shield", "=", "self", ".", "unit_max_shield", "(", "e_unit", ")", "\n", "enemy_feats", "[", "e_id", ",", "ind", "]", "=", "(", "\n", "e_unit", ".", "shield", "/", "max_shield", "\n", ")", "# shield", "\n", "ind", "+=", "1", "\n", "\n", "", "", "if", "self", ".", "unit_type_bits", ">", "0", ":", "\n", "                        ", "type_id", "=", "self", ".", "get_unit_type_id", "(", "e_unit", ",", "False", ")", "\n", "enemy_feats", "[", "e_id", ",", "ind", "+", "type_id", "]", "=", "1", "# unit type", "\n", "\n", "# Ally features", "\n", "", "", "", "al_ids", "=", "[", "\n", "al_id", "for", "al_id", "in", "range", "(", "self", ".", "n_agents", ")", "if", "al_id", "!=", "agent_id", "\n", "]", "\n", "for", "i", ",", "al_id", "in", "enumerate", "(", "al_ids", ")", ":", "\n", "\n", "                ", "al_unit", "=", "self", ".", "get_unit_by_id", "(", "al_id", ")", "\n", "al_x", "=", "al_unit", ".", "pos", ".", "x", "\n", "al_y", "=", "al_unit", ".", "pos", ".", "y", "\n", "dist", "=", "self", ".", "distance", "(", "x", ",", "y", ",", "al_x", ",", "al_y", ")", "\n", "\n", "if", "(", "\n", "dist", "<", "sight_range", "and", "al_unit", ".", "health", ">", "0", "\n", ")", ":", "# visible and alive", "\n", "                    ", "ally_feats", "[", "i", ",", "0", "]", "=", "1", "# visible", "\n", "ally_feats", "[", "i", ",", "1", "]", "=", "dist", "/", "sight_range", "# distance", "\n", "ally_feats", "[", "i", ",", "2", "]", "=", "(", "al_x", "-", "x", ")", "/", "sight_range", "# relative X", "\n", "ally_feats", "[", "i", ",", "3", "]", "=", "(", "al_y", "-", "y", ")", "/", "sight_range", "# relative Y", "\n", "\n", "ind", "=", "4", "\n", "if", "self", ".", "obs_all_health", ":", "\n", "                        ", "ally_feats", "[", "i", ",", "ind", "]", "=", "(", "\n", "al_unit", ".", "health", "/", "al_unit", ".", "health_max", "\n", ")", "# health", "\n", "ind", "+=", "1", "\n", "if", "self", ".", "shield_bits_ally", ">", "0", ":", "\n", "                            ", "max_shield", "=", "self", ".", "unit_max_shield", "(", "al_unit", ")", "\n", "ally_feats", "[", "i", ",", "ind", "]", "=", "(", "\n", "al_unit", ".", "shield", "/", "max_shield", "\n", ")", "# shield", "\n", "ind", "+=", "1", "\n", "\n", "", "", "if", "self", ".", "unit_type_bits", ">", "0", ":", "\n", "                        ", "type_id", "=", "self", ".", "get_unit_type_id", "(", "al_unit", ",", "True", ")", "\n", "ally_feats", "[", "i", ",", "ind", "+", "type_id", "]", "=", "1", "\n", "ind", "+=", "self", ".", "unit_type_bits", "\n", "\n", "", "if", "self", ".", "obs_last_action", ":", "\n", "                        ", "ally_feats", "[", "i", ",", "ind", ":", "]", "=", "self", ".", "last_action", "[", "al_id", "]", "\n", "\n", "# Own features", "\n", "", "", "", "ind", "=", "0", "\n", "if", "self", ".", "obs_own_health", ":", "\n", "                ", "own_feats", "[", "ind", "]", "=", "unit", ".", "health", "/", "unit", ".", "health_max", "\n", "ind", "+=", "1", "\n", "if", "self", ".", "shield_bits_ally", ">", "0", ":", "\n", "                    ", "max_shield", "=", "self", ".", "unit_max_shield", "(", "unit", ")", "\n", "own_feats", "[", "ind", "]", "=", "unit", ".", "shield", "/", "max_shield", "\n", "ind", "+=", "1", "\n", "\n", "", "", "if", "self", ".", "unit_type_bits", ">", "0", ":", "\n", "                ", "type_id", "=", "self", ".", "get_unit_type_id", "(", "unit", ",", "True", ")", "\n", "own_feats", "[", "ind", "+", "type_id", "]", "=", "1", "\n", "\n", "", "", "agent_obs", "=", "np", ".", "concatenate", "(", "\n", "(", "\n", "move_feats", ".", "flatten", "(", ")", ",", "\n", "enemy_feats", ".", "flatten", "(", ")", ",", "\n", "ally_feats", ".", "flatten", "(", ")", ",", "\n", "own_feats", ".", "flatten", "(", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "if", "self", ".", "obs_timestep_number", ":", "\n", "            ", "agent_obs", "=", "np", ".", "append", "(", "agent_obs", ",", "\n", "self", ".", "_episode_steps", "/", "self", ".", "episode_limit", ")", "\n", "\n", "", "if", "self", ".", "debug", ":", "\n", "            ", "logging", ".", "debug", "(", "\"Obs Agent: {}\"", ".", "format", "(", "agent_id", ")", ".", "center", "(", "60", ",", "\"-\"", ")", ")", "\n", "logging", ".", "debug", "(", "\"Avail. actions {}\"", ".", "format", "(", "\n", "self", ".", "get_avail_agent_actions", "(", "agent_id", ")", ")", ")", "\n", "logging", ".", "debug", "(", "\"Move feats {}\"", ".", "format", "(", "move_feats", ")", ")", "\n", "logging", ".", "debug", "(", "\"Enemy feats {}\"", ".", "format", "(", "enemy_feats", ")", ")", "\n", "logging", ".", "debug", "(", "\"Ally feats {}\"", ".", "format", "(", "ally_feats", ")", ")", "\n", "logging", ".", "debug", "(", "\"Own feats {}\"", ".", "format", "(", "own_feats", ")", ")", "\n", "\n", "", "return", "agent_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_obs": [[1014, 1021], ["StarCraft2Env.StarCraft2Env.get_obs_agent", "range"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_agent"], ["", "def", "get_obs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns all agent observations in a list.\n        NOTE: Agents should have access only to their local observations\n        during decentralised execution.\n        \"\"\"", "\n", "agents_obs", "=", "[", "self", ".", "get_obs_agent", "(", "i", ")", "for", "i", "in", "range", "(", "self", ".", "n_agents", ")", "]", "\n", "return", "agents_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_state": [[1022, 1122], ["numpy.zeros", "numpy.zeros", "StarCraft2Env.StarCraft2Env.agents.items", "StarCraft2Env.StarCraft2Env.enemies.items", "numpy.append", "numpy.append.astype", "numpy.concatenate().astype", "numpy.zeros.flatten", "numpy.zeros.flatten", "numpy.append", "numpy.append", "absl.logging.debug", "absl.logging.debug", "absl.logging.debug", "StarCraft2Env.StarCraft2Env.unit_max_cooldown", "StarCraft2Env.StarCraft2Env.last_action.flatten", "absl.logging.debug", "numpy.concatenate", "StarCraft2Env.StarCraft2Env.unit_max_shield", "StarCraft2Env.StarCraft2Env.get_unit_type_id", "StarCraft2Env.StarCraft2Env.unit_max_shield", "StarCraft2Env.StarCraft2Env.get_unit_type_id", "StarCraft2Env.StarCraft2Env.get_obs"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.unit_max_cooldown", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.unit_max_shield", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_unit_type_id", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.unit_max_shield", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_unit_type_id", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the global state.\n        NOTE: This functon should not be used during decentralised execution.\n        \"\"\"", "\n", "if", "self", ".", "obs_instead_of_state", ":", "\n", "            ", "obs_concat", "=", "np", ".", "concatenate", "(", "self", ".", "get_obs", "(", ")", ",", "axis", "=", "0", ")", ".", "astype", "(", "\n", "np", ".", "float32", "\n", ")", "\n", "return", "obs_concat", "\n", "\n", "", "nf_al", "=", "4", "+", "self", ".", "shield_bits_ally", "+", "self", ".", "unit_type_bits", "\n", "nf_en", "=", "3", "+", "self", ".", "shield_bits_enemy", "+", "self", ".", "unit_type_bits", "\n", "\n", "ally_state", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_agents", ",", "nf_al", ")", ")", "\n", "enemy_state", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_enemies", ",", "nf_en", ")", ")", "\n", "\n", "center_x", "=", "self", ".", "map_x", "/", "2", "\n", "center_y", "=", "self", ".", "map_y", "/", "2", "\n", "\n", "for", "al_id", ",", "al_unit", "in", "self", ".", "agents", ".", "items", "(", ")", ":", "\n", "            ", "if", "al_unit", ".", "health", ">", "0", ":", "\n", "                ", "x", "=", "al_unit", ".", "pos", ".", "x", "\n", "y", "=", "al_unit", ".", "pos", ".", "y", "\n", "max_cd", "=", "self", ".", "unit_max_cooldown", "(", "al_unit", ")", "\n", "\n", "ally_state", "[", "al_id", ",", "0", "]", "=", "(", "\n", "al_unit", ".", "health", "/", "al_unit", ".", "health_max", "\n", ")", "# health", "\n", "if", "(", "\n", "self", ".", "map_type", "==", "\"MMM\"", "\n", "and", "al_unit", ".", "unit_type", "==", "self", ".", "medivac_id", "\n", ")", ":", "\n", "                    ", "ally_state", "[", "al_id", ",", "1", "]", "=", "al_unit", ".", "energy", "/", "max_cd", "# energy", "\n", "", "else", ":", "\n", "                    ", "ally_state", "[", "al_id", ",", "1", "]", "=", "(", "\n", "al_unit", ".", "weapon_cooldown", "/", "max_cd", "\n", ")", "# cooldown", "\n", "", "ally_state", "[", "al_id", ",", "2", "]", "=", "(", "\n", "x", "-", "center_x", "\n", ")", "/", "self", ".", "max_distance_x", "# relative X", "\n", "ally_state", "[", "al_id", ",", "3", "]", "=", "(", "\n", "y", "-", "center_y", "\n", ")", "/", "self", ".", "max_distance_y", "# relative Y", "\n", "\n", "ind", "=", "4", "\n", "if", "self", ".", "shield_bits_ally", ">", "0", ":", "\n", "                    ", "max_shield", "=", "self", ".", "unit_max_shield", "(", "al_unit", ")", "\n", "ally_state", "[", "al_id", ",", "ind", "]", "=", "(", "\n", "al_unit", ".", "shield", "/", "max_shield", "\n", ")", "# shield", "\n", "ind", "+=", "1", "\n", "\n", "", "if", "self", ".", "unit_type_bits", ">", "0", ":", "\n", "                    ", "type_id", "=", "self", ".", "get_unit_type_id", "(", "al_unit", ",", "True", ")", "\n", "ally_state", "[", "al_id", ",", "ind", "+", "type_id", "]", "=", "1", "\n", "\n", "", "", "", "for", "e_id", ",", "e_unit", "in", "self", ".", "enemies", ".", "items", "(", ")", ":", "\n", "            ", "if", "e_unit", ".", "health", ">", "0", ":", "\n", "                ", "x", "=", "e_unit", ".", "pos", ".", "x", "\n", "y", "=", "e_unit", ".", "pos", ".", "y", "\n", "\n", "enemy_state", "[", "e_id", ",", "0", "]", "=", "(", "\n", "e_unit", ".", "health", "/", "e_unit", ".", "health_max", "\n", ")", "# health", "\n", "enemy_state", "[", "e_id", ",", "1", "]", "=", "(", "\n", "x", "-", "center_x", "\n", ")", "/", "self", ".", "max_distance_x", "# relative X", "\n", "enemy_state", "[", "e_id", ",", "2", "]", "=", "(", "\n", "y", "-", "center_y", "\n", ")", "/", "self", ".", "max_distance_y", "# relative Y", "\n", "\n", "ind", "=", "3", "\n", "if", "self", ".", "shield_bits_enemy", ">", "0", ":", "\n", "                    ", "max_shield", "=", "self", ".", "unit_max_shield", "(", "e_unit", ")", "\n", "enemy_state", "[", "e_id", ",", "ind", "]", "=", "(", "\n", "e_unit", ".", "shield", "/", "max_shield", "\n", ")", "# shield", "\n", "ind", "+=", "1", "\n", "\n", "", "if", "self", ".", "unit_type_bits", ">", "0", ":", "\n", "                    ", "type_id", "=", "self", ".", "get_unit_type_id", "(", "e_unit", ",", "False", ")", "\n", "enemy_state", "[", "e_id", ",", "ind", "+", "type_id", "]", "=", "1", "\n", "\n", "", "", "", "state", "=", "np", ".", "append", "(", "ally_state", ".", "flatten", "(", ")", ",", "enemy_state", ".", "flatten", "(", ")", ")", "\n", "if", "self", ".", "state_last_action", ":", "\n", "            ", "state", "=", "np", ".", "append", "(", "state", ",", "self", ".", "last_action", ".", "flatten", "(", ")", ")", "\n", "", "if", "self", ".", "state_timestep_number", ":", "\n", "            ", "state", "=", "np", ".", "append", "(", "state", ",", "\n", "self", ".", "_episode_steps", "/", "self", ".", "episode_limit", ")", "\n", "\n", "", "state", "=", "state", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "logging", ".", "debug", "(", "\"STATE\"", ".", "center", "(", "60", ",", "\"-\"", ")", ")", "\n", "logging", ".", "debug", "(", "\"Ally state {}\"", ".", "format", "(", "ally_state", ")", ")", "\n", "logging", ".", "debug", "(", "\"Enemy state {}\"", ".", "format", "(", "enemy_state", ")", ")", "\n", "if", "self", ".", "state_last_action", ":", "\n", "                ", "logging", ".", "debug", "(", "\"Last actions {}\"", ".", "format", "(", "self", ".", "last_action", ")", ")", "\n", "\n", "", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_obs_enemy_feats_size": [[1123, 1133], ["None"], "methods", ["None"], ["", "def", "get_obs_enemy_feats_size", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns the dimensions of the matrix containing enemy features.\n        Size is n_enemies x n_features.\n        \"\"\"", "\n", "nf_en", "=", "4", "+", "self", ".", "unit_type_bits", "\n", "\n", "if", "self", ".", "obs_all_health", ":", "\n", "            ", "nf_en", "+=", "1", "+", "self", ".", "shield_bits_enemy", "\n", "\n", "", "return", "self", ".", "n_enemies", ",", "nf_en", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_obs_ally_feats_size": [[1134, 1147], ["None"], "methods", ["None"], ["", "def", "get_obs_ally_feats_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the dimensions of the matrix containing ally features.\n        Size is n_allies x n_features.\n        \"\"\"", "\n", "nf_al", "=", "4", "+", "self", ".", "unit_type_bits", "\n", "\n", "if", "self", ".", "obs_all_health", ":", "\n", "            ", "nf_al", "+=", "1", "+", "self", ".", "shield_bits_ally", "\n", "\n", "", "if", "self", ".", "obs_last_action", ":", "\n", "            ", "nf_al", "+=", "self", ".", "n_actions", "\n", "\n", "", "return", "self", ".", "n_agents", "-", "1", ",", "nf_al", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_obs_own_feats_size": [[1148, 1158], ["None"], "methods", ["None"], ["", "def", "get_obs_own_feats_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the size of the vector containing the agents' own features.\n        \"\"\"", "\n", "own_feats", "=", "self", ".", "unit_type_bits", "\n", "if", "self", ".", "obs_own_health", ":", "\n", "            ", "own_feats", "+=", "1", "+", "self", ".", "shield_bits_ally", "\n", "", "if", "self", ".", "obs_timestep_number", ":", "\n", "            ", "own_feats", "+=", "1", "\n", "\n", "", "return", "own_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_obs_move_feats_size": [[1159, 1168], ["None"], "methods", ["None"], ["", "def", "get_obs_move_feats_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the size of the vector containing the agents's movement-related features.\"\"\"", "\n", "move_feats", "=", "self", ".", "n_actions_move", "\n", "if", "self", ".", "obs_pathing_grid", ":", "\n", "            ", "move_feats", "+=", "self", ".", "n_obs_pathing", "\n", "", "if", "self", ".", "obs_terrain_height", ":", "\n", "            ", "move_feats", "+=", "self", ".", "n_obs_height", "\n", "\n", "", "return", "move_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_obs_size": [[1169, 1181], ["StarCraft2Env.StarCraft2Env.get_obs_own_feats_size", "StarCraft2Env.StarCraft2Env.get_obs_move_feats_size", "StarCraft2Env.StarCraft2Env.get_obs_enemy_feats_size", "StarCraft2Env.StarCraft2Env.get_obs_ally_feats_size"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_obs_own_feats_size", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_obs_move_feats_size", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_obs_enemy_feats_size", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_obs_ally_feats_size"], ["", "def", "get_obs_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the size of the observation.\"\"\"", "\n", "own_feats", "=", "self", ".", "get_obs_own_feats_size", "(", ")", "\n", "move_feats", "=", "self", ".", "get_obs_move_feats_size", "(", ")", "\n", "\n", "n_enemies", ",", "n_enemy_feats", "=", "self", ".", "get_obs_enemy_feats_size", "(", ")", "\n", "n_allies", ",", "n_ally_feats", "=", "self", ".", "get_obs_ally_feats_size", "(", ")", "\n", "\n", "enemy_feats", "=", "n_enemies", "*", "n_enemy_feats", "\n", "ally_feats", "=", "n_allies", "*", "n_ally_feats", "\n", "\n", "return", "move_feats", "+", "enemy_feats", "+", "ally_feats", "+", "own_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_state_size": [[1182, 1201], ["StarCraft2Env.StarCraft2Env.get_obs_size"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_size"], ["", "def", "get_state_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the size of the global state.\"\"\"", "\n", "if", "self", ".", "obs_instead_of_state", ":", "\n", "            ", "return", "self", ".", "get_obs_size", "(", ")", "*", "self", ".", "n_agents", "\n", "\n", "", "nf_al", "=", "4", "+", "self", ".", "shield_bits_ally", "+", "self", ".", "unit_type_bits", "\n", "nf_en", "=", "3", "+", "self", ".", "shield_bits_enemy", "+", "self", ".", "unit_type_bits", "\n", "\n", "enemy_state", "=", "self", ".", "n_enemies", "*", "nf_en", "\n", "ally_state", "=", "self", ".", "n_agents", "*", "nf_al", "\n", "\n", "size", "=", "enemy_state", "+", "ally_state", "\n", "\n", "if", "self", ".", "state_last_action", ":", "\n", "            ", "size", "+=", "self", ".", "n_agents", "*", "self", ".", "n_actions", "\n", "", "if", "self", ".", "state_timestep_number", ":", "\n", "            ", "size", "+=", "1", "\n", "\n", "", "return", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_visibility_matrix": [[1202, 1245], ["numpy.zeros", "range", "StarCraft2Env.StarCraft2Env.get_unit_by_id", "StarCraft2Env.StarCraft2Env.unit_sight_range", "StarCraft2Env.StarCraft2Env.enemies.items", "enumerate", "StarCraft2Env.StarCraft2Env.distance", "StarCraft2Env.StarCraft2Env.get_unit_by_id", "StarCraft2Env.StarCraft2Env.distance", "range"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_unit_by_id", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.unit_sight_range", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.distance", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_unit_by_id", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.distance"], ["", "def", "get_visibility_matrix", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a boolean numpy array of dimensions \n        (n_agents, n_agents + n_enemies) indicating which units\n        are visible to each agent.\n        \"\"\"", "\n", "arr", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "n_agents", ",", "self", ".", "n_agents", "+", "self", ".", "n_enemies", ")", ",", "\n", "dtype", "=", "np", ".", "bool", ",", "\n", ")", "\n", "\n", "for", "agent_id", "in", "range", "(", "self", ".", "n_agents", ")", ":", "\n", "            ", "current_agent", "=", "self", ".", "get_unit_by_id", "(", "agent_id", ")", "\n", "if", "current_agent", ".", "health", ">", "0", ":", "# it agent not dead", "\n", "                ", "x", "=", "current_agent", ".", "pos", ".", "x", "\n", "y", "=", "current_agent", ".", "pos", ".", "y", "\n", "sight_range", "=", "self", ".", "unit_sight_range", "(", "agent_id", ")", "\n", "\n", "# Enemies", "\n", "for", "e_id", ",", "e_unit", "in", "self", ".", "enemies", ".", "items", "(", ")", ":", "\n", "                    ", "e_x", "=", "e_unit", ".", "pos", ".", "x", "\n", "e_y", "=", "e_unit", ".", "pos", ".", "y", "\n", "dist", "=", "self", ".", "distance", "(", "x", ",", "y", ",", "e_x", ",", "e_y", ")", "\n", "\n", "if", "(", "dist", "<", "sight_range", "and", "e_unit", ".", "health", ">", "0", ")", ":", "\n", "# visible and alive", "\n", "                        ", "arr", "[", "agent_id", ",", "self", ".", "n_agents", "+", "e_id", "]", "=", "1", "\n", "\n", "# The matrix for allies is filled symmetrically", "\n", "", "", "al_ids", "=", "[", "\n", "al_id", "for", "al_id", "in", "range", "(", "self", ".", "n_agents", ")", "\n", "if", "al_id", ">", "agent_id", "\n", "]", "\n", "for", "i", ",", "al_id", "in", "enumerate", "(", "al_ids", ")", ":", "\n", "                    ", "al_unit", "=", "self", ".", "get_unit_by_id", "(", "al_id", ")", "\n", "al_x", "=", "al_unit", ".", "pos", ".", "x", "\n", "al_y", "=", "al_unit", ".", "pos", ".", "y", "\n", "dist", "=", "self", ".", "distance", "(", "x", ",", "y", ",", "al_x", ",", "al_y", ")", "\n", "\n", "if", "(", "dist", "<", "sight_range", "and", "al_unit", ".", "health", ">", "0", ")", ":", "\n", "# visible and alive", "\n", "                        ", "arr", "[", "agent_id", ",", "al_id", "]", "=", "arr", "[", "al_id", ",", "agent_id", "]", "=", "1", "\n", "\n", "", "", "", "", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_unit_type_id": [[1246, 1290], ["None"], "methods", ["None"], ["", "def", "get_unit_type_id", "(", "self", ",", "unit", ",", "ally", ")", ":", "\n", "        ", "\"\"\"Returns the ID of unit type in the given scenario.\"\"\"", "\n", "if", "ally", ":", "# use new SC2 unit types", "\n", "            ", "type_id", "=", "unit", ".", "unit_type", "-", "self", ".", "_min_unit_type", "\n", "", "else", ":", "# use default SC2 unit types", "\n", "            ", "if", "self", ".", "map_type", "==", "\"stalkers_and_zealots\"", ":", "\n", "# id(Stalker) = 74, id(Zealot) = 73", "\n", "                ", "type_id", "=", "unit", ".", "unit_type", "-", "73", "\n", "", "elif", "self", ".", "map_type", "==", "\"colossi_stalkers_zealots\"", ":", "\n", "# id(Stalker) = 74, id(Zealot) = 73, id(Colossus) = 4", "\n", "                ", "if", "unit", ".", "unit_type", "==", "4", ":", "\n", "                    ", "type_id", "=", "0", "\n", "", "elif", "unit", ".", "unit_type", "==", "74", ":", "\n", "                    ", "type_id", "=", "1", "\n", "", "else", ":", "\n", "                    ", "type_id", "=", "2", "\n", "", "", "elif", "self", ".", "map_type", "==", "\"bane\"", ":", "\n", "                ", "if", "unit", ".", "unit_type", "==", "9", ":", "\n", "                    ", "type_id", "=", "0", "\n", "", "else", ":", "\n", "                    ", "type_id", "=", "1", "\n", "", "", "elif", "self", ".", "map_type", "==", "\"MMM\"", ":", "\n", "                ", "if", "unit", ".", "unit_type", "==", "51", ":", "\n", "                    ", "type_id", "=", "0", "\n", "", "elif", "unit", ".", "unit_type", "==", "48", ":", "\n", "                    ", "type_id", "=", "1", "\n", "", "else", ":", "\n", "                    ", "type_id", "=", "2", "\n", "# for communication", "\n", "", "", "elif", "self", ".", "map_type", "==", "\"overload_roach\"", ":", "\n", "# roach", "\n", "                ", "type_id", "=", "0", "\n", "", "elif", "self", ".", "map_type", "==", "\"overload_bane\"", ":", "\n", "# baneling", "\n", "                ", "type_id", "=", "0", "\n", "", "elif", "self", ".", "map_type", "==", "\"bZ_hM\"", ":", "\n", "                ", "if", "unit", ".", "unit_type", "==", "107", ":", "\n", "# hydralisk", "\n", "                    ", "type_id", "=", "0", "\n", "", "else", ":", "\n", "# medivacs", "\n", "                    ", "type_id", "=", "1", "\n", "\n", "", "", "", "return", "type_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_avail_agent_actions": [[1291, 1336], ["StarCraft2Env.StarCraft2Env.get_unit_by_id", "StarCraft2Env.StarCraft2Env.can_move", "StarCraft2Env.StarCraft2Env.can_move", "StarCraft2Env.StarCraft2Env.can_move", "StarCraft2Env.StarCraft2Env.can_move", "StarCraft2Env.StarCraft2Env.unit_shoot_range", "StarCraft2Env.StarCraft2Env.enemies.items", "StarCraft2Env.StarCraft2Env.distance", "StarCraft2Env.StarCraft2Env.agents.items"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_unit_by_id", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.can_move", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.can_move", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.can_move", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.can_move", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.unit_shoot_range", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.distance"], ["", "def", "get_avail_agent_actions", "(", "self", ",", "agent_id", ")", ":", "\n", "        ", "\"\"\"Returns the available actions for agent_id.\"\"\"", "\n", "unit", "=", "self", ".", "get_unit_by_id", "(", "agent_id", ")", "\n", "if", "unit", ".", "health", ">", "0", ":", "\n", "# cannot choose no-op when alive", "\n", "            ", "avail_actions", "=", "[", "0", "]", "*", "self", ".", "n_actions", "\n", "\n", "# stop should be allowed", "\n", "avail_actions", "[", "1", "]", "=", "1", "\n", "\n", "# see if we can move", "\n", "if", "self", ".", "can_move", "(", "unit", ",", "Direction", ".", "NORTH", ")", ":", "\n", "                ", "avail_actions", "[", "2", "]", "=", "1", "\n", "", "if", "self", ".", "can_move", "(", "unit", ",", "Direction", ".", "SOUTH", ")", ":", "\n", "                ", "avail_actions", "[", "3", "]", "=", "1", "\n", "", "if", "self", ".", "can_move", "(", "unit", ",", "Direction", ".", "EAST", ")", ":", "\n", "                ", "avail_actions", "[", "4", "]", "=", "1", "\n", "", "if", "self", ".", "can_move", "(", "unit", ",", "Direction", ".", "WEST", ")", ":", "\n", "                ", "avail_actions", "[", "5", "]", "=", "1", "\n", "\n", "# Can attack only alive units that are alive in the shooting range", "\n", "", "shoot_range", "=", "self", ".", "unit_shoot_range", "(", "agent_id", ")", "\n", "\n", "target_items", "=", "self", ".", "enemies", ".", "items", "(", ")", "\n", "if", "self", ".", "map_type", "==", "\"MMM\"", "and", "unit", ".", "unit_type", "==", "self", ".", "medivac_id", ":", "\n", "# Medivacs cannot heal themselves or other flying units", "\n", "                ", "target_items", "=", "[", "\n", "(", "t_id", ",", "t_unit", ")", "\n", "for", "(", "t_id", ",", "t_unit", ")", "in", "self", ".", "agents", ".", "items", "(", ")", "\n", "if", "t_unit", ".", "unit_type", "!=", "self", ".", "medivac_id", "\n", "]", "\n", "\n", "", "for", "t_id", ",", "t_unit", "in", "target_items", ":", "\n", "                ", "if", "t_unit", ".", "health", ">", "0", ":", "\n", "                    ", "dist", "=", "self", ".", "distance", "(", "\n", "unit", ".", "pos", ".", "x", ",", "unit", ".", "pos", ".", "y", ",", "t_unit", ".", "pos", ".", "x", ",", "t_unit", ".", "pos", ".", "y", "\n", ")", "\n", "if", "dist", "<=", "shoot_range", ":", "\n", "                        ", "avail_actions", "[", "t_id", "+", "self", ".", "n_actions_no_attack", "]", "=", "1", "\n", "\n", "", "", "", "return", "avail_actions", "\n", "\n", "", "else", ":", "\n", "# only no-op allowed", "\n", "            ", "return", "[", "1", "]", "+", "[", "0", "]", "*", "(", "self", ".", "n_actions", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_avail_actions": [[1337, 1344], ["range", "StarCraft2Env.StarCraft2Env.get_avail_agent_actions", "avail_actions.append"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions"], ["", "", "def", "get_avail_actions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the available actions of all agents in a list.\"\"\"", "\n", "avail_actions", "=", "[", "]", "\n", "for", "agent_id", "in", "range", "(", "self", ".", "n_agents", ")", ":", "\n", "            ", "avail_agent", "=", "self", ".", "get_avail_agent_actions", "(", "agent_id", ")", "\n", "avail_actions", ".", "append", "(", "avail_agent", ")", "\n", "", "return", "avail_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.close": [[1345, 1349], ["StarCraft2Env.StarCraft2Env._sc2_proc.close"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Close StarCraft II.\"\"\"", "\n", "if", "self", ".", "_sc2_proc", ":", "\n", "            ", "self", ".", "_sc2_proc", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.seed": [[1350, 1353], ["None"], "methods", ["None"], ["", "", "def", "seed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the random seed used by the environment.\"\"\"", "\n", "return", "self", ".", "_seed", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.render": [[1354, 1357], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "\"\"\"Not implemented.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env._kill_all_units": [[1358, 1367], ["StarCraft2Env.StarCraft2Env._controller.debug", "s2clientprotocol.debug_pb2.DebugCommand", "StarCraft2Env.StarCraft2Env.agents.values", "StarCraft2Env.StarCraft2Env.enemies.values", "s2clientprotocol.debug_pb2.DebugKillUnit"], "methods", ["None"], ["", "def", "_kill_all_units", "(", "self", ")", ":", "\n", "        ", "\"\"\"Kill all units on the map.\"\"\"", "\n", "units_alive", "=", "[", "\n", "unit", ".", "tag", "for", "unit", "in", "self", ".", "agents", ".", "values", "(", ")", "if", "unit", ".", "health", ">", "0", "\n", "]", "+", "[", "unit", ".", "tag", "for", "unit", "in", "self", ".", "enemies", ".", "values", "(", ")", "if", "unit", ".", "health", ">", "0", "]", "\n", "debug_command", "=", "[", "\n", "d_pb", ".", "DebugCommand", "(", "kill_unit", "=", "d_pb", ".", "DebugKillUnit", "(", "tag", "=", "units_alive", ")", ")", "\n", "]", "\n", "self", ".", "_controller", ".", "debug", "(", "debug_command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.init_units": [[1368, 1422], ["sorted", "range", "len", "min", "StarCraft2Env.StarCraft2Env._init_ally_unit_types", "len", "len", "StarCraft2Env.StarCraft2Env._controller.step", "StarCraft2Env.StarCraft2Env._controller.observe", "operator.attrgetter", "absl.logging.debug", "StarCraft2Env.StarCraft2Env.full_restart", "StarCraft2Env.StarCraft2Env.reset", "len", "len", "StarCraft2Env.StarCraft2Env.agents.values"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env._init_ally_unit_types", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.full_restart", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.reset"], ["", "def", "init_units", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialise the units.\"\"\"", "\n", "while", "True", ":", "\n", "# Sometimes not all units have yet been created by SC2", "\n", "            ", "self", ".", "agents", "=", "{", "}", "\n", "self", ".", "enemies", "=", "{", "}", "\n", "\n", "ally_units", "=", "[", "\n", "unit", "\n", "for", "unit", "in", "self", ".", "_obs", ".", "observation", ".", "raw_data", ".", "units", "\n", "if", "unit", ".", "owner", "==", "1", "\n", "]", "\n", "ally_units_sorted", "=", "sorted", "(", "\n", "ally_units", ",", "\n", "key", "=", "attrgetter", "(", "\"unit_type\"", ",", "\"pos.x\"", ",", "\"pos.y\"", ")", ",", "\n", "reverse", "=", "False", ",", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "ally_units_sorted", ")", ")", ":", "\n", "                ", "self", ".", "agents", "[", "i", "]", "=", "ally_units_sorted", "[", "i", "]", "\n", "if", "self", ".", "debug", ":", "\n", "                    ", "logging", ".", "debug", "(", "\n", "\"Unit {} is {}, x = {}, y = {}\"", ".", "format", "(", "\n", "len", "(", "self", ".", "agents", ")", ",", "\n", "self", ".", "agents", "[", "i", "]", ".", "unit_type", ",", "\n", "self", ".", "agents", "[", "i", "]", ".", "pos", ".", "x", ",", "\n", "self", ".", "agents", "[", "i", "]", ".", "pos", ".", "y", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "for", "unit", "in", "self", ".", "_obs", ".", "observation", ".", "raw_data", ".", "units", ":", "\n", "                ", "if", "unit", ".", "owner", "==", "2", ":", "\n", "                    ", "self", ".", "enemies", "[", "len", "(", "self", ".", "enemies", ")", "]", "=", "unit", "\n", "if", "self", ".", "_episode_count", "==", "0", ":", "\n", "                        ", "self", ".", "max_reward", "+=", "unit", ".", "health_max", "+", "unit", ".", "shield_max", "\n", "\n", "", "", "", "if", "self", ".", "_episode_count", "==", "0", ":", "\n", "                ", "min_unit_type", "=", "min", "(", "\n", "unit", ".", "unit_type", "for", "unit", "in", "self", ".", "agents", ".", "values", "(", ")", "\n", ")", "\n", "self", ".", "_init_ally_unit_types", "(", "min_unit_type", ")", "\n", "\n", "", "all_agents_created", "=", "(", "len", "(", "self", ".", "agents", ")", "==", "self", ".", "n_agents", ")", "\n", "all_enemies_created", "=", "(", "len", "(", "self", ".", "enemies", ")", "==", "self", ".", "n_enemies", ")", "\n", "\n", "if", "all_agents_created", "and", "all_enemies_created", ":", "# all good", "\n", "                ", "return", "\n", "\n", "", "try", ":", "\n", "                ", "self", ".", "_controller", ".", "step", "(", "1", ")", "\n", "self", ".", "_obs", "=", "self", ".", "_controller", ".", "observe", "(", ")", "\n", "", "except", "(", "protocol", ".", "ProtocolError", ",", "protocol", ".", "ConnectionError", ")", ":", "\n", "                ", "self", ".", "full_restart", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.update_units": [[1423, 1468], ["copy.deepcopy", "copy.deepcopy", "StarCraft2Env.StarCraft2Env.agents.items", "StarCraft2Env.StarCraft2Env.enemies.items", "StarCraft2Env.StarCraft2Env.only_medivac_left", "StarCraft2Env.StarCraft2Env.only_medivac_left"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.only_medivac_left", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.only_medivac_left"], ["", "", "", "def", "update_units", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update units after an environment step.\n        This function assumes that self._obs is up-to-date.\n        \"\"\"", "\n", "n_ally_alive", "=", "0", "\n", "n_enemy_alive", "=", "0", "\n", "\n", "# Store previous state", "\n", "self", ".", "previous_ally_units", "=", "deepcopy", "(", "self", ".", "agents", ")", "\n", "self", ".", "previous_enemy_units", "=", "deepcopy", "(", "self", ".", "enemies", ")", "\n", "\n", "for", "al_id", ",", "al_unit", "in", "self", ".", "agents", ".", "items", "(", ")", ":", "\n", "            ", "updated", "=", "False", "\n", "for", "unit", "in", "self", ".", "_obs", ".", "observation", ".", "raw_data", ".", "units", ":", "\n", "                ", "if", "al_unit", ".", "tag", "==", "unit", ".", "tag", ":", "\n", "                    ", "self", ".", "agents", "[", "al_id", "]", "=", "unit", "\n", "updated", "=", "True", "\n", "n_ally_alive", "+=", "1", "\n", "break", "\n", "\n", "", "", "if", "not", "updated", ":", "# dead", "\n", "                ", "al_unit", ".", "health", "=", "0", "\n", "\n", "", "", "for", "e_id", ",", "e_unit", "in", "self", ".", "enemies", ".", "items", "(", ")", ":", "\n", "            ", "updated", "=", "False", "\n", "for", "unit", "in", "self", ".", "_obs", ".", "observation", ".", "raw_data", ".", "units", ":", "\n", "                ", "if", "e_unit", ".", "tag", "==", "unit", ".", "tag", ":", "\n", "                    ", "self", ".", "enemies", "[", "e_id", "]", "=", "unit", "\n", "updated", "=", "True", "\n", "n_enemy_alive", "+=", "1", "\n", "break", "\n", "\n", "", "", "if", "not", "updated", ":", "# dead", "\n", "                ", "e_unit", ".", "health", "=", "0", "\n", "\n", "", "", "if", "(", "n_ally_alive", "==", "0", "and", "n_enemy_alive", ">", "0", "\n", "or", "self", ".", "only_medivac_left", "(", "ally", "=", "True", ")", ")", ":", "\n", "            ", "return", "-", "1", "# lost", "\n", "", "if", "(", "n_ally_alive", ">", "0", "and", "n_enemy_alive", "==", "0", "\n", "or", "self", ".", "only_medivac_left", "(", "ally", "=", "False", ")", ")", ":", "\n", "            ", "return", "1", "# won", "\n", "", "if", "n_ally_alive", "==", "0", "and", "n_enemy_alive", "==", "0", ":", "\n", "            ", "return", "0", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env._init_ally_unit_types": [[1469, 1498], ["None"], "methods", ["None"], ["", "def", "_init_ally_unit_types", "(", "self", ",", "min_unit_type", ")", ":", "\n", "        ", "\"\"\"Initialise ally unit types. Should be called once from the\n        init_units function.\n        \"\"\"", "\n", "self", ".", "_min_unit_type", "=", "min_unit_type", "\n", "if", "self", ".", "map_type", "==", "\"marines\"", ":", "\n", "            ", "self", ".", "marine_id", "=", "min_unit_type", "\n", "", "elif", "self", ".", "map_type", "==", "\"stalkers_and_zealots\"", ":", "\n", "            ", "self", ".", "stalker_id", "=", "min_unit_type", "\n", "self", ".", "zealot_id", "=", "min_unit_type", "+", "1", "\n", "", "elif", "self", ".", "map_type", "==", "\"colossi_stalkers_zealots\"", ":", "\n", "            ", "self", ".", "colossus_id", "=", "min_unit_type", "\n", "self", ".", "stalker_id", "=", "min_unit_type", "+", "1", "\n", "self", ".", "zealot_id", "=", "min_unit_type", "+", "2", "\n", "", "elif", "self", ".", "map_type", "==", "\"MMM\"", ":", "\n", "            ", "self", ".", "marauder_id", "=", "min_unit_type", "\n", "self", ".", "marine_id", "=", "min_unit_type", "+", "1", "\n", "self", ".", "medivac_id", "=", "min_unit_type", "+", "2", "\n", "", "elif", "self", ".", "map_type", "==", "\"zealots\"", ":", "\n", "            ", "self", ".", "zealot_id", "=", "min_unit_type", "\n", "", "elif", "self", ".", "map_type", "==", "\"hydralisks\"", ":", "\n", "            ", "self", ".", "hydralisk_id", "=", "min_unit_type", "\n", "", "elif", "self", ".", "map_type", "==", "\"stalkers\"", ":", "\n", "            ", "self", ".", "stalker_id", "=", "min_unit_type", "\n", "", "elif", "self", ".", "map_type", "==", "\"colossus\"", ":", "\n", "            ", "self", ".", "colossus_id", "=", "min_unit_type", "\n", "", "elif", "self", ".", "map_type", "==", "\"bane\"", ":", "\n", "            ", "self", ".", "baneling_id", "=", "min_unit_type", "\n", "self", ".", "zergling_id", "=", "min_unit_type", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.only_medivac_left": [[1499, 1522], ["len", "StarCraft2Env.StarCraft2Env.agents.values", "StarCraft2Env.StarCraft2Env.enemies.values", "len"], "methods", ["None"], ["", "", "def", "only_medivac_left", "(", "self", ",", "ally", ")", ":", "\n", "        ", "\"\"\"Check if only Medivac units are left.\"\"\"", "\n", "if", "self", ".", "map_type", "!=", "\"MMM\"", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "ally", ":", "\n", "            ", "units_alive", "=", "[", "\n", "a", "\n", "for", "a", "in", "self", ".", "agents", ".", "values", "(", ")", "\n", "if", "(", "a", ".", "health", ">", "0", "and", "a", ".", "unit_type", "!=", "self", ".", "medivac_id", ")", "\n", "]", "\n", "if", "len", "(", "units_alive", ")", "==", "0", ":", "\n", "                ", "return", "True", "\n", "", "return", "False", "\n", "", "else", ":", "\n", "            ", "units_alive", "=", "[", "\n", "a", "\n", "for", "a", "in", "self", ".", "enemies", ".", "values", "(", ")", "\n", "if", "(", "a", ".", "health", ">", "0", "and", "a", ".", "unit_type", "!=", "self", ".", "medivac_id", ")", "\n", "]", "\n", "if", "len", "(", "units_alive", ")", "==", "1", "and", "units_alive", "[", "0", "]", ".", "unit_type", "==", "54", ":", "\n", "                ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_unit_by_id": [[1523, 1526], ["None"], "methods", ["None"], ["", "", "def", "get_unit_by_id", "(", "self", ",", "a_id", ")", ":", "\n", "        ", "\"\"\"Get unit by ID.\"\"\"", "\n", "return", "self", ".", "agents", "[", "a_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_stats": [[1527, 1537], ["None"], "methods", ["None"], ["", "def", "get_stats", "(", "self", ")", ":", "\n", "        ", "stats", "=", "{", "\n", "\"battles_won\"", ":", "self", ".", "battles_won", ",", "\n", "\"battles_game\"", ":", "self", ".", "battles_game", ",", "\n", "\"battles_draw\"", ":", "self", ".", "timeouts", ",", "\n", "\"win_rate\"", ":", "self", ".", "battles_won", "/", "self", ".", "battles_game", ",", "\n", "\"timeouts\"", ":", "self", ".", "timeouts", ",", "\n", "\"restarts\"", ":", "self", ".", "force_restarts", ",", "\n", "}", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_info": [[1539, 1557], ["numpy.zeros", "range", "StarCraft2Env.StarCraft2Env.get_unit_by_id", "range", "StarCraft2Env.StarCraft2Env.get_unit_by_id", "StarCraft2Env.StarCraft2Env.distance"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_unit_by_id", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_unit_by_id", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.distance"], ["", "def", "get_info", "(", "self", ")", ":", "\n", "        ", "info", "=", "{", "}", "\n", "adj", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_agents", ",", "self", ".", "n_agents", ")", ")", "\n", "for", "agent_id", "in", "range", "(", "self", ".", "n_agents", ")", ":", "\n", "            ", "self_unit", "=", "self", ".", "get_unit_by_id", "(", "agent_id", ")", "\n", "self_x", "=", "self_unit", ".", "pos", ".", "x", "\n", "self_y", "=", "self_unit", ".", "pos", ".", "y", "\n", "for", "ally_id", "in", "range", "(", "agent_id", "+", "1", ",", "self", ".", "n_agents", ")", ":", "\n", "                ", "ally_unit", "=", "self", ".", "get_unit_by_id", "(", "ally_id", ")", "\n", "ally_x", "=", "ally_unit", ".", "pos", ".", "x", "\n", "ally_y", "=", "ally_unit", ".", "pos", ".", "y", "\n", "dist", "=", "self", ".", "distance", "(", "self_x", ",", "self_y", ",", "ally_x", ",", "ally_y", ")", "\n", "if", "dist", "<", "self", ".", "comm_range", ":", "\n", "                    ", "adj", "[", "agent_id", ",", "ally_id", "]", "=", "1", "\n", "adj", "[", "ally_id", ",", "agent_id", "]", "=", "1", "\n", "", "", "adj", "[", "agent_id", ",", "agent_id", "]", "=", "1", "\n", "", "info", "[", "\"adj\"", "]", "=", "adj", "\n", "return", "info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.smac_maps.get_map_params": [[41, 44], ["smac.env.starcraft2.maps.smac_maps.get_smac_map_registry"], "function", ["None"], ["def", "get_map_params", "(", "map_name", ")", ":", "\n", "    ", "map_param_registry", "=", "smac_maps", ".", "get_smac_map_registry", "(", ")", "\n", "return", "map_param_registry", "[", "map_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.__init__": [[11, 74], ["gfootball.create_environment", "FootballEnv.GoogleFootballEnv.env.seed", "gym.spaces.Discrete", "gym.spaces.Box", "range", "range"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.seed"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dense_reward", "=", "False", ",", "\n", "write_full_episode_dumps", "=", "False", ",", "\n", "write_goal_dumps", "=", "False", ",", "\n", "dump_freq", "=", "0", ",", "\n", "render", "=", "False", ",", "\n", "num_agents", "=", "4", ",", "\n", "time_limit", "=", "200", ",", "\n", "time_step", "=", "0", ",", "\n", "map_name", "=", "'academy_counterattack_hard'", ",", "\n", "stacked", "=", "False", ",", "\n", "representation", "=", "\"simple115\"", ",", "\n", "rewards", "=", "'scoring,checkpoints'", ",", "\n", "logdir", "=", "'football_dumps'", ",", "\n", "write_video", "=", "False", ",", "\n", "number_of_right_players_agent_controls", "=", "0", ",", "\n", "seed", "=", "0", ",", "\n", ")", ":", "\n", "        ", "self", ".", "dense_reward", "=", "dense_reward", "\n", "self", ".", "write_full_episode_dumps", "=", "write_full_episode_dumps", "\n", "self", ".", "write_goal_dumps", "=", "write_goal_dumps", "\n", "self", ".", "dump_freq", "=", "dump_freq", "\n", "self", ".", "render", "=", "render", "\n", "self", ".", "n_agents", "=", "num_agents", "\n", "self", ".", "episode_limit", "=", "time_limit", "\n", "self", ".", "time_step", "=", "time_step", "\n", "self", ".", "env_name", "=", "map_name", "\n", "self", ".", "stacked", "=", "stacked", "\n", "self", ".", "representation", "=", "representation", "\n", "self", ".", "rewards", "=", "rewards", "\n", "self", ".", "logdir", "=", "logdir", "\n", "self", ".", "write_video", "=", "write_video", "\n", "self", ".", "number_of_right_players_agent_controls", "=", "number_of_right_players_agent_controls", "\n", "self", ".", "seed", "=", "seed", "\n", "\n", "self", ".", "env", "=", "football_env", ".", "create_environment", "(", "\n", "write_full_episode_dumps", "=", "self", ".", "write_full_episode_dumps", ",", "\n", "write_goal_dumps", "=", "self", ".", "write_goal_dumps", ",", "\n", "env_name", "=", "self", ".", "env_name", ",", "\n", "stacked", "=", "self", ".", "stacked", ",", "\n", "representation", "=", "self", ".", "representation", ",", "\n", "rewards", "=", "self", ".", "rewards", ",", "\n", "logdir", "=", "self", ".", "logdir", ",", "\n", "render", "=", "self", ".", "render", ",", "\n", "write_video", "=", "self", ".", "write_video", ",", "\n", "dump_frequency", "=", "self", ".", "dump_freq", ",", "\n", "number_of_left_players_agent_controls", "=", "self", ".", "n_agents", ",", "\n", "number_of_right_players_agent_controls", "=", "self", ".", "number_of_right_players_agent_controls", ",", "\n", "channel_dimensions", "=", "(", "observation_preprocessing", ".", "SMM_WIDTH", ",", "observation_preprocessing", ".", "SMM_HEIGHT", ")", ")", "\n", "self", ".", "env", ".", "seed", "(", "self", ".", "seed", ")", "\n", "\n", "obs_space_low", "=", "self", ".", "env", ".", "observation_space", ".", "low", "[", "0", "]", "\n", "obs_space_high", "=", "self", ".", "env", ".", "observation_space", ".", "high", "[", "0", "]", "\n", "\n", "self", ".", "action_space", "=", "[", "gym", ".", "spaces", ".", "Discrete", "(", "\n", "self", ".", "env", ".", "action_space", ".", "nvec", "[", "1", "]", ")", "for", "_", "in", "range", "(", "self", ".", "n_agents", ")", "]", "\n", "self", ".", "observation_space", "=", "[", "\n", "gym", ".", "spaces", ".", "Box", "(", "low", "=", "obs_space_low", ",", "high", "=", "obs_space_high", ",", "dtype", "=", "self", ".", "env", ".", "observation_space", ".", "dtype", ")", "for", "_", "in", "range", "(", "self", ".", "n_agents", ")", "\n", "]", "\n", "\n", "self", ".", "n_actions", "=", "self", ".", "action_space", "[", "0", "]", ".", "n", "\n", "self", ".", "obs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step": [[75, 90], ["torch.is_tensor", "FootballEnv.GoogleFootballEnv.env.step", "_actions.cpu().numpy", "_actions.cpu().numpy.tolist", "sum", "_actions.cpu"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum"], ["", "def", "step", "(", "self", ",", "_actions", ")", ":", "\n", "        ", "\"\"\"Returns reward, terminated, info.\"\"\"", "\n", "if", "th", ".", "is_tensor", "(", "_actions", ")", ":", "\n", "            ", "actions", "=", "_actions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "actions", "=", "_actions", "\n", "", "self", ".", "time_step", "+=", "1", "\n", "obs", ",", "rewards", ",", "done", ",", "infos", "=", "self", ".", "env", ".", "step", "(", "actions", ".", "tolist", "(", ")", ")", "\n", "\n", "self", ".", "obs", "=", "obs", "\n", "\n", "if", "self", ".", "time_step", ">=", "self", ".", "episode_limit", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "", "return", "sum", "(", "rewards", ")", ",", "done", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs": [[91, 94], ["FootballEnv.GoogleFootballEnv.obs.reshape"], "methods", ["None"], ["", "def", "get_obs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns all agent observations in a list.\"\"\"", "\n", "return", "self", ".", "obs", ".", "reshape", "(", "self", ".", "n_agents", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_agent": [[95, 98], ["FootballEnv.GoogleFootballEnv.obs[].reshape"], "methods", ["None"], ["", "def", "get_obs_agent", "(", "self", ",", "agent_id", ")", ":", "\n", "        ", "\"\"\"Returns observation for agent_id.\"\"\"", "\n", "return", "self", ".", "obs", "[", "agent_id", "]", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_size": [[99, 103], ["numpy.array", "int", "numpy.array.prod"], "methods", ["None"], ["", "def", "get_obs_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the size of the observation.\"\"\"", "\n", "obs_size", "=", "np", ".", "array", "(", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "1", ":", "]", ")", "\n", "return", "int", "(", "obs_size", ".", "prod", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_global_state": [[104, 106], ["FootballEnv.GoogleFootballEnv.obs.flatten"], "methods", ["None"], ["", "def", "get_global_state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "obs", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state": [[107, 110], ["FootballEnv.GoogleFootballEnv.get_global_state"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_global_state"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the global state.\"\"\"", "\n", "return", "self", ".", "get_global_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state_size": [[111, 114], ["FootballEnv.GoogleFootballEnv.get_obs_size"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs_size"], ["", "def", "get_state_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the size of the global state.\"\"\"", "\n", "return", "self", ".", "get_obs_size", "(", ")", "*", "self", ".", "n_agents", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_actions": [[115, 118], ["range", "range"], "methods", ["None"], ["", "def", "get_avail_actions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the available actions of all agents in a list.\"\"\"", "\n", "return", "[", "[", "1", "for", "_", "in", "range", "(", "self", ".", "n_actions", ")", "]", "for", "agent_id", "in", "range", "(", "self", ".", "n_agents", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_agent_actions": [[119, 122], ["FootballEnv.GoogleFootballEnv.get_avail_actions"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_actions"], ["", "def", "get_avail_agent_actions", "(", "self", ",", "agent_id", ")", ":", "\n", "        ", "\"\"\"Returns the available actions for agent_id.\"\"\"", "\n", "return", "self", ".", "get_avail_actions", "(", ")", "[", "agent_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_total_actions": [[123, 126], ["None"], "methods", ["None"], ["", "def", "get_total_actions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the total number of actions an agent could ever take.\"\"\"", "\n", "return", "self", ".", "action_space", "[", "0", "]", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.reset": [[127, 133], ["FootballEnv.GoogleFootballEnv.env.reset", "FootballEnv.GoogleFootballEnv.get_obs", "FootballEnv.GoogleFootballEnv.get_global_state"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.reset", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_global_state"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns initial observations and states.\"\"\"", "\n", "self", ".", "time_step", "=", "0", "\n", "self", ".", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "return", "self", ".", "get_obs", "(", ")", ",", "self", ".", "get_global_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.render": [[134, 136], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.close": [[137, 139], ["FootballEnv.GoogleFootballEnv.env.close"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.seed": [[140, 142], ["None"], "methods", ["None"], ["", "def", "seed", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.save_replay": [[143, 146], ["None"], "methods", ["None"], ["", "def", "save_replay", "(", "self", ")", ":", "\n", "        ", "\"\"\"Save a replay.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_stats": [[147, 149], ["None"], "methods", ["None"], ["", "def", "get_stats", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.callbacks.local_reward_callback.LocalRewardCallback.__init__": [[7, 9], ["pymarl.callbacks.callback.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.callbacks.local_reward_callback.LocalRewardCallback.metrics": [[10, 33], ["[].cpu", "[].cpu", "model_data[].cpu", "local_rewards.view().numpy.view().numpy.view().numpy", "local_values.view().numpy.view().numpy.view().numpy", "numpy.stack", "numpy.array", "numpy.mean", "numpy.mean", "numpy.mean", "[].cpu.repeat().reshape", "local_values.view().numpy.view().numpy.reshape", "numpy.stack", "numpy.var", "numpy.var", "numpy.corrcoef", "local_rewards.view().numpy.view().numpy.view", "local_values.view().numpy.view().numpy.view", "[].cpu.repeat", "numpy.corrcoef", "range", "numpy.isnan"], "methods", ["None"], ["", "def", "metrics", "(", "self", ",", "env_data", ",", "model_data", ",", "**", "kwargs", ")", ":", "\n", "        ", "metrics", "=", "{", "}", "\n", "local_rewards", "=", "env_data", "[", "'local_rewards'", "]", "[", ":", ",", ":", "-", "1", "]", ".", "cpu", "(", ")", "\n", "global_rewards", "=", "env_data", "[", "'reward'", "]", "[", ":", ",", ":", "-", "1", "]", ".", "cpu", "(", ")", "\n", "local_values", "=", "model_data", "[", "\"local_q_chosen\"", "]", ".", "cpu", "(", ")", "\n", "B", ",", "T", ",", "n_agents", "=", "local_rewards", ".", "shape", "\n", "local_rewards", "=", "local_rewards", ".", "view", "(", "B", "*", "T", ",", "n_agents", ")", ".", "numpy", "(", ")", "\n", "local_values", "=", "local_values", ".", "view", "(", "B", "*", "T", ",", "n_agents", ")", ".", "numpy", "(", ")", "\n", "local_sbs", "=", "np", ".", "stack", "(", "[", "local_rewards", ",", "local_values", "]", ",", "axis", "=", "-", "1", ")", "\n", "corrs", "=", "np", ".", "array", "(", "[", "np", ".", "corrcoef", "(", "local_sbs", "[", "i", ",", ":", ",", ":", "]", ",", "rowvar", "=", "False", ")", "[", "0", ",", "1", "]", "for", "i", "in", "range", "(", "B", "*", "T", ")", "]", ")", "\n", "corrs", "=", "corrs", "[", "~", "np", ".", "isnan", "(", "corrs", ")", "]", "\n", "local_corr", "=", "np", ".", "mean", "(", "corrs", ")", "\n", "metrics", "[", "\"localq_localr_corr\"", "]", "=", "local_corr", "\n", "local_rewards_var", "=", "np", ".", "mean", "(", "np", ".", "var", "(", "local_rewards", ",", "axis", "=", "-", "1", ")", ")", "\n", "local_values_var", "=", "np", ".", "mean", "(", "np", ".", "var", "(", "local_values", ",", "axis", "=", "-", "1", ")", ")", "\n", "metrics", "[", "\"local_reward_var\"", "]", "=", "local_rewards_var", "\n", "metrics", "[", "\"local_q_var\"", "]", "=", "local_values_var", "\n", "global_rewards_flat", "=", "global_rewards", ".", "repeat", "(", "(", "1", ",", "1", ",", "n_agents", ")", ")", ".", "reshape", "(", "B", "*", "T", "*", "n_agents", ")", "\n", "local_values_flat", "=", "local_values", ".", "reshape", "(", "B", "*", "T", "*", "n_agents", ")", "\n", "global_sbs", "=", "np", ".", "stack", "(", "[", "global_rewards_flat", ",", "local_values_flat", "]", ",", "axis", "=", "-", "1", ")", "\n", "global_corr", "=", "np", ".", "corrcoef", "(", "global_sbs", ",", "rowvar", "=", "False", ")", "[", "0", ",", "1", "]", "\n", "metrics", "[", "\"localq_globalr_corr\"", "]", "=", "global_corr", "\n", "return", "metrics", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.callbacks.callback.Callback.__init__": [[4, 6], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.callbacks.callback.Callback.metrics": [[7, 9], ["None"], "methods", ["None"], ["", "def", "metrics", "(", "self", ",", "env_data", ",", "model_data", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "{", "}", "", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_runner.ParallelRunner.__init__": [[14, 49], ["zip", "enumerate", "parallel_runner.ParallelRunner.parent_conns[].send", "parallel_runner.ParallelRunner.parent_conns[].recv", "parallel_runner.ParallelRunner.set_info_scheme", "multiprocessing.Process", "parallel_runner.ParallelRunner.ps.append", "p.start", "multiprocessing.Pipe", "range", "parallel_runner.CloudpickleWrapper", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.set_info_scheme"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "logger", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "batch_size", "=", "self", ".", "args", ".", "batch_size_run", "\n", "\n", "# Make subprocesses for the envs", "\n", "self", ".", "parent_conns", ",", "self", ".", "worker_conns", "=", "zip", "(", "*", "[", "Pipe", "(", ")", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", ")", "\n", "env_fn", "=", "env_REGISTRY", "[", "self", ".", "args", ".", "env", "]", "\n", "self", ".", "ps", "=", "[", "]", "\n", "for", "i", ",", "worker_conn", "in", "enumerate", "(", "self", ".", "worker_conns", ")", ":", "\n", "            ", "ps", "=", "Process", "(", "target", "=", "env_worker", ",", "\n", "args", "=", "(", "worker_conn", ",", "CloudpickleWrapper", "(", "partial", "(", "env_fn", ",", "**", "self", ".", "args", ".", "env_args", ")", ")", ")", ")", "\n", "self", ".", "ps", ".", "append", "(", "ps", ")", "\n", "\n", "", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "daemon", "=", "True", "\n", "p", ".", "start", "(", ")", "\n", "\n", "", "self", ".", "parent_conns", "[", "0", "]", ".", "send", "(", "(", "\"get_env_info\"", ",", "None", ")", ")", "\n", "self", ".", "env_info", "=", "self", ".", "parent_conns", "[", "0", "]", ".", "recv", "(", ")", "\n", "self", ".", "episode_limit", "=", "self", ".", "env_info", "[", "\"episode_limit\"", "]", "\n", "\n", "self", ".", "info_scheme", "=", "{", "}", "\n", "self", ".", "set_info_scheme", "(", ")", "\n", "\n", "self", ".", "t", "=", "0", "\n", "\n", "self", ".", "t_env", "=", "0", "\n", "\n", "self", ".", "train_returns", "=", "[", "]", "\n", "self", ".", "test_returns", "=", "[", "]", "\n", "self", ".", "train_stats", "=", "{", "}", "\n", "self", ".", "test_stats", "=", "{", "}", "\n", "\n", "self", ".", "log_train_stats_t", "=", "-", "100000", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_runner.ParallelRunner.setup": [[50, 57], ["functools.partial"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "scheme", ",", "groups", ",", "preprocess", ",", "mac", ")", ":", "\n", "        ", "self", ".", "new_batch", "=", "partial", "(", "EpisodeBatch", ",", "scheme", ",", "groups", ",", "self", ".", "batch_size", ",", "self", ".", "episode_limit", "+", "1", ",", "\n", "preprocess", "=", "preprocess", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "mac", "=", "mac", "\n", "self", ".", "scheme", "=", "scheme", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "preprocess", "=", "preprocess", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_runner.ParallelRunner.get_env_info": [[58, 60], ["None"], "methods", ["None"], ["", "def", "get_env_info", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_runner.ParallelRunner.close_env": [[61, 64], ["parent_conn.send"], "methods", ["None"], ["", "def", "close_env", "(", "self", ")", ":", "\n", "        ", "for", "parent_conn", "in", "self", ".", "parent_conns", ":", "\n", "            ", "parent_conn", ".", "send", "(", "(", "\"close\"", ",", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_runner.ParallelRunner.reset": [[65, 89], ["parallel_runner.ParallelRunner.new_batch", "parallel_runner.ParallelRunner.batch.update", "parent_conn.send", "parent_conn.recv", "pre_transition_data[].append", "pre_transition_data[].append", "pre_transition_data[].append", "parallel_runner.ParallelRunner.add_info"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.add_info"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch", "=", "self", ".", "new_batch", "(", ")", "\n", "\n", "# Reset the envs", "\n", "for", "parent_conn", "in", "self", ".", "parent_conns", ":", "\n", "            ", "parent_conn", ".", "send", "(", "(", "\"reset\"", ",", "None", ")", ")", "\n", "\n", "", "pre_transition_data", "=", "{", "\n", "\"state\"", ":", "[", "]", ",", "\n", "\"avail_actions\"", ":", "[", "]", ",", "\n", "\"obs\"", ":", "[", "]", "\n", "}", "\n", "# Get the obs, state and avail_actions back", "\n", "for", "parent_conn", "in", "self", ".", "parent_conns", ":", "\n", "            ", "data", "=", "parent_conn", ".", "recv", "(", ")", "\n", "pre_transition_data", "[", "\"state\"", "]", ".", "append", "(", "data", "[", "\"state\"", "]", ")", "\n", "pre_transition_data", "[", "\"avail_actions\"", "]", ".", "append", "(", "data", "[", "\"avail_actions\"", "]", ")", "\n", "pre_transition_data", "[", "\"obs\"", "]", ".", "append", "(", "data", "[", "\"obs\"", "]", ")", "\n", "self", ".", "add_info", "(", "pre_transition_data", ",", "data", "[", "\"info\"", "]", ")", "\n", "\n", "", "self", ".", "batch", ".", "update", "(", "pre_transition_data", ",", "ts", "=", "0", ")", "\n", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "env_steps_this_run", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_runner.ParallelRunner.run": [[90, 218], ["parallel_runner.ParallelRunner.reset", "parallel_runner.ParallelRunner.mac.init_hidden", "getattr", "cur_stats.update", "cur_returns.extend", "parallel_runner.ParallelRunner.to().numpy", "parallel_runner.ParallelRunner.batch.update", "enumerate", "all", "enumerate", "parallel_runner.ParallelRunner.batch.update", "parallel_runner.ParallelRunner.batch.update", "parent_conn.send", "parent_conn.recv", "env_stats.append", "cur_stats.get", "sum", "cur_stats.get", "max", "parallel_runner.ParallelRunner._log", "range", "range", "range", "enumerate", "parallel_runner.ParallelRunner.mac.select_actions", "parallel_runner.ParallelRunner.mac.select_actions", "parallel_runner.ParallelRunner.unsqueeze().to", "probs.unsqueeze().to", "sum", "len", "parallel_runner.ParallelRunner._log", "hasattr", "parallel_runner.ParallelRunner.to", "enumerate", "parent_conn.recv", "post_transition_data[].append", "post_transition_data[].append", "parallel_runner.ParallelRunner.add_info", "pre_transition_data[].append", "pre_transition_data[].append", "pre_transition_data[].append", "parallel_runner.ParallelRunner.add_info", "set.union", "parallel_runner.ParallelRunner.logger.log_stat", "parallel_runner.ParallelRunner.unsqueeze", "probs.unsqueeze", "parent_conn.send", "final_post_infos.append", "d.get", "data[].get", "data[].items", "set", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.reset", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.extend", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner._log", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.lica_controller.LICAMAC.select_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.lica_controller.LICAMAC.select_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner._log", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.add_info", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.add_info", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat"], ["", "def", "run", "(", "self", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n", "all_terminated", "=", "False", "\n", "episode_returns", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "episode_lengths", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "self", ".", "mac", ".", "init_hidden", "(", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "terminated", "=", "[", "False", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "envs_not_terminated", "=", "[", "b_idx", "for", "b_idx", ",", "termed", "in", "enumerate", "(", "terminated", ")", "if", "not", "termed", "]", "\n", "final_post_infos", "=", "[", "]", "# may store extra stats like battle won. this is filled in ORDER OF TERMINATION", "\n", "\n", "save_probs", "=", "getattr", "(", "self", ".", "args", ",", "\"save_probs\"", ",", "False", ")", "\n", "while", "True", ":", "\n", "\n", "# Pass the entire batch of experiences up till now to the agents", "\n", "# Receive the actions for each agent at this timestep in a batch for each un-terminated env", "\n", "            ", "if", "save_probs", ":", "\n", "                ", "actions", ",", "probs", "=", "self", ".", "mac", ".", "select_actions", "(", "self", ".", "batch", ",", "t_ep", "=", "self", ".", "t", ",", "t_env", "=", "self", ".", "t_env", ",", "bs", "=", "envs_not_terminated", ",", "test_mode", "=", "test_mode", ")", "\n", "", "else", ":", "\n", "                ", "actions", "=", "self", ".", "mac", ".", "select_actions", "(", "self", ".", "batch", ",", "t_ep", "=", "self", ".", "t", ",", "t_env", "=", "self", ".", "t_env", ",", "bs", "=", "envs_not_terminated", ",", "test_mode", "=", "test_mode", ")", "\n", "\n", "", "cpu_actions", "=", "actions", ".", "to", "(", "\"cpu\"", ")", ".", "numpy", "(", ")", "\n", "\n", "# Update the actions taken", "\n", "actions_chosen", "=", "{", "\n", "\"actions\"", ":", "actions", ".", "unsqueeze", "(", "1", ")", ".", "to", "(", "\"cpu\"", ")", ",", "\n", "}", "\n", "if", "save_probs", ":", "\n", "                ", "actions_chosen", "[", "\"probs\"", "]", "=", "probs", ".", "unsqueeze", "(", "1", ")", ".", "to", "(", "\"cpu\"", ")", "\n", "\n", "", "self", ".", "batch", ".", "update", "(", "actions_chosen", ",", "bs", "=", "envs_not_terminated", ",", "ts", "=", "self", ".", "t", ",", "mark_filled", "=", "False", ")", "\n", "\n", "# Send actions to each env", "\n", "action_idx", "=", "0", "\n", "for", "idx", ",", "parent_conn", "in", "enumerate", "(", "self", ".", "parent_conns", ")", ":", "\n", "                ", "if", "idx", "in", "envs_not_terminated", ":", "# We produced actions for this env", "\n", "                    ", "if", "not", "terminated", "[", "idx", "]", ":", "# Only send the actions to the env if it hasn't terminated", "\n", "                        ", "parent_conn", ".", "send", "(", "(", "\"step\"", ",", "cpu_actions", "[", "action_idx", "]", ")", ")", "\n", "", "action_idx", "+=", "1", "# actions is not a list over every env", "\n", "\n", "# Update envs_not_terminated", "\n", "", "", "envs_not_terminated", "=", "[", "b_idx", "for", "b_idx", ",", "termed", "in", "enumerate", "(", "terminated", ")", "if", "not", "termed", "]", "\n", "all_terminated", "=", "all", "(", "terminated", ")", "\n", "if", "all_terminated", ":", "\n", "                ", "break", "\n", "\n", "# Post step data we will insert for the current timestep", "\n", "", "post_transition_data", "=", "{", "\n", "\"reward\"", ":", "[", "]", ",", "\n", "\"terminated\"", ":", "[", "]", "\n", "}", "\n", "# Data for the next step we will insert in order to select an action", "\n", "pre_transition_data", "=", "{", "\n", "\"state\"", ":", "[", "]", ",", "\n", "\"avail_actions\"", ":", "[", "]", ",", "\n", "\"obs\"", ":", "[", "]", "\n", "}", "\n", "\n", "# Receive data back for each unterminated env", "\n", "for", "idx", ",", "parent_conn", "in", "enumerate", "(", "self", ".", "parent_conns", ")", ":", "\n", "                ", "if", "not", "terminated", "[", "idx", "]", ":", "\n", "                    ", "data", "=", "parent_conn", ".", "recv", "(", ")", "\n", "# Remaining data for this current timestep", "\n", "post_transition_data", "[", "\"reward\"", "]", ".", "append", "(", "(", "data", "[", "\"reward\"", "]", ",", ")", ")", "\n", "\n", "episode_returns", "[", "idx", "]", "+=", "data", "[", "\"reward\"", "]", "\n", "episode_lengths", "[", "idx", "]", "+=", "1", "\n", "if", "not", "test_mode", ":", "\n", "                        ", "self", ".", "env_steps_this_run", "+=", "1", "\n", "\n", "", "env_terminated", "=", "False", "\n", "if", "data", "[", "\"terminated\"", "]", ":", "\n", "                        ", "post_info_scalars", "=", "{", "key", ":", "val", "for", "(", "key", ",", "val", ")", "in", "data", "[", "\"post_info\"", "]", ".", "items", "(", ")", "if", "np", ".", "array", "(", "val", ")", ".", "size", "==", "1", "}", "\n", "final_post_infos", ".", "append", "(", "post_info_scalars", ")", "\n", "", "if", "data", "[", "\"terminated\"", "]", "and", "not", "data", "[", "\"post_info\"", "]", ".", "get", "(", "\"episode_limit\"", ",", "False", ")", ":", "\n", "                        ", "env_terminated", "=", "True", "\n", "", "terminated", "[", "idx", "]", "=", "data", "[", "\"terminated\"", "]", "\n", "post_transition_data", "[", "\"terminated\"", "]", ".", "append", "(", "(", "env_terminated", ",", ")", ")", "\n", "self", ".", "add_info", "(", "post_transition_data", ",", "data", "[", "\"post_info\"", "]", ")", "\n", "\n", "# Data for the next timestep needed to select an action", "\n", "pre_transition_data", "[", "\"state\"", "]", ".", "append", "(", "data", "[", "\"state\"", "]", ")", "\n", "pre_transition_data", "[", "\"avail_actions\"", "]", ".", "append", "(", "data", "[", "\"avail_actions\"", "]", ")", "\n", "pre_transition_data", "[", "\"obs\"", "]", ".", "append", "(", "data", "[", "\"obs\"", "]", ")", "\n", "self", ".", "add_info", "(", "pre_transition_data", ",", "data", "[", "\"info\"", "]", ")", "\n", "\n", "# Add post_transiton data into the batch", "\n", "", "", "self", ".", "batch", ".", "update", "(", "post_transition_data", ",", "bs", "=", "envs_not_terminated", ",", "ts", "=", "self", ".", "t", ",", "mark_filled", "=", "False", ")", "\n", "\n", "# Move onto the next timestep", "\n", "self", ".", "t", "+=", "1", "\n", "\n", "# Add the pre-transition data", "\n", "self", ".", "batch", ".", "update", "(", "pre_transition_data", ",", "bs", "=", "envs_not_terminated", ",", "ts", "=", "self", ".", "t", ",", "mark_filled", "=", "True", ")", "\n", "\n", "", "if", "not", "test_mode", ":", "\n", "            ", "self", ".", "t_env", "+=", "self", ".", "env_steps_this_run", "\n", "\n", "# Get stats back for each env", "\n", "", "for", "parent_conn", "in", "self", ".", "parent_conns", ":", "\n", "            ", "parent_conn", ".", "send", "(", "(", "\"get_stats\"", ",", "None", ")", ")", "\n", "\n", "", "env_stats", "=", "[", "]", "\n", "for", "parent_conn", "in", "self", ".", "parent_conns", ":", "\n", "            ", "env_stat", "=", "parent_conn", ".", "recv", "(", ")", "\n", "env_stats", ".", "append", "(", "env_stat", ")", "\n", "\n", "", "cur_stats", "=", "self", ".", "test_stats", "if", "test_mode", "else", "self", ".", "train_stats", "\n", "cur_returns", "=", "self", ".", "test_returns", "if", "test_mode", "else", "self", ".", "train_returns", "\n", "log_prefix", "=", "\"test_\"", "if", "test_mode", "else", "\"\"", "\n", "infos", "=", "[", "cur_stats", "]", "+", "final_post_infos", "\n", "\n", "cur_stats", ".", "update", "(", "{", "k", ":", "sum", "(", "d", ".", "get", "(", "k", ",", "0", ")", "for", "d", "in", "infos", ")", "for", "k", "in", "set", ".", "union", "(", "*", "[", "set", "(", "d", ")", "for", "d", "in", "infos", "]", ")", "}", ")", "\n", "cur_stats", "[", "\"n_episodes\"", "]", "=", "self", ".", "batch_size", "+", "cur_stats", ".", "get", "(", "\"n_episodes\"", ",", "0", ")", "\n", "cur_stats", "[", "\"ep_length\"", "]", "=", "sum", "(", "episode_lengths", ")", "+", "cur_stats", ".", "get", "(", "\"ep_length\"", ",", "0", ")", "\n", "\n", "cur_returns", ".", "extend", "(", "episode_returns", ")", "\n", "\n", "n_test_runs", "=", "max", "(", "1", ",", "self", ".", "args", ".", "test_nepisode", "//", "self", ".", "batch_size", ")", "*", "self", ".", "batch_size", "\n", "if", "test_mode", "and", "(", "len", "(", "self", ".", "test_returns", ")", "==", "n_test_runs", ")", ":", "\n", "            ", "self", ".", "_log", "(", "cur_returns", ",", "cur_stats", ",", "log_prefix", ")", "\n", "", "elif", "self", ".", "t_env", "-", "self", ".", "log_train_stats_t", ">=", "self", ".", "args", ".", "runner_log_interval", ":", "\n", "            ", "self", ".", "_log", "(", "cur_returns", ",", "cur_stats", ",", "log_prefix", ")", "\n", "if", "hasattr", "(", "self", ".", "mac", ".", "action_selector", ",", "\"epsilon\"", ")", ":", "\n", "                ", "self", ".", "logger", ".", "log_stat", "(", "\"epsilon\"", ",", "self", ".", "mac", ".", "action_selector", ".", "epsilon", ",", "self", ".", "t_env", ")", "\n", "", "self", ".", "log_train_stats_t", "=", "self", ".", "t_env", "\n", "\n", "", "return", "self", ".", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_runner.ParallelRunner._log": [[219, 228], ["parallel_runner.ParallelRunner.logger.log_stat", "parallel_runner.ParallelRunner.logger.log_stat", "returns.clear", "stats.items", "stats.clear", "numpy.mean", "numpy.std", "parallel_runner.ParallelRunner.logger.log_stat"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat"], ["", "def", "_log", "(", "self", ",", "returns", ",", "stats", ",", "prefix", ")", ":", "\n", "        ", "self", ".", "logger", ".", "log_stat", "(", "prefix", "+", "\"return_mean\"", ",", "np", ".", "mean", "(", "returns", ")", ",", "self", ".", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "prefix", "+", "\"return_std\"", ",", "np", ".", "std", "(", "returns", ")", ",", "self", ".", "t_env", ")", "\n", "returns", ".", "clear", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "stats", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "\"n_episodes\"", ":", "\n", "                ", "self", ".", "logger", ".", "log_stat", "(", "prefix", "+", "k", "+", "\"_mean\"", ",", "v", "/", "stats", "[", "\"n_episodes\"", "]", ",", "self", ".", "t_env", ")", "\n", "", "", "stats", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_runner.ParallelRunner.add_info": [[229, 234], ["info.items", "data[].append"], "methods", ["None"], ["", "def", "add_info", "(", "self", ",", "data", ",", "info", ")", ":", "\n", "        ", "for", "key", ",", "val", "in", "info", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "data", ":", "\n", "                ", "data", "[", "key", "]", "=", "[", "]", "\n", "", "data", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_runner.ParallelRunner.set_info_scheme": [[235, 262], ["parallel_runner.ParallelRunner.parent_conns[].send", "parallel_runner.ParallelRunner.parent_conns[].recv", "parallel_runner.ParallelRunner.set_info_scheme.add_dict"], "methods", ["None"], ["", "", "def", "set_info_scheme", "(", "self", ")", ":", "\n", "        ", "self", ".", "parent_conns", "[", "0", "]", ".", "send", "(", "(", "\"reset\"", ",", "None", ",", "True", ")", ")", "\n", "reset_data", "=", "self", ".", "parent_conns", "[", "0", "]", ".", "recv", "(", ")", "\n", "def", "add_dict", "(", "d", ")", ":", "\n", "            ", "for", "key", ",", "val", "in", "d", ".", "items", "(", ")", ":", "\n", "                ", "item_scheme", "=", "{", "}", "\n", "if", "isinstance", "(", "val", ",", "Data", ")", ":", "\n", "                    ", "x_shape", "=", "val", ".", "x", ".", "shape", "[", "1", ":", "]", "if", "(", "val", ".", "x", "is", "not", "None", ")", "else", "0", "\n", "edge_shape", "=", "val", ".", "edge_attr", ".", "shape", "[", "1", ":", "]", "if", "(", "val", ".", "edge_attr", "is", "not", "None", ")", "else", "0", "\n", "item_scheme", "[", "'vshape'", "]", "=", "(", "x_shape", ",", "edge_shape", ")", "\n", "item_scheme", "[", "'dtype'", "]", "=", "Data", "\n", "", "else", ":", "\n", "                    ", "val", "=", "np", ".", "array", "(", "val", ")", "\n", "item_scheme", "[", "'vshape'", "]", "=", "val", ".", "shape", "[", "1", ":", "]", "\n", "if", "len", "(", "val", ".", "shape", ")", ">", "0", ":", "\n", "                        ", "if", "val", ".", "shape", "[", "0", "]", "==", "self", ".", "env_info", "[", "'n_agents'", "]", ":", "\n", "                            ", "item_scheme", "[", "'group'", "]", "=", "'agents'", "\n", "", "", "item_scheme", "[", "'dtype'", "]", "=", "numpy_to_torch_dtype", "(", "val", ".", "dtype", ")", "\n", "", "self", ".", "info_scheme", "[", "key", "]", "=", "item_scheme", "\n", "", "", "add_dict", "(", "reset_data", "[", "\"info\"", "]", ")", "\n", "try", ":", "\n", "            ", "actions", "=", "np", ".", "argmax", "(", "reset_data", "[", "\"avail_actions\"", "]", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "parent_conns", "[", "0", "]", ".", "send", "(", "(", "\"step\"", ",", "actions", ",", "True", ")", ")", "\n", "step_data", "=", "self", ".", "parent_conns", "[", "0", "]", ".", "recv", "(", ")", "\n", "add_dict", "(", "step_data", "[", "\"post_info\"", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Couldn't initialise step info scheme in parallel_info_runner:\"", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_runner.CloudpickleWrapper.__init__": [[333, 335], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "x", "=", "x", "\n", "", "def", "__getstate__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_runner.CloudpickleWrapper.__getstate__": [[335, 338], ["cloudpickle.dumps"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "import", "cloudpickle", "\n", "return", "cloudpickle", ".", "dumps", "(", "self", ".", "x", ")", "\n", "", "def", "__setstate__", "(", "self", ",", "ob", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_runner.CloudpickleWrapper.__setstate__": [[338, 341], ["pickle.loads"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "ob", ")", ":", "\n", "        ", "import", "pickle", "\n", "self", ".", "x", "=", "pickle", ".", "loads", "(", "ob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_runner.env_worker": [[264, 325], ["env_fn.x", "remote.recv", "len", "numpy.random.get_state", "torch.random.get_rng_state", "env_fn.x.step", "env_fn.x.get_state", "env_fn.x.get_avail_actions", "env_fn.x.get_obs", "env_fn.x.get_info", "remote.send", "numpy.random.set_state", "torch.random.set_rng_state", "len", "env_fn.x.reset", "remote.send", "env_fn.x.close", "remote.close", "env_fn.x.get_state", "env_fn.x.get_avail_actions", "env_fn.x.get_obs", "env_fn.x.get_info", "remote.send", "env_fn.x.get_env_info", "remote.send", "isinstance", "env_fn.x.get_stats", "remote.send", "isinstance", "remote.send", "getattr", "remote.send", "remote.send", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_info", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.reset", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.close", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.close", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_info", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.get_env_info", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_stats"], ["", "", "", "def", "env_worker", "(", "remote", ",", "env_fn", ")", ":", "\n", "# Make environment", "\n", "    ", "env", "=", "env_fn", ".", "x", "(", ")", "\n", "while", "True", ":", "\n", "        ", "recv", "=", "remote", ".", "recv", "(", ")", "\n", "reset_state", "=", "False", "\n", "if", "len", "(", "recv", ")", "==", "2", ":", "\n", "            ", "cmd", ",", "data", "=", "recv", "\n", "", "elif", "len", "(", "recv", ")", "==", "3", ":", "\n", "            ", "cmd", ",", "data", ",", "reset_state", "=", "recv", "\n", "", "if", "reset_state", ":", "\n", "            ", "np_rand_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "torch_rand_state", "=", "torch", ".", "random", ".", "get_rng_state", "(", ")", "\n", "", "if", "cmd", "==", "\"step\"", ":", "\n", "            ", "actions", "=", "data", "\n", "# Take a step in the environment", "\n", "reward", ",", "terminated", ",", "post_info", "=", "env", ".", "step", "(", "actions", ")", "\n", "# Return the observations, avail_actions and state to make the next action", "\n", "state", "=", "env", ".", "get_state", "(", ")", "\n", "avail_actions", "=", "env", ".", "get_avail_actions", "(", ")", "\n", "obs", "=", "env", ".", "get_obs", "(", ")", "\n", "info", "=", "env", ".", "get_info", "(", ")", "\n", "remote", ".", "send", "(", "{", "\n", "# Data for the next timestep needed to pick an action", "\n", "\"state\"", ":", "state", ",", "\n", "\"avail_actions\"", ":", "avail_actions", ",", "\n", "\"obs\"", ":", "obs", ",", "\n", "# Rest of the data for the current timestep", "\n", "\"reward\"", ":", "reward", ",", "\n", "\"terminated\"", ":", "terminated", ",", "\n", "\"post_info\"", ":", "post_info", ",", "\n", "\"info\"", ":", "info", ",", "\n", "}", ")", "\n", "", "elif", "cmd", "==", "\"reset\"", ":", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "remote", ".", "send", "(", "{", "\n", "\"state\"", ":", "env", ".", "get_state", "(", ")", ",", "\n", "\"avail_actions\"", ":", "env", ".", "get_avail_actions", "(", ")", ",", "\n", "\"obs\"", ":", "env", ".", "get_obs", "(", ")", ",", "\n", "\"info\"", ":", "env", ".", "get_info", "(", ")", ",", "\n", "}", ")", "\n", "", "elif", "cmd", "==", "\"close\"", ":", "\n", "            ", "env", ".", "close", "(", ")", "\n", "remote", ".", "close", "(", ")", "\n", "break", "\n", "", "elif", "cmd", "==", "\"get_env_info\"", ":", "\n", "            ", "remote", ".", "send", "(", "env", ".", "get_env_info", "(", ")", ")", "\n", "", "elif", "cmd", "==", "\"get_stats\"", ":", "\n", "            ", "remote", ".", "send", "(", "env", ".", "get_stats", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "data", ",", "tuple", ")", ":", "\n", "                ", "remote", ".", "send", "(", "getattr", "(", "env", ",", "cmd", ")", "(", "*", "data", ")", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "                ", "remote", ".", "send", "(", "getattr", "(", "env", ",", "cmd", ")", "(", "**", "data", ")", ")", "\n", "", "elif", "data", "is", "None", ":", "\n", "                ", "remote", ".", "send", "(", "getattr", "(", "env", ",", "cmd", ")", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "remote", ".", "send", "(", "getattr", "(", "env", ",", "cmd", ")", "(", "data", ")", ")", "\n", "", "", "if", "reset_state", ":", "\n", "            ", "np", ".", "random", ".", "set_state", "(", "np_rand_state", ")", "\n", "torch", ".", "random", ".", "set_rng_state", "(", "torch_rand_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_runner.numpy_to_torch_dtype": [[326, 328], ["torch.tensor", "numpy.empty"], "function", ["None"], ["", "", "", "def", "numpy_to_torch_dtype", "(", "dtype", ")", ":", "\n", "    ", "return", "torch", ".", "tensor", "(", "np", ".", "empty", "(", "0", ",", "dtype", "=", "dtype", ")", ")", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.batch_runner.BatchRunner.__init__": [[12, 34], ["batch_runner.BatchRunner.args.env_args.get", "batch_runner.BatchRunner.env.get_env_info", "batch_runner.BatchRunner.set_info_scheme"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.get_env_info", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.set_info_scheme"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "logger", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "batch_size", "=", "self", ".", "args", ".", "env_args", ".", "get", "(", "'batch_size'", ",", "1", ")", "\n", "\n", "self", ".", "env", "=", "env_REGISTRY", "[", "self", ".", "args", ".", "env", "]", "(", "**", "self", ".", "args", ".", "env_args", ")", "\n", "self", ".", "episode_limit", "=", "self", ".", "env", ".", "episode_limit", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "t_env", "=", "0", "\n", "\n", "self", ".", "env_info", "=", "self", ".", "env", ".", "get_env_info", "(", ")", "\n", "\n", "self", ".", "info_scheme", "=", "{", "}", "\n", "self", ".", "set_info_scheme", "(", ")", "\n", "\n", "self", ".", "train_returns", "=", "[", "]", "\n", "self", ".", "test_returns", "=", "[", "]", "\n", "self", ".", "train_stats", "=", "{", "}", "\n", "self", ".", "test_stats", "=", "{", "}", "\n", "\n", "# Log the first run", "\n", "self", ".", "log_train_stats_t", "=", "-", "1000000", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.batch_runner.BatchRunner.setup": [[35, 39], ["functools.partial"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "scheme", ",", "groups", ",", "preprocess", ",", "mac", ")", ":", "\n", "        ", "self", ".", "new_batch", "=", "partial", "(", "EpisodeBatch", ",", "scheme", ",", "groups", ",", "self", ".", "batch_size", ",", "self", ".", "episode_limit", "+", "1", ",", "\n", "preprocess", "=", "preprocess", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "mac", "=", "mac", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.batch_runner.BatchRunner.get_env_info": [[40, 42], ["batch_runner.BatchRunner.env.get_env_info"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.get_env_info"], ["", "def", "get_env_info", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "get_env_info", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.batch_runner.BatchRunner.close_env": [[43, 45], ["batch_runner.BatchRunner.env.close"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.close"], ["", "def", "close_env", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.batch_runner.BatchRunner.reset": [[46, 50], ["batch_runner.BatchRunner.new_batch", "batch_runner.BatchRunner.env.reset"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch", "=", "self", ".", "new_batch", "(", ")", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "t", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.batch_runner.BatchRunner.run": [[51, 130], ["batch_runner.BatchRunner.reset", "numpy.zeros", "batch_runner.BatchRunner.mac.init_hidden", "batch_runner.BatchRunner.batch.update", "batch_runner.BatchRunner.mac.select_actions", "batch_runner.BatchRunner.to().numpy", "batch_runner.BatchRunner.batch.update", "cur_stats.update", "cur_returns.append", "numpy.zeros.all", "numpy.logical_not", "batch_runner.BatchRunner.batch.update", "batch_runner.BatchRunner.mac.select_actions", "batch_runner.BatchRunner.to().numpy", "batch_runner.BatchRunner.env.step", "batch_runner.BatchRunner.batch.update", "batch_runner.BatchRunner.env.get_state", "batch_runner.BatchRunner.env.get_avail_actions", "batch_runner.BatchRunner.env.get_obs", "batch_runner.BatchRunner.env.get_info", "cur_stats.get", "cur_stats.get", "batch_runner.BatchRunner._log", "batch_runner.BatchRunner.log_replay", "batch_runner.BatchRunner.to", "batch_runner.BatchRunner._log", "hasattr", "batch_runner.BatchRunner.env.get_info().items", "batch_runner.BatchRunner.env.get_state", "batch_runner.BatchRunner.env.get_avail_actions", "batch_runner.BatchRunner.env.get_obs", "batch_runner.BatchRunner.to", "slice", "slice", "slice", "slice", "cur_stats.get", "post_info.get", "batch_runner.BatchRunner.logger.log_stat", "post_info.items", "set", "set", "batch_runner.BatchRunner.env.get_info", "slice", "slice", "slice", "slice"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.reset", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.lica_controller.LICAMAC.select_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.lica_controller.LICAMAC.select_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_info", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner._log", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.batch_runner.BatchRunner.log_replay", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner._log", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_info"], ["", "def", "run", "(", "self", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n", "terminated", "=", "np", ".", "zeros", "(", "self", ".", "batch_size", ",", "dtype", "=", "bool", ")", "\n", "episode_return", "=", "0", "\n", "self", ".", "mac", ".", "init_hidden", "(", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "\n", "while", "not", "terminated", ".", "all", "(", ")", ":", "\n", "\n", "            ", "mask", "=", "np", ".", "logical_not", "(", "terminated", ")", "\n", "\n", "pre_info", "=", "{", "key", ":", "val", "[", "mask", "]", "for", "key", ",", "val", "in", "self", ".", "env", ".", "get_info", "(", "batch", "=", "slice", "(", "None", ")", ")", ".", "items", "(", ")", "}", "\n", "\n", "pre_transition_data", "=", "{", "\n", "\"state\"", ":", "self", ".", "env", ".", "get_state", "(", "batch", "=", "slice", "(", "None", ")", ")", "[", "mask", "]", ",", "\n", "\"avail_actions\"", ":", "self", ".", "env", ".", "get_avail_actions", "(", "batch", "=", "slice", "(", "None", ")", ")", "[", "mask", "]", ",", "\n", "\"obs\"", ":", "self", ".", "env", ".", "get_obs", "(", "batch", "=", "slice", "(", "None", ")", ")", "[", "mask", "]", ",", "\n", "**", "pre_info", ",", "\n", "}", "\n", "\n", "self", ".", "batch", ".", "update", "(", "pre_transition_data", ",", "bs", "=", "mask", ",", "ts", "=", "self", ".", "t", ")", "\n", "\n", "# Pass the entire batch of experiences up till now to the agents", "\n", "# Receive the actions for each agent at this timestep in a batch of size 1", "\n", "actions", "=", "self", ".", "mac", ".", "select_actions", "(", "self", ".", "batch", ",", "t_ep", "=", "self", ".", "t", ",", "t_env", "=", "self", ".", "t_env", ",", "test_mode", "=", "test_mode", ")", "\n", "# Fix memory leak", "\n", "cpu_actions", "=", "actions", ".", "to", "(", "\"cpu\"", ")", ".", "numpy", "(", ")", "\n", "\n", "self", ".", "env", ".", "test_mode", "=", "test_mode", "\n", "reward", ",", "terminated", ",", "post_info", "=", "self", ".", "env", ".", "step", "(", "actions", ")", "\n", "episode_return", "+=", "reward", "\n", "\n", "post_transition_data", "=", "{", "\n", "\"actions\"", ":", "cpu_actions", "[", "mask", "]", ",", "\n", "\"reward\"", ":", "reward", "[", "mask", "]", ",", "\n", "\"terminated\"", ":", "terminated", "[", "mask", "]", ",", "\n", "**", "{", "key", ":", "val", "[", "mask", "]", "for", "key", ",", "val", "in", "post_info", ".", "items", "(", ")", "}", "\n", "}", "\n", "\n", "self", ".", "batch", ".", "update", "(", "post_transition_data", ",", "bs", "=", "mask", ",", "ts", "=", "self", ".", "t", ")", "\n", "\n", "self", ".", "t", "+=", "1", "\n", "\n", "", "last_data", "=", "{", "\n", "\"state\"", ":", "self", ".", "env", ".", "get_state", "(", "batch", "=", "slice", "(", "None", ")", ")", ",", "\n", "\"avail_actions\"", ":", "self", ".", "env", ".", "get_avail_actions", "(", "batch", "=", "slice", "(", "None", ")", ")", ",", "\n", "\"obs\"", ":", "self", ".", "env", ".", "get_obs", "(", "batch", "=", "slice", "(", "None", ")", ")", ",", "\n", "**", "self", ".", "env", ".", "get_info", "(", "batch", "=", "slice", "(", "None", ")", ")", ",", "\n", "}", "\n", "self", ".", "batch", ".", "update", "(", "last_data", ",", "ts", "=", "self", ".", "t", ")", "\n", "\n", "# Select actions in the last stored state", "\n", "actions", "=", "self", ".", "mac", ".", "select_actions", "(", "self", ".", "batch", ",", "t_ep", "=", "self", ".", "t", ",", "t_env", "=", "self", ".", "t_env", ",", "test_mode", "=", "test_mode", ")", "\n", "# Fix memory leak", "\n", "cpu_actions", "=", "actions", ".", "to", "(", "\"cpu\"", ")", ".", "numpy", "(", ")", "\n", "self", ".", "batch", ".", "update", "(", "{", "\"actions\"", ":", "cpu_actions", "}", ",", "ts", "=", "self", ".", "t", ")", "\n", "\n", "cur_stats", "=", "self", ".", "test_stats", "if", "test_mode", "else", "self", ".", "train_stats", "\n", "cur_returns", "=", "self", ".", "test_returns", "if", "test_mode", "else", "self", ".", "train_returns", "\n", "log_prefix", "=", "\"test_\"", "if", "test_mode", "else", "\"\"", "\n", "cur_stats", ".", "update", "(", "{", "k", ":", "cur_stats", ".", "get", "(", "k", ",", "0", ")", "+", "post_info", ".", "get", "(", "k", ",", "0", ")", "for", "k", "in", "set", "(", "cur_stats", ")", "|", "set", "(", "post_info", ")", "}", ")", "\n", "cur_stats", "[", "\"n_episodes\"", "]", "=", "1", "+", "cur_stats", ".", "get", "(", "\"n_episodes\"", ",", "0", ")", "\n", "cur_stats", "[", "\"ep_length\"", "]", "=", "self", ".", "t", "+", "cur_stats", ".", "get", "(", "\"ep_length\"", ",", "0", ")", "\n", "\n", "if", "not", "test_mode", ":", "\n", "            ", "self", ".", "t_env", "+=", "self", ".", "t", "\n", "\n", "", "cur_returns", ".", "append", "(", "episode_return", ")", "\n", "\n", "if", "test_mode", ":", "\n", "            ", "self", ".", "_log", "(", "cur_returns", ",", "cur_stats", ",", "log_prefix", ")", "\n", "self", ".", "log_replay", "(", ")", "\n", "", "elif", "self", ".", "t_env", "-", "self", ".", "log_train_stats_t", ">=", "self", ".", "args", ".", "runner_log_interval", ":", "\n", "            ", "self", ".", "_log", "(", "cur_returns", ",", "cur_stats", ",", "log_prefix", ")", "\n", "if", "hasattr", "(", "self", ".", "mac", ".", "action_selector", ",", "\"epsilon\"", ")", ":", "\n", "                ", "self", ".", "logger", ".", "log_stat", "(", "\"epsilon\"", ",", "self", ".", "mac", ".", "action_selector", ".", "epsilon", ",", "self", ".", "t_env", ")", "\n", "", "self", ".", "log_train_stats_t", "=", "self", ".", "t_env", "\n", "\n", "", "return", "self", ".", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.batch_runner.BatchRunner._log": [[131, 140], ["batch_runner.BatchRunner.logger.log_stat", "batch_runner.BatchRunner.logger.log_stat", "returns.clear", "stats.items", "stats.clear", "numpy.mean", "numpy.std", "batch_runner.BatchRunner.logger.log_stat"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat"], ["", "def", "_log", "(", "self", ",", "returns", ",", "stats", ",", "prefix", ")", ":", "\n", "        ", "self", ".", "logger", ".", "log_stat", "(", "prefix", "+", "\"return_mean\"", ",", "np", ".", "mean", "(", "returns", ")", ",", "self", ".", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "prefix", "+", "\"return_std\"", ",", "np", ".", "std", "(", "returns", ")", ",", "self", ".", "t_env", ")", "\n", "returns", ".", "clear", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "stats", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "\"n_episodes\"", ":", "\n", "                ", "self", ".", "logger", ".", "log_stat", "(", "prefix", "+", "k", "+", "\"_mean\"", ",", "v", "/", "stats", "[", "\"n_episodes\"", "]", ",", "self", ".", "t_env", ")", "\n", "", "", "stats", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.batch_runner.BatchRunner.log_replay": [[141, 145], ["batch_runner.BatchRunner.env.save_replay", "batch_runner.BatchRunner.logger.log_video"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.save_replay", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_video"], ["", "def", "log_replay", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "save_replay", ":", "\n", "            ", "frame_list", "=", "self", ".", "env", ".", "save_replay", "(", ")", "\n", "self", ".", "logger", ".", "log_video", "(", "frame_list", ",", "t", "=", "self", ".", "t_env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.batch_runner.BatchRunner.set_info_scheme": [[147, 171], ["batch_runner.BatchRunner.env.get_info", "batch_runner.BatchRunner.set_info_scheme.add_dict"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_info"], ["", "", "def", "set_info_scheme", "(", "self", ")", ":", "\n", "# self.env.reset()", "\n", "        ", "pre_info", "=", "self", ".", "env", ".", "get_info", "(", ")", "\n", "def", "add_dict", "(", "d", ")", ":", "\n", "            ", "for", "key", ",", "val", "in", "d", ".", "items", "(", ")", ":", "\n", "                ", "item_scheme", "=", "{", "}", "\n", "if", "isinstance", "(", "val", ",", "Data", ")", ":", "\n", "                    ", "x_shape", "=", "val", ".", "x", ".", "shape", "[", "1", ":", "]", "if", "(", "val", ".", "x", "is", "not", "None", ")", "else", "0", "\n", "edge_shape", "=", "val", ".", "edge_attr", ".", "shape", "[", "1", ":", "]", "if", "(", "val", ".", "edge_attr", "is", "not", "None", ")", "else", "0", "\n", "item_scheme", "[", "'vshape'", "]", "=", "(", "x_shape", ",", "edge_shape", ")", "\n", "item_scheme", "[", "'dtype'", "]", "=", "Data", "\n", "", "else", ":", "\n", "                    ", "val", "=", "np", ".", "array", "(", "val", ")", "\n", "item_scheme", "[", "'vshape'", "]", "=", "val", ".", "shape", "[", "1", ":", "]", "\n", "if", "len", "(", "val", ".", "shape", ")", ">", "0", ":", "\n", "                        ", "if", "val", ".", "shape", "[", "0", "]", "==", "self", ".", "env_info", "[", "'n_agents'", "]", ":", "\n", "                            ", "item_scheme", "[", "'group'", "]", "=", "'agents'", "\n", "", "", "item_scheme", "[", "'dtype'", "]", "=", "torch", ".", "tensor", "(", "np", ".", "empty", "(", "0", ",", "dtype", "=", "val", ".", "dtype", ")", ")", ".", "dtype", "\n", "", "self", ".", "info_scheme", "[", "key", "]", "=", "item_scheme", "\n", "", "", "add_dict", "(", "pre_info", ")", "\n", "avail_actions", "=", "self", ".", "env", ".", "get_avail_actions", "(", ")", "\n", "actions", "=", "np", ".", "argmax", "(", "avail_actions", ",", "axis", "=", "-", "1", ")", "\n", "reward", ",", "done", ",", "post_info", "=", "self", ".", "env", ".", "step", "(", "actions", ")", "\n", "add_dict", "(", "post_info", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.episode_runner.EpisodeRunner.__init__": [[9, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "logger", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "batch_size", "=", "self", ".", "args", ".", "batch_size_run", "\n", "assert", "self", ".", "batch_size", "==", "1", "\n", "\n", "self", ".", "env", "=", "env_REGISTRY", "[", "self", ".", "args", ".", "env", "]", "(", "**", "self", ".", "args", ".", "env_args", ")", "\n", "self", ".", "episode_limit", "=", "self", ".", "env", ".", "episode_limit", "\n", "self", ".", "t", "=", "0", "\n", "\n", "self", ".", "t_env", "=", "0", "\n", "\n", "self", ".", "train_returns", "=", "[", "]", "\n", "self", ".", "test_returns", "=", "[", "]", "\n", "self", ".", "train_stats", "=", "{", "}", "\n", "self", ".", "test_stats", "=", "{", "}", "\n", "\n", "# Log the first run", "\n", "self", ".", "log_train_stats_t", "=", "-", "1000000", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.episode_runner.EpisodeRunner.setup": [[29, 33], ["functools.partial"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "scheme", ",", "groups", ",", "preprocess", ",", "mac", ")", ":", "\n", "        ", "self", ".", "new_batch", "=", "partial", "(", "EpisodeBatch", ",", "scheme", ",", "groups", ",", "self", ".", "batch_size", ",", "self", ".", "episode_limit", "+", "1", ",", "\n", "preprocess", "=", "preprocess", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "mac", "=", "mac", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.episode_runner.EpisodeRunner.get_env_info": [[34, 36], ["episode_runner.EpisodeRunner.env.get_env_info"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.get_env_info"], ["", "def", "get_env_info", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "get_env_info", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.episode_runner.EpisodeRunner.close_env": [[37, 39], ["episode_runner.EpisodeRunner.env.close"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.close"], ["", "def", "close_env", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.episode_runner.EpisodeRunner.reset": [[40, 44], ["episode_runner.EpisodeRunner.new_batch", "episode_runner.EpisodeRunner.env.reset"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch", "=", "self", ".", "new_batch", "(", ")", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "t", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.episode_runner.EpisodeRunner.run": [[45, 115], ["episode_runner.EpisodeRunner.reset", "episode_runner.EpisodeRunner.mac.init_hidden", "episode_runner.EpisodeRunner.batch.update", "episode_runner.EpisodeRunner.mac.select_actions", "episode_runner.EpisodeRunner.to().numpy", "episode_runner.EpisodeRunner.batch.update", "cur_stats.update", "cur_returns.append", "episode_runner.EpisodeRunner.batch.update", "episode_runner.EpisodeRunner.mac.select_actions", "episode_runner.EpisodeRunner.to().numpy", "episode_runner.EpisodeRunner.env.step", "episode_runner.EpisodeRunner.batch.update", "cur_stats.get", "cur_stats.get", "episode_runner.EpisodeRunner._log", "episode_runner.EpisodeRunner.env.get_state", "episode_runner.EpisodeRunner.env.get_avail_actions", "episode_runner.EpisodeRunner.env.get_obs", "episode_runner.EpisodeRunner.to", "len", "episode_runner.EpisodeRunner._log", "hasattr", "episode_runner.EpisodeRunner.env.get_state", "episode_runner.EpisodeRunner.env.get_avail_actions", "episode_runner.EpisodeRunner.env.get_obs", "episode_runner.EpisodeRunner.to", "cur_stats.get", "env_info.get", "episode_runner.EpisodeRunner.logger.log_stat", "set", "set", "env_info.get"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.reset", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.lica_controller.LICAMAC.select_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.lica_controller.LICAMAC.select_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner._log", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner._log", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat"], ["", "def", "run", "(", "self", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n", "terminated", "=", "False", "\n", "episode_return", "=", "0", "\n", "self", ".", "mac", ".", "init_hidden", "(", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "\n", "while", "not", "terminated", ":", "\n", "\n", "            ", "pre_transition_data", "=", "{", "\n", "\"state\"", ":", "[", "self", ".", "env", ".", "get_state", "(", ")", "]", ",", "\n", "\"avail_actions\"", ":", "[", "self", ".", "env", ".", "get_avail_actions", "(", ")", "]", ",", "\n", "\"obs\"", ":", "[", "self", ".", "env", ".", "get_obs", "(", ")", "]", "\n", "}", "\n", "\n", "self", ".", "batch", ".", "update", "(", "pre_transition_data", ",", "ts", "=", "self", ".", "t", ")", "\n", "\n", "# Pass the entire batch of experiences up till now to the agents", "\n", "# Receive the actions for each agent at this timestep in a batch of size 1", "\n", "actions", "=", "self", ".", "mac", ".", "select_actions", "(", "self", ".", "batch", ",", "t_ep", "=", "self", ".", "t", ",", "t_env", "=", "self", ".", "t_env", ",", "test_mode", "=", "test_mode", ")", "\n", "# Fix memory leak", "\n", "cpu_actions", "=", "actions", ".", "to", "(", "\"cpu\"", ")", ".", "numpy", "(", ")", "\n", "\n", "reward", ",", "terminated", ",", "env_info", "=", "self", ".", "env", ".", "step", "(", "actions", "[", "0", "]", ")", "\n", "episode_return", "+=", "reward", "\n", "\n", "post_transition_data", "=", "{", "\n", "\"actions\"", ":", "cpu_actions", ",", "\n", "\"reward\"", ":", "[", "(", "reward", ",", ")", "]", ",", "\n", "\"terminated\"", ":", "[", "(", "terminated", "!=", "env_info", ".", "get", "(", "\"episode_limit\"", ",", "False", ")", ",", ")", "]", ",", "\n", "}", "\n", "\n", "self", ".", "batch", ".", "update", "(", "post_transition_data", ",", "ts", "=", "self", ".", "t", ")", "\n", "\n", "self", ".", "t", "+=", "1", "\n", "\n", "", "last_data", "=", "{", "\n", "\"state\"", ":", "[", "self", ".", "env", ".", "get_state", "(", ")", "]", ",", "\n", "\"avail_actions\"", ":", "[", "self", ".", "env", ".", "get_avail_actions", "(", ")", "]", ",", "\n", "\"obs\"", ":", "[", "self", ".", "env", ".", "get_obs", "(", ")", "]", "\n", "}", "\n", "self", ".", "batch", ".", "update", "(", "last_data", ",", "ts", "=", "self", ".", "t", ")", "\n", "\n", "# Select actions in the last stored state", "\n", "actions", "=", "self", ".", "mac", ".", "select_actions", "(", "self", ".", "batch", ",", "t_ep", "=", "self", ".", "t", ",", "t_env", "=", "self", ".", "t_env", ",", "test_mode", "=", "test_mode", ")", "\n", "# Fix memory leak", "\n", "cpu_actions", "=", "actions", ".", "to", "(", "\"cpu\"", ")", ".", "numpy", "(", ")", "\n", "self", ".", "batch", ".", "update", "(", "{", "\"actions\"", ":", "cpu_actions", "}", ",", "ts", "=", "self", ".", "t", ")", "\n", "\n", "cur_stats", "=", "self", ".", "test_stats", "if", "test_mode", "else", "self", ".", "train_stats", "\n", "cur_returns", "=", "self", ".", "test_returns", "if", "test_mode", "else", "self", ".", "train_returns", "\n", "log_prefix", "=", "\"test_\"", "if", "test_mode", "else", "\"\"", "\n", "cur_stats", ".", "update", "(", "{", "k", ":", "cur_stats", ".", "get", "(", "k", ",", "0", ")", "+", "env_info", ".", "get", "(", "k", ",", "0", ")", "for", "k", "in", "set", "(", "cur_stats", ")", "|", "set", "(", "env_info", ")", "}", ")", "\n", "cur_stats", "[", "\"n_episodes\"", "]", "=", "1", "+", "cur_stats", ".", "get", "(", "\"n_episodes\"", ",", "0", ")", "\n", "cur_stats", "[", "\"ep_length\"", "]", "=", "self", ".", "t", "+", "cur_stats", ".", "get", "(", "\"ep_length\"", ",", "0", ")", "\n", "\n", "if", "not", "test_mode", ":", "\n", "            ", "self", ".", "t_env", "+=", "self", ".", "t", "\n", "\n", "", "cur_returns", ".", "append", "(", "episode_return", ")", "\n", "\n", "if", "test_mode", "and", "(", "len", "(", "self", ".", "test_returns", ")", "==", "self", ".", "args", ".", "test_nepisode", ")", ":", "\n", "            ", "self", ".", "_log", "(", "cur_returns", ",", "cur_stats", ",", "log_prefix", ")", "\n", "", "elif", "self", ".", "t_env", "-", "self", ".", "log_train_stats_t", ">=", "self", ".", "args", ".", "runner_log_interval", ":", "\n", "            ", "self", ".", "_log", "(", "cur_returns", ",", "cur_stats", ",", "log_prefix", ")", "\n", "if", "hasattr", "(", "self", ".", "mac", ".", "action_selector", ",", "\"epsilon\"", ")", ":", "\n", "                ", "self", ".", "logger", ".", "log_stat", "(", "\"epsilon\"", ",", "self", ".", "mac", ".", "action_selector", ".", "epsilon", ",", "self", ".", "t_env", ")", "\n", "", "self", ".", "log_train_stats_t", "=", "self", ".", "t_env", "\n", "\n", "", "return", "self", ".", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.episode_runner.EpisodeRunner._log": [[116, 125], ["episode_runner.EpisodeRunner.logger.log_stat", "episode_runner.EpisodeRunner.logger.log_stat", "returns.clear", "stats.items", "stats.clear", "numpy.mean", "numpy.std", "episode_runner.EpisodeRunner.logger.log_stat"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat"], ["", "def", "_log", "(", "self", ",", "returns", ",", "stats", ",", "prefix", ")", ":", "\n", "        ", "self", ".", "logger", ".", "log_stat", "(", "prefix", "+", "\"return_mean\"", ",", "np", ".", "mean", "(", "returns", ")", ",", "self", ".", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "prefix", "+", "\"return_std\"", ",", "np", ".", "std", "(", "returns", ")", ",", "self", ".", "t_env", ")", "\n", "returns", ".", "clear", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "stats", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "\"n_episodes\"", ":", "\n", "                ", "self", ".", "logger", ".", "log_stat", "(", "prefix", "+", "k", "+", "\"_mean\"", ",", "v", "/", "stats", "[", "\"n_episodes\"", "]", ",", "self", ".", "t_env", ")", "\n", "", "", "stats", ".", "clear", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.__init__": [[16, 54], ["zip", "enumerate", "parallel_info_runner.ParallelInfoRunner.parent_conns[].send", "parallel_info_runner.ParallelInfoRunner.parent_conns[].recv", "parallel_info_runner.ParallelInfoRunner.set_info_scheme", "multiprocessing.Process", "parallel_info_runner.ParallelInfoRunner.ps.append", "p.start", "numpy.random.randint", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "multiprocessing.Pipe", "range", "parallel_info_runner.CloudpickleWrapper", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.set_info_scheme", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.seed"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "logger", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "batch_size", "=", "self", ".", "args", ".", "batch_size_run", "\n", "\n", "# Make subprocesses for the envs", "\n", "self", ".", "parent_conns", ",", "self", ".", "worker_conns", "=", "zip", "(", "*", "[", "Pipe", "(", ")", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", ")", "\n", "env_fn", "=", "env_REGISTRY", "[", "self", ".", "args", ".", "env", "]", "\n", "self", ".", "ps", "=", "[", "]", "\n", "for", "i", ",", "worker_conn", "in", "enumerate", "(", "self", ".", "worker_conns", ")", ":", "\n", "            ", "ps", "=", "Process", "(", "target", "=", "env_worker", ",", "\n", "args", "=", "(", "worker_conn", ",", "CloudpickleWrapper", "(", "partial", "(", "env_fn", ",", "**", "self", ".", "args", ".", "env_args", ")", ")", ")", ")", "\n", "self", ".", "ps", ".", "append", "(", "ps", ")", "\n", "\n", "", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "daemon", "=", "True", "\n", "p", ".", "start", "(", ")", "\n", "np_rand", ",", "torch_rand", "=", "np", ".", "random", ".", "randint", "(", "4e9", ",", "size", "=", "(", "2", ",", ")", ")", "\n", "np", ".", "random", ".", "seed", "(", "np_rand", ")", "\n", "th", ".", "manual_seed", "(", "torch_rand", ")", "\n", "\n", "", "self", ".", "parent_conns", "[", "0", "]", ".", "send", "(", "(", "\"get_env_info\"", ",", "None", ")", ")", "\n", "self", ".", "env_info", "=", "self", ".", "parent_conns", "[", "0", "]", ".", "recv", "(", ")", "\n", "self", ".", "episode_limit", "=", "self", ".", "env_info", "[", "\"episode_limit\"", "]", "\n", "\n", "self", ".", "info_scheme", "=", "{", "}", "\n", "self", ".", "set_info_scheme", "(", ")", "\n", "\n", "self", ".", "t", "=", "0", "\n", "\n", "self", ".", "t_env", "=", "0", "\n", "\n", "self", ".", "train_returns", "=", "[", "]", "\n", "self", ".", "test_returns", "=", "[", "]", "\n", "self", ".", "train_stats", "=", "{", "}", "\n", "self", ".", "test_stats", "=", "{", "}", "\n", "\n", "self", ".", "log_train_stats_t", "=", "-", "100000", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.setup": [[55, 62], ["functools.partial"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "scheme", ",", "groups", ",", "preprocess", ",", "mac", ")", ":", "\n", "        ", "self", ".", "mac", "=", "mac", "\n", "self", ".", "scheme", "=", "scheme", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "preprocess", "=", "preprocess", "\n", "self", ".", "new_batch", "=", "partial", "(", "EpisodeBatch", ",", "scheme", ",", "groups", ",", "self", ".", "batch_size", ",", "self", ".", "episode_limit", "+", "1", ",", "\n", "preprocess", "=", "preprocess", ",", "device", "=", "self", ".", "args", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.get_env_info": [[63, 65], ["None"], "methods", ["None"], ["", "def", "get_env_info", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.close_env": [[66, 69], ["parent_conn.send"], "methods", ["None"], ["", "def", "close_env", "(", "self", ")", ":", "\n", "        ", "for", "parent_conn", "in", "self", ".", "parent_conns", ":", "\n", "            ", "parent_conn", ".", "send", "(", "(", "\"close\"", ",", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.reset": [[70, 94], ["parallel_info_runner.ParallelInfoRunner.new_batch", "parallel_info_runner.ParallelInfoRunner.batch.update", "parent_conn.send", "parent_conn.recv", "pre_transition_data[].append", "pre_transition_data[].append", "pre_transition_data[].append", "parallel_info_runner.ParallelInfoRunner.add_info"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.add_info"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch", "=", "self", ".", "new_batch", "(", ")", "\n", "\n", "# Reset the envs", "\n", "for", "parent_conn", "in", "self", ".", "parent_conns", ":", "\n", "            ", "parent_conn", ".", "send", "(", "(", "\"reset\"", ",", "None", ")", ")", "\n", "\n", "", "pre_transition_data", "=", "{", "\n", "\"state\"", ":", "[", "]", ",", "\n", "\"avail_actions\"", ":", "[", "]", ",", "\n", "\"obs\"", ":", "[", "]", ",", "\n", "}", "\n", "# Get the obs, state and avail_actions back", "\n", "for", "parent_conn", "in", "self", ".", "parent_conns", ":", "\n", "            ", "data", "=", "parent_conn", ".", "recv", "(", ")", "\n", "pre_transition_data", "[", "\"state\"", "]", ".", "append", "(", "data", "[", "\"state\"", "]", ")", "\n", "pre_transition_data", "[", "\"avail_actions\"", "]", ".", "append", "(", "data", "[", "\"avail_actions\"", "]", ")", "\n", "pre_transition_data", "[", "\"obs\"", "]", ".", "append", "(", "data", "[", "\"obs\"", "]", ")", "\n", "self", ".", "add_info", "(", "pre_transition_data", ",", "data", "[", "\"info\"", "]", ")", "\n", "\n", "", "self", ".", "batch", ".", "update", "(", "pre_transition_data", ",", "ts", "=", "0", ")", "\n", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "env_steps_this_run", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.run": [[95, 230], ["parallel_info_runner.ParallelInfoRunner.reset", "parallel_info_runner.ParallelInfoRunner.mac.init_hidden", "getattr", "cur_stats.update", "cur_returns.extend", "parallel_info_runner.ParallelInfoRunner.to().numpy", "parallel_info_runner.ParallelInfoRunner.batch.update", "enumerate", "all", "enumerate", "parallel_info_runner.ParallelInfoRunner.batch.update", "parallel_info_runner.ParallelInfoRunner.batch.update", "parallel_info_runner.ParallelInfoRunner.batch.update", "parent_conn.send", "parent_conn.recv", "env_stats.append", "cur_stats.get", "sum", "cur_stats.get", "max", "parallel_info_runner.ParallelInfoRunner._log", "range", "range", "range", "enumerate", "parallel_info_runner.ParallelInfoRunner.mac.select_actions", "parallel_info_runner.ParallelInfoRunner.mac.select_actions", "parallel_info_runner.ParallelInfoRunner.unsqueeze().to", "probs.unsqueeze().to", "len", "sum", "len", "parallel_info_runner.ParallelInfoRunner._log", "hasattr", "parallel_info_runner.ParallelInfoRunner.to", "enumerate", "parent_conn.recv", "post_transition_data[].append", "post_transition_data[].append", "pre_transition_data[].append", "pre_transition_data[].append", "pre_transition_data[].append", "parallel_info_runner.ParallelInfoRunner.add_info", "set.union", "parallel_info_runner.ParallelInfoRunner.logger.log_stat", "parallel_info_runner.ParallelInfoRunner.unsqueeze", "probs.unsqueeze", "parent_conn.send", "final_post_infos.append", "len", "parallel_info_runner.ParallelInfoRunner.add_info", "d.get", "data[].get", "data[].items", "set", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.reset", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.agents.n_rnn_agent.NRNNAgent.init_hidden", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.extend", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.update", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner._log", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.lica_controller.LICAMAC.select_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.controllers.lica_controller.LICAMAC.select_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner._log", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.components.episode_buffer.EpisodeBatch.to", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.add_info", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.add_info"], ["", "def", "run", "(", "self", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n", "all_terminated", "=", "False", "\n", "episode_returns", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "episode_lengths", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "self", ".", "mac", ".", "init_hidden", "(", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "terminated", "=", "[", "False", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "envs_not_terminated", "=", "[", "b_idx", "for", "b_idx", ",", "termed", "in", "enumerate", "(", "terminated", ")", "if", "not", "termed", "]", "\n", "final_post_infos", "=", "[", "]", "# may store extra stats like battle won. this is filled in ORDER OF TERMINATION", "\n", "\n", "save_probs", "=", "getattr", "(", "self", ".", "args", ",", "\"save_probs\"", ",", "False", ")", "\n", "while", "True", ":", "\n", "\n", "# Pass the entire batch of experiences up till now to the agents", "\n", "# Receive the actions for each agent at this timestep in a batch for each un-terminated env", "\n", "            ", "if", "save_probs", ":", "\n", "                ", "actions", ",", "probs", "=", "self", ".", "mac", ".", "select_actions", "(", "self", ".", "batch", ",", "t_ep", "=", "self", ".", "t", ",", "t_env", "=", "self", ".", "t_env", ",", "bs", "=", "envs_not_terminated", ",", "test_mode", "=", "test_mode", ")", "\n", "", "else", ":", "\n", "                ", "actions", "=", "self", ".", "mac", ".", "select_actions", "(", "self", ".", "batch", ",", "t_ep", "=", "self", ".", "t", ",", "t_env", "=", "self", ".", "t_env", ",", "bs", "=", "envs_not_terminated", ",", "test_mode", "=", "test_mode", ")", "\n", "\n", "", "cpu_actions", "=", "actions", ".", "to", "(", "\"cpu\"", ")", ".", "numpy", "(", ")", "\n", "\n", "# Update the actions taken", "\n", "actions_chosen", "=", "{", "\n", "\"actions\"", ":", "actions", ".", "unsqueeze", "(", "1", ")", ".", "to", "(", "\"cpu\"", ")", ",", "\n", "}", "\n", "if", "save_probs", ":", "\n", "                ", "actions_chosen", "[", "\"probs\"", "]", "=", "probs", ".", "unsqueeze", "(", "1", ")", ".", "to", "(", "\"cpu\"", ")", "\n", "\n", "", "self", ".", "batch", ".", "update", "(", "actions_chosen", ",", "bs", "=", "envs_not_terminated", ",", "ts", "=", "self", ".", "t", ",", "mark_filled", "=", "False", ")", "\n", "\n", "# Send actions to each env", "\n", "action_idx", "=", "0", "\n", "for", "idx", ",", "parent_conn", "in", "enumerate", "(", "self", ".", "parent_conns", ")", ":", "\n", "                ", "if", "idx", "in", "envs_not_terminated", ":", "# We produced actions for this env", "\n", "                    ", "if", "not", "terminated", "[", "idx", "]", ":", "# Only send the actions to the env if it hasn't terminated", "\n", "                        ", "parent_conn", ".", "send", "(", "(", "\"step\"", ",", "cpu_actions", "[", "action_idx", "]", ")", ")", "\n", "", "action_idx", "+=", "1", "# actions is not a list over every env", "\n", "\n", "# Update envs_not_terminated", "\n", "", "", "envs_not_terminated", "=", "[", "b_idx", "for", "b_idx", ",", "termed", "in", "enumerate", "(", "terminated", ")", "if", "not", "termed", "]", "\n", "all_terminated", "=", "all", "(", "terminated", ")", "\n", "if", "all_terminated", ":", "\n", "                ", "break", "\n", "\n", "# Post step data we will insert for the current timestep", "\n", "", "post_transition_data", "=", "{", "\n", "\"reward\"", ":", "[", "]", ",", "\n", "\"terminated\"", ":", "[", "]", "\n", "}", "\n", "# Data for the next step we will insert in order to select an action", "\n", "pre_transition_data", "=", "{", "\n", "\"state\"", ":", "[", "]", ",", "\n", "\"avail_actions\"", ":", "[", "]", ",", "\n", "\"obs\"", ":", "[", "]", ",", "\n", "}", "\n", "\n", "# Receive data back for each unterminated env", "\n", "post_infos", "=", "{", "}", "\n", "contains_info", "=", "[", "False", "]", "*", "len", "(", "self", ".", "parent_conns", ")", "\n", "for", "idx", ",", "parent_conn", "in", "enumerate", "(", "self", ".", "parent_conns", ")", ":", "\n", "                ", "if", "not", "terminated", "[", "idx", "]", ":", "\n", "                    ", "data", "=", "parent_conn", ".", "recv", "(", ")", "\n", "# Remaining data for this current timestep", "\n", "post_transition_data", "[", "\"reward\"", "]", ".", "append", "(", "(", "data", "[", "\"reward\"", "]", ",", ")", ")", "\n", "\n", "episode_returns", "[", "idx", "]", "+=", "data", "[", "\"reward\"", "]", "\n", "episode_lengths", "[", "idx", "]", "+=", "1", "\n", "if", "not", "test_mode", ":", "\n", "                        ", "self", ".", "env_steps_this_run", "+=", "1", "\n", "\n", "", "env_terminated", "=", "False", "\n", "if", "data", "[", "\"terminated\"", "]", ":", "\n", "                        ", "post_info_scalars", "=", "{", "key", ":", "val", "for", "(", "key", ",", "val", ")", "in", "data", "[", "\"post_info\"", "]", ".", "items", "(", ")", "if", "np", ".", "array", "(", "val", ")", ".", "size", "==", "1", "}", "\n", "final_post_infos", ".", "append", "(", "post_info_scalars", ")", "\n", "", "if", "data", "[", "\"terminated\"", "]", "and", "not", "data", "[", "\"post_info\"", "]", ".", "get", "(", "\"episode_limit\"", ",", "False", ")", ":", "\n", "                        ", "env_terminated", "=", "True", "\n", "", "terminated", "[", "idx", "]", "=", "data", "[", "\"terminated\"", "]", "\n", "post_transition_data", "[", "\"terminated\"", "]", ".", "append", "(", "(", "env_terminated", ",", ")", ")", "\n", "if", "len", "(", "data", "[", "\"post_info\"", "]", ")", ">", "0", ":", "\n", "                        ", "self", ".", "add_info", "(", "post_infos", ",", "data", "[", "\"post_info\"", "]", ")", "\n", "contains_info", "[", "idx", "]", "=", "True", "\n", "# self.add_info(post_transition_data, data[\"post_info\"])", "\n", "\n", "# Data for the next timestep needed to select an action", "\n", "", "pre_transition_data", "[", "\"state\"", "]", ".", "append", "(", "data", "[", "\"state\"", "]", ")", "\n", "pre_transition_data", "[", "\"avail_actions\"", "]", ".", "append", "(", "data", "[", "\"avail_actions\"", "]", ")", "\n", "pre_transition_data", "[", "\"obs\"", "]", ".", "append", "(", "data", "[", "\"obs\"", "]", ")", "\n", "self", ".", "add_info", "(", "pre_transition_data", ",", "data", "[", "\"info\"", "]", ")", "\n", "\n", "# Add post_transiton data into the batch", "\n", "", "", "self", ".", "batch", ".", "update", "(", "post_infos", ",", "bs", "=", "contains_info", ",", "ts", "=", "self", ".", "t", ",", "mark_filled", "=", "False", ")", "\n", "\n", "self", ".", "batch", ".", "update", "(", "post_transition_data", ",", "bs", "=", "envs_not_terminated", ",", "ts", "=", "self", ".", "t", ",", "mark_filled", "=", "False", ")", "\n", "\n", "# Move onto the next timestep", "\n", "self", ".", "t", "+=", "1", "\n", "\n", "# Add the pre-transition data", "\n", "self", ".", "batch", ".", "update", "(", "pre_transition_data", ",", "bs", "=", "envs_not_terminated", ",", "ts", "=", "self", ".", "t", ",", "mark_filled", "=", "True", ")", "\n", "\n", "", "if", "not", "test_mode", ":", "\n", "            ", "self", ".", "t_env", "+=", "self", ".", "env_steps_this_run", "\n", "\n", "# Get stats back for each env", "\n", "", "for", "parent_conn", "in", "self", ".", "parent_conns", ":", "\n", "            ", "parent_conn", ".", "send", "(", "(", "\"get_stats\"", ",", "None", ")", ")", "\n", "\n", "", "env_stats", "=", "[", "]", "\n", "for", "parent_conn", "in", "self", ".", "parent_conns", ":", "\n", "            ", "env_stat", "=", "parent_conn", ".", "recv", "(", ")", "\n", "env_stats", ".", "append", "(", "env_stat", ")", "\n", "\n", "", "cur_stats", "=", "self", ".", "test_stats", "if", "test_mode", "else", "self", ".", "train_stats", "\n", "cur_returns", "=", "self", ".", "test_returns", "if", "test_mode", "else", "self", ".", "train_returns", "\n", "log_prefix", "=", "\"test_\"", "if", "test_mode", "else", "\"\"", "\n", "infos", "=", "[", "cur_stats", "]", "+", "final_post_infos", "\n", "\n", "cur_stats", ".", "update", "(", "{", "k", ":", "sum", "(", "d", ".", "get", "(", "k", ",", "0", ")", "for", "d", "in", "infos", ")", "for", "k", "in", "set", ".", "union", "(", "*", "[", "set", "(", "d", ")", "for", "d", "in", "infos", "]", ")", "}", ")", "\n", "cur_stats", "[", "\"n_episodes\"", "]", "=", "self", ".", "batch_size", "+", "cur_stats", ".", "get", "(", "\"n_episodes\"", ",", "0", ")", "\n", "cur_stats", "[", "\"ep_length\"", "]", "=", "sum", "(", "episode_lengths", ")", "+", "cur_stats", ".", "get", "(", "\"ep_length\"", ",", "0", ")", "\n", "\n", "cur_returns", ".", "extend", "(", "episode_returns", ")", "\n", "\n", "n_test_runs", "=", "max", "(", "1", ",", "self", ".", "args", ".", "test_nepisode", "//", "self", ".", "batch_size", ")", "*", "self", ".", "batch_size", "\n", "if", "test_mode", "and", "(", "len", "(", "self", ".", "test_returns", ")", "==", "n_test_runs", ")", ":", "\n", "            ", "self", ".", "_log", "(", "cur_returns", ",", "cur_stats", ",", "log_prefix", ")", "\n", "", "elif", "self", ".", "t_env", "-", "self", ".", "log_train_stats_t", ">=", "self", ".", "args", ".", "runner_log_interval", ":", "\n", "            ", "self", ".", "_log", "(", "cur_returns", ",", "cur_stats", ",", "log_prefix", ")", "\n", "if", "hasattr", "(", "self", ".", "mac", ".", "action_selector", ",", "\"epsilon\"", ")", ":", "\n", "                ", "self", ".", "logger", ".", "log_stat", "(", "\"epsilon\"", ",", "self", ".", "mac", ".", "action_selector", ".", "epsilon", ",", "self", ".", "t_env", ")", "\n", "", "self", ".", "log_train_stats_t", "=", "self", ".", "t_env", "\n", "\n", "", "return", "self", ".", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner._log": [[231, 240], ["parallel_info_runner.ParallelInfoRunner.logger.log_stat", "parallel_info_runner.ParallelInfoRunner.logger.log_stat", "returns.clear", "stats.items", "stats.clear", "numpy.mean", "numpy.std", "parallel_info_runner.ParallelInfoRunner.logger.log_stat"], "methods", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.utils.logging.Logger.log_stat"], ["", "def", "_log", "(", "self", ",", "returns", ",", "stats", ",", "prefix", ")", ":", "\n", "        ", "self", ".", "logger", ".", "log_stat", "(", "prefix", "+", "\"return_mean\"", ",", "np", ".", "mean", "(", "returns", ")", ",", "self", ".", "t_env", ")", "\n", "self", ".", "logger", ".", "log_stat", "(", "prefix", "+", "\"return_std\"", ",", "np", ".", "std", "(", "returns", ")", ",", "self", ".", "t_env", ")", "\n", "returns", ".", "clear", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "stats", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "\"n_episodes\"", ":", "\n", "                ", "self", ".", "logger", ".", "log_stat", "(", "prefix", "+", "k", "+", "\"_mean\"", ",", "v", "/", "stats", "[", "\"n_episodes\"", "]", ",", "self", ".", "t_env", ")", "\n", "", "", "stats", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.add_info": [[242, 247], ["info.items", "data[].append"], "methods", ["None"], ["", "def", "add_info", "(", "self", ",", "data", ",", "info", ")", ":", "\n", "        ", "for", "key", ",", "val", "in", "info", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "data", ":", "\n", "                ", "data", "[", "key", "]", "=", "[", "]", "\n", "", "data", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.set_info_scheme": [[248, 275], ["parallel_info_runner.ParallelInfoRunner.parent_conns[].send", "parallel_info_runner.ParallelInfoRunner.parent_conns[].recv", "parallel_info_runner.ParallelInfoRunner.set_info_scheme.add_dict"], "methods", ["None"], ["", "", "def", "set_info_scheme", "(", "self", ")", ":", "\n", "        ", "self", ".", "parent_conns", "[", "0", "]", ".", "send", "(", "(", "\"reset\"", ",", "None", ",", "True", ")", ")", "\n", "reset_data", "=", "self", ".", "parent_conns", "[", "0", "]", ".", "recv", "(", ")", "\n", "def", "add_dict", "(", "d", ")", ":", "\n", "            ", "for", "key", ",", "val", "in", "d", ".", "items", "(", ")", ":", "\n", "                ", "item_scheme", "=", "{", "}", "\n", "if", "isinstance", "(", "val", ",", "Data", ")", ":", "\n", "                    ", "x_shape", "=", "val", ".", "x", ".", "shape", "[", "1", ":", "]", "if", "(", "val", ".", "x", "is", "not", "None", ")", "else", "0", "\n", "edge_shape", "=", "val", ".", "edge_attr", ".", "shape", "[", "1", ":", "]", "if", "(", "val", ".", "edge_attr", "is", "not", "None", ")", "else", "0", "\n", "item_scheme", "[", "'vshape'", "]", "=", "(", "x_shape", ",", "edge_shape", ")", "\n", "item_scheme", "[", "'dtype'", "]", "=", "Data", "\n", "", "else", ":", "\n", "                    ", "val", "=", "np", ".", "array", "(", "val", ")", "\n", "item_scheme", "[", "'vshape'", "]", "=", "val", ".", "shape", "[", "1", ":", "]", "\n", "if", "len", "(", "val", ".", "shape", ")", ">", "0", ":", "\n", "                        ", "if", "val", ".", "shape", "[", "0", "]", "==", "self", ".", "env_info", "[", "'n_agents'", "]", ":", "\n", "                            ", "item_scheme", "[", "'group'", "]", "=", "'agents'", "\n", "", "", "item_scheme", "[", "'dtype'", "]", "=", "numpy_to_torch_dtype", "(", "val", ".", "dtype", ")", "\n", "", "self", ".", "info_scheme", "[", "key", "]", "=", "item_scheme", "\n", "", "", "add_dict", "(", "reset_data", "[", "\"info\"", "]", ")", "\n", "try", ":", "\n", "            ", "actions", "=", "np", ".", "argmax", "(", "reset_data", "[", "\"avail_actions\"", "]", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "parent_conns", "[", "0", "]", ".", "send", "(", "(", "\"step\"", ",", "actions", ",", "True", ")", ")", "\n", "step_data", "=", "self", ".", "parent_conns", "[", "0", "]", ".", "recv", "(", ")", "\n", "add_dict", "(", "step_data", "[", "\"post_info\"", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Couldn't initialise step info scheme in parallel_info_runner:\"", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__init__": [[348, 350], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "x", "=", "x", "\n", "", "def", "__getstate__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__getstate__": [[350, 353], ["cloudpickle.dumps"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "import", "cloudpickle", "\n", "return", "cloudpickle", ".", "dumps", "(", "self", ".", "x", ")", "\n", "", "def", "__setstate__", "(", "self", ",", "ob", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.CloudpickleWrapper.__setstate__": [[353, 356], ["pickle.loads"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "ob", ")", ":", "\n", "        ", "import", "pickle", "\n", "self", ".", "x", "=", "pickle", ".", "loads", "(", "ob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.env_worker": [[277, 338], ["env_fn.x", "remote.recv", "len", "numpy.random.get_state", "torch.random.get_rng_state", "env_fn.x.step", "env_fn.x.get_state", "env_fn.x.get_avail_actions", "env_fn.x.get_obs", "env_fn.x.get_info", "remote.send", "numpy.random.set_state", "torch.random.set_rng_state", "len", "env_fn.x.reset", "remote.send", "env_fn.x.close", "remote.close", "env_fn.x.get_state", "env_fn.x.get_avail_actions", "env_fn.x.get_obs", "env_fn.x.get_info", "remote.send", "env_fn.x.get_env_info", "remote.send", "isinstance", "env_fn.x.get_stats", "remote.send", "isinstance", "remote.send", "getattr", "remote.send", "remote.send", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.step", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_info", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.reset", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.close", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.close", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_state", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_avail_actions", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_obs", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.starcraft.StarCraft2Env.StarCraft2Env.get_info", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.ParallelInfoRunner.get_env_info", "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.gfootball.FootballEnv.GoogleFootballEnv.get_stats"], ["", "", "", "def", "env_worker", "(", "remote", ",", "env_fn", ")", ":", "\n", "# Make environment", "\n", "    ", "env", "=", "env_fn", ".", "x", "(", ")", "\n", "while", "True", ":", "\n", "        ", "recv", "=", "remote", ".", "recv", "(", ")", "\n", "reset_state", "=", "False", "\n", "if", "len", "(", "recv", ")", "==", "2", ":", "\n", "            ", "cmd", ",", "data", "=", "recv", "\n", "", "elif", "len", "(", "recv", ")", "==", "3", ":", "\n", "            ", "cmd", ",", "data", ",", "reset_state", "=", "recv", "\n", "", "if", "reset_state", ":", "\n", "            ", "np_rand_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "torch_rand_state", "=", "th", ".", "random", ".", "get_rng_state", "(", ")", "\n", "", "if", "cmd", "==", "\"step\"", ":", "\n", "            ", "actions", "=", "data", "\n", "# Take a step in the environment", "\n", "reward", ",", "terminated", ",", "post_info", "=", "env", ".", "step", "(", "actions", ")", "\n", "# Return the observations, avail_actions and state to make the next action", "\n", "state", "=", "env", ".", "get_state", "(", ")", "\n", "avail_actions", "=", "env", ".", "get_avail_actions", "(", ")", "\n", "obs", "=", "env", ".", "get_obs", "(", ")", "\n", "info", "=", "env", ".", "get_info", "(", ")", "\n", "remote", ".", "send", "(", "{", "\n", "# Data for the next timestep needed to pick an action", "\n", "\"state\"", ":", "state", ",", "\n", "\"avail_actions\"", ":", "avail_actions", ",", "\n", "\"obs\"", ":", "obs", ",", "\n", "# Rest of the data for the current timestep", "\n", "\"reward\"", ":", "reward", ",", "\n", "\"terminated\"", ":", "terminated", ",", "\n", "\"post_info\"", ":", "post_info", ",", "\n", "\"info\"", ":", "info", ",", "\n", "}", ")", "\n", "", "elif", "cmd", "==", "\"reset\"", ":", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "remote", ".", "send", "(", "{", "\n", "\"state\"", ":", "env", ".", "get_state", "(", ")", ",", "\n", "\"avail_actions\"", ":", "env", ".", "get_avail_actions", "(", ")", ",", "\n", "\"obs\"", ":", "env", ".", "get_obs", "(", ")", ",", "\n", "\"info\"", ":", "env", ".", "get_info", "(", ")", ",", "\n", "}", ")", "\n", "", "elif", "cmd", "==", "\"close\"", ":", "\n", "            ", "env", ".", "close", "(", ")", "\n", "remote", ".", "close", "(", ")", "\n", "break", "\n", "", "elif", "cmd", "==", "\"get_env_info\"", ":", "\n", "            ", "remote", ".", "send", "(", "env", ".", "get_env_info", "(", ")", ")", "\n", "", "elif", "cmd", "==", "\"get_stats\"", ":", "\n", "            ", "remote", ".", "send", "(", "env", ".", "get_stats", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "data", ",", "tuple", ")", ":", "\n", "                ", "remote", ".", "send", "(", "getattr", "(", "env", ",", "cmd", ")", "(", "*", "data", ")", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "                ", "remote", ".", "send", "(", "getattr", "(", "env", ",", "cmd", ")", "(", "**", "data", ")", ")", "\n", "", "elif", "data", "is", "None", ":", "\n", "                ", "remote", ".", "send", "(", "getattr", "(", "env", ",", "cmd", ")", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "remote", ".", "send", "(", "getattr", "(", "env", ",", "cmd", ")", "(", "data", ")", ")", "\n", "", "", "if", "reset_state", ":", "\n", "            ", "np", ".", "random", ".", "set_state", "(", "np_rand_state", ")", "\n", "th", ".", "random", ".", "set_rng_state", "(", "torch_rand_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Acciorocketships_pymarl2.runners.parallel_info_runner.numpy_to_torch_dtype": [[340, 342], ["torch.tensor", "numpy.empty"], "function", ["None"], ["", "", "", "def", "numpy_to_torch_dtype", "(", "dtype", ")", ":", "\n", "    ", "return", "th", ".", "tensor", "(", "np", ".", "empty", "(", "0", ",", "dtype", "=", "dtype", ")", ")", ".", "dtype", "\n", "\n"]]}