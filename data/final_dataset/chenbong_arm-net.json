{"home.repos.pwc.inspect_result.chenbong_arm-net.None.main.train": [[137, 199], ["logger.info", "utils.util.AverageMeter", "time.time", "range", "logger.info", "model.save", "logger.info", "enumerate", "model.optimizer_G.zero_grad", "model.netG.apply", "model.netG.apply", "model.feed_data", "model.netG", "model.cri_pix", "loss.backward", "model.optimizer_G.step", "model.update_learning_rate", "model.cri_pix.item", "os.path.exists", "exit", "random.choices", "model.get_current_log", "model.get_current_learning_rate", "model.get_current_log.items", "logger.info", "main.test_image", "model.save", "model.save_training_state", "util.AverageMeter.update", "time.time", "datetime.datetime.fromtimestamp().strftime", "logger.info", "list", "setattr", "setattr", "opt[].get", "opt[].get", "time.time", "range", "time.time", "datetime.datetime.fromtimestamp", "len"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.update_learning_rate", "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.get_current_log", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.get_current_learning_rate", "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.test_image", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save_training_state", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.AverageMeter.update"], ["", "def", "train", "(", ")", ":", "\n", "    ", "global", "start_epoch", ",", "current_step", "\n", "\n", "logger", ".", "info", "(", "'Start training from epoch: {:d}, iter: {:d}'", ".", "format", "(", "start_epoch", ",", "current_step", ")", ")", "\n", "iter_time", "=", "util", ".", "AverageMeter", "(", "'1w Iter Time:'", ",", "':.2f'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "total_epochs", "+", "1", ")", ":", "\n", "        ", "for", "_", ",", "train_data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "abspath", ")", ":", "\n", "                ", "exit", "(", ")", "\n", "", "current_step", "+=", "1", "\n", "if", "current_step", ">", "total_iters", ":", "\n", "                ", "break", "\n", "", "model", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "\n", "width_id", "=", "random", ".", "choices", "(", "list", "(", "range", "(", "1", ",", "len", "(", "opt", "[", "'network_G'", "]", "[", "'width_list'", "]", ")", ")", ")", ",", "weights", "=", "model", ".", "hmap", "[", "'cost_list'", "]", "[", "1", ":", "]", "**", "2", ")", "[", "0", "]", "\n", "\n", "model", ".", "netG", ".", "apply", "(", "lambda", "m", ":", "setattr", "(", "m", ",", "'width_id'", ",", "width_id", ")", ")", "\n", "model", ".", "netG", ".", "apply", "(", "lambda", "m", ":", "setattr", "(", "m", ",", "'width_mult'", ",", "mult_list", "[", "width_id", "]", ")", ")", "\n", "\n", "model", ".", "feed_data", "(", "train_data", ")", "\n", "\n", "model", ".", "fake_H", "=", "model", ".", "netG", "(", "model", ".", "var_L", ")", "\n", "l_pix", "=", "model", ".", "cri_pix", "(", "model", ".", "fake_H", ",", "model", ".", "real_H", ")", "\n", "loss", "=", "l_pix", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "model", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "model", ".", "update_learning_rate", "(", "current_step", ",", "warmup_iter", "=", "opt", "[", "'train'", "]", "[", "'warmup_iter'", "]", ")", "\n", "\n", "model", ".", "log_dict", "[", "'l_pix'", "]", "=", "l_pix", ".", "item", "(", ")", "\n", "\n", "if", "current_step", "%", "opt", "[", "'logger'", "]", "[", "'print_freq'", "]", "==", "0", ":", "\n", "                ", "logs", "=", "model", ".", "get_current_log", "(", ")", "\n", "message", "=", "'[epoch:{:3d}, iter:{:8,d}, lr:('", ".", "format", "(", "epoch", ",", "current_step", ")", "\n", "for", "v", "in", "model", ".", "get_current_learning_rate", "(", ")", ":", "\n", "                    ", "message", "+=", "'{:.3e},'", ".", "format", "(", "v", ")", "\n", "", "message", "+=", "')] '", "\n", "for", "k", ",", "v", "in", "logs", ".", "items", "(", ")", ":", "\n", "                    ", "message", "+=", "'{:s}: {:.4e} '", ".", "format", "(", "k", ",", "v", ")", "\n", "", "logger", ".", "info", "(", "message", ")", "\n", "\n", "\n", "", "if", "(", "opt", "[", "'datasets'", "]", ".", "get", "(", "'val_patch'", ",", "None", ")", "or", "opt", "[", "'datasets'", "]", ".", "get", "(", "'val_img'", ",", "None", ")", ")", "and", "current_step", "%", "opt", "[", "'train'", "]", "[", "'val_freq'", "]", "==", "0", ":", "\n", "                ", "test_image", "(", "test_loaders", "=", "val_img_loaders", ")", "\n", "\n", "", "if", "current_step", "%", "opt", "[", "'logger'", "]", "[", "'save_checkpoint_freq'", "]", "==", "0", "or", "current_step", ">", "opt", "[", "'train'", "]", "[", "'niter'", "]", "-", "10", ":", "\n", "                ", "model", ".", "save", "(", "current_step", ")", "\n", "model", ".", "save_training_state", "(", "epoch", ",", "current_step", ")", "\n", "\n", "", "if", "current_step", "%", "10000", "==", "0", ":", "\n", "                ", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "finish_time", "=", "time", ".", "time", "(", ")", "+", "iter_time", ".", "avg", "*", "(", "total_iters", "-", "1", "-", "current_step", ")", "/", "1e4", "\n", "finish_dt", "=", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "finish_time", ")", ".", "strftime", "(", "\"%m/%d %H:%M:%S\"", ")", "\n", "logger", ".", "info", "(", "f\"======> {iter_time}s, Will finish at: {finish_dt}\"", ")", "\n", "\n", "", "", "", "logger", ".", "info", "(", "'Saving the final model.'", ")", "\n", "model", ".", "save", "(", "'latest'", ")", "\n", "logger", ".", "info", "(", "'End of training.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.None.main.test_patch": [[202, 241], ["model.netG.apply", "model.netG.apply", "model.netG.eval", "model.netG.train", "logger.info", "setattr", "setattr", "os.path.join", "model.feed_data", "utils.util.tensor2img", "utils.util.laplacian().mean", "patch_imscores.append", "model.test_patch", "model.get_current_visuals_patch", "utils.util.tensor2img", "utils.util.tensor2img", "utils.util.crop_border", "utils.util.calculate_psnr", "patch_psnrs.append", "os.path.splitext", "[].float().cpu", "os.path.basename", "utils.util.laplacian", "[].float", "test_data[].detach"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.None.main.train", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.tensor2img", "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.test_patch", "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.get_current_visuals_patch", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.tensor2img", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.tensor2img", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.crop_border", "home.repos.pwc.inspect_result.chenbong_arm-net.metrics.calculate_PSNR_SSIM.calculate_psnr", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.laplacian"], ["", "def", "test_patch", "(", "test_patch_loaders", ",", "width_id", ",", "width_mult", ",", "current_step", ")", ":", "\n", "    ", "model", ".", "netG", ".", "apply", "(", "lambda", "m", ":", "setattr", "(", "m", ",", "'width_id'", ",", "width_id", ")", ")", "\n", "model", ".", "netG", ".", "apply", "(", "lambda", "m", ":", "setattr", "(", "m", ",", "'width_mult'", ",", "width_mult", ")", ")", "\n", "\n", "patch_imscores", "=", "[", "]", "\n", "patch_psnrs", "=", "[", "]", "\n", "for", "test_patch_loader", "in", "test_patch_loaders", ":", "\n", "        ", "avg_psnr", "=", "0.", "\n", "idx", "=", "0", "\n", "model", ".", "netG", ".", "eval", "(", ")", "\n", "for", "test_data", "in", "test_patch_loader", ":", "\n", "\n", "            ", "idx", "+=", "1", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "test_data", "[", "'LQ_path'", "]", "[", "0", "]", ")", ")", "[", "0", "]", "\n", "img_dir", "=", "os", ".", "path", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'val_images'", "]", ",", "img_name", ")", "\n", "model", ".", "feed_data", "(", "test_data", ")", "\n", "\n", "lr_img", "=", "util", ".", "tensor2img", "(", "test_data", "[", "'LQ'", "]", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "imscore", "=", "util", ".", "laplacian", "(", "lr_img", ")", ".", "mean", "(", ")", "\n", "patch_imscores", ".", "append", "(", "imscore", ")", "\n", "model", ".", "test_patch", "(", ")", "\n", "\n", "visuals", "=", "model", ".", "get_current_visuals_patch", "(", ")", "\n", "\n", "sr_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'rlt'", "]", ")", "\n", "gt_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'GT'", "]", ")", "\n", "\n", "sr_img", ",", "gt_img", "=", "util", ".", "crop_border", "(", "[", "sr_img", ",", "gt_img", "]", ",", "opt", "[", "'scale'", "]", ")", "\n", "psnr", "=", "util", ".", "calculate_psnr", "(", "sr_img", ",", "gt_img", ")", "\n", "patch_psnrs", ".", "append", "(", "psnr", ")", "\n", "\n", "avg_psnr", "+=", "psnr", "\n", "", "model", ".", "netG", ".", "train", "(", ")", "\n", "\n", "avg_psnr", "=", "avg_psnr", "/", "idx", "\n", "\n", "logger", ".", "info", "(", "'# Validation # PSNR: {:.4e}'", ".", "format", "(", "avg_psnr", ")", ")", "\n", "", "return", "patch_imscores", ",", "patch_psnrs", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.None.main.test_image": [[243, 354], ["enumerate", "logger.info", "os.path.join", "utils.util.mkdir", "collections.OrderedDict", "logger.info", "len", "model.feed_data", "model.test_image", "model.get_current_visuals_image", "utils.util.save_img", "utils.util.cal_FLOPs", "logger.info", "logger.info", "utils.util.calc_base_hmap", "model.hmap[].append", "model.hmap[].append", "model.hmap[].append", "model.hmap[].append", "utils.util.save_hmap", "model.netG.apply", "model.netG.apply", "main.test_patch", "matplotlib.subplots", "ax.hist2d", "scipy.stats.binned_statistic", "model.hmap[].append", "model.hmap[].append", "model.hmap[].append", "model.hmap[].append", "utils.util.save_hmap", "matplotlib.cla", "matplotlib.close", "os.path.exists", "exit", "os.path.splitext", "os.path.join", "os.path.join", "utils.util.save_img", "utils.util.crop_border", "utils.util.calculate_psnr", "test_results[].append", "logger.info", "sum", "len", "os.path.join", "os.path.join", "os.path.basename", "data.util.bgr2ycbcr", "data.util.bgr2ycbcr", "utils.util.calculate_psnr", "test_results[].append", "range", "utils.util.cal_FLOPs", "logger.info", "logger.info", "sum", "setattr", "setattr", "len", "os.path.join.split"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.mkdir", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.feed_data", "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.test_image", "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.get_current_visuals_image", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.save_img", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.cal_FLOPs", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.calc_base_hmap", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.save_hmap", "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.test_patch", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.save_hmap", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.save_img", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.crop_border", "home.repos.pwc.inspect_result.chenbong_arm-net.metrics.calculate_PSNR_SSIM.calculate_psnr", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.bgr2ycbcr", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.bgr2ycbcr", "home.repos.pwc.inspect_result.chenbong_arm-net.metrics.calculate_PSNR_SSIM.calculate_psnr", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.cal_FLOPs"], ["", "def", "test_image", "(", "test_loaders", ",", "is_calc_hmap", "=", "True", ")", ":", "\n", "    ", "if", "is_calc_hmap", ":", "\n", "        ", "for", "width_id", ",", "mult", "in", "enumerate", "(", "mult_list", ")", ":", "\n", "            ", "if", "mult", "==", "0", ":", "\n", "                ", "x", ",", "y", ",", "hmap", ",", "hmap_x", ",", "hmap_y", ",", "hmap_y_mean", "=", "util", ".", "calc_base_hmap", "(", "'utils/bilinear_imscore.log'", ",", "'utils/bilinear_psnr.log'", ",", "bins", "=", "model", ".", "hmap", "[", "'bins'", "]", ")", "\n", "\n", "model", ".", "hmap", "[", "'hmap_list'", "]", ".", "append", "(", "hmap", ")", "\n", "model", ".", "hmap", "[", "'hmap_x_list'", "]", ".", "append", "(", "hmap_x", ")", "\n", "model", ".", "hmap", "[", "'hmap_y_list'", "]", ".", "append", "(", "hmap_y", ")", "\n", "model", ".", "hmap", "[", "'hmap_y_mean_list'", "]", ".", "append", "(", "hmap_y_mean", ")", "\n", "util", ".", "save_hmap", "(", "hmap", ",", "hmap_x", ",", "hmap_y", ",", "os", ".", "path", ".", "join", "(", "'utils'", ",", "'hmap_0.png'", ")", ",", "bins", "=", "model", ".", "hmap", "[", "'bins'", "]", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "netG", ".", "apply", "(", "lambda", "m", ":", "setattr", "(", "m", ",", "'width_id'", ",", "width_id", ")", ")", "\n", "model", ".", "netG", ".", "apply", "(", "lambda", "m", ":", "setattr", "(", "m", ",", "'width_mult'", ",", "mult_list", "[", "width_id", "]", ")", ")", "\n", "patch_imscores", ",", "patch_psnrs", "=", "test_patch", "(", "test_patch_loaders", "=", "[", "val_patch_loader", "]", ",", "width_id", "=", "width_id", ",", "width_mult", "=", "mult_list", "[", "width_id", "]", ",", "current_step", "=", "-", "1", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "6.4", ",", "6.4", ")", ")", "\n", "hmap", ",", "hmap_x", ",", "hmap_y", ",", "_", "=", "ax", ".", "hist2d", "(", "patch_imscores", ",", "patch_psnrs", ",", "bins", "=", "model", ".", "hmap", "[", "'bins'", "]", ")", "\n", "ret", "=", "stats", ".", "binned_statistic", "(", "patch_imscores", ",", "patch_psnrs", ",", "'mean'", ",", "bins", "=", "hmap_x", ")", "\n", "hmap_y_mean", "=", "ret", ".", "statistic", "\n", "\n", "hmap_x", "=", "hmap_x", "[", ":", "-", "1", "]", "+", "(", "hmap_x", "[", "1", "]", "-", "hmap_x", "[", "0", "]", ")", "/", "2", "\n", "hmap_y", "=", "hmap_y", "[", ":", "-", "1", "]", "+", "(", "hmap_y", "[", "1", "]", "-", "hmap_y", "[", "0", "]", ")", "/", "2", "\n", "\n", "model", ".", "hmap", "[", "'hmap_list'", "]", ".", "append", "(", "hmap", ")", "\n", "model", ".", "hmap", "[", "'hmap_x_list'", "]", ".", "append", "(", "hmap_x", ")", "\n", "model", ".", "hmap", "[", "'hmap_y_list'", "]", ".", "append", "(", "hmap_y", ")", "\n", "model", ".", "hmap", "[", "'hmap_y_mean_list'", "]", ".", "append", "(", "hmap_y_mean", ")", "\n", "\n", "util", ".", "save_hmap", "(", "hmap", ",", "hmap_x", ",", "hmap_y", ",", "os", ".", "path", ".", "join", "(", "'utils'", ",", "f'hmap_{width_id}.png'", ")", ",", "bins", "=", "model", ".", "hmap", "[", "'bins'", "]", ")", "\n", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "close", "(", "\"all\"", ")", "\n", "\n", "\n", "", "", "", "for", "test_loader", "in", "test_loaders", ":", "\n", "        ", "test_set_name", "=", "test_loader", ".", "dataset", ".", "opt", "[", "'name'", "]", "\n", "logger", ".", "info", "(", "'\\nTesting [{:s}]...'", ".", "format", "(", "test_set_name", ")", ")", "\n", "dataset_dir", "=", "os", ".", "path", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'job_dir'", "]", ",", "test_set_name", ")", "\n", "util", ".", "mkdir", "(", "dataset_dir", ")", "\n", "\n", "test_results", "=", "OrderedDict", "(", ")", "\n", "test_results", "[", "'psnr'", "]", "=", "[", "]", "\n", "test_results", "[", "'ssim'", "]", "=", "[", "]", "\n", "test_results", "[", "'psnr_y'", "]", "=", "[", "]", "\n", "test_results", "[", "'ssim_y'", "]", "=", "[", "]", "\n", "\n", "num_ress", "=", "[", "0", "]", "*", "(", "len", "(", "opt", "[", "'network_G'", "]", "[", "'width_list'", "]", ")", ")", "\n", "\n", "\n", "for", "data", "in", "test_loader", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "abspath", ")", ":", "\n", "                ", "exit", "(", ")", "\n", "", "need_GT", "=", "True", "\n", "model", ".", "feed_data", "(", "data", ",", "need_GT", "=", "need_GT", ")", "\n", "img_path", "=", "data", "[", "'GT_path'", "]", "[", "0", "]", "if", "need_GT", "else", "data", "[", "'LQ_path'", "]", "[", "0", "]", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "model", ".", "test_image", "(", ")", "\n", "visuals", "=", "model", ".", "get_current_visuals_image", "(", "need_GT", "=", "need_GT", ")", "\n", "\n", "sr_img", "=", "visuals", "[", "'rlt'", "]", "\n", "if", "opt", "[", "'add_mask'", "]", ":", "\n", "                ", "sr_img_mask", "=", "visuals", "[", "'rlt_mask'", "]", "\n", "\n", "", "num_res", "=", "visuals", "[", "'num_res'", "]", "\n", "psnr_res", "=", "visuals", "[", "'psnr_res'", "]", "\n", "\n", "suffix", "=", "opt", "[", "'suffix'", "]", "\n", "if", "suffix", ":", "\n", "                ", "save_img_path", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "img_name", "+", "suffix", "+", "'.png'", ")", "\n", "", "else", ":", "\n", "                ", "save_img_path", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "img_name", "+", "'.png'", ")", "\n", "", "util", ".", "save_img", "(", "sr_img", ",", "save_img_path", ")", "\n", "if", "opt", "[", "'add_mask'", "]", ":", "\n", "                ", "util", ".", "save_img", "(", "sr_img_mask", ",", "save_img_path", ".", "split", "(", "'.pn'", ")", "[", "0", "]", "+", "'_mask.png'", ")", "\n", "\n", "\n", "", "if", "need_GT", ":", "\n", "                ", "gt_img", "=", "visuals", "[", "'GT'", "]", "\n", "sr_img", ",", "gt_img", "=", "util", ".", "crop_border", "(", "[", "sr_img", ",", "gt_img", "]", ",", "opt", "[", "'scale'", "]", ")", "\n", "\n", "psnr", "=", "util", ".", "calculate_psnr", "(", "sr_img", ",", "gt_img", ")", "\n", "\n", "test_results", "[", "'psnr'", "]", ".", "append", "(", "psnr", ")", "\n", "\n", "if", "gt_img", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "                    ", "sr_img_y", "=", "bgr2ycbcr", "(", "sr_img", "/", "255.", ",", "only_y", "=", "True", ")", "\n", "gt_img_y", "=", "bgr2ycbcr", "(", "gt_img", "/", "255.", ",", "only_y", "=", "True", ")", "\n", "psnr_y", "=", "util", ".", "calculate_psnr", "(", "sr_img_y", "*", "255", ",", "gt_img_y", "*", "255", ")", "\n", "\n", "test_results", "[", "'psnr_y'", "]", ".", "append", "(", "psnr_y", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "opt", "[", "'network_G'", "]", "[", "'width_list'", "]", ")", ")", ":", "\n", "                        ", "num_ress", "[", "i", "]", "+=", "num_res", "[", "i", "]", "\n", "\n", "", "flops", ",", "percent", "=", "util", ".", "cal_FLOPs", "(", "num_res", ",", "cost_list", ")", "\n", "logger", ".", "info", "(", "f'{img_name} - PSNR: {psnr:.4f}dB  FLOPs: {flops/1e6:.2f}M  Percent: {percent*100:.2f}%'", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "logger", ".", "info", "(", "'{:20s} - PSNR: {:.6f} dB; SSIM: {:.6f}.'", ".", "format", "(", "img_name", ",", "psnr", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "img_name", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "f'# Validation # Class num: {num_ress}  all:{sum(num_ress)}'", ")", "\n", "\n", "if", "need_GT", ":", "\n", "            ", "flops", ",", "percent", "=", "util", ".", "cal_FLOPs", "(", "num_ress", ",", "cost_list", ")", "\n", "logger", ".", "info", "(", "'# FLOPs {:.4e} Percent {:.4e}'", ".", "format", "(", "flops", ",", "percent", ")", ")", "\n", "ave_psnr", "=", "sum", "(", "test_results", "[", "'psnr'", "]", ")", "/", "len", "(", "test_results", "[", "'psnr'", "]", ")", "\n", "\n", "logger", ".", "info", "(", "f'----Average PSNR results for {test_set_name}----\\tPSNR: {ave_psnr:.6f} dB\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.AverageMeter.__init__": [[255, 259], ["util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.AverageMeter.reset": [[260, 265], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.AverageMeter.update": [[266, 271], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.AverageMeter.__str__": [[272, 275], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.getnearpos": [[26, 27], ["numpy.abs().argmin", "numpy.abs"], "function", ["None"], ["", "def", "getnearpos", "(", "array", ",", "value", ")", ":", "return", "(", "np", ".", "abs", "(", "array", "-", "value", ")", ")", ".", "argmin", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.get_netG": [[28, 33], ["isinstance"], "function", ["None"], ["def", "get_netG", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ".", "netG", ",", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "return", "model", ".", "netG", ".", "module", "\n", "", "else", ":", "\n", "        ", "return", "model", ".", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.get_net": [[34, 39], ["isinstance"], "function", ["None"], ["", "", "def", "get_net", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ".", "netG", ",", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "return", "model", "\n", "", "else", ":", "\n", "        ", "return", "model", ".", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.save_hmap": [[41, 55], ["matplotlib.subplots", "ax.matshow", "ax.xaxis.set_ticks", "ax.set_xticklabels", "ax.xaxis.set_ticks_position", "ax.yaxis.set_ticks", "ax.set_yticklabels", "fig.savefig", "matplotlib.cla", "matplotlib.close", "numpy.arange", "numpy.around", "numpy.arange", "numpy.around", "numpy.linspace", "numpy.linspace", "min", "max", "min", "max"], "function", ["None"], ["", "", "def", "save_hmap", "(", "hmap", ",", "hmap_x", ",", "hmap_y", ",", "save_path", ",", "bins", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "6.4", ",", "6.4", ")", ")", "\n", "ax", ".", "matshow", "(", "hmap", ",", "origin", "=", "'lower'", ")", "\n", "ax", ".", "xaxis", ".", "set_ticks", "(", "np", ".", "arange", "(", "0", ",", "bins", ",", "1", ")", ")", "\n", "ax", ".", "set_xticklabels", "(", "np", ".", "around", "(", "np", ".", "linspace", "(", "min", "(", "hmap_x", ")", ",", "max", "(", "hmap_x", ")", ",", "num", "=", "bins", ")", ",", "2", ")", ",", "rotation", "=", "90", ")", "\n", "ax", ".", "xaxis", ".", "set_ticks_position", "(", "'bottom'", ")", "\n", "\n", "ax", ".", "yaxis", ".", "set_ticks", "(", "np", ".", "arange", "(", "0", ",", "bins", ",", "1", ")", ")", "\n", "ax", ".", "set_yticklabels", "(", "np", ".", "around", "(", "np", ".", "linspace", "(", "min", "(", "hmap_y", ")", ",", "max", "(", "hmap_y", ")", ",", "num", "=", "bins", ")", ",", "2", ")", ")", "\n", "\n", "fig", ".", "savefig", "(", "save_path", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0.05", ")", "\n", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "close", "(", "\"all\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.read_log": [[56, 64], ["open", "f.readlines", "eval", "nums.append", "line.strip().split", "line.strip"], "function", ["None"], ["", "def", "read_log", "(", "log_path", ")", ":", "\n", "    ", "nums", "=", "[", "]", "\n", "with", "open", "(", "log_path", ",", "'r'", ")", "as", "f", ":", "\n", "# print(f.read())    # ", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "# ", "\n", "            ", "num", "=", "eval", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "', '", ")", "[", "-", "1", "]", ")", "\n", "nums", ".", "append", "(", "num", ")", "\n", "", "", "return", "nums", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.calc_base_hmap": [[65, 83], ["util.read_log", "util.read_log", "matplotlib.subplots", "ax.hist2d", "scipy.stats.binned_statistic", "matplotlib.cla", "matplotlib.close", "len"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.read_log", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.read_log"], ["", "def", "calc_base_hmap", "(", "imscore_log_path", ",", "psnr_log_path", ",", "bins", ")", ":", "\n", "    ", "x", "=", "read_log", "(", "imscore_log_path", ")", "\n", "y", "=", "read_log", "(", "psnr_log_path", ")", "\n", "z", "=", "[", "1", "]", "*", "len", "(", "x", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "hmap", ",", "hmap_x", ",", "hmap_y", ",", "_", "=", "ax", ".", "hist2d", "(", "x", ",", "y", ",", "bins", "=", "bins", ")", "\n", "\n", "ret", "=", "stats", ".", "binned_statistic", "(", "x", ",", "y", ",", "'mean'", ",", "bins", "=", "hmap_x", ")", "\n", "hmap_y_mean", "=", "ret", ".", "statistic", "\n", "\n", "hmap_x", "=", "hmap_x", "[", ":", "-", "1", "]", "+", "(", "hmap_x", "[", "1", "]", "-", "hmap_x", "[", "0", "]", ")", "/", "2", "\n", "hmap_y", "=", "hmap_y", "[", ":", "-", "1", "]", "+", "(", "hmap_y", "[", "1", "]", "-", "hmap_y", "[", "0", "]", ")", "/", "2", "\n", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "close", "(", "\"all\"", ")", "\n", "\n", "return", "x", ",", "y", ",", "hmap", ",", "hmap_x", ",", "hmap_y", ",", "hmap_y_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.hmap_imscore_to_pred_psnr": [[85, 90], ["util.getnearpos", "scipy.special.softmax", "random.choices"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.getnearpos"], ["", "def", "hmap_imscore_to_pred_psnr", "(", "hmap", ",", "hmap_x", ",", "hmap_y", ",", "imscore", ",", "t", "=", "1e-2", ")", ":", "\n", "    ", "idx", "=", "getnearpos", "(", "hmap_x", ",", "imscore", ")", "\n", "psnr_dist", "=", "softmax", "(", "hmap", "[", ":", ",", "idx", "]", "/", "t", ")", "\n", "pred_psnr", "=", "random", ".", "choices", "(", "hmap_y", ",", "weights", "=", "psnr_dist", ")", "[", "0", "]", "\n", "return", "pred_psnr", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.hmap_y_mean_to_pred_psnr": [[91, 95], ["util.getnearpos"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.getnearpos"], ["", "def", "hmap_y_mean_to_pred_psnr", "(", "hmap_y_mean", ",", "hmap_x", ",", "imscore", ")", ":", "\n", "    ", "idx", "=", "getnearpos", "(", "hmap_x", ",", "imscore", ")", "\n", "pred_psnr", "=", "hmap_y_mean", "[", "idx", "]", "\n", "return", "pred_psnr", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.summary": [[102, 223], ["isinstance", "torch.zeros().to", "torch.zeros().to", "util.get_names_dict", "collections.OrderedDict", "model.apply", "pandas.to_numeric", "pandas.to_numeric", "pandas.to_numeric", "df.rename.rename", "max", "pandas.DataFrame", "warnings.catch_warnings", "warnings.filterwarnings", "df.rename.sum", "torch.zeros", "torch.zeros", "next", "len", "get_names_dict.items", "collections.OrderedDict", "id", "isinstance", "collections.OrderedDict", "module.named_parameters", "list", "isinstance", "hooks.append", "torch.no_grad", "torch.no_grad", "hook.remove", "dict", "len", "model.parameters", "[].split", "list", "module.named_parameters", "collections.OrderedDict.values", "module.register_forward_hook", "model", "model", "df.rename.to_string().split", "list", "outputs.size", "param.nelement", "param.nelement", "list", "outputs[].size", "list", "param.size", "len", "isinstance", "isinstance", "outputs[].size", "isinstance", "list", "param.nelement", "df.rename.to_string", "str().split", "outputs[].data.size", "inputs[].size", "param.nelement", "param.size", "len", "len", "inputs[].size", "str", "inputs[].size", "inputs[].size", "len", "outputs[].size"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.get_names_dict"], ["def", "summary", "(", "model", ",", "input_size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Summarize the given input model.\n    Summarized information are 1) output shape, 2) kernel shape,\n    3) number of the parameters and 4) operations (Mult-Adds)\n    Args:\n        model (Module): Model to summarize\n        x (Tensor): Input tensor of the model with [N, C, H, W] shape\n                    dtype and device have to match to the model\n        args, kwargs: Other argument used in `model.forward` function\n    \"\"\"", "\n", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "x", "=", "torch", ".", "zeros", "(", "input_size", ")", ".", "to", "(", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n", "def", "register_hook", "(", "module", ")", ":", "\n", "        ", "def", "hook", "(", "module", ",", "inputs", ",", "outputs", ")", ":", "\n", "            ", "cls_name", "=", "str", "(", "module", ".", "__class__", ")", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"'\"", ")", "[", "0", "]", "\n", "module_idx", "=", "len", "(", "summary", ")", "\n", "key", "=", "None", "\n", "for", "name", ",", "item", "in", "module_names", ".", "items", "(", ")", ":", "\n", "                ", "if", "item", "==", "module", ":", "\n", "                    ", "key", "=", "\"{}_{}\"", ".", "format", "(", "module_idx", ",", "name", ")", "\n", "break", "\n", "", "", "assert", "key", "\n", "\n", "info", "=", "OrderedDict", "(", ")", "\n", "info", "[", "\"id\"", "]", "=", "id", "(", "module", ")", "\n", "if", "isinstance", "(", "outputs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "info", "[", "\"out\"", "]", "=", "list", "(", "outputs", "[", "0", "]", ".", "size", "(", ")", ")", "\n", "", "except", "AttributeError", ":", "\n", "                    ", "info", "[", "\"out\"", "]", "=", "list", "(", "outputs", "[", "0", "]", ".", "data", ".", "size", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "info", "[", "\"out\"", "]", "=", "list", "(", "outputs", ".", "size", "(", ")", ")", "\n", "\n", "", "info", "[", "\"ksize\"", "]", "=", "\"-\"", "\n", "info", "[", "\"inner\"", "]", "=", "OrderedDict", "(", ")", "\n", "info", "[", "\"params_nt\"", "]", ",", "info", "[", "\"params\"", "]", ",", "info", "[", "\"macs\"", "]", "=", "0", ",", "0", ",", "0", "\n", "for", "name", ",", "param", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "                ", "info", "[", "\"params\"", "]", "+=", "param", ".", "nelement", "(", ")", "*", "param", ".", "requires_grad", "\n", "info", "[", "\"params_nt\"", "]", "+=", "param", ".", "nelement", "(", ")", "*", "(", "not", "param", ".", "requires_grad", ")", "\n", "\n", "if", "name", "==", "\"weight\"", ":", "\n", "                    ", "ksize", "=", "list", "(", "param", ".", "size", "(", ")", ")", "\n", "if", "len", "(", "ksize", ")", ">", "1", ":", "\n", "                        ", "ksize", "[", "0", "]", ",", "ksize", "[", "1", "]", "=", "ksize", "[", "1", "]", ",", "ksize", "[", "0", "]", "\n", "", "info", "[", "\"ksize\"", "]", "=", "ksize", "\n", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                        ", "assert", "len", "(", "inputs", "[", "0", "]", ".", "size", "(", ")", ")", "==", "4", "and", "len", "(", "inputs", "[", "0", "]", ".", "size", "(", ")", ")", "==", "len", "(", "outputs", "[", "0", "]", ".", "size", "(", ")", ")", "+", "1", "\n", "\n", "in_c", ",", "in_h", ",", "in_w", "=", "inputs", "[", "0", "]", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "k_h", ",", "k_w", "=", "module", ".", "kernel_size", "\n", "out_c", ",", "out_h", ",", "out_w", "=", "outputs", "[", "0", "]", ".", "size", "(", ")", "\n", "groups", "=", "module", ".", "groups", "\n", "kernel_mul", "=", "k_h", "*", "k_w", "*", "(", "in_c", "//", "groups", ")", "\n", "\n", "kernel_mul_group", "=", "kernel_mul", "*", "out_h", "*", "out_w", "*", "(", "out_c", "//", "groups", ")", "\n", "total_mul", "=", "kernel_mul_group", "*", "groups", "\n", "info", "[", "\"macs\"", "]", "+=", "2", "*", "total_mul", "\n", "\n", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                        ", "info", "[", "\"macs\"", "]", "+=", "inputs", "[", "0", "]", ".", "size", "(", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "                        ", "info", "[", "\"macs\"", "]", "+=", "param", ".", "nelement", "(", ")", "\n", "\n", "", "", "elif", "\"weight\"", "in", "name", ":", "\n", "                    ", "info", "[", "\"inner\"", "]", "[", "name", "]", "=", "list", "(", "param", ".", "size", "(", ")", ")", "\n", "info", "[", "\"macs\"", "]", "+=", "param", ".", "nelement", "(", ")", "\n", "\n", "", "", "if", "list", "(", "module", ".", "named_parameters", "(", ")", ")", ":", "\n", "                ", "for", "v", "in", "summary", ".", "values", "(", ")", ":", "\n", "                    ", "if", "info", "[", "\"id\"", "]", "==", "v", "[", "\"id\"", "]", ":", "\n", "                        ", "info", "[", "\"params\"", "]", "=", "\"(recursive)\"", "\n", "\n", "", "", "", "if", "info", "[", "\"params\"", "]", "==", "0", ":", "\n", "                ", "info", "[", "\"params\"", "]", ",", "info", "[", "\"macs\"", "]", "=", "\"-\"", ",", "\"-\"", "\n", "\n", "", "summary", "[", "key", "]", "=", "info", "\n", "\n", "", "if", "isinstance", "(", "module", ",", "layer_modules", ")", "or", "not", "module", ".", "_modules", ":", "\n", "            ", "hooks", ".", "append", "(", "module", ".", "register_forward_hook", "(", "hook", ")", ")", "\n", "\n", "\n", "\n", "", "", "module_names", "=", "get_names_dict", "(", "model", ")", "\n", "\n", "hooks", "=", "[", "]", "\n", "summary", "=", "OrderedDict", "(", ")", "\n", "\n", "model", ".", "apply", "(", "register_hook", ")", "\n", "try", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", "(", "x", ")", "if", "not", "(", "kwargs", "or", "args", ")", "else", "model", "(", "x", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "finally", ":", "\n", "        ", "for", "hook", "in", "hooks", ":", "\n", "            ", "hook", ".", "remove", "(", ")", "\n", "# Use pandas to align the columns", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "summary", ")", ".", "T", "\n", "\n", "\n", "df", "[", "\"Mult-Adds\"", "]", "=", "pd", ".", "to_numeric", "(", "df", "[", "\"macs\"", "]", ",", "errors", "=", "\"coerce\"", ")", "\n", "df", "[", "\"Params\"", "]", "=", "pd", ".", "to_numeric", "(", "df", "[", "\"params\"", "]", ",", "errors", "=", "\"coerce\"", ")", "\n", "df", "[", "\"Non-trainable params\"", "]", "=", "pd", ".", "to_numeric", "(", "df", "[", "\"params_nt\"", "]", ",", "errors", "=", "\"coerce\"", ")", "\n", "df", "=", "df", ".", "rename", "(", "columns", "=", "dict", "(", "\n", "ksize", "=", "\"Kernel Shape\"", ",", "\n", "out", "=", "\"Output Shape\"", ",", "\n", ")", ")", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "filterwarnings", "(", "'ignore'", ")", "\n", "df_sum", "=", "df", ".", "sum", "(", ")", "\n", "\n", "\n", "", "df", ".", "index", ".", "name", "=", "\"Layer\"", "\n", "\n", "df", "=", "df", "[", "[", "\"Kernel Shape\"", ",", "\"Output Shape\"", ",", "\"Params\"", ",", "\"Mult-Adds\"", "]", "]", "\n", "max_repr_width", "=", "max", "(", "[", "len", "(", "row", ")", "for", "row", "in", "df", ".", "to_string", "(", ")", ".", "split", "(", "\"\\n\"", ")", "]", ")", "\n", "\n", "return", "df_sum", "[", "\"Mult-Adds\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.get_names_dict": [[224, 243], ["util.get_names_dict._get_names"], "function", ["None"], ["", "def", "get_names_dict", "(", "model", ")", ":", "\n", "    ", "\"\"\"Recursive walk to get names including path.\"\"\"", "\n", "names", "=", "{", "}", "\n", "\n", "def", "_get_names", "(", "module", ",", "parent_name", "=", "\"\"", ")", ":", "\n", "        ", "for", "key", ",", "m", "in", "module", ".", "named_children", "(", ")", ":", "\n", "            ", "cls_name", "=", "str", "(", "m", ".", "__class__", ")", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"'\"", ")", "[", "0", "]", "\n", "num_named_children", "=", "len", "(", "list", "(", "m", ".", "named_children", "(", ")", ")", ")", "\n", "if", "num_named_children", ">", "0", ":", "\n", "                ", "name", "=", "parent_name", "+", "\".\"", "+", "key", "if", "parent_name", "else", "key", "\n", "", "else", ":", "\n", "                ", "name", "=", "parent_name", "+", "\".\"", "+", "cls_name", "+", "\"_\"", "+", "key", "if", "parent_name", "else", "key", "\n", "", "names", "[", "name", "]", "=", "m", "\n", "\n", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                ", "_get_names", "(", "m", ",", "parent_name", "=", "name", ")", "\n", "\n", "", "", "", "_get_names", "(", "model", ")", "\n", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.laplacian": [[245, 250], ["cv2.cvtColor", "cv2.Laplacian", "cv2.convertScaleAbs"], "function", ["None"], ["", "def", "laplacian", "(", "image", ")", ":", "\n", "    ", "gray", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "laplac", "=", "cv2", ".", "Laplacian", "(", "gray", ",", "cv2", ".", "CV_16S", ",", "ksize", "=", "3", ")", "\n", "mask_img", "=", "cv2", ".", "convertScaleAbs", "(", "laplac", ")", "\n", "return", "mask_img", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.cal_FLOPs": [[278, 287], ["range", "sum", "len", "len", "len"], "function", ["None"], ["", "", "def", "cal_FLOPs", "(", "num_ress", ",", "cost_list", ")", ":", "\n", "    ", "assert", "len", "(", "num_ress", ")", "==", "len", "(", "cost_list", ")", "\n", "flops", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "cost_list", ")", ")", ":", "\n", "        ", "flops", "+=", "cost_list", "[", "i", "]", "*", "num_ress", "[", "i", "]", "\n", "", "flops", "/=", "sum", "(", "num_ress", ")", "\n", "percent", "=", "flops", "/", "cost_list", "[", "-", "1", "]", "\n", "\n", "return", "flops", ",", "percent", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.OrderedYaml": [[291, 304], ["Dumper.add_representer", "Loader.add_constructor", "dumper.represent_dict", "collections.OrderedDict", "data.items", "loader.construct_pairs"], "function", ["None"], ["", "def", "OrderedYaml", "(", ")", ":", "\n", "    ", "'''yaml orderedDict support'''", "\n", "_mapping_tag", "=", "yaml", ".", "resolver", ".", "BaseResolver", ".", "DEFAULT_MAPPING_TAG", "\n", "\n", "def", "dict_representer", "(", "dumper", ",", "data", ")", ":", "\n", "        ", "return", "dumper", ".", "represent_dict", "(", "data", ".", "items", "(", ")", ")", "\n", "\n", "", "def", "dict_constructor", "(", "loader", ",", "node", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "loader", ".", "construct_pairs", "(", "node", ")", ")", "\n", "\n", "", "Dumper", ".", "add_representer", "(", "OrderedDict", ",", "dict_representer", ")", "\n", "Loader", ".", "add_constructor", "(", "_mapping_tag", ",", "dict_constructor", ")", "\n", "return", "Loader", ",", "Dumper", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.get_timestamp": [[311, 313], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_timestamp", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d-%H%M%S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.mkdir": [[315, 318], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.mkdirs": [[320, 326], ["isinstance", "util.mkdir", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.mkdir", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "", "else", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.mkdir_and_rename": [[328, 336], ["os.path.exists", "os.makedirs", "print", "logging.getLogger", "logging.getLogger.info", "os.rename", "util.get_timestamp"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.get_timestamp"], ["", "", "", "def", "mkdir_and_rename", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "new_name", "=", "path", "+", "'_archived_'", "+", "get_timestamp", "(", ")", "\n", "print", "(", "'Path already exists. Rename it to [{:s}]'", ".", "format", "(", "new_name", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "logger", ".", "info", "(", "'Path already exists. Rename it to [{:s}]'", ".", "format", "(", "new_name", ")", ")", "\n", "os", ".", "rename", "(", "path", ",", "new_name", ")", "\n", "", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.setup_logger": [[338, 353], ["logging.getLogger", "logging.Formatter", "logging.getLogger.setLevel", "os.path.join", "print", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "util.get_timestamp"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.get_timestamp"], ["", "def", "setup_logger", "(", "logger_name", ",", "root", ",", "phase", ",", "level", "=", "logging", ".", "INFO", ",", "screen", "=", "False", ",", "tofile", "=", "False", ")", ":", "\n", "    ", "'''set up logger'''", "\n", "lg", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s.%(msecs)03d - %(levelname)s: %(message)s'", ",", "datefmt", "=", "'%y-%m-%d %H:%M:%S'", ")", "\n", "lg", ".", "setLevel", "(", "level", ")", "\n", "if", "tofile", ":", "\n", "        ", "log_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "phase", "+", "'_{}.log'", ".", "format", "(", "get_timestamp", "(", ")", ")", ")", "\n", "print", "(", "log_file", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "mode", "=", "'w'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "lg", ".", "addHandler", "(", "fh", ")", "\n", "", "if", "screen", ":", "\n", "        ", "sh", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "sh", ".", "setFormatter", "(", "formatter", ")", "\n", "lg", ".", "addHandler", "(", "sh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.crop_border": [[358, 371], ["None"], "function", ["None"], ["", "", "def", "crop_border", "(", "img_list", ",", "crop_border", ")", ":", "\n", "    ", "\"\"\"Crop borders of images\n    Args:\n        img_list (list [Numpy]): HWC\n        crop_border (int): crop border for each end of height and weight\n\n    Returns:\n        (list [Numpy]): cropped image list\n    \"\"\"", "\n", "if", "crop_border", "==", "0", ":", "\n", "        ", "return", "img_list", "\n", "", "else", ":", "\n", "        ", "return", "[", "v", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", "]", "for", "v", "in", "img_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.tensor2img": [[373, 397], ["tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu().clamp_", "tensor.squeeze().float().cpu().clamp_.dim", "tensor.numpy.astype", "len", "torchvision.utils.make_grid().numpy", "numpy.transpose", "tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu", "tensor.squeeze().float().cpu().clamp_.numpy", "numpy.transpose", "torchvision.utils.make_grid", "tensor.squeeze().float().cpu().clamp_.numpy", "TypeError", "tensor.squeeze().float().cpu().clamp_.squeeze().float", "int", "tensor.squeeze().float().cpu().clamp_.squeeze", "math.sqrt"], "function", ["None"], ["", "", "def", "tensor2img", "(", "tensor", ",", "out_type", "=", "np", ".", "uint8", ",", "min_max", "=", "(", "0", ",", "1", ")", ")", ":", "\n", "    ", "'''\n    Converts a torch Tensor into an image Numpy array\n    Input: 4D(B,(3/1),H,W), 3D(C,H,W), or 2D(H,W), any range, RGB channel order\n    Output: 3D(H,W,C) or 2D(H,W), [0,255], np.uint8 (default)\n    '''", "\n", "tensor", "=", "tensor", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "clamp_", "(", "*", "min_max", ")", "# clamp", "\n", "tensor", "=", "(", "tensor", "-", "min_max", "[", "0", "]", ")", "/", "(", "min_max", "[", "1", "]", "-", "min_max", "[", "0", "]", ")", "# to range [0,1]", "\n", "n_dim", "=", "tensor", ".", "dim", "(", ")", "\n", "if", "n_dim", "==", "4", ":", "\n", "        ", "n_img", "=", "len", "(", "tensor", ")", "\n", "img_np", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "int", "(", "math", ".", "sqrt", "(", "n_img", ")", ")", ",", "normalize", "=", "False", ")", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "3", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "2", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Only support 4D, 3D and 2D tensor. But received with dimension: {:d}'", ".", "format", "(", "n_dim", ")", ")", "\n", "", "if", "out_type", "==", "np", ".", "uint8", ":", "\n", "        ", "img_np", "=", "(", "img_np", "*", "255.0", ")", ".", "round", "(", ")", "\n", "# Important. Unlike matlab, numpy.unit8() WILL NOT round by default.", "\n", "", "return", "img_np", ".", "astype", "(", "out_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.save_img": [[399, 402], ["None"], "function", ["None"], ["", "def", "save_img", "(", "img", ",", "img_path", ",", "mode", "=", "'RGB'", ")", ":", "\n", "#**", "\n", "    ", "return", "\n", "# cv2.imwrite(img_path, img)", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.calculate_psnr": [[411, 419], ["img1.astype.astype", "img2.astype.astype", "numpy.mean", "float", "math.log10", "math.sqrt"], "function", ["None"], ["", "def", "calculate_psnr", "(", "img1", ",", "img2", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "    ", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "80", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.ssim": [[421, 441], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.calculate_ssim": [[443, 462], ["ValueError", "util.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "util.ssim", "util.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.metrics.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.chenbong_arm-net.metrics.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.chenbong_arm-net.metrics.calculate_PSNR_SSIM.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data_scripts.extract_subimages_train.main": [[17, 86], ["data._get_paths_from_images", "data._get_paths_from_images", "enumerate", "print", "extract_subimages_train.extract_signle", "print", "extract_subimages_train.extract_signle", "len", "len", "zip", "print", "PIL.Image.open", "PIL.Image.open", "len", "len", "extract_subimages_train.extract_signle", "ValueError", "data._get_paths_from_images", "data._get_paths_from_images"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.util._get_paths_from_images", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util._get_paths_from_images", "home.repos.pwc.inspect_result.chenbong_arm-net.data_scripts.extract_subimages_test.extract_signle", "home.repos.pwc.inspect_result.chenbong_arm-net.data_scripts.extract_subimages_test.extract_signle", "home.repos.pwc.inspect_result.chenbong_arm-net.data_scripts.extract_subimages_test.extract_signle", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util._get_paths_from_images", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util._get_paths_from_images"], ["def", "main", "(", ")", ":", "\n", "    ", "mode", "=", "'pair'", "# single (one input folder) | pair (extract corresponding GT and LR pairs)", "\n", "opt", "=", "{", "}", "\n", "opt", "[", "'n_thread'", "]", "=", "16", "\n", "opt", "[", "'compression_level'", "]", "=", "3", "# 3 is the default value in cv2", "\n", "# CV_IMWRITE_PNG_COMPRESSION from 0 to 9. A higher value means a smaller size and longer", "\n", "# compression time. If read raw images during training, use 0 for faster IO speed.", "\n", "if", "mode", "==", "'pair'", ":", "\n", "# cut training data", "\n", "        ", "GT_folder", "=", "'/media/DATA2/SR/DIV2K/TMP/DIV2K_train_HR_scale/HR/x4'", "# fix to your path", "\n", "LR_folder", "=", "'/media/DATA2/SR/DIV2K/TMP/DIV2K_train_HR_scale/LR/x4'", "# fix to your path", "\n", "save_GT_folder", "=", "'/media/DATA2/SR/DIV2K/TMP/DIV2K_scale_sub/GT'", "\n", "save_LR_folder", "=", "'/media/DATA2/SR/DIV2K/TMP/DIV2K_scale_sub/LR'", "\n", "\n", "scale_ratio", "=", "4", "\n", "crop_sz", "=", "128", "# the size of each sub-image (GT)", "\n", "step", "=", "64", "# step of the sliding crop window (GT)", "\n", "thres_sz", "=", "48", "# size threshold", "\n", "########################################################################", "\n", "# check that all the GT and LR images have correct scale ratio", "\n", "img_GT_list", "=", "data_util", ".", "_get_paths_from_images", "(", "GT_folder", ")", "\n", "img_LR_list", "=", "data_util", ".", "_get_paths_from_images", "(", "LR_folder", ")", "\n", "assert", "len", "(", "img_GT_list", ")", "==", "len", "(", "img_LR_list", ")", ",", "'different length of GT_folder and LR_folder.'", "\n", "for", "idx", ",", "(", "path_GT", ",", "path_LR", ")", "in", "enumerate", "(", "zip", "(", "img_GT_list", ",", "img_LR_list", ")", ")", ":", "\n", "            ", "print", "(", "f'{idx}, {path_GT}, {path_LR}'", ")", "\n", "# /media/DATA2/SR/DIV2K/TMP/DIV2K_train_HR_scale/LR/x4/0.8_0682.png", "\n", "# /media/DATA2/SR/DIV2K/TMP/DIV2K_train_HR_scale/GT/x4/0.8_0682.png", "\n", "\n", "img_GT", "=", "Image", ".", "open", "(", "path_GT", ")", "\n", "img_LR", "=", "Image", ".", "open", "(", "path_LR", ")", "\n", "w_GT", ",", "h_GT", "=", "img_GT", ".", "size", "\n", "w_LR", ",", "h_LR", "=", "img_LR", ".", "size", "\n", "assert", "w_GT", "/", "w_LR", "==", "scale_ratio", ",", "'GT width [{:d}] is not {:d}X as LR width [{:d}] for {:s}.'", ".", "format", "(", "w_GT", ",", "scale_ratio", ",", "w_LR", ",", "path_GT", ")", "\n", "assert", "h_GT", "/", "h_LR", "==", "scale_ratio", ",", "'GT height [{:d}] is not {:d}X as LR height [{:d}] for {:s}.'", ".", "format", "(", "h_GT", ",", "scale_ratio", ",", "h_LR", ",", "path_GT", ")", "\n", "# check crop size, step and threshold size", "\n", "", "assert", "crop_sz", "%", "scale_ratio", "==", "0", ",", "'crop size is not {:d}X multiplication.'", ".", "format", "(", "scale_ratio", ")", "\n", "assert", "step", "%", "scale_ratio", "==", "0", ",", "'step is not {:d}X multiplication.'", ".", "format", "(", "scale_ratio", ")", "\n", "assert", "thres_sz", "%", "scale_ratio", "==", "0", ",", "'thres_sz is not {:d}X multiplication.'", ".", "format", "(", "scale_ratio", ")", "\n", "\n", "print", "(", "'process GT...'", ")", "\n", "opt", "[", "'input_folder'", "]", "=", "GT_folder", "\n", "opt", "[", "'save_folder'", "]", "=", "save_GT_folder", "\n", "opt", "[", "'crop_sz'", "]", "=", "crop_sz", "\n", "opt", "[", "'step'", "]", "=", "step", "\n", "opt", "[", "'thres_sz'", "]", "=", "thres_sz", "\n", "extract_signle", "(", "opt", ")", "\n", "print", "(", "'process LR...'", ")", "\n", "opt", "[", "'input_folder'", "]", "=", "LR_folder", "\n", "opt", "[", "'save_folder'", "]", "=", "save_LR_folder", "\n", "opt", "[", "'crop_sz'", "]", "=", "crop_sz", "//", "scale_ratio", "\n", "opt", "[", "'step'", "]", "=", "step", "//", "scale_ratio", "\n", "opt", "[", "'thres_sz'", "]", "=", "thres_sz", "//", "scale_ratio", "\n", "extract_signle", "(", "opt", ")", "\n", "assert", "len", "(", "data_util", ".", "_get_paths_from_images", "(", "save_GT_folder", ")", ")", "==", "len", "(", "\n", "data_util", ".", "_get_paths_from_images", "(", "\n", "save_LR_folder", ")", ")", ",", "'different length of save_GT_folder and save_LR_folder.'", "\n", "", "elif", "mode", "==", "'single'", ":", "\n", "# opt['input_folder'] = '/media/DATA2/SR/DIV2K/TMPDIV2K_HR/DIV2K_valid_HR'", "\n", "        ", "opt", "[", "'input_folder'", "]", "=", "'/media/DATA2/SR/DIV2K/DIV2K_valid_HR'", "\n", "\n", "# opt['save_folder'] = '/media/DATA2/SR/DIV2K/TMPDIV2K_valid_sub/GT'", "\n", "opt", "[", "'save_folder'", "]", "=", "'/media/DATA2/SR/DIV2K/TMP/DIV2K_valid_sub/GT'", "\n", "\n", "opt", "[", "'crop_sz'", "]", "=", "256", "# the size of each sub-image", "\n", "opt", "[", "'step'", "]", "=", "256", "# step of the sliding crop window", "\n", "opt", "[", "'thres_sz'", "]", "=", "48", "# size threshold", "\n", "extract_signle", "(", "opt", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong mode.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data_scripts.extract_subimages_train.extract_signle": [[88, 110], ["data._get_paths_from_images", "utils.util.ProgressBar", "multiprocessing.Pool", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "print", "os.exists", "os.makedirs", "os.makedirs", "print", "print", "sys.exit", "utils.util.ProgressBar.update", "len", "multiprocessing.Pool.apply_async"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.util._get_paths_from_images", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.AverageMeter.update"], ["", "", "def", "extract_signle", "(", "opt", ")", ":", "\n", "    ", "input_folder", "=", "opt", "[", "'input_folder'", "]", "\n", "save_folder", "=", "opt", "[", "'save_folder'", "]", "\n", "if", "not", "osp", ".", "exists", "(", "save_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_folder", ")", "\n", "print", "(", "'mkdir [{:s}] ...'", ".", "format", "(", "save_folder", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Folder [{:s}] already exists. Exit...'", ".", "format", "(", "save_folder", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "img_list", "=", "data_util", ".", "_get_paths_from_images", "(", "input_folder", ")", "\n", "\n", "def", "update", "(", "arg", ")", ":", "\n", "        ", "pbar", ".", "update", "(", "arg", ")", "\n", "\n", "", "pbar", "=", "ProgressBar", "(", "len", "(", "img_list", ")", ")", "\n", "\n", "pool", "=", "Pool", "(", "opt", "[", "'n_thread'", "]", ")", "\n", "for", "path", "in", "img_list", ":", "\n", "        ", "pool", ".", "apply_async", "(", "worker", ",", "args", "=", "(", "path", ",", "opt", ")", ",", "callback", "=", "update", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "print", "(", "'All subprocesses done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data_scripts.extract_subimages_train.worker": [[112, 148], ["os.basename", "cv2.imread", "len", "numpy.arange", "numpy.arange", "numpy.append", "numpy.append", "ValueError", "numpy.ascontiguousarray", "cv2.imwrite", "os.join", "osp.basename.replace"], "function", ["None"], ["", "def", "worker", "(", "path", ",", "opt", ")", ":", "\n", "    ", "crop_sz", "=", "opt", "[", "'crop_sz'", "]", "\n", "step", "=", "opt", "[", "'step'", "]", "\n", "thres_sz", "=", "opt", "[", "'thres_sz'", "]", "\n", "img_name", "=", "osp", ".", "basename", "(", "path", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "\n", "n_channels", "=", "len", "(", "img", ".", "shape", ")", "\n", "if", "n_channels", "==", "2", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "shape", "\n", "", "elif", "n_channels", "==", "3", ":", "\n", "        ", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong image shape - {}'", ".", "format", "(", "n_channels", ")", ")", "\n", "\n", "", "h_space", "=", "np", ".", "arange", "(", "0", ",", "h", "-", "crop_sz", "+", "1", ",", "step", ")", "\n", "if", "h", "-", "(", "h_space", "[", "-", "1", "]", "+", "crop_sz", ")", ">", "thres_sz", ":", "\n", "        ", "h_space", "=", "np", ".", "append", "(", "h_space", ",", "h", "-", "crop_sz", ")", "\n", "", "w_space", "=", "np", ".", "arange", "(", "0", ",", "w", "-", "crop_sz", "+", "1", ",", "step", ")", "\n", "if", "w", "-", "(", "w_space", "[", "-", "1", "]", "+", "crop_sz", ")", ">", "thres_sz", ":", "\n", "        ", "w_space", "=", "np", ".", "append", "(", "w_space", ",", "w", "-", "crop_sz", ")", "\n", "\n", "", "index", "=", "0", "\n", "for", "x", "in", "h_space", ":", "\n", "        ", "for", "y", "in", "w_space", ":", "\n", "            ", "index", "+=", "1", "\n", "if", "n_channels", "==", "2", ":", "\n", "                ", "crop_img", "=", "img", "[", "x", ":", "x", "+", "crop_sz", ",", "y", ":", "y", "+", "crop_sz", "]", "\n", "", "else", ":", "\n", "                ", "crop_img", "=", "img", "[", "x", ":", "x", "+", "crop_sz", ",", "y", ":", "y", "+", "crop_sz", ",", ":", "]", "\n", "", "crop_img", "=", "np", ".", "ascontiguousarray", "(", "crop_img", ")", "\n", "cv2", ".", "imwrite", "(", "\n", "osp", ".", "join", "(", "opt", "[", "'save_folder'", "]", ",", "\n", "img_name", ".", "replace", "(", "'.png'", ",", "'_s{:03d}.png'", ".", "format", "(", "index", ")", ")", ")", ",", "crop_img", ",", "\n", "[", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ",", "opt", "[", "'compression_level'", "]", "]", ")", "\n", "", "", "return", "'Processing {:s} ...'", ".", "format", "(", "img_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data_scripts.generate_mod_LR_bic.generate_mod_LR_bic": [[13, 77], ["os.path.join", "os.path.join", "os.path.join", "len", "range", "os.path.isdir", "print", "exit", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "print", "os.path.isdir", "os.mkdir", "print", "os.path.isdir", "os.mkdir", "print", "print", "cv2.imread", "int", "int", "imresize_np", "cv2.imwrite", "cv2.imwrite", "str", "str", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "f.endswith", "os.path.join", "numpy.floor", "numpy.floor", "len", "os.path.join", "os.path.join", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.mkdir", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.mkdir", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.mkdir", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.mkdir", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.mkdir", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.mkdir", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.mkdir", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.imresize_np"], ["", "def", "generate_mod_LR_bic", "(", ")", ":", "\n", "# set parameters", "\n", "    ", "up_scale", "=", "4", "\n", "mod_scale", "=", "4", "\n", "\n", "sourcedir", "=", "'/media/DATA2/SR/DIV2K/TMP/DIV2K_train_HR_scale/GT'", "\n", "savedir", "=", "'/media/DATA2/SR/DIV2K/TMP/DIV2K_train_HR_scale'", "\n", "\n", "saveHRpath", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'HR'", ",", "'x'", "+", "str", "(", "mod_scale", ")", ")", "\n", "saveLRpath", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'LR'", ",", "'x'", "+", "str", "(", "up_scale", ")", ")", "\n", "saveBicpath", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'Bic'", ",", "'x'", "+", "str", "(", "up_scale", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "sourcedir", ")", ":", "\n", "        ", "print", "(", "'Error: No source data found'", ")", "\n", "exit", "(", "0", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "savedir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "savedir", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'HR'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'HR'", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'LR'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'LR'", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'Bic'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'Bic'", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "saveHRpath", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "saveHRpath", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'It will cover '", "+", "str", "(", "saveHRpath", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "saveLRpath", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "saveLRpath", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'It will cover '", "+", "str", "(", "saveLRpath", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "saveBicpath", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "saveBicpath", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'It will cover '", "+", "str", "(", "saveBicpath", ")", ")", "\n", "\n", "", "filepaths", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "sourcedir", ")", "if", "f", ".", "endswith", "(", "'.png'", ")", "]", "\n", "num_files", "=", "len", "(", "filepaths", ")", "\n", "\n", "# prepare data with augementation", "\n", "for", "i", "in", "range", "(", "num_files", ")", ":", "\n", "        ", "filename", "=", "filepaths", "[", "i", "]", "\n", "print", "(", "'No.{} -- Processing {}'", ".", "format", "(", "i", ",", "filename", ")", ")", "\n", "# read image", "\n", "image", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "sourcedir", ",", "filename", ")", ")", "\n", "\n", "width", "=", "int", "(", "np", ".", "floor", "(", "image", ".", "shape", "[", "1", "]", "/", "mod_scale", ")", ")", "\n", "height", "=", "int", "(", "np", ".", "floor", "(", "image", ".", "shape", "[", "0", "]", "/", "mod_scale", ")", ")", "\n", "# modcrop", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "\n", "            ", "image_HR", "=", "image", "[", "0", ":", "mod_scale", "*", "height", ",", "0", ":", "mod_scale", "*", "width", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "image_HR", "=", "image", "[", "0", ":", "mod_scale", "*", "height", ",", "0", ":", "mod_scale", "*", "width", "]", "\n", "# LR", "\n", "", "image_LR", "=", "imresize_np", "(", "image_HR", ",", "1", "/", "up_scale", ",", "True", ")", "\n", "# bic", "\n", "#image_Bic = imresize_np(image_LR, up_scale, True)", "\n", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "saveHRpath", ",", "filename", ")", ",", "image_HR", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "saveLRpath", ",", "filename", ")", ",", "image_LR", ")", "\n", "#cv2.imwrite(os.path.join(saveBicpath, filename), image_Bic)", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data_scripts.extract_subimages_test.main": [[14, 78], ["data._get_paths_from_images", "data._get_paths_from_images", "zip", "print", "extract_subimages_test.extract_signle", "print", "extract_subimages_test.extract_signle", "len", "len", "PIL.Image.open", "PIL.Image.open", "len", "len", "extract_subimages_test.extract_signle", "ValueError", "data._get_paths_from_images", "data._get_paths_from_images"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.util._get_paths_from_images", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util._get_paths_from_images", "home.repos.pwc.inspect_result.chenbong_arm-net.data_scripts.extract_subimages_test.extract_signle", "home.repos.pwc.inspect_result.chenbong_arm-net.data_scripts.extract_subimages_test.extract_signle", "home.repos.pwc.inspect_result.chenbong_arm-net.data_scripts.extract_subimages_test.extract_signle", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util._get_paths_from_images", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util._get_paths_from_images"], ["def", "main", "(", ")", ":", "\n", "    ", "mode", "=", "'pair'", "# single (one input folder) | pair (extract corresponding GT and LR pairs)", "\n", "opt", "=", "{", "}", "\n", "opt", "[", "'n_thread'", "]", "=", "16", "\n", "opt", "[", "'compression_level'", "]", "=", "3", "# 3 is the default value in cv2", "\n", "# CV_IMWRITE_PNG_COMPRESSION from 0 to 9. A higher value means a smaller size and longer", "\n", "# compression time. If read raw images during training, use 0 for faster IO speed.", "\n", "if", "mode", "==", "'pair'", ":", "\n", "# cut testing data for single SR models", "\n", "        ", "GT_folder", "=", "'/media/DATA2/SR/DIV2K/DIV2K_valid_HR'", "# fix to your path", "\n", "LR_folder", "=", "'/media/DATA2/SR/DIV2K/DIV2K_valid_LR_bicubic/X4'", "# fix to your path", "\n", "save_GT_folder", "=", "'/media/DATA2/SR/DIV2K/TMP/DIV2K_valid_HR_sub/GT'", "\n", "save_LR_folder", "=", "'/media/DATA2/SR/DIV2K/TMP/DIV2K_valid_HR_sub/LR'", "\n", "\n", "scale_ratio", "=", "4", "\n", "crop_sz", "=", "128", "# the size of each sub-image (GT)", "\n", "step", "=", "112", "# step of the sliding crop window (GT)", "\n", "thres_sz", "=", "48", "# size threshold", "\n", "########################################################################", "\n", "# check that all the GT and LR images have correct scale ratio", "\n", "img_GT_list", "=", "data_util", ".", "_get_paths_from_images", "(", "GT_folder", ")", "\n", "img_LR_list", "=", "data_util", ".", "_get_paths_from_images", "(", "LR_folder", ")", "\n", "assert", "len", "(", "img_GT_list", ")", "==", "len", "(", "img_LR_list", ")", ",", "'different length of GT_folder and LR_folder.'", "\n", "for", "path_GT", ",", "path_LR", "in", "zip", "(", "img_GT_list", ",", "img_LR_list", ")", ":", "\n", "            ", "img_GT", "=", "Image", ".", "open", "(", "path_GT", ")", "\n", "img_LR", "=", "Image", ".", "open", "(", "path_LR", ")", "\n", "w_GT", ",", "h_GT", "=", "img_GT", ".", "size", "\n", "w_LR", ",", "h_LR", "=", "img_LR", ".", "size", "\n", "assert", "w_GT", "/", "w_LR", "==", "scale_ratio", ",", "'GT width [{:d}] is not {:d}X as LR width [{:d}] for {:s}.'", ".", "format", "(", "# noqa: E501", "\n", "w_GT", ",", "scale_ratio", ",", "w_LR", ",", "path_GT", ")", "\n", "assert", "h_GT", "/", "h_LR", "==", "scale_ratio", ",", "'GT height [{:d}] is not {:d}X as LR height [{:d}] for {:s}.'", ".", "format", "(", "# noqa: E501", "\n", "h_GT", ",", "scale_ratio", ",", "h_LR", ",", "path_GT", ")", "\n", "# check crop size, step and threshold size", "\n", "", "assert", "crop_sz", "%", "scale_ratio", "==", "0", ",", "'crop size is not {:d}X multiplication.'", ".", "format", "(", "\n", "scale_ratio", ")", "\n", "assert", "step", "%", "scale_ratio", "==", "0", ",", "'step is not {:d}X multiplication.'", ".", "format", "(", "scale_ratio", ")", "\n", "assert", "thres_sz", "%", "scale_ratio", "==", "0", ",", "'thres_sz is not {:d}X multiplication.'", ".", "format", "(", "\n", "scale_ratio", ")", "\n", "print", "(", "'process GT...'", ")", "\n", "opt", "[", "'input_folder'", "]", "=", "GT_folder", "\n", "opt", "[", "'save_folder'", "]", "=", "save_GT_folder", "\n", "opt", "[", "'crop_sz'", "]", "=", "crop_sz", "\n", "opt", "[", "'step'", "]", "=", "step", "\n", "opt", "[", "'thres_sz'", "]", "=", "thres_sz", "\n", "extract_signle", "(", "opt", ")", "\n", "print", "(", "'process LR...'", ")", "\n", "opt", "[", "'input_folder'", "]", "=", "LR_folder", "\n", "opt", "[", "'save_folder'", "]", "=", "save_LR_folder", "\n", "opt", "[", "'crop_sz'", "]", "=", "crop_sz", "//", "scale_ratio", "\n", "opt", "[", "'step'", "]", "=", "step", "//", "scale_ratio", "\n", "opt", "[", "'thres_sz'", "]", "=", "thres_sz", "//", "scale_ratio", "\n", "extract_signle", "(", "opt", ")", "\n", "assert", "len", "(", "data_util", ".", "_get_paths_from_images", "(", "save_GT_folder", ")", ")", "==", "len", "(", "\n", "data_util", ".", "_get_paths_from_images", "(", "\n", "save_LR_folder", ")", ")", ",", "'different length of save_GT_folder and save_LR_folder.'", "\n", "", "elif", "mode", "==", "'single'", ":", "\n", "        ", "opt", "[", "'input_folder'", "]", "=", "'/media/DATA2/SR/DIV2K/DIV2K_valid_HR'", "\n", "opt", "[", "'save_folder'", "]", "=", "'/media/DATA2/SR/DIV2K/TMP/DIV2K_valid_sub/GT'", "\n", "opt", "[", "'crop_sz'", "]", "=", "256", "# the size of each sub-image", "\n", "opt", "[", "'step'", "]", "=", "256", "# step of the sliding crop window", "\n", "opt", "[", "'thres_sz'", "]", "=", "48", "# size threshold", "\n", "extract_signle", "(", "opt", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong mode.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data_scripts.extract_subimages_test.extract_signle": [[80, 102], ["data._get_paths_from_images", "utils.util.ProgressBar", "multiprocessing.Pool", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "print", "os.exists", "os.makedirs", "os.makedirs", "print", "print", "sys.exit", "utils.util.ProgressBar.update", "len", "multiprocessing.Pool.apply_async"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.util._get_paths_from_images", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.AverageMeter.update"], ["", "", "def", "extract_signle", "(", "opt", ")", ":", "\n", "    ", "input_folder", "=", "opt", "[", "'input_folder'", "]", "\n", "save_folder", "=", "opt", "[", "'save_folder'", "]", "\n", "if", "not", "osp", ".", "exists", "(", "save_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_folder", ")", "\n", "print", "(", "'mkdir [{:s}] ...'", ".", "format", "(", "save_folder", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Folder [{:s}] already exists. Exit...'", ".", "format", "(", "save_folder", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "img_list", "=", "data_util", ".", "_get_paths_from_images", "(", "input_folder", ")", "\n", "\n", "def", "update", "(", "arg", ")", ":", "\n", "        ", "pbar", ".", "update", "(", "arg", ")", "\n", "\n", "", "pbar", "=", "ProgressBar", "(", "len", "(", "img_list", ")", ")", "\n", "\n", "pool", "=", "Pool", "(", "opt", "[", "'n_thread'", "]", ")", "\n", "for", "path", "in", "img_list", ":", "\n", "        ", "pool", ".", "apply_async", "(", "worker", ",", "args", "=", "(", "path", ",", "opt", ")", ",", "callback", "=", "update", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "print", "(", "'All subprocesses done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data_scripts.extract_subimages_test.worker": [[104, 141], ["os.basename", "cv2.imread", "len", "numpy.arange", "numpy.arange", "numpy.append", "numpy.append", "ValueError", "numpy.ascontiguousarray", "img_name.replace.replace", "print", "cv2.imwrite", "os.join", "img_name.replace.replace"], "function", ["None"], ["", "def", "worker", "(", "path", ",", "opt", ")", ":", "\n", "    ", "crop_sz", "=", "opt", "[", "'crop_sz'", "]", "\n", "step", "=", "opt", "[", "'step'", "]", "\n", "thres_sz", "=", "opt", "[", "'thres_sz'", "]", "\n", "img_name", "=", "osp", ".", "basename", "(", "path", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "\n", "n_channels", "=", "len", "(", "img", ".", "shape", ")", "\n", "if", "n_channels", "==", "2", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "shape", "\n", "", "elif", "n_channels", "==", "3", ":", "\n", "        ", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong image shape - {}'", ".", "format", "(", "n_channels", ")", ")", "\n", "\n", "", "h_space", "=", "np", ".", "arange", "(", "0", ",", "h", "-", "crop_sz", "+", "1", ",", "step", ")", "\n", "if", "h", "-", "(", "h_space", "[", "-", "1", "]", "+", "crop_sz", ")", ">", "thres_sz", ":", "\n", "        ", "h_space", "=", "np", ".", "append", "(", "h_space", ",", "h", "-", "crop_sz", ")", "\n", "", "w_space", "=", "np", ".", "arange", "(", "0", ",", "w", "-", "crop_sz", "+", "1", ",", "step", ")", "\n", "if", "w", "-", "(", "w_space", "[", "-", "1", "]", "+", "crop_sz", ")", ">", "thres_sz", ":", "\n", "        ", "w_space", "=", "np", ".", "append", "(", "w_space", ",", "w", "-", "crop_sz", ")", "\n", "\n", "", "index", "=", "0", "\n", "for", "x", "in", "h_space", ":", "\n", "        ", "for", "y", "in", "w_space", ":", "\n", "            ", "index", "+=", "1", "\n", "if", "n_channels", "==", "2", ":", "\n", "                ", "crop_img", "=", "img", "[", "x", ":", "x", "+", "crop_sz", ",", "y", ":", "y", "+", "crop_sz", "]", "\n", "", "else", ":", "\n", "                ", "crop_img", "=", "img", "[", "x", ":", "x", "+", "crop_sz", ",", "y", ":", "y", "+", "crop_sz", ",", ":", "]", "\n", "", "crop_img", "=", "np", ".", "ascontiguousarray", "(", "crop_img", ")", "\n", "img_name", "=", "img_name", ".", "replace", "(", "\"x4\"", ",", "\"\"", ")", "\n", "print", "(", "img_name", ")", "\n", "cv2", ".", "imwrite", "(", "\n", "osp", ".", "join", "(", "opt", "[", "'save_folder'", "]", ",", "img_name", ".", "replace", "(", "'.png'", ",", "'_s{:03d}.png'", ".", "format", "(", "index", ")", ")", ")", ",", "crop_img", ",", "\n", "[", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ",", "opt", "[", "'compression_level'", "]", "]", ")", "\n", "", "", "return", "'Processing {:s} ...'", ".", "format", "(", "img_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.networks.define_G": [[6, 21], ["models.US_FSRCNN_net", "models.US_CARN_M", "models.US_MSRResNet", "NotImplementedError"], "function", ["None"], ["def", "define_G", "(", "opt", ")", ":", "\n", "    ", "opt_net", "=", "opt", "[", "'network_G'", "]", "\n", "which_model", "=", "opt_net", "[", "'which_model_G'", "]", "\n", "\n", "# image restoration", "\n", "if", "which_model", "==", "'fsrcnn'", ":", "\n", "        ", "netG", "=", "FSRCNN_arch", ".", "US_FSRCNN_net", "(", "input_channels", "=", "opt_net", "[", "'in_nc'", "]", ",", "upscale", "=", "opt_net", "[", "'scale'", "]", ",", "nf", "=", "opt_net", "[", "'nf'", "]", ",", "s", "=", "opt_net", "[", "'s'", "]", ",", "m", "=", "opt_net", "[", "'m'", "]", ")", "\n", "", "elif", "which_model", "==", "'carn'", ":", "\n", "        ", "netG", "=", "CARN_arch", ".", "US_CARN_M", "(", "in_nc", "=", "opt_net", "[", "'in_nc'", "]", ",", "out_nc", "=", "opt_net", "[", "'out_nc'", "]", ",", "nf", "=", "opt_net", "[", "'nf'", "]", ",", "scale", "=", "opt_net", "[", "'scale'", "]", ",", "group", "=", "opt_net", "[", "'group'", "]", ")", "\n", "", "elif", "which_model", "==", "'srresnet'", ":", "\n", "        ", "netG", "=", "SRResNet_arch", ".", "US_MSRResNet", "(", "in_nc", "=", "opt_net", "[", "'in_nc'", "]", ",", "out_nc", "=", "opt_net", "[", "'out_nc'", "]", ",", "nf", "=", "opt_net", "[", "'nf'", "]", ",", "nb", "=", "opt_net", "[", "'nb'", "]", ",", "upscale", "=", "opt_net", "[", "'scale'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Generator model [{:s}] not recognized'", ".", "format", "(", "which_model", ")", ")", "\n", "\n", "", "return", "netG", "", "", ""]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.loss.CharbonnierLoss.__init__": [[7, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__"], ["def", "__init__", "(", "self", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "CharbonnierLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.loss.CharbonnierLoss.forward": [[11, 15], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "diff", "=", "x", "-", "y", "\n", "loss", "=", "torch", ".", "sum", "(", "torch", ".", "sqrt", "(", "diff", "*", "diff", "+", "self", ".", "eps", ")", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.__init__": [[22, 100], ["base_model.BaseModel.__init__", "int", "numpy.array", "numpy.array", "models.define_G().to", "models.define_G().to", "USSR_model.USSR_Model.print_network", "int", "USSR_model.USSR_Model.netG.train", "USSR_model.USSR_Model.netG.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "USSR_model.USSR_Model.optimizers.append", "collections.OrderedDict", "int", "int", "torch.nn.parallel.DataParallel", "torch.nn.parallel.DataParallel", "torch.nn.parallel.DataParallel", "torch.L1Loss().to", "torch.L1Loss().to", "torch.L1Loss().to", "models.define_G", "models.define_G", "torch.MSELoss().to", "torch.MSELoss().to", "torch.MSELoss().to", "optim_params.append", "logger.warning", "USSR_model.USSR_Model.schedulers.append", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "models.loss.CharbonnierLoss().to", "models.loss.CharbonnierLoss().to", "NotImplementedError", "models.CosineAnnealingLR_Restart", "models.CosineAnnealingLR_Restart", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "models.loss.CharbonnierLoss", "models.loss.CharbonnierLoss"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.print_network", "home.repos.pwc.inspect_result.chenbong_arm-net.None.main.train", "home.repos.pwc.inspect_result.chenbong_arm-net.models.networks.define_G", "home.repos.pwc.inspect_result.chenbong_arm-net.models.networks.define_G"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "USSR_Model", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "\n", "self", ".", "hmap", "=", "{", "\n", "'eta'", ":", "None", ",", "\n", "'cost_list'", ":", "None", ",", "\n", "'hmap_list'", ":", "[", "]", ",", "\n", "'hmap_x_list'", ":", "[", "]", ",", "# patch_imscores", "\n", "'hmap_y_list'", ":", "[", "]", ",", "# patch_psnrs", "\n", "'hmap_y_mean_list'", ":", "[", "]", ",", "# patch_psnrs", "\n", "'bins'", ":", "None", ",", "\n", "\n", "}", "\n", "\n", "\n", "if", "opt", "[", "'test_mode'", "]", "==", "'image'", ":", "\n", "            ", "self", ".", "patch_size", "=", "int", "(", "opt", "[", "\"patch_size\"", "]", ")", "\n", "self", ".", "step", "=", "int", "(", "opt", "[", "\"step\"", "]", ")", "\n", "", "self", ".", "scale", "=", "int", "(", "opt", "[", "\"scale\"", "]", ")", "\n", "self", ".", "name", "=", "opt", "[", "'name'", "]", "\n", "self", ".", "which_model", "=", "opt", "[", "'network_G'", "]", "[", "'which_model_G'", "]", "\n", "\n", "train_opt", "=", "opt", "[", "'train'", "]", "\n", "\n", "width_list", "=", "np", ".", "array", "(", "opt", "[", "'network_G'", "]", "[", "'width_list'", "]", ")", "\n", "nf", "=", "np", ".", "array", "(", "opt", "[", "'network_G'", "]", "[", "'nf'", "]", ")", "\n", "self", ".", "mult_list", "=", "width_list", "/", "nf", "\n", "\n", "\n", "# define network and load pretrained models", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "opt", "[", "'dist'", "]", "==", "'dp'", ":", "\n", "            ", "self", ".", "netG", "=", "DataParallel", "(", "self", ".", "netG", ")", "\n", "\n", "# print network", "\n", "", "self", ".", "print_network", "(", ")", "\n", "# self.load()", "\n", "\n", "self", ".", "pf", "=", "opt", "[", "'logger'", "]", "[", "'print_freq'", "]", "\n", "\n", "self", ".", "batch_size", "=", "int", "(", "opt", "[", "'datasets'", "]", "[", "'train'", "]", "[", "'batch_size'", "]", ")", "\n", "# self.batch_size = int(opt['datasets']['train_1']['batch_size'])", "\n", "\n", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n", "# loss", "\n", "loss_type", "=", "train_opt", "[", "'pixel_criterion'", "]", "\n", "if", "loss_type", "==", "'l1'", ":", "\n", "            ", "self", ".", "cri_pix", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "loss_type", "==", "'l2'", ":", "\n", "            ", "self", ".", "cri_pix", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "loss_type", "==", "'cb'", ":", "\n", "            ", "self", ".", "cri_pix", "=", "CharbonnierLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Loss _type [{:s}] is not recognized.'", ".", "format", "(", "loss_type", ")", ")", "\n", "\n", "# optimizers", "\n", "", "wd_G", "=", "train_opt", "[", "'weight_decay_G'", "]", "if", "train_opt", "[", "'weight_decay_G'", "]", "else", "0", "\n", "optim_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "netG", ".", "named_parameters", "(", ")", ":", "# can optimize for a part of the model", "\n", "            ", "if", "v", ".", "requires_grad", ":", "\n", "                ", "optim_params", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "warning", "(", "'Params [{:s}] will not optimize.'", ".", "format", "(", "k", ")", ")", "\n", "", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params", ",", "lr", "=", "train_opt", "[", "'lr_G'", "]", ",", "weight_decay", "=", "wd_G", ",", "betas", "=", "(", "train_opt", "[", "'beta1'", "]", ",", "train_opt", "[", "'beta2'", "]", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "\n", "# schedulers", "\n", "if", "train_opt", "[", "'lr_scheme'", "]", "==", "'CosineAnnealingLR_Restart'", ":", "\n", "            ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                ", "self", ".", "schedulers", ".", "append", "(", "\n", "lr_scheduler", ".", "CosineAnnealingLR_Restart", "(", "optimizer", ",", "train_opt", "[", "'T_period'", "]", ",", "eta_min", "=", "train_opt", "[", "'eta_min'", "]", ",", "restarts", "=", "train_opt", "[", "'restarts'", "]", ",", "weights", "=", "train_opt", "[", "'restart_weights'", "]", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "log_dict", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.feed_data": [[101, 108], ["data[].to", "data[].to"], "methods", ["None"], ["", "def", "feed_data", "(", "self", ",", "data", ",", "need_GT", "=", "True", ")", ":", "\n", "        ", "self", ".", "var_L", "=", "data", "[", "'LQ'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "LQ_path", "=", "data", "[", "'LQ_path'", "]", "[", "0", "]", "\n", "\n", "if", "need_GT", ":", "\n", "            ", "self", ".", "real_H", "=", "data", "[", "'GT'", "]", ".", "to", "(", "self", ".", "device", ")", "# GT", "\n", "self", ".", "GT_path", "=", "data", "[", "'GT_path'", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.test_patch": [[109, 112], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "USSR_model.USSR_Model.netG"], "methods", ["None"], ["", "", "def", "test_patch", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "self", ".", "var_L", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.test_image": [[114, 212], ["USSR_model.USSR_Model.netG.eval", "cv2.imread", "cv2.imread", "USSR_model.USSR_Model.crop_cpu", "zip", "USSR_model.USSR_Model.combine", "USSR_model.USSR_Model.print_res", "USSR_model.USSR_Model.netG.train", "USSR_model.USSR_Model.crop_cpu", "len", "[].to", "utils.util.tensor2img", "sr_list.append", "utils.util.calculate_psnr", "[].data.squeeze", "USSR_model.USSR_Model.combine_addmask", "LR_img.astype", "numpy.expand_dims", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "[].float().cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "utils.util.tensor2img", "utils.util.laplacian().mean", "range", "numpy.array", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "[].data.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "[].float().cpu", "len", "numpy.array.append", "torch.interpolate", "torch.interpolate", "torch.interpolate", "USSR_model.USSR_Model.netG.apply", "USSR_model.USSR_Model.netG.apply", "USSR_model.USSR_Model.netG", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].float", "utils.util.laplacian", "utils.util.hmap_y_mean_to_pred_psnr", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "img[].unsqueeze", "img[].unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "[].float", "numpy.argmax", "setattr", "setattr", "numpy.ascontiguousarray", "len", "numpy.argmax", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "numpy.transpose", "numpy.expand_dims.detach"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.crop_cpu", "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.combine", "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.print_res", "home.repos.pwc.inspect_result.chenbong_arm-net.None.main.train", "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.crop_cpu", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.tensor2img", "home.repos.pwc.inspect_result.chenbong_arm-net.metrics.calculate_PSNR_SSIM.calculate_psnr", "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.combine_addmask", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.tensor2img", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.laplacian", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.hmap_y_mean_to_pred_psnr"], ["", "", "def", "test_image", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "self", ".", "var_L", "=", "cv2", ".", "imread", "(", "self", ".", "LQ_path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "self", ".", "real_H", "=", "cv2", ".", "imread", "(", "self", ".", "GT_path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "\n", "lr_list", ",", "num_h", ",", "num_w", ",", "h", ",", "w", "=", "self", ".", "crop_cpu", "(", "self", ".", "var_L", ",", "self", ".", "patch_size", ",", "self", ".", "step", ")", "\n", "gt_list", "=", "self", ".", "crop_cpu", "(", "self", ".", "real_H", ",", "self", ".", "patch_size", "*", "4", ",", "self", ".", "step", "*", "4", ")", "[", "0", "]", "\n", "sr_list", "=", "[", "]", "\n", "index", "=", "0", "\n", "\n", "psnr_type", "=", "[", "0", "]", "*", "(", "len", "(", "self", ".", "opt", "[", "'network_G'", "]", "[", "'width_list'", "]", ")", ")", "\n", "\n", "for", "LR_img", ",", "GT_img", "in", "zip", "(", "lr_list", ",", "gt_list", ")", ":", "\n", "            ", "img", "=", "LR_img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "                ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "# some images have 4 channels", "\n", "", "if", "img", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "                ", "img", "=", "img", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "", "img", "=", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "\n", "# np => tensor", "\n", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ")", ".", "float", "(", ")", "[", "None", ",", "...", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "img", ")", ")", ":", "\n", "                    ", "x_np", "=", "util", ".", "tensor2img", "(", "img", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "imscore", "=", "util", ".", "laplacian", "(", "x_np", ")", ".", "mean", "(", ")", "\n", "pred_psnr_list", "=", "[", "]", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "self", ".", "hmap", "[", "'cost_list'", "]", ")", ")", ":", "\n", "                        ", "pred_psnr_list", ".", "append", "(", "util", ".", "hmap_y_mean_to_pred_psnr", "(", "self", ".", "hmap", "[", "'hmap_y_mean_list'", "]", "[", "j", "]", ",", "self", ".", "hmap", "[", "'hmap_x_list'", "]", "[", "j", "]", ",", "imscore", ")", ")", "\n", "\n", "", "pred_psnr_list", "=", "np", ".", "array", "(", "pred_psnr_list", ")", "\n", "delt_pred_psnr_list", "=", "pred_psnr_list", "\n", "\n", "\n", "_type", "=", "torch", ".", "zeros", "(", "(", "1", ",", "len", "(", "self", ".", "hmap", "[", "'cost_list'", "]", ")", ")", ")", ".", "to", "(", "img", ".", "device", ")", "\n", "\n", "if", "self", ".", "hmap", "[", "'eta'", "]", "==", "'best'", ":", "\n", "                        ", "_type", "[", "0", "]", "[", "np", ".", "argmax", "(", "pred_psnr_list", ")", "]", "+=", "1", "\n", "", "elif", "self", ".", "hmap", "[", "'eta'", "]", "<", "100", ":", "\n", "                        ", "_type", "[", "0", "]", "[", "self", ".", "hmap", "[", "'eta'", "]", "]", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "xjb", "=", "self", ".", "hmap", "[", "'eta'", "]", "*", "delt_pred_psnr_list", "-", "self", ".", "hmap", "[", "'cost_list'", "]", "\n", "_type", "[", "0", "]", "[", "np", ".", "argmax", "(", "xjb", ")", "]", "+=", "1", "\n", "\n", "\n", "\n", "\n", "", "flag", "=", "torch", ".", "max", "(", "_type", ",", "1", ")", "[", "1", "]", ".", "data", ".", "squeeze", "(", ")", "\n", "p", "=", "F", ".", "softmax", "(", "_type", ",", "dim", "=", "1", ")", "\n", "\n", "if", "flag", "==", "0", ":", "\n", "                        ", "out", "=", "F", ".", "interpolate", "(", "img", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "scale_factor", "=", "4", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "False", ")", "# 25.50 43%", "\n", "", "else", ":", "\n", "                        ", "self", ".", "netG", ".", "apply", "(", "lambda", "m", ":", "setattr", "(", "m", ",", "'width_id'", ",", "flag", ")", ")", "\n", "self", ".", "netG", ".", "apply", "(", "lambda", "m", ":", "setattr", "(", "m", ",", "'width_mult'", ",", "self", ".", "mult_list", "[", "flag", "]", ")", ")", "\n", "out", "=", "self", ".", "netG", "(", "img", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "\n", "\n", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                        ", "srt", "=", "out", "\n", "_type", "=", "p", "\n", "", "else", ":", "\n", "                        ", "srt", "=", "torch", ".", "cat", "(", "(", "srt", ",", "out", ")", ",", "0", ")", "\n", "_type", "=", "torch", ".", "cat", "(", "(", "_type", ",", "p", ")", ",", "0", ")", "\n", "\n", "\n", "", "", "", "sr_img", "=", "util", ".", "tensor2img", "(", "srt", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", ")", "\n", "sr_list", ".", "append", "(", "sr_img", ")", "\n", "\n", "if", "index", "==", "0", ":", "\n", "                ", "type_res", "=", "_type", "\n", "", "else", ":", "\n", "                ", "type_res", "=", "torch", ".", "cat", "(", "(", "type_res", ",", "_type", ")", ",", "0", ")", "\n", "\n", "\n", "", "psnr", "=", "util", ".", "calculate_psnr", "(", "sr_img", ",", "GT_img", ")", "\n", "flag", "=", "torch", ".", "max", "(", "_type", ",", "1", ")", "[", "1", "]", ".", "data", ".", "squeeze", "(", ")", "\n", "\n", "psnr_type", "[", "flag", "]", "+=", "psnr", "\n", "\n", "index", "+=", "1", "\n", "\n", "", "self", ".", "fake_H", "=", "self", ".", "combine", "(", "sr_list", ",", "num_h", ",", "num_w", ",", "h", ",", "w", ",", "self", ".", "patch_size", ",", "self", ".", "step", ")", "\n", "\n", "if", "self", ".", "opt", "[", "'add_mask'", "]", ":", "\n", "            ", "self", ".", "fake_H_mask", "=", "self", ".", "combine_addmask", "(", "sr_list", ",", "num_h", ",", "num_w", ",", "h", ",", "w", ",", "self", ".", "patch_size", ",", "self", ".", "step", ",", "type_res", ")", "\n", "\n", "", "self", ".", "real_H", "=", "self", ".", "real_H", "[", "0", ":", "h", "*", "self", ".", "scale", ",", "0", ":", "w", "*", "self", ".", "scale", ",", ":", "]", "\n", "self", ".", "num_res", "=", "self", ".", "print_res", "(", "type_res", ")", "\n", "self", ".", "psnr_res", "=", "psnr_type", "\n", "\n", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.get_current_log": [[213, 215], ["None"], "methods", ["None"], ["", "def", "get_current_log", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.get_current_visuals_patch": [[216, 223], ["collections.OrderedDict", "[].float().cpu", "[].float().cpu", "[].float().cpu", "[].float", "[].float", "[].float", "USSR_model.USSR_Model.var_L.detach", "USSR_model.USSR_Model.fake_H.detach", "USSR_model.USSR_Model.real_H.detach"], "methods", ["None"], ["", "def", "get_current_visuals_patch", "(", "self", ",", "need_GT", "=", "True", ")", ":", "\n", "        ", "out_dict", "=", "OrderedDict", "(", ")", "\n", "out_dict", "[", "'LQ'", "]", "=", "self", ".", "var_L", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "out_dict", "[", "'rlt'", "]", "=", "self", ".", "fake_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "if", "need_GT", ":", "\n", "            ", "out_dict", "[", "'GT'", "]", "=", "self", ".", "real_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.get_current_visuals_image": [[224, 235], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "get_current_visuals_image", "(", "self", ",", "need_GT", "=", "True", ")", ":", "\n", "        ", "out_dict", "=", "OrderedDict", "(", ")", "\n", "out_dict", "[", "'LQ'", "]", "=", "self", ".", "var_L", "\n", "out_dict", "[", "'rlt'", "]", "=", "self", ".", "fake_H", "\n", "out_dict", "[", "'num_res'", "]", "=", "self", ".", "num_res", "\n", "out_dict", "[", "'psnr_res'", "]", "=", "self", ".", "psnr_res", "\n", "if", "need_GT", ":", "\n", "            ", "out_dict", "[", "'GT'", "]", "=", "self", ".", "real_H", "\n", "", "if", "self", ".", "opt", "[", "'add_mask'", "]", ":", "\n", "            ", "out_dict", "[", "'rlt_mask'", "]", "=", "self", ".", "fake_H_mask", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.print_network": [[236, 244], ["USSR_model.USSR_Model.get_network_description", "isinstance", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.get_network_description"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netG", ")", "\n", "if", "isinstance", "(", "self", ".", "netG", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ",", "self", ".", "netG", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "            ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ")", "\n", "", "logger", ".", "info", "(", "'Network G structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.load": [[245, 250], ["logger.info", "USSR_model.USSR_Model.load_network"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.load_network"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "load_path_G", "=", "self", ".", "opt", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", "\n", "if", "load_path_G", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "f'Loading model.netG from [{load_path_G}] ...'", ")", "\n", "self", ".", "load_network", "(", "load_path_G", ",", "self", ".", "netG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.save": [[251, 253], ["USSR_model.USSR_Model.save_network"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "iter_label", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "iter_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.crop_cpu": [[254, 281], ["len", "numpy.arange", "numpy.arange", "ValueError", "lr_list.append"], "methods", ["None"], ["", "def", "crop_cpu", "(", "self", ",", "img", ",", "crop_sz", ",", "step", ")", ":", "\n", "        ", "n_channels", "=", "len", "(", "img", ".", "shape", ")", "\n", "if", "n_channels", "==", "2", ":", "\n", "            ", "h", ",", "w", "=", "img", ".", "shape", "\n", "", "elif", "n_channels", "==", "3", ":", "\n", "            ", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Wrong image shape - {}'", ".", "format", "(", "n_channels", ")", ")", "\n", "", "h_space", "=", "np", ".", "arange", "(", "0", ",", "h", "-", "crop_sz", "+", "1", ",", "step", ")", "\n", "w_space", "=", "np", ".", "arange", "(", "0", ",", "w", "-", "crop_sz", "+", "1", ",", "step", ")", "\n", "index", "=", "0", "\n", "num_h", "=", "0", "\n", "lr_list", "=", "[", "]", "\n", "for", "x", "in", "h_space", ":", "\n", "            ", "num_h", "+=", "1", "\n", "num_w", "=", "0", "\n", "for", "y", "in", "w_space", ":", "\n", "                ", "num_w", "+=", "1", "\n", "index", "+=", "1", "\n", "if", "n_channels", "==", "2", ":", "\n", "                    ", "crop_img", "=", "img", "[", "x", ":", "x", "+", "crop_sz", ",", "y", ":", "y", "+", "crop_sz", "]", "\n", "", "else", ":", "\n", "                    ", "crop_img", "=", "img", "[", "x", ":", "x", "+", "crop_sz", ",", "y", ":", "y", "+", "crop_sz", ",", ":", "]", "\n", "", "lr_list", ".", "append", "(", "crop_img", ")", "\n", "", "", "h", "=", "x", "+", "crop_sz", "\n", "w", "=", "y", "+", "crop_sz", "\n", "return", "lr_list", ",", "num_h", ",", "num_w", ",", "h", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.combine": [[282, 297], ["numpy.zeros", "range", "sr_img.astype.astype.astype", "range", "range", "range"], "methods", ["None"], ["", "def", "combine", "(", "self", ",", "sr_list", ",", "num_h", ",", "num_w", ",", "h", ",", "w", ",", "patch_size", ",", "step", ")", ":", "\n", "        ", "index", "=", "0", "\n", "sr_img", "=", "np", ".", "zeros", "(", "(", "h", "*", "self", ".", "scale", ",", "w", "*", "self", ".", "scale", ",", "3", ")", ",", "'float32'", ")", "\n", "for", "i", "in", "range", "(", "num_h", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "num_w", ")", ":", "\n", "                ", "sr_img", "[", "i", "*", "step", "*", "self", ".", "scale", ":", "i", "*", "step", "*", "self", ".", "scale", "+", "patch_size", "*", "self", ".", "scale", ",", "j", "*", "step", "*", "self", ".", "scale", ":", "j", "*", "step", "*", "self", ".", "scale", "+", "patch_size", "*", "self", ".", "scale", ",", ":", "]", "+=", "sr_list", "[", "index", "]", "\n", "index", "+=", "1", "\n", "", "", "sr_img", "=", "sr_img", ".", "astype", "(", "'float32'", ")", "\n", "\n", "for", "j", "in", "range", "(", "1", ",", "num_w", ")", ":", "\n", "            ", "sr_img", "[", ":", ",", "j", "*", "step", "*", "self", ".", "scale", ":", "j", "*", "step", "*", "self", ".", "scale", "+", "(", "patch_size", "-", "step", ")", "*", "self", ".", "scale", ",", ":", "]", "/=", "2", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "num_h", ")", ":", "\n", "            ", "sr_img", "[", "i", "*", "step", "*", "self", ".", "scale", ":", "i", "*", "step", "*", "self", ".", "scale", "+", "(", "patch_size", "-", "step", ")", "*", "self", ".", "scale", ",", ":", ",", ":", "]", "/=", "2", "\n", "", "return", "sr_img", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.combine_addmask": [[298, 337], ["numpy.zeros", "range", "cv2.addWeighted.astype", "range", "range", "range", "range", "range", "numpy.zeros", "cv2.addWeighted", "cv2.rectangle", "[].data.squeeze", "cv2.rectangle", "[].data.squeeze", "cv2.rectangle", "[].data.squeeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "combine_addmask", "(", "self", ",", "sr_list", ",", "num_h", ",", "num_w", ",", "h", ",", "w", ",", "patch_size", ",", "step", ",", "_type", ")", ":", "\n", "        ", "index", "=", "0", "\n", "sr_img", "=", "np", ".", "zeros", "(", "(", "h", "*", "self", ".", "scale", ",", "w", "*", "self", ".", "scale", ",", "3", ")", ",", "'float32'", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_h", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "num_w", ")", ":", "\n", "                ", "sr_img", "[", "i", "*", "step", "*", "self", ".", "scale", ":", "i", "*", "step", "*", "self", ".", "scale", "+", "patch_size", "*", "self", ".", "scale", ",", "\n", "j", "*", "step", "*", "self", ".", "scale", ":", "j", "*", "step", "*", "self", ".", "scale", "+", "patch_size", "*", "self", ".", "scale", ",", ":", "]", "+=", "sr_list", "[", "index", "]", "\n", "index", "+=", "1", "\n", "", "", "sr_img", "=", "sr_img", ".", "astype", "(", "'float32'", ")", "\n", "\n", "for", "j", "in", "range", "(", "1", ",", "num_w", ")", ":", "\n", "            ", "sr_img", "[", ":", ",", "j", "*", "step", "*", "self", ".", "scale", ":", "j", "*", "step", "*", "self", ".", "scale", "+", "(", "patch_size", "-", "step", ")", "*", "self", ".", "scale", ",", ":", "]", "/=", "2", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "num_h", ")", ":", "\n", "            ", "sr_img", "[", "i", "*", "step", "*", "self", ".", "scale", ":", "i", "*", "step", "*", "self", ".", "scale", "+", "(", "patch_size", "-", "step", ")", "*", "self", ".", "scale", ",", ":", ",", ":", "]", "/=", "2", "\n", "\n", "", "index2", "=", "0", "\n", "for", "i", "in", "range", "(", "num_h", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "num_w", ")", ":", "\n", "# add_mask", "\n", "                ", "alpha", "=", "1", "\n", "beta", "=", "0.2", "\n", "gamma", "=", "0", "\n", "bbox1", "=", "[", "j", "*", "step", "*", "self", ".", "scale", "+", "8", ",", "i", "*", "step", "*", "self", ".", "scale", "+", "8", ",", "\n", "j", "*", "step", "*", "self", ".", "scale", "+", "patch_size", "*", "self", ".", "scale", "-", "9", ",", "\n", "i", "*", "step", "*", "self", ".", "scale", "+", "patch_size", "*", "self", ".", "scale", "-", "9", "]", "# xl,yl,xr,yr", "\n", "zeros1", "=", "np", ".", "zeros", "(", "(", "sr_img", ".", "shape", ")", ",", "'float32'", ")", "\n", "\n", "if", "torch", ".", "max", "(", "_type", ",", "1", ")", "[", "1", "]", ".", "data", ".", "squeeze", "(", ")", "[", "index2", "]", "==", "0", ":", "\n", "                    ", "mask2", "=", "cv2", ".", "rectangle", "(", "zeros1", ",", "(", "bbox1", "[", "0", "]", "+", "1", ",", "bbox1", "[", "1", "]", "+", "1", ")", ",", "(", "bbox1", "[", "2", "]", "-", "1", ",", "bbox1", "[", "3", "]", "-", "1", ")", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ",", "thickness", "=", "-", "1", ")", "# simple green", "\n", "", "elif", "torch", ".", "max", "(", "_type", ",", "1", ")", "[", "1", "]", ".", "data", ".", "squeeze", "(", ")", "[", "index2", "]", "==", "1", ":", "\n", "                    ", "mask2", "=", "cv2", ".", "rectangle", "(", "zeros1", ",", "(", "bbox1", "[", "0", "]", "+", "1", ",", "bbox1", "[", "1", "]", "+", "1", ")", ",", "(", "bbox1", "[", "2", "]", "-", "1", ",", "bbox1", "[", "3", "]", "-", "1", ")", ",", "color", "=", "(", "0", ",", "255", ",", "255", ")", ",", "thickness", "=", "-", "1", ")", "# medium yellow", "\n", "", "elif", "torch", ".", "max", "(", "_type", ",", "1", ")", "[", "1", "]", ".", "data", ".", "squeeze", "(", ")", "[", "index2", "]", "==", "2", ":", "\n", "                    ", "mask2", "=", "cv2", ".", "rectangle", "(", "zeros1", ",", "(", "bbox1", "[", "0", "]", "+", "1", ",", "bbox1", "[", "1", "]", "+", "1", ")", ",", "(", "bbox1", "[", "2", "]", "-", "1", ",", "bbox1", "[", "3", "]", "-", "1", ")", ",", "color", "=", "(", "0", ",", "0", ",", "255", ")", ",", "thickness", "=", "-", "1", ")", "# hard red", "\n", "\n", "", "sr_img", "=", "cv2", ".", "addWeighted", "(", "sr_img", ",", "alpha", ",", "mask2", ",", "beta", ",", "gamma", ")", "\n", "index2", "+=", "1", "\n", "", "", "return", "sr_img", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.USSR_model.USSR_Model.print_res": [[338, 343], ["[].data.squeeze", "len", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "print_res", "(", "self", ",", "type_res", ")", ":", "\n", "        ", "num", "=", "[", "0", "]", "*", "len", "(", "self", ".", "opt", "[", "'network_G'", "]", "[", "'width_list'", "]", ")", "\n", "for", "i", "in", "torch", ".", "max", "(", "type_res", ",", "1", ")", "[", "1", "]", ".", "data", ".", "squeeze", "(", ")", ":", "\n", "            ", "num", "[", "i", "]", "+=", "1", "\n", "", "return", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.lr_scheduler.CosineAnnealingLR_Restart.__init__": [[8, 18], ["torch.optim.lr_scheduler._LRScheduler.__init__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "T_period", ",", "restarts", "=", "None", ",", "weights", "=", "None", ",", "eta_min", "=", "0", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "T_period", "=", "T_period", "\n", "self", ".", "T_max", "=", "self", ".", "T_period", "[", "0", "]", "# current T period", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "self", ".", "restarts", "=", "restarts", "if", "restarts", "else", "[", "0", "]", "\n", "self", ".", "restarts", "=", "[", "v", "+", "1", "for", "v", "in", "self", ".", "restarts", "]", "\n", "self", ".", "restart_weights", "=", "weights", "if", "weights", "else", "[", "1", "]", "\n", "self", ".", "last_restart", "=", "0", "\n", "assert", "len", "(", "self", ".", "restarts", ")", "==", "len", "(", "self", ".", "restart_weights", ")", ",", "'restarts and their weights do not match.'", "\n", "super", "(", "CosineAnnealingLR_Restart", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.lr_scheduler.CosineAnnealingLR_Restart.get_lr": [[19, 36], ["lr_scheduler.CosineAnnealingLR_Restart.restarts.index", "lr_scheduler.CosineAnnealingLR_Restart.restarts.index", "zip", "math.cos", "math.cos", "math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", "==", "0", ":", "\n", "            ", "return", "self", ".", "base_lrs", "\n", "", "elif", "self", ".", "last_epoch", "in", "self", ".", "restarts", ":", "\n", "            ", "self", ".", "last_restart", "=", "self", ".", "last_epoch", "\n", "self", ".", "T_max", "=", "self", ".", "T_period", "[", "self", ".", "restarts", ".", "index", "(", "self", ".", "last_epoch", ")", "+", "1", "]", "\n", "weight", "=", "self", ".", "restart_weights", "[", "self", ".", "restarts", ".", "index", "(", "self", ".", "last_epoch", ")", "]", "\n", "return", "[", "group", "[", "'initial_lr'", "]", "*", "weight", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "", "elif", "(", "self", ".", "last_epoch", "-", "self", ".", "last_restart", "-", "1", "-", "self", ".", "T_max", ")", "%", "(", "2", "*", "self", ".", "T_max", ")", "==", "0", ":", "\n", "            ", "return", "[", "\n", "group", "[", "'lr'", "]", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "(", "1", "-", "math", ".", "cos", "(", "math", ".", "pi", "/", "self", ".", "T_max", ")", ")", "/", "2", "\n", "for", "base_lr", ",", "group", "in", "zip", "(", "self", ".", "base_lrs", ",", "self", ".", "optimizer", ".", "param_groups", ")", "\n", "]", "\n", "", "return", "[", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "self", ".", "last_epoch", "-", "self", ".", "last_restart", ")", "/", "self", ".", "T_max", ")", ")", "/", "\n", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "(", "self", ".", "last_epoch", "-", "self", ".", "last_restart", ")", "-", "1", ")", "/", "self", ".", "T_max", ")", ")", "*", "\n", "(", "group", "[", "'lr'", "]", "-", "self", ".", "eta_min", ")", "+", "self", ".", "eta_min", "\n", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.__init__.create_model": [[5, 10], ["M", "logger.info"], "function", ["None"], []], "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.__init__": [[8, 14], ["torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "opt", "[", "'gpu_ids'", "]", "is", "not", "None", "else", "'cpu'", ")", "\n", "self", ".", "schedulers", "=", "[", "]", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "hmap", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.feed_data": [[16, 18], ["None"], "methods", ["None"], ["", "def", "feed_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.get_current_visuals": [[19, 21], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.get_current_losses": [[22, 24], ["None"], "methods", ["None"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.print_network": [[25, 27], ["None"], "methods", ["None"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save": [[28, 30], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.load": [[31, 33], ["None"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel._set_lr": [[34, 40], ["zip", "zip"], "methods", ["None"], ["", "def", "_set_lr", "(", "self", ",", "lr_groups_l", ")", ":", "\n", "        ", "\"\"\"Set learning rate for warmup\n        lr_groups_l: list for lr_groups. each for a optimizer\"\"\"", "\n", "for", "optimizer", ",", "lr_groups", "in", "zip", "(", "self", ".", "optimizers", ",", "lr_groups_l", ")", ":", "\n", "            ", "for", "param_group", ",", "lr", "in", "zip", "(", "optimizer", ".", "param_groups", ",", "lr_groups", ")", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel._get_init_lr": [[41, 47], ["init_lr_groups_l.append"], "methods", ["None"], ["", "", "", "def", "_get_init_lr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the initial lr, which is set by the scheduler\"\"\"", "\n", "init_lr_groups_l", "=", "[", "]", "\n", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "            ", "init_lr_groups_l", ".", "append", "(", "[", "v", "[", "'initial_lr'", "]", "for", "v", "in", "optimizer", ".", "param_groups", "]", ")", "\n", "", "return", "init_lr_groups_l", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.update_learning_rate": [[48, 61], ["scheduler.step", "base_model.BaseModel._get_init_lr", "base_model.BaseModel._set_lr", "warm_up_lr_l.append"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel._get_init_lr", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel._set_lr"], ["", "def", "update_learning_rate", "(", "self", ",", "cur_iter", ",", "warmup_iter", "=", "-", "1", ")", ":", "\n", "        ", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "# set up warm-up learning rate", "\n", "", "if", "cur_iter", "<", "warmup_iter", ":", "\n", "# get initial lr for each group", "\n", "            ", "init_lr_g_l", "=", "self", ".", "_get_init_lr", "(", ")", "\n", "# modify warming-up learning rates", "\n", "warm_up_lr_l", "=", "[", "]", "\n", "for", "init_lr_g", "in", "init_lr_g_l", ":", "\n", "                ", "warm_up_lr_l", ".", "append", "(", "[", "v", "/", "warmup_iter", "*", "cur_iter", "for", "v", "in", "init_lr_g", "]", ")", "\n", "# set learning rate", "\n", "", "self", ".", "_set_lr", "(", "warm_up_lr_l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.get_current_learning_rate": [[62, 64], ["None"], "methods", ["None"], ["", "", "def", "get_current_learning_rate", "(", "self", ")", ":", "\n", "        ", "return", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.get_network_description": [[65, 70], ["isinstance", "str", "sum", "map", "network.parameters", "x.numel"], "methods", ["None"], ["", "def", "get_network_description", "(", "self", ",", "network", ")", ":", "\n", "        ", "\"\"\"Get the string and total parameters of the network\"\"\"", "\n", "if", "isinstance", "(", "network", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "network", "=", "network", ".", "module", "\n", "", "return", "str", "(", "network", ")", ",", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "network", ".", "parameters", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save_network": [[71, 84], ["os.path.join", "os.path.join", "isinstance", "network.state_dict", "network.state_dict.items", "torch.save", "torch.save", "torch.save", "torch.save", "param.cpu", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "network_label", ",", "iter_label", ")", ":", "\n", "        ", "save_filename", "=", "'{}_{}.pth'", ".", "format", "(", "iter_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", "[", "'path'", "]", "[", "'models'", "]", ",", "save_filename", ")", "\n", "latest_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", "[", "'path'", "]", "[", "'models'", "]", ",", "'latest.pth'", ")", "\n", "\n", "if", "isinstance", "(", "network", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "network", "=", "network", ".", "module", "\n", "", "state_dict", "=", "network", ".", "state_dict", "(", ")", "\n", "for", "key", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "state_dict", "[", "key", "]", "=", "param", ".", "cpu", "(", ")", "\n", "", "if", "'000_G'", "not", "in", "save_path", ":", "\n", "            ", "torch", ".", "save", "(", "state_dict", ",", "save_path", ")", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "latest_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.load_network": [[85, 96], ["isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "torch.load.items", "network.load_state_dict", "k.startswith"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.load"], ["", "def", "load_network", "(", "self", ",", "load_path", ",", "network", ",", "strict", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "network", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "network", "=", "network", ".", "module", "\n", "", "load_net", "=", "torch", ".", "load", "(", "load_path", ")", "\n", "load_net_clean", "=", "OrderedDict", "(", ")", "# remove unnecessary 'module.'", "\n", "for", "k", ",", "v", "in", "load_net", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.'", ")", ":", "\n", "                ", "load_net_clean", "[", "k", "[", "7", ":", "]", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "load_net_clean", "[", "k", "]", "=", "v", "\n", "", "", "network", ".", "load_state_dict", "(", "load_net_clean", ",", "strict", "=", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save_training_state": [[97, 110], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "state[].append", "state[].append", "s.state_dict", "o.state_dict"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.save"], ["", "def", "save_training_state", "(", "self", ",", "epoch", ",", "iter_step", ")", ":", "\n", "        ", "\"\"\"Save training state during training, which will be used for resuming\"\"\"", "\n", "state", "=", "{", "'epoch'", ":", "epoch", ",", "'iter'", ":", "iter_step", ",", "'schedulers'", ":", "[", "]", ",", "'optimizers'", ":", "[", "]", "}", "\n", "for", "s", "in", "self", ".", "schedulers", ":", "\n", "            ", "state", "[", "'schedulers'", "]", ".", "append", "(", "s", ".", "state_dict", "(", ")", ")", "\n", "", "for", "o", "in", "self", ".", "optimizers", ":", "\n", "            ", "state", "[", "'optimizers'", "]", ".", "append", "(", "o", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "state", "[", "'hmap'", "]", "=", "self", ".", "hmap", "\n", "\n", "save_filename", "=", "'latest.state'", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", "[", "'path'", "]", "[", "'training_state'", "]", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.resume_training": [[111, 125], ["enumerate", "enumerate", "len", "len", "len", "len", "base_model.BaseModel.optimizers[].load_state_dict", "base_model.BaseModel.schedulers[].load_state_dict"], "methods", ["None"], ["", "def", "resume_training", "(", "self", ",", "resume_state", ")", ":", "\n", "        ", "\"\"\"Resume the optimizers and schedulers for training\"\"\"", "\n", "resume_optimizers", "=", "resume_state", "[", "'optimizers'", "]", "\n", "resume_schedulers", "=", "resume_state", "[", "'schedulers'", "]", "\n", "hmap", "=", "resume_state", "[", "'hmap'", "]", "\n", "assert", "len", "(", "resume_optimizers", ")", "==", "len", "(", "self", ".", "optimizers", ")", ",", "'Wrong lengths of optimizers'", "\n", "assert", "len", "(", "resume_schedulers", ")", "==", "len", "(", "self", ".", "schedulers", ")", ",", "'Wrong lengths of schedulers'", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "resume_optimizers", ")", ":", "\n", "            ", "self", ".", "optimizers", "[", "i", "]", ".", "load_state_dict", "(", "o", ")", "\n", "", "for", "i", ",", "s", "in", "enumerate", "(", "resume_schedulers", ")", ":", "\n", "            ", "self", ".", "schedulers", "[", "i", "]", ".", "load_state_dict", "(", "s", ")", "\n", "\n", "# self.hmap.load_state_dict(hmap)", "\n", "", "self", ".", "hmap", "=", "hmap", "", "", "", ""]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.FSRCNN_arch.US_FSRCNN_net.__init__": [[9, 38], ["super().__init__", "torch.Sequential", "torch.Sequential", "FSRCNN_arch.US_FSRCNN_net.layers.append", "range", "FSRCNN_arch.US_FSRCNN_net.layers.append", "FSRCNN_arch.US_FSRCNN_net.layers.append", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "models.archs.arch_util.USConvTranspose2d", "models.initialize_weights", "models.archs.arch_util.USConv2d", "torch.PReLU", "torch.PReLU", "torch.Sequential", "torch.Sequential", "FSRCNN_arch.US_FSRCNN_net.layers.append", "torch.PReLU", "torch.PReLU", "torch.Sequential", "torch.Sequential", "models.archs.arch_util.USConv2d", "torch.PReLU", "torch.PReLU", "models.archs.arch_util.USConv2d", "models.archs.arch_util.USConv2d", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__", "home.repos.pwc.inspect_result.chenbong_arm-net.archs.arch_util.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "upscale", ",", "nf", "=", "64", ",", "s", "=", "12", ",", "m", "=", "4", ")", ":", "\n", "        ", "super", "(", "US_FSRCNN_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "head_conv", "=", "nn", ".", "Sequential", "(", "\n", "USConv2d", "(", "in_channels", "=", "input_channels", ",", "out_channels", "=", "nf", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "us", "=", "[", "False", ",", "True", "]", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "layers", "=", "[", "]", "\n", "self", ".", "layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "USConv2d", "(", "in_channels", "=", "nf", ",", "out_channels", "=", "s", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "us", "=", "[", "True", ",", "False", "]", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ")", "\n", ")", "\n", "for", "_", "in", "range", "(", "m", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "\n", "USConv2d", "(", "in_channels", "=", "s", ",", "out_channels", "=", "s", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "us", "=", "[", "False", ",", "False", "]", ")", "\n", ")", "\n", "", "self", ".", "layers", ".", "append", "(", "nn", ".", "PReLU", "(", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "USConv2d", "(", "in_channels", "=", "s", ",", "out_channels", "=", "nf", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "us", "=", "[", "False", ",", "True", "]", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ")", "\n", ")", "\n", "\n", "self", ".", "body_conv", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "self", ".", "layers", ")", "\n", "\n", "# Deconvolution", "\n", "self", ".", "tail_conv", "=", "USConvTranspose2d", "(", "in_channels", "=", "nf", ",", "out_channels", "=", "input_channels", ",", "kernel_size", "=", "9", ",", "stride", "=", "upscale", ",", "padding", "=", "3", ",", "output_padding", "=", "1", ",", "us", "=", "[", "True", ",", "False", "]", ")", "\n", "\n", "arch_util", ".", "initialize_weights", "(", "[", "self", ".", "head_conv", ",", "self", ".", "body_conv", ",", "self", ".", "tail_conv", "]", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.FSRCNN_arch.US_FSRCNN_net.forward": [[39, 44], ["FSRCNN_arch.US_FSRCNN_net.head_conv", "FSRCNN_arch.US_FSRCNN_net.body_conv", "FSRCNN_arch.US_FSRCNN_net.tail_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fea", "=", "self", ".", "head_conv", "(", "x", ")", "\n", "fea", "=", "self", ".", "body_conv", "(", "fea", ")", "\n", "out", "=", "self", ".", "tail_conv", "(", "fea", ")", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.arch_util.MeanShift.__init__": [[40, 50], ["torch.Conv2d.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "arch_util.MeanShift.weight.data.div_", "arch_util.MeanShift.bias.data.div_", "arch_util.MeanShift.parameters", "torch.Tensor.view", "torch.Tensor.view", "torch.Tensor.view", "torch.Tensor.view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rgb_range", ",", "rgb_mean", ",", "rgb_std", ",", "sign", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "MeanShift", ",", "self", ")", ".", "__init__", "(", "3", ",", "3", ",", "kernel_size", "=", "1", ")", "\n", "std", "=", "torch", ".", "Tensor", "(", "rgb_std", ")", "\n", "self", ".", "weight", ".", "data", "=", "torch", ".", "eye", "(", "3", ")", ".", "view", "(", "3", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "weight", ".", "data", ".", "div_", "(", "std", ".", "view", "(", "3", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bias", ".", "data", "=", "sign", "*", "rgb_range", "*", "torch", ".", "Tensor", "(", "rgb_mean", ")", "\n", "self", ".", "bias", ".", "data", ".", "div_", "(", "std", ")", "\n", "# self.requires_grad = False", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.arch_util.USConv2d.__init__": [[52, 56], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "us", "=", "[", "False", ",", "False", "]", ")", ":", "\n", "        ", "super", "(", "USConv2d", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", "\n", "self", ".", "width_mult", "=", "None", "\n", "self", ".", "us", "=", "us", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.arch_util.USConv2d.forward": [[57, 71], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "in_channels", "=", "inputs", ".", "shape", "[", "1", "]", "//", "self", ".", "groups", "if", "self", ".", "us", "[", "0", "]", "else", "self", ".", "in_channels", "//", "self", ".", "groups", "\n", "# out_channels = make_divisible(self.out_channels * self.width_mult) if self.us[1] else self.out_channels", "\n", "out_channels", "=", "int", "(", "self", ".", "out_channels", "*", "self", ".", "width_mult", ")", "if", "self", ".", "us", "[", "1", "]", "else", "self", ".", "out_channels", "\n", "\n", "\n", "weight", "=", "self", ".", "weight", "[", ":", "out_channels", ",", ":", "in_channels", ",", ":", ",", ":", "]", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "self", ".", "bias", "[", ":", "out_channels", "]", "\n", "", "else", ":", "\n", "            ", "bias", "=", "self", ".", "bias", "\n", "\n", "", "y", "=", "F", ".", "conv2d", "(", "inputs", ",", "weight", ",", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.arch_util.USConvTranspose2d.__init__": [[74, 78], ["torch.ConvTranspose2d.__init__"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "us", "=", "[", "False", ",", "False", "]", ")", ":", "\n", "        ", "super", "(", "USConvTranspose2d", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "output_padding", "=", "output_padding", ")", "\n", "self", ".", "width_mult", "=", "None", "\n", "self", ".", "us", "=", "us", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.arch_util.USConvTranspose2d.forward": [[79, 91], ["isinstance", "arch_util.USConvTranspose2d._output_padding", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "Tensor", ",", "output_size", ":", "Optional", "[", "List", "[", "int", "]", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "# in_channels = make_divisible(self.in_channels * self.width_mult) if self.us[0] else self.in_channels", "\n", "        ", "in_channels", "=", "int", "(", "self", ".", "in_channels", "*", "self", ".", "width_mult", ")", "if", "self", ".", "us", "[", "0", "]", "else", "self", ".", "in_channels", "\n", "out_channels", "=", "input", ".", "shape", "[", "1", "]", "if", "self", ".", "us", "[", "1", "]", "else", "self", ".", "out_channels", "\n", "\n", "\n", "weight", "=", "self", ".", "weight", "[", ":", "in_channels", ",", ":", "out_channels", ",", ":", ",", ":", "]", "\n", "\n", "assert", "isinstance", "(", "self", ".", "padding", ",", "tuple", ")", "\n", "output_padding", "=", "self", ".", "_output_padding", "(", "input", ",", "output_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "kernel_size", ",", "self", ".", "dilation", ")", "# type: ignore[arg-type]", "\n", "\n", "return", "F", ".", "conv_transpose2d", "(", "input", ",", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "output_padding", ",", "self", ".", "groups", ",", "self", ".", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.arch_util.USBatchNorm2d.__init__": [[94, 100], ["torch.BatchNorm2d.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "range", "len"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "width_list", "=", "None", ")", ":", "\n", "        ", "super", "(", "USBatchNorm2d", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "affine", "=", "True", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "width_id", "=", "None", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "num_features", ",", "affine", "=", "False", ")", "for", "_", "in", "range", "(", "len", "(", "width_list", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.arch_util.USBatchNorm2d.forward": [[103, 115], ["inputs.size", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "num_features", "=", "inputs", ".", "size", "(", "1", ")", "\n", "y", "=", "F", ".", "batch_norm", "(", "\n", "inputs", ",", "\n", "self", ".", "bn", "[", "self", ".", "width_id", "]", ".", "running_mean", "[", ":", "num_features", "]", ",", "\n", "self", ".", "bn", "[", "self", ".", "width_id", "]", ".", "running_var", "[", ":", "num_features", "]", ",", "\n", "self", ".", "weight", "[", ":", "num_features", "]", ",", "\n", "self", ".", "bias", "[", ":", "num_features", "]", ",", "\n", "self", ".", "training", ",", "\n", "self", ".", "momentum", ",", "\n", "self", ".", "eps", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.arch_util.make_divisible": [[11, 19], ["max", "int", "int"], "function", ["None"], ["def", "make_divisible", "(", "v", ",", "divisor", "=", "8", ",", "min_value", "=", "8", ")", ":", "\n", "    ", "if", "min_value", "is", "None", ":", "\n", "        ", "min_value", "=", "divisor", "\n", "", "new_v", "=", "max", "(", "min_value", ",", "int", "(", "v", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than 10%.", "\n", "if", "new_v", "<", "0.9", "*", "v", ":", "\n", "        ", "new_v", "+=", "divisor", "\n", "", "return", "int", "(", "new_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.arch_util.initialize_weights": [[20, 38], ["isinstance", "net.modules", "isinstance", "torch.kaiming_normal_", "isinstance", "m.bias.data.zero_", "torch.kaiming_normal_", "isinstance", "m.bias.data.zero_", "torch.constant_", "torch.constant_"], "function", ["None"], ["", "def", "initialize_weights", "(", "net_l", ",", "scale", "=", "1", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "net_l", ",", "list", ")", ":", "\n", "        ", "net_l", "=", "[", "net_l", "]", "\n", "", "for", "net", "in", "net_l", ":", "\n", "        ", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "weight", ".", "data", "*=", "scale", "# for residual block", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "weight", ".", "data", "*=", "scale", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.CARN_arch.BasicBlock.__init__": [[14, 19], ["m.append", "torch.Sequential.__init__", "models.archs.arch_util.USConv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ":", "\n", "\n", "        ", "m", "=", "[", "USConv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "pad", ",", "us", "=", "[", "True", ",", "True", "]", ")", "]", "\n", "m", ".", "append", "(", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", "*", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.CARN_arch.EResidualBlock.__init__": [[21, 30], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.archs.arch_util.USConv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "models.archs.arch_util.USConv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "models.archs.arch_util.USConv2d"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "group", "=", "1", ")", ":", "\n", "        ", "super", "(", "EResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "\n", "USConv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "1", ",", "1", ",", "groups", "=", "group", ",", "us", "=", "[", "True", ",", "True", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "USConv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "1", ",", "1", ",", "groups", "=", "group", ",", "us", "=", "[", "True", ",", "True", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "USConv2d", "(", "out_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "us", "=", "[", "True", ",", "True", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.CARN_arch.EResidualBlock.forward": [[32, 36], ["CARN_arch.EResidualBlock.body", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "body", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", "+", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.CARN_arch.Block.__init__": [[38, 45], ["torch.Module.__init__", "CARN_arch.EResidualBlock", "CARN_arch.BasicBlock", "CARN_arch.BasicBlock", "CARN_arch.BasicBlock"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", ",", "group", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "b1", "=", "EResidualBlock", "(", "nf", ",", "nf", ",", "group", "=", "group", ")", "\n", "self", ".", "c1", "=", "BasicBlock", "(", "nf", "*", "2", ",", "nf", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "c2", "=", "BasicBlock", "(", "nf", "*", "3", ",", "nf", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "c3", "=", "BasicBlock", "(", "nf", "*", "4", ",", "nf", ",", "1", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.CARN_arch.Block.forward": [[46, 62], ["CARN_arch.Block.b1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN_arch.Block.c1", "CARN_arch.Block.b1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN_arch.Block.c2", "CARN_arch.Block.b1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN_arch.Block.c3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c0", "=", "o0", "=", "x", "\n", "\n", "b1", "=", "self", ".", "b1", "(", "o0", ")", "\n", "c1", "=", "torch", ".", "cat", "(", "[", "c0", ",", "b1", "]", ",", "dim", "=", "1", ")", "\n", "o1", "=", "self", ".", "c1", "(", "c1", ")", "\n", "\n", "b2", "=", "self", ".", "b1", "(", "o1", ")", "\n", "c2", "=", "torch", ".", "cat", "(", "[", "c1", ",", "b2", "]", ",", "dim", "=", "1", ")", "\n", "o2", "=", "self", ".", "c2", "(", "c2", ")", "\n", "\n", "b3", "=", "self", ".", "b1", "(", "o2", ")", "\n", "c3", "=", "torch", ".", "cat", "(", "[", "c2", ",", "b3", "]", ",", "dim", "=", "1", ")", "\n", "o3", "=", "self", ".", "c3", "(", "c3", ")", "\n", "\n", "return", "o3", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.CARN_arch._UpsampleBlock.__init__": [[65, 78], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "int", "math.log", "models.archs.arch_util.USConv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle", "models.archs.arch_util.USConv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "scale", ",", "group", "=", "1", ")", ":", "\n", "        ", "super", "(", "_UpsampleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "modules", "=", "[", "]", "\n", "if", "scale", "==", "2", "or", "scale", "==", "4", "or", "scale", "==", "8", ":", "\n", "            ", "for", "_", "in", "range", "(", "int", "(", "math", ".", "log", "(", "scale", ",", "2", ")", ")", ")", ":", "\n", "                ", "modules", "+=", "[", "USConv2d", "(", "n_channels", ",", "4", "*", "n_channels", ",", "3", ",", "1", ",", "1", ",", "groups", "=", "group", ",", "us", "=", "[", "True", ",", "True", "]", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "modules", "+=", "[", "nn", ".", "PixelShuffle", "(", "2", ")", "]", "\n", "", "", "elif", "scale", "==", "3", ":", "\n", "            ", "modules", "+=", "[", "USConv2d", "(", "n_channels", ",", "9", "*", "n_channels", ",", "3", ",", "1", ",", "1", ",", "groups", "=", "group", ",", "us", "=", "[", "True", ",", "True", "]", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "modules", "+=", "[", "nn", ".", "PixelShuffle", "(", "3", ")", "]", "\n", "\n", "", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.CARN_arch._UpsampleBlock.forward": [[79, 82], ["CARN_arch._UpsampleBlock.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "body", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.CARN_arch.UpsampleBlock.__init__": [[85, 96], ["torch.Module.__init__", "CARN_arch._UpsampleBlock", "CARN_arch._UpsampleBlock", "CARN_arch._UpsampleBlock", "CARN_arch._UpsampleBlock"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "scale", ",", "multi_scale", ",", "group", "=", "1", ")", ":", "\n", "        ", "super", "(", "UpsampleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "multi_scale", ":", "\n", "            ", "self", ".", "up2", "=", "_UpsampleBlock", "(", "n_channels", ",", "scale", "=", "2", ",", "group", "=", "group", ")", "\n", "self", ".", "up3", "=", "_UpsampleBlock", "(", "n_channels", ",", "scale", "=", "3", ",", "group", "=", "group", ")", "\n", "self", ".", "up4", "=", "_UpsampleBlock", "(", "n_channels", ",", "scale", "=", "4", ",", "group", "=", "group", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "_UpsampleBlock", "(", "n_channels", ",", "scale", "=", "scale", ",", "group", "=", "group", ")", "\n", "\n", "", "self", ".", "multi_scale", "=", "multi_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.CARN_arch.UpsampleBlock.forward": [[97, 107], ["CARN_arch.UpsampleBlock.up", "CARN_arch.UpsampleBlock.up2", "CARN_arch.UpsampleBlock.up3", "CARN_arch.UpsampleBlock.up4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "scale", ")", ":", "\n", "        ", "if", "self", ".", "multi_scale", ":", "\n", "            ", "if", "scale", "==", "2", ":", "\n", "                ", "return", "self", ".", "up2", "(", "x", ")", "\n", "", "elif", "scale", "==", "3", ":", "\n", "                ", "return", "self", ".", "up3", "(", "x", ")", "\n", "", "elif", "scale", "==", "4", ":", "\n", "                ", "return", "self", ".", "up4", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "self", ".", "up", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.CARN_arch.US_CARN_M.__init__": [[109, 130], ["torch.Module.__init__", "models.MeanShift", "models.MeanShift", "models.archs.arch_util.USConv2d", "CARN_arch.Block", "CARN_arch.Block", "CARN_arch.Block", "CARN_arch.BasicBlock", "CARN_arch.BasicBlock", "CARN_arch.BasicBlock", "CARN_arch.UpsampleBlock", "models.archs.arch_util.USConv2d"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "out_nc", ",", "nf", "=", "64", ",", "scale", "=", "4", ",", "multi_scale", "=", "False", ",", "group", "=", "4", ")", ":", "\n", "        ", "super", "(", "US_CARN_M", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "scale", "=", "scale", "\n", "rgb_range", "=", "1", "\n", "rgb_mean", "=", "(", "0.4488", ",", "0.4371", ",", "0.4040", ")", "\n", "rgb_std", "=", "(", "1.0", ",", "1.0", ",", "1.0", ")", "\n", "self", ".", "sub_mean", "=", "arch_util", ".", "MeanShift", "(", "rgb_range", ",", "rgb_mean", ",", "rgb_std", ")", "\n", "self", ".", "add_mean", "=", "arch_util", ".", "MeanShift", "(", "rgb_range", ",", "rgb_mean", ",", "rgb_std", ",", "1", ")", "\n", "\n", "self", ".", "entry", "=", "USConv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "us", "=", "[", "False", ",", "True", "]", ")", "\n", "\n", "self", ".", "b1", "=", "Block", "(", "nf", ",", "group", "=", "group", ",", ")", "\n", "self", ".", "b2", "=", "Block", "(", "nf", ",", "group", "=", "group", ",", ")", "\n", "self", ".", "b3", "=", "Block", "(", "nf", ",", "group", "=", "group", ",", ")", "\n", "self", ".", "c1", "=", "BasicBlock", "(", "nf", "*", "2", ",", "nf", ",", "1", ",", "1", ",", "0", ",", ")", "\n", "self", ".", "c2", "=", "BasicBlock", "(", "nf", "*", "3", ",", "nf", ",", "1", ",", "1", ",", "0", ",", ")", "\n", "self", ".", "c3", "=", "BasicBlock", "(", "nf", "*", "4", ",", "nf", ",", "1", ",", "1", ",", "0", ",", ")", "\n", "\n", "self", ".", "upsample", "=", "UpsampleBlock", "(", "nf", ",", "scale", "=", "scale", ",", "multi_scale", "=", "multi_scale", ",", "group", "=", "group", ")", "\n", "self", ".", "exit", "=", "USConv2d", "(", "nf", ",", "out_nc", ",", "3", ",", "1", ",", "1", ",", "us", "=", "[", "True", ",", "False", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.CARN_arch.US_CARN_M.forward": [[131, 154], ["CARN_arch.US_CARN_M.sub_mean", "CARN_arch.US_CARN_M.entry", "CARN_arch.US_CARN_M.b1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN_arch.US_CARN_M.c1", "CARN_arch.US_CARN_M.b2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN_arch.US_CARN_M.c2", "CARN_arch.US_CARN_M.b3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "CARN_arch.US_CARN_M.c3", "CARN_arch.US_CARN_M.upsample", "CARN_arch.US_CARN_M.exit", "CARN_arch.US_CARN_M.add_mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "sub_mean", "(", "x", ")", "\n", "x", "=", "self", ".", "entry", "(", "x", ")", "\n", "c0", "=", "o0", "=", "x", "\n", "\n", "b1", "=", "self", ".", "b1", "(", "o0", ")", "\n", "c1", "=", "torch", ".", "cat", "(", "[", "c0", ",", "b1", "]", ",", "dim", "=", "1", ")", "\n", "o1", "=", "self", ".", "c1", "(", "c1", ")", "\n", "\n", "b2", "=", "self", ".", "b2", "(", "o1", ")", "\n", "c2", "=", "torch", ".", "cat", "(", "[", "c1", ",", "b2", "]", ",", "dim", "=", "1", ")", "\n", "o2", "=", "self", ".", "c2", "(", "c2", ")", "\n", "\n", "b3", "=", "self", ".", "b3", "(", "o2", ")", "\n", "c3", "=", "torch", ".", "cat", "(", "[", "c2", ",", "b3", "]", ",", "dim", "=", "1", ")", "\n", "o3", "=", "self", ".", "c3", "(", "c3", ")", "\n", "\n", "out", "=", "self", ".", "upsample", "(", "o3", ",", "scale", "=", "self", ".", "scale", ")", "\n", "\n", "out", "=", "self", ".", "exit", "(", "out", ")", "\n", "out", "=", "self", ".", "add_mean", "(", "out", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.SRResNet_arch.ResidualBlock_noBN.__init__": [[22, 29], ["torch.Module.__init__", "models.archs.arch_util.USConv2d", "models.archs.arch_util.USConv2d", "models.initialize_weights"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__", "home.repos.pwc.inspect_result.chenbong_arm-net.archs.arch_util.initialize_weights"], ["def", "__init__", "(", "self", ",", "nf", "=", "64", ")", ":", "\n", "        ", "super", "(", "ResidualBlock_noBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "USConv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ",", "us", "=", "[", "True", ",", "True", "]", ")", "\n", "self", ".", "conv2", "=", "USConv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ",", "us", "=", "[", "True", ",", "True", "]", ")", "\n", "\n", "# initialization", "\n", "arch_util", ".", "initialize_weights", "(", "[", "self", ".", "conv1", ",", "self", ".", "conv2", "]", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.SRResNet_arch.ResidualBlock_noBN.forward": [[30, 35], ["torch.relu", "torch.relu", "SRResNet_arch.ResidualBlock_noBN.conv2", "SRResNet_arch.ResidualBlock_noBN.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "identity", "+", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.SRResNet_arch.US_MSRResNet.__init__": [[40, 71], ["torch.Module.__init__", "models.archs.arch_util.USConv2d", "functools.partial", "SRResNet_arch.make_layer", "models.archs.arch_util.USConv2d", "models.archs.arch_util.USConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "models.initialize_weights", "models.archs.arch_util.USConv2d", "torch.PixelShuffle", "torch.PixelShuffle", "models.initialize_weights", "models.archs.arch_util.USConv2d", "torch.PixelShuffle", "torch.PixelShuffle", "models.archs.arch_util.USConv2d", "models.archs.arch_util.USConv2d", "torch.PixelShuffle", "torch.PixelShuffle"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__", "home.repos.pwc.inspect_result.chenbong_arm-net.archs.SRResNet_arch.make_layer", "home.repos.pwc.inspect_result.chenbong_arm-net.archs.arch_util.initialize_weights", "home.repos.pwc.inspect_result.chenbong_arm-net.archs.arch_util.initialize_weights"], ["def", "__init__", "(", "self", ",", "in_nc", "=", "3", ",", "out_nc", "=", "3", ",", "nf", "=", "64", ",", "nb", "=", "16", ",", "upscale", "=", "4", ")", ":", "\n", "        ", "super", "(", "US_MSRResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "upscale", "=", "upscale", "\n", "\n", "self", ".", "conv_first", "=", "USConv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ",", "us", "=", "[", "False", ",", "True", "]", ")", "\n", "basic_block", "=", "functools", ".", "partial", "(", "ResidualBlock_noBN", ",", "nf", "=", "nf", ")", "\n", "self", ".", "recon_trunk", "=", "make_layer", "(", "basic_block", ",", "nb", ")", "\n", "\n", "# upsampling", "\n", "if", "self", ".", "upscale", "==", "2", ":", "\n", "            ", "self", ".", "upconv1", "=", "USConv2d", "(", "nf", ",", "nf", "*", "4", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ",", "us", "=", "[", "True", ",", "True", "]", ")", "\n", "self", ".", "pixel_shuffle", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "\n", "", "elif", "self", ".", "upscale", "==", "3", ":", "\n", "            ", "self", ".", "upconv1", "=", "USConv2d", "(", "nf", ",", "nf", "*", "9", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ",", "us", "=", "[", "True", ",", "True", "]", ")", "\n", "self", ".", "pixel_shuffle", "=", "nn", ".", "PixelShuffle", "(", "3", ")", "\n", "", "elif", "self", ".", "upscale", "==", "4", ":", "\n", "            ", "self", ".", "upconv1", "=", "USConv2d", "(", "nf", ",", "nf", "*", "4", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ",", "us", "=", "[", "True", ",", "True", "]", ")", "\n", "self", ".", "upconv2", "=", "USConv2d", "(", "nf", ",", "nf", "*", "4", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ",", "us", "=", "[", "True", ",", "True", "]", ")", "\n", "self", ".", "pixel_shuffle", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "\n", "\n", "", "self", ".", "HRconv", "=", "USConv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ",", "us", "=", "[", "True", ",", "True", "]", ")", "\n", "self", ".", "conv_last", "=", "USConv2d", "(", "nf", ",", "out_nc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ",", "us", "=", "[", "True", ",", "False", "]", ")", "\n", "\n", "# activation function", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "\n", "# initialization", "\n", "arch_util", ".", "initialize_weights", "(", "[", "self", ".", "conv_first", ",", "self", ".", "upconv1", ",", "self", ".", "HRconv", ",", "self", ".", "conv_last", "]", ",", "0.1", ")", "\n", "if", "self", ".", "upscale", "==", "4", ":", "\n", "            ", "arch_util", ".", "initialize_weights", "(", "self", ".", "upconv2", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.SRResNet_arch.US_MSRResNet.forward": [[72, 86], ["SRResNet_arch.US_MSRResNet.lrelu", "SRResNet_arch.US_MSRResNet.recon_trunk", "SRResNet_arch.US_MSRResNet.conv_last", "torch.interpolate", "torch.interpolate", "SRResNet_arch.US_MSRResNet.conv_first", "SRResNet_arch.US_MSRResNet.lrelu", "SRResNet_arch.US_MSRResNet.lrelu", "SRResNet_arch.US_MSRResNet.lrelu", "SRResNet_arch.US_MSRResNet.pixel_shuffle", "SRResNet_arch.US_MSRResNet.pixel_shuffle", "SRResNet_arch.US_MSRResNet.lrelu", "SRResNet_arch.US_MSRResNet.HRconv", "SRResNet_arch.US_MSRResNet.upconv1", "SRResNet_arch.US_MSRResNet.upconv2", "SRResNet_arch.US_MSRResNet.pixel_shuffle", "SRResNet_arch.US_MSRResNet.upconv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv_first", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "recon_trunk", "(", "fea", ")", "\n", "\n", "if", "self", ".", "upscale", "==", "4", ":", "\n", "            ", "out", "=", "self", ".", "lrelu", "(", "self", ".", "pixel_shuffle", "(", "self", ".", "upconv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "self", ".", "pixel_shuffle", "(", "self", ".", "upconv2", "(", "out", ")", ")", ")", "\n", "", "elif", "self", ".", "upscale", "==", "3", "or", "self", ".", "upscale", "==", "2", ":", "\n", "            ", "out", "=", "self", ".", "lrelu", "(", "self", ".", "pixel_shuffle", "(", "self", ".", "upconv1", "(", "out", ")", ")", ")", "\n", "\n", "", "out", "=", "self", ".", "conv_last", "(", "self", ".", "lrelu", "(", "self", ".", "HRconv", "(", "out", ")", ")", ")", "\n", "base", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "upscale", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "out", "+=", "base", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chenbong_arm-net.archs.SRResNet_arch.make_layer": [[9, 14], ["range", "torch.Sequential", "layers.append", "block"], "function", ["None"], ["def", "make_layer", "(", "block", ",", "n_layers", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_layers", ")", ":", "\n", "        ", "layers", ".", "append", "(", "block", "(", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.metrics.calculate_PSNR_SSIM.calculate_psnr": [[9, 17], ["img1.astype.astype", "img2.astype.astype", "numpy.mean", "float", "math.log10", "math.sqrt"], "function", ["None"], ["def", "calculate_psnr", "(", "img1", ",", "img2", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "    ", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.metrics.calculate_PSNR_SSIM.ssim": [[19, 39], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.metrics.calculate_PSNR_SSIM.calculate_ssim": [[41, 60], ["ValueError", "calculate_PSNR_SSIM.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "calculate_PSNR_SSIM.ssim", "calculate_PSNR_SSIM.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.metrics.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.chenbong_arm-net.metrics.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.chenbong_arm-net.metrics.calculate_PSNR_SSIM.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.metrics.calculate_PSNR_SSIM.bgr2ycbcr": [[62, 84], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["", "", "def", "bgr2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''same as matlab rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "24.966", ",", "128.553", ",", "65.481", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__": [[15, 31], ["torch.Dataset.__init__", "torch.get_image_paths", "torch.get_image_paths", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__init__", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.get_image_paths", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.get_image_paths"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "LQGTDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "data_type", "=", "self", ".", "opt", "[", "'data_type'", "]", "\n", "self", ".", "paths_LQ", ",", "self", ".", "paths_GT", "=", "None", ",", "None", "\n", "self", ".", "sizes_LQ", ",", "self", ".", "sizes_GT", "=", "None", ",", "None", "\n", "self", ".", "LQ_env", ",", "self", ".", "GT_env", "=", "None", ",", "None", "# environments for lmdb", "\n", "\n", "self", ".", "paths_GT", ",", "self", ".", "sizes_GT", "=", "util", ".", "get_image_paths", "(", "self", ".", "data_type", ",", "opt", "[", "'dataroot_GT'", "]", ")", "\n", "self", ".", "paths_LQ", ",", "self", ".", "sizes_LQ", "=", "util", ".", "get_image_paths", "(", "self", ".", "data_type", ",", "opt", "[", "'dataroot_LQ'", "]", ")", "\n", "\n", "\n", "assert", "self", ".", "paths_GT", ",", "'Error: GT path is empty.'", "\n", "if", "self", ".", "paths_LQ", "and", "self", ".", "paths_GT", ":", "\n", "            ", "assert", "len", "(", "self", ".", "paths_LQ", ")", "==", "len", "(", "self", ".", "paths_GT", ")", ",", "'GT and LQ datasets have different number of images - {}, {}.'", ".", "format", "(", "len", "(", "self", ".", "paths_LQ", ")", ",", "len", "(", "self", ".", "paths_GT", ")", ")", "\n", "", "self", ".", "random_scale_list", "=", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__getitem__": [[33, 111], ["torch.read_img", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.modcrop", "torch.read_img", "torch.imresize_np", "random.randint", "random.randint", "torch.augment", "torch.channel_convert", "random.choice", "LQGT_dataset.LQGTDataset.__getitem__._mod"], "methods", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.util.read_img", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.modcrop", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.read_img", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.imresize_np", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.augment", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.channel_convert"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "GT_path", ",", "LQ_path", "=", "None", ",", "None", "\n", "scale", "=", "self", ".", "opt", "[", "'scale'", "]", "\n", "GT_size", "=", "self", ".", "opt", "[", "'GT_size'", "]", "\n", "\n", "# get GT image", "\n", "GT_path", "=", "self", ".", "paths_GT", "[", "index", "]", "\n", "resolution", "=", "None", "\n", "img_GT", "=", "util", ".", "read_img", "(", "self", ".", "GT_env", ",", "GT_path", ",", "resolution", ")", "\n", "if", "self", ".", "opt", "[", "'phase'", "]", "!=", "'train'", ":", "# modcrop in the validation / test phase", "\n", "            ", "img_GT", "=", "util", ".", "modcrop", "(", "img_GT", ",", "scale", ")", "\n", "", "if", "self", ".", "opt", "[", "'color'", "]", ":", "# change color space if necessary", "\n", "            ", "img_GT", "=", "util", ".", "channel_convert", "(", "img_GT", ".", "shape", "[", "2", "]", ",", "self", ".", "opt", "[", "'color'", "]", ",", "[", "img_GT", "]", ")", "[", "0", "]", "\n", "\n", "# get LQ image", "\n", "", "if", "self", ".", "paths_LQ", ":", "\n", "            ", "LQ_path", "=", "self", ".", "paths_LQ", "[", "index", "]", "\n", "resolution", "=", "None", "\n", "img_LQ", "=", "util", ".", "read_img", "(", "self", ".", "LQ_env", ",", "LQ_path", ",", "resolution", ")", "\n", "", "else", ":", "# down-sampling on-the-fly", "\n", "# randomly scale during training", "\n", "            ", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "                ", "random_scale", "=", "random", ".", "choice", "(", "self", ".", "random_scale_list", ")", "\n", "H_s", ",", "W_s", ",", "_", "=", "img_GT", ".", "shape", "\n", "\n", "def", "_mod", "(", "n", ",", "random_scale", ",", "scale", ",", "thres", ")", ":", "\n", "                    ", "rlt", "=", "int", "(", "n", "*", "random_scale", ")", "\n", "rlt", "=", "(", "rlt", "//", "scale", ")", "*", "scale", "\n", "return", "thres", "if", "rlt", "<", "thres", "else", "rlt", "\n", "\n", "", "H_s", "=", "_mod", "(", "H_s", ",", "random_scale", ",", "scale", ",", "GT_size", ")", "\n", "W_s", "=", "_mod", "(", "W_s", ",", "random_scale", ",", "scale", ",", "GT_size", ")", "\n", "img_GT", "=", "cv2", ".", "resize", "(", "img_GT", ",", "(", "W_s", ",", "H_s", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "if", "img_GT", ".", "ndim", "==", "2", ":", "\n", "                    ", "img_GT", "=", "cv2", ".", "cvtColor", "(", "img_GT", ",", "cv2", ".", "COLOR_GRAY2BGR", ")", "\n", "\n", "", "", "H", ",", "W", ",", "_", "=", "img_GT", ".", "shape", "\n", "# using matlab imresize", "\n", "img_LQ", "=", "util", ".", "imresize_np", "(", "img_GT", ",", "1", "/", "scale", ",", "True", ")", "\n", "if", "img_LQ", ".", "ndim", "==", "2", ":", "\n", "                ", "img_LQ", "=", "np", ".", "expand_dims", "(", "img_LQ", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "# if the image size is too small", "\n", "            ", "H", ",", "W", ",", "_", "=", "img_GT", ".", "shape", "\n", "if", "H", "<", "GT_size", "or", "W", "<", "GT_size", ":", "\n", "                ", "img_GT", "=", "cv2", ".", "resize", "(", "img_GT", ",", "(", "GT_size", ",", "GT_size", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "# using matlab imresize", "\n", "img_LQ", "=", "util", ".", "imresize_np", "(", "img_GT", ",", "1", "/", "scale", ",", "True", ")", "\n", "if", "img_LQ", ".", "ndim", "==", "2", ":", "\n", "                    ", "img_LQ", "=", "np", ".", "expand_dims", "(", "img_LQ", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "H", ",", "W", ",", "C", "=", "img_LQ", ".", "shape", "\n", "LQ_size", "=", "GT_size", "//", "scale", "\n", "\n", "# randomly crop", "\n", "rnd_h", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "H", "-", "LQ_size", ")", ")", "\n", "rnd_w", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "W", "-", "LQ_size", ")", ")", "\n", "img_LQ", "=", "img_LQ", "[", "rnd_h", ":", "rnd_h", "+", "LQ_size", ",", "rnd_w", ":", "rnd_w", "+", "LQ_size", ",", ":", "]", "\n", "rnd_h_GT", ",", "rnd_w_GT", "=", "int", "(", "rnd_h", "*", "scale", ")", ",", "int", "(", "rnd_w", "*", "scale", ")", "\n", "img_GT", "=", "img_GT", "[", "rnd_h_GT", ":", "rnd_h_GT", "+", "GT_size", ",", "rnd_w_GT", ":", "rnd_w_GT", "+", "GT_size", ",", ":", "]", "\n", "\n", "# augmentation - flip, rotate", "\n", "img_LQ", ",", "img_GT", "=", "util", ".", "augment", "(", "[", "img_LQ", ",", "img_GT", "]", ",", "self", ".", "opt", "[", "'use_flip'", "]", ",", "self", ".", "opt", "[", "'use_rot'", "]", ")", "\n", "\n", "", "if", "self", ".", "opt", "[", "'color'", "]", ":", "# change color space if necessary", "\n", "            ", "img_LQ", "=", "util", ".", "channel_convert", "(", "C", ",", "self", ".", "opt", "[", "'color'", "]", ",", "[", "img_LQ", "]", ")", "[", "0", "]", "# TODO during val no definition", "\n", "\n", "# BGR to RGB, HWC to CHW, numpy to tensor", "\n", "", "if", "img_GT", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "img_GT", "=", "img_GT", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "img_LQ", "=", "img_LQ", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "img_GT", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img_GT", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "img_LQ", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img_LQ", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "\n", "if", "LQ_path", "is", "None", ":", "\n", "            ", "LQ_path", "=", "GT_path", "\n", "", "return", "{", "'LQ'", ":", "img_LQ", ",", "'GT'", ":", "img_GT", ",", "'LQ_path'", ":", "LQ_path", ",", "'GT_path'", ":", "GT_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.LQGT_dataset.LQGTDataset.__len__": [[112, 114], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths_GT", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.__init__.create_dataloader": [[7, 16], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.chenbong_arm-net.data.__init__.create_dataset": [[18, 30], ["D", "logging.getLogger", "logging.getLogger.info", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.is_image_file": [[18, 20], ["any", "filename.endswith"], "function", ["None"], ["import", "yaml", "\n", "try", ":", "\n", "    ", "from", "yaml", "import", "CLoader", "as", "Loader", ",", "CDumper", "as", "Dumper", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util._get_paths_from_images": [[22, 33], ["os.path.isdir", "sorted", "os.walk", "sorted", "util.is_image_file", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.util.is_image_file"], ["    ", "from", "yaml", "import", "Loader", ",", "Dumper", "\n", "\n", "\n", "\n", "", "def", "getnearpos", "(", "array", ",", "value", ")", ":", "return", "(", "np", ".", "abs", "(", "array", "-", "value", ")", ")", ".", "argmin", "(", ")", "\n", "\n", "def", "get_netG", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ".", "netG", ",", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "return", "model", ".", "netG", ".", "module", "\n", "", "else", ":", "\n", "        ", "return", "model", ".", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.get_image_paths": [[38, 46], ["sorted", "NotImplementedError", "util._get_paths_from_images"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.util._get_paths_from_images"], ["        ", "return", "model", ".", "netG", "\n", "\n", "\n", "", "", "def", "save_hmap", "(", "hmap", ",", "hmap_x", ",", "hmap_y", ",", "save_path", ",", "bins", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "6.4", ",", "6.4", ")", ")", "\n", "ax", ".", "matshow", "(", "hmap", ",", "origin", "=", "'lower'", ")", "\n", "ax", ".", "xaxis", ".", "set_ticks", "(", "np", ".", "arange", "(", "0", ",", "bins", ",", "1", ")", ")", "\n", "ax", ".", "set_xticklabels", "(", "np", ".", "around", "(", "np", ".", "linspace", "(", "min", "(", "hmap_x", ")", ",", "max", "(", "hmap_x", ")", ",", "num", "=", "bins", ")", ",", "2", ")", ",", "rotation", "=", "90", ")", "\n", "ax", ".", "xaxis", ".", "set_ticks_position", "(", "'bottom'", ")", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.glob_file_list": [[48, 50], ["sorted", "glob.glob", "os.path.join"], "function", ["None"], ["ax", ".", "yaxis", ".", "set_ticks", "(", "np", ".", "arange", "(", "0", ",", "bins", ",", "1", ")", ")", "\n", "ax", ".", "set_yticklabels", "(", "np", ".", "around", "(", "np", ".", "linspace", "(", "min", "(", "hmap_y", ")", ",", "max", "(", "hmap_y", ")", ",", "num", "=", "bins", ")", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.read_img": [[53, 66], ["cv2.imread", "np.expand_dims.astype", "numpy.expand_dims"], "function", ["None"], ["plt", ".", "cla", "(", ")", "\n", "plt", ".", "close", "(", "\"all\"", ")", "\n", "\n", "", "def", "read_log", "(", "log_path", ")", ":", "\n", "    ", "nums", "=", "[", "]", "\n", "with", "open", "(", "log_path", ",", "'r'", ")", "as", "f", ":", "\n", "# print(f.read())    # ", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "# ", "\n", "            ", "num", "=", "eval", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "', '", ")", "[", "-", "1", "]", ")", "\n", "nums", ".", "append", "(", "num", ")", "\n", "", "", "return", "nums", "\n", "\n", "", "def", "calc_base_hmap", "(", "imscore_log_path", ",", "psnr_log_path", ",", "bins", ")", ":", "\n", "    ", "x", "=", "read_log", "(", "imscore_log_path", ")", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.read_img_seq": [[68, 86], ["numpy.stack", "torch.from_numpy().float", "type", "sorted", "util.read_img", "glob.glob", "torch.from_numpy", "os.path.join", "numpy.ascontiguousarray", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.util.read_img"], ["z", "=", "[", "1", "]", "*", "len", "(", "x", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "hmap", ",", "hmap_x", ",", "hmap_y", ",", "_", "=", "ax", ".", "hist2d", "(", "x", ",", "y", ",", "bins", "=", "bins", ")", "\n", "\n", "ret", "=", "stats", ".", "binned_statistic", "(", "x", ",", "y", ",", "'mean'", ",", "bins", "=", "hmap_x", ")", "\n", "hmap_y_mean", "=", "ret", ".", "statistic", "\n", "\n", "hmap_x", "=", "hmap_x", "[", ":", "-", "1", "]", "+", "(", "hmap_x", "[", "1", "]", "-", "hmap_x", "[", "0", "]", ")", "/", "2", "\n", "hmap_y", "=", "hmap_y", "[", ":", "-", "1", "]", "+", "(", "hmap_y", "[", "1", "]", "-", "hmap_y", "[", "0", "]", ")", "/", "2", "\n", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "close", "(", "\"all\"", ")", "\n", "\n", "return", "x", ",", "y", ",", "hmap", ",", "hmap_x", ",", "hmap_y", ",", "hmap_y_mean", "\n", "\n", "\n", "", "def", "hmap_imscore_to_pred_psnr", "(", "hmap", ",", "hmap_x", ",", "hmap_y", ",", "imscore", ",", "t", "=", "1e-2", ")", ":", "\n", "    ", "idx", "=", "getnearpos", "(", "hmap_x", ",", "imscore", ")", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.index_generation": [[88, 135], ["range", "return_l.append", "ValueError", "ValueError"], "function", ["None"], ["pred_psnr", "=", "random", ".", "choices", "(", "hmap_y", ",", "weights", "=", "psnr_dist", ")", "[", "0", "]", "\n", "return", "pred_psnr", "\n", "\n", "", "def", "hmap_y_mean_to_pred_psnr", "(", "hmap_y_mean", ",", "hmap_x", ",", "imscore", ")", ":", "\n", "    ", "idx", "=", "getnearpos", "(", "hmap_x", ",", "imscore", ")", "\n", "pred_psnr", "=", "hmap_y_mean", "[", "idx", "]", "\n", "return", "pred_psnr", "\n", "\n", "", "layer_modules", "=", "(", "\n", "nn", ".", "Conv2d", ",", "nn", ".", "ConvTranspose2d", ",", "\n", "nn", ".", "Linear", ",", "\n", "nn", ".", "BatchNorm2d", ",", "\n", ")", "\n", "\n", "def", "summary", "(", "model", ",", "input_size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Summarize the given input model.\n    Summarized information are 1) output shape, 2) kernel shape,\n    3) number of the parameters and 4) operations (Mult-Adds)\n    Args:\n        model (Module): Model to summarize\n        x (Tensor): Input tensor of the model with [N, C, H, W] shape\n                    dtype and device have to match to the model\n        args, kwargs: Other argument used in `model.forward` function\n    \"\"\"", "\n", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "x", "=", "torch", ".", "zeros", "(", "input_size", ")", ".", "to", "(", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n", "def", "register_hook", "(", "module", ")", ":", "\n", "        ", "def", "hook", "(", "module", ",", "inputs", ",", "outputs", ")", ":", "\n", "            ", "cls_name", "=", "str", "(", "module", ".", "__class__", ")", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"'\"", ")", "[", "0", "]", "\n", "module_idx", "=", "len", "(", "summary", ")", "\n", "key", "=", "None", "\n", "for", "name", ",", "item", "in", "module_names", ".", "items", "(", ")", ":", "\n", "                ", "if", "item", "==", "module", ":", "\n", "                    ", "key", "=", "\"{}_{}\"", ".", "format", "(", "module_idx", ",", "name", ")", "\n", "break", "\n", "", "", "assert", "key", "\n", "\n", "info", "=", "OrderedDict", "(", ")", "\n", "info", "[", "\"id\"", "]", "=", "id", "(", "module", ")", "\n", "if", "isinstance", "(", "outputs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "info", "[", "\"out\"", "]", "=", "list", "(", "outputs", "[", "0", "]", ".", "size", "(", ")", ")", "\n", "", "except", "AttributeError", ":", "\n", "                    ", "info", "[", "\"out\"", "]", "=", "list", "(", "outputs", "[", "0", "]", ".", "data", ".", "size", "(", ")", ")", "\n", "", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.augment": [[143, 159], ["util.augment._augment"], "function", ["None"], ["info", "[", "\"params_nt\"", "]", "+=", "param", ".", "nelement", "(", ")", "*", "(", "not", "param", ".", "requires_grad", ")", "\n", "\n", "if", "name", "==", "\"weight\"", ":", "\n", "                    ", "ksize", "=", "list", "(", "param", ".", "size", "(", ")", ")", "\n", "if", "len", "(", "ksize", ")", ">", "1", ":", "\n", "                        ", "ksize", "[", "0", "]", ",", "ksize", "[", "1", "]", "=", "ksize", "[", "1", "]", ",", "ksize", "[", "0", "]", "\n", "", "info", "[", "\"ksize\"", "]", "=", "ksize", "\n", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                        ", "assert", "len", "(", "inputs", "[", "0", "]", ".", "size", "(", ")", ")", "==", "4", "and", "len", "(", "inputs", "[", "0", "]", ".", "size", "(", ")", ")", "==", "len", "(", "outputs", "[", "0", "]", ".", "size", "(", ")", ")", "+", "1", "\n", "\n", "in_c", ",", "in_h", ",", "in_w", "=", "inputs", "[", "0", "]", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "k_h", ",", "k_w", "=", "module", ".", "kernel_size", "\n", "out_c", ",", "out_h", ",", "out_w", "=", "outputs", "[", "0", "]", ".", "size", "(", ")", "\n", "groups", "=", "module", ".", "groups", "\n", "kernel_mul", "=", "k_h", "*", "k_w", "*", "(", "in_c", "//", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.augment_flow": [[161, 192], ["util.augment._augment"], "function", ["None"], ["total_mul", "=", "kernel_mul_group", "*", "groups", "\n", "info", "[", "\"macs\"", "]", "+=", "2", "*", "total_mul", "\n", "\n", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                        ", "info", "[", "\"macs\"", "]", "+=", "inputs", "[", "0", "]", ".", "size", "(", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "                        ", "info", "[", "\"macs\"", "]", "+=", "param", ".", "nelement", "(", ")", "\n", "\n", "", "", "elif", "\"weight\"", "in", "name", ":", "\n", "                    ", "info", "[", "\"inner\"", "]", "[", "name", "]", "=", "list", "(", "param", ".", "size", "(", ")", ")", "\n", "info", "[", "\"macs\"", "]", "+=", "param", ".", "nelement", "(", ")", "\n", "\n", "", "", "if", "list", "(", "module", ".", "named_parameters", "(", ")", ")", ":", "\n", "                ", "for", "v", "in", "summary", ".", "values", "(", ")", ":", "\n", "                    ", "if", "info", "[", "\"id\"", "]", "==", "v", "[", "\"id\"", "]", ":", "\n", "                        ", "info", "[", "\"params\"", "]", "=", "\"(recursive)\"", "\n", "\n", "", "", "", "if", "info", "[", "\"params\"", "]", "==", "0", ":", "\n", "                ", "info", "[", "\"params\"", "]", ",", "info", "[", "\"macs\"", "]", "=", "\"-\"", ",", "\"-\"", "\n", "\n", "", "summary", "[", "key", "]", "=", "info", "\n", "\n", "", "if", "isinstance", "(", "module", ",", "layer_modules", ")", "or", "not", "module", ".", "_modules", ":", "\n", "            ", "hooks", ".", "append", "(", "module", ".", "register_forward_hook", "(", "hook", ")", ")", "\n", "\n", "\n", "\n", "", "", "module_names", "=", "get_names_dict", "(", "model", ")", "\n", "\n", "hooks", "=", "[", "]", "\n", "summary", "=", "OrderedDict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.channel_convert": [[194, 206], ["cv2.cvtColor", "numpy.expand_dims", "util.bgr2ycbcr", "numpy.expand_dims", "cv2.cvtColor"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.util.bgr2ycbcr"], ["model", ".", "apply", "(", "register_hook", ")", "\n", "try", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", "(", "x", ")", "if", "not", "(", "kwargs", "or", "args", ")", "else", "model", "(", "x", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "finally", ":", "\n", "        ", "for", "hook", "in", "hooks", ":", "\n", "            ", "hook", ".", "remove", "(", ")", "\n", "# Use pandas to align the columns", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "summary", ")", ".", "T", "\n", "\n", "\n", "df", "[", "\"Mult-Adds\"", "]", "=", "pd", ".", "to_numeric", "(", "df", "[", "\"macs\"", "]", ",", "errors", "=", "\"coerce\"", ")", "\n", "df", "[", "\"Params\"", "]", "=", "pd", ".", "to_numeric", "(", "df", "[", "\"params\"", "]", ",", "errors", "=", "\"coerce\"", ")", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.rgb2ycbcr": [[208, 230], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["df", "=", "df", ".", "rename", "(", "columns", "=", "dict", "(", "\n", "ksize", "=", "\"Kernel Shape\"", ",", "\n", "out", "=", "\"Output Shape\"", ",", "\n", ")", ")", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "filterwarnings", "(", "'ignore'", ")", "\n", "df_sum", "=", "df", ".", "sum", "(", ")", "\n", "\n", "\n", "", "df", ".", "index", ".", "name", "=", "\"Layer\"", "\n", "\n", "df", "=", "df", "[", "[", "\"Kernel Shape\"", ",", "\"Output Shape\"", ",", "\"Params\"", ",", "\"Mult-Adds\"", "]", "]", "\n", "max_repr_width", "=", "max", "(", "[", "len", "(", "row", ")", "for", "row", "in", "df", ".", "to_string", "(", ")", ".", "split", "(", "\"\\n\"", ")", "]", ")", "\n", "\n", "return", "df_sum", "[", "\"Mult-Adds\"", "]", "\n", "\n", "", "def", "get_names_dict", "(", "model", ")", ":", "\n", "    ", "\"\"\"Recursive walk to get names including path.\"\"\"", "\n", "names", "=", "{", "}", "\n", "\n", "def", "_get_names", "(", "module", ",", "parent_name", "=", "\"\"", ")", ":", "\n", "        ", "for", "key", ",", "m", "in", "module", ".", "named_children", "(", ")", ":", "\n", "            ", "cls_name", "=", "str", "(", "m", ".", "__class__", ")", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"'\"", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.bgr2ycbcr": [[232, 254], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["if", "num_named_children", ">", "0", ":", "\n", "                ", "name", "=", "parent_name", "+", "\".\"", "+", "key", "if", "parent_name", "else", "key", "\n", "", "else", ":", "\n", "                ", "name", "=", "parent_name", "+", "\".\"", "+", "cls_name", "+", "\"_\"", "+", "key", "if", "parent_name", "else", "key", "\n", "", "names", "[", "name", "]", "=", "m", "\n", "\n", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                ", "_get_names", "(", "m", ",", "parent_name", "=", "name", ")", "\n", "\n", "", "", "", "_get_names", "(", "model", ")", "\n", "return", "names", "\n", "\n", "\n", "", "def", "laplacian", "(", "image", ")", ":", "\n", "    ", "gray", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "laplac", "=", "cv2", ".", "Laplacian", "(", "gray", ",", "cv2", ".", "CV_16S", ",", "ksize", "=", "3", ")", "\n", "mask_img", "=", "cv2", ".", "convertScaleAbs", "(", "laplac", ")", "\n", "return", "mask_img", "\n", "\n", "\n", "\n", "", "class", "AverageMeter", "(", "object", ")", ":", "\n", "    ", "\"\"\"Computes and stores the average and current value\"\"\"", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.ycbcr2rgb": [[256, 274], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.matmul"], "function", ["None"], ["        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.modcrop": [[276, 290], ["numpy.copy", "ValueError"], "function", ["None"], ["############################################", "\n", "\n", "", "", "def", "cal_FLOPs", "(", "num_ress", ",", "cost_list", ")", ":", "\n", "    ", "assert", "len", "(", "num_ress", ")", "==", "len", "(", "cost_list", ")", "\n", "flops", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "cost_list", ")", ")", ":", "\n", "        ", "flops", "+=", "cost_list", "[", "i", "]", "*", "num_ress", "[", "i", "]", "\n", "", "flops", "/=", "sum", "(", "num_ress", ")", "\n", "percent", "=", "flops", "/", "cost_list", "[", "-", "1", "]", "\n", "\n", "return", "flops", ",", "percent", "\n", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.cubic": [[298, 305], ["torch.abs"], "function", ["None"], ["", "def", "dict_constructor", "(", "loader", ",", "node", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "loader", ".", "construct_pairs", "(", "node", ")", ")", "\n", "\n", "", "Dumper", ".", "add_representer", "(", "OrderedDict", ",", "dict_representer", ")", "\n", "Loader", ".", "add_constructor", "(", "_mapping_tag", ",", "dict_constructor", ")", "\n", "return", "Loader", ",", "Dumper", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.calculate_weights_indices": [[307, 360], ["torch.linspace", "torch.floor", "torch.sum().view", "torch.sum", "weights.narrow.contiguous", "indices.narrow.contiguous", "math.ceil", "torch.floor.view().expand", "torch.linspace().view().expand", "u.view().expand", "util.cubic", "torch.sum().view.expand", "math.isclose", "indices.narrow.narrow", "weights.narrow.narrow", "math.isclose", "indices.narrow.narrow", "weights.narrow.narrow", "indices.narrow.max", "int", "int", "util.cubic", "torch.sum", "indices.narrow.min", "torch.floor.view", "torch.linspace().view", "u.view", "torch.linspace"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.util.cubic", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.cubic"], ["# miscellaneous", "\n", "####################", "\n", "\n", "\n", "", "def", "get_timestamp", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d-%H%M%S'", ")", "\n", "\n", "\n", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "\n", "", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "", "else", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "\n", "\n", "", "", "", "def", "mkdir_and_rename", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "new_name", "=", "path", "+", "'_archived_'", "+", "get_timestamp", "(", ")", "\n", "print", "(", "'Path already exists. Rename it to [{:s}]'", ".", "format", "(", "new_name", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "logger", ".", "info", "(", "'Path already exists. Rename it to [{:s}]'", ".", "format", "(", "new_name", ")", ")", "\n", "os", ".", "rename", "(", "path", ",", "new_name", ")", "\n", "", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "\n", "", "def", "setup_logger", "(", "logger_name", ",", "root", ",", "phase", ",", "level", "=", "logging", ".", "INFO", ",", "screen", "=", "False", ",", "tofile", "=", "False", ")", ":", "\n", "    ", "'''set up logger'''", "\n", "lg", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s.%(msecs)03d - %(levelname)s: %(message)s'", ",", "datefmt", "=", "'%y-%m-%d %H:%M:%S'", ")", "\n", "lg", ".", "setLevel", "(", "level", ")", "\n", "if", "tofile", ":", "\n", "        ", "log_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "phase", "+", "'_{}.log'", ".", "format", "(", "get_timestamp", "(", ")", ")", ")", "\n", "print", "(", "log_file", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "mode", "=", "'w'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "lg", ".", "addHandler", "(", "fh", ")", "\n", "", "if", "screen", ":", "\n", "        ", "sh", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "sh", ".", "setFormatter", "(", "formatter", ")", "\n", "lg", ".", "addHandler", "(", "sh", ")", "\n", "\n", "\n", "####################", "\n", "# image convert", "\n", "####################", "\n", "", "", "def", "crop_border", "(", "img_list", ",", "crop_border", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.imresize": [[362, 429], ["img.size", "util.calculate_weights_indices", "util.calculate_weights_indices", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_H.size", "range", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_W.size", "range", "math.ceil", "math.ceil", "int", "img_aug[].transpose().mv", "img_aug[].transpose().mv", "img_aug[].transpose().mv", "int", "out_1_aug[].mv", "out_1_aug[].mv", "out_1_aug[].mv", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "img_aug[].transpose", "img_aug[].transpose", "img_aug[].transpose", "sym_patch.size", "sym_patch.size", "sym_patch.size", "sym_patch.size"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.util.calculate_weights_indices", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.calculate_weights_indices"], ["\n", "if", "crop_border", "==", "0", ":", "\n", "        ", "return", "img_list", "\n", "", "else", ":", "\n", "        ", "return", "[", "v", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", "]", "for", "v", "in", "img_list", "]", "\n", "\n", "\n", "", "", "def", "tensor2img", "(", "tensor", ",", "out_type", "=", "np", ".", "uint8", ",", "min_max", "=", "(", "0", ",", "1", ")", ")", ":", "\n", "    ", "'''\n    Converts a torch Tensor into an image Numpy array\n    Input: 4D(B,(3/1),H,W), 3D(C,H,W), or 2D(H,W), any range, RGB channel order\n    Output: 3D(H,W,C) or 2D(H,W), [0,255], np.uint8 (default)\n    '''", "\n", "tensor", "=", "tensor", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "clamp_", "(", "*", "min_max", ")", "# clamp", "\n", "tensor", "=", "(", "tensor", "-", "min_max", "[", "0", "]", ")", "/", "(", "min_max", "[", "1", "]", "-", "min_max", "[", "0", "]", ")", "# to range [0,1]", "\n", "n_dim", "=", "tensor", ".", "dim", "(", ")", "\n", "if", "n_dim", "==", "4", ":", "\n", "        ", "n_img", "=", "len", "(", "tensor", ")", "\n", "img_np", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "int", "(", "math", ".", "sqrt", "(", "n_img", ")", ")", ",", "normalize", "=", "False", ")", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "3", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "2", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Only support 4D, 3D and 2D tensor. But received with dimension: {:d}'", ".", "format", "(", "n_dim", ")", ")", "\n", "", "if", "out_type", "==", "np", ".", "uint8", ":", "\n", "        ", "img_np", "=", "(", "img_np", "*", "255.0", ")", ".", "round", "(", ")", "\n", "# Important. Unlike matlab, numpy.unit8() WILL NOT round by default.", "\n", "", "return", "img_np", ".", "astype", "(", "out_type", ")", "\n", "\n", "\n", "", "def", "save_img", "(", "img", ",", "img_path", ",", "mode", "=", "'RGB'", ")", ":", "\n", "#**", "\n", "    ", "return", "\n", "# cv2.imwrite(img_path, img)", "\n", "\n", "\n", "\n", "####################", "\n", "# metric", "\n", "####################", "\n", "\n", "\n", "", "def", "calculate_psnr", "(", "img1", ",", "img2", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "    ", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "80", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n", "\n", "", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.imresize_np": [[431, 499], ["torch.from_numpy", "torch.from_numpy.size", "util.calculate_weights_indices", "util.calculate_weights_indices", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_H.size", "range", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_W.size", "range", "torch.FloatTensor.numpy", "math.ceil", "math.ceil", "int", "img_aug[].transpose().mv", "img_aug[].transpose().mv", "img_aug[].transpose().mv", "int", "out_1_aug[].mv", "out_1_aug[].mv", "out_1_aug[].mv", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "img_aug[].transpose", "img_aug[].transpose", "img_aug[].transpose", "sym_patch.size", "sym_patch.size", "sym_patch.size", "sym_patch.size"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.data.util.calculate_weights_indices", "home.repos.pwc.inspect_result.chenbong_arm-net.data.util.calculate_weights_indices"], ["mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n", "\n", "", "def", "calculate_ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chenbong_arm-net.options.options.NoneDict.__missing__": [[74, 76], ["None"], "methods", ["None"], ["    ", "def", "__missing__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.options.options.parse": [[7, 58], ["opt[].items", "opt[].items", "os.join", "os.join", "os.join", "open", "yaml.load", "dataset[].endswith", "os.join", "os.join", "phase.split", "dataset.get", "os.expanduser", "dataset.get", "os.expanduser", "os.expanduser", "os.join", "os.abspath", "utils.util.get_timestamp"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.models.base_model.BaseModel.load", "home.repos.pwc.inspect_result.chenbong_arm-net.utils.util.get_timestamp"], ["def", "parse", "(", "opt_path", ",", "root", ")", ":", "\n", "    ", "with", "open", "(", "opt_path", ",", "mode", "=", "'r'", ")", "as", "f", ":", "\n", "        ", "opt", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "Loader", ")", "\n", "\n", "", "if", "opt", "[", "'distortion'", "]", "==", "'sr'", ":", "\n", "        ", "scale", "=", "opt", "[", "'scale'", "]", "\n", "\n", "# datasets", "\n", "", "for", "phase", ",", "dataset", "in", "opt", "[", "'datasets'", "]", ".", "items", "(", ")", ":", "\n", "\n", "        ", "phase", "=", "phase", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "dataset", "[", "'phase'", "]", "=", "phase", "\n", "if", "opt", "[", "'distortion'", "]", "==", "'sr'", ":", "\n", "            ", "dataset", "[", "'scale'", "]", "=", "scale", "\n", "", "if", "dataset", ".", "get", "(", "'dataroot_GT'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "dataset", "[", "'dataroot_GT'", "]", "=", "osp", ".", "expanduser", "(", "dataset", "[", "'dataroot_GT'", "]", ")", "\n", "", "if", "dataset", ".", "get", "(", "'dataroot_LQ'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "dataset", "[", "'dataroot_LQ'", "]", "=", "osp", ".", "expanduser", "(", "dataset", "[", "'dataroot_LQ'", "]", ")", "\n", "", "dataset", "[", "'data_type'", "]", "=", "'img'", "\n", "if", "dataset", "[", "'mode'", "]", ".", "endswith", "(", "'mc'", ")", ":", "# for memcached", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# path", "\n", "", "", "for", "key", ",", "path", "in", "opt", "[", "'path'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "path", "and", "key", "in", "opt", "[", "'path'", "]", "and", "key", "!=", "'strict_load'", ":", "\n", "            ", "opt", "[", "'path'", "]", "[", "key", "]", "=", "osp", ".", "expanduser", "(", "path", ")", "\n", "\n", "", "", "if", "root", "is", "None", ":", "\n", "        ", "job_dir", "=", "osp", ".", "join", "(", "opt", "[", "'job_dir'", "]", ",", "get_timestamp", "(", ")", "+", "'-'", "+", "opt", "[", "'name'", "]", ")", "\n", "", "else", ":", "\n", "        ", "job_dir", "=", "osp", ".", "join", "(", "osp", ".", "join", "(", "osp", ".", "abspath", "(", "root", ")", ",", "'exp'", ")", ")", "\n", "\n", "\n", "", "opt", "[", "'path'", "]", "[", "'job_dir'", "]", "=", "job_dir", "\n", "opt", "[", "'path'", "]", "[", "'models'", "]", "=", "osp", ".", "join", "(", "job_dir", ",", "'models'", ")", "\n", "opt", "[", "'path'", "]", "[", "'training_state'", "]", "=", "osp", ".", "join", "(", "job_dir", ",", "'training_state'", ")", "\n", "opt", "[", "'path'", "]", "[", "'log'", "]", "=", "job_dir", "\n", "opt", "[", "'path'", "]", "[", "'val_images'", "]", "=", "osp", ".", "join", "(", "job_dir", ",", "'val_images'", ")", "\n", "\n", "\n", "# change some options for debug mode", "\n", "if", "'debug'", "in", "opt", "[", "'name'", "]", ":", "\n", "        ", "opt", "[", "'train'", "]", "[", "'val_freq'", "]", "=", "8", "\n", "opt", "[", "'logger'", "]", "[", "'print_freq'", "]", "=", "1", "\n", "opt", "[", "'logger'", "]", "[", "'save_checkpoint_freq'", "]", "=", "8", "\n", "\n", "\n", "# network", "\n", "", "opt", "[", "'network_G'", "]", "[", "'scale'", "]", "=", "scale", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.options.options.dict2str": [[60, 71], ["opt.items", "isinstance", "options.dict2str", "str"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.options.options.dict2str"], ["", "def", "dict2str", "(", "opt", ",", "indent_l", "=", "1", ")", ":", "\n", "    ", "'''dict to string for logger'''", "\n", "msg", "=", "''", "\n", "for", "k", ",", "v", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "k", "+", "':[\\n'", "\n", "msg", "+=", "dict2str", "(", "v", ",", "indent_l", "+", "1", ")", "\n", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "']\\n'", "\n", "", "else", ":", "\n", "            ", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "k", "+", "': '", "+", "str", "(", "v", ")", "+", "'\\n'", "\n", "", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.chenbong_arm-net.options.options.dict_to_nonedict": [[77, 87], ["isinstance", "dict", "opt.items", "options.NoneDict", "isinstance", "options.dict_to_nonedict", "options.dict_to_nonedict"], "function", ["home.repos.pwc.inspect_result.chenbong_arm-net.options.options.dict_to_nonedict", "home.repos.pwc.inspect_result.chenbong_arm-net.options.options.dict_to_nonedict"], ["", "", "def", "dict_to_nonedict", "(", "opt", ")", ":", "\n", "    ", "if", "isinstance", "(", "opt", ",", "dict", ")", ":", "\n", "        ", "new_opt", "=", "dict", "(", ")", "\n", "for", "key", ",", "sub_opt", "in", "opt", ".", "items", "(", ")", ":", "\n", "            ", "new_opt", "[", "key", "]", "=", "dict_to_nonedict", "(", "sub_opt", ")", "\n", "", "return", "NoneDict", "(", "**", "new_opt", ")", "\n", "", "elif", "isinstance", "(", "opt", ",", "list", ")", ":", "\n", "        ", "return", "[", "dict_to_nonedict", "(", "sub_opt", ")", "for", "sub_opt", "in", "opt", "]", "\n", "", "else", ":", "\n", "        ", "return", "opt", "\n", "\n"]]}