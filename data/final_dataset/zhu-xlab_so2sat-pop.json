{"home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.demo_data_loader.load_data": [[22, 43], ["numpy.empty", "enumerate", "numpy.empty", "enumerate", "len", "rasterio.open", "ds.read", "numpy.transpose"], "function", ["None"], ["def", "load_data", "(", "f_names", ",", "channels", ")", ":", "\n", "    ", "\"\"\"\n    :param f_names: path to all the files of a data folder\n    :param channels: number of channels corresponding to the data\n    :return: all the instances of a data with its attributes\n    \"\"\"", "\n", "X", "=", "np", ".", "empty", "(", "(", "len", "(", "f_names", ")", ",", "img_rows", ",", "img_cols", ",", "channels", ")", ")", "\n", "for", "i", ",", "ID", "in", "enumerate", "(", "f_names", ")", ":", "\n", "\n", "# load tif file", "\n", "        ", "with", "rasterio", ".", "open", "(", "ID", ",", "'r'", ")", "as", "ds", ":", "\n", "            ", "image", "=", "ds", ".", "read", "(", "out_shape", "=", "(", "ds", ".", "count", ",", "img_rows", ",", "img_cols", ")", ",", "resampling", "=", "Resampling", ".", "average", ")", "\n", "\n", "", "new_arr", "=", "np", ".", "empty", "(", "[", "channels", ",", "img_rows", ",", "img_cols", "]", ")", "\n", "\n", "# looping over all the channels", "\n", "for", "k", ",", "layer", "in", "enumerate", "(", "image", ")", ":", "\n", "            ", "arr", "=", "layer", "\n", "new_arr", "[", "k", "]", "=", "arr", "\n", "X", "[", "i", ",", "]", "=", "np", ".", "transpose", "(", "new_arr", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.demo_data_loader.load_osm_data": [[45, 66], ["numpy.empty", "enumerate", "numpy.array", "numpy.empty", "numpy.transpose", "len", "pandas.read_csv", "df.notna"], "function", ["None"], ["", "def", "load_osm_data", "(", "f_names", ",", "channels", ")", ":", "\n", "    ", "\"\"\"\n    :param f_names: path to all the files of osm_features data folder\n    :param channels: number of channels corresponding to the osm_features data\n    :return: all the instances of osm_features data with its attributes\n    \"\"\"", "\n", "X", "=", "np", ".", "empty", "(", "(", "len", "(", "f_names", ")", ",", "osm_features", ",", "channels", ")", ")", "\n", "for", "i", ",", "ID", "in", "enumerate", "(", "f_names", ")", ":", "\n", "# load csv", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "ID", ",", "header", "=", "None", ")", "[", "1", "]", "\n", "# remove inf and Nan values", "\n", "df", "=", "df", "[", "df", ".", "notna", "(", ")", "]", "\n", "df_array", "=", "np", ".", "array", "(", "df", ")", "\n", "df_array", "[", "df_array", "==", "np", ".", "inf", "]", "=", "0", "\n", "\n", "new_arr", "=", "np", ".", "empty", "(", "[", "channels", ",", "osm_features", "]", ")", "\n", "\n", "new_arr", "[", "0", "]", "=", "df_array", "\n", "\n", "X", "[", "i", ",", "]", "=", "np", ".", "transpose", "(", "new_arr", ",", "(", "1", ",", "0", ")", ")", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.demo_data_loader.get_fnames_labels": [[68, 116], ["glob.glob", "numpy.array", "numpy.array", "numpy.array", "data.__contains__", "os.path.join", "os.path.join", "pandas.read_csv", "range", "demo_data_loader.load_data", "demo_data_loader.load_data", "demo_data_loader.load_data", "demo_data_loader.load_osm_data", "os.path.join", "os.path.join", "str", "len", "numpy.append", "numpy.append", "numpy.append", "each_city.replace", "each_city.split", "each_city.split"], "function", ["home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.demo_data_loader.load_data", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.demo_data_loader.load_data", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.demo_data_loader.load_data", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.demo_data_loader.load_osm_data"], ["", "def", "get_fnames_labels", "(", "folder_path", ",", "data", ")", ":", "\n", "    ", "\"\"\"\n    :param folder_path: path to so2sat sub folder test/train\n    :param data: name of the data folder, ex: 'lcz', 'lu', ...\n    :return: all the instances of a data with its attributes and labels (population count & class) of each instance\n    \"\"\"", "\n", "city_folders", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "\"*\"", ")", ")", "# list all the cities in folder_path", "\n", "f_names_all", "=", "np", ".", "array", "(", "[", "]", ")", "# file names", "\n", "c_labels_all", "=", "np", ".", "array", "(", "[", "]", ")", "# class labels", "\n", "p_count_all", "=", "np", ".", "array", "(", "[", "]", ")", "# population counts", "\n", "for", "each_city", "in", "city_folders", ":", "\n", "        ", "data_path", "=", "os", ".", "path", ".", "join", "(", "each_city", ",", "data", ")", "# path to the specifies data folder", "\n", "if", "data", "==", "'dem'", ":", "# for dem data also, load the csv from So2Sat POP Part 1", "\n", "            ", "csv_path", "=", "os", ".", "path", ".", "join", "(", "each_city", ".", "replace", "(", "'Part2'", ",", "'Part1'", ")", ",", "each_city", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", ":", "]", "[", "0", "]", "+", "'.csv'", ")", "\n", "", "else", ":", "\n", "            ", "csv_path", "=", "os", ".", "path", ".", "join", "(", "each_city", ",", "each_city", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", ":", "]", "[", "0", "]", "+", "'.csv'", ")", "# path to the cvs file of", "\n", "# the city", "\n", "\n", "", "city_df", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "# read csv as dataframe", "\n", "ids", "=", "city_df", "[", "'GRD_ID'", "]", "# get the id of each patch", "\n", "pop", "=", "city_df", "[", "'POP'", "]", "# corresponding pop count", "\n", "classes", "=", "city_df", "[", "'Class'", "]", "# corresponding Class", "\n", "classes_str", "=", "[", "str", "(", "x", ")", "for", "x", "in", "classes", "]", "\n", "classes_paths", "=", "[", "data_path", "+", "'/Class_'", "+", "x", "+", "'/'", "for", "x", "in", "classes_str", "]", "\n", "for", "index", "in", "range", "(", "0", ",", "len", "(", "classes_paths", ")", ")", ":", "\n", "            ", "if", "data", "==", "'osm_features'", ":", "# osm features ends with '.csv'", "\n", "                ", "f_names", "=", "[", "classes_paths", "[", "index", "]", "+", "ids", "[", "index", "]", "+", "'_'", "+", "data", "+", "'.csv'", "]", "# creating full path for each id", "\n", "", "else", ":", "\n", "                ", "f_names", "=", "[", "classes_paths", "[", "index", "]", "+", "ids", "[", "index", "]", "+", "'_'", "+", "data", "+", "'.tif'", "]", "# creating full path for each id", "\n", "", "f_names_all", "=", "np", ".", "append", "(", "f_names_all", ",", "f_names", ",", "axis", "=", "0", ")", "# append file names together", "\n", "pop_count", "=", "[", "pop", "[", "index", "]", "]", "\n", "p_count_all", "=", "np", ".", "append", "(", "p_count_all", ",", "pop_count", ",", "axis", "=", "0", ")", "# append pop count together", "\n", "class_label", "=", "[", "classes", "[", "index", "]", "]", "\n", "c_labels_all", "=", "np", ".", "append", "(", "c_labels_all", ",", "class_label", ",", "axis", "=", "0", ")", "# append class labels together", "\n", "\n", "", "", "if", "data", ".", "__contains__", "(", "'sen2'", ")", ":", "\n", "        ", "X", "=", "load_data", "(", "f_names_all", ",", "channels", "=", "3", ")", "# load the data for sentinel-2 files", "\n", "\n", "", "if", "data", "==", "'viirs'", "or", "data", "==", "'lcz'", "or", "data", "==", "\"dem\"", ":", "\n", "        ", "X", "=", "load_data", "(", "f_names_all", ",", "channels", "=", "1", ")", "# load the data for viirs, lcz, dem files", "\n", "\n", "", "if", "data", "==", "'lu'", ":", "\n", "        ", "X", "=", "load_data", "(", "f_names_all", ",", "channels", "=", "4", ")", "# load the data for lu files", "\n", "\n", "", "if", "data", "==", "'osm_features'", ":", "# load the data for osm features files", "\n", "        ", "X", "=", "load_osm_data", "(", "f_names_all", ",", "channels", "=", "1", ")", "\n", "\n", "", "return", "X", ",", "p_count_all", ",", "c_labels_all", "\n", "\n"]], "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.rf_classification.rf_classifier": [[18, 158], ["print", "glob.glob", "pandas.DataFrame", "print", "sklearn.ensemble.RandomForestClassifier", "sklearn.feature_selection.SelectFromModel", "sklearn.feature_selection.SelectFromModel.fit", "sel.fit.get_support", "list", "sel.fit.transform", "print", "sklearn.model_selection.GridSearchCV", "sklearn.model_selection.GridSearchCV.fit", "_pickle.load.fit", "os.path.join", "os.path.join", "os.path.join", "constants.param_grid.keys", "sklearn.model_selection.GridSearchCV.best_params_.keys", "zip", "open", "open.write", "open.close", "print", "glob.glob", "pandas.DataFrame", "_pickle.load.predict", "pandas.DataFrame", "os.path.join", "pd.DataFrame.to_csv", "print", "os.path.join", "utils.plot_feature_importance", "print", "os.path.join", "set", "utils.validation_cls", "print", "os.path.join", "pandas.read_csv", "training_df.append.append", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "time.strftime", "open", "_pickle.dump", "f.close", "os.path.join", "os.path.join", "pandas.read_csv", "test_df.append.append", "open", "_pickle.load", "glob.glob", "sklearn.ensemble.RandomForestClassifier", "time.strftime", "str", "glob.glob", "os.path.join", "os.path.join", "str", "list"], "function", ["home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.utils.plot_feature_importance", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.utils.validation_cls"], ["def", "rf_classifier", "(", "file_name", ",", "ground_truth_col", ")", ":", "\n", "    ", "\"\"\"\n    :param file_name: substring used for naming of the files\n    :param ground_truth_col: column name to be used as ground truth\n    :return:\n    \"\"\"", "\n", "print", "(", "\"Starting classification\"", ")", "\n", "# get all training cities", "\n", "all_train_cities", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "all_patches_mixed_train_part1", ",", "'*'", ")", ")", "\n", "# prepare the training dataframe", "\n", "training_df", "=", "pd", ".", "DataFrame", "(", ")", "\n", "for", "each_city", "in", "all_train_cities", ":", "\n", "        ", "city_csv", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "each_city", ",", "'*_features.csv'", ")", ")", "[", "0", "]", "# get the feature csv", "\n", "city_df", "=", "pd", ".", "read_csv", "(", "city_csv", ")", "\n", "training_df", "=", "training_df", ".", "append", "(", "city_df", ",", "ignore_index", "=", "True", ")", "# append data from all the training cities", "\n", "\n", "# Get the dependent variables", "\n", "", "y", "=", "training_df", "[", "ground_truth_col", "]", "\n", "# Get the independent variables", "\n", "x", "=", "training_df", "[", "covariate_list", "]", "\n", "\n", "print", "(", "\"Starting training...\\n\"", ")", "\n", "# Initialize the model", "\n", "rfmodel", "=", "RandomForestClassifier", "(", "n_estimators", "=", "500", ",", "oob_score", "=", "True", ",", "max_features", "=", "'auto'", ",", "n_jobs", "=", "-", "1", ",", "random_state", "=", "0", ")", "\n", "sel", "=", "SelectFromModel", "(", "rfmodel", ",", "threshold", "=", "min_fimportance", ")", "\n", "fited", "=", "sel", ".", "fit", "(", "x", ",", "y", ")", "\n", "feature_idx", "=", "fited", ".", "get_support", "(", ")", "# Get list of T/F for covariates for which OOB score is upper the threshold", "\n", "list_covar", "=", "list", "(", "x", ".", "columns", "[", "feature_idx", "]", ")", "# Get list of covariates with the selected features", "\n", "x", "=", "fited", ".", "transform", "(", "x", ")", "# Update the dataframe with the selected features only", "\n", "\n", "# Instantiate the grid search model", "\n", "print", "(", "\"Starting Grid search with cross validation...\\n\"", ")", "\n", "grid_search", "=", "GridSearchCV", "(", "estimator", "=", "RandomForestClassifier", "(", "random_state", "=", "0", ")", ",", "param_grid", "=", "param_grid", ",", "cv", "=", "kfold", ",", "\n", "n_jobs", "=", "n_jobs", ",", "verbose", "=", "0", ")", "\n", "grid_search", ".", "fit", "(", "x", ",", "y", ")", "# Fit the grid search to the data", "\n", "classifier", "=", "grid_search", ".", "best_estimator_", "# Save the best classifier", "\n", "classifier", ".", "fit", "(", "x", ",", "y", ")", "# Fit the best classifier", "\n", "# mean cross-validated score (OOB) and stddev of the best_estimator", "\n", "best_score", "=", "grid_search", ".", "cv_results_", "[", "'mean_test_score'", "]", "[", "grid_search", ".", "best_index_", "]", "\n", "best_std", "=", "grid_search", ".", "cv_results_", "[", "'std_test_score'", "]", "[", "grid_search", ".", "best_index_", "]", "\n", "\n", "rf_model_folder", "=", "os", ".", "path", ".", "join", "(", "current_dir_path", ",", "\"rf_logs\"", ")", "# path to the folder \"rf_model\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "rf_model_folder", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "rf_model_folder", ")", "# creates rf_logs folder inside the project folder", "\n", "\n", "", "model_folder", "=", "os", ".", "path", ".", "join", "(", "rf_model_folder", ",", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S_\"", ")", "+", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_folder", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "model_folder", ")", "# creates folder inside the rf_logs folder, named as per time stamp and file_name", "\n", "\n", "", "model_name", "=", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S_\"", ")", "+", "file_name", "# model name", "\n", "rf_model_path", "=", "os", ".", "path", ".", "join", "(", "model_folder", ",", "model_name", ")", "# path to saved model", "\n", "# save the best classifier", "\n", "with", "open", "(", "rf_model_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "_pickle", ".", "dump", "(", "classifier", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "# Get the log", "\n", "", "log", "=", "\"\"", "\n", "message", "=", "'Parameter grid for Random Forest tuning :\\n'", "\n", "for", "key", "in", "param_grid", ".", "keys", "(", ")", ":", "\n", "        ", "message", "+=", "'    '", "+", "key", "+", "' : '", "+", "', '", ".", "join", "(", "[", "str", "(", "i", ")", "for", "i", "in", "list", "(", "param_grid", "[", "key", "]", ")", "]", ")", "+", "'\\n'", "\n", "", "message", "+=", "'    '", "+", "'min_fimportance'", "+", "' : '", "+", "str", "(", "min_fimportance", ")", "+", "'\\n'", "\n", "log", "+=", "message", "+", "'\\n'", "\n", "\n", "# Print infos and save it in the log file - Tuned parameters", "\n", "message", "=", "'Optimized parameters for Random Forest after grid search %s-fold cross-validation tuning :\\n'", "%", "kfold", "\n", "for", "key", "in", "grid_search", ".", "best_params_", ".", "keys", "(", ")", ":", "\n", "        ", "message", "+=", "'    %s : %s'", "%", "(", "key", ",", "grid_search", ".", "best_params_", "[", "key", "]", ")", "+", "'\\n'", "\n", "", "log", "+=", "message", "+", "'\\n'", "\n", "\n", "message", "=", "\"Mean cross-validated score (OOB) and stddev of the best_estimator : %0.3f (+/-%0.3f)\"", "%", "(", "\n", "best_score", ",", "best_std", ")", "+", "'\\n'", "\n", "log", "+=", "message", "+", "'\\n'", "\n", "\n", "# Print mean OOB and stddev for each set of parameters", "\n", "means", "=", "grid_search", ".", "cv_results_", "[", "'mean_test_score'", "]", "\n", "stds", "=", "grid_search", ".", "cv_results_", "[", "'std_test_score'", "]", "\n", "message", "=", "\"Mean cross-validated score (OOB) and stddev for every tested set of parameter :\\n\"", "\n", "\n", "for", "mean", ",", "std", ",", "params", "in", "zip", "(", "means", ",", "stds", ",", "grid_search", ".", "cv_results_", "[", "'params'", "]", ")", ":", "\n", "        ", "message", "+=", "\"%0.3f (+/-%0.03f) for %r\"", "%", "(", "mean", ",", "std", ",", "params", ")", "+", "'\\n'", "\n", "", "log", "+=", "message", "+", "'\\n'", "\n", "\n", "# Print final model OOB", "\n", "message", "=", "'Final Random Forest model run - internal Out-of-bag score (OOB) : %0.3f'", "%", "classifier", ".", "oob_score_", "\n", "oob_score", "=", "classifier", ".", "oob_score_", "\n", "log", "+=", "message", "+", "'\\n'", "\n", "\n", "# Save the log", "\n", "fout", "=", "open", "(", "os", ".", "path", ".", "join", "(", "model_folder", ",", "'%s_training_log.txt'", "%", "model_name", ")", ",", "'w'", ")", "\n", "fout", ".", "write", "(", "log", ")", "\n", "fout", ".", "close", "(", ")", "\n", "\n", "#################################################################################################", "\n", "\n", "# Start the predictions on completely unseen test data set", "\n", "print", "(", "\"Starting testing...\\n\"", ")", "\n", "all_test_cities", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "all_patches_mixed_test_part1", ",", "'*'", ")", ")", "# get all test cities", "\n", "test_df", "=", "pd", ".", "DataFrame", "(", ")", "\n", "for", "each_test_city", "in", "all_test_cities", ":", "\n", "        ", "test_city_csv", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "each_test_city", ",", "'*_features.csv'", ")", ")", "[", "0", "]", "# get the feature csv", "\n", "test_city_df", "=", "pd", ".", "read_csv", "(", "test_city_csv", ")", "\n", "test_df", "=", "test_df", ".", "append", "(", "test_city_df", ",", "ignore_index", "=", "True", ")", "# append features from test cities", "\n", "\n", "# Get the population class", "\n", "", "y_test", "=", "test_df", "[", "ground_truth_col", "]", "\n", "# Get features", "\n", "x_test", "=", "test_df", "[", "list_covar", "]", "\n", "\n", "# load the trained model", "\n", "with", "open", "(", "rf_model_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "classifier", "=", "_pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Get predictions", "\n", "", "prediction", "=", "classifier", ".", "predict", "(", "x_test", ")", "\n", "\n", "# Save the prediction", "\n", "df_pred", "=", "pd", ".", "DataFrame", "(", ")", "\n", "df_pred", "[", "\"Grid_ID\"", "]", "=", "test_df", "[", "'GRD_ID'", "]", "\n", "df_pred", "[", "'Prediction'", "]", "=", "prediction", "\n", "df_pred", "[", "'Reference'", "]", "=", "y_test", "\n", "pred_csv_path", "=", "os", ".", "path", ".", "join", "(", "model_folder", ",", "'%s_predictions.csv'", "%", "model_name", ")", "# save the predictions to a csv", "\n", "df_pred", ".", "to_csv", "(", "pred_csv_path", ",", "index", "=", "False", ")", "\n", "\n", "#################################################################################################", "\n", "\n", "# Feature importances", "\n", "print", "(", "\"Creation of feature importance plot...\\n\"", ")", "\n", "importances", "=", "classifier", ".", "feature_importances_", "# get feature importance from the model", "\n", "path_plot", "=", "os", ".", "path", ".", "join", "(", "model_folder", ",", "\"%s_RF_feature_importance\"", "%", "model_name", "+", "'new.png'", ")", "# path to saved plot", "\n", "plot_feature_importance", "(", "importances", ",", "x_test", ",", "path_plot", ")", "\n", "\n", "#################################################################################################", "\n", "\n", "# Calculating the metrics", "\n", "print", "(", "'Calculating the metrics...'", ")", "\n", "validation_log_path", "=", "os", ".", "path", ".", "join", "(", "model_folder", ",", "'%s_validation_log.txt'", "%", "model_name", ")", "\n", "classes", "=", "set", "(", "y_test", ")", "\n", "validation_cls", "(", "classes", ",", "pred_csv_path", ",", "validation_log_path", ")", "\n", "print", "(", "'Finished classification \\n \\n'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.get_id_response_var": [[14, 41], ["id_list.append", "pop_count.append", "pop_dens.append", "log_pop_dens.append", "class_list.append", "[].rsplit", "city_df.index[].tolist", "math.log", "[].rsplit", "os.path.split", "each_patch.split"], "function", ["None"], ["def", "get_id_response_var", "(", "all_patches", ",", "city_df", ")", ":", "\n", "    ", "\"\"\"\n    :param all_patches: list of all patches\n    :param city_df: data frame for the city\n    :return: grid id, population class, population count, population density, log (population density)\n    \"\"\"", "\n", "id_list", "=", "[", "]", "\n", "class_list", "=", "[", "]", "\n", "pop_count", "=", "[", "]", "\n", "pop_dens", "=", "[", "]", "\n", "log_pop_dens", "=", "[", "]", "\n", "for", "each_patch", "in", "all_patches", ":", "\n", "        ", "id", "=", "os", ".", "path", ".", "split", "(", "each_patch", ")", "[", "1", "]", ".", "rsplit", "(", "'_'", ")", "[", "0", "]", "# ID of the grid cell", "\n", "id_list", ".", "append", "(", "id", ")", "\n", "id_index", "=", "city_df", ".", "index", "[", "city_df", "[", "'GRD_ID'", "]", "==", "id", "]", ".", "tolist", "(", ")", "[", "0", "]", "\n", "pop", "=", "city_df", "[", "'POP'", "]", "[", "id_index", "]", "# get the absolute population count", "\n", "pop_den", "=", "pop", "/", "1000000", "# population density per 1000,000 m-sq (1km-sq)", "\n", "if", "pop_den", "==", "0", ":", "\n", "            ", "log_pop_den", "=", "0", "\n", "", "else", ":", "\n", "            ", "log_pop_den", "=", "ma", ".", "log", "(", "pop_den", ")", "# calculating log of population density", "\n", "", "pop_count", ".", "append", "(", "pop", ")", "\n", "pop_dens", ".", "append", "(", "pop_den", ")", "\n", "log_pop_dens", ".", "append", "(", "log_pop_den", ")", "\n", "class_patch", "=", "each_patch", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "2", "]", ".", "rsplit", "(", "'_'", ")", "[", "1", "]", "# corresponding class for the patch", "\n", "class_list", ".", "append", "(", "class_patch", ")", "\n", "", "return", "id_list", ",", "class_list", ",", "pop_count", ",", "pop_dens", ",", "log_pop_dens", "\n", "\n"]], "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.mean_med_std_max_min": [[43, 54], ["numpy.mean", "numpy.median", "numpy.std", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "mean_med_std_max_min", "(", "band", ")", ":", "\n", "    ", "\"\"\"\n    :param band: r, g, b band od sen2 patch\n    :return: mean, median, std, max, min of sen2 patch\n    \"\"\"", "\n", "sen2_mean_band", "=", "np", ".", "mean", "(", "band", ")", "\n", "sen2_med_band", "=", "np", ".", "median", "(", "band", ")", "\n", "sen2_std_band", "=", "np", ".", "std", "(", "band", ")", "\n", "sen2_max_band", "=", "np", ".", "max", "(", "band", ")", "\n", "sen2_min_band", "=", "np", ".", "min", "(", "band", ")", "\n", "return", "sen2_mean_band", ",", "sen2_med_band", ",", "sen2_std_band", ",", "sen2_max_band", ",", "sen2_min_band", "\n", "\n"]], "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.sen2_features": [[56, 112], ["cv2.imread", "data_preprocessing.mean_med_std_max_min", "data_preprocessing.mean_med_std_max_min", "data_preprocessing.mean_med_std_max_min", "sen2_mean_r_feat.append", "sen2_mean_g_feat.append", "sen2_mean_b_feat.append", "sen2_med_r_feat.append", "sen2_med_g_feat.append", "sen2_med_b_feat.append", "sen2_std_r_feat.append", "sen2_std_g_feat.append", "sen2_std_b_feat.append", "sen2_max_r_feat.append", "sen2_max_g_feat.append", "sen2_max_b_feat.append", "sen2_min_r_feat.append", "sen2_min_g_feat.append", "sen2_min_b_feat.append"], "function", ["home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.mean_med_std_max_min", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.mean_med_std_max_min", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.mean_med_std_max_min"], ["", "def", "sen2_features", "(", "all_patches", ")", ":", "\n", "    ", "\"\"\"\n    :param all_patches: list of all patches\n    :return: mean, median, std, max, min features for each r, g, b bands (5 X 3 = 15 features)\n    \"\"\"", "\n", "# sen2 feature lists", "\n", "sen2_mean_r_feat", "=", "[", "]", "\n", "sen2_mean_g_feat", "=", "[", "]", "\n", "sen2_mean_b_feat", "=", "[", "]", "\n", "sen2_med_r_feat", "=", "[", "]", "\n", "sen2_med_g_feat", "=", "[", "]", "\n", "sen2_med_b_feat", "=", "[", "]", "\n", "sen2_std_r_feat", "=", "[", "]", "\n", "sen2_std_g_feat", "=", "[", "]", "\n", "sen2_std_b_feat", "=", "[", "]", "\n", "sen2_max_r_feat", "=", "[", "]", "\n", "sen2_max_g_feat", "=", "[", "]", "\n", "sen2_max_b_feat", "=", "[", "]", "\n", "sen2_min_r_feat", "=", "[", "]", "\n", "sen2_min_g_feat", "=", "[", "]", "\n", "sen2_min_b_feat", "=", "[", "]", "\n", "\n", "# iterate over each sen2 patch", "\n", "for", "each_patch", "in", "all_patches", ":", "\n", "        ", "sen2_array", "=", "cv2", ".", "imread", "(", "each_patch", ")", "# read the patch", "\n", "r", ",", "g", ",", "b", "=", "sen2_array", "[", ":", ",", ":", ",", "0", "]", ",", "sen2_array", "[", ":", ",", ":", ",", "1", "]", ",", "sen2_array", "[", ":", ",", ":", ",", "2", "]", "# get the r, g, b bands", "\n", "# get features for r band", "\n", "sen2_mean_r", ",", "sen2_med_r", ",", "sen2_std_r", ",", "sen2_max_r", ",", "sen2_min_r", "=", "mean_med_std_max_min", "(", "band", "=", "r", ")", "\n", "# get features for g band", "\n", "sen2_mean_g", ",", "sen2_med_g", ",", "sen2_std_g", ",", "sen2_max_g", ",", "sen2_min_g", "=", "mean_med_std_max_min", "(", "band", "=", "g", ")", "\n", "# get features for b band", "\n", "sen2_mean_b", ",", "sen2_med_b", ",", "sen2_std_b", ",", "sen2_max_b", ",", "sen2_min_b", "=", "mean_med_std_max_min", "(", "band", "=", "b", ")", "\n", "# list of sen2 mean feature for r,g,b bands", "\n", "sen2_mean_r_feat", ".", "append", "(", "sen2_mean_r", ")", "\n", "sen2_mean_g_feat", ".", "append", "(", "sen2_mean_g", ")", "\n", "sen2_mean_b_feat", ".", "append", "(", "sen2_mean_b", ")", "\n", "# list of sen2 median feature for r,g,b bands", "\n", "sen2_med_r_feat", ".", "append", "(", "sen2_med_r", ")", "\n", "sen2_med_g_feat", ".", "append", "(", "sen2_med_g", ")", "\n", "sen2_med_b_feat", ".", "append", "(", "sen2_med_b", ")", "\n", "# list of sen2 std feature for r,g,b bands", "\n", "sen2_std_r_feat", ".", "append", "(", "sen2_std_r", ")", "\n", "sen2_std_g_feat", ".", "append", "(", "sen2_std_g", ")", "\n", "sen2_std_b_feat", ".", "append", "(", "sen2_std_b", ")", "\n", "# list of sen2 max feature for r,g,b bands", "\n", "sen2_max_r_feat", ".", "append", "(", "sen2_max_r", ")", "\n", "sen2_max_g_feat", ".", "append", "(", "sen2_max_g", ")", "\n", "sen2_max_b_feat", ".", "append", "(", "sen2_max_b", ")", "\n", "# list of sen2 min feature for r,g,b bands", "\n", "sen2_min_r_feat", ".", "append", "(", "sen2_min_r", ")", "\n", "sen2_min_g_feat", ".", "append", "(", "sen2_min_g", ")", "\n", "sen2_min_b_feat", ".", "append", "(", "sen2_min_b", ")", "\n", "\n", "", "return", "sen2_mean_r_feat", ",", "sen2_mean_g_feat", ",", "sen2_mean_b_feat", ",", "sen2_med_r_feat", ",", "sen2_med_g_feat", ",", "sen2_med_b_feat", ",", "sen2_std_r_feat", ",", "sen2_std_g_feat", ",", "sen2_std_b_feat", ",", "sen2_max_r_feat", ",", "sen2_max_g_feat", ",", "sen2_max_b_feat", ",", "sen2_min_r_feat", ",", "sen2_min_g_feat", ",", "sen2_min_b_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.average_mean_features": [[114, 124], ["utils.raster2array", "numpy.mean", "numpy.max"], "function", ["home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.utils.raster2array"], ["", "def", "average_mean_features", "(", "file_path", ",", "band", ")", ":", "\n", "    ", "\"\"\"\n    :param file_path: path to patch file\n    :param band: band number to read, required for multi band data\n    :return: mean and max of the patch\n    \"\"\"", "\n", "raster_array", "=", "raster2array", "(", "file_path", ",", "band", ")", "\n", "raster_mean", "=", "np", ".", "mean", "(", "raster_array", ")", "\n", "raster_max", "=", "np", ".", "max", "(", "raster_array", ")", "\n", "return", "raster_mean", ",", "raster_max", "\n", "\n"]], "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.lu_features": [[126, 135], ["utils.raster2array", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.utils.raster2array"], ["", "def", "lu_features", "(", "file_path", ",", "band", ")", ":", "\n", "    ", "\"\"\"\n    :param file_path: path to patch file\n    :param band: band number to read, required for multi band data\n    :return: total area of a patch that belongs to a particular band\n    \"\"\"", "\n", "lu_array", "=", "raster2array", "(", "file_path", ",", "band", ")", "\n", "lu_total_area", "=", "np", ".", "sum", "(", "lu_array", ")", "\n", "return", "lu_total_area", "\n", "\n"]], "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.feature_engineering": [[137, 381], ["all_patches_mixed_path.endswith", "print", "glob.glob", "print", "print", "glob.glob", "print", "os.path.join", "glob.glob", "os.path.join", "each_folder.replace", "glob.glob", "os.path.join", "os.path.join", "glob.glob", "os.path.join", "pandas.read_csv", "data_preprocessing.get_id_response_var", "pandas.DataFrame", "pandas.concat", "pd.concat.to_csv", "print", "os.path.join", "os.path.join", "glob.glob", "os.path.join", "pandas.read_csv", "data_preprocessing.get_id_response_var", "pandas.DataFrame", "os.path.isfile", "os.path.split", "os.path.join", "each_data.endswith", "glob.glob", "each_data.endswith", "each_data.endswith", "each_data.endswith", "each_data.endswith", "each_data.endswith", "each_data.endswith", "each_data.endswith", "each_data.endswith", "os.path.split", "os.path.join", "each_data.endswith", "glob.glob", "each_data.endswith", "pandas.read_csv", "pandas.concat", "pd.concat.to_csv", "print", "pandas.DataFrame", "pd.DataFrame.to_csv", "print", "os.path.join", "glob.glob", "data_preprocessing.sen2_features", "data_preprocessing.sen2_features", "data_preprocessing.sen2_features", "data_preprocessing.sen2_features", "pandas.DataFrame", "os.path.join", "glob.glob", "os.path.join", "all_patches.append", "data_preprocessing.lu_features", "data_preprocessing.lu_features", "data_preprocessing.lu_features", "data_preprocessing.lu_features", "lu_1_feat.append", "lu_2_feat.append", "lu_3_feat.append", "lu_4_feat.append", "utils.raster2array", "numpy.argmax", "lcz_feat.append", "data_preprocessing.average_mean_features", "viirs_mean_feat.append", "viirs_max_feat.append", "pandas.read_csv", "osm_features.dropna.dropna", "osm_features.dropna.iloc[].tolist", "osm_features.dropna.iloc[].tolist", "osm_feat.append", "os.path.join", "all_patches.append", "data_preprocessing.average_mean_features", "dem_mean_feat.append", "dem_max_feat.append", "numpy.bincount", "utils.raster2array.flatten"], "function", ["home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.get_id_response_var", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.get_id_response_var", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.sen2_features", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.sen2_features", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.sen2_features", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.sen2_features", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.lu_features", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.lu_features", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.lu_features", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.lu_features", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.utils.raster2array", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.average_mean_features", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.data_preprocessing.average_mean_features"], ["", "def", "feature_engineering", "(", "all_patches_mixed_path", ")", ":", "\n", "    ", "\"\"\"\n    Creates features csv for each city, named city_name_features.csv\n    :param all_patches_mixed_path: path to the folder that contains the cities to process\n    :return: None\n    \"\"\"", "\n", "# preparing features for part 1 of dataset", "\n", "if", "all_patches_mixed_path", ".", "endswith", "(", "\"Part1\"", ")", ":", "\n", "        ", "print", "(", "'Preparing features for So2sat Part1 \\n'", ")", "\n", "all_folders", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "all_patches_mixed_path", ",", "'*'", ")", ")", "\n", "for", "each_folder", "in", "all_folders", ":", "\n", "            ", "all_cities", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "each_folder", ",", "'*'", ")", ")", "\n", "for", "each_city", "in", "all_cities", ":", "\n", "# declare lists for input data source", "\n", "                ", "lu_1_feat", "=", "[", "]", "\n", "lu_2_feat", "=", "[", "]", "\n", "lu_3_feat", "=", "[", "]", "\n", "lu_4_feat", "=", "[", "]", "\n", "lcz_feat", "=", "[", "]", "\n", "viirs_mean_feat", "=", "[", "]", "\n", "viirs_max_feat", "=", "[", "]", "\n", "osm_feat", "=", "[", "]", "\n", "\n", "city_name", "=", "os", ".", "path", ".", "split", "(", "each_city", ")", "[", "1", "]", "# get the name of the city from the city path", "\n", "feature_csv_file", "=", "os", ".", "path", ".", "join", "(", "each_city", ",", "city_name", "+", "'_features.csv'", ")", "# create feature csv for city", "\n", "all_data", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "each_city", ",", "'*'", ")", ")", "# get all the data folders", "\n", "city_csv_file", "=", "os", ".", "path", ".", "join", "(", "each_city", ",", "city_name", "+", "'.csv'", ")", "# get the city's csv", "\n", "city_df", "=", "pd", ".", "read_csv", "(", "city_csv_file", ")", "# data frame for the city", "\n", "\n", "for", "each_data", "in", "all_data", ":", "# for each data folder in a city", "\n", "                    ", "all_patches", "=", "[", "]", "# list to all patches", "\n", "if", "each_data", ".", "endswith", "(", "'.csv'", ")", ":", "# skip the csv file, get only data folders", "\n", "# skip the file", "\n", "                        ", "continue", "\n", "", "all_classes", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "each_data", ",", "'*'", ")", ")", "# get all class folders in data folder", "\n", "for", "each_class", "in", "all_classes", ":", "\n", "                        ", "class_patches", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "each_class", ",", "'*'", ")", ")", "\n", "for", "x", "in", "class_patches", ":", "\n", "                            ", "all_patches", ".", "append", "(", "x", ")", "# get list of all the city patches", "\n", "\n", "", "", "if", "each_data", ".", "endswith", "(", "'lu'", ")", ":", "# process lu data", "\n", "                        ", "for", "each_patch", "in", "all_patches", ":", "\n", "                            ", "area_lu_1", "=", "lu_features", "(", "each_patch", ",", "band", "=", "1", ")", "# area that belongs to band 1 (commercial) of lu patch", "\n", "area_lu_2", "=", "lu_features", "(", "each_patch", ",", "band", "=", "2", ")", "# area that belongs to band 2 (industrial) of lu patch", "\n", "area_lu_3", "=", "lu_features", "(", "each_patch", ",", "band", "=", "3", ")", "# area that belongs to band 3 (residential) of lu patch", "\n", "area_lu_4", "=", "lu_features", "(", "each_patch", ",", "band", "=", "4", ")", "# area that belongs to band 4 (other) of lu patch", "\n", "lu_1_feat", ".", "append", "(", "area_lu_1", ")", "# lu band 1 area feature list", "\n", "lu_2_feat", ".", "append", "(", "area_lu_2", ")", "# lu band 2 area feature list", "\n", "lu_3_feat", ".", "append", "(", "area_lu_3", ")", "# lu band 3 area feature list", "\n", "lu_4_feat", ".", "append", "(", "area_lu_4", ")", "# lu band 4 area feature list", "\n", "\n", "", "", "if", "each_data", ".", "endswith", "(", "'lcz'", ")", ":", "# process lcz data", "\n", "                        ", "for", "each_patch", "in", "all_patches", ":", "\n", "                            ", "lcz_array", "=", "raster2array", "(", "each_patch", ",", "1", ")", "\n", "lcz_class", "=", "np", ".", "argmax", "(", "np", ".", "bincount", "(", "lcz_array", ".", "flatten", "(", ")", ")", ")", "# get the majority lcz class of the patch", "\n", "lcz_feat", ".", "append", "(", "lcz_class", ")", "# majority lcz class feature list", "\n", "\n", "", "", "if", "each_data", ".", "endswith", "(", "'viirs'", ")", ":", "# process nightlights data", "\n", "                        ", "for", "each_patch", "in", "all_patches", ":", "\n", "                            ", "viirs_mean", ",", "viirs_max", "=", "average_mean_features", "(", "each_patch", ",", "band", "=", "1", ")", "# get mean and max of viirs patch", "\n", "viirs_mean_feat", ".", "append", "(", "viirs_mean", ")", "# viirs mean feature list", "\n", "viirs_max_feat", ".", "append", "(", "viirs_max", ")", "# viirs max feature list", "\n", "\n", "", "", "if", "each_data", ".", "endswith", "(", "'autumn'", ")", ":", "# process sen2 autumn data", "\n", "                        ", "sen2_aut_mean_r_feat", ",", "sen2_aut_mean_g_feat", ",", "sen2_aut_mean_b_feat", ",", "sen2_aut_med_r_feat", ",", "sen2_aut_med_g_feat", ",", "sen2_aut_med_b_feat", ",", "sen2_aut_std_r_feat", ",", "sen2_aut_std_g_feat", ",", "sen2_aut_std_b_feat", ",", "sen2_aut_max_r_feat", ",", "sen2_aut_max_g_feat", ",", "sen2_aut_max_b_feat", ",", "sen2_aut_min_r_feat", ",", "sen2_aut_min_g_feat", ",", "sen2_aut_min_b_feat", "=", "sen2_features", "(", "all_patches", ")", "\n", "\n", "", "if", "each_data", ".", "endswith", "(", "'spring'", ")", ":", "# process sen2 spring data", "\n", "                        ", "sen2_spr_mean_r_feat", ",", "sen2_spr_mean_g_feat", ",", "sen2_spr_mean_b_feat", ",", "sen2_spr_med_r_feat", ",", "sen2_spr_med_g_feat", ",", "sen2_spr_med_b_feat", ",", "sen2_spr_std_r_feat", ",", "sen2_spr_std_g_feat", ",", "sen2_spr_std_b_feat", ",", "sen2_spr_max_r_feat", ",", "sen2_spr_max_g_feat", ",", "sen2_spr_max_b_feat", ",", "sen2_spr_min_r_feat", ",", "sen2_spr_min_g_feat", ",", "sen2_spr_min_b_feat", "=", "sen2_features", "(", "all_patches", ")", "\n", "\n", "", "if", "each_data", ".", "endswith", "(", "'summer'", ")", ":", "# process sen2 summer data", "\n", "                        ", "sen2_sum_mean_r_feat", ",", "sen2_sum_mean_g_feat", ",", "sen2_sum_mean_b_feat", ",", "sen2_sum_med_r_feat", ",", "sen2_sum_med_g_feat", ",", "sen2_sum_med_b_feat", ",", "sen2_sum_std_r_feat", ",", "sen2_sum_std_g_feat", ",", "sen2_sum_std_b_feat", ",", "sen2_sum_max_r_feat", ",", "sen2_sum_max_g_feat", ",", "sen2_sum_max_b_feat", ",", "sen2_sum_min_r_feat", ",", "sen2_sum_min_g_feat", ",", "sen2_sum_min_b_feat", "=", "sen2_features", "(", "all_patches", ")", "\n", "\n", "", "if", "each_data", ".", "endswith", "(", "'winter'", ")", ":", "# process sen2 winter data", "\n", "                        ", "sen2_win_mean_r_feat", ",", "sen2_win_mean_g_feat", ",", "sen2_win_mean_b_feat", ",", "sen2_win_med_r_feat", ",", "sen2_win_med_g_feat", ",", "sen2_win_med_b_feat", ",", "sen2_win_std_r_feat", ",", "sen2_win_std_g_feat", ",", "sen2_win_std_b_feat", ",", "sen2_win_max_r_feat", ",", "sen2_win_max_g_feat", ",", "sen2_win_max_b_feat", ",", "sen2_win_min_r_feat", ",", "sen2_win_min_g_feat", ",", "sen2_win_min_b_feat", "=", "sen2_features", "(", "all_patches", ")", "\n", "\n", "", "if", "each_data", ".", "endswith", "(", "'osm_features'", ")", ":", "# process the osm data", "\n", "                        ", "for", "each_patch", "in", "all_patches", ":", "\n", "                            ", "osm_features", "=", "pd", ".", "read_csv", "(", "each_patch", ",", "header", "=", "None", ")", "# read the osm feature csv file", "\n", "osm_features", "=", "osm_features", ".", "dropna", "(", ")", "# drop the NA fields", "\n", "osm_features", "=", "osm_features", ".", "T", "# take the transpose to (2,56)", "\n", "all_keys", "=", "osm_features", ".", "iloc", "[", "0", "]", ".", "tolist", "(", ")", "# get all the keys", "\n", "values", "=", "osm_features", ".", "iloc", "[", "1", "]", ".", "tolist", "(", ")", "# get all the corresponding values for the keys", "\n", "values", "=", "[", "0", "if", "x", "==", "np", ".", "inf", "else", "x", "for", "x", "in", "values", "]", "# remove inf values", "\n", "values", "=", "[", "0", "if", "x", "==", "np", ".", "nan", "else", "x", "for", "x", "in", "values", "]", "# remove nan values", "\n", "osm_feat", ".", "append", "(", "values", ")", "# append osm features for each patch", "\n", "\n", "", "df_osm", "=", "pd", ".", "DataFrame", "(", "osm_feat", ",", "columns", "=", "all_keys", ")", "# data frame for osm features", "\n", "\n", "", "", "id_list", ",", "class_list", ",", "pop_count", ",", "pop_dens", ",", "log_pop_dens", "=", "get_id_response_var", "(", "all_patches", ",", "city_df", ")", "\n", "\n", "df_rest", "=", "pd", ".", "DataFrame", "(", ")", "# initialize data frame for a city", "\n", "# add all the features to data frame", "\n", "df_rest", "[", "'GRD_ID'", "]", "=", "id_list", "\n", "df_rest", "[", "'CLASS'", "]", "=", "class_list", "\n", "df_rest", "[", "'POP'", "]", "=", "pop_count", "\n", "df_rest", "[", "'POP_DENS'", "]", "=", "pop_dens", "\n", "df_rest", "[", "'LOG_POP_DENS'", "]", "=", "log_pop_dens", "\n", "\n", "# Features", "\n", "df_rest", "[", "'LCZ_CL'", "]", "=", "lcz_feat", "\n", "df_rest", "[", "'LU_1_A'", "]", "=", "lu_1_feat", "\n", "df_rest", "[", "'LU_2_A'", "]", "=", "lu_2_feat", "\n", "df_rest", "[", "'LU_3_A'", "]", "=", "lu_3_feat", "\n", "df_rest", "[", "'LU_4_A'", "]", "=", "lu_4_feat", "\n", "df_rest", "[", "'VIIRS_MEAN'", "]", "=", "viirs_mean_feat", "\n", "df_rest", "[", "'VIIRS_MAX'", "]", "=", "viirs_max_feat", "\n", "\n", "df_rest", "[", "'SEN2_AUT_MEAN_R'", "]", "=", "sen2_aut_mean_r_feat", "\n", "df_rest", "[", "'SEN2_AUT_MEAN_G'", "]", "=", "sen2_aut_mean_g_feat", "\n", "df_rest", "[", "'SEN2_AUT_MEAN_B'", "]", "=", "sen2_aut_mean_b_feat", "\n", "df_rest", "[", "'SEN2_AUT_MED_R'", "]", "=", "sen2_aut_med_r_feat", "\n", "df_rest", "[", "'SEN2_AUT_MED_G'", "]", "=", "sen2_aut_med_g_feat", "\n", "df_rest", "[", "'SEN2_AUT_MED_B'", "]", "=", "sen2_aut_med_b_feat", "\n", "df_rest", "[", "'SEN2_AUT_STD_R'", "]", "=", "sen2_aut_std_r_feat", "\n", "df_rest", "[", "'SEN2_AUT_STD_G'", "]", "=", "sen2_aut_std_g_feat", "\n", "df_rest", "[", "'SEN2_AUT_STD_B'", "]", "=", "sen2_aut_std_b_feat", "\n", "df_rest", "[", "'SEN2_AUT_MAX_R'", "]", "=", "sen2_aut_max_r_feat", "\n", "df_rest", "[", "'SEN2_AUT_MAX_G'", "]", "=", "sen2_aut_max_g_feat", "\n", "df_rest", "[", "'SEN2_AUT_MAX_B'", "]", "=", "sen2_aut_max_b_feat", "\n", "df_rest", "[", "'SEN2_AUT_MIN_R'", "]", "=", "sen2_aut_min_r_feat", "\n", "df_rest", "[", "'SEN2_AUT_MIN_G'", "]", "=", "sen2_aut_min_g_feat", "\n", "df_rest", "[", "'SEN2_AUT_MIN_B'", "]", "=", "sen2_aut_min_b_feat", "\n", "\n", "df_rest", "[", "'SEN2_SPR_MEAN_R'", "]", "=", "sen2_spr_mean_r_feat", "\n", "df_rest", "[", "'SEN2_SPR_MEAN_G'", "]", "=", "sen2_spr_mean_g_feat", "\n", "df_rest", "[", "'SEN2_SPR_MEAN_B'", "]", "=", "sen2_spr_mean_b_feat", "\n", "df_rest", "[", "'SEN2_SPR_MED_R'", "]", "=", "sen2_spr_med_r_feat", "\n", "df_rest", "[", "'SEN2_SPR_MED_G'", "]", "=", "sen2_spr_med_g_feat", "\n", "df_rest", "[", "'SEN2_SPR_MED_B'", "]", "=", "sen2_spr_med_b_feat", "\n", "df_rest", "[", "'SEN2_SPR_STD_R'", "]", "=", "sen2_spr_std_r_feat", "\n", "df_rest", "[", "'SEN2_SPR_STD_G'", "]", "=", "sen2_spr_std_g_feat", "\n", "df_rest", "[", "'SEN2_SPR_STD_B'", "]", "=", "sen2_spr_std_b_feat", "\n", "df_rest", "[", "'SEN2_SPR_MAX_R'", "]", "=", "sen2_spr_max_r_feat", "\n", "df_rest", "[", "'SEN2_SPR_MAX_G'", "]", "=", "sen2_spr_max_g_feat", "\n", "df_rest", "[", "'SEN2_SPR_MAX_B'", "]", "=", "sen2_spr_max_b_feat", "\n", "df_rest", "[", "'SEN2_SPR_MIN_R'", "]", "=", "sen2_spr_min_r_feat", "\n", "df_rest", "[", "'SEN2_SPR_MIN_G'", "]", "=", "sen2_spr_min_g_feat", "\n", "df_rest", "[", "'SEN2_SPR_MIN_B'", "]", "=", "sen2_spr_min_b_feat", "\n", "\n", "df_rest", "[", "'SEN2_SUM_MEAN_R'", "]", "=", "sen2_sum_mean_r_feat", "\n", "df_rest", "[", "'SEN2_SUM_MEAN_G'", "]", "=", "sen2_sum_mean_g_feat", "\n", "df_rest", "[", "'SEN2_SUM_MEAN_B'", "]", "=", "sen2_sum_mean_b_feat", "\n", "df_rest", "[", "'SEN2_SUM_MED_R'", "]", "=", "sen2_sum_med_r_feat", "\n", "df_rest", "[", "'SEN2_SUM_MED_G'", "]", "=", "sen2_sum_med_g_feat", "\n", "df_rest", "[", "'SEN2_SUM_MED_B'", "]", "=", "sen2_sum_med_b_feat", "\n", "df_rest", "[", "'SEN2_SUM_STD_R'", "]", "=", "sen2_sum_std_r_feat", "\n", "df_rest", "[", "'SEN2_SUM_STD_G'", "]", "=", "sen2_sum_std_g_feat", "\n", "df_rest", "[", "'SEN2_SUM_STD_B'", "]", "=", "sen2_sum_std_b_feat", "\n", "df_rest", "[", "'SEN2_SUM_MAX_R'", "]", "=", "sen2_sum_max_r_feat", "\n", "df_rest", "[", "'SEN2_SUM_MAX_G'", "]", "=", "sen2_sum_max_g_feat", "\n", "df_rest", "[", "'SEN2_SUM_MAX_B'", "]", "=", "sen2_sum_max_b_feat", "\n", "df_rest", "[", "'SEN2_SUM_MIN_R'", "]", "=", "sen2_sum_min_r_feat", "\n", "df_rest", "[", "'SEN2_SUM_MIN_G'", "]", "=", "sen2_sum_min_g_feat", "\n", "df_rest", "[", "'SEN2_SUM_MIN_B'", "]", "=", "sen2_sum_min_b_feat", "\n", "\n", "df_rest", "[", "'SEN2_WIN_MEAN_R'", "]", "=", "sen2_win_mean_r_feat", "\n", "df_rest", "[", "'SEN2_WIN_MEAN_G'", "]", "=", "sen2_win_mean_g_feat", "\n", "df_rest", "[", "'SEN2_WIN_MEAN_B'", "]", "=", "sen2_win_mean_b_feat", "\n", "df_rest", "[", "'SEN2_WIN_MED_R'", "]", "=", "sen2_win_med_r_feat", "\n", "df_rest", "[", "'SEN2_WIN_MED_G'", "]", "=", "sen2_win_med_g_feat", "\n", "df_rest", "[", "'SEN2_WIN_MED_B'", "]", "=", "sen2_win_med_b_feat", "\n", "df_rest", "[", "'SEN2_WIN_STD_R'", "]", "=", "sen2_win_std_r_feat", "\n", "df_rest", "[", "'SEN2_WIN_STD_G'", "]", "=", "sen2_win_std_g_feat", "\n", "df_rest", "[", "'SEN2_WIN_STD_B'", "]", "=", "sen2_win_std_b_feat", "\n", "df_rest", "[", "'SEN2_WIN_MAX_R'", "]", "=", "sen2_win_max_r_feat", "\n", "df_rest", "[", "'SEN2_WIN_MAX_G'", "]", "=", "sen2_win_max_g_feat", "\n", "df_rest", "[", "'SEN2_WIN_MAX_B'", "]", "=", "sen2_win_max_b_feat", "\n", "df_rest", "[", "'SEN2_WIN_MIN_R'", "]", "=", "sen2_win_min_r_feat", "\n", "df_rest", "[", "'SEN2_WIN_MIN_G'", "]", "=", "sen2_win_min_g_feat", "\n", "df_rest", "[", "'SEN2_WIN_MIN_B'", "]", "=", "sen2_win_min_b_feat", "\n", "\n", "df", "=", "pd", ".", "concat", "(", "[", "df_rest", ",", "df_osm", "]", ",", "axis", "=", "1", ")", "# appending the rest of features and osm features", "\n", "df", ".", "to_csv", "(", "feature_csv_file", ",", "index", "=", "False", ")", "# save the features to csv files", "\n", "print", "(", "\"City {} finished\"", ".", "format", "(", "city_name", ")", ")", "\n", "", "", "print", "(", "'All cities processed for So2Sat POP Part 1 \\n'", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Preparing features for So2sat Part2 \\n'", ")", "\n", "all_folders", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "all_patches_mixed_path", ",", "'*'", ")", ")", "\n", "for", "each_folder", "in", "all_folders", ":", "\n", "            ", "all_patches_mixed_path_part1", "=", "each_folder", ".", "replace", "(", "'Part2'", ",", "'Part1'", ")", "\n", "all_cities", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "each_folder", ",", "'*'", ")", ")", "\n", "for", "each_city", "in", "all_cities", ":", "\n", "# declare lists for input data source", "\n", "                ", "dem_mean_feat", "=", "[", "]", "\n", "dem_max_feat", "=", "[", "]", "\n", "\n", "city_name", "=", "os", ".", "path", ".", "split", "(", "each_city", ")", "[", "1", "]", "# get the name of the city from the city path", "\n", "feature_csv_file", "=", "os", ".", "path", ".", "join", "(", "all_patches_mixed_path_part1", ",", "city_name", "+", "'/'", "+", "city_name", "+", "'_features.csv'", ")", "# create feature csv for city", "\n", "all_data", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "each_city", ",", "'*'", ")", ")", "# get all the data folders", "\n", "city_csv_file", "=", "os", ".", "path", ".", "join", "(", "all_patches_mixed_path_part1", ",", "city_name", "+", "'/'", "+", "city_name", "+", "'.csv'", ")", "# get the city's csv", "\n", "city_df", "=", "pd", ".", "read_csv", "(", "city_csv_file", ")", "# data frame for the city", "\n", "\n", "for", "each_data", "in", "all_data", ":", "# for each data folder in a city", "\n", "                    ", "all_patches", "=", "[", "]", "# list to all patches", "\n", "if", "each_data", ".", "endswith", "(", "'.csv'", ")", ":", "# skip the csv file, get only data folders", "\n", "# skip the file", "\n", "                        ", "continue", "\n", "", "all_classes", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "each_data", ",", "'*'", ")", ")", "# get all class folders in data folder", "\n", "for", "each_class", "in", "all_classes", ":", "\n", "                        ", "class_patches", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "each_class", ",", "'*'", ")", ")", "\n", "for", "x", "in", "class_patches", ":", "\n", "                            ", "all_patches", ".", "append", "(", "x", ")", "# get list of all the city patches", "\n", "\n", "", "", "if", "each_data", ".", "endswith", "(", "'dem'", ")", ":", "# process dem data", "\n", "                        ", "for", "each_patch", "in", "all_patches", ":", "\n", "                            ", "dem_mean", ",", "dem_max", "=", "average_mean_features", "(", "each_patch", ",", "\n", "band", "=", "1", ")", "# get mean and max of dem patch", "\n", "dem_mean_feat", ".", "append", "(", "dem_mean", ")", "# dem mean feature list", "\n", "dem_max_feat", ".", "append", "(", "dem_max", ")", "# dem max feature list", "\n", "\n", "", "", "", "id_list", ",", "class_list", ",", "pop_count", ",", "pop_dens", ",", "log_pop_dens", "=", "get_id_response_var", "(", "all_patches", ",", "city_df", ")", "\n", "df_rest", "=", "pd", ".", "DataFrame", "(", ")", "# initialize data frame for a city", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "feature_csv_file", ")", ":", "\n", "                    ", "df_rest", "[", "'DEM_MEAN'", "]", "=", "dem_mean_feat", "\n", "df_rest", "[", "'DEM_MAX'", "]", "=", "dem_max_feat", "\n", "df_part1", "=", "pd", ".", "read_csv", "(", "feature_csv_file", ")", "\n", "df", "=", "pd", ".", "concat", "(", "[", "df_part1", ",", "df_rest", "]", ",", "axis", "=", "1", ")", "# appending the rest of features and osm features", "\n", "df", ".", "to_csv", "(", "feature_csv_file", ",", "index", "=", "False", ")", "# save the features to csv files", "\n", "print", "(", "\"City {} finished\"", ".", "format", "(", "city_name", ")", ")", "\n", "", "else", ":", "\n", "# add all the features to data frame", "\n", "                    ", "df_rest", "[", "'GRD_ID'", "]", "=", "id_list", "\n", "df_rest", "[", "'CLASS'", "]", "=", "class_list", "\n", "df_rest", "[", "'POP'", "]", "=", "pop_count", "\n", "df_rest", "[", "'POP_DENS'", "]", "=", "pop_dens", "\n", "df_rest", "[", "'LOG_POP_DENS'", "]", "=", "log_pop_dens", "\n", "df_rest", "=", "pd", ".", "DataFrame", "(", ")", "# initialize data frame for a city", "\n", "df_rest", ".", "to_csv", "(", "feature_csv_file", ",", "index", "=", "False", ")", "# save the features to csv files", "\n", "print", "(", "\"City {} finished\"", ".", "format", "(", "city_name", ")", ")", "\n", "", "", "", "print", "(", "'All cities processed for So2Sat POP Part 2 \\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.rf_regression.rf_regressor": [[19, 170], ["print", "glob.glob", "pandas.DataFrame", "print", "sklearn.ensemble.RandomForestRegressor", "sklearn.feature_selection.SelectFromModel", "sklearn.feature_selection.SelectFromModel.fit", "sel.fit.get_support", "list", "sel.fit.transform", "print", "sklearn.model_selection.GridSearchCV", "sklearn.model_selection.GridSearchCV.fit", "_pickle.load.fit", "os.path.join", "os.path.join", "os.path.join", "constants.param_grid.keys", "sklearn.model_selection.GridSearchCV.best_params_.keys", "zip", "open", "open.write", "open.close", "print", "glob.glob", "pandas.DataFrame", "_pickle.load.predict", "pandas.DataFrame", "os.path.join", "pd.read_csv.to_csv", "os.path.join", "print", "os.path.join", "utils.plot_feature_importance", "print", "utils.validation_reg", "print", "os.path.join", "pandas.read_csv", "matplotlib.figure", "matplotlib.scatter", "max", "min", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.axis", "matplotlib.savefig", "print", "os.path.join", "pandas.read_csv", "training_df.append.append", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "time.strftime", "open", "_pickle.dump", "f.close", "os.path.join", "os.path.join", "pandas.read_csv", "test_df.append.append", "open", "_pickle.load", "max", "max", "min", "min", "glob.glob", "sklearn.ensemble.RandomForestRegressor", "time.strftime", "str", "glob.glob", "os.path.join", "os.path.join", "str", "list"], "function", ["home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.utils.plot_feature_importance", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.utils.validation_reg"], ["def", "rf_regressor", "(", "file_name", ",", "ground_truth_col", ")", ":", "\n", "    ", "print", "(", "\"Starting regression\"", ")", "\n", "# get all training cities", "\n", "all_train_cities", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "all_patches_mixed_train_part1", ",", "'*'", ")", ")", "\n", "# prepare the training dataframe", "\n", "training_df", "=", "pd", ".", "DataFrame", "(", ")", "\n", "for", "each_city", "in", "all_train_cities", ":", "\n", "        ", "city_csv", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "each_city", ",", "'*_features.csv'", ")", ")", "[", "0", "]", "# get the feature csv", "\n", "city_df", "=", "pd", ".", "read_csv", "(", "city_csv", ")", "\n", "training_df", "=", "training_df", ".", "append", "(", "city_df", ",", "ignore_index", "=", "True", ")", "# append data from all the training cities", "\n", "\n", "# Get the dependent variables", "\n", "", "y", "=", "training_df", "[", "ground_truth_col", "]", "\n", "# Get the independent variables", "\n", "x", "=", "training_df", "[", "covariate_list", "]", "\n", "\n", "print", "(", "\"Starting training...\\n\"", ")", "\n", "# Initialize the model", "\n", "rfmodel", "=", "RandomForestRegressor", "(", "n_estimators", "=", "500", ",", "oob_score", "=", "True", ",", "max_features", "=", "'auto'", ",", "n_jobs", "=", "-", "1", ",", "\n", "random_state", "=", "0", ")", "# random_state is fixed to allow exact replication", "\n", "sel", "=", "SelectFromModel", "(", "rfmodel", ",", "threshold", "=", "min_fimportance", ")", "\n", "fited", "=", "sel", ".", "fit", "(", "x", ",", "y", ")", "\n", "feature_idx", "=", "fited", ".", "get_support", "(", ")", "# Get list of T/F for covariates for which OOB score is upper the threshold", "\n", "list_covar", "=", "list", "(", "x", ".", "columns", "[", "feature_idx", "]", ")", "# Get list of covariates with the selected features", "\n", "x", "=", "fited", ".", "transform", "(", "x", ")", "# Update the dataframe with the selected features only", "\n", "\n", "# Instantiate the grid search model", "\n", "print", "(", "\"Starting Grid search with cross validation...\\n\"", ")", "\n", "grid_search", "=", "GridSearchCV", "(", "estimator", "=", "RandomForestRegressor", "(", "random_state", "=", "0", ")", ",", "param_grid", "=", "param_grid", ",", "cv", "=", "kfold", ",", "\n", "n_jobs", "=", "n_jobs", ",", "verbose", "=", "0", ")", "\n", "grid_search", ".", "fit", "(", "x", ",", "y", ")", "# Fit the grid search to the data", "\n", "regressor", "=", "grid_search", ".", "best_estimator_", "# Save the best regressor", "\n", "regressor", ".", "fit", "(", "x", ",", "y", ")", "# Fit the best regressor with the data", "\n", "# mean cross-validated score (OOB) and stddev of the best_estimator", "\n", "best_score", "=", "grid_search", ".", "cv_results_", "[", "'mean_test_score'", "]", "[", "grid_search", ".", "best_index_", "]", "\n", "best_std", "=", "grid_search", ".", "cv_results_", "[", "'std_test_score'", "]", "[", "grid_search", ".", "best_index_", "]", "\n", "\n", "rf_model_folder", "=", "os", ".", "path", ".", "join", "(", "current_dir_path", ",", "\"rf_logs\"", ")", "# path to the folder \"rf_model\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "rf_model_folder", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "rf_model_folder", ")", "# creates rf_logs folder inside the project folder", "\n", "\n", "", "model_folder", "=", "os", ".", "path", ".", "join", "(", "rf_model_folder", ",", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S_\"", ")", "+", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_folder", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "model_folder", ")", "# creates folder inside the rf_logs folder, named as per time stamp and file_name", "\n", "\n", "", "model_name", "=", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S_\"", ")", "+", "file_name", "# model name", "\n", "rf_model_path", "=", "os", ".", "path", ".", "join", "(", "model_folder", ",", "model_name", ")", "# path to saved model", "\n", "\n", "# save the best regressor", "\n", "with", "open", "(", "rf_model_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "_pickle", ".", "dump", "(", "regressor", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "# Save the log", "\n", "", "log", "=", "\"\"", "\n", "message", "=", "'Parameter grid for Random Forest tuning :\\n'", "\n", "for", "key", "in", "param_grid", ".", "keys", "(", ")", ":", "\n", "        ", "message", "+=", "'    '", "+", "key", "+", "' : '", "+", "', '", ".", "join", "(", "[", "str", "(", "i", ")", "for", "i", "in", "list", "(", "param_grid", "[", "key", "]", ")", "]", ")", "+", "'\\n'", "\n", "", "message", "+=", "'    '", "+", "'min_fimportance'", "+", "' : '", "+", "str", "(", "min_fimportance", ")", "+", "'\\n'", "\n", "log", "+=", "message", "+", "'\\n'", "\n", "\n", "message", "=", "'Optimized parameters for Random Forest after grid search %s-fold cross-validation tuning :\\n'", "%", "kfold", "\n", "for", "key", "in", "grid_search", ".", "best_params_", ".", "keys", "(", ")", ":", "\n", "        ", "message", "+=", "'    %s : %s'", "%", "(", "key", ",", "grid_search", ".", "best_params_", "[", "key", "]", ")", "+", "'\\n'", "\n", "", "log", "+=", "message", "+", "'\\n'", "\n", "\n", "message", "=", "\"Mean cross-validated score (OOB) and stddev of the best_estimator : %0.3f (+/-%0.3f)\"", "%", "(", "\n", "best_score", ",", "best_std", ")", "+", "'\\n'", "\n", "log", "+=", "message", "+", "'\\n'", "\n", "\n", "# Print mean OOB and stddev for each set of parameters", "\n", "means", "=", "grid_search", ".", "cv_results_", "[", "'mean_test_score'", "]", "\n", "stds", "=", "grid_search", ".", "cv_results_", "[", "'std_test_score'", "]", "\n", "message", "=", "\"Mean cross-validated score (OOB) and stddev for every tested set of parameter :\\n\"", "\n", "for", "mean", ",", "std", ",", "params", "in", "zip", "(", "means", ",", "stds", ",", "grid_search", ".", "cv_results_", "[", "'params'", "]", ")", ":", "\n", "        ", "message", "+=", "\"%0.3f (+/-%0.03f) for %r\"", "%", "(", "mean", ",", "std", ",", "params", ")", "+", "'\\n'", "\n", "", "log", "+=", "message", "+", "'\\n'", "\n", "\n", "# Print final model OOB", "\n", "message", "=", "'Final Random Forest model run - internal Out-of-bag score (OOB) : %0.3f'", "%", "regressor", ".", "oob_score_", "\n", "oob_score", "=", "regressor", ".", "oob_score_", "\n", "log", "+=", "message", "+", "'\\n'", "\n", "\n", "# Save the log", "\n", "fout", "=", "open", "(", "os", ".", "path", ".", "join", "(", "model_folder", ",", "'%s_training_log.txt'", "%", "model_name", ")", ",", "'w'", ")", "\n", "fout", ".", "write", "(", "log", ")", "\n", "fout", ".", "close", "(", ")", "\n", "#################################################################################################", "\n", "\n", "# Start the predictions on completely unseen test data set", "\n", "print", "(", "\"Starting testing...\\n\"", ")", "\n", "all_test_cities", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "all_patches_mixed_test_part1", ",", "'*'", ")", ")", "# get all test cities", "\n", "test_df", "=", "pd", ".", "DataFrame", "(", ")", "\n", "for", "each_test_city", "in", "all_test_cities", ":", "\n", "        ", "test_city_csv", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "each_test_city", ",", "'*features.csv'", ")", ")", "[", "0", "]", "# get the feature csv", "\n", "test_city_df", "=", "pd", ".", "read_csv", "(", "test_city_csv", ")", "\n", "test_df", "=", "test_df", ".", "append", "(", "test_city_df", ",", "ignore_index", "=", "True", ")", "# append all test cities together", "\n", "\n", "# Get the population class", "\n", "", "y_test", "=", "test_df", "[", "ground_truth_col", "]", "\n", "# Get features", "\n", "x_test", "=", "test_df", "[", "list_covar", "]", "\n", "\n", "# load the trained model", "\n", "with", "open", "(", "rf_model_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "regressor", "=", "_pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Predict on test data set", "\n", "", "prediction", "=", "regressor", ".", "predict", "(", "x_test", ")", "\n", "\n", "# Save the prediction", "\n", "df_pred", "=", "pd", ".", "DataFrame", "(", ")", "\n", "df_pred", "[", "\"Grid_ID\"", "]", "=", "test_df", "[", "'GRD_ID'", "]", "\n", "df_pred", "[", "'Prediction'", "]", "=", "prediction", "\n", "df_pred", "[", "'Reference'", "]", "=", "y_test", "\n", "pred_csv_path", "=", "os", ".", "path", ".", "join", "(", "model_folder", ",", "'%s_predictions.csv'", "%", "model_name", ")", "\n", "df_pred", ".", "to_csv", "(", "pred_csv_path", ",", "index", "=", "False", ")", "\n", "validation_csv_path", "=", "os", ".", "path", ".", "join", "(", "model_folder", ",", "'%s_validation.csv'", "%", "model_name", ")", "\n", "\n", "#################################################################################################", "\n", "\n", "# Feature importances", "\n", "print", "(", "\"Creation of feature importance plot...\\n\"", ")", "\n", "importances", "=", "regressor", ".", "feature_importances_", "# Save feature importances from the model", "\n", "path_plot", "=", "os", ".", "path", ".", "join", "(", "model_folder", ",", "\"%s_RF_feature_importance\"", "%", "model_name", ")", "# path to saved plot", "\n", "plot_feature_importance", "(", "importances", ",", "x_test", ",", "path_plot", ")", "\n", "\n", "#################################################################################################", "\n", "\n", "# Calculating the metrics", "\n", "print", "(", "'Calculating the metrics...'", ")", "\n", "validation_reg", "(", "pred_csv_path", ",", "oob_score", ",", "validation_csv_path", ")", "\n", "\n", "print", "(", "'Plotting Actuals vs Predictions...\\n'", ")", "\n", "path_plot", "=", "os", ".", "path", ".", "join", "(", "model_folder", ",", "'%s_predictions.png'", "%", "model_name", ")", "# path to save the plot", "\n", "df_pred", "=", "pd", ".", "read_csv", "(", "pred_csv_path", ")", "# read the prediction csv", "\n", "predicted_value", "=", "df_pred", "[", "'Prediction'", "]", "# get the predictions", "\n", "true_value", "=", "df_pred", "[", "'Reference'", "]", "# get the actual values", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "plt", ".", "scatter", "(", "true_value", ",", "predicted_value", ",", "c", "=", "'crimson'", ")", "\n", "p1", "=", "max", "(", "max", "(", "predicted_value", ")", ",", "max", "(", "true_value", ")", ")", "\n", "p2", "=", "min", "(", "min", "(", "predicted_value", ")", ",", "min", "(", "true_value", ")", ")", "\n", "plt", ".", "plot", "(", "[", "p1", ",", "p2", "]", ",", "[", "p1", ",", "p2", "]", ",", "'b-'", ")", "\n", "plt", ".", "xlabel", "(", "'Actual Values'", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "ylabel", "(", "'Predictions'", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "title", "(", "'Predictions vs Actual Values'", ")", "\n", "plt", ".", "axis", "(", "'equal'", ")", "\n", "\n", "plt", ".", "savefig", "(", "path_plot", ",", "bbox_inches", "=", "'tight'", ",", "dpi", "=", "400", ")", "\n", "print", "(", "'Finished regression'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.utils.raster2array": [[23, 33], ["gdal.Open", "gdal.Open.GetRasterBand", "raster.GetRasterBand.ReadAsArray"], "function", ["None"], ["", "def", "raster2array", "(", "file_path", ",", "band", ")", ":", "\n", "    ", "\"\"\"\n    :param file_path: path to the patch (raster)\n    :param band: band number to read\n    :return: array of raster values\n    \"\"\"", "\n", "raster", "=", "gdal", ".", "Open", "(", "file_path", ")", "\n", "band", "=", "raster", ".", "GetRasterBand", "(", "band", ")", "\n", "array", "=", "band", ".", "ReadAsArray", "(", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.utils.plot_confusion_matrix": [[35, 66], ["matplotlib.figure", "matplotlib.tight_layout", "matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "numpy.arange", "matplotlib.xticks", "matplotlib.yticks", "itertools.product", "matplotlib.tight_layout", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.savefig", "matplotlib.clf", "matplotlib.cla", "matplotlib.close", "len", "cm.max", "range", "range", "matplotlib.text"], "function", ["None"], ["", "def", "plot_confusion_matrix", "(", "cm", ",", "class_names", ",", "cm_path", ")", ":", "\n", "    ", "\"\"\"\n    :param cm: a confusion matrix of integer classes, (array, shape = [n, n])\n    :param class_names: String names of the integer classes, (array, shape = [n])\n    :param cm_path: path to saved confusion matrix\n    :return: matplotlib figure containing the plotted confusion matrix.\n    \"\"\"", "\n", "figure", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "8", ")", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", "\n", "plt", ".", "title", "(", "\"Confusion matrix\"", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "tick_marks", "=", "np", ".", "arange", "(", "len", "(", "class_names", ")", ")", "\n", "plt", ".", "xticks", "(", "tick_marks", ",", "class_names", ",", "rotation", "=", "45", ")", "\n", "plt", ".", "yticks", "(", "tick_marks", ",", "class_names", ")", "\n", "\n", "# Use white text if squares are dark; otherwise black.", "\n", "threshold", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "color", "=", "\"white\"", "if", "cm", "[", "i", ",", "j", "]", ">", "threshold", "else", "\"black\"", "\n", "plt", ".", "text", "(", "j", ",", "i", ",", "cm", "[", "i", ",", "j", "]", ",", "horizontalalignment", "=", "\"center\"", ",", "color", "=", "color", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "ylabel", "(", "'True label'", ")", "\n", "plt", ".", "xlabel", "(", "'Predicted label'", ")", "\n", "plt", ".", "savefig", "(", "cm_path", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "return", "figure", "\n", "\n"]], "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.utils.plot_normalized_confusion_matrix": [[68, 101], ["numpy.around", "matplotlib.tight_layout", "matplotlib.figure", "matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "numpy.arange", "matplotlib.xticks", "matplotlib.yticks", "itertools.product", "matplotlib.tight_layout", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.savefig", "matplotlib.clf", "matplotlib.cla", "matplotlib.close", "len", "np.around.max", "range", "range", "matplotlib.text", "np.around.astype", "np.around.sum"], "function", ["None"], ["", "def", "plot_normalized_confusion_matrix", "(", "cm", ",", "class_names", ",", "cm_path", ")", ":", "\n", "    ", "\"\"\"\n    :param cm: a confusion matrix of integer classes, (array, shape = [n, n])\n    :param class_names: String names of the integer classes, (array, shape = [n])\n    :param cm_path: path to saved normalized confusion matrix\n    :return: matplotlib figure containing the plotted confusion matrix.\n    \"\"\"", "\n", "# Normalize the confusion matrix.", "\n", "cm", "=", "np", ".", "around", "(", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "decimals", "=", "2", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "figure", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "8", ")", ")", "\n", "plt", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", "\n", "plt", ".", "title", "(", "\"Confusion matrix\"", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "tick_marks", "=", "np", ".", "arange", "(", "len", "(", "class_names", ")", ")", "\n", "plt", ".", "xticks", "(", "tick_marks", ",", "class_names", ",", "rotation", "=", "45", ")", "\n", "plt", ".", "yticks", "(", "tick_marks", ",", "class_names", ")", "\n", "\n", "# Use white text if squares are dark; otherwise black.", "\n", "threshold", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "color", "=", "\"white\"", "if", "cm", "[", "i", ",", "j", "]", ">", "threshold", "else", "\"black\"", "\n", "plt", ".", "text", "(", "j", ",", "i", ",", "cm", "[", "i", ",", "j", "]", ",", "horizontalalignment", "=", "\"center\"", ",", "color", "=", "color", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "ylabel", "(", "'True label'", ")", "\n", "plt", ".", "xlabel", "(", "'Predicted label'", ")", "\n", "plt", ".", "savefig", "(", "cm_path", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "return", "figure", "\n", "\n"]], "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.utils.validation_cls": [[103, 145], ["pandas.read_csv", "round", "round", "round", "round", "round", "round", "sklearn.metrics.confusion_matrix", "sklearn.metrics.accuracy_score", "sklearn.metrics.balanced_accuracy_score", "sklearn.metrics.confusion_matrix().diagonal", "print", "validation_log_path.replace", "validation_log_path.replace", "sorted", "utils.plot_confusion_matrix", "utils.plot_normalized_confusion_matrix", "sklearn.metrics.f1_score", "sklearn.metrics.recall_score", "sklearn.metrics.precision_score", "sklearn.metrics.f1_score", "sklearn.metrics.recall_score", "sklearn.metrics.precision_score", "open", "f.writelines", "labels_names.append", "sklearn.metrics.confusion_matrix.astype", "sklearn.metrics.confusion_matrix", "sklearn.metrics.confusion_matrix.sum", "str"], "function", ["home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.utils.plot_confusion_matrix", "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.utils.plot_normalized_confusion_matrix"], ["", "def", "validation_cls", "(", "classes", ",", "pred_csv_path", ",", "validation_log_path", ")", ":", "\n", "    ", "\"\"\"\n    :param pred_csv_path: path to saved csv file that contains predictions\n    :param validation_log_path:  path to saved log file that contains validation metrics\n    :return: Calculates the validation metrics and creates the validation log\n    \"\"\"", "\n", "df", "=", "pd", ".", "read_csv", "(", "pred_csv_path", ")", "\n", "val_targ", "=", "df", "[", "'Reference'", "]", "\n", "val_predict", "=", "df", "[", "'Prediction'", "]", "\n", "\n", "val_f1_micro", "=", "round", "(", "f1_score", "(", "val_targ", ",", "val_predict", ",", "average", "=", "'micro'", ")", ",", "4", ")", "\n", "val_recall_micro", "=", "round", "(", "recall_score", "(", "val_targ", ",", "val_predict", ",", "average", "=", "'micro'", ")", ",", "4", ")", "\n", "val_precis_micro", "=", "round", "(", "precision_score", "(", "val_targ", ",", "val_predict", ",", "average", "=", "'micro'", ")", ",", "4", ")", "\n", "val_f1_macro", "=", "round", "(", "f1_score", "(", "val_targ", ",", "val_predict", ",", "average", "=", "'macro'", ")", ",", "4", ")", "\n", "val_recall_macro", "=", "round", "(", "recall_score", "(", "val_targ", ",", "val_predict", ",", "average", "=", "'macro'", ")", ",", "4", ")", "\n", "val_precis_macro", "=", "round", "(", "precision_score", "(", "val_targ", ",", "val_predict", ",", "average", "=", "'macro'", ")", ",", "4", ")", "\n", "val_cm", "=", "confusion_matrix", "(", "val_targ", ",", "val_predict", ")", "\n", "accuracy", "=", "accuracy_score", "(", "val_targ", ",", "val_predict", ")", "\n", "balanced_accuracy", "=", "balanced_accuracy_score", "(", "val_targ", ",", "val_predict", ")", "\n", "classwise_accuracy", "=", "confusion_matrix", "(", "val_targ", ",", "val_predict", ",", "normalize", "=", "\"true\"", ")", ".", "diagonal", "(", ")", "\n", "print", "(", "\"Please check log at {}  \\n\"", ".", "format", "(", "validation_log_path", ")", ")", "\n", "with", "open", "(", "validation_log_path", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "writelines", "(", "\n", "\"Evaluation metrics on test data \\n F1_macro: {} \\n F1_micro: {} \\n Precision_macro: {} \\n \"", "\n", "\"Precision_micro: {} \\n Recall_macro: {} \\n Recall_micro: {} \\n Accuracy: {}\"", "\n", "\"\\n Balanced_accuracy: {} \\n Class wise accuracy: {}\"", ".", "format", "(", "val_f1_macro", ",", "val_f1_micro", ",", "\n", "val_precis_macro", ",", "val_precis_micro", ",", "\n", "val_recall_macro", ",", "val_recall_micro", ",", "\n", "accuracy", ",", "balanced_accuracy", ",", "\n", "classwise_accuracy", ")", ")", "\n", "", "cm_path", "=", "validation_log_path", ".", "replace", "(", "'_validation_log.txt'", ",", "'_cm.png'", ")", "\n", "norm_cm_path", "=", "validation_log_path", ".", "replace", "(", "'_validation_log.txt'", ",", "'_cm_norm.png'", ")", "\n", "# print(classification_report(val_targ, val_predict))", "\n", "\n", "labels", "=", "sorted", "(", "classes", ")", "\n", "labels_names", "=", "[", "]", "\n", "for", "each", "in", "labels", ":", "\n", "        ", "labels_names", ".", "append", "(", "'Class_'", "+", "str", "(", "each", ")", ")", "\n", "\n", "", "_", "=", "plot_confusion_matrix", "(", "val_cm", ",", "class_names", "=", "labels_names", ",", "cm_path", "=", "cm_path", ")", "\n", "_", "=", "plot_normalized_confusion_matrix", "(", "val_cm", ",", "class_names", "=", "labels_names", ",", "cm_path", "=", "norm_cm_path", ")", "\n", "_", "=", "val_cm", ".", "astype", "(", "'float'", ")", "/", "val_cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.utils.validation_reg": [[147, 190], ["pandas.read_csv", "validation_csv_path.replace", "abs", "math.sqrt", "df[].mean", "df[].mean", "df[].sum", "df[].sum", "df[].sum", "log_list.extend", "print", "open", "open.write", "open.close", "round", "numpy.corrcoef", "round", "round", "round", "round", "round", "round", "round", "round", "df[].mean", "round", "round", "round", "round"], "function", ["None"], ["", "def", "validation_reg", "(", "pred_csv_path", ",", "oob_score", ",", "validation_csv_path", ")", ":", "\n", "    ", "\"\"\"\n    :param pred_csv_path: Path to csv file, has saved predictions and expected values for test data\n    :param oob_score: Final OOB score of the model\n    :param validation_csv_path: path to new csv which will contain the metric for further evaluations\n    \"\"\"", "\n", "log_list", "=", "[", "]", "\n", "df", "=", "pd", ".", "read_csv", "(", "pred_csv_path", ")", "\n", "output_log_validation", "=", "validation_csv_path", ".", "replace", "(", "'.csv'", ",", "'_log.txt'", ")", "\n", "# Compute error", "\n", "df", "[", "'error'", "]", "=", "df", "[", "'Prediction'", "]", "-", "df", "[", "'Reference'", "]", "\n", "# Compute squared error raster", "\n", "df", "[", "'sqerror'", "]", "=", "df", "[", "'error'", "]", "**", "2", "\n", "# Compute absolute error raster", "\n", "df", "[", "'abserror'", "]", "=", "abs", "(", "df", "[", "'error'", "]", ")", "\n", "\n", "# Compute overall validation statistics #", "\n", "rmse", "=", "ma", ".", "sqrt", "(", "round", "(", "df", "[", "'sqerror'", "]", ".", "mean", "(", ")", ",", "2", ")", ")", "# Compute RMSE (Root mean squared error)", "\n", "mean_ref", "=", "df", "[", "'Reference'", "]", ".", "mean", "(", ")", "# Compute mean reference population per admin unit", "\n", "prct_rmse", "=", "(", "rmse", "/", "mean_ref", ")", "*", "100", "# Compute %RMSE", "\n", "MAE", "=", "df", "[", "'abserror'", "]", ".", "mean", "(", ")", "# Compute MAE (Mean absolute error)", "\n", "TAE", "=", "df", "[", "'abserror'", "]", ".", "sum", "(", ")", "# Compute TAE (Total absolute error)", "\n", "POPTOT", "=", "df", "[", "'Reference'", "]", ".", "sum", "(", ")", "# Compute Total reference population", "\n", "PREDTOT", "=", "df", "[", "'Prediction'", "]", ".", "sum", "(", ")", "# Compute Total predicted population", "\n", "corr", "=", "np", ".", "corrcoef", "(", "df", "[", "'Reference'", "]", ",", "df", "[", "'Prediction'", "]", ")", "[", "0", ",", "1", "]", "# Get correlation value", "\n", "r_squared", "=", "(", "corr", "**", "2", ")", "# Get r-squared value", "\n", "\n", "# Outputs print and log", "\n", "log", "=", "\"\"", "\n", "log", "+=", "\"Total reference population = %s \\n\"", "%", "round", "(", "POPTOT", ",", "1", ")", "\n", "log", "+=", "\"Total predicted population = %s \\n\"", "%", "round", "(", "PREDTOT", ",", "1", ")", "\n", "log", "+=", "'\\n'", "\n", "log", "+=", "\"Final Random Forest model run - internal Out-of-bag score (OOB) = %s \\n\"", "%", "round", "(", "oob_score", ",", "3", ")", "\n", "log", "+=", "\"Mean absolute error of prediction (MAE) = %s \\n\"", "%", "round", "(", "MAE", ",", "3", ")", "\n", "log", "+=", "\"Root mean squared error of prediction (RMSE) = %s \\n\"", "%", "round", "(", "rmse", ",", "3", ")", "\n", "log", "+=", "\"Root mean squared error of prediction in percentage (Percent_RMSE) = %s \\n\"", "%", "round", "(", "prct_rmse", ",", "3", ")", "\n", "log", "+=", "\"Total absolute error (TAE) = %s \\n\"", "%", "round", "(", "TAE", ",", "3", ")", "\n", "log", "+=", "\"R squared = %s \\n\"", "%", "round", "(", "r_squared", ",", "3", ")", "\n", "log_list", ".", "extend", "(", "[", "[", "round", "(", "oob_score", ",", "3", ")", ",", "round", "(", "MAE", ",", "3", ")", ",", "round", "(", "prct_rmse", ",", "3", ")", ",", "round", "(", "r_squared", ",", "3", ")", "]", "]", ")", "\n", "print", "(", "\"Please check log at {} \\n \"", ".", "format", "(", "output_log_validation", ")", ")", "\n", "fout", "=", "open", "(", "output_log_validation", ",", "'w'", ")", "\n", "fout", ".", "write", "(", "log", ")", "\n", "fout", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhu-xlab_so2sat-pop.None.utils.plot_feature_importance": [[192, 216], ["range", "range", "numpy.arange", "matplotlib.subplots", "ax.barh", "ax.set_yticks", "ax.set_yticklabels", "ax.set_title", "fig.tight_layout", "matplotlib.savefig", "matplotlib.close", "numpy.argsort", "len", "len", "Labels.append", "len"], "function", ["None"], ["", "def", "plot_feature_importance", "(", "importances", ",", "x_test", ",", "path_plot", ")", ":", "\n", "    ", "\"\"\"\n    :param importances: array of feature importance from the model\n    :param x_test: data frame for test cities\n    :param path_plot: path to feature importance plot\n    :return: Create and save the feature importance plot\n    \"\"\"", "\n", "indices", "=", "np", ".", "argsort", "(", "importances", ")", "[", ":", ":", "-", "1", "]", "\n", "indices", "=", "indices", "[", ":", "12", "]", "# get indices of only top 12 features", "\n", "x_axis", "=", "importances", "[", "indices", "]", "[", ":", ":", "-", "1", "]", "\n", "idx", "=", "indices", "[", ":", ":", "-", "1", "]", "\n", "y_axis", "=", "range", "(", "len", "(", "x_axis", ")", ")", "\n", "Labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "x_axis", ")", ")", ":", "\n", "        ", "Labels", ".", "append", "(", "x_test", ".", "columns", "[", "idx", "[", "i", "]", "]", ")", "# get corresponding labels of the features", "\n", "", "y_ticks", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "x_axis", ")", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "barh", "(", "y_axis", ",", "x_axis", ")", "\n", "ax", ".", "set_yticks", "(", "y_ticks", ")", "\n", "ax", ".", "set_yticklabels", "(", "Labels", ")", "\n", "ax", ".", "set_title", "(", "\"Random Forest Feature Importances\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "path_plot", ",", "bbox_inches", "=", "'tight'", ",", "dpi", "=", "400", ")", "# Export in .png file (image)", "\n", "plt", ".", "close", "(", ")", "# Avoid the plot to be displayed", "\n", "", ""]]}