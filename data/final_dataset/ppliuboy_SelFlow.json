{"home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.main.main": [[18, 58], ["config.extract_config.config_dict", "selflow_model.SelFlowModel", "selflow_model.SelFlowModel.test", "ValueError"], "function", ["home.repos.pwc.inspect_result.ppliuboy_SelFlow.config.extract_config.config_dict", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.selflow_model.SelFlowModel.test"], ["def", "main", "(", "_", ")", ":", "\n", "    ", "config", "=", "config_dict", "(", "'./config/config.ini'", ")", "\n", "run_config", "=", "config", "[", "'run'", "]", "\n", "dataset_config", "=", "config", "[", "'dataset'", "]", "\n", "self_supervision_config", "=", "config", "[", "'self_supervision'", "]", "\n", "model", "=", "SelFlowModel", "(", "batch_size", "=", "run_config", "[", "'batch_size'", "]", ",", "\n", "iter_steps", "=", "run_config", "[", "'iter_steps'", "]", ",", "\n", "initial_learning_rate", "=", "run_config", "[", "'initial_learning_rate'", "]", ",", "\n", "decay_steps", "=", "run_config", "[", "'decay_steps'", "]", ",", "\n", "decay_rate", "=", "run_config", "[", "'decay_rate'", "]", ",", "\n", "is_scale", "=", "run_config", "[", "'is_scale'", "]", ",", "\n", "num_input_threads", "=", "run_config", "[", "'num_input_threads'", "]", ",", "\n", "buffer_size", "=", "run_config", "[", "'buffer_size'", "]", ",", "\n", "beta1", "=", "run_config", "[", "'beta1'", "]", ",", "\n", "num_gpus", "=", "run_config", "[", "'num_gpus'", "]", ",", "\n", "save_checkpoint_interval", "=", "run_config", "[", "'save_checkpoint_interval'", "]", ",", "\n", "write_summary_interval", "=", "run_config", "[", "'write_summary_interval'", "]", ",", "\n", "display_log_interval", "=", "run_config", "[", "'display_log_interval'", "]", ",", "\n", "allow_soft_placement", "=", "run_config", "[", "'allow_soft_placement'", "]", ",", "\n", "log_device_placement", "=", "run_config", "[", "'log_device_placement'", "]", ",", "\n", "regularizer_scale", "=", "run_config", "[", "'regularizer_scale'", "]", ",", "\n", "cpu_device", "=", "run_config", "[", "'cpu_device'", "]", ",", "\n", "save_dir", "=", "run_config", "[", "'save_dir'", "]", ",", "\n", "checkpoint_dir", "=", "run_config", "[", "'checkpoint_dir'", "]", ",", "\n", "model_name", "=", "run_config", "[", "'model_name'", "]", ",", "\n", "sample_dir", "=", "run_config", "[", "'sample_dir'", "]", ",", "\n", "summary_dir", "=", "run_config", "[", "'summary_dir'", "]", ",", "\n", "training_mode", "=", "run_config", "[", "'training_mode'", "]", ",", "\n", "is_restore_model", "=", "run_config", "[", "'is_restore_model'", "]", ",", "\n", "restore_model", "=", "run_config", "[", "'restore_model'", "]", ",", "\n", "dataset_config", "=", "dataset_config", ",", "\n", "self_supervision_config", "=", "self_supervision_config", "\n", ")", "\n", "\n", "if", "run_config", "[", "'mode'", "]", "==", "'test'", ":", "\n", "        ", "model", ".", "test", "(", "restore_model", "=", "config", "[", "'test'", "]", "[", "'restore_model'", "]", ",", "\n", "save_dir", "=", "config", "[", "'test'", "]", "[", "'save_dir'", "]", ",", "\n", "is_normalize_img", "=", "dataset_config", "[", "'is_normalize_img'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid mode. Mode should be one of {test}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.flowlib.read_flo": [[7, 19], ["open", "numpy.fromfile", "print", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "numpy.resize", "int"], "function", ["None"], ["def", "read_flo", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "magic", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "1", ")", "\n", "if", "202021.25", "!=", "magic", ":", "\n", "            ", "print", "(", "'Magic number incorrect. Invalid .flo file'", ")", "\n", "", "else", ":", "\n", "            ", "w", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "\n", "h", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "\n", "data", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "int", "(", "2", "*", "w", "*", "h", ")", ")", "\n", "# Reshape data into 3D array (columns, rows, bands)", "\n", "data2D", "=", "np", ".", "resize", "(", "data", ",", "(", "h", "[", "0", "]", ",", "w", "[", "0", "]", ",", "2", ")", ")", "\n", "return", "data2D", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.flowlib.write_flo": [[20, 37], ["open", "numpy.array", "numpy.array", "numpy.array", "np.array.tofile", "np.array.tofile", "np.array.tofile", "flow.tofile", "open.close"], "function", ["None"], ["", "", "", "def", "write_flo", "(", "filename", ",", "flow", ")", ":", "\n", "    ", "\"\"\"\n    write optical flow in Middlebury .flo format\n    :param flow: optical flow map\n    :param filename: optical flow file path to be saved\n    :return: None\n    \"\"\"", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "magic", "=", "np", ".", "array", "(", "[", "202021.25", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "(", "height", ",", "width", ")", "=", "flow", ".", "shape", "[", "0", ":", "2", "]", "\n", "w", "=", "np", ".", "array", "(", "[", "width", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "h", "=", "np", ".", "array", "(", "[", "height", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "magic", ".", "tofile", "(", "f", ")", "\n", "w", ".", "tofile", "(", "f", ")", "\n", "h", ".", "tofile", "(", "f", ")", "\n", "flow", ".", "tofile", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.flowlib.read_pfm": [[39, 77], ["open", "open.readline().rstrip", "header.decode.decode", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "open.readline().decode", "map", "Exception", "open.readline().rstrip().decode", "open.readline", "Exception", "re.match.groups", "open.readline", "open.readline().rstrip", "open.readline"], "function", ["None"], ["", "def", "read_pfm", "(", "file", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "\n", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "header", "=", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "header", "=", "header", ".", "decode", "(", "'utf-8'", ")", "\n", "if", "header", "==", "'PF'", ":", "\n", "        ", "color", "=", "True", "\n", "", "elif", "header", "==", "'Pf'", ":", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "r'^(\\d+)\\s(\\d+)\\s$'", ",", "file", ".", "readline", "(", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "if", "dim_match", ":", "\n", "        ", "width", ",", "height", "=", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "        ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "        ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "file", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "data", "=", "data", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.flowlib.write_pfm": [[79, 107], ["open", "numpy.flipud", "open.write", "open.write", "open.write", "np.flipud.tofile", "Exception", "len", "Exception", "len", "len"], "function", ["None"], ["", "def", "write_pfm", "(", "file", ",", "image", ",", "scale", "=", "1", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'wb'", ")", "\n", "\n", "color", "=", "None", "\n", "\n", "if", "image", ".", "dtype", ".", "name", "!=", "'float32'", ":", "\n", "        ", "raise", "Exception", "(", "'Image dtype must be float32.'", ")", "\n", "\n", "", "image", "=", "np", ".", "flipud", "(", "image", ")", "\n", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "3", ":", "# color image", "\n", "        ", "color", "=", "True", "\n", "", "elif", "len", "(", "image", ".", "shape", ")", "==", "2", "or", "len", "(", "image", ".", "shape", ")", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "# greyscale", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Image must have H x W x 3, H x W x 1 or H x W dimensions.'", ")", "\n", "\n", "", "file", ".", "write", "(", "'PF\\n'", "if", "color", "else", "'Pf\\n'", ")", "\n", "file", ".", "write", "(", "'%d %d\\n'", "%", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "endian", "=", "image", ".", "dtype", ".", "byteorder", "\n", "\n", "if", "endian", "==", "'<'", "or", "endian", "==", "'='", "and", "sys", ".", "byteorder", "==", "'little'", ":", "\n", "        ", "scale", "=", "-", "scale", "\n", "\n", "", "file", ".", "write", "(", "'%f\\n'", "%", "scale", ")", "\n", "\n", "image", ".", "tofile", "(", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.flowlib.flow_to_color": [[109, 133], ["tensorflow.unstack", "tensorflow.unstack", "tensorflow.sqrt", "tensorflow.atan2", "tensorflow.mod", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.stack", "tensorflow.image.hsv_to_rgb", "tensorflow.shape", "tensorflow.ones", "tensorflow.maximum", "tensorflow.reduce_max", "tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.abs", "tensorflow.square"], "function", ["None"], ["", "def", "flow_to_color", "(", "flow", ",", "mask", "=", "None", ",", "max_flow", "=", "None", ")", ":", "\n", "    ", "\"\"\"Converts flow to 3-channel color image.\n\n    Args:\n        flow: tensor of shape [num_batch, height, width, 2].\n        mask: flow validity mask of shape [num_batch, height, width, 1].\n    \"\"\"", "\n", "n", "=", "8", "\n", "num_batch", ",", "height", ",", "width", ",", "_", "=", "tf", ".", "unstack", "(", "tf", ".", "shape", "(", "flow", ")", ")", "\n", "mask", "=", "tf", ".", "ones", "(", "[", "num_batch", ",", "height", ",", "width", ",", "1", "]", ")", "if", "mask", "is", "None", "else", "mask", "\n", "flow_u", ",", "flow_v", "=", "tf", ".", "unstack", "(", "flow", ",", "axis", "=", "3", ")", "\n", "if", "max_flow", "is", "not", "None", ":", "\n", "        ", "max_flow", "=", "tf", ".", "maximum", "(", "tf", ".", "to_float", "(", "max_flow", ")", ",", "1.", ")", "\n", "", "else", ":", "\n", "        ", "max_flow", "=", "tf", ".", "reduce_max", "(", "tf", ".", "abs", "(", "flow", "*", "mask", ")", ")", "\n", "", "mag", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "flow", ")", ",", "3", ")", ")", "\n", "angle", "=", "tf", ".", "atan2", "(", "flow_v", ",", "flow_u", ")", "\n", "\n", "im_h", "=", "tf", ".", "mod", "(", "angle", "/", "(", "2", "*", "np", ".", "pi", ")", "+", "1.0", ",", "1.0", ")", "\n", "im_s", "=", "tf", ".", "clip_by_value", "(", "mag", "*", "n", "/", "max_flow", ",", "0", ",", "1", ")", "\n", "im_v", "=", "tf", ".", "clip_by_value", "(", "n", "-", "im_s", ",", "0", ",", "1", ")", "\n", "im_hsv", "=", "tf", ".", "stack", "(", "[", "im_h", ",", "im_s", ",", "im_v", "]", ",", "3", ")", "\n", "im", "=", "tf", ".", "image", ".", "hsv_to_rgb", "(", "im_hsv", ")", "\n", "return", "im", "*", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.flowlib.flow_error_image": [[135, 185], ["tensorflow.sqrt", "tensorflow.ones", "tensorflow.reduce_sum", "tensorflow.unstack", "numpy.asarray", "tensorflow.sqrt", "tensorflow.minimum", "tensorflow.zeros", "range", "tensorflow.where", "tensorflow.concat", "tensorflow.shape", "tensorflow.shape", "tensorflow.reduce_sum", "tensorflow.logical_and", "tensorflow.where", "tensorflow.tile", "tensorflow.square", "tensorflow.greater_equal", "tensorflow.less", "tensorflow.tile", "tensorflow.cast", "tensorflow.minimum", "tensorflow.ones"], "function", ["None"], ["", "def", "flow_error_image", "(", "flow_1", ",", "flow_2", ",", "mask_occ", ",", "mask_noc", "=", "None", ",", "log_colors", "=", "True", ")", ":", "\n", "    ", "\"\"\"Visualize the error between two flows as 3-channel color image.\n\n    Adapted from the KITTI C++ devkit.\n\n    Args:\n        flow_1: first flow of shape [num_batch, height, width, 2].\n        flow_2: second flow (ground truth)\n        mask_occ: flow validity mask of shape [num_batch, height, width, 1].\n            Equals 1 at (occluded and non-occluded) valid pixels.\n        mask_noc: Is 1 only at valid pixels which are not occluded.\n    \"\"\"", "\n", "mask_noc", "=", "tf", ".", "ones", "(", "tf", ".", "shape", "(", "mask_occ", ")", ")", "if", "mask_noc", "is", "None", "else", "mask_noc", "\n", "diff_sq", "=", "(", "flow_1", "-", "flow_2", ")", "**", "2", "\n", "diff", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "diff_sq", ",", "[", "3", "]", ",", "keepdims", "=", "True", ")", ")", "\n", "if", "log_colors", ":", "\n", "        ", "num_batch", ",", "height", ",", "width", ",", "_", "=", "tf", ".", "unstack", "(", "tf", ".", "shape", "(", "flow_1", ")", ")", "\n", "colormap", "=", "[", "\n", "[", "0", ",", "0.0625", ",", "49", ",", "54", ",", "149", "]", ",", "\n", "[", "0.0625", ",", "0.125", ",", "69", ",", "117", ",", "180", "]", ",", "\n", "[", "0.125", ",", "0.25", ",", "116", ",", "173", ",", "209", "]", ",", "\n", "[", "0.25", ",", "0.5", ",", "171", ",", "217", ",", "233", "]", ",", "\n", "[", "0.5", ",", "1", ",", "224", ",", "243", ",", "248", "]", ",", "\n", "[", "1", ",", "2", ",", "254", ",", "224", ",", "144", "]", ",", "\n", "[", "2", ",", "4", ",", "253", ",", "174", ",", "97", "]", ",", "\n", "[", "4", ",", "8", ",", "244", ",", "109", ",", "67", "]", ",", "\n", "[", "8", ",", "16", ",", "215", ",", "48", ",", "39", "]", ",", "\n", "[", "16", ",", "1000000000.0", ",", "165", ",", "0", ",", "38", "]", "]", "\n", "colormap", "=", "np", ".", "asarray", "(", "colormap", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "colormap", "[", ":", ",", "2", ":", "5", "]", "=", "colormap", "[", ":", ",", "2", ":", "5", "]", "/", "255", "\n", "mag", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "flow_2", ")", ",", "3", ",", "keepdims", "=", "True", ")", ")", "\n", "error", "=", "tf", ".", "minimum", "(", "diff", "/", "3", ",", "20", "*", "diff", "/", "mag", ")", "\n", "im", "=", "tf", ".", "zeros", "(", "[", "num_batch", ",", "height", ",", "width", ",", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "colormap", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "colors", "=", "colormap", "[", "i", ",", ":", "]", "\n", "cond", "=", "tf", ".", "logical_and", "(", "tf", ".", "greater_equal", "(", "error", ",", "colors", "[", "0", "]", ")", ",", "\n", "tf", ".", "less", "(", "error", ",", "colors", "[", "1", "]", ")", ")", "\n", "im", "=", "tf", ".", "where", "(", "tf", ".", "tile", "(", "cond", ",", "[", "1", ",", "1", ",", "1", ",", "3", "]", ")", ",", "\n", "tf", ".", "ones", "(", "[", "num_batch", ",", "height", ",", "width", ",", "1", "]", ")", "*", "colors", "[", "2", ":", "5", "]", ",", "\n", "im", ")", "\n", "", "im", "=", "tf", ".", "where", "(", "tf", ".", "tile", "(", "tf", ".", "cast", "(", "mask_noc", ",", "tf", ".", "bool", ")", ",", "[", "1", ",", "1", ",", "1", ",", "3", "]", ")", ",", "\n", "im", ",", "im", "*", "0.5", ")", "\n", "im", "=", "im", "*", "mask_occ", "\n", "", "else", ":", "\n", "        ", "error", "=", "(", "tf", ".", "minimum", "(", "diff", ",", "5", ")", "/", "5", ")", "*", "mask_occ", "\n", "im_r", "=", "error", "# errors in occluded areas will be red", "\n", "im_g", "=", "error", "*", "mask_noc", "\n", "im_b", "=", "error", "*", "mask_noc", "\n", "im", "=", "tf", ".", "concat", "(", "axis", "=", "3", ",", "values", "=", "[", "im_r", ",", "im_g", ",", "im_b", "]", ")", "\n", "", "return", "im", "", "", ""]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.data_augmentation.random_crop": [[4, 14], ["tensorflow.shape", "tensorflow.random_uniform", "tensorflow.random_uniform", "enumerate", "tensorflow.image.crop_to_bounding_box"], "function", ["None"], ["def", "random_crop", "(", "img_list", ",", "crop_h", ",", "crop_w", ")", ":", "\n", "    ", "img_size", "=", "tf", ".", "shape", "(", "img_list", "[", "0", "]", ")", "\n", "# crop image and flow", "\n", "rand_offset_h", "=", "tf", ".", "random_uniform", "(", "[", "]", ",", "0", ",", "img_size", "[", "0", "]", "-", "crop_h", "+", "1", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "rand_offset_w", "=", "tf", ".", "random_uniform", "(", "[", "]", ",", "0", ",", "img_size", "[", "1", "]", "-", "crop_w", "+", "1", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "img_list", ")", ":", "\n", "        ", "img_list", "[", "i", "]", "=", "tf", ".", "image", ".", "crop_to_bounding_box", "(", "img", ",", "rand_offset_h", ",", "rand_offset_w", ",", "crop_h", ",", "crop_w", ")", "\n", "\n", "", "return", "img_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.data_augmentation.flow_vertical_flip": [[15, 21], ["tensorflow.image.flip_up_down", "tensorflow.unstack", "tensorflow.stack"], "function", ["None"], ["", "def", "flow_vertical_flip", "(", "flow", ")", ":", "\n", "    ", "flow", "=", "tf", ".", "image", ".", "flip_up_down", "(", "flow", ")", "\n", "flow_u", ",", "flow_v", "=", "tf", ".", "unstack", "(", "flow", ",", "axis", "=", "-", "1", ")", "\n", "flow_v", "=", "flow_v", "*", "-", "1", "\n", "flow", "=", "tf", ".", "stack", "(", "[", "flow_u", ",", "flow_v", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.data_augmentation.flow_horizontal_flip": [[22, 28], ["tensorflow.image.flip_left_right", "tensorflow.unstack", "tensorflow.stack"], "function", ["None"], ["", "def", "flow_horizontal_flip", "(", "flow", ")", ":", "\n", "    ", "flow", "=", "tf", ".", "image", ".", "flip_left_right", "(", "flow", ")", "\n", "flow_u", ",", "flow_v", "=", "tf", ".", "unstack", "(", "flow", ",", "axis", "=", "-", "1", ")", "\n", "flow_u", "=", "flow_u", "*", "-", "1", "\n", "flow", "=", "tf", ".", "stack", "(", "[", "flow_u", ",", "flow_v", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.data_augmentation.random_flip": [[29, 36], ["tensorflow.random_uniform", "range", "len", "tensorflow.where", "tensorflow.where", "tensorflow.image.flip_left_right", "tensorflow.image.flip_up_down"], "function", ["None"], ["", "def", "random_flip", "(", "img_list", ")", ":", "\n", "    ", "is_flip", "=", "tf", ".", "random_uniform", "(", "[", "2", "]", ",", "minval", "=", "0", ",", "maxval", "=", "2", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "img_list", ")", ")", ":", "\n", "        ", "img_list", "[", "i", "]", "=", "tf", ".", "where", "(", "is_flip", "[", "0", "]", ">", "0", ",", "tf", ".", "image", ".", "flip_left_right", "(", "img_list", "[", "i", "]", ")", ",", "img_list", "[", "i", "]", ")", "\n", "img_list", "[", "i", "]", "=", "tf", ".", "where", "(", "is_flip", "[", "1", "]", ">", "0", ",", "tf", ".", "image", ".", "flip_up_down", "(", "img_list", "[", "i", "]", ")", ",", "img_list", "[", "i", "]", ")", "\n", "", "return", "img_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.data_augmentation.random_flip_with_flow": [[37, 46], ["tensorflow.random_uniform", "range", "range", "len", "tensorflow.where", "tensorflow.where", "len", "tensorflow.where", "tensorflow.where", "tensorflow.image.flip_left_right", "tensorflow.image.flip_up_down", "data_augmentation.flow_horizontal_flip", "data_augmentation.flow_vertical_flip"], "function", ["home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.data_augmentation.flow_horizontal_flip", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.data_augmentation.flow_vertical_flip"], ["", "def", "random_flip_with_flow", "(", "img_list", ",", "flow_list", ")", ":", "\n", "    ", "is_flip", "=", "tf", ".", "random_uniform", "(", "[", "2", "]", ",", "minval", "=", "0", ",", "maxval", "=", "2", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "img_list", ")", ")", ":", "\n", "        ", "img_list", "[", "i", "]", "=", "tf", ".", "where", "(", "is_flip", "[", "0", "]", ">", "0", ",", "tf", ".", "image", ".", "flip_left_right", "(", "img_list", "[", "i", "]", ")", ",", "img_list", "[", "i", "]", ")", "\n", "img_list", "[", "i", "]", "=", "tf", ".", "where", "(", "is_flip", "[", "1", "]", ">", "0", ",", "tf", ".", "image", ".", "flip_up_down", "(", "img_list", "[", "i", "]", ")", ",", "img_list", "[", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "flow_list", ")", ")", ":", "\n", "        ", "flow_list", "[", "i", "]", "=", "tf", ".", "where", "(", "is_flip", "[", "0", "]", ">", "0", ",", "flow_horizontal_flip", "(", "flow_list", "[", "i", "]", ")", ",", "flow_list", "[", "i", "]", ")", "\n", "flow_list", "[", "i", "]", "=", "tf", ".", "where", "(", "is_flip", "[", "1", "]", ">", "0", ",", "flow_vertical_flip", "(", "flow_list", "[", "i", "]", ")", ",", "flow_list", "[", "i", "]", ")", "\n", "", "return", "img_list", ",", "flow_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.data_augmentation.random_channel_swap": [[48, 63], ["tensorflow.constant", "tensorflow.random_uniform", "enumerate", "tensorflow.stack"], "function", ["None"], ["", "def", "random_channel_swap", "(", "img_list", ")", ":", "\n", "    ", "channel_permutation", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "1", ",", "2", "]", ",", "\n", "[", "0", ",", "2", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "2", "]", ",", "\n", "[", "1", ",", "2", ",", "0", "]", ",", "\n", "[", "2", ",", "0", ",", "1", "]", ",", "\n", "[", "2", ",", "1", ",", "0", "]", "]", ")", "\n", "rand_i", "=", "tf", ".", "random_uniform", "(", "[", "]", ",", "minval", "=", "0", ",", "maxval", "=", "6", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "perm", "=", "channel_permutation", "[", "rand_i", "]", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "img_list", ")", ":", "\n", "        ", "channel_1", "=", "img", "[", ":", ",", ":", ",", "perm", "[", "0", "]", "]", "\n", "channel_2", "=", "img", "[", ":", ",", ":", ",", "perm", "[", "1", "]", "]", "\n", "channel_3", "=", "img", "[", ":", ",", ":", ",", "perm", "[", "2", "]", "]", "\n", "img_list", "[", "i", "]", "=", "tf", ".", "stack", "(", "[", "channel_1", ",", "channel_2", ",", "channel_3", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "return", "img_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.data_augmentation.flow_resize": [[64, 75], ["tensorflow.to_float", "tensorflow.image.resize_images", "tensorflow.stack", "tensorflow.multiply", "tensorflow.shape", "tensorflow.to_float"], "function", ["None"], ["", "def", "flow_resize", "(", "flow", ",", "out_size", ",", "is_scale", "=", "True", ",", "method", "=", "0", ")", ":", "\n", "    ", "'''\n        method: 0 mean bilinear, 1 means nearest\n    '''", "\n", "flow_size", "=", "tf", ".", "to_float", "(", "tf", ".", "shape", "(", "flow", ")", "[", "-", "3", ":", "-", "1", "]", ")", "\n", "flow", "=", "tf", ".", "image", ".", "resize_images", "(", "flow", ",", "out_size", ",", "method", "=", "method", ",", "align_corners", "=", "True", ")", "\n", "if", "is_scale", ":", "\n", "        ", "scale", "=", "tf", ".", "to_float", "(", "out_size", ")", "/", "flow_size", "\n", "scale", "=", "tf", ".", "stack", "(", "[", "scale", "[", "1", "]", ",", "scale", "[", "0", "]", "]", ")", "\n", "flow", "=", "tf", ".", "multiply", "(", "flow", ",", "scale", ")", "\n", "", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.feature_extractor": [[7, 30], ["tensorflow.variable_scope", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d"], "function", ["None"], ["def", "feature_extractor", "(", "x", ",", "train", "=", "True", ",", "trainable", "=", "True", ",", "reuse", "=", "None", ",", "regularizer", "=", "None", ",", "name", "=", "'feature_extractor'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ",", "regularizer", "=", "regularizer", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", "]", ",", "activation_fn", "=", "lrelu", ",", "kernel_size", "=", "3", ",", "padding", "=", "'SAME'", ",", "trainable", "=", "trainable", ")", ":", "\n", "            ", "net", "=", "{", "}", "\n", "net", "[", "'conv1_1'", "]", "=", "slim", ".", "conv2d", "(", "x", ",", "16", ",", "stride", "=", "2", ",", "scope", "=", "'conv1_1'", ")", "\n", "net", "[", "'conv1_2'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'conv1_1'", "]", ",", "16", ",", "stride", "=", "1", ",", "scope", "=", "'conv1_2'", ")", "\n", "\n", "net", "[", "'conv2_1'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'conv1_2'", "]", ",", "32", ",", "stride", "=", "2", ",", "scope", "=", "'conv2_1'", ")", "\n", "net", "[", "'conv2_2'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'conv2_1'", "]", ",", "32", ",", "stride", "=", "1", ",", "scope", "=", "'conv2_2'", ")", "\n", "\n", "net", "[", "'conv3_1'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'conv2_2'", "]", ",", "64", ",", "stride", "=", "2", ",", "scope", "=", "'conv3_1'", ")", "\n", "net", "[", "'conv3_2'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'conv3_1'", "]", ",", "64", ",", "stride", "=", "1", ",", "scope", "=", "'conv3_2'", ")", "\n", "\n", "net", "[", "'conv4_1'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'conv3_2'", "]", ",", "96", ",", "stride", "=", "2", ",", "scope", "=", "'conv4_1'", ")", "\n", "net", "[", "'conv4_2'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'conv4_1'", "]", ",", "96", ",", "stride", "=", "1", ",", "scope", "=", "'conv4_2'", ")", "\n", "\n", "net", "[", "'conv5_1'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'conv4_2'", "]", ",", "128", ",", "stride", "=", "2", ",", "scope", "=", "'conv5_1'", ")", "\n", "net", "[", "'conv5_2'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'conv5_1'", "]", ",", "128", ",", "stride", "=", "1", ",", "scope", "=", "'conv5_2'", ")", "\n", "\n", "net", "[", "'conv6_1'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'conv5_2'", "]", ",", "192", ",", "stride", "=", "2", ",", "scope", "=", "'conv6_1'", ")", "\n", "net", "[", "'conv6_2'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'conv6_1'", "]", ",", "192", ",", "stride", "=", "1", ",", "scope", "=", "'conv6_2'", ")", "\n", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.context_network": [[31, 46], ["tensorflow.concat", "tensorflow.variable_scope", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d"], "function", ["None"], ["", "def", "context_network", "(", "x", ",", "flow", ",", "train", "=", "True", ",", "trainable", "=", "True", ",", "reuse", "=", "None", ",", "regularizer", "=", "None", ",", "name", "=", "'context_network'", ")", ":", "\n", "    ", "x_input", "=", "tf", ".", "concat", "(", "[", "x", ",", "flow", "]", ",", "axis", "=", "-", "1", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ",", "regularizer", "=", "regularizer", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", "]", ",", "activation_fn", "=", "lrelu", ",", "kernel_size", "=", "3", ",", "padding", "=", "'SAME'", ",", "trainable", "=", "trainable", ")", ":", "\n", "            ", "net", "=", "{", "}", "\n", "net", "[", "'dilated_conv1'", "]", "=", "slim", ".", "conv2d", "(", "x_input", ",", "128", ",", "rate", "=", "1", ",", "scope", "=", "'dilated_conv1'", ")", "\n", "net", "[", "'dilated_conv2'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'dilated_conv1'", "]", ",", "128", ",", "rate", "=", "2", ",", "scope", "=", "'dilated_conv2'", ")", "\n", "net", "[", "'dilated_conv3'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'dilated_conv2'", "]", ",", "128", ",", "rate", "=", "4", ",", "scope", "=", "'dilated_conv3'", ")", "\n", "net", "[", "'dilated_conv4'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'dilated_conv3'", "]", ",", "96", ",", "rate", "=", "8", ",", "scope", "=", "'dilated_conv4'", ")", "\n", "net", "[", "'dilated_conv5'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'dilated_conv4'", "]", ",", "64", ",", "rate", "=", "16", ",", "scope", "=", "'dilated_conv5'", ")", "\n", "net", "[", "'dilated_conv6'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'dilated_conv5'", "]", ",", "32", ",", "rate", "=", "1", ",", "scope", "=", "'dilated_conv6'", ")", "\n", "net", "[", "'dilated_conv7'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'dilated_conv6'", "]", ",", "2", ",", "rate", "=", "1", ",", "activation_fn", "=", "None", ",", "scope", "=", "'dilated_conv7'", ")", "\n", "\n", "", "", "refined_flow", "=", "net", "[", "'dilated_conv7'", "]", "\n", "return", "refined_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.estimator_network": [[47, 62], ["tensorflow.concat", "tensorflow.variable_scope", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d", "tensorflow.contrib.slim.conv2d"], "function", ["None"], ["", "def", "estimator_network", "(", "x1", ",", "cost_volume", ",", "flow", ",", "train", "=", "True", ",", "trainable", "=", "True", ",", "reuse", "=", "None", ",", "regularizer", "=", "None", ",", "name", "=", "'estimator'", ")", ":", "\n", "    ", "net_input", "=", "tf", ".", "concat", "(", "[", "cost_volume", ",", "x1", ",", "flow", "]", ",", "axis", "=", "-", "1", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ",", "regularizer", "=", "regularizer", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", "]", ",", "activation_fn", "=", "lrelu", ",", "kernel_size", "=", "3", ",", "padding", "=", "'SAME'", ",", "trainable", "=", "trainable", ")", ":", "\n", "            ", "net", "=", "{", "}", "\n", "net", "[", "'conv1'", "]", "=", "slim", ".", "conv2d", "(", "net_input", ",", "128", ",", "scope", "=", "'conv1'", ")", "\n", "net", "[", "'conv2'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'conv1'", "]", ",", "128", ",", "scope", "=", "'conv2'", ")", "\n", "net", "[", "'conv3'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'conv2'", "]", ",", "96", ",", "scope", "=", "'conv3'", ")", "\n", "net", "[", "'conv4'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'conv3'", "]", ",", "64", ",", "scope", "=", "'conv4'", ")", "\n", "net", "[", "'conv5'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'conv4'", "]", ",", "32", ",", "scope", "=", "'conv5'", ")", "\n", "net", "[", "'conv6'", "]", "=", "slim", ".", "conv2d", "(", "net", "[", "'conv5'", "]", ",", "2", ",", "activation_fn", "=", "None", ",", "scope", "=", "'conv6'", ")", "\n", "\n", "#flow_estimated = net['conv6']", "\n", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.compute_cost_volume": [[63, 84], ["tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.extract_image_patches", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.reshape"], "function", ["None"], ["", "def", "compute_cost_volume", "(", "x1", ",", "x2", ",", "H", ",", "W", ",", "channel", ",", "d", "=", "9", ")", ":", "\n", "    ", "x1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "x1", ",", "axis", "=", "3", ")", "\n", "x2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "x2", ",", "axis", "=", "3", ")", "\n", "\n", "# choice 1: use tf.extract_image_patches, may not work for some tensorflow versions", "\n", "x2_patches", "=", "tf", ".", "extract_image_patches", "(", "x2", ",", "[", "1", ",", "d", ",", "d", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "rates", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "\n", "# choice 2: use convolution, but is slower than choice 1", "\n", "# out_channels = d * d", "\n", "# w = tf.eye(out_channels*channel, dtype=tf.float32)", "\n", "# w = tf.reshape(w, (d, d, channel, out_channels*channel))", "\n", "# x2_patches = tf.nn.conv2d(x2, w, strides=[1, 1, 1, 1], padding='SAME')", "\n", "\n", "x2_patches", "=", "tf", ".", "reshape", "(", "x2_patches", ",", "[", "-", "1", ",", "H", ",", "W", ",", "d", ",", "d", ",", "channel", "]", ")", "\n", "x1_reshape", "=", "tf", ".", "reshape", "(", "x1", ",", "[", "-", "1", ",", "H", ",", "W", ",", "1", ",", "1", ",", "channel", "]", ")", "\n", "x1_dot_x2", "=", "tf", ".", "multiply", "(", "x1_reshape", ",", "x2_patches", ")", "\n", "\n", "cost_volume", "=", "tf", ".", "reduce_sum", "(", "x1_dot_x2", ",", "axis", "=", "-", "1", ")", "\n", "#cost_volume = tf.reduce_mean(x1_dot_x2, axis=-1)", "\n", "cost_volume", "=", "tf", ".", "reshape", "(", "cost_volume", ",", "[", "-", "1", ",", "H", ",", "W", ",", "d", "*", "d", "]", ")", "\n", "return", "cost_volume", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.estimator": [[85, 112], ["warp.tf_warp", "warp.tf_warp", "network.compute_cost_volume", "network.compute_cost_volume", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "network.estimator_network", "network.estimator_network", "x1.get_shape().as_list", "tensorflow.shape", "x1.get_shape"], "function", ["home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.warp.tf_warp", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.warp.tf_warp", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.compute_cost_volume", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.compute_cost_volume", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.estimator_network", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.estimator_network"], ["", "def", "estimator", "(", "x0", ",", "x1", ",", "x2", ",", "flow_fw", ",", "flow_bw", ",", "train", "=", "True", ",", "trainable", "=", "True", ",", "reuse", "=", "None", ",", "regularizer", "=", "None", ",", "name", "=", "'estimator'", ")", ":", "\n", "# warp x2 according to flow", "\n", "    ", "if", "train", ":", "\n", "        ", "x_shape", "=", "x1", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "", "else", ":", "\n", "        ", "x_shape", "=", "tf", ".", "shape", "(", "x1", ")", "\n", "", "H", "=", "x_shape", "[", "1", "]", "\n", "W", "=", "x_shape", "[", "2", "]", "\n", "channel", "=", "x_shape", "[", "3", "]", "\n", "x2_warp", "=", "tf_warp", "(", "x2", ",", "flow_fw", ",", "H", ",", "W", ")", "\n", "x0_warp", "=", "tf_warp", "(", "x0", ",", "flow_bw", ",", "H", ",", "W", ")", "\n", "\n", "# ---------------cost volume-----------------", "\n", "\n", "cost_volume_fw", "=", "compute_cost_volume", "(", "x1", ",", "x2_warp", ",", "H", ",", "W", ",", "channel", ",", "d", "=", "9", ")", "\n", "cost_volume_bw", "=", "compute_cost_volume", "(", "x1", ",", "x0_warp", ",", "H", ",", "W", ",", "channel", ",", "d", "=", "9", ")", "\n", "\n", "cv_concat_fw", "=", "tf", ".", "concat", "(", "[", "cost_volume_fw", ",", "cost_volume_bw", "]", ",", "-", "1", ")", "\n", "cv_concat_bw", "=", "tf", ".", "concat", "(", "[", "cost_volume_bw", ",", "cost_volume_fw", "]", ",", "-", "1", ")", "\n", "\n", "flow_concat_fw", "=", "tf", ".", "concat", "(", "[", "flow_fw", ",", "-", "flow_bw", "]", ",", "-", "1", ")", "\n", "flow_concat_bw", "=", "tf", ".", "concat", "(", "[", "flow_bw", ",", "-", "flow_fw", "]", ",", "-", "1", ")", "\n", "\n", "net_fw", "=", "estimator_network", "(", "x1", ",", "cv_concat_fw", ",", "flow_concat_fw", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "reuse", "=", "reuse", ",", "regularizer", "=", "regularizer", ",", "name", "=", "name", ")", "\n", "net_bw", "=", "estimator_network", "(", "x1", ",", "cv_concat_bw", ",", "flow_concat_bw", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "reuse", "=", "True", ",", "regularizer", "=", "regularizer", ",", "name", "=", "name", ")", "\n", "\n", "return", "net_fw", ",", "net_bw", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.pyramid_processing_three_frame": [[113, 149], ["tensorflow.shape", "tensorflow.zeros", "tensorflow.zeros", "network.estimator", "range", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "network.context_network", "data_augmentation.flow_resize", "tensorflow.concat", "network.context_network", "data_augmentation.flow_resize", "data_augmentation.flow_resize", "data_augmentation.flow_resize", "network.estimator", "tensorflow.shape", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.estimator", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.context_network", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.data_augmentation.flow_resize", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.context_network", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.data_augmentation.flow_resize", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.data_augmentation.flow_resize", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.data_augmentation.flow_resize", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.estimator"], ["", "def", "pyramid_processing_three_frame", "(", "batch_img", ",", "x0_feature", ",", "x1_feature", ",", "x2_feature", ",", "train", "=", "True", ",", "trainable", "=", "True", ",", "reuse", "=", "None", ",", "regularizer", "=", "None", ",", "is_scale", "=", "True", ")", ":", "\n", "    ", "x_shape", "=", "tf", ".", "shape", "(", "x1_feature", "[", "'conv6_2'", "]", ")", "\n", "initial_flow_fw", "=", "tf", ".", "zeros", "(", "[", "x_shape", "[", "0", "]", ",", "x_shape", "[", "1", "]", ",", "x_shape", "[", "2", "]", ",", "2", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'initial_flow_fw'", ")", "\n", "initial_flow_bw", "=", "tf", ".", "zeros", "(", "[", "x_shape", "[", "0", "]", ",", "x_shape", "[", "1", "]", ",", "x_shape", "[", "2", "]", ",", "2", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'initial_flow_bw'", ")", "\n", "flow_fw", "=", "{", "}", "\n", "flow_bw", "=", "{", "}", "\n", "net_fw", ",", "net_bw", "=", "estimator", "(", "x0_feature", "[", "'conv6_2'", "]", ",", "x1_feature", "[", "'conv6_2'", "]", ",", "x2_feature", "[", "'conv6_2'", "]", ",", "\n", "initial_flow_fw", ",", "initial_flow_bw", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "reuse", "=", "reuse", ",", "regularizer", "=", "regularizer", ",", "name", "=", "'estimator_level_6'", ")", "\n", "flow_fw", "[", "'level_6'", "]", "=", "net_fw", "[", "'conv6'", "]", "\n", "flow_bw", "[", "'level_6'", "]", "=", "net_bw", "[", "'conv6'", "]", "\n", "\n", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "feature_name", "=", "'conv%d_2'", "%", "(", "5", "-", "i", ")", "\n", "level", "=", "'level_%d'", "%", "(", "5", "-", "i", ")", "\n", "feature_size", "=", "tf", ".", "shape", "(", "x1_feature", "[", "feature_name", "]", ")", "[", "1", ":", "3", "]", "\n", "initial_flow_fw", "=", "flow_resize", "(", "flow_fw", "[", "'level_%d'", "%", "(", "6", "-", "i", ")", "]", ",", "feature_size", ",", "is_scale", "=", "is_scale", ")", "\n", "initial_flow_bw", "=", "flow_resize", "(", "flow_bw", "[", "'level_%d'", "%", "(", "6", "-", "i", ")", "]", ",", "feature_size", ",", "is_scale", "=", "is_scale", ")", "\n", "net_fw", ",", "net_bw", "=", "estimator", "(", "x0_feature", "[", "feature_name", "]", ",", "x1_feature", "[", "feature_name", "]", ",", "x2_feature", "[", "feature_name", "]", ",", "\n", "initial_flow_fw", ",", "initial_flow_bw", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "reuse", "=", "reuse", ",", "regularizer", "=", "regularizer", ",", "name", "=", "'estimator_level_%d'", "%", "(", "5", "-", "i", ")", ")", "\n", "flow_fw", "[", "level", "]", "=", "net_fw", "[", "'conv6'", "]", "\n", "flow_bw", "[", "level", "]", "=", "net_bw", "[", "'conv6'", "]", "\n", "\n", "", "flow_concat_fw", "=", "tf", ".", "concat", "(", "[", "flow_fw", "[", "'level_2'", "]", ",", "-", "flow_bw", "[", "'level_2'", "]", "]", ",", "-", "1", ")", "\n", "flow_concat_bw", "=", "tf", ".", "concat", "(", "[", "flow_bw", "[", "'level_2'", "]", ",", "-", "flow_fw", "[", "'level_2'", "]", "]", ",", "-", "1", ")", "\n", "\n", "x_feature", "=", "tf", ".", "concat", "(", "[", "net_fw", "[", "'conv5'", "]", ",", "net_bw", "[", "'conv5'", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "flow_fw", "[", "'refined'", "]", "=", "context_network", "(", "x_feature", ",", "flow_concat_fw", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "reuse", "=", "reuse", ",", "regularizer", "=", "regularizer", ",", "name", "=", "'context_network'", ")", "\n", "flow_size", "=", "tf", ".", "shape", "(", "batch_img", ")", "[", "1", ":", "3", "]", "\n", "flow_fw", "[", "'full_res'", "]", "=", "flow_resize", "(", "flow_fw", "[", "'refined'", "]", ",", "flow_size", ",", "is_scale", "=", "is_scale", ")", "\n", "\n", "x_feature", "=", "tf", ".", "concat", "(", "[", "net_bw", "[", "'conv5'", "]", ",", "net_fw", "[", "'conv5'", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "flow_bw", "[", "'refined'", "]", "=", "context_network", "(", "x_feature", ",", "flow_concat_bw", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "reuse", "=", "True", ",", "regularizer", "=", "regularizer", ",", "name", "=", "'context_network'", ")", "\n", "flow_bw", "[", "'full_res'", "]", "=", "flow_resize", "(", "flow_bw", "[", "'refined'", "]", ",", "flow_size", ",", "is_scale", "=", "is_scale", ")", "\n", "\n", "return", "flow_fw", ",", "flow_bw", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.pyramid_processing": [[151, 159], ["network.feature_extractor", "network.feature_extractor", "network.feature_extractor", "network.pyramid_processing_three_frame"], "function", ["home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.feature_extractor", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.feature_extractor", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.feature_extractor", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.pyramid_processing_three_frame"], ["", "def", "pyramid_processing", "(", "batch_img0", ",", "batch_img1", ",", "batch_img2", ",", "train", "=", "True", ",", "trainable", "=", "True", ",", "reuse", "=", "None", ",", "regularizer", "=", "None", ",", "is_scale", "=", "True", ")", ":", "\n", "    ", "x0_feature", "=", "feature_extractor", "(", "batch_img0", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "regularizer", "=", "regularizer", ",", "name", "=", "'feature_extractor'", ")", "\n", "x1_feature", "=", "feature_extractor", "(", "batch_img1", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "reuse", "=", "True", ",", "regularizer", "=", "regularizer", ",", "name", "=", "'feature_extractor'", ")", "\n", "x2_feature", "=", "feature_extractor", "(", "batch_img2", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "reuse", "=", "True", ",", "regularizer", "=", "regularizer", ",", "name", "=", "'feature_extractor'", ")", "\n", "\n", "flow_fw", ",", "flow_bw", "=", "pyramid_processing_three_frame", "(", "batch_img0", ",", "x0_feature", ",", "x1_feature", ",", "x2_feature", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "\n", "reuse", "=", "reuse", ",", "regularizer", "=", "regularizer", ",", "is_scale", "=", "is_scale", ")", "\n", "return", "flow_fw", ",", "flow_bw", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.pyramid_processing_five_frame": [[161, 173], ["network.feature_extractor", "network.feature_extractor", "network.feature_extractor", "network.feature_extractor", "network.feature_extractor", "network.pyramid_processing_three_frame", "network.pyramid_processing_three_frame", "network.pyramid_processing_three_frame"], "function", ["home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.feature_extractor", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.feature_extractor", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.feature_extractor", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.feature_extractor", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.feature_extractor", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.pyramid_processing_three_frame", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.pyramid_processing_three_frame", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.pyramid_processing_three_frame"], ["", "def", "pyramid_processing_five_frame", "(", "batch_img0", ",", "batch_img1", ",", "batch_img2", ",", "batch_img3", ",", "batch_img4", ",", "train", "=", "True", ",", "trainable", "=", "True", ",", "regularizer", "=", "None", ",", "is_scale", "=", "True", ")", ":", "\n", "    ", "x0_feature", "=", "feature_extractor", "(", "batch_img0", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "regularizer", "=", "regularizer", ",", "name", "=", "'feature_extractor'", ")", "\n", "x1_feature", "=", "feature_extractor", "(", "batch_img1", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "reuse", "=", "True", ",", "regularizer", "=", "regularizer", ",", "name", "=", "'feature_extractor'", ")", "\n", "x2_feature", "=", "feature_extractor", "(", "batch_img2", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "reuse", "=", "True", ",", "regularizer", "=", "regularizer", ",", "name", "=", "'feature_extractor'", ")", "\n", "x3_feature", "=", "feature_extractor", "(", "batch_img3", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "reuse", "=", "True", ",", "regularizer", "=", "regularizer", ",", "name", "=", "'feature_extractor'", ")", "\n", "x4_feature", "=", "feature_extractor", "(", "batch_img4", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "reuse", "=", "True", ",", "regularizer", "=", "regularizer", ",", "name", "=", "'feature_extractor'", ")", "\n", "\n", "flow_fw_12", ",", "flow_bw_10", "=", "pyramid_processing_three_frame", "(", "batch_img0", ",", "x0_feature", ",", "x1_feature", ",", "x2_feature", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "reuse", "=", "None", ",", "regularizer", "=", "regularizer", ",", "is_scale", "=", "is_scale", ")", "\n", "flow_fw_23", ",", "flow_bw_21", "=", "pyramid_processing_three_frame", "(", "batch_img0", ",", "x1_feature", ",", "x2_feature", ",", "x3_feature", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "reuse", "=", "True", ",", "regularizer", "=", "regularizer", ",", "is_scale", "=", "is_scale", ")", "\n", "flow_fw_34", ",", "flow_bw_32", "=", "pyramid_processing_three_frame", "(", "batch_img0", ",", "x2_feature", ",", "x3_feature", ",", "x4_feature", ",", "train", "=", "train", ",", "trainable", "=", "trainable", ",", "reuse", "=", "True", ",", "regularizer", "=", "regularizer", ",", "is_scale", "=", "is_scale", ")", "\n", "\n", "return", "flow_fw_12", ",", "flow_bw_10", ",", "flow_fw_23", ",", "flow_bw_21", ",", "flow_fw_34", ",", "flow_bw_32", "\n", "", ""]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.warp.get_pixel_value": [[3, 28], ["tensorflow.shape", "tensorflow.range", "tensorflow.reshape", "tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd"], "function", ["None"], ["def", "get_pixel_value", "(", "img", ",", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Utility function to get pixel value for coordinate\n    vectors x and y from a  4D tensor image.\n    Input\n    -----\n    - img: tensor of shape (B, H, W, C)\n    - x: flattened tensor of shape (B*H*W, )\n    - y: flattened tensor of shape (B*H*W, )\n    Returns\n    -------\n    - output: tensor of shape (B, H, W, C)\n    \"\"\"", "\n", "shape", "=", "tf", ".", "shape", "(", "x", ")", "\n", "batch_size", "=", "shape", "[", "0", "]", "\n", "height", "=", "shape", "[", "1", "]", "\n", "width", "=", "shape", "[", "2", "]", "\n", "\n", "batch_idx", "=", "tf", ".", "range", "(", "0", ",", "batch_size", ")", "\n", "batch_idx", "=", "tf", ".", "reshape", "(", "batch_idx", ",", "(", "batch_size", ",", "1", ",", "1", ")", ")", "\n", "b", "=", "tf", ".", "tile", "(", "batch_idx", ",", "(", "1", ",", "height", ",", "width", ")", ")", "\n", "\n", "indices", "=", "tf", ".", "stack", "(", "[", "b", ",", "y", ",", "x", "]", ",", "3", ")", "\n", "\n", "return", "tf", ".", "gather_nd", "(", "img", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.warp.tf_warp": [[29, 92], ["tensorflow.meshgrid", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.cast", "tensorflow.cast", "tensorflow.concat", "tensorflow.cast", "tensorflow.cast", "tensorflow.zeros", "tensorflow.cast", "tensorflow.cast", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "warp.get_pixel_value", "warp.get_pixel_value", "warp.get_pixel_value", "warp.get_pixel_value", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.add_n", "tensorflow.range", "tensorflow.range"], "function", ["home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.warp.get_pixel_value", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.warp.get_pixel_value", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.warp.get_pixel_value", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.warp.get_pixel_value"], ["", "def", "tf_warp", "(", "img", ",", "flow", ",", "H", ",", "W", ")", ":", "\n", "#    H = 256", "\n", "#    W = 256", "\n", "    ", "x", ",", "y", "=", "tf", ".", "meshgrid", "(", "tf", ".", "range", "(", "W", ")", ",", "tf", ".", "range", "(", "H", ")", ")", "\n", "x", "=", "tf", ".", "expand_dims", "(", "x", ",", "0", ")", "\n", "x", "=", "tf", ".", "expand_dims", "(", "x", ",", "-", "1", ")", "\n", "\n", "y", "=", "tf", ".", "expand_dims", "(", "y", ",", "0", ")", "\n", "y", "=", "tf", ".", "expand_dims", "(", "y", ",", "-", "1", ")", "\n", "\n", "x", "=", "tf", ".", "cast", "(", "x", ",", "tf", ".", "float32", ")", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "tf", ".", "float32", ")", "\n", "grid", "=", "tf", ".", "concat", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "-", "1", ")", "\n", "#    print grid.shape", "\n", "flows", "=", "grid", "+", "flow", "\n", "#print(flows.shape)", "\n", "max_y", "=", "tf", ".", "cast", "(", "H", "-", "1", ",", "tf", ".", "int32", ")", "\n", "max_x", "=", "tf", ".", "cast", "(", "W", "-", "1", ",", "tf", ".", "int32", ")", "\n", "zero", "=", "tf", ".", "zeros", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "x", "=", "flows", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "y", "=", "flows", "[", ":", ",", ":", ",", ":", ",", "1", "]", "\n", "x0", "=", "x", "\n", "y0", "=", "y", "\n", "x0", "=", "tf", ".", "cast", "(", "x0", ",", "tf", ".", "int32", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "y0", "=", "tf", ".", "cast", "(", "y0", ",", "tf", ".", "int32", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "\n", "# clip to range [0, H/W] to not violate img boundaries", "\n", "x0", "=", "tf", ".", "clip_by_value", "(", "x0", ",", "zero", ",", "max_x", ")", "\n", "x1", "=", "tf", ".", "clip_by_value", "(", "x1", ",", "zero", ",", "max_x", ")", "\n", "y0", "=", "tf", ".", "clip_by_value", "(", "y0", ",", "zero", ",", "max_y", ")", "\n", "y1", "=", "tf", ".", "clip_by_value", "(", "y1", ",", "zero", ",", "max_y", ")", "\n", "\n", "# get pixel value at corner coords", "\n", "Ia", "=", "get_pixel_value", "(", "img", ",", "x0", ",", "y0", ")", "\n", "Ib", "=", "get_pixel_value", "(", "img", ",", "x0", ",", "y1", ")", "\n", "Ic", "=", "get_pixel_value", "(", "img", ",", "x1", ",", "y0", ")", "\n", "Id", "=", "get_pixel_value", "(", "img", ",", "x1", ",", "y1", ")", "\n", "\n", "# recast as float for delta calculation", "\n", "x0", "=", "tf", ".", "cast", "(", "x0", ",", "tf", ".", "float32", ")", "\n", "x1", "=", "tf", ".", "cast", "(", "x1", ",", "tf", ".", "float32", ")", "\n", "y0", "=", "tf", ".", "cast", "(", "y0", ",", "tf", ".", "float32", ")", "\n", "y1", "=", "tf", ".", "cast", "(", "y1", ",", "tf", ".", "float32", ")", "\n", "\n", "\n", "# calculate deltas", "\n", "wa", "=", "(", "x1", "-", "x", ")", "*", "(", "y1", "-", "y", ")", "\n", "wb", "=", "(", "x1", "-", "x", ")", "*", "(", "y", "-", "y0", ")", "\n", "wc", "=", "(", "x", "-", "x0", ")", "*", "(", "y1", "-", "y", ")", "\n", "wd", "=", "(", "x", "-", "x0", ")", "*", "(", "y", "-", "y0", ")", "\n", "\n", "# add dimension for addition", "\n", "wa", "=", "tf", ".", "expand_dims", "(", "wa", ",", "axis", "=", "3", ")", "\n", "wb", "=", "tf", ".", "expand_dims", "(", "wb", ",", "axis", "=", "3", ")", "\n", "wc", "=", "tf", ".", "expand_dims", "(", "wc", ",", "axis", "=", "3", ")", "\n", "wd", "=", "tf", ".", "expand_dims", "(", "wd", ",", "axis", "=", "3", ")", "\n", "\n", "# compute output", "\n", "out", "=", "tf", ".", "add_n", "(", "[", "wa", "*", "Ia", ",", "wb", "*", "Ib", ",", "wc", "*", "Ic", ",", "wd", "*", "Id", "]", ")", "\n", "return", "out", "", "", ""]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.selflow_model.SelFlowModel.__init__": [[23, 81], ["int", "numpy.mod", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "numpy.maximum"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", "=", "8", ",", "iter_steps", "=", "1000000", ",", "initial_learning_rate", "=", "1e-4", ",", "decay_steps", "=", "2e5", ",", "\n", "decay_rate", "=", "0.5", ",", "is_scale", "=", "True", ",", "num_input_threads", "=", "4", ",", "buffer_size", "=", "5000", ",", "\n", "beta1", "=", "0.9", ",", "num_gpus", "=", "1", ",", "save_checkpoint_interval", "=", "5000", ",", "write_summary_interval", "=", "200", ",", "\n", "display_log_interval", "=", "50", ",", "allow_soft_placement", "=", "True", ",", "log_device_placement", "=", "False", ",", "\n", "regularizer_scale", "=", "1e-4", ",", "cpu_device", "=", "'/cpu:0'", ",", "save_dir", "=", "'KITTI'", ",", "checkpoint_dir", "=", "'checkpoints'", ",", "\n", "model_name", "=", "'model'", ",", "sample_dir", "=", "'sample'", ",", "summary_dir", "=", "'summary'", ",", "training_mode", "=", "\"no_distillation\"", ",", "\n", "is_restore_model", "=", "False", ",", "restore_model", "=", "'./models/KITTI/no_census_no_occlusion'", ",", "\n", "dataset_config", "=", "{", "}", ",", "self_supervision_config", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "iter_steps", "=", "iter_steps", "\n", "self", ".", "initial_learning_rate", "=", "initial_learning_rate", "\n", "self", ".", "decay_steps", "=", "decay_steps", "\n", "self", ".", "decay_rate", "=", "decay_rate", "\n", "self", ".", "is_scale", "=", "is_scale", "\n", "self", ".", "num_input_threads", "=", "num_input_threads", "\n", "self", ".", "buffer_size", "=", "buffer_size", "\n", "self", ".", "beta1", "=", "beta1", "\n", "self", ".", "num_gpus", "=", "num_gpus", "\n", "self", ".", "save_checkpoint_interval", "=", "save_checkpoint_interval", "\n", "self", ".", "write_summary_interval", "=", "write_summary_interval", "\n", "self", ".", "display_log_interval", "=", "display_log_interval", "\n", "self", ".", "allow_soft_placement", "=", "allow_soft_placement", "\n", "self", ".", "log_device_placement", "=", "log_device_placement", "\n", "self", ".", "regularizer_scale", "=", "regularizer_scale", "\n", "self", ".", "training_mode", "=", "training_mode", "\n", "self", ".", "is_restore_model", "=", "is_restore_model", "\n", "self", ".", "restore_model", "=", "restore_model", "\n", "self", ".", "dataset_config", "=", "dataset_config", "\n", "self", ".", "self_supervision_config", "=", "self_supervision_config", "\n", "self", ".", "shared_device", "=", "'/gpu:0'", "if", "self", ".", "num_gpus", "==", "1", "else", "cpu_device", "\n", "assert", "(", "np", ".", "mod", "(", "batch_size", ",", "num_gpus", ")", "==", "0", ")", "\n", "self", ".", "batch_size_per_gpu", "=", "int", "(", "batch_size", "/", "np", ".", "maximum", "(", "num_gpus", ",", "1", ")", ")", "\n", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "save_dir", ")", "\n", "\n", "", "self", ".", "checkpoint_dir", "=", "'/'", ".", "join", "(", "[", "self", ".", "save_dir", ",", "checkpoint_dir", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "checkpoint_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "checkpoint_dir", ")", "\n", "\n", "", "self", ".", "model_name", "=", "model_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'/'", ".", "join", "(", "[", "self", ".", "checkpoint_dir", ",", "model_name", "]", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "(", "'/'", ".", "join", "(", "[", "self", ".", "checkpoint_dir", ",", "self", ".", "model_name", "]", ")", ")", ")", "\n", "\n", "", "self", ".", "sample_dir", "=", "'/'", ".", "join", "(", "[", "self", ".", "save_dir", ",", "sample_dir", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "sample_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "sample_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'/'", ".", "join", "(", "[", "self", ".", "sample_dir", ",", "self", ".", "model_name", "]", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "(", "'/'", ".", "join", "(", "[", "self", ".", "sample_dir", ",", "self", ".", "model_name", "]", ")", ")", ")", "\n", "\n", "", "self", ".", "summary_dir", "=", "'/'", ".", "join", "(", "[", "self", ".", "save_dir", ",", "summary_dir", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "summary_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "summary_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'/'", ".", "join", "(", "[", "self", ".", "summary_dir", ",", "'train'", "]", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "(", "'/'", ".", "join", "(", "[", "self", ".", "summary_dir", ",", "'train'", "]", ")", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'/'", ".", "join", "(", "[", "self", ".", "summary_dir", ",", "'test'", "]", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "(", "'/'", ".", "join", "(", "[", "self", ".", "summary_dir", ",", "'test'", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.selflow_model.SelFlowModel.test": [[83, 121], ["datasets.BasicDataset", "datasets.BasicDataset.create_one_shot_iterator", "datasets.BasicDataset.create_one_shot_iterator.get_next", "tensorflow.shape", "tensorflow.where", "tensorflow.where", "tensorflow.image.resize_images", "tensorflow.image.resize_images", "tensorflow.image.resize_images", "network.pyramid_processing", "data_augmentation.flow_resize", "data_augmentation.flow_resize", "flowlib.flow_to_color", "flowlib.flow_to_color", "tensorflow.get_collection", "tensorflow.train.Saver", "tensorflow.Session", "tensorflow.Session.run", "tensorflow.Session.run", "tensorflow.train.Saver.restore", "range", "tensorflow.equal", "tensorflow.equal", "tensorflow.global_variables_initializer", "os.path.exists", "os.makedirs", "tensorflow.Session.run", "scipy.misc.imsave", "scipy.misc.imsave", "flowlib.write_flo", "flowlib.write_flo", "print", "tensorflow.mod", "tensorflow.to_int32", "tensorflow.mod", "tensorflow.to_int32", "tensorflow.floor", "tensorflow.floor"], "methods", ["home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.datasets.BasicDataset.create_one_shot_iterator", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.network.pyramid_processing", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.data_augmentation.flow_resize", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.data_augmentation.flow_resize", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.flowlib.flow_to_color", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.flowlib.flow_to_color", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.flowlib.write_flo", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.flowlib.write_flo"], ["", "", "def", "test", "(", "self", ",", "restore_model", ",", "save_dir", ",", "is_normalize_img", "=", "True", ")", ":", "\n", "        ", "dataset", "=", "BasicDataset", "(", "data_list_file", "=", "self", ".", "dataset_config", "[", "'data_list_file'", "]", ",", "img_dir", "=", "self", ".", "dataset_config", "[", "'img_dir'", "]", ",", "is_normalize_img", "=", "is_normalize_img", ")", "\n", "save_name_list", "=", "dataset", ".", "data_list", "[", ":", ",", "-", "1", "]", "\n", "iterator", "=", "dataset", ".", "create_one_shot_iterator", "(", "dataset", ".", "data_list", ",", "num_parallel_calls", "=", "self", ".", "num_input_threads", ")", "\n", "batch_img0", ",", "batch_img1", ",", "batch_img2", "=", "iterator", ".", "get_next", "(", ")", "\n", "img_shape", "=", "tf", ".", "shape", "(", "batch_img0", ")", "\n", "h", "=", "img_shape", "[", "1", "]", "\n", "w", "=", "img_shape", "[", "2", "]", "\n", "\n", "new_h", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "tf", ".", "mod", "(", "h", ",", "64", ")", ",", "0", ")", ",", "h", ",", "(", "tf", ".", "to_int32", "(", "tf", ".", "floor", "(", "h", "/", "64", ")", "+", "1", ")", ")", "*", "64", ")", "\n", "new_w", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "tf", ".", "mod", "(", "w", ",", "64", ")", ",", "0", ")", ",", "w", ",", "(", "tf", ".", "to_int32", "(", "tf", ".", "floor", "(", "w", "/", "64", ")", "+", "1", ")", ")", "*", "64", ")", "\n", "\n", "batch_img0", "=", "tf", ".", "image", ".", "resize_images", "(", "batch_img0", ",", "[", "new_h", ",", "new_w", "]", ",", "method", "=", "1", ",", "align_corners", "=", "True", ")", "\n", "batch_img1", "=", "tf", ".", "image", ".", "resize_images", "(", "batch_img1", ",", "[", "new_h", ",", "new_w", "]", ",", "method", "=", "1", ",", "align_corners", "=", "True", ")", "\n", "batch_img2", "=", "tf", ".", "image", ".", "resize_images", "(", "batch_img2", ",", "[", "new_h", ",", "new_w", "]", ",", "method", "=", "1", ",", "align_corners", "=", "True", ")", "\n", "\n", "flow_fw", ",", "flow_bw", "=", "pyramid_processing", "(", "batch_img0", ",", "batch_img1", ",", "batch_img2", ",", "train", "=", "False", ",", "trainable", "=", "False", ",", "is_scale", "=", "True", ")", "\n", "flow_fw", "[", "'full_res'", "]", "=", "flow_resize", "(", "flow_fw", "[", "'full_res'", "]", ",", "[", "h", ",", "w", "]", ",", "method", "=", "1", ")", "\n", "flow_bw", "[", "'full_res'", "]", "=", "flow_resize", "(", "flow_bw", "[", "'full_res'", "]", ",", "[", "h", ",", "w", "]", ",", "method", "=", "1", ")", "\n", "\n", "flow_fw_color", "=", "flow_to_color", "(", "flow_fw", "[", "'full_res'", "]", ",", "mask", "=", "None", ",", "max_flow", "=", "256", ")", "\n", "flow_bw_color", "=", "flow_to_color", "(", "flow_bw", "[", "'full_res'", "]", ",", "mask", "=", "None", ",", "max_flow", "=", "256", ")", "\n", "\n", "restore_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "restore_vars", ")", "\n", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "iterator", ".", "initializer", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "restore_model", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "for", "i", "in", "range", "(", "dataset", ".", "data_num", ")", ":", "\n", "            ", "np_flow_fw", ",", "np_flow_bw", ",", "np_flow_fw_color", ",", "np_flow_bw_color", "=", "sess", ".", "run", "(", "[", "flow_fw", "[", "'full_res'", "]", ",", "flow_bw", "[", "'full_res'", "]", ",", "flow_fw_color", ",", "flow_bw_color", "]", ")", "\n", "misc", ".", "imsave", "(", "'%s/flow_fw_color_%s.png'", "%", "(", "save_dir", ",", "save_name_list", "[", "i", "]", ")", ",", "np_flow_fw_color", "[", "0", "]", ")", "\n", "misc", ".", "imsave", "(", "'%s/flow_bw_color_%s.png'", "%", "(", "save_dir", ",", "save_name_list", "[", "i", "]", ")", ",", "np_flow_bw_color", "[", "0", "]", ")", "\n", "write_flo", "(", "'%s/flow_fw_%s.flo'", "%", "(", "save_dir", ",", "save_name_list", "[", "i", "]", ")", ",", "np_flow_fw", "[", "0", "]", ")", "\n", "write_flo", "(", "'%s/flow_bw_%s.flo'", "%", "(", "save_dir", ",", "save_name_list", "[", "i", "]", ")", ",", "np_flow_bw", "[", "0", "]", ")", "\n", "print", "(", "'Finish %d/%d'", "%", "(", "i", "+", "1", ",", "dataset", ".", "data_num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.mvn": [[6, 11], ["tensorflow.nn.moments", "tensorflow.sqrt"], "function", ["None"], ["def", "mvn", "(", "img", ")", ":", "\n", "# minus mean color and divided by standard variance", "\n", "    ", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "img", ",", "axes", "=", "[", "0", ",", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "img", "=", "(", "img", "-", "mean", ")", "/", "tf", ".", "sqrt", "(", "var", "+", "1e-12", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.lrelu": [[12, 14], ["tensorflow.maximum"], "function", ["None"], ["", "def", "lrelu", "(", "x", ",", "leak", "=", "0.2", ",", "name", "=", "'leaky_relu'", ")", ":", "\n", "    ", "return", "tf", ".", "maximum", "(", "x", ",", "leak", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.imshow": [[15, 31], ["np.repeat.astype", "matplotlib.imshow", "matplotlib.show", "numpy.min", "numpy.max", "len", "numpy.repeat", "numpy.max", "numpy.expand_dims", "numpy.repeat"], "function", ["home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.imshow"], ["", "def", "imshow", "(", "img", ",", "re_normalize", "=", "False", ")", ":", "\n", "    ", "if", "re_normalize", ":", "\n", "        ", "min_value", "=", "np", ".", "min", "(", "img", ")", "\n", "max_value", "=", "np", ".", "max", "(", "img", ")", "\n", "img", "=", "(", "img", "-", "min_value", ")", "/", "(", "max_value", "-", "min_value", ")", "\n", "img", "=", "img", "*", "255", "\n", "", "elif", "np", ".", "max", "(", "img", ")", "<=", "1.", ":", "\n", "        ", "img", "=", "img", "*", "255", "\n", "", "img", "=", "img", ".", "astype", "(", "'uint8'", ")", "\n", "shape", "=", "img", ".", "shape", "\n", "if", "len", "(", "shape", ")", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "img", ",", "-", "1", ")", ",", "3", ",", "-", "1", ")", "\n", "", "elif", "shape", "[", "2", "]", "==", "1", ":", "\n", "        ", "img", "=", "np", ".", "repeat", "(", "img", ",", "3", ",", "-", "1", ")", "\n", "", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.rgb_bgr": [[32, 37], ["numpy.copy", "numpy.copy", "numpy.copy"], "function", ["None"], ["", "def", "rgb_bgr", "(", "img", ")", ":", "\n", "    ", "tmp", "=", "np", ".", "copy", "(", "img", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "img", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "copy", "(", "img", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "img", "[", ":", ",", ":", ",", "2", "]", "=", "np", ".", "copy", "(", "tmp", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.compute_Fl": [[38, 48], ["tensorflow.multiply", "tensorflow.norm", "tensorflow.maximum", "tensorflow.logical_and", "tensorflow.cast", "tensorflow.norm", "tensorflow.logical_and", "tensorflow.reduce_sum", "tensorflow.divide", "tensorflow.expand_dims", "tensorflow.reduce_sum"], "function", ["None"], ["", "def", "compute_Fl", "(", "flow_gt", ",", "flow_est", ",", "mask", ")", ":", "\n", "# F1 measure", "\n", "    ", "err", "=", "tf", ".", "multiply", "(", "flow_gt", "-", "flow_est", ",", "mask", ")", "\n", "err_norm", "=", "tf", ".", "norm", "(", "err", ",", "axis", "=", "-", "1", ")", "\n", "\n", "flow_gt_norm", "=", "tf", ".", "maximum", "(", "tf", ".", "norm", "(", "flow_gt", ",", "axis", "=", "-", "1", ")", ",", "1e-12", ")", "\n", "F1_logic", "=", "tf", ".", "logical_and", "(", "err_norm", ">", "3", ",", "tf", ".", "divide", "(", "err_norm", ",", "flow_gt_norm", ")", ">", "0.05", ")", "\n", "F1_logic", "=", "tf", ".", "cast", "(", "tf", ".", "logical_and", "(", "tf", ".", "expand_dims", "(", "F1_logic", ",", "-", "1", ")", ",", "mask", ">", "0", ")", ",", "tf", ".", "float32", ")", "\n", "F1", "=", "tf", ".", "reduce_sum", "(", "F1_logic", ")", "/", "(", "tf", ".", "reduce_sum", "(", "mask", ")", "+", "1e-6", ")", "\n", "return", "F1", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.average_gradients": [[49, 84], ["zip", "tensorflow.concat", "tensorflow.reduce_mean", "average_grads.append", "tensorflow.expand_dims", "grads.append"], "function", ["None"], ["", "def", "average_gradients", "(", "tower_grads", ")", ":", "\n", "    ", "\"\"\"Calculate the average gradient for each shared variable across all towers.\n    Note that this function provides a synchronization point across all towers.\n    Args:\n    tower_grads: List of lists of (gradient, variable) tuples. The outer list\n      is over individual gradients. The inner list is over the gradient\n      calculation for each tower.\n    Returns:\n     List of pairs of (gradient, variable) where the gradient has been averaged\n     across all towers.\n    \"\"\"", "\n", "average_grads", "=", "[", "]", "\n", "for", "grad_and_vars", "in", "zip", "(", "*", "tower_grads", ")", ":", "\n", "# Note that each grad_and_vars looks like the following:", "\n", "#   ((grad0_gpu0, var0_gpu0), ... , (grad0_gpuN, var0_gpuN))", "\n", "        ", "grads", "=", "[", "]", "\n", "for", "g", ",", "_", "in", "grad_and_vars", ":", "\n", "            ", "if", "g", "is", "not", "None", ":", "\n", "# Add 0 dimension to the gradients to represent the tower.", "\n", "                ", "expanded_g", "=", "tf", ".", "expand_dims", "(", "g", ",", "0", ")", "\n", "\n", "# Append on a 'tower' dimension which we will average over below.", "\n", "grads", ".", "append", "(", "expanded_g", ")", "\n", "", "", "if", "grads", "!=", "[", "]", ":", "\n", "# Average over the 'tower' dimension.", "\n", "            ", "grad", "=", "tf", ".", "concat", "(", "grads", ",", "0", ")", "\n", "grad", "=", "tf", ".", "reduce_mean", "(", "grad", ",", "0", ")", "\n", "\n", "# Keep in mind that the Variables are redundant because they are shared", "\n", "# across towers. So .. we will just return the first tower's pointer to", "\n", "# the Variable.", "\n", "v", "=", "grad_and_vars", "[", "0", "]", "[", "1", "]", "\n", "grad_and_var", "=", "(", "grad", ",", "v", ")", "\n", "average_grads", ".", "append", "(", "grad_and_var", ")", "\n", "", "", "return", "average_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.length_sq": [[86, 88], ["tensorflow.reduce_sum", "tensorflow.square"], "function", ["None"], ["", "def", "length_sq", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "x", ")", ",", "3", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.occlusion": [[89, 105], ["tensorflow.shape", "warp.tf_warp", "warp.tf_warp", "tensorflow.cast", "tensorflow.cast", "utils.length_sq", "utils.length_sq", "utils.length_sq", "utils.length_sq", "utils.length_sq", "utils.length_sq"], "function", ["home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.warp.tf_warp", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.warp.tf_warp", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.length_sq", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.length_sq", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.length_sq", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.length_sq", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.length_sq", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.length_sq"], ["", "def", "occlusion", "(", "flow_fw", ",", "flow_bw", ")", ":", "\n", "    ", "x_shape", "=", "tf", ".", "shape", "(", "flow_fw", ")", "\n", "H", "=", "x_shape", "[", "1", "]", "\n", "W", "=", "x_shape", "[", "2", "]", "\n", "flow_bw_warped", "=", "tf_warp", "(", "flow_bw", ",", "flow_fw", ",", "H", ",", "W", ")", "\n", "flow_fw_warped", "=", "tf_warp", "(", "flow_fw", ",", "flow_bw", ",", "H", ",", "W", ")", "\n", "flow_diff_fw", "=", "flow_fw", "+", "flow_bw_warped", "\n", "flow_diff_bw", "=", "flow_bw", "+", "flow_fw_warped", "\n", "mag_sq_fw", "=", "length_sq", "(", "flow_fw", ")", "+", "length_sq", "(", "flow_bw_warped", ")", "\n", "mag_sq_bw", "=", "length_sq", "(", "flow_bw", ")", "+", "length_sq", "(", "flow_fw_warped", ")", "\n", "occ_thresh_fw", "=", "0.01", "*", "mag_sq_fw", "+", "0.5", "\n", "occ_thresh_bw", "=", "0.01", "*", "mag_sq_bw", "+", "0.5", "\n", "occ_fw", "=", "tf", ".", "cast", "(", "length_sq", "(", "flow_diff_fw", ")", ">", "occ_thresh_fw", ",", "tf", ".", "float32", ")", "\n", "occ_bw", "=", "tf", ".", "cast", "(", "length_sq", "(", "flow_diff_bw", ")", ">", "occ_thresh_bw", ",", "tf", ".", "float32", ")", "\n", "\n", "return", "occ_fw", ",", "occ_bw", "", "", ""]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.datasets.BasicDataset.__init__": [[12, 22], ["numpy.loadtxt().astype", "numpy.loadtxt"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_h", "=", "320", ",", "crop_w", "=", "896", ",", "batch_size", "=", "4", ",", "data_list_file", "=", "'path_to_your_data_list_file'", ",", "\n", "img_dir", "=", "'path_to_your_image_directory'", ",", "fake_flow_occ_dir", "=", "'path_to_your_fake_flow_occlusion_directory'", ",", "is_normalize_img", "=", "True", ")", ":", "\n", "        ", "self", ".", "crop_h", "=", "crop_h", "\n", "self", ".", "crop_w", "=", "crop_w", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "img_dir", "=", "img_dir", "\n", "self", ".", "data_list", "=", "np", ".", "loadtxt", "(", "data_list_file", ",", "dtype", "=", "bytes", ")", ".", "astype", "(", "np", ".", "str", ")", "\n", "self", ".", "data_num", "=", "self", ".", "data_list", ".", "shape", "[", "0", "]", "\n", "self", ".", "fake_flow_occ_dir", "=", "fake_flow_occ_dir", "\n", "self", ".", "is_normalize_img", "=", "is_normalize_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.datasets.BasicDataset.extract_flow_and_mask": [[25, 32], ["tensorflow.cast", "tensorflow.expand_dims", "tensorflow.greater"], "methods", ["None"], ["", "def", "extract_flow_and_mask", "(", "self", ",", "flow", ")", ":", "\n", "        ", "optical_flow", "=", "flow", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "optical_flow", "=", "(", "optical_flow", "-", "32768", ")", "/", "64.0", "\n", "mask", "=", "tf", ".", "cast", "(", "tf", ".", "greater", "(", "flow", "[", ":", ",", ":", ",", "2", "]", ",", "0", ")", ",", "tf", ".", "float32", ")", "\n", "#mask = tf.cast(flow[:, :, 2], tf.float32)", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "mask", ",", "-", "1", ")", "\n", "return", "optical_flow", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.datasets.BasicDataset.read_and_decode": [[34, 47], ["tensorflow.string_join", "tensorflow.string_join", "tensorflow.string_join", "tensorflow.image.decode_png", "tensorflow.cast", "tensorflow.image.decode_png", "tensorflow.cast", "tensorflow.image.decode_png", "tensorflow.cast", "tensorflow.read_file", "tensorflow.read_file", "tensorflow.read_file"], "methods", ["None"], ["", "def", "read_and_decode", "(", "self", ",", "filename_queue", ")", ":", "\n", "        ", "img0_name", "=", "tf", ".", "string_join", "(", "[", "self", ".", "img_dir", ",", "'/'", ",", "filename_queue", "[", "0", "]", "]", ")", "\n", "img1_name", "=", "tf", ".", "string_join", "(", "[", "self", ".", "img_dir", ",", "'/'", ",", "filename_queue", "[", "1", "]", "]", ")", "\n", "img2_name", "=", "tf", ".", "string_join", "(", "[", "self", ".", "img_dir", ",", "'/'", ",", "filename_queue", "[", "2", "]", "]", ")", "\n", "\n", "img0", "=", "tf", ".", "image", ".", "decode_png", "(", "tf", ".", "read_file", "(", "img0_name", ")", ",", "channels", "=", "3", ")", "\n", "img0", "=", "tf", ".", "cast", "(", "img0", ",", "tf", ".", "float32", ")", "\n", "img1", "=", "tf", ".", "image", ".", "decode_png", "(", "tf", ".", "read_file", "(", "img1_name", ")", ",", "channels", "=", "3", ")", "\n", "img1", "=", "tf", ".", "cast", "(", "img1", ",", "tf", ".", "float32", ")", "\n", "img2", "=", "tf", ".", "image", ".", "decode_png", "(", "tf", ".", "read_file", "(", "img2_name", ")", ",", "channels", "=", "3", ")", "\n", "img2", "=", "tf", ".", "cast", "(", "img2", ",", "tf", ".", "float32", ")", "\n", "\n", "return", "img0", ",", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.datasets.BasicDataset.preprocess_one_shot": [[49, 60], ["datasets.BasicDataset.read_and_decode", "utils.mvn", "utils.mvn", "utils.mvn"], "methods", ["home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.datasets.BasicDataset.read_and_decode", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.mvn", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.mvn", "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.utils.mvn"], ["", "def", "preprocess_one_shot", "(", "self", ",", "filename_queue", ")", ":", "\n", "        ", "img0", ",", "img1", ",", "img2", "=", "self", ".", "read_and_decode", "(", "filename_queue", ")", "\n", "img0", "=", "img0", "/", "255.", "\n", "img1", "=", "img1", "/", "255.", "\n", "img2", "=", "img2", "/", "255.", "\n", "\n", "if", "self", ".", "is_normalize_img", ":", "\n", "            ", "img0", "=", "mvn", "(", "img0", ")", "\n", "img1", "=", "mvn", "(", "img1", ")", "\n", "img2", "=", "mvn", "(", "img2", ")", "\n", "", "return", "img0", ",", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.None.datasets.BasicDataset.create_one_shot_iterator": [[62, 73], ["tensorflow.convert_to_tensor", "tensorflow.data.Dataset.from_tensor_slices", "dataset.repeat.repeat.map", "dataset.repeat.repeat.batch", "dataset.repeat.repeat.repeat", "dataset.repeat.repeat.make_initializable_iterator"], "methods", ["None"], ["", "def", "create_one_shot_iterator", "(", "self", ",", "data_list", ",", "num_parallel_calls", "=", "4", ")", ":", "\n", "        ", "\"\"\" For Validation or Testing\n            Generate image and flow one_by_one without cropping, image and flow size may change every iteration\n        \"\"\"", "\n", "data_list", "=", "tf", ".", "convert_to_tensor", "(", "data_list", ",", "dtype", "=", "tf", ".", "string", ")", "\n", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "data_list", ")", "\n", "dataset", "=", "dataset", ".", "map", "(", "self", ".", "preprocess_one_shot", ",", "num_parallel_calls", "=", "num_parallel_calls", ")", "\n", "dataset", "=", "dataset", ".", "batch", "(", "1", ")", "\n", "dataset", "=", "dataset", ".", "repeat", "(", ")", "\n", "iterator", "=", "dataset", ".", "make_initializable_iterator", "(", ")", "\n", "return", "iterator", "", "", "", ""]], "home.repos.pwc.inspect_result.ppliuboy_SelFlow.config.extract_config.config_dict": [[3, 29], ["configparser.ConfigParser", "configparser.ConfigParser.read", "dict", "configparser.ConfigParser.sections", "dict", "int", "float", "section.getboolean"], "function", ["None"], ["def", "config_dict", "(", "config_path", ")", ":", "\n", "    ", "\"\"\"Returns the config as dictionary,\n    where the elements have intuitively correct types.\n    \"\"\"", "\n", "\n", "config", "=", "configparser", ".", "ConfigParser", "(", ")", "\n", "config", ".", "read", "(", "config_path", ")", "\n", "\n", "d", "=", "dict", "(", ")", "\n", "for", "section_key", "in", "config", ".", "sections", "(", ")", ":", "\n", "        ", "sd", "=", "dict", "(", ")", "\n", "section", "=", "config", "[", "section_key", "]", "\n", "for", "key", "in", "section", ":", "\n", "            ", "val", "=", "section", "[", "key", "]", "\n", "try", ":", "\n", "                ", "sd", "[", "key", "]", "=", "int", "(", "val", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "try", ":", "\n", "                    ", "sd", "[", "key", "]", "=", "float", "(", "val", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "try", ":", "\n", "                        ", "sd", "[", "key", "]", "=", "section", ".", "getboolean", "(", "key", ")", "\n", "", "except", "ValueError", ":", "\n", "                        ", "sd", "[", "key", "]", "=", "val", "\n", "", "", "", "", "d", "[", "section_key", "]", "=", "sd", "\n", "", "return", "d", "\n", "\n"]]}