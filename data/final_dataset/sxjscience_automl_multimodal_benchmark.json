{"home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.multimodal_text_benchmark.setup.read": [[9, 15], ["io.open", "fp.read", "os.path.join", "os.path.dirname", "kwargs.get"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.multimodal_text_benchmark.setup.read", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.get"], ["def", "read", "(", "*", "names", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "io", ".", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "*", "names", ")", ",", "\n", "encoding", "=", "kwargs", ".", "get", "(", "\"encoding\"", ",", "\"utf8\"", ")", "\n", ")", "as", "fp", ":", "\n", "        ", "return", "fp", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.multimodal_text_benchmark.setup.find_version": [[17, 24], ["setup.read", "re.search", "RuntimeError", "re.search.group"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.multimodal_text_benchmark.setup.read"], ["", "", "def", "find_version", "(", "*", "file_paths", ")", ":", "\n", "    ", "version_file", "=", "read", "(", "*", "file_paths", ")", "\n", "version_match", "=", "re", ".", "search", "(", "r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\"", ",", "\n", "version_file", ",", "re", ".", "M", ")", "\n", "if", "version_match", ":", "\n", "        ", "return", "version_match", ".", "group", "(", "1", ")", "\n", "", "raise", "RuntimeError", "(", "\"Unable to find version string.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_home_dir": [[12, 18], ["os.environ.get", "os.path.expanduser", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.get"], ["def", "get_home_dir", "(", ")", ":", "\n", "    ", "\"\"\"Get home directory\"\"\"", "\n", "_home_dir", "=", "os", ".", "environ", ".", "get", "(", "'AUTO_MM_BENCH_HOME'", ",", "os", ".", "path", ".", "join", "(", "'~'", ",", "'.auto_mm_bench'", ")", ")", "\n", "# expand ~ to actual path", "\n", "_home_dir", "=", "os", ".", "path", ".", "expanduser", "(", "_home_dir", ")", "\n", "return", "_home_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir": [[20, 24], ["base.get_home_dir", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_home_dir"], ["", "def", "get_data_home_dir", "(", ")", ":", "\n", "    ", "\"\"\"Get home directory for storing the datasets\"\"\"", "\n", "home_dir", "=", "get_home_dir", "(", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "home_dir", ",", "'datasets'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_repo_url": [[26, 33], ["os.environ.get"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.get"], ["", "def", "get_repo_url", "(", ")", ":", "\n", "    ", "\"\"\"Return the base URL for Gluon dataset and model repository \"\"\"", "\n", "default_repo", "=", "'https://automl-mm-bench.s3.amazonaws.com'", "\n", "repo_url", "=", "os", ".", "environ", ".", "get", "(", "'AUTO_MM_BENCH_REPO'", ",", "default_repo", ")", "\n", "if", "repo_url", "[", "-", "1", "]", "!=", "'/'", ":", "\n", "        ", "repo_url", "=", "repo_url", "+", "'/'", "\n", "", "return", "repo_url", "\n", "", ""]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.__init__": [[58, 61], ["dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ":", "str", ")", "->", "None", ":", "\n", "        ", "self", ".", "_name", ":", "str", "=", "name", "\n", "self", ".", "_obj_map", ":", "dict", "[", "str", ",", "object", "]", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry._do_register": [[62, 69], ["None"], "methods", ["None"], ["", "def", "_do_register", "(", "self", ",", "name", ":", "str", ",", "obj", ":", "object", ")", "->", "None", ":", "\n", "        ", "assert", "(", "\n", "name", "not", "in", "self", ".", "_obj_map", "\n", ")", ",", "\"An object named '{}' was already registered in '{}' registry!\"", ".", "format", "(", "\n", "name", ",", "self", ".", "_name", "\n", ")", "\n", "self", ".", "_obj_map", "[", "name", "]", "=", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.register": [[70, 98], ["len", "registry.Registry._do_register", "len", "isinstance", "registry.Registry._do_register", "len", "ValueError", "registry.Registry._do_register", "registry.Registry._do_register"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry._do_register", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry._do_register", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry._do_register", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry._do_register"], ["", "def", "register", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"\n        Register the given object under either the nickname or `obj.__name__`. It can be used as\n         either a decorator or not. See docstring of this class for usage.\n        \"\"\"", "\n", "if", "len", "(", "args", ")", "==", "2", ":", "\n", "# Register an object with nick name by function call", "\n", "            ", "nickname", ",", "obj", "=", "args", "\n", "self", ".", "_do_register", "(", "nickname", ",", "obj", ")", "\n", "", "elif", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "if", "isinstance", "(", "args", "[", "0", "]", ",", "str", ")", ":", "\n", "# Register an object with nick name by decorator", "\n", "                ", "nickname", "=", "args", "[", "0", "]", "\n", "def", "deco", "(", "func_or_class", ":", "object", ")", "->", "object", ":", "\n", "                    ", "self", ".", "_do_register", "(", "nickname", ",", "func_or_class", ")", "\n", "return", "func_or_class", "\n", "", "return", "deco", "\n", "", "else", ":", "\n", "# Register an object by function call", "\n", "                ", "self", ".", "_do_register", "(", "args", "[", "0", "]", ".", "__name__", ",", "args", "[", "0", "]", ")", "\n", "", "", "elif", "len", "(", "args", ")", "==", "0", ":", "\n", "# Register an object by decorator", "\n", "            ", "def", "deco", "(", "func_or_class", ":", "object", ")", "->", "object", ":", "\n", "                ", "self", ".", "_do_register", "(", "func_or_class", ".", "__name__", ",", "func_or_class", ")", "\n", "return", "func_or_class", "\n", "", "return", "deco", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Do not support the usage!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.get": [[99, 108], ["registry.Registry._obj_map.get", "KeyError"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.get"], ["", "", "def", "get", "(", "self", ",", "name", ":", "str", ")", "->", "object", ":", "\n", "        ", "ret", "=", "self", ".", "_obj_map", ".", "get", "(", "name", ")", "\n", "if", "ret", "is", "None", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "\"No object named '{}' found in '{}' registry!\"", ".", "format", "(", "\n", "name", ",", "self", ".", "_name", "\n", ")", "\n", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.list_keys": [[109, 111], ["list", "registry.Registry._obj_map.keys"], "methods", ["None"], ["", "def", "list_keys", "(", "self", ")", "->", "List", ":", "\n", "        ", "return", "list", "(", "self", ".", "_obj_map", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.__repr__": [[112, 116], ["registry.Registry.list_keys"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.list_keys"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "s", "=", "'{name}(keys={keys})'", ".", "format", "(", "name", "=", "self", ".", "_name", ",", "\n", "keys", "=", "self", ".", "list_keys", "(", ")", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.create": [[117, 141], ["registry.Registry.get", "registry.Registry.", "print"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.get"], ["", "def", "create", "(", "self", ",", "name", ":", "str", ",", "*", "args", ",", "**", "kwargs", ")", "->", "object", ":", "\n", "        ", "\"\"\"Create the class object with the given args and kwargs\n\n        Parameters\n        ----------\n        name\n            The name in the registry\n        args\n        kwargs\n\n        Returns\n        -------\n        ret\n            The created object\n        \"\"\"", "\n", "obj", "=", "self", ".", "get", "(", "name", ")", "\n", "try", ":", "\n", "            ", "return", "obj", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "Exception", "as", "exp", ":", "\n", "            ", "print", "(", "'Cannot create name=\"{}\" --> {} with the provided arguments!\\n'", "\n", "'   args={},\\n'", "\n", "'   kwargs={},\\n'", "\n", ".", "format", "(", "name", ",", "obj", ",", "args", ",", "kwargs", ")", ")", "\n", "raise", "exp", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.create_with_json": [[142, 167], ["isinstance", "json.loads", "registry.Registry.create", "isinstance", "ValueError", "registry.Registry.create", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.create", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.create"], ["", "", "def", "create_with_json", "(", "self", ",", "name", ":", "str", ",", "json_str", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n\n        Parameters\n        ----------\n        name\n        json_str\n\n        Returns\n        -------\n\n        \"\"\"", "\n", "try", ":", "\n", "            ", "args", "=", "json", ".", "loads", "(", "json_str", ")", "\n", "", "except", "JSONDecodeError", ":", "\n", "            ", "raise", "ValueError", "(", "'Unable to decode the json string: json_str=\"{}\"'", "\n", ".", "format", "(", "json_str", ")", ")", "\n", "", "if", "isinstance", "(", "args", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "return", "self", ".", "create", "(", "name", ",", "*", "args", ")", "\n", "", "elif", "isinstance", "(", "args", ",", "dict", ")", ":", "\n", "            ", "return", "self", ".", "create", "(", "name", ",", "**", "args", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'The format of json string is not supported! We only support '", "\n", "'list/dict. json_str=\"{}\".'", "\n", ".", "format", "(", "json_str", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.sha1sum": [[89, 105], ["hashlib.sha1.hexdigest", "open", "hashlib.sha1", "iter", "functools.partial", "hashlib.sha1.update"], "function", ["None"], ["", "", "def", "sha1sum", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Calculate the sha1sum of a file\n    Parameters\n    ----------\n    filename\n        Name of the file\n    Returns\n    -------\n    ret\n        The sha1sum\n    \"\"\"", "\n", "with", "open", "(", "filename", ",", "mode", "=", "'rb'", ")", "as", "f", ":", "\n", "        ", "d", "=", "hashlib", ".", "sha1", "(", ")", "\n", "for", "buf", "in", "iter", "(", "functools", ".", "partial", "(", "f", ".", "read", ",", "1024", "*", "100", ")", ",", "b''", ")", ":", "\n", "            ", "d", ".", "update", "(", "buf", ")", "\n", "", "", "return", "d", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download": [[107, 239], ["url.startswith", "boto3.resource", "url[].split", "os.path.expanduser", "os.path.isdir", "warnings.warn", "os.path.dirname", "boto3.session.Session().get_credentials", "boto3.resource.meta.client.meta.events.register", "len", "ValueError", "url.split", "os.path.join", "os.path.exists", "os.path.abspath", "os.path.exists", "os.makedirs", "os.path.expanduser", "print", "boto3.session.Session", "url.split", "utils.sha1sum", "boto3.resource.meta.client.head_object", "int", "str", "requests.get", "str", "int", "replace_file", "UserWarning", "print", "len", "s3.meta.client.head_object.get", "uuid.uuid4", "boto3.resource.meta.client.download_file", "RuntimeError", "uuid.uuid4", "requests.get.headers.get", "tqdm.tqdm", "open", "requests.get.iter_content", "tqdm.tqdm.close", "os.path.exists", "os.remove", "warnings.warn", "tqdm.tqdm", "boto3.resource.meta.client.download_file", "utils.sha1sum", "repr", "t_obj.update", "f.write", "utils.sha1sum", "utils.download.hook"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.register", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.sha1sum", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.get", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.get", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.get", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.sha1sum", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.sha1sum"], ["", "def", "download", "(", "url", ":", "str", ",", "\n", "path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "overwrite", ":", "Optional", "[", "bool", "]", "=", "False", ",", "\n", "sha1_hash", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "retries", ":", "Optional", "[", "int", "]", "=", "5", ",", "\n", "verify_ssl", ":", "Optional", "[", "bool", "]", "=", "True", ")", "->", "str", ":", "\n", "    ", "\"\"\"Download a given URL\n\n    Parameters\n    ----------\n    url\n        URL to download\n    path\n        Destination path to store downloaded file. By default stores to the\n        current directory with same name as in url.\n    overwrite\n        Whether to overwrite destination file if already exists.\n    sha1_hash\n        Expected sha1 hash in hexadecimal digits. Will ignore existing file when hash is specified\n        but doesn't match.\n    retries\n        The number of times to attempt the download in case of failure or non 200 return codes\n    verify_ssl\n        Verify SSL certificates.\n    Returns\n    -------\n    fname\n        The file path of the downloaded file.\n    \"\"\"", "\n", "is_s3", "=", "url", ".", "startswith", "(", "S3_PREFIX", ")", "\n", "if", "is_s3", ":", "\n", "        ", "s3", "=", "boto3", ".", "resource", "(", "'s3'", ")", "\n", "if", "boto3", ".", "session", ".", "Session", "(", ")", ".", "get_credentials", "(", ")", "is", "None", ":", "\n", "            ", "from", "botocore", ".", "handlers", "import", "disable_signing", "\n", "s3", ".", "meta", ".", "client", ".", "meta", ".", "events", ".", "register", "(", "'choose-signer.s3.*'", ",", "disable_signing", ")", "\n", "", "components", "=", "url", "[", "len", "(", "S3_PREFIX", ")", ":", "]", ".", "split", "(", "'/'", ")", "\n", "if", "len", "(", "components", ")", "<", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid S3 url. Received url={}'", ".", "format", "(", "url", ")", ")", "\n", "", "s3_bucket_name", "=", "components", "[", "0", "]", "\n", "s3_key", "=", "'/'", ".", "join", "(", "components", "[", "1", ":", "]", ")", "\n", "", "if", "path", "is", "None", ":", "\n", "        ", "fname", "=", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "# Empty filenames are invalid", "\n", "assert", "fname", ",", "'Can\\'t construct file-name from this URL. '", "'Please set the `path` option manually.'", "\n", "", "else", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "expanduser", "(", "path", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "fname", "=", "os", ".", "path", ".", "join", "(", "path", ",", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "fname", "=", "path", "\n", "", "", "assert", "retries", ">=", "0", ",", "\"Number of retries should be at least 0, currently it's {}\"", ".", "format", "(", "\n", "retries", ")", "\n", "\n", "if", "not", "verify_ssl", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "'Unverified HTTPS request is being made (verify_ssl=False). '", "\n", "'Adding certificate verification is strongly advised.'", ")", "\n", "\n", "", "if", "overwrite", "or", "not", "os", ".", "path", ".", "exists", "(", "fname", ")", "or", "(", "sha1_hash", "and", "not", "sha1sum", "(", "fname", ")", "==", "sha1_hash", ")", ":", "\n", "        ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "fname", ")", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ",", "exist_ok", "=", "True", ")", "\n", "", "while", "retries", "+", "1", ">", "0", ":", "\n", "# Disable pyling too broad Exception", "\n", "# pylint: disable=W0703", "\n", "            ", "try", ":", "\n", "                ", "print", "(", "'Downloading {} from {}...'", ".", "format", "(", "fname", ",", "url", ")", ")", "\n", "if", "is_s3", ":", "\n", "                    ", "response", "=", "s3", ".", "meta", ".", "client", ".", "head_object", "(", "Bucket", "=", "s3_bucket_name", ",", "\n", "Key", "=", "s3_key", ")", "\n", "total_size", "=", "int", "(", "response", ".", "get", "(", "'ContentLength'", ",", "0", ")", ")", "\n", "random_uuid", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "tmp_path", "=", "'{}.{}'", ".", "format", "(", "fname", ",", "random_uuid", ")", "\n", "if", "tqdm", "is", "not", "None", ":", "\n", "                        ", "def", "hook", "(", "t_obj", ")", ":", "\n", "                            ", "def", "inner", "(", "bytes_amount", ")", ":", "\n", "                                ", "t_obj", ".", "update", "(", "bytes_amount", ")", "\n", "", "return", "inner", "\n", "", "with", "tqdm", ".", "tqdm", "(", "total", "=", "total_size", ",", "unit", "=", "'iB'", ",", "unit_scale", "=", "True", ")", "as", "t", ":", "\n", "                            ", "s3", ".", "meta", ".", "client", ".", "download_file", "(", "s3_bucket_name", ",", "s3_key", ",", "tmp_path", ",", "\n", "Callback", "=", "hook", "(", "t", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "s3", ".", "meta", ".", "client", ".", "download_file", "(", "s3_bucket_name", ",", "s3_key", ",", "tmp_path", ")", "\n", "", "", "else", ":", "\n", "                    ", "r", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ",", "verify", "=", "verify_ssl", ")", "\n", "if", "r", ".", "status_code", "!=", "200", ":", "\n", "                        ", "raise", "RuntimeError", "(", "'Failed downloading url {}'", ".", "format", "(", "url", ")", ")", "\n", "# create uuid for temporary files", "\n", "", "random_uuid", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "total_size", "=", "int", "(", "r", ".", "headers", ".", "get", "(", "'content-length'", ",", "0", ")", ")", "\n", "chunk_size", "=", "1024", "\n", "if", "tqdm", "is", "not", "None", ":", "\n", "                        ", "t", "=", "tqdm", ".", "tqdm", "(", "total", "=", "total_size", ",", "unit", "=", "'iB'", ",", "unit_scale", "=", "True", ")", "\n", "", "with", "open", "(", "'{}.{}'", ".", "format", "(", "fname", ",", "random_uuid", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                        ", "for", "chunk", "in", "r", ".", "iter_content", "(", "chunk_size", "=", "chunk_size", ")", ":", "\n", "                            ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                                ", "if", "tqdm", "is", "not", "None", ":", "\n", "                                    ", "t", ".", "update", "(", "len", "(", "chunk", ")", ")", "\n", "", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "", "if", "tqdm", "is", "not", "None", ":", "\n", "                        ", "t", ".", "close", "(", ")", "\n", "# if the target file exists(created by other processes)", "\n", "# and have the same hash with target file", "\n", "# delete the temporary file", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "fname", ")", "or", "(", "sha1_hash", "and", "not", "sha1sum", "(", "fname", ")", "==", "sha1_hash", ")", ":", "\n", "# atomic operation in the same file system", "\n", "                    ", "replace_file", "(", "'{}.{}'", ".", "format", "(", "fname", ",", "random_uuid", ")", ",", "fname", ")", "\n", "", "else", ":", "\n", "                    ", "try", ":", "\n", "                        ", "os", ".", "remove", "(", "'{}.{}'", ".", "format", "(", "fname", ",", "random_uuid", ")", ")", "\n", "", "except", "OSError", ":", "\n", "                        ", "pass", "\n", "", "finally", ":", "\n", "                        ", "warnings", ".", "warn", "(", "\n", "'File {} exists in file system so the downloaded file is deleted'", ".", "format", "(", "fname", ")", ")", "\n", "", "", "if", "sha1_hash", "and", "not", "sha1sum", "(", "fname", ")", "==", "sha1_hash", ":", "\n", "                    ", "raise", "UserWarning", "(", "\n", "'File {} is downloaded but the content hash does not match.'", "\n", "' The repo may be outdated or download may be incomplete. '", "\n", "'If the \"repo_url\" is overridden, consider switching to '", "\n", "'the default repo.'", ".", "format", "(", "fname", ")", ")", "\n", "", "break", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "retries", "-=", "1", "\n", "if", "retries", "<=", "0", ":", "\n", "                    ", "raise", "e", "\n", "\n", "", "print", "(", "'download failed due to {}, retrying, {} attempt{} left'", "\n", ".", "format", "(", "repr", "(", "e", ")", ",", "retries", ",", "'s'", "if", "retries", ">", "1", "else", "''", ")", ")", "\n", "\n", "", "", "", "return", "fname", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.logging_config": [[241, 301], ["os.path.join", "print", "logger.setLevel", "logging.Formatter", "os.path.join", "os.path.exists", "os.makedirs", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logger.addHandler", "[].split", "os.getcwd", "isinstance", "inspect.stack"], "function", ["None"], ["", "def", "logging_config", "(", "folder", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "name", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "logger", ":", "logging", ".", "Logger", "=", "logging", ".", "root", ",", "\n", "level", ":", "int", "=", "logging", ".", "INFO", ",", "\n", "console_level", ":", "int", "=", "logging", ".", "INFO", ",", "\n", "console", ":", "bool", "=", "True", ",", "\n", "overwrite_handler", ":", "bool", "=", "False", ")", "->", "str", ":", "\n", "    ", "\"\"\"Config the logging module. It will set the logger to save to the specified file path.\n    Parameters\n    ----------\n    folder\n        The folder to save the log\n    name\n        Name of the saved\n    logger\n        The logger\n    level\n        Logging level\n    console_level\n        Logging level of the console log\n    console\n        Whether to also log to console\n    overwrite_handler\n        Whether to overwrite the existing handlers in the logger\n    Returns\n    -------\n    folder\n        The folder to save the log file.\n    \"\"\"", "\n", "if", "name", "is", "None", ":", "\n", "        ", "name", "=", "inspect", ".", "stack", "(", ")", "[", "-", "1", "]", "[", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "", "if", "folder", "is", "None", ":", "\n", "        ", "folder", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "name", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "", "need_file_handler", "=", "True", "\n", "need_console_handler", "=", "True", "\n", "# Check all loggers.", "\n", "if", "overwrite_handler", ":", "\n", "        ", "logger", ".", "handlers", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "for", "handler", "in", "logger", ".", "handlers", ":", "\n", "            ", "if", "isinstance", "(", "handler", ",", "logging", ".", "StreamHandler", ")", ":", "\n", "                ", "need_console_handler", "=", "False", "\n", "", "", "", "logpath", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "name", "+", "\".log\"", ")", "\n", "print", "(", "\"All Logs will be saved to {}\"", ".", "format", "(", "logpath", ")", ")", "\n", "logger", ".", "setLevel", "(", "level", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "if", "need_file_handler", ":", "\n", "        ", "logfile", "=", "logging", ".", "FileHandler", "(", "logpath", ")", "\n", "logfile", ".", "setLevel", "(", "level", ")", "\n", "logfile", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "logfile", ")", "\n", "", "if", "console", "and", "need_console_handler", ":", "\n", "# Initialze the console logging", "\n", "        ", "logconsole", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "logconsole", ".", "setLevel", "(", "console_level", ")", "\n", "logconsole", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "logconsole", ")", "\n", "", "return", "folder", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.get_fit_metric": [[303, 320], ["None"], "function", ["None"], ["", "def", "get_fit_metric", "(", "metric", ")", ":", "\n", "    ", "\"\"\"In AutoML Multimodal Data Table Benchmark, we will ensure that\n    all the metrics are \"larger the better\". Thus, we will convert the\n    metric in AutoGluon to the metrics used in `predictor.fit()`.\n\n    Parameters\n    ----------\n    metric\n\n    Returns\n    -------\n    metric_in_fit\n    \"\"\"", "\n", "if", "metric", "==", "'r2'", ":", "\n", "        ", "return", "'rmse'", "\n", "", "else", ":", "\n", "        ", "return", "metric", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.BaseMultiModalDataset.feature_columns": [[47, 51], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.BaseMultiModalDataset.label_columns": [[52, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.BaseMultiModalDataset.label_types": [[57, 60], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.BaseMultiModalDataset.data": [[61, 65], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.BaseMultiModalDataset.metric": [[66, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.BaseMultiModalDataset.problem_type": [[71, 75], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MachineHackSentimentPrediction.__init__": [[95, 104], ["os.path.join", "utils.download", "pandas.read_csv", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "\n", "'machine_hack_sentiment_analysis'", ",", "\n", "f'{split}.csv'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "\n", "path", "=", "self", ".", "_path", ",", "\n", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_csv", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MachineHackSentimentPrediction.splits": [[105, 108], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MachineHackSentimentPrediction.feature_columns": [[109, 112], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'Product_Description'", ",", "'Product_Type'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MachineHackSentimentPrediction.feature_types": [[113, 116], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_TEXT", ",", "_CATEGORICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MachineHackSentimentPrediction.label_columns": [[117, 120], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'Sentiment'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MachineHackSentimentPrediction.label_types": [[121, 124], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_CATEGORICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MachineHackSentimentPrediction.data": [[125, 128], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MachineHackSentimentPrediction.metric": [[129, 132], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "'acc'", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MachineHackSentimentPrediction.problem_type": [[133, 136], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_MULTICLASS", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JigsawUnintendedBias.__init__": [[158, 177], ["os.path.join", "utils.download", "pandas.read_parquet", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "\n", "self", ".", "_LOCAL_NAME", ",", "\n", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "\n", "path", "=", "self", ".", "_path", ",", "\n", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_parquet", "(", "self", ".", "_path", ")", "\n", "self", ".", "_text_columns", "=", "[", "'comment_text'", "]", "\n", "self", ".", "_identity_attribute_columns", "=", "[", "'asian'", ",", "'atheist'", ",", "'bisexual'", ",", "'black'", ",", "'buddhist'", ",", "'christian'", ",", "'female'", ",", "\n", "'heterosexual'", ",", "'hindu'", ",", "\n", "'homosexual_gay_or_lesbian'", ",", "'intellectual_or_learning_disability'", ",", "'jewish'", ",", "\n", "'latino'", ",", "'male'", ",", "'muslim'", ",", "'other_disability'", ",", "\n", "'other_gender'", ",", "'other_race_or_ethnicity'", ",", "'other_religion'", ",", "\n", "'other_sexual_orientation'", ",", "'physical_disability'", ",", "\n", "'psychiatric_or_mental_illness'", ",", "'transgender'", ",", "'white'", "]", "\n", "self", ".", "_user_voting_columns", "=", "[", "'funny'", ",", "'wow'", ",", "'sad'", ",", "'likes'", ",", "'disagree'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JigsawUnintendedBias.splits": [[178, 181], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JigsawUnintendedBias.feature_columns": [[182, 185], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_text_columns", "+", "self", ".", "_identity_attribute_columns", "+", "self", ".", "_user_voting_columns", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JigsawUnintendedBias.feature_types": [[186, 191], ["len", "len", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_TEXT", "]", "*", "len", "(", "self", ".", "_text_columns", ")", "+", "[", "_NUMERICAL", "]", "*", "(", "len", "(", "self", ".", "_identity_attribute_columns", ")", "+", "\n", "len", "(", "self", ".", "_user_voting_columns", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JigsawUnintendedBias.fill_na_values": [[192, 200], ["dict"], "methods", ["None"], ["", "@", "property", "\n", "def", "fill_na_values", "(", "self", ")", ":", "\n", "        ", "ret", "=", "dict", "(", ")", "\n", "for", "col", "in", "self", ".", "_identity_attribute_columns", ":", "\n", "            ", "ret", "[", "col", "]", "=", "0", "\n", "", "for", "col", "in", "self", ".", "_user_voting_columns", ":", "\n", "            ", "ret", "[", "col", "]", "=", "0", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JigsawUnintendedBias.label_columns": [[201, 204], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'target'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JigsawUnintendedBias.label_types": [[205, 208], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_CATEGORICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JigsawUnintendedBias.data": [[209, 212], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JigsawUnintendedBias.metric": [[213, 216], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "'roc_auc'", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JigsawUnintendedBias.problem_type": [[217, 220], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_BINARY", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JigsawUnintendedBias100K.__init__": [[238, 240], ["datasets.JigsawUnintendedBias.__init__"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQALabel.__init__": [[260, 269], ["os.path.join", "utils.download", "pandas.read_parquet", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "\n", "'google_quest_qa'", ",", "\n", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "\n", "path", "=", "self", ".", "_path", ",", "\n", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_parquet", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQALabel.splits": [[270, 273], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQALabel.feature_columns": [[274, 277], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'question_title'", ",", "'question_body'", ",", "'answer'", ",", "'category'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQALabel.feature_types": [[278, 281], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_TEXT", ",", "_TEXT", ",", "_TEXT", ",", "_CATEGORICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQALabel.label_columns": [[282, 300], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'question_asker_intent_understanding'", ",", "\n", "'question_body_critical'", ",", "'question_conversational'", ",", "\n", "'question_expect_short_answer'", ",", "'question_fact_seeking'", ",", "\n", "'question_has_commonly_accepted_answer'", ",", "\n", "'question_interestingness_others'", ",", "'question_interestingness_self'", ",", "\n", "'question_multi_intent'", ",", "'question_not_really_a_question'", ",", "\n", "'question_opinion_seeking'", ",", "'question_type_choice'", ",", "\n", "'question_type_compare'", ",", "'question_type_consequence'", ",", "\n", "'question_type_definition'", ",", "'question_type_entity'", ",", "\n", "'question_type_instructions'", ",", "'question_type_procedure'", ",", "\n", "'question_type_reason_explanation'", ",", "'question_type_spelling'", ",", "\n", "'question_well_written'", ",", "'answer_helpful'", ",", "\n", "'answer_level_of_information'", ",", "'answer_plausible'", ",", "'answer_relevance'", ",", "\n", "'answer_satisfaction'", ",", "'answer_type_instructions'", ",", "\n", "'answer_type_procedure'", ",", "'answer_type_reason_explanation'", ",", "\n", "'answer_well_written'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQALabel.label_types": [[301, 304], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_NUMERICAL", "]", "*", "len", "(", "self", ".", "label_columns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQALabel.data": [[305, 308], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQALabel.metric": [[309, 312], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "'r2'", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQALabel.problem_type": [[313, 316], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_REGRESSION", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQALabelHelpful.label_columns": [[320, 323], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'answer_helpful'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQALabelHelpful.label_types": [[324, 327], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_NUMERICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQALabelPlausible.label_columns": [[331, 334], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'answer_plausible'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQALabelPlausible.label_types": [[335, 338], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_NUMERICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQAAnswerTypeProcedure.label_columns": [[342, 345], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'answer_type_procedure'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQAAnswerTypeProcedure.label_types": [[346, 349], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_NUMERICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQAAnswerTypeReasonExplanation.label_columns": [[353, 356], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'answer_type_reason_explanation'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQAAnswerTypeReasonExplanation.label_types": [[357, 360], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_NUMERICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQAQuestionTypeReasonExplanation.label_columns": [[364, 367], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'question_type_reason_explanation'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQAQuestionTypeReasonExplanation.label_types": [[368, 371], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_NUMERICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQAAnswerSatisfaction.label_columns": [[375, 378], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'answer_satisfaction'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.GoogleQuestQAAnswerSatisfaction.label_types": [[379, 382], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_NUMERICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WomenClothingReview.__init__": [[398, 407], ["os.path.join", "utils.download", "pandas.read_parquet", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "\n", "'women_clothing_review'", ",", "\n", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "\n", "path", "=", "self", ".", "_path", ",", "\n", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_parquet", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WomenClothingReview.splits": [[408, 411], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WomenClothingReview.feature_columns": [[412, 416], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'Title'", ",", "'Review Text'", ",", "'Age'", ",", "\n", "'Division Name'", ",", "'Department Name'", ",", "'Class Name'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WomenClothingReview.feature_types": [[417, 420], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_TEXT", ",", "_TEXT", ",", "_NUMERICAL", ",", "_CATEGORICAL", ",", "_CATEGORICAL", ",", "_CATEGORICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WomenClothingReview.fill_na_value": [[421, 428], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "fill_na_value", "(", "self", ")", ":", "\n", "        ", "\"\"\"The default function to fill missing values\"\"\"", "\n", "return", "{", "\n", "'Division Name'", ":", "'None'", ",", "\n", "'Department Name'", ":", "'None'", ",", "\n", "'Class Name'", ":", "'None'", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WomenClothingReview.label_columns": [[430, 433], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'Rating'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WomenClothingReview.label_types": [[434, 437], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_NUMERICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WomenClothingReview.data": [[438, 441], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WomenClothingReview.metric": [[442, 445], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "'r2'", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WomenClothingReview.problem_type": [[446, 449], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_REGRESSION", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MelBourneAirBnb.__init__": [[465, 474], ["os.path.join", "utils.download", "pandas.read_parquet", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "\n", "'airbnb_melbourne'", ",", "\n", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "\n", "path", "=", "self", ".", "_path", ",", "\n", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_parquet", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MelBourneAirBnb.splits": [[475, 478], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MelBourneAirBnb.ignore_columns": [[479, 486], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ignore_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'id'", ",", "'listing_url'", ",", "'scrape_id'", ",", "'last_scraped'", ",", "\n", "'picture_url'", ",", "'host_id'", ",", "'host_url'", ",", "'host_name'", ",", "\n", "'host_thumbnail_url'", ",", "'host_picture_url'", ",", "\n", "'monthly_price'", ",", "'weekly_price'", ",", "'price'", ",", "\n", "'calendar_last_scraped'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MelBourneAirBnb.label_columns": [[487, 490], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'price_label'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MelBourneAirBnb.feature_columns": [[491, 497], ["sorted"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "all_columns", "=", "sorted", "(", "self", ".", "_data", ".", "columns", ")", "\n", "feature_columns", "=", "[", "col", "for", "col", "in", "all_columns", "if", "col", "not", "in", "self", ".", "label_columns", "\n", "and", "col", "not", "in", "self", ".", "ignore_columns", "]", "\n", "return", "feature_columns", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MelBourneAirBnb.data": [[498, 501], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MelBourneAirBnb.label_types": [[502, 505], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_CATEGORICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MelBourneAirBnb.metric": [[506, 509], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "\"acc\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MelBourneAirBnb.problem_type": [[510, 513], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_MULTICLASS", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MercariPriceSuggestion.__init__": [[542, 552], ["abc.ABC.__init__", "os.path.join", "utils.download", "pandas.read_parquet", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "\n", "self", ".", "_LOCAL_NAME", ",", "\n", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "\n", "path", "=", "self", ".", "_path", ",", "\n", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_parquet", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MercariPriceSuggestion.splits": [[553, 556], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MercariPriceSuggestion.data": [[557, 560], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MercariPriceSuggestion.ignore_columns": [[561, 564], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ignore_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'train_id'", ",", "'price'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MercariPriceSuggestion.label_columns": [[565, 568], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'log_price'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MercariPriceSuggestion.label_types": [[569, 572], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_NUMERICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MercariPriceSuggestion.feature_columns": [[573, 580], ["sorted", "ret.append"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "for", "col", "in", "sorted", "(", "self", ".", "data", ".", "columns", ")", ":", "\n", "            ", "if", "col", "not", "in", "self", ".", "ignore_columns", "and", "col", "not", "in", "self", ".", "label_columns", ":", "\n", "                ", "ret", ".", "append", "(", "col", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MercariPriceSuggestion.metric": [[581, 584], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "'r2'", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MercariPriceSuggestion.problem_type": [[585, 588], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_REGRESSION", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MercariPriceSuggestion.postprocess_label": [[589, 591], ["numpy.max", "numpy.exp"], "methods", ["None"], ["", "def", "postprocess_label", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "np", ".", "max", "(", "np", ".", "exp", "(", "data", ")", "-", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.AEPricePrediction.__init__": [[607, 617], ["abc.ABC.__init__", "os.path.join", "utils.download", "pandas.read_parquet", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "\n", "'ae_price_prediction'", ",", "\n", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "\n", "path", "=", "self", ".", "_path", ",", "\n", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_parquet", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.AEPricePrediction.splits": [[618, 621], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.AEPricePrediction.data": [[622, 625], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.AEPricePrediction.ignore_columns": [[626, 629], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ignore_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'mrp'", ",", "'pdp_url'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.AEPricePrediction.feature_columns": [[630, 634], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "col", "for", "col", "in", "self", ".", "data", ".", "columns", "\n", "if", "col", "not", "in", "self", ".", "ignore_columns", "and", "col", "not", "in", "self", ".", "label_columns", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.AEPricePrediction.label_columns": [[635, 638], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'price'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.AEPricePrediction.label_types": [[639, 642], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_NUMERICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.AEPricePrediction.metric": [[643, 646], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "'r2'", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.AEPricePrediction.problem_type": [[647, 650], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_REGRESSION", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.MercariPriceSuggestion100K.__init__": [[667, 669], ["datasets.MercariPriceSuggestion.__init__"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.IMDBGenrePrediction.__init__": [[685, 695], ["abc.ABC.__init__", "os.path.join", "utils.download", "pandas.read_csv", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "\n", "'imdb_genre_prediction'", ",", "\n", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "\n", "path", "=", "self", ".", "_path", ",", "\n", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_csv", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.IMDBGenrePrediction.data": [[704, 707], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.IMDBGenrePrediction.splits": [[700, 703], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.IMDBGenrePrediction.label_columns": [[708, 711], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'Genre_is_Drama'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.IMDBGenrePrediction.label_types": [[712, 715], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_CATEGORICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.IMDBGenrePrediction.feature_columns": [[716, 719], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "col", "for", "col", "in", "list", "(", "self", ".", "data", ".", "columns", ")", "if", "col", "not", "in", "self", ".", "label_columns", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.IMDBGenrePrediction.metric": [[720, 723], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "'roc_auc'", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.IMDBGenrePrediction.problem_type": [[724, 727], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_BINARY", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.FakeJobPostings.__init__": [[743, 753], ["abc.ABC.__init__", "os.path.join", "utils.download", "pandas.read_csv", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "\n", "'fake_job_postings'", ",", "\n", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "\n", "path", "=", "self", ".", "_path", ",", "\n", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_csv", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.FakeJobPostings.data": [[762, 765], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.FakeJobPostings.splits": [[758, 761], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.FakeJobPostings.label_columns": [[766, 769], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'fraudulent'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.FakeJobPostings.label_types": [[770, 773], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_CATEGORICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.FakeJobPostings.feature_columns": [[774, 777], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "col", "for", "col", "in", "list", "(", "self", ".", "data", ".", "columns", ")", "if", "col", "not", "in", "self", ".", "label_columns", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.FakeJobPostings.metric": [[778, 781], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "'roc_auc'", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.FakeJobPostings.problem_type": [[782, 785], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_BINARY", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KickStarterFunding.__init__": [[801, 811], ["abc.ABC.__init__", "os.path.join", "utils.download", "pandas.read_csv", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "\n", "'kick_starter_funding'", ",", "\n", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "\n", "path", "=", "self", ".", "_path", ",", "\n", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_csv", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KickStarterFunding.data": [[820, 823], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KickStarterFunding.splits": [[816, 819], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KickStarterFunding.label_columns": [[824, 827], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'final_status'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KickStarterFunding.label_types": [[828, 831], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_CATEGORICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KickStarterFunding.feature_columns": [[832, 835], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "col", "for", "col", "in", "list", "(", "self", ".", "data", ".", "columns", ")", "if", "col", "not", "in", "self", ".", "label_columns", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KickStarterFunding.metric": [[836, 839], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "'roc_auc'", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KickStarterFunding.problem_type": [[840, 843], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_BINARY", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JCPennyCategory.__init__": [[859, 869], ["abc.ABC.__init__", "os.path.join", "utils.download", "pandas.read_csv", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "\n", "'jc_penney_products'", ",", "\n", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "\n", "path", "=", "self", ".", "_path", ",", "\n", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_csv", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JCPennyCategory.data": [[878, 881], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JCPennyCategory.splits": [[874, 877], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JCPennyCategory.label_columns": [[882, 885], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'sale_price'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JCPennyCategory.label_types": [[886, 889], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_NUMERICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JCPennyCategory.feature_columns": [[890, 893], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "col", "for", "col", "in", "list", "(", "self", ".", "data", ".", "columns", ")", "if", "col", "not", "in", "self", ".", "label_columns", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JCPennyCategory.metric": [[894, 897], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "'r2'", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.JCPennyCategory.problem_type": [[898, 901], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_REGRESSION", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WineReviews.__init__": [[917, 927], ["abc.ABC.__init__", "os.path.join", "utils.download", "pandas.read_csv", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "\n", "'wine_reviews'", ",", "\n", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "\n", "path", "=", "self", ".", "_path", ",", "\n", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_csv", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WineReviews.data": [[936, 939], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WineReviews.splits": [[932, 935], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WineReviews.label_columns": [[940, 943], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'variety'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WineReviews.label_types": [[944, 947], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_CATEGORICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WineReviews.feature_columns": [[948, 951], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "col", "for", "col", "in", "list", "(", "self", ".", "data", ".", "columns", ")", "if", "col", "not", "in", "self", ".", "label_columns", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WineReviews.metric": [[952, 955], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "'acc'", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.WineReviews.problem_type": [[956, 959], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_MULTICLASS", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsPopularity.__init__": [[975, 985], ["abc.ABC.__init__", "os.path.join", "utils.download", "pandas.read_csv", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "\n", "'news_popularity'", ",", "\n", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "\n", "path", "=", "self", ".", "_path", ",", "\n", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_csv", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsPopularity.data": [[994, 997], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsPopularity.splits": [[990, 993], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsPopularity.label_columns": [[998, 1001], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'log_shares'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsPopularity.label_types": [[1002, 1005], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_NUMERICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsPopularity.feature_columns": [[1006, 1009], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "col", "for", "col", "in", "list", "(", "self", ".", "data", ".", "columns", ")", "if", "col", "not", "in", "self", ".", "label_columns", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsPopularity.metric": [[1010, 1013], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "'r2'", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsPopularity.problem_type": [[1014, 1017], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_REGRESSION", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsChannel.__init__": [[1033, 1043], ["abc.ABC.__init__", "os.path.join", "utils.download", "pandas.read_csv", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "\n", "'news_channel'", ",", "\n", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "\n", "path", "=", "self", ".", "_path", ",", "\n", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_csv", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsChannel.data": [[1052, 1055], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsChannel.splits": [[1048, 1051], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsChannel.label_columns": [[1056, 1059], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'channel'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsChannel.label_types": [[1060, 1063], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_CATEGORICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsChannel.feature_columns": [[1064, 1067], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "col", "for", "col", "in", "list", "(", "self", ".", "data", ".", "columns", ")", "if", "col", "not", "in", "self", ".", "label_columns", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsChannel.metric": [[1068, 1071], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "'acc'", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsChannel.problem_type": [[1072, 1075], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_MULTICLASS", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.NewsPopularity2.__init__": [[1091, 1101], ["datasets.NewsPopularity.__init__", "os.path.join", "utils.download", "pandas.read_csv", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "\n", "'news_popularity2'", ",", "\n", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "\n", "path", "=", "self", ".", "_path", ",", "\n", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_csv", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.FakeJobPostings2.__init__": [[1117, 1127], ["datasets.FakeJobPostings.__init__", "os.path.join", "utils.download", "pandas.read_csv", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "\n", "'fake_job_postings2'", ",", "\n", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "\n", "path", "=", "self", ".", "_path", ",", "\n", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_csv", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.BookPricePrediction.__init__": [[1147, 1153], ["abc.ABC.__init__", "os.path.join", "utils.download", "pandas.read_csv", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "'bookprice'", ",", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "path", "=", "self", ".", "_path", ",", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_csv", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.BookPricePrediction.splits": [[1154, 1157], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.BookPricePrediction.data": [[1158, 1161], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.BookPricePrediction.label_columns": [[1162, 1165], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'Price'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.BookPricePrediction.label_types": [[1166, 1169], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_NUMERICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.BookPricePrediction.feature_columns": [[1170, 1174], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'Title'", ",", "'Author'", ",", "'Edition'", ",", "'Reviews'", ",", "'Ratings'", ",", "'Synopsis'", ",", "'Genre'", ",", "\n", "'BookCategory'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.BookPricePrediction.metric": [[1175, 1178], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "'r2'", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.BookPricePrediction.problem_type": [[1179, 1182], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_REGRESSION", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.BookPricePrediction.postprocess_label": [[1183, 1191], ["numpy.max", "numpy.power"], "methods", ["None"], ["", "def", "postprocess_label", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Process the labels back to the original price.\n\n        The original price has been transformed via\n\n            np.log10(train_df['Price'] + 1)\n        \"\"\"", "\n", "return", "np", ".", "max", "(", "np", ".", "power", "(", "10", ",", "data", ")", "-", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.DataScientistSalaryPrediction.__init__": [[1211, 1217], ["abc.ABC.__init__", "os.path.join", "utils.download", "pandas.read_csv", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "'data_scientist_salary'", ",", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "path", "=", "self", ".", "_path", ",", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_csv", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.DataScientistSalaryPrediction.splits": [[1218, 1221], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.DataScientistSalaryPrediction.data": [[1222, 1225], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.DataScientistSalaryPrediction.label_columns": [[1226, 1229], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'salary'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.DataScientistSalaryPrediction.label_types": [[1230, 1233], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_CATEGORICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.DataScientistSalaryPrediction.feature_columns": [[1234, 1237], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "col", "for", "col", "in", "list", "(", "self", ".", "data", ".", "columns", ")", "if", "col", "not", "in", "self", ".", "label_columns", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.DataScientistSalaryPrediction.metric": [[1238, 1241], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "'acc'", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.DataScientistSalaryPrediction.problem_type": [[1242, 1245], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_MULTICLASS", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KaggleCaliforniaHousePricePrediction.__init__": [[1265, 1271], ["abc.ABC.__init__", "os.path.join", "utils.download", "pandas.read_csv", "base.get_data_home_dir"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.base.get_data_home_dir"], ["def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split", "=", "split", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "get_data_home_dir", "(", ")", ",", "'california_house_price'", ",", "f'{split}.pq'", ")", "\n", "download", "(", "self", ".", "_INFO", "[", "split", "]", "[", "'url'", "]", ",", "path", "=", "self", ".", "_path", ",", "sha1_hash", "=", "self", ".", "_INFO", "[", "split", "]", "[", "'sha1sum'", "]", ")", "\n", "self", ".", "_data", "=", "pd", ".", "read_csv", "(", "self", ".", "_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KaggleCaliforniaHousePricePrediction.splits": [[1272, 1275], ["cls._INFO.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "splits", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "_INFO", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KaggleCaliforniaHousePricePrediction.data": [[1276, 1279], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KaggleCaliforniaHousePricePrediction.label_columns": [[1280, 1283], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "'Sold Price'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KaggleCaliforniaHousePricePrediction.label_types": [[1284, 1287], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_types", "(", "self", ")", ":", "\n", "        ", "return", "[", "_NUMERICAL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KaggleCaliforniaHousePricePrediction.feature_columns": [[1288, 1291], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_columns", "(", "self", ")", ":", "\n", "        ", "return", "[", "col", "for", "col", "in", "list", "(", "self", ".", "data", ".", "columns", ")", "if", "col", "not", "in", "self", ".", "label_columns", "and", "col", "!=", "'Id'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KaggleCaliforniaHousePricePrediction.metric": [[1292, 1295], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", ":", "\n", "        ", "return", "'r2'", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KaggleCaliforniaHousePricePrediction.problem_type": [[1296, 1299], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "problem_type", "(", "self", ")", ":", "\n", "        ", "return", "_REGRESSION", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KaggleCaliforniaHousePricePrediction.postprocess_label": [[1300, 1308], ["numpy.exp"], "methods", ["None"], ["", "def", "postprocess_label", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Process the labels back to the original price.\n\n        The original price has been transformed via\n\n            np.log10(train_df['Sold Price'] + 1)\n        \"\"\"", "\n", "return", "np", ".", "exp", "(", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.create_dataset": [[42, 44], ["dataset_registry.create"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.create"], ["def", "create_dataset", "(", "name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "dataset_registry", ".", "create", "(", "name", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.data_processing.get_dataset_analytics.get_stats": [[10, 72], ["auto_mm_bench.datasets.dataset_registry.list_keys", "zip", "numpy.array", "pandas.DataFrame", "print", "dataset_stats[].append", "auto_mm_bench.datasets.dataset_registry.get", "dataset_stats[].append", "dataset_registry.get.", "dataset_registry.get.", "train_dataset_l.append", "test_dataset_l.append", "len", "len", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "autogluon.text.text_prediction.infer_types.infer_column_problem_types", "zip", "sum", "sum", "sum", "dataset_stats[].append", "dataset_stats[].append", "dataset_stats[].append", "dataset_stats[].append", "dataset_stats[].append", "dataset_stats[].append", "dataset_stats[].append", "print", "dataset_registry.get.splits", "dataset_registry.get.", "len", "numpy.random.RandomState"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.list_keys", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.get", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.KaggleCaliforniaHousePricePrediction.splits"], ["def", "get_stats", "(", ")", ":", "\n", "    ", "dataset_stats", "=", "{", "\n", "'Name'", ":", "[", "]", ",", "\n", "'#Cat.'", ":", "[", "]", ",", "\n", "'#Num.'", ":", "[", "]", ",", "\n", "'#Text'", ":", "[", "]", ",", "\n", "'Problem Type'", ":", "[", "]", ",", "\n", "'#Train'", ":", "[", "]", ",", "\n", "'#Test'", ":", "[", "]", ",", "\n", "'#Competition'", ":", "[", "]", ",", "\n", "'Metric'", ":", "[", "]", "\n", "}", "\n", "train_dataset_l", "=", "[", "]", "\n", "test_dataset_l", "=", "[", "]", "\n", "for", "dataset_name", "in", "dataset_registry", ".", "list_keys", "(", ")", ":", "\n", "        ", "print", "(", "'Processing:'", ",", "dataset_name", ")", "\n", "if", "dataset_name", "==", "'google_qa_label'", ":", "\n", "            ", "print", "(", "'Skip google_qa_label'", ")", "\n", "continue", "\n", "", "dataset_stats", "[", "'Name'", "]", ".", "append", "(", "dataset_name", ")", "\n", "dataset_cls", "=", "dataset_registry", ".", "get", "(", "dataset_name", ")", "\n", "if", "'competition'", "in", "dataset_cls", ".", "splits", "(", ")", ":", "\n", "            ", "competition_dataset", "=", "dataset_cls", "(", "split", "=", "'competition'", ")", "\n", "competition_num", "=", "len", "(", "competition_dataset", ".", "data", ")", "\n", "", "else", ":", "\n", "            ", "competition_num", "=", "0", "\n", "", "dataset_stats", "[", "'#Competition'", "]", ".", "append", "(", "competition_num", ")", "\n", "train_dataset", "=", "dataset_cls", "(", "split", "=", "'train'", ")", "\n", "test_dataset", "=", "dataset_cls", "(", "split", "=", "'test'", ")", "\n", "train_dataset_l", ".", "append", "(", "train_dataset", ")", "\n", "test_dataset_l", ".", "append", "(", "test_dataset", ")", "\n", "", "for", "train_dataset", ",", "test_dataset", "in", "zip", "(", "train_dataset_l", ",", "test_dataset_l", ")", ":", "\n", "        ", "problem_type", "=", "train_dataset", ".", "problem_type", "\n", "metric", "=", "train_dataset", ".", "metric", "\n", "train_num", "=", "len", "(", "train_dataset", ".", "data", ")", "\n", "test_num", "=", "len", "(", "test_dataset", ".", "data", ")", "\n", "train_df", ",", "valid_df", "=", "sklearn", ".", "model_selection", ".", "train_test_split", "(", "train_dataset", ".", "data", ",", "\n", "test_size", "=", "0.05", ",", "\n", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "100", ")", ")", "\n", "column_types", ",", "inferred_problem_type", "=", "infer_column_problem_types", "(", "train_df", ",", "valid_df", ",", "\n", "label_columns", "=", "train_dataset", ".", "label_columns", ",", "\n", "problem_type", "=", "problem_type", ")", "\n", "assert", "inferred_problem_type", "==", "problem_type", "\n", "for", "label", ",", "gt_label_type", "in", "zip", "(", "train_dataset", ".", "label_columns", ",", "train_dataset", ".", "label_types", ")", ":", "\n", "            ", "assert", "column_types", "[", "label", "]", "==", "gt_label_type", "\n", "\n", "", "feature_col_types", "=", "[", "column_types", "[", "col", "]", "for", "col", "in", "train_dataset", ".", "feature_columns", "]", "\n", "num_categorical", "=", "sum", "(", "[", "col_type", "==", "_C", ".", "CATEGORICAL", "for", "col_type", "in", "feature_col_types", "]", ")", "\n", "num_numerical", "=", "sum", "(", "[", "col_type", "==", "_C", ".", "NUMERICAL", "for", "col_type", "in", "feature_col_types", "]", ")", "\n", "num_text", "=", "sum", "(", "[", "col_type", "==", "_C", ".", "TEXT", "for", "col_type", "in", "feature_col_types", "]", ")", "\n", "dataset_stats", "[", "'#Cat.'", "]", ".", "append", "(", "num_categorical", ")", "\n", "dataset_stats", "[", "'#Num.'", "]", ".", "append", "(", "num_numerical", ")", "\n", "dataset_stats", "[", "'#Text'", "]", ".", "append", "(", "num_text", ")", "\n", "dataset_stats", "[", "'Problem Type'", "]", ".", "append", "(", "problem_type", ")", "\n", "dataset_stats", "[", "'#Train'", "]", ".", "append", "(", "train_num", ")", "\n", "dataset_stats", "[", "'#Test'", "]", ".", "append", "(", "test_num", ")", "\n", "dataset_stats", "[", "'Metric'", "]", ".", "append", "(", "metric", ")", "\n", "", "dataset_stats", "[", "'#Competition'", "]", "=", "np", ".", "array", "(", "dataset_stats", "[", "'#Competition'", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "dataset_stats", "=", "pd", ".", "DataFrame", "(", "dataset_stats", ")", "\n", "return", "dataset_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.data_processing.process_news_channel.get_channel": [[40, 44], ["None"], "function", ["None"], ["def", "get_channel", "(", "row", ")", ":", "\n", "    ", "for", "c", "in", "channel_ohe", ".", "columns", ":", "\n", "        ", "if", "row", "[", "c", "]", "==", "1", ":", "\n", "            ", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.data_processing.process_airbnb.download_raw_airbnb": [[14, 21], ["autogluon.core.utils.files.download", "os.path.join", "region.replace"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.utils.download"], ["def", "download_raw_airbnb", "(", "region", "=", "'united-states/wa/seattle'", ",", "date", "=", "'2020-10-25'", ")", ":", "\n", "\n", "    ", "url_prefix", "=", "f'http://data.insideairbnb.com/{region}/{date}/data/'", "\n", "listing_csv_url", "=", "url_prefix", "+", "'listings.csv.gz'", "\n", "out_path", "=", "download", "(", "listing_csv_url", ",", "path", "=", "os", ".", "path", ".", "join", "(", "DOWNLOAD_DIR", ",", "\n", "region", ".", "replace", "(", "'/'", ",", "'_'", ")", "+", "date", "+", "'.csv'", ")", ")", "\n", "return", "out_path", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.data_processing.process_kaggle_california_house_price.preprocess": [[19, 37], ["df.copy", "new_df[].apply", "numpy.log", "numpy.log().clip", "numpy.log", "numpy.log", "df.copy.drop", "df.copy.drop", "numpy.log", "str().endswith", "numpy.log", "str", "str", "len"], "function", ["None"], ["def", "preprocess", "(", "df", ",", "with_tax_values", "=", "True", ",", "log_scale_lot", "=", "True", ",", "\n", "log_scale_listed_price", "=", "True", ",", "has_label", "=", "True", ")", ":", "\n", "    ", "new_df", "=", "df", ".", "copy", "(", ")", "\n", "new_df", "[", "'Elementary School'", "]", "=", "new_df", "[", "'Elementary School'", "]", ".", "apply", "(", "lambda", "ele", ":", "str", "(", "ele", ")", "[", ":", "-", "len", "(", "' Elementary School'", ")", "]", "if", "str", "(", "ele", ")", ".", "endswith", "(", "'Elementary School'", ")", "else", "ele", ")", "\n", "if", "log_scale_lot", ":", "\n", "        ", "new_df", "[", "'Lot'", "]", "=", "np", ".", "log", "(", "new_df", "[", "'Lot'", "]", "+", "1", ")", "\n", "", "if", "log_scale_listed_price", ":", "\n", "        ", "log_listed_price", "=", "np", ".", "log", "(", "new_df", "[", "'Listed Price'", "]", ")", ".", "clip", "(", "0", ",", "None", ")", "\n", "new_df", "[", "'Listed Price'", "]", "=", "log_listed_price", "\n", "", "if", "with_tax_values", ":", "\n", "        ", "new_df", "[", "'Tax assessed value'", "]", "=", "np", ".", "log", "(", "new_df", "[", "'Tax assessed value'", "]", "+", "1", ")", "\n", "new_df", "[", "'Annual tax amount'", "]", "=", "np", ".", "log", "(", "new_df", "[", "'Annual tax amount'", "]", "+", "1", ")", "\n", "", "else", ":", "\n", "        ", "new_df", ".", "drop", "(", "'Tax assessed value'", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "new_df", ".", "drop", "(", "'Annual tax amount'", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "", "if", "has_label", ":", "\n", "        ", "new_df", "[", "'Sold Price'", "]", "=", "np", ".", "log", "(", "new_df", "[", "'Sold Price'", "]", ")", "\n", "", "return", "new_df", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.ag_benchmark.set_seed": [[30, 37], ["th.manual_seed", "mx.random.seed", "numpy.random.seed", "random.seed"], "function", ["None"], ["def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "import", "mxnet", "as", "mx", "\n", "import", "torch", "as", "th", "\n", "th", ".", "manual_seed", "(", "seed", ")", "\n", "mx", ".", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.ag_benchmark.get_parser": [[39, 76], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "sorted", "auto_mm_bench.datasets.dataset_registry.list_keys", "list", "auto_mm_bench.datasets.TEXT_BENCHMARK_ALIAS_MAPPING.keys"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.list_keys"], ["", "def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Run AutoGluon Multimodal Text+Tabular Benchmark.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nickname'", ",", "type", "=", "str", ",", "\n", "choices", "=", "sorted", "(", "list", "(", "TEXT_BENCHMARK_ALIAS_MAPPING", ".", "keys", "(", ")", ")", ")", ",", "\n", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "\n", "choices", "=", "dataset_registry", ".", "list_keys", "(", ")", ",", "\n", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding_dir'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Directory of the features extracted from a fine-tuned neural network'", ",", "\n", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--text_backbone'", ",", "\n", "choices", "=", "[", "'roberta_base'", ",", "'electra_base'", "]", ",", "default", "=", "'electra_base'", ")", "\n", "parser", ".", "add_argument", "(", "'--multimodal_fusion_strategy'", ",", "\n", "choices", "=", "[", "'fuse_late'", ",", "'fuse_early'", ",", "'all_text'", "]", ",", "default", "=", "'fuse_late'", ")", "\n", "parser", ".", "add_argument", "(", "'--decay-rate'", ",", "default", "=", "0.8", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--n-average-epoch'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--ensemble_option'", ",", "type", "=", "str", ",", "choices", "=", "[", "'5fold_1stack'", ",", "'weighted'", "]", ",", "default", "=", "'weighted'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "\n", "choices", "=", "[", "'ag_tabular_without_text'", ",", "# AG Tabular model without the text column", "\n", "'ag_tabular_without_multimodal_nn'", ",", "# AG Tabular model without multimodal text nn", "\n", "'ag_text_only'", ",", "# AG Text model (multimodal text nn) with only text and no tabular features.", "\n", "'ag_text_multimodal'", ",", "# AG Text model (multimodal text nn) with text + tabular features.", "\n", "'ag_tabular_multimodal'", ",", "# AG Tabular model with the multimodal text nn fused.", "\n", "'pre_embedding'", ",", "# Use the pre_embedding (embedding extracted without finetuning the text model)", "\n", "'tune_embedding'", ",", "# Use the embedding that is obtained by finetuning the text-only/multimodal-text-tabular model", "\n", "]", ",", "\n", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--extract_embedding'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Whether to extract the embedding of the training set at the end of training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "123", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--competition'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Train on the full dataset. '", "\n", "'This can be used for submission.'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.ag_benchmark.set_n_average_epoch": [[78, 83], ["copy.deepcopy"], "function", ["None"], ["", "def", "set_n_average_epoch", "(", "cfg", ",", "nbest_epoch", "=", "3", ")", ":", "\n", "    ", "\"\"\"Set the number of epochs to be 3 to reduce time for large datasets.\"\"\"", "\n", "new_cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "new_cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "'optimization.nbest'", "]", "=", "nbest_epoch", "\n", "return", "new_cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.ag_benchmark.set_lr_decay": [[85, 89], ["copy.deepcopy"], "function", ["None"], ["", "def", "set_lr_decay", "(", "cfg", ",", "decay_rate", ")", ":", "\n", "    ", "new_cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "new_cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "'optimization.layerwise_lr_decay'", "]", "=", "decay_rate", "\n", "return", "new_cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.ag_benchmark.register_text_config": [[91, 104], ["autogluon.text.ag_text_presets.create", "ag_benchmark.set_lr_decay", "ag_benchmark.set_n_average_epoch", "autogluon.text.ag_text_presets.register"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.create", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.ag_benchmark.set_lr_decay", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.ag_benchmark.set_n_average_epoch", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.register"], ["", "def", "register_text_config", "(", "text_backbone", ",", "multimodal_fusion_strategy", ",", "decay_rate", ",", "n_average_epoch", ")", ":", "\n", "    ", "base_key", "=", "f'{text_backbone}_{multimodal_fusion_strategy}'", "\n", "cfg", "=", "ag_text_presets", ".", "create", "(", "base_key", ")", "\n", "cfg", "=", "set_lr_decay", "(", "cfg", ",", "decay_rate", ")", "\n", "cfg", "=", "set_n_average_epoch", "(", "cfg", ",", "n_average_epoch", ")", "\n", "\n", "new_key", "=", "f'{text_backbone}_{multimodal_fusion_strategy}_decay{decay_rate}_avg{n_average_epoch}'", "\n", "\n", "def", "foo", "(", ")", ":", "\n", "        ", "return", "cfg", "\n", "\n", "", "ag_text_presets", ".", "register", "(", "new_key", ",", "foo", ")", "\n", "return", "new_key", ",", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.ag_benchmark.disable_text_training": [[106, 118], ["copy.deepcopy"], "function", ["None"], ["", "def", "disable_text_training", "(", "cfg", ")", ":", "\n", "    ", "new_cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "new_cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "\n", "'model.num_trainable_layers'", "]", "=", "0", "\n", "new_cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "\n", "'model._disable_update'", "]", "=", "True", "\n", "new_cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "\n", "'optimization.num_train_epochs'", "]", "=", "1", "\n", "new_cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "\n", "'preprocessing.categorical.convert_to_text'", "]", "=", "True", "\n", "new_cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "'optimization.lr'", "]", "=", "0.", "\n", "return", "new_cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.ag_benchmark.get_ag_tabular_hparam": [[120, 134], ["None"], "function", ["None"], ["", "def", "get_ag_tabular_hparam", "(", "text_presets", ",", "use_multimodal_text_nn", "=", "True", ")", ":", "\n", "    ", "ret", "=", "{", "\n", "'NN'", ":", "{", "}", ",", "\n", "'GBM'", ":", "[", "\n", "{", "}", ",", "\n", "{", "'extra_trees'", ":", "True", ",", "'ag_args'", ":", "{", "'name_suffix'", ":", "'XT'", "}", "}", ",", "\n", "'GBMLarge'", ",", "\n", "]", ",", "\n", "'CAT'", ":", "{", "}", ",", "\n", "'XGB'", ":", "{", "}", ",", "\n", "}", "\n", "if", "use_multimodal_text_nn", ":", "\n", "        ", "ret", "[", "'AG_TEXT_NN'", "]", "=", "[", "text_presets", "]", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.ag_benchmark.train_model": [[136, 311], ["ag_benchmark.set_seed", "sklearn.model_selection.train_test_split", "autogluon.text.text_prediction.infer_types.infer_column_problem_types", "ag_benchmark.register_text_config", "time.time", "time.time", "time.time", "print", "autogluon.text.TextPredictor.predict", "time.time", "predictor.predict.to_csv", "gt.to_csv", "print", "auto_mm_bench.datasets.dataset_registry.create", "auto_mm_bench.datasets.dataset_registry.create", "auto_mm_bench.datasets.dataset_registry.create", "pandas.concat", "auto_mm_bench.datasets.dataset_registry.create", "auto_mm_bench.datasets.dataset_registry.create", "autogluon.features.generators.AutoMLPipelineFeatureGenerator", "autogluon.tabular.TabularPredictor", "autogluon.text.TextPredictor.fit", "autogluon.text.TextPredictor.predict_proba", "predictor.predict_proba.to_csv", "os.path.join", "os.path.join", "autogluon.text.TextPredictor.evaluate", "open", "json.dump", "print", "autogluon.text.TextPredictor.extract_embedding", "autogluon.text.TextPredictor.extract_embedding", "numpy.save", "numpy.save", "numpy.random.RandomState", "autogluon.tabular.TabularPredictor", "os.path.join", "open", "json.dump", "os.path.join", "os.path.join", "os.path.join", "sklearn.feature_extraction.text.CountVectorizer", "ag_benchmark.get_ag_tabular_hparam", "ag_benchmark.get_ag_tabular_hparam", "autogluon.text.TextPredictor.fit", "autogluon.text.TextPredictor", "autogluon.text.TextPredictor.fit", "os.path.join", "cpuinfo.get_cpu_info", "autogluon.text.TextPredictor.fit", "train_data.join.join", "train_data.join.reset_index", "test_data.join.join", "test_data.join.reset_index", "ag_benchmark.get_ag_tabular_hparam", "autogluon.tabular.TabularPredictor", "no_text_feature_columns.append", "ag_benchmark.disable_text_training", "train_text_only_data.sample", "autogluon.text.TextPredictor", "autogluon.text.TextPredictor.fit", "autogluon.text.TextPredictor.extract_embedding", "autogluon.text.TextPredictor.extract_embedding", "numpy.load", "numpy.load", "pandas.DataFrame", "pandas.DataFrame", "autogluon.text.TextPredictor.fit", "numpy.save", "numpy.save", "os.path.join", "os.path.join", "autogluon.text.TextPredictor.fit", "os.path.join", "os.path.join", "os.path.join", "range", "range"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.set_seed", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.ag_benchmark.register_text_config", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.predict", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.create", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.create", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.create", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.create", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.create", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.fit", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.ag_benchmark.get_ag_tabular_hparam", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.ag_benchmark.get_ag_tabular_hparam", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.fit", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.fit", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.fit", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.ag_benchmark.get_ag_tabular_hparam", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.ag_benchmark.disable_text_training", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.fit", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.fit", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.fit"], ["", "def", "train_model", "(", "args", ")", ":", "\n", "    ", "seed", "=", "args", ".", "seed", "\n", "dataset_name", "=", "args", ".", "dataset", "\n", "save_dir", "=", "args", ".", "save_dir", "\n", "get_competition_results", "=", "args", ".", "competition", "\n", "model", "=", "args", ".", "model", "\n", "if", "save_dir", "is", "None", ":", "\n", "        ", "save_dir", "=", "f\"{dataset_name}_{model}_{args.text_backbone}_{args.decay_rate}_{args.n_average_epoch}_{args.ensemble_option}_{args.multimodal_fusion_strategy}\"", "\n", "\n", "", "set_seed", "(", "seed", ")", "\n", "if", "get_competition_results", ":", "\n", "        ", "train_dataset", "=", "dataset_registry", ".", "create", "(", "dataset_name", ",", "'train'", ")", "\n", "dev_dataset", "=", "dataset_registry", ".", "create", "(", "dataset_name", ",", "'test'", ")", "\n", "test_dataset", "=", "dataset_registry", ".", "create", "(", "dataset_name", ",", "'competition'", ")", "\n", "train_data", "=", "pd", ".", "concat", "(", "[", "train_dataset", ".", "data", ",", "dev_dataset", ".", "data", "]", ")", "\n", "test_data", "=", "test_dataset", ".", "data", "\n", "", "else", ":", "\n", "        ", "train_dataset", "=", "dataset_registry", ".", "create", "(", "dataset_name", ",", "'train'", ")", "\n", "test_dataset", "=", "dataset_registry", ".", "create", "(", "dataset_name", ",", "'test'", ")", "\n", "train_data", "=", "train_dataset", ".", "data", "\n", "test_data", "=", "test_dataset", ".", "data", "\n", "\n", "", "feature_columns", "=", "train_dataset", ".", "feature_columns", "\n", "label_columns", "=", "train_dataset", ".", "label_columns", "\n", "metric", "=", "train_dataset", ".", "metric", "\n", "problem_type", "=", "train_dataset", ".", "problem_type", "\n", "train_data1", ",", "tuning_data1", "=", "sklearn", ".", "model_selection", ".", "train_test_split", "(", "\n", "train_data", ",", "\n", "test_size", "=", "0.05", ",", "\n", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ")", "\n", "column_types", ",", "inferred_problem_type", "=", "infer_column_problem_types", "(", "train_data1", ",", "\n", "tuning_data1", ",", "\n", "label_columns", "=", "label_columns", ",", "\n", "problem_type", "=", "problem_type", ")", "\n", "train_data", "=", "train_data", "[", "feature_columns", "+", "label_columns", "]", "\n", "\n", "if", "not", "get_competition_results", ":", "\n", "        ", "test_data", "=", "test_data", "[", "feature_columns", "+", "label_columns", "]", "\n", "\n", "", "text_presets_key", ",", "text_presets", "=", "register_text_config", "(", "text_backbone", "=", "args", ".", "text_backbone", ",", "\n", "multimodal_fusion_strategy", "=", "args", ".", "multimodal_fusion_strategy", ",", "\n", "decay_rate", "=", "args", ".", "decay_rate", ",", "\n", "n_average_epoch", "=", "args", ".", "n_average_epoch", ")", "\n", "\n", "train_tic", "=", "time", ".", "time", "(", ")", "\n", "if", "model", "==", "'ag_tabular_quick'", ":", "\n", "        ", "MAX_NGRAM", "=", "300", "\n", "feature_generator", "=", "AutoMLPipelineFeatureGenerator", "(", "\n", "vectorizer", "=", "CountVectorizer", "(", "min_df", "=", "30", ",", "ngram_range", "=", "(", "1", ",", "3", ")", ",", "max_features", "=", "MAX_NGRAM", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "predictor", "=", "TabularPredictor", "(", "label", "=", "label_columns", "[", "0", "]", ",", "\n", "path", "=", "save_dir", ",", "\n", "problem_type", "=", "problem_type", ")", "\n", "predictor", ".", "fit", "(", "train_data", ",", "time_limit", "=", "30", ",", "\n", "feature_generator", "=", "feature_generator", ")", "\n", "", "elif", "model", "==", "'ag_tabular_without_text'", "or", "model", "==", "'ag_tabular_without_multimodal_nn'", "or", "model", "==", "'ag_tabular_multimodal'", ":", "\n", "        ", "if", "model", "==", "'ag_tabular_without_text'", ":", "\n", "            ", "no_text_feature_columns", "=", "[", "]", "\n", "for", "col_name", "in", "feature_columns", ":", "\n", "                ", "if", "column_types", "[", "col_name", "]", "!=", "_TEXT", ":", "\n", "                    ", "no_text_feature_columns", ".", "append", "(", "col_name", ")", "\n", "", "", "train_data", "=", "train_data", "[", "no_text_feature_columns", "+", "label_columns", "]", "\n", "test_data", "=", "test_data", "[", "no_text_feature_columns", "+", "label_columns", "]", "\n", "", "if", "model", "==", "'ag_tabular_multimodal'", ":", "\n", "            ", "hyperparameters", "=", "get_ag_tabular_hparam", "(", "text_presets", "=", "text_presets", ",", "\n", "use_multimodal_text_nn", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "hyperparameters", "=", "get_ag_tabular_hparam", "(", "text_presets", "=", "text_presets", ",", "\n", "use_multimodal_text_nn", "=", "False", ")", "\n", "", "predictor", "=", "TabularPredictor", "(", "path", "=", "save_dir", ",", "\n", "label", "=", "label_columns", "[", "0", "]", ",", "\n", "problem_type", "=", "problem_type", ",", "\n", "eval_metric", "=", "metric", ")", "\n", "\n", "if", "args", ".", "ensemble_option", "==", "'5fold_1stack'", ":", "\n", "            ", "predictor", ".", "fit", "(", "train_data", "=", "train_data", ",", "\n", "hyperparameters", "=", "hyperparameters", ",", "\n", "num_bag_folds", "=", "5", ",", "\n", "num_stack_levels", "=", "1", ")", "\n", "", "elif", "args", ".", "ensemble_option", "==", "'weighted'", ":", "\n", "            ", "predictor", ".", "fit", "(", "train_data", "=", "train_data", ",", "\n", "hyperparameters", "=", "hyperparameters", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "elif", "model", "==", "'ag_text_only'", "or", "model", "==", "'ag_text_multimodal'", ":", "\n", "        ", "if", "model", "==", "'ag_text_only'", ":", "\n", "            ", "text_feature_columns", "=", "[", "col_name", "for", "col_name", "in", "feature_columns", "\n", "if", "column_types", "[", "col_name", "]", "==", "_TEXT", "]", "\n", "train_data", "=", "train_data", "[", "text_feature_columns", "+", "label_columns", "]", "\n", "test_data", "=", "test_data", "[", "text_feature_columns", "+", "label_columns", "]", "\n", "", "predictor", "=", "TextPredictor", "(", "path", "=", "save_dir", ",", "\n", "label", "=", "label_columns", "[", "0", "]", ",", "\n", "problem_type", "=", "problem_type", ",", "\n", "eval_metric", "=", "metric", ")", "\n", "predictor", ".", "fit", "(", "train_data", "=", "train_data", ",", "\n", "hyperparameters", "=", "text_presets", ",", "\n", "seed", "=", "seed", ")", "\n", "", "elif", "model", "==", "'pre_embedding'", "or", "model", "==", "'tune_embedding'", ":", "\n", "        ", "if", "model", "==", "'pre_embedding'", ":", "\n", "            ", "text_presets_no_train", "=", "disable_text_training", "(", "text_presets", ")", "\n", "text_feature_columns", "=", "[", "col_name", "for", "col_name", "in", "train_dataset", ".", "feature_columns", "\n", "if", "column_types", "[", "col_name", "]", "==", "'text'", "]", "\n", "train_text_only_data", "=", "train_dataset", ".", "data", "[", "text_feature_columns", "+", "train_dataset", ".", "label_columns", "]", "\n", "test_text_only_data", "=", "test_dataset", ".", "data", "[", "text_feature_columns", "+", "test_dataset", ".", "label_columns", "]", "\n", "sampled_train_data", "=", "train_text_only_data", ".", "sample", "(", "100", ")", "\n", "predictor", "=", "TextPredictor", "(", "path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'temp_extractor'", ")", ",", "\n", "label", "=", "label_columns", "[", "0", "]", ",", "\n", "problem_type", "=", "problem_type", ",", "\n", "eval_metric", "=", "metric", ")", "\n", "predictor", ".", "fit", "(", "train_data", "=", "sampled_train_data", ",", "\n", "hyperparameters", "=", "text_presets_no_train", ",", "\n", "seed", "=", "seed", ")", "\n", "train_features", "=", "predictor", ".", "extract_embedding", "(", "train_data", ",", "as_pandas", "=", "False", ")", "\n", "test_features", "=", "predictor", ".", "extract_embedding", "(", "test_data", ",", "as_pandas", "=", "False", ")", "\n", "if", "args", ".", "extract_embedding", ":", "\n", "                ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'train_embedding.npy'", ")", ",", "train_features", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'test_embedding.npy'", ")", ",", "test_features", ")", "\n", "return", "\n", "", "", "else", ":", "\n", "            ", "train_features", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "embedding_dir", ",", "'train_embedding.npy'", ")", ")", "\n", "test_features", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "embedding_dir", ",", "'test_embedding.npy'", ")", ")", "\n", "", "train_data", "=", "train_data", ".", "join", "(", "pd", ".", "DataFrame", "(", "\n", "train_features", ",", "columns", "=", "[", "f'pre_feat{i}'", "for", "i", "in", "range", "(", "train_features", ".", "shape", "[", "1", "]", ")", "]", ")", ")", "\n", "train_data", ".", "reset_index", "(", "drop", "=", "True", ",", "inplace", "=", "True", ")", "\n", "test_data", "=", "test_data", ".", "join", "(", "pd", ".", "DataFrame", "(", "\n", "test_features", ",", "columns", "=", "[", "f'pre_feat{i}'", "for", "i", "in", "range", "(", "test_features", ".", "shape", "[", "1", "]", ")", "]", ")", ")", "\n", "test_data", ".", "reset_index", "(", "drop", "=", "True", ",", "inplace", "=", "True", ")", "\n", "hyperparameters", "=", "get_ag_tabular_hparam", "(", "text_presets", "=", "text_presets", ",", "\n", "use_multimodal_text_nn", "=", "False", ")", "\n", "predictor", "=", "TabularPredictor", "(", "path", "=", "save_dir", ",", "\n", "label", "=", "label_columns", "[", "0", "]", ",", "\n", "problem_type", "=", "problem_type", ",", "\n", "eval_metric", "=", "metric", ")", "\n", "\n", "if", "args", ".", "ensemble_option", "==", "'5fold_1stack'", ":", "\n", "            ", "predictor", ".", "fit", "(", "train_data", "=", "train_data", ",", "\n", "hyperparameters", "=", "hyperparameters", ",", "\n", "num_bag_folds", "=", "5", ",", "\n", "num_stack_levels", "=", "1", ")", "\n", "", "elif", "args", ".", "ensemble_option", "==", "'weighted'", ":", "\n", "            ", "predictor", ".", "fit", "(", "train_data", "=", "train_data", ",", "\n", "hyperparameters", "=", "hyperparameters", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "train_toc", "=", "time", ".", "time", "(", ")", "\n", "inference_tic", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Begin to run inference'", ")", "\n", "predictions", "=", "predictor", ".", "predict", "(", "test_data", ",", "as_pandas", "=", "True", ")", "\n", "\n", "inference_toc", "=", "time", ".", "time", "(", ")", "\n", "if", "problem_type", "==", "MULTICLASS", "or", "problem_type", "==", "BINARY", ":", "\n", "        ", "prediction_prob", "=", "predictor", ".", "predict_proba", "(", "test_data", ",", "as_pandas", "=", "True", ")", "\n", "prediction_prob", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'test_prediction_prob.csv'", ")", ")", "\n", "", "predictions", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'test_prediction.csv'", ")", ")", "\n", "gt", "=", "test_data", "[", "label_columns", "[", "0", "]", "]", "\n", "gt", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'ground_truth.csv'", ")", ")", "\n", "if", "not", "get_competition_results", ":", "\n", "        ", "score", "=", "predictor", ".", "evaluate", "(", "test_data", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'test_score.json'", ")", ",", "'w'", ")", "as", "of", ":", "\n", "            ", "json", ".", "dump", "(", "{", "metric", ":", "score", "}", ",", "of", ")", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'speed_stats.json'", ")", ",", "'w'", ")", "as", "of", ":", "\n", "        ", "json", ".", "dump", "(", "{", "'train_time'", ":", "train_toc", "-", "train_tic", ",", "\n", "'inference_time'", ":", "inference_toc", "-", "inference_tic", ",", "\n", "'cpuinfo'", ":", "cpuinfo", ".", "get_cpu_info", "(", ")", "}", ",", "of", ")", "\n", "", "print", "(", "{", "metric", ":", "score", "}", ")", "\n", "# Start to extract embedding", "\n", "if", "args", ".", "extract_embedding", ":", "\n", "        ", "print", "(", "'Start to extract embeddings'", ")", "\n", "train_embeddings", "=", "predictor", ".", "extract_embedding", "(", "train_data", ",", "as_pandas", "=", "False", ")", "\n", "test_embeddings", "=", "predictor", ".", "extract_embedding", "(", "test_data", ",", "as_pandas", "=", "False", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'train_embedding.npy'", ")", ",", "train_embeddings", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'test_embedding.npy'", ")", ",", "test_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.__init__": [[44, 51], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "class_prefix", "=", "'cls_'", "\n", "self", ".", "class_suffix", "=", "'_cls'", "\n", "self", ".", "label_column", "=", "None", "\n", "self", ".", "label_type", "=", "None", "\n", "self", ".", "problem_type", "=", "None", "\n", "self", ".", "classes", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.fit": [[52, 107], ["os.path.join", "time.time", "h2o.init", "h2o.H2OFrame", "list", "list.remove", "h2o.automl.H2OAutoML", "h2o.automl.H2OAutoML.train", "time.time", "len", "h2o.save_model", "h2o_benchmark.H2OBaseline.add_label_prefix", "train_data[].isna().sum", "print", "h2o_benchmark.H2OBaseline.copy", "train[].asfactor", "ValueError", "print", "int", "h2o_benchmark.H2OBaseline.convert_metric", "h2o_benchmark.H2OBaseline.remove_label_prefix", "AssertionError", "train_data[].isna", "warnings.warn", "train_data[].isna"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.add_label_prefix", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.convert_metric", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.remove_label_prefix"], ["", "def", "fit", "(", "self", ",", "train_data", ",", "label_column", ",", "problem_type", ",", "eval_metric", "=", "None", ",", "\n", "output_directory", "=", "None", ",", "time_limit_sec", "=", "None", ",", "random_state", "=", "123", ")", ":", "\n", "        ", "self", ".", "label_column", "=", "label_column", "\n", "self", ".", "label_type", "=", "train_data", "[", "label_column", "]", ".", "dtype", "\n", "self", ".", "problem_type", "=", "problem_type", "\n", "output_directory", "=", "os", ".", "path", ".", "join", "(", "output_directory", ",", "\"h2o_model/\"", ")", "\n", "if", "self", ".", "problem_type", "in", "[", "BINARY", ",", "MULTICLASS", "]", ":", "\n", "            ", "train_data", "=", "self", ".", "add_label_prefix", "(", "train_data", ")", "\n", "\n", "# Set h2o memory limits recommended by the authors (recommended leaving 2 GB free for the operating system):", "\n", "", "t0", "=", "time", ".", "time", "(", ")", "\n", "h2o", ".", "init", "(", "log_dir", "=", "output_directory", ")", "\n", "if", "train_data", "[", "label_column", "]", ".", "isna", "(", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "print", "(", "\"WARNING: removing missing training labels\"", ")", "\n", "train_data", "=", "train_data", ".", "copy", "(", ")", "\n", "keep_inds", "=", "~", "train_data", "[", "label_column", "]", ".", "isna", "(", ")", "\n", "train_data", "[", "label_column", "]", "=", "train_data", "[", "label_column", "]", "[", "keep_inds", "]", "\n", "\n", "", "train", "=", "h2o", ".", "H2OFrame", "(", "train_data", ")", "\n", "self", ".", "column_types", "=", "train", ".", "types", "\n", "del", "self", ".", "column_types", "[", "label_column", "]", "# label column will not appear in test data, remove this if it appears in test data.", "\n", "if", "problem_type", "in", "[", "BINARY", ",", "MULTICLASS", "]", ":", "\n", "            ", "train", "[", "label_column", "]", "=", "train", "[", "label_column", "]", ".", "asfactor", "(", ")", "# ensure h2o knows this is not regression", "\n", "", "x", "=", "list", "(", "train", ".", "columns", ")", "\n", "if", "label_column", "not", "in", "x", ":", "\n", "            ", "raise", "ValueError", "(", "\"label_column must be present in training data: %s\"", "%", "label_column", ")", "\n", "", "x", ".", "remove", "(", "label_column", ")", "\n", "# H2O settings:", "\n", "training_params", "=", "{", "'seed'", ":", "random_state", "}", "\n", "if", "time_limit_sec", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Setting time limits = \"", ",", "time_limit_sec", ")", "\n", "training_params", "[", "'max_runtime_secs'", "]", "=", "int", "(", "time_limit_sec", ")", "\n", "", "if", "eval_metric", "is", "not", "None", ":", "# Pass in metric to fit()", "\n", "            ", "h2o_metric", "=", "self", ".", "convert_metric", "(", "eval_metric", ")", "\n", "if", "h2o_metric", "is", "not", "None", ":", "\n", "                ", "training_params", "[", "'sort_metric'", "]", "=", "h2o_metric", "\n", "if", "eval_metric", "!=", "'roc_auc'", ":", "# h2o authors do not recommend using AUC for early-stopping in binary classification and suggest using default instead. We also empirically verified this works better as well.", "\n", "                    ", "training_params", "[", "'stopping_metric'", "]", "=", "h2o_metric", "# TODO: Not used in AutoMLBenchmark! Do we keep this? Authors mentioned to do this in email.", "\n", "", "", "else", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Specified metric is unknown to h2o. Fitting h2o without supplied evaluation metric instead.\"", ")", "\n", "", "", "h2o_model", "=", "H2OAutoML", "(", "**", "training_params", ")", "\n", "h2o_model", ".", "train", "(", "x", "=", "x", ",", "y", "=", "label_column", ",", "training_frame", "=", "train", ")", "\n", "if", "self", ".", "problem_type", "in", "[", "BINARY", ",", "MULTICLASS", "]", ":", "\n", "            ", "train_data", "=", "self", ".", "remove_label_prefix", "(", "train_data", ")", "\n", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "fit_time", "=", "t1", "-", "t0", "\n", "num_models_trained", "=", "len", "(", "h2o_model", ".", "leaderboard", ")", "\n", "# Get num_models_ensemble:", "\n", "if", "not", "h2o_model", ".", "leader", ":", "\n", "            ", "raise", "AssertionError", "(", "\"H2O could not produce any model in the requested time.\"", ")", "\n", "\n", "", "best_model", "=", "h2o_model", ".", "leader", "\n", "h2o", ".", "save_model", "(", "best_model", ",", "path", "=", "output_directory", ")", "\n", "self", ".", "model", "=", "h2o_model", "\n", "return", "(", "num_models_trained", ",", "fit_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.predict": [[108, 151], ["time.time", "h2o.H2OFrame", "h2o_model.predict().as_data_frame", "time.time", "h2o.connection", "len", "len", "print", "h2o.remove_all", "h2o.connection().close", "h2o.connection", "h2o.connection().local_server.shutdown", "h2o_model.predict", "h2o_model.predict().as_data_frame.columns.tolist", "h2o_benchmark.H2OBaseline.remove_label_prefix_class", "pandas.Series", "h2o_benchmark.H2OBaseline.remove_label_prefix_class", "h2o.connection", "list", "h2o.connection"], "methods", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.predict", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.remove_label_prefix_class", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.remove_label_prefix_class"], ["", "def", "predict", "(", "self", ",", "test_data", ",", "predict_proba", "=", "False", ",", "pred_class_and_proba", "=", "False", ")", ":", "\n", "        ", "\"\"\" Use pred_class_and_proba to produce both predicted probabilities and predicted classes.\n            If this is regression problem, predict_proba and pred_class_and_proba are disregarded.\n            Label column should not be present in test_data.\n\n            Returns: Tuple (y_pred, y_prob, inference_time) where any element may be None.\n            y_prob is a 2D numpy array of predicted probabilities, where each column represents a class. The ith column represents the class found via: self.classes[i]\n        \"\"\"", "\n", "h2o_model", "=", "self", ".", "model", "\n", "if", "self", ".", "problem_type", "==", "REGRESSION", ":", "\n", "            ", "pred_class_and_proba", "=", "False", "\n", "predict_proba", "=", "False", "\n", "", "y_pred", "=", "None", "\n", "y_prob", "=", "None", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "test", "=", "h2o", ".", "H2OFrame", "(", "test_data", ",", "column_types", "=", "self", ".", "column_types", ")", "\n", "if", "len", "(", "test", ")", "!=", "len", "(", "test_data", ")", ":", "\n", "            ", "print", "(", "\"WARNING: test-data length altered in H2OFrame conversion\"", ")", "\n", "", "preds_df", "=", "h2o_model", ".", "predict", "(", "test", ")", ".", "as_data_frame", "(", "use_pandas", "=", "True", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "predict_time", "=", "t1", "-", "t0", "\n", "if", "self", ".", "problem_type", "is", "not", "REGRESSION", ":", "\n", "            ", "self", ".", "classes", "=", "preds_df", ".", "columns", ".", "tolist", "(", ")", "[", "1", ":", "]", "\n", "if", "self", ".", "problem_type", "in", "[", "BINARY", ",", "MULTICLASS", "]", ":", "\n", "                ", "self", ".", "classes", "=", "self", ".", "remove_label_prefix_class", "(", "self", ".", "classes", ")", "\n", "\n", "", "", "if", "(", "not", "predict_proba", ")", "or", "pred_class_and_proba", ":", "\n", "            ", "y_pred", "=", "preds_df", ".", "iloc", "[", ":", ",", "0", "]", "\n", "# print(y_pred[:5])", "\n", "if", "self", ".", "problem_type", "in", "[", "BINARY", ",", "MULTICLASS", "]", ":", "\n", "                ", "y_pred", "=", "pd", ".", "Series", "(", "self", ".", "remove_label_prefix_class", "(", "list", "(", "y_pred", ".", "values", ")", ")", ",", "index", "=", "y_pred", ".", "index", ")", "\n", "# print(y_pred[:5])", "\n", "\n", "", "", "if", "predict_proba", "or", "pred_class_and_proba", ":", "\n", "            ", "y_prob", "=", "preds_df", ".", "iloc", "[", ":", ",", "1", ":", "]", "# .values  # keep as pandas instead of numpy", "\n", "\n", "# Shutdown H2O before returning value:", "\n", "", "if", "h2o", ".", "connection", "(", ")", ":", "\n", "            ", "h2o", ".", "remove_all", "(", ")", "\n", "h2o", ".", "connection", "(", ")", ".", "close", "(", ")", "\n", "", "if", "h2o", ".", "connection", "(", ")", ".", "local_server", ":", "\n", "            ", "h2o", ".", "connection", "(", ")", ".", "local_server", ".", "shutdown", "(", ")", "\n", "", "return", "(", "y_pred", ",", "y_prob", ",", "predict_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.convert_metric": [[152, 179], ["warnings.warn"], "methods", ["None"], ["", "def", "convert_metric", "(", "self", ",", "metric", ")", ":", "\n", "        ", "\"\"\"Converts given metric to appropriate h2o metric used for sort_metric.\n           Args:\n                metric : str\n                    May take one of the following values:\n        \"\"\"", "\n", "metrics_map", "=", "{", "\n", "'accuracy'", ":", "'AUTO'", ",", "\n", "'acc'", ":", "'AUTO'", ",", "\n", "'f1'", ":", "'auc'", ",", "\n", "'log_loss'", ":", "'logloss'", ",", "\n", "'roc_auc'", ":", "'auc'", ",", "\n", "'balanced_accuracy'", ":", "'mean_per_class_error'", ",", "\n", "'precision'", ":", "'auc'", ",", "\n", "'recall'", ":", "'auc'", ",", "\n", "'mean_squared_error'", ":", "'mse'", ",", "\n", "'root_mean_squared_error'", ":", "'mse'", ",", "\n", "'median_absolute_error'", ":", "'mae'", ",", "\n", "'mean_absolute_error'", ":", "'mae'", ",", "\n", "# 'r2': 'deviance',", "\n", "'r2'", ":", "'mse'", ",", "\n", "}", "\n", "if", "metric", "in", "metrics_map", ":", "\n", "            ", "return", "metrics_map", "[", "metric", "]", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Unknown metric will not be used by h2o: %s\"", "%", "metric", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.add_label_prefix": [[181, 187], ["df.copy.copy.copy", "zip", "str"], "methods", ["None"], ["", "", "def", "add_label_prefix", "(", "self", ",", "df", ")", ":", "\n", "# print(df[self.label_column].iloc[0])", "\n", "        ", "df", "=", "df", ".", "copy", "(", ")", "\n", "df", "[", "self", ".", "label_column", "]", "=", "[", "self", ".", "class_prefix", "+", "str", "(", "label", "[", "0", "]", ")", "+", "self", ".", "class_suffix", "for", "label", "in", "zip", "(", "df", "[", "self", ".", "label_column", "]", ")", "]", "\n", "# print(df[self.label_column].iloc[0])", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.remove_label_prefix": [[189, 199], ["df.copy.copy.copy", "len", "len", "df[].astype", "zip", "zip"], "methods", ["None"], ["", "def", "remove_label_prefix", "(", "self", ",", "df", ")", ":", "\n", "        ", "df", "=", "df", ".", "copy", "(", ")", "\n", "length_to_remove_prefix", "=", "len", "(", "self", ".", "class_prefix", ")", "\n", "length_to_remove_suffix", "=", "len", "(", "self", ".", "class_suffix", ")", "\n", "# print(df[self.label_column].iloc[0])", "\n", "df", "[", "self", ".", "label_column", "]", "=", "[", "label", "[", "0", "]", "[", "length_to_remove_prefix", ":", "]", "for", "label", "in", "zip", "(", "df", "[", "self", ".", "label_column", "]", ")", "]", "\n", "df", "[", "self", ".", "label_column", "]", "=", "[", "label", "[", "0", "]", "[", ":", "-", "length_to_remove_suffix", "]", "for", "label", "in", "zip", "(", "df", "[", "self", ".", "label_column", "]", ")", "]", "\n", "# print(df[self.label_column].iloc[0])", "\n", "df", "[", "self", ".", "label_column", "]", "=", "df", "[", "self", ".", "label_column", "]", ".", "astype", "(", "self", ".", "label_type", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.remove_label_prefix_class": [[201, 212], ["len", "len", "numpy.array", "class_name_list.tolist.tolist.tolist"], "methods", ["None"], ["", "def", "remove_label_prefix_class", "(", "self", ",", "class_name_list", ")", ":", "\n", "        ", "length_to_remove_prefix", "=", "len", "(", "self", ".", "class_prefix", ")", "\n", "length_to_remove_suffix", "=", "len", "(", "self", ".", "class_suffix", ")", "\n", "# print(class_name_list)", "\n", "class_name_list", "=", "[", "label", "[", "length_to_remove_prefix", ":", "]", "for", "label", "in", "class_name_list", "]", "\n", "class_name_list", "=", "[", "label", "[", ":", "-", "length_to_remove_suffix", "]", "for", "label", "in", "class_name_list", "]", "\n", "# print(class_name_list)", "\n", "class_name_list", "=", "np", ".", "array", "(", "class_name_list", ",", "dtype", "=", "self", ".", "label_type", ")", "\n", "class_name_list", "=", "class_name_list", ".", "tolist", "(", ")", "\n", "# print(class_name_list)", "\n", "return", "class_name_list", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.set_seed": [[215, 218], ["numpy.random.seed", "random.seed"], "function", ["None"], ["", "", "def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.get_text_cols": [[219, 223], ["autogluon.features.generators.AutoMLPipelineFeatureGenerator", "autogluon.features.generators.AutoMLPipelineFeatureGenerator.fit"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.fit"], ["", "def", "get_text_cols", "(", "df", ")", ":", "\n", "    ", "feature_generator", "=", "AutoMLPipelineFeatureGenerator", "(", "enable_text_ngram_features", "=", "False", ",", "enable_text_special_features", "=", "False", ",", "enable_raw_text_features", "=", "True", ")", "\n", "feature_generator", ".", "fit", "(", "df", ")", "\n", "return", "feature_generator", ".", "feature_metadata_in", ".", "type_group_map_special", "[", "'text'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.train_w2v": [[224, 249], ["print", "df.copy.copy", "h2o_benchmark.get_text_cols", "print", "h2o_benchmark.df_to_h2o", "print", "text_frame[].ascharacter", "h2o_benchmark.tokenize", "h2o.estimators.word2vec.H2OWord2vecEstimator", "h2o.estimators.word2vec.H2OWord2vecEstimator.train", "int", "os.path.join", "all_text.append.append", "pandas.DataFrame"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.get_text_cols", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.df_to_h2o", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.tokenize"], ["", "def", "train_w2v", "(", "df", ",", "epochs", "=", "None", ",", "save_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\" trains word2vec model on all text columns of df.\n        Returns w2v model object that can transform data.\n    \"\"\"", "\n", "print", "(", "\"training word2vec model ...\"", ")", "\n", "args", "=", "{", "}", "\n", "if", "epochs", "is", "not", "None", ":", "\n", "        ", "args", "[", "'epochs'", "]", "=", "int", "(", "epochs", ")", "\n", "", "if", "save_dir", "is", "not", "None", ":", "\n", "        ", "args", "[", "'export_checkpoints_dir'", "]", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"h2o_model/\"", ")", "\n", "", "df", "=", "df", ".", "copy", "(", ")", "\n", "text_columns", "=", "get_text_cols", "(", "df", ")", "\n", "print", "(", "\"Text columns are: \"", ",", "text_columns", ")", "\n", "df_text", "=", "df", "[", "text_columns", "]", "\n", "all_text", "=", "df_text", "[", "text_columns", "[", "0", "]", "]", "\n", "for", "col", "in", "text_columns", "[", "1", ":", "]", ":", "\n", "        ", "all_text", "=", "all_text", ".", "append", "(", "df_text", "[", "col", "]", ")", "\n", "", "text_frame", "=", "df_to_h2o", "(", "pd", ".", "DataFrame", "(", "all_text", ")", ")", "\n", "print", "(", "text_frame", ")", "\n", "text_frame", "[", "text_frame", ".", "columns", "[", "0", "]", "]", "=", "text_frame", "[", "text_frame", ".", "columns", "[", "0", "]", "]", ".", "ascharacter", "(", ")", "\n", "words", "=", "tokenize", "(", "text_frame", ")", "\n", "w2v_model", "=", "H2OWord2vecEstimator", "(", "sent_sample_rate", "=", "0.0", ",", "**", "args", ")", "\n", "w2v_model", ".", "train", "(", "training_frame", "=", "words", ")", "\n", "w2v_model", ".", "text_columns", "=", "text_columns", "\n", "return", "w2v_model", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.process_w2v": [[250, 273], ["print", "df.copy.copy", "df[].copy", "h2o_benchmark.df_to_h2o", "print", "df.copy.drop", "df.copy.reset_index", "pandas.concat().reset_index", "len", "len", "text_frame[].ascharacter", "h2o_benchmark.tokenize", "w2v_model.transform", "print", "text_feats.as_data_frame().reset_index.as_data_frame().reset_index", "text_feat_list.append", "len", "len", "ValueError", "len", "len", "pandas.concat", "text_feats.as_data_frame().reset_index.as_data_frame", "len", "len"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.df_to_h2o", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.tokenize"], ["", "def", "process_w2v", "(", "df", ",", "w2v_model", ")", ":", "\n", "    ", "\"\"\" returns new df with text-features all replaced by word2vec features \"\"\"", "\n", "print", "(", "\"processing data with word2vec ...\"", ")", "\n", "df", "=", "df", ".", "copy", "(", ")", "\n", "text_columns", "=", "w2v_model", ".", "text_columns", "\n", "df_text", "=", "df", "[", "text_columns", "]", ".", "copy", "(", ")", "\n", "text_frame", "=", "df_to_h2o", "(", "df_text", ")", "\n", "print", "(", "\"len(df_text)=\"", ",", "len", "(", "df_text", ")", ",", "\"len(text_frame)=\"", ",", "len", "(", "text_frame", ")", ")", "\n", "text_feat_list", "=", "[", "]", "\n", "for", "col", "in", "text_columns", ":", "\n", "        ", "text_frame", "[", "col", "]", "=", "text_frame", "[", "col", "]", ".", "ascharacter", "(", ")", "\n", "words_col", "=", "tokenize", "(", "text_frame", "[", "col", "]", ")", "\n", "text_feats", "=", "w2v_model", ".", "transform", "(", "words_col", ",", "aggregate_method", "=", "\"AVERAGE\"", ")", "\n", "print", "(", "\"lengths: \"", ",", "len", "(", "df", ")", ",", "len", "(", "text_feats", ")", ")", "\n", "text_feats", "=", "text_feats", ".", "as_data_frame", "(", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "text_feats", ".", "columns", "=", "[", "col", "+", "x", "for", "x", "in", "text_feats", ".", "columns", "]", "\n", "text_feat_list", ".", "append", "(", "text_feats", ")", "\n", "", "df", ".", "drop", "(", "columns", "=", "text_columns", ",", "inplace", "=", "True", ")", "\n", "df", ".", "reset_index", "(", "inplace", "=", "True", ",", "drop", "=", "True", ")", "\n", "new_df", "=", "pd", ".", "concat", "(", "[", "df", "]", "+", "[", "x", "for", "x", "in", "text_feat_list", "]", ",", "axis", "=", "1", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "if", "len", "(", "new_df", ")", "!=", "len", "(", "df", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Error in process_w2v: len(new_df)={len(new_df)}, len(df)={len(df)}\"", ")", "\n", "", "return", "new_df", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.tokenize": [[274, 283], ["sentences.tokenize", "sentences.tokenize.tolower", "tokenized_filtered.grep", "tokenized.tolower.isna", "tokenized_words.isna", "tokenized.tolower.nchar", "tokenized_words.isin"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.tokenize"], ["", "def", "tokenize", "(", "sentences", ")", ":", "\n", "# From: https://raw.githubusercontent.com/h2oai/h2o-tutorials/master/h2o-world-2017/nlp/stopwords.csv", "\n", "    ", "STOP_WORDS", "=", "[", "'all'", ",", "'just'", ",", "'being'", ",", "'over'", ",", "'both'", ",", "'through'", ",", "'yourselves'", ",", "'its'", ",", "'before'", ",", "'o'", ",", "'hadn'", ",", "'herself'", ",", "'ll'", ",", "'had'", ",", "'should'", ",", "'to'", ",", "'only'", ",", "'won'", ",", "'under'", ",", "'ours'", ",", "'has'", ",", "'do'", ",", "'them'", ",", "'his'", ",", "'very'", ",", "'they'", ",", "'not'", ",", "'during'", ",", "'now'", ",", "'him'", ",", "'nor'", ",", "'d'", ",", "'did'", ",", "'didn'", ",", "'this'", ",", "'she'", ",", "'each'", ",", "'further'", ",", "'where'", ",", "'few'", ",", "'because'", ",", "'doing'", ",", "'some'", ",", "'hasn'", ",", "'are'", ",", "'our'", ",", "'ourselves'", ",", "'out'", ",", "'what'", ",", "'for'", ",", "'while'", ",", "'re'", ",", "'does'", ",", "'above'", ",", "'between'", ",", "'mustn'", ",", "'t'", ",", "'be'", ",", "'we'", ",", "'who'", ",", "'were'", ",", "'here'", ",", "'shouldn'", ",", "'hers'", ",", "'by'", ",", "'on'", ",", "'about'", ",", "'couldn'", ",", "'of'", ",", "'against'", ",", "'s'", ",", "'isn'", ",", "'or'", ",", "'own'", ",", "'into'", ",", "'yourself'", ",", "'down'", ",", "'mightn'", ",", "'wasn'", ",", "'your'", ",", "'from'", ",", "'her'", ",", "'their'", ",", "'aren'", ",", "'there'", ",", "'been'", ",", "'whom'", ",", "'too'", ",", "'wouldn'", ",", "'themselves'", ",", "'weren'", ",", "'was'", ",", "'until'", ",", "'more'", ",", "'himself'", ",", "'that'", ",", "'but'", ",", "'don'", ",", "'with'", ",", "'than'", ",", "'those'", ",", "'he'", ",", "'me'", ",", "'myself'", ",", "'ma'", ",", "'these'", ",", "'up'", ",", "'will'", ",", "'below'", ",", "'ain'", ",", "'can'", ",", "'theirs'", ",", "'my'", ",", "'and'", ",", "'ve'", ",", "'then'", ",", "'is'", ",", "'am'", ",", "'it'", ",", "'doesn'", ",", "'an'", ",", "'as'", ",", "'itself'", ",", "'at'", ",", "'have'", ",", "'in'", ",", "'any'", ",", "'if'", ",", "'again'", ",", "'no'", ",", "'when'", ",", "'same'", ",", "'how'", ",", "'other'", ",", "'which'", ",", "'you'", ",", "'shan'", ",", "'needn'", ",", "'haven'", ",", "'after'", ",", "'most'", ",", "'such'", ",", "'why'", ",", "'a'", ",", "'off'", ",", "'i'", ",", "'m'", ",", "'yours'", ",", "'so'", ",", "'y'", ",", "'the'", ",", "'having'", ",", "'once'", "]", "\n", "tokenized", "=", "sentences", ".", "tokenize", "(", "\"\\\\W+\"", ")", "\n", "tokenized_lower", "=", "tokenized", ".", "tolower", "(", ")", "\n", "tokenized_filtered", "=", "tokenized_lower", "[", "(", "tokenized_lower", ".", "nchar", "(", ")", ">=", "2", ")", "|", "(", "tokenized_lower", ".", "isna", "(", ")", ")", ",", ":", "]", "\n", "tokenized_words", "=", "tokenized_filtered", "[", "tokenized_filtered", ".", "grep", "(", "\"[0-9]\"", ",", "invert", "=", "True", ",", "output_logical", "=", "True", ")", ",", ":", "]", "\n", "tokenized_words", "=", "tokenized_words", "[", "(", "tokenized_words", ".", "isna", "(", ")", ")", "|", "(", "~", "tokenized_words", ".", "isin", "(", "STOP_WORDS", ")", ")", ",", ":", "]", "\n", "return", "tokenized_words", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.df_to_h2o": [[284, 298], ["df.copy", "temp_df.reset_index.reset_index", "numpy.arange", "h2o.H2OFrame", "train_h2o.drop.drop", "len", "nan_inds.sum", "len", "len", "print", "len", "len"], "function", ["None"], ["", "def", "df_to_h2o", "(", "df", ")", ":", "# to fix duplicate bug here: https://stackoverflow.com/questions/45672118/h2oframe-in-python-is-adding-additional-duplicate-rows-to-the-pandas-dataframe", "\n", "    ", "temp_df", "=", "df", ".", "copy", "(", ")", "\n", "temp_df", "=", "temp_df", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "temp_col", "=", "'__temp_id__'", "\n", "temp_df", "[", "temp_col", "]", "=", "np", ".", "arange", "(", "len", "(", "temp_df", ")", ")", "\n", "train_h2o", "=", "H2OFrame", "(", "temp_df", ")", "\n", "nan_inds", "=", "train_h2o", "[", "temp_col", "]", "==", "np", ".", "nan", "\n", "if", "nan_inds", ".", "sum", "(", ")", ">", "0", ":", "\n", "        ", "train_h2o", "=", "train_h2o", "[", "~", "nan_inds", "]", "\n", "", "train_h2o", "=", "train_h2o", ".", "drop", "(", "temp_col", ",", "axis", "=", "1", ")", "# second duplicate removal", "\n", "if", "len", "(", "df", ")", "!=", "len", "(", "train_h2o", ")", ":", "\n", "        ", "print", "(", "f\"WARNINGS: Error in df_to_h2o: len(train_h2o)={len(train_h2o)}, len(df)={len(df)}\"", ")", "\n", "# raise ValueError(f\"Error in df_to_h2o: len(train_h2o)={len(train_h2o)}, len(df)={len(df)}\")", "\n", "", "return", "train_h2o", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.get_embedded": [[299, 325], ["print", "numpy.load", "numpy.load", "h2o_benchmark.get_text_cols", "train_data.join.copy", "train_data.join.drop", "train_data.join.join", "train_data.join.reset_index", "test_data.join.copy", "test_data.join.drop", "test_data.join.join", "test_data.join.reset_index", "print", "print", "print", "os.path.realpath", "os.path.join", "os.path.join", "pandas.DataFrame", "pandas.DataFrame", "os.path.dirname", "os.path.realpath", "range", "range"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.get_text_cols"], ["", "def", "get_embedded", "(", "train_data", ",", "test_data", ",", "dataset_name", ",", "embed_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\" Returns version of DFs with text fields embedded by pretrained Electra.\n        Only consider pretrained embeddings for H2O\n        embed_dir = path to where embedding files are.\n    \"\"\"", "\n", "print", "(", "\"fetching embeddings ...\"", ")", "\n", "if", "embed_dir", "is", "None", ":", "# search in current directory for embedding files", "\n", "        ", "embed_dir", "=", "os", ".", "path", ".", "realpath", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ")", "\n", "\n", "", "train_features", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "embed_dir", ",", "'train_embedding.npy'", ")", ")", "\n", "test_features", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "embed_dir", ",", "'test_embedding.npy'", ")", ")", "\n", "text_feature_names", "=", "get_text_cols", "(", "train_data", ")", "\n", "train_data", "=", "train_data", ".", "copy", "(", ")", "\n", "train_data", ".", "drop", "(", "columns", "=", "text_feature_names", ",", "inplace", "=", "True", ")", "\n", "train_data", "=", "train_data", ".", "join", "(", "pd", ".", "DataFrame", "(", "\n", "train_features", ",", "columns", "=", "[", "f'pre_feat{i}'", "for", "i", "in", "range", "(", "train_features", ".", "shape", "[", "1", "]", ")", "]", ")", ")", "\n", "train_data", ".", "reset_index", "(", "drop", "=", "True", ",", "inplace", "=", "True", ")", "\n", "test_data", "=", "test_data", ".", "copy", "(", ")", "\n", "test_data", ".", "drop", "(", "columns", "=", "text_feature_names", ",", "inplace", "=", "True", ")", "\n", "test_data", "=", "test_data", ".", "join", "(", "pd", ".", "DataFrame", "(", "\n", "test_features", ",", "columns", "=", "[", "f'pre_feat{i}'", "for", "i", "in", "range", "(", "test_features", ".", "shape", "[", "1", "]", ")", "]", ")", ")", "\n", "test_data", ".", "reset_index", "(", "drop", "=", "True", ",", "inplace", "=", "True", ")", "\n", "print", "(", "\"text has been replaced with embeddings. Dimensions of post-embedding train & test data:\"", ")", "\n", "print", "(", "train_data", ".", "shape", ")", "\n", "print", "(", "test_data", ".", "shape", ")", "\n", "return", "train_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.filter_text": [[326, 332], ["df.drop().copy.copy", "h2o_benchmark.get_text_cols", "train_data.copy.drop().copy", "test_data.drop().copy.drop().copy", "train_data.copy.drop", "test_data.drop().copy.drop"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.get_text_cols"], ["", "def", "filter_text", "(", "train_data", ",", "test_data", ")", ":", "\n", "    ", "df", "=", "train_data", ".", "copy", "(", ")", "\n", "text_columns", "=", "get_text_cols", "(", "df", ")", "\n", "train_data", "=", "df", ".", "drop", "(", "columns", "=", "text_columns", ")", ".", "copy", "(", ")", "\n", "test_data", "=", "test_data", ".", "drop", "(", "columns", "=", "text_columns", ")", ".", "copy", "(", ")", "\n", "return", "train_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.get_parser": [[333, 356], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "sorted", "auto_mm_bench.datasets.dataset_registry.list_keys", "list", "str", "auto_mm_bench.datasets.TEXT_BENCHMARK_ALIAS_MAPPING.keys"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.list_keys"], ["", "def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Run AutoML Multimodal Text+Tabular Benchmark with H2O.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nickname'", ",", "type", "=", "str", ",", "\n", "choices", "=", "sorted", "(", "list", "(", "TEXT_BENCHMARK_ALIAS_MAPPING", ".", "keys", "(", ")", ")", ")", ",", "\n", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "\n", "choices", "=", "dataset_registry", ".", "list_keys", "(", ")", ",", "\n", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--baseline'", ",", "\n", "choices", "=", "[", "'h2o_automl'", ",", "\n", "'h2o_word2vec'", ",", "\n", "'h2o_embedding'", ",", "\n", "'h2o_filtertext'", ",", "# needed because some odd format text fields cause H2O to crash.", "\n", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--time_limit_sec'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "str", "(", "x", ")", "for", "x", "in", "[", "60", ",", "120", ",", "300", ",", "600", ",", "3600", ",", "10800", ",", "14400", ",", "28800", "]", "]", ",", "\n", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--w2v_epochs'", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--embed_dir'", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "123", ",", "type", "=", "int", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.train_baseline": [[357, 439], ["h2o_benchmark.set_seed", "auto_mm_bench.datasets.dataset_registry.create", "auto_mm_bench.datasets.dataset_registry.create", "print", "time.time", "print", "print", "print", "h2o_benchmark.H2OBaseline", "h2o_benchmark.H2OBaseline.fit", "time.time", "print", "time.time", "h2o_benchmark.H2OBaseline.predict", "time.time", "print", "gt.to_csv", "y_pred.to_csv", "autogluon.tabular.TabularPredictor", "autogluon.tabular.TabularPredictor._learner.eval_metric", "print", "h2o.init", "h2o_benchmark.train_w2v", "h2o_benchmark.process_w2v", "h2o_benchmark.process_w2v", "process_w2v.to_csv", "process_w2v.to_csv", "process_w2v.drop", "os.path.join", "os.path.join", "y_prob.to_csv", "len", "len", "print", "print", "print", "print", "open", "json.dump", "open", "json.dump", "h2o_benchmark.get_embedded", "os.path.join", "len", "len", "len", "len", "print", "os.path.join", "os.path.join", "h2o_benchmark.filter_text", "cpuinfo.get_cpu_info", "len"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.set_seed", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.create", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.create", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.fit", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.H2OBaseline.predict", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.train_w2v", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.process_w2v", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.process_w2v", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.get_embedded", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.benchmark.h2o_benchmark.filter_text"], ["", "def", "train_baseline", "(", "dataset_name", ",", "save_dir", ",", "baseline", ",", "\n", "time_limit_sec", "=", "None", ",", "w2v_epochs", "=", "None", ",", "embed_dir", "=", "None", ",", "seed", "=", "123", ")", ":", "\n", "    ", "if", "save_dir", "is", "None", ":", "\n", "        ", "save_dir", "=", "f\"{dataset_name}_{baseline}\"", "\n", "", "set_seed", "(", "seed", ")", "\n", "train_dataset", "=", "dataset_registry", ".", "create", "(", "dataset_name", ",", "'train'", ")", "\n", "test_dataset", "=", "dataset_registry", ".", "create", "(", "dataset_name", ",", "'test'", ")", "\n", "feature_columns", "=", "train_dataset", ".", "feature_columns", "\n", "label_columns", "=", "train_dataset", ".", "label_columns", "\n", "label_column", "=", "label_columns", "[", "0", "]", "\n", "eval_metric", "=", "train_dataset", ".", "metric", "\n", "problem_type", "=", "train_dataset", ".", "problem_type", "\n", "train_data", "=", "train_dataset", ".", "data", "\n", "test_data", "=", "test_dataset", ".", "data", "\n", "train_data", "=", "train_data", "[", "feature_columns", "+", "label_columns", "]", "\n", "test_data", "=", "test_data", "[", "feature_columns", "+", "label_columns", "]", "\n", "print", "(", "\"Running: \"", ",", "baseline", ",", "\" on dataset \"", ",", "dataset_name", ",", "\"; Output in: \"", ",", "save_dir", ")", "\n", "\n", "# Train baseline:", "\n", "train_tic", "=", "time", ".", "time", "(", ")", "\n", "if", "baseline", "==", "'h2o_word2vec'", ":", "\n", "        ", "h2o", ".", "init", "(", ")", "\n", "w2v_model", "=", "train_w2v", "(", "train_data", ",", "epochs", "=", "w2v_epochs", ",", "save_dir", "=", "save_dir", ")", "\n", "train_data", "=", "process_w2v", "(", "train_data", ",", "w2v_model", ")", "\n", "test_data", "=", "process_w2v", "(", "test_data", ",", "w2v_model", ")", "\n", "train_data", ".", "to_csv", "(", "dataset_name", "+", "'_word2vec_'", "+", "'train.csv'", ",", "index", "=", "False", ")", "\n", "test_data", ".", "to_csv", "(", "dataset_name", "+", "'_word2vec_'", "+", "'test.csv'", ",", "index", "=", "False", ")", "\n", "", "elif", "baseline", "==", "'h2o_embedding'", ":", "\n", "        ", "train_data", ",", "test_data", "=", "get_embedded", "(", "train_data", ",", "test_data", ",", "dataset_name", ",", "embed_dir", "=", "embed_dir", ")", "\n", "", "elif", "baseline", "==", "'h2o_filtertext'", ":", "\n", "        ", "train_data", ",", "train_data", "=", "filter_text", "(", "train_data", ",", "test_data", ")", "\n", "\n", "", "print", "(", "\"Train/test data shapes: \"", ")", "\n", "print", "(", "train_data", ".", "shape", ")", "\n", "print", "(", "test_data", ".", "shape", ")", "\n", "h2o_model", "=", "H2OBaseline", "(", ")", "\n", "num_models_trained", ",", "fit_time", "=", "h2o_model", ".", "fit", "(", "train_data", "=", "train_data", ",", "\n", "label_column", "=", "label_column", ",", "problem_type", "=", "problem_type", ",", "eval_metric", "=", "eval_metric", ",", "\n", "time_limit_sec", "=", "time_limit_sec", ",", "output_directory", "=", "save_dir", ")", "\n", "train_toc", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"H2O fit runtime: %s\"", "%", "fit_time", ")", "\n", "\n", "# Predict with baseline:", "\n", "inference_tic", "=", "time", ".", "time", "(", ")", "\n", "y_pred", ",", "y_prob", ",", "predict_time", "=", "h2o_model", ".", "predict", "(", "test_data", ".", "drop", "(", "columns", "=", "[", "label_column", "]", ")", ",", "\n", "pred_class_and_proba", "=", "True", ")", "\n", "inference_toc", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"H2O predict runtime: %s\"", "%", "predict_time", ")", "\n", "\n", "# Evaluate predictions:", "\n", "# class_order = h2o_model.classes", "\n", "preds_toevaluate", "=", "y_pred", "\n", "if", "eval_metric", "is", "not", "None", ":", "\n", "        ", "if", "eval_metric", "==", "'roc_auc'", ":", "\n", "            ", "preds_toevaluate", "=", "y_prob", ".", "iloc", "[", ":", ",", "1", "]", "\n", "", "elif", "eval_metric", "==", "'log_loss'", ":", "\n", "            ", "preds_toevaluate", "=", "y_prob", "\n", "\n", "", "", "gt", "=", "test_data", "[", "label_column", "]", "\n", "gt", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'ground_truth.csv'", ")", ")", "\n", "y_pred", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'h2o_test_prediction.csv'", ")", ")", "\n", "if", "problem_type", "==", "MULTICLASS", "or", "problem_type", "==", "BINARY", ":", "\n", "        ", "y_prob", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'h2o_test_prediction_prob.csv'", ")", ")", "\n", "", "if", "len", "(", "gt", ")", "!=", "len", "(", "y_pred", ")", ":", "\n", "        ", "print", "(", "\"WARNING: length of gt, y_pred dont match!\"", ")", "\n", "print", "(", "\"len(gt) \"", ",", "len", "(", "gt", ")", ")", "\n", "print", "(", "\"len(y_pred) \"", ",", "len", "(", "y_pred", ")", ")", "\n", "print", "(", "\"test_data.shape \"", ",", "test_data", ".", "shape", ")", "\n", "if", "len", "(", "y_pred", ")", ">", "len", "(", "gt", ")", ":", "\n", "            ", "print", "(", "\"WARNING: truncating predictions length to length of labels in test data ...\"", ")", "\n", "preds_toevaluate", "=", "preds_toevaluate", "[", ":", "len", "(", "gt", ")", "]", "\n", "\n", "", "", "scorer", "=", "TabularPredictor", "(", "label", "=", "label_column", ",", "problem_type", "=", "problem_type", ",", "eval_metric", "=", "eval_metric", ")", "\n", "# scorer.fit(train_data.sample(:200], hyperparameters={'GBM': {'num_boost_round': 1}}, presets='ignore_text')", "\n", "score", "=", "scorer", ".", "_learner", ".", "eval_metric", "(", "gt", ",", "preds_toevaluate", ")", "\n", "print", "(", "\"H2O score: \"", ",", "score", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'test_score.json'", ")", ",", "'w'", ")", "as", "of", ":", "\n", "        ", "json", ".", "dump", "(", "{", "eval_metric", ":", "score", "}", ",", "of", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'speed_stats.json'", ")", ",", "'w'", ")", "as", "of", ":", "\n", "        ", "json", ".", "dump", "(", "{", "'train_time'", ":", "train_toc", "-", "train_tic", ",", "\n", "'inference_time'", ":", "inference_toc", "-", "inference_tic", ",", "\n", "'cpuinfo'", ":", "cpuinfo", ".", "get_cpu_info", "(", ")", "}", ",", "of", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.tests.test_datasets.test_generic": [[5, 13], ["pytest.mark.parametrize", "dataset_registry.create", "dataset_registry.create", "dataset_registry.list_keys", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.create", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.create", "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.list_keys"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "'key'", ",", "dataset_registry", ".", "list_keys", "(", ")", ")", "\n", "def", "test_generic", "(", "key", ")", ":", "\n", "    ", "train_dataset", "=", "dataset_registry", ".", "create", "(", "key", ",", "'train'", ")", "\n", "test_dataset", "=", "dataset_registry", ".", "create", "(", "key", ",", "'test'", ")", "\n", "assert", "len", "(", "train_dataset", ".", "label_columns", ")", "==", "len", "(", "train_dataset", ".", "label_types", ")", "\n", "assert", "len", "(", "test_dataset", ".", "label_columns", ")", "==", "len", "(", "test_dataset", ".", "label_columns", ")", "\n", "for", "col", "in", "train_dataset", ".", "label_columns", ":", "\n", "        ", "assert", "col", "not", "in", "train_dataset", ".", "feature_columns", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.tests.test_datasets.test_jigsaw_unintended_bias": [[15, 22], ["pytest.mark.parametrize", "JigsawUnintendedBias", "len"], "function", ["None"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'split,num_sample'", ",", "\n", "[", "(", "'train'", ",", "1443899", ")", ",", "\n", "(", "'test'", ",", "360975", ")", ",", "\n", "(", "'competition'", ",", "97320", ")", "]", ")", "\n", "def", "test_jigsaw_unintended_bias", "(", "split", ",", "num_sample", ")", ":", "\n", "    ", "df", "=", "JigsawUnintendedBias", "(", "split", ")", ".", "data", "\n", "assert", "len", "(", "df", ")", "==", "num_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.tests.test_datasets.test_product_sentiment": [[24, 31], ["pytest.mark.parametrize", "MachineHackSentimentPrediction", "len"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'split,num_sample'", ",", "\n", "[", "(", "'train'", ",", "5091", ")", ",", "\n", "(", "'test'", ",", "1273", ")", ",", "\n", "(", "'competition'", ",", "2728", ")", "]", ")", "\n", "def", "test_product_sentiment", "(", "split", ",", "num_sample", ")", ":", "\n", "    ", "df", "=", "MachineHackSentimentPrediction", "(", "split", ")", ".", "data", "\n", "assert", "len", "(", "df", ")", "==", "num_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.tests.test_datasets.test_google_quest_qa": [[33, 40], ["pytest.mark.parametrize", "GoogleQuestQALabel", "len"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'split,num_sample'", ",", "\n", "[", "(", "'train'", ",", "4863", ")", ",", "\n", "(", "'test'", ",", "1216", ")", ",", "\n", "(", "'competition'", ",", "476", ")", "]", ")", "\n", "def", "test_google_quest_qa", "(", "split", ",", "num_sample", ")", ":", "\n", "    ", "df", "=", "GoogleQuestQALabel", "(", "split", ")", ".", "data", "\n", "assert", "len", "(", "df", ")", "==", "num_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.tests.test_datasets.test_women_clothing_review": [[42, 48], ["pytest.mark.parametrize", "WomenClothingReview", "len"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'split,num_sample'", ",", "\n", "[", "(", "'train'", ",", "18788", ")", ",", "\n", "(", "'test'", ",", "4698", ")", "]", ")", "\n", "def", "test_women_clothing_review", "(", "split", ",", "num_sample", ")", ":", "\n", "    ", "df", "=", "WomenClothingReview", "(", "split", ")", ".", "data", "\n", "assert", "len", "(", "df", ")", "==", "num_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.tests.test_datasets.test_melbourne_airbnb": [[50, 56], ["pytest.mark.parametrize", "MelBourneAirBnb", "len"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'split,num_sample'", ",", "\n", "[", "(", "'train'", ",", "18316", ")", ",", "\n", "(", "'test'", ",", "4579", ")", "]", ")", "\n", "def", "test_melbourne_airbnb", "(", "split", ",", "num_sample", ")", ":", "\n", "    ", "df", "=", "MelBourneAirBnb", "(", "split", ")", ".", "data", "\n", "assert", "len", "(", "df", ")", "==", "num_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.tests.test_datasets.test_mercari_price_suggestion": [[58, 65], ["pytest.mark.parametrize", "MercariPriceSuggestion", "len"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'split,num_sample'", ",", "\n", "[", "(", "'train'", ",", "1186028", ")", ",", "\n", "(", "'test'", ",", "296507", ")", ",", "\n", "(", "'competition'", ",", "693359", ")", "]", ")", "\n", "def", "test_mercari_price_suggestion", "(", "split", ",", "num_sample", ")", ":", "\n", "    ", "df", "=", "MercariPriceSuggestion", "(", "split", ")", ".", "data", "\n", "assert", "len", "(", "df", ")", "==", "num_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.tests.test_datasets.test_ae_price_prediction": [[67, 73], ["pytest.mark.parametrize", "AEPricePrediction", "len"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'split,num_sample'", ",", "\n", "[", "(", "'train'", ",", "22662", ")", ",", "\n", "(", "'test'", ",", "5666", ")", "]", ")", "\n", "def", "test_ae_price_prediction", "(", "split", ",", "num_sample", ")", ":", "\n", "    ", "df", "=", "AEPricePrediction", "(", "split", ")", ".", "data", "\n", "assert", "len", "(", "df", ")", "==", "num_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.tests.test_datasets.test_data_scientist_salary": [[75, 82], ["pytest.mark.parametrize", "auto_mm_bench.datasets.create_dataset", "len"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.create_dataset"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'split,num_sample'", ",", "\n", "[", "(", "'train'", ",", "15841", ")", ",", "\n", "(", "'test'", ",", "3961", ")", ",", "\n", "(", "'competition'", ",", "6601", ")", "]", ")", "\n", "def", "test_data_scientist_salary", "(", "split", ",", "num_sample", ")", ":", "\n", "    ", "df", "=", "create_dataset", "(", "'data_scientist_salary'", ",", "split", ")", ".", "data", "\n", "assert", "len", "(", "df", ")", "==", "num_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.tests.test_datasets.test_bookprice_prediction": [[84, 91], ["pytest.mark.parametrize", "auto_mm_bench.datasets.create_dataset", "len"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.create_dataset"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'split,num_sample'", ",", "\n", "[", "(", "'train'", ",", "4989", ")", ",", "\n", "(", "'test'", ",", "1248", ")", ",", "\n", "(", "'competition'", ",", "1560", ")", "]", ")", "\n", "def", "test_bookprice_prediction", "(", "split", ",", "num_sample", ")", ":", "\n", "    ", "df", "=", "create_dataset", "(", "'bookprice_prediction'", ",", "split", ")", ".", "data", "\n", "assert", "len", "(", "df", ")", "==", "num_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.tests.test_datasets.test_california_house_price": [[93, 100], ["pytest.mark.parametrize", "auto_mm_bench.datasets.create_dataset", "len"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.datasets.create_dataset"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'split,num_sample'", ",", "\n", "[", "(", "'train'", ",", "37951", ")", ",", "\n", "(", "'test'", ",", "9488", ")", ",", "\n", "(", "'competition'", ",", "31626", ")", "]", ")", "\n", "def", "test_california_house_price", "(", "split", ",", "num_sample", ")", ":", "\n", "    ", "df", "=", "create_dataset", "(", "'california_house_price'", ",", "split", ")", ".", "data", "\n", "assert", "len", "(", "df", ")", "==", "num_sample", "\n", "", ""]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.competition_submissions.run_product_sentiment.electra_base_late_fusion_concate_e10_avg3": [[32, 42], ["autogluon.text.ag_text_presets.register", "autogluon.text.text_prediction.presets.electra_base_no_hpo"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.register"], ["@", "ag_text_presets", ".", "register", "(", ")", "\n", "def", "electra_base_late_fusion_concate_e10_avg3", "(", ")", ":", "\n", "    ", "cfg", "=", "electra_base_no_hpo", "(", ")", "\n", "cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "'model.use_avg_nbest'", "]", "=", "True", "\n", "cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "'optimization.nbest'", "]", "=", "3", "\n", "cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "\n", "'model.network.agg_net.agg_type'", "]", "=", "'concat'", "\n", "cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "\n", "'model.network.aggregate_categorical'", "]", "=", "True", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.competition_submissions.run_product_sentiment.electra_large_late_fusion_concate_e10_avg3": [[44, 54], ["autogluon.text.ag_text_presets.register", "autogluon.text.text_prediction.presets.electra_large_no_hpo"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.register"], ["", "@", "ag_text_presets", ".", "register", "(", ")", "\n", "def", "electra_large_late_fusion_concate_e10_avg3", "(", ")", ":", "\n", "    ", "cfg", "=", "electra_large_no_hpo", "(", ")", "\n", "cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "'model.use_avg_nbest'", "]", "=", "True", "\n", "cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "'optimization.nbest'", "]", "=", "3", "\n", "cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "\n", "'model.network.agg_net.agg_type'", "]", "=", "'concat'", "\n", "cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "\n", "'model.network.aggregate_categorical'", "]", "=", "True", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.competition_submissions.run_product_sentiment.get_tabular_hparams": [[56, 69], ["None"], "function", ["None"], ["", "def", "get_tabular_hparams", "(", "text_presets", ")", ":", "\n", "    ", "ret", "=", "{", "\n", "#'NN': {},", "\n", "'GBM'", ":", "[", "\n", "{", "}", ",", "\n", "#{'extra_trees': True, 'ag_args': {'name_suffix': 'XT'}},", "\n", "]", ",", "\n", "#'CAT': {},", "\n", "#'XGB': {},", "\n", "'TEXT_NN_V1'", ":", "[", "text_presets", "]", ",", "\n", "#'custom': ['GBM'],", "\n", "}", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.competition_submissions.run_mercari_price.electra_base_late_fusion_concate_e10_avg3": [[32, 42], ["autogluon.text.ag_text_presets.register", "autogluon.text.text_prediction.presets.electra_base_no_hpo"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.register"], ["@", "ag_text_presets", ".", "register", "(", ")", "\n", "def", "electra_base_late_fusion_concate_e10_avg3", "(", ")", ":", "\n", "    ", "cfg", "=", "electra_base_no_hpo", "(", ")", "\n", "cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "'model.use_avg_nbest'", "]", "=", "True", "\n", "cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "'optimization.nbest'", "]", "=", "3", "\n", "cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "\n", "'model.network.agg_net.agg_type'", "]", "=", "'concat'", "\n", "cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "\n", "'model.network.aggregate_categorical'", "]", "=", "True", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.competition_submissions.run_mercari_price.electra_large_late_fusion_concate_e10_avg3": [[44, 54], ["autogluon.text.ag_text_presets.register", "autogluon.text.text_prediction.presets.electra_large_no_hpo"], "function", ["home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.auto_mm_bench.registry.Registry.register"], ["", "@", "ag_text_presets", ".", "register", "(", ")", "\n", "def", "electra_large_late_fusion_concate_e10_avg3", "(", ")", ":", "\n", "    ", "cfg", "=", "electra_large_no_hpo", "(", ")", "\n", "cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "'model.use_avg_nbest'", "]", "=", "True", "\n", "cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "'optimization.nbest'", "]", "=", "3", "\n", "cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "\n", "'model.network.agg_net.agg_type'", "]", "=", "'concat'", "\n", "cfg", "[", "'models'", "]", "[", "'MultimodalTextModel'", "]", "[", "'search_space'", "]", "[", "\n", "'model.network.aggregate_categorical'", "]", "=", "True", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.sxjscience_automl_multimodal_benchmark.competition_submissions.run_mercari_price.get_tabular_hparams": [[56, 69], ["None"], "function", ["None"], ["", "def", "get_tabular_hparams", "(", "text_presets", ")", ":", "\n", "    ", "ret", "=", "{", "\n", "'NN'", ":", "{", "}", ",", "\n", "'GBM'", ":", "[", "\n", "{", "}", ",", "\n", "{", "'extra_trees'", ":", "True", ",", "'ag_args'", ":", "{", "'name_suffix'", ":", "'XT'", "}", "}", ",", "\n", "]", ",", "\n", "'CAT'", ":", "{", "}", ",", "\n", "'XGB'", ":", "{", "}", ",", "\n", "'TEXT_NN_V1'", ":", "[", "text_presets", "]", ",", "\n", "'custom'", ":", "[", "'GBM'", "]", ",", "\n", "}", "\n", "return", "ret", "\n", "\n"]]}