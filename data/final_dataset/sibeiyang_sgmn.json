{"home.repos.pwc.inspect_result.sibeiyang_sgmn.crits.criterion.TripletLoss.__init__": [[10, 14], ["torch.Module.__init__", "criterion.Selector"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "margin", ")", ":", "\n", "        ", "super", "(", "TripletLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "selector", "=", "Selector", "(", "margin", "=", "self", ".", "margin", ",", "cpu", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.crits.criterion.TripletLoss.forward": [[15, 26], ["scores.size", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "criterion.TripletLoss.selector.get_negative_ind", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "scores[].detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.crits.criterion.Selector.get_negative_ind"], ["", "def", "forward", "(", "self", ",", "scores", ",", "box", ",", "cls", ",", "sent_gt", ")", ":", "\n", "        ", "bs", "=", "scores", ".", "size", "(", "0", ")", "\n", "loss", "=", "torch", ".", "zeros", "(", "(", "bs", ",", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "            ", "negative_ind", "=", "self", ".", "selector", ".", "get_negative_ind", "(", "scores", "[", "i", "]", ".", "detach", "(", ")", ",", "sent_gt", "[", "i", "]", ",", "box", "[", "i", "]", ",", "\n", "cls", "[", "i", "]", ")", "\n", "if", "negative_ind", "is", "not", "None", ":", "\n", "                ", "loss", "[", "i", "]", "=", "torch", ".", "clamp", "(", "self", ".", "margin", "+", "scores", "[", "i", ",", "negative_ind", "]", "\n", "-", "scores", "[", "i", ",", "sent_gt", "[", "i", "]", "]", ",", "min", "=", "0", ")", "\n", "\n", "", "", "return", "torch", ".", "mean", "(", "loss", ")", ".", "view", "(", "-", "1", ")", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.crits.criterion.Selector.__init__": [[36, 41], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "margin", ",", "cpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "Selector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cpu", "=", "cpu", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "select_fn", "=", "random_hard_negative", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.crits.criterion.Selector.get_negative_ind": [[42, 55], ["utils.to_numpy", "criterion.Selector.select_fn", "scores.cpu.cpu.cpu", "box.cpu.cpu.cpu", "positive_ind.cpu.cpu.cpu"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy"], ["", "def", "get_negative_ind", "(", "self", ",", "scores", ",", "positive_ind", ",", "box", ",", "cls", ")", ":", "\n", "        ", "if", "self", ".", "cpu", ":", "\n", "            ", "scores", "=", "scores", ".", "cpu", "(", ")", "\n", "box", "=", "box", ".", "cpu", "(", ")", "\n", "positive_ind", "=", "positive_ind", ".", "cpu", "(", ")", "\n", "\n", "", "positive_score", "=", "scores", "[", "positive_ind", "]", "\n", "loss_value", "=", "self", ".", "margin", "+", "scores", "-", "positive_score", "\n", "loss_value", "[", "positive_ind", "]", "=", "0.0", "\n", "loss_value", "[", "cls", "==", "-", "1", "]", "=", "-", "1.0", "\n", "loss_value", "=", "to_numpy", "(", "loss_value", ")", "\n", "negative_ind", "=", "self", ".", "select_fn", "(", "loss_value", ")", "\n", "return", "negative_ind", "if", "negative_ind", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.crits.criterion.ScaleLayer.__init__": [[58, 62], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "criterion.ScaleLayer.reset_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__", "home.repos.pwc.inspect_result.sibeiyang_sgmn.crits.criterion.ScaleLayer.reset_parameter"], ["    ", "def", "__init__", "(", "self", ",", "init_value", "=", "20.0", ")", ":", "\n", "        ", "super", "(", "ScaleLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ",", ")", ",", ")", "\n", "self", ".", "reset_parameter", "(", "init_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.crits.criterion.ScaleLayer.reset_parameter": [[63, 65], ["criterion.ScaleLayer.scale.data.fill_"], "methods", ["None"], ["", "def", "reset_parameter", "(", "self", ",", "init_value", ")", ":", "\n", "        ", "self", ".", "scale", ".", "data", ".", "fill_", "(", "init_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.crits.criterion.ScaleLayer.forward": [[66, 69], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "scale", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.crits.criterion.SoftmaxLoss.__init__": [[72, 75], ["torch.Module.__init__", "criterion.ScaleLayer"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SoftmaxLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_fun", "=", "ScaleLayer", "(", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.crits.criterion.SoftmaxLoss.forward": [[76, 92], ["criterion.SoftmaxLoss.scale_fun", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "score.size", "score.size", "numpy.ones", "utils.to_torch().cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "utils.to_torch", "utils.to_numpy", "sent_gt[].long"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_torch", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy"], ["", "def", "forward", "(", "self", ",", "score", ",", "cls", ",", "sent_gt", ")", ":", "\n", "        ", "bs", ",", "n", "=", "score", ".", "size", "(", "0", ")", ",", "score", ".", "size", "(", "1", ")", "\n", "x", "=", "self", ".", "scale_fun", "(", "score", ")", "\n", "\n", "loss", "=", "torch", ".", "zeros", "(", "(", "bs", ",", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "logits", "=", "torch", ".", "zeros", "(", "(", "bs", ",", "n", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "            ", "label", "=", "np", ".", "ones", "(", "(", "n", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "label", "[", "to_numpy", "(", "(", "cls", "[", "i", "]", ")", ")", "==", "-", "1.0", "]", "=", "0", "\n", "valid_label", "=", "to_torch", "(", "label", ")", ".", "cuda", "(", ")", "\n", "s", "=", "torch", ".", "exp", "(", "x", "[", "i", ",", ":", "]", ")", "*", "valid_label", "\n", "s", "=", "s", "/", "torch", ".", "sum", "(", "s", ")", "\n", "loss", "[", "i", "]", "=", "-", "torch", ".", "log", "(", "s", "[", "sent_gt", "[", "i", "]", ".", "long", "(", ")", "]", ")", "\n", "logits", "[", "i", ",", ":", "]", "=", "s", "\n", "\n", "", "return", "torch", ".", "mean", "(", "loss", ")", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.crits.criterion.random_hard_negative": [[28, 33], ["numpy.random.choice", "numpy.where", "len"], "function", ["None"], ["", "", "def", "random_hard_negative", "(", "loss_values", ")", ":", "\n", "    ", "hard_negatives", "=", "np", ".", "where", "(", "loss_values", ">", "0", ")", "[", "0", "]", "\n", "if", "len", "(", "hard_negatives", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "return", "np", ".", "random", ".", "choice", "(", "hard_negatives", ",", "replace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.RefDatasetSG.__init__": [[7, 17], ["refdataset_sg_online.RefDatasetSG._compute_lfeats", "refdataset_sg_online.RefDatasetSG._compute_refgt", "refdataset_sg_online.RefDatasetSG._compute_reftoken"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.RefDataset._compute_lfeats", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.RefDataset._compute_refgt", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.RefDataset._compute_reftoken"], ["    ", "def", "__init__", "(", "self", ",", "refdb", ",", "vocab", ",", "opt", ")", ":", "\n", "        ", "self", ".", "refdb", "=", "refdb", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "ids", "=", "self", ".", "refdb", ".", "image_ids", "\n", "self", ".", "sent_ids", "=", "self", ".", "refdb", ".", "sent_ids", "\n", "self", ".", "lfeats", "=", "self", ".", "_compute_lfeats", "(", ")", "\n", "self", ".", "num_cxt", "=", "5", "\n", "self", ".", "sent_ind_to_ids", "=", "self", ".", "_compute_refgt", "(", ")", "\n", "self", ".", "_compute_reftoken", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.RefDatasetSG.__getitem__": [[18, 80], ["refdataset_sg_online.RefDatasetSG.refdb.ref_db.load_sent", "numpy.zeros", "refdataset_sg_online.RefDatasetSG.get_sg_data", "numpy.zeros", "range", "refdataset_sg_online.RefDatasetSG.refdb.rois_db[].copy", "min", "numpy.zeros", "numpy.zeros", "roi_feature[].copy", "rois[].copy", "rois[].copy", "rois[].copy", "refdataset_sg_online.compute_distance_pairs", "compute_distance_pairs.argsort", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.zeros", "refdataset_sg_online.RefDatasetSG.lfeats[].copy", "refdataset_sg_online.RefDatasetSG.refdb.ref_db.get_imgIds", "range", "numpy.ones", "len", "refdataset_sg_online.compute_dif_lfeat"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.RefDatasetSG.get_sg_data", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.compute_distance_pairs", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.get_imgIds", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.compute_dif_lfeat"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sent_id", "=", "self", ".", "sent_ind_to_ids", "[", "index", "]", "\n", "sent", "=", "self", ".", "refdb", ".", "ref_db", ".", "load_sent", "(", "sent_id", ")", "\n", "img_id", "=", "self", ".", "refdb", ".", "ref_db", ".", "get_imgIds", "(", "[", "sent_id", "]", ")", "[", "0", "]", "\n", "\n", "gt_box", "=", "sent", "[", "'gt_box'", "]", "\n", "sent_to_box_idx", "=", "sent", "[", "'bbox_ind'", "]", "\n", "max_length", "=", "self", ".", "max_length", "\n", "word_idx", "=", "np", ".", "zeros", "(", "(", "max_length", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "word_idx", "[", "0", ":", "len", "(", "sent", "[", "'vocab_idx'", "]", ")", "]", "=", "sent", "[", "'vocab_idx'", "]", "\n", "\n", "seq_ind", ",", "seq_weight", ",", "seq_type", ",", "seq_rel", ",", "com_mask", ",", "seq_subtree", ",", "num_seq", "=", "self", ".", "get_sg_data", "(", "sent_id", ",", "max_length", ")", "\n", "seq", "=", "np", ".", "zeros", "(", "(", "max_length", ",", "max_length", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "seq", "[", ":", ",", "0", "]", "=", "1", "# unk", "\n", "for", "i", "in", "range", "(", "num_seq", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "max_length", ")", ":", "\n", "                ", "if", "seq_ind", "[", "i", ",", "j", "]", "!=", "-", "1", ":", "\n", "                    ", "seq", "[", "i", ",", "j", "]", "=", "word_idx", "[", "seq_ind", "[", "i", ",", "j", "]", "]", "\n", "\n", "# vis feature", "\n", "", "", "", "rois", "=", "self", ".", "refdb", ".", "rois_db", "[", "img_id", "]", ".", "copy", "(", ")", "\n", "num_box", "=", "min", "(", "rois", "[", "'box'", "]", ".", "shape", "[", "0", "]", ",", "self", ".", "refdb", ".", "max_num_box", ")", "\n", "box", "=", "np", ".", "zeros", "(", "(", "self", ".", "refdb", ".", "max_num_box", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cls", "=", "np", ".", "ones", "(", "(", "self", ".", "refdb", ".", "max_num_box", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "-", "1.0", "\n", "file", "=", "rois", "[", "'file'", "]", "\n", "idx", "=", "rois", "[", "'idx'", "]", "\n", "roi_feature", "=", "self", ".", "refdb", ".", "h5_files", "[", "file", "]", "[", "'features'", "]", "[", "idx", "]", "\n", "feature", "=", "np", ".", "zeros", "(", "(", "self", ".", "refdb", ".", "max_num_box", ",", "roi_feature", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "feature", "[", "0", ":", "num_box", "]", "=", "roi_feature", "[", "0", ":", "num_box", "]", ".", "copy", "(", ")", "\n", "box", "[", "0", ":", "num_box", ",", ":", "]", "=", "rois", "[", "'box'", "]", ".", "copy", "(", ")", "\n", "cls", "[", "0", ":", "num_box", "]", "=", "rois", "[", "'cls'", "]", ".", "copy", "(", ")", "\n", "\n", "# dis_ind", "\n", "o_box", "=", "rois", "[", "'box'", "]", ".", "copy", "(", ")", "\n", "o_pair_dis", "=", "compute_distance_pairs", "(", "o_box", ")", "\n", "o_sorted_ind", "=", "o_pair_dis", ".", "argsort", "(", "axis", "=", "1", ")", "\n", "\n", "# cxt feature", "\n", "cxt_idx", "=", "np", ".", "zeros", "(", "(", "feature", ".", "shape", "[", "0", "]", ",", "self", ".", "num_cxt", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "cxt_idx_mask", "=", "np", ".", "zeros", "(", "(", "feature", ".", "shape", "[", "0", "]", ",", "self", ".", "num_cxt", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "cxt_lfeats", "=", "np", ".", "zeros", "(", "(", "feature", ".", "shape", "[", "0", "]", ",", "self", ".", "num_cxt", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "num_box", ")", ":", "\n", "            ", "j", "=", "0", "\n", "b1", "=", "o_box", "[", "i", "]", "\n", "for", "idx", "in", "o_sorted_ind", "[", "i", "]", ":", "\n", "                ", "if", "idx", "==", "i", ":", "\n", "                    ", "continue", "\n", "", "b2", "=", "o_box", "[", "idx", "]", "\n", "cxt_lfeats", "[", "i", ",", "j", "]", "=", "compute_dif_lfeat", "(", "b1", ",", "b2", ")", "\n", "cxt_idx", "[", "i", ",", "j", "]", "=", "idx", "\n", "cxt_idx_mask", "[", "i", ",", "j", "]", "=", "1", "\n", "j", "+=", "1", "\n", "if", "j", "==", "self", ".", "num_cxt", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "lfeat", "=", "np", ".", "zeros", "(", "(", "self", ".", "refdb", ".", "max_num_box", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "lfeat", "[", "0", ":", "num_box", ",", ":", "]", "=", "self", ".", "lfeats", "[", "img_id", "]", ".", "copy", "(", ")", "\n", "\n", "return", "box", ",", "cls", ",", "feature", ",", "lfeat", ",", "word_idx", ",", "sent_to_box_idx", ",", "gt_box", ",", "img_id", ",", "sent_id", ",", "seq", ",", "seq_weight", ",", "seq_type", ",", "seq_rel", ",", "com_mask", ",", "cxt_idx", ",", "cxt_idx_mask", ",", "cxt_lfeats", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.RefDatasetSG.__len__": [[81, 83], ["len", "list", "refdataset_sg_online.RefDatasetSG.sent_ind_to_ids.keys"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "list", "(", "self", ".", "sent_ind_to_ids", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.RefDatasetSG._compute_lfeats": [[84, 100], ["numpy.zeros", "range", "numpy.array"], "methods", ["None"], ["", "def", "_compute_lfeats", "(", "self", ")", ":", "\n", "        ", "lfeats", "=", "{", "}", "\n", "for", "img_id", "in", "self", ".", "ids", ":", "\n", "            ", "iw", "=", "self", ".", "refdb", ".", "rois_db", "[", "img_id", "]", "[", "'size'", "]", "[", "0", "]", "\n", "ih", "=", "self", ".", "refdb", ".", "rois_db", "[", "img_id", "]", "[", "'size'", "]", "[", "1", "]", "\n", "boxes", "=", "self", ".", "refdb", ".", "rois_db", "[", "img_id", "]", "[", "'box'", "]", "\n", "num_objs", "=", "self", ".", "refdb", ".", "rois_db", "[", "img_id", "]", "[", "'num_objs'", "]", "\n", "lfeats", "[", "img_id", "]", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "j", "in", "range", "(", "num_objs", ")", ":", "\n", "                ", "box", "=", "boxes", "[", "j", "]", "\n", "x", "=", "box", "[", "0", "]", "\n", "y", "=", "box", "[", "1", "]", "\n", "w", "=", "box", "[", "2", "]", "-", "x", "+", "1", "\n", "h", "=", "box", "[", "3", "]", "-", "y", "+", "1", "\n", "lfeats", "[", "img_id", "]", "[", "j", "]", "=", "np", ".", "array", "(", "[", "x", "/", "iw", ",", "y", "/", "ih", ",", "(", "x", "+", "w", "-", "1", ")", "/", "iw", ",", "(", "y", "+", "h", "-", "1", ")", "/", "ih", ",", "w", "*", "h", "/", "(", "iw", "*", "ih", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "", "return", "lfeats", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.RefDatasetSG._compute_refgt": [[101, 118], ["enumerate", "refdataset_sg_online.RefDatasetSG.refdb.ref_db.load_sent", "refdataset_sg_online.max_overlap", "numpy.array", "refdataset_sg_online.RefDatasetSG.refdb.ref_db.get_imgIds"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.max_overlap", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.get_imgIds"], ["", "def", "_compute_refgt", "(", "self", ")", ":", "\n", "        ", "sent_ind_to_id", "=", "{", "}", "\n", "for", "i", ",", "sent_id", "in", "enumerate", "(", "self", ".", "sent_ids", ")", ":", "\n", "            ", "img_id", "=", "self", ".", "refdb", ".", "ref_db", ".", "get_imgIds", "(", "[", "sent_id", "]", ")", "[", "0", "]", "\n", "boxes", "=", "self", ".", "refdb", ".", "rois_db", "[", "img_id", "]", "[", "'box'", "]", "\n", "ref", "=", "self", ".", "refdb", ".", "ref_db", ".", "load_sent", "(", "sent_id", ")", "\n", "bbox", "=", "ref", "[", "'bbox'", "]", "\n", "x0", "=", "bbox", "[", "0", "]", "\n", "x1", "=", "bbox", "[", "2", "]", "+", "x0", "-", "1", "\n", "y0", "=", "bbox", "[", "1", "]", "\n", "y1", "=", "bbox", "[", "3", "]", "+", "y0", "-", "1", "\n", "iou", ",", "ind", ",", "ious", "=", "max_overlap", "(", "[", "x0", ",", "y0", ",", "x1", ",", "y1", "]", ",", "boxes", ")", "\n", "ref", "[", "'bbox_ind'", "]", "=", "ind", "\n", "ref", "[", "'gt_box'", "]", "=", "np", ".", "array", "(", "[", "x0", ",", "y0", ",", "x1", ",", "y1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "sent_ind_to_id", "[", "i", "]", "=", "sent_id", "\n", "\n", "", "return", "sent_ind_to_id", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.RefDatasetSG._compute_reftoken": [[119, 139], ["refdataset_sg_online.RefDatasetSG.refdb.ref_db.load_sent", "max", "enumerate", "len", "wd.lower.lower.lower", "sent[].append", "sent[].append", "refdataset_sg_online.get_split_projection"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.get_split_projection"], ["", "def", "_compute_reftoken", "(", "self", ")", ":", "\n", "        ", "self", ".", "max_length", "=", "0", "\n", "for", "sent_id", "in", "self", ".", "refdb", ".", "sent_ids", ":", "\n", "            ", "sent", "=", "self", ".", "refdb", ".", "ref_db", ".", "load_sent", "(", "sent_id", ")", "\n", "sg", "=", "self", ".", "refdb", ".", "ref_sg", "[", "sent_id", "]", "\n", "tokens", "=", "sent", "[", "'token'", "]", "\n", "self", ".", "max_length", "=", "max", "(", "len", "(", "tokens", ")", ",", "self", ".", "max_length", ")", "\n", "sent", "[", "'vocab_idx'", "]", "=", "[", "]", "\n", "for", "i", ",", "wd", "in", "enumerate", "(", "tokens", ")", ":", "\n", "                ", "wd", "=", "wd", ".", "lower", "(", ")", "\n", "if", "wd", "in", "[", "'it'", ",", "'he'", ",", "'she'", "]", ":", "\n", "                    ", "split", "=", "sg", "[", "'words_info'", "]", "[", "i", "]", "[", "2", "]", "\n", "if", "split", "in", "sg", "[", "'co_index'", "]", ":", "\n", "                        ", "co_split", "=", "sg", "[", "'co_index'", "]", "[", "split", "]", "\n", "split_to_word", ",", "split_to_head", "=", "get_split_projection", "(", "sg", "[", "'words_info'", "]", ")", "\n", "wd", "=", "tokens", "[", "split_to_head", "[", "co_split", "]", "[", "-", "1", "]", "]", "\n", "", "", "if", "wd", "in", "self", ".", "vocab", ":", "\n", "                    ", "sent", "[", "'vocab_idx'", "]", ".", "append", "(", "self", ".", "vocab", "[", "wd", "]", ")", "\n", "", "else", ":", "\n", "                    ", "sent", "[", "'vocab_idx'", "]", ".", "append", "(", "self", ".", "vocab", "[", "'<unk>'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.RefDatasetSG.get_sg_data": [[140, 197], ["numpy.zeros", "refdataset_sg_online.get_split_projection", "numpy.zeros", "enumerate", "numpy.zeros", "com_seq.sort", "numpy.ones", "numpy.ones", "numpy.ones", "seqset_list.append", "num_valid_words_in_seq.append", "numpy.sum", "set", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.get_split_projection"], ["", "", "", "", "def", "get_sg_data", "(", "self", ",", "sent_id", ",", "max_length", ")", ":", "\n", "        ", "seqrel_to_label", "=", "{", "'SUBANDSUB'", ":", "0", ",", "'SUBANDOBJ'", ":", "1", ",", "'OBJANDSUB'", ":", "2", ",", "'OBJANDOBJ'", ":", "3", "}", "\n", "seqtype_to_label", "=", "{", "'SPO'", ":", "0", ",", "'S'", ":", "1", ",", "'ALL'", ":", "2", "}", "\n", "seq_eliminate", "=", "[", "'and'", ",", "'or'", ",", "'while'", ",", "','", ",", "'.'", "]", "\n", "sg", "=", "self", ".", "refdb", ".", "ref_sg", "[", "sent_id", "]", "\n", "sg_seq", "=", "self", ".", "refdb", ".", "ref_sg_seq", "[", "sent_id", "]", "\n", "seq", "=", "np", ".", "ones", "(", "(", "max_length", ",", "max_length", ")", ",", "dtype", "=", "np", ".", "int", ")", "*", "-", "1", "\n", "seq_weight", "=", "np", ".", "zeros", "(", "(", "max_length", ",", "max_length", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "# -1: none, 0: node, 1: node-edge-node, 2: all", "\n", "seq_type", "=", "np", ".", "ones", "(", "(", "max_length", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "*", "-", "1", "\n", "seq_connection", "=", "np", ".", "ones", "(", "(", "max_length", ",", "max_length", ")", ",", "dtype", "=", "np", ".", "int", ")", "*", "-", "1", "\n", "split_to_word", ",", "split_to_head", "=", "get_split_projection", "(", "sg", "[", "'words_info'", "]", ")", "\n", "num_valid_words_in_seq", "=", "[", "]", "\n", "seq_subtrees", "=", "np", ".", "zeros", "(", "(", "max_length", ",", "max_length", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "seqset_list", "=", "[", "]", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "sg_seq", "[", "'seq_sg'", "]", ")", ":", "\n", "            ", "seqset_list", ".", "append", "(", "set", "(", "[", "i", "]", ")", ")", "\n", "t", "=", "0", "\n", "num_words_has_weight", "=", "0", "\n", "for", "split", "in", "s", "[", "'seq'", "]", ":", "\n", "                ", "words", "=", "split_to_word", "[", "split", "]", "\n", "for", "w", "in", "words", ":", "\n", "                    ", "if", "w", "<=", "max_length", ":", "\n", "                        ", "seq", "[", "i", ",", "t", "]", "=", "w", "\n", "w_info", "=", "sg", "[", "'words_info'", "]", "[", "w", "]", "\n", "if", "(", "w_info", "[", "0", "]", "!=", "0", ")", "and", "(", "w_info", "[", "1", "]", "!=", "'det'", ")", "and", "(", "w_info", "[", "3", "]", "not", "in", "seq_eliminate", ")", ":", "\n", "                            ", "seq_weight", "[", "i", ",", "t", "]", "=", "1", "\n", "num_words_has_weight", "+=", "1", "\n", "", "t", "+=", "1", "\n", "", "", "", "for", "sr", "in", "s", "[", "'seq_rel'", "]", ":", "\n", "                ", "assert", "sr", "[", "0", "]", "==", "i", "\n", "seq_connection", "[", "i", ",", "sr", "[", "1", "]", "]", "=", "seqrel_to_label", "[", "sr", "[", "2", "]", "]", "\n", "seqset_list", "[", "i", "]", "=", "seqset_list", "[", "i", "]", "|", "seqset_list", "[", "sr", "[", "1", "]", "]", "\n", "", "if", "num_words_has_weight", "==", "0", ":", "\n", "                ", "seq_type", "[", "i", "]", "=", "seqtype_to_label", "[", "'ALL'", "]", "\n", "if", "t", "==", "0", ":", "\n", "                    ", "seq", "[", "i", ",", "0", "]", "=", "0", "\n", "", "", "else", ":", "\n", "                ", "seq_type", "[", "i", "]", "=", "seqtype_to_label", "[", "s", "[", "'type'", "]", "]", "\n", "", "num_valid_words_in_seq", ".", "append", "(", "num_words_has_weight", ")", "\n", "for", "j", "in", "seqset_list", "[", "i", "]", ":", "\n", "                ", "seq_subtrees", "[", "i", ",", "j", "]", "=", "1", "\n", "", "", "com_mask", "=", "np", ".", "zeros", "(", "(", "max_length", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "com_seq", "=", "sg_seq", "[", "'com_seq'", "]", "\n", "com_seq", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "for", "com_seq_ind", "in", "com_seq", ":", "\n", "            ", "if", "num_valid_words_in_seq", "[", "com_seq_ind", "]", ">", "0", ":", "\n", "                ", "com_mask", "[", "com_seq_ind", "]", "=", "1", "\n", "break", "\n", "", "", "num_seq", "=", "sg_seq", "[", "'num_seq'", "]", "\n", "if", "np", ".", "sum", "(", "com_mask", ")", "==", "0", ":", "\n", "            ", "com_mask", "[", "com_seq", "[", "0", "]", "]", "=", "1", "\n", "num_seq", "=", "1", "\n", "seq", "=", "np", ".", "ones", "(", "(", "max_length", ",", "max_length", ")", ",", "dtype", "=", "np", ".", "int", ")", "*", "-", "1", "\n", "seq", "[", "0", ",", "0", "]", "=", "0", "\n", "\n", "", "return", "seq", ",", "seq_weight", ",", "seq_type", ",", "seq_connection", ",", "com_mask", ",", "seq_subtrees", ",", "num_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.compute_IoU": [[199, 208], ["float", "min", "max", "min", "max"], "function", ["None"], ["", "", "def", "compute_IoU", "(", "b1", ",", "b2", ")", ":", "\n", "    ", "iw", "=", "min", "(", "b1", "[", "2", "]", ",", "b2", "[", "2", "]", ")", "-", "max", "(", "b1", "[", "0", "]", ",", "b2", "[", "0", "]", ")", "+", "1", "\n", "if", "iw", "<=", "0", ":", "\n", "        ", "return", "0", "\n", "", "ih", "=", "min", "(", "b1", "[", "3", "]", ",", "b2", "[", "3", "]", ")", "-", "max", "(", "b1", "[", "1", "]", ",", "b2", "[", "1", "]", ")", "+", "1", "\n", "if", "ih", "<=", "0", ":", "\n", "        ", "return", "0", "\n", "", "ua", "=", "float", "(", "(", "b1", "[", "2", "]", "-", "b1", "[", "0", "]", "+", "1", ")", "*", "(", "b1", "[", "3", "]", "-", "b1", "[", "1", "]", "+", "1", ")", "+", "(", "b2", "[", "2", "]", "-", "b2", "[", "0", "]", "+", "1", ")", "*", "(", "b2", "[", "3", "]", "-", "b2", "[", "1", "]", "+", "1", ")", "-", "iw", "*", "ih", ")", "\n", "return", "iw", "*", "ih", "/", "ua", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.max_overlap": [[210, 221], ["range", "refdataset_sg_online.compute_IoU", "ious.append"], "function", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.compute_IoU"], ["", "def", "max_overlap", "(", "b1", ",", "boxes", ")", ":", "\n", "    ", "max_value", "=", "0", "\n", "max_ind", "=", "-", "1", "\n", "ious", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "iou", "=", "compute_IoU", "(", "b1", ",", "boxes", "[", "i", ",", ":", "]", ")", "\n", "ious", ".", "append", "(", "iou", ")", "\n", "if", "iou", ">", "max_value", ":", "\n", "            ", "max_value", "=", "iou", "\n", "max_ind", "=", "i", "\n", "", "", "return", "max_value", ",", "max_ind", ",", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.get_split_projection": [[223, 237], ["enumerate", "split_to_word[].append", "split_to_head[].append"], "function", ["None"], ["", "def", "get_split_projection", "(", "words_info", ")", ":", "\n", "    ", "split_to_head", "=", "{", "}", "\n", "split_to_word", "=", "{", "}", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "words_info", ")", ":", "\n", "        ", "if", "word", "[", "2", "]", "in", "split_to_word", ":", "\n", "            ", "split_to_word", "[", "word", "[", "2", "]", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "            ", "split_to_word", "[", "word", "[", "2", "]", "]", "=", "[", "i", "]", "\n", "", "if", "word", "[", "1", "]", "==", "'head'", ":", "\n", "            ", "if", "word", "[", "2", "]", "in", "split_to_head", ":", "\n", "                ", "split_to_head", "[", "word", "[", "2", "]", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "split_to_head", "[", "word", "[", "2", "]", "]", "=", "[", "i", "]", "\n", "", "", "", "return", "split_to_word", ",", "split_to_head", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.compute_dif_lfeat": [[239, 243], ["numpy.array"], "function", ["None"], ["", "def", "compute_dif_lfeat", "(", "b1", ",", "b2", ")", ":", "\n", "    ", "rcx", ",", "rcy", ",", "rw", ",", "rh", "=", "(", "b1", "[", "0", "]", "+", "b1", "[", "2", "]", ")", "/", "2", ",", "(", "b1", "[", "1", "]", "+", "b1", "[", "3", "]", ")", "/", "2", ",", "b1", "[", "2", "]", "-", "b1", "[", "0", "]", "+", "1", ",", "b1", "[", "3", "]", "-", "b1", "[", "1", "]", "+", "1", "\n", "cx", ",", "cy", ",", "w", ",", "h", "=", "b2", "[", "0", "]", ",", "b2", "[", "1", "]", ",", "b2", "[", "2", "]", "-", "b2", "[", "0", "]", "+", "1", ",", "b2", "[", "3", "]", "-", "b2", "[", "1", "]", "+", "1", "\n", "return", "np", ".", "array", "(", "[", "(", "cx", "-", "rcx", ")", "/", "rw", ",", "(", "cy", "-", "rcy", ")", "/", "rh", ",", "(", "cx", "+", "w", "-", "rcx", ")", "/", "rw", ",", "(", "cy", "+", "h", "-", "rcy", ")", "/", "rh", ",", "w", "*", "h", "/", "(", "rw", "*", "rh", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset_sg_online.compute_distance_pairs": [[245, 252], ["numpy.zeros", "scipy.spatial.distance.squareform", "scipy.spatial.distance.pdist"], "function", ["None"], ["", "def", "compute_distance_pairs", "(", "b", ")", ":", "\n", "    ", "n", "=", "b", ".", "shape", "[", "0", "]", "\n", "cx", ",", "cy", "=", "(", "b", "[", ":", ",", "0", "]", "+", "b", "[", ":", ",", "2", "]", ")", "/", "2", ",", "(", "b", "[", ":", ",", "1", "]", "+", "b", "[", ":", ",", "3", "]", ")", "/", "2", "\n", "x", "=", "np", ".", "zeros", "(", "(", "n", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "x", "[", ":", ",", "0", "]", "=", "cx", "\n", "x", "[", ":", ",", "1", "]", "=", "cy", "\n", "return", "squareform", "(", "pdist", "(", "x", ",", "metric", "=", "'sqeuclidean'", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.RefDataset.__init__": [[6, 15], ["refdataset.RefDataset._compute_lfeats", "refdataset.RefDataset._compute_refgt", "refdataset.RefDataset._compute_reftoken"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.RefDataset._compute_lfeats", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.RefDataset._compute_refgt", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.RefDataset._compute_reftoken"], ["    ", "def", "__init__", "(", "self", ",", "refdb", ",", "vocab", ",", "opt", ")", ":", "\n", "        ", "self", ".", "refdb", "=", "refdb", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "ids", "=", "self", ".", "refdb", ".", "image_ids", "\n", "self", ".", "sent_ids", "=", "self", ".", "refdb", ".", "sent_ids", "\n", "self", ".", "lfeats", "=", "self", ".", "_compute_lfeats", "(", ")", "\n", "self", ".", "sent_ind_to_ids", "=", "self", ".", "_compute_refgt", "(", ")", "\n", "self", ".", "_compute_reftoken", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.RefDataset.__getitem__": [[16, 48], ["refdataset.RefDataset.refdb.ref_db.load_sent", "numpy.zeros", "refdataset.RefDataset.refdb.rois_db[].copy", "min", "numpy.zeros", "numpy.zeros", "roi_feature[].copy", "rois[].copy", "rois[].copy", "numpy.zeros", "refdataset.RefDataset.lfeats[].copy", "refdataset.RefDataset.refdb.ref_db.get_imgIds", "numpy.ones", "numpy.ones", "len"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.get_imgIds"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sent_id", "=", "self", ".", "sent_ind_to_ids", "[", "index", "]", "\n", "sent", "=", "self", ".", "refdb", ".", "ref_db", ".", "load_sent", "(", "sent_id", ")", "\n", "img_id", "=", "self", ".", "refdb", ".", "ref_db", ".", "get_imgIds", "(", "[", "sent_id", "]", ")", "[", "0", "]", "\n", "\n", "gt_box", "=", "sent", "[", "'gt_box'", "]", "\n", "sent_to_box_idx", "=", "sent", "[", "'bbox_ind'", "]", "\n", "max_length", "=", "self", ".", "max_length", "\n", "word_idx", "=", "np", ".", "zeros", "(", "(", "max_length", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "word_idx", "[", "0", ":", "len", "(", "sent", "[", "'vocab_idx'", "]", ")", "]", "=", "sent", "[", "'vocab_idx'", "]", "\n", "\n", "# vis feature", "\n", "rois", "=", "self", ".", "refdb", ".", "rois_db", "[", "img_id", "]", ".", "copy", "(", ")", "\n", "num_box", "=", "min", "(", "rois", "[", "'box'", "]", ".", "shape", "[", "0", "]", ",", "self", ".", "refdb", ".", "max_num_box", ")", "\n", "box", "=", "np", ".", "zeros", "(", "(", "self", ".", "refdb", ".", "max_num_box", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cls", "=", "np", ".", "ones", "(", "(", "self", ".", "refdb", ".", "max_num_box", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "-", "1.0", "\n", "file", "=", "rois", "[", "'file'", "]", "\n", "idx", "=", "rois", "[", "'idx'", "]", "\n", "roi_feature", "=", "self", ".", "refdb", ".", "h5_files", "[", "file", "]", "[", "'features'", "]", "[", "idx", "]", "\n", "feature", "=", "np", ".", "zeros", "(", "(", "self", ".", "refdb", ".", "max_num_box", ",", "roi_feature", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "feature", "[", "0", ":", "num_box", "]", "=", "roi_feature", "[", "0", ":", "num_box", "]", ".", "copy", "(", ")", "\n", "box", "[", "0", ":", "num_box", ",", ":", "]", "=", "rois", "[", "'box'", "]", ".", "copy", "(", ")", "\n", "cls", "[", "0", ":", "num_box", "]", "=", "rois", "[", "'cls'", "]", ".", "copy", "(", ")", "\n", "\n", "lfeat", "=", "np", ".", "zeros", "(", "(", "self", ".", "refdb", ".", "max_num_box", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "roi_lrel", "=", "self", ".", "refdb", ".", "h5_lrel_files", "[", "file", "]", "[", "'lrel'", "]", "[", "idx", "]", "\n", "lrel", "=", "np", ".", "ones", "(", "(", "self", ".", "refdb", ".", "max_num_box", ",", "self", ".", "refdb", ".", "max_num_box", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "-", "1.0", "\n", "lrel", "[", "0", ":", "num_box", ",", "0", ":", "num_box", "]", "=", "roi_lrel", "[", "0", ":", "num_box", ",", "0", ":", "num_box", "]", "\n", "lfeat", "[", "0", ":", "num_box", ",", ":", "]", "=", "self", ".", "lfeats", "[", "img_id", "]", ".", "copy", "(", ")", "\n", "\n", "return", "box", ",", "cls", ",", "feature", ",", "lfeat", ",", "lrel", ",", "word_idx", ",", "sent_to_box_idx", ",", "gt_box", ",", "img_id", ",", "sent_id", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.RefDataset.__len__": [[49, 51], ["len", "list", "refdataset.RefDataset.sent_ind_to_ids.keys"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "list", "(", "self", ".", "sent_ind_to_ids", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.RefDataset._compute_lfeats": [[52, 68], ["numpy.zeros", "range", "numpy.array"], "methods", ["None"], ["", "def", "_compute_lfeats", "(", "self", ")", ":", "\n", "        ", "lfeats", "=", "{", "}", "\n", "for", "img_id", "in", "self", ".", "ids", ":", "\n", "            ", "iw", "=", "self", ".", "refdb", ".", "rois_db", "[", "img_id", "]", "[", "'size'", "]", "[", "0", "]", "\n", "ih", "=", "self", ".", "refdb", ".", "rois_db", "[", "img_id", "]", "[", "'size'", "]", "[", "1", "]", "\n", "boxes", "=", "self", ".", "refdb", ".", "rois_db", "[", "img_id", "]", "[", "'box'", "]", "\n", "num_objs", "=", "self", ".", "refdb", ".", "rois_db", "[", "img_id", "]", "[", "'num_objs'", "]", "\n", "lfeats", "[", "img_id", "]", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "j", "in", "range", "(", "num_objs", ")", ":", "\n", "                ", "box", "=", "boxes", "[", "j", "]", "\n", "x", "=", "box", "[", "0", "]", "\n", "y", "=", "box", "[", "1", "]", "\n", "w", "=", "box", "[", "2", "]", "-", "x", "+", "1", "\n", "h", "=", "box", "[", "3", "]", "-", "y", "+", "1", "\n", "lfeats", "[", "img_id", "]", "[", "j", "]", "=", "np", ".", "array", "(", "[", "x", "/", "iw", ",", "y", "/", "ih", ",", "(", "x", "+", "w", "-", "1", ")", "/", "iw", ",", "(", "y", "+", "h", "-", "1", ")", "/", "ih", ",", "w", "*", "h", "/", "(", "iw", "*", "ih", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "", "return", "lfeats", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.RefDataset._compute_refgt": [[69, 86], ["enumerate", "refdataset.RefDataset.refdb.ref_db.load_sent", "refdataset.max_overlap", "numpy.array", "refdataset.RefDataset.refdb.ref_db.get_imgIds"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.max_overlap", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.get_imgIds"], ["", "def", "_compute_refgt", "(", "self", ")", ":", "\n", "        ", "sent_ind_to_id", "=", "{", "}", "\n", "for", "i", ",", "sent_id", "in", "enumerate", "(", "self", ".", "sent_ids", ")", ":", "\n", "            ", "img_id", "=", "self", ".", "refdb", ".", "ref_db", ".", "get_imgIds", "(", "[", "sent_id", "]", ")", "[", "0", "]", "\n", "boxes", "=", "self", ".", "refdb", ".", "rois_db", "[", "img_id", "]", "[", "'box'", "]", "\n", "ref", "=", "self", ".", "refdb", ".", "ref_db", ".", "load_sent", "(", "sent_id", ")", "\n", "bbox", "=", "ref", "[", "'bbox'", "]", "\n", "x0", "=", "bbox", "[", "0", "]", "\n", "x1", "=", "bbox", "[", "2", "]", "+", "x0", "-", "1", "\n", "y0", "=", "bbox", "[", "1", "]", "\n", "y1", "=", "bbox", "[", "3", "]", "+", "y0", "-", "1", "\n", "iou", ",", "ind", ",", "ious", "=", "max_overlap", "(", "[", "x0", ",", "y0", ",", "x1", ",", "y1", "]", ",", "boxes", ")", "\n", "ref", "[", "'bbox_ind'", "]", "=", "ind", "\n", "ref", "[", "'gt_box'", "]", "=", "np", ".", "array", "(", "[", "x0", ",", "y0", ",", "x1", ",", "y1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "sent_ind_to_id", "[", "i", "]", "=", "sent_id", "\n", "\n", "", "return", "sent_ind_to_id", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.RefDataset._compute_reftoken": [[87, 100], ["refdataset.RefDataset.refdb.ref_db.load_sent", "max", "enumerate", "len", "wd.lower.lower.lower", "sent[].append", "sent[].append"], "methods", ["None"], ["", "def", "_compute_reftoken", "(", "self", ")", ":", "\n", "        ", "self", ".", "max_length", "=", "0", "\n", "for", "sent_id", "in", "self", ".", "refdb", ".", "sent_ids", ":", "\n", "            ", "sent", "=", "self", ".", "refdb", ".", "ref_db", ".", "load_sent", "(", "sent_id", ")", "\n", "tokens", "=", "sent", "[", "'token'", "]", "\n", "self", ".", "max_length", "=", "max", "(", "len", "(", "tokens", ")", ",", "self", ".", "max_length", ")", "\n", "sent", "[", "'vocab_idx'", "]", "=", "[", "]", "\n", "for", "i", ",", "wd", "in", "enumerate", "(", "tokens", ")", ":", "\n", "                ", "wd", "=", "wd", ".", "lower", "(", ")", "\n", "if", "wd", "in", "self", ".", "vocab", ":", "\n", "                    ", "sent", "[", "'vocab_idx'", "]", ".", "append", "(", "self", ".", "vocab", "[", "wd", "]", ")", "\n", "", "else", ":", "\n", "                    ", "sent", "[", "'vocab_idx'", "]", ".", "append", "(", "self", ".", "vocab", "[", "'<unk>'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.compute_IoU": [[102, 111], ["float", "min", "max", "min", "max"], "function", ["None"], ["", "", "", "", "", "def", "compute_IoU", "(", "b1", ",", "b2", ")", ":", "\n", "    ", "iw", "=", "min", "(", "b1", "[", "2", "]", ",", "b2", "[", "2", "]", ")", "-", "max", "(", "b1", "[", "0", "]", ",", "b2", "[", "0", "]", ")", "+", "1", "\n", "if", "iw", "<=", "0", ":", "\n", "        ", "return", "0", "\n", "", "ih", "=", "min", "(", "b1", "[", "3", "]", ",", "b2", "[", "3", "]", ")", "-", "max", "(", "b1", "[", "1", "]", ",", "b2", "[", "1", "]", ")", "+", "1", "\n", "if", "ih", "<=", "0", ":", "\n", "        ", "return", "0", "\n", "", "ua", "=", "float", "(", "(", "b1", "[", "2", "]", "-", "b1", "[", "0", "]", "+", "1", ")", "*", "(", "b1", "[", "3", "]", "-", "b1", "[", "1", "]", "+", "1", ")", "+", "(", "b2", "[", "2", "]", "-", "b2", "[", "0", "]", "+", "1", ")", "*", "(", "b2", "[", "3", "]", "-", "b2", "[", "1", "]", "+", "1", ")", "-", "iw", "*", "ih", ")", "\n", "return", "iw", "*", "ih", "/", "ua", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.max_overlap": [[113, 124], ["range", "refdataset.compute_IoU", "ious.append"], "function", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refdataset.compute_IoU"], ["", "def", "max_overlap", "(", "b1", ",", "boxes", ")", ":", "\n", "    ", "max_value", "=", "0", "\n", "max_ind", "=", "-", "1", "\n", "ious", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "iou", "=", "compute_IoU", "(", "b1", ",", "boxes", "[", "i", ",", ":", "]", ")", "\n", "ious", ".", "append", "(", "iou", ")", "\n", "if", "iou", ">", "max_value", ":", "\n", "            ", "max_value", "=", "iou", "\n", "max_ind", "=", "i", "\n", "", "", "return", "max_value", ",", "max_ind", ",", "ious", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.__init__": [[14, 36], ["datasets.refer.Refer", "refvg.Refvg._ref_db.get_sentIds", "refvg.Refvg._ref_db.get_imgIds", "datasets.roidb.Roidb", "refvg.Refvg._load_sg", "refvg.Refvg._load_sg_seq", "datasets.roidb.Roidb.roidb.has_key", "datasets.roidb.Roidb.roidb[].copy", "max", "int"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.get_imgIds", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg._load_sg", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg._load_sg_seq"], ["    ", "def", "__init__", "(", "self", ",", "split", ",", "model_method", ")", ":", "\n", "        ", "self", ".", "_dataset", "=", "'refvg'", "\n", "self", ".", "_imageset", "=", "'vg'", "\n", "self", ".", "_split", "=", "split", "\n", "self", ".", "_ref_db", "=", "Refer", "(", "opt", "[", "'data_root'", "]", ",", "self", ".", "_dataset", ",", "split", ")", "\n", "if", "model_method", "==", "'sgmn'", ":", "\n", "            ", "self", ".", "_ref_sg", "=", "self", ".", "_load_sg", "(", ")", "\n", "self", ".", "_ref_sg_seq", "=", "self", ".", "_load_sg_seq", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_ref_sg", "=", "None", "\n", "self", ".", "_ref_sg_seq", "=", "None", "\n", "", "self", ".", "_sent_ids", "=", "self", ".", "_ref_db", ".", "get_sentIds", "(", ")", "\n", "self", ".", "_image_ids", "=", "self", ".", "_ref_db", ".", "get_imgIds", "(", "self", ".", "_sent_ids", ")", "\n", "roidb", "=", "Roidb", "(", "self", ".", "_imageset", ",", "model_method", ")", "\n", "self", ".", "_rois_db", "=", "{", "}", "\n", "self", ".", "max_num_box", "=", "0", "\n", "for", "img_id", "in", "self", ".", "_image_ids", ":", "\n", "            ", "assert", "roidb", ".", "roidb", ".", "has_key", "(", "img_id", ")", "\n", "self", ".", "_rois_db", "[", "img_id", "]", "=", "roidb", ".", "roidb", "[", "img_id", "]", ".", "copy", "(", ")", "\n", "self", ".", "max_num_box", "=", "max", "(", "self", ".", "max_num_box", ",", "int", "(", "self", ".", "_rois_db", "[", "img_id", "]", "[", "'num_objs'", "]", ")", ")", "\n", "", "self", ".", "_h5_files", "=", "roidb", ".", "h5_files", "\n", "self", ".", "_h5_lrel_files", "=", "roidb", ".", "h5_lrel_files", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.sent_ids": [[37, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sent_ids", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sent_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.ref_db": [[41, 44], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ref_db", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ref_db", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.image_ids": [[45, 48], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_ids", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_image_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.rois_db": [[49, 52], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rois_db", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_rois_db", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.h5_files": [[53, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "h5_files", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_h5_files", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.h5_lrel_files": [[57, 60], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "h5_lrel_files", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_h5_lrel_files", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.ref_sg": [[61, 64], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ref_sg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ref_sg", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.ref_sg_seq": [[65, 68], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ref_sg_seq", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ref_sg_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.id_to_path": [[69, 77], ["str", "os.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "id_to_path", "(", "self", ")", ":", "\n", "        ", "path", "=", "{", "}", "\n", "for", "img_id", "in", "self", ".", "image_ids", ":", "\n", "            ", "file_name", "=", "str", "(", "img_id", ")", "+", "'.jpg'", "\n", "image_path", "=", "osp", ".", "join", "(", "opt", "[", "'data_root'", "]", ",", "'images/'", ")", "+", "file_name", "\n", "path", "[", "img_id", "]", "=", "image_path", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.get_imgIds": [[78, 80], ["refvg.Refvg._ref_db.get_imgIds"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.get_imgIds"], ["", "def", "get_imgIds", "(", "self", ",", "sent_ids", ")", ":", "\n", "        ", "return", "self", ".", "_ref_db", ".", "get_imgIds", "(", "sent_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg._load_sg": [[81, 88], ["os.join", "json.load", "list", "open", "json.load.keys"], "methods", ["None"], ["", "def", "_load_sg", "(", "self", ")", ":", "\n", "        ", "sgs", "=", "{", "}", "\n", "sg_file_path", "=", "osp", ".", "join", "(", "opt", "[", "'data_root'", "]", ",", "self", ".", "_dataset", ",", "self", ".", "_split", "+", "'_sgs.json'", ")", "\n", "data", "=", "json", ".", "load", "(", "open", "(", "sg_file_path", ",", "'r'", ")", ")", "\n", "for", "key", "in", "list", "(", "data", ".", "keys", "(", ")", ")", ":", "\n", "            ", "sgs", "[", "key", "]", "=", "data", "[", "key", "]", "\n", "", "return", "sgs", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg._load_sg_seq": [[89, 96], ["os.join", "json.load", "list", "open", "json.load.keys"], "methods", ["None"], ["", "def", "_load_sg_seq", "(", "self", ")", ":", "\n", "        ", "sg_seqs", "=", "{", "}", "\n", "sg_seq_file_path", "=", "osp", ".", "join", "(", "opt", "[", "'data_root'", "]", ",", "self", ".", "_dataset", ",", "self", ".", "_split", "+", "'_sg_seqs.json'", ")", "\n", "data", "=", "json", ".", "load", "(", "open", "(", "sg_seq_file_path", ",", "'r'", ")", ")", "\n", "for", "key", "in", "list", "(", "data", ".", "keys", "(", ")", ")", ":", "\n", "            ", "sg_seqs", "[", "key", "]", "=", "data", "[", "key", "]", "\n", "", "return", "sg_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.load_dictionary": [[97, 105], ["os.join", "io.open", "Exception", "w.strip", "range", "f.readlines", "len"], "methods", ["None"], ["", "def", "load_dictionary", "(", "self", ",", "pad_at_first", "=", "True", ")", ":", "\n", "        ", "dict_file", "=", "osp", ".", "join", "(", "opt", "[", "'data_root'", "]", ",", "'word_embedding'", ",", "'vocabulary_72700.txt'", ")", "\n", "with", "io", ".", "open", "(", "dict_file", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "words", "=", "[", "w", ".", "strip", "(", ")", "for", "w", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "if", "pad_at_first", "and", "words", "[", "0", "]", "!=", "'<pad>'", ":", "\n", "            ", "raise", "Exception", "(", "\"The first word needs to be <pad> in the word list.\"", ")", "\n", "", "vocab_dict", "=", "{", "words", "[", "n", "]", ":", "n", "for", "n", "in", "range", "(", "len", "(", "words", ")", ")", "}", "\n", "return", "vocab_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.get_img_path": [[106, 108], ["None"], "methods", ["None"], ["", "def", "get_img_path", "(", "self", ",", "id", ")", ":", "\n", "        ", "return", "self", ".", "id_to_path", "[", "id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.get_sent": [[109, 111], ["refvg.Refvg.ref_db.load_sent"], "methods", ["None"], ["", "def", "get_sent", "(", "self", ",", "sent_id", ")", ":", "\n", "        ", "return", "self", ".", "ref_db", ".", "load_sent", "(", "sent_id", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.factory.get_db": [[11, 16], ["__sets.has_key", "KeyError"], "function", ["None"], ["", "", "def", "get_db", "(", "name", ")", ":", "\n", "    ", "\"\"\"Get an imdb by name.\"\"\"", "\n", "if", "not", "__sets", ".", "has_key", "(", "name", ")", ":", "\n", "        ", "raise", "KeyError", "(", "'Unknown dataset: {}'", ".", "format", "(", "name", ")", ")", "\n", "", "return", "__sets", "[", "name", "]", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.roidb.Roidb.__init__": [[15, 21], ["os.join", "roidb.Roidb._load_roidb"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.roidb.Roidb._load_roidb"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "model_method", ")", ":", "\n", "        ", "self", ".", "image_set", "=", "image_set", "\n", "self", ".", "model_method", "=", "model_method", "\n", "self", ".", "_data_path", "=", "osp", ".", "join", "(", "opt", "[", "'data_root'", "]", ",", "'gt_objects'", ")", "\n", "\n", "self", ".", "_image_ids", ",", "self", ".", "_roidb", ",", "self", ".", "_h5_files", ",", "self", ".", "_h5_lrel_files", "=", "self", ".", "_load_roidb", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.roidb.Roidb._load_roidb": [[22, 60], ["os.join", "len", "glob.glob.glob", "os.join", "os.join", "open", "json.load", "h5py.File", "image_ids.append", "os.join", "range", "range", "numpy.array", "numpy.array", "numpy.array", "h5py.File", "numpy.ones"], "methods", ["None"], ["", "def", "_load_roidb", "(", "self", ")", ":", "\n", "        ", "info_file", "=", "osp", ".", "join", "(", "self", ".", "_data_path", ",", "'gt_objects_info.json'", ")", "\n", "num_files", "=", "len", "(", "glob", "(", "osp", ".", "join", "(", "self", ".", "_data_path", ",", "'gt_objects_*.h5'", ")", ")", ")", "\n", "h5_paths", "=", "[", "osp", ".", "join", "(", "self", ".", "_data_path", ",", "'gt_objects_%d.h5'", "%", "n", ")", "\n", "for", "n", "in", "range", "(", "num_files", ")", "]", "\n", "h5_lrel_paths", "=", "[", "osp", ".", "join", "(", "self", ".", "_data_path", ",", "'lrel_gt_objs_%d.h5'", "%", "n", ")", "\n", "for", "n", "in", "range", "(", "num_files", ")", "]", "\n", "\n", "with", "open", "(", "info_file", ")", "as", "f", ":", "\n", "            ", "all_info", "=", "json", ".", "load", "(", "f", ")", "\n", "", "h5_files", "=", "[", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "for", "path", "in", "h5_paths", "]", "\n", "\n", "image_ids", "=", "[", "]", "\n", "data", "=", "{", "}", "\n", "for", "img_id", "in", "all_info", ":", "\n", "            ", "info", "=", "all_info", "[", "img_id", "]", "\n", "file", ",", "idx", ",", "num", "=", "info", "[", "'file'", "]", ",", "info", "[", "'idx'", "]", ",", "info", "[", "'objectsNum'", "]", "\n", "bbox", "=", "h5_files", "[", "file", "]", "[", "'bboxes'", "]", "[", "idx", "]", "\n", "if", "'cls'", "in", "h5_files", "[", "file", "]", ":", "\n", "                ", "cls", "=", "h5_files", "[", "file", "]", "[", "'cls'", "]", "[", "idx", "]", "\n", "", "else", ":", "\n", "                ", "cls", "=", "np", ".", "ones", "(", "(", "num", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "*", "999999", "\n", "", "width", "=", "info", "[", "'width'", "]", "\n", "height", "=", "info", "[", "'height'", "]", "\n", "\n", "image_ids", ".", "append", "(", "img_id", ")", "\n", "data", "[", "img_id", "]", "=", "{", "'size'", ":", "np", ".", "array", "(", "[", "width", ",", "height", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "'num_objs'", ":", "num", ",", "\n", "'cls'", ":", "np", ".", "array", "(", "cls", "[", "0", ":", "num", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "'box'", ":", "np", ".", "array", "(", "bbox", "[", "0", ":", "num", ",", ":", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "'file'", ":", "file", ",", "\n", "'idx'", ":", "idx", "}", "\n", "\n", "", "if", "self", ".", "model_method", "in", "[", "'cmrin'", ",", "'dga'", "]", ":", "\n", "            ", "h5_lrel_files", "=", "[", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "for", "path", "in", "h5_lrel_paths", "]", "\n", "return", "image_ids", ",", "data", ",", "h5_files", ",", "h5_lrel_files", "\n", "", "else", ":", "\n", "            ", "return", "image_ids", ",", "data", ",", "h5_files", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.roidb.Roidb.image_ids": [[61, 64], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "image_ids", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_image_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.roidb.Roidb.roidb": [[65, 68], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "roidb", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.roidb.Roidb.num_images": [[69, 72], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_images", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.roidb.Roidb.h5_files": [[73, 76], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "h5_files", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_h5_files", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.roidb.Roidb.h5_lrel_files": [[77, 80], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "h5_lrel_files", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_h5_lrel_files", "", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.dga_models.controller.Controller.__init__": [[10, 31], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "controller.Controller.reset_parameters", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "controller.Controller.encode_que_list.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__", "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.gcn_ref_fusion.GCNFusionUnit.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "dim_word_output", ",", "T_ctrl", ")", ":", "\n", "        ", "super", "(", "Controller", ",", "self", ")", ".", "__init__", "(", ")", "\n", "ctrl_dim", "=", "dim_word_output", "\n", "\n", "# define c_0 and reset_parameters", "\n", "self", ".", "c_init", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ",", "ctrl_dim", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "# define fc operators", "\n", "self", ".", "encode_que_list", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "ctrl_dim", ",", "ctrl_dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "ctrl_dim", ",", "ctrl_dim", ")", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "T_ctrl", "-", "1", ")", ":", "\n", "            ", "self", ".", "encode_que_list", ".", "append", "(", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "ctrl_dim", ",", "ctrl_dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "ctrl_dim", ",", "ctrl_dim", ")", ")", ")", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2", "*", "ctrl_dim", ",", "ctrl_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "ctrl_dim", ",", "1", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "2", "*", "ctrl_dim", ",", "ctrl_dim", ")", "\n", "\n", "self", ".", "T_ctrl", "=", "T_ctrl", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.dga_models.controller.Controller.reset_parameters": [[32, 35], ["controller.Controller.c_init.data.uniform_", "math.sqrt", "controller.Controller.c_init.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.0", "/", "math", ".", "sqrt", "(", "self", ".", "c_init", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "c_init", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.dga_models.controller.Controller.forward": [[36, 69], ["controller.Controller.c_init.expand", "range", "q_encoding.size", "controller.Controller.c_init.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "controller.Controller.fc1", "controller.Controller.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh", "torch.tanh", "torch.tanh", "controller.Controller.fc2().squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum().unsqueeze().expand", "torch.sum().unsqueeze().expand", "torch.sum().unsqueeze().expand", "torch.sum().unsqueeze().expand", "torch.sum().unsqueeze().expand", "torch.sum().unsqueeze().expand", "torch.sum().unsqueeze().expand", "torch.sum().unsqueeze().expand", "torch.sum().unsqueeze().expand", "words_weight_list.append", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "control_vector_list.append", "lstm_seq.size", "controller.Controller.fc3", "attn_mask.float", "torch.softmax.size", "torch.softmax.size", "controller.Controller.unsqueeze", "controller.Controller.fc2", "attn_mask.float", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "norm_cv_i.unsqueeze().expand", "norm_cv_i.size", "norm_cv_i.size", "lstm_seq.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "norm_cv_i.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "lstm_seq", ",", "q_encoding", ",", "attn_mask", ")", ":", "\n", "\n", "        ", "c_prev", "=", "self", ".", "c_init", ".", "expand", "(", "q_encoding", ".", "size", "(", "0", ")", ",", "self", ".", "c_init", ".", "size", "(", "1", ")", ")", "\n", "\n", "words_weight_list", "=", "[", "]", "\n", "control_vector_list", "=", "[", "]", "\n", "\n", "for", "t", "in", "range", "(", "self", ".", "T_ctrl", ")", ":", "\n", "            ", "q_i", "=", "self", ".", "encode_que_list", "[", "t", "]", "(", "q_encoding", ")", "\n", "q_i_c", "=", "torch", ".", "cat", "(", "[", "q_i", ",", "c_prev", "]", ",", "dim", "=", "1", ")", "\n", "cq_i", "=", "self", ".", "fc1", "(", "q_i_c", ")", "\n", "\n", "cq_i_reshape", "=", "cq_i", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "lstm_seq", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "interactions", "=", "cq_i_reshape", "*", "lstm_seq", "\n", "interactions", "=", "torch", ".", "cat", "(", "[", "interactions", ",", "lstm_seq", "]", ",", "dim", "=", "2", ")", "\n", "interactions", "=", "F", ".", "tanh", "(", "self", ".", "fc3", "(", "interactions", ")", ")", "\n", "\n", "logits", "=", "self", ".", "fc2", "(", "interactions", ")", ".", "squeeze", "(", "2", ")", "\n", "mask", "=", "(", "1.0", "-", "attn_mask", ".", "float", "(", ")", ")", "*", "(", "-", "1e30", ")", "\n", "logits", "=", "logits", "+", "mask", "\n", "logits", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "norm_cv_i", "=", "logits", "*", "attn_mask", ".", "float", "(", ")", "\n", "norm_cv_i_sum", "=", "torch", ".", "sum", "(", "norm_cv_i", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "logits", ".", "size", "(", "0", ")", ",", "logits", ".", "size", "(", "1", ")", ")", "\n", "norm_cv_i", "[", "norm_cv_i_sum", "!=", "0", "]", "=", "norm_cv_i", "[", "norm_cv_i_sum", "!=", "0", "]", "/", "norm_cv_i_sum", "[", "norm_cv_i_sum", "!=", "0", "]", "\n", "\n", "words_weight_list", ".", "append", "(", "norm_cv_i", ")", "\n", "\n", "c_i", "=", "torch", ".", "sum", "(", "\n", "norm_cv_i", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "norm_cv_i", ".", "size", "(", "0", ")", ",", "norm_cv_i", ".", "size", "(", "1", ")", ",", "lstm_seq", ".", "size", "(", "2", ")", ")", "*", "lstm_seq", ",", "dim", "=", "1", ")", "\n", "c_prev", "=", "c_i", "\n", "control_vector_list", ".", "append", "(", "c_prev", ")", "\n", "\n", "", "return", "words_weight_list", ",", "control_vector_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.dga_models.chain_reason.CR.__init__": [[12, 46], ["torch.Module.__init__", "models.language.RNNEncoder", "torch.Sequential", "torch.Sequential", "dga_models.controller.Controller", "dga_models.one_step.GraphR", "chain_reason.LocationEncoder", "cmrin_models.matching.Matching", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "CR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# language model", "\n", "self", ".", "rnn_encoder", "=", "RNNEncoder", "(", "vocab_size", "=", "opt", "[", "'vocab_size'", "]", ",", "\n", "word_embedding_size", "=", "opt", "[", "'word_embedding_size'", "]", ",", "\n", "hidden_size", "=", "opt", "[", "'rnn_hidden_size'", "]", ",", "\n", "bidirectional", "=", "opt", "[", "'bidirectional'", "]", ">", "0", ",", "\n", "input_dropout_p", "=", "opt", "[", "'word_drop_out'", "]", ",", "\n", "dropout_p", "=", "opt", "[", "'rnn_drop_out'", "]", ",", "\n", "n_layers", "=", "opt", "[", "'rnn_num_layers'", "]", ",", "\n", "rnn_type", "=", "opt", "[", "'rnn_type'", "]", ",", "\n", "variable_lengths", "=", "opt", "[", "'variable_lengths'", "]", ">", "0", ",", "\n", "pretrain", "=", "True", ")", "\n", "\n", "dim_word_output", "=", "opt", "[", "'rnn_hidden_size'", "]", "*", "(", "2", "if", "opt", "[", "'bidirectional'", "]", "else", "1", ")", "\n", "\n", "num_cls_word", "=", "4", "# for comparison with cmrin, 2->4 and word embedding->word context", "\n", "self", ".", "word_judge", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_word_output", ",", "opt", "[", "'dim_hidden_word_judge'", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "opt", "[", "'word_judge_drop'", "]", ")", ",", "\n", "nn", ".", "Linear", "(", "opt", "[", "'dim_hidden_word_judge'", "]", ",", "num_cls_word", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", ")", "\n", "\n", "# control on language", "\n", "self", ".", "controller", "=", "Controller", "(", "dim_word_output", ",", "opt", "[", "'T_ctrl'", "]", ")", "\n", "\n", "self", ".", "updater", "=", "GraphR", "(", "opt", ")", "\n", "\n", "# for comparison with cmrin, encode location feats with learned cxt feats", "\n", "self", ".", "locate_encoder", "=", "LocationEncoder", "(", "opt", "[", "'vis_init_norm'", "]", ",", "opt", "[", "'dim_location'", "]", ")", "\n", "\n", "self", ".", "matching", "=", "Matching", "(", "opt", "[", "'dim_reason'", "]", "+", "opt", "[", "'dim_location'", "]", ",", "\n", "dim_word_output", ",", "opt", "[", "'jemb_dim'", "]", ",", "opt", "[", "'jemb_drop_out'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.dga_models.chain_reason.CR.forward": [[47, 66], ["chain_reason.CR.rnn_encoder", "chain_reason.CR.word_judge", "chain_reason.CR.controller", "chain_reason.CR.updater", "chain_reason.CR.locate_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "chain_reason.CR.matching", "is_not_pad_sents.unsqueeze().expand", "is_not_pad_sents.size", "is_not_pad_sents.size", "chain_reason.CR.size", "is_not_pad_sents.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature", ",", "cls", ",", "lfeat", ",", "lrel", ",", "sents", ")", ":", "\n", "        ", "context", ",", "hidden", ",", "embeded", ",", "max_length", "=", "self", ".", "rnn_encoder", "(", "sents", ")", "\n", "input_gcnencoder_sents", "=", "sents", "[", ":", ",", "0", ":", "max_length", "]", "\n", "is_not_pad_sents", "=", "(", "input_gcnencoder_sents", "!=", "0", ")", ".", "float", "(", ")", "\n", "\n", "context_weight", "=", "self", ".", "word_judge", "(", "context", ")", "\n", "context_weight", "=", "context_weight", "*", "is_not_pad_sents", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "is_not_pad_sents", ".", "size", "(", "0", ")", ",", "\n", "is_not_pad_sents", ".", "size", "(", "1", ")", ",", "\n", "context_weight", ".", "size", "(", "2", ")", ")", "\n", "\n", "words_weight_list", ",", "control_vector_list", "=", "self", ".", "controller", "(", "context", ",", "hidden", ",", "is_not_pad_sents", ")", "\n", "\n", "x", "=", "self", ".", "updater", "(", "feature", ",", "words_weight_list", ",", "control_vector_list", ",", "embeded", ",", "context_weight", ",", "cls", ",", "lrel", ")", "\n", "\n", "location_feature", "=", "self", ".", "locate_encoder", "(", "lfeat", ")", "\n", "final_x", "=", "torch", ".", "cat", "(", "[", "x", ",", "location_feature", "]", ",", "dim", "=", "2", ")", "\n", "score_cos", "=", "self", ".", "matching", "(", "final_x", ",", "hidden", ")", "\n", "\n", "return", "score_cos", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.dga_models.chain_reason.LocationEncoder.__init__": [[69, 73], ["torch.Module.__init__", "cmrin_models.model_utils.NormalizeScale", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "init_norm", ",", "dim", ")", ":", "\n", "        ", "super", "(", "LocationEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lfeat_normalizer", "=", "NormalizeScale", "(", "5", ",", "init_norm", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "5", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.dga_models.chain_reason.LocationEncoder.forward": [[74, 78], ["chain_reason.LocationEncoder.lfeat_normalizer", "chain_reason.LocationEncoder.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "lfeats", ")", ":", "\n", "        ", "loc_feat", "=", "self", ".", "lfeat_normalizer", "(", "lfeats", ")", "\n", "output", "=", "self", ".", "fc", "(", "loc_feat", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.dga_models.one_step.GraphR.__init__": [[10, 43], ["torch.Module.__init__", "cmrin_models.model_utils.NormalizeScale", "cmrin_models.model_utils.NormalizeScale", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "one_step.GraphR.reset_parameters", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__", "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.gcn_ref_fusion.GCNFusionUnit.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "GraphR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "dim_word_embed", "=", "opt", "[", "'word_embedding_size'", "]", "\n", "dim_word_output", "=", "opt", "[", "'rnn_hidden_size'", "]", "*", "(", "2", "if", "opt", "[", "'bidirectional'", "]", "else", "1", ")", "\n", "\n", "self", ".", "feat_normalizer", "=", "NormalizeScale", "(", "opt", "[", "'dim_input_vis_feat'", "]", ",", "opt", "[", "'vis_init_norm'", "]", ")", "\n", "dim_input_vis_feat", "=", "opt", "[", "'dim_input_vis_feat'", "]", "\n", "self", ".", "word_normalizer", "=", "NormalizeScale", "(", "dim_word_embed", ",", "opt", "[", "'word_init_norm'", "]", ")", "\n", "\n", "self", ".", "nrel_l", "=", "opt", "[", "'num_location_relation'", "]", "\n", "self", ".", "edge_gate", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_word_embed", ",", "opt", "[", "'dim_edge_gate'", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "opt", "[", "'edge_gate_drop_out'", "]", ")", ",", "\n", "nn", ".", "Linear", "(", "opt", "[", "'dim_edge_gate'", "]", ",", "opt", "[", "'num_location_relation'", "]", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", ")", "\n", "self", ".", "node_word_match", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_input_vis_feat", "+", "dim_word_embed", ",", "opt", "[", "'dim_edge_gate'", "]", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "opt", "[", "'dim_edge_gate'", "]", ",", "1", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", ")", "\n", "\n", "self", ".", "T_ctrl", "=", "opt", "[", "'T_ctrl'", "]", "\n", "\n", "dim_reason", "=", "opt", "[", "'dim_reason'", "]", "\n", "# fusion model", "\n", "dim_fusion_input", "=", "dim_input_vis_feat", "+", "dim_word_embed", "\n", "self", ".", "fuse_fc", "=", "nn", ".", "Linear", "(", "dim_fusion_input", ",", "dim_reason", ")", "\n", "\n", "# update feature", "\n", "self", ".", "w1", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "dim_reason", ",", "dim_reason", ")", ")", "\n", "self", ".", "w3", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "dim_reason", ",", "dim_reason", ")", ")", "\n", "self", ".", "rel_bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "nrel_l", ",", "dim_reason", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.dga_models.one_step.GraphR.reset_parameters": [[44, 49], ["one_step.GraphR.w1.data.uniform_", "one_step.GraphR.w3.data.uniform_", "one_step.GraphR.rel_bias.data.uniform_", "math.sqrt", "one_step.GraphR.w1.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "w1", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "w1", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "w3", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "rel_bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.dga_models.one_step.GraphR.forward": [[50, 110], ["one_step.GraphR.feat_normalizer", "one_step.GraphR.word_normalizer", "context_weight[].unsqueeze().expand", "one_step.GraphR.unsqueeze().expand", "one_step.GraphR.unsqueeze().expand", "context_weight[].unsqueeze().expand", "one_step.GraphR.edge_gate", "one_step.GraphR.node_word_match().squeeze", "one_step.GraphR.sum().unsqueeze().expand", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "one_step.GraphR.fuse_fc", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "context_weight.size", "context_weight.size", "one_step.GraphR.size", "one_step.GraphR.size", "one_step.GraphR.size", "one_step.GraphR.size", "one_step.GraphR.size", "one_step.GraphR.size", "one_step.GraphR.size", "one_step.GraphR.size", "context_weight.size", "context_weight.size", "one_step.GraphR.size", "is_not_pad_node.unsqueeze().expand", "one_step.GraphR.size", "one_step.GraphR.size", "one_step.GraphR.size", "node_weight_per_word.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x_list.append", "context_weight[].unsqueeze", "one_step.GraphR.unsqueeze", "one_step.GraphR.unsqueeze", "context_weight[].unsqueeze", "one_step.GraphR.node_word_match", "is_not_pad_node.size", "one_step.GraphR.size", "is_not_pad_node.size", "one_step.GraphR.sum().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "word_weights.unsqueeze().expand", "one_step.GraphR.go_node", "one_step.GraphR.go", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "is_not_pad_node.unsqueeze", "word_weights.size", "word_weights.size", "node_weight_per_word.size", "one_step.GraphR.sum", "one_step.GraphR.size", "one_step.GraphR.size", "word_weights.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.dga_models.one_step.GraphR.go_node", "home.repos.pwc.inspect_result.sibeiyang_sgmn.dga_models.one_step.GraphR.go"], ["", "def", "forward", "(", "self", ",", "feature", ",", "words_weight_list", ",", "control_vector_list", ",", "embed", ",", "context_weight", ",", "cls", ",", "rel", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "feat_normalizer", "(", "feature", ")", "\n", "words", "=", "self", ".", "word_normalizer", "(", "embed", ")", "\n", "\n", "word_edge_weights_expand", "=", "context_weight", "[", ":", ",", ":", ",", "0", "]", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "context_weight", ".", "size", "(", "0", ")", ",", "\n", "context_weight", ".", "size", "(", "1", ")", ",", "\n", "self", ".", "nrel_l", ")", "\n", "words_expand", "=", "words", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "words", ".", "size", "(", "0", ")", ",", "words", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "1", ")", ",", "words", ".", "size", "(", "2", ")", ")", "\n", "x_expand", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "x", ".", "size", "(", "0", ")", ",", "words", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "word_node_weights_expand", "=", "context_weight", "[", ":", ",", ":", ",", "1", "]", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "context_weight", ".", "size", "(", "0", ")", ",", "\n", "context_weight", ".", "size", "(", "1", ")", ",", "\n", "x", ".", "size", "(", "1", ")", ")", "\n", "\n", "# obtain initial attention", "\n", "words_input_edge_gate", "=", "words", "\n", "edge_type_weight", "=", "self", ".", "edge_gate", "(", "words_input_edge_gate", ")", "\n", "edge_weight_per_type_per_word", "=", "edge_type_weight", "*", "word_edge_weights_expand", "\n", "\n", "attn_word_node", "=", "self", ".", "node_word_match", "(", "torch", ".", "cat", "(", "[", "words_expand", ",", "x_expand", "]", ",", "3", ")", ")", ".", "squeeze", "(", "3", ")", "\n", "is_not_pad_node", "=", "(", "cls", "!=", "-", "1.0", ")", ".", "float", "(", ")", "\n", "attn_word_node", "=", "attn_word_node", "*", "(", "is_not_pad_node", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "is_not_pad_node", ".", "size", "(", "0", ")", ",", "\n", "attn_word_node", ".", "size", "(", "1", ")", ",", "\n", "is_not_pad_node", ".", "size", "(", "1", ")", ")", ")", "\n", "attn_word_node_sum", "=", "attn_word_node", ".", "sum", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "attn_word_node", ".", "size", "(", "0", ")", ",", "\n", "attn_word_node", ".", "size", "(", "1", ")", ",", "\n", "attn_word_node", ".", "size", "(", "2", ")", ")", "\n", "attn_word_node", "[", "attn_word_node_sum", "!=", "0", "]", "=", "attn_word_node", "[", "attn_word_node_sum", "!=", "0", "]", "/", "attn_word_node_sum", "[", "attn_word_node_sum", "!=", "0", "]", "\n", "node_weight_per_word", "=", "attn_word_node", "*", "word_node_weights_expand", "\n", "\n", "# fuse language context on node", "\n", "word_feat_per_node", "=", "torch", ".", "bmm", "(", "node_weight_per_word", ".", "transpose", "(", "1", ",", "2", ")", ",", "words", ")", "\n", "fusion_x", "=", "self", ".", "fuse_fc", "(", "torch", ".", "cat", "(", "[", "word_feat_per_node", ",", "x", "]", ",", "dim", "=", "2", ")", ")", "\n", "\n", "# iterator", "\n", "x_i", "=", "fusion_x", "\n", "node_gate", "=", "torch", ".", "zeros", "(", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "# edge_type_gate = torch.zeros((edge_type_weight.size(0), edge_type_weight.size(2)), requires_grad=False).cuda()", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "T_ctrl", ")", ":", "\n", "            ", "word_weights", "=", "words_weight_list", "[", "i", "]", "\n", "control_vector", "=", "control_vector_list", "[", "i", "]", "\n", "\n", "# node", "\n", "i_node_weight_per_word", "=", "node_weight_per_word", "*", "word_weights", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "word_weights", ".", "size", "(", "0", ")", ",", "\n", "word_weights", ".", "size", "(", "1", ")", ",", "\n", "node_weight_per_word", ".", "size", "(", "2", ")", ")", "\n", "i_node_weight", "=", "torch", ".", "sum", "(", "i_node_weight_per_word", ",", "1", ")", "\n", "# init edge: simplify the edge update as opening all the edges for Ref-Reasoning", "\n", "i_edge_weight_per_type_per_word", "=", "edge_weight_per_type_per_word", "\n", "i_edge_weight_per_type", "=", "torch", ".", "sum", "(", "i_edge_weight_per_type_per_word", ",", "1", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                ", "node_gate", ",", "x_i", "=", "self", ".", "go_node", "(", "i_node_weight", ",", "x_i", ")", "\n", "", "else", ":", "\n", "                ", "node_gate", ",", "x_i", "=", "self", ".", "go", "(", "node_gate", ",", "i_node_weight", ",", "x_i", ",", "i_edge_weight_per_type", ",", "cls", ",", "rel", ")", "\n", "", "x_list", ".", "append", "(", "x_i", ")", "\n", "\n", "", "return", "x_list", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.dga_models.one_step.GraphR.go": [[111, 150], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "last_node_gate.unsqueeze().expand", "range", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "adj3.unsqueeze.unsqueeze.unsqueeze", "torch.relu", "torch.relu", "torch.relu", "new_gate.unsqueeze().expand", "total_gate.unsqueeze().expand", "last_node_gate.size", "last_node_gate.size", "last_node_gate.size", "adj1_un.transpose().float", "edge_weight_per_type_per_sent[].unsqueeze().unsqueeze().expand", "adj3_weight.expand", "torch.zeros().cuda.size", "torch.zeros().cuda.size", "torch.zeros().cuda.size", "torch.zeros().cuda.size", "torch.zeros().cuda.size", "torch.zeros().cuda.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "last_node_gate.unsqueeze", "adj1_un.transpose().float.size", "adj1_un.transpose().float.size", "adj1_un.transpose().float.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "adj3.unsqueeze.unsqueeze.size", "adj3.unsqueeze.unsqueeze.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "new_gate.unsqueeze", "total_gate.unsqueeze", "last_node_gate.unsqueeze().expand", "adj1_un.transpose", "edge_weight_per_type_per_sent[].unsqueeze().unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "one_step.GraphR.rel_bias[].unsqueeze().unsqueeze().expand", "gate_adj1.sum().unsqueeze().expand", "last_x.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "adj1_un.transpose().float.size", "adj1_un.transpose().float.size", "one_step.GraphR.rel_bias.size", "adj1_un.transpose().float.size", "adj1_un.transpose().float.size", "one_step.GraphR.rel_bias.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "last_node_gate.unsqueeze", "edge_weight_per_type_per_sent[].unsqueeze", "one_step.GraphR.rel_bias[].unsqueeze().unsqueeze", "gate_adj1.sum().unsqueeze", "one_step.GraphR.rel_bias[].unsqueeze", "gate_adj1.sum"], "methods", ["None"], ["", "def", "go", "(", "self", ",", "last_node_gate", ",", "node_weight", ",", "last_x", ",", "edge_weight_per_type_per_sent", ",", "cls", ",", "rel", ")", ":", "\n", "        ", "rel", ".", "requires_grad", "=", "False", "\n", "l_last_x", "=", "torch", ".", "matmul", "(", "last_x", ",", "self", ".", "w1", ")", "\n", "x3", "=", "torch", ".", "matmul", "(", "last_x", ",", "self", ".", "w3", ")", "\n", "x1_t", "=", "torch", ".", "zeros", "(", "(", "l_last_x", ".", "size", "(", "0", ")", ",", "l_last_x", ".", "size", "(", "1", ")", ",", "l_last_x", ".", "size", "(", "2", ")", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "\n", "last_node_gate_expand", "=", "last_node_gate", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "last_node_gate", ".", "size", "(", "0", ")", ",", "last_node_gate", ".", "size", "(", "1", ")", ",", "last_node_gate", ".", "size", "(", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nrel_l", ")", ":", "\n", "            ", "adj1_un", "=", "(", "rel", "==", "i", ")", ".", "detach", "(", ")", "\n", "adj1", "=", "adj1_un", ".", "transpose", "(", "2", ",", "1", ")", ".", "float", "(", ")", "\n", "gate_matrix_1", "=", "edge_weight_per_type_per_sent", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "adj1", ".", "size", "(", "0", ")", ",", "\n", "adj1", ".", "size", "(", "1", ")", ",", "\n", "adj1", ".", "size", "(", "2", ")", ")", "\n", "gate_adj1", "=", "gate_matrix_1", "*", "adj1", "\n", "gate_adj1", "=", "gate_adj1", "*", "last_node_gate_expand", "\n", "x1_t", "=", "x1_t", "+", "torch", ".", "bmm", "(", "gate_adj1", ",", "l_last_x", ")", "+", "self", ".", "rel_bias", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "adj1", ".", "size", "(", "0", ")", ",", "\n", "adj1", ".", "size", "(", "1", ")", ",", "\n", "self", ".", "rel_bias", ".", "size", "(", "1", ")", ")", "*", "gate_adj1", ".", "sum", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "adj1", ".", "size", "(", "0", ")", ",", "adj1", ".", "size", "(", "1", ")", ",", "\n", "self", ".", "rel_bias", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "adj3", "=", "torch", ".", "ones", "(", "(", "x3", ".", "size", "(", "0", ")", ",", "x3", ".", "size", "(", "1", ")", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "adj3", "[", "cls", "==", "-", "1", "]", "=", "0.0", "\n", "adj3", "=", "adj3", ".", "unsqueeze", "(", "2", ")", "\n", "adj3_weight", "=", "adj3", "\n", "x3_t", "=", "x3", "*", "adj3_weight", ".", "expand", "(", "adj3", ".", "size", "(", "0", ")", ",", "adj3", ".", "size", "(", "1", ")", ",", "x3", ".", "size", "(", "2", ")", ")", "\n", "\n", "x_new", "=", "F", ".", "relu", "(", "x1_t", "+", "x3_t", ")", "\n", "\n", "# update gate", "\n", "new_gate", "=", "node_weight", "\n", "new_gate_expand", "=", "new_gate", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "x1_t", ".", "size", "(", "2", ")", ")", "\n", "total_gate", "=", "last_node_gate", "+", "new_gate", "\n", "total_gate_expand", "=", "total_gate", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "x1_t", ".", "size", "(", "2", ")", ")", "\n", "x_combine", "=", "new_gate_expand", "*", "x_new", "+", "last_node_gate", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "last_x", ".", "size", "(", "2", ")", ")", "*", "last_x", "\n", "x_combine", "[", "total_gate_expand", "!=", "0", "]", "=", "x_combine", "[", "total_gate_expand", "!=", "0", "]", "/", "total_gate_expand", "[", "total_gate_expand", "!=", "0", "]", "\n", "\n", "return", "total_gate", ",", "x_combine", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.dga_models.one_step.GraphR.go_node": [[151, 153], ["None"], "methods", ["None"], ["", "def", "go_node", "(", "self", ",", "node_weight", ",", "x_ini", ")", ":", "\n", "        ", "return", "node_weight", ",", "x_ini", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.dga_models.one_step.GraphR.__repr__": [[154, 158], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "'->'", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.model_utils.NormalizeScale.__init__": [[8, 12], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "init_norm", "=", "20", ")", ":", "\n", "        ", "super", "(", "NormalizeScale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "init_norm", "=", "init_norm", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "dim", ")", "*", "init_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.model_utils.NormalizeScale.forward": [[13, 17], ["torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "bottom", ")", ":", "\n", "        ", "bottom_normalized", "=", "F", ".", "normalize", "(", "bottom", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "bottom_normalized_scaled", "=", "bottom_normalized", "*", "self", ".", "weight", "\n", "return", "bottom_normalized_scaled", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.model_utils.clip_gradient": [[19, 24], ["param.grad.data.clamp_"], "function", ["None"], ["", "", "def", "clip_gradient", "(", "optimizer", ",", "grad_clip", ")", ":", "\n", "    ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "for", "param", "in", "group", "[", "'params'", "]", ":", "\n", "            ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                ", "param", ".", "grad", ".", "data", ".", "clamp_", "(", "-", "grad_clip", ",", "grad_clip", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.modules.AttendRelationModule.__init__": [[10, 16], ["torch.Module.__init__", "model_utils.NormalizeScale", "model_utils.NormalizeScale", "torch.Linear", "torch.Linear", "torch.Linear", "modules.RelationMatching"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_vis_feat", ",", "visual_init_norm", ",", "jemb_dim", ",", "dim_lang_feat", ",", "jemb_dropout", ")", ":", "\n", "        ", "super", "(", "AttendRelationModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vis_feat_normalizer", "=", "NormalizeScale", "(", "dim_vis_feat", ",", "visual_init_norm", ")", "\n", "self", ".", "lfeat_normalizer", "=", "NormalizeScale", "(", "5", ",", "visual_init_norm", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "dim_vis_feat", "+", "5", ",", "jemb_dim", ")", "\n", "self", ".", "matching", "=", "RelationMatching", "(", "jemb_dim", ",", "dim_lang_feat", ",", "jemb_dim", ",", "jemb_dropout", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.modules.AttendRelationModule.forward": [[17, 35], ["modules.AttendRelationModule.vis_feat_normalizer", "modules.AttendRelationModule.lfeat_normalizer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modules.AttendRelationModule.fc", "rel_feats.view.view.view", "modules.AttendRelationModule.matching", "modules.AttendRelationModule.size", "modules.AttendRelationModule.size", "modules.AttendRelationModule.size", "modules.AttendRelationModule.view", "modules.AttendRelationModule.view", "modules.AttendRelationModule.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "cxt_feats", ",", "cxt_lfeats", ",", "lang_feats", ")", ":", "\n", "# cxt_feats: (bs, n, num_cxt, dim_vis_feat); cxt_lfeats: (bs, n, num_cxt, 5); lang_feats: (bs, num_seq, dim_lang)", "\n", "# compute masks first", "\n", "        ", "masks", "=", "(", "cxt_lfeats", ".", "sum", "(", "3", ")", "!=", "0", ")", ".", "float", "(", ")", "# bs, n, num_cxt", "\n", "\n", "# compute joint encoded context", "\n", "batch", ",", "n", ",", "num_cxt", "=", "cxt_feats", ".", "size", "(", "0", ")", ",", "cxt_feats", ".", "size", "(", "1", ")", ",", "cxt_feats", ".", "size", "(", "2", ")", "\n", "cxt_feats", "=", "self", ".", "vis_feat_normalizer", "(", "cxt_feats", ".", "view", "(", "batch", "*", "n", "*", "num_cxt", ",", "-", "1", ")", ")", "\n", "cxt_lfeats", "=", "self", ".", "lfeat_normalizer", "(", "cxt_lfeats", ".", "view", "(", "batch", "*", "n", "*", "num_cxt", ",", "-", "1", ")", ")", "\n", "\n", "# joint embed", "\n", "concat", "=", "torch", ".", "cat", "(", "[", "cxt_feats", ",", "cxt_lfeats", "]", ",", "1", ")", "\n", "rel_feats", "=", "self", ".", "fc", "(", "concat", ")", "\n", "rel_feats", "=", "rel_feats", ".", "view", "(", "batch", ",", "n", ",", "num_cxt", ",", "-", "1", ")", "# bs, n, 10, jemb_dim", "\n", "\n", "attn", "=", "self", ".", "matching", "(", "rel_feats", ",", "lang_feats", ",", "masks", ")", "\n", "\n", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.modules.RelationMatching.__init__": [[38, 53], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vis_dim", ",", "lang_dim", ",", "jemb_dim", ",", "jemb_dropout", ",", "min_value", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "RelationMatching", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vis_emb_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "vis_dim", ",", "jemb_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "jemb_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "jemb_dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "jemb_dim", ",", "jemb_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "jemb_dim", ")", ")", "\n", "self", ".", "lang_emb_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "lang_dim", ",", "jemb_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "jemb_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "jemb_dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "jemb_dim", ",", "jemb_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "jemb_dim", ")", ")", "\n", "self", ".", "min_value", "=", "min_value", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.modules.RelationMatching.forward": [[54, 80], ["lang_input.size", "modules.RelationMatching.vis_emb_fc", "modules.RelationMatching.lang_emb_fc", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "vis_emb_normalized.view.view.view", "lang_emb_normalized.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.relu.view", "masks.unsqueeze().expand", "torch.relu", "torch.relu", "torch.relu", "vis_input.size", "vis_input.size", "vis_input.size", "vis_input.view", "lang_input.view", "vis_emb_normalized.view.view.view().transpose", "masks.unsqueeze", "vis_emb_normalized.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "vis_input", ",", "lang_input", ",", "masks", ")", ":", "\n", "# vis_input: (bs, n, num_cxt, vim_dim); lang_input: (bs, num_seq, lang_dim);  mask(bs, n, num_cxt)", "\n", "        ", "bs", ",", "n", ",", "num_cxt", "=", "vis_input", ".", "size", "(", "0", ")", ",", "vis_input", ".", "size", "(", "1", ")", ",", "vis_input", ".", "size", "(", "2", ")", "\n", "num_seq", "=", "lang_input", ".", "size", "(", "1", ")", "\n", "vis_emb", "=", "self", ".", "vis_emb_fc", "(", "vis_input", ".", "view", "(", "bs", "*", "n", "*", "num_cxt", ",", "-", "1", ")", ")", "\n", "lang_emb", "=", "self", ".", "lang_emb_fc", "(", "lang_input", ".", "view", "(", "bs", "*", "num_seq", ",", "-", "1", ")", ")", "\n", "\n", "# l2-normalize", "\n", "vis_emb_normalized", "=", "F", ".", "normalize", "(", "vis_emb", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "lang_emb_normalized", "=", "F", ".", "normalize", "(", "lang_emb", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "vis_emb_normalized", "=", "vis_emb_normalized", ".", "view", "(", "bs", ",", "n", ",", "num_cxt", ",", "-", "1", ")", "\n", "lang_emb_normalized", "=", "lang_emb_normalized", ".", "view", "(", "bs", ",", "num_seq", ",", "-", "1", ")", "\n", "\n", "# compute cossim", "\n", "cossim", "=", "torch", ".", "bmm", "(", "lang_emb_normalized", ",", "\n", "vis_emb_normalized", ".", "view", "(", "bs", ",", "n", "*", "num_cxt", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "# bs, num_seq, n*num_cxt", "\n", "cossim", "=", "cossim", ".", "view", "(", "bs", ",", "num_seq", ",", "n", ",", "num_cxt", ")", "\n", "\n", "# mask cossim", "\n", "mask_expand", "=", "masks", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bs", ",", "num_seq", ",", "n", ",", "num_cxt", ")", "\n", "cossim", "=", "mask_expand", "*", "cossim", "\n", "cossim", "[", "mask_expand", "==", "0", "]", "=", "self", ".", "min_value", "\n", "\n", "cossim", "=", "F", ".", "relu", "(", "cossim", ")", "\n", "\n", "return", "cossim", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.modules.AttendLocationModule.__init__": [[83, 88], ["torch.Module.__init__", "model_utils.NormalizeScale", "torch.Linear", "torch.Linear", "torch.Linear", "modules.Matching"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "visual_init_norm", ",", "jemb_dim", ",", "dim_lang_feat", ",", "jemb_dropout", ")", ":", "\n", "        ", "super", "(", "AttendLocationModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lfeat_normalizer", "=", "NormalizeScale", "(", "5", ",", "visual_init_norm", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "5", ",", "jemb_dim", ")", "\n", "self", ".", "matching", "=", "Matching", "(", "jemb_dim", ",", "dim_lang_feat", ",", "jemb_dim", ",", "jemb_dropout", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.modules.AttendLocationModule.forward": [[89, 98], ["modules.AttendLocationModule.lfeat_normalizer", "modules.AttendLocationModule.fc().view", "modules.AttendLocationModule.matching", "modules.AttendLocationModule.size", "modules.AttendLocationModule.size", "modules.AttendLocationModule.view", "modules.AttendLocationModule.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "lfeats", ",", "lang_feats", ",", "cls", ")", ":", "\n", "# lfeats: (bs, n, 5); lang_feats: (bs, num_seq, dim_lang_feat)", "\n", "        ", "bs", ",", "n", "=", "lfeats", ".", "size", "(", "0", ")", ",", "lfeats", ".", "size", "(", "1", ")", "\n", "\n", "lfeats", "=", "self", ".", "lfeat_normalizer", "(", "lfeats", ".", "view", "(", "bs", "*", "n", ",", "-", "1", ")", ")", "\n", "loc_feats", "=", "self", ".", "fc", "(", "lfeats", ")", ".", "view", "(", "bs", ",", "n", ",", "-", "1", ")", "\n", "attn", "=", "self", ".", "matching", "(", "loc_feats", ",", "lang_feats", ",", "(", "cls", "!=", "-", "1", ")", ".", "float", "(", ")", ")", "\n", "\n", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.modules.AttendNodeModule.__init__": [[101, 105], ["torch.Module.__init__", "modules.Matching", "model_utils.NormalizeScale"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_vis_feat", ",", "visual_init_norm", ",", "jemb_dim", ",", "dim_lang_feat", ",", "jemb_dropout", ")", ":", "\n", "        ", "super", "(", "AttendNodeModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "matching", "=", "Matching", "(", "dim_vis_feat", ",", "dim_lang_feat", ",", "jemb_dim", ",", "jemb_dropout", ",", "-", "1", ")", "\n", "self", ".", "feat_normalizer", "=", "NormalizeScale", "(", "dim_vis_feat", ",", "visual_init_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.modules.AttendNodeModule.forward": [[106, 113], ["modules.AttendNodeModule.feat_normalizer().view", "modules.AttendNodeModule.matching", "modules.AttendNodeModule.size", "modules.AttendNodeModule.size", "modules.AttendNodeModule.feat_normalizer", "modules.AttendNodeModule.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "vis_feats", ",", "lang_feats", ",", "cls", ")", ":", "\n", "        ", "bs", ",", "n", "=", "vis_feats", ".", "size", "(", "0", ")", ",", "vis_feats", ".", "size", "(", "1", ")", "\n", "vis_feats", "=", "self", ".", "feat_normalizer", "(", "vis_feats", ".", "view", "(", "bs", "*", "n", ",", "-", "1", ")", ")", ".", "view", "(", "bs", ",", "n", ",", "-", "1", ")", "\n", "\n", "attn", "=", "self", ".", "matching", "(", "vis_feats", ",", "lang_feats", ",", "(", "cls", "!=", "-", "1", ")", ".", "float", "(", ")", ")", "\n", "\n", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.modules.Matching.__init__": [[116, 131], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vis_dim", ",", "lang_dim", ",", "jemb_dim", ",", "jemb_dropout", ",", "min_value", ")", ":", "\n", "        ", "super", "(", "Matching", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vis_emb_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "vis_dim", ",", "jemb_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "jemb_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "jemb_dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "jemb_dim", ",", "jemb_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "jemb_dim", ")", ")", "\n", "self", ".", "lang_emb_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "lang_dim", ",", "jemb_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "jemb_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "jemb_dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "jemb_dim", ",", "jemb_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "jemb_dim", ")", ")", "\n", "self", ".", "min_value", "=", "min_value", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.modules.Matching.forward": [[132, 150], ["lang_input.size", "modules.Matching.vis_emb_fc", "modules.Matching.lang_emb_fc", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "vis_emb_normalized.view.view.view", "lang_emb_normalized.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "mask.unsqueeze().expand().float", "vis_input.size", "vis_input.size", "vis_input.view", "lang_input.view", "vis_emb_normalized.view.view.transpose", "mask.unsqueeze().expand", "mask.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "vis_input", ",", "lang_input", ",", "mask", ")", ":", "\n", "# vis_input (bs, n, vis_dim); lang_input (bs, num_seq, lang_dim); mask (bs, n)", "\n", "        ", "bs", ",", "n", "=", "vis_input", ".", "size", "(", "0", ")", ",", "vis_input", ".", "size", "(", "1", ")", "\n", "num_seq", "=", "lang_input", ".", "size", "(", "1", ")", "\n", "vis_emb", "=", "self", ".", "vis_emb_fc", "(", "vis_input", ".", "view", "(", "bs", "*", "n", ",", "-", "1", ")", ")", "\n", "lang_emb", "=", "self", ".", "lang_emb_fc", "(", "lang_input", ".", "view", "(", "bs", "*", "num_seq", ",", "-", "1", ")", ")", "\n", "\n", "vis_emb_normalized", "=", "F", ".", "normalize", "(", "vis_emb", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "lang_emb_normalized", "=", "F", ".", "normalize", "(", "lang_emb", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "vis_emb_normalized", "=", "vis_emb_normalized", ".", "view", "(", "bs", ",", "n", ",", "-", "1", ")", "\n", "lang_emb_normalized", "=", "lang_emb_normalized", ".", "view", "(", "bs", ",", "num_seq", ",", "-", "1", ")", "\n", "\n", "cossim", "=", "torch", ".", "bmm", "(", "lang_emb_normalized", ",", "vis_emb_normalized", ".", "transpose", "(", "1", ",", "2", ")", ")", "# bs, num_seq, n", "\n", "mask_expand", "=", "mask", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bs", ",", "num_seq", ",", "n", ")", ".", "float", "(", ")", "\n", "cossim", "=", "cossim", "*", "mask_expand", "\n", "cossim", "[", "mask_expand", "==", "0", "]", "=", "self", ".", "min_value", "\n", "\n", "return", "cossim", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.modules.MergeModule.__init__": [[153, 158], ["torch.Module.__init__", "modules.NormAttnMap"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_type", "=", "'cossim'", ",", "need_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "MergeModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_type", "\n", "self", ".", "need_norm", "=", "need_norm", "\n", "self", ".", "norm_fun", "=", "NormAttnMap", "(", "norm_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.modules.MergeModule.forward": [[159, 174], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "global_sub_attn_maps.size", "global_sub_attn_maps.size", "global_sub_attn_maps.size", "modules.MergeModule.norm_fun"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "attn_map", ",", "global_sub_attn_maps", ",", "global_obj_attn_maps", ",", "mask_sub", ",", "mask_obj", ")", ":", "\n", "# attn_map(bs, n); global_attn_maps(bs, num_seq, n); mask(bs, num_seq)", "\n", "        ", "bs", ",", "num_seq", ",", "n", "=", "global_sub_attn_maps", ".", "size", "(", "0", ")", ",", "global_sub_attn_maps", ".", "size", "(", "1", ")", ",", "global_sub_attn_maps", ".", "size", "(", "2", ")", "\n", "\n", "mask_sub_expand", "=", "(", "mask_sub", "==", "1", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "bs", ",", "num_seq", ",", "n", ")", "\n", "sub_attn_map_sum", "=", "torch", ".", "sum", "(", "mask_sub_expand", "*", "global_sub_attn_maps", ",", "dim", "=", "1", ")", "\n", "mask_obj_expand", "=", "(", "mask_obj", "==", "1", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "bs", ",", "num_seq", ",", "n", ")", "\n", "obj_attn_map_sum", "=", "torch", ".", "sum", "(", "mask_obj_expand", "*", "global_obj_attn_maps", ",", "dim", "=", "1", ")", "\n", "attn_map_sum", "=", "sub_attn_map_sum", "+", "obj_attn_map_sum", "+", "attn_map", "\n", "if", "self", ".", "need_norm", ":", "\n", "            ", "attn", ",", "norm", "=", "self", ".", "norm_fun", "(", "attn_map_sum", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "attn_map_sum", "\n", "\n", "", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.modules.TransferModule.__init__": [[177, 182], ["torch.Module.__init__", "modules.NormAttnMap"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_type", "=", "'cossim'", ",", "need_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "TransferModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_type", "\n", "self", ".", "need_norm", "=", "need_norm", "\n", "self", ".", "norm_fun", "=", "NormAttnMap", "(", "norm_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.modules.TransferModule.forward": [[183, 227], ["global_sub_attn_maps.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.unsqueeze().expand", "torch.sum.unsqueeze().expand", "torch.sum.unsqueeze().expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.unsqueeze().expand", "torch.sum.unsqueeze().expand", "torch.sum.unsqueeze().expand", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "offset_idx.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "select_attn.view.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "attn_relation.size", "attn_relation.size", "attn_relation.size", "modules.TransferModule.norm_fun", "son_map.view", "select_idx.view", "modules.TransferModule.norm_fun", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "offset_idx.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze", "numpy.array", "offset_idx.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand.unsqueeze", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "attn_relation", ",", "relation_ind", ",", "global_sub_attn_maps", ",", "sub_mask", ",", "global_obj_attn_maps", ",", "obj_mask", ",", "\n", "attn_obj", ")", ":", "\n", "# attn_relation(bs, n, num_cxt), relation_ind(bs, n, num_cxt)", "\n", "# global_attn_maps(bs, num_seq, n), mask(bs, num_seq)", "\n", "        ", "bs", ",", "n", ",", "num_cxt", "=", "attn_relation", ".", "size", "(", "0", ")", ",", "attn_relation", ".", "size", "(", "1", ")", ",", "attn_relation", ".", "size", "(", "2", ")", "\n", "num_seq", "=", "global_sub_attn_maps", ".", "size", "(", "1", ")", "\n", "\n", "# first son or no son", "\n", "sub_num_rel", "=", "torch", ".", "sum", "(", "sub_mask", ",", "dim", "=", "1", ")", "\n", "# get sub son attn", "\n", "sub_mask_expand", "=", "(", "sub_mask", "==", "1", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "bs", ",", "num_seq", ",", "n", ")", "\n", "sub_son_map", "=", "torch", ".", "sum", "(", "sub_mask_expand", "*", "global_sub_attn_maps", ",", "dim", "=", "1", ")", "\n", "sub_num_rel_expand", "=", "sub_num_rel", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bs", ",", "n", ")", "\n", "sub_son_map", "[", "sub_num_rel_expand", "==", "0", "]", "=", "0", "# bs, n", "\n", "\n", "# get obj son attn", "\n", "obj_num_rel", "=", "torch", ".", "sum", "(", "obj_mask", ",", "dim", "=", "1", ")", "\n", "obj_mask_expand", "=", "(", "obj_mask", "==", "1", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "bs", ",", "num_seq", ",", "n", ")", "\n", "obj_son_map", "=", "torch", ".", "sum", "(", "obj_mask_expand", "*", "global_obj_attn_maps", ",", "dim", "=", "1", ")", "\n", "obj_num_rel_expand", "=", "obj_num_rel", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bs", ",", "n", ")", "\n", "obj_son_map", "[", "obj_num_rel_expand", "==", "0", "]", "=", "0", "\n", "\n", "#total son", "\n", "son_map", "=", "sub_son_map", "+", "obj_son_map", "\n", "num_rel_expand", "=", "sub_num_rel_expand", "+", "obj_num_rel_expand", "\n", "if", "self", ".", "need_norm", ":", "\n", "            ", "son_map", ",", "norm", "=", "self", ".", "norm_fun", "(", "son_map", ")", "\n", "", "son_map", "=", "son_map", "*", "(", "num_rel_expand", "!=", "0", ")", ".", "float", "(", ")", "+", "attn_obj", "*", "(", "num_rel_expand", "==", "0", ")", ".", "float", "(", ")", "\n", "\n", "offset_idx", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "range", "(", "bs", ")", ")", "*", "n", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "offset_idx", "=", "offset_idx", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "bs", ",", "n", ",", "num_cxt", ")", "\n", "select_idx", "=", "(", "relation_ind", "!=", "-", "1", ")", ".", "long", "(", ")", "*", "relation_ind", "+", "offset_idx", "\n", "select_attn", "=", "torch", ".", "index_select", "(", "son_map", ".", "view", "(", "bs", "*", "n", ",", "1", ")", ",", "0", ",", "select_idx", ".", "view", "(", "-", "1", ")", ")", "\n", "select_attn", "=", "select_attn", ".", "view", "(", "bs", ",", "n", ",", "num_cxt", ")", "\n", "select_attn", "=", "(", "relation_ind", "!=", "-", "1", ")", ".", "float", "(", ")", "*", "select_attn", "\n", "\n", "attn_map_sum", "=", "torch", ".", "sum", "(", "attn_relation", "*", "select_attn", ",", "dim", "=", "2", ")", "\n", "\n", "if", "self", ".", "need_norm", ":", "\n", "            ", "attn", ",", "norm", "=", "self", ".", "norm_fun", "(", "attn_map_sum", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "attn_map_sum", "\n", "\n", "", "return", "attn", ",", "son_map", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.modules.NormAttnMap.__init__": [[230, 233], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_type", "=", "'cossim'", ")", ":", "\n", "        ", "super", "(", "NormAttnMap", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_type", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.modules.NormAttnMap.forward": [[234, 243], ["[].detach", "[].detach", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "attn_map", ")", ":", "\n", "        ", "if", "self", ".", "norm_type", "!=", "'cosssim'", ":", "\n", "            ", "norm", "=", "torch", ".", "max", "(", "attn_map", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "norm", "=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "attn_map", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "", "norm", "[", "norm", "<=", "1", "]", "=", "1", "\n", "attn", "=", "attn_map", "/", "norm", "\n", "\n", "return", "attn", ",", "norm", "", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.language.RNNEncoder.__init__": [[9, 25], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "numpy.load", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.Embedding", "torch.Embedding", "torch.Embedding", "getattr", "utils.to_torch().cuda", "rnn_type.upper", "utils.to_torch"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_torch"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "word_embedding_size", ",", "hidden_size", ",", "bidirectional", "=", "False", ",", "\n", "input_dropout_p", "=", "0", ",", "dropout_p", "=", "0", ",", "n_layers", "=", "1", ",", "rnn_type", "=", "'lstm'", ",", "variable_lengths", "=", "True", ",", "pretrain", "=", "False", ")", ":", "\n", "        ", "super", "(", "RNNEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "variable_lengths", "=", "variable_lengths", "\n", "if", "pretrain", "is", "True", ":", "\n", "            ", "embedding_mat", "=", "np", ".", "load", "(", "'./data/word_embedding/embed_matrix.npy'", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "to_torch", "(", "embedding_mat", ")", ".", "cuda", "(", ")", ",", "freeze", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "word_embedding_size", ")", "\n", "", "self", ".", "input_dropout", "=", "nn", ".", "Dropout", "(", "input_dropout_p", ")", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "self", ".", "rnn", "=", "getattr", "(", "nn", ",", "rnn_type", ".", "upper", "(", ")", ")", "(", "word_embedding_size", ",", "hidden_size", ",", "n_layers", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "bidirectional", ",", "\n", "dropout", "=", "dropout_p", ")", "\n", "self", ".", "num_dirs", "=", "2", "if", "bidirectional", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.language.RNNEncoder.forward": [[26, 74], ["language.RNNEncoder.embedding", "language.RNNEncoder.input_dropout", "language.RNNEncoder.rnn", "utils.to_numpy().tolist", "[].tolist", "[].tolist", "input_labels[].long().cuda.data.new().long().cuda", "input_labels[].long().cuda.data.new().long().cuda", "input_labels[].long().cuda", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "hidden.view.view.transpose().contiguous", "hidden.view.view.view", "max", "input_labels[].long().cuda.size", "hidden.view.view.size", "utils.to_numpy", "enumerate", "range", "input_labels[].long().cuda.data.new().long", "input_labels[].long().cuda.data.new().long", "input_labels[].long", "hidden.view.view.transpose", "numpy.sort", "numpy.argsort", "len", "input_labels[].long().cuda.data.new", "input_labels[].long().cuda.data.new"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy"], ["", "def", "forward", "(", "self", ",", "input_labels", ")", ":", "\n", "        ", "if", "self", ".", "variable_lengths", ":", "\n", "            ", "input_lengths", "=", "(", "input_labels", "!=", "0", ")", ".", "sum", "(", "1", ")", "\n", "\n", "# make ixs", "\n", "input_lengths_list", "=", "to_numpy", "(", "input_lengths", ")", ".", "tolist", "(", ")", "\n", "sorted_input_lengths_list", "=", "np", ".", "sort", "(", "input_lengths_list", ")", "[", ":", ":", "-", "1", "]", ".", "tolist", "(", ")", "\n", "max_length", "=", "sorted_input_lengths_list", "[", "0", "]", "\n", "sort_ixs", "=", "np", ".", "argsort", "(", "input_lengths_list", ")", "[", ":", ":", "-", "1", "]", ".", "tolist", "(", ")", "\n", "s2r", "=", "{", "s", ":", "r", "for", "r", ",", "s", "in", "enumerate", "(", "sort_ixs", ")", "}", "\n", "recover_ixs", "=", "[", "s2r", "[", "s", "]", "for", "s", "in", "range", "(", "len", "(", "input_lengths_list", ")", ")", "]", "\n", "\n", "# move to long tensor", "\n", "sort_ixs", "=", "input_labels", ".", "data", ".", "new", "(", "sort_ixs", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "recover_ixs", "=", "input_labels", ".", "data", ".", "new", "(", "recover_ixs", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# sort input_labels by descending order", "\n", "input_labels", "=", "input_labels", "[", "sort_ixs", ",", "0", ":", "max_length", "]", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "assert", "max", "(", "input_lengths_list", ")", "==", "input_labels", ".", "size", "(", "1", ")", "\n", "\n", "# embed", "\n", "", "embedded", "=", "self", ".", "embedding", "(", "input_labels", ")", "\n", "embedded", "=", "self", ".", "input_dropout", "(", "embedded", ")", "\n", "if", "self", ".", "variable_lengths", ":", "\n", "            ", "embedded", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "embedded", ",", "sorted_input_lengths_list", ",", "batch_first", "=", "True", ")", "\n", "\n", "# forward rnn", "\n", "", "output", ",", "hidden", "=", "self", ".", "rnn", "(", "embedded", ")", "\n", "\n", "# recover", "\n", "if", "self", ".", "variable_lengths", ":", "\n", "\n", "# embedded (batch, seq_len, word_embedding_size)", "\n", "            ", "embedded", ",", "_", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "embedded", ",", "batch_first", "=", "True", ")", "\n", "embedded", "=", "embedded", "[", "recover_ixs", "]", "\n", "\n", "# recover rnn", "\n", "output", ",", "_", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "output", ",", "batch_first", "=", "True", ")", "# (batch, max_len, hidden)", "\n", "output", "=", "output", "[", "recover_ixs", "]", "\n", "\n", "# recover hidden", "\n", "if", "self", ".", "rnn_type", "==", "'lstm'", ":", "\n", "                ", "hidden", "=", "hidden", "[", "0", "]", "\n", "", "hidden", "=", "hidden", "[", ":", ",", "recover_ixs", ",", ":", "]", "\n", "hidden", "=", "hidden", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "hidden", "=", "hidden", ".", "view", "(", "hidden", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "", "return", "output", ",", "hidden", ",", "embedded", ",", "max_length", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.language.ModuleInputAttention.__init__": [[77, 80], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", "ModuleInputAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "input_dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.language.ModuleInputAttention.forward": [[81, 105], ["context.view.view.view", "embedded.view.view.view", "input_labels.view.view.view", "language.ModuleInputAttention.fc().squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.sum().unsqueeze().expand", "torch.softmax.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "weighted_emb.view.view.squeeze", "weighted_emb.view.view.view", "context.view.view.size", "context.view.view.size", "context.view.view.size", "torch.softmax.size", "torch.softmax.size", "language.ModuleInputAttention.fc", "torch.softmax.sum().unsqueeze", "torch.softmax.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "context", ",", "embedded", ",", "input_labels", ")", ":", "\n", "# context(bs, num_seq, max_length, dim_cxt); input_labels(bs, num_seq, max_length)", "\n", "        ", "bs", ",", "num_seq", ",", "max_length", "=", "context", ".", "size", "(", "0", ")", ",", "context", ".", "size", "(", "1", ")", ",", "context", ".", "size", "(", "2", ")", "\n", "context", "=", "context", ".", "view", "(", "bs", "*", "num_seq", ",", "max_length", ",", "-", "1", ")", "\n", "embedded", "=", "embedded", ".", "view", "(", "bs", "*", "num_seq", ",", "max_length", ",", "-", "1", ")", "\n", "input_labels", "=", "input_labels", ".", "view", "(", "bs", "*", "num_seq", ",", "max_length", ")", "\n", "\n", "cxt_scores", "=", "self", ".", "fc", "(", "context", ")", ".", "squeeze", "(", "2", ")", "\n", "attn", "=", "F", ".", "softmax", "(", "cxt_scores", ",", "dim", "=", "1", ")", "\n", "\n", "# mask zeros", "\n", "is_not_zero", "=", "(", "input_labels", "!=", "0", ")", ".", "float", "(", ")", "\n", "attn", "=", "attn", "*", "is_not_zero", "\n", "attn_sum", "=", "attn", ".", "sum", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "attn", ".", "size", "(", "0", ")", ",", "attn", ".", "size", "(", "1", ")", ")", "\n", "attn", "[", "attn_sum", "!=", "0", "]", "=", "attn", "[", "attn_sum", "!=", "0", "]", "/", "attn_sum", "[", "attn_sum", "!=", "0", "]", "\n", "\n", "# compute weighted embedding", "\n", "attn3", "=", "attn", ".", "unsqueeze", "(", "1", ")", "\n", "weighted_emb", "=", "torch", ".", "bmm", "(", "attn3", ",", "embedded", ")", "\n", "weighted_emb", "=", "weighted_emb", ".", "squeeze", "(", "1", ")", "\n", "\n", "weighted_emb", "=", "weighted_emb", ".", "view", "(", "bs", ",", "num_seq", ",", "-", "1", ")", "\n", "\n", "return", "weighted_emb", ",", "attn", "", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.scene_graph_reasoning.SGReason.__init__": [[12, 53], ["torch.Module.__init__", "models.language.RNNEncoder", "torch.Sequential", "torch.Sequential", "models.language.ModuleInputAttention", "models.language.ModuleInputAttention", "models.language.ModuleInputAttention", "models.language.ModuleInputAttention", "models.modules.AttendNodeModule", "models.modules.AttendRelationModule", "models.modules.AttendLocationModule", "models.modules.MergeModule", "models.modules.TransferModule", "models.modules.NormAttnMap", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "SGReason", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# language", "\n", "self", ".", "seq_encoder", "=", "RNNEncoder", "(", "vocab_size", "=", "opt", "[", "'vocab_size'", "]", ",", "\n", "word_embedding_size", "=", "opt", "[", "'word_embedding_size'", "]", ",", "\n", "hidden_size", "=", "opt", "[", "'rnn_hidden_size'", "]", ",", "\n", "bidirectional", "=", "opt", "[", "'bidirectional'", "]", ">", "0", ",", "\n", "input_dropout_p", "=", "opt", "[", "'word_drop_out'", "]", ",", "\n", "dropout_p", "=", "opt", "[", "'rnn_drop_out'", "]", ",", "\n", "n_layers", "=", "opt", "[", "'rnn_num_layers'", "]", ",", "\n", "rnn_type", "=", "opt", "[", "'rnn_type'", "]", ",", "\n", "variable_lengths", "=", "opt", "[", "'variable_lengths'", "]", ">", "0", ",", "\n", "pretrain", "=", "True", ")", "\n", "dim_word_emb", "=", "opt", "[", "'word_embedding_size'", "]", "\n", "dim_word_cxt", "=", "opt", "[", "'rnn_hidden_size'", "]", "*", "(", "2", "if", "opt", "[", "'bidirectional'", "]", "else", "1", ")", "\n", "# judge module weight for seq (node, relation, location)", "\n", "self", ".", "weight_module_spo", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_word_cxt", ",", "3", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "# module input attention", "\n", "self", ".", "node_input_encoder", "=", "ModuleInputAttention", "(", "dim_word_cxt", ")", "\n", "self", ".", "relation_input_encoder", "=", "ModuleInputAttention", "(", "dim_word_cxt", ")", "\n", "self", ".", "location_input_encoder", "=", "ModuleInputAttention", "(", "dim_word_cxt", ")", "\n", "self", ".", "obj_input_encoder", "=", "ModuleInputAttention", "(", "dim_word_cxt", ")", "\n", "\n", "dim_vis_feat", "=", "opt", "[", "'dim_input_vis_feat'", "]", "\n", "# module", "\n", "self", ".", "node_module", "=", "AttendNodeModule", "(", "dim_vis_feat", ",", "opt", "[", "'vis_init_norm'", "]", ",", "opt", "[", "'jemb_dim'", "]", ",", "\n", "dim_word_emb", ",", "opt", "[", "'jemb_drop_out'", "]", ")", "\n", "self", ".", "relation_module", "=", "AttendRelationModule", "(", "dim_vis_feat", ",", "opt", "[", "'vis_init_norm'", "]", ",", "opt", "[", "'jemb_dim'", "]", ",", "\n", "dim_word_emb", ",", "opt", "[", "'jemb_drop_out'", "]", ")", "\n", "self", ".", "location_module", "=", "AttendLocationModule", "(", "opt", "[", "'vis_init_norm'", "]", ",", "opt", "[", "'jemb_dim'", "]", ",", "\n", "dim_word_emb", ",", "opt", "[", "'jemb_drop_out'", "]", ")", "\n", "\n", "self", ".", "min_value", ",", "self", ".", "max_value", "=", "-", "1", ",", "1", "\n", "self", ".", "sum_module", "=", "MergeModule", "(", ")", "\n", "self", ".", "sum_relation_module", "=", "TransferModule", "(", ")", "\n", "self", ".", "elimination", "=", "opt", "[", "'elimination'", "]", "\n", "self", ".", "norm_fun", "=", "NormAttnMap", "(", ")", "\n", "\n", "self", ".", "need_location", "=", "False", "# expressions in Ref-Reasoning do not describe the absolute location", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.scene_graph_reasoning.SGReason.forward": [[54, 159], ["feature.size", "cxt_idx.size", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "offset_idx.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "scene_graph_reasoning.SGReason.seq_encoder", "context.view.view.view", "hidden.view.view.view", "embeded.view.view.view", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.max", "torch.max", "torch.max", "torch.max", "scene_graph_reasoning.SGReason.weight_module_spo", "scene_graph_reasoning.SGReason.unsqueeze().expand", "scene_graph_reasoning.SGReason.node_input_encoder", "scene_graph_reasoning.SGReason.node_module", "scene_graph_reasoning.SGReason.relation_input_encoder", "scene_graph_reasoning.SGReason.relation_module", "scene_graph_reasoning.SGReason.location_input_encoder", "scene_graph_reasoning.SGReason.location_module", "scene_graph_reasoning.SGReason.obj_input_encoder", "scene_graph_reasoning.SGReason.node_module", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "range", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "seq.size", "seq.size", "feature.view", "torch.index_select.view", "torch.index_select.view", "cxt_idx_mask.unsqueeze().float", "seq.view", "torch.zeros().float().cuda.clone", "torch.zeros().float().cuda.clone", "torch.zeros().float().cuda.clone", "torch.zeros().float().cuda.clone", "scene_graph_reasoning.SGReason.sum_relation_module", "scene_graph_reasoning.SGReason.sum_module", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "offset_idx.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "scene_graph_reasoning.SGReason.unsqueeze", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "scene_graph_reasoning.SGReason.norm_fun", "scene_graph_reasoning.SGReason.norm_fun", "scene_graph_reasoning.SGReason.norm_fun", "scene_graph_reasoning.SGReason.norm_fun", "scene_graph_reasoning.SGReason.norm_fun", "scene_graph_reasoning.SGReason.norm_fun", "cxt_idx_mask.unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "offset_idx.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.array", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature", ",", "cls", ",", "lfeat", ",", "\n", "seq", ",", "seq_weight", ",", "seq_type", ",", "seq_rel", ",", "com_mask", ",", "\n", "cxt_idx", ",", "cxt_idx_mask", ",", "cxt_lfeats", ")", ":", "\n", "        ", "''' language seq: seq(bs, num_seq, len_sent); seq_type(bs, num_seq){-1: None, 0: SPO, 1: S, 2:ALL};\n                          seq_rel(bs, num_seq, num_seq){-1:None, 0:SS, 1:SO, 2:OS, 3:OO}\n        '''", "\n", "bs", ",", "num_seq", "=", "seq", ".", "size", "(", "0", ")", ",", "seq", ".", "size", "(", "1", ")", "\n", "n", "=", "feature", ".", "size", "(", "1", ")", "\n", "\n", "# cxt_feats (bs, n, 5, dim_feat)", "\n", "num_cxt", "=", "cxt_idx", ".", "size", "(", "2", ")", "\n", "offset_idx", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "range", "(", "bs", ")", ")", "*", "n", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ".", "long", "(", ")", "\n", "offset_idx", "=", "offset_idx", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "bs", ",", "n", ",", "num_cxt", ")", "\n", "cxt_feats", "=", "torch", ".", "index_select", "(", "feature", ".", "view", "(", "bs", "*", "n", ",", "-", "1", ")", ",", "0", ",", "(", "offset_idx", "+", "cxt_idx", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "cxt_feats", "=", "cxt_feats", ".", "view", "(", "bs", ",", "n", ",", "num_cxt", ",", "-", "1", ")", "*", "cxt_idx_mask", ".", "unsqueeze", "(", "3", ")", ".", "float", "(", ")", "\n", "\n", "context", ",", "hidden", ",", "embeded", ",", "max_length", "=", "self", ".", "seq_encoder", "(", "seq", ".", "view", "(", "bs", "*", "num_seq", ",", "-", "1", ")", ")", "\n", "seq", "=", "seq", "[", ":", ",", ":", ",", "0", ":", "max_length", "]", "\n", "seq_weight", "=", "seq_weight", "[", ":", ",", ":", ",", "0", ":", "max_length", "]", "\n", "context", "=", "context", ".", "view", "(", "bs", ",", "num_seq", ",", "max_length", ",", "-", "1", ")", "\n", "hidden", "=", "hidden", ".", "view", "(", "bs", ",", "num_seq", ",", "-", "1", ")", "\n", "embeded", "=", "embeded", ".", "view", "(", "bs", ",", "num_seq", ",", "max_length", ",", "-", "1", ")", "\n", "real_num_seq", "=", "torch", ".", "sum", "(", "(", "seq_type", "!=", "-", "1", ")", ".", "float", "(", ")", ",", "dim", "=", "1", ")", ".", "long", "(", ")", "\n", "max_num_seq", "=", "torch", ".", "max", "(", "real_num_seq", ")", "\n", "\n", "# module weights of each seq", "\n", "weights_spo", "=", "self", ".", "weight_module_spo", "(", "hidden", ")", "# bs, num_seq, 3", "\n", "weights_spo_expand", "=", "weights_spo", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "bs", ",", "num_seq", ",", "n", ",", "3", ")", "\n", "\n", "# attn each part", "\n", "if", "self", ".", "elimination", ":", "\n", "            ", "input_labels", "=", "(", "seq", "!=", "0", ")", ".", "float", "(", ")", "*", "(", "seq_weight", "==", "1", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "input_labels", "=", "(", "seq", "!=", "0", ")", ".", "float", "(", ")", "\n", "", "node_input_emb", ",", "node_input_attn", "=", "self", ".", "node_input_encoder", "(", "context", ",", "embeded", ",", "input_labels", ")", "# bs, num_seq, dim_word_embed", "\n", "attn_node", "=", "self", ".", "node_module", "(", "feature", ",", "node_input_emb", ",", "cls", ")", "# bs, num_seq, n", "\n", "relation_input_emb", ",", "relation_input_attn", "=", "self", ".", "relation_input_encoder", "(", "context", ",", "embeded", ",", "input_labels", ")", "# bs, num_seq, dim_word_embed", "\n", "attn_relation", "=", "self", ".", "relation_module", "(", "cxt_feats", ",", "cxt_lfeats", ",", "relation_input_emb", ")", "# bs, num_seq, n, num_cxt", "\n", "location_input_emb", ",", "location_input_attn", "=", "self", ".", "location_input_encoder", "(", "context", ",", "embeded", ",", "input_labels", ")", "\n", "attn_location", "=", "self", ".", "location_module", "(", "lfeat", ",", "location_input_emb", ",", "cls", ")", "# bs, num_seq, n", "\n", "obj_input_emb", ",", "obj_input_attn", "=", "self", ".", "obj_input_encoder", "(", "context", ",", "embeded", ",", "input_labels", ")", "\n", "attn_obj", "=", "self", ".", "node_module", "(", "feature", ",", "obj_input_emb", ",", "cls", ")", "\n", "\n", "global_sub_attn_map", "=", "torch", ".", "zeros", "(", "(", "bs", ",", "num_seq", ",", "n", ")", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "global_obj_attn_map", "=", "torch", ".", "zeros", "(", "(", "bs", ",", "num_seq", ",", "n", ")", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "max_num_seq", ")", ":", "\n", "            ", "clone_global_sub_attn_map", "=", "global_sub_attn_map", ".", "clone", "(", ")", "\n", "clone_global_obj_attn_map", "=", "global_obj_attn_map", ".", "clone", "(", ")", "\n", "# seq type: S", "\n", "s_attn_node_iter", "=", "weights_spo_expand", "[", ":", ",", "i", ",", ":", ",", "0", "]", "*", "attn_node", "[", ":", ",", "i", ",", ":", "]", "\n", "if", "self", ".", "need_location", ":", "\n", "                ", "s_attn_location_iter", "=", "weights_spo_expand", "[", ":", ",", "i", ",", ":", ",", "1", "]", "*", "attn_location", "[", ":", ",", "i", ",", ":", "]", "\n", "s_attn_iter_s", "=", "s_attn_node_iter", "+", "s_attn_location_iter", "\n", "s_attn_iter_o", "=", "s_attn_node_iter", "+", "s_attn_location_iter", "\n", "s_attn_iter_s", ",", "s_attn_iter_s_norm", "=", "self", ".", "norm_fun", "(", "s_attn_iter_s", ")", "\n", "s_attn_iter_o", ",", "s_attn_iter_o_norm", "=", "self", ".", "norm_fun", "(", "s_attn_iter_o", ")", "\n", "", "else", ":", "\n", "                ", "s_attn_iter_s", "=", "s_attn_node_iter", "\n", "s_attn_iter_o", "=", "s_attn_iter_s", "\n", "s_attn_iter_s", ",", "s_attn_iter_s_norm", "=", "self", ".", "norm_fun", "(", "s_attn_iter_s", ")", "\n", "s_attn_iter_o", ",", "s_attn_iter_o_norm", "=", "self", ".", "norm_fun", "(", "s_attn_iter_o", ")", "\n", "\n", "# seq type: SPO", "\n", "", "spo_attn_node_iter", "=", "s_attn_node_iter", "\n", "if", "self", ".", "need_location", ":", "\n", "                ", "spo_attn_location_iter", "=", "s_attn_location_iter", "\n", "", "spo_attn_relation", ",", "spo_attn_obj", "=", "self", ".", "sum_relation_module", "(", "attn_relation", "[", ":", ",", "i", ",", ":", ",", ":", "]", ",", "cxt_idx", ",", "\n", "clone_global_sub_attn_map", ",", "\n", "(", "seq_rel", "[", ":", ",", "i", ",", ":", "]", "==", "2", ")", ".", "float", "(", ")", ",", "\n", "clone_global_obj_attn_map", ",", "\n", "(", "seq_rel", "[", ":", ",", "i", ",", ":", "]", "==", "3", ")", ".", "float", "(", ")", ",", "\n", "attn_obj", "=", "attn_obj", "[", ":", ",", "i", ",", ":", "]", ")", "\n", "\n", "spo_attn_relation_iter", "=", "weights_spo_expand", "[", ":", ",", "i", ",", ":", ",", "2", "]", "*", "spo_attn_relation", "\n", "if", "self", ".", "need_location", ":", "\n", "                ", "spo_attn_iter_s", "=", "spo_attn_node_iter", "+", "spo_attn_location_iter", "+", "spo_attn_relation_iter", "\n", "spo_attn_iter_s", ",", "spo_attn_iter_s_norm", "=", "self", ".", "norm_fun", "(", "spo_attn_iter_s", ")", "\n", "spo_attn_iter_o", "=", "spo_attn_obj", "*", "(", "seq_type", "[", ":", ",", "i", "]", "==", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bs", ",", "n", ")", "\n", "", "else", ":", "\n", "                ", "spo_attn_iter_s", "=", "spo_attn_node_iter", "+", "spo_attn_relation_iter", "\n", "spo_attn_iter_s", ",", "spo_attn_iter_s_norm", "=", "self", ".", "norm_fun", "(", "spo_attn_iter_s", ")", "\n", "spo_attn_iter_o", "=", "spo_attn_obj", "*", "(", "seq_type", "[", ":", ",", "i", "]", "==", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bs", ",", "n", ")", "\n", "\n", "# combine", "\n", "", "seq_type_s_expand", "=", "(", "seq_type", "[", ":", ",", "i", "]", "==", "1", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bs", ",", "n", ")", "\n", "seq_type_spo_expand", "=", "(", "seq_type", "[", ":", ",", "i", "]", "==", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bs", ",", "n", ")", "\n", "attn_iter_s", "=", "s_attn_iter_s", "*", "seq_type_s_expand", "+", "spo_attn_iter_s", "*", "seq_type_spo_expand", "\n", "attn_iter_o", "=", "s_attn_iter_o", "*", "seq_type_s_expand", "+", "spo_attn_iter_o", "*", "seq_type_spo_expand", "\n", "\n", "# after rel with sub", "\n", "attn_iter_s", "=", "self", ".", "sum_module", "(", "attn_iter_s", ",", "clone_global_sub_attn_map", ",", "clone_global_obj_attn_map", ",", "\n", "(", "seq_rel", "[", ":", ",", "i", ",", ":", "]", "==", "0", ")", ".", "float", "(", ")", ",", "(", "seq_rel", "[", ":", ",", "i", ",", ":", "]", "==", "1", ")", ".", "float", "(", ")", ")", "\n", "\n", "attn_iter_s", "[", "(", "seq_type", "[", ":", ",", "i", "]", "==", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bs", ",", "n", ")", "]", "=", "self", ".", "min_value", "\n", "attn_iter_o", "[", "(", "seq_type", "[", ":", ",", "i", "]", "==", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bs", ",", "n", ")", "]", "=", "self", ".", "min_value", "\n", "attn_iter_s", "[", "(", "seq_type", "[", ":", ",", "i", "]", "==", "2", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bs", ",", "n", ")", "]", "=", "0", "\n", "attn_iter_o", "[", "(", "seq_type", "[", ":", ",", "i", "]", "==", "2", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bs", ",", "n", ")", "]", "=", "0", "\n", "\n", "global_sub_attn_map", "[", ":", ",", "i", ",", ":", "]", "=", "attn_iter_s", "\n", "global_obj_attn_map", "[", ":", ",", "i", ",", ":", "]", "=", "attn_iter_o", "\n", "\n", "", "com_mask_expand", "=", "(", "com_mask", "==", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "bs", ",", "num_seq", ",", "n", ")", ".", "float", "(", ")", "\n", "score", "=", "torch", ".", "sum", "(", "com_mask_expand", "*", "global_sub_attn_map", ",", "dim", "=", "1", ")", "\n", "\n", "return", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.model_utils.NormalizeScale.__init__": [[8, 12], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "init_norm", "=", "20", ")", ":", "\n", "        ", "super", "(", "NormalizeScale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "init_norm", "=", "init_norm", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "dim", ")", "*", "init_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.model_utils.NormalizeScale.forward": [[13, 17], ["torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "bottom", ")", ":", "\n", "        ", "bottom_normalized", "=", "F", ".", "normalize", "(", "bottom", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "bottom_normalized_scaled", "=", "bottom_normalized", "*", "self", ".", "weight", "\n", "return", "bottom_normalized_scaled", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.matching.Matching.__init__": [[7, 21], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vis_dim", ",", "lang_dim", ",", "jemb_dim", ",", "jemb_drop_out", ")", ":", "\n", "        ", "super", "(", "Matching", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vis_emb_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "vis_dim", ",", "jemb_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "jemb_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "jemb_drop_out", ")", ",", "\n", "nn", ".", "Linear", "(", "jemb_dim", ",", "jemb_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "jemb_dim", ")", ")", "\n", "self", ".", "lang_emb_fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "lang_dim", ",", "jemb_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "jemb_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "jemb_drop_out", ")", ",", "\n", "nn", ".", "Linear", "(", "jemb_dim", ",", "jemb_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "jemb_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.matching.Matching.forward": [[22, 42], ["visual_input.view", "matching.Matching.vis_emb_fc", "matching.Matching.lang_emb_fc", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize.view", "torch.normalize.unsqueeze().expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "visual_input.size", "lang_input.size", "visual_input.size", "visual_input.size", "torch.normalize.unsqueeze", "visual_input.size", "visual_input.size", "torch.normalize.size", "visual_input.size", "visual_input.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "visual_input", ",", "lang_input", ")", ":", "\n", "\n", "        ", "assert", "visual_input", ".", "size", "(", "0", ")", "==", "lang_input", ".", "size", "(", "0", ")", "\n", "\n", "visual_feat", "=", "visual_input", ".", "view", "(", "(", "visual_input", ".", "size", "(", "0", ")", "*", "visual_input", ".", "size", "(", "1", ")", ",", "-", "1", ")", ")", "\n", "lang_feat", "=", "lang_input", "\n", "visual_emb", "=", "self", ".", "vis_emb_fc", "(", "visual_feat", ")", "\n", "lang_emb", "=", "self", ".", "lang_emb_fc", "(", "lang_feat", ")", "\n", "\n", "# l2-normalize", "\n", "visual_emb_normalized", "=", "F", ".", "normalize", "(", "visual_emb", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "lang_emb_normalized", "=", "F", ".", "normalize", "(", "lang_emb", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "block_visual_emb_normalized", "=", "visual_emb_normalized", ".", "view", "(", "(", "visual_input", ".", "size", "(", "0", ")", ",", "visual_input", ".", "size", "(", "1", ")", ",", "-", "1", ")", ")", "\n", "block_lang_emb_normalized", "=", "lang_emb_normalized", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "(", "visual_input", ".", "size", "(", "0", ")", ",", "\n", "visual_input", ".", "size", "(", "1", ")", ",", "\n", "lang_emb_normalized", ".", "size", "(", "1", ")", ")", ")", "\n", "cossim", "=", "torch", ".", "sum", "(", "block_lang_emb_normalized", "*", "block_visual_emb_normalized", ",", "2", ")", "\n", "\n", "return", "cossim", "", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.gcn_ref_fusion.GCNRefFusion.__init__": [[13, 62], ["torch.Module.__init__", "models.language.RNNEncoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "cmrin_models.model_utils.NormalizeScale", "cmrin_models.model_utils.NormalizeScale", "gcn_ref_fusion.LocationEncoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "gcn_ref_fusion.GCNFusionEncoder", "cmrin_models.matching.Matching", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "GCNRefFusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# language model", "\n", "self", ".", "rnn_encoder", "=", "RNNEncoder", "(", "vocab_size", "=", "opt", "[", "'vocab_size'", "]", ",", "\n", "word_embedding_size", "=", "opt", "[", "'word_embedding_size'", "]", ",", "\n", "hidden_size", "=", "opt", "[", "'rnn_hidden_size'", "]", ",", "\n", "bidirectional", "=", "opt", "[", "'bidirectional'", "]", ">", "0", ",", "\n", "input_dropout_p", "=", "opt", "[", "'word_drop_out'", "]", ",", "\n", "dropout_p", "=", "opt", "[", "'rnn_drop_out'", "]", ",", "\n", "n_layers", "=", "opt", "[", "'rnn_num_layers'", "]", ",", "\n", "rnn_type", "=", "opt", "[", "'rnn_type'", "]", ",", "\n", "variable_lengths", "=", "opt", "[", "'variable_lengths'", "]", ">", "0", ",", "\n", "pretrain", "=", "True", ")", "\n", "dim_word_output", "=", "opt", "[", "'rnn_hidden_size'", "]", "*", "(", "2", "if", "opt", "[", "'bidirectional'", "]", "else", "1", ")", "\n", "num_cls_word", "=", "4", "\n", "self", ".", "word_judge", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_word_output", ",", "opt", "[", "'dim_hidden_word_judge'", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "opt", "[", "'word_judge_drop'", "]", ")", ",", "\n", "nn", ".", "Linear", "(", "opt", "[", "'dim_hidden_word_judge'", "]", ",", "num_cls_word", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", ")", "\n", "\n", "self", ".", "feat_normalizer", "=", "NormalizeScale", "(", "opt", "[", "'dim_input_vis_feat'", "]", ",", "opt", "[", "'vis_init_norm'", "]", ")", "\n", "dim_input_vis_feat", "=", "opt", "[", "'dim_input_vis_feat'", "]", "\n", "self", ".", "word_normalizer", "=", "NormalizeScale", "(", "dim_word_output", ",", "opt", "[", "'word_init_norm'", "]", ")", "\n", "# absolute location", "\n", "self", ".", "locate_encoder", "=", "LocationEncoder", "(", "opt", "[", "'vis_init_norm'", "]", ",", "opt", "[", "'dim_location'", "]", ")", "\n", "\n", "self", ".", "nrel_l", "=", "opt", "[", "'num_location_relation'", "]", "\n", "self", ".", "edge_gate", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_word_output", ",", "opt", "[", "'dim_edge_gate'", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "opt", "[", "'edge_gate_drop_out'", "]", ")", ",", "\n", "nn", ".", "Linear", "(", "opt", "[", "'dim_edge_gate'", "]", ",", "opt", "[", "'num_location_relation'", "]", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", ")", "\n", "self", ".", "node_word_match", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_input_vis_feat", "+", "dim_word_output", ",", "opt", "[", "'dim_edge_gate'", "]", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "opt", "[", "'dim_edge_gate'", "]", ",", "1", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", ")", "\n", "\n", "# fusion model", "\n", "dim_gcn_input", "=", "dim_input_vis_feat", "+", "dim_word_output", "\n", "\n", "self", ".", "gcn_encoder", "=", "GCNFusionEncoder", "(", "opt", "[", "'num_hid_location_gcn'", "]", ",", "\n", "opt", "[", "'num_location_relation'", "]", ",", "\n", "opt", "[", "'gcn_drop_out'", "]", ",", "\n", "dim_gcn_input", ")", "\n", "\n", "self", ".", "matching", "=", "Matching", "(", "opt", "[", "'num_hid_location_gcn'", "]", "[", "-", "1", "]", "+", "opt", "[", "'dim_location'", "]", ",", "\n", "dim_word_output", ",", "opt", "[", "'jemb_dim'", "]", ",", "opt", "[", "'jemb_drop_out'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.gcn_ref_fusion.GCNRefFusion.forward": [[63, 127], ["gcn_ref_fusion.GCNRefFusion.rnn_encoder", "gcn_ref_fusion.GCNRefFusion.word_judge", "gcn_ref_fusion.GCNRefFusion.feat_normalizer", "gcn_ref_fusion.GCNRefFusion.word_normalizer", "context_weight[].unsqueeze().expand", "gcn_ref_fusion.GCNRefFusion.edge_gate", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "gcn_ref_fusion.GCNRefFusion.unsqueeze().expand", "gcn_ref_fusion.GCNRefFusion.unsqueeze().expand", "gcn_ref_fusion.GCNRefFusion.node_word_match().squeeze", "gcn_ref_fusion.GCNRefFusion.sum().unsqueeze().expand", "context_weight[].unsqueeze().expand", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "gcn_ref_fusion.GCNRefFusion.locate_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gcn_ref_fusion.GCNRefFusion.gcn_encoder", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.sum().unsqueeze().expand", "torch.sum.sum().unsqueeze().expand", "torch.sum.sum().unsqueeze().expand", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "lang_cxt.squeeze.squeeze.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gcn_ref_fusion.GCNRefFusion.matching", "is_not_pad_sents.unsqueeze().expand", "gcn_ref_fusion.GCNRefFusion.size", "gcn_ref_fusion.GCNRefFusion.size", "gcn_ref_fusion.GCNRefFusion.size", "gcn_ref_fusion.GCNRefFusion.size", "gcn_ref_fusion.GCNRefFusion.size", "gcn_ref_fusion.GCNRefFusion.size", "gcn_ref_fusion.GCNRefFusion.size", "gcn_ref_fusion.GCNRefFusion.size", "gcn_ref_fusion.GCNRefFusion.size", "gcn_ref_fusion.GCNRefFusion.size", "is_not_pad_node.unsqueeze().expand", "gcn_ref_fusion.GCNRefFusion.size", "gcn_ref_fusion.GCNRefFusion.size", "gcn_ref_fusion.GCNRefFusion.size", "gcn_ref_fusion.GCNRefFusion.size", "gcn_ref_fusion.GCNRefFusion.size", "gcn_ref_fusion.GCNRefFusion.size", "node_weight_per_word.transpose", "torch.sum.size", "torch.sum.size", "torch.sum.size", "torch.sum.size", "torch.sum.size", "torch.sum.size", "is_not_pad_sents.size", "is_not_pad_sents.size", "gcn_ref_fusion.GCNRefFusion.size", "context_weight[].unsqueeze", "gcn_ref_fusion.GCNRefFusion.unsqueeze", "gcn_ref_fusion.GCNRefFusion.unsqueeze", "gcn_ref_fusion.GCNRefFusion.node_word_match", "is_not_pad_node.size", "gcn_ref_fusion.GCNRefFusion.size", "is_not_pad_node.size", "gcn_ref_fusion.GCNRefFusion.sum().unsqueeze", "context_weight[].unsqueeze", "torch.sum.sum().unsqueeze", "torch.sum.sum().unsqueeze", "torch.sum.sum().unsqueeze", "is_not_pad_sents.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "is_not_pad_node.unsqueeze", "gcn_ref_fusion.GCNRefFusion.sum", "torch.sum.sum", "torch.sum.sum", "torch.sum.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature", ",", "cls", ",", "lfeat", ",", "lrel", ",", "sents", ")", ":", "\n", "# language", "\n", "        ", "context", ",", "hidden", ",", "embeded", ",", "max_length", "=", "self", ".", "rnn_encoder", "(", "sents", ")", "\n", "input_gcnencoder_sents", "=", "sents", "[", ":", ",", "0", ":", "max_length", "]", "\n", "context_weight", "=", "self", ".", "word_judge", "(", "context", ")", "\n", "is_not_pad_sents", "=", "(", "input_gcnencoder_sents", "!=", "0", ")", ".", "float", "(", ")", "\n", "context_weight", "=", "context_weight", "*", "is_not_pad_sents", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "is_not_pad_sents", ".", "size", "(", "0", ")", ",", "\n", "is_not_pad_sents", ".", "size", "(", "1", ")", ",", "\n", "context_weight", ".", "size", "(", "2", ")", ")", "\n", "\n", "x", "=", "self", ".", "feat_normalizer", "(", "feature", ")", "\n", "words", "=", "self", ".", "word_normalizer", "(", "context", ")", "\n", "\n", "# obtain edge gate", "\n", "word_edge_weights_expand", "=", "context_weight", "[", ":", ",", ":", ",", "0", "]", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "context_weight", ".", "size", "(", "0", ")", ",", "\n", "context_weight", ".", "size", "(", "1", ")", ",", "\n", "self", ".", "nrel_l", ")", "\n", "words_input_edge_gate", "=", "words", "\n", "edge_type_weight", "=", "self", ".", "edge_gate", "(", "words_input_edge_gate", ")", "\n", "edge_weight_per_type_per_word", "=", "edge_type_weight", "*", "word_edge_weights_expand", "\n", "edge_weight_per_type_per_sent", "=", "torch", ".", "sum", "(", "edge_weight_per_type_per_word", ",", "1", ")", "\n", "\n", "# obtain note gate", "\n", "words_expand", "=", "words", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "words", ".", "size", "(", "0", ")", ",", "words", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "1", ")", ",", "words", ".", "size", "(", "2", ")", ")", "\n", "x_expand", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "x", ".", "size", "(", "0", ")", ",", "words", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "attn_word_node", "=", "self", ".", "node_word_match", "(", "torch", ".", "cat", "(", "[", "words_expand", ",", "x_expand", "]", ",", "3", ")", ")", ".", "squeeze", "(", "3", ")", "\n", "is_not_pad_node", "=", "(", "cls", "!=", "-", "1.0", ")", ".", "float", "(", ")", "\n", "attn_word_node", "=", "attn_word_node", "*", "(", "is_not_pad_node", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "is_not_pad_node", ".", "size", "(", "0", ")", ",", "\n", "attn_word_node", ".", "size", "(", "1", ")", ",", "\n", "is_not_pad_node", ".", "size", "(", "1", ")", ")", ")", "\n", "attn_word_node_sum", "=", "attn_word_node", ".", "sum", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "attn_word_node", ".", "size", "(", "0", ")", ",", "\n", "attn_word_node", ".", "size", "(", "1", ")", ",", "\n", "attn_word_node", ".", "size", "(", "2", ")", ")", "\n", "attn_word_node", "[", "attn_word_node_sum", "!=", "0", "]", "=", "attn_word_node", "[", "attn_word_node_sum", "!=", "0", "]", "/", "attn_word_node_sum", "[", "attn_word_node_sum", "!=", "0", "]", "\n", "word_node_weights_expand", "=", "context_weight", "[", ":", ",", ":", ",", "1", "]", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "context_weight", ".", "size", "(", "0", ")", ",", "\n", "context_weight", ".", "size", "(", "1", ")", ",", "\n", "x", ".", "size", "(", "1", ")", ")", "\n", "node_weight_per_word", "=", "attn_word_node", "*", "word_node_weights_expand", "\n", "word_feat_per_node", "=", "torch", ".", "bmm", "(", "node_weight_per_word", ".", "transpose", "(", "1", ",", "2", ")", ",", "words", ")", "\n", "node_weight_per_sent", "=", "torch", ".", "sum", "(", "node_weight_per_word", ",", "1", ")", "\n", "\n", "vis_feat_per_node", "=", "x", "\n", "\n", "# visual location", "\n", "location_feature", "=", "self", ".", "locate_encoder", "(", "lfeat", ")", "# num_image, num_box, dim_location_feature", "\n", "\n", "fusion_feat_per_node", "=", "torch", ".", "cat", "(", "[", "word_feat_per_node", ",", "vis_feat_per_node", "]", ",", "dim", "=", "2", ")", "\n", "\n", "gcn_feature", "=", "self", ".", "gcn_encoder", "(", "fusion_feat_per_node", ",", "cls", ",", "lrel", ",", "edge_weight_per_type_per_sent", ",", "node_weight_per_sent", ")", "\n", "\n", "# judge word context", "\n", "attn", "=", "torch", ".", "sum", "(", "context_weight", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "2", ")", "\n", "attn_sum", "=", "attn", ".", "sum", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "attn", ".", "size", "(", "0", ")", ",", "attn", ".", "size", "(", "1", ")", ")", "\n", "attn", "[", "attn_sum", "!=", "0", "]", "=", "attn", "[", "attn_sum", "!=", "0", "]", "/", "(", "attn_sum", "[", "attn_sum", "!=", "0", "]", ")", "\n", "attn3", "=", "attn", ".", "unsqueeze", "(", "1", ")", "\n", "lang_cxt", "=", "torch", ".", "bmm", "(", "attn3", ",", "words", ")", "\n", "lang_cxt", "=", "lang_cxt", ".", "squeeze", "(", "1", ")", "\n", "\n", "# matching", "\n", "vis_cxt", "=", "torch", ".", "cat", "(", "[", "gcn_feature", ",", "location_feature", "]", ",", "dim", "=", "2", ")", "\n", "score_cos", "=", "self", ".", "matching", "(", "vis_cxt", ",", "lang_cxt", ")", "\n", "\n", "return", "score_cos", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.gcn_ref_fusion.LocationEncoder.__init__": [[130, 134], ["torch.Module.__init__", "cmrin_models.model_utils.NormalizeScale", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "init_norm", ",", "dim", ")", ":", "\n", "        ", "super", "(", "LocationEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lfeat_normalizer", "=", "NormalizeScale", "(", "5", ",", "init_norm", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "5", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.gcn_ref_fusion.LocationEncoder.forward": [[135, 139], ["gcn_ref_fusion.LocationEncoder.lfeat_normalizer", "gcn_ref_fusion.LocationEncoder.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "lfeats", ")", ":", "\n", "        ", "loc_feat", "=", "self", ".", "lfeat_normalizer", "(", "lfeats", ")", "\n", "output", "=", "self", ".", "fc", "(", "loc_feat", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.gcn_ref_fusion.GCNFusionEncoder.__init__": [[142, 150], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "gcn_ref_fusion.GCNFusionEncoder.l_gcn.append", "gcn_ref_fusion.GCNFusionUnit", "len", "gcn_ref_fusion.GCNFusionUnit"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nhid_l", ",", "nrel_l", ",", "dropout", ",", "dim_input_vis", ")", ":", "\n", "        ", "super", "(", "GCNFusionEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nrel_l", "=", "nrel_l", "\n", "\n", "self", ".", "l_gcn", "=", "nn", ".", "ModuleList", "(", "[", "GCNFusionUnit", "(", "dim_input_vis", ",", "nhid_l", "[", "0", "]", ",", "nrel_l", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "nhid_l", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "l_gcn", ".", "append", "(", "GCNFusionUnit", "(", "nhid_l", "[", "i", "]", ",", "nhid_l", "[", "i", "+", "1", "]", ",", "nrel_l", ")", ")", "\n", "", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.gcn_ref_fusion.GCNFusionEncoder.forward": [[151, 158], ["torch.relu", "torch.relu", "torch.relu", "range", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_x", ",", "cls", ",", "rel_l", ",", "edge_weight_per_type_per_sent", ",", "node_weight_per_sent", ")", ":", "\n", "        ", "xl", "=", "F", ".", "relu", "(", "self", ".", "l_gcn", "[", "0", "]", "(", "input_x", ",", "cls", ",", "rel_l", ",", "edge_weight_per_type_per_sent", ",", "node_weight_per_sent", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "l_gcn", ")", "-", "1", ")", ":", "\n", "            ", "xl", "=", "F", ".", "relu", "(", "self", ".", "l_gcn", "[", "i", "+", "1", "]", "(", "xl", ",", "cls", ",", "rel_l", ",", "edge_weight_per_type_per_sent", ",", "node_weight_per_sent", ")", ")", "\n", "", "xl", "=", "F", ".", "dropout", "(", "xl", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "return", "xl", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.gcn_ref_fusion.GCNFusionUnit.__init__": [[161, 172], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "gcn_ref_fusion.GCNFusionUnit.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__", "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.gcn_ref_fusion.GCNFusionUnit.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_in_vis", ",", "num_out", ",", "num_type", ")", ":", "\n", "        ", "super", "(", "GCNFusionUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "num_in_vis", "\n", "self", ".", "out_features", "=", "num_out", "\n", "self", ".", "num_type", "=", "num_type", "\n", "self", ".", "w1", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_in_vis", ",", "num_out", ")", ")", "\n", "self", ".", "w2", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_in_vis", ",", "num_out", ")", ")", "\n", "self", ".", "w3", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_in_vis", ",", "num_out", ")", ")", "\n", "self", ".", "rel_bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_type", ",", "num_out", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.gcn_ref_fusion.GCNFusionUnit.reset_parameters": [[173, 179], ["gcn_ref_fusion.GCNFusionUnit.w1.data.uniform_", "gcn_ref_fusion.GCNFusionUnit.w2.data.uniform_", "gcn_ref_fusion.GCNFusionUnit.w3.data.uniform_", "gcn_ref_fusion.GCNFusionUnit.rel_bias.data.uniform_", "math.sqrt", "gcn_ref_fusion.GCNFusionUnit.w1.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "w1", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "w1", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "w2", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "w3", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "rel_bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.gcn_ref_fusion.GCNFusionUnit.forward": [[180, 227], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "adj3.unsqueeze.unsqueeze.unsqueeze", "node_weight_per_sent.unsqueeze().expand", "adj1_un.transpose", "adj1_un.transpose.float", "adj1_un.float", "edge_weight_per_type_per_sent[].unsqueeze().unsqueeze().expand", "edge_weight_per_type_per_sent[].unsqueeze().unsqueeze().expand", "adj3_weight.expand", "node_weight_per_sent.size", "node_weight_per_sent.size", "x.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "adj1_un.transpose.float.size", "adj1_un.transpose.float.size", "adj1_un.transpose.float.size", "adj1_un.float.size", "adj1_un.float.size", "adj1_un.float.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "adj3.unsqueeze.unsqueeze.size", "adj3.unsqueeze.unsqueeze.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "node_weight_per_sent.unsqueeze", "edge_weight_per_type_per_sent[].unsqueeze().unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "gcn_ref_fusion.GCNFusionUnit.rel_bias[].unsqueeze().unsqueeze().expand", "gate_adj1.sum().unsqueeze().expand", "edge_weight_per_type_per_sent[].unsqueeze().unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "gcn_ref_fusion.GCNFusionUnit.rel_bias[].unsqueeze().unsqueeze().expand", "gate_adj2.sum().unsqueeze().expand", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "adj1_un.transpose.float.size", "adj1_un.transpose.float.size", "gcn_ref_fusion.GCNFusionUnit.rel_bias.size", "adj1_un.transpose.float.size", "adj1_un.transpose.float.size", "gcn_ref_fusion.GCNFusionUnit.rel_bias.size", "adj1_un.float.size", "adj1_un.float.size", "gcn_ref_fusion.GCNFusionUnit.rel_bias.size", "adj1_un.float.size", "adj1_un.float.size", "gcn_ref_fusion.GCNFusionUnit.rel_bias.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "edge_weight_per_type_per_sent[].unsqueeze", "gcn_ref_fusion.GCNFusionUnit.rel_bias[].unsqueeze().unsqueeze", "gate_adj1.sum().unsqueeze", "edge_weight_per_type_per_sent[].unsqueeze", "gcn_ref_fusion.GCNFusionUnit.rel_bias[].unsqueeze().unsqueeze", "gate_adj2.sum().unsqueeze", "gcn_ref_fusion.GCNFusionUnit.rel_bias[].unsqueeze", "gate_adj1.sum", "gcn_ref_fusion.GCNFusionUnit.rel_bias[].unsqueeze", "gate_adj2.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "cls", ",", "rel", ",", "edge_weight_per_type_per_sent", ",", "node_weight_per_sent", ")", ":", "\n", "        ", "rel", ".", "requires_grad", "=", "False", "\n", "x3", "=", "torch", ".", "matmul", "(", "x", ",", "self", ".", "w3", ")", "\n", "x", "=", "node_weight_per_sent", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "node_weight_per_sent", ".", "size", "(", "0", ")", ",", "\n", "node_weight_per_sent", ".", "size", "(", "1", ")", ",", "\n", "x", ".", "size", "(", "2", ")", ")", "*", "x", "\n", "x1", "=", "torch", ".", "matmul", "(", "x", ",", "self", ".", "w1", ")", "\n", "x2", "=", "torch", ".", "matmul", "(", "x", ",", "self", ".", "w2", ")", "\n", "x1_t", "=", "torch", ".", "zeros", "(", "(", "x1", ".", "size", "(", "0", ")", ",", "x1", ".", "size", "(", "1", ")", ",", "x1", ".", "size", "(", "2", ")", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "x2_t", "=", "torch", ".", "zeros", "(", "(", "x2", ".", "size", "(", "0", ")", ",", "x2", ".", "size", "(", "1", ")", ",", "x2", ".", "size", "(", "2", ")", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_type", ")", ":", "\n", "            ", "adj1_un", "=", "(", "rel", "==", "i", ")", ".", "detach", "(", ")", "\n", "adj2_un", "=", "adj1_un", ".", "transpose", "(", "2", ",", "1", ")", "\n", "adj1", "=", "adj2_un", ".", "float", "(", ")", "\n", "adj2", "=", "adj1_un", ".", "float", "(", ")", "\n", "gate_matrix_1", "=", "edge_weight_per_type_per_sent", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "adj1", ".", "size", "(", "0", ")", ",", "\n", "adj1", ".", "size", "(", "1", ")", ",", "\n", "adj1", ".", "size", "(", "2", ")", ")", "\n", "gate_adj1", "=", "gate_matrix_1", "*", "adj1", "\n", "x1_t", "=", "x1_t", "+", "torch", ".", "bmm", "(", "gate_adj1", ",", "x1", ")", "+", "self", ".", "rel_bias", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "adj1", ".", "size", "(", "0", ")", ",", "\n", "adj1", ".", "size", "(", "1", ")", ",", "\n", "self", ".", "rel_bias", ".", "size", "(", "1", ")", ")", "*", "gate_adj1", ".", "sum", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "adj1", ".", "size", "(", "0", ")", ",", "adj1", ".", "size", "(", "1", ")", ",", "\n", "self", ".", "rel_bias", ".", "size", "(", "1", ")", ")", "\n", "\n", "gate_matrix_2", "=", "edge_weight_per_type_per_sent", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "adj2", ".", "size", "(", "0", ")", ",", "\n", "adj2", ".", "size", "(", "1", ")", ",", "\n", "adj2", ".", "size", "(", "2", ")", ")", "\n", "gate_adj2", "=", "gate_matrix_2", "*", "adj2", "\n", "x2_t", "=", "x2_t", "+", "torch", ".", "bmm", "(", "gate_adj2", ",", "x2", ")", "+", "self", ".", "rel_bias", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "adj2", ".", "size", "(", "0", ")", ",", "\n", "adj2", ".", "size", "(", "1", ")", ",", "\n", "self", ".", "rel_bias", ".", "size", "(", "1", ")", ")", "*", "gate_adj2", ".", "sum", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "adj2", ".", "size", "(", "0", ")", ",", "adj2", ".", "size", "(", "1", ")", ",", "\n", "self", ".", "rel_bias", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "adj3", "=", "torch", ".", "ones", "(", "(", "x3", ".", "size", "(", "0", ")", ",", "x3", ".", "size", "(", "1", ")", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "adj3", "[", "cls", "==", "-", "1", "]", "=", "0.0", "\n", "adj3", "=", "adj3", ".", "unsqueeze", "(", "2", ")", "\n", "adj3_weight", "=", "adj3", "\n", "x3_t", "=", "x3", "*", "adj3_weight", ".", "expand", "(", "adj3", ".", "size", "(", "0", ")", ",", "adj3", ".", "size", "(", "1", ")", ",", "x3", ".", "size", "(", "2", ")", ")", "\n", "\n", "x_new", "=", "x1_t", "+", "x2_t", "+", "x3_t", "\n", "\n", "return", "x_new", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.cmrin_models.gcn_ref_fusion.GCNFusionUnit.__repr__": [[228, 232], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "'->'", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.logging.Logger.__init__": [[8, 14], ["osutils.mkdir_if_missing", "open", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.osutils.mkdir_if_missing"], ["    ", "def", "__init__", "(", "self", ",", "fpath", "=", "None", ")", ":", "\n", "        ", "self", ".", "console", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "None", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "mkdir_if_missing", "(", "os", ".", "path", ".", "dirname", "(", "fpath", ")", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.logging.Logger.__del__": [[15, 17], ["logging.Logger.close"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.logging.Logger.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.logging.Logger.__enter__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.logging.Logger.__exit__": [[21, 23], ["logging.Logger.close"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.logging.Logger.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.logging.Logger.write": [[24, 28], ["logging.Logger.console.write", "logging.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.logging.Logger.write", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.logging.Logger.write"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "console", ".", "write", "(", "msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.logging.Logger.flush": [[29, 34], ["logging.Logger.console.flush", "logging.Logger.file.flush", "os.fsync", "logging.Logger.file.fileno"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.logging.Logger.flush", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.logging.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "self", ".", "file", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.logging.Logger.close": [[35, 39], ["logging.Logger.console.close", "logging.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.logging.Logger.close", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.logging.Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.__init__": [[4, 6], ["meter.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.reset": [[7, 12], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.update": [[13, 18], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "", "", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.osutils.mkdir_if_missing": [[8, 14], ["os.makedirs"], "function", ["None"], ["def", "mkdir_if_missing", "(", "dir_path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.osutils.save_checkpoint": [[16, 20], ["torch.save", "os.path.join", "shutil.copyfile", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filedir", ",", "filepre", ",", "filename", "=", "'_checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "filedir", ",", "filepre", "+", "filename", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "filedir", ",", "filepre", "+", "filename", ")", ",", "os", ".", "path", ".", "join", "(", "filedir", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.osutils.load_checkpoint": [[22, 30], ["print", "torch.load", "model.load_state_dict", "criterion.load_state_dict", "print"], "function", ["None"], ["", "", "def", "load_checkpoint", "(", "model", ",", "criterion", ",", "checkpoint_pth", ")", ":", "\n", "    ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "checkpoint_pth", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_pth", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "criterion", ".", "load_state_dict", "(", "checkpoint", "[", "'crit_state_dict'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}'\"", ".", "format", "(", "checkpoint_pth", ")", ")", "\n", "\n", "return", "model", ",", "criterion", "\n", "", ""]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy": [[3, 10], ["torch.is_tensor", "tensor.cpu().numpy", "ValueError", "tensor.cpu", "type", "type"], "function", ["None"], []], "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_torch": [[12, 19], ["torch.from_numpy", "type", "torch.is_tensor", "ValueError", "type"], "function", ["None"], []], "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.opt.parse_opt": [[5, 78], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_opt", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# data input setting", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'model checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "type", "=", "str", ",", "default", "=", "'./data/'", ",", "help", "=", "'data root'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'the num of jobs'", ")", "\n", "\n", "# visual feats setting", "\n", "parser", ".", "add_argument", "(", "'--dim_input_vis_feat'", ",", "default", "=", "2048", ",", "type", "=", "int", ",", "help", "=", "'the dim of input vis feat'", ")", "\n", "parser", ".", "add_argument", "(", "'--vis_init_norm'", ",", "default", "=", "20.0", ",", "type", "=", "float", ",", "help", "=", "'the l2 norm of feature'", ")", "\n", "parser", ".", "add_argument", "(", "'--dim_location'", ",", "default", "=", "512", ",", "type", "=", "int", ",", "help", "=", "'the dim of location embed'", ")", "\n", "\n", "# language encoder setting", "\n", "parser", ".", "add_argument", "(", "'--word_embedding_size'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "help", "=", "'the encoding size of each token'", ")", "\n", "parser", ".", "add_argument", "(", "'--word_drop_out'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'word drop out after embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--bidirectional'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'bi-rnn'", ")", "\n", "parser", ".", "add_argument", "(", "'--rnn_hidden_size'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'hidden size of LSTM'", ")", "\n", "parser", ".", "add_argument", "(", "'--rnn_type'", ",", "type", "=", "str", ",", "default", "=", "'lstm'", ",", "help", "=", "'rnn, gru or lstm'", ")", "\n", "parser", ".", "add_argument", "(", "'--rnn_drop_out'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'dropout between stacked rnn layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--rnn_num_layers'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of layers in lang_encoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--variable_lengths'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'use variable length to encode'", ")", "\n", "parser", ".", "add_argument", "(", "'--elimination'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'eliminate the unnecessary words'", ")", "\n", "parser", ".", "add_argument", "(", "'--word_init_norm'", ",", "type", "=", "float", ",", "default", "=", "20", ",", "help", "=", "'.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dim_hidden_word_judge'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'hidden size of LSTM'", ")", "\n", "parser", ".", "add_argument", "(", "'--word_judge_drop'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'dropout for word judge'", ")", "\n", "parser", ".", "add_argument", "(", "'--word_vec_size'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'further non-linear of word embedding'", ")", "\n", "\n", "# joint embedding setting", "\n", "parser", ".", "add_argument", "(", "'--jemb_dim'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "help", "=", "'the dim of joint embedding'", ")", "#512 cmrin", "\n", "parser", ".", "add_argument", "(", "'--jemb_drop_out'", ",", "default", "=", "0.2", ",", "type", "=", "float", ",", "help", "=", "'joint embedding drop out'", ")", "# jemb_dropout", "\n", "\n", "# loss setting", "\n", "parser", ".", "add_argument", "(", "'--margin'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'margin for ranking loss'", ")", "\n", "\n", "# optimization", "\n", "parser", ".", "add_argument", "(", "'--max_epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'max number of epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'batch size in number of images per batch'", ")", "\n", "parser", ".", "add_argument", "(", "'--grad_clip'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'clip gradients at this value'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_epsilon'", ",", "type", "=", "float", ",", "default", "=", "1e-8", ",", "\n", "help", "=", "'epsilon that goes into denominator for smoothing'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_alpha'", ",", "type", "=", "float", ",", "default", "=", "0.8", ",", "help", "=", "'alpha for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_beta'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "help", "=", "'beta used for adam'", ")", "\n", "\n", "# evaluation/checkpoint", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_dir'", ",", "type", "=", "str", ",", "default", "=", "'output/checkpoints'", ",", "help", "=", "'directory to save models'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "type", "=", "str", ",", "default", "=", "'experiments/logs'", ",", "help", "=", "'where to output log'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'How often do we snapshot losses, for inclusion in the progress dump? (0 = disable)'", ")", "\n", "parser", ".", "add_argument", "(", "'--id'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'an id identifying this run/job.'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "help", "=", "'random number generator seed to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "type", "=", "list", ",", "default", "=", "[", "0", ",", "1", "]", ",", "help", "=", "'which gpus to use, -1 = use CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'evaluate or not'", ")", "\n", "\n", "# method", "\n", "parser", ".", "add_argument", "(", "'--model_method'", ",", "type", "=", "str", ",", "default", "=", "'sgmn'", ")", "\n", "\n", "# controller", "\n", "parser", ".", "add_argument", "(", "'--T_ctrl'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'The iterator num of controller'", ")", "\n", "parser", ".", "add_argument", "(", "'--dim_reason'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "help", "=", "'The dim of reasoning operator'", ")", "\n", "\n", "# gcn", "\n", "parser", ".", "add_argument", "(", "'--num_hid_location_gcn'", ",", "default", "=", "[", "1024", ",", "1024", "]", ",", "type", "=", "list", ",", "help", "=", "'number of gcn layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_location_relation'", ",", "default", "=", "11", ",", "type", "=", "int", ",", "help", "=", "'number of location relation'", ")", "\n", "parser", ".", "add_argument", "(", "'--gcn_drop_out'", ",", "default", "=", "0.2", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--num_embed_gcn'", ",", "default", "=", "512", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--dim_edge_gate'", ",", "default", "=", "512", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--edge_gate_drop_out'", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "\n", "# parse", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train_cmrin.main": [[28, 111], ["utils.logging.Logger", "os.join", "utils.osutils.mkdir_if_missing", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "datasets.factory.get_db", "datasets.factory.get_db.load_dictionary", "len", "datasets.factory.get_db", "cmrin_models.gcn_ref_fusion.GCNRefFusion", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "crits.criterion.TripletLoss().cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.ReduceLROnPlateau", "datasets.refdataset.RefDataset", "datasets.refdataset.RefDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "time.strftime", "os.join", "os.isfile", "train_cmrin.train", "train_cmrin.validate", "torch.optim.lr_scheduler.ReduceLROnPlateau.step", "enumerate", "max", "utils.osutils.save_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "crits.criterion.TripletLoss", "list", "list", "utils.osutils.load_checkpoint", "datasets.factory.get_db", "datasets.refdataset.RefDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "train_cmrin.validate", "print", "print", "print", "str", "torch.nn.DataParallel().cuda.parameters", "TripletLoss().cuda.parameters", "float", "torch.nn.DataParallel().cuda.state_dict", "TripletLoss().cuda.state_dict", "torch.optim.Adam.state_dict"], "function", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.factory.get_db", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.load_dictionary", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.factory.get_db", "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.train", "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.validate", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.osutils.save_checkpoint", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.osutils.load_checkpoint", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.factory.get_db", "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.validate"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "best_prec", "\n", "global", "opt", "\n", "\n", "if", "opt", "[", "'id'", "]", "!=", "''", ":", "\n", "        ", "model_id", "=", "opt", "[", "'id'", "]", "\n", "", "else", ":", "\n", "        ", "model_id", "=", "time", ".", "strftime", "(", "\"%m_%d_%H-%M-%S\"", ")", "\n", "", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "opt", "[", "'log_dir'", "]", ",", "'log.'", "+", "model_id", "+", "'.txt'", ")", ")", "\n", "\n", "# initialize", "\n", "checkpoint_dir", "=", "osp", ".", "join", "(", "opt", "[", "'checkpoint_dir'", "]", ",", "model_id", ")", "\n", "mkdir_if_missing", "(", "checkpoint_dir", ")", "\n", "\n", "# check gpu", "\n", "assert", "opt", "[", "'gpus'", "]", "is", "not", "None", "\n", "\n", "# set random seed", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "random", ".", "seed", "(", "opt", "[", "'seed'", "]", ")", "\n", "np", ".", "random", ".", "seed", "(", "opt", "[", "'seed'", "]", ")", "\n", "torch", ".", "manual_seed", "(", "opt", "[", "'seed'", "]", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "opt", "[", "'seed'", "]", ")", "\n", "\n", "\n", "# load imdb", "\n", "train_refdb", "=", "get_db", "(", "'refvg_train_'", "+", "opt", "[", "'model_method'", "]", ")", "\n", "vocab", "=", "train_refdb", ".", "load_dictionary", "(", ")", "\n", "opt", "[", "'vocab_size'", "]", "=", "len", "(", "vocab", ")", "\n", "val_refdb", "=", "get_db", "(", "'refvg_val_'", "+", "opt", "[", "'model_method'", "]", ")", "\n", "\n", "# model, criterion, optimizer", "\n", "model", "=", "GCNRefFusion", "(", "opt", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "criterion", "=", "TripletLoss", "(", "opt", "[", "'margin'", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", "+", "list", "(", "criterion", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", "[", "'learning_rate'", "]", ",", "\n", "betas", "=", "(", "opt", "[", "'optim_alpha'", "]", ",", "opt", "[", "'optim_beta'", "]", ")", ",", "\n", "eps", "=", "opt", "[", "'optim_epsilon'", "]", ")", "\n", "\n", "scheduler", "=", "ReduceLROnPlateau", "(", "optimizer", ",", "factor", "=", "0.1", ",", "\n", "patience", "=", "3", ",", "mode", "=", "'max'", ")", "\n", "\n", "if", "opt", "[", "'evaluate'", "]", ":", "\n", "        ", "if", "osp", ".", "isfile", "(", "opt", "[", "'model'", "]", ")", ":", "\n", "            ", "model", ",", "criterion", "=", "load_checkpoint", "(", "model", ",", "criterion", ",", "opt", "[", "'model'", "]", ")", "\n", "test_refdb", "=", "get_db", "(", "'refvg_test_'", "+", "opt", "[", "'model_method'", "]", ")", "\n", "test_dataset", "=", "RefDataset", "(", "test_refdb", ",", "vocab", ",", "opt", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "opt", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "opt", "[", "'workers'", "]", ",", "pin_memory", "=", "True", ")", "\n", "test_loss", ",", "test_prec", "=", "validate", "(", "test_loader", ",", "model", ",", "criterion", ")", "\n", "print", "(", "test_prec", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "opt", "[", "'model'", "]", ")", ")", "\n", "", "return", "\n", "\n", "# start training", "\n", "", "epoch_cur", "=", "0", "\n", "train_dataset", "=", "RefDataset", "(", "train_refdb", ",", "vocab", ",", "opt", ")", "\n", "val_dataset", "=", "RefDataset", "(", "val_refdb", ",", "vocab", ",", "opt", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "opt", "[", "'batch_size'", "]", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "opt", "[", "'workers'", "]", ",", "pin_memory", "=", "True", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "opt", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "opt", "[", "'workers'", "]", ",", "pin_memory", "=", "True", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "epoch_cur", ",", "opt", "[", "'max_epochs'", "]", ")", ":", "\n", "        ", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", "\n", "val_loss", ",", "prec", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ")", "\n", "scheduler", ".", "step", "(", "prec", ")", "\n", "for", "i", ",", "param_group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "print", "(", "float", "(", "param_group", "[", "'lr'", "]", ")", ")", "\n", "\n", "", "is_best", "=", "prec", ">=", "best_prec", "\n", "best_prec", "=", "max", "(", "best_prec", ",", "prec", ")", "\n", "save_checkpoint", "(", "{", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'crit_state_dict'", ":", "criterion", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "}", ",", "is_best", ",", "checkpoint_dir", ",", "str", "(", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train_cmrin.train": [[113, 166], ["utils.meter.AverageMeter", "model.train", "criterion.train", "enumerate", "len", "model", "criterion", "utils.meter.AverageMeter.update", "utils.to_numpy", "utils.to_numpy", "numpy.argmax", "utils.to_numpy", "range", "optimizer.zero_grad", "loss.backward", "models.model_utils.clip_gradient", "optimizer.step", "box.cuda.cuda", "cls.cuda.cuda", "feature.cuda.cuda", "lfeat.cuda.cuda", "lrel.cuda.cuda", "sents.cuda.cuda", "sents_gt.cuda.cuda", "loss.item", "model.detach", "pred_gt_same.append", "pred_gt_same.append", "print", "numpy.sum", "float", "len"], "function", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.train", "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.train", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.update", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.model_utils.clip_gradient"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "global", "opt", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "criterion", ".", "train", "(", ")", "\n", "\n", "step", "=", "epoch", "*", "len", "(", "train_loader", ")", "\n", "pred_gt_same", "=", "[", "]", "\n", "for", "i", ",", "(", "box", ",", "cls", ",", "feature", ",", "lfeat", ",", "lrel", ",", "\n", "sents", ",", "sents_gt", ",", "gt_boxes", ",", "img_ids", ",", "sent_ids", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "        ", "step", "+=", "1", "\n", "if", "opt", "[", "'gpus'", "]", "is", "not", "None", ":", "\n", "            ", "box", "=", "box", ".", "cuda", "(", ")", "\n", "cls", "=", "cls", ".", "cuda", "(", ")", "\n", "feature", "=", "feature", ".", "cuda", "(", ")", "\n", "lfeat", "=", "lfeat", ".", "cuda", "(", ")", "\n", "lrel", "=", "lrel", ".", "cuda", "(", ")", "\n", "sents", "=", "sents", ".", "cuda", "(", ")", "\n", "sents_gt", "=", "sents_gt", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "", "score", "=", "model", "(", "feature", ",", "cls", ",", "lfeat", ",", "lrel", ",", "sents", ")", "\n", "loss", ",", "score", "=", "criterion", "(", "score", ",", "box", ",", "cls", ",", "sents_gt", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "cls", "=", "to_numpy", "(", "cls", ")", "\n", "final_score", "=", "to_numpy", "(", "score", ".", "detach", "(", ")", ")", "\n", "final_score", "[", "cls", "==", "-", "1", "]", "=", "-", "999", "\n", "pred_ind", "=", "np", ".", "argmax", "(", "final_score", ",", "1", ")", "\n", "sents_gt", "=", "to_numpy", "(", "sents_gt", ")", "\n", "for", "j", "in", "range", "(", "pred_ind", ".", "size", ")", ":", "\n", "            ", "if", "sents_gt", "[", "j", "]", "==", "pred_ind", "[", "j", "]", ":", "\n", "                ", "pred_gt_same", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "pred_gt_same", ".", "append", "(", "0", ")", "\n", "\n", "# compute gradient and do Adam step", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "clip_gradient", "(", "optimizer", ",", "opt", "[", "'grad_clip'", "]", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "if", "i", "!=", "0", ":", "\n", "                ", "same", "=", "np", ".", "sum", "(", "pred_gt_same", "[", "-", "args", ".", "print_freq", "*", "opt", "[", "'batch_size'", "]", ":", "]", ")", "/", "float", "(", "args", ".", "print_freq", "*", "opt", "[", "'batch_size'", "]", ")", "\n", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec {same:.4f}'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "loss", "=", "losses", ",", "same", "=", "same", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train_cmrin.validate": [[168, 221], ["utils.meter.AverageMeter", "model.eval", "criterion.eval", "torch.no_grad", "torch.no_grad", "enumerate", "print", "model", "criterion", "utils.meter.AverageMeter.update", "utils.to_numpy", "utils.to_numpy", "numpy.argmax", "utils.to_numpy", "range", "numpy.sum", "float", "box.cuda.cuda", "cls.cuda.cuda", "feature.cuda.cuda", "lfeat.cuda.cuda", "lrel.cuda.cuda", "sents.cuda.cuda", "sents_gt.cuda.cuda", "loss.item", "model.detach", "len", "pred_gt_same.append", "pred_gt_same.append", "print", "numpy.sum", "float", "len"], "function", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.update", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy"], ["", "", "", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", "=", "-", "1", ")", ":", "\n", "    ", "global", "opt", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to eval mode", "\n", "model", ".", "eval", "(", ")", "\n", "criterion", ".", "eval", "(", ")", "\n", "\n", "pred_gt_same", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "box", ",", "cls", ",", "feature", ",", "lfeat", ",", "lrel", ",", "\n", "sents", ",", "sents_gt", ",", "gt_boxes", ",", "img_ids", ",", "sent_ids", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "\n", "            ", "if", "opt", "[", "'gpus'", "]", "is", "not", "None", ":", "\n", "                ", "box", "=", "box", ".", "cuda", "(", ")", "\n", "cls", "=", "cls", ".", "cuda", "(", ")", "\n", "feature", "=", "feature", ".", "cuda", "(", ")", "\n", "lfeat", "=", "lfeat", ".", "cuda", "(", ")", "\n", "lrel", "=", "lrel", ".", "cuda", "(", ")", "\n", "sents", "=", "sents", ".", "cuda", "(", ")", "\n", "sents_gt", "=", "sents_gt", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "", "score", "=", "model", "(", "feature", ",", "cls", ",", "lfeat", ",", "lrel", ",", "sents", ")", "\n", "loss", ",", "score", "=", "criterion", "(", "score", ",", "box", ",", "cls", ",", "sents_gt", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "cls", "=", "to_numpy", "(", "cls", ")", "\n", "final_score", "=", "to_numpy", "(", "score", ".", "detach", "(", ")", ")", "\n", "final_score", "[", "cls", "==", "-", "1", "]", "=", "-", "999", "\n", "pred_ind", "=", "np", ".", "argmax", "(", "final_score", ",", "1", ")", "\n", "sents_gt", "=", "to_numpy", "(", "sents_gt", ")", "\n", "for", "j", "in", "range", "(", "pred_ind", ".", "size", ")", ":", "\n", "                ", "if", "sents_gt", "[", "j", "]", "==", "pred_ind", "[", "j", "]", ":", "\n", "                    ", "pred_gt_same", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "pred_gt_same", ".", "append", "(", "0", ")", "\n", "\n", "", "", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "if", "i", "!=", "0", ":", "\n", "                    ", "same", "=", "np", ".", "sum", "(", "pred_gt_same", "[", "-", "args", ".", "print_freq", "*", "opt", "[", "'batch_size'", "]", ":", "]", ")", "/", "float", "(", "\n", "args", ".", "print_freq", "*", "opt", "[", "'batch_size'", "]", ")", "\n", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec {same:.4f}'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "val_loader", ")", ",", "loss", "=", "losses", ",", "same", "=", "same", ")", ")", "\n", "\n", "", "", "", "same", "=", "np", ".", "sum", "(", "pred_gt_same", ")", "/", "float", "(", "len", "(", "pred_gt_same", ")", ")", "\n", "print", "(", "'Epoch: [{0}]\\t'", "\n", "'Loss {1:.4f}\\t'", "\n", "'Prec {2:.4f}'", ".", "format", "(", "epoch", ",", "losses", ".", "avg", ",", "same", ")", ")", "\n", "\n", "", "return", "losses", ".", "avg", ",", "same", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train_dga.main": [[28, 112], ["utils.logging.Logger", "os.join", "utils.osutils.mkdir_if_missing", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "datasets.factory.get_db", "datasets.factory.get_db.load_dictionary", "len", "datasets.factory.get_db", "dga_models.chain_reason.CR", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "crits.criterion.TripletLoss().cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.ReduceLROnPlateau", "datasets.refdataset.RefDataset", "datasets.refdataset.RefDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "time.strftime", "os.join", "os.isfile", "train_dga.train", "train_dga.validate", "torch.optim.lr_scheduler.ReduceLROnPlateau.step", "enumerate", "max", "utils.osutils.save_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "crits.criterion.TripletLoss", "list", "list", "utils.osutils.load_checkpoint", "datasets.factory.get_db", "datasets.refdataset.RefDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "train_dga.validate", "print", "print", "print", "str", "torch.nn.DataParallel().cuda.parameters", "TripletLoss().cuda.parameters", "float", "torch.nn.DataParallel().cuda.state_dict", "TripletLoss().cuda.state_dict", "torch.optim.Adam.state_dict"], "function", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.factory.get_db", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.load_dictionary", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.factory.get_db", "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.train", "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.validate", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.osutils.save_checkpoint", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.osutils.load_checkpoint", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.factory.get_db", "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.validate"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "best_prec", "\n", "global", "opt", "\n", "\n", "if", "opt", "[", "'id'", "]", "!=", "''", ":", "\n", "        ", "model_id", "=", "opt", "[", "'id'", "]", "\n", "", "else", ":", "\n", "        ", "model_id", "=", "time", ".", "strftime", "(", "\"%m_%d_%H-%M-%S\"", ")", "\n", "\n", "", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "opt", "[", "'log_dir'", "]", ",", "'log.'", "+", "model_id", "+", "'.txt'", ")", ")", "\n", "\n", "# initialize", "\n", "checkpoint_dir", "=", "osp", ".", "join", "(", "opt", "[", "'checkpoint_dir'", "]", ",", "model_id", ")", "\n", "mkdir_if_missing", "(", "checkpoint_dir", ")", "\n", "\n", "# check gpu", "\n", "assert", "opt", "[", "'gpus'", "]", "is", "not", "None", "\n", "\n", "# set random seed", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "random", ".", "seed", "(", "opt", "[", "'seed'", "]", ")", "\n", "np", ".", "random", ".", "seed", "(", "opt", "[", "'seed'", "]", ")", "\n", "torch", ".", "manual_seed", "(", "opt", "[", "'seed'", "]", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "opt", "[", "'seed'", "]", ")", "\n", "\n", "\n", "# load imdb", "\n", "train_refdb", "=", "get_db", "(", "'refvg_train_'", "+", "opt", "[", "'model_method'", "]", ")", "\n", "vocab", "=", "train_refdb", ".", "load_dictionary", "(", ")", "\n", "opt", "[", "'vocab_size'", "]", "=", "len", "(", "vocab", ")", "\n", "val_refdb", "=", "get_db", "(", "'refvg_val_'", "+", "opt", "[", "'model_method'", "]", ")", "\n", "\n", "# model, criterion, optimizer", "\n", "model", "=", "CR", "(", "opt", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "criterion", "=", "TripletLoss", "(", "opt", "[", "'margin'", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", "+", "list", "(", "criterion", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", "[", "'learning_rate'", "]", ",", "\n", "betas", "=", "(", "opt", "[", "'optim_alpha'", "]", ",", "opt", "[", "'optim_beta'", "]", ")", ",", "\n", "eps", "=", "opt", "[", "'optim_epsilon'", "]", ")", "\n", "\n", "scheduler", "=", "ReduceLROnPlateau", "(", "optimizer", ",", "factor", "=", "0.1", ",", "\n", "patience", "=", "3", ",", "mode", "=", "'max'", ")", "\n", "\n", "if", "opt", "[", "'evaluate'", "]", ":", "\n", "        ", "if", "osp", ".", "isfile", "(", "opt", "[", "'model'", "]", ")", ":", "\n", "            ", "model", ",", "criterion", "=", "load_checkpoint", "(", "model", ",", "criterion", ",", "opt", "[", "'model'", "]", ")", "\n", "test_refdb", "=", "get_db", "(", "'refvg_test_'", "+", "opt", "[", "'model_method'", "]", ")", "\n", "test_dataset", "=", "RefDataset", "(", "test_refdb", ",", "vocab", ",", "opt", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "opt", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "opt", "[", "'workers'", "]", ",", "pin_memory", "=", "True", ")", "\n", "test_loss", ",", "test_prec", "=", "validate", "(", "test_loader", ",", "model", ",", "criterion", ")", "\n", "print", "(", "test_prec", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "opt", "[", "'model'", "]", ")", ")", "\n", "", "return", "\n", "\n", "# start training", "\n", "", "epoch_cur", "=", "0", "\n", "train_dataset", "=", "RefDataset", "(", "train_refdb", ",", "vocab", ",", "opt", ")", "\n", "val_dataset", "=", "RefDataset", "(", "val_refdb", ",", "vocab", ",", "opt", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "opt", "[", "'batch_size'", "]", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "opt", "[", "'workers'", "]", ",", "pin_memory", "=", "True", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "opt", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "opt", "[", "'workers'", "]", ",", "pin_memory", "=", "True", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "epoch_cur", ",", "opt", "[", "'max_epochs'", "]", ")", ":", "\n", "        ", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", "\n", "val_loss", ",", "prec", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ")", "\n", "scheduler", ".", "step", "(", "prec", ")", "\n", "for", "i", ",", "param_group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "print", "(", "float", "(", "param_group", "[", "'lr'", "]", ")", ")", "\n", "\n", "", "is_best", "=", "prec", ">=", "best_prec", "\n", "best_prec", "=", "max", "(", "best_prec", ",", "prec", ")", "\n", "save_checkpoint", "(", "{", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'crit_state_dict'", ":", "criterion", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "}", ",", "is_best", ",", "checkpoint_dir", ",", "str", "(", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train_dga.train": [[114, 167], ["utils.meter.AverageMeter", "model.train", "criterion.train", "enumerate", "len", "model", "criterion", "utils.meter.AverageMeter.update", "utils.to_numpy", "utils.to_numpy", "numpy.argmax", "utils.to_numpy", "range", "optimizer.zero_grad", "loss.backward", "models.model_utils.clip_gradient", "optimizer.step", "box.cuda.cuda", "cls.cuda.cuda", "feature.cuda.cuda", "lfeat.cuda.cuda", "lrel.cuda.cuda", "sents.cuda.cuda", "sents_gt.cuda.cuda", "loss.item", "model.detach", "pred_gt_same.append", "pred_gt_same.append", "print", "numpy.sum", "float", "len"], "function", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.train", "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.train", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.update", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.model_utils.clip_gradient"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "global", "opt", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "criterion", ".", "train", "(", ")", "\n", "\n", "step", "=", "epoch", "*", "len", "(", "train_loader", ")", "\n", "pred_gt_same", "=", "[", "]", "\n", "for", "i", ",", "(", "box", ",", "cls", ",", "feature", ",", "lfeat", ",", "lrel", ",", "\n", "sents", ",", "sents_gt", ",", "gt_boxes", ",", "img_ids", ",", "sent_ids", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "        ", "step", "+=", "1", "\n", "if", "opt", "[", "'gpus'", "]", "is", "not", "None", ":", "\n", "            ", "box", "=", "box", ".", "cuda", "(", ")", "\n", "cls", "=", "cls", ".", "cuda", "(", ")", "\n", "feature", "=", "feature", ".", "cuda", "(", ")", "\n", "lfeat", "=", "lfeat", ".", "cuda", "(", ")", "\n", "lrel", "=", "lrel", ".", "cuda", "(", ")", "\n", "sents", "=", "sents", ".", "cuda", "(", ")", "\n", "sents_gt", "=", "sents_gt", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "", "score", "=", "model", "(", "feature", ",", "cls", ",", "lfeat", ",", "lrel", ",", "sents", ")", "\n", "loss", ",", "score", "=", "criterion", "(", "score", ",", "box", ",", "cls", ",", "sents_gt", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "cls", "=", "to_numpy", "(", "cls", ")", "\n", "final_score", "=", "to_numpy", "(", "score", ".", "detach", "(", ")", ")", "\n", "final_score", "[", "cls", "==", "-", "1", "]", "=", "-", "999", "\n", "pred_ind", "=", "np", ".", "argmax", "(", "final_score", ",", "1", ")", "\n", "sents_gt", "=", "to_numpy", "(", "sents_gt", ")", "\n", "for", "j", "in", "range", "(", "pred_ind", ".", "size", ")", ":", "\n", "            ", "if", "sents_gt", "[", "j", "]", "==", "pred_ind", "[", "j", "]", ":", "\n", "                ", "pred_gt_same", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "pred_gt_same", ".", "append", "(", "0", ")", "\n", "\n", "# compute gradient and do Adam step", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "clip_gradient", "(", "optimizer", ",", "opt", "[", "'grad_clip'", "]", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "if", "i", "!=", "0", ":", "\n", "                ", "same", "=", "np", ".", "sum", "(", "pred_gt_same", "[", "-", "args", ".", "print_freq", "*", "opt", "[", "'batch_size'", "]", ":", "]", ")", "/", "float", "(", "args", ".", "print_freq", "*", "opt", "[", "'batch_size'", "]", ")", "\n", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec {same:.4f}'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "loss", "=", "losses", ",", "same", "=", "same", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train_dga.validate": [[169, 222], ["utils.meter.AverageMeter", "model.eval", "criterion.eval", "torch.no_grad", "torch.no_grad", "enumerate", "print", "model", "criterion", "utils.meter.AverageMeter.update", "utils.to_numpy", "utils.to_numpy", "numpy.argmax", "utils.to_numpy", "range", "numpy.sum", "float", "box.cuda.cuda", "cls.cuda.cuda", "feature.cuda.cuda", "lfeat.cuda.cuda", "lrel.cuda.cuda", "sents.cuda.cuda", "sents_gt.cuda.cuda", "loss.item", "model.detach", "len", "pred_gt_same.append", "pred_gt_same.append", "print", "numpy.sum", "float", "len"], "function", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.update", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy"], ["", "", "", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", "=", "-", "1", ")", ":", "\n", "    ", "global", "opt", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to eval mode", "\n", "model", ".", "eval", "(", ")", "\n", "criterion", ".", "eval", "(", ")", "\n", "\n", "pred_gt_same", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "box", ",", "cls", ",", "feature", ",", "lfeat", ",", "lrel", ",", "\n", "sents", ",", "sents_gt", ",", "gt_boxes", ",", "img_ids", ",", "sent_ids", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "\n", "            ", "if", "opt", "[", "'gpus'", "]", "is", "not", "None", ":", "\n", "                ", "box", "=", "box", ".", "cuda", "(", ")", "\n", "cls", "=", "cls", ".", "cuda", "(", ")", "\n", "feature", "=", "feature", ".", "cuda", "(", ")", "\n", "lfeat", "=", "lfeat", ".", "cuda", "(", ")", "\n", "lrel", "=", "lrel", ".", "cuda", "(", ")", "\n", "sents", "=", "sents", ".", "cuda", "(", ")", "\n", "sents_gt", "=", "sents_gt", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "", "score", "=", "model", "(", "feature", ",", "cls", ",", "lfeat", ",", "lrel", ",", "sents", ")", "\n", "loss", ",", "score", "=", "criterion", "(", "score", ",", "box", ",", "cls", ",", "sents_gt", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "cls", "=", "to_numpy", "(", "cls", ")", "\n", "final_score", "=", "to_numpy", "(", "score", ".", "detach", "(", ")", ")", "\n", "final_score", "[", "cls", "==", "-", "1", "]", "=", "-", "999", "\n", "pred_ind", "=", "np", ".", "argmax", "(", "final_score", ",", "1", ")", "\n", "sents_gt", "=", "to_numpy", "(", "sents_gt", ")", "\n", "for", "j", "in", "range", "(", "pred_ind", ".", "size", ")", ":", "\n", "                ", "if", "sents_gt", "[", "j", "]", "==", "pred_ind", "[", "j", "]", ":", "\n", "                    ", "pred_gt_same", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "pred_gt_same", ".", "append", "(", "0", ")", "\n", "\n", "", "", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "if", "i", "!=", "0", ":", "\n", "                    ", "same", "=", "np", ".", "sum", "(", "pred_gt_same", "[", "-", "args", ".", "print_freq", "*", "opt", "[", "'batch_size'", "]", ":", "]", ")", "/", "float", "(", "\n", "args", ".", "print_freq", "*", "opt", "[", "'batch_size'", "]", ")", "\n", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec {same:.4f}'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "val_loader", ")", ",", "loss", "=", "losses", ",", "same", "=", "same", ")", ")", "\n", "\n", "", "", "", "same", "=", "np", ".", "sum", "(", "pred_gt_same", ")", "/", "float", "(", "len", "(", "pred_gt_same", ")", ")", "\n", "print", "(", "'Epoch: [{0}]\\t'", "\n", "'Loss {1:.4f}\\t'", "\n", "'Prec {2:.4f}'", ".", "format", "(", "epoch", ",", "losses", ".", "avg", ",", "same", ")", ")", "\n", "\n", "", "return", "losses", ".", "avg", ",", "same", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.main": [[28, 111], ["utils.logging.Logger", "os.join", "utils.osutils.mkdir_if_missing", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "datasets.factory.get_db", "datasets.factory.get_db.load_dictionary", "len", "datasets.factory.get_db", "models.scene_graph_reasoning.SGReason", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "crits.criterion.SoftmaxLoss().cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.ReduceLROnPlateau", "datasets.refdataset_sg_online.RefDatasetSG", "datasets.refdataset_sg_online.RefDatasetSG", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "time.strftime", "os.join", "os.isfile", "train.train", "train.validate", "torch.optim.lr_scheduler.ReduceLROnPlateau.step", "enumerate", "max", "utils.osutils.save_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "crits.criterion.SoftmaxLoss", "list", "list", "utils.osutils.load_checkpoint", "datasets.factory.get_db", "datasets.refdataset_sg_online.RefDatasetSG", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "train.validate", "print", "print", "print", "str", "torch.nn.DataParallel().cuda.parameters", "SoftmaxLoss().cuda.parameters", "float", "torch.nn.DataParallel().cuda.state_dict", "SoftmaxLoss().cuda.state_dict", "torch.optim.Adam.state_dict"], "function", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.osutils.mkdir_if_missing", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.factory.get_db", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.refvg.Refvg.load_dictionary", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.factory.get_db", "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.train", "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.validate", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.osutils.save_checkpoint", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.osutils.load_checkpoint", "home.repos.pwc.inspect_result.sibeiyang_sgmn.datasets.factory.get_db", "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.validate"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "best_prec", "\n", "global", "opt", "\n", "\n", "if", "opt", "[", "'id'", "]", "!=", "''", ":", "\n", "        ", "model_id", "=", "opt", "[", "'id'", "]", "\n", "", "else", ":", "\n", "        ", "model_id", "=", "time", ".", "strftime", "(", "\"%m_%d_%H-%M-%S\"", ")", "\n", "", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "opt", "[", "'log_dir'", "]", ",", "'log.'", "+", "model_id", "+", "'.txt'", ")", ")", "\n", "\n", "# initialize", "\n", "checkpoint_dir", "=", "osp", ".", "join", "(", "opt", "[", "'checkpoint_dir'", "]", ",", "model_id", ")", "\n", "mkdir_if_missing", "(", "checkpoint_dir", ")", "\n", "\n", "# check gpu", "\n", "assert", "opt", "[", "'gpus'", "]", "is", "not", "None", "\n", "\n", "# set random seed", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "random", ".", "seed", "(", "opt", "[", "'seed'", "]", ")", "\n", "np", ".", "random", ".", "seed", "(", "opt", "[", "'seed'", "]", ")", "\n", "torch", ".", "manual_seed", "(", "opt", "[", "'seed'", "]", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "opt", "[", "'seed'", "]", ")", "\n", "\n", "\n", "# load imdb", "\n", "train_refdb", "=", "get_db", "(", "'refvg_train_'", "+", "opt", "[", "'model_method'", "]", ")", "\n", "vocab", "=", "train_refdb", ".", "load_dictionary", "(", ")", "\n", "opt", "[", "'vocab_size'", "]", "=", "len", "(", "vocab", ")", "\n", "val_refdb", "=", "get_db", "(", "'refvg_val_'", "+", "opt", "[", "'model_method'", "]", ")", "\n", "\n", "# model, criterion, optimizer", "\n", "model", "=", "SGReason", "(", "opt", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "criterion", "=", "SoftmaxLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", "+", "list", "(", "criterion", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", "[", "'learning_rate'", "]", ",", "\n", "betas", "=", "(", "opt", "[", "'optim_alpha'", "]", ",", "opt", "[", "'optim_beta'", "]", ")", ",", "\n", "eps", "=", "opt", "[", "'optim_epsilon'", "]", ")", "\n", "\n", "scheduler", "=", "ReduceLROnPlateau", "(", "optimizer", ",", "factor", "=", "0.1", ",", "\n", "patience", "=", "3", ",", "mode", "=", "'max'", ")", "\n", "\n", "if", "opt", "[", "'evaluate'", "]", ":", "\n", "        ", "if", "osp", ".", "isfile", "(", "opt", "[", "'model'", "]", ")", ":", "\n", "            ", "model", ",", "criterion", "=", "load_checkpoint", "(", "model", ",", "criterion", ",", "opt", "[", "'model'", "]", ")", "\n", "test_refdb", "=", "get_db", "(", "'refvg_test_'", "+", "opt", "[", "'model_method'", "]", ")", "\n", "test_dataset", "=", "RefDataset", "(", "test_refdb", ",", "vocab", ",", "opt", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "opt", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "opt", "[", "'workers'", "]", ",", "pin_memory", "=", "True", ")", "\n", "test_loss", ",", "test_prec", "=", "validate", "(", "test_loader", ",", "model", ",", "criterion", ")", "\n", "print", "(", "test_loss", ",", "test_prec", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "opt", "[", "'model'", "]", ")", ")", "\n", "", "return", "\n", "\n", "# start training", "\n", "", "epoch_cur", "=", "0", "\n", "train_dataset", "=", "RefDataset", "(", "train_refdb", ",", "vocab", ",", "opt", ")", "\n", "val_dataset", "=", "RefDataset", "(", "val_refdb", ",", "vocab", ",", "opt", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "opt", "[", "'batch_size'", "]", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "opt", "[", "'workers'", "]", ",", "pin_memory", "=", "True", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "opt", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "opt", "[", "'workers'", "]", ",", "pin_memory", "=", "True", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "epoch_cur", ",", "opt", "[", "'max_epochs'", "]", ")", ":", "\n", "        ", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", "\n", "val_loss", ",", "prec", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ")", "\n", "scheduler", ".", "step", "(", "prec", ")", "\n", "for", "i", ",", "param_group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "print", "(", "float", "(", "param_group", "[", "'lr'", "]", ")", ")", "\n", "\n", "", "is_best", "=", "prec", ">=", "best_prec", "\n", "best_prec", "=", "max", "(", "best_prec", ",", "prec", ")", "\n", "save_checkpoint", "(", "{", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'crit_state_dict'", ":", "criterion", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "}", ",", "is_best", ",", "checkpoint_dir", ",", "str", "(", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.train": [[113, 177], ["utils.meter.AverageMeter", "model.train", "criterion.train", "enumerate", "len", "model", "criterion", "utils.meter.AverageMeter.update", "utils.to_numpy", "utils.to_numpy", "numpy.argmax", "utils.to_numpy", "range", "optimizer.zero_grad", "loss.backward", "models.model_utils.clip_gradient", "optimizer.step", "box.cuda.cuda", "cls.cuda.cuda", "feature.cuda.cuda", "lfeat.cuda.cuda", "sents.cuda.cuda", "sents_gt.cuda.cuda", "seq.cuda.cuda", "seq_weight.cuda.cuda", "seq_type.cuda.cuda", "seq_rel.cuda.cuda", "com_mask.cuda.cuda", "cxt_idx.cuda.cuda", "cxt_idx_mask.cuda.cuda", "cxt_lfeats.cuda.cuda", "loss.item", "model.detach", "pred_gt_same.append", "pred_gt_same.append", "print", "numpy.sum", "float", "len"], "function", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.train", "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.train", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.update", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.sibeiyang_sgmn.models.model_utils.clip_gradient"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "global", "opt", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "criterion", ".", "train", "(", ")", "\n", "\n", "step", "=", "epoch", "*", "len", "(", "train_loader", ")", "\n", "pred_gt_same", "=", "[", "]", "\n", "for", "i", ",", "(", "box", ",", "cls", ",", "feature", ",", "lfeat", ",", "\n", "sents", ",", "sents_gt", ",", "gt_boxes", ",", "img_ids", ",", "sent_ids", ",", "\n", "seq", ",", "seq_weight", ",", "seq_type", ",", "seq_rel", ",", "com_mask", ",", "\n", "cxt_idx", ",", "cxt_idx_mask", ",", "cxt_lfeats", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "        ", "step", "+=", "1", "\n", "if", "opt", "[", "'gpus'", "]", "is", "not", "None", ":", "\n", "            ", "box", "=", "box", ".", "cuda", "(", ")", "\n", "cls", "=", "cls", ".", "cuda", "(", ")", "\n", "feature", "=", "feature", ".", "cuda", "(", ")", "\n", "lfeat", "=", "lfeat", ".", "cuda", "(", ")", "\n", "sents", "=", "sents", ".", "cuda", "(", ")", "\n", "sents_gt", "=", "sents_gt", ".", "cuda", "(", ")", "\n", "seq", "=", "seq", ".", "cuda", "(", ")", "\n", "seq_weight", "=", "seq_weight", ".", "cuda", "(", ")", "\n", "seq_type", "=", "seq_type", ".", "cuda", "(", ")", "\n", "seq_rel", "=", "seq_rel", ".", "cuda", "(", ")", "\n", "com_mask", "=", "com_mask", ".", "cuda", "(", ")", "\n", "cxt_idx", "=", "cxt_idx", ".", "cuda", "(", ")", "\n", "cxt_idx_mask", "=", "cxt_idx_mask", ".", "cuda", "(", ")", "\n", "cxt_lfeats", "=", "cxt_lfeats", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "", "score", "=", "model", "(", "feature", ",", "cls", ",", "lfeat", ",", "\n", "seq", ",", "seq_weight", ",", "seq_type", ",", "seq_rel", ",", "com_mask", ",", "\n", "cxt_idx", ",", "cxt_idx_mask", ",", "cxt_lfeats", ")", "\n", "loss", ",", "score", "=", "criterion", "(", "score", ",", "cls", ",", "sents_gt", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "cls", "=", "to_numpy", "(", "cls", ")", "\n", "final_score", "=", "to_numpy", "(", "score", ".", "detach", "(", ")", ")", "\n", "final_score", "[", "cls", "==", "-", "1", "]", "=", "-", "999", "\n", "pred_ind", "=", "np", ".", "argmax", "(", "final_score", ",", "1", ")", "\n", "sents_gt", "=", "to_numpy", "(", "sents_gt", ")", "\n", "for", "j", "in", "range", "(", "pred_ind", ".", "size", ")", ":", "\n", "            ", "if", "sents_gt", "[", "j", "]", "==", "pred_ind", "[", "j", "]", ":", "\n", "                ", "pred_gt_same", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "pred_gt_same", ".", "append", "(", "0", ")", "\n", "\n", "# compute gradient and do Adam step", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "clip_gradient", "(", "optimizer", ",", "opt", "[", "'grad_clip'", "]", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "if", "i", "!=", "0", ":", "\n", "                ", "same", "=", "np", ".", "sum", "(", "pred_gt_same", "[", "-", "args", ".", "print_freq", "*", "opt", "[", "'batch_size'", "]", ":", "]", ")", "/", "float", "(", "args", ".", "print_freq", "*", "opt", "[", "'batch_size'", "]", ")", "\n", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec {same:.4f}'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "loss", "=", "losses", ",", "same", "=", "same", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools.train.validate": [[179, 244], ["utils.meter.AverageMeter", "model.eval", "criterion.eval", "torch.no_grad", "torch.no_grad", "enumerate", "print", "model", "criterion", "utils.meter.AverageMeter.update", "utils.to_numpy", "utils.to_numpy", "numpy.argmax", "utils.to_numpy", "range", "numpy.sum", "float", "box.cuda.cuda", "cls.cuda.cuda", "feature.cuda.cuda", "lfeat.cuda.cuda", "sents.cuda.cuda", "sents_gt.cuda.cuda", "seq.cuda.cuda", "seq_weight.cuda.cuda", "seq_type.cuda.cuda", "seq_rel.cuda.cuda", "com_mask.cuda.cuda", "cxt_idx.cuda.cuda", "cxt_idx_mask.cuda.cuda", "cxt_lfeats.cuda.cuda", "loss.item", "model.detach", "len", "pred_gt_same.append", "pred_gt_same.append", "print", "numpy.sum", "float", "len"], "function", ["home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.meter.AverageMeter.update", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.sibeiyang_sgmn.utils.__init__.to_numpy"], ["", "", "", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", "=", "-", "1", ")", ":", "\n", "    ", "global", "opt", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to eval mode", "\n", "model", ".", "eval", "(", ")", "\n", "criterion", ".", "eval", "(", ")", "\n", "\n", "pred_gt_same", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "box", ",", "cls", ",", "feature", ",", "lfeat", ",", "\n", "sents", ",", "sents_gt", ",", "gt_boxes", ",", "img_ids", ",", "sent_ids", ",", "\n", "seq", ",", "seq_weight", ",", "seq_type", ",", "seq_rel", ",", "com_mask", ",", "\n", "cxt_idx", ",", "cxt_idx_mask", ",", "cxt_lfeats", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "\n", "            ", "if", "opt", "[", "'gpus'", "]", "is", "not", "None", ":", "\n", "                ", "box", "=", "box", ".", "cuda", "(", ")", "\n", "cls", "=", "cls", ".", "cuda", "(", ")", "\n", "feature", "=", "feature", ".", "cuda", "(", ")", "\n", "lfeat", "=", "lfeat", ".", "cuda", "(", ")", "\n", "sents", "=", "sents", ".", "cuda", "(", ")", "\n", "sents_gt", "=", "sents_gt", ".", "cuda", "(", ")", "\n", "seq", "=", "seq", ".", "cuda", "(", ")", "\n", "seq_weight", "=", "seq_weight", ".", "cuda", "(", ")", "\n", "seq_type", "=", "seq_type", ".", "cuda", "(", ")", "\n", "seq_rel", "=", "seq_rel", ".", "cuda", "(", ")", "\n", "com_mask", "=", "com_mask", ".", "cuda", "(", ")", "\n", "cxt_idx", "=", "cxt_idx", ".", "cuda", "(", ")", "\n", "cxt_idx_mask", "=", "cxt_idx_mask", ".", "cuda", "(", ")", "\n", "cxt_lfeats", "=", "cxt_lfeats", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "", "score", "=", "model", "(", "feature", ",", "cls", ",", "lfeat", ",", "\n", "seq", ",", "seq_weight", ",", "seq_type", ",", "seq_rel", ",", "com_mask", ",", "\n", "cxt_idx", ",", "cxt_idx_mask", ",", "cxt_lfeats", ")", "\n", "\n", "loss", ",", "score", "=", "criterion", "(", "score", ",", "cls", ",", "sents_gt", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "cls", "=", "to_numpy", "(", "cls", ")", "\n", "final_score", "=", "to_numpy", "(", "score", ".", "detach", "(", ")", ")", "\n", "final_score", "[", "cls", "==", "-", "1", "]", "=", "-", "999", "\n", "pred_ind", "=", "np", ".", "argmax", "(", "final_score", ",", "1", ")", "\n", "sents_gt", "=", "to_numpy", "(", "sents_gt", ")", "\n", "for", "j", "in", "range", "(", "pred_ind", ".", "size", ")", ":", "\n", "                ", "if", "sents_gt", "[", "j", "]", "==", "pred_ind", "[", "j", "]", ":", "\n", "                    ", "pred_gt_same", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "pred_gt_same", ".", "append", "(", "0", ")", "\n", "\n", "", "", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "if", "i", "!=", "0", ":", "\n", "                    ", "same", "=", "np", ".", "sum", "(", "pred_gt_same", "[", "-", "args", ".", "print_freq", "*", "opt", "[", "'batch_size'", "]", ":", "]", ")", "/", "float", "(", "\n", "args", ".", "print_freq", "*", "opt", "[", "'batch_size'", "]", ")", "\n", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec {same:.4f}'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "val_loader", ")", ",", "loss", "=", "losses", ",", "same", "=", "same", ")", ")", "\n", "\n", "", "", "", "same", "=", "np", ".", "sum", "(", "pred_gt_same", ")", "/", "float", "(", "len", "(", "pred_gt_same", ")", ")", "\n", "print", "(", "'Epoch: [{0}]\\t'", "\n", "'Loss {1:.4f}\\t'", "\n", "'Prec {2:.4f}'", ".", "format", "(", "epoch", ",", "losses", ".", "avg", ",", "same", ")", ")", "\n", "\n", "", "return", "losses", ".", "avg", ",", "same", "\n", "\n"]], "home.repos.pwc.inspect_result.sibeiyang_sgmn.tools._init_paths.add_path": [[5, 8], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]]}