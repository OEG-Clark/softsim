{"home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.html.HTML.__init__": [[7, 21], ["os.path.join", "dominate.document", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "meta", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "reflesh", "=", "0", ")", ":", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "# print(self.img_dir)", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "if", "reflesh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"reflesh\"", ",", "content", "=", "str", "(", "reflesh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.html.HTML.get_image_dir": [[22, 24], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.html.HTML.add_header": [[25, 28], ["h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.html.HTML.add_table": [[29, 32], ["table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.html.HTML.add_images": [[33, 44], ["html.HTML.add_table", "tr", "zip", "td", "p", "br", "p", "a", "img", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.html.HTML.add_table"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "400", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "width", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.html.HTML.save": [[45, 50], ["open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["None"], ["", "", "", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "html_file", "=", "'%s/index.html'", "%", "self", ".", "web_dir", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.png.encode": [[4, 33], ["len", "range", "struct.pack", "struct.pack", "png.encode.chunk"], "function", ["None"], ["def", "encode", "(", "buf", ",", "width", ",", "height", ")", ":", "\n", "  ", "\"\"\" buf: must be bytes or a bytearray in py3, a regular string in py2. formatted RGBRGB... \"\"\"", "\n", "assert", "(", "width", "*", "height", "*", "3", "==", "len", "(", "buf", ")", ")", "\n", "bpp", "=", "3", "\n", "\n", "def", "raw_data", "(", ")", ":", "\n", "# reverse the vertical line order and add null bytes at the start", "\n", "    ", "row_bytes", "=", "width", "*", "bpp", "\n", "for", "row_start", "in", "range", "(", "(", "height", "-", "1", ")", "*", "width", "*", "bpp", ",", "-", "1", ",", "-", "row_bytes", ")", ":", "\n", "      ", "yield", "b'\\x00'", "\n", "yield", "buf", "[", "row_start", ":", "row_start", "+", "row_bytes", "]", "\n", "\n", "", "", "def", "chunk", "(", "tag", ",", "data", ")", ":", "\n", "    ", "return", "[", "\n", "struct", ".", "pack", "(", "\"!I\"", ",", "len", "(", "data", ")", ")", ",", "\n", "tag", ",", "\n", "data", ",", "\n", "struct", ".", "pack", "(", "\"!I\"", ",", "0xFFFFFFFF", "&", "zlib", ".", "crc32", "(", "data", ",", "zlib", ".", "crc32", "(", "tag", ")", ")", ")", "\n", "]", "\n", "\n", "", "SIGNATURE", "=", "b'\\x89PNG\\r\\n\\x1a\\n'", "\n", "COLOR_TYPE_RGB", "=", "2", "\n", "COLOR_TYPE_RGBA", "=", "6", "\n", "bit_depth", "=", "8", "\n", "return", "b''", ".", "join", "(", "\n", "[", "SIGNATURE", "]", "+", "\n", "chunk", "(", "b'IHDR'", ",", "struct", ".", "pack", "(", "\"!2I5B\"", ",", "width", ",", "height", ",", "bit_depth", ",", "COLOR_TYPE_RGB", ",", "0", ",", "0", ",", "0", ")", ")", "+", "\n", "chunk", "(", "b'IDAT'", ",", "zlib", ".", "compress", "(", "b''", ".", "join", "(", "raw_data", "(", ")", ")", ",", "9", ")", ")", "+", "\n", "chunk", "(", "b'IEND'", ",", "b''", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.image_pool.ImagePool.__init__": [[6, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "self", ".", "pool_size", "=", "pool_size", "\n", "if", "self", ".", "pool_size", ">", "0", ":", "\n", "            ", "self", ".", "num_imgs", "=", "0", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.image_pool.ImagePool.query": [[12, 33], ["torch.autograd.Variable", "torch.unsqueeze", "torch.cat", "image_pool.ImagePool.images.append", "torch.autograd.Variable.append", "random.uniform", "random.randint", "image_pool.ImagePool.images[].clone", "torch.autograd.Variable.append", "torch.autograd.Variable.append"], "methods", ["None"], ["", "", "def", "query", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "self", ".", "pool_size", "==", "0", ":", "\n", "            ", "return", "images", "\n", "", "return_images", "=", "[", "]", "\n", "for", "image", "in", "images", ".", "data", ":", "\n", "            ", "image", "=", "torch", ".", "unsqueeze", "(", "image", ",", "0", ")", "\n", "if", "self", ".", "num_imgs", "<", "self", ".", "pool_size", ":", "\n", "                ", "self", ".", "num_imgs", "=", "self", ".", "num_imgs", "+", "1", "\n", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "return_images", ".", "append", "(", "image", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "p", ">", "0.5", ":", "\n", "                    ", "random_id", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "pool_size", "-", "1", ")", "\n", "tmp", "=", "self", ".", "images", "[", "random_id", "]", ".", "clone", "(", ")", "\n", "self", ".", "images", "[", "random_id", "]", "=", "image", "\n", "return_images", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                    ", "return_images", ".", "append", "(", "image", ")", "\n", "", "", "", "return_images", "=", "Variable", "(", "torch", ".", "cat", "(", "return_images", ",", "0", ")", ")", "\n", "return", "return_images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.visualizer.Visualizer.__init__": [[9, 29], ["os.path.join", "visdom.Visdom", "os.path.join", "os.path.join", "print", "util.mkdirs", "open", "time.strftime", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.mkdirs"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "# self.opt = opt", "\n", "        ", "self", ".", "display_id", "=", "opt", ".", "display_id", "\n", "self", ".", "use_html", "=", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "if", "self", ".", "display_id", ">", "0", ":", "\n", "            ", "import", "visdom", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "port", "=", "opt", ".", "display_port", ")", "\n", "self", ".", "display_single_pane_ncols", "=", "opt", ".", "display_single_pane_ncols", "\n", "\n", "", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "self", ".", "img_dir", "]", ")", "\n", "", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.visualizer.Visualizer.display_current_results": [[31, 93], ["visuals.items", "html.HTML", "range", "html.HTML.save", "int", "visuals.items", "visualizer.Visualizer.vis.images", "visualizer.Visualizer.vis.text", "visuals.items", "os.path.join", "util.save_image", "html.HTML.add_header", "visuals.items", "html.HTML.add_images", "numpy.ceil", "images.append", "numpy.ones_like", "images.append", "visualizer.Visualizer.vis.image", "ims.append", "txts.append", "links.append", "next", "image_numpy.transpose", "image_numpy.transpose", "dict", "dict", "image_numpy.transpose", "iter", "len", "dict", "visuals.values", "visuals.items"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.save_image", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.html.HTML.add_header", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.html.HTML.add_images"], ["", "", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "display_id", ">", "0", ":", "# show images in the browser", "\n", "            ", "if", "self", ".", "display_single_pane_ncols", ">", "0", ":", "\n", "                ", "h", ",", "w", "=", "next", "(", "iter", "(", "visuals", ".", "values", "(", ")", ")", ")", ".", "shape", "[", ":", "2", "]", "\n", "table_css", "=", "\"\"\"<style>\n    table {border-collapse: separate; border-spacing:4px; white-space:nowrap; text-align:center}\n    table td {width: %dpx; height: %dpx; padding: 4px; outline: 4px solid black}\n</style>\"\"\"", "%", "(", "w", ",", "h", ")", "\n", "ncols", "=", "self", ".", "display_single_pane_ncols", "\n", "title", "=", "self", ".", "name", "\n", "label_html", "=", "''", "\n", "label_html_row", "=", "''", "\n", "nrows", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "visuals", ".", "items", "(", ")", ")", "/", "ncols", ")", ")", "\n", "images", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "label_html_row", "+=", "'<td>%s</td>'", "%", "label", "\n", "images", ".", "append", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "\n", "idx", "+=", "1", "\n", "if", "idx", "%", "ncols", "==", "0", ":", "\n", "                        ", "label_html", "+=", "'<tr>%s</tr>'", "%", "label_html_row", "\n", "label_html_row", "=", "''", "\n", "", "", "white_image", "=", "np", ".", "ones_like", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "*", "255", "\n", "while", "idx", "%", "ncols", "!=", "0", ":", "\n", "                    ", "images", ".", "append", "(", "white_image", ")", "\n", "label_html_row", "+=", "'<td></td>'", "\n", "idx", "+=", "1", "\n", "", "if", "label_html_row", "!=", "''", ":", "\n", "                    ", "label_html", "+=", "'<tr>%s</tr>'", "%", "label_html_row", "\n", "# pane col = image row", "\n", "", "self", ".", "vis", ".", "images", "(", "images", ",", "nrow", "=", "ncols", ",", "win", "=", "self", ".", "display_id", "+", "1", ",", "\n", "padding", "=", "2", ",", "opts", "=", "dict", "(", "title", "=", "title", "+", "' images'", ")", ")", "\n", "label_html", "=", "'<table>%s</table>'", "%", "label_html", "\n", "self", ".", "vis", ".", "text", "(", "table_css", "+", "label_html", ",", "win", "=", "self", ".", "display_id", "+", "2", ",", "\n", "opts", "=", "dict", "(", "title", "=", "title", "+", "' labels'", ")", ")", "\n", "", "else", ":", "\n", "                ", "idx", "=", "1", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "#image_numpy = np.flipud(image_numpy)", "\n", "                    ", "self", ".", "vis", ".", "image", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ",", "opts", "=", "dict", "(", "title", "=", "label", ")", ",", "\n", "win", "=", "self", ".", "display_id", "+", "idx", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "", "", "if", "self", ".", "use_html", ":", "# save images to a html file", "\n", "            ", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s.png'", "%", "(", "epoch", ",", "label", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "img_path", ")", "\n", "# update website", "\n", "", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "reflesh", "=", "1", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "img_path", "=", "'epoch%.3d_%s.png'", "%", "(", "n", ",", "label", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.visualizer.Visualizer.plot_current_errors": [[95, 109], ["visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.vis.line", "hasattr", "list", "numpy.stack", "numpy.array", "errors.keys", "len", "numpy.array"], "methods", ["None"], ["", "", "def", "plot_current_errors", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "opt", ",", "errors", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_data'", ")", ":", "\n", "            ", "self", ".", "plot_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "errors", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_data", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "self", ".", "plot_data", "[", "'Y'", "]", ".", "append", "(", "[", "errors", "[", "k", "]", "for", "k", "in", "self", ".", "plot_data", "[", "'legend'", "]", "]", ")", "\n", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'X'", "]", ")", "]", "*", "len", "(", "self", ".", "plot_data", "[", "'legend'", "]", ")", ",", "1", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'Y'", "]", ")", ",", "\n", "opts", "=", "{", "\n", "'title'", ":", "self", ".", "name", "+", "' loss over time'", ",", "\n", "'legend'", ":", "self", ".", "plot_data", "[", "'legend'", "]", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'loss'", "}", ",", "\n", "win", "=", "self", ".", "display_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.visualizer.Visualizer.print_current_errors": [[111, 120], ["errors.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "def", "print_current_errors", "(", "self", ",", "epoch", ",", "i", ",", "errors", ",", "t", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f) '", "%", "(", "epoch", ",", "i", ",", "t", ")", "\n", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", ":", "\n", "            ", "v", "=", "[", "'%.3f'", "%", "iv", "for", "iv", "in", "v", "]", "\n", "message", "+=", "k", "+", "': '", "+", "', '", ".", "join", "(", "v", ")", "+", "' | '", "\n", "\n", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.visualizer.Visualizer.save_images": [[122, 141], ["webpage.get_image_dir", "ntpath.basename", "webpage.add_header", "visuals.items", "webpage.add_images", "os.path.splitext", "os.path.join", "util.save_image", "ims.append", "txts.append", "links.append"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.html.HTML.add_header", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.html.HTML.add_images", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.save_image"], ["", "", "def", "save_images", "(", "self", ",", "webpage", ",", "visuals", ",", "image_path", ")", ":", "\n", "        ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "image_path", "[", "0", "]", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "\n", "webpage", ".", "add_header", "(", "name", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "image_name", "=", "'%s_%s.png'", "%", "(", "name", ",", "label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.visualizer.Visualizer.save_image_matrix": [[142, 161], ["visualizer.Visualizer.stack_images", "util.save_image", "list", "get_domain", "x.split", "visuals.items", "get_domain", "images_list.append", "images_list.append"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.visualizer.Visualizer.stack_images", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.save_image"], ["", "def", "save_image_matrix", "(", "self", ",", "visuals_list", ",", "save_path", ")", ":", "\n", "        ", "images_list", "=", "[", "]", "\n", "get_domain", "=", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "\n", "for", "visuals", "in", "visuals_list", ":", "\n", "            ", "pairs", "=", "list", "(", "visuals", ".", "items", "(", ")", ")", "\n", "real_label", ",", "real_img", "=", "pairs", "[", "0", "]", "\n", "real_dom", "=", "get_domain", "(", "real_label", ")", "\n", "\n", "for", "label", ",", "img", "in", "pairs", ":", "\n", "                ", "if", "'fake'", "not", "in", "label", ":", "\n", "                    ", "continue", "\n", "", "if", "get_domain", "(", "label", ")", "==", "real_dom", ":", "\n", "                    ", "images_list", ".", "append", "(", "real_img", ")", "\n", "", "else", ":", "\n", "                    ", "images_list", ".", "append", "(", "img", ")", "\n", "\n", "", "", "", "immat", "=", "self", ".", "stack_images", "(", "images_list", ")", "\n", "util", ".", "save_image", "(", "immat", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.visualizer.Visualizer.stack_images": [[163, 178], ["int", "enumerate", "numpy.array", "data.reshape.reshape.reshape().transpose", "data.reshape.reshape.reshape", "numpy.ceil", "numpy.pad", "numpy.pad", "numpy.pad", "numpy.stack", "numpy.sqrt", "data.reshape.reshape.reshape", "tuple", "len", "range"], "methods", ["None"], ["", "def", "stack_images", "(", "self", ",", "list_np_images", ")", ":", "\n", "        ", "n", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "len", "(", "list_np_images", ")", ")", ")", ")", "\n", "\n", "# add padding between images", "\n", "for", "i", ",", "im", "in", "enumerate", "(", "list_np_images", ")", ":", "\n", "            ", "val", "=", "255", "if", "i", "%", "n", "==", "i", "//", "n", "else", "0", "\n", "r_pad", "=", "np", ".", "pad", "(", "im", "[", ":", ",", ":", ",", "0", "]", ",", "(", "3", ",", "3", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "g_pad", "=", "np", ".", "pad", "(", "im", "[", ":", ",", ":", ",", "1", "]", ",", "(", "3", ",", "3", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "val", ")", "\n", "b_pad", "=", "np", ".", "pad", "(", "im", "[", ":", ",", ":", ",", "2", "]", ",", "(", "3", ",", "3", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "list_np_images", "[", "i", "]", "=", "np", ".", "stack", "(", "[", "r_pad", ",", "g_pad", ",", "b_pad", "]", ",", "axis", "=", "2", ")", "\n", "\n", "", "data", "=", "np", ".", "array", "(", "list_np_images", ")", "\n", "data", "=", "data", ".", "reshape", "(", "(", "n", ",", "n", ")", "+", "data", ".", "shape", "[", "1", ":", "]", ")", ".", "transpose", "(", "(", "0", ",", "2", ",", "1", ",", "3", ")", "+", "tuple", "(", "range", "(", "4", ",", "data", ".", "ndim", "+", "1", ")", ")", ")", "\n", "data", "=", "data", ".", "reshape", "(", "(", "n", "*", "data", ".", "shape", "[", "1", "]", ",", "n", "*", "data", ".", "shape", "[", "3", "]", ")", "+", "data", ".", "shape", "[", "4", ":", "]", ")", "\n", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.get_data.GetData.__init__": [[29, 36], ["url_dict.get", "technique.lower"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.get_data.GetData.get"], ["def", "__init__", "(", "self", ",", "technique", "=", "'cyclegan'", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "url_dict", "=", "{", "\n", "'pix2pix'", ":", "'https://people.eecs.berkeley.edu/~tinghuiz/projects/pix2pix/datasets'", ",", "\n", "'cyclegan'", ":", "'https://people.eecs.berkeley.edu/~taesung_park/CycleGAN/datasets'", "\n", "}", "\n", "self", ".", "url", "=", "url_dict", ".", "get", "(", "technique", ".", "lower", "(", ")", ")", "\n", "self", ".", "_verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.get_data.GetData._print": [[37, 40], ["print"], "methods", ["None"], ["", "def", "_print", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "self", ".", "_verbose", ":", "\n", "            ", "print", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.get_data.GetData._get_options": [[41, 47], ["bs4.BeautifulSoup", "bs4.BeautifulSoup.find_all", "h.text.endswith"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_get_options", "(", "r", ")", ":", "\n", "        ", "soup", "=", "BeautifulSoup", "(", "r", ".", "text", ",", "'lxml'", ")", "\n", "options", "=", "[", "h", ".", "text", "for", "h", "in", "soup", ".", "find_all", "(", "'a'", ",", "href", "=", "True", ")", "\n", "if", "h", ".", "text", ".", "endswith", "(", "(", "'.zip'", ",", "'tar.gz'", ")", ")", "]", "\n", "return", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.get_data.GetData._present_options": [[48, 57], ["requests.get", "get_data.GetData._get_options", "print", "enumerate", "input", "print", "int"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.get_data.GetData.get", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.get_data.GetData._get_options"], ["", "def", "_present_options", "(", "self", ")", ":", "\n", "        ", "r", "=", "requests", ".", "get", "(", "self", ".", "url", ")", "\n", "options", "=", "self", ".", "_get_options", "(", "r", ")", "\n", "print", "(", "'Options:\\n'", ")", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "options", ")", ":", "\n", "            ", "print", "(", "\"{0}: {1}\"", ".", "format", "(", "i", ",", "o", ")", ")", "\n", "", "choice", "=", "input", "(", "\"\\nPlease enter the number of the \"", "\n", "\"dataset above you wish to download:\"", ")", "\n", "return", "options", "[", "int", "(", "choice", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.get_data.GetData._download_data": [[58, 80], ["os.path.basename", "os.path.join", "os.path.basename.endswith", "get_data.GetData._print", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "os.remove", "os.path.isdir", "os.makedirs", "open", "requests.get", "f.write", "tarfile.open", "os.path.basename.endswith", "zipfile.ZipFile", "ValueError"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.get_data.GetData._print", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.get_data.GetData.get"], ["", "def", "_download_data", "(", "self", ",", "dataset_url", ",", "save_path", ")", ":", "\n", "        ", "if", "not", "isdir", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "base", "=", "basename", "(", "dataset_url", ")", "\n", "temp_save_path", "=", "join", "(", "save_path", ",", "base", ")", "\n", "\n", "with", "open", "(", "temp_save_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "r", "=", "requests", ".", "get", "(", "dataset_url", ")", "\n", "f", ".", "write", "(", "r", ".", "content", ")", "\n", "\n", "", "if", "base", ".", "endswith", "(", "'.tar.gz'", ")", ":", "\n", "            ", "obj", "=", "tarfile", ".", "open", "(", "temp_save_path", ")", "\n", "", "elif", "base", ".", "endswith", "(", "'.zip'", ")", ":", "\n", "            ", "obj", "=", "ZipFile", "(", "temp_save_path", ",", "'r'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown File Type: {0}.\"", ".", "format", "(", "base", ")", ")", "\n", "\n", "", "self", ".", "_print", "(", "\"Unpacking Data...\"", ")", "\n", "obj", ".", "extractall", "(", "save_path", ")", "\n", "obj", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "temp_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.get_data.GetData.get": [[81, 116], ["os.path.join", "os.path.isdir", "os.path.abspath", "get_data.GetData._present_options", "warnings.warn", "get_data.GetData._print", "get_data.GetData._download_data", "get_data.GetData.split"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.get_data.GetData._present_options", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.get_data.GetData._print", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.get_data.GetData._download_data"], ["", "def", "get", "(", "self", ",", "save_path", ",", "dataset", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Download a dataset.\n\n        Args:\n            save_path : str\n                A directory to save the data to.\n            dataset : str, optional\n                A specific dataset to download.\n                Note: this must include the file extension.\n                If None, options will be presented for you\n                to choose from.\n\n        Returns:\n            save_path_full : str\n                The absolute path to the downloaded data.\n\n        \"\"\"", "\n", "if", "dataset", "is", "None", ":", "\n", "            ", "selected_dataset", "=", "self", ".", "_present_options", "(", ")", "\n", "", "else", ":", "\n", "            ", "selected_dataset", "=", "dataset", "\n", "\n", "", "save_path_full", "=", "join", "(", "save_path", ",", "selected_dataset", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n", "if", "isdir", "(", "save_path_full", ")", ":", "\n", "            ", "warn", "(", "\"\\n'{0}' already exists. Voiding Download.\"", ".", "format", "(", "\n", "save_path_full", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_print", "(", "'Downloading Data...'", ")", "\n", "url", "=", "\"{0}/{1}\"", ".", "format", "(", "self", ".", "url", ",", "selected_dataset", ")", "\n", "self", ".", "_download_data", "(", "url", ",", "save_path", "=", "save_path", ")", "\n", "\n", "", "return", "abspath", "(", "save_path_full", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.tensor2im": [[12, 16], ["image_tensor[].cpu().float().numpy", "image_tensor[].cpu().float().numpy.astype", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.gkern_2d": [[17, 24], ["numpy.zeros", "scipy.ndimage.filters.gaussian_filter", "numpy.stack", "numpy.expand_dims"], "function", ["None"], ["", "def", "gkern_2d", "(", "size", "=", "5", ",", "sigma", "=", "3", ")", ":", "\n", "# Create 2D gaussian kernel", "\n", "    ", "dirac", "=", "np", ".", "zeros", "(", "(", "size", ",", "size", ")", ")", "\n", "dirac", "[", "size", "//", "2", ",", "size", "//", "2", "]", "=", "1", "\n", "mask", "=", "gaussian_filter", "(", "dirac", ",", "sigma", ")", "\n", "# Adjust dimensions for torch conv2d", "\n", "return", "np", ".", "stack", "(", "[", "np", ".", "expand_dims", "(", "mask", ",", "axis", "=", "0", ")", "]", "*", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.diagnose_network": [[26, 37], ["net.parameters", "print", "print", "torch.mean", "torch.abs"], "function", ["None"], ["", "def", "diagnose_network", "(", "net", ",", "name", "=", "'network'", ")", ":", "\n", "    ", "mean", "=", "0.0", "\n", "count", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "mean", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "param", ".", "grad", ".", "data", ")", ")", "\n", "count", "+=", "1", "\n", "", "", "if", "count", ">", "0", ":", "\n", "        ", "mean", "=", "mean", "/", "count", "\n", "", "print", "(", "name", ")", "\n", "print", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.save_image": [[39, 42], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ")", ":", "\n", "    ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.info": [[43, 52], ["print", "dir", "isinstance", "getattr", "s.split", "method.ljust", "processFunc", "str", "getattr"], "function", ["None"], ["", "def", "info", "(", "object", ",", "spacing", "=", "10", ",", "collapse", "=", "1", ")", ":", "\n", "    ", "\"\"\"Print methods and doc strings.\n    Takes module, class, list, dictionary, or string.\"\"\"", "\n", "methodList", "=", "[", "e", "for", "e", "in", "dir", "(", "object", ")", "if", "isinstance", "(", "getattr", "(", "object", ",", "e", ")", ",", "collections", ".", "Callable", ")", "]", "\n", "processFunc", "=", "collapse", "and", "(", "lambda", "s", ":", "\" \"", ".", "join", "(", "s", ".", "split", "(", ")", ")", ")", "or", "(", "lambda", "s", ":", "s", ")", "\n", "print", "(", "\"\\n\"", ".", "join", "(", "[", "\"%s %s\"", "%", "\n", "(", "method", ".", "ljust", "(", "spacing", ")", ",", "\n", "processFunc", "(", "str", "(", "getattr", "(", "object", ",", "method", ")", ".", "__doc__", ")", ")", ")", "\n", "for", "method", "in", "methodList", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.varname": [[53, 58], ["inspect.getframeinfo", "re.search", "re.search.group", "inspect.currentframe"], "function", ["None"], ["", "def", "varname", "(", "p", ")", ":", "\n", "    ", "for", "line", "in", "inspect", ".", "getframeinfo", "(", "inspect", ".", "currentframe", "(", ")", ".", "f_back", ")", "[", "3", "]", ":", "\n", "        ", "m", "=", "re", ".", "search", "(", "r'\\bvarname\\s*\\(\\s*([A-Za-z_][A-Za-z0-9_]*)\\s*\\)'", ",", "line", ")", "\n", "if", "m", ":", "\n", "            ", "return", "m", ".", "group", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.print_numpy": [[59, 67], ["x.flatten.astype", "print", "x.flatten.flatten", "print", "numpy.mean", "numpy.min", "numpy.max", "numpy.median", "numpy.std"], "function", ["None"], ["", "", "", "def", "print_numpy", "(", "x", ",", "val", "=", "True", ",", "shp", "=", "False", ")", ":", "\n", "    ", "x", "=", "x", ".", "astype", "(", "np", ".", "float64", ")", "\n", "if", "shp", ":", "\n", "        ", "print", "(", "'shape,'", ",", "x", ".", "shape", ")", "\n", "", "if", "val", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", ")", "\n", "print", "(", "'mean = %3.3f, min = %3.3f, max = %3.3f, median = %3.3f, std=%3.3f'", "%", "(", "\n", "np", ".", "mean", "(", "x", ")", ",", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "median", "(", "x", ")", ",", "np", ".", "std", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.mkdirs": [[69, 75], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.mkdir", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.mkdir": [[77, 80], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.GANLoss.__init__": [[86, 92], ["torch.Module.__init__", "torch.Sigmoid", "torch.Sigmoid", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "self", ".", "labels_real", ",", "self", ".", "labels_fake", "=", "None", ",", "None", "\n", "self", ".", "preloss", "=", "nn", ".", "Sigmoid", "(", ")", "if", "not", "use_lsgan", "else", "None", "\n", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "if", "use_lsgan", "else", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.GANLoss.get_target_tensor": [[93, 100], ["networks.GANLoss.labels_real[].numel", "inputs[].numel", "networks.GANLoss.Tensor().fill_", "networks.GANLoss.Tensor().fill_", "networks.GANLoss.Tensor", "networks.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "def", "get_target_tensor", "(", "self", ",", "inputs", ",", "is_real", ")", ":", "\n", "        ", "if", "self", ".", "labels_real", "is", "None", "or", "self", ".", "labels_real", "[", "0", "]", ".", "numel", "(", ")", "!=", "inputs", "[", "0", "]", ".", "numel", "(", ")", ":", "\n", "            ", "self", ".", "labels_real", "=", "[", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "1.0", ")", "for", "input", "in", "inputs", "]", "\n", "self", ".", "labels_fake", "=", "[", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "0.0", ")", "for", "input", "in", "inputs", "]", "\n", "", "if", "is_real", ":", "\n", "            ", "return", "self", ".", "labels_real", "\n", "", "return", "self", ".", "labels_fake", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.GANLoss.__call__": [[101, 109], ["networks.GANLoss.get_target_tensor", "list", "networks.GANLoss.loss", "range", "sum", "networks.GANLoss.preloss", "zip", "zip", "sum", "len", "len"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "is_real", ")", ":", "\n", "        ", "labels", "=", "self", ".", "get_target_tensor", "(", "inputs", ",", "is_real", ")", "\n", "if", "self", ".", "preloss", "is", "not", "None", ":", "\n", "            ", "inputs", "=", "[", "self", ".", "preloss", "(", "input", ")", "for", "input", "in", "inputs", "]", "\n", "", "losses", "=", "[", "self", ".", "loss", "(", "input", ",", "label", ")", "for", "input", ",", "label", "in", "zip", "(", "inputs", ",", "labels", ")", "]", "\n", "multipliers", "=", "list", "(", "range", "(", "1", ",", "len", "(", "inputs", ")", "+", "1", ")", ")", ";", "multipliers", "[", "-", "1", "]", "+=", "1", "\n", "losses", "=", "[", "m", "*", "l", "for", "m", ",", "l", "in", "zip", "(", "multipliers", ",", "losses", ")", "]", "\n", "return", "sum", "(", "losses", ")", "/", "(", "sum", "(", "multipliers", ")", "*", "len", "(", "losses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.ResnetGenEncoder.__init__": [[116, 142], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.PReLU", "torch.PReLU", "networks.ResnetBlock"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "n_blocks", "=", "4", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_dropout", "=", "False", ",", "gpu_ids", "=", "[", "]", ",", "use_bias", "=", "False", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResnetGenEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "]", "\n", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "_", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "norm_layer", "=", "norm_layer", ",", "\n", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ",", "padding_type", "=", "padding_type", ")", "]", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.ResnetGenEncoder.forward": [[143, 147], ["networks.ResnetGenEncoder.model", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.NLayerDiscriminator.model"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "gpu_ids", "and", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "return", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "model", ",", "input", ",", "self", ".", "gpu_ids", ")", "\n", "", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.ResnetGenShared.__init__": [[149, 164], ["torch.Module.__init__", "range", "networks.SequentialContext", "networks.ResnetBlock"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_domains", ",", "n_blocks", "=", "2", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_dropout", "=", "False", ",", "gpu_ids", "=", "[", "]", ",", "use_bias", "=", "False", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResnetGenShared", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "model", "=", "[", "]", "\n", "n_downsampling", "=", "2", "\n", "mult", "=", "2", "**", "n_downsampling", "\n", "\n", "for", "_", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "norm_layer", "=", "norm_layer", ",", "n_domains", "=", "n_domains", ",", "\n", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ",", "padding_type", "=", "padding_type", ")", "]", "\n", "\n", "", "self", ".", "model", "=", "SequentialContext", "(", "n_domains", ",", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.ResnetGenShared.forward": [[165, 169], ["networks.ResnetGenShared.model", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.NLayerDiscriminator.model"], ["", "def", "forward", "(", "self", ",", "input", ",", "domain", ")", ":", "\n", "        ", "if", "self", ".", "gpu_ids", "and", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "return", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "model", ",", "(", "input", ",", "domain", ")", ",", "self", ".", "gpu_ids", ")", "\n", "", "return", "self", ".", "model", "(", "input", ",", "domain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.ResnetGenDecoder.__init__": [[171, 199], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "networks.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.PReLU", "torch.PReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_nc", ",", "n_blocks", "=", "5", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_dropout", "=", "False", ",", "gpu_ids", "=", "[", "]", ",", "use_bias", "=", "False", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResnetGenDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "model", "=", "[", "]", "\n", "n_downsampling", "=", "2", "\n", "mult", "=", "2", "**", "n_downsampling", "\n", "\n", "for", "_", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "norm_layer", "=", "norm_layer", ",", "\n", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ",", "padding_type", "=", "padding_type", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "0", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.ResnetGenDecoder.forward": [[200, 204], ["networks.ResnetGenDecoder.model", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.NLayerDiscriminator.model"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "gpu_ids", "and", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "return", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "model", ",", "input", ",", "self", ".", "gpu_ids", ")", "\n", "", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.ResnetBlock.__init__": [[208, 241], ["torch.Module.__init__", "networks.SequentialContext", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ",", "padding_type", "=", "'reflect'", ",", "n_domains", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", "+", "n_domains", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", "+", "n_domains", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "self", ".", "conv_block", "=", "SequentialContext", "(", "n_domains", ",", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.ResnetBlock.forward": [[242, 246], ["isinstance", "networks.ResnetBlock.conv_block", "networks.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ",", "tuple", ")", ":", "\n", "            ", "return", "input", "[", "0", "]", "+", "self", ".", "conv_block", "(", "*", "input", ")", "\n", "", "return", "input", "+", "self", ".", "conv_block", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.NLayerDiscriminator.__init__": [[250, 258], ["torch.Module.__init__", "networks.NLayerDiscriminator.model", "networks.NLayerDiscriminator.model"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.NLayerDiscriminator.model", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.NLayerDiscriminator.model"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "blur_fn", "=", "None", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "blur_fn", "=", "blur_fn", "\n", "self", ".", "gray_fn", "=", "lambda", "x", ":", "(", ".299", "*", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "+", ".587", "*", "x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "+", ".114", "*", "x", "[", ":", ",", "2", ",", ":", ",", ":", "]", ")", ".", "unsqueeze_", "(", "1", ")", "\n", "\n", "self", ".", "model_gray", "=", "self", ".", "model", "(", "1", ",", "ndf", ",", "n_layers", ",", "norm_layer", ")", "\n", "self", ".", "model_rgb", "=", "self", ".", "model", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.NLayerDiscriminator.model": [[259, 296], ["int", "range", "min", "networks.SequentialOutput", "type", "numpy.ceil", "min", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.PReLU", "torch.PReLU"], "methods", ["None"], ["", "def", "model", "(", "self", ",", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ")", ":", "\n", "        ", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1", ")", "/", "2", ")", ")", "\n", "sequences", "=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", "]", "]", "\n", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequences", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", "+", "1", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", "+", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", "]", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequences", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "\n", "]", "]", "\n", "\n", "return", "SequentialOutput", "(", "*", "sequences", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.NLayerDiscriminator.forward": [[297, 307], ["networks.NLayerDiscriminator.gray_fn", "networks.NLayerDiscriminator.blur_fn", "len", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "networks.NLayerDiscriminator.model_gray", "networks.NLayerDiscriminator.model_rgb", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "luminance", ",", "blurred_rgb", "=", "self", ".", "gray_fn", "(", "input", ")", ",", "self", ".", "blur_fn", "(", "input", ")", "\n", "\n", "if", "len", "(", "self", ".", "gpu_ids", ")", "and", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "outs1", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "model_gray", ",", "luminance", ",", "self", ".", "gpu_ids", ")", "\n", "outs2", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "model_rgb", ",", "blurred_rgb", ",", "self", ".", "gpu_ids", ")", "\n", "", "else", ":", "\n", "            ", "outs1", "=", "self", ".", "model_gray", "(", "luminance", ")", "\n", "outs2", "=", "self", ".", "model_rgb", "(", "blurred_rgb", ")", "\n", "", "return", "[", "torch", ".", "cat", "(", "[", "o1", ",", "o2", "]", ",", "1", ")", "for", "o1", ",", "o2", "in", "zip", "(", "outs1", ",", "outs2", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.__init__": [[310, 312], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Plexer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.apply": [[313, 316], ["net.apply"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.apply"], ["", "def", "apply", "(", "self", ",", "func", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "networks", ":", "\n", "            ", "net", ".", "apply", "(", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.cuda": [[317, 320], ["net.cuda"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.cuda"], ["", "", "def", "cuda", "(", "self", ",", "device_id", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "networks", ":", "\n", "            ", "net", ".", "cuda", "(", "device_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.init_optimizers": [[321, 324], ["opt", "net.parameters"], "methods", ["None"], ["", "", "def", "init_optimizers", "(", "self", ",", "opt", ",", "lr", ",", "betas", ")", ":", "\n", "        ", "self", ".", "optimizers", "=", "[", "opt", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "betas", "=", "betas", ")", "for", "net", "in", "self", ".", "networks", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.zero_grads": [[325, 328], ["networks.Plexer.optimizers[].zero_grad", "networks.Plexer.optimizers[].zero_grad"], "methods", ["None"], ["", "def", "zero_grads", "(", "self", ",", "dom_a", ",", "dom_b", ")", ":", "\n", "        ", "self", ".", "optimizers", "[", "dom_a", "]", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizers", "[", "dom_b", "]", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.step_grads": [[329, 332], ["networks.Plexer.optimizers[].step", "networks.Plexer.optimizers[].step"], "methods", ["None"], ["", "def", "step_grads", "(", "self", ",", "dom_a", ",", "dom_b", ")", ":", "\n", "        ", "self", ".", "optimizers", "[", "dom_a", "]", ".", "step", "(", ")", "\n", "self", ".", "optimizers", "[", "dom_b", "]", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.update_lr": [[333, 337], ["None"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "new_lr", ")", ":", "\n", "        ", "for", "opt", "in", "self", ".", "optimizers", ":", "\n", "            ", "for", "param_group", "in", "opt", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.save": [[338, 342], ["enumerate", "torch.save", "torch.save", "torch.save", "torch.save", "net.cpu().state_dict", "net.cpu"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.save"], ["", "", "", "def", "save", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "for", "i", ",", "net", "in", "enumerate", "(", "self", ".", "networks", ")", ":", "\n", "            ", "filename", "=", "save_path", "+", "(", "'%d.pth'", "%", "i", ")", "\n", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.load": [[343, 347], ["enumerate", "net.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.load", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.load", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.load", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.load"], ["", "", "def", "load", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "for", "i", ",", "net", "in", "enumerate", "(", "self", ".", "networks", ")", ":", "\n", "            ", "filename", "=", "save_path", "+", "(", "'%d.pth'", "%", "i", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.__init__": [[349, 362], ["networks.Plexer.__init__", "encoder", "decoder", "block", "block", "networks.G_Plexer.encoders.append", "networks.G_Plexer.decoders.append", "range", "range"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_domains", ",", "encoder", ",", "enc_args", ",", "decoder", ",", "dec_args", ",", "\n", "block", "=", "None", ",", "shenc_args", "=", "None", ",", "shdec_args", "=", "None", ")", ":", "\n", "        ", "super", "(", "G_Plexer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoders", "=", "[", "encoder", "(", "*", "enc_args", ")", "for", "_", "in", "range", "(", "n_domains", ")", "]", "\n", "self", ".", "decoders", "=", "[", "decoder", "(", "*", "dec_args", ")", "for", "_", "in", "range", "(", "n_domains", ")", "]", "\n", "\n", "self", ".", "sharing", "=", "block", "is", "not", "None", "\n", "if", "self", ".", "sharing", ":", "\n", "            ", "self", ".", "shared_encoder", "=", "block", "(", "*", "shenc_args", ")", "\n", "self", ".", "shared_decoder", "=", "block", "(", "*", "shdec_args", ")", "\n", "self", ".", "encoders", ".", "append", "(", "self", ".", "shared_encoder", ")", "\n", "self", ".", "decoders", ".", "append", "(", "self", ".", "shared_decoder", ")", "\n", "", "self", ".", "networks", "=", "self", ".", "encoders", "+", "self", ".", "decoders", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.init_optimizers": [[363, 368], ["zip", "itertools.chain", "networks.G_Plexer.optimizers.append", "enc.parameters", "dec.parameters", "opt"], "methods", ["None"], ["", "def", "init_optimizers", "(", "self", ",", "opt", ",", "lr", ",", "betas", ")", ":", "\n", "        ", "self", ".", "optimizers", "=", "[", "]", "\n", "for", "enc", ",", "dec", "in", "zip", "(", "self", ".", "encoders", ",", "self", ".", "decoders", ")", ":", "\n", "            ", "params", "=", "itertools", ".", "chain", "(", "enc", ".", "parameters", "(", ")", ",", "dec", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "opt", "(", "params", ",", "lr", "=", "lr", ",", "betas", "=", "betas", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.forward": [[369, 372], ["networks.G_Plexer.encode", "networks.G_Plexer.decode"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.encode", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.decode"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "in_domain", ",", "out_domain", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encode", "(", "input", ",", "in_domain", ")", "\n", "return", "self", ".", "decode", "(", "encoded", ",", "out_domain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.encode": [[373, 378], ["networks.G_Plexer.encoders[].forward", "networks.G_Plexer.shared_encoder.forward"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.forward"], ["", "def", "encode", "(", "self", ",", "input", ",", "domain", ")", ":", "\n", "        ", "output", "=", "self", ".", "encoders", "[", "domain", "]", ".", "forward", "(", "input", ")", "\n", "if", "self", ".", "sharing", ":", "\n", "            ", "return", "self", ".", "shared_encoder", ".", "forward", "(", "output", ",", "domain", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.decode": [[379, 383], ["networks.G_Plexer.decoders[].forward", "networks.G_Plexer.shared_decoder.forward"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.forward"], ["", "def", "decode", "(", "self", ",", "input", ",", "domain", ")", ":", "\n", "        ", "if", "self", ".", "sharing", ":", "\n", "            ", "input", "=", "self", ".", "shared_decoder", ".", "forward", "(", "input", ",", "domain", ")", "\n", "", "return", "self", ".", "decoders", "[", "domain", "]", ".", "forward", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.zero_grads": [[384, 389], ["networks.G_Plexer.optimizers[].zero_grad", "networks.G_Plexer.optimizers[].zero_grad", "networks.G_Plexer.optimizers[].zero_grad"], "methods", ["None"], ["", "def", "zero_grads", "(", "self", ",", "dom_a", ",", "dom_b", ")", ":", "\n", "        ", "self", ".", "optimizers", "[", "dom_a", "]", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "sharing", ":", "\n", "            ", "self", ".", "optimizers", "[", "-", "1", "]", ".", "zero_grad", "(", ")", "\n", "", "self", ".", "optimizers", "[", "dom_b", "]", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.step_grads": [[390, 395], ["networks.G_Plexer.optimizers[].step", "networks.G_Plexer.optimizers[].step", "networks.G_Plexer.optimizers[].step"], "methods", ["None"], ["", "def", "step_grads", "(", "self", ",", "dom_a", ",", "dom_b", ")", ":", "\n", "        ", "self", ".", "optimizers", "[", "dom_a", "]", ".", "step", "(", ")", "\n", "if", "self", ".", "sharing", ":", "\n", "            ", "self", ".", "optimizers", "[", "-", "1", "]", ".", "step", "(", ")", "\n", "", "self", ".", "optimizers", "[", "dom_b", "]", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.__repr__": [[396, 404], ["sum", "sum", "p.numel", "p.numel", "e.parameters", "d.parameters", "len", "repr", "repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "e", ",", "d", "=", "self", ".", "encoders", "[", "0", "]", ",", "self", ".", "decoders", "[", "0", "]", "\n", "e_params", "=", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "e", ".", "parameters", "(", ")", "]", ")", "\n", "d_params", "=", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "d", ".", "parameters", "(", ")", "]", ")", "\n", "return", "repr", "(", "e", ")", "+", "'\\n'", "+", "repr", "(", "d", ")", "+", "'\\n'", "+", "'Created %d Encoder-Decoder pairs'", "%", "len", "(", "self", ".", "encoders", ")", "+", "'\\n'", "+", "'Number of parameters per Encoder: %d'", "%", "e_params", "+", "'\\n'", "+", "'Number of parameters per Deocder: %d'", "%", "d_params", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.D_Plexer.__init__": [[406, 409], ["networks.Plexer.__init__", "model", "range"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.NLayerDiscriminator.model"], ["    ", "def", "__init__", "(", "self", ",", "n_domains", ",", "model", ",", "model_args", ")", ":", "\n", "        ", "super", "(", "D_Plexer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "networks", "=", "[", "model", "(", "*", "model_args", ")", "for", "_", "in", "range", "(", "n_domains", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.D_Plexer.forward": [[410, 413], ["discriminator.forward"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.forward"], ["", "def", "forward", "(", "self", ",", "input", ",", "domain", ")", ":", "\n", "        ", "discriminator", "=", "self", ".", "networks", "[", "domain", "]", "\n", "return", "discriminator", ".", "forward", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.D_Plexer.__repr__": [[414, 420], ["sum", "p.numel", "t.parameters", "repr", "len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "t", "=", "self", ".", "networks", "[", "0", "]", "\n", "t_params", "=", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "t", ".", "parameters", "(", ")", "]", ")", "\n", "return", "repr", "(", "t", ")", "+", "'\\n'", "+", "'Created %d Discriminators'", "%", "len", "(", "self", ".", "networks", ")", "+", "'\\n'", "+", "'Number of parameters per Discriminator: %d'", "%", "t_params", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.SequentialContext.__init__": [[423, 427], ["torch.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "SequentialContext", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "context_var", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.SequentialContext.prepare_context": [[428, 437], ["networks.SequentialContext.context_var.data.fill_", "tensor", "isinstance", "networks.SequentialContext.context_var.size", "input.size", "input.size"], "methods", ["None"], ["", "def", "prepare_context", "(", "self", ",", "input", ",", "domain", ")", ":", "\n", "        ", "if", "self", ".", "context_var", "is", "None", "or", "self", ".", "context_var", ".", "size", "(", ")", "[", "-", "2", ":", "]", "!=", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ":", "\n", "            ", "tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "else", "torch", ".", "FloatTensor", "\n", "self", ".", "context_var", "=", "tensor", "(", "*", "(", "(", "1", ",", "self", ".", "n_classes", ")", "+", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", ")", "\n", "\n", "", "self", ".", "context_var", ".", "data", ".", "fill_", "(", "-", "1.0", ")", "\n", "self", ".", "context_var", ".", "data", "[", ":", ",", "domain", ",", ":", ",", ":", "]", "=", "1.0", "\n", "return", "self", ".", "context_var", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.SequentialContext.forward": [[438, 451], ["networks.SequentialContext._modules.values", "super().forward", "module", "len", "networks.SequentialContext.prepare_context", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.SequentialContext.prepare_context"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "if", "self", ".", "n_classes", "<", "2", "or", "len", "(", "input", ")", "<", "2", ":", "\n", "            ", "return", "super", "(", "SequentialContext", ",", "self", ")", ".", "forward", "(", "input", "[", "0", "]", ")", "\n", "", "x", ",", "domain", "=", "input", "\n", "\n", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "            ", "if", "'Conv'", "in", "module", ".", "__class__", ".", "__name__", ":", "\n", "                ", "context_var", "=", "self", ".", "prepare_context", "(", "x", ",", "domain", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "context_var", "]", ",", "dim", "=", "1", ")", "\n", "", "elif", "'Block'", "in", "module", ".", "__class__", ".", "__name__", ":", "\n", "                ", "x", "=", "(", "x", ",", ")", "+", "input", "[", "1", ":", "]", "\n", "", "x", "=", "module", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.SequentialOutput.__init__": [[453, 456], ["torch.Sequential.__init__", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "args", "=", "[", "nn", ".", "Sequential", "(", "*", "arg", ")", "for", "arg", "in", "args", "]", "\n", "super", "(", "SequentialOutput", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.SequentialOutput.forward": [[457, 468], ["networks.SequentialOutput._modules.values", "enumerate", "module", "predictions.append", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "predictions", "=", "[", "]", "\n", "layers", "=", "self", ".", "_modules", ".", "values", "(", ")", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "layers", ")", ":", "\n", "            ", "output", "=", "module", "(", "input", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "input", "=", "output", ";", "continue", "\n", "", "predictions", ".", "append", "(", "output", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", ")", "\n", "if", "i", "!=", "len", "(", "layers", ")", "-", "1", ":", "\n", "                ", "input", "=", "output", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "", "", "return", "predictions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.weights_init": [[10, 19], ["classname.find", "m.weight.data.normal_", "hasattr", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "if", "hasattr", "(", "m", ".", "bias", ",", "'data'", ")", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.get_norm_layer": [[21, 28], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "return", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "return", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.define_G": [[30, 60], ["networks.get_norm_layer", "networks.Plexer.apply", "type", "networks.G_Plexer", "networks.G_Plexer", "len", "torch.cuda.is_available", "torch.cuda.is_available", "networks.Plexer.cuda"], "function", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.apply", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.cuda"], ["", "", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_blocks", ",", "n_blocks_shared", ",", "n_domains", ",", "norm", "=", "'batch'", ",", "use_dropout", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "        ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "        ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "n_blocks", "-=", "n_blocks_shared", "\n", "n_blocks_enc", "=", "n_blocks", "//", "2", "\n", "n_blocks_dec", "=", "n_blocks", "-", "n_blocks_enc", "\n", "\n", "dup_args", "=", "(", "ngf", ",", "norm_layer", ",", "use_dropout", ",", "gpu_ids", ",", "use_bias", ")", "\n", "enc_args", "=", "(", "input_nc", ",", "n_blocks_enc", ")", "+", "dup_args", "\n", "dec_args", "=", "(", "output_nc", ",", "n_blocks_dec", ")", "+", "dup_args", "\n", "\n", "if", "n_blocks_shared", ">", "0", ":", "\n", "        ", "n_blocks_shdec", "=", "n_blocks_shared", "//", "2", "\n", "n_blocks_shenc", "=", "n_blocks_shared", "-", "n_blocks_shdec", "\n", "shenc_args", "=", "(", "n_domains", ",", "n_blocks_shenc", ")", "+", "dup_args", "\n", "shdec_args", "=", "(", "n_domains", ",", "n_blocks_shdec", ")", "+", "dup_args", "\n", "plex_netG", "=", "G_Plexer", "(", "n_domains", ",", "ResnetGenEncoder", ",", "enc_args", ",", "ResnetGenDecoder", ",", "dec_args", ",", "ResnetGenShared", ",", "shenc_args", ",", "shdec_args", ")", "\n", "", "else", ":", "\n", "        ", "plex_netG", "=", "G_Plexer", "(", "n_domains", ",", "ResnetGenEncoder", ",", "enc_args", ",", "ResnetGenDecoder", ",", "dec_args", ")", "\n", "\n", "", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "plex_netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "plex_netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "plex_netG", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.define_D": [[62, 74], ["networks.get_norm_layer", "networks.D_Plexer", "networks.Plexer.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "networks.Plexer.cuda"], "function", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.apply", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.cuda"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "netD_n_layers", ",", "n_domains", ",", "blur_fn", ",", "norm", "=", "'batch'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "model_args", "=", "(", "input_nc", ",", "ndf", ",", "netD_n_layers", ",", "blur_fn", ",", "norm_layer", ",", "gpu_ids", ")", "\n", "plex_netD", "=", "D_Plexer", "(", "n_domains", ",", "NLayerDiscriminator", ",", "model_args", ")", "\n", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "plex_netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "plex_netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "plex_netD", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.name": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'ComboGANModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.__init__": [[14, 62], ["base_model.BaseModel.__init__", "combogan_model.ComboGANModel.Tensor", "combogan_model.ComboGANModel.Tensor", "networks.define_G", "print", "print", "print", "networks.define_D", "combogan_model.ComboGANModel.load_network", "torch.nn.SmoothL1Loss", "torch.nn.AvgPool2d", "networks.GANLoss", "combogan_model.ComboGANModel.netG.init_optimizers", "combogan_model.ComboGANModel.netD.init_optimizers", "print", "torch.nn.functional.conv2d", "combogan_model.ComboGANModel.load_network", "util.image_pool.ImagePool", "combogan_model.ComboGANModel.L1", "combogan_model.ComboGANModel.L1", "combogan_model.ComboGANModel.Tensor", "range", "combogan_model.ComboGANModel.downsample", "combogan_model.ComboGANModel.downsample", "t.detach", "util.gkern_2d"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.define_G", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.define_D", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.init_optimizers", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.init_optimizers", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.gkern_2d"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "ComboGANModel", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "\n", "self", ".", "n_domains", "=", "opt", ".", "n_domains", "\n", "self", ".", "DA", ",", "self", ".", "DB", "=", "None", ",", "None", "\n", "\n", "self", ".", "real_A", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "input_nc", ",", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "self", ".", "real_B", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "output_nc", ",", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "\n", "# load/define networks", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "\n", "opt", ".", "netG_n_blocks", ",", "opt", ".", "netG_n_shared", ",", "\n", "self", ".", "n_domains", ",", "opt", ".", "norm", ",", "opt", ".", "use_dropout", ",", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "blur_fn", "=", "lambda", "x", ":", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "x", ",", "self", ".", "Tensor", "(", "util", ".", "gkern_2d", "(", ")", ")", ",", "groups", "=", "3", ",", "padding", "=", "2", ")", "\n", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "opt", ".", "output_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "netD_n_layers", ",", "\n", "self", ".", "n_domains", ",", "blur_fn", ",", "opt", ".", "norm", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "which_epoch", "=", "opt", ".", "which_epoch", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "which_epoch", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "which_epoch", ")", "\n", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "fake_pools", "=", "[", "ImagePool", "(", "opt", ".", "pool_size", ")", "for", "_", "in", "range", "(", "self", ".", "n_domains", ")", "]", "\n", "# define loss functions", "\n", "self", ".", "L1", "=", "torch", ".", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "self", ".", "downsample", "=", "torch", ".", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ")", "\n", "self", ".", "criterionCycle", "=", "self", ".", "L1", "\n", "self", ".", "criterionIdt", "=", "lambda", "y", ",", "t", ":", "self", ".", "L1", "(", "self", ".", "downsample", "(", "y", ")", ",", "self", ".", "downsample", "(", "t", ")", ")", "\n", "self", ".", "criterionLatent", "=", "lambda", "y", ",", "t", ":", "self", ".", "L1", "(", "y", ",", "t", ".", "detach", "(", ")", ")", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ",", "tensor", "=", "self", ".", "Tensor", ")", "\n", "# initialize optimizers", "\n", "self", ".", "netG", ".", "init_optimizers", "(", "torch", ".", "optim", ".", "Adam", ",", "opt", ".", "lr", ",", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "netD", ".", "init_optimizers", "(", "torch", ".", "optim", ".", "Adam", ",", "opt", ".", "lr", ",", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "# initialize loss storage", "\n", "self", ".", "loss_D", ",", "self", ".", "loss_G", "=", "[", "0", "]", "*", "self", ".", "n_domains", ",", "[", "0", "]", "*", "self", ".", "n_domains", "\n", "self", ".", "loss_cycle", "=", "[", "0", "]", "*", "self", ".", "n_domains", "\n", "# initialize loss multipliers", "\n", "self", ".", "lambda_cyc", ",", "self", ".", "lambda_enc", "=", "opt", ".", "lambda_cycle", ",", "(", "0", "*", "opt", ".", "lambda_latent", ")", "\n", "self", ".", "lambda_idt", ",", "self", ".", "lambda_fwd", "=", "opt", ".", "lambda_identity", ",", "opt", ".", "lambda_forward", "\n", "\n", "", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "print", "(", "self", ".", "netG", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "print", "(", "self", ".", "netD", ")", "\n", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.set_input": [[63, 72], ["combogan_model.ComboGANModel.real_A.resize_().copy_", "combogan_model.ComboGANModel.real_B.resize_().copy_", "combogan_model.ComboGANModel.real_A.resize_", "input_A.size", "combogan_model.ComboGANModel.real_B.resize_", "input_B.size"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "input_A", "=", "input", "[", "'A'", "]", "\n", "self", ".", "real_A", ".", "resize_", "(", "input_A", ".", "size", "(", ")", ")", ".", "copy_", "(", "input_A", ")", "\n", "self", ".", "DA", "=", "input", "[", "'DA'", "]", "[", "0", "]", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "input_B", "=", "input", "[", "'B'", "]", "\n", "self", ".", "real_B", ".", "resize_", "(", "input_B", ".", "size", "(", ")", ")", ".", "copy_", "(", "input_B", ")", "\n", "self", ".", "DB", "=", "input", "[", "'DB'", "]", "[", "0", "]", "\n", "", "self", ".", "image_paths", "=", "input", "[", "'path'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.test": [[73, 90], ["torch.no_grad", "combogan_model.ComboGANModel.netG.encode", "range", "combogan_model.ComboGANModel.netG.decode", "combogan_model.ComboGANModel.visuals.append", "combogan_model.ComboGANModel.labels.append", "combogan_model.ComboGANModel.netG.forward", "combogan_model.ComboGANModel.visuals.append", "combogan_model.ComboGANModel.labels.append"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.encode", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.decode", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.forward"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "visuals", "=", "[", "self", ".", "real_A", "]", "\n", "self", ".", "labels", "=", "[", "'real_%d'", "%", "self", ".", "DA", "]", "\n", "\n", "# cache encoding to not repeat it everytime", "\n", "encoded", "=", "self", ".", "netG", ".", "encode", "(", "self", ".", "real_A", ",", "self", ".", "DA", ")", "\n", "for", "d", "in", "range", "(", "self", ".", "n_domains", ")", ":", "\n", "                ", "if", "d", "==", "self", ".", "DA", "and", "not", "self", ".", "opt", ".", "autoencode", ":", "\n", "                    ", "continue", "\n", "", "fake", "=", "self", ".", "netG", ".", "decode", "(", "encoded", ",", "d", ")", "\n", "self", ".", "visuals", ".", "append", "(", "fake", ")", "\n", "self", ".", "labels", ".", "append", "(", "'fake_%d'", "%", "d", ")", "\n", "if", "self", ".", "opt", ".", "reconstruct", ":", "\n", "                    ", "rec", "=", "self", ".", "netG", ".", "forward", "(", "fake", ",", "d", ",", "self", ".", "DA", ")", "\n", "self", ".", "visuals", ".", "append", "(", "rec", ")", "\n", "self", ".", "labels", ".", "append", "(", "'rec_%d'", "%", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.get_image_paths": [[91, 93], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.backward_D_basic": [[94, 106], ["combogan_model.ComboGANModel.netD.forward", "combogan_model.ComboGANModel.criterionGAN", "combogan_model.ComboGANModel.netD.forward", "combogan_model.ComboGANModel.criterionGAN", "loss_D.backward", "fake.detach"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.forward"], ["", "def", "backward_D_basic", "(", "self", ",", "real", ",", "fake", ",", "domain", ")", ":", "\n", "# Real", "\n", "        ", "pred_real", "=", "self", ".", "netD", ".", "forward", "(", "real", ",", "domain", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "# Fake", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "fake", ".", "detach", "(", ")", ",", "domain", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "\n", "# Combined loss", "\n", "loss_D", "=", "(", "loss_D_real", "+", "loss_D_fake", ")", "*", "0.5", "\n", "# backward", "\n", "loss_D", ".", "backward", "(", ")", "\n", "return", "loss_D", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.backward_D": [[107, 114], ["combogan_model.ComboGANModel.fake_pools[].query", "combogan_model.ComboGANModel.backward_D_basic", "combogan_model.ComboGANModel.fake_pools[].query", "combogan_model.ComboGANModel.backward_D_basic"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.backward_D_basic", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.backward_D_basic"], ["", "def", "backward_D", "(", "self", ")", ":", "\n", "#D_A", "\n", "        ", "fake_B", "=", "self", ".", "fake_pools", "[", "self", ".", "DB", "]", ".", "query", "(", "self", ".", "fake_B", ")", "\n", "self", ".", "loss_D", "[", "self", ".", "DA", "]", "=", "self", ".", "backward_D_basic", "(", "self", ".", "real_B", ",", "fake_B", ",", "self", ".", "DB", ")", "\n", "#D_B", "\n", "fake_A", "=", "self", ".", "fake_pools", "[", "self", ".", "DA", "]", ".", "query", "(", "self", ".", "fake_A", ")", "\n", "self", ".", "loss_D", "[", "self", ".", "DB", "]", "=", "self", ".", "backward_D_basic", "(", "self", ".", "real_A", ",", "fake_A", ",", "self", ".", "DA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.backward_G": [[115, 168], ["combogan_model.ComboGANModel.netG.encode", "combogan_model.ComboGANModel.netG.encode", "combogan_model.ComboGANModel.netG.decode", "combogan_model.ComboGANModel.netD.forward", "combogan_model.ComboGANModel.criterionGAN", "combogan_model.ComboGANModel.netG.decode", "combogan_model.ComboGANModel.netD.forward", "combogan_model.ComboGANModel.criterionGAN", "combogan_model.ComboGANModel.netG.encode", "combogan_model.ComboGANModel.netG.decode", "combogan_model.ComboGANModel.criterionCycle", "combogan_model.ComboGANModel.netG.encode", "combogan_model.ComboGANModel.netG.decode", "combogan_model.ComboGANModel.criterionCycle", "loss_G.backward", "combogan_model.ComboGANModel.netG.decode", "combogan_model.ComboGANModel.criterionIdt", "combogan_model.ComboGANModel.netG.decode", "combogan_model.ComboGANModel.criterionIdt", "combogan_model.ComboGANModel.criterionLatent", "combogan_model.ComboGANModel.criterionLatent", "combogan_model.ComboGANModel.criterionIdt", "combogan_model.ComboGANModel.criterionIdt"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.encode", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.encode", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.decode", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.decode", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.encode", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.decode", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.encode", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.decode", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.decode", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.decode"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "        ", "encoded_A", "=", "self", ".", "netG", ".", "encode", "(", "self", ".", "real_A", ",", "self", ".", "DA", ")", "\n", "encoded_B", "=", "self", ".", "netG", ".", "encode", "(", "self", ".", "real_B", ",", "self", ".", "DB", ")", "\n", "\n", "# Optional identity \"autoencode\" loss", "\n", "if", "self", ".", "lambda_idt", ">", "0", ":", "\n", "# Same encoder and decoder should recreate image", "\n", "            ", "idt_A", "=", "self", ".", "netG", ".", "decode", "(", "encoded_A", ",", "self", ".", "DA", ")", "\n", "loss_idt_A", "=", "self", ".", "criterionIdt", "(", "idt_A", ",", "self", ".", "real_A", ")", "\n", "idt_B", "=", "self", ".", "netG", ".", "decode", "(", "encoded_B", ",", "self", ".", "DB", ")", "\n", "loss_idt_B", "=", "self", ".", "criterionIdt", "(", "idt_B", ",", "self", ".", "real_B", ")", "\n", "", "else", ":", "\n", "            ", "loss_idt_A", ",", "loss_idt_B", "=", "0", ",", "0", "\n", "\n", "# GAN loss", "\n", "# D_A(G_A(A))", "\n", "", "self", ".", "fake_B", "=", "self", ".", "netG", ".", "decode", "(", "encoded_A", ",", "self", ".", "DB", ")", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "self", ".", "fake_B", ",", "self", ".", "DB", ")", "\n", "self", ".", "loss_G", "[", "self", ".", "DA", "]", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "# D_B(G_B(B))", "\n", "self", ".", "fake_A", "=", "self", ".", "netG", ".", "decode", "(", "encoded_B", ",", "self", ".", "DA", ")", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "self", ".", "fake_A", ",", "self", ".", "DA", ")", "\n", "self", ".", "loss_G", "[", "self", ".", "DB", "]", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "# Forward cycle loss", "\n", "rec_encoded_A", "=", "self", ".", "netG", ".", "encode", "(", "self", ".", "fake_B", ",", "self", ".", "DB", ")", "\n", "self", ".", "rec_A", "=", "self", ".", "netG", ".", "decode", "(", "rec_encoded_A", ",", "self", ".", "DA", ")", "\n", "self", ".", "loss_cycle", "[", "self", ".", "DA", "]", "=", "self", ".", "criterionCycle", "(", "self", ".", "rec_A", ",", "self", ".", "real_A", ")", "\n", "# Backward cycle loss", "\n", "rec_encoded_B", "=", "self", ".", "netG", ".", "encode", "(", "self", ".", "fake_A", ",", "self", ".", "DA", ")", "\n", "self", ".", "rec_B", "=", "self", ".", "netG", ".", "decode", "(", "rec_encoded_B", ",", "self", ".", "DB", ")", "\n", "self", ".", "loss_cycle", "[", "self", ".", "DB", "]", "=", "self", ".", "criterionCycle", "(", "self", ".", "rec_B", ",", "self", ".", "real_B", ")", "\n", "\n", "# Optional cycle loss on encoding space", "\n", "if", "self", ".", "lambda_enc", ">", "0", ":", "\n", "            ", "loss_enc_A", "=", "self", ".", "criterionLatent", "(", "rec_encoded_A", ",", "encoded_A", ")", "\n", "loss_enc_B", "=", "self", ".", "criterionLatent", "(", "rec_encoded_B", ",", "encoded_B", ")", "\n", "", "else", ":", "\n", "            ", "loss_enc_A", ",", "loss_enc_B", "=", "0", ",", "0", "\n", "\n", "# Optional loss on downsampled image before and after", "\n", "", "if", "self", ".", "lambda_fwd", ">", "0", ":", "\n", "            ", "loss_fwd_A", "=", "self", ".", "criterionIdt", "(", "self", ".", "fake_B", ",", "self", ".", "real_A", ")", "\n", "loss_fwd_B", "=", "self", ".", "criterionIdt", "(", "self", ".", "fake_A", ",", "self", ".", "real_B", ")", "\n", "", "else", ":", "\n", "            ", "loss_fwd_A", ",", "loss_fwd_B", "=", "0", ",", "0", "\n", "\n", "# combined loss", "\n", "", "loss_G", "=", "self", ".", "loss_G", "[", "self", ".", "DA", "]", "+", "self", ".", "loss_G", "[", "self", ".", "DB", "]", "+", "(", "self", ".", "loss_cycle", "[", "self", ".", "DA", "]", "+", "self", ".", "loss_cycle", "[", "self", ".", "DB", "]", ")", "*", "self", ".", "lambda_cyc", "+", "(", "loss_idt_A", "+", "loss_idt_B", ")", "*", "self", ".", "lambda_idt", "+", "(", "loss_enc_A", "+", "loss_enc_B", ")", "*", "self", ".", "lambda_enc", "+", "(", "loss_fwd_A", "+", "loss_fwd_B", ")", "*", "self", ".", "lambda_fwd", "\n", "loss_G", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.optimize_parameters": [[169, 178], ["combogan_model.ComboGANModel.netG.zero_grads", "combogan_model.ComboGANModel.backward_G", "combogan_model.ComboGANModel.netG.step_grads", "combogan_model.ComboGANModel.netD.zero_grads", "combogan_model.ComboGANModel.backward_D", "combogan_model.ComboGANModel.netD.step_grads"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.zero_grads", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.backward_G", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.step_grads", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.zero_grads", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.backward_D", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.G_Plexer.step_grads"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "# G_A and G_B", "\n", "        ", "self", ".", "netG", ".", "zero_grads", "(", "self", ".", "DA", ",", "self", ".", "DB", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "netG", ".", "step_grads", "(", "self", ".", "DA", ",", "self", ".", "DB", ")", "\n", "# D_A and D_B", "\n", "self", ".", "netD", ".", "zero_grads", "(", "self", ".", "DA", ",", "self", ".", "DB", ")", "\n", "self", ".", "backward_D", "(", ")", "\n", "self", ".", "netD", ".", "step_grads", "(", "self", ".", "DA", ",", "self", ".", "DB", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.get_current_errors": [[179, 183], ["collections.OrderedDict", "extract", "extract", "extract", "i.item", "type", "type"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "extract", "=", "lambda", "l", ":", "[", "(", "i", "if", "type", "(", "i", ")", "is", "int", "or", "type", "(", "i", ")", "is", "float", "else", "i", ".", "item", "(", ")", ")", "for", "i", "in", "l", "]", "\n", "D_losses", ",", "G_losses", ",", "cyc_losses", "=", "extract", "(", "self", ".", "loss_D", ")", ",", "extract", "(", "self", ".", "loss_G", ")", ",", "extract", "(", "self", ".", "loss_cycle", ")", "\n", "return", "OrderedDict", "(", "[", "(", "'D'", ",", "D_losses", ")", ",", "(", "'G'", ",", "G_losses", ")", ",", "(", "'Cyc'", ",", "cyc_losses", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.get_current_visuals": [[184, 190], ["collections.OrderedDict", "util.tensor2im", "zip"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ",", "testing", "=", "False", ")", ":", "\n", "        ", "if", "not", "testing", ":", "\n", "            ", "self", ".", "visuals", "=", "[", "self", ".", "real_A", ",", "self", ".", "fake_B", ",", "self", ".", "rec_A", ",", "self", ".", "real_B", ",", "self", ".", "fake_A", ",", "self", ".", "rec_B", "]", "\n", "self", ".", "labels", "=", "[", "'real_A'", ",", "'fake_B'", ",", "'rec_A'", ",", "'real_B'", ",", "'fake_A'", ",", "'rec_B'", "]", "\n", "", "images", "=", "[", "util", ".", "tensor2im", "(", "v", ".", "data", ")", "for", "v", "in", "self", ".", "visuals", "]", "\n", "return", "OrderedDict", "(", "zip", "(", "self", ".", "labels", ",", "images", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.save": [[191, 194], ["combogan_model.ComboGANModel.save_network", "combogan_model.ComboGANModel.save_network"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.save_network"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.combogan_model.ComboGANModel.update_hyperparams": [[195, 206], ["combogan_model.ComboGANModel.netG.update_lr", "combogan_model.ComboGANModel.netD.update_lr", "print"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.update_lr", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.update_lr"], ["", "def", "update_hyperparams", "(", "self", ",", "curr_iter", ")", ":", "\n", "        ", "if", "curr_iter", ">", "self", ".", "opt", ".", "niter", ":", "\n", "            ", "decay_frac", "=", "(", "curr_iter", "-", "self", ".", "opt", ".", "niter", ")", "/", "self", ".", "opt", ".", "niter_decay", "\n", "new_lr", "=", "self", ".", "opt", ".", "lr", "*", "(", "1", "-", "decay_frac", ")", "\n", "self", ".", "netG", ".", "update_lr", "(", "new_lr", ")", "\n", "self", ".", "netD", ".", "update_lr", "(", "new_lr", ")", "\n", "print", "(", "'updated learning rate: %f'", "%", "new_lr", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "lambda_latent", ">", "0", ":", "\n", "            ", "decay_frac", "=", "curr_iter", "/", "(", "self", ".", "opt", ".", "niter", "+", "self", ".", "opt", ".", "niter_decay", ")", "\n", "self", ".", "lambda_enc", "=", "self", ".", "opt", ".", "lambda_latent", "*", "decay_frac", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.name": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.__init__": [[9, 15], ["os.path.join"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "Tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "self", ".", "gpu_ids", "else", "torch", ".", "Tensor", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.set_input": [[16, 18], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "input", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.forward": [[19, 21], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.test": [[23, 25], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.get_image_paths": [[26, 28], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.optimize_parameters": [[29, 31], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.get_current_visuals": [[32, 34], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.get_current_errors": [[35, 37], ["None"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.save": [[38, 40], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.save_network": [[42, 48], ["os.path.join", "network.save", "torch.cuda.is_available", "network.cuda"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.cuda"], ["", "def", "save_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch", ",", "gpu_ids", ")", ":", "\n", "        ", "save_filename", "=", "'%d_net_%s'", "%", "(", "epoch", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "network", ".", "save", "(", "save_path", ")", "\n", "if", "gpu_ids", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "network", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.load_network": [[50, 54], ["os.path.join", "network.load"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.networks.Plexer.load"], ["", "", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch", ")", ":", "\n", "        ", "save_filename", "=", "'%d_net_%s'", "%", "(", "epoch", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "network", ".", "load", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.models.base_model.BaseModel.update_learning_rate": [[55, 57], ["None"], "methods", ["None"], ["", "def", "update_learning_rate", "(", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.data_loader.DataLoader.name": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'DataLoader'", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.data_loader.DataLoader.__init__": [[9, 16], ["data.unaligned_dataset.UnalignedDataset", "torch.utils.data.DataLoader", "int"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "dataset", "=", "UnalignedDataset", "(", "opt", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "dataset", ",", "\n", "batch_size", "=", "opt", ".", "batchSize", ",", "\n", "num_workers", "=", "int", "(", "opt", ".", "nThreads", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.data_loader.DataLoader.__len__": [[17, 19], ["min", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "len", "(", "self", ".", "dataset", ")", ",", "self", ".", "opt", ".", "max_dataset_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.data_loader.DataLoader.__iter__": [[20, 25], ["enumerate"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "dataloader", ")", ":", "\n", "            ", "if", "i", ">=", "self", ".", "opt", ".", "max_dataset_size", ":", "\n", "                ", "break", "\n", "", "yield", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.base_dataset.BaseDataset.__init__": [[6, 8], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.base_dataset.BaseDataset.name": [[9, 11], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseDataset'", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.base_dataset.BaseDataset.initialize": [[12, 14], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.base_dataset.get_transform": [[15, 30], ["torchvision.Compose", "transform_list.append", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "transform_list.append", "transform_list.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip"], "function", ["None"], ["", "", "def", "get_transform", "(", "opt", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "'resize'", "in", "opt", ".", "resize_or_crop", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "opt", ".", "loadSize", ",", "Image", ".", "BICUBIC", ")", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", ":", "\n", "        ", "if", "'crop'", "in", "opt", ".", "resize_or_crop", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "if", "not", "opt", ".", "no_flip", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "\n", "", "", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.image_folder.ImageFolder.__init__": [[43, 56], ["image_folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "root", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\n", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.image_folder.ImageFolder.__getitem__": [[57, 66], ["image_folder.ImageFolder.loader", "image_folder.ImageFolder.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "return_paths", ":", "\n", "            ", "return", "img", ",", "path", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.image_folder.ImageFolder.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.image_folder.is_image_file": [[20, 22], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.image_folder.make_dataset": [[24, 35], ["os.path.isdir", "os.path.isdir", "sorted", "os.walk", "os.walk", "image_folder.is_image_file", "os.path.join", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.image_folder.is_image_file"], ["", "def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.image_folder.default_loader": [[37, 39], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.unaligned_dataset.UnalignedDataset.__init__": [[9, 19], ["data.base_dataset.BaseDataset.__init__", "data.base_dataset.get_transform", "os.path.join", "sorted", "glob.glob", "sorted", "len", "data.image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "UnalignedDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "transform", "=", "get_transform", "(", "opt", ")", "\n", "\n", "datapath", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'*'", ")", "\n", "self", ".", "dirs", "=", "sorted", "(", "glob", ".", "glob", "(", "datapath", ")", ")", "\n", "\n", "self", ".", "paths", "=", "[", "sorted", "(", "make_dataset", "(", "d", ")", ")", "for", "d", "in", "self", ".", "dirs", "]", "\n", "self", ".", "sizes", "=", "[", "len", "(", "p", ")", "for", "p", "in", "self", ".", "paths", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.unaligned_dataset.UnalignedDataset.load_image": [[20, 25], ["PIL.Image.open().convert", "unaligned_dataset.UnalignedDataset.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "dom", ",", "idx", ")", ":", "\n", "        ", "path", "=", "self", ".", "paths", "[", "dom", "]", "[", "idx", "]", "\n", "img", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "return", "img", ",", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.unaligned_dataset.UnalignedDataset.__getitem__": [[26, 51], ["unaligned_dataset.UnalignedDataset.load_image", "random.sample", "random.randint", "random.randint", "unaligned_dataset.UnalignedDataset.load_image", "bundle.update", "enumerate", "random.randint", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.unaligned_dataset.UnalignedDataset.load_image", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.unaligned_dataset.UnalignedDataset.load_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "not", "self", ".", "opt", ".", "isTrain", ":", "\n", "            ", "if", "self", ".", "opt", ".", "serial_test", ":", "\n", "                ", "for", "d", ",", "s", "in", "enumerate", "(", "self", ".", "sizes", ")", ":", "\n", "                    ", "if", "index", "<", "s", ":", "\n", "                        ", "DA", "=", "d", ";", "break", "\n", "", "index", "-=", "s", "\n", "", "index_A", "=", "index", "\n", "", "else", ":", "\n", "                ", "DA", "=", "index", "%", "len", "(", "self", ".", "dirs", ")", "\n", "index_A", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "sizes", "[", "DA", "]", "-", "1", ")", "\n", "", "", "else", ":", "\n", "# Choose two of our domains to perform a pass on", "\n", "            ", "DA", ",", "DB", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "self", ".", "dirs", ")", ")", ",", "2", ")", "\n", "index_A", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "sizes", "[", "DA", "]", "-", "1", ")", "\n", "\n", "", "A_img", ",", "A_path", "=", "self", ".", "load_image", "(", "DA", ",", "index_A", ")", "\n", "bundle", "=", "{", "'A'", ":", "A_img", ",", "'DA'", ":", "DA", ",", "'path'", ":", "A_path", "}", "\n", "\n", "if", "self", ".", "opt", ".", "isTrain", ":", "\n", "            ", "index_B", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "sizes", "[", "DB", "]", "-", "1", ")", "\n", "B_img", ",", "_", "=", "self", ".", "load_image", "(", "DB", ",", "index_B", ")", "\n", "bundle", ".", "update", "(", "{", "'B'", ":", "B_img", ",", "'DB'", ":", "DB", "}", ")", "\n", "\n", "", "return", "bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.unaligned_dataset.UnalignedDataset.__len__": [[52, 56], ["sum", "max"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "isTrain", ":", "\n", "            ", "return", "max", "(", "self", ".", "sizes", ")", "\n", "", "return", "sum", "(", "self", ".", "sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.data.unaligned_dataset.UnalignedDataset.name": [[57, 59], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'UnalignedDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.test_options.TestOptions.initialize": [[5, 22], ["base_options.BaseOptions.initialize", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'aspect ratio of result images'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "required", "=", "True", ",", "type", "=", "int", ",", "help", "=", "'which epoch to load for inference?'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train, val, test, etc (determines name of folder to load from)'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'how many test images to run (if serial_test not enabled)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--serial_test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'read each image once from folders in sequential order'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--autoencode'", ",", "action", "=", "'store_true'", ",", "help", "=", "'translate images back into its own domain'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--reconstruct'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do reconstructions of images during testing'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--show_matrix'", ",", "action", "=", "'store_true'", ",", "help", "=", "'visualize images in a matrix format as well'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.train_options.TrainOptions.initialize": [[5, 31], ["base_options.BaseOptions.initialize", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "isTrain", "=", "True", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'which epoch to load if continuing training'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc (determines name of folder to load from)'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter'", ",", "required", "=", "True", ",", "type", "=", "int", ",", "help", "=", "'# of epochs at starting learning rate (try 50*n_domains)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "required", "=", "True", ",", "type", "=", "int", ",", "help", "=", "'# of epochs to linearly decay learning rate to zero (try 50*n_domains)'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for ADAM'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of ADAM'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_cycle'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (A -> B -> A)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_identity'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'weight for identity \"autoencode\" mapping (A -> A)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_latent'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'weight for latent-space loss (A -> z -> B -> z)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_forward'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'weight for forward loss (A -> B; try 0.2)'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_lsgan'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use vanilla discriminator in place of least-squares one'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'the size of image buffer that stores previously generated images'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.__init__": [[7, 10], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.initialize": [[11, 47], ["base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "'--name'", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "'path to images (should have subfolders trainA, trainB, valA, valB, etc)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_domains'", ",", "required", "=", "True", ",", "type", "=", "int", ",", "help", "=", "'Number of domains to transfer among'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resize_or_crop'", ",", "type", "=", "str", ",", "default", "=", "'resize_and_crop'", ",", "help", "=", "'scaling and cropping of images at load time [resize|resize_and_crop|crop]'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data augmentation'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--loadSize'", ",", "type", "=", "int", ",", "default", "=", "286", ",", "help", "=", "'scale images to this size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--fineSize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'then crop to this size'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of input image channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--netG_n_blocks'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "help", "=", "'number of residual blocks to use for netG'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--netG_n_shared'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'number of blocks to use for netG shared center module'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--netD_n_layers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'number of layers to use for netD'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'insert dropout for the generator'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'window id of the web display (set >1 to use visdom)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'visdom port of the web display'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'display window size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_single_pane_ncols'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'if positive, display all images in a single visdom web panel with certain number of images per row.'", ")", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.parse": [[48, 82], ["base_options.BaseOptions.parser.parse_args", "base_options.BaseOptions.opt.gpu_ids.split", "vars", "print", "sorted", "print", "os.path.join", "util.util.util.mkdirs", "os.path.join", "base_options.BaseOptions.initialize", "int", "len", "torch.cuda.set_device", "vars.items", "print", "open", "opt_file.write", "sorted", "opt_file.write", "base_options.BaseOptions.opt.gpu_ids.append", "vars.items", "opt_file.write", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.util.util.mkdirs", "home.repos.pwc.inspect_result.AAnoosheh_ComboGAN.options.base_options.BaseOptions.initialize"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "str_ids", "=", "self", ".", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "self", ".", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "self", ".", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "\n", "# set gpu ids", "\n", "", "", "if", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "args", "=", "vars", "(", "self", ".", "opt", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "# save to the disk", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "opt_file", ".", "write", "(", "'------------ Options -------------\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "                ", "opt_file", ".", "write", "(", "'%s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "opt_file", ".", "write", "(", "'-------------- End ----------------\\n'", ")", "\n", "", "return", "self", ".", "opt", "\n", "", "", ""]]}