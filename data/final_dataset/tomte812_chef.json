{"home.repos.pwc.inspect_result.tomte812_chef.None.core.NShotTaskSampler.__init__": [[11, 52], ["torch.utils.data.Sampler.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ":", "torch", ".", "utils", ".", "data", ".", "Dataset", ",", "\n", "episodes_per_epoch", ":", "int", "=", "None", ",", "\n", "n", ":", "int", "=", "None", ",", "\n", "k", ":", "int", "=", "None", ",", "\n", "q", ":", "int", "=", "None", ",", "\n", "num_tasks", ":", "int", "=", "1", ",", "\n", "fixed_tasks", ":", "List", "[", "Iterable", "[", "int", "]", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"PyTorch Sampler subclass that generates batches of n-shot, k-way, q-query tasks.\n\n        Each n-shot task contains a \"support set\" of `k` sets of `n` samples and a \"query set\" of `k` sets\n        of `q` samples. The support set and the query set are all grouped into one Tensor such that the first n * k\n        samples are from the support set while the remaining q * k samples are from the query set.\n\n        The support and query sets are sampled such that they are disjoint i.e. do not contain overlapping samples.\n\n        # Arguments\n            dataset: Instance of torch.utils.data.Dataset from which to draw samples\n            episodes_per_epoch: Arbitrary number of batches of n-shot tasks to generate in one epoch\n            n_shot: int. Number of samples for each class in the n-shot classification tasks.\n            k_way: int. Number of classes in the n-shot classification tasks.\n            q_queries: int. Number query samples for each class in the n-shot classification tasks.\n            num_tasks: Number of n-shot tasks to group into a single batch\n            fixed_tasks: If this argument is specified this Sampler will always generate tasks from\n                the specified classes\n        \"\"\"", "\n", "super", "(", "NShotTaskSampler", ",", "self", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "episodes_per_epoch", "=", "episodes_per_epoch", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n", "if", "num_tasks", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'num_tasks must be > 1.'", ")", "\n", "\n", "", "self", ".", "num_tasks", "=", "num_tasks", "\n", "# TODO: Raise errors if initialise badly", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "q", "=", "q", "\n", "self", ".", "fixed_tasks", "=", "fixed_tasks", "\n", "\n", "self", ".", "i_task", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.core.NShotTaskSampler.__len__": [[53, 55], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "episodes_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.core.NShotTaskSampler.iter_with_dataframe": [[56, 89], ["range", "range", "numpy.stack", "numpy.random.choice", "df[].sample", "df[].sample.iterrows", "df[].sample", "df[].sample.iterrows", "core.NShotTaskSampler.dataset.df[].unique", "core.NShotTaskSampler.dataset.df[].isin", "batch.append", "batch.append", "len", "df[].isin"], "methods", ["None"], ["", "def", "iter_with_dataframe", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "self", ".", "episodes_per_epoch", ")", ":", "\n", "            ", "batch", "=", "[", "]", "\n", "\n", "for", "task", "in", "range", "(", "self", ".", "num_tasks", ")", ":", "\n", "                ", "if", "self", ".", "fixed_tasks", "is", "None", ":", "\n", "# Get random classes", "\n", "                    ", "episode_classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "dataset", ".", "df", "[", "'class_id'", "]", ".", "unique", "(", ")", ",", "size", "=", "self", ".", "k", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "# Loop through classes in fixed_tasks", "\n", "                    ", "episode_classes", "=", "self", ".", "fixed_tasks", "[", "self", ".", "i_task", "%", "len", "(", "self", ".", "fixed_tasks", ")", "]", "\n", "self", ".", "i_task", "+=", "1", "\n", "\n", "", "df", "=", "self", ".", "dataset", ".", "df", "[", "self", ".", "dataset", ".", "df", "[", "'class_id'", "]", ".", "isin", "(", "episode_classes", ")", "]", "\n", "\n", "support_k", "=", "{", "k", ":", "None", "for", "k", "in", "episode_classes", "}", "\n", "for", "k", "in", "episode_classes", ":", "\n", "# Select support examples", "\n", "                    ", "support", "=", "df", "[", "df", "[", "'class_id'", "]", "==", "k", "]", ".", "sample", "(", "self", ".", "n", ")", "\n", "support_k", "[", "k", "]", "=", "support", "\n", "\n", "for", "i", ",", "s", "in", "support", ".", "iterrows", "(", ")", ":", "\n", "                        ", "batch", ".", "append", "(", "s", "[", "'id'", "]", ")", "\n", "\n", "", "", "for", "k", "in", "episode_classes", ":", "\n", "                    ", "query", "=", "df", "[", "(", "df", "[", "'class_id'", "]", "==", "k", ")", "&", "(", "~", "df", "[", "'id'", "]", ".", "isin", "(", "support_k", "[", "k", "]", "[", "'id'", "]", ")", ")", "]", ".", "sample", "(", "self", ".", "q", ")", "\n", "for", "i", ",", "q", "in", "query", ".", "iterrows", "(", ")", ":", "\n", "                        ", "batch", ".", "append", "(", "q", "[", "'id'", "]", ")", "\n", "\n", "#print('iter_with_dataframe')", "\n", "#print(np.stack(batch))", "\n", "#exit()", "\n", "", "", "", "yield", "np", ".", "stack", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.core.NShotTaskSampler.iter_no_dataframe": [[90, 105], ["range", "range", "numpy.random.choice", "numpy.stack", "batch.append", "numpy.concatenate", "numpy.concatenate", "numpy.random.choice", "support_samples.flatten", "query_samples.flatten"], "methods", ["None"], ["", "", "def", "iter_no_dataframe", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "self", ".", "episodes_per_epoch", ")", ":", "\n", "            ", "batch", "=", "[", "]", "\n", "\n", "for", "task", "in", "range", "(", "self", ".", "num_tasks", ")", ":", "\n", "                ", "assert", "(", "self", ".", "fixed_tasks", "is", "None", ")", "\n", "episode_classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "dataset", ".", "labelIds", ",", "size", "=", "self", ".", "k", ",", "replace", "=", "False", ")", "\n", "episode_samples", "=", "np", ".", "stack", "(", "[", "np", ".", "random", ".", "choice", "(", "self", ".", "dataset", ".", "label2ind", "[", "k", "]", ",", "size", "=", "self", ".", "n", "+", "self", ".", "q", ",", "replace", "=", "False", ")", "for", "k", "in", "episode_classes", "]", ")", "\n", "support_samples", ",", "query_samples", "=", "episode_samples", "[", ":", ",", ":", "self", ".", "n", "]", ",", "episode_samples", "[", ":", ",", "self", ".", "n", ":", "]", "\n", "batch", ".", "append", "(", "np", ".", "concatenate", "(", "[", "support_samples", ".", "flatten", "(", ")", ",", "query_samples", ".", "flatten", "(", ")", "]", ")", ")", "\n", "\n", "#print('iter_no_dataframe')", "\n", "#print(np.concatenate(batch))", "\n", "#exit()", "\n", "", "yield", "np", ".", "concatenate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.core.NShotTaskSampler.__iter__": [[106, 111], ["hasattr", "core.NShotTaskSampler.iter_with_dataframe", "core.NShotTaskSampler.iter_no_dataframe"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.core.NShotTaskSampler.iter_with_dataframe", "home.repos.pwc.inspect_result.tomte812_chef.None.core.NShotTaskSampler.iter_no_dataframe"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "dataset", ",", "'df'", ")", ":", "\n", "            ", "return", "self", ".", "iter_with_dataframe", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "iter_no_dataframe", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.core.EvaluateFewShot.__init__": [[128, 150], ["callbacks.Callback.__init__", "torch.cuda.get_rng_state"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["def", "__init__", "(", "self", ",", "\n", "eval_fn", ":", "Callable", ",", "\n", "num_tasks", ":", "int", ",", "\n", "n_shot", ":", "int", ",", "\n", "k_way", ":", "int", ",", "\n", "q_queries", ":", "int", ",", "\n", "taskloader", ":", "torch", ".", "utils", ".", "data", ".", "DataLoader", ",", "\n", "prepare_batch", ":", "Callable", ",", "\n", "prefix", ":", "str", "=", "'val_'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EvaluateFewShot", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eval_fn", "=", "eval_fn", "\n", "self", ".", "num_tasks", "=", "num_tasks", "\n", "self", ".", "n_shot", "=", "n_shot", "\n", "self", ".", "k_way", "=", "k_way", "\n", "self", ".", "q_queries", "=", "q_queries", "\n", "self", ".", "taskloader", "=", "taskloader", "\n", "self", ".", "prepare_batch", "=", "prepare_batch", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "metric_name", "=", "f'{self.prefix}{self.n_shot}-shot_{self.k_way}-way_acc'", "\n", "self", ".", "rng_state", "=", "torch", ".", "cuda", ".", "get_rng_state", "(", "self", ".", "kwargs", "[", "'device'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.core.EvaluateFewShot.on_train_begin": [[151, 154], ["None"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "loss_fn", "=", "self", ".", "params", "[", "'loss_fn'", "]", "\n", "self", ".", "optimiser", "=", "self", ".", "params", "[", "'optimiser'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.core.EvaluateFewShot.on_epoch_end": [[155, 187], ["torch.cuda.get_rng_state", "torch.cuda.set_rng_state", "enumerate", "torch.cuda.set_rng_state", "core.EvaluateFewShot.prepare_batch", "core.EvaluateFewShot.eval_fn", "loss.item", "metrics.categorical_accuracy"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.metrics.categorical_accuracy"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "logs", "=", "logs", "or", "{", "}", "\n", "seen", "=", "0", "\n", "totals", "=", "{", "'loss'", ":", "0", ",", "self", ".", "metric_name", ":", "0", "}", "\n", "rng_state", "=", "torch", ".", "cuda", ".", "get_rng_state", "(", "self", ".", "kwargs", "[", "'device'", "]", ")", "\n", "torch", ".", "cuda", ".", "set_rng_state", "(", "self", ".", "rng_state", ",", "self", ".", "kwargs", "[", "'device'", "]", ")", "\n", "\n", "for", "batch_index", ",", "batch", "in", "enumerate", "(", "self", ".", "taskloader", ")", ":", "\n", "            ", "x", ",", "y", "=", "self", ".", "prepare_batch", "(", "batch", ")", "\n", "\n", "loss", ",", "y_pred", "=", "self", ".", "eval_fn", "(", "\n", "self", ".", "model", "[", "'sys1'", "]", ",", "\n", "self", ".", "optimiser", ",", "\n", "self", ".", "loss_fn", ",", "\n", "x", ",", "\n", "y", ",", "\n", "n_shot", "=", "self", ".", "n_shot", ",", "\n", "k_way", "=", "self", ".", "k_way", ",", "\n", "q_queries", "=", "self", ".", "q_queries", ",", "\n", "train", "=", "False", ",", "\n", "**", "self", ".", "kwargs", "\n", ")", "\n", "\n", "seen", "+=", "y_pred", ".", "shape", "[", "0", "]", "\n", "\n", "totals", "[", "'loss'", "]", "+=", "loss", ".", "item", "(", ")", "*", "y_pred", ".", "shape", "[", "0", "]", "\n", "totals", "[", "self", ".", "metric_name", "]", "+=", "categorical_accuracy", "(", "y", ",", "y_pred", ")", "*", "y_pred", ".", "shape", "[", "0", "]", "\n", "\n", "", "torch", ".", "cuda", ".", "set_rng_state", "(", "rng_state", ",", "self", ".", "kwargs", "[", "'device'", "]", ")", "\n", "loss", ",", "acc", "=", "totals", "[", "'loss'", "]", "/", "seen", ",", "totals", "[", "self", ".", "metric_name", "]", "/", "seen", "\n", "logs", "[", "self", ".", "prefix", "+", "'loss'", "]", "=", "loss", "\n", "logs", "[", "self", ".", "metric_name", "]", "=", "acc", "\n", "#print(f'\\nloss {loss} acc {acc}')", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.core.prepare_nshot_task": [[190, 213], ["x.double().cuda.double().cuda", "create_nshot_task_label().cuda", "x.double().cuda.double", "core.create_nshot_task_label"], "function", ["home.repos.pwc.inspect_result.tomte812_chef.None.core.create_nshot_task_label"], ["", "", "def", "prepare_nshot_task", "(", "n", ":", "int", ",", "k", ":", "int", ",", "q", ":", "int", ")", "->", "Callable", ":", "\n", "    ", "\"\"\"Typical n-shot task preprocessing.\n\n    # Arguments\n        n: Number of samples for each class in the n-shot classification task\n        k: Number of classes in the n-shot classification task\n        q: Number of query samples for each class in the n-shot classification task\n\n    # Returns\n        prepare_nshot_task_: A Callable that processes a few shot tasks with specified n, k and q\n    \"\"\"", "\n", "def", "prepare_nshot_task_", "(", "batch", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Create 0-k label and move to GPU.\n\n        TODO: Move to arbitrary device\n        \"\"\"", "\n", "x", ",", "y", "=", "batch", "\n", "x", "=", "x", ".", "double", "(", ")", ".", "cuda", "(", ")", "\n", "# Create dummy 0-(num_classes - 1) label", "\n", "y", "=", "create_nshot_task_label", "(", "k", ",", "q", ")", ".", "cuda", "(", ")", "\n", "return", "x", ",", "y", "\n", "\n", "", "return", "prepare_nshot_task_", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.core.create_nshot_task_label": [[215, 232], ["torch.arange().long", "torch.arange"], "function", ["None"], ["", "def", "create_nshot_task_label", "(", "k", ":", "int", ",", "q", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Creates an n-shot task label.\n\n    Label has the structure:\n        [0]*q + [1]*q + ... + [k-1]*q\n\n    # TODO: Test this\n\n    # Arguments\n        k: Number of classes in the n-shot classification task\n        q: Number of query samples for each class in the n-shot classification task\n\n    # Returns\n        y: Label vector for n-shot task of shape [q * k, ]\n    \"\"\"", "\n", "y", "=", "torch", ".", "arange", "(", "0", ",", "k", ",", "1", "/", "q", ")", ".", "long", "(", ")", "\n", "return", "y", "\n", "", ""]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.Flatten.forward": [[20, 22], ["input.view", "input.size"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.GlobalMaxPool1d.forward": [[30, 32], ["torch.nn.functional.max_pool1d().view", "torch.nn.functional.max_pool1d().view", "input.size", "torch.nn.functional.max_pool1d", "torch.nn.functional.max_pool1d", "input.size"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "nn", ".", "functional", ".", "max_pool1d", "(", "input", ",", "kernel_size", "=", "input", ".", "size", "(", ")", "[", "2", ":", "]", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.GlobalAvgPool2d.forward": [[40, 42], ["torch.nn.functional.avg_pool2d().view", "torch.nn.functional.avg_pool2d().view", "input.size", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "input.size"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "nn", ".", "functional", ".", "avg_pool2d", "(", "input", ",", "kernel_size", "=", "input", ".", "size", "(", ")", "[", "2", ":", "]", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.FewShotClassifier.__init__": [[112, 136], ["torch.nn.Module.__init__", "models.conv_block", "models.conv_block", "models.conv_block", "models.conv_block", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__", "home.repos.pwc.inspect_result.tomte812_chef.None.models.conv_block", "home.repos.pwc.inspect_result.tomte812_chef.None.models.conv_block", "home.repos.pwc.inspect_result.tomte812_chef.None.models.conv_block", "home.repos.pwc.inspect_result.tomte812_chef.None.models.conv_block"], ["    ", "def", "__init__", "(", "self", ",", "num_input_channels", ":", "int", ",", "k_way", ":", "int", ",", "final_layer_size", ":", "int", "=", "64", ",", "\n", "dropout", "=", "0.", ",", "mult", "=", "1", ",", "no_relu", "=", "False", ")", ":", "\n", "        ", "\"\"\"Creates a few shot classifier as used in MAML.\n\n        This network should be identical to the one created by `get_few_shot_encoder` but with a\n        classification layer on top.\n\n        # Arguments:\n            num_input_channels: Number of color channels the model expects input data to contain. Omniglot = 1,\n                miniImageNet = 3\n            k_way: Number of classes the model will discriminate between\n            final_layer_size: 64 for Omniglot, 1600 for miniImageNet\n        \"\"\"", "\n", "super", "(", "FewShotClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "no_relu", "=", "no_relu", "\n", "self", ".", "final_layer_size", "=", "final_layer_size", "\n", "self", ".", "conv1", "=", "conv_block", "(", "num_input_channels", ",", "64", ")", "\n", "self", ".", "conv2", "=", "conv_block", "(", "64", ",", "64", ")", "\n", "self", ".", "conv3", "=", "conv_block", "(", "64", ",", "64", "*", "mult", ")", "\n", "self", ".", "conv4", "=", "conv_block", "(", "64", "*", "mult", ",", "64", "*", "mult", ",", "self", ".", "no_relu", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "logits", "=", "nn", ".", "Linear", "(", "final_layer_size", "*", "mult", ",", "k_way", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.FewShotClassifier.forward": [[137, 152], ["models.FewShotClassifier.conv1", "models.FewShotClassifier.conv2", "models.FewShotClassifier.conv3", "models.FewShotClassifier.conv4", "models.FewShotClassifier.view", "models.FewShotClassifier.size", "models.FewShotClassifier.dropout", "models.FewShotClassifier.logits"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "output_layer", "=", "True", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "self", ".", "features", "=", "x", "\n", "\n", "if", "output_layer", ":", "\n", "          ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "return", "self", ".", "logits", "(", "x", ")", "\n", "", "else", ":", "\n", "          ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.FewShotClassifier.functional_forward": [[153, 173], ["functional_conv_block.view", "torch.dropout", "torch.dropout", "torch.linear", "torch.linear", "models.functional_conv_block", "functional_conv_block.size", "weights.get", "weights.get"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.models.functional_conv_block"], ["", "", "def", "functional_forward", "(", "self", ",", "x", ",", "weights", ")", ":", "\n", "        ", "\"\"\"Applies the same forward pass using PyTorch functional operators using a specified set of weights.\"\"\"", "\n", "\n", "for", "block", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", ":", "\n", "            ", "x", "=", "functional_conv_block", "(", "\n", "x", ",", "\n", "weights", "[", "f'conv{block}.0.weight'", "]", ",", "\n", "weights", "[", "f'conv{block}.0.bias'", "]", ",", "\n", "weights", ".", "get", "(", "f'conv{block}.1.weight'", ")", ",", "\n", "weights", ".", "get", "(", "f'conv{block}.1.bias'", ")", ",", "\n", "no_relu", "=", "False", "if", "block", "<", "4", "else", "self", ".", "no_relu", "\n", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "self", ".", "features", "=", "x", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ".", "p", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "x", "=", "F", ".", "linear", "(", "x", ",", "weights", "[", "'logits.weight'", "]", ",", "weights", "[", "'logits.bias'", "]", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.MatchingNetwork.__init__": [[180, 208], ["torch.nn.Module.__init__", "models.get_few_shot_encoder", "BidrectionalLSTM().to", "AttentionLSTM().to", "models.BidrectionalLSTM", "models.AttentionLSTM"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__", "home.repos.pwc.inspect_result.tomte812_chef.None.models.get_few_shot_encoder"], ["    ", "def", "__init__", "(", "self", ",", "n", ":", "int", ",", "k", ":", "int", ",", "q", ":", "int", ",", "fce", ":", "bool", ",", "num_input_channels", ":", "int", ",", "\n", "lstm_layers", ":", "int", ",", "lstm_input_size", ":", "int", ",", "unrolling_steps", ":", "int", ",", "device", ":", "torch", ".", "device", ")", ":", "\n", "        ", "\"\"\"Creates a Matching Network as described in Vinyals et al.\n\n        # Arguments:\n            n: Number of examples per class in the support set\n            k: Number of classes in the few shot classification task\n            q: Number of examples per class in the query set\n            fce: Whether or not to us fully conditional embeddings\n            num_input_channels: Number of color channels the model expects input data to contain. Omniglot = 1,\n                miniImageNet = 3\n            lstm_layers: Number of LSTM layers in the bidrectional LSTM g that embeds the support set (fce = True)\n            lstm_input_size: Input size for the bidirectional and Attention LSTM. This is determined by the embedding\n                dimension of the few shot encoder which is in turn determined by the size of the input data. Hence we\n                have Omniglot -> 64, miniImageNet -> 1600.\n            unrolling_steps: Number of unrolling steps to run the Attention LSTM\n            device: Device on which to run computation\n        \"\"\"", "\n", "super", "(", "MatchingNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "q", "=", "q", "\n", "self", ".", "fce", "=", "fce", "\n", "self", ".", "num_input_channels", "=", "num_input_channels", "\n", "self", ".", "encoder", "=", "get_few_shot_encoder", "(", "self", ".", "num_input_channels", ")", "\n", "if", "self", ".", "fce", ":", "\n", "            ", "self", ".", "g", "=", "BidrectionalLSTM", "(", "lstm_input_size", ",", "lstm_layers", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "self", ".", "f", "=", "AttentionLSTM", "(", "lstm_input_size", ",", "unrolling_steps", "=", "unrolling_steps", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.MatchingNetwork.forward": [[209, 211], ["None"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.BidrectionalLSTM.__init__": [[214, 232], ["torch.nn.Module.__init__", "torch.nn.LSTM", "torch.nn.LSTM"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ":", "int", ",", "layers", ":", "int", ")", ":", "\n", "        ", "\"\"\"Bidirectional LSTM used to generate fully conditional embeddings (FCE) of the support set as described\n        in the Matching Networks paper.\n\n        # Arguments\n            size: Size of input and hidden layers. These are constrained to be the same in order to implement the skip\n                connection described in Appendix A.2\n            layers: Number of LSTM layers\n        \"\"\"", "\n", "super", "(", "BidrectionalLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "layers", "\n", "self", ".", "batch_size", "=", "1", "\n", "# Force input size and hidden size to be the same in order to implement", "\n", "# the skip connection as described in Appendix A.1 and A.2 of Matching Networks", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "size", ",", "\n", "num_layers", "=", "layers", ",", "\n", "hidden_size", "=", "size", ",", "\n", "bidirectional", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.BidrectionalLSTM.forward": [[233, 244], ["models.BidrectionalLSTM.lstm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# Give None as initial state and Pytorch LSTM creates initial hidden states", "\n", "        ", "output", ",", "(", "hn", ",", "cn", ")", "=", "self", ".", "lstm", "(", "inputs", ",", "None", ")", "\n", "\n", "forward_output", "=", "output", "[", ":", ",", ":", ",", ":", "self", ".", "lstm", ".", "hidden_size", "]", "\n", "backward_output", "=", "output", "[", ":", ",", ":", ",", "self", ".", "lstm", ".", "hidden_size", ":", "]", "\n", "\n", "# g(x_i, S) = h_forward_i + h_backward_i + g'(x_i) as written in Appendix A.2", "\n", "# AKA A skip connection between inputs and outputs is used", "\n", "output", "=", "forward_output", "+", "backward_output", "+", "inputs", "\n", "return", "output", ",", "hn", ",", "cn", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.AttentionLSTM.__init__": [[247, 261], ["torch.nn.Module.__init__", "torch.nn.LSTMCell", "torch.nn.LSTMCell"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ":", "int", ",", "unrolling_steps", ":", "int", ")", ":", "\n", "        ", "\"\"\"Attentional LSTM used to generate fully conditional embeddings (FCE) of the query set as described\n        in the Matching Networks paper.\n\n        # Arguments\n            size: Size of input and hidden layers. These are constrained to be the same in order to implement the skip\n                connection described in Appendix A.2\n            unrolling_steps: Number of steps of attention over the support set to compute. Analogous to number of\n                layers in a regular LSTM\n        \"\"\"", "\n", "super", "(", "AttentionLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "unrolling_steps", "=", "unrolling_steps", "\n", "self", ".", "lstm_cell", "=", "nn", ".", "LSTMCell", "(", "input_size", "=", "size", ",", "\n", "hidden_size", "=", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.AttentionLSTM.forward": [[262, 292], ["torch.zeros_like().cuda().double", "torch.zeros_like().cuda().double", "torch.zeros_like().cuda().double", "torch.zeros_like().cuda().double", "torch.zeros().cuda().double", "torch.zeros().cuda().double", "torch.zeros().cuda().double", "torch.zeros().cuda().double", "range", "ValueError", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "attentions.softmax.softmax.softmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "models.AttentionLSTM.lstm_cell", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "support.t", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "support", ",", "queries", ")", ":", "\n", "# Get embedding dimension, d", "\n", "        ", "if", "support", ".", "shape", "[", "-", "1", "]", "!=", "queries", ".", "shape", "[", "-", "1", "]", ":", "\n", "            ", "raise", "(", "ValueError", "(", "\"Support and query set have different embedding dimension!\"", ")", ")", "\n", "\n", "", "batch_size", "=", "queries", ".", "shape", "[", "0", "]", "\n", "embedding_dim", "=", "queries", ".", "shape", "[", "1", "]", "\n", "\n", "h_hat", "=", "torch", ".", "zeros_like", "(", "queries", ")", ".", "cuda", "(", ")", ".", "double", "(", ")", "\n", "c", "=", "torch", ".", "zeros", "(", "batch_size", ",", "embedding_dim", ")", ".", "cuda", "(", ")", ".", "double", "(", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "unrolling_steps", ")", ":", "\n", "# Calculate hidden state cf. equation (4) of appendix A.2", "\n", "            ", "h", "=", "h_hat", "+", "queries", "\n", "\n", "# Calculate softmax attentions between hidden states and support set embeddings", "\n", "# cf. equation (6) of appendix A.2", "\n", "attentions", "=", "torch", ".", "mm", "(", "h", ",", "support", ".", "t", "(", ")", ")", "\n", "attentions", "=", "attentions", ".", "softmax", "(", "dim", "=", "1", ")", "\n", "\n", "# Calculate readouts from support set embeddings cf. equation (5)", "\n", "readout", "=", "torch", ".", "mm", "(", "attentions", ",", "support", ")", "\n", "\n", "# Run LSTM cell cf. equation (3)", "\n", "# h_hat, c = self.lstm_cell(queries, (torch.cat([h, readout], dim=1), c))", "\n", "h_hat", ",", "c", "=", "self", ".", "lstm_cell", "(", "queries", ",", "(", "h", "+", "readout", ",", "c", ")", ")", "\n", "\n", "", "h", "=", "h_hat", "+", "queries", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.Sys2Net1.__init__": [[295, 302], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["  ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "output_size", ")", ":", "\n", "    ", "super", "(", "Sys2Net1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lin1", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ")", "\n", "self", ".", "gate", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ")", "\n", "self", ".", "lin2", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "gate", ".", "bias", ",", "-", "3.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "lin2", ".", "bias", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.Sys2Net1.forward": [[304, 307], ["models.Sys2Net1.lin2", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "models.Sys2Net1.lin1", "models.Sys2Net1.gate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "torch", ".", "tanh", "(", "self", ".", "lin1", "(", "x", ")", ")", "*", "torch", ".", "sigmoid", "(", "self", ".", "gate", "(", "x", ")", ")", "\n", "return", "self", ".", "lin2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.Sys2Net2.__init__": [[310, 331], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "models.Sys2Net2.lin.append", "models.Sys2Net2.lin.append", "models.Sys2Net2.dropout.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["  ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "output_size", ",", "num_hidden_layer", ",", "relu_out", ",", "init0", ",", "dropout", ")", ":", "\n", "    ", "super", "(", "Sys2Net2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "relu_out", "=", "relu_out", "\n", "self", ".", "num_hidden_layer", "=", "num_hidden_layer", "\n", "\n", "self", ".", "lin", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ")", "]", ")", "\n", "#self.bn = nn.ModuleList([nn.BatchNorm1d(hidden_size)])", "\n", "self", ".", "dropout", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_hidden_layer", "-", "1", ")", ":", "\n", "      ", "self", ".", "lin", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ")", "\n", "#self.bn.append(nn.BatchNorm1d(hidden_size))", "\n", "self", ".", "dropout", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ")", "\n", "\n", "", "self", ".", "lin", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", ")", "\n", "\n", "if", "init0", ":", "\n", "      ", "for", "m", "in", "self", ".", "lin", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.Sys2Net2.forward": [[333, 349], ["range", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "input", "=", "x", "\n", "for", "i", "in", "range", "(", "self", ".", "num_hidden_layer", ")", ":", "\n", "      ", "x", "=", "self", ".", "lin", "[", "i", "]", "(", "x", ")", "\n", "#x = self.bn[i](x)", "\n", "x", "=", "torch", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "[", "i", "]", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "lin", "[", "-", "1", "]", "(", "x", ")", "\n", "\n", "x", "=", "torch", ".", "relu", "(", "x", ")", "+", "input", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "#if self.relu_out:", "\n", "#  x = torch.relu(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.Sys2LSTM.__init__": [[352, 367], ["torch.nn.Module.__init__", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["  ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "output_size", ")", ":", "\n", "    ", "super", "(", "Sys2LSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", ",", "hidden_size", ")", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", "\n", "\n", "# init biases with 0 except output gate bias negative", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "lstm", ".", "bias_ih_l0", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "lstm", ".", "bias_hh_l0", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "lstm", ".", "bias_ih_l0", "[", "3", "*", "hidden_size", ":", "]", ",", "-", "3.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "lstm", ".", "bias_ih_l0", "[", "hidden_size", ":", "2", "*", "hidden_size", "]", ",", "1e+30", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "out", ".", "bias", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.Sys2LSTM.init_hidden": [[369, 371], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ",", "device", ",", "dtype", ")", ":", "\n", "    ", "return", "torch", ".", "zeros", "(", "2", ",", "1", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "to", "(", "device", ",", "dtype", "=", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.Sys2LSTM.forward": [[373, 376], ["models.Sys2LSTM.lstm", "input.view", "models.Sys2LSTM.out"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "state", ")", ":", "\n", "    ", "hidden", ",", "state", "=", "self", ".", "lstm", "(", "input", ".", "view", "(", "1", ",", "*", "input", ".", "shape", ")", ",", "state", ")", "\n", "return", "self", ".", "out", "(", "hidden", "[", "0", "]", ")", ",", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.conv_block": [[44, 63], ["torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.MaxPool2d"], "function", ["None"], ["", "", "def", "conv_block", "(", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "no_relu", ":", "bool", "=", "False", ")", "->", "nn", ".", "Module", ":", "\n", "    ", "\"\"\"Returns a Module that performs 3x3 convolution, ReLu activation, 2x2 max pooling.\n\n    # Arguments\n        in_channels:\n        out_channels:\n    \"\"\"", "\n", "\n", "seq", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "]", "\n", "\n", "if", "no_relu", ":", "\n", "        ", "del", "seq", "[", "2", "]", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "seq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.functional_conv_block": [[65, 84], ["torch.conv2d", "torch.batch_norm", "torch.max_pool2d", "torch.relu"], "function", ["None"], ["", "def", "functional_conv_block", "(", "x", ":", "torch", ".", "Tensor", ",", "weights", ":", "torch", ".", "Tensor", ",", "biases", ":", "torch", ".", "Tensor", ",", "\n", "bn_weights", ",", "bn_biases", ",", "no_relu", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Performs 3x3 convolution, ReLu activation, 2x2 max pooling in a functional fashion.\n\n    # Arguments:\n        x: Input Tensor for the conv block\n        weights: Weights for the convolutional block\n        biases: Biases for the convolutional block\n        bn_weights:\n        bn_biases:\n    \"\"\"", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "weights", ",", "biases", ",", "padding", "=", "1", ")", "\n", "x", "=", "F", ".", "batch_norm", "(", "x", ",", "running_mean", "=", "None", ",", "running_var", "=", "None", ",", "weight", "=", "bn_weights", ",", "bias", "=", "bn_biases", ",", "training", "=", "True", ")", "\n", "\n", "if", "not", "no_relu", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.get_few_shot_encoder": [[89, 105], ["torch.nn.Sequential", "models.conv_block", "models.conv_block", "models.conv_block", "models.conv_block", "models.Flatten"], "function", ["home.repos.pwc.inspect_result.tomte812_chef.None.models.conv_block", "home.repos.pwc.inspect_result.tomte812_chef.None.models.conv_block", "home.repos.pwc.inspect_result.tomte812_chef.None.models.conv_block", "home.repos.pwc.inspect_result.tomte812_chef.None.models.conv_block"], ["", "def", "get_few_shot_encoder", "(", "num_input_channels", "=", "1", ",", "conv128", "=", "False", ")", "->", "nn", ".", "Module", ":", "\n", "    ", "\"\"\"Creates a few shot encoder as used in Matching and Prototypical Networks\n\n    # Arguments:\n        num_input_channels: Number of color channels the model expects input data to contain. Omniglot = 1,\n            miniImageNet = 3\n    \"\"\"", "\n", "\n", "mult", "=", "conv128", "+", "1", "\n", "\n", "return", "nn", ".", "Sequential", "(", "\n", "conv_block", "(", "num_input_channels", ",", "64", ")", ",", "\n", "conv_block", "(", "64", ",", "64", ")", ",", "\n", "conv_block", "(", "64", ",", "64", "*", "mult", ")", ",", "\n", "conv_block", "(", "64", "*", "mult", ",", "64", "*", "mult", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.conv64": [[108, 110], ["models.get_few_shot_encoder"], "function", ["home.repos.pwc.inspect_result.tomte812_chef.None.models.get_few_shot_encoder"], ["", "def", "conv64", "(", ")", ":", "\n", "    ", "return", "get_few_shot_encoder", "(", "3", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.conv": [[175, 177], ["models.FewShotClassifier"], "function", ["None"], ["", "", "def", "conv", "(", "k_way", ",", "dropout", ",", "no_relu", ")", ":", "\n", "    ", "return", "FewShotClassifier", "(", "3", ",", "k_way", ",", "1600", ",", "dropout", "=", "dropout", ",", "mult", "=", "1", ",", "no_relu", "=", "no_relu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.make_sys2net": [[378, 380], ["models.Sys2LSTM"], "function", ["None"], ["", "", "def", "make_sys2net", "(", "input_size", ",", "hidden_size", ",", "output_size", ")", ":", "\n", "  ", "return", "Sys2LSTM", "(", "input_size", ",", "hidden_size", ",", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.models.make_sys2feat": [[382, 384], ["models.Sys2Net2"], "function", ["None"], ["", "def", "make_sys2feat", "(", "input_size", ",", "hidden_size", ",", "output_size", ",", "num_hidden_layer", ",", "relu_out", ",", "init0", ",", "dropout", ")", ":", "\n", "  ", "return", "Sys2Net2", "(", "input_size", ",", "hidden_size", ",", "output_size", ",", "num_hidden_layer", ",", "relu_out", ",", "init0", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.xdom_res10.ModelWrapper.__init__": [[21, 33], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Linear", "len", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed", ",", "fc_sizes", ")", ":", "\n", "    ", "super", "(", "ModelWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed", "=", "embed", "\n", "self", ".", "feature_index", "=", "[", "-", "1", "]", "\n", "\n", "seq", "=", "[", "]", "#[nn.ReLU()]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "fc_sizes", ")", "-", "2", ")", ":", "\n", "      ", "seq", "+=", "[", "nn", ".", "Linear", "(", "fc_sizes", "[", "i", "]", ",", "fc_sizes", "[", "i", "+", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "seq", "+=", "[", "nn", ".", "Linear", "(", "fc_sizes", "[", "-", "2", "]", ",", "fc_sizes", "[", "-", "1", "]", ")", "]", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "seq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.xdom_res10.ModelWrapper.forward": [[34, 43], ["xdom_res10.ModelWrapper.embed", "m", "xdom_res10.ModelWrapper.x[].flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "output_layer", "=", "True", ")", ":", "\n", "    ", "self", ".", "x", "=", "[", "self", ".", "embed", "(", "x", ")", "]", "\n", "\n", "for", "m", "in", "self", ".", "output_layer", ":", "\n", "      ", "self", ".", "x", "+=", "[", "m", "(", "self", ".", "x", "[", "-", "1", "]", ".", "flatten", "(", "1", ")", ")", "]", "\n", "\n", "", "self", ".", "features", "=", "[", "self", ".", "x", "[", "fi", "]", "for", "fi", "in", "self", ".", "feature_index", "]", "\n", "\n", "return", "self", ".", "x", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.xdom_res18.ModelWrapper.__init__": [[78, 82], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed", ")", ":", "\n", "    ", "super", "(", "ModelWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed", "=", "embed", "\n", "self", ".", "feature_index", "=", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.xdom_res18.ModelWrapper.forward": [[83, 92], ["xdom_res18.recursive_forward", "xdom_res18.ModelWrapper.x[].flatten"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.xdom_res18.recursive_forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "output_layer", "=", "True", ")", ":", "\n", "    ", "self", ".", "x", "=", "[", "x", "]", "\n", "self", ".", "x", "=", "recursive_forward", "(", "self", ".", "embed", ",", "self", ".", "x", ")", "\n", "self", ".", "features", "=", "[", "self", ".", "x", "[", "fi", "]", ".", "flatten", "(", "1", ")", "for", "fi", "in", "self", ".", "feature_index", "]", "\n", "\n", "#[print(f.shape) for f in self.features]", "\n", "#exit()", "\n", "\n", "return", "self", ".", "x", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.xdom_res18.basic_block_forward": [[22, 37], ["x.append", "x.append", "x.append", "x.append", "x.append", "x.append", "x.append", "layer.conv1", "layer.bn1", "layer.relu", "layer.conv2", "layer.bn2", "layer.downsample", "layer.relu"], "function", ["None"], ["def", "basic_block_forward", "(", "layer", ",", "x", ")", ":", "\n", "  ", "identity", "=", "x", "[", "-", "1", "]", "\n", "x", ".", "append", "(", "layer", ".", "conv1", "(", "x", "[", "-", "1", "]", ")", ")", "\n", "x", ".", "append", "(", "layer", ".", "bn1", "(", "x", "[", "-", "1", "]", ")", ")", "\n", "x", ".", "append", "(", "layer", ".", "relu", "(", "x", "[", "-", "1", "]", ")", ")", "\n", "x", ".", "append", "(", "layer", ".", "conv2", "(", "x", "[", "-", "1", "]", ")", ")", "\n", "x", ".", "append", "(", "layer", ".", "bn2", "(", "x", "[", "-", "1", "]", ")", ")", "\n", "\n", "if", "layer", ".", "downsample", "is", "not", "None", ":", "\n", "    ", "identity", "=", "layer", ".", "downsample", "(", "identity", ")", "\n", "\n", "", "x", ".", "append", "(", "x", "[", "-", "1", "]", "+", "identity", ")", "\n", "#print('basic_block_forward', len(x)-1)", "\n", "x", ".", "append", "(", "layer", ".", "relu", "(", "x", "[", "-", "1", "]", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.xdom_res18.bottleneck_forward": [[39, 56], ["x.append", "x.append", "x.append", "x.append", "x.append", "x.append", "x.append", "x.append", "x.append", "x.append", "layer.conv1", "layer.bn1", "layer.relu", "layer.conv2", "layer.bn2", "layer.relu", "layer.conv3", "layer.bn3", "layer.downsample", "layer.relu"], "function", ["None"], ["", "def", "bottleneck_forward", "(", "layer", ",", "x", ")", ":", "\n", "  ", "identity", "=", "x", "[", "-", "1", "]", "\n", "x", ".", "append", "(", "layer", ".", "conv1", "(", "x", "[", "-", "1", "]", ")", ")", "\n", "x", ".", "append", "(", "layer", ".", "bn1", "(", "x", "[", "-", "1", "]", ")", ")", "\n", "x", ".", "append", "(", "layer", ".", "relu", "(", "x", "[", "-", "1", "]", ")", ")", "\n", "x", ".", "append", "(", "layer", ".", "conv2", "(", "x", "[", "-", "1", "]", ")", ")", "\n", "x", ".", "append", "(", "layer", ".", "bn2", "(", "x", "[", "-", "1", "]", ")", ")", "\n", "x", ".", "append", "(", "layer", ".", "relu", "(", "x", "[", "-", "1", "]", ")", ")", "\n", "x", ".", "append", "(", "layer", ".", "conv3", "(", "x", "[", "-", "1", "]", ")", ")", "\n", "x", ".", "append", "(", "layer", ".", "bn3", "(", "x", "[", "-", "1", "]", ")", ")", "\n", "\n", "if", "layer", ".", "downsample", "is", "not", "None", ":", "\n", "    ", "identity", "=", "layer", ".", "downsample", "(", "identity", ")", "\n", "\n", "", "x", ".", "append", "(", "x", "[", "-", "1", "]", "+", "identity", ")", "\n", "x", ".", "append", "(", "layer", ".", "relu", "(", "x", "[", "-", "1", "]", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.xdom_res18.recursive_forward": [[58, 75], ["isinstance", "xdom_res18.basic_block_forward", "isinstance", "xdom_res18.bottleneck_forward", "isinstance", "recursive_forward.append", "module.forward().flatten", "hasattr", "module._modules.values", "recursive_forward.append", "xdom_res18.recursive_forward", "module.forward", "module.forward"], "function", ["home.repos.pwc.inspect_result.tomte812_chef.None.xdom_res18.basic_block_forward", "home.repos.pwc.inspect_result.tomte812_chef.None.xdom_res18.bottleneck_forward", "home.repos.pwc.inspect_result.tomte812_chef.None.xdom_res18.recursive_forward", "home.repos.pwc.inspect_result.tomte812_chef.None.dropblock.DropBlock.forward", "home.repos.pwc.inspect_result.tomte812_chef.None.dropblock.DropBlock.forward"], ["", "def", "recursive_forward", "(", "module", ",", "x", ")", ":", "\n", "  ", "if", "isinstance", "(", "module", ",", "BasicBlock", ")", ":", "\n", "    ", "x", "=", "basic_block_forward", "(", "module", ",", "x", ")", "\n", "return", "x", "\n", "", "elif", "isinstance", "(", "module", ",", "Bottleneck", ")", ":", "\n", "    ", "x", "=", "bottleneck_forward", "(", "module", ",", "x", ")", "\n", "return", "x", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "AdaptiveAvgPool2d", ")", ":", "\n", "    ", "x", ".", "append", "(", "module", ".", "forward", "(", "x", "[", "-", "1", "]", ")", ".", "flatten", "(", "1", ")", ")", "\n", "return", "x", "\n", "", "elif", "hasattr", "(", "module", ",", "'_modules'", ")", "and", "module", ".", "_modules", ":", "\n", "    ", "for", "m", "in", "module", ".", "_modules", ".", "values", "(", ")", ":", "\n", "      ", "x", "=", "recursive_forward", "(", "m", ",", "x", ")", "\n", "", "return", "x", "\n", "", "else", ":", "\n", "    ", "x", ".", "append", "(", "module", ".", "forward", "(", "x", "[", "-", "1", "]", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.metrics.categorical_accuracy": [[4, 12], ["torch.eq().sum().item", "torch.eq().sum", "torch.eq", "y_pred.argmax"], "function", ["None"], ["def", "categorical_accuracy", "(", "y", ",", "y_pred", ")", ":", "\n", "    ", "\"\"\"Calculates categorical accuracy.\n\n    # Arguments:\n        y_pred: Prediction probabilities or logits of shape [batch_size, num_categories]\n        y: Ground truth categories. Must have shape [batch_size,]\n    \"\"\"", "\n", "return", "torch", ".", "eq", "(", "y_pred", ".", "argmax", "(", "dim", "=", "-", "1", ")", ",", "y", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "y_pred", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.eval.evaluate": [[9, 53], ["model.eval", "torch.no_grad", "prepare_batch", "model", "isinstance", "loss_fn().item", "m", "loss_fn"], "function", ["None"], ["def", "evaluate", "(", "model", ":", "Module", ",", "dataloader", ":", "DataLoader", ",", "prepare_batch", ":", "Callable", ",", "metrics", ":", "List", "[", "Union", "[", "str", ",", "Callable", "]", "]", ",", "\n", "loss_fn", ":", "Callable", "=", "None", ",", "prefix", ":", "str", "=", "'val_'", ",", "suffix", ":", "str", "=", "''", ")", ":", "\n", "    ", "\"\"\"Evaluate a model on one or more metrics on a particular dataset\n\n    # Arguments\n        model: Model to evaluate\n        dataloader: Instance of torch.utils.data.DataLoader representing the dataset\n        prepare_batch: Callable to perform any desired preprocessing\n        metrics: List of metrics to evaluate the model with. Metrics must either be a named metric (see `metrics.py`) or\n            a Callable that takes predictions and ground truth labels and returns a scalar value\n        loss_fn: Loss function to calculate over the dataset\n        prefix: Prefix to prepend to the name of each metric - used to identify the dataset. Defaults to 'val_' as\n            it is typical to evaluate on a held-out validation dataset\n        suffix: Suffix to append to the name of each metric.\n    \"\"\"", "\n", "logs", "=", "{", "}", "\n", "seen", "=", "0", "\n", "totals", "=", "{", "m", ":", "0", "for", "m", "in", "metrics", "}", "\n", "if", "loss_fn", "is", "not", "None", ":", "\n", "        ", "totals", "[", "'loss'", "]", "=", "0", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch", "in", "dataloader", ":", "\n", "            ", "x", ",", "y", "=", "prepare_batch", "(", "batch", ")", "\n", "y_pred", "=", "model", "(", "x", ")", "\n", "\n", "seen", "+=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "if", "loss_fn", "is", "not", "None", ":", "\n", "                ", "totals", "[", "'loss'", "]", "+=", "loss_fn", "(", "y_pred", ",", "y", ")", ".", "item", "(", ")", "*", "x", ".", "shape", "[", "0", "]", "\n", "\n", "", "for", "m", "in", "metrics", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "str", ")", ":", "\n", "                    ", "v", "=", "NAMED_METRICS", "[", "m", "]", "(", "y", ",", "y_pred", ")", "\n", "", "else", ":", "\n", "# Assume metric is a callable function", "\n", "                    ", "v", "=", "m", "(", "y", ",", "y_pred", ")", "\n", "\n", "", "totals", "[", "m", "]", "+=", "v", "*", "x", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "", "for", "m", "in", "[", "'loss'", "]", "+", "metrics", ":", "\n", "        ", "logs", "[", "prefix", "+", "m", "+", "suffix", "]", "=", "totals", "[", "m", "]", "/", "seen", "\n", "\n", "", "return", "logs", "\n", "", ""]], "home.repos.pwc.inspect_result.tomte812_chef.None.hebb.least_dist": [[14, 30], ["x.transpose", "torch.inverse", "torch.inverse", "torch.inverse", "torch.bmm", "torch.bmm", "torch.bmm", "y.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "type", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "function", ["None"], ["def", "least_dist", "(", "x", ",", "y", ",", "v", "=", "0.", ")", ":", "\n", "# x has shape (meta_batch_size, mesa_batch_size, num_features)", "\n", "# y has shape (meta_batch_size, mesa_batch_size, num_classes)", "\n", "# v has shape (meta_batch_size, num_classes, num_features)", "\n", "    ", "xt", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "xxtinv", "=", "torch", ".", "inverse", "(", "torch", ".", "bmm", "(", "x", ",", "xt", ")", ")", "\n", "xxtinvx", "=", "torch", ".", "bmm", "(", "xxtinv", ",", "x", ")", "\n", "yt", "=", "y", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "if", "type", "(", "v", ")", "is", "torch", ".", "Tensor", ":", "\n", "        ", "vxt", "=", "torch", ".", "bmm", "(", "v", ",", "xt", ")", "\n", "w", "=", "v", "+", "torch", ".", "bmm", "(", "yt", "-", "vxt", ",", "xxtinvx", ")", "\n", "", "else", ":", "\n", "        ", "w", "=", "torch", ".", "bmm", "(", "yt", ",", "xxtinvx", ")", "\n", "\n", "", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.hebb.stage_one_least_norm": [[32, 100], ["model.train", "model", "loss_fn", "optimiser.zero_grad", "loss_fn.backward", "optimiser.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "model.features.reshape", "torch.cat", "torch.cat", "torch.cat", "core.create_nshot_task_label().to", "y.reshape.repeat", "y.reshape.reshape", "torch.inverse", "torch.inverse", "torch.inverse", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "core.create_nshot_task_label().to", "y.reshape.repeat", "y.reshape.reshape", "torch.bmm", "torch.bmm", "torch.bmm", "y_hat.reshape.reshape", "loss_fn", "x.reshape", "torch.bmm", "torch.bmm", "torch.bmm", "y.reshape.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm.transpose", "torch.ones_like", "torch.ones_like", "torch.ones_like", "core.create_nshot_task_label", "torch.cat.transpose", "torch.ones_like", "torch.ones_like", "torch.ones_like", "core.create_nshot_task_label", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "function", ["home.repos.pwc.inspect_result.tomte812_chef.None.core.create_nshot_task_label", "home.repos.pwc.inspect_result.tomte812_chef.None.core.create_nshot_task_label"], ["", "def", "stage_one_least_norm", "(", "model", ":", "Module", ",", "\n", "optimiser", ":", "Optimizer", ",", "\n", "loss_fn", ":", "Callable", ",", "\n", "x", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "n_shot", ":", "int", ",", "\n", "k_way", ":", "int", ",", "\n", "q_queries", ":", "int", ",", "\n", "inner_train_steps", ":", "int", ",", "\n", "inner_lr", ":", "float", ",", "\n", "hebb_lr", ":", "float", ",", "\n", "train", ":", "bool", ",", "\n", "device", ":", "Union", "[", "str", ",", "torch", ".", "device", "]", ")", ":", "\n", "    ", "\"\"\"\n    supervised training on all 64 classes of the meta training set\n    validation on a n-shot k-way meta-learning task from the meta-validation set \n    validation uses a least-norm learner as meta-learning algorithm\n    for training\n      x has shape (meta_batch_size * (n*k + q*k), channels, width, height)\n      y is an int in {0, ..., 64} and has shape (meta_batch_size * (n*k + q*k))\n    for validation\n      x has shape (meta_batch_size, (n*k + q*k), channels, width, height)\n      y should to be constructed locally\n    \"\"\"", "\n", "args", "=", "{", "'device'", ":", "device", ",", "'dtype'", ":", "torch", ".", "double", "}", "\n", "model", ".", "train", "(", "train", ")", "\n", "\n", "if", "train", ":", "\n", "        ", "y_hat", "=", "model", "(", "x", ")", "\n", "loss", "=", "loss_fn", "(", "y_hat", ",", "y", ")", "\n", "optimiser", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimiser", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "        ", "\"\"\"\n        evaluate stage one model on meta validation set\n        that is we construct a least norm learner on top of the pretrained features\n        \"\"\"", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", "(", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", "*", "x", ".", "shape", "[", "1", "]", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", ")", "\n", "# features of shape (meta_batch_size, n*k + q*k, num_features)", "\n", "features", "=", "model", ".", "features", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "# make support features z of shape (meta_batch_size, n*k, num_features+1)", "\n", "z", "=", "features", "[", ":", ",", ":", "n_shot", "*", "k_way", "]", "\n", "z", "=", "torch", ".", "cat", "(", "[", "z", ",", "torch", ".", "ones_like", "(", "z", "[", ":", ",", ":", ",", ":", "1", "]", ")", "]", ",", "dim", "=", "2", ")", "# add bias unit", "\n", "# make labels of shape (meta_batch_size, n*k, k)", "\n", "y", "=", "create_nshot_task_label", "(", "k_way", ",", "n_shot", ")", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "repeat", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "y", "=", "(", "torch", ".", "eye", "(", "k_way", ",", "**", "args", ")", "[", "y", ",", ":", "]", "*", "2", "-", "1", ")", "*", "10", "\n", "y", "=", "y", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "k_way", "*", "n_shot", ",", "-", "1", ")", "\n", "# least norm solutions of shape (meta_batch_size, k, num_features+1)", "\n", "zztinv", "=", "torch", ".", "inverse", "(", "torch", ".", "bmm", "(", "z", ",", "z", ".", "transpose", "(", "1", ",", "2", ")", ")", ")", "\n", "w", "=", "torch", ".", "bmm", "(", "y", ".", "transpose", "(", "1", ",", "2", ")", ",", "torch", ".", "bmm", "(", "zztinv", ",", "z", ")", ")", "\n", "# query features z of shape (meta_batch_size, q*k, num_features+1)", "\n", "z", "=", "features", "[", ":", ",", "n_shot", "*", "k_way", ":", "]", "\n", "z", "=", "torch", ".", "cat", "(", "[", "z", ",", "torch", ".", "ones_like", "(", "z", "[", ":", ",", ":", ",", ":", "1", "]", ")", "]", ",", "dim", "=", "2", ")", "# add bias unit", "\n", "# make labels of shape (meta_batch_size, q*k, k)", "\n", "y", "=", "create_nshot_task_label", "(", "k_way", ",", "q_queries", ")", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "repeat", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "y_target", "=", "y", "\n", "y", "=", "(", "torch", ".", "eye", "(", "k_way", ",", "**", "args", ")", "[", "y", ",", ":", "]", "*", "2", "-", "1", ")", "*", "10", "\n", "y", "=", "y", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "k_way", "*", "q_queries", ",", "-", "1", ")", "\n", "y_hat", "=", "torch", ".", "bmm", "(", "z", ",", "w", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "y_hat", "=", "y_hat", ".", "reshape", "(", "-", "1", ",", "k_way", ")", "\n", "loss", "=", "loss_fn", "(", "y_hat", ",", "y_target", ")", "\n", "\n", "", "", "return", "loss", ",", "y_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.hebb.__stage_two": [[102, 158], ["model.train", "model", "model.features.reshape", "torch.cat", "torch.cat", "torch.cat", "core.create_nshot_task_label().to", "create_nshot_task_label().to.repeat", "create_nshot_task_label().to.reshape", "core.create_nshot_task_label().to", "create_nshot_task_label().to.repeat", "torch.cat", "torch.cat", "torch.cat", "v.unsqueeze().repeat.unsqueeze().repeat", "hebb.least_dist", "torch.bmm", "torch.bmm", "torch.bmm", "query_y_hat.reshape.reshape", "loss_fn", "query_y_hat.reshape.softmax", "x.reshape", "least_dist.transpose", "optimiser.zero_grad", "loss_fn.backward", "optimiser.step", "torch.ones_like", "torch.ones_like", "torch.ones_like", "core.create_nshot_task_label", "core.create_nshot_task_label", "bias.reshape", "v.unsqueeze().repeat.unsqueeze", "torch.eye", "torch.eye", "torch.eye"], "function", ["home.repos.pwc.inspect_result.tomte812_chef.None.hebb.least_dist", "home.repos.pwc.inspect_result.tomte812_chef.None.core.create_nshot_task_label", "home.repos.pwc.inspect_result.tomte812_chef.None.core.create_nshot_task_label"], ["", "def", "__stage_two", "(", "model", ":", "Module", ",", "\n", "optimiser", ":", "Optimizer", ",", "\n", "loss_fn", ":", "Callable", ",", "\n", "x", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "n_shot", ":", "int", ",", "\n", "k_way", ":", "int", ",", "\n", "q_queries", ":", "int", ",", "\n", "inner_train_steps", ":", "int", ",", "\n", "inner_lr", ":", "float", ",", "\n", "hebb_lr", ":", "float", ",", "\n", "train", ":", "bool", ",", "\n", "device", ":", "Union", "[", "str", ",", "torch", ".", "device", "]", ",", "\n", "sys2net", "=", "lambda", "x", ",", "y", ":", "(", "0.", ",", "(", "0.", ",", "0.", ")", ")", ",", "\n", "sys2feat", "=", "lambda", "x", ":", "1.", ")", ":", "\n", "    ", "args", "=", "{", "'device'", ":", "device", ",", "'dtype'", ":", "torch", ".", "double", "}", "\n", "meta_batch_size", ",", "mesa_batch_size", "=", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", "\n", "model", ".", "train", "(", "train", ")", "\n", "\n", "# actiate model.features", "\n", "model", "(", "x", ".", "reshape", "(", "meta_batch_size", "*", "mesa_batch_size", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", ")", "\n", "\n", "# features of shape (meta_batch_size, n*k + q*k, num_features + 1)", "\n", "features", "=", "model", ".", "features", ".", "reshape", "(", "meta_batch_size", ",", "mesa_batch_size", ",", "-", "1", ")", "\n", "features", "=", "torch", ".", "cat", "(", "[", "features", ",", "torch", ".", "ones_like", "(", "features", "[", ":", ",", ":", ",", ":", "1", "]", ")", "]", ",", "dim", "=", "2", ")", "\n", "support_features", "=", "features", "[", ":", ",", ":", "n_shot", "*", "k_way", "]", "\n", "query_features", "=", "features", "[", ":", ",", "n_shot", "*", "k_way", ":", "]", "\n", "\n", "# make support labels of shape (meta_batch_size, n*k, k)", "\n", "y", "=", "create_nshot_task_label", "(", "k_way", ",", "n_shot", ")", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "repeat", "(", "meta_batch_size", ")", "\n", "y", "=", "(", "torch", ".", "eye", "(", "k_way", ",", "**", "args", ")", "[", "y", ",", ":", "]", "*", "2", "-", "1", ")", "*", "10", "\n", "support_y", "=", "y", ".", "reshape", "(", "meta_batch_size", ",", "n_shot", "*", "k_way", ",", "-", "1", ")", "\n", "\n", "# make query labels of shape (meta_batch_size, q*k)", "\n", "y", "=", "create_nshot_task_label", "(", "k_way", ",", "q_queries", ")", ".", "to", "(", "device", ")", "\n", "query_y", "=", "y", ".", "repeat", "(", "meta_batch_size", ")", "\n", "\n", "# get least distance solution on support set", "\n", "weight", ",", "bias", "=", "model", ".", "output_layer", ".", "weight", ",", "model", ".", "output_layer", ".", "bias", "\n", "v", "=", "torch", ".", "cat", "(", "[", "weight", ",", "bias", ".", "reshape", "(", "-", "1", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "v", "=", "v", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "meta_batch_size", ",", "1", ",", "1", ")", "\n", "w", "=", "least_dist", "(", "support_features", ",", "support_y", ",", "v", ")", "\n", "\n", "# compute predictions and loss for query set", "\n", "query_y_hat", "=", "torch", ".", "bmm", "(", "query_features", ",", "w", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "query_y_hat", "=", "query_y_hat", ".", "reshape", "(", "-", "1", ",", "k_way", ")", "\n", "loss", "=", "loss_fn", "(", "query_y_hat", ",", "query_y", ")", "\n", "predictions", "=", "query_y_hat", ".", "softmax", "(", "dim", "=", "1", ")", "\n", "\n", "if", "train", ":", "\n", "        ", "optimiser", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimiser", ".", "step", "(", ")", "\n", "\n", "", "return", "loss", ",", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.hebb.stage_two": [[161, 272], ["model.train", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "isinstance", "collections.OrderedDict", "core.create_nshot_task_label().to", "model", "hasattr", "range", "core.create_nshot_task_label().to", "model", "hasattr", "torch.linear", "loss_fn", "F.linear.softmax", "task_predictions.append", "task_losses.append", "optimiser.zero_grad", "torch.stack().mean.backward", "optimiser.step", "torch.cat", "torch.cat", "torch.cat", "m.train", "meta_batch.reshape.reshape", "x_task_train.flatten.flatten", "x_task_val.flatten.flatten", "model.named_parameters", "sys2net.init_hidden", "hasattr", "torch.linear", "loss_fn", "sys2net", "print", "tuple", "torch.dropout", "torch.stack", "torch.stack", "torch.stack", "core.create_nshot_task_label", "torch.dropout", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "sys2feat", "d_logits.sum", "core.create_nshot_task_label", "d_logits.t", "zip"], "function", ["home.repos.pwc.inspect_result.tomte812_chef.None.models.Sys2LSTM.init_hidden", "home.repos.pwc.inspect_result.tomte812_chef.None.core.create_nshot_task_label", "home.repos.pwc.inspect_result.tomte812_chef.None.core.create_nshot_task_label"], ["", "def", "stage_two", "(", "model", ":", "Module", ",", "\n", "optimiser", ":", "Optimizer", ",", "\n", "loss_fn", ":", "Callable", ",", "\n", "x", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "n_shot", ":", "int", ",", "\n", "k_way", ":", "int", ",", "\n", "q_queries", ":", "int", ",", "\n", "inner_train_steps", ":", "int", ",", "\n", "inner_lr", ":", "float", ",", "\n", "hebb_lr", ":", "float", ",", "\n", "train", ":", "bool", ",", "\n", "device", ":", "Union", "[", "str", ",", "torch", ".", "device", "]", ",", "\n", "sys2net", "=", "lambda", "x", ",", "y", ":", "(", "0.", ",", "(", "0.", ",", "0.", ")", ")", ",", "\n", "sys2feat", "=", "lambda", "x", ":", "1.", ")", ":", "\n", "    ", "\"\"\"\n    meta-learning using hebb rule on output layer only\n    \"\"\"", "\n", "task_losses", "=", "[", "]", "\n", "task_predictions", "=", "[", "]", "\n", "model", ".", "train", "(", "train", ")", "\n", "\n", "for", "m", "in", "[", "sys2net", ",", "sys2feat", "]", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "m", ".", "train", "(", "train", ")", "\n", "\n", "# x has shape (meta_batch_size, n*k + q*k, channels, width, height)", "\n", "# TODO the loop below iterates over tasks. can we parallelize this?", "\n", "\n", "", "", "for", "meta_batch", "in", "x", ":", "\n", "        ", "if", "True", ":", "# FIXME this is for miniImagenet, tieredImagenet, Omniglot", "\n", "            ", "x_task_train", "=", "meta_batch", "[", ":", "n_shot", "*", "k_way", "]", "\n", "x_task_val", "=", "meta_batch", "[", "n_shot", "*", "k_way", ":", "]", "\n", "", "else", ":", "# FIXME this is for xdom data", "\n", "            ", "meta_batch", "=", "meta_batch", ".", "reshape", "(", "k_way", ",", "n_shot", "+", "q_queries", ",", "*", "meta_batch", ".", "shape", "[", "1", ":", "]", ")", "\n", "x_task_train", "=", "meta_batch", "[", ":", ",", ":", "n_shot", "]", "\n", "x_task_train", "=", "x_task_train", ".", "flatten", "(", "0", ",", "1", ")", "\n", "x_task_val", "=", "meta_batch", "[", ":", ",", "n_shot", ":", "]", "\n", "x_task_val", "=", "x_task_val", ".", "flatten", "(", "0", ",", "1", ")", "\n", "\n", "# Create a fast model using the current meta model weights", "\n", "", "fast_weights", "=", "OrderedDict", "(", "model", ".", "named_parameters", "(", ")", ")", "\n", "#outp_weights = (fast_weights['logits.weight'], fast_weights['logits.bias'])", "\n", "outp_weights", "=", "(", "fast_weights", "[", "'output_layer.weight'", "]", ",", "fast_weights", "[", "'output_layer.bias'", "]", ")", "\n", "\n", "y", "=", "create_nshot_task_label", "(", "k_way", ",", "n_shot", ")", ".", "to", "(", "device", ")", "\n", "_", "=", "model", "(", "x_task_train", ",", "output_layer", "=", "False", ")", "# update model.features", "\n", "\n", "if", "hasattr", "(", "sys2net", ",", "'init_hidden'", ")", ":", "\n", "          ", "(", "h", ",", "c", ")", "=", "sys2net", ".", "init_hidden", "(", "n_shot", "*", "k_way", ",", "device", ",", "torch", ".", "double", ")", "\n", "", "else", ":", "\n", "          ", "(", "h", ",", "c", ")", "=", "(", "0", ",", "0", ")", "\n", "\n", "# Train the model for `inner_train_steps` iterations", "\n", "", "for", "inner_batch", "in", "range", "(", "inner_train_steps", ")", ":", "\n", "# compute labels and predictions for the support set", "\n", "            ", "if", "hasattr", "(", "model", ",", "'dropout'", ")", ":", "\n", "                ", "features", "=", "F", ".", "dropout", "(", "model", ".", "features", ",", "p", "=", "model", ".", "dropout", ".", "p", ",", "training", "=", "train", ")", "\n", "", "else", ":", "\n", "                ", "features", "=", "model", ".", "features", "\n", "\n", "# TODO use sys2net to update outp_weights, i.e. something like", "\n", "# outp_weights += sys2net(outp_weights)", "\n", "#print('feat', features.shape, 'weight', outp_weights[0].shape)", "\n", "", "logits", "=", "F", ".", "linear", "(", "features", ",", "*", "outp_weights", ")", "\n", "loss", "=", "loss_fn", "(", "logits", ",", "y", ")", "\n", "\n", "# adjust weights using Hebb rule", "\n", "d_logits", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "(", "logits", ",", ")", ",", "create_graph", "=", "train", ")", "[", "0", "]", "\n", "sys2out", ",", "(", "h", ",", "c", ")", "=", "sys2net", "(", "d_logits", ",", "(", "h", ",", "c", ")", ")", "\n", "#d_logits = d_logits * (1 + sys2out)", "\n", "d_logits", "=", "d_logits", "+", "sys2out", "\n", "features", "=", "features", "*", "2", "*", "sys2feat", "(", "features", ")", "\n", "gradients", "=", "(", "d_logits", ".", "t", "(", ")", "@", "features", ",", "d_logits", ".", "sum", "(", "dim", "=", "0", ")", ")", "\n", "print", "(", "gradients", "[", "0", "]", ")", "\n", "\n", "hebb_lr", "=", "hebb_lr", "if", "inner_batch", "==", "0", "else", "inner_lr", "\n", "outp_weights", "=", "tuple", "(", "w", "-", "hebb_lr", "*", "g", "for", "w", ",", "g", "in", "zip", "(", "outp_weights", ",", "gradients", ")", ")", "\n", "#fast_weights['logits.weight'], fast_weights['logits.bias'] = outp_weights", "\n", "fast_weights", "[", "'output_layer.weight'", "]", ",", "fast_weights", "[", "'output_layer.bias'", "]", "=", "outp_weights", "\n", "\n", "# Do a pass of the model on the validation data from the current task", "\n", "", "y", "=", "create_nshot_task_label", "(", "k_way", ",", "q_queries", ")", ".", "to", "(", "device", ")", "\n", "_", "=", "model", "(", "x_task_val", ",", "output_layer", "=", "False", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'dropout'", ")", ":", "\n", "            ", "features", "=", "F", ".", "dropout", "(", "model", ".", "features", ",", "p", "=", "model", ".", "dropout", ".", "p", ",", "training", "=", "train", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "model", ".", "features", "\n", "\n", "", "logits", "=", "F", ".", "linear", "(", "features", ",", "*", "outp_weights", ")", "\n", "#logits = model.functional_forward(x_task_val, fast_weights)", "\n", "loss", "=", "loss_fn", "(", "logits", ",", "y", ")", "\n", "\n", "#loss.backward(retain_graph=True)", "\n", "\n", "# Get post-update accuracies", "\n", "y_pred", "=", "logits", ".", "softmax", "(", "dim", "=", "1", ")", "\n", "task_predictions", ".", "append", "(", "y_pred", ")", "\n", "\n", "# Accumulate losses and gradients", "\n", "task_losses", ".", "append", "(", "loss", ")", "\n", "\n", "", "meta_batch_loss", "=", "torch", ".", "stack", "(", "task_losses", ")", ".", "mean", "(", ")", "\n", "\n", "if", "train", ":", "\n", "        ", "optimiser", ".", "zero_grad", "(", ")", "\n", "meta_batch_loss", ".", "backward", "(", ")", "\n", "optimiser", ".", "step", "(", ")", "\n", "\n", "", "return", "meta_batch_loss", ",", "torch", ".", "cat", "(", "task_predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.hebb.hebb_rule": [[274, 358], ["model.train", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "core.create_nshot_task_label().to", "model", "core.create_nshot_task_label().to", "model", "sum", "loss_fn", "F.linear.softmax", "task_predictions.append", "task_losses.append", "torch.cat", "torch.cat", "torch.cat", "x_.reshape.reshape", "x_[].flatten", "x_[].flatten", "isinstance", "weights.append", "range", "isinstance", "torch.linear", "torch.stack", "torch.stack", "torch.stack", "core.create_nshot_task_label", "torch.linear", "loss_fn", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "tuple", "core.create_nshot_task_label", "zip", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "zip"], "function", ["home.repos.pwc.inspect_result.tomte812_chef.None.core.create_nshot_task_label", "home.repos.pwc.inspect_result.tomte812_chef.None.core.create_nshot_task_label"], ["", "def", "hebb_rule", "(", "model", ":", "Module", ",", "\n", "optimiser", ":", "Optimizer", ",", "\n", "loss_fn", ":", "Callable", ",", "\n", "x", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "n_shot", ":", "int", ",", "\n", "k_way", ":", "int", ",", "\n", "q_queries", ":", "int", ",", "\n", "inner_train_steps", ":", "int", ",", "\n", "hebb_lr", ":", "float", ",", "\n", "train", ":", "bool", ",", "\n", "device", ":", "Union", "[", "str", ",", "torch", ".", "device", "]", ",", "\n", "xdom", "=", "False", ")", ":", "\n", "# x has shape (meta_batch_size, n*k + q*k, channels, width, height)", "\n", "# TODO make a clean implementation of the simple hebb rule", "\n", "\n", "    ", "args", "=", "{", "'device'", ":", "device", ",", "'dtype'", ":", "torch", ".", "double", ",", "'requires_grad'", ":", "True", "}", "\n", "task_predictions", "=", "[", "]", "\n", "task_losses", "=", "[", "]", "\n", "model", ".", "train", "(", "train", ")", "\n", "\n", "for", "x_", "in", "x", ":", "\n", "# FIXME add slicing for xdom data", "\n", "        ", "if", "xdom", ":", "\n", "          ", "x_", "=", "x_", ".", "reshape", "(", "k_way", ",", "n_shot", "+", "q_queries", ",", "*", "x_", ".", "shape", "[", "1", ":", "]", ")", "\n", "x_support", "=", "x_", "[", ":", ",", ":", "n_shot", "]", ".", "flatten", "(", "0", ",", "1", ")", "\n", "x_query", "=", "x_", "[", ":", ",", "n_shot", ":", "]", ".", "flatten", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "          ", "x_support", "=", "x_", "[", ":", "n_shot", "*", "k_way", "]", "\n", "x_query", "=", "x_", "[", "n_shot", "*", "k_way", ":", "]", "\n", "\n", "", "y", "=", "create_nshot_task_label", "(", "k_way", ",", "n_shot", ")", ".", "to", "(", "device", ")", "\n", "model", "(", "x_support", ",", "output_layer", "=", "False", ")", "# activate model.features", "\n", "features", "=", "model", ".", "module", ".", "features", "\n", "\n", "if", "not", "isinstance", "(", "features", ",", "list", ")", ":", "\n", "            ", "features", "=", "[", "features", "]", "\n", "\n", "", "weights", "=", "[", "]", "\n", "\n", "for", "f", "in", "features", ":", "\n", "            ", "weights", ".", "append", "(", "(", "torch", ".", "zeros", "(", "k_way", ",", "f", ".", "shape", "[", "1", "]", ",", "**", "args", ")", ",", "\n", "torch", ".", "zeros", "(", "k_way", ",", "**", "args", ")", ")", ")", "\n", "w", "=", "weights", "[", "-", "1", "]", "\n", "\n", "for", "i", "in", "range", "(", "inner_train_steps", ")", ":", "\n", "                ", "logits", "=", "F", ".", "linear", "(", "f", ",", "*", "w", ")", "\n", "loss", "=", "loss_fn", "(", "logits", ",", "y", ")", "\n", "g", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "w", ")", "\n", "\n", "# FIXME uncomment following line to reproduce old impl", "\n", "g", "=", "g", "[", "0", "]", "*", "2", ",", "g", "[", "1", "]", "\n", "w", "=", "tuple", "(", "w_", "-", "hebb_lr", "*", "g_", "for", "w_", ",", "g_", "in", "zip", "(", "w", ",", "g", ")", ")", "\n", "\n", "", "weights", "[", "-", "1", "]", "=", "w", "\n", "\n", "", "y", "=", "create_nshot_task_label", "(", "k_way", ",", "q_queries", ")", ".", "to", "(", "device", ")", "\n", "model", "(", "x_query", ",", "output_layer", "=", "False", ")", "\n", "features", "=", "model", ".", "module", ".", "features", "\n", "\n", "if", "not", "isinstance", "(", "features", ",", "list", ")", ":", "\n", "            ", "features", "=", "[", "features", "]", "\n", "\n", "", "logits", "=", "[", "F", ".", "linear", "(", "f", ",", "*", "w", ")", "for", "f", ",", "w", "in", "zip", "(", "features", ",", "weights", ")", "]", "\n", "\n", "#print('-----------------------------------------------------------')", "\n", "#for l in logits:", "\n", "#    print(l.argmax(dim=1))", "\n", "\n", "\n", "#logits = [l.softmax(dim=1) for l in logits]", "\n", "logits", "=", "sum", "(", "logits", ")", "# ensemble by adding logits together", "\n", "\n", "#print(logits.argmax(dim=1))", "\n", "#print(y)", "\n", "#print('-----------------------------------------------------------')", "\n", "\n", "loss", "=", "loss_fn", "(", "logits", ",", "y", ")", "\n", "y_pred", "=", "logits", ".", "softmax", "(", "dim", "=", "1", ")", "\n", "task_predictions", ".", "append", "(", "y_pred", ")", "\n", "task_losses", ".", "append", "(", "loss", ")", "\n", "\n", "", "meta_batch_loss", "=", "torch", ".", "stack", "(", "task_losses", ")", ".", "mean", "(", ")", "\n", "return", "meta_batch_loss", ",", "torch", ".", "cat", "(", "task_predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res12.BasicBlock.__init__": [[24, 41], ["torch.Module.__init__", "res12.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "res12.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "res12.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "dropblock.DropBlock"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__", "home.repos.pwc.inspect_result.tomte812_chef.None.res12.conv3x3", "home.repos.pwc.inspect_result.tomte812_chef.None.res12.conv3x3", "home.repos.pwc.inspect_result.tomte812_chef.None.res12.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "drop_rate", "=", "0.0", ",", "drop_block", "=", "False", ",", "block_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "stride", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "num_batches_tracked", "=", "0", "\n", "self", ".", "drop_block", "=", "drop_block", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "DropBlock", "=", "DropBlock", "(", "block_size", "=", "self", ".", "block_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res12.BasicBlock.forward": [[42, 74], ["res12.BasicBlock.conv1", "res12.BasicBlock.bn1", "res12.BasicBlock.relu", "res12.BasicBlock.conv2", "res12.BasicBlock.bn2", "res12.BasicBlock.relu", "res12.BasicBlock.conv3", "res12.BasicBlock.bn3", "res12.BasicBlock.relu", "res12.BasicBlock.maxpool", "res12.BasicBlock.downsample", "max", "res12.BasicBlock.DropBlock", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "num_batches_tracked", "+=", "1", "\n", "\n", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "if", "self", ".", "drop_block", "==", "True", ":", "\n", "                ", "feat_size", "=", "out", ".", "size", "(", ")", "[", "2", "]", "\n", "keep_rate", "=", "max", "(", "1.0", "-", "self", ".", "drop_rate", "/", "(", "20", "*", "2000", ")", "*", "(", "self", ".", "num_batches_tracked", ")", ",", "1.0", "-", "self", ".", "drop_rate", ")", "\n", "gamma", "=", "(", "1", "-", "keep_rate", ")", "/", "self", ".", "block_size", "**", "2", "*", "feat_size", "**", "2", "/", "(", "feat_size", "-", "self", ".", "block_size", "+", "1", ")", "**", "2", "\n", "out", "=", "self", ".", "DropBlock", "(", "out", ",", "gamma", "=", "gamma", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "True", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res12.ResNet.__init__": [[78, 100], ["torch.Module.__init__", "res12.ResNet._make_layer", "res12.ResNet._make_layer", "res12.ResNet._make_layer", "res12.ResNet._make_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "res12.ResNet.modules", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__", "home.repos.pwc.inspect_result.tomte812_chef.None.res12.ResNet._make_layer", "home.repos.pwc.inspect_result.tomte812_chef.None.res12.ResNet._make_layer", "home.repos.pwc.inspect_result.tomte812_chef.None.res12.ResNet._make_layer", "home.repos.pwc.inspect_result.tomte812_chef.None.res12.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "drop_rate", "=", "0.1", ",", "dropblock_size", "=", "5", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "3", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "160", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "320", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ",", "drop_block", "=", "True", ",", "block_size", "=", "dropblock_size", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "640", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ",", "drop_block", "=", "True", ",", "block_size", "=", "dropblock_size", ")", "\n", "if", "avg_pool", ":", "\n", "# FIXME original stride is 1", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "MaxPool2d", "(", "5", ")", "# nn.AvgPool2d(5, stride=2)", "\n", "", "self", ".", "keep_prob", "=", "keep_prob", "\n", "self", ".", "keep_avg_pool", "=", "avg_pool", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "1", "-", "self", ".", "keep_prob", ",", "inplace", "=", "False", ")", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res12.ResNet._make_layer": [[101, 115], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "stride", "=", "1", ",", "drop_rate", "=", "0.0", ",", "drop_block", "=", "False", ",", "block_size", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "drop_rate", ",", "drop_block", ",", "block_size", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res12.ResNet.forward": [[116, 125], ["res12.ResNet.layer1", "res12.ResNet.layer2", "res12.ResNet.layer3", "res12.ResNet.layer4", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "res12.ResNet.avgpool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "output_layer", "=", "True", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "self", ".", "keep_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res12.ResNetWrapper.__init__": [[136, 147], ["torch.Module.__init__", "res12.ResNet", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k_way", ",", "block", ",", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "drop_rate", "=", "0.1", ",", "dropblock_size", "=", "5", ",", "interm_layer", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNetWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "drop_rate", "=", "0.0", "# turn off block drop for stage 2", "\n", "self", ".", "res12", "=", "ResNet", "(", "block", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "drop_rate", "=", "drop_rate", ",", "dropblock_size", "=", "dropblock_size", ")", "\n", "\n", "if", "interm_layer", ":", "\n", "            ", "self", ".", "interm_layer", "=", "nn", ".", "Linear", "(", "16000", ",", "1024", ")", "\n", "\n", "", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "1024", "if", "interm_layer", "else", "16000", ",", "k_way", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "1.", "-", "keep_prob", ")", "\n", "self", ".", "final_layer_size", "=", "1024", "if", "interm_layer", "else", "16000", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res12.ResNetWrapper.forward": [[148, 158], ["res12.ResNetWrapper.res12", "hasattr", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "res12.ResNetWrapper.output_layer", "res12.ResNetWrapper.interm_layer", "torch.dropout", "torch.dropout", "torch.dropout", "res12.ResNetWrapper.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "output_layer", "=", "True", ")", ":", "\n", "        ", "self", ".", "features", "=", "self", ".", "res12", "(", "x", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'interm_layer'", ")", ":", "\n", "            ", "self", ".", "features", "=", "torch", ".", "relu", "(", "self", ".", "interm_layer", "(", "self", ".", "dropout", "(", "self", ".", "features", ")", ")", ")", "\n", "\n", "", "if", "output_layer", ":", "\n", "          ", "return", "self", ".", "output_layer", "(", "F", ".", "dropout", "(", "self", ".", "features", ",", "self", ".", "dropout", ".", "p", ")", ")", "\n", "", "else", ":", "\n", "          ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res12.conv3x3": [[15, 19], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res12.resnet12": [[127, 132], ["res12.ResNet"], "function", ["None"], ["", "", "def", "resnet12", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-12 embedding model (i.e. without output layer).\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res12._res12": [[160, 165], ["res12.ResNetWrapper"], "function", ["None"], ["", "", "", "def", "_res12", "(", "k_way", ",", "dropout", ",", "no_relu", ",", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-12 model with integrated output layer\n    \"\"\"", "\n", "model", "=", "ResNetWrapper", "(", "k_way", ",", "BasicBlock", ",", "keep_prob", "=", "keep_prob", "-", "dropout", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.pretrain.ModelWrapper.__init__": [[19, 30], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Linear", "len", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed", ",", "fc_sizes", ")", ":", "\n", "    ", "super", "(", "ModelWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed", "=", "embed", "\n", "\n", "seq", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "fc_sizes", ")", "-", "2", ")", ":", "\n", "      ", "seq", "+=", "[", "nn", ".", "Linear", "(", "fc_sizes", "[", "i", "]", ",", "fc_sizes", "[", "i", "+", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "seq", "+=", "[", "nn", ".", "Linear", "(", "fc_sizes", "[", "-", "2", "]", ",", "fc_sizes", "[", "-", "1", "]", ")", "]", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "seq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.pretrain.ModelWrapper.forward": [[31, 34], ["pretrain.ModelWrapper.embed", "pretrain.ModelWrapper.output_layer", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "embed", "(", "x", ")", "\n", "return", "self", ".", "output_layer", "(", "torch", ".", "relu", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.test.ModelWrapper.__init__": [[21, 33], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Linear", "len", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["  ", "def", "__init__", "(", "self", ",", "embed", ",", "fc_sizes", ")", ":", "\n", "    ", "super", "(", "ModelWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed", "=", "embed", "\n", "self", ".", "feature_index", "=", "[", "-", "1", "]", "\n", "\n", "seq", "=", "[", "]", "#[nn.ReLU()]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "fc_sizes", ")", "-", "2", ")", ":", "\n", "      ", "seq", "+=", "[", "nn", ".", "Linear", "(", "fc_sizes", "[", "i", "]", ",", "fc_sizes", "[", "i", "+", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "seq", "+=", "[", "nn", ".", "Linear", "(", "fc_sizes", "[", "-", "2", "]", ",", "fc_sizes", "[", "-", "1", "]", ")", "]", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "*", "seq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.test.ModelWrapper.forward": [[34, 43], ["test.ModelWrapper.embed", "m", "test.ModelWrapper.x[].flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "output_layer", "=", "True", ")", ":", "\n", "    ", "self", ".", "x", "=", "[", "self", ".", "embed", "(", "x", ")", "]", "\n", "\n", "for", "m", "in", "self", ".", "output_layer", ":", "\n", "      ", "self", ".", "x", "+=", "[", "m", "(", "self", ".", "x", "[", "-", "1", "]", ".", "flatten", "(", "1", ")", ")", "]", "\n", "\n", "", "self", ".", "features", "=", "[", "self", ".", "x", "[", "fi", "]", "for", "fi", "in", "self", ".", "feature_index", "]", "\n", "\n", "return", "self", ".", "x", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res10.Flatten.__init__": [[19, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res10.Flatten.forward": [[22, 24], ["x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res10.SimpleBlock.__init__": [[28, 60], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "res10.SimpleBlock.parametrized_layers.append", "res10.SimpleBlock.parametrized_layers.append", "res10.init_layer"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__", "home.repos.pwc.inspect_result.tomte812_chef.None.res10.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ")", ":", "\n", "        ", "super", "(", "SimpleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "\n", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "outdim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C1", ",", "self", ".", "C2", ",", "self", ".", "BN1", ",", "self", ".", "BN2", "]", "\n", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "# if the input number of channels is not equal to the output, then need a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "1", ",", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BNshortcut", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "BNshortcut", ")", "\n", "self", ".", "shortcut_type", "=", "'1x1'", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_type", "=", "'identity'", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res10.SimpleBlock.forward": [[61, 72], ["res10.SimpleBlock.C1", "res10.SimpleBlock.BN1", "res10.SimpleBlock.relu1", "res10.SimpleBlock.C2", "res10.SimpleBlock.BN2", "res10.SimpleBlock.relu2", "res10.SimpleBlock.BNshortcut", "res10.SimpleBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "short_out", "=", "x", "if", "self", ".", "shortcut_type", "==", "'identity'", "else", "self", ".", "BNshortcut", "(", "self", ".", "shortcut", "(", "x", ")", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res10.BottleneckBlock.__init__": [[75, 105], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "res10.BottleneckBlock.parametrized_layers.append", "res10.init_layer"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__", "home.repos.pwc.inspect_result.tomte812_chef.None.res10.init_layer"], ["    ", "def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bottleneckdim", "=", "int", "(", "outdim", "/", "4", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "\n", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "indim", ",", "bottleneckdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "bottleneckdim", ")", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "bottleneckdim", ",", "bottleneckdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "bottleneckdim", ")", "\n", "self", ".", "C3", "=", "nn", ".", "Conv2d", "(", "bottleneckdim", ",", "outdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN3", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C1", ",", "self", ".", "BN1", ",", "self", ".", "C2", ",", "self", ".", "BN2", ",", "self", ".", "C3", ",", "self", ".", "BN3", "]", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "\n", "# if the input number of channels is not equal to the output, then need a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "1", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "shortcut_type", "=", "'1x1'", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_type", "=", "'identity'", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res10.BottleneckBlock.forward": [[107, 122], ["res10.BottleneckBlock.C1", "res10.BottleneckBlock.BN1", "res10.BottleneckBlock.relu", "res10.BottleneckBlock.C2", "res10.BottleneckBlock.BN2", "res10.BottleneckBlock.relu", "res10.BottleneckBlock.C3", "res10.BottleneckBlock.BN3", "res10.BottleneckBlock.relu", "res10.BottleneckBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "short_out", "=", "x", "if", "self", ".", "shortcut_type", "==", "'identity'", "else", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "C3", "(", "out", ")", "\n", "out", "=", "self", ".", "BN3", "(", "out", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res10.ResNet.__init__": [[125, 161], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "res10.init_layer", "res10.init_layer", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "range", "trunk.append", "block", "trunk.append", "res10.Flatten"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__", "home.repos.pwc.inspect_result.tomte812_chef.None.res10.init_layer", "home.repos.pwc.inspect_result.tomte812_chef.None.res10.init_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "list_of_num_layers", ",", "list_of_out_dims", ",", "flatten", "=", "False", ")", ":", "\n", "# list_of_num_layers specifies number of layers in each stage", "\n", "# list_of_out_dims specifies number of output channel for each stage", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "list_of_num_layers", ")", "==", "4", ",", "'Can have only four stages'", "\n", "\n", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "init_layer", "(", "conv1", ")", "\n", "init_layer", "(", "bn1", ")", "\n", "\n", "trunk", "=", "[", "conv1", ",", "bn1", ",", "relu", ",", "pool1", "]", "\n", "\n", "indim", "=", "64", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "\n", "            ", "for", "j", "in", "range", "(", "list_of_num_layers", "[", "i", "]", ")", ":", "\n", "                ", "half_res", "=", "(", "i", ">=", "1", ")", "and", "(", "j", "==", "0", ")", "\n", "B", "=", "block", "(", "indim", ",", "list_of_out_dims", "[", "i", "]", ",", "half_res", ")", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "indim", "=", "list_of_out_dims", "[", "i", "]", "\n", "\n", "", "", "if", "flatten", ":", "\n", "#avgpool = nn.AvgPool2d(7)", "\n", "#trunk.append(avgpool)", "\n", "            ", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "self", ".", "final_feat_dim", "=", "indim", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_feat_dim", "=", "[", "indim", ",", "7", ",", "7", "]", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res10.ResNet.forward": [[162, 165], ["res10.ResNet.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res10.init_layer": [[9, 17], ["isinstance", "L.weight.data.normal_", "isinstance", "math.sqrt", "L.weight.data.fill_", "L.bias.data.fill_", "float"], "function", ["None"], ["def", "init_layer", "(", "L", ")", ":", "\n", "# Initialization using fan-in", "\n", "    ", "if", "isinstance", "(", "L", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "L", ".", "kernel_size", "[", "0", "]", "*", "L", ".", "kernel_size", "[", "1", "]", "*", "L", ".", "out_channels", "\n", "L", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "n", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "L", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "L", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "L", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res10.ResNet10": [[166, 168], ["res10.ResNet"], "function", ["None"], ["", "", "def", "ResNet10", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.res10.res10": [[169, 171], ["res10.ResNet10"], "function", ["home.repos.pwc.inspect_result.tomte812_chef.None.res10.ResNet10"], ["", "def", "res10", "(", ")", ":", "\n", "    ", "return", "ResNet10", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.CallbackList.__init__": [[22, 24], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "callbacks", ")", ":", "\n", "        ", "self", ".", "callbacks", "=", "[", "c", "for", "c", "in", "callbacks", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.CallbackList.set_params": [[25, 28], ["callback.set_params"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.Callback.set_params"], ["", "def", "set_params", "(", "self", ",", "params", ")", ":", "\n", "        ", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "set_params", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.CallbackList.set_model": [[29, 32], ["callback.set_model"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.Callback.set_model"], ["", "", "def", "set_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "set_model", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.CallbackList.on_epoch_begin": [[33, 42], ["callback.on_epoch_begin"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.LearningRateScheduler.on_epoch_begin"], ["", "", "def", "on_epoch_begin", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "\"\"\"Called at the start of an epoch.\n        # Arguments\n            epoch: integer, index of epoch.\n            logs: dictionary of logs.\n        \"\"\"", "\n", "logs", "=", "logs", "or", "{", "}", "\n", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "on_epoch_begin", "(", "epoch", ",", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.CallbackList.on_epoch_end": [[43, 52], ["callback.on_epoch_end"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.LearningRateScheduler.on_epoch_end"], ["", "", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "\"\"\"Called at the end of an epoch.\n        # Arguments\n            epoch: integer, index of epoch.\n            logs: dictionary of logs.\n        \"\"\"", "\n", "logs", "=", "logs", "or", "{", "}", "\n", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "on_epoch_end", "(", "epoch", ",", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.CallbackList.on_batch_begin": [[53, 62], ["callback.on_batch_begin"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ProgressBarLogger.on_batch_begin"], ["", "", "def", "on_batch_begin", "(", "self", ",", "batch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "\"\"\"Called right before processing a batch.\n        # Arguments\n            batch: integer, index of batch within the current epoch.\n            logs: dictionary of logs.\n        \"\"\"", "\n", "logs", "=", "logs", "or", "{", "}", "\n", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "on_batch_begin", "(", "batch", ",", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.CallbackList.on_batch_end": [[63, 72], ["callback.on_batch_end"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ProgressBarLogger.on_batch_end"], ["", "", "def", "on_batch_end", "(", "self", ",", "batch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "\"\"\"Called at the end of a batch.\n        # Arguments\n            batch: integer, index of batch within the current epoch.\n            logs: dictionary of logs.\n        \"\"\"", "\n", "logs", "=", "logs", "or", "{", "}", "\n", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "on_batch_end", "(", "batch", ",", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.CallbackList.on_train_begin": [[73, 81], ["callback.on_train_begin"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.LearningRateScheduler.on_train_begin"], ["", "", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "\"\"\"Called at the beginning of training.\n        # Arguments\n            logs: dictionary of logs.\n        \"\"\"", "\n", "logs", "=", "logs", "or", "{", "}", "\n", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "on_train_begin", "(", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.CallbackList.on_train_end": [[82, 90], ["callback.on_train_end"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.CSVLogger.on_train_end"], ["", "", "def", "on_train_end", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "\"\"\"Called at the end of training.\n        # Arguments\n            logs: dictionary of logs.\n        \"\"\"", "\n", "logs", "=", "logs", "or", "{", "}", "\n", "for", "callback", "in", "self", ".", "callbacks", ":", "\n", "            ", "callback", ".", "on_train_end", "(", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.Callback.__init__": [[93, 95], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.Callback.set_params": [[96, 98], ["None"], "methods", ["None"], ["", "def", "set_params", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.Callback.set_model": [[99, 101], ["None"], "methods", ["None"], ["", "def", "set_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.Callback.on_epoch_begin": [[102, 104], ["None"], "methods", ["None"], ["", "def", "on_epoch_begin", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.Callback.on_epoch_end": [[105, 107], ["None"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.Callback.on_batch_begin": [[108, 110], ["None"], "methods", ["None"], ["", "def", "on_batch_begin", "(", "self", ",", "batch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.Callback.on_batch_end": [[111, 113], ["None"], "methods", ["None"], ["", "def", "on_batch_end", "(", "self", ",", "batch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.Callback.on_train_begin": [[114, 116], ["None"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.Callback.on_train_end": [[117, 119], ["None"], "methods", ["None"], ["", "def", "on_train_end", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.DefaultCallback.on_epoch_begin": [[126, 130], ["None"], "methods", ["None"], ["def", "on_epoch_begin", "(", "self", ",", "batch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "seen", "=", "0", "\n", "self", ".", "totals", "=", "{", "}", "\n", "self", ".", "metrics", "=", "[", "'loss'", "]", "+", "self", ".", "params", "[", "'metrics'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.DefaultCallback.on_batch_end": [[131, 141], ["logs.items", "logs.get"], "methods", ["None"], ["", "def", "on_batch_end", "(", "self", ",", "batch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "logs", "=", "logs", "or", "{", "}", "\n", "batch_size", "=", "logs", ".", "get", "(", "'size'", ",", "1", ")", "or", "1", "\n", "self", ".", "seen", "+=", "batch_size", "\n", "\n", "for", "k", ",", "v", "in", "logs", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "self", ".", "totals", ":", "\n", "                ", "self", ".", "totals", "[", "k", "]", "+=", "v", "*", "batch_size", "\n", "", "else", ":", "\n", "                ", "self", ".", "totals", "[", "k", "]", "=", "v", "*", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.DefaultCallback.on_epoch_end": [[142, 148], ["None"], "methods", ["None"], ["", "", "", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "logs", "is", "not", "None", ":", "\n", "            ", "for", "k", "in", "self", ".", "metrics", ":", "\n", "                ", "if", "k", "in", "self", ".", "totals", ":", "\n", "# Make value available to next callbacks.", "\n", "                    ", "logs", "[", "k", "]", "=", "self", ".", "totals", "[", "k", "]", "/", "self", ".", "seen", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ProgressBarLogger.__init__": [[152, 154], ["callbacks.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ProgressBarLogger", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ProgressBarLogger.on_train_begin": [[155, 159], ["None"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_batches", "=", "self", ".", "params", "[", "'num_batches'", "]", "\n", "self", ".", "verbose", "=", "self", ".", "params", "[", "'verbose'", "]", "\n", "self", ".", "metrics", "=", "[", "'loss'", "]", "+", "self", ".", "params", "[", "'metrics'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ProgressBarLogger.on_epoch_begin": [[160, 164], ["tqdm.tqdm.tqdm"], "methods", ["None"], ["", "def", "on_epoch_begin", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "target", "=", "self", ".", "num_batches", "\n", "self", ".", "pbar", "=", "tqdm", "(", "total", "=", "self", ".", "target", ",", "desc", "=", "'Epoch {}'", ".", "format", "(", "epoch", ")", ")", "\n", "self", ".", "seen", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ProgressBarLogger.on_batch_begin": [[165, 167], ["None"], "methods", ["None"], ["", "def", "on_batch_begin", "(", "self", ",", "batch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "log_values", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ProgressBarLogger.on_batch_end": [[168, 181], ["callbacks.ProgressBarLogger.pbar.update", "callbacks.ProgressBarLogger.pbar.set_postfix"], "methods", ["None"], ["", "def", "on_batch_end", "(", "self", ",", "batch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "logs", "=", "logs", "or", "{", "}", "\n", "self", ".", "seen", "+=", "1", "\n", "\n", "for", "k", "in", "self", ".", "metrics", ":", "\n", "            ", "if", "k", "in", "logs", ":", "\n", "                ", "self", ".", "log_values", "[", "k", "]", "=", "logs", "[", "k", "]", "\n", "\n", "# Skip progbar update for the last batch;", "\n", "# will be handled by on_epoch_end.", "\n", "", "", "if", "self", ".", "verbose", "and", "self", ".", "seen", "<", "self", ".", "target", ":", "\n", "            ", "self", ".", "pbar", ".", "update", "(", "1", ")", "\n", "self", ".", "pbar", ".", "set_postfix", "(", "self", ".", "log_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ProgressBarLogger.on_epoch_end": [[182, 194], ["callbacks.ProgressBarLogger.pbar.close", "callbacks.ProgressBarLogger.pbar.update", "callbacks.ProgressBarLogger.pbar.set_postfix"], "methods", ["None"], ["", "", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "# Update log values", "\n", "        ", "self", ".", "log_values", "=", "{", "}", "\n", "for", "k", "in", "self", ".", "metrics", ":", "\n", "            ", "if", "k", "in", "logs", ":", "\n", "                ", "self", ".", "log_values", "[", "k", "]", "=", "logs", "[", "k", "]", "\n", "\n", "", "", "if", "self", ".", "verbose", ":", "\n", "            ", "self", ".", "pbar", ".", "update", "(", "1", ")", "\n", "self", ".", "pbar", ".", "set_postfix", "(", "self", ".", "log_values", ")", "\n", "\n", "", "self", ".", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.CSVLogger.__init__": [[208, 218], ["callbacks.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["def", "__init__", "(", "self", ",", "filename", ",", "separator", "=", "','", ",", "append", "=", "False", ")", ":", "\n", "        ", "self", ".", "sep", "=", "separator", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "append", "=", "append", "\n", "self", ".", "writer", "=", "None", "\n", "self", ".", "keys", "=", "None", "\n", "self", ".", "append_header", "=", "True", "\n", "self", ".", "file_flags", "=", "''", "\n", "self", ".", "_open_args", "=", "{", "'newline'", ":", "'\\n'", "}", "\n", "super", "(", "CSVLogger", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.CSVLogger.on_train_begin": [[219, 231], ["io.open", "os.path.exists", "open", "bool", "len", "f.readline"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "append", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "filename", ")", ":", "\n", "                ", "with", "open", "(", "self", ".", "filename", ",", "'r'", "+", "self", ".", "file_flags", ")", "as", "f", ":", "\n", "                    ", "self", ".", "append_header", "=", "not", "bool", "(", "len", "(", "f", ".", "readline", "(", ")", ")", ")", "\n", "", "", "mode", "=", "'a'", "\n", "", "else", ":", "\n", "            ", "mode", "=", "'w'", "\n", "\n", "", "self", ".", "csv_file", "=", "io", ".", "open", "(", "self", ".", "filename", ",", "\n", "mode", "+", "self", ".", "file_flags", ",", "\n", "**", "self", ".", "_open_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.CSVLogger.on_epoch_end": [[232, 261], ["collections.OrderedDict", "collections.OrderedDict.update", "callbacks.CSVLogger.writer.writerow", "callbacks.CSVLogger.csv_file.flush", "isinstance", "sorted", "csv.DictWriter", "isinstance", "logs.keys", "callbacks.CSVLogger.writer.writeheader", "isinstance", "callbacks.CSVLogger.on_epoch_end.handle_value"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "logs", "=", "logs", "or", "{", "}", "\n", "\n", "def", "handle_value", "(", "k", ")", ":", "\n", "            ", "is_zero_dim_ndarray", "=", "isinstance", "(", "k", ",", "np", ".", "ndarray", ")", "and", "k", ".", "ndim", "==", "0", "\n", "if", "isinstance", "(", "k", ",", "str", ")", ":", "\n", "                ", "return", "k", "\n", "", "elif", "isinstance", "(", "k", ",", "Iterable", ")", "and", "not", "is_zero_dim_ndarray", ":", "\n", "                ", "return", "'\"[%s]\"'", "%", "(", "', '", ".", "join", "(", "map", "(", "str", ",", "k", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "k", "\n", "\n", "", "", "if", "self", ".", "keys", "is", "None", ":", "\n", "            ", "self", ".", "keys", "=", "sorted", "(", "logs", ".", "keys", "(", ")", ")", "\n", "\n", "", "if", "not", "self", ".", "writer", ":", "\n", "            ", "class", "CustomDialect", "(", "csv", ".", "excel", ")", ":", "\n", "                ", "delimiter", "=", "self", ".", "sep", "\n", "", "fieldnames", "=", "[", "'epoch'", "]", "+", "self", ".", "keys", "\n", "self", ".", "writer", "=", "csv", ".", "DictWriter", "(", "self", ".", "csv_file", ",", "\n", "fieldnames", "=", "fieldnames", ",", "\n", "dialect", "=", "CustomDialect", ")", "\n", "if", "self", ".", "append_header", ":", "\n", "                ", "self", ".", "writer", ".", "writeheader", "(", ")", "\n", "\n", "", "", "row_dict", "=", "OrderedDict", "(", "{", "'epoch'", ":", "epoch", "}", ")", "\n", "row_dict", ".", "update", "(", "(", "key", ",", "handle_value", "(", "logs", "[", "key", "]", ")", ")", "for", "key", "in", "self", ".", "keys", ")", "\n", "self", ".", "writer", ".", "writerow", "(", "row_dict", ")", "\n", "self", ".", "csv_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.CSVLogger.on_train_end": [[262, 265], ["callbacks.CSVLogger.csv_file.close"], "methods", ["None"], ["", "def", "on_train_end", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "csv_file", ".", "close", "(", ")", "\n", "self", ".", "writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.EvaluateMetrics.__init__": [[276, 281], ["callbacks.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["def", "__init__", "(", "self", ",", "dataloader", ",", "prefix", "=", "'val_'", ",", "suffix", "=", "''", ")", ":", "\n", "        ", "super", "(", "EvaluateMetrics", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "suffix", "=", "suffix", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.EvaluateMetrics.on_train_begin": [[282, 286], ["None"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "metrics", "=", "self", ".", "params", "[", "'metrics'", "]", "\n", "self", ".", "prepare_batch", "=", "self", ".", "params", "[", "'prepare_batch'", "]", "\n", "self", ".", "loss_fn", "=", "self", ".", "params", "[", "'loss_fn'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.EvaluateMetrics.on_epoch_end": [[287, 291], ["logs.update", "eval.evaluate"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.eval.evaluate"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "logs", "=", "logs", "or", "{", "}", "\n", "logs", ".", "update", "(", "\n", "evaluate", "(", "self", ".", "model", "[", "'sys1'", "]", ",", "self", ".", "dataloader", ",", "self", ".", "prepare_batch", ",", "self", ".", "metrics", ",", "self", ".", "loss_fn", ",", "self", ".", "prefix", ",", "self", ".", "suffix", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ReduceLROnPlateau.__init__": [[323, 346], ["callbacks.Callback.__init__", "callbacks.ReduceLROnPlateau._reset", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__", "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ReduceLROnPlateau._reset"], ["def", "__init__", "(", "self", ",", "monitor", "=", "'val_loss'", ",", "factor", "=", "0.1", ",", "patience", "=", "10", ",", "\n", "verbose", "=", "0", ",", "mode", "=", "'auto'", ",", "min_delta", "=", "1e-4", ",", "cooldown", "=", "0", ",", "min_lr", "=", "0", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ReduceLROnPlateau", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "monitor", "=", "monitor", "\n", "if", "factor", ">=", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "'ReduceLROnPlateau does not support a factor >= 1.0.'", ")", "\n", "", "self", ".", "factor", "=", "factor", "\n", "self", ".", "min_lr", "=", "min_lr", "\n", "self", ".", "min_delta", "=", "min_delta", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "cooldown", "=", "cooldown", "\n", "self", ".", "cooldown_counter", "=", "0", "# Cooldown counter.", "\n", "self", ".", "wait", "=", "0", "\n", "self", ".", "best", "=", "0", "\n", "if", "mode", "not", "in", "[", "'auto'", ",", "'min'", ",", "'max'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'Mode must be one of (auto, min, max).'", ")", "\n", "", "self", ".", "mode", "=", "mode", "\n", "self", ".", "monitor_op", "=", "None", "\n", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ReduceLROnPlateau._reset": [[347, 359], ["numpy.less", "numpy.greater"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets wait counter and cooldown counter.\n        \"\"\"", "\n", "if", "(", "self", ".", "mode", "==", "'min'", "or", "\n", "(", "self", ".", "mode", "==", "'auto'", "and", "'acc'", "not", "in", "self", ".", "monitor", ")", ")", ":", "\n", "            ", "self", ".", "monitor_op", "=", "lambda", "a", ",", "b", ":", "np", ".", "less", "(", "a", ",", "b", "-", "self", ".", "min_delta", ")", "\n", "self", ".", "best", "=", "np", ".", "Inf", "\n", "", "else", ":", "\n", "            ", "self", ".", "monitor_op", "=", "lambda", "a", ",", "b", ":", "np", ".", "greater", "(", "a", ",", "b", "+", "self", ".", "min_delta", ")", "\n", "self", ".", "best", "=", "-", "np", ".", "Inf", "\n", "", "self", ".", "cooldown_counter", "=", "0", "\n", "self", ".", "wait", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ReduceLROnPlateau.on_train_begin": [[360, 364], ["callbacks.ReduceLROnPlateau._reset", "len"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ReduceLROnPlateau._reset"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "optimiser", "=", "self", ".", "params", "[", "'optimiser'", "]", "\n", "self", ".", "min_lrs", "=", "[", "self", ".", "min_lr", "]", "*", "len", "(", "self", ".", "optimiser", ".", "param_groups", ")", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ReduceLROnPlateau.on_epoch_end": [[365, 388], ["logs.get", "callbacks.ReduceLROnPlateau.in_cooldown", "callbacks.ReduceLROnPlateau.monitor_op", "len", "enumerate", "callbacks.ReduceLROnPlateau.in_cooldown", "callbacks.ReduceLROnPlateau._reduce_lr"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ReduceLROnPlateau.in_cooldown", "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ReduceLROnPlateau.in_cooldown", "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ReduceLROnPlateau._reduce_lr"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "logs", "=", "logs", "or", "{", "}", "\n", "if", "len", "(", "self", ".", "optimiser", ".", "param_groups", ")", "==", "1", ":", "\n", "            ", "logs", "[", "'lr'", "]", "=", "self", ".", "optimiser", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "", "else", ":", "\n", "            ", "for", "i", ",", "param_group", "in", "enumerate", "(", "self", ".", "optimiser", ".", "param_groups", ")", ":", "\n", "                ", "logs", "[", "'lr_{}'", ".", "format", "(", "i", ")", "]", "=", "param_group", "[", "'lr'", "]", "\n", "\n", "", "", "current", "=", "logs", ".", "get", "(", "self", ".", "monitor", ")", "\n", "\n", "if", "self", ".", "in_cooldown", "(", ")", ":", "\n", "            ", "self", ".", "cooldown_counter", "-=", "1", "\n", "self", ".", "wait", "=", "0", "\n", "\n", "", "if", "self", ".", "monitor_op", "(", "current", ",", "self", ".", "best", ")", ":", "\n", "            ", "self", ".", "best", "=", "current", "\n", "self", ".", "wait", "=", "0", "\n", "", "elif", "not", "self", ".", "in_cooldown", "(", ")", ":", "\n", "            ", "self", ".", "wait", "+=", "1", "\n", "if", "self", ".", "wait", ">=", "self", ".", "patience", ":", "\n", "                ", "self", ".", "_reduce_lr", "(", "epoch", ")", "\n", "self", ".", "cooldown_counter", "=", "self", ".", "cooldown", "\n", "self", ".", "wait", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ReduceLROnPlateau._reduce_lr": [[389, 398], ["enumerate", "float", "max", "print"], "methods", ["None"], ["", "", "", "def", "_reduce_lr", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "i", ",", "param_group", "in", "enumerate", "(", "self", ".", "optimiser", ".", "param_groups", ")", ":", "\n", "            ", "old_lr", "=", "float", "(", "param_group", "[", "'lr'", "]", ")", "\n", "new_lr", "=", "max", "(", "old_lr", "*", "self", ".", "factor", ",", "self", ".", "min_lrs", "[", "i", "]", ")", "\n", "if", "old_lr", "-", "new_lr", ">", "self", ".", "min_delta", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "if", "self", ".", "verbose", ":", "\n", "                    ", "print", "(", "'Epoch {:5d}: reducing learning rate'", "\n", "' of group {} to {:.4e}.'", ".", "format", "(", "epoch", ",", "i", ",", "new_lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ReduceLROnPlateau.in_cooldown": [[399, 401], ["None"], "methods", ["None"], ["", "", "", "", "def", "in_cooldown", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cooldown_counter", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ModelCheckpoint.__init__": [[433, 458], ["callbacks.Callback.__init__", "ValueError", "callbacks.ModelCheckpoint.monitor.startswith"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["def", "__init__", "(", "self", ",", "filepath", ",", "monitor", "=", "'val_loss'", ",", "verbose", "=", "0", ",", "save_best_only", "=", "True", ",", "mode", "=", "'auto'", ",", "period", "=", "1", ")", ":", "\n", "        ", "super", "(", "ModelCheckpoint", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "monitor", "=", "monitor", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "filepath", "=", "filepath", "\n", "self", ".", "save_best_only", "=", "save_best_only", "\n", "self", ".", "period", "=", "period", "\n", "self", ".", "epochs_since_last_save", "=", "0", "\n", "\n", "if", "mode", "not", "in", "[", "'auto'", ",", "'min'", ",", "'max'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'Mode must be one of (auto, min, max).'", ")", "\n", "\n", "", "if", "mode", "==", "'min'", ":", "\n", "            ", "self", ".", "monitor_op", "=", "np", ".", "less", "\n", "self", ".", "best", "=", "np", ".", "Inf", "\n", "", "elif", "mode", "==", "'max'", ":", "\n", "            ", "self", ".", "monitor_op", "=", "np", ".", "greater", "\n", "self", ".", "best", "=", "-", "np", ".", "Inf", "\n", "", "else", ":", "\n", "            ", "if", "'acc'", "in", "self", ".", "monitor", "or", "self", ".", "monitor", ".", "startswith", "(", "'fmeasure'", ")", ":", "\n", "                ", "self", ".", "monitor_op", "=", "np", ".", "greater", "\n", "self", ".", "best", "=", "-", "np", ".", "Inf", "\n", "", "else", ":", "\n", "                ", "self", ".", "monitor_op", "=", "np", ".", "less", "\n", "self", ".", "best", "=", "np", ".", "Inf", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.ModelCheckpoint.on_epoch_end": [[459, 495], ["torch.save", "callbacks.ModelCheckpoint.filepath.format", "v.state_dict", "logs.get", "torch.save", "callbacks.ModelCheckpoint.model.items", "warnings.warn", "callbacks.ModelCheckpoint.monitor_op", "print", "v.state_dict", "torch.save", "callbacks.ModelCheckpoint.model.items", "print", "v.state_dict", "print", "callbacks.ModelCheckpoint.model.items"], "methods", ["None"], ["", "", "", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "logs", "=", "logs", "or", "{", "}", "\n", "self", ".", "epochs_since_last_save", "+=", "1", "\n", "\n", "if", "epoch", "==", "100", ":", "\n", "            ", "d", "=", "{", "k", ":", "v", ".", "state_dict", "(", ")", "for", "k", ",", "v", "in", "self", ".", "model", ".", "items", "(", ")", "}", "\n", "torch", ".", "save", "(", "d", ",", "self", ".", "filepath", "+", "'.ep100'", ")", "\n", "\n", "", "if", "self", ".", "epochs_since_last_save", ">=", "self", ".", "period", ":", "\n", "            ", "self", ".", "epochs_since_last_save", "=", "0", "\n", "filepath", "=", "self", ".", "filepath", ".", "format", "(", "epoch", "=", "epoch", "+", "1", ",", "**", "logs", ")", "\n", "if", "self", ".", "save_best_only", ":", "\n", "                ", "current", "=", "logs", ".", "get", "(", "self", ".", "monitor", ")", "\n", "if", "current", "is", "None", ":", "\n", "                    ", "warnings", ".", "warn", "(", "'Can save best model only with %s available, '", "\n", "'skipping.'", "%", "(", "self", ".", "monitor", ")", ",", "RuntimeWarning", ")", "\n", "", "else", ":", "\n", "                    ", "if", "self", ".", "monitor_op", "(", "current", ",", "self", ".", "best", ")", ":", "\n", "                        ", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                            ", "print", "(", "'\\nEpoch %05d: %s improved from %0.5f to %0.5f,'", "\n", "' saving model to %s'", "\n", "%", "(", "epoch", "+", "1", ",", "self", ".", "monitor", ",", "self", ".", "best", ",", "\n", "current", ",", "filepath", ")", ")", "\n", "", "self", ".", "best", "=", "current", "\n", "\n", "d", "=", "{", "k", ":", "v", ".", "state_dict", "(", ")", "for", "k", ",", "v", "in", "self", ".", "model", ".", "items", "(", ")", "}", "\n", "torch", ".", "save", "(", "d", ",", "filepath", ")", "\n", "", "else", ":", "\n", "                        ", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                            ", "print", "(", "'\\nEpoch %05d: %s did not improve from %0.5f'", "%", "\n", "(", "epoch", "+", "1", ",", "self", ".", "monitor", ",", "self", ".", "best", ")", ")", "\n", "", "", "", "", "else", ":", "\n", "                ", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                    ", "print", "(", "'\\nEpoch %05d: saving model to %s'", "%", "(", "epoch", "+", "1", ",", "filepath", ")", ")", "\n", "", "d", "=", "{", "k", ":", "v", ".", "state_dict", "(", ")", "for", "k", ",", "v", "in", "self", ".", "model", ".", "items", "(", ")", "}", "\n", "torch", ".", "save", "(", "d", ",", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.LearningRateScheduler.__init__": [[506, 510], ["callbacks.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["def", "__init__", "(", "self", ",", "schedule", ",", "verbose", "=", "0", ")", ":", "\n", "        ", "super", "(", "LearningRateScheduler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "schedule", "=", "schedule", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.LearningRateScheduler.on_train_begin": [[511, 513], ["None"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "optimiser", "=", "self", ".", "params", "[", "'optimiser'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.LearningRateScheduler.on_epoch_begin": [[514, 521], ["callbacks.LearningRateScheduler.set_lr", "callbacks.LearningRateScheduler.schedule", "all", "ValueError", "isinstance"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.LearningRateScheduler.set_lr"], ["", "def", "on_epoch_begin", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "lrs", "=", "[", "self", ".", "schedule", "(", "epoch", ",", "param_group", "[", "'lr'", "]", ")", "for", "param_group", "in", "self", ".", "optimiser", ".", "param_groups", "]", "\n", "\n", "if", "not", "all", "(", "isinstance", "(", "lr", ",", "(", "float", ",", "np", ".", "float32", ",", "np", ".", "float64", ")", ")", "for", "lr", "in", "lrs", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'The output of the \"schedule\" function '", "\n", "'should be float.'", ")", "\n", "", "self", ".", "set_lr", "(", "epoch", ",", "lrs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.LearningRateScheduler.on_epoch_end": [[522, 529], ["len", "enumerate"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "logs", "=", "logs", "or", "{", "}", "\n", "if", "len", "(", "self", ".", "optimiser", ".", "param_groups", ")", "==", "1", ":", "\n", "            ", "logs", "[", "'lr'", "]", "=", "self", ".", "optimiser", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "", "else", ":", "\n", "            ", "for", "i", ",", "param_group", "in", "enumerate", "(", "self", ".", "optimiser", ".", "param_groups", ")", ":", "\n", "                ", "logs", "[", "'lr_{}'", ".", "format", "(", "i", ")", "]", "=", "param_group", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.callbacks.LearningRateScheduler.set_lr": [[530, 537], ["enumerate", "print"], "methods", ["None"], ["", "", "", "def", "set_lr", "(", "self", ",", "epoch", ",", "lrs", ")", ":", "\n", "        ", "for", "i", ",", "param_group", "in", "enumerate", "(", "self", ".", "optimiser", ".", "param_groups", ")", ":", "\n", "            ", "new_lr", "=", "lrs", "[", "i", "]", "\n", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "'Epoch {:5d}: setting learning rate'", "\n", "' of group {} to {:.4e}.'", ".", "format", "(", "epoch", ",", "i", ",", "new_lr", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.tomte812_chef.None.utils.mkdir": [[12, 22], ["os.mkdir"], "function", ["home.repos.pwc.inspect_result.tomte812_chef.None.utils.mkdir"], ["def", "mkdir", "(", "dir", ")", ":", "\n", "    ", "\"\"\"Create a directory, ignoring exceptions\n\n    # Arguments:\n        dir: Path of directory to create\n    \"\"\"", "\n", "try", ":", "\n", "        ", "os", ".", "mkdir", "(", "dir", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.utils.rmdir": [[24, 34], ["shutil.rmtree"], "function", ["None"], ["", "", "def", "rmdir", "(", "dir", ")", ":", "\n", "    ", "\"\"\"Recursively remove a directory and contents, ignoring exceptions\n\n   # Arguments:\n       dir: Path of directory to recursively remove\n   \"\"\"", "\n", "try", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "dir", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.utils.setup_dirs": [[36, 46], ["utils.mkdir", "utils.mkdir", "utils.mkdir", "utils.mkdir", "utils.mkdir", "utils.mkdir", "utils.mkdir", "utils.mkdir"], "function", ["home.repos.pwc.inspect_result.tomte812_chef.None.utils.mkdir", "home.repos.pwc.inspect_result.tomte812_chef.None.utils.mkdir", "home.repos.pwc.inspect_result.tomte812_chef.None.utils.mkdir", "home.repos.pwc.inspect_result.tomte812_chef.None.utils.mkdir", "home.repos.pwc.inspect_result.tomte812_chef.None.utils.mkdir", "home.repos.pwc.inspect_result.tomte812_chef.None.utils.mkdir", "home.repos.pwc.inspect_result.tomte812_chef.None.utils.mkdir", "home.repos.pwc.inspect_result.tomte812_chef.None.utils.mkdir"], ["", "", "def", "setup_dirs", "(", ")", ":", "\n", "    ", "\"\"\"Creates directories for this project.\"\"\"", "\n", "mkdir", "(", "PATH", "+", "'/logs/'", ")", "\n", "mkdir", "(", "PATH", "+", "'/logs/proto_nets'", ")", "\n", "mkdir", "(", "PATH", "+", "'/logs/matching_nets'", ")", "\n", "mkdir", "(", "PATH", "+", "'/logs/maml'", ")", "\n", "mkdir", "(", "PATH", "+", "'/models/'", ")", "\n", "mkdir", "(", "PATH", "+", "'/models/proto_nets'", ")", "\n", "mkdir", "(", "PATH", "+", "'/models/matching_nets'", ")", "\n", "mkdir", "(", "PATH", "+", "'/models/maml'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.utils.pairwise_distances": [[48, 84], ["normalised_x.unsqueeze().expand", "normalised_y.unsqueeze().expand", "x.unsqueeze().expand", "y.unsqueeze().expand", "ValueError", "x.pow().sum().sqrt", "y.pow().sum().sqrt", "normalised_x.unsqueeze", "normalised_y.unsqueeze", "x.unsqueeze", "y.unsqueeze", "x.unsqueeze().expand", "y.unsqueeze().expand", "x.pow().sum", "y.pow().sum", "x.unsqueeze", "y.unsqueeze", "x.pow", "y.pow"], "function", ["None"], ["", "def", "pairwise_distances", "(", "x", ":", "torch", ".", "Tensor", ",", "\n", "y", ":", "torch", ".", "Tensor", ",", "\n", "matching_fn", ":", "str", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Efficiently calculate pairwise distances (or other similarity scores) between\n    two sets of samples.\n\n    # Arguments\n        x: Query samples. A tensor of shape (n_x, d) where d is the embedding dimension\n        y: Class prototypes. A tensor of shape (n_y, d) where d is the embedding dimension\n        matching_fn: Distance metric/similarity score to compute between samples\n    \"\"\"", "\n", "n_x", "=", "x", ".", "shape", "[", "0", "]", "\n", "n_y", "=", "y", ".", "shape", "[", "0", "]", "\n", "\n", "if", "matching_fn", "==", "'l2'", ":", "\n", "        ", "distances", "=", "(", "\n", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "n_x", ",", "n_y", ",", "-", "1", ")", "-", "\n", "y", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n_x", ",", "n_y", ",", "-", "1", ")", "\n", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "distances", "\n", "", "elif", "matching_fn", "==", "'cosine'", ":", "\n", "        ", "normalised_x", "=", "x", "/", "(", "x", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "EPSILON", ")", "\n", "normalised_y", "=", "y", "/", "(", "y", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "EPSILON", ")", "\n", "\n", "expanded_x", "=", "normalised_x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "n_x", ",", "n_y", ",", "-", "1", ")", "\n", "expanded_y", "=", "normalised_y", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n_x", ",", "n_y", ",", "-", "1", ")", "\n", "\n", "cosine_similarities", "=", "(", "expanded_x", "*", "expanded_y", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "1", "-", "cosine_similarities", "\n", "", "elif", "matching_fn", "==", "'dot'", ":", "\n", "        ", "expanded_x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "n_x", ",", "n_y", ",", "-", "1", ")", "\n", "expanded_y", "=", "y", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n_x", ",", "n_y", ",", "-", "1", ")", "\n", "\n", "return", "-", "(", "expanded_x", "*", "expanded_y", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "ValueError", "(", "'Unsupported similarity function'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.utils.copy_weights": [[86, 104], ["zip", "ValueError", "from_model.modules", "to_model.modules", "isinstance", "isinstance", "isinstance", "m_from.weight.data.clone", "m_from.bias.data.clone"], "function", ["None"], ["", "", "def", "copy_weights", "(", "from_model", ":", "torch", ".", "nn", ".", "Module", ",", "to_model", ":", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Copies the weights from one model to another model.\n\n    # Arguments:\n        from_model: Model from which to source weights\n        to_model: Model which will receive weights\n    \"\"\"", "\n", "if", "not", "from_model", ".", "__class__", "==", "to_model", ".", "__class__", ":", "\n", "        ", "raise", "(", "ValueError", "(", "\"Models don't have the same architecture!\"", ")", ")", "\n", "\n", "", "for", "m_from", ",", "m_to", "in", "zip", "(", "from_model", ".", "modules", "(", ")", ",", "to_model", ".", "modules", "(", ")", ")", ":", "\n", "        ", "is_linear", "=", "isinstance", "(", "m_to", ",", "torch", ".", "nn", ".", "Linear", ")", "\n", "is_conv", "=", "isinstance", "(", "m_to", ",", "torch", ".", "nn", ".", "Conv2d", ")", "\n", "is_bn", "=", "isinstance", "(", "m_to", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "\n", "if", "is_linear", "or", "is_conv", "or", "is_bn", ":", "\n", "            ", "m_to", ".", "weight", ".", "data", "=", "m_from", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "if", "m_to", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m_to", ".", "bias", ".", "data", "=", "m_from", ".", "bias", ".", "data", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.utils.autograd_graph": [[106, 139], ["utils.autograd_graph._add_nodes"], "function", ["None"], ["", "", "", "", "def", "autograd_graph", "(", "tensor", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "\n", "List", "[", "torch", ".", "autograd", ".", "Function", "]", ",", "\n", "List", "[", "Tuple", "[", "torch", ".", "autograd", ".", "Function", ",", "torch", ".", "autograd", ".", "Function", "]", "]", "\n", "]", ":", "\n", "    ", "\"\"\"Recursively retrieves the autograd graph for a particular tensor.\n\n    # Arguments\n        tensor: The Tensor to retrieve the autograd graph for\n\n    # Returns\n        nodes: List of torch.autograd.Functions that are the nodes of the autograd graph\n        edges: List of (Function, Function) tuples that are the edges between the nodes of the autograd graph\n    \"\"\"", "\n", "nodes", ",", "edges", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "\n", "def", "_add_nodes", "(", "tensor", ")", ":", "\n", "        ", "if", "tensor", "not", "in", "nodes", ":", "\n", "            ", "nodes", ".", "append", "(", "tensor", ")", "\n", "\n", "if", "hasattr", "(", "tensor", ",", "'next_functions'", ")", ":", "\n", "                ", "for", "f", "in", "tensor", ".", "next_functions", ":", "\n", "                    ", "if", "f", "[", "0", "]", "is", "not", "None", ":", "\n", "                        ", "edges", ".", "append", "(", "(", "f", "[", "0", "]", ",", "tensor", ")", ")", "\n", "_add_nodes", "(", "f", "[", "0", "]", ")", "\n", "\n", "", "", "", "if", "hasattr", "(", "tensor", ",", "'saved_tensors'", ")", ":", "\n", "                ", "for", "t", "in", "tensor", ".", "saved_tensors", ":", "\n", "                    ", "edges", ".", "append", "(", "(", "t", ",", "tensor", ")", ")", "\n", "_add_nodes", "(", "t", ")", "\n", "\n", "", "", "", "", "_add_nodes", "(", "tensor", ".", "grad_fn", ")", "\n", "\n", "return", "nodes", ",", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.utils.prepare_meta_batch": [[141, 159], ["x.reshape.double().to", "create_nshot_task_label().repeat.to", "x.reshape.reshape", "core.create_nshot_task_label().repeat", "x.reshape.double", "core.create_nshot_task_label"], "function", ["home.repos.pwc.inspect_result.tomte812_chef.None.core.create_nshot_task_label"], ["", "def", "prepare_meta_batch", "(", "n", ",", "k", ",", "q", ",", "meta_batch_size", ",", "stage", ",", "device", ",", "num_input_channels", "=", "3", ")", ":", "\n", "    ", "def", "prepare_meta_batch_", "(", "batch", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "# Reshape to `meta_batch_size` number of tasks. Each task contains", "\n", "# n*k support samples to train the fast model on and q*k query samples to", "\n", "if", "stage", "==", "2", ":", "\n", "# evaluate the fast model on and generate meta-gradients", "\n", "            ", "x", "=", "x", ".", "reshape", "(", "meta_batch_size", ",", "n", "*", "k", "+", "q", "*", "k", ",", "num_input_channels", ",", "x", ".", "shape", "[", "-", "2", "]", ",", "x", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "# make k-way targets for stage two", "\n", "y", "=", "create_nshot_task_label", "(", "k", ",", "q", ")", ".", "repeat", "(", "meta_batch_size", ")", "\n", "\n", "# Move to device", "\n", "", "x", "=", "x", ".", "double", "(", ")", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "return", "x", ",", "y", "\n", "\n", "", "return", "prepare_meta_batch_", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.utils.make_task_loader": [[161, 170], ["core.NShotTaskSampler", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "make_task_loader", "(", "dataset", ",", "args", ",", "train", ",", "meta", ")", ":", "\n", "    ", "if", "meta", ":", "\n", "        ", "batch_size", ",", "n", ",", "k", ",", "q", "=", "args", ".", "meta_batch_size", ",", "args", ".", "n", ",", "args", ".", "k", ",", "args", ".", "q", "\n", "", "else", ":", "\n", "        ", "batch_size", ",", "n", ",", "k", ",", "q", "=", "args", ".", "batch_size", ",", "1", ",", "1", ",", "0", "\n", "\n", "", "num_batches", "=", "args", ".", "epoch_len", "if", "train", "else", "args", ".", "eval_batches", "\n", "sampler", "=", "NShotTaskSampler", "(", "dataset", ",", "num_batches", ",", "n", "=", "n", ",", "k", "=", "k", ",", "q", "=", "q", ",", "num_tasks", "=", "batch_size", ")", "\n", "return", "DataLoader", "(", "dataset", ",", "batch_sampler", "=", "sampler", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.utils.correlation": [[172, 184], ["x.var().sqrt", "y.var().sqrt", "x.mean", "y.mean", "zx.t", "torch.isnan", "x.var", "y.var"], "function", ["None"], ["", "def", "correlation", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    x has shape (num_samples, x_features)\n    y has shape (num_samples, y_features)\n    returns a matrix of correlatio coefficients of shape (x_features, y_features)\n    \"\"\"", "\n", "\n", "zx", "=", "(", "x", "-", "x", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ")", "/", "x", ".", "var", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "\n", "zy", "=", "(", "y", "-", "y", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ")", "/", "y", ".", "var", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "\n", "r", "=", "(", "zx", ".", "t", "(", ")", "@", "zy", ")", "/", "(", "x", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "r", "[", "torch", ".", "isnan", "(", "r", ")", "]", "=", "0.", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.utils.adjust_learning_rate": [[186, 192], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "lr", ")", ":", "\n", "    ", "\"\"\"copied from https://github.com/pytorch/examples\"\"\"", "\n", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "*=", "0.1", "**", "(", "epoch", "//", "200", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.dropblock.DropBlock.__init__": [[12, 16], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", ")", ":", "\n", "        ", "super", "(", "DropBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block_size", "=", "block_size", "\n", "#self.gamma = gamma", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.dropblock.DropBlock.forward": [[19, 37], ["torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample.to", "dropblock.DropBlock._compute_block_mask().to", "dropblock.DropBlock.sum", "dropblock.DropBlock._compute_block_mask", "dropblock.DropBlock.size", "dropblock.DropBlock.size", "dropblock.DropBlock.size", "dropblock.DropBlock.size"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.dropblock.DropBlock._compute_block_mask"], ["", "def", "forward", "(", "self", ",", "x", ",", "gamma", ")", ":", "\n", "# shape: (bsize, channels, height, width)", "\n", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "\n", "bernoulli", "=", "Bernoulli", "(", "gamma", ")", "\n", "mask", "=", "bernoulli", ".", "sample", "(", "(", "batch_size", ",", "channels", ",", "height", "-", "(", "self", ".", "block_size", "-", "1", ")", ",", "width", "-", "(", "self", ".", "block_size", "-", "1", ")", ")", ")", "#.cuda()", "\n", "mask", ".", "to", "(", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "#print((x.sample[-2], x.sample[-1]))", "\n", "block_mask", "=", "self", ".", "_compute_block_mask", "(", "mask", ")", ".", "to", "(", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "#print (block_mask.size())", "\n", "#print (x.size())", "\n", "countM", "=", "block_mask", ".", "size", "(", ")", "[", "0", "]", "*", "block_mask", ".", "size", "(", ")", "[", "1", "]", "*", "block_mask", ".", "size", "(", ")", "[", "2", "]", "*", "block_mask", ".", "size", "(", ")", "[", "3", "]", "\n", "count_ones", "=", "block_mask", ".", "sum", "(", ")", "\n", "return", "block_mask", "*", "x", "*", "(", "countM", "/", "count_ones", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.dropblock.DropBlock._compute_block_mask": [[38, 69], ["int", "int", "mask.nonzero", "torch.stack().t().to", "torch.stack().t().to", "torch.stack().t().to", "torch.stack().t().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "non_zero_idxs.repeat.repeat.repeat", "offsets.long.long.repeat().view", "offsets.long.long.long", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "offsets.long.long.repeat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "offsets.long.long.long", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "", "def", "_compute_block_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "left_padding", "=", "int", "(", "(", "self", ".", "block_size", "-", "1", ")", "/", "2", ")", "\n", "right_padding", "=", "int", "(", "self", ".", "block_size", "/", "2", ")", "\n", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "mask", ".", "shape", "\n", "#print (\"mask\", mask[0][0])", "\n", "non_zero_idxs", "=", "mask", ".", "nonzero", "(", ")", "\n", "nr_blocks", "=", "non_zero_idxs", ".", "shape", "[", "0", "]", "\n", "\n", "offsets", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "self", ".", "block_size", ",", "self", ".", "block_size", ")", ".", "reshape", "(", "-", "1", ")", ",", "# - left_padding,", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "repeat", "(", "self", ".", "block_size", ")", ",", "#- left_padding", "\n", "]", "\n", ")", ".", "t", "(", ")", ".", "to", "(", "mask", ".", "device", ")", "\n", "offsets", "=", "torch", ".", "cat", "(", "(", "torch", ".", "zeros", "(", "self", ".", "block_size", "**", "2", ",", "2", ")", ".", "to", "(", "mask", ".", "device", ")", ".", "long", "(", ")", ",", "offsets", ".", "long", "(", ")", ")", ",", "1", ")", ".", "to", "(", "mask", ".", "device", ")", "\n", "\n", "if", "nr_blocks", ">", "0", ":", "\n", "            ", "non_zero_idxs", "=", "non_zero_idxs", ".", "repeat", "(", "self", ".", "block_size", "**", "2", ",", "1", ")", "\n", "offsets", "=", "offsets", ".", "repeat", "(", "nr_blocks", ",", "1", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "offsets", "=", "offsets", ".", "long", "(", ")", "\n", "\n", "block_idxs", "=", "non_zero_idxs", "+", "offsets", "\n", "#block_idxs += left_padding", "\n", "padded_mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", ")", "\n", "padded_mask", "[", "block_idxs", "[", ":", ",", "0", "]", ",", "block_idxs", "[", ":", ",", "1", "]", ",", "block_idxs", "[", ":", ",", "2", "]", ",", "block_idxs", "[", ":", ",", "3", "]", "]", "=", "1.", "\n", "", "else", ":", "\n", "            ", "padded_mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", ")", "\n", "\n", "", "block_mask", "=", "1", "-", "padded_mask", "#[:height, :width]", "\n", "return", "block_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.OmniglotDataset.__init__": [[17, 40], ["pandas.DataFrame", "datasets.OmniglotDataset.df.assign", "sorted", "datasets.OmniglotDataset.df.assign", "datasets.OmniglotDataset.index_subset", "datasets.OmniglotDataset.df[].unique", "datasets.OmniglotDataset.df.to_dict", "datasets.OmniglotDataset.df.to_dict", "range", "datasets.OmniglotDataset.df[].apply", "datasets.OmniglotDataset.num_classes"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.datasets.MiniImageNet.index_subset", "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.num_classes"], ["    ", "def", "__init__", "(", "self", ",", "subset", ")", ":", "\n", "        ", "\"\"\"Dataset class representing Omniglot dataset\n\n        # Arguments:\n            subset: Whether the dataset represents the background or evaluation set\n        \"\"\"", "\n", "if", "subset", "not", "in", "(", "'background'", ",", "'evaluation'", ")", ":", "\n", "            ", "raise", "(", "ValueError", ",", "'subset must be one of (background, evaluation)'", ")", "\n", "", "self", ".", "subset", "=", "subset", "\n", "\n", "self", ".", "df", "=", "pd", ".", "DataFrame", "(", "self", ".", "index_subset", "(", "self", ".", "subset", ")", ")", "\n", "\n", "# Index of dataframe has direct correspondence to item in dataset", "\n", "self", ".", "df", "=", "self", ".", "df", ".", "assign", "(", "id", "=", "self", ".", "df", ".", "index", ".", "values", ")", "\n", "\n", "# Convert arbitrary class names of dataset to ordered 0-(num_speakers - 1) integers", "\n", "self", ".", "unique_characters", "=", "sorted", "(", "self", ".", "df", "[", "'class_name'", "]", ".", "unique", "(", ")", ")", "\n", "self", ".", "class_name_to_id", "=", "{", "self", ".", "unique_characters", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "self", ".", "num_classes", "(", ")", ")", "}", "\n", "self", ".", "df", "=", "self", ".", "df", ".", "assign", "(", "class_id", "=", "self", ".", "df", "[", "'class_name'", "]", ".", "apply", "(", "lambda", "c", ":", "self", ".", "class_name_to_id", "[", "c", "]", ")", ")", "\n", "\n", "# Create dicts", "\n", "self", ".", "datasetid_to_filepath", "=", "self", ".", "df", ".", "to_dict", "(", ")", "[", "'filepath'", "]", "\n", "self", ".", "datasetid_to_class_id", "=", "self", ".", "df", ".", "to_dict", "(", ")", "[", "'class_id'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.OmniglotDataset.__getitem__": [[41, 52], ["skimage.io.imread", "torch.from_numpy", "skimage.io.imread.min", "skimage.io.imread.max", "skimage.io.imread.min"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "instance", "=", "io", ".", "imread", "(", "self", ".", "datasetid_to_filepath", "[", "item", "]", ")", "\n", "# Reindex to channels first format as supported by pytorch", "\n", "instance", "=", "instance", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "\n", "# Normalise to 0-1", "\n", "instance", "=", "(", "instance", "-", "instance", ".", "min", "(", ")", ")", "/", "(", "instance", ".", "max", "(", ")", "-", "instance", ".", "min", "(", ")", ")", "\n", "\n", "label", "=", "self", ".", "datasetid_to_class_id", "[", "item", "]", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "instance", ")", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.OmniglotDataset.__len__": [[53, 55], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.OmniglotDataset.num_classes": [[56, 58], ["len", "datasets.OmniglotDataset.df[].unique"], "methods", ["None"], ["", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "df", "[", "'class_name'", "]", ".", "unique", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.OmniglotDataset.index_subset": [[59, 96], ["print", "os.walk", "tqdm.tqdm.tqdm", "os.walk", "tqdm.tqdm.tqdm.close", "len", "len", "root.split", "tqdm.tqdm.tqdm.update", "images.append", "root.split", "f.endswith", "os.path.join"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "index_subset", "(", "subset", ")", ":", "\n", "        ", "\"\"\"Index a subset by looping through all of its files and recording relevant information.\n\n        # Arguments\n            subset: Name of the subset\n\n        # Returns\n            A list of dicts containing information about all the image files in a particular subset of the\n            Omniglot dataset dataset\n        \"\"\"", "\n", "images", "=", "[", "]", "\n", "print", "(", "'Indexing {}...'", ".", "format", "(", "subset", ")", ")", "\n", "# Quick first pass to find total for tqdm bar", "\n", "subset_len", "=", "0", "\n", "for", "root", ",", "folders", ",", "files", "in", "os", ".", "walk", "(", "DATA_PATH", "+", "'/Omniglot/images_{}/'", ".", "format", "(", "subset", ")", ")", ":", "\n", "            ", "subset_len", "+=", "len", "(", "[", "f", "for", "f", "in", "files", "if", "f", ".", "endswith", "(", "'.png'", ")", "]", ")", "\n", "\n", "", "progress_bar", "=", "tqdm", "(", "total", "=", "subset_len", ")", "\n", "for", "root", ",", "folders", ",", "files", "in", "os", ".", "walk", "(", "DATA_PATH", "+", "'/Omniglot/images_{}/'", ".", "format", "(", "subset", ")", ")", ":", "\n", "            ", "if", "len", "(", "files", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "alphabet", "=", "root", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "class_name", "=", "'{}.{}'", ".", "format", "(", "alphabet", ",", "root", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "\n", "for", "f", "in", "files", ":", "\n", "                ", "progress_bar", ".", "update", "(", "1", ")", "\n", "images", ".", "append", "(", "{", "\n", "'subset'", ":", "subset", ",", "\n", "'alphabet'", ":", "alphabet", ",", "\n", "'class_name'", ":", "class_name", ",", "\n", "'filepath'", ":", "os", ".", "path", ".", "join", "(", "root", ",", "f", ")", "\n", "}", ")", "\n", "\n", "", "", "progress_bar", ".", "close", "(", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.MiniImageNet.__init__": [[99, 149], ["pandas.DataFrame", "datasets.MiniImageNet.df.assign", "sorted", "datasets.MiniImageNet.df.assign", "datasets.MiniImageNet.index_subset", "datasets.MiniImageNet.df[].unique", "datasets.MiniImageNet.df.to_dict", "datasets.MiniImageNet.df.to_dict", "torchvision.transforms.Compose", "range", "datasets.MiniImageNet.df[].apply", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "datasets.MiniImageNet.num_classes", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.CenterCrop", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.datasets.MiniImageNet.index_subset", "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.num_classes"], ["    ", "def", "__init__", "(", "self", ",", "subset", ",", "small", "=", "True", ")", ":", "\n", "        ", "\"\"\"Dataset class representing miniImageNet dataset\n\n        # Arguments:\n            subset: Whether the dataset represents the background or evaluation set\n        \"\"\"", "\n", "if", "subset", "not", "in", "(", "'background'", ",", "'evaluation'", ",", "'train'", ",", "'val'", ",", "'test'", ",", "'trainval'", ")", ":", "\n", "            ", "raise", "(", "ValueError", ",", "'subset must be one of (background, evaluation, train, val, test)'", ")", "\n", "", "self", ".", "subset", "=", "subset", "\n", "\n", "self", ".", "df", "=", "pd", ".", "DataFrame", "(", "self", ".", "index_subset", "(", "self", ".", "subset", ")", ")", "\n", "\n", "# Index of dataframe has direct correspondence to item in dataset", "\n", "self", ".", "df", "=", "self", ".", "df", ".", "assign", "(", "id", "=", "self", ".", "df", ".", "index", ".", "values", ")", "\n", "\n", "# Convert arbitrary class names of dataset to ordered 0-(num_speakers - 1) integers", "\n", "self", ".", "unique_characters", "=", "sorted", "(", "self", ".", "df", "[", "'class_name'", "]", ".", "unique", "(", ")", ")", "\n", "self", ".", "class_name_to_id", "=", "{", "self", ".", "unique_characters", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "self", ".", "num_classes", "(", ")", ")", "}", "\n", "self", ".", "df", "=", "self", ".", "df", ".", "assign", "(", "class_id", "=", "self", ".", "df", "[", "'class_name'", "]", ".", "apply", "(", "lambda", "c", ":", "self", ".", "class_name_to_id", "[", "c", "]", ")", ")", "\n", "\n", "# Create dicts", "\n", "self", ".", "datasetid_to_filepath", "=", "self", ".", "df", ".", "to_dict", "(", ")", "[", "'filepath'", "]", "\n", "self", ".", "datasetid_to_class_id", "=", "self", ".", "df", ".", "to_dict", "(", ")", "[", "'class_id'", "]", "\n", "\n", "# Setup transforms", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "if", "subset", "in", "(", "'train'", ",", "'trainval'", ")", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "84", "if", "small", "else", "224", ")", ",", "#(224), #(84),", "\n", "#transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4),", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "]", ")", "\n", "", "elif", "subset", "in", "(", "'val'", ",", "'test'", ")", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "96", "if", "small", "else", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "84", "if", "small", "else", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "]", ")", "\n", "", "else", ":", "# subset in ('background', 'evaluation')", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "# FIXME this is Knagg's preprocessing", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "Resize", "(", "84", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.MiniImageNet.__getitem__": [[151, 157], ["PIL.Image.open", "datasets.MiniImageNet.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "# TODO raise IndexError if item out of range", "\n", "        ", "instance", "=", "Image", ".", "open", "(", "self", ".", "datasetid_to_filepath", "[", "item", "]", ")", "\n", "instance", "=", "self", ".", "transform", "(", "instance", ")", "\n", "label", "=", "self", ".", "datasetid_to_class_id", "[", "item", "]", "\n", "return", "instance", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.MiniImageNet.__len__": [[158, 160], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.MiniImageNet.num_classes": [[161, 163], ["len", "datasets.MiniImageNet.df[].unique"], "methods", ["None"], ["", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "df", "[", "'class_name'", "]", ".", "unique", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.MiniImageNet.index_subset": [[164, 199], ["print", "os.walk", "tqdm.tqdm.tqdm", "os.walk", "tqdm.tqdm.tqdm.close", "len", "len", "root.split", "tqdm.tqdm.tqdm.update", "images.append", "f.endswith", "os.path.join"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "index_subset", "(", "subset", ")", ":", "\n", "        ", "\"\"\"Index a subset by looping through all of its files and recording relevant information.\n\n        # Arguments\n            subset: Name of the subset\n\n        # Returns\n            A list of dicts containing information about all the image files in a particular subset of the\n            miniImageNet dataset\n        \"\"\"", "\n", "images", "=", "[", "]", "\n", "print", "(", "'Indexing {}...'", ".", "format", "(", "subset", ")", ")", "\n", "# Quick first pass to find total for tqdm bar", "\n", "subset_len", "=", "0", "\n", "for", "root", ",", "folders", ",", "files", "in", "os", ".", "walk", "(", "DATA_PATH", "+", "'/miniImageNet/images_{}/'", ".", "format", "(", "subset", ")", ",", "followlinks", "=", "True", ")", ":", "\n", "            ", "subset_len", "+=", "len", "(", "[", "f", "for", "f", "in", "files", "if", "f", ".", "endswith", "(", "'.png'", ")", "]", ")", "\n", "\n", "", "progress_bar", "=", "tqdm", "(", "total", "=", "subset_len", ")", "\n", "for", "root", ",", "folders", ",", "files", "in", "os", ".", "walk", "(", "DATA_PATH", "+", "'/miniImageNet/images_{}/'", ".", "format", "(", "subset", ")", ",", "followlinks", "=", "True", ")", ":", "\n", "            ", "if", "len", "(", "files", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "class_name", "=", "root", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "\n", "for", "f", "in", "files", ":", "\n", "                ", "progress_bar", ".", "update", "(", "1", ")", "\n", "images", ".", "append", "(", "{", "\n", "'subset'", ":", "subset", ",", "\n", "'class_name'", ":", "class_name", ",", "\n", "'filepath'", ":", "os", ".", "path", ".", "join", "(", "root", ",", "f", ")", "\n", "}", ")", "\n", "\n", "", "", "progress_bar", ".", "close", "(", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.MiniImagenetHorizontal.__init__": [[202, 230], ["os.path.join", "os.walk", "torchvision.transforms.Compose", "len", "sorted", "torchvision.transforms.Compose", "len", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "root.split", "os.path.join", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "split", ",", "small", "=", "True", ")", ":", "\n", "        ", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "f'miniImageNet/hsplit_{split}'", ")", "\n", "self", ".", "files", "=", "[", "]", "\n", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "self", ".", "path", ")", ":", "\n", "            ", "if", "len", "(", "dirs", ")", ">", "0", ":", "\n", "                ", "self", ".", "classes", "=", "sorted", "(", "dirs", ")", "\n", "", "elif", "len", "(", "files", ")", ">", "0", ":", "\n", "                ", "c", "=", "root", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "self", ".", "files", "+=", "[", "os", ".", "path", ".", "join", "(", "c", ",", "f", ")", "for", "f", "in", "files", "]", "\n", "\n", "", "", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "84", "if", "small", "else", "224", ")", ",", "\n", "#transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4),", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", ")", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "96", "if", "small", "else", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "84", "if", "small", "else", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.MiniImagenetHorizontal.__getitem__": [[232, 240], ["datasets.MiniImagenetHorizontal.classes.index", "os.path.join", "PIL.Image.open", "datasets.MiniImagenetHorizontal.transform", "f.split"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "f", "=", "self", ".", "files", "[", "item", "]", "\n", "class_name", "=", "f", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "label", "=", "self", ".", "classes", ".", "index", "(", "class_name", ")", "\n", "img", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "f", ")", "\n", "img", "=", "Image", ".", "open", "(", "img", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.MiniImagenetHorizontal.__len__": [[241, 243], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.buildLabelIndex": [[251, 260], ["enumerate", "label2inds[].append"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "buildLabelIndex", "(", "labels", ")", ":", "\n", "        ", "label2inds", "=", "{", "}", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "            ", "if", "label", "not", "in", "label2inds", ":", "\n", "                ", "label2inds", "[", "label", "]", "=", "[", "]", "\n", "", "label2inds", "[", "label", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "return", "label2inds", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.load_data": [[261, 273], ["open", "pickle.load", "open", "pickle._Unpickler", "pickle._Unpickler.load"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_data", "(", "file", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "return", "data", "\n", "", "except", ":", "\n", "            ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "u", "=", "pickle", ".", "_Unpickler", "(", "f", ")", "\n", "u", ".", "encoding", "=", "'latin1'", "\n", "data", "=", "u", ".", "load", "(", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.__init__": [[275, 395], ["print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.transforms.Normalize", "print", "datasets.TieredImagenet.load_data", "datasets.TieredImagenet.buildLabelIndex", "sorted", "len", "len", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "numpy.load", "datasets.TieredImagenet.label2ind.keys", "datasets.TieredImagenet.buildLabelIndex", "sorted", "len", "ValueError", "datasets.TieredImagenet.load_data", "datasets.TieredImagenet.load_data", "datasets.TieredImagenet.load_data", "datasets.TieredImagenet.load_data", "numpy.concatenate", "datasets.TieredImagenet.label2ind.keys", "datasets.TieredImagenet.buildLabelIndex().keys", "datasets.TieredImagenet.buildLabelIndex().keys", "len", "len", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomCrop", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "set", "set", "len", "numpy.asarray", "numpy.asarray", "datasets.TieredImagenet.buildLabelIndex", "datasets.TieredImagenet.buildLabelIndex"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.load_data", "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.buildLabelIndex", "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.buildLabelIndex", "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.load_data", "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.load_data", "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.load_data", "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.load_data", "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.buildLabelIndex", "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.buildLabelIndex"], ["", "", "def", "__init__", "(", "self", ",", "phase", "=", "'train'", ",", "do_not_use_random_transf", "=", "False", ")", ":", "\n", "        ", "assert", "(", "phase", "==", "'train'", "or", "phase", "==", "'val'", "or", "phase", "==", "'test'", ")", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "name", "=", "'tieredImageNet_'", "+", "phase", "\n", "\n", "print", "(", "'Loading tiered ImageNet dataset - phase {0}... '", ".", "format", "(", "phase", ")", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "file_train_categories_train_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'train_images.npz'", ")", "\n", "label_train_categories_train_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'train_labels.pkl'", ")", "\n", "file_train_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'train_images.npz'", ")", "\n", "label_train_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'train_labels.pkl'", ")", "\n", "file_train_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'train_images.npz'", ")", "\n", "label_train_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'train_labels.pkl'", ")", "\n", "\n", "file_val_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'val_images.npz'", ")", "\n", "label_val_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'val_labels.pkl'", ")", "\n", "file_test_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'test_images.npz'", ")", "\n", "label_test_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'test_labels.pkl'", ")", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "# During training phase we only load the training phase images", "\n", "# of the training categories (aka base categories).", "\n", "            ", "data_train", "=", "self", ".", "load_data", "(", "label_train_categories_train_phase", ")", "\n", "#self.data = data_train['data']", "\n", "self", ".", "labels", "=", "data_train", "[", "'labels'", "]", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "file_train_categories_train_phase", ")", "[", "'images'", "]", "#np.array(self.load_data(file_train_categories_train_phase))", "\n", "#self.labels = self.load_data(file_train_categories_train_phase)#data_train['labels']", "\n", "\n", "self", ".", "label2ind", "=", "self", ".", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "self", ".", "labelIds_base", "=", "self", ".", "labelIds", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "\n", "", "elif", "self", ".", "phase", "==", "'val'", "or", "self", ".", "phase", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "phase", "==", "'test'", ":", "\n", "# load data that will be used for evaluating the recognition", "\n", "# accuracy of the base categories.", "\n", "                ", "data_base", "=", "self", ".", "load_data", "(", "label_train_categories_test_phase", ")", "\n", "data_base_images", "=", "np", ".", "load", "(", "file_train_categories_test_phase", ")", "[", "'images'", "]", "\n", "\n", "# load data that will be use for evaluating the few-shot recogniton", "\n", "# accuracy on the novel categories.", "\n", "data_novel", "=", "self", ".", "load_data", "(", "label_test_categories_test_phase", ")", "\n", "data_novel_images", "=", "np", ".", "load", "(", "file_test_categories_test_phase", ")", "[", "'images'", "]", "\n", "", "else", ":", "# phase=='val'", "\n", "# load data that will be used for evaluating the recognition", "\n", "# accuracy of the base categories.", "\n", "                ", "data_base", "=", "self", ".", "load_data", "(", "label_train_categories_val_phase", ")", "\n", "data_base_images", "=", "np", ".", "load", "(", "file_train_categories_val_phase", ")", "[", "'images'", "]", "\n", "#print (data_base_images)", "\n", "#print (data_base_images.shape)", "\n", "# load data that will be use for evaluating the few-shot recogniton", "\n", "# accuracy on the novel categories.", "\n", "data_novel", "=", "self", ".", "load_data", "(", "label_val_categories_val_phase", ")", "\n", "data_novel_images", "=", "np", ".", "load", "(", "file_val_categories_val_phase", ")", "[", "'images'", "]", "\n", "\n", "", "if", "False", ":", "# adaption by toto", "\n", "                ", "self", ".", "data", "=", "np", ".", "concatenate", "(", "\n", "[", "data_base_images", ",", "data_novel_images", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "labels", "=", "data_base", "[", "'labels'", "]", "+", "data_novel", "[", "'labels'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "data", "=", "data_novel_images", "\n", "self", ".", "labels", "=", "data_novel", "[", "'labels'", "]", "\n", "\n", "", "self", ".", "label2ind", "=", "self", ".", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "\n", "if", "False", ":", "# adaption by toto", "\n", "                ", "self", ".", "labelIds_base", "=", "self", ".", "buildLabelIndex", "(", "data_base", "[", "'labels'", "]", ")", ".", "keys", "(", ")", "\n", "self", ".", "labelIds_novel", "=", "self", ".", "buildLabelIndex", "(", "data_novel", "[", "'labels'", "]", ")", ".", "keys", "(", ")", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "self", ".", "num_cats_novel", "=", "len", "(", "self", ".", "labelIds_novel", ")", "\n", "intersection", "=", "set", "(", "self", ".", "labelIds_base", ")", "&", "set", "(", "self", ".", "labelIds_novel", ")", "\n", "#print (intersection)", "\n", "assert", "(", "len", "(", "intersection", ")", "==", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not valid phase {0}'", ".", "format", "(", "self", ".", "phase", ")", ")", "\n", "\n", "", "mean_pix", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "120.39586422", ",", "115.59361427", ",", "104.54012653", "]", "]", "\n", "std_pix", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "70.68188272", ",", "68.27635443", ",", "72.54505529", "]", "]", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean_pix", ",", "std", "=", "std_pix", ")", "\n", "\n", "if", "(", "self", ".", "phase", "==", "'test'", "or", "self", ".", "phase", "==", "'val'", ")", "or", "(", "do_not_use_random_transf", "==", "True", ")", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "", "print", "(", "'done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.__getitem__": [[396, 404], ["PIL.Image.fromarray", "datasets.TieredImagenet.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.__len__": [[405, 407], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenet.num_classes": [[408, 410], ["None"], "methods", ["None"], ["", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_cats", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenetHorizontal.__init__": [[413, 441], ["os.path.join", "os.walk", "torchvision.transforms.Compose", "len", "sorted", "torchvision.transforms.Compose", "len", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "root.split", "os.path.join", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "split", ",", "small", "=", "True", ")", ":", "\n", "        ", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "f'tiered_imagenet/hsplit_{split}'", ")", "\n", "self", ".", "files", "=", "[", "]", "\n", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "self", ".", "path", ")", ":", "\n", "            ", "if", "len", "(", "dirs", ")", ">", "0", ":", "\n", "                ", "self", ".", "classes", "=", "sorted", "(", "dirs", ")", "\n", "", "elif", "len", "(", "files", ")", ">", "0", ":", "\n", "                ", "c", "=", "root", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "self", ".", "files", "+=", "[", "os", ".", "path", ".", "join", "(", "c", ",", "f", ")", "for", "f", "in", "files", "]", "\n", "\n", "", "", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "84", "if", "small", "else", "224", ")", ",", "\n", "#transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4),", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", ")", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "96", "if", "small", "else", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "84", "if", "small", "else", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenetHorizontal.__getitem__": [[443, 451], ["datasets.TieredImagenetHorizontal.classes.index", "os.path.join", "PIL.Image.open", "datasets.TieredImagenetHorizontal.transform", "f.split"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "f", "=", "self", ".", "files", "[", "item", "]", "\n", "class_name", "=", "f", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "label", "=", "self", ".", "classes", ".", "index", "(", "class_name", ")", "\n", "img", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "f", ")", "\n", "img", "=", "Image", ".", "open", "(", "img", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.TieredImagenetHorizontal.__len__": [[452, 454], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.ImagenetBasedDataset.__init__": [[457, 492], ["os.path.join", "os.walk", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "len", "sorted", "len", "len", "range", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "root.split", "os.path.join", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "split", ",", "small", "=", "True", ",", "tier", "=", "False", ",", "horizontal", "=", "False", ")", ":", "\n", "        ", "base", "=", "'tiered_imagenet'", "if", "tier", "else", "'miniImageNet'", "\n", "sub", "=", "(", "'hsplit_'", "if", "horizontal", "else", "(", "''", "if", "tier", "else", "'images_'", ")", ")", "\n", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "base", ",", "sub", "+", "split", ")", "\n", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "label2ind", "=", "{", "}", "\n", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "self", ".", "path", ")", ":", "\n", "            ", "if", "len", "(", "dirs", ")", ">", "0", ":", "\n", "                ", "self", ".", "classes", "=", "sorted", "(", "dirs", ")", "\n", "", "elif", "len", "(", "files", ")", ">", "0", ":", "\n", "                ", "c", "=", "root", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "base", "=", "len", "(", "self", ".", "files", ")", "\n", "self", ".", "label2ind", "[", "c", "]", "=", "range", "(", "base", ",", "base", "+", "len", "(", "files", ")", ")", "\n", "self", ".", "files", "+=", "[", "os", ".", "path", ".", "join", "(", "c", ",", "f", ")", "for", "f", "in", "files", "]", "\n", "\n", "", "", "self", ".", "labelIds", "=", "self", ".", "classes", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "84", "if", "small", "else", "224", ")", ",", "\n", "#transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4),", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "# i.e. split == 'val' or split == 'test'", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "96", "if", "small", "else", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "84", "if", "small", "else", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.ImagenetBasedDataset.__getitem__": [[494, 502], ["datasets.ImagenetBasedDataset.classes.index", "os.path.join", "PIL.Image.open", "datasets.ImagenetBasedDataset.transform", "f.split"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "f", "=", "self", ".", "files", "[", "item", "]", "\n", "class_name", "=", "f", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "label", "=", "self", ".", "classes", ".", "index", "(", "class_name", ")", "\n", "img", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "f", ")", "\n", "img", "=", "Image", ".", "open", "(", "img", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.ImagenetBasedDataset.__len__": [[503, 505], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.DummyDataset.__init__": [[509, 529], ["pandas.DataFrame", "datasets.DummyDataset.df.assign", "range", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "samples_per_class", "=", "10", ",", "n_classes", "=", "10", ",", "n_features", "=", "1", ")", ":", "\n", "        ", "\"\"\"Dummy dataset for debugging/testing purposes\n\n        A sample from the DummyDataset has (n_features + 1) features. The first feature is the index of the sample\n        in the data and the remaining features are the class index.\n\n        # Arguments\n            samples_per_class: Number of samples per class in the dataset\n            n_classes: Number of distinct classes in the dataset\n            n_features: Number of extra features each sample should have.\n        \"\"\"", "\n", "self", ".", "samples_per_class", "=", "samples_per_class", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_features", "=", "n_features", "\n", "\n", "# Create a dataframe to be consistent with other Datasets", "\n", "self", ".", "df", "=", "pd", ".", "DataFrame", "(", "{", "\n", "'class_id'", ":", "[", "i", "%", "self", ".", "n_classes", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", "]", "\n", "}", ")", "\n", "self", ".", "df", "=", "self", ".", "df", ".", "assign", "(", "id", "=", "self", ".", "df", ".", "index", ".", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.DummyDataset.__len__": [[530, 532], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "samples_per_class", "*", "self", ".", "n_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.None.datasets.DummyDataset.__getitem__": [[533, 536], ["numpy.array", "float"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "class_id", "=", "item", "%", "self", ".", "n_classes", "\n", "return", "np", ".", "array", "(", "[", "item", "]", "+", "[", "class_id", "]", "*", "self", ".", "n_features", ",", "dtype", "=", "np", ".", "float", ")", ",", "float", "(", "class_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.additional_transforms.ImageJitter.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transformdict", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "[", "(", "transformtypedict", "[", "k", "]", ",", "transformdict", "[", "k", "]", ")", "for", "k", "in", "transformdict", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.additional_transforms.ImageJitter.__call__": [[20, 29], ["torch.rand", "enumerate", "len", "transformer().enhance().convert", "transformer().enhance", "transformer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "out", "=", "img", "\n", "randtensor", "=", "torch", ".", "rand", "(", "len", "(", "self", ".", "transforms", ")", ")", "\n", "\n", "for", "i", ",", "(", "transformer", ",", "alpha", ")", "in", "enumerate", "(", "self", ".", "transforms", ")", ":", "\n", "            ", "r", "=", "alpha", "*", "(", "randtensor", "[", "i", "]", "*", "2.0", "-", "1.0", ")", "+", "1", "\n", "out", "=", "transformer", "(", "out", ")", ".", "enhance", "(", "r", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.CustomDatasetFromImages.__init__": [[20, 60], ["torchvision.ToTensor", "pandas.read_csv", "numpy.asarray", "numpy.asarray", "zip", "len", "numpy.asarray", "numpy.asarray", "label.split.split.split", "Chest_few_shot.CustomDatasetFromImages.labels.append", "Chest_few_shot.CustomDatasetFromImages.image_name.append", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "csv_path", "=", "ChestX_path", "+", "\"/Data_Entry_2017.csv\"", ",", "image_path", "=", "ChestX_path", "+", "\"/images/\"", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            csv_path (string): path to csv file\n            img_path (string): path to the folder where images are\n            transform: pytorch transforms for transforms and tensor conversion\n        \"\"\"", "\n", "self", ".", "img_path", "=", "image_path", "\n", "self", ".", "csv_path", "=", "csv_path", "\n", "self", ".", "used_labels", "=", "[", "\"Atelectasis\"", ",", "\"Cardiomegaly\"", ",", "\"Effusion\"", ",", "\"Infiltration\"", ",", "\"Mass\"", ",", "\"Nodule\"", ",", "\"Pneumonia\"", ",", "\"Pneumothorax\"", "]", "\n", "\n", "self", ".", "labels_maps", "=", "{", "\"Atelectasis\"", ":", "0", ",", "\"Cardiomegaly\"", ":", "1", ",", "\"Effusion\"", ":", "2", ",", "\"Infiltration\"", ":", "3", ",", "\"Mass\"", ":", "4", ",", "\"Nodule\"", ":", "5", ",", "\"Pneumothorax\"", ":", "6", "}", "\n", "\n", "labels_set", "=", "[", "]", "\n", "\n", "# Transforms", "\n", "self", ".", "to_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "# Read the csv file", "\n", "self", ".", "data_info", "=", "pd", ".", "read_csv", "(", "csv_path", ",", "skiprows", "=", "[", "0", "]", ",", "header", "=", "None", ")", "\n", "\n", "# First column contains the image paths", "\n", "self", ".", "image_name_all", "=", "np", ".", "asarray", "(", "self", ".", "data_info", ".", "iloc", "[", ":", ",", "0", "]", ")", "\n", "self", ".", "labels_all", "=", "np", ".", "asarray", "(", "self", ".", "data_info", ".", "iloc", "[", ":", ",", "1", "]", ")", "\n", "\n", "self", ".", "image_name", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "\n", "\n", "for", "name", ",", "label", "in", "zip", "(", "self", ".", "image_name_all", ",", "self", ".", "labels_all", ")", ":", "\n", "            ", "label", "=", "label", ".", "split", "(", "\"|\"", ")", "\n", "\n", "if", "len", "(", "label", ")", "==", "1", "and", "label", "[", "0", "]", "!=", "\"No Finding\"", "and", "label", "[", "0", "]", "!=", "\"Pneumonia\"", "and", "label", "[", "0", "]", "in", "self", ".", "used_labels", ":", "\n", "                ", "self", ".", "labels", ".", "append", "(", "self", ".", "labels_maps", "[", "label", "[", "0", "]", "]", ")", "\n", "self", ".", "image_name", ".", "append", "(", "name", ")", "\n", "\n", "", "", "self", ".", "data_len", "=", "len", "(", "self", ".", "image_name", ")", "\n", "\n", "self", ".", "image_name", "=", "np", ".", "asarray", "(", "self", ".", "image_name", ")", "\n", "self", ".", "labels", "=", "np", ".", "asarray", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.CustomDatasetFromImages.__getitem__": [[61, 76], ["PIL.Image.open().resize().convert", "PIL.Image.open().resize().convert.load", "PIL.Image.open().resize", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# Get image name from the pandas df", "\n", "        ", "single_image_name", "=", "self", ".", "image_name", "[", "index", "]", "\n", "\n", "# Open image", "\n", "img_as_img", "=", "Image", ".", "open", "(", "self", ".", "img_path", "+", "single_image_name", ")", ".", "resize", "(", "(", "256", ",", "256", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img_as_img", ".", "load", "(", ")", "\n", "\n", "# Transform image to tensor", "\n", "#img_as_tensor = self.to_tensor(img_as_img)", "\n", "\n", "# Get label(class) of the image based on the cropped pandas column", "\n", "single_image_label", "=", "self", ".", "labels", "[", "index", "]", "\n", "\n", "return", "(", "img_as_img", ",", "single_image_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.CustomDatasetFromImages.__len__": [[77, 79], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_len", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.SimpleDataset.__init__": [[83, 98], ["Chest_few_shot.CustomDatasetFromImages", "enumerate", "Chest_few_shot.SimpleDataset.meta[].append", "Chest_few_shot.SimpleDataset.meta[].append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform", ",", "target_transform", "=", "identity", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "self", ".", "meta", "=", "{", "}", "\n", "\n", "self", ".", "meta", "[", "'image_names'", "]", "=", "[", "]", "\n", "self", ".", "meta", "[", "'image_labels'", "]", "=", "[", "]", "\n", "\n", "\n", "d", "=", "CustomDatasetFromImages", "(", ")", "\n", "\n", "for", "i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "d", ")", ":", "\n", "            ", "self", ".", "meta", "[", "'image_names'", "]", ".", "append", "(", "data", ")", "\n", "self", ".", "meta", "[", "'image_labels'", "]", ".", "append", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.SimpleDataset.__getitem__": [[99, 105], ["Chest_few_shot.SimpleDataset.transform", "Chest_few_shot.SimpleDataset.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "\n", "        ", "img", "=", "self", ".", "transform", "(", "self", ".", "meta", "[", "'image_names'", "]", "[", "i", "]", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "meta", "[", "'image_labels'", "]", "[", "i", "]", ")", "\n", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.SimpleDataset.__len__": [[106, 108], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "meta", "[", "'image_names'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.SetDataset.__init__": [[111, 139], ["range", "Chest_few_shot.CustomDatasetFromImages", "enumerate", "Chest_few_shot.SetDataset.sub_meta.items", "dict", "Chest_few_shot.SetDataset.sub_meta[].append", "Chest_few_shot.SubDataset", "Chest_few_shot.SetDataset.sub_dataloader.append", "torch.utils.data.DataLoader"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "transform", ")", ":", "\n", "\n", "        ", "self", ".", "sub_meta", "=", "{", "}", "\n", "self", ".", "cl_list", "=", "range", "(", "7", ")", "\n", "\n", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "            ", "self", ".", "sub_meta", "[", "cl", "]", "=", "[", "]", "\n", "\n", "", "d", "=", "CustomDatasetFromImages", "(", ")", "\n", "\n", "for", "i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "d", ")", ":", "\n", "            ", "self", ".", "sub_meta", "[", "label", "]", ".", "append", "(", "data", ")", "\n", "\n", "", "for", "key", ",", "item", "in", "self", ".", "sub_meta", ".", "items", "(", ")", ":", "\n", "            ", "pass", "\n", "#print (len(self.sub_meta[key]))", "\n", "\n", "", "self", ".", "sub_dataloader", "=", "[", "]", "\n", "sub_data_loader_params", "=", "dict", "(", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "0", ",", "#use main thread only or may receive multiple batches", "\n", "pin_memory", "=", "False", ")", "\n", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "#print (cl)", "\n", "            ", "sub_dataset", "=", "SubDataset", "(", "self", ".", "sub_meta", "[", "cl", "]", ",", "cl", ",", "transform", "=", "transform", ")", "\n", "self", ".", "sub_dataloader", ".", "append", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "sub_dataset", ",", "**", "sub_data_loader_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.SetDataset.__getitem__": [[140, 142], ["next", "iter"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "next", "(", "iter", "(", "self", ".", "sub_dataloader", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.SetDataset.__len__": [[143, 145], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sub_dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.SubDataset.__init__": [[147, 152], ["torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sub_meta", ",", "cl", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ",", "target_transform", "=", "identity", ")", ":", "\n", "        ", "self", ".", "sub_meta", "=", "sub_meta", "\n", "self", ".", "cl", "=", "cl", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.SubDataset.__getitem__": [[153, 158], ["Chest_few_shot.SubDataset.transform", "Chest_few_shot.SubDataset.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "\n", "        ", "img", "=", "self", ".", "transform", "(", "self", ".", "sub_meta", "[", "i", "]", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "cl", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.SubDataset.__len__": [[159, 161], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sub_meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.EpisodicBatchSampler.__init__": [[163, 167], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "n_way", ",", "n_episodes", ")", ":", "\n", "        ", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_episodes", "=", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.EpisodicBatchSampler.__len__": [[168, 170], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.EpisodicBatchSampler.__iter__": [[171, 174], ["range", "torch.randperm"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "n_episodes", ")", ":", "\n", "            ", "yield", "torch", ".", "randperm", "(", "self", ".", "n_classes", ")", "[", ":", "self", ".", "n_way", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.TransformLoader.__init__": [[176, 183], ["dict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "\n", "normalize_param", "=", "dict", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "jitter_param", "=", "dict", "(", "Brightness", "=", "0.4", ",", "Contrast", "=", "0.4", ",", "Color", "=", "0.4", ")", ")", ":", "\n", "\n", "        ", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "normalize_param", "=", "normalize_param", "\n", "self", ".", "jitter_param", "=", "jitter_param", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.TransformLoader.parse_transform": [[184, 202], ["getattr", "cdfsl.ImageJitter", "cdfsl.ImageJitter.", "cdfsl.ImageJitter.", "cdfsl.ImageJitter.", "cdfsl.ImageJitter.", "cdfsl.ImageJitter.", "int", "int"], "methods", ["None"], ["", "def", "parse_transform", "(", "self", ",", "transform_type", ")", ":", "\n", "        ", "if", "transform_type", "==", "'ImageJitter'", ":", "\n", "            ", "method", "=", "add_transforms", ".", "ImageJitter", "(", "self", ".", "jitter_param", ")", "\n", "return", "method", "\n", "", "method", "=", "getattr", "(", "transforms", ",", "transform_type", ")", "\n", "\n", "if", "transform_type", "==", "'RandomSizedCrop'", ":", "\n", "            ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "\n", "", "elif", "transform_type", "==", "'CenterCrop'", ":", "\n", "            ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "'Scale'", ":", "\n", "\n", "            ", "return", "method", "(", "[", "int", "(", "self", ".", "image_size", "*", "1.15", ")", ",", "int", "(", "self", ".", "image_size", "*", "1.15", ")", "]", ")", "\n", "", "elif", "transform_type", "==", "'Normalize'", ":", "\n", "            ", "return", "method", "(", "**", "self", ".", "normalize_param", ")", "\n", "", "else", ":", "\n", "            ", "return", "method", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.TransformLoader.get_composed_transform": [[203, 212], ["torchvision.Compose", "Chest_few_shot.TransformLoader.parse_transform"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.TransformLoader.parse_transform"], ["", "", "def", "get_composed_transform", "(", "self", ",", "aug", "=", "False", ")", ":", "\n", "        ", "if", "aug", ":", "\n", "            ", "transform_list", "=", "[", "'RandomSizedCrop'", ",", "'ImageJitter'", ",", "'RandomHorizontalFlip'", ",", "'ToTensor'", ",", "'Normalize'", "]", "\n", "", "else", ":", "\n", "            ", "transform_list", "=", "[", "'Scale'", ",", "'CenterCrop'", ",", "'ToTensor'", ",", "'Normalize'", "]", "\n", "\n", "", "transform_funcs", "=", "[", "self", ".", "parse_transform", "(", "x", ")", "for", "x", "in", "transform_list", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_funcs", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.DataManager.get_data_loader": [[214, 217], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.SimpleDataManager.__init__": [[219, 223], ["object.__init__", "Chest_few_shot.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "SimpleDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.SimpleDataManager.get_data_loader": [[224, 232], ["Chest_few_shot.SimpleDataManager.trans_loader.get_composed_transform", "Chest_few_shot.SimpleDataset", "dict", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "self", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "        ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "dataset", "=", "SimpleDataset", "(", "transform", ")", "\n", "\n", "data_loader_params", "=", "dict", "(", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "12", ",", "pin_memory", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.SetDataManager.__init__": [[234, 242], ["object.__init__", "Chest_few_shot.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "n_way", "=", "5", ",", "n_support", "=", "5", ",", "n_query", "=", "16", ",", "n_eposide", "=", "100", ")", ":", "\n", "        ", "super", "(", "SetDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "batch_size", "=", "n_support", "+", "n_query", "\n", "self", ".", "n_eposide", "=", "n_eposide", "\n", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.Chest_few_shot.SetDataManager.get_data_loader": [[243, 250], ["Chest_few_shot.SetDataManager.trans_loader.get_composed_transform", "Chest_few_shot.SetDataset", "Chest_few_shot.EpisodicBatchSampler", "dict", "torch.utils.data.DataLoader", "len"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "self", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "        ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "dataset", "=", "SetDataset", "(", "self", ".", "batch_size", ",", "transform", ")", "\n", "sampler", "=", "EpisodicBatchSampler", "(", "len", "(", "dataset", ")", ",", "self", ".", "n_way", ",", "self", ".", "n_eposide", ")", "\n", "data_loader_params", "=", "dict", "(", "batch_sampler", "=", "sampler", ",", "num_workers", "=", "12", ",", "pin_memory", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.SimpleDataset.__init__": [[22, 36], ["torchvision.datasets.ImageFolder", "enumerate", "EuroSAT_few_shot.SimpleDataset.meta[].append", "EuroSAT_few_shot.SimpleDataset.meta[].append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform", ",", "target_transform", "=", "identity", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "self", ".", "meta", "=", "{", "}", "\n", "\n", "self", ".", "meta", "[", "'image_names'", "]", "=", "[", "]", "\n", "self", ".", "meta", "[", "'image_labels'", "]", "=", "[", "]", "\n", "\n", "d", "=", "ImageFolder", "(", "EuroSAT_path", ")", "\n", "\n", "for", "i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "d", ")", ":", "\n", "            ", "self", ".", "meta", "[", "'image_names'", "]", ".", "append", "(", "data", ")", "\n", "self", ".", "meta", "[", "'image_labels'", "]", ".", "append", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.SimpleDataset.__getitem__": [[37, 43], ["EuroSAT_few_shot.SimpleDataset.transform", "EuroSAT_few_shot.SimpleDataset.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "\n", "        ", "img", "=", "self", ".", "transform", "(", "self", ".", "meta", "[", "'image_names'", "]", "[", "i", "]", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "meta", "[", "'image_labels'", "]", "[", "i", "]", ")", "\n", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.SimpleDataset.__len__": [[44, 46], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "meta", "[", "'image_names'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.SetDataset.__init__": [[49, 74], ["range", "torchvision.datasets.ImageFolder", "enumerate", "EuroSAT_few_shot.SetDataset.sub_meta.items", "dict", "EuroSAT_few_shot.SetDataset.sub_meta[].append", "EuroSAT_few_shot.SubDataset", "EuroSAT_few_shot.SetDataset.sub_dataloader.append", "torch.utils.data.DataLoader"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "transform", ")", ":", "\n", "\n", "        ", "self", ".", "sub_meta", "=", "{", "}", "\n", "self", ".", "cl_list", "=", "range", "(", "10", ")", "\n", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "            ", "self", ".", "sub_meta", "[", "cl", "]", "=", "[", "]", "\n", "\n", "", "d", "=", "ImageFolder", "(", "EuroSAT_path", ")", "\n", "\n", "for", "i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "d", ")", ":", "\n", "            ", "self", ".", "sub_meta", "[", "label", "]", ".", "append", "(", "data", ")", "\n", "\n", "", "for", "key", ",", "item", "in", "self", ".", "sub_meta", ".", "items", "(", ")", ":", "\n", "            ", "pass", "\n", "#print (len(self.sub_meta[key]))", "\n", "\n", "", "self", ".", "sub_dataloader", "=", "[", "]", "\n", "sub_data_loader_params", "=", "dict", "(", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "0", ",", "#use main thread only or may receive multiple batches", "\n", "pin_memory", "=", "False", ")", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "            ", "sub_dataset", "=", "SubDataset", "(", "self", ".", "sub_meta", "[", "cl", "]", ",", "cl", ",", "transform", "=", "transform", ")", "\n", "self", ".", "sub_dataloader", ".", "append", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "sub_dataset", ",", "**", "sub_data_loader_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.SetDataset.__getitem__": [[75, 77], ["next", "iter"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "next", "(", "iter", "(", "self", ".", "sub_dataloader", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.SetDataset.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sub_dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.SubDataset.__init__": [[82, 87], ["torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sub_meta", ",", "cl", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ",", "target_transform", "=", "identity", ")", ":", "\n", "        ", "self", ".", "sub_meta", "=", "sub_meta", "\n", "self", ".", "cl", "=", "cl", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.SubDataset.__getitem__": [[88, 93], ["EuroSAT_few_shot.SubDataset.transform", "EuroSAT_few_shot.SubDataset.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "\n", "        ", "img", "=", "self", ".", "transform", "(", "self", ".", "sub_meta", "[", "i", "]", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "cl", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.SubDataset.__len__": [[94, 96], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sub_meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.EpisodicBatchSampler.__init__": [[98, 102], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "n_way", ",", "n_episodes", ")", ":", "\n", "        ", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_episodes", "=", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.EpisodicBatchSampler.__len__": [[103, 105], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.EpisodicBatchSampler.__iter__": [[106, 109], ["range", "torch.randperm"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "n_episodes", ")", ":", "\n", "            ", "yield", "torch", ".", "randperm", "(", "self", ".", "n_classes", ")", "[", ":", "self", ".", "n_way", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.TransformLoader.__init__": [[111, 117], ["dict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "\n", "normalize_param", "=", "dict", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "jitter_param", "=", "dict", "(", "Brightness", "=", "0.4", ",", "Contrast", "=", "0.4", ",", "Color", "=", "0.4", ")", ")", ":", "\n", "        ", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "normalize_param", "=", "normalize_param", "\n", "self", ".", "jitter_param", "=", "jitter_param", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.TransformLoader.parse_transform": [[118, 133], ["getattr", "cdfsl.ImageJitter", "cdfsl.ImageJitter.", "cdfsl.ImageJitter.", "cdfsl.ImageJitter.", "cdfsl.ImageJitter.", "cdfsl.ImageJitter.", "int", "int"], "methods", ["None"], ["", "def", "parse_transform", "(", "self", ",", "transform_type", ")", ":", "\n", "        ", "if", "transform_type", "==", "'ImageJitter'", ":", "\n", "            ", "method", "=", "add_transforms", ".", "ImageJitter", "(", "self", ".", "jitter_param", ")", "\n", "return", "method", "\n", "", "method", "=", "getattr", "(", "transforms", ",", "transform_type", ")", "\n", "if", "transform_type", "==", "'RandomSizedCrop'", ":", "\n", "            ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "'CenterCrop'", ":", "\n", "            ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "'Scale'", ":", "\n", "            ", "return", "method", "(", "[", "int", "(", "self", ".", "image_size", "*", "1.15", ")", ",", "int", "(", "self", ".", "image_size", "*", "1.15", ")", "]", ")", "\n", "", "elif", "transform_type", "==", "'Normalize'", ":", "\n", "            ", "return", "method", "(", "**", "self", ".", "normalize_param", ")", "\n", "", "else", ":", "\n", "            ", "return", "method", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.TransformLoader.get_composed_transform": [[134, 143], ["torchvision.Compose", "EuroSAT_few_shot.TransformLoader.parse_transform"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.TransformLoader.parse_transform"], ["", "", "def", "get_composed_transform", "(", "self", ",", "aug", "=", "False", ")", ":", "\n", "        ", "if", "aug", ":", "\n", "            ", "transform_list", "=", "[", "'RandomSizedCrop'", ",", "'ImageJitter'", ",", "'RandomHorizontalFlip'", ",", "'ToTensor'", ",", "'Normalize'", "]", "\n", "", "else", ":", "\n", "            ", "transform_list", "=", "[", "'Scale'", ",", "'CenterCrop'", ",", "'ToTensor'", ",", "'Normalize'", "]", "\n", "\n", "", "transform_funcs", "=", "[", "self", ".", "parse_transform", "(", "x", ")", "for", "x", "in", "transform_list", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_funcs", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.DataManager.get_data_loader": [[145, 148], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.SimpleDataManager.__init__": [[150, 154], ["object.__init__", "EuroSAT_few_shot.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "SimpleDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.SimpleDataManager.get_data_loader": [[155, 163], ["EuroSAT_few_shot.SimpleDataManager.trans_loader.get_composed_transform", "EuroSAT_few_shot.SimpleDataset", "dict", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "self", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "        ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "dataset", "=", "SimpleDataset", "(", "transform", ")", "\n", "\n", "data_loader_params", "=", "dict", "(", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "12", ",", "pin_memory", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.SetDataManager.__init__": [[165, 173], ["object.__init__", "EuroSAT_few_shot.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "n_way", "=", "5", ",", "n_support", "=", "5", ",", "n_query", "=", "16", ",", "n_eposide", "=", "100", ")", ":", "\n", "        ", "super", "(", "SetDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "batch_size", "=", "n_support", "+", "n_query", "\n", "self", ".", "n_eposide", "=", "n_eposide", "\n", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.EuroSAT_few_shot.SetDataManager.get_data_loader": [[174, 181], ["EuroSAT_few_shot.SetDataManager.trans_loader.get_composed_transform", "EuroSAT_few_shot.SetDataset", "EuroSAT_few_shot.EpisodicBatchSampler", "dict", "torch.utils.data.DataLoader", "len"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "self", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "        ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "dataset", "=", "SetDataset", "(", "self", ".", "batch_size", ",", "transform", ")", "\n", "sampler", "=", "EpisodicBatchSampler", "(", "len", "(", "dataset", ")", ",", "self", ".", "n_way", ",", "self", ".", "n_eposide", ")", "\n", "data_loader_params", "=", "dict", "(", "batch_sampler", "=", "sampler", ",", "num_workers", "=", "12", ",", "pin_memory", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.CustomDatasetFromImages.__init__": [[20, 43], ["torchvision.ToTensor", "pandas.read_csv", "numpy.asarray", "numpy.asarray", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "csv_path", "=", "ISIC_path", "+", "\"/ISIC2018_Task3_Training_GroundTruth/ISIC2018_Task3_Training_GroundTruth.csv\"", ",", "image_path", "=", "ISIC_path", "+", "\"/ISIC2018_Task3_Training_Input/\"", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            csv_path (string): path to csv file\n            img_path (string): path to the folder where images are\n            transform: pytorch transforms for transforms and tensor conversion\n        \"\"\"", "\n", "self", ".", "img_path", "=", "image_path", "\n", "self", ".", "csv_path", "=", "csv_path", "\n", "\n", "# Transforms", "\n", "self", ".", "to_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "# Read the csv file", "\n", "self", ".", "data_info", "=", "pd", ".", "read_csv", "(", "csv_path", ",", "skiprows", "=", "[", "0", "]", ",", "header", "=", "None", ")", "\n", "\n", "# First column contains the image paths", "\n", "self", ".", "image_name", "=", "np", ".", "asarray", "(", "self", ".", "data_info", ".", "iloc", "[", ":", ",", "0", "]", ")", "\n", "\n", "self", ".", "labels", "=", "np", ".", "asarray", "(", "self", ".", "data_info", ".", "iloc", "[", ":", ",", "1", ":", "]", ")", "\n", "self", ".", "labels", "=", "(", "self", ".", "labels", "!=", "0", ")", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "# Calculate len", "\n", "self", ".", "data_len", "=", "len", "(", "self", ".", "data_info", ".", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.CustomDatasetFromImages.__getitem__": [[44, 58], ["PIL.Image.open", "PIL.Image.open.copy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# Get image name from the pandas df", "\n", "        ", "single_image_name", "=", "self", ".", "image_name", "[", "index", "]", "\n", "# Open image", "\n", "temp", "=", "Image", ".", "open", "(", "self", ".", "img_path", "+", "single_image_name", "+", "\".jpg\"", ")", "\n", "\n", "img_as_img", "=", "temp", ".", "copy", "(", ")", "\n", "# Transform image to tensor", "\n", "#img_as_tensor = self.to_tensor(img_as_img)", "\n", "\n", "# Get label(class) of the image based on the cropped pandas column", "\n", "single_image_label", "=", "self", ".", "labels", "[", "index", "]", "\n", "\n", "return", "(", "img_as_img", ",", "single_image_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.CustomDatasetFromImages.__len__": [[59, 61], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_len", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.SimpleDataset.__init__": [[65, 79], ["ISIC_few_shot.CustomDatasetFromImages", "enumerate", "ISIC_few_shot.SimpleDataset.meta[].append", "ISIC_few_shot.SimpleDataset.meta[].append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform", ",", "target_transform", "=", "identity", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "self", ".", "meta", "=", "{", "}", "\n", "\n", "self", ".", "meta", "[", "'image_names'", "]", "=", "[", "]", "\n", "self", ".", "meta", "[", "'image_labels'", "]", "=", "[", "]", "\n", "\n", "\n", "d", "=", "CustomDatasetFromImages", "(", ")", "\n", "for", "i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "d", ")", ":", "\n", "            ", "self", ".", "meta", "[", "'image_names'", "]", ".", "append", "(", "data", ")", "\n", "self", ".", "meta", "[", "'image_labels'", "]", ".", "append", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.SimpleDataset.__getitem__": [[80, 86], ["ISIC_few_shot.SimpleDataset.transform", "ISIC_few_shot.SimpleDataset.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "\n", "        ", "img", "=", "self", ".", "transform", "(", "self", ".", "meta", "[", "'image_names'", "]", "[", "i", "]", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "meta", "[", "'image_labels'", "]", "[", "i", "]", ")", "\n", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.SimpleDataset.__len__": [[87, 89], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "meta", "[", "'image_names'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.SetDataset.__init__": [[92, 118], ["range", "ISIC_few_shot.CustomDatasetFromImages", "enumerate", "ISIC_few_shot.SetDataset.sub_meta.items", "dict", "ISIC_few_shot.SetDataset.sub_meta[].append", "ISIC_few_shot.SubDataset", "ISIC_few_shot.SetDataset.sub_dataloader.append", "torch.utils.data.DataLoader"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "transform", ")", ":", "\n", "\n", "        ", "self", ".", "sub_meta", "=", "{", "}", "\n", "self", ".", "cl_list", "=", "range", "(", "7", ")", "\n", "\n", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "            ", "self", ".", "sub_meta", "[", "cl", "]", "=", "[", "]", "\n", "\n", "", "d", "=", "CustomDatasetFromImages", "(", ")", "\n", "\n", "for", "i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "d", ")", ":", "\n", "            ", "self", ".", "sub_meta", "[", "label", "]", ".", "append", "(", "data", ")", "\n", "\n", "", "for", "key", ",", "item", "in", "self", ".", "sub_meta", ".", "items", "(", ")", ":", "\n", "            ", "pass", "\n", "#print (len(self.sub_meta[key]))", "\n", "\n", "", "self", ".", "sub_dataloader", "=", "[", "]", "\n", "sub_data_loader_params", "=", "dict", "(", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "0", ",", "#use main thread only or may receive multiple batches", "\n", "pin_memory", "=", "False", ")", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "            ", "sub_dataset", "=", "SubDataset", "(", "self", ".", "sub_meta", "[", "cl", "]", ",", "cl", ",", "transform", "=", "transform", ")", "\n", "self", ".", "sub_dataloader", ".", "append", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "sub_dataset", ",", "**", "sub_data_loader_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.SetDataset.__getitem__": [[119, 121], ["next", "iter"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "next", "(", "iter", "(", "self", ".", "sub_dataloader", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.SetDataset.__len__": [[122, 124], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sub_dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.SubDataset.__init__": [[126, 131], ["torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sub_meta", ",", "cl", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ",", "target_transform", "=", "identity", ")", ":", "\n", "        ", "self", ".", "sub_meta", "=", "sub_meta", "\n", "self", ".", "cl", "=", "cl", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.SubDataset.__getitem__": [[132, 137], ["ISIC_few_shot.SubDataset.transform", "ISIC_few_shot.SubDataset.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "\n", "        ", "img", "=", "self", ".", "transform", "(", "self", ".", "sub_meta", "[", "i", "]", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "cl", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.SubDataset.__len__": [[138, 140], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sub_meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.EpisodicBatchSampler.__init__": [[142, 146], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "n_way", ",", "n_episodes", ")", ":", "\n", "        ", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_episodes", "=", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.EpisodicBatchSampler.__len__": [[147, 149], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.EpisodicBatchSampler.__iter__": [[150, 153], ["range", "torch.randperm"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "n_episodes", ")", ":", "\n", "            ", "yield", "torch", ".", "randperm", "(", "self", ".", "n_classes", ")", "[", ":", "self", ".", "n_way", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.TransformLoader.__init__": [[155, 161], ["dict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "\n", "normalize_param", "=", "dict", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "jitter_param", "=", "dict", "(", "Brightness", "=", "0.4", ",", "Contrast", "=", "0.4", ",", "Color", "=", "0.4", ")", ")", ":", "\n", "        ", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "normalize_param", "=", "normalize_param", "\n", "self", ".", "jitter_param", "=", "jitter_param", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.TransformLoader.parse_transform": [[162, 177], ["getattr", "cdfsl.ImageJitter", "cdfsl.ImageJitter.", "cdfsl.ImageJitter.", "cdfsl.ImageJitter.", "cdfsl.ImageJitter.", "cdfsl.ImageJitter.", "int", "int"], "methods", ["None"], ["", "def", "parse_transform", "(", "self", ",", "transform_type", ")", ":", "\n", "        ", "if", "transform_type", "==", "'ImageJitter'", ":", "\n", "            ", "method", "=", "add_transforms", ".", "ImageJitter", "(", "self", ".", "jitter_param", ")", "\n", "return", "method", "\n", "", "method", "=", "getattr", "(", "transforms", ",", "transform_type", ")", "\n", "if", "transform_type", "==", "'RandomSizedCrop'", ":", "\n", "            ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "'CenterCrop'", ":", "\n", "            ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "'Scale'", ":", "\n", "            ", "return", "method", "(", "[", "int", "(", "self", ".", "image_size", "*", "1.15", ")", ",", "int", "(", "self", ".", "image_size", "*", "1.15", ")", "]", ")", "\n", "", "elif", "transform_type", "==", "'Normalize'", ":", "\n", "            ", "return", "method", "(", "**", "self", ".", "normalize_param", ")", "\n", "", "else", ":", "\n", "            ", "return", "method", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.TransformLoader.get_composed_transform": [[178, 187], ["torchvision.Compose", "ISIC_few_shot.TransformLoader.parse_transform"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.TransformLoader.parse_transform"], ["", "", "def", "get_composed_transform", "(", "self", ",", "aug", "=", "False", ")", ":", "\n", "        ", "if", "aug", ":", "\n", "            ", "transform_list", "=", "[", "'RandomSizedCrop'", ",", "'ImageJitter'", ",", "'RandomHorizontalFlip'", ",", "'ToTensor'", ",", "'Normalize'", "]", "\n", "", "else", ":", "\n", "            ", "transform_list", "=", "[", "'Scale'", ",", "'CenterCrop'", ",", "'ToTensor'", ",", "'Normalize'", "]", "\n", "\n", "", "transform_funcs", "=", "[", "self", ".", "parse_transform", "(", "x", ")", "for", "x", "in", "transform_list", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_funcs", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.DataManager.get_data_loader": [[189, 192], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.SimpleDataManager.__init__": [[194, 198], ["object.__init__", "ISIC_few_shot.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "SimpleDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.SimpleDataManager.get_data_loader": [[199, 207], ["ISIC_few_shot.SimpleDataManager.trans_loader.get_composed_transform", "ISIC_few_shot.SimpleDataset", "dict", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "self", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "        ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "dataset", "=", "SimpleDataset", "(", "transform", ")", "\n", "\n", "data_loader_params", "=", "dict", "(", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "12", ",", "pin_memory", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.SetDataManager.__init__": [[209, 217], ["object.__init__", "ISIC_few_shot.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "n_way", "=", "5", ",", "n_support", "=", "5", ",", "n_query", "=", "16", ",", "n_eposide", "=", "100", ")", ":", "\n", "        ", "super", "(", "SetDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "batch_size", "=", "n_support", "+", "n_query", "\n", "self", ".", "n_eposide", "=", "n_eposide", "\n", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.ISIC_few_shot.SetDataManager.get_data_loader": [[218, 225], ["ISIC_few_shot.SetDataManager.trans_loader.get_composed_transform", "ISIC_few_shot.SetDataset", "ISIC_few_shot.EpisodicBatchSampler", "dict", "torch.utils.data.DataLoader", "len"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "self", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "        ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "dataset", "=", "SetDataset", "(", "self", ".", "batch_size", ",", "transform", ")", "\n", "sampler", "=", "EpisodicBatchSampler", "(", "len", "(", "dataset", ")", ",", "self", ".", "n_way", ",", "self", ".", "n_eposide", ")", "\n", "data_loader_params", "=", "dict", "(", "batch_sampler", "=", "sampler", ",", "num_workers", "=", "12", ",", "pin_memory", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SimpleDataset.__init__": [[22, 37], ["torchvision.datasets.ImageFolder", "enumerate", "CropDisease_few_shot.SimpleDataset.meta[].append", "CropDisease_few_shot.SimpleDataset.meta[].append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform", ",", "target_transform", "=", "identity", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "self", ".", "meta", "=", "{", "}", "\n", "\n", "self", ".", "meta", "[", "'image_names'", "]", "=", "[", "]", "\n", "self", ".", "meta", "[", "'image_labels'", "]", "=", "[", "]", "\n", "\n", "\n", "d", "=", "ImageFolder", "(", "CropDisease_path", "+", "\"/dataset/train/\"", ")", "\n", "\n", "for", "i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "d", ")", ":", "\n", "            ", "self", ".", "meta", "[", "'image_names'", "]", ".", "append", "(", "data", ")", "\n", "self", ".", "meta", "[", "'image_labels'", "]", ".", "append", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SimpleDataset.__getitem__": [[38, 44], ["CropDisease_few_shot.SimpleDataset.transform", "CropDisease_few_shot.SimpleDataset.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "\n", "        ", "img", "=", "self", ".", "transform", "(", "self", ".", "meta", "[", "'image_names'", "]", "[", "i", "]", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "meta", "[", "'image_labels'", "]", "[", "i", "]", ")", "\n", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SimpleDataset.__len__": [[45, 47], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "meta", "[", "'image_names'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataset.__init__": [[50, 77], ["range", "torchvision.datasets.ImageFolder", "enumerate", "CropDisease_few_shot.SetDataset.sub_meta.items", "dict", "CropDisease_few_shot.SetDataset.sub_meta[].append", "CropDisease_few_shot.SubDataset", "CropDisease_few_shot.SetDataset.sub_dataloader.append", "torch.utils.data.DataLoader"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "transform", ")", ":", "\n", "\n", "        ", "self", ".", "sub_meta", "=", "{", "}", "\n", "self", ".", "cl_list", "=", "range", "(", "38", ")", "\n", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "            ", "self", ".", "sub_meta", "[", "cl", "]", "=", "[", "]", "\n", "\n", "", "d", "=", "ImageFolder", "(", "CropDisease_path", "+", "\"/dataset/train/\"", ")", "\n", "\n", "\n", "for", "i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "d", ")", ":", "\n", "            ", "self", ".", "sub_meta", "[", "label", "]", ".", "append", "(", "data", ")", "\n", "\n", "\n", "", "for", "key", ",", "item", "in", "self", ".", "sub_meta", ".", "items", "(", ")", ":", "\n", "            ", "pass", "\n", "#print (len(self.sub_meta[key]))", "\n", "\n", "", "self", ".", "sub_dataloader", "=", "[", "]", "\n", "sub_data_loader_params", "=", "dict", "(", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "0", ",", "#use main thread only or may receive multiple batches", "\n", "pin_memory", "=", "False", ")", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "            ", "sub_dataset", "=", "SubDataset", "(", "self", ".", "sub_meta", "[", "cl", "]", ",", "cl", ",", "transform", "=", "transform", ")", "\n", "self", ".", "sub_dataloader", ".", "append", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "sub_dataset", ",", "**", "sub_data_loader_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataset.__getitem__": [[78, 80], ["next", "iter"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "next", "(", "iter", "(", "self", ".", "sub_dataloader", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataset.__len__": [[81, 83], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sub_dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SubDataset.__init__": [[85, 90], ["torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sub_meta", ",", "cl", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ",", "target_transform", "=", "identity", ")", ":", "\n", "        ", "self", ".", "sub_meta", "=", "sub_meta", "\n", "self", ".", "cl", "=", "cl", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SubDataset.__getitem__": [[91, 96], ["CropDisease_few_shot.SubDataset.transform", "CropDisease_few_shot.SubDataset.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "\n", "        ", "img", "=", "self", ".", "transform", "(", "self", ".", "sub_meta", "[", "i", "]", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "cl", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SubDataset.__len__": [[97, 99], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sub_meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.EpisodicBatchSampler.__init__": [[101, 105], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "n_way", ",", "n_episodes", ")", ":", "\n", "        ", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_episodes", "=", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.EpisodicBatchSampler.__len__": [[106, 108], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.EpisodicBatchSampler.__iter__": [[109, 112], ["range", "torch.randperm"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "n_episodes", ")", ":", "\n", "            ", "yield", "torch", ".", "randperm", "(", "self", ".", "n_classes", ")", "[", ":", "self", ".", "n_way", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.TransformLoader.__init__": [[114, 120], ["dict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "\n", "normalize_param", "=", "dict", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "jitter_param", "=", "dict", "(", "Brightness", "=", "0.4", ",", "Contrast", "=", "0.4", ",", "Color", "=", "0.4", ")", ")", ":", "\n", "        ", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "normalize_param", "=", "normalize_param", "\n", "self", ".", "jitter_param", "=", "jitter_param", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.TransformLoader.parse_transform": [[121, 136], ["getattr", "cdfsl.ImageJitter", "cdfsl.ImageJitter.", "cdfsl.ImageJitter.", "cdfsl.ImageJitter.", "cdfsl.ImageJitter.", "cdfsl.ImageJitter.", "int", "int"], "methods", ["None"], ["", "def", "parse_transform", "(", "self", ",", "transform_type", ")", ":", "\n", "        ", "if", "transform_type", "==", "'ImageJitter'", ":", "\n", "            ", "method", "=", "add_transforms", ".", "ImageJitter", "(", "self", ".", "jitter_param", ")", "\n", "return", "method", "\n", "", "method", "=", "getattr", "(", "transforms", ",", "transform_type", ")", "\n", "if", "transform_type", "==", "'RandomSizedCrop'", ":", "\n", "            ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "'CenterCrop'", ":", "\n", "            ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "'Scale'", ":", "\n", "            ", "return", "method", "(", "[", "int", "(", "self", ".", "image_size", "*", "1.15", ")", ",", "int", "(", "self", ".", "image_size", "*", "1.15", ")", "]", ")", "\n", "", "elif", "transform_type", "==", "'Normalize'", ":", "\n", "            ", "return", "method", "(", "**", "self", ".", "normalize_param", ")", "\n", "", "else", ":", "\n", "            ", "return", "method", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.TransformLoader.get_composed_transform": [[137, 146], ["torchvision.Compose", "CropDisease_few_shot.TransformLoader.parse_transform"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.TransformLoader.parse_transform"], ["", "", "def", "get_composed_transform", "(", "self", ",", "aug", "=", "False", ")", ":", "\n", "        ", "if", "aug", ":", "\n", "            ", "transform_list", "=", "[", "'RandomSizedCrop'", ",", "'ImageJitter'", ",", "'RandomHorizontalFlip'", ",", "'ToTensor'", ",", "'Normalize'", "]", "\n", "", "else", ":", "\n", "            ", "transform_list", "=", "[", "'Scale'", ",", "'CenterCrop'", ",", "'ToTensor'", ",", "'Normalize'", "]", "\n", "\n", "", "transform_funcs", "=", "[", "self", ".", "parse_transform", "(", "x", ")", "for", "x", "in", "transform_list", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_funcs", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.DataManager.get_data_loader": [[148, 151], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SimpleDataManager.__init__": [[153, 157], ["object.__init__", "CropDisease_few_shot.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "SimpleDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SimpleDataManager.get_data_loader": [[158, 166], ["CropDisease_few_shot.SimpleDataManager.trans_loader.get_composed_transform", "CropDisease_few_shot.SimpleDataset", "dict", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "self", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "        ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "dataset", "=", "SimpleDataset", "(", "transform", ")", "\n", "\n", "data_loader_params", "=", "dict", "(", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "12", ",", "pin_memory", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__": [[168, 176], ["object.__init__", "CropDisease_few_shot.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "n_way", "=", "5", ",", "n_support", "=", "5", ",", "n_query", "=", "16", ",", "n_eposide", "=", "100", ")", ":", "\n", "        ", "super", "(", "SetDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "batch_size", "=", "n_support", "+", "n_query", "\n", "self", ".", "n_eposide", "=", "n_eposide", "\n", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.get_data_loader": [[177, 184], ["CropDisease_few_shot.SetDataManager.trans_loader.get_composed_transform", "CropDisease_few_shot.SetDataset", "CropDisease_few_shot.EpisodicBatchSampler", "dict", "torch.utils.data.DataLoader", "len"], "methods", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "self", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "        ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "dataset", "=", "SetDataset", "(", "self", ".", "batch_size", ",", "transform", ")", "\n", "sampler", "=", "EpisodicBatchSampler", "(", "len", "(", "dataset", ")", ",", "self", ".", "n_way", ",", "self", ".", "n_eposide", ")", "\n", "data_loader_params", "=", "dict", "(", "batch_sampler", "=", "sampler", ",", "num_workers", "=", "12", ",", "pin_memory", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tomte812_chef.cdfsl.__init__.make_cdfsl_loader": [[3, 21], ["dataset.SetDataManager", "dataset.SetDataManager.get_data_loader", "dataset.lower"], "function", ["home.repos.pwc.inspect_result.tomte812_chef.cdfsl.CropDisease_few_shot.SetDataManager.get_data_loader"], ["def", "make_cdfsl_loader", "(", "dataset", ",", "epoch_len", ",", "n_shot", "=", "1", ",", "k_way", "=", "5", ",", "q_query", "=", "15", ",", "small", "=", "False", ")", ":", "\n", "# conver dataset string to class", "\n", "  ", "dataset", "=", "{", "\n", "'isic'", ":", "ISIC_few_shot", ",", "\n", "'eurosat'", ":", "EuroSAT_few_shot", ",", "\n", "'cropdisease'", ":", "CropDisease_few_shot", ",", "\n", "'chest'", ":", "Chest_few_shot", ",", "\n", "}", "[", "dataset", ".", "lower", "(", ")", "]", "\n", "\n", "data_args", "=", "{", "\n", "'n_way'", ":", "k_way", ",", "\n", "'n_support'", ":", "n_shot", ",", "\n", "'n_query'", ":", "q_query", ",", "\n", "'n_eposide'", ":", "epoch_len", ",", "# FIXME typo!", "\n", "}", "\n", "\n", "datamgr", "=", "dataset", ".", "SetDataManager", "(", "84", "if", "small", "else", "224", ",", "**", "data_args", ")", "\n", "return", "datamgr", ".", "get_data_loader", "(", "aug", "=", "False", ")", "\n", "\n"]]}