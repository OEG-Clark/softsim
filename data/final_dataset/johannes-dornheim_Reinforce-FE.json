{"home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv.__init__": [[57, 119], ["fem_env.FEMEnv.seed", "configparser.ConfigParser", "configparser.ConfigParser.read", "general_config.getboolean", "general_config.getboolean", "general_config.getboolean", "general_config.get", "fem_env.FEMEnv.sim_storage.mkdir", "general_config.getboolean", "pathlib.Path().parent.joinpath", "datetime.datetime.datetime.now().strftime", "pathlib.Path", "logging.info", "pathlib.Path", "pathlib.Path", "pathlib.Path", "datetime.datetime.datetime.now", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv.seed"], ["def", "__init__", "(", "self", ")", ":", "\n", "# current episode", "\n", "        ", "self", ".", "episode", "=", "0", "\n", "# current time-step", "\n", "self", ".", "time_step", "=", "0", "\n", "self", ".", "simulation_failed", "=", "False", "\n", "self", ".", "_init_obsspace", "=", "self", ".", "observation_space", "\n", "# data returned by step(self, action) for 'FEMLogger' or for special purposes like multiobjective-Learning", "\n", "# label prefix conventions to enable generic visualization / agents etc.:", "\n", "# rt: reward-term", "\n", "# ao: actual observation (without artificial additive noise)", "\n", "self", ".", "info", "=", "{", "}", "\n", "\n", "# parameters filled into the solver-template before simulation and used to set the simulation-id", "\n", "self", ".", "simulation_parameters", "=", "{", "}", "\n", "\n", "self", ".", "_curr_fem_results", "=", "None", "\n", "# used for restart-simulations", "\n", "self", ".", "_root_simulation_id", "=", "None", "\n", "self", ".", "_base_simulation_id", "=", "None", "\n", "\n", "# stochastic environment dynamic has to be derived from this", "\n", "self", ".", "_np_random_state", "=", "None", "\n", "self", ".", "seed", "(", ")", "\n", "\n", "self", ".", "viewer", "=", "None", "\n", "self", ".", "curr_img_path", "=", "None", "\n", "self", ".", "img_ts", "=", "-", "1", "\n", "\n", "# read config", "\n", "config", "=", "configparser", ".", "ConfigParser", "(", ")", "\n", "config", ".", "read", "(", "Path", "(", "__file__", ")", ".", "parent", ".", "joinpath", "(", "'config.ini'", ")", ")", "\n", "general_config", "=", "config", "[", "'general parameters'", "]", "\n", "\n", "self", ".", "persistent_simulation", "=", "general_config", ".", "getboolean", "(", "'persistent_simulation'", ")", "\n", "self", ".", "visualize", "=", "general_config", ".", "getboolean", "(", "'visualize'", ")", "\n", "self", ".", "reuse_results", "=", "general_config", ".", "getboolean", "(", "'reuse_results'", ")", "\n", "storage", "=", "general_config", ".", "get", "(", "'simulation_storage'", ",", "fallback", "=", "None", ")", "\n", "\n", "# determine paths for current environment", "\n", "if", "self", ".", "persistent_simulation", ":", "\n", "            ", "if", "self", ".", "SIM_BASIS", "is", "not", "None", ":", "\n", "                ", "sim_str", "=", "self", ".", "SIM_BASIS", "\n", "", "else", ":", "\n", "                ", "sim_str", "=", "self", ".", "ENV_ID", "\n", "\n", "", "if", "storage", "in", "[", "None", ",", "''", ",", "'None'", "]", ":", "\n", "                ", "self", ".", "sim_storage", "=", "Path", "(", "f'~/tmp/sim_storage/{sim_str}'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "sim_storage", "=", "Path", "(", "f'{storage}/{sim_str}'", ")", "\n", "", "", "else", ":", "\n", "            ", "t_string", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d_%H_%M'", ")", "\n", "self", ".", "sim_storage", "=", "Path", "(", "f'{storage}/{self.ENV_ID}_{t_string}'", ")", "\n", "logging", ".", "info", "(", "f'persistence off, creating temporary simulation-storage: {self.sim_storage}'", ")", "\n", "", "self", ".", "sim_storage", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "self", ".", "_state_log", "=", "None", "\n", "if", "general_config", ".", "getboolean", "(", "'store_state_data'", ")", ":", "\n", "            ", "self", ".", "_state_log", "=", "Path", "(", "f'{self.sim_storage}/raw_state_reward_log.log'", ")", "\n", "\n", "# store config for specific environment initialization", "\n", "", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv.step": [[120, 216], ["isinstance", "fem_env.FEMEnv._sample_process_conditions", "fem_env.FEMEnv.simulation_parameters.update", "fem_env.FEMEnv.info.update", "fem_env.FEMEnv.simulation_parameters.copy", "datetime.datetime.datetime.now().strftime", "fem_env.FEMEnv._simulation_id_templates[].format", "logging.debug", "fem_env.FEMEnv._fem_wrapper.release_lock", "enumerate", "fem_env.FEMEnv._fem_wrapper.request_lock", "logging.warning", "time.sleep", "fem_env.FEMEnv._fem_wrapper.read_simulation_results", "fem_env.FEMEnv._apply_reward_function", "fem_env.FEMEnv._apply_observation_function", "logging.info", "datetime.datetime.datetime.now", "fem_env.FEMEnv._fem_wrapper.simulation_results_available", "fem_env.FEMEnv._fem_wrapper.run_simulation", "fem_env.FEMEnv._apply_observation_function", "fem_env.FEMEnv._calc_sim_error_reward", "logging.warning", "fem_env.FEMEnv._is_done", "fem_env.FEMEnv._fem_wrapper.is_terminal_state", "numpy.append", "fem_env.FEMEnv._get_state_vector", "open", "numpy.savetxt", "log_handle.write"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing._sample_process_conditions", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.release_lock", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.request_lock", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.read_simulation_results", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing._apply_reward_function", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.StressOffsetStateDeepDrawing._apply_observation_function", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.simulation_results_available", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.run_simulation", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.StressOffsetStateDeepDrawing._apply_observation_function", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv._calc_sim_error_reward", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing._is_done", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.FEMWrapper.is_terminal_state", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv._get_state_vector"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            action (object): an action provided by the environment\n\n        Returns:\n            observation (object): agent's observation of the current environment\n            reward (float) :\n                amount of reward returned after previous action\n            done (boolean):\n                whether the episode has ended, in which case further step() calls will return undefined results\n            info (dict):\n                contains auxiliary diagnostic information (helpful for debugging, and sometimes learning)\n        \"\"\"", "\n", "\n", "# update simulation-parameters by the current action (supports multiple-input control cases)", "\n", "if", "isinstance", "(", "action", ",", "Iterable", ")", ":", "\n", "            ", "for", "i", ",", "a", "in", "enumerate", "(", "action", ")", ":", "\n", "                ", "self", ".", "simulation_parameters", "[", "f'{self.action_names[i]}_{self.time_step}'", "]", "=", "a", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "simulation_parameters", "[", "f'{self.action_names[0]}_{self.time_step}'", "]", "=", "action", "\n", "\n", "# read out current process conditions", "\n", "", "process_conditions", "=", "self", ".", "_sample_process_conditions", "(", ")", "\n", "self", ".", "simulation_parameters", ".", "update", "(", "process_conditions", ")", "\n", "self", ".", "info", ".", "update", "(", "process_conditions", ")", "\n", "\n", "# create simulation-id (for file- and folder-names) from simulation-parameters", "\n", "format_dict", "=", "self", ".", "simulation_parameters", ".", "copy", "(", ")", "\n", "format_dict", "[", "'ts'", "]", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%m-%d_%H-%M-%S-%f'", ")", "\n", "simulation_id", "=", "self", ".", "_simulation_id_templates", "[", "self", ".", "time_step", "]", ".", "format", "(", "**", "format_dict", ")", "\n", "self", ".", "info", "[", "'sim_id'", "]", "=", "simulation_id", "\n", "logging", ".", "debug", "(", "simulation_id", ")", "\n", "\n", "# wait while simulation is locked", "\n", "i", "=", "1", "\n", "while", "not", "self", ".", "_fem_wrapper", ".", "request_lock", "(", "simulation_id", ")", ":", "\n", "            ", "logging", ".", "warning", "(", "f'waiting for lock release {simulation_id}'", ")", "\n", "time", ".", "sleep", "(", "2", "**", "i", ")", "\n", "i", "+=", "1", "\n", "\n", "", "self", ".", "simulation_failed", "=", "False", "\n", "try", ":", "\n", "# check simulation store for results, if none available: simulate", "\n", "            ", "if", "self", ".", "_fem_wrapper", ".", "simulation_results_available", "(", "simulation_id", ")", "and", "self", ".", "reuse_results", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "# run simulation", "\n", "                ", "self", ".", "_fem_wrapper", ".", "run_simulation", "(", "simulation_id", "=", "simulation_id", ",", "\n", "simulation_parameters", "=", "self", ".", "simulation_parameters", ",", "\n", "time_step", "=", "self", ".", "time_step", ",", "\n", "base_simulation_id", "=", "self", ".", "_base_simulation_id", ")", "\n", "", "", "except", "SimulationError", ":", "\n", "            ", "self", ".", "simulation_failed", "=", "True", "\n", "o", "=", "self", ".", "_apply_observation_function", "(", "None", ")", "\n", "r", "=", "self", ".", "_calc_sim_error_reward", "(", ")", "\n", "logging", ".", "warning", "(", "f'{simulation_id} not solvable! Throwing Reward {r}'", ")", "\n", "self", ".", "_curr_fem_results", "=", "None", "\n", "done", "=", "True", "\n", "", "else", ":", "\n", "# read FEM-results", "\n", "            ", "fem_results", "=", "self", ".", "_fem_wrapper", ".", "read_simulation_results", "(", "simulation_id", ",", "\n", "root_simulation_id", "=", "self", ".", "_root_simulation_id", ")", "\n", "self", ".", "_curr_fem_results", "=", "fem_results", "\n", "\n", "done", "=", "self", ".", "_is_done", "(", "fem_results", "[", "0", "]", ")", "or", "self", ".", "_fem_wrapper", ".", "is_terminal_state", "(", "simulation_id", ")", "\n", "# apply reward function", "\n", "r", "=", "self", ".", "_apply_reward_function", "(", "fem_results", ",", "done", ")", "\n", "# apply observation function", "\n", "o", "=", "self", ".", "_apply_observation_function", "(", "fem_results", ")", "\n", "\n", "if", "self", ".", "_state_log", "is", "not", "None", ":", "\n", "# create log entry", "\n", "                ", "raw_data", "=", "np", ".", "append", "(", "self", ".", "_get_state_vector", "(", "fem_results", ")", ",", "r", ")", "\n", "# append log", "\n", "with", "open", "(", "self", ".", "_state_log", ",", "'a'", ")", "as", "log_handle", ":", "\n", "                    ", "np", ".", "savetxt", "(", "log_handle", ",", "raw_data", ",", "newline", "=", "\",\"", ")", "\n", "log_handle", ".", "write", "(", "f',{simulation_id}\\n'", ")", "\n", "", "", "", "self", ".", "_fem_wrapper", ".", "release_lock", "(", "simulation_id", ")", "\n", "\n", "if", "self", ".", "time_step", "==", "0", ":", "\n", "            ", "self", ".", "_root_simulation_id", "=", "simulation_id", "\n", "", "self", ".", "_base_simulation_id", "=", "simulation_id", "\n", "\n", "if", "done", ":", "\n", "            ", "self", ".", "info", "[", "'sim_id'", "]", "=", "simulation_id", "\n", "episode_string", "=", "f'{self.episode}: Reward {r}, Trajectory {simulation_id} | '", "f'rf {self.info[\"rt_feeding\"]} rt {self.info[\"rt_thickness\"]} '", "f'rvm {self.info[\"rt_v_mises\"]}'", "\n", "# print(colorize(episode_string, 'green', bold=True))", "\n", "logging", ".", "info", "(", "episode_string", ")", "\n", "\n", "", "self", ".", "info", "[", "'episode'", "]", "=", "self", ".", "episode", "\n", "\n", "self", ".", "time_step", "+=", "1", "\n", "return", "o", ",", "r", ",", "done", ",", "self", ".", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv._calc_sim_error_reward": [[217, 219], ["None"], "methods", ["None"], ["", "def", "_calc_sim_error_reward", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_SIM_ERROR_REWARD", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv._apply_reward_function": [[221, 229], ["None"], "methods", ["None"], ["", "def", "_apply_reward_function", "(", "self", ",", "fem_results", ",", "done", ")", ":", "\n", "        ", "\"\"\" to be implemented by special FEMEnv instance (use random numbers seeded in seed())\n        Args:\n            fem_results (tuple): tuple of pandas dataframes for element-wise- and node-wise results\n        Returns:\n            observation (object): reward for given simulation results\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv._apply_observation_function": [[230, 238], ["None"], "methods", ["None"], ["", "def", "_apply_observation_function", "(", "self", ",", "fem_results", ")", ":", "\n", "        ", "\"\"\" to be implemented by special FEMEnv instance (use random numbers seeded in seed())\n        Args:\n            fem_results (tuple): tuple of pandas dataframes for element-wise- and node-wise results\n        Returns:\n            observation (object): observation vector for given simulation results\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv._sample_process_conditions": [[239, 246], ["None"], "methods", ["None"], ["", "def", "_sample_process_conditions", "(", "self", ")", ":", "\n", "        ", "\"\"\" to be implemented by special FEMEnv instance (uses random numbers seeded in seed())\n        Returns:\n            process-conditions (dict):\n                dictionary with process-conditions (Keys used have to be identical with abaq-template keys)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv._is_done": [[247, 254], ["None"], "methods", ["None"], ["", "def", "_is_done", "(", "self", ",", "state", "=", "None", ")", ":", "\n", "        ", "\"\"\" to be implemented by special FEMEnv instance, returns True if the current State is a terminal-state\n        Returns:\n            done (bool):\n                dictionary with process-conditions (Keys used have to be identical with abaq-template keys)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv._get_state_vector": [[255, 265], ["None"], "methods", ["None"], ["", "def", "_get_state_vector", "(", "self", ",", "fem_results", ")", ":", "\n", "        ", "\"\"\"to be implemented by special FEMEnv instance, returns state values in vector form for fem_results tuple\n        Args:\n            fem_results: usually an (element-data, node-data) tuple\n        Returns:\n            state_vec (np.array):\n                vector representation of specific fem_results\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv.reset": [[266, 278], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the state of the environment and returns an initial observation.\n\n        Returns: observation (object): the initial observation of the\n            space.\n        \"\"\"", "\n", "self", ".", "simulation_parameters", "=", "{", "}", "\n", "self", ".", "time_step", "=", "0", "\n", "self", ".", "info", "=", "{", "}", "\n", "self", ".", "_base_simulation_id", "=", "None", "\n", "self", ".", "_root_simulation_id", "=", "None", "\n", "self", ".", "episode", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv.render": [[279, 311], ["fem_env.FEMEnv._render_state", "imageio.imread", "fem_env.FEMEnv.viewer.imshow", "logging.debug", "numpy.zeros", "rendering.SimpleImageViewer"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv._render_state"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "\"\"\"Renders the environment.\n\n        - human: render to the current display or terminal seed and\n          return nothing. Usually for human consumption.\n\n        Args:\n            mode (str): the mode to render with\n        \"\"\"", "\n", "if", "self", ".", "visualize", ":", "\n", "            ", "if", "self", ".", "img_ts", "!=", "self", ".", "time_step", ":", "\n", "                ", "self", ".", "curr_img_path", "=", "self", ".", "_render_state", "(", ")", "\n", "self", ".", "img_ts", "=", "self", ".", "time_step", "\n", "\n", "", "if", "self", ".", "curr_img_path", "is", "None", ":", "\n", "                ", "img", "=", "self", ".", "_standard_img", "\n", "", "else", ":", "\n", "                ", "img", "=", "imageio", ".", "imread", "(", "self", ".", "curr_img_path", ",", "pilmode", "=", "'RGB'", ")", "\n", "\n", "", "if", "mode", "==", "'rgb_array'", ":", "\n", "                ", "if", "img", ".", "shape", "!=", "self", ".", "_standard_img_size", ":", "\n", "                    ", "logging", ".", "debug", "(", "f'wrong img-shape {img.shape}, expected {self._standard_img_size}'", ")", "\n", "img_", "=", "np", ".", "zeros", "(", "self", ".", "_standard_img_size", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img_", "[", ":", "img", ".", "shape", "[", "0", "]", ",", ":", "img", ".", "shape", "[", "1", "]", ",", ":", "]", "=", "img", "\n", "img", "=", "img_", "\n", "", "return", "img", "\n", "", "if", "mode", "==", "'human'", ":", "\n", "                ", "from", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "                    ", "self", ".", "viewer", "=", "rendering", ".", "SimpleImageViewer", "(", "maxwidth", "=", "1000", ")", "\n", "", "self", ".", "viewer", ".", "imshow", "(", "img", ")", "\n", "return", "self", ".", "viewer", ".", "isopen", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv._render_state": [[313, 321], ["fem_env.FEMEnv._fem_wrapper.get_state_visualization", "warnings.warn", "str"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.get_state_visualization"], ["", "", "", "def", "_render_state", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "state_img_path", "=", "self", ".", "_fem_wrapper", ".", "get_state_visualization", "(", "simulation_id", "=", "self", ".", "_base_simulation_id", ",", "\n", "time_step", "=", "self", ".", "time_step", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "warnings", ".", "warn", "(", "f'problem during visualization {str(e)}'", ")", "\n", "return", "None", "\n", "", "return", "state_img_path", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv.seed": [[322, 339], ["gym.utils.seeding.np_random"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "\"\"\"Sets the seed for this env's random number generator(s).\n\n        Note:\n            Some environments use multiple pseudorandom number generators.\n            We want to capture all such seeds used in order to ensure that\n            there aren't accidental correlations between multiple generators.\n\n        Returns:Solver\n            list<bigint>: Returns the list of seeds used in this env's random\n              number generators. The first value in the list should be the\n              \"main\" seed, or the value which a reproducer should pass to\n              'seed'. Often, the main seed equals the provided 'seed', but\n              this won't be true if seed=None, for example.\n        \"\"\"", "\n", "self", ".", "_np_random_state", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMEnv.close": [[340, 349], ["fem_env.FEMEnv.viewer.close"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMCSVLogger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Override _close in your subclass to perform any necessary cleanup.\n\n        Environments will automatically close() themselves when\n        garbage collected or when the program exits.\n        \"\"\"", "\n", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "            ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMCSVLogger.__init__": [[378, 407], ["time.time", "pathlib.Path", "pathlib.Path.mkdir", "pathlib.Path.joinpath", "pathlib.Path.joinpath.exists", "gym_fem.helpers.CSVLogger", "gym.core.Wrapper.__init__", "type", "inspect.getmro", "logging.warning", "pathlib.Path.joinpath", "gym_fem.helpers.CSVLogger", "type", "inspect.getmro", "type"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawingMORLWrapper.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "outdir", ",", "logmode", "=", "'per_episode'", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            env: fem-environment\n            outdir: dir. to log to\n            logmode: in {per_episode, per_step} determines the scope of a single log entry.\n        \"\"\"", "\n", "assert", "(", "type", "(", "env", ")", "in", "inspect", ".", "getmro", "(", "type", "(", "env", ")", ")", ")", ",", "f\"FEMLogger Wrapper is defined for Environments of type FEMEnv, \"", "f\"given: {inspect.getmro(type(env))}\"", "\n", "assert", "(", "logmode", "in", "[", "'per_episode'", ",", "'per_step'", "]", ")", ",", "'logmode string has to be one of {per_episode, per_step}'", "\n", "self", ".", "_iteration_start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_accumulated_reward", "=", "0", "\n", "self", ".", "_logmode", "=", "logmode", "\n", "\n", "outdir", "=", "Path", "(", "outdir", ")", "\n", "outdir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "log_file", "=", "outdir", ".", "joinpath", "(", "'env_log.csv'", ")", "\n", "\n", "if", "log_file", ".", "exists", "(", ")", ":", "\n", "            ", "logging", ".", "warning", "(", "f'{log_file} already existent!'", ")", "\n", "", "self", ".", "_logger", "=", "CSVLogger", "(", "log_file", ")", "\n", "\n", "# special episode log-file, used when logmode == per_step", "\n", "self", ".", "_episode_logger", "=", "None", "\n", "if", "logmode", "==", "'per_step'", ":", "\n", "            ", "episode_log_file", "=", "outdir", ".", "joinpath", "(", "'episode_env_log.csv'", ")", "\n", "self", ".", "_episode_logger", "=", "CSVLogger", "(", "episode_log_file", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMCSVLogger.step": [[408, 448], ["super().step", "fem_env.FEMCSVLogger._logger.set_value", "fem_env.FEMCSVLogger._logger.set_values", "fem_env.FEMCSVLogger._logger.set_value", "fem_env.FEMCSVLogger._logger.set_value", "fem_env.FEMCSVLogger._logger.set_value", "fem_env.FEMCSVLogger._logger.set_values", "fem_env.FEMCSVLogger._logger.write_log", "enumerate", "fem_env.FEMCSVLogger._set_episode_log_vals", "fem_env.FEMCSVLogger._logger.write_log", "enumerate", "fem_env.FEMCSVLogger._set_episode_log_vals", "fem_env.FEMCSVLogger._episode_logger.set_value", "info.keys", "fem_env.FEMCSVLogger._episode_logger.write_log", "fem_env.FEMCSVLogger._logger.set_value", "fem_env.FEMCSVLogger._logger.set_value", "fem_env.FEMCSVLogger._logger.set_value", "fem_env.FEMCSVLogger._logger.set_value", "info.keys", "fem_env.FEMCSVLogger._episode_logger.set_value", "k.startswith", "fem_env.FEMCSVLogger._episode_logger.set_value"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawingMORLWrapper.step", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_values", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_values", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.write_log", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMCSVLogger._set_episode_log_vals", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.write_log", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMCSVLogger._set_episode_log_vals", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.write_log", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "o", ",", "r", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "self", ".", "_accumulated_reward", "+=", "r", "\n", "\n", "if", "self", ".", "_logmode", "==", "'per_episode'", ":", "\n", "            ", "try", ":", "\n", "                ", "for", "i", ",", "a", "in", "enumerate", "(", "action", ")", ":", "\n", "                    ", "self", ".", "_logger", ".", "set_value", "(", "f'action{i}_{self.time_step}'", ",", "a", ")", "\n", "", "", "except", "TypeError", ":", "\n", "                ", "self", ".", "_logger", ".", "set_value", "(", "f'action{self.time_step}'", ",", "action", ")", "\n", "", "self", ".", "_logger", ".", "set_value", "(", "f'reward{self.time_step}'", ",", "r", ")", "\n", "self", ".", "_logger", ".", "set_values", "(", "info", ")", "\n", "if", "done", ":", "\n", "                ", "self", ".", "_set_episode_log_vals", "(", ")", "\n", "self", ".", "_logger", ".", "write_log", "(", ")", "\n", "", "", "else", ":", "\n", "# write step log", "\n", "            ", "self", ".", "_logger", ".", "set_value", "(", "'time-step'", ",", "self", ".", "time_step", ")", "\n", "self", ".", "_logger", ".", "set_value", "(", "f'reward'", ",", "r", ")", "\n", "try", ":", "\n", "                ", "for", "i", ",", "a", "in", "enumerate", "(", "action", ")", ":", "\n", "                    ", "self", ".", "_logger", ".", "set_value", "(", "f'action{i}'", ",", "a", ")", "\n", "", "", "except", "TypeError", ":", "\n", "                ", "self", ".", "_logger", ".", "set_value", "(", "f'action{self.time_step}'", ",", "action", ")", "\n", "", "self", ".", "_logger", ".", "set_value", "(", "'done'", ",", "done", ")", "\n", "self", ".", "_logger", ".", "set_values", "(", "info", ")", "\n", "self", ".", "_logger", ".", "write_log", "(", ")", "\n", "\n", "# write episode log", "\n", "if", "done", ":", "\n", "                ", "self", ".", "_set_episode_log_vals", "(", ")", "\n", "self", ".", "_episode_logger", ".", "set_value", "(", "'total_steps'", ",", "self", ".", "time_step", ")", "\n", "if", "'episode_goal'", "in", "info", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "_episode_logger", ".", "set_value", "(", "'goal'", ",", "info", "[", "'episode_goal'", "]", ")", "\n", "", "for", "k", "in", "info", ".", "keys", "(", ")", ":", "\n", "                    ", "if", "k", ".", "startswith", "(", "'episode_'", ")", ":", "\n", "                        ", "self", ".", "_episode_logger", ".", "set_value", "(", "k", ",", "info", "[", "k", "]", ")", "\n", "", "", "self", ".", "_episode_logger", ".", "write_log", "(", ")", "\n", "\n", "", "", "return", "o", ",", "r", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMCSVLogger.reset": [[449, 454], ["fem_env.FEMCSVLogger.env.reset", "time.time"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.StressOffsetStateDeepDrawing.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "episode", ">", "0", ":", "\n", "            ", "self", ".", "_accumulated_reward", "=", "0", "\n", "self", ".", "_iteration_start", "=", "time", ".", "time", "(", ")", "\n", "", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMCSVLogger.close": [[455, 458], ["fem_env.FEMCSVLogger._logger.write_log", "super().close"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.write_log", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMCSVLogger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "write_log", "(", ")", "\n", "return", "super", "(", ")", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_env.FEMCSVLogger._set_episode_log_vals": [[459, 469], ["time.time", "fem_env.FEMCSVLogger._logger.set_value", "fem_env.FEMCSVLogger._logger.set_value", "fem_env.FEMCSVLogger._logger.set_value", "int", "fem_env.FEMCSVLogger._episode_logger.set_value", "fem_env.FEMCSVLogger._episode_logger.set_value", "fem_env.FEMCSVLogger._episode_logger.set_value", "int"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value"], ["", "def", "_set_episode_log_vals", "(", "self", ")", ":", "\n", "        ", "runtime", "=", "time", ".", "time", "(", ")", "-", "self", ".", "_iteration_start", "\n", "if", "self", ".", "_logmode", "==", "'per_episode'", ":", "\n", "            ", "self", ".", "_logger", ".", "set_value", "(", "'iteration'", ",", "int", "(", "self", ".", "episode", ")", ")", "\n", "self", ".", "_logger", ".", "set_value", "(", "'runtime'", ",", "runtime", ")", "\n", "self", ".", "_logger", ".", "set_value", "(", "'reward'", ",", "self", ".", "_accumulated_reward", ")", "\n", "", "elif", "self", ".", "_logmode", "==", "'per_step'", ":", "\n", "            ", "self", ".", "_episode_logger", ".", "set_value", "(", "'episode'", ",", "int", "(", "self", ".", "episode", ")", ")", "\n", "self", ".", "_episode_logger", ".", "set_value", "(", "'runtime'", ",", "runtime", ")", "\n", "self", ".", "_episode_logger", ".", "set_value", "(", "'reward'", ",", "self", ".", "_accumulated_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.__init__": [[4, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "outfile", ")", ":", "\n", "        ", "self", ".", "file", "=", "outfile", "\n", "self", ".", "_log_dict", "=", "{", "}", "\n", "self", ".", "_log_archive", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_value": [[9, 11], ["None"], "methods", ["None"], ["", "def", "set_value", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", ".", "_log_dict", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.set_values": [[12, 14], ["helpers.CSVLogger._log_dict.update"], "methods", ["None"], ["", "def", "set_values", "(", "self", ",", "value_dict", ")", ":", "\n", "        ", "self", ".", "_log_dict", ".", "update", "(", "value_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.helpers.CSVLogger.write_log": [[15, 40], ["set", "helpers.CSVLogger.file.exists", "helpers.CSVLogger._log_archive.append", "set", "open", "csv.reader", "helpers.CSVLogger._log_dict.keys", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "csv.DictWriter.writerows", "csv.DictWriter.writerow", "open", "csv.DictWriter", "csv.DictWriter.writerow", "helpers.CSVLogger._log_dict.keys", "set", "helpers.CSVLogger._log_dict.keys", "helpers.CSVLogger._log_dict.keys", "next"], "methods", ["None"], ["", "def", "write_log", "(", "self", ")", ":", "\n", "# get log-file keys", "\n", "        ", "csv_keys", "=", "set", "(", ")", "\n", "if", "self", ".", "file", ".", "exists", "(", ")", ":", "\n", "            ", "with", "open", "(", "self", ".", "file", ",", "'r'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "                ", "reader", "=", "csv", ".", "reader", "(", "csvfile", ")", "\n", "try", ":", "\n", "                    ", "csv_keys", "=", "set", "(", "next", "(", "reader", ")", ")", "\n", "", "except", "Exception", ":", "\n", "                    ", "pass", "\n", "# rewrite csv if unseen keys", "\n", "", "", "", "if", "csv_keys", "<", "set", "(", "self", ".", "_log_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "with", "open", "(", "self", ".", "file", ",", "'w+'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "                ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "self", ".", "_log_dict", ".", "keys", "(", ")", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "writer", ".", "writerows", "(", "self", ".", "_log_archive", ")", "\n", "writer", ".", "writerow", "(", "self", ".", "_log_dict", ")", "\n", "# append csv if no unseen keys", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "self", ".", "file", ",", "'a'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "                ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "self", ".", "_log_dict", ".", "keys", "(", ")", ")", "\n", "writer", ".", "writerow", "(", "self", ".", "_log_dict", ")", "\n", "\n", "", "", "self", ".", "_log_archive", ".", "append", "(", "self", ".", "_log_dict", ")", "\n", "self", ".", "_log_dict", "=", "{", "k", ":", "None", "for", "k", "in", "self", ".", "_log_dict", ".", "keys", "(", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.FEMWrapper.__init__": [[18, 20], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "simulation_store_path", ")", ":", "\n", "        ", "self", ".", "simulation_store_path", "=", "simulation_store_path", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.FEMWrapper.run_simulation": [[21, 30], ["None"], "methods", ["None"], ["", "def", "run_simulation", "(", "self", ",", "simulation_id", ",", "simulation_parameters", ",", "time_step", ",", "base_simulation_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" executes the simulation with given parameters and stores results under the given simulation-id\n        Args:\n            simulation_id (str): identifier of the requested simulation\n            simulation_parameters (dict): named parameter-values for the parametric fem-simulation\n            base_simulation_id (str): identifier of the basis simulation for the requested simulation\n            time_step (int): current time-step\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.FEMWrapper.simulation_results_available": [[31, 39], ["None"], "methods", ["None"], ["", "def", "simulation_results_available", "(", "self", ",", "simulation_id", ")", ":", "\n", "        ", "\"\"\" Returns true if given simulation has been calculated and results are available\n        Args:\n            simulation_id (str): identifier of the requested simulation\n        Returns:\n            results_available (bool): true if results are available, else false\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.FEMWrapper.read_simulation_results": [[40, 49], ["None"], "methods", ["None"], ["", "def", "read_simulation_results", "(", "self", ",", "simulation_id", ",", "root_simulation_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Reads out results from the given simulation\n        Args:\n            simulation_id (str): identifier of the requested simulation\n            root_simulation_id (str): identifier of the root simulation (first time-step)\n        Returns:\n            simulation_results (tuple): Tuple of two Pandas Dictionaries: (element-wise results, node-wise results)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "def", "is_terminal_state", "(", "self", ",", "simulation_id", ")", ":", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.FEMWrapper.is_terminal_state": [[49, 57], ["None"], "methods", ["None"], ["", "def", "is_terminal_state", "(", "self", ",", "simulation_id", ")", ":", "\n", "        ", "\"\"\" returns True, if no former actions are possible based on the simulation-state\n        Args:\n            simulation_id (str): identifier of the requested simulation\n        Returns:\n            is_terminal (bool): True, if no former actions are possible based on the simulation-state\n        \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.FEMWrapper.request_lock": [[58, 88], ["fem_wrapper.FEMWrapper.simulation_store_path.joinpath", "fem_wrapper.FEMWrapper.mkdir", "fem_wrapper.FEMWrapper.joinpath", "str", "fem_wrapper.FEMWrapper.joinpath.write_text", "fem_wrapper.FEMWrapper.joinpath.touch", "fem_wrapper.FEMWrapper.joinpath.read_text", "datetime.datetime.datetime.now().timestamp", "logging.warning", "str", "fem_wrapper.FEMWrapper.joinpath.write_text", "datetime.datetime.datetime.now().timestamp", "float", "logging.warning", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now().timestamp", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "datetime.datetime.datetime.fromtimestamp", "float"], "methods", ["None"], ["", "def", "request_lock", "(", "self", ",", "simulation_id", ",", "timeout_seconds", "=", "600", ")", ":", "\n", "        ", "\"\"\" locks the given simulation (to enable parallel environments based on the same simulation-storage)\n        Args:\n            simulation_id (str): identifier of the simulation\n            timeout_seconds (int): seconds from now until lock times out\n        Returns:\n            locked (bool): True if the lock has been successfully established, false if the lock was already set\n        \"\"\"", "\n", "job_directory", "=", "self", ".", "simulation_store_path", ".", "joinpath", "(", "f'{simulation_id}'", ")", "\n", "job_directory", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "lock", "=", "job_directory", ".", "joinpath", "(", "'.fem_wrapper_lock'", ")", "\n", "try", ":", "\n", "            ", "lock", ".", "touch", "(", "exist_ok", "=", "False", ")", "\n", "", "except", "FileExistsError", ":", "\n", "            ", "lock_timeout", "=", "lock", ".", "read_text", "(", ")", "\n", "if", "lock_timeout", "==", "''", ":", "\n", "                ", "logging", ".", "warning", "(", "f'empty lock: {lock}, setting lock-timeout t+600 and waiting'", ")", "\n", "timeout", "=", "str", "(", "datetime", ".", "now", "(", ")", ".", "timestamp", "(", ")", "+", "timeout_seconds", ")", "\n", "lock", ".", "write_text", "(", "timeout", ")", "\n", "return", "False", "\n", "", "elif", "datetime", ".", "now", "(", ")", ".", "timestamp", "(", ")", ">", "float", "(", "lock_timeout", ")", ":", "\n", "                ", "logging", ".", "warning", "(", "\n", "f'overwriting timed out lock: {lock}, timeout: {datetime.fromtimestamp(float(lock_timeout))}'", ")", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "timeout", "=", "str", "(", "datetime", ".", "now", "(", ")", ".", "timestamp", "(", ")", "+", "timeout_seconds", ")", "\n", "lock", ".", "write_text", "(", "timeout", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.FEMWrapper.release_lock": [[89, 98], ["fem_wrapper.FEMWrapper.simulation_store_path.joinpath", "fem_wrapper.FEMWrapper.joinpath", "fem_wrapper.FEMWrapper.joinpath.exists", "fem_wrapper.FEMWrapper.joinpath.unlink"], "methods", ["None"], ["", "def", "release_lock", "(", "self", ",", "simulation_id", ")", ":", "\n", "        ", "\"\"\" Releases the simulation-lock\n        Args:\n            simulation_id (str): identifier of the requested simulation\n        \"\"\"", "\n", "job_directory", "=", "self", ".", "simulation_store_path", ".", "joinpath", "(", "f'{simulation_id}'", ")", "\n", "lock", "=", "job_directory", ".", "joinpath", "(", "'.fem_wrapper_lock'", ")", "\n", "if", "lock", ".", "exists", "(", ")", ":", "\n", "            ", "lock", ".", "unlink", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.SimulationError.__init__": [[104, 106], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "message", "=", "\"Simulation-Model can not be solved for given parameters\"", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.__init__": [[109, 135], ["fem_wrapper.FEMWrapper.__init__", "OSError"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawingMORLWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "simulation_store_path", ",", "template_path", ",", "abaq_command", ",", "abaq_version_string", ",", "\n", "cpu_count", ",", "abaq_timeout", ",", "reader_version", ",", "abq_forcekill", "=", "False", ",", "check_version", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "simulation_store_path", ")", "\n", "self", ".", "template_folder", "=", "template_path", "\n", "\n", "if", "abaq_command", "is", "not", "None", ":", "\n", "            ", "self", ".", "abaq_command", "=", "abaq_command", "\n", "", "else", ":", "\n", "            ", "if", "os", ".", "name", "==", "'posix'", ":", "\n", "                ", "self", ".", "abaq_command", "=", "'abaqus'", "\n", "", "elif", "os", ".", "name", "==", "'nt'", ":", "\n", "                ", "self", ".", "abaq_command", "=", "r'C:\\SIMULIA\\Abaqus\\Commands\\abaqus.bat'", "\n", "", "else", ":", "\n", "                ", "raise", "OSError", "(", "f'No default abaqus command defined for OS: {os.name}'", ")", "\n", "", "", "self", ".", "abaq_version_string", "=", "abaq_version_string", "\n", "self", ".", "cpu_count", "=", "cpu_count", "\n", "self", ".", "timeout", "=", "abaq_timeout", "\n", "self", ".", "abaq_reader_version", "=", "reader_version", "\n", "self", ".", "abaq_forcekill", "=", "abq_forcekill", "\n", "self", ".", "check_abq_version", "=", "check_version", "\n", "self", ".", "result_dict", "=", "{", "}", "\n", "self", ".", "NON_SIMABLE_ERR_MESSAGES", "=", "[", "\"Abaqus/Standard Analysis exited with an error\"", ",", "\n", "\"aborted with system error code 1073741819\"", ",", "\n", "\"Analysis Input File Processor exited with an error\"", "]", "\n", "self", ".", "CONNECTION_ERR_MESSAGES", "=", "[", "\"IP address cannot be determined\"", ",", "\n", "\"Failed to startup licensing\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.request_lock": [[136, 138], ["fem_wrapper.FEMWrapper.request_lock"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.request_lock"], ["", "def", "request_lock", "(", "self", ",", "simulation_id", ",", "timeout_seconds", "=", "600", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "request_lock", "(", "simulation_id", ",", "timeout_seconds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.release_lock": [[139, 141], ["fem_wrapper.FEMWrapper.release_lock"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.release_lock"], ["", "def", "release_lock", "(", "self", ",", "simulation_id", ")", ":", "\n", "        ", "super", "(", ")", ".", "release_lock", "(", "simulation_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.run_simulation": [[142, 292], ["fem_wrapper.AbaqusWrapper.simulation_store_path.joinpath", "fem_wrapper.AbaqusWrapper.exists", "fem_wrapper.AbaqusWrapper.template_folder.joinpath", "fem_wrapper.AbaqusWrapper.joinpath", "run_cmd.append", "fem_wrapper.AbaqusWrapper.joinpath().exists", "logging.info", "fem_wrapper.AbaqusWrapper.joinpath", "fem_wrapper.AbaqusWrapper.joinpath.exists", "fem_wrapper.AbaqusWrapper.iterdir", "fem_wrapper.AbaqusWrapper.mkdir", "fem_wrapper.AbaqusWrapper._copy_restart_files", "open", "sum", "logging.info", "time.time", "logging.info", "fem_wrapper.AbaqusWrapper.joinpath", "open", "fem_wrapper.AbaqusWrapper.joinpath", "fem_wrapper.AbaqusWrapper.iterdir", "os.remove", "logging.warning", "subprocess.check_output", "str", "subprocess.check_output", "str", "fem_wrapper.AbaqusWrapper._abaq_forcekill", "fem_wrapper.AbaqusWrapper.joinpath.exists", "logging.warning", "logging.warning", "str().replace", "logging.warning", "time.sleep", "logging.warning", "time.sleep", "os.remove", "file.is_file", "file.is_dir", "simulation_parameters.items", "inp_file.write", "logging.warning", "run_cmd.remove", "logging.info", "fem_wrapper.AbaqusWrapper.joinpath.unlink", "fem_wrapper.AbaqusWrapper._abaq_forcekill", "open().write", "fem_wrapper.AbaqusWrapper._abaq_forcekill", "logging.info", "fem_wrapper.AbaqusWrapper._copy_restart_files", "any", "fem_wrapper.AbaqusWrapper._abaq_forcekill", "file.unlink", "shutil.rmtree", "line.replace.replace.replace", "ValueError", "open", "time.sleep", "time.time", "TimeoutError", "str", "len", "re.search", "fem_wrapper.AbaqusWrapper._copy_restart_files", "fem_wrapper.AbaqusWrapper.run_simulation", "fem_wrapper.AbaqusWrapper.run_simulation", "any", "str", "open", "f.read().splitlines", "time.sleep", "open", "fem_wrapper.AbaqusWrapper.joinpath", "sum", "time.time", "f.read", "time.time", "re.search.start", "re.search.end", "open"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper._copy_restart_files", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper._abaq_forcekill", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper._abaq_forcekill", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper._abaq_forcekill", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper._copy_restart_files", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper._abaq_forcekill", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper._copy_restart_files", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.run_simulation", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.run_simulation"], ["", "def", "run_simulation", "(", "self", ",", "simulation_id", ",", "simfolder_prepared", "=", "False", ",", "\n", "simulation_parameters", "=", "None", ",", "time_step", "=", "None", ",", "base_simulation_id", "=", "None", ",", "visualize", "=", "True", ")", ":", "\n", "        ", "assert", "simfolder_prepared", "or", "(", "simulation_parameters", "is", "not", "None", "and", "time_step", "is", "not", "None", ")", "\n", "time_step", "=", "time_step", "\n", "is_restart_simulation", "=", "base_simulation_id", "is", "not", "None", "\n", "\n", "job_directory", "=", "self", ".", "simulation_store_path", ".", "joinpath", "(", "f'{simulation_id}'", ")", "\n", "\n", "if", "not", "simfolder_prepared", ":", "\n", "            ", "\"\"\" create simulation folder \"\"\"", "\n", "if", "job_directory", ".", "exists", "(", ")", ":", "\n", "# unlink all files except lck and timeout file", "\n", "                ", "for", "file", "in", "job_directory", ".", "iterdir", "(", ")", ":", "\n", "                    ", "if", "file", ".", "stem", "not", "in", "[", "'.fem_wrapper_lock'", ",", "'.timeout_log'", "]", ":", "\n", "                        ", "if", "file", ".", "is_file", "(", ")", ":", "\n", "                            ", "file", ".", "unlink", "(", ")", "\n", "", "if", "file", ".", "is_dir", "(", ")", ":", "\n", "                            ", "shutil", ".", "rmtree", "(", "file", ")", "\n", "", "", "", "", "else", ":", "\n", "                ", "job_directory", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "", "\"\"\" copy files from base-simulation folder \"\"\"", "\n", "if", "is_restart_simulation", ":", "\n", "                ", "base_job_file_names", "=", "self", ".", "_copy_restart_files", "(", "base_simulation_id", ",", "simulation_id", ")", "\n", "", "\"\"\" prepare fem-template \"\"\"", "\n", "template_path", "=", "self", ".", "template_folder", ".", "joinpath", "(", "f'{time_step}.rlinp'", ")", "\n", "input_file_path", "=", "job_directory", ".", "joinpath", "(", "f'{simulation_id}.inp'", ")", "\n", "with", "open", "(", "template_path", ",", "\"rt\"", ")", "as", "template", ":", "\n", "                ", "with", "open", "(", "input_file_path", ",", "\"wt\"", ")", "as", "inp_file", ":", "\n", "                    ", "for", "line", "in", "template", ":", "\n", "                        ", "for", "param", ",", "value", "in", "simulation_parameters", ".", "items", "(", ")", ":", "\n", "                            ", "line", "=", "line", ".", "replace", "(", "f'<!{param}!>'", ",", "str", "(", "value", ")", ")", "\n", "", "if", "'<!'", "in", "line", ":", "\n", "                            ", "raise", "ValueError", "(", "f\"non defined parameter in job template: {line}\"", ")", "\n", "", "inp_file", ".", "write", "(", "line", ")", "\n", "\n", "", "", "", "", "\"\"\" run simulation \"\"\"", "\n", "run_cmd", "=", "[", "f'{self.abaq_command}'", ",", "f'job={simulation_id}'", ",", "'interactive'", ",", "f'cpus={self.cpu_count}'", "]", "\n", "if", "is_restart_simulation", ":", "\n", "            ", "run_cmd", ".", "append", "(", "f'oldjob={base_simulation_id}'", ")", "\n", "", "out", "=", "\"\"", "\n", "try_count", "=", "0", "\n", "\n", "while", "f\"Abaqus JOB {simulation_id} COMPLETED\"", "not", "in", "out", "or", "job_directory", ".", "joinpath", "(", "f'{simulation_id}.odb_f'", ")", ".", "exists", "(", ")", ":", "\n", "# delete all job-files except .inp", "\n", "            ", "for", "file", "in", "[", "f", "for", "f", "in", "job_directory", ".", "iterdir", "(", ")", "if", "f", ".", "stem", "==", "simulation_id", "and", "f", ".", "suffix", "!=", "'.inp'", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "os", ".", "remove", "(", "file", ")", "\n", "", "except", "IOError", "as", "e", ":", "\n", "                    ", "logging", ".", "warning", "(", "f'simulation file {file} can not be deleted. {e}'", ")", "\n", "\n", "# run Abaqus and wait for completion", "\n", "", "", "logging", ".", "info", "(", "f'RUN ABAQUS: {job_directory} || '", "+", "' '", ".", "join", "(", "run_cmd", ")", ")", "\n", "# if n=10 timeouts reported: imeadiately raise simulation-error", "\n", "timeout_file", "=", "job_directory", ".", "joinpath", "(", "'.timeout_log'", ")", "\n", "if", "timeout_file", ".", "exists", "(", ")", ":", "\n", "                ", "n_timeouts", "=", "sum", "(", "1", "for", "line", "in", "open", "(", "timeout_file", ")", ")", "\n", "logging", ".", "info", "(", "f'simulation timed-out at the last {n_timeouts} attempts'", ")", "\n", "if", "n_timeouts", ">=", "5", ":", "\n", "                    ", "logging", ".", "warning", "(", "f'skipping simulation due to {n_timeouts} successive timeouts in previous attempts'", ")", "\n", "raise", "SimulationError", "\n", "\n", "", "", "try_count", "+=", "1", "\n", "try", ":", "\n", "                ", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "not", "self", ".", "abaq_forcekill", ":", "\n", "                    ", "out", "=", "check_output", "(", "run_cmd", ",", "cwd", "=", "job_directory", ",", "timeout", "=", "self", ".", "timeout", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")", "\n", "out", "=", "str", "(", "out", ")", "\n", "", "else", ":", "\n", "# === dirty hack due to linux abq termination problem! ===", "\n", "                    ", "if", "'interactive'", "in", "run_cmd", ":", "\n", "                        ", "run_cmd", ".", "remove", "(", "'interactive'", ")", "\n", "", "out", "=", "check_output", "(", "run_cmd", ",", "cwd", "=", "job_directory", ",", "timeout", "=", "self", ".", "timeout", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")", "\n", "out", "=", "str", "(", "out", ")", "\n", "analysis_finished", "=", "False", "\n", "while", "not", "analysis_finished", ":", "\n", "                        ", "try", ":", "\n", "                            ", "with", "open", "(", "job_directory", ".", "joinpath", "(", "f'{simulation_id}.sta'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                                ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "analysis_finished", "=", "\"COMPLETED SUCCESSFULLY\"", "in", "lines", "[", "-", "2", "]", "+", "lines", "[", "-", "1", "]", "\n", "", "time", ".", "sleep", "(", "1", ")", "\n", "", "except", "IOError", ":", "\n", "                            ", "time", ".", "sleep", "(", "2", ")", "\n", "", "if", "time", ".", "time", "(", ")", ">", "start", "+", "self", ".", "timeout", ":", "\n", "                            ", "raise", "TimeoutError", "(", "'abq timeout'", ")", "\n", "\n", "", "", "self", ".", "_abaq_forcekill", "(", "job_directory", ",", "simulation_id", ")", "\n", "out", "=", "f\"Abaqus JOB {simulation_id} COMPLETED\"", "\n", "# === end of dirty hack ===", "\n", "# remove timeout file (if timeout is followed by a solution in time)", "\n", "if", "timeout_file", ".", "exists", "(", ")", ":", "\n", "                        ", "logging", ".", "info", "(", "f'successful simulation after {sum(1 for line in open(timeout_file))} '", "\n", "f'timed-out attemts'", ")", "\n", "timeout_file", ".", "unlink", "(", ")", "\n", "", "", "logging", ".", "info", "(", "out", ")", "\n", "if", "'Position in the queue'", "in", "out", ":", "\n", "                    ", "logging", ".", "warning", "(", "\"Abaqus licence-request was queued. \"", "+", "\n", "f\"Total time for solving: {time.time() - start} seconds.\"", ")", "\n", "", "", "except", "(", "TimeoutExpired", ",", "TimeoutError", ")", ":", "\n", "                ", "if", "self", ".", "abaq_forcekill", ":", "\n", "                    ", "self", ".", "_abaq_forcekill", "(", "job_directory", ",", "simulation_id", ")", "\n", "\n", "", "logging", ".", "warning", "(", "f'Abaqus Timed out after {self.timeout} seconds.'", ")", "\n", "if", "try_count", "%", "2", "==", "0", ":", "\n", "# write timestamp to timeout file in experiment folder", "\n", "                    ", "open", "(", "timeout_file", ",", "'a'", ")", ".", "write", "(", "f\"{time.time()}\\n\"", ")", "\n", "raise", "SimulationError", "\n", "", "", "except", "CalledProcessError", "as", "e", ":", "\n", "                ", "if", "self", ".", "abaq_forcekill", ":", "\n", "                    ", "self", ".", "_abaq_forcekill", "(", "job_directory", ",", "simulation_id", ")", "\n", "\n", "", "out", "=", "str", "(", "e", ".", "output", ")", ".", "replace", "(", "'\\\\r\\\\n'", ",", "' || '", ")", "\n", "logging", ".", "warning", "(", "f'Abaq. Error in try #{try_count}. output: {out}'", ")", "\n", "\n", "# if wrong format of restart file: rerun base simulation and copy restart file", "\n", "if", "\"The old-job restart file format is not recognized\"", "in", "out", ":", "\n", "                    ", "logging", ".", "info", "(", "f'Trying to rerun base-simulation {base_simulation_id}'", ")", "\n", "\n", "# todo dirty base sim-id", "\n", "if", "len", "(", "base_simulation_id", ")", ">", "18", ":", "\n", "                        ", "i", "=", "re", ".", "search", "(", "'_\\d+.\\d+__'", ",", "base_simulation_id", ")", "\n", "base_base_simulation_id", "=", "base_simulation_id", "[", ":", "i", ".", "start", "(", ")", "]", "+", "base_simulation_id", "[", "(", "i", ".", "end", "(", ")", "-", "2", ")", ":", "]", "\n", "self", ".", "_copy_restart_files", "(", "base_base_simulation_id", ",", "base_simulation_id", ")", "\n", "\n", "self", ".", "run_simulation", "(", "simulation_id", "=", "base_simulation_id", ",", "base_simulation_id", "=", "base_base_simulation_id", ",", "\n", "simfolder_prepared", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "run_simulation", "(", "simulation_id", "=", "base_simulation_id", ",", "simfolder_prepared", "=", "True", ")", "\n", "", "self", ".", "_copy_restart_files", "(", "base_simulation_id", ",", "simulation_id", ")", "\n", "\n", "# if Errors are simulation errors (not depending on Internet Connection / violated buffer etc.)", "\n", "", "if", "any", "(", "[", "s", "in", "out", "for", "s", "in", "self", ".", "NON_SIMABLE_ERR_MESSAGES", "]", ")", "and", "not", "any", "(", "[", "s", "in", "out", "for", "s", "in", "self", ".", "CONNECTION_ERR_MESSAGES", "]", ")", ":", "\n", "                    ", "if", "try_count", "%", "2", "==", "0", ":", "\n", "                        ", "raise", "SimulationError", "\n", "", "", "time", ".", "sleep", "(", "30", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "if", "self", ".", "abaq_forcekill", ":", "\n", "                    ", "self", ".", "_abaq_forcekill", "(", "job_directory", ",", "simulation_id", ")", "\n", "\n", "", "logging", ".", "warning", "(", "f'Unhandled Abaqus Error {e} abaqus output: {out}'", ")", "\n", "time", ".", "sleep", "(", "10", ")", "\n", "", "", "\"\"\" clean base-job files \"\"\"", "\n", "if", "is_restart_simulation", "and", "not", "simfolder_prepared", ":", "\n", "            ", "for", "file", "in", "[", "job_directory", ".", "joinpath", "(", "f", ")", "for", "f", "in", "base_job_file_names", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "os", ".", "remove", "(", "file", ")", "\n", "", "except", "OSError", ":", "\n", "                    ", "continue", "\n", "", "", "", "", "def", "_abaq_forcekill", "(", "self", ",", "job_directory", ",", "simulation_id", ")", ":", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper._abaq_forcekill": [[292, 297], ["subprocess.call", "job_directory.joinpath", "job_directory.joinpath.exists", "job_directory.joinpath.unlink"], "methods", ["None"], ["", "", "", "", "def", "_abaq_forcekill", "(", "self", ",", "job_directory", ",", "simulation_id", ")", ":", "\n", "        ", "subprocess", ".", "call", "(", "'pgrep standard | xargs kill'", ",", "shell", "=", "True", ")", "\n", "abq_lock", "=", "job_directory", ".", "joinpath", "(", "f'{simulation_id}.lck'", ")", "\n", "if", "abq_lock", ".", "exists", "(", ")", ":", "\n", "            ", "abq_lock", ".", "unlink", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper._copy_restart_files": [[298, 324], ["fem_wrapper.AbaqusWrapper.simulation_store_path.joinpath", "fem_wrapper.AbaqusWrapper.simulation_store_path.joinpath", "fem_wrapper.AbaqusWrapper.release_lock", "fem_wrapper.AbaqusWrapper.request_lock", "logging.warning", "time.sleep", "fem_wrapper.AbaqusWrapper.joinpath", "file.exists", "IOError", "shutil.copy", "fem_wrapper.AbaqusWrapper.joinpath", "logging.warning", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.release_lock", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.request_lock"], ["", "", "def", "_copy_restart_files", "(", "self", ",", "origin_simulation_id", ",", "target_simulation_id", ")", ":", "\n", "        ", "i", "=", "0", "\n", "while", "not", "self", ".", "request_lock", "(", "origin_simulation_id", ",", "30", ")", ":", "\n", "            ", "logging", ".", "warning", "(", "f'waiting for base-simulation lock release {origin_simulation_id}'", ")", "\n", "time", ".", "sleep", "(", "2", "**", "i", ")", "\n", "i", "+=", "1", "\n", "", "job_directory", "=", "self", ".", "simulation_store_path", ".", "joinpath", "(", "target_simulation_id", ")", "\n", "base_job_directory", "=", "self", ".", "simulation_store_path", ".", "joinpath", "(", "origin_simulation_id", ")", "\n", "base_job_file_names", "=", "[", "f'{origin_simulation_id}.{ext}'", "for", "ext", "in", "[", "'res'", ",", "'prt'", ",", "'mdl'", ",", "'stt'", ",", "'odb'", "]", "]", "\n", "base_job_file_paths", "=", "[", "base_job_directory", ".", "joinpath", "(", "f", ")", "for", "f", "in", "base_job_file_names", "]", "\n", "for", "file", "in", "base_job_file_paths", ":", "\n", "            ", "if", "file", ".", "exists", "(", ")", ":", "\n", "                ", "while", "True", ":", "\n", "                    ", "try", ":", "\n", "                        ", "shutil", ".", "copy", "(", "file", ",", "\n", "job_directory", ".", "joinpath", "(", "file", ".", "name", ")", ")", "\n", "", "except", "PermissionError", ":", "\n", "                        ", "logging", ".", "warning", "(", "f'Permission denied for file {file}!'", ")", "\n", "time", ".", "sleep", "(", "30", ")", "\n", "continue", "\n", "", "break", "\n", "", "", "else", ":", "\n", "                ", "raise", "IOError", "(", "f'file not existent: {file} (required for restart-simulation)'", ")", "\n", "\n", "", "", "self", ".", "release_lock", "(", "origin_simulation_id", ")", "\n", "return", "base_job_file_names", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.simulation_results_available": [[325, 350], ["fem_wrapper.AbaqusWrapper.simulation_store_path.joinpath", "fem_wrapper.AbaqusWrapper.joinpath", "fem_wrapper.AbaqusWrapper.joinpath", "fem_wrapper.AbaqusWrapper.result_dict.keys", "fem_wrapper.AbaqusWrapper.joinpath.exists", "fem_wrapper.AbaqusWrapper.joinpath.exists", "fem_wrapper.AbaqusWrapper.joinpath.read_text", "fem_wrapper.AbaqusWrapper.joinpath().exists", "logging.warning", "open", "msg.read", "fem_wrapper.AbaqusWrapper.joinpath", "warnings.warn"], "methods", ["None"], ["", "def", "simulation_results_available", "(", "self", ",", "simulation_id", ")", ":", "\n", "        ", "if", "simulation_id", "in", "self", ".", "result_dict", ".", "keys", "(", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "job_directory", "=", "self", ".", "simulation_store_path", ".", "joinpath", "(", "f'{simulation_id}'", ")", "\n", "odb_file", "=", "job_directory", ".", "joinpath", "(", "f'{simulation_id}.odb'", ")", "\n", "msg_file", "=", "job_directory", ".", "joinpath", "(", "f'{simulation_id}.msg'", ")", "\n", "\n", "if", "odb_file", ".", "exists", "(", ")", "and", "msg_file", ".", "exists", "(", ")", ":", "\n", "# check for lock-file or job ended with analysis-error, if True: simulation was aborted", "\n", "            ", "msg_contents", "=", "msg_file", ".", "read_text", "(", ")", "\n", "if", "job_directory", ".", "joinpath", "(", "f'{simulation_id}.lck'", ")", ".", "exists", "(", ")", "or", "\"THE ANALYSIS HAS BEEN COMPLETED\"", "not", "in", "msg_contents", ":", "\n", "                ", "logging", ".", "warning", "(", "f'incomplete simulation, no results available!'", ")", "\n", "return", "False", "\n", "\n", "# check for abaqus version used at solve-time", "\n", "", "if", "self", ".", "check_abq_version", ":", "\n", "                ", "with", "open", "(", "msg_file", ",", "'r'", ")", "as", "msg", ":", "\n", "                    ", "msg_header", "=", "msg", ".", "read", "(", "500", ")", "\n", "if", "self", ".", "abaq_version_string", "not", "in", "msg_header", ":", "\n", "                        ", "warnings", ".", "warn", "(", "f\"different abaq version used for {simulation_id}\"", ")", "\n", "return", "False", "\n", "", "", "", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.read_simulation_results": [[351, 409], ["fem_wrapper.AbaqusWrapper.simulation_store_path.joinpath", "fem_wrapper.AbaqusWrapper.joinpath", "fem_wrapper.AbaqusWrapper.joinpath", "pandas.read_csv", "pandas.read_csv", "fem_wrapper.AbaqusWrapper.result_dict.keys", "fem_wrapper.AbaqusWrapper.joinpath", "logging.info", "fem_wrapper.AbaqusWrapper.joinpath.exists", "fem_wrapper.AbaqusWrapper.joinpath.exists", "fem_wrapper.AbaqusWrapper.simulation_store_path.joinpath", "fem_wrapper.AbaqusWrapper.joinpath", "subprocess.check_output", "fem_wrapper.AbaqusWrapper.release_lock", "fem_wrapper.AbaqusWrapper.request_lock", "logging.warning", "time.sleep", "logging.warning", "logging.warning", "str", "e.output.decode", "logging.info", "re.search", "fem_wrapper.AbaqusWrapper._copy_restart_files", "fem_wrapper.AbaqusWrapper.run_simulation", "fem_wrapper.AbaqusWrapper.request_lock", "fem_wrapper.AbaqusWrapper.run_simulation", "fem_wrapper.AbaqusWrapper.release_lock", "fem_wrapper.AbaqusWrapper.read_simulation_results", "pathlib.Path().parent.joinpath", "re.search.start", "pathlib.Path", "re.search.end"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.release_lock", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.request_lock", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper._copy_restart_files", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.run_simulation", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.request_lock", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.run_simulation", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.release_lock", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.read_simulation_results"], ["", "def", "read_simulation_results", "(", "self", ",", "simulation_id", ",", "root_simulation_id", "=", "None", ")", ":", "\n", "        ", "if", "simulation_id", "in", "self", ".", "result_dict", ".", "keys", "(", ")", ":", "\n", "            ", "return", "self", ".", "result_dict", "[", "simulation_id", "]", "\n", "\n", "", "job_directory", "=", "self", ".", "simulation_store_path", ".", "joinpath", "(", "f'{simulation_id}'", ")", "\n", "\n", "node_csv", "=", "job_directory", ".", "joinpath", "(", "f'node_extract_{self.abaq_reader_version}.csv'", ")", "\n", "element_csv", "=", "job_directory", ".", "joinpath", "(", "f'element_extract_{self.abaq_reader_version}.csv'", ")", "\n", "\n", "# read out results from odb if not already done", "\n", "if", "not", "(", "node_csv", ".", "exists", "(", ")", "and", "element_csv", ".", "exists", "(", ")", ")", ":", "\n", "# create reader-script command", "\n", "            ", "reader_script", "=", "'AbaqReader.py'", "\n", "odb_path", "=", "job_directory", ".", "joinpath", "(", "f'{simulation_id}.odb'", ")", "\n", "read_cmd", "=", "[", "f'{self.abaq_command}'", ",", "'python'", ",", "reader_script", ",", "f'{odb_path}'", ",", "f'{job_directory}'", "]", "\n", "i", "=", "1", "\n", "if", "root_simulation_id", "is", "not", "None", ":", "\n", "                ", "while", "not", "self", ".", "request_lock", "(", "root_simulation_id", ",", "timeout_seconds", "=", "120", ")", ":", "\n", "                    ", "logging", ".", "warning", "(", "f'waiting for root-simulation lock release {root_simulation_id}'", ")", "\n", "time", ".", "sleep", "(", "2", "**", "i", ")", "\n", "i", "+=", "1", "\n", "\n", "", "root_job_directory", "=", "self", ".", "simulation_store_path", ".", "joinpath", "(", "root_simulation_id", ")", "\n", "root_odb_path", "=", "root_job_directory", ".", "joinpath", "(", "f'{root_simulation_id}.odb'", ")", "\n", "read_cmd", "+=", "[", "'--first_odb_path'", ",", "f'{root_odb_path}'", "]", "\n", "\n", "# execute reader", "\n", "", "logging", ".", "info", "(", "' '", ".", "join", "(", "read_cmd", ")", ")", "\n", "try", ":", "\n", "                ", "check_output", "(", "read_cmd", ",", "cwd", "=", "str", "(", "Path", "(", "__file__", ")", ".", "parent", ".", "joinpath", "(", "'simulation_scripts'", ")", ")", ",", "\n", "stderr", "=", "subprocess", ".", "STDOUT", ")", "\n", "", "except", "BaseException", "as", "e", ":", "\n", "                ", "logging", ".", "warning", "(", "e", ")", "\n", "logging", ".", "warning", "(", "e", ".", "output", ")", "\n", "if", "\"odb is from a more recent release of Abaqus\"", "in", "e", ".", "output", ".", "decode", "(", "\"utf-8\"", ")", ":", "\n", "                    ", "logging", ".", "info", "(", "f\"trying to rerun simulation {simulation_id} and root-simulation {root_simulation_id} !\"", ")", "\n", "\n", "# todo dirty base sim-id", "\n", "i", "=", "re", ".", "search", "(", "'_\\d+.\\d+__'", ",", "simulation_id", ")", "\n", "base_simulation_id", "=", "simulation_id", "[", ":", "i", ".", "start", "(", ")", "]", "+", "simulation_id", "[", "(", "i", ".", "end", "(", ")", "-", "2", ")", ":", "]", "\n", "self", ".", "_copy_restart_files", "(", "base_simulation_id", ",", "simulation_id", ")", "\n", "self", ".", "run_simulation", "(", "simulation_id", ",", "base_simulation_id", "=", "base_simulation_id", ",", "\n", "simfolder_prepared", "=", "True", ",", "visualize", "=", "False", ")", "\n", "\n", "self", ".", "request_lock", "(", "root_simulation_id", ")", "\n", "self", ".", "run_simulation", "(", "root_simulation_id", ",", "simfolder_prepared", "=", "True", ",", "visualize", "=", "False", ")", "\n", "self", ".", "release_lock", "(", "root_simulation_id", ")", "\n", "return", "self", ".", "read_simulation_results", "(", "simulation_id", ",", "root_simulation_id", "=", "root_simulation_id", ")", "\n", "\n", "", "", "if", "root_simulation_id", "is", "not", "None", ":", "\n", "                ", "self", ".", "release_lock", "(", "root_simulation_id", ")", "\n", "\n", "# import and return results", "\n", "", "", "node_data", "=", "pd", ".", "read_csv", "(", "node_csv", ",", "sep", "=", "'\\s*,\\s*'", ",", "index_col", "=", "None", ",", "engine", "=", "'python'", ")", "\n", "element_data", "=", "pd", ".", "read_csv", "(", "element_csv", ",", "sep", "=", "'\\s*,\\s*'", ",", "index_col", "=", "None", ",", "engine", "=", "'python'", ")", "\n", "\n", "self", ".", "result_dict", "[", "simulation_id", "]", "=", "(", "element_data", ",", "node_data", ")", "\n", "return", "element_data", ",", "node_data", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper.get_state_visualization": [[410, 419], ["fem_wrapper.AbaqusWrapper.simulation_store_path.joinpath", "fem_wrapper.AbaqusWrapper.joinpath", "fem_wrapper.AbaqusWrapper.joinpath.exists", "fem_wrapper.AbaqusWrapper._plot"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper._plot"], ["", "def", "get_state_visualization", "(", "self", ",", "simulation_id", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "job_directory", "=", "self", ".", "simulation_store_path", ".", "joinpath", "(", "f'{simulation_id}'", ")", "\n", "img_path", "=", "job_directory", ".", "joinpath", "(", "f'{simulation_id}.png'", ")", "\n", "if", "not", "img_path", ".", "exists", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "_plot", "(", "simulation_id", ")", "\n", "", "except", "SystemError", ":", "\n", "                ", "img_path", "=", "None", "\n", "", "", "return", "img_path", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.gym_fem.fem_wrapper.AbaqusWrapper._plot": [[420, 436], ["fem_wrapper.AbaqusWrapper.simulation_store_path.joinpath", "fem_wrapper.AbaqusWrapper.joinpath", "fem_wrapper.AbaqusWrapper.joinpath", "subprocess.check_output", "str", "logging.info", "logging.warning", "str", "pathlib.Path().parent.joinpath", "pathlib.Path"], "methods", ["None"], ["", "def", "_plot", "(", "self", ",", "simulation_id", ")", ":", "\n", "        ", "if", "simulation_id", "is", "None", ":", "\n", "            ", "raise", "SystemError", "\n", "\n", "", "job_directory", "=", "self", ".", "simulation_store_path", ".", "joinpath", "(", "f'{simulation_id}'", ")", "\n", "odb_path", "=", "job_directory", ".", "joinpath", "(", "f'{simulation_id}.odb'", ")", "\n", "img_path", "=", "job_directory", ".", "joinpath", "(", "f'{simulation_id}.png'", ")", "\n", "\n", "try", ":", "\n", "            ", "out", "=", "check_output", "(", "[", "self", ".", "abaq_command", ",", "'cae'", ",", "'noGUI=PlotLastFrame.py'", ",", "'--'", ",", "odb_path", ",", "img_path", "]", ",", "\n", "cwd", "=", "str", "(", "Path", "(", "__file__", ")", ".", "parent", ".", "joinpath", "(", "'simulation_scripts'", ")", ")", ")", "\n", "out", "=", "str", "(", "out", ")", "\n", "logging", ".", "info", "(", "out", ")", "\n", "", "except", "CalledProcessError", "as", "e", ":", "\n", "            ", "logging", ".", "warning", "(", "f\"State-Visualization not possible, CalledProcessError in visualization-script: {e}\"", ")", "\n", "raise", "SystemError", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.agents.random_agent.RandomAgent.__init__": [[12, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "action_space", ")", ":", "\n", "        ", "self", ".", "action_space", "=", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.agents.random_agent.RandomAgent.act": [[15, 17], ["random_agent.RandomAgent.action_space.sample"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "observation", ",", "reward", ",", "done", ")", ":", "\n", "        ", "return", "self", ".", "action_space", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing.__init__": [[49, 81], ["range", "gym_fem.fem_env.FEMEnv.__init__", "abaq_params.get", "gym_fem.fem_wrapper.AbaqusWrapper", "deep_drawing.DeepDrawing._simulation_id_templates.append", "pathlib.Path().parent.parent.joinpath", "pathlib.Path().parent.parent.joinpath", "abaq_params.get", "abaq_params.getint", "abaq_params.getint", "abaq_params.getint", "abaq_params.getboolean", "abaq_params.getboolean", "range", "pathlib.Path", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawingMORLWrapper.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_simulation_id_templates", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "TIME_STEPS", ")", ":", "\n", "            ", "bhf_string", "=", "'_'", ".", "join", "(", "[", "f'{{BHF_{j}}}'", "for", "j", "in", "range", "(", "i", "+", "1", ")", "]", ")", "\n", "s", "=", "f'BHF-{bhf_string}__FRIC-{{FRIC}}'", "\n", "self", ".", "_simulation_id_templates", ".", "append", "(", "s", ")", "\n", "\n", "", "self", ".", "_current_conditions", "=", "None", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "abaq_params", "=", "self", ".", "config", "[", "'abaqus parameters'", "]", "\n", "if", "self", ".", "SIM_BASIS", "is", "not", "None", ":", "\n", "            ", "template_folder", "=", "Path", "(", "__file__", ")", ".", "parent", ".", "parent", ".", "joinpath", "(", "f'assets/abaqus_models/{self.SIM_BASIS}'", ")", "\n", "", "else", ":", "\n", "            ", "template_folder", "=", "Path", "(", "__file__", ")", ".", "parent", ".", "parent", ".", "joinpath", "(", "f'assets/abaqus_models/{self.ENV_ID}'", ")", "\n", "\n", "", "solver_path", "=", "abaq_params", ".", "get", "(", "'solver_path'", ")", "\n", "if", "solver_path", "in", "[", "''", ",", "'None'", "]", ":", "\n", "            ", "solver_path", "=", "None", "\n", "\n", "", "self", ".", "_fem_wrapper", "=", "AbaqusWrapper", "(", "self", ".", "sim_storage", ",", "\n", "template_folder", ",", "\n", "solver_path", ",", "\n", "abaq_params", ".", "get", "(", "'abaq_version'", ")", ",", "\n", "abaq_params", ".", "getint", "(", "'cpu_kernels'", ",", "fallback", "=", "4", ")", ",", "\n", "abaq_params", ".", "getint", "(", "'timeout'", ",", "fallback", "=", "300", ")", ",", "\n", "abaq_params", ".", "getint", "(", "'reader_version'", ",", "fallback", "=", "0", ")", ",", "\n", "abq_forcekill", "=", "abaq_params", ".", "getboolean", "(", "'forcekill'", ",", "fallback", "=", "False", ")", ",", "\n", "check_version", "=", "abaq_params", ".", "getboolean", "(", "'check_sim_result_abq_version'", ",", "fallback", "=", "False", ")", ")", "\n", "self", ".", "_bypassed_fric", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing.step": [[82, 86], ["super().step"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawingMORLWrapper.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "action", "=", "self", ".", "action_values", "[", "action", "]", "\n", "self", ".", "info", "[", "f'bhf'", "]", "=", "action", "\n", "return", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing.reset": [[87, 90], ["super().reset", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.StressOffsetStateDeepDrawing.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", ")", "\n", "return", "np", ".", "zeros", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing._sample_process_conditions": [[91, 108], ["deep_drawing.DeepDrawing._np_random_state.beta", "math.ceil"], "methods", ["None"], ["", "def", "_sample_process_conditions", "(", "self", ")", ":", "\n", "        ", "\"\"\" to be implemented by special FEMEnv instance\n        Returns:\n            process-conditions (dict):\n                dictionary with process-conditions (Keys used have to be identical with abaq-template keys)\n        \"\"\"", "\n", "if", "self", ".", "time_step", "==", "0", ":", "\n", "            ", "if", "self", ".", "_bypassed_fric", "is", "not", "None", ":", "\n", "                ", "friction", "=", "self", ".", "_bypassed_fric", "\n", "", "else", ":", "\n", "                ", "friction", "=", "self", ".", "_np_random_state", ".", "beta", "(", "1.75", ",", "5", ")", "\n", "# scale", "\n", "friction", "=", "friction", "*", "0.14", "\n", "# bin", "\n", "friction", "=", "math", ".", "ceil", "(", "friction", "/", "0.014", ")", "*", "0.014", "\n", "", "self", ".", "_current_conditions", "=", "{", "'FRIC'", ":", "friction", "}", "\n", "", "return", "self", ".", "_current_conditions", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing.bypass_fric": [[109, 112], ["None"], "methods", ["None"], ["", "def", "bypass_fric", "(", "self", ",", "fric", ")", ":", "\n", "# Enables bypassing friction-values for data-samping purposes", "\n", "        ", "self", ".", "_bypassed_fric", "=", "fric", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing._calc_normalized_mises_l2": [[113, 123], ["list", "float", "numpy.linalg.norm"], "methods", ["None"], ["", "def", "_calc_normalized_mises_l2", "(", "self", ",", "element_data", ")", ":", "\n", "        ", "\"\"\"\n        @param element_data: EM element output format, required: MISES\n        @type element_data: pandas.DataFrame\n        @return: l2 norm of v. mises stresses for given data\n        @rtype: float_\n        \"\"\"", "\n", "v_mises_stresses", "=", "list", "(", "element_data", "[", "'MISES'", "]", ")", "\n", "return", "(", "np", ".", "linalg", ".", "norm", "(", "v_mises_stresses", ",", "ord", "=", "2", ")", "-", "self", ".", "_MIN_MISES_L2", ")", "/", "float", "(", "\n", "self", ".", "_MAX_MISES_L2", "-", "self", ".", "_MIN_MISES_L2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing._calc_normalized_mean_feeding": [[124, 134], ["list", "numpy.mean", "node_data[].isin"], "methods", ["None"], ["", "def", "_calc_normalized_mean_feeding", "(", "self", ",", "node_data", ")", ":", "\n", "        ", "\"\"\"\n        @param node_data: FEM node output format, required: INSTANCE, NODE_ID, X_OFFSET\n        @type node_data: pandas.DataFrame\n        @return: mean feeding-length for given data\n        @rtype: float\n        \"\"\"", "\n", "feeding", "=", "list", "(", "node_data", "[", "(", "node_data", "[", "'INSTANCE'", "]", "==", "'BLECH'", ")", "&", "\n", "(", "node_data", "[", "'NODE_ID'", "]", ".", "isin", "(", "self", ".", "_BLANK_RIGHTMOST_NODES", ")", ")", "]", "[", "'X_OFFSET'", "]", ")", "\n", "return", "(", "np", ".", "mean", "(", "feeding", ")", "-", "self", ".", "_MIN_FEEDING", ")", "/", "(", "self", ".", "_MAX_FEEDING", "-", "self", ".", "_MIN_FEEDING", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing._calc_normalized_min_thickness": [[135, 152], ["min", "numpy.linalg.norm", "float", "float", "float", "float"], "methods", ["None"], ["", "def", "_calc_normalized_min_thickness", "(", "self", ",", "node_data", ")", ":", "\n", "        ", "\"\"\"\n        @param node_data: FEM node output format, required: INSTANCE, NODE_ID, X_COORD, Y_COORD\n        @type node_data: pandas.DataFrame\n        @return: blank thickness on thinnest spot\n        @rtype: float\n        \"\"\"", "\n", "min_thickness", "=", "np", ".", "inf", "\n", "for", "a", ",", "b", "in", "self", ".", "_BLANK_THICKNESS_NODE_PAIRS", ":", "\n", "            ", "node_a", "=", "node_data", "[", "(", "node_data", "[", "'INSTANCE'", "]", "==", "'BLECH'", ")", "&", "(", "node_data", "[", "'NODE_ID'", "]", "==", "a", ")", "]", "\n", "node_b", "=", "node_data", "[", "(", "node_data", "[", "'INSTANCE'", "]", "==", "'BLECH'", ")", "&", "(", "node_data", "[", "'NODE_ID'", "]", "==", "b", ")", "]", "\n", "diff_vec", "=", "(", "float", "(", "node_a", "[", "'X_COORD'", "]", ")", "-", "float", "(", "node_b", "[", "'X_COORD'", "]", ")", ",", "\n", "float", "(", "node_a", "[", "'Y_COORD'", "]", ")", "-", "float", "(", "node_b", "[", "'Y_COORD'", "]", ")", ")", "\n", "min_thickness", "=", "min", "(", "np", ".", "linalg", ".", "norm", "(", "diff_vec", ")", ",", "min_thickness", ")", "\n", "\n", "", "return", "(", "min_thickness", "-", "self", ".", "_MIN_THICKNESS_L_NEGINF", ")", "/", "(", "\n", "self", ".", "_MAX_THICKNESS_L_NEGINF", "-", "self", ".", "_MIN_THICKNESS_L_NEGINF", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing._apply_reward_function": [[153, 179], ["deep_drawing.DeepDrawing._calc_normalized_min_thickness", "deep_drawing.DeepDrawing.info.update", "any", "deep_drawing.DeepDrawing.info.update", "deep_drawing.DeepDrawing._calc_normalized_mises_l2", "deep_drawing.DeepDrawing._calc_normalized_mean_feeding", "scipy.stats.hmean"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing._calc_normalized_min_thickness", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing._calc_normalized_mises_l2", "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing._calc_normalized_mean_feeding"], ["", "def", "_apply_reward_function", "(", "self", ",", "fem_results", ",", "done", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            fem_results (tuple): tuple of pandas dataframes for element-wise- and node-wise results\n        Returns:\n            observation (object): reward for given simulation results\n        \"\"\"", "\n", "if", "not", "done", ":", "\n", "            ", "self", ".", "info", ".", "update", "(", "{", "'rt_v_mises'", ":", "0.0", ",", "\n", "'rt_thickness'", ":", "0.0", ",", "\n", "'rt_feeding'", ":", "0.0", "}", ")", "\n", "return", "0.0", "\n", "\n", "", "element_data", ",", "node_data", "=", "fem_results", "\n", "\n", "v_mises_reward", "=", "1.0", "-", "self", ".", "_calc_normalized_mises_l2", "(", "element_data", ")", "\n", "thickness_reward", "=", "self", ".", "_calc_normalized_min_thickness", "(", "node_data", ")", "\n", "feeding_reward", "=", "1.0", "-", "self", ".", "_calc_normalized_mean_feeding", "(", "node_data", ")", "\n", "\n", "self", ".", "info", ".", "update", "(", "{", "'rt_v_mises'", ":", "v_mises_reward", ",", "\n", "'rt_thickness'", ":", "thickness_reward", ",", "\n", "'rt_feeding'", ":", "feeding_reward", "}", ")", "\n", "\n", "if", "any", "(", "[", "v_mises_reward", "<", "0.0", ",", "thickness_reward", "<", "0.0", ",", "feeding_reward", "<", "0.0", "]", ")", ":", "\n", "            ", "return", "0", "\n", "", "return", "stats", ".", "hmean", "(", "[", "v_mises_reward", ",", "thickness_reward", ",", "feeding_reward", "]", ")", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing._apply_observation_function": [[180, 212], ["[].mean", "max", "deep_drawing.DeepDrawing.info.update", "numpy.array", "numpy.zeros", "deep_drawing.DeepDrawing._np_random_state.normal", "deep_drawing.DeepDrawing._np_random_state.normal", "deep_drawing.DeepDrawing._np_random_state.normal"], "methods", ["None"], ["", "def", "_apply_observation_function", "(", "self", ",", "fem_results", ")", ":", "\n", "        ", "\"\"\" to be implemented by special FEMEnv instance\n        Args:\n            fem_results (tuple): tuple of pandas dataframes for element-wise- and node-wise results\n        Returns:\n            observation (np.array): observation vector for given simulation results\n        \"\"\"", "\n", "if", "fem_results", "is", "None", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "3", ")", "\n", "", "element_data", ",", "node_data", "=", "fem_results", "\n", "\"\"\" stamp force \"\"\"", "\n", "stamp_force", "=", "node_data", "[", "node_data", "[", "'INSTANCE'", "]", "==", "'STEMPEL'", "]", "[", "'TOTAL_FORCE_2'", "]", ".", "values", "[", "0", "]", "\n", "o_stamp_force", "=", "(", "self", ".", "_np_random_state", ".", "normal", "(", "stamp_force", ",", "self", ".", "_STAMP_FORCE_STDV", ",", "1", ")", "[", "0", "]", ")", "\n", "\n", "\"\"\" blank offset \"\"\"", "\n", "# mean offset in x direction for rightmost nodes", "\n", "blank_offset", "=", "node_data", "[", "node_data", "[", "'INSTANCE'", "]", "==", "'BLECH'", "]", "[", "'X_OFFSET'", "]", ".", "mean", "(", ")", "\n", "o_blank_offset", "=", "(", "self", ".", "_np_random_state", ".", "normal", "(", "blank_offset", ",", "self", ".", "_BLANK_OFFSET_STDV", ",", "1", ")", "[", "0", "]", ")", "\n", "\n", "\"\"\" blank holder offset \"\"\"", "\n", "bh_offset", "=", "node_data", "[", "node_data", "[", "'INSTANCE'", "]", "==", "'NIEDERHALTER'", "]", "[", "'Y_OFFSET'", "]", ".", "values", "[", "0", "]", "\n", "clipped_bh_offset", "=", "max", "(", "bh_offset", ",", "-", "0.25", ")", "\n", "o_bh_offset", "=", "(", "self", ".", "_np_random_state", ".", "normal", "(", "clipped_bh_offset", ",", "self", ".", "_BH_OFFSET_STDV", ",", "1", ")", "[", "0", "]", ")", "\n", "\n", "self", ".", "info", ".", "update", "(", "{", "f'ao_stamp_force'", ":", "stamp_force", ",", "\n", "f'ao_blank_offset'", ":", "blank_offset", ",", "\n", "f'ao_bh_offset'", ":", "bh_offset", ",", "\n", "f'o_stamp_force'", ":", "o_stamp_force", ",", "\n", "f'o_blank_offset'", ":", "o_blank_offset", ",", "\n", "f'o_bh_offset'", ":", "o_bh_offset", "}", ")", "\n", "\n", "return", "np", ".", "array", "(", "[", "o_stamp_force", ",", "o_blank_offset", ",", "o_bh_offset", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawing._is_done": [[213, 215], ["None"], "methods", ["None"], ["", "def", "_is_done", "(", "self", ",", "state", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "time_step", "==", "self", ".", "TIME_STEPS", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.StressStateDeepDrawing._apply_observation_function": [[227, 238], ["numpy.array().reshape", "numpy.zeros", "len", "numpy.array"], "methods", ["None"], ["def", "_apply_observation_function", "(", "self", ",", "fem_results", ")", ":", "\n", "            ", "if", "fem_results", "==", "None", ":", "\n", "                ", "return", "np", ".", "zeros", "(", "(", "5", ",", "80", ",", "1", ")", ")", "\n", "", "element_data", ",", "node_data", "=", "fem_results", "\n", "# read out blank stresses", "\n", "mises", "=", "element_data", "[", "'MISES'", "]", "\n", "# Bring into form of a 2d-field", "\n", "assert", "len", "(", "mises", ")", "==", "400", "\n", "mises", "=", "np", ".", "array", "(", "mises", ")", ".", "reshape", "(", "(", "5", ",", "80", ")", ")", "\n", "mises", "=", "(", "mises", "-", "self", ".", "MIN_MISES", ")", "/", "(", "self", ".", "MAX_MISES", "-", "self", ".", "MIN_MISES", ")", "*", "256", "\n", "return", "mises", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.StressStateDeepDrawing.reset": [[239, 242], ["deep_drawing.DeepDrawing.reset", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.StressOffsetStateDeepDrawing.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "            ", "super", "(", ")", ".", "reset", "(", ")", "\n", "return", "np", ".", "zeros", "(", "shape", "=", "(", "5", ",", "80", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.StressOffsetStateDeepDrawing._apply_observation_function": [[258, 282], ["scipy.signal.convolve2d", "scipy.signal.convolve2d", "numpy.moveaxis", "numpy.zeros", "len", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.stack", "numpy.ones", "numpy.ones", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["def", "_apply_observation_function", "(", "self", ",", "fem_results", ")", ":", "\n", "            ", "if", "fem_results", "==", "None", ":", "\n", "                ", "return", "np", ".", "zeros", "(", "(", "5", ",", "80", ",", "3", ")", ")", "\n", "", "element_data", ",", "node_data", "=", "fem_results", "\n", "# read out blank stresses", "\n", "mises", "=", "element_data", "[", "'MISES'", "]", "\n", "# Bring into form of a 2d-field", "\n", "assert", "len", "(", "mises", ")", "==", "400", "\n", "mises", "=", "np", ".", "array", "(", "mises", ")", ".", "reshape", "(", "(", "5", ",", "80", ")", ")", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "# x offset", "\n", "blank_nodes", "=", "node_data", "[", "node_data", "[", "'INSTANCE'", "]", "==", "'BLECH'", "]", "\n", "x_offset", "=", "np", ".", "array", "(", "blank_nodes", "[", "'X_OFFSET'", "]", ")", ".", "reshape", "(", "(", "6", ",", "81", ")", ")", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "x_offset", "=", "convolve2d", "(", "x_offset", ",", "np", ".", "ones", "(", "(", "2", ",", "2", ")", ")", "*", "0.25", ",", "mode", "=", "'valid'", ")", "\n", "# y offset", "\n", "y_offset", "=", "np", ".", "array", "(", "blank_nodes", "[", "'Y_OFFSET'", "]", ")", ".", "reshape", "(", "(", "6", ",", "81", ")", ")", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "y_offset", "=", "convolve2d", "(", "y_offset", ",", "np", ".", "ones", "(", "(", "2", ",", "2", ")", ")", "*", "0.25", ",", "mode", "=", "'valid'", ")", "\n", "\n", "# scale and clip to 0,255 to be used with standard drl frameworks", "\n", "mises", "=", "(", "mises", "-", "self", ".", "MIN_MISES", ")", "/", "(", "self", ".", "MAX_MISES", "-", "self", ".", "MIN_MISES", ")", "*", "256", "\n", "x_offset", "=", "(", "x_offset", "-", "self", ".", "MIN_X_OFFSET", ")", "/", "(", "self", ".", "MAX_X_OFFSET", "-", "self", ".", "MIN_X_OFFSET", ")", "*", "256", "\n", "y_offset", "=", "(", "y_offset", "-", "self", ".", "MIN_Y_OFFSET", ")", "/", "(", "self", ".", "MAX_Y_OFFSET", "-", "self", ".", "MIN_Y_OFFSET", ")", "*", "256", "\n", "o", "=", "np", ".", "moveaxis", "(", "np", ".", "stack", "(", "[", "mises", ",", "x_offset", ",", "y_offset", "]", ")", ",", "0", ",", "-", "1", ")", "\n", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.StressOffsetStateDeepDrawing.reset": [[283, 286], ["deep_drawing.DeepDrawing.reset", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.StressOffsetStateDeepDrawing.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "            ", "super", "(", ")", ".", "reset", "(", ")", "\n", "return", "np", ".", "zeros", "(", "shape", "=", "(", "5", ",", "80", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawingMORLWrapper.__init__": [[289, 295], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawingMORLWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "r_terms", ",", "prohibit_negative_rewards", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "for", "r_term", "in", "r_terms", ":", "\n", "            ", "assert", "r_term", "in", "[", "'rt_feeding'", ",", "'rt_thickness'", ",", "'rt_v_mises'", "]", "\n", "", "self", ".", "r_terms", "=", "r_terms", "\n", "self", ".", "prohibit_negatives", "=", "prohibit_negative_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawingMORLWrapper.step": [[296, 302], ["deep_drawing.DeepDrawingMORLWrapper.env.step", "numpy.array", "numpy.any", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.johannes-dornheim_Reinforce-FE.envs.deep_drawing.DeepDrawingMORLWrapper.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "o", ",", "r", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "r", "=", "np", ".", "array", "(", "[", "info", "[", "r_term", "]", "for", "r_term", "in", "self", ".", "r_terms", "]", ")", "\n", "if", "self", ".", "prohibit_negatives", "and", "np", ".", "any", "(", "r", "<", "0", ")", ":", "\n", "            ", "r", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "r_terms", ")", ")", "\n", "", "return", "o", ",", "r", ",", "done", ",", "info", "\n", "\n"]]}