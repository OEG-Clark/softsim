{"home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.data_loader.load_file": [[9, 34], ["path.strip.strip", "os.path.isfile", "IOError", "path.strip.split", "nibabel.load", "numpy.array().astype", "numpy.genfromtxt", "PIL.Image.open", "numpy.array", "numpy.array"], "function", ["None"], ["def", "load_file", "(", "path", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "# Since there are some errors for catching exception, now just use if", "\n", "    ", "path", "=", "path", ".", "strip", "(", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "path", ")", ",", "'File {} not found!'", ".", "format", "(", "path", ")", "\n", "suffix", "=", "path", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "# Nifty load", "\n", "if", "suffix", "in", "[", "'gz'", ",", "'nii'", "]", ":", "\n", "        ", "data", "=", "nib", ".", "load", "(", "path", ")", "\n", "return", "np", ".", "array", "(", "data", ".", "dataobj", ")", ".", "astype", "(", "dtype", ")", "\n", "\n", "# text to ndarray", "\n", "", "if", "suffix", "==", "'txt'", ":", "\n", "        ", "data", "=", "np", ".", "genfromtxt", "(", "path", ",", "dtype", ")", "\n", "return", "data", "\n", "\n", "# PIL load", "\n", "", "try", ":", "\n", "        ", "data", "=", "Image", ".", "open", "(", "path", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "array", "(", "data", ",", "dtype", ")", "\n", "\n", "\n", "", "raise", "IOError", "(", "'Invalid data type: {}'", "%", "path", ")", "", "", ""]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_saver.save_str": [[7, 10], ["open", "f.write", "utils.util.dict_to_str"], "function", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_to_str"], ["def", "save_str", "(", "data_dict", ",", "filename", ",", "idx", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'a+'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'{}: {}\\n'", ".", "format", "(", "idx", ",", "U", ".", "dict_to_str", "(", "data_dict", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_saver.save_img": [[11, 20], ["os.path.exists", "os.makedirs", "numpy.concatenate", "PIL.Image.fromarray().save", "PIL.Image.fromarray"], "function", ["None"], ["", "", "def", "save_img", "(", "data_dict", ",", "filepath", ",", "idx", ")", ":", "\n", "    ", "if", "data_dict", "is", "None", "or", "not", "data_dict", ":", "\n", "        ", "return", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "filepath", ")", "\n", "", "for", "k", "in", "data_dict", ":", "\n", "        ", "imgs", "=", "data_dict", "[", "k", "]", "\n", "imgs", "=", "np", ".", "concatenate", "(", "imgs", ",", "0", ")", "\n", "Image", ".", "fromarray", "(", "imgs", ")", ".", "save", "(", "'{}/idx_{}_{}.png'", ".", "format", "(", "filepath", ",", "idx", ",", "k", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.process_methods.min_max": [[10, 13], ["numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["def", "min_max", "(", "x", ")", ":", "\n", "    ", "_x", "=", "(", "x", "-", "np", ".", "min", "(", "x", ")", ")", "/", "(", "np", ".", "max", "(", "x", ")", "-", "np", ".", "min", "(", "x", ")", ")", "\n", "return", "_x", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.process_methods.zero_mean": [[14, 17], ["numpy.std", "numpy.mean"], "function", ["None"], ["", "def", "zero_mean", "(", "x", ")", ":", "\n", "    ", "_x", "=", "(", "x", "-", "np", ".", "mean", "(", "x", ")", ")", "/", "np", ".", "std", "(", "x", ")", "\n", "return", "_x", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.process_methods.median_mean": [[18, 21], ["numpy.std", "numpy.median"], "function", ["None"], ["", "def", "median_mean", "(", "x", ")", ":", "\n", "    ", "_x", "=", "(", "x", "-", "np", ".", "median", "(", "x", ")", ")", "/", "np", ".", "std", "(", "x", ")", "\n", "return", "_x", "\n", "# ----------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.process_methods.one_hot": [[24, 40], ["type", "numpy.zeros", "range", "type", "numpy.zeros", "numpy.round", "range", "Exception", "numpy.max", "numpy.min", "list", "numpy.min", "numpy.min", "len", "numpy.all", "list", "len"], "function", ["None"], ["", "def", "one_hot", "(", "x", ",", "n_class", ")", ":", "\n", "    ", "if", "type", "(", "n_class", ")", "is", "int", ":", "\n", "        ", "class_interval", "=", "(", "np", ".", "max", "(", "x", ")", "-", "np", ".", "min", "(", "x", ")", ")", "/", "(", "n_class", "-", "1", ")", "\n", "x_", "=", "np", ".", "zeros", "(", "list", "(", "x", ".", "shape", ")", "+", "[", "n_class", "]", ")", "\n", "for", "i", "in", "range", "(", "n_class", ")", ":", "\n", "            ", "cur_baseline", "=", "np", ".", "min", "(", "x", ")", "+", "class_interval", "*", "(", "i", "-", "0.5", ")", "\n", "cur_topline", "=", "np", ".", "min", "(", "x", ")", "+", "class_interval", "*", "(", "i", "+", "0.5", ")", "\n", "x_", "[", "...", ",", "i", "]", "[", "np", ".", "all", "(", "[", "x", ">=", "cur_baseline", ",", "x", "<", "cur_topline", "]", ",", "0", ")", "]", "=", "1", "\n", "", "", "elif", "type", "(", "n_class", ")", "in", "[", "list", ",", "tuple", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "x_", "=", "np", ".", "zeros", "(", "list", "(", "x", ".", "shape", ")", "+", "[", "len", "(", "n_class", ")", "]", ")", "\n", "rx", "=", "np", ".", "round", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "n_class", ")", ")", ":", "\n", "            ", "x_", "[", "...", ",", "i", "]", "[", "rx", "==", "n_class", "[", "i", "]", "]", "=", "1", "\n", "", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Wrong type of n_class.'", ")", "\n", "", "return", "x_", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.process_methods.channel_check": [[41, 47], ["numpy.reshape", "list"], "function", ["None"], ["", "def", "channel_check", "(", "x", ",", "n_channel", ")", ":", "\n", "    ", "_x", "=", "x", "\n", "if", "x", ".", "shape", "[", "-", "1", "]", "!=", "n_channel", ":", "\n", "        ", "assert", "n_channel", "==", "1", "and", "x", ".", "shape", "[", "-", "1", "]", "!=", "3", ",", "'Expect channel {}, actual shape {}.'", ".", "format", "(", "n_channel", ",", "x", ".", "shape", ")", "\n", "_x", "=", "np", ".", "reshape", "(", "x", ",", "list", "(", "x", ".", "shape", ")", "+", "[", "1", "]", ")", "\n", "", "return", "_x", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.process_methods.rgb2gray": [[51, 55], ["numpy.dot"], "function", ["None"], ["", "def", "rgb2gray", "(", "x", ")", ":", "\n", "    ", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "3", ",", "'Not RGB image!'", "\n", "_x", "=", "np", ".", "dot", "(", "x", "[", "...", ",", ":", "3", "]", ",", "[", "0.299", ",", "0.587", ",", "0.114", "]", ")", "\n", "return", "_x", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.process_methods.resize2d": [[56, 61], ["cv2.resize"], "function", ["None"], ["", "def", "resize2d", "(", "x", ",", "new_size", ")", ":", "\n", "    ", "if", "new_size", "is", "None", ":", "\n", "        ", "return", "x", "\n", "", "_x", "=", "cv2", ".", "resize", "(", "x", ",", "new_size", "[", ":", ":", "-", "1", "]", ")", "\n", "return", "_x", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.process_methods.resize3d": [[62, 72], ["scipy.zoom", "numpy.all", "numpy.array"], "function", ["None"], ["", "def", "resize3d", "(", "x", ",", "new_size", ")", ":", "\n", "    ", "if", "new_size", "is", "None", ":", "\n", "        ", "return", "x", "\n", "", "sx", "=", "x", ".", "shape", "[", "0", "]", "\n", "sy", "=", "x", ".", "shape", "[", "1", "]", "\n", "sz", "=", "x", ".", "shape", "[", "2", "]", "\n", "zoom", "=", "[", "new_size", "[", "0", "]", "/", "sx", ",", "new_size", "[", "1", "]", "/", "sy", ",", "new_size", "[", "2", "]", "/", "sz", "]", "\n", "_x", "=", "nd", ".", "zoom", "(", "x", ",", "zoom", "=", "zoom", ")", "\n", "assert", "np", ".", "all", "(", "_x", ".", "shape", "[", "0", ":", "3", "]", "==", "np", ".", "array", "(", "new_size", ")", ")", ",", "'Fail to resize 3d image: expect {}, got {}.'", ".", "format", "(", "new_size", ",", "_x", ".", "shape", "[", "0", ":", "3", "]", ")", "\n", "return", "_x", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.process_methods.dencecrf": [[73, 104], ["numpy.array", "numpy.array", "np.transpose.reshape", "numpy.transpose", "dcrf.DenseCRF", "dcrf.DenseCRF.setUnaryEnergy", "create_pairwise_gaussian", "create_pairwise_bilateral", "dcrf.DenseCRF.addPairwiseEnergy", "dcrf.DenseCRF.addPairwiseEnergy", "dcrf.DenseCRF.inference", "numpy.transpose", "numpy.reshape", "len", "len", "numpy.prod", "np.transpose.copy", "len"], "function", ["None"], ["", "def", "dencecrf", "(", "x", ",", "y", ",", "nlabels", ",", "w1", ",", "w2", ",", "alpha", ",", "beta", ",", "gamma", ",", "iteration", "=", "5", ")", ":", "\n", "\n", "    ", "_x", "=", "np", ".", "array", "(", "x", ")", "\n", "_y", "=", "np", ".", "array", "(", "y", ",", "np", ".", "float32", ")", "\n", "\n", "assert", "len", "(", "_x", ".", "shape", ")", "==", "len", "(", "_y", ".", "shape", ")", ",", "'Shape of x and y should be (..., nchannels), (..., nlabels)'", "\n", "assert", "_y", ".", "shape", "[", "-", "1", "]", "==", "nlabels", ",", "'Expect y.shape (...,{}), got {}'", ".", "format", "(", "nlabels", ",", "_y", ".", "shape", ")", "\n", "\n", "_y", "=", "_y", ".", "reshape", "(", "(", "-", "1", ",", "nlabels", ")", ")", "\n", "_y", "=", "np", ".", "transpose", "(", "_y", ",", "(", "1", ",", "0", ")", ")", "\n", "\n", "d", "=", "dcrf", ".", "DenseCRF", "(", "np", ".", "prod", "(", "_x", ".", "shape", "[", "0", ":", "-", "1", "]", ")", ",", "nlabels", ")", "\n", "d", ".", "setUnaryEnergy", "(", "_y", ".", "copy", "(", "order", "=", "'C'", ")", ")", "\n", "\n", "imgdim", "=", "len", "(", "_x", ".", "shape", ")", "-", "1", "\n", "\n", "gamma", "=", "(", "gamma", ",", ")", "*", "imgdim", "\n", "alpha", "=", "(", "alpha", ",", ")", "*", "imgdim", "\n", "beta", "=", "(", "beta", ",", ")", "*", "_x", ".", "shape", "[", "-", "1", "]", "\n", "\n", "featG", "=", "create_pairwise_gaussian", "(", "gamma", ",", "_x", ".", "shape", "[", "0", ":", "-", "1", "]", ")", "# g", "\n", "featB", "=", "create_pairwise_bilateral", "(", "alpha", ",", "beta", ",", "_x", ",", "imgdim", ")", "#a b", "\n", "\n", "d", ".", "addPairwiseEnergy", "(", "featG", ",", "w2", ")", "# w2", "\n", "d", ".", "addPairwiseEnergy", "(", "featB", ",", "w1", ")", "# w1", "\n", "\n", "out", "=", "d", ".", "inference", "(", "iteration", ")", "\n", "out", "=", "np", ".", "transpose", "(", "out", ",", "(", "1", ",", "0", ")", ")", "\n", "out", "=", "np", ".", "reshape", "(", "out", ",", "y", ".", "shape", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.softmax": [[5, 8], ["numpy.exp", "numpy.sum", "numpy.max"], "function", ["None"], ["def", "softmax", "(", "prob_map", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "e", "=", "np", ".", "exp", "(", "prob_map", "-", "np", ".", "max", "(", "prob_map", ")", ")", "\n", "return", "e", "/", "np", ".", "sum", "(", "e", ",", "axis", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.cross_entropy": [[9, 13], ["tuple", "numpy.ndim", "range", "numpy.sum", "numpy.ndim", "numpy.log"], "function", ["None"], ["", "def", "cross_entropy", "(", "pred", ",", "gt", ",", "epsilon", "=", "1e-9", ")", ":", "\n", "    ", "axis", "=", "tuple", "(", "range", "(", "np", ".", "ndim", "(", "pred", ")", "-", "1", ")", ")", "if", "np", ".", "ndim", "(", "pred", ")", ">", "1", "else", "-", "1", "\n", "ce", "=", "-", "np", ".", "sum", "(", "gt", "*", "np", ".", "log", "(", "pred", "+", "epsilon", ")", ",", "axis", ")", "/", "pred", ".", "shape", "[", "0", "]", "\n", "return", "ce", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.mean_squared_error": [[14, 19], ["numpy.mean", "numpy.ndim", "numpy.expand_dims", "numpy.square"], "function", ["None"], ["", "def", "mean_squared_error", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "if", "np", ".", "ndim", "(", "gt", ")", "<", "2", ":", "\n", "        ", "gt", "=", "np", ".", "expand_dims", "(", "gt", ",", "-", "1", ")", "\n", "", "mse", "=", "np", ".", "mean", "(", "np", ".", "square", "(", "pred", "-", "gt", ")", ",", "-", "1", ")", "\n", "return", "mse", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.true_positive": [[20, 23], ["numpy.sum", "tuple", "numpy.logical_and", "numpy.ndim", "range", "numpy.ndim"], "function", ["None"], ["", "def", "true_positive", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "axis", "=", "tuple", "(", "range", "(", "1", ",", "np", ".", "ndim", "(", "pred", ")", "-", "1", ")", ")", "if", "np", ".", "ndim", "(", "pred", ")", ">", "1", "else", "-", "1", "\n", "return", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "pred", "==", "1", ",", "gt", "==", "1", ")", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.true_negative": [[24, 27], ["numpy.sum", "tuple", "numpy.logical_and", "numpy.ndim", "range", "numpy.ndim"], "function", ["None"], ["", "def", "true_negative", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "axis", "=", "tuple", "(", "range", "(", "1", ",", "np", ".", "ndim", "(", "pred", ")", "-", "1", ")", ")", "if", "np", ".", "ndim", "(", "pred", ")", ">", "1", "else", "-", "1", "\n", "return", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "pred", "==", "0", ",", "gt", "==", "0", ")", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.false_positive": [[28, 31], ["numpy.sum", "tuple", "numpy.logical_and", "numpy.ndim", "range", "numpy.ndim"], "function", ["None"], ["", "def", "false_positive", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "axis", "=", "tuple", "(", "range", "(", "1", ",", "np", ".", "ndim", "(", "pred", ")", "-", "1", ")", ")", "if", "np", ".", "ndim", "(", "pred", ")", ">", "1", "else", "-", "1", "\n", "return", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "pred", "==", "1", ",", "gt", "==", "0", ")", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.false_negative": [[32, 35], ["numpy.sum", "tuple", "numpy.logical_and", "numpy.ndim", "range", "numpy.ndim"], "function", ["None"], ["", "def", "false_negative", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "axis", "=", "tuple", "(", "range", "(", "1", ",", "np", ".", "ndim", "(", "pred", ")", "-", "1", ")", ")", "if", "np", ".", "ndim", "(", "pred", ")", ">", "1", "else", "-", "1", "\n", "return", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "pred", "==", "0", ",", "gt", "==", "1", ")", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.precision": [[36, 40], ["eval_methods.true_positive", "eval_methods.false_positive"], "function", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.true_positive", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.false_positive"], ["", "def", "precision", "(", "pred", ",", "gt", ",", "epsilon", "=", "1e-9", ")", ":", "\n", "    ", "tp", "=", "true_positive", "(", "pred", ",", "gt", ")", "\n", "fp", "=", "false_positive", "(", "pred", ",", "gt", ")", "\n", "return", "tp", "/", "(", "tp", "+", "fp", "+", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.recall": [[41, 45], ["eval_methods.true_positive", "eval_methods.false_negative"], "function", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.true_positive", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.false_negative"], ["", "def", "recall", "(", "pred", ",", "gt", ",", "epsilon", "=", "1e-9", ")", ":", "\n", "    ", "tp", "=", "true_positive", "(", "pred", ",", "gt", ")", "\n", "fn", "=", "false_negative", "(", "pred", ",", "gt", ")", "\n", "return", "tp", "/", "(", "tp", "+", "fn", "+", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.sensitivity": [[46, 48], ["eval_methods.recall"], "function", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.recall"], ["", "def", "sensitivity", "(", "pred", ",", "gt", ",", "epsilon", "=", "1e-9", ")", ":", "\n", "    ", "return", "recall", "(", "pred", ",", "gt", ",", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.specificity": [[49, 53], ["eval_methods.true_negative", "eval_methods.false_positive"], "function", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.true_negative", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.false_positive"], ["", "def", "specificity", "(", "pred", ",", "gt", ",", "epsilon", "=", "1e-9", ")", ":", "\n", "    ", "tn", "=", "true_negative", "(", "pred", ",", "gt", ")", "\n", "fp", "=", "false_positive", "(", "pred", ",", "gt", ")", "\n", "return", "tn", "/", "(", "tn", "+", "fp", "+", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.accuracy": [[54, 60], ["numpy.mean", "tuple", "numpy.equal", "numpy.ndim", "range", "numpy.ndim"], "function", ["None"], ["", "def", "accuracy", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "\"\"\" equal(pred, gt) / all(pred, gt)\n        (tp + tn) / (tp + tn + fp + fn)\n    \"\"\"", "\n", "axis", "=", "tuple", "(", "range", "(", "1", ",", "np", ".", "ndim", "(", "pred", ")", ")", ")", "if", "np", ".", "ndim", "(", "pred", ")", ">", "1", "else", "-", "1", "\n", "return", "np", ".", "mean", "(", "np", ".", "equal", "(", "pred", ",", "gt", ")", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.dice_coefficient": [[61, 69], ["numpy.sum", "numpy.sum", "tuple", "numpy.ndim", "range", "numpy.ndim"], "function", ["None"], ["", "def", "dice_coefficient", "(", "pred", ",", "gt", ",", "epsilon", "=", "1e-9", ")", ":", "\n", "    ", "\"\"\" 2 * intersection(pred, gt) / (pred + gt) \n        2 * tp / (2*tp + fp + fn)\n    \"\"\"", "\n", "axis", "=", "tuple", "(", "range", "(", "1", ",", "np", ".", "ndim", "(", "pred", ")", "-", "1", ")", ")", "if", "np", ".", "ndim", "(", "pred", ")", ">", "1", "else", "-", "1", "\n", "intersection", "=", "np", ".", "sum", "(", "pred", "*", "gt", ",", "axis", ")", "\n", "sum_", "=", "np", ".", "sum", "(", "pred", "+", "gt", ",", "axis", ")", "\n", "return", "2", "*", "intersection", "/", "(", "sum_", "+", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.iou": [[70, 78], ["numpy.sum", "tuple", "numpy.sum", "numpy.ndim", "range", "numpy.ndim"], "function", ["None"], ["", "def", "iou", "(", "pred", ",", "gt", ",", "epsilon", "=", "1e-9", ")", ":", "\n", "    ", "\"\"\" intersection(pred, gt) / union(pred, gt)\n        tp / (tp + fp + fn)\n    \"\"\"", "\n", "axis", "=", "tuple", "(", "range", "(", "1", ",", "np", ".", "ndim", "(", "pred", ")", "-", "1", ")", ")", "if", "np", ".", "ndim", "(", "pred", ")", ">", "1", "else", "-", "1", "\n", "intersection", "=", "np", ".", "sum", "(", "pred", "*", "gt", ",", "axis", ")", "\n", "union", "=", "np", ".", "sum", "(", "pred", "+", "gt", ",", "axis", ")", "-", "intersection", "\n", "return", "intersection", "/", "(", "union", "+", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.auc": [[79, 81], ["None"], "function", ["None"], ["", "def", "auc", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "pass", "\n", "# ----------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_append": [[4, 16], ["old_dict[].append"], "function", ["None"], ["def", "dict_append", "(", "old_dict", ",", "new_dict", ")", ":", "\n", "    ", "if", "new_dict", "is", "None", ":", "\n", "        ", "return", "old_dict", "\n", "", "if", "old_dict", "is", "None", "or", "not", "old_dict", ":", "\n", "        ", "for", "key", "in", "new_dict", ":", "\n", "            ", "old_dict", "[", "key", "]", "=", "[", "]", "\n", "\n", "", "", "for", "key", "in", "old_dict", ":", "\n", "        ", "assert", "key", "in", "new_dict", ",", "'No key \"{}\" in old dict!'", ".", "format", "(", "key", ")", "\n", "old_dict", "[", "key", "]", ".", "append", "(", "new_dict", "[", "key", "]", ")", "\n", "\n", "", "return", "old_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_concat": [[18, 33], ["numpy.concatenate", "numpy.ndim", "numpy.ndim"], "function", ["None"], ["", "def", "dict_concat", "(", "old_dict", ",", "new_dict", ",", "axis", "=", "0", ")", ":", "\n", "    ", "if", "new_dict", "is", "None", ":", "\n", "        ", "return", "old_dict", "\n", "", "if", "old_dict", "is", "None", "or", "not", "old_dict", ":", "\n", "        ", "old_dict", "=", "new_dict", "\n", "", "else", ":", "\n", "        ", "for", "key", "in", "old_dict", ":", "\n", "            ", "assert", "key", "in", "new_dict", ",", "'No key \"{}\" in old dict!'", ".", "format", "(", "key", ")", "\n", "old_v", "=", "old_dict", "[", "key", "]", "\n", "new_v", "=", "new_dict", "[", "key", "]", "\n", "old_v", "=", "[", "old_v", "]", "if", "np", ".", "ndim", "(", "old_v", ")", "==", "0", "else", "old_v", "\n", "new_v", "=", "[", "new_v", "]", "if", "np", ".", "ndim", "(", "new_v", ")", "==", "0", "else", "new_v", "\n", "old_dict", "[", "key", "]", "=", "np", ".", "concatenate", "(", "(", "old_v", ",", "new_v", ")", ",", "axis", ")", "\n", "\n", "", "", "return", "old_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_add": [[36, 45], ["None"], "function", ["None"], ["", "def", "dict_add", "(", "old_dict", ",", "new_dict", ")", ":", "\n", "    ", "if", "new_dict", "is", "None", ":", "\n", "        ", "return", "old_dict", "\n", "", "if", "old_dict", "is", "None", ":", "\n", "        ", "old_dict", "=", "new_dict", "\n", "", "else", ":", "\n", "        ", "for", "key", "in", "new_dict", ":", "\n", "            ", "old_dict", "[", "key", "]", "+=", "new_dict", "[", "key", "]", "\n", "", "", "return", "old_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_list2arr": [[47, 50], ["numpy.array"], "function", ["None"], ["", "def", "dict_list2arr", "(", "d", ")", ":", "\n", "    ", "for", "key", "in", "d", ":", "\n", "        ", "d", "[", "key", "]", "=", "np", ".", "array", "(", "d", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_to_str": [[52, 72], ["numpy.array", "evaluation_dict.get", "numpy.mean", "numpy.mean", "type", "numpy.ndim"], "function", ["None"], ["", "", "def", "dict_to_str", "(", "evaluation_dict", ",", "axis", "=", "0", ")", ":", "\n", "    ", "if", "evaluation_dict", "is", "None", "or", "not", "evaluation_dict", ":", "\n", "        ", "return", "''", "\n", "", "o_s", "=", "''", "\n", "for", "key", "in", "evaluation_dict", ":", "\n", "        ", "value", "=", "np", ".", "array", "(", "evaluation_dict", ".", "get", "(", "key", ")", ")", "\n", "if", "value", ".", "size", ">=", "2", ":", "\n", "            ", "mean", "=", "np", ".", "mean", "(", "value", ",", "axis", ")", "# [1:]", "\n", "", "else", ":", "\n", "            ", "mean", "=", "np", ".", "mean", "(", "value", ",", "axis", ")", "\n", "", "if", "type", "(", "mean", ")", "in", "[", "int", ",", "float", ",", "np", ".", "float32", ",", "np", ".", "float64", "]", ":", "\n", "            ", "mean", "=", "[", "mean", "]", "\n", "", "if", "np", ".", "ndim", "(", "mean", ")", ">", "1", ":", "\n", "            ", "continue", "\n", "", "mean", "=", "[", "'%.4f'", "%", "m", "for", "m", "in", "mean", "]", "\n", "o_s", "+=", "'%s: '", "%", "key", "\n", "for", "s", "in", "mean", ":", "\n", "            ", "o_s", "+=", "'%s '", "%", "s", "\n", "", "o_s", "+=", "'  '", "\n", "", "return", "o_s", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.recale_array": [[74, 84], ["numpy.array", "np.array.astype", "numpy.min", "numpy.max"], "function", ["None"], ["", "def", "recale_array", "(", "array", ",", "nmin", "=", "None", ",", "nmax", "=", "None", ",", "tmin", "=", "0", ",", "tmax", "=", "255", ",", "dtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "array", "=", "np", ".", "array", "(", "array", ")", "\n", "if", "nmin", "is", "None", ":", "\n", "        ", "nmin", "=", "np", ".", "min", "(", "array", ")", "\n", "", "array", "=", "array", "-", "nmin", "\n", "if", "nmax", "is", "None", ":", "\n", "        ", "nmax", "=", "np", ".", "max", "(", "array", ")", "+", "1e-9", "\n", "", "array", "=", "array", "/", "nmax", "\n", "array", "=", "(", "array", "*", "(", "tmax", "-", "tmin", ")", ")", "-", "tmin", "\n", "return", "array", ".", "astype", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.gray2rgb": [[86, 88], ["numpy.stack"], "function", ["None"], ["", "def", "gray2rgb", "(", "img", ")", ":", "\n", "    ", "return", "np", ".", "stack", "(", "(", "img", ",", ")", "*", "3", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.combine_2d_imgs_from_tensor": [[90, 106], ["numpy.concatenate", "util.recale_array", "gray2rgb.reshape", "imgs.append", "util.gray2rgb", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.recale_array", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.gray2rgb"], ["", "def", "combine_2d_imgs_from_tensor", "(", "img_list", ")", ":", "\n", "    ", "imgs", "=", "[", "]", "\n", "combined", "=", "None", "\n", "for", "im", "in", "img_list", ":", "\n", "        ", "assert", "len", "(", "im", ".", "shape", ")", "==", "3", "or", "len", "(", "im", ".", "shape", ")", "==", "4", "and", "im", ".", "shape", "[", "-", "1", "]", "in", "[", "1", ",", "3", "]", ",", "'Only accept gray or rgb 2d images with shape [n, x, y] or  [n, x, y, c], where c = 1 (gray) or 3 (rgb).'", "\n", "if", "im", ".", "shape", "[", "-", "1", "]", "!=", "3", ":", "\n", "            ", "if", "len", "(", "im", ".", "shape", ")", "==", "4", ":", "\n", "                ", "im", "=", "im", "[", "...", ",", "0", "]", "\n", "", "im", "=", "gray2rgb", "(", "im", ")", "\n", "\n", "", "im", "=", "recale_array", "(", "im", ")", "\n", "im", "=", "im", ".", "reshape", "(", "-", "1", ",", "im", ".", "shape", "[", "-", "2", "]", ",", "im", ".", "shape", "[", "-", "1", "]", ")", "\n", "imgs", ".", "append", "(", "im", ")", "\n", "", "combined", "=", "np", ".", "concatenate", "(", "imgs", ",", "1", ")", "\n", "return", "combined", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.imscatter": [[107, 122], ["range", "ax.update_datalim", "ax.autoscale", "len", "cv2.cvtColor.astype().reshape", "cv2.resize", "cv2.cvtColor", "OffsetImage", "AnnotationBbox", "images.append", "numpy.column_stack", "ax.add_artist", "cv2.cvtColor.astype"], "function", ["None"], ["", "def", "imscatter", "(", "x", ",", "y", ",", "ax", ",", "imageData", ",", "zoom", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", ":", "\n", "        ", "x0", ",", "y0", "=", "x", "[", "i", "]", ",", "y", "[", "i", "]", "\n", "# Convert to image", "\n", "img", "=", "imageData", "[", "i", "]", "*", "255.", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", ".", "reshape", "(", "[", "256", ",", "256", "]", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "28", ",", "28", ")", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "# Note: OpenCV uses BGR and plt uses RGB", "\n", "image", "=", "OffsetImage", "(", "img", ",", "zoom", "=", "zoom", ")", "\n", "ab", "=", "AnnotationBbox", "(", "image", ",", "(", "x0", ",", "y0", ")", ",", "xycoords", "=", "'data'", ",", "frameon", "=", "False", ")", "\n", "images", ".", "append", "(", "ax", ".", "add_artist", "(", "ab", ")", ")", "\n", "", "ax", ".", "update_datalim", "(", "np", ".", "column_stack", "(", "[", "x", ",", "y", "]", ")", ")", "\n", "ax", ".", "autoscale", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.combine_3d_imgs_from_tensor": [[123, 139], ["numpy.concatenate", "util.recale_array", "gray2rgb.reshape", "imgs.append", "util.gray2rgb", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.recale_array", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.gray2rgb"], ["", "def", "combine_3d_imgs_from_tensor", "(", "img_list", ")", ":", "\n", "    ", "imgs", "=", "[", "]", "\n", "combined", "=", "None", "\n", "for", "im", "in", "img_list", ":", "\n", "        ", "assert", "len", "(", "im", ".", "shape", ")", "==", "3", "or", "len", "(", "im", ".", "shape", ")", "==", "4", "and", "im", ".", "shape", "[", "-", "1", "]", "in", "[", "1", ",", "3", "]", ",", "'Only accept gray or rgb 2d images with shape [n, x, y] or  [n, x, y, c], where c = 1 (gray) or 3 (rgb).'", "\n", "if", "im", ".", "shape", "[", "-", "1", "]", "!=", "3", ":", "\n", "            ", "if", "len", "(", "im", ".", "shape", ")", "==", "4", ":", "\n", "                ", "im", "=", "im", "[", "...", ",", "0", "]", "\n", "", "im", "=", "gray2rgb", "(", "im", ")", "\n", "\n", "", "im", "=", "recale_array", "(", "im", ")", "\n", "im", "=", "im", ".", "reshape", "(", "-", "1", ",", "im", ".", "shape", "[", "-", "2", "]", ",", "im", ".", "shape", "[", "-", "1", "]", ")", "\n", "imgs", ".", "append", "(", "im", ")", "\n", "", "combined", "=", "np", ".", "concatenate", "(", "imgs", ",", "1", ")", "\n", "return", "combined", "", "", ""]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.loss_tf.cross_entropy": [[7, 12], ["tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.reduce_mean"], "function", ["None"], ["def", "cross_entropy", "(", "data_dict", ")", ":", "\n", "    ", "logits", "=", "data_dict", "[", "'logits'", "]", "\n", "labels", "=", "data_dict", "[", "'labels'", "]", "\n", "loss_map", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "logits", ",", "labels", "=", "labels", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "loss_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.loss_tf.dice_coefficient": [[13, 24], ["tensorflow.cast", "tensorflow.cast", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tuple", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.softmax"], ["", "def", "dice_coefficient", "(", "data_dict", ")", ":", "\n", "    ", "logits", "=", "tf", ".", "cast", "(", "data_dict", "[", "'logits'", "]", ",", "tf", ".", "float32", ")", "\n", "labels", "=", "tf", ".", "cast", "(", "data_dict", "[", "'labels'", "]", ",", "tf", ".", "float32", ")", "\n", "axis", "=", "tuple", "(", "range", "(", "1", ",", "len", "(", "labels", ".", "shape", ")", "-", "1", ")", ")", "if", "len", "(", "labels", ".", "shape", ")", ">", "1", "else", "-", "1", "\n", "pred", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "# pred = tf.one_hot(tf.argmax(logits, -1), labels.shape[-1])", "\n", "\n", "intersection", "=", "tf", ".", "reduce_sum", "(", "pred", "*", "labels", ",", "axis", ")", "\n", "sum_", "=", "tf", ".", "reduce_sum", "(", "pred", "+", "labels", ",", "axis", ")", "\n", "dice", "=", "1", "-", "2", "*", "intersection", "/", "sum_", "\n", "return", "dice", "\n", "", ""]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.nets_tf.DRUnet2D.DRUNet2D.__init__": [[7, 37], ["tensorflow.keras.Model.__init__", "dict", "dict", "dict", "dict", "range", "range", "numpy.sqrt", "tensorflow.keras.layers.Conv2D", "str", "DRUnet2D._DownSampling", "str", "DRUnet2D._UpSampling", "DRUnet2D._DownSev", "tensorflow.keras.layers.MaxPool2D", "tensorflow.keras.initializers.TruncatedNormal"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_class", ",", "n_layer", ",", "root_filters", ",", "kernal_size", "=", "3", ",", "pool_size", "=", "2", ",", "use_bn", "=", "True", ",", "use_res", "=", "True", ",", "\n", "padding", "=", "'SAME'", ",", "concat_or_add", "=", "'concat'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dw_layers", "=", "dict", "(", ")", "\n", "self", ".", "up_layers", "=", "dict", "(", ")", "\n", "self", ".", "max_pools", "=", "dict", "(", ")", "\n", "self", ".", "dw1_layers", "=", "dict", "(", ")", "\n", "\n", "for", "layer", "in", "range", "(", "n_layer", ")", ":", "\n", "            ", "filters", "=", "2", "**", "layer", "*", "root_filters", "\n", "dict_key", "=", "str", "(", "n_layer", "-", "layer", "-", "1", ")", "\n", "if", "layer", "==", "0", ":", "\n", "               ", "Dw1", "=", "_DownSev", "(", "filters", ",", "7", ",", "'dw1_%d'", "%", "layer", ")", "\n", "self", ".", "dw1_layers", "[", "dict_key", "]", "=", "Dw1", "\n", "", "dw", "=", "_DownSampling", "(", "filters", ",", "kernal_size", ",", "'dw_%d'", "%", "layer", ",", "use_bn", ",", "use_res", ")", "\n", "self", ".", "dw_layers", "[", "dict_key", "]", "=", "dw", "\n", "if", "layer", "<", "n_layer", "-", "1", ":", "\n", "                ", "pool", "=", "layers", ".", "MaxPool2D", "(", "[", "2", ",", "2", "]", ",", "padding", "=", "padding", ")", "\n", "self", ".", "max_pools", "[", "dict_key", "]", "=", "pool", "\n", "\n", "", "", "for", "layer", "in", "range", "(", "n_layer", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "filters", "=", "2", "**", "(", "layer", "+", "1", ")", "*", "root_filters", "\n", "dict_key", "=", "str", "(", "n_layer", "-", "layer", "-", "1", ")", "\n", "up", "=", "_UpSampling", "(", "filters", ",", "kernal_size", ",", "[", "2", ",", "2", "]", ",", "concat_or_add", ")", "\n", "self", ".", "up_layers", "[", "dict_key", "]", "=", "up", "\n", "\n", "", "stddev", "=", "np", ".", "sqrt", "(", "2", "/", "(", "kernal_size", "**", "2", "*", "root_filters", ")", ")", "\n", "self", ".", "conv_out", "=", "layers", ".", "Conv2D", "(", "n_class", ",", "1", ",", "padding", "=", "padding", ",", "use_bias", "=", "False", ",", "\n", "kernel_initializer", "=", "initializers", ".", "TruncatedNormal", "(", "stddev", "=", "stddev", ")", ",", "\n", "name", "=", "'conv_out'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.nets_tf.DRUnet2D.DRUNet2D.__call__": [[38, 61], ["dict", "dict", "str", "len", "range", "range", "DRUnet2D.DRUNet2D.conv_out", "tensorflow.nn.relu", "str", "str", "len"], "methods", ["None"], ["", "@", "tf", ".", "function", "\n", "def", "__call__", "(", "self", ",", "x_in", ",", "drop_rate", ",", "training", ")", ":", "\n", "        ", "dw_tensors", "=", "dict", "(", ")", "\n", "dw1_tensors", "=", "dict", "(", ")", "\n", "x", "=", "x_in", "\n", "dict_key", "=", "str", "(", "4", ")", "\n", "dw1_tensors", "[", "dict_key", "]", "=", "self", ".", "dw1_layers", "[", "dict_key", "]", "(", "x", ",", "drop_rate", ",", "training", ")", "\n", "x", "=", "dw1_tensors", "[", "dict_key", "]", "\n", "n_layer", "=", "len", "(", "self", ".", "dw_layers", ")", "\n", "for", "i", "in", "range", "(", "n_layer", ")", ":", "\n", "            ", "dict_key", "=", "str", "(", "n_layer", "-", "i", "-", "1", ")", "\n", "dw_tensors", "[", "dict_key", "]", "=", "self", ".", "dw_layers", "[", "dict_key", "]", "(", "x", ",", "drop_rate", ",", "training", ")", "\n", "x", "=", "dw_tensors", "[", "dict_key", "]", "\n", "if", "i", "<", "len", "(", "self", ".", "max_pools", ")", ":", "\n", "                ", "x", "=", "self", ".", "max_pools", "[", "dict_key", "]", "(", "x", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "n_layer", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "dict_key", "=", "str", "(", "n_layer", "-", "i", "-", "1", ")", "\n", "x", "=", "self", ".", "up_layers", "[", "dict_key", "]", "(", "x", ",", "dw_tensors", "[", "dict_key", "]", ",", "drop_rate", ",", "training", ")", "\n", "\n", "", "x", "=", "self", ".", "conv_out", "(", "x", ")", "\n", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.nets_tf.DRUnet2D._DownSev.__init__": [[64, 70], ["tensorflow.keras.Model.__init__", "numpy.sqrt", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.initializers.TruncatedNormal"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider.__init__"], ["    ", "def", "__init__", "(", "self", ",", "filters", ",", "kernel_size", ",", "name", ",", "use_bn", "=", "True", ",", "use_res", "=", "True", ",", "padding", "=", "'SAME'", ",", "use_bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "_DownSev", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "stddev", "=", "np", ".", "sqrt", "(", "2", "/", "(", "kernel_size", "**", "2", "*", "filters", ")", ")", "\n", "self", ".", "conv1", "=", "layers", ".", "Conv2D", "(", "filters", ",", "7", ",", "padding", "=", "padding", ",", "use_bias", "=", "use_bias", ",", "\n", "kernel_initializer", "=", "initializers", ".", "TruncatedNormal", "(", "stddev", "=", "stddev", ")", ",", "\n", "name", "=", "'conv2'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.nets_tf.DRUnet2D._DownSev.call": [[71, 77], ["DRUnet2D._DownSev.conv1", "tensorflow.nn.dropout"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "input_tensor", ",", "keep_prob", ",", "train_phase", ")", ":", "\n", "# conv1", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input_tensor", ")", "\n", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "keep_prob", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.nets_tf.DRUnet2D._DownSampling.__init__": [[80, 97], ["tensorflow.keras.layers.Layer.__init__", "numpy.sqrt", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "DRUnet2D._Residual", "tensorflow.keras.initializers.TruncatedNormal", "tensorflow.keras.initializers.TruncatedNormal"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider.__init__"], ["    ", "def", "__init__", "(", "self", ",", "filters", ",", "kernel_size", ",", "name", ",", "use_bn", "=", "True", ",", "use_res", "=", "True", ",", "padding", "=", "'SAME'", ",", "use_bias", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "use_res", "=", "use_res", "\n", "stddev", "=", "np", ".", "sqrt", "(", "2", "/", "(", "kernel_size", "**", "2", "*", "filters", ")", ")", "\n", "self", ".", "conv1", "=", "layers", ".", "Conv2D", "(", "filters", ",", "kernel_size", ",", "padding", "=", "padding", ",", "use_bias", "=", "use_bias", ",", "\n", "kernel_initializer", "=", "initializers", ".", "TruncatedNormal", "(", "stddev", "=", "stddev", ")", ",", "\n", "name", "=", "'conv1'", ")", "\n", "self", ".", "conv2", "=", "layers", ".", "Conv2D", "(", "filters", ",", "kernel_size", ",", "padding", "=", "padding", ",", "use_bias", "=", "use_bias", ",", "\n", "kernel_initializer", "=", "initializers", ".", "TruncatedNormal", "(", "stddev", "=", "stddev", ")", ",", "\n", "name", "=", "'conv2'", ")", "\n", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn1", "=", "layers", ".", "BatchNormalization", "(", "momentum", "=", "0.99", ",", "name", "=", "'bn1'", ")", "\n", "self", ".", "bn2", "=", "layers", ".", "BatchNormalization", "(", "momentum", "=", "0.99", ",", "name", "=", "'bn2'", ")", "\n", "", "if", "use_res", ":", "\n", "            ", "self", ".", "res", "=", "_Residual", "(", "'res'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.nets_tf.DRUnet2D._DownSampling.__call__": [[98, 119], ["DRUnet2D._DownSampling.conv1", "tensorflow.nn.dropout", "tensorflow.nn.relu", "DRUnet2D._DownSampling.conv2", "tensorflow.nn.dropout", "tensorflow.nn.relu", "tensorflow.concat", "DRUnet2D._DownSampling.bn1", "DRUnet2D._DownSampling.bn2"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "x_in", ",", "drop_rate", ",", "training", "=", "True", ")", ":", "\n", "# conv1", "\n", "\n", "        ", "x", "=", "x_in", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "drop_rate", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x1", "=", "self", ".", "bn1", "(", "x", ",", "training", "=", "training", ")", "\n", "", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x1", ")", "\n", "\n", "# conv2", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "drop_rate", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ",", "training", "=", "training", ")", "\n", "\n", "", "x", "=", "x", "+", "x1", "+", "x_in", "\n", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "x", "=", "tf", ".", "concat", "(", "(", "x", ",", "x_in", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.nets_tf.DRUnet2D._UpSampling.__init__": [[122, 150], ["tensorflow.keras.layers.Layer.__init__", "numpy.sqrt", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "DRUnet2D._Residual", "tensorflow.keras.initializers.TruncatedNormal", "tensorflow.keras.initializers.TruncatedNormal", "tensorflow.keras.initializers.TruncatedNormal", "tensorflow.keras.initializers.TruncatedNormal"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider.__init__"], ["    ", "def", "__init__", "(", "self", ",", "filters", ",", "kernel_size", ",", "pool_size", ",", "name", ",", "concat_or_add", "=", "'concat'", ",", "use_bn", "=", "True", ",", "use_res", "=", "True", ",", "\n", "padding", "=", "'SAME'", ",", "use_bias", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "use_res", "=", "use_res", "\n", "self", ".", "concat_or_add", "=", "concat_or_add", "\n", "stddev", "=", "np", ".", "sqrt", "(", "2", "/", "(", "kernel_size", "**", "2", "*", "filters", ")", ")", "\n", "self", ".", "deconv", "=", "layers", ".", "Conv2DTranspose", "(", "filters", "//", "2", ",", "kernel_size", ",", "strides", "=", "pool_size", ",", "padding", "=", "padding", ",", "\n", "use_bias", "=", "use_bias", ",", "\n", "kernel_initializer", "=", "initializers", ".", "TruncatedNormal", "(", "stddev", "=", "stddev", ")", ",", "\n", "name", "=", "'deconv'", ")", "\n", "self", ".", "conv1", "=", "layers", ".", "Conv2D", "(", "filters", "//", "2", ",", "kernel_size", ",", "padding", "=", "padding", ",", "use_bias", "=", "use_bias", ",", "\n", "kernel_initializer", "=", "initializers", ".", "TruncatedNormal", "(", "stddev", "=", "stddev", ")", ",", "\n", "name", "=", "'conv1'", ")", "\n", "self", ".", "conv2", "=", "layers", ".", "Conv2D", "(", "filters", "//", "2", ",", "kernel_size", ",", "padding", "=", "padding", ",", "use_bias", "=", "use_bias", ",", "\n", "kernel_initializer", "=", "initializers", ".", "TruncatedNormal", "(", "stddev", "=", "stddev", ")", ",", "\n", "name", "=", "'conv2'", ")", "\n", "self", ".", "conv3", "=", "layers", ".", "Conv2D", "(", "filters", "//", "2", ",", "1", ",", "padding", "=", "padding", ",", "use_bias", "=", "use_bias", ",", "\n", "kernel_initializer", "=", "initializers", ".", "TruncatedNormal", "(", "stddev", "=", "stddev", ")", ",", "\n", "name", "=", "'conv3'", ")", "\n", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn_deconv", "=", "layers", ".", "BatchNormalization", "(", "momentum", "=", "0.99", ",", "name", "=", "'bn_deconv'", ")", "\n", "self", ".", "bn1", "=", "layers", ".", "BatchNormalization", "(", "momentum", "=", "0.99", ",", "name", "=", "'bn1'", ")", "\n", "self", ".", "bn2", "=", "layers", ".", "BatchNormalization", "(", "momentum", "=", "0.99", ",", "name", "=", "'bn2'", ")", "\n", "self", ".", "bn3", "=", "layers", ".", "BatchNormalization", "(", "momentum", "=", "0.99", ",", "name", "=", "'bn3'", ")", "\n", "", "if", "use_res", ":", "\n", "            ", "self", ".", "res", "=", "_Residual", "(", "'res'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.nets_tf.DRUnet2D._UpSampling.__call__": [[151, 187], ["DRUnet2D._UpSampling.deconv", "tensorflow.nn.relu", "DRUnet2D._UpSampling.conv1", "tensorflow.nn.dropout", "tensorflow.nn.relu", "DRUnet2D._UpSampling.conv2", "tensorflow.nn.dropout", "DRUnet2D._UpSampling.conv3", "DRUnet2D._UpSampling.bn3", "tensorflow.nn.relu", "DRUnet2D._UpSampling.bn_deconv", "tensorflow.concat", "DRUnet2D._UpSampling.bn1", "DRUnet2D._UpSampling.bn2", "Exception"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "x_in", ",", "x_dw", ",", "drop_rate", ",", "training", ")", ":", "\n", "# deconv", "\n", "        ", "x", "=", "self", ".", "deconv", "(", "x_in", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn_deconv", "(", "x", ",", "training", "=", "training", ")", "\n", "", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n", "# skip connection", "\n", "if", "self", ".", "concat_or_add", "==", "'concat'", ":", "\n", "            ", "x", "=", "tf", ".", "concat", "(", "(", "x_dw", ",", "x", ")", ",", "-", "1", ")", "\n", "", "elif", "self", ".", "concat_or_add", "==", "'add'", ":", "\n", "            ", "x", "=", "x_dw", "+", "x", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Wrong concatenate method!'", ")", "\n", "\n", "", "res_in", "=", "x", "\n", "# conv1", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "drop_rate", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x1", "=", "self", ".", "bn1", "(", "x", ",", "training", "=", "training", ")", "\n", "", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x1", ")", "\n", "\n", "# conv2", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "drop_rate", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ",", "training", "=", "training", ")", "\n", "\n", "", "x3", "=", "self", ".", "conv3", "(", "res_in", ")", "\n", "x3", "=", "self", ".", "bn3", "(", "x3", ",", "training", "=", "training", ")", "\n", "\n", "x", "=", "x", "+", "x1", "+", "x3", "\n", "x", "=", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.nets_tf.DRUnet2D._Residual.__init__": [[190, 192], ["tensorflow.keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name_scope", ")", ":", "\n", "        ", "super", "(", "_Residual", ",", "self", ")", ".", "__init__", "(", "name", "=", "name_scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.nets_tf.DRUnet2D._Residual.call": [[193, 200], ["tensorflow.concat", "tensorflow.zeros", "list"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "if", "x1", ".", "shape", "[", "-", "1", "]", "<", "x2", ".", "shape", "[", "-", "1", "]", ":", "\n", "            ", "x", "=", "tf", ".", "concat", "(", "[", "x1", ",", "tf", ".", "zeros", "(", "list", "(", "x1", ".", "shape", "[", ":", "-", "1", "]", ")", "+", "[", "x2", ".", "shape", "[", "-", "1", "]", "-", "x1", ".", "shape", "[", "-", "1", "]", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x1", "[", "...", ",", ":", "x2", ".", "shape", "[", "-", "1", "]", "]", "\n", "", "x", "=", "x", "+", "x2", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.models.model.Model.__init__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "net", ")", ":", "\n", "        ", "self", ".", "net", "=", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.models.model.Model.get_grads": [[15, 19], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_grads", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.models.model.Model.eval": [[20, 24], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "eval", "(", "self", ",", "data_dict", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.models.model.Model.predict": [[25, 29], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "predict", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.models.model.SimpleTFModel.__init__": [[33, 44], ["model.Model.__init__"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "x_suffix", ",", "y_suffix", "=", "None", ",", "m_suffix", "=", "None", ",", "dropout", "=", "0", ",", "loss_function", "=", "{", "'cross-entropy'", ":", "0.5", ",", "'dice'", ":", "0.5", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "net", ")", "\n", "self", ".", "_x_suffix", "=", "x_suffix", "\n", "self", ".", "_y_suffix", "=", "y_suffix", "\n", "self", ".", "_m_suffix", "=", "m_suffix", "\n", "self", ".", "_loss_function", "=", "loss_function", "\n", "\n", "self", ".", "_loss_dict", "=", "{", "'cross-entropy'", ":", "LF", ".", "cross_entropy", ",", "\n", "'dice'", ":", "LF", ".", "dice_coefficient", "}", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.models.model.SimpleTFModel.get_grads": [[45, 53], ["tape.gradient", "tensorflow.GradientTape", "model.SimpleTFModel.net", "model.SimpleTFModel._get_loss"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.models.model.SimpleTFModel._get_loss"], ["", "def", "get_grads", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "xs", "=", "data_dict", "[", "self", ".", "_x_suffix", "]", "\n", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "            ", "logits", "=", "self", ".", "net", "(", "xs", ",", "self", ".", "dropout", ",", "True", ")", "\n", "loss", "=", "self", ".", "_get_loss", "(", "logits", ",", "data_dict", ")", "\n", "", "grads", "=", "tape", ".", "gradient", "(", "loss", ",", "self", ".", "net", ".", "trainable_variables", ")", "\n", "return", "grads", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.models.model.SimpleTFModel.eval": [[54, 100], ["model.SimpleTFModel.net", "tensorflow.nn.softmax", "utils.process_methods.one_hot", "model.SimpleTFModel._get_loss", "tensorflow.reduce_mean", "utils.eval_methods.accuracy", "utils.eval_methods.dice_coefficient", "utils.eval_methods.iou", "utils.eval_methods.precision", "utils.eval_methods.recall", "utils.eval_methods.sensitivity", "utils.eval_methods.specificity", "kwargs.get", "kwargs.get", "kwargs.get", "numpy.argmax", "list", "range", "model.SimpleTFModel._get_imgs_eval", "eval_results.update", "eval_results.update", "eval_results.update", "range"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.softmax", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.process_methods.one_hot", "home.repos.pwc.inspect_result.MinaJf_DRU-net.models.model.SimpleTFModel._get_loss", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.accuracy", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.loss_tf.dice_coefficient", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.iou", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.precision", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.recall", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.sensitivity", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.specificity", "home.repos.pwc.inspect_result.MinaJf_DRU-net.models.model.SimpleTFModel._get_imgs_eval"], ["", "def", "eval", "(", "self", ",", "data_dict", ",", "**", "kwargs", ")", ":", "\n", "        ", "xs", "=", "data_dict", "[", "self", ".", "_x_suffix", "]", "\n", "ys", "=", "data_dict", "[", "self", ".", "_y_suffix", "]", "\n", "# ms = data_dict[self._m_suffix]", "\n", "logits", "=", "self", ".", "net", "(", "xs", ",", "0", ",", "False", ")", "\n", "prob", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "-", "1", ")", "\n", "pred", "=", "one_hot", "(", "np", ".", "argmax", "(", "prob", ",", "-", "1", ")", ",", "list", "(", "range", "(", "ys", ".", "shape", "[", "-", "1", "]", ")", ")", ")", "\n", "\n", "loss", "=", "self", ".", "_get_loss", "(", "logits", ",", "data_dict", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ",", "range", "(", "1", ",", "loss", ".", "ndim", ")", ")", "\n", "loss", "=", "[", "loss", "]", "if", "loss", ".", "ndim", "==", "0", "else", "loss", "\n", "acc", "=", "EM", ".", "accuracy", "(", "pred", ",", "ys", ")", "\n", "dice", "=", "EM", ".", "dice_coefficient", "(", "pred", ",", "ys", ")", "\n", "iou", "=", "EM", ".", "iou", "(", "pred", ",", "ys", ")", "\n", "# auc = EM.auc(pred, ys)", "\n", "\n", "precision", "=", "EM", ".", "precision", "(", "pred", ",", "ys", ")", "\n", "recall", "=", "EM", ".", "recall", "(", "pred", ",", "ys", ")", "\n", "sensitivity", "=", "EM", ".", "sensitivity", "(", "pred", ",", "ys", ")", "\n", "specificity", "=", "EM", ".", "specificity", "(", "pred", ",", "ys", ")", "\n", "\n", "\n", "eval_results", "=", "{", "'loss'", ":", "loss", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'dice'", ":", "dice", ",", "\n", "'iou'", ":", "iou", ",", "\n", "# 'auc': auc,", "\n", "'precision'", ":", "precision", ",", "\n", "'recall'", ":", "recall", ",", "\n", "'sensitivity'", ":", "sensitivity", ",", "\n", "'specificity'", ":", "specificity", "}", "\n", "\n", "need_imgs", "=", "kwargs", ".", "get", "(", "'need_imgs'", ",", "False", ")", "\n", "if", "need_imgs", ":", "\n", "            ", "imgs", "=", "self", ".", "_get_imgs_eval", "(", "xs", ",", "ys", ",", "prob", ")", "\n", "eval_results", ".", "update", "(", "{", "'imgs'", ":", "imgs", "}", ")", "\n", "\n", "", "need_logits", "=", "kwargs", ".", "get", "(", "'need_logits'", ",", "False", ")", "\n", "if", "need_logits", ":", "\n", "            ", "eval_results", ".", "update", "(", "{", "'logits'", ":", "logits", "}", ")", "\n", "\n", "", "need_preds", "=", "kwargs", ".", "get", "(", "'need_preds'", ",", "False", ")", "\n", "if", "need_preds", ":", "\n", "            ", "eval_results", ".", "update", "(", "{", "'pred'", ":", "pred", "}", ")", "\n", "\n", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.models.model.SimpleTFModel.predict": [[101, 105], ["model.SimpleTFModel.net", "tensorflow.nn.softmax"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_methods.softmax"], ["", "def", "predict", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "logits", "=", "self", ".", "net", "(", "data_dict", "[", "self", ".", "_x_suffix", "]", ",", "0", ",", "False", ")", "\n", "prob", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "-", "1", ")", "\n", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.models.model.SimpleTFModel._get_loss": [[106, 121], ["loss_function", "tensorflow.reduce_mean", "type", "range"], "methods", ["None"], ["", "def", "_get_loss", "(", "self", ",", "logits", ",", "data_dict", ")", ":", "\n", "        ", "loss_data_dict", "=", "{", "'orgs'", ":", "data_dict", "[", "self", ".", "_x_suffix", "]", ",", "\n", "'labels'", ":", "data_dict", "[", "self", ".", "_y_suffix", "]", ",", "\n", "'masks'", ":", "None", ",", "\n", "'logits'", ":", "logits", "}", "\n", "total_loss", "=", "0", "\n", "assert", "self", ".", "_loss_function", "is", "not", "None", "and", "type", "(", "self", ".", "_loss_function", ")", "is", "dict", ",", "'loss_function should be a dict ({name: weight})'", "\n", "for", "lf", "in", "self", ".", "_loss_function", ":", "\n", "            ", "weight", "=", "self", ".", "_loss_function", "[", "lf", "]", "\n", "loss_function", "=", "self", ".", "_loss_dict", "[", "lf", "]", "\n", "sub_loss_map", "=", "loss_function", "(", "loss_data_dict", ")", "\n", "sub_loss", "=", "tf", ".", "reduce_mean", "(", "sub_loss_map", ",", "range", "(", "1", ",", "sub_loss_map", ".", "ndim", ")", ")", "\n", "total_loss", "+=", "sub_loss", "*", "weight", "\n", "\n", "", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.models.model.SimpleTFModel._get_imgs_eval": [[122, 135], ["range", "numpy.argmax", "numpy.argmax", "utils.util.combine_2d_imgs_from_tensor", "img_dict.update", "utils.util.combine_2d_imgs_from_tensor", "img_dict.update"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.combine_2d_imgs_from_tensor", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.combine_2d_imgs_from_tensor"], ["", "def", "_get_imgs_eval", "(", "self", ",", "xs", ",", "ys", ",", "prob", ")", ":", "\n", "        ", "img_dict", "=", "{", "}", "\n", "n_class", "=", "ys", ".", "shape", "[", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "n_class", ")", ":", "\n", "            ", "img", "=", "U", ".", "combine_2d_imgs_from_tensor", "(", "[", "xs", ",", "ys", "[", "...", ",", "i", "]", ",", "prob", "[", "...", ",", "i", "]", "]", ")", "\n", "img_dict", ".", "update", "(", "{", "'class %d'", "%", "i", ":", "img", "}", ")", "\n", "\n", "", "argmax_ys", "=", "np", ".", "argmax", "(", "ys", ",", "-", "1", ")", "\n", "argmax_prob", "=", "np", ".", "argmax", "(", "prob", ",", "-", "1", ")", "\n", "img", "=", "U", ".", "combine_2d_imgs_from_tensor", "(", "[", "xs", ",", "argmax_ys", ",", "argmax_prob", "]", ")", "\n", "img_dict", ".", "update", "(", "{", "'argmax'", ":", "img", "}", ")", "\n", "\n", "return", "img_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer.__init__": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer.train": [[15, 118], ["tensorflow.keras.optimizers.Adam", "range", "tensorflow.train.Checkpoint", "print", "float", "time.time", "range", "optimizer.learning_rate.numpy", "type", "os.path.exists", "shutil.rmtree", "os.path.exists", "os.makedirs", "len", "net_args.update", "time.time", "range", "print", "utils.util.dict_append", "utils.util.dict_append", "tensorflow.train.Checkpoint.write", "type", "int", "range", "trainer_tf.Trainer._grads_div", "time.time", "trainer_tf.Trainer.eval", "trainer_tf.Trainer.eval", "utils.eval_saver.save_str", "utils.eval_saver.save_str", "open", "f.write", "str", "int", "train_provider", "trainer_tf.Trainer.model.get_grads", "trainer_tf.Trainer._grads_add", "type", "range", "optimizer.apply_gradients", "utils.eval_saver.save_img", "utils.eval_saver.save_img", "numpy.mean", "tensorflow.train.Checkpoint.write", "numpy.mean", "time.time", "str", "len", "len", "len", "optimizer[].apply_gradients", "zip", "time.time", "utils.util.dict_to_str", "utils.util.dict_to_str", "zip"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_append", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_append", "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer._grads_div", "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer.eval", "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer.eval", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_saver.save_str", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_saver.save_str", "home.repos.pwc.inspect_result.MinaJf_DRU-net.models.model.SimpleTFModel.get_grads", "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer._grads_add", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_saver.save_img", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.eval_saver.save_img", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_to_str", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_to_str"], ["", "def", "train", "(", "self", ",", "\n", "train_provider", ",", "\n", "validation_provider", ",", "\n", "epochs", ",", "\n", "batch_size", ",", "\n", "output_path", ",", "\n", "optimizer", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", ")", ",", "\n", "learning_rate", "=", "None", ",", "\n", "mini_batch_size", "=", "None", ",", "\n", "eval_frequency", "=", "1", ",", "\n", "is_save_train_imgs", "=", "False", ",", "\n", "is_save_valid_imgs", "=", "True", ",", "\n", "is_rebuilt_path", "=", "True", ")", ":", "\n", "\n", "        ", "if", "learning_rate", "is", "None", ":", "\n", "            ", "learning_rate", "=", "optimizer", ".", "learning_rate", ".", "numpy", "(", ")", "\n", "", "if", "type", "(", "learning_rate", ")", "is", "not", "list", ":", "\n", "            ", "learning_rate", "=", "[", "learning_rate", "]", "\n", "", "if", "is_rebuilt_path", "and", "os", ".", "path", ".", "exists", "(", "output_path", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "output_path", ",", "ignore_errors", "=", "True", ")", "\n", "", "iters", "=", "train_provider", ".", "size", "/", "batch_size", "\n", "assert", "iters", ">", "0", "and", "iters", "%", "1", "==", "0", ",", "'batch size {} does not match the data size {}.'", ".", "format", "(", "batch_size", ",", "\n", "train_provider", ".", "size", ")", "\n", "mini_batch_size", "=", "batch_size", "if", "mini_batch_size", "is", "None", "else", "mini_batch_size", "\n", "mini_iters", "=", "batch_size", "/", "mini_batch_size", "\n", "assert", "mini_iters", ">", "0", "and", "mini_iters", "%", "1", "==", "0", ",", "'mini batch size {} does not match the batch size {}.'", ".", "format", "(", "\n", "mini_batch_size", ",", "batch_size", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "\n", "", "nets", "=", "self", ".", "model", ".", "net", "if", "type", "(", "self", ".", "model", ".", "net", ")", "is", "list", "else", "[", "self", ".", "model", ".", "net", "]", "\n", "net_args", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "nets", ")", ")", ":", "\n", "            ", "net_args", ".", "update", "(", "{", "'net%d'", "%", "i", ":", "nets", "[", "i", "]", "}", ")", "\n", "", "ckpt", "=", "tf", ".", "train", ".", "Checkpoint", "(", "**", "net_args", ")", "\n", "\n", "print", "(", "\n", "'Start training: epochs {}, learning rate {}, batch size {}, mini-batch size {}, training data {}, validation data {}.'", "\n", ".", "format", "(", "epochs", ",", "[", "str", "(", "lr", ")", "for", "lr", "in", "learning_rate", "]", ",", "batch_size", ",", "mini_batch_size", ",", "train_provider", ".", "size", ",", "\n", "validation_provider", ".", "size", ")", ")", "\n", "\n", "train_eval_str", "=", "{", "}", "\n", "valid_eval_str", "=", "{", "}", "\n", "best_loss", "=", "float", "(", "'inf'", ")", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "for", "ep", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "ep_time_start", "=", "time", ".", "time", "(", ")", "\n", "for", "_", "in", "range", "(", "int", "(", "iters", ")", ")", ":", "\n", "                ", "grads", "=", "None", "\n", "for", "_", "in", "range", "(", "int", "(", "mini_iters", ")", ")", ":", "\n", "                    ", "feed_dict", "=", "train_provider", "(", "mini_batch_size", ")", "\n", "mini_grads", "=", "self", ".", "model", ".", "get_grads", "(", "feed_dict", ")", "\n", "grads", "=", "self", ".", "_grads_add", "(", "grads", ",", "mini_grads", ")", "\n", "", "grads", "=", "self", ".", "_grads_div", "(", "grads", ",", "mini_iters", ")", "\n", "if", "type", "(", "grads", ")", "is", "tuple", ":", "\n", "                    ", "assert", "len", "(", "optimizer", ")", "==", "len", "(", "grads", ")", ",", "'Number of optimizer should equal to number of networks.'", "\n", "for", "gi", "in", "range", "(", "len", "(", "grads", ")", ")", ":", "\n", "                        ", "optimizer", "[", "gi", "]", ".", "apply_gradients", "(", "zip", "(", "grads", "[", "gi", "]", ",", "self", ".", "model", ".", "net", "[", "gi", "]", ".", "trainable_variables", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "optimizer", ".", "apply_gradients", "(", "zip", "(", "grads", ",", "self", ".", "model", ".", "net", ".", "trainable_variables", ")", ")", "\n", "", "", "ep_train_time", "=", "time", ".", "time", "(", ")", "-", "ep_time_start", "\n", "ep_eval_time", "=", "0", "\n", "if", "ep", "%", "eval_frequency", "==", "0", "or", "ep", "==", "epochs", "-", "1", ":", "\n", "                ", "ep_train_eval", "=", "self", ".", "eval", "(", "train_provider", ",", "batch_size", "=", "mini_batch_size", ",", "print_str", "=", "False", ",", "\n", "need_imgs", "=", "is_save_train_imgs", ")", "\n", "ep_valid_eval", "=", "self", ".", "eval", "(", "validation_provider", ",", "batch_size", "=", "mini_batch_size", ",", "print_str", "=", "False", ",", "\n", "need_imgs", "=", "is_save_valid_imgs", ")", "\n", "ep_eval_time", "=", "time", ".", "time", "(", ")", "-", "ep_train_time", "-", "ep_time_start", "\n", "if", "is_save_train_imgs", ":", "\n", "                    ", "save_img", "(", "ep_train_eval", "[", "1", "]", ",", "'{}/train_imgs/'", ".", "format", "(", "output_path", ")", ",", "ep", ")", "\n", "ep_train_eval", "=", "ep_train_eval", "[", "0", "]", "\n", "", "if", "is_save_valid_imgs", ":", "\n", "                    ", "save_img", "(", "ep_valid_eval", "[", "1", "]", ",", "'{}/valid_imgs/'", ".", "format", "(", "output_path", ")", ",", "ep", ")", "\n", "ep_valid_eval", "=", "ep_valid_eval", "[", "0", "]", "\n", "", "save_str", "(", "ep_train_eval", ",", "'{}/train_eval.txt'", ".", "format", "(", "output_path", ")", ",", "ep", ")", "\n", "save_str", "(", "ep_valid_eval", ",", "'{}/valid_eval.txt'", ".", "format", "(", "output_path", ")", ",", "ep", ")", "\n", "# save best ckpt", "\n", "if", "np", ".", "mean", "(", "ep_valid_eval", "[", "'loss'", "]", ")", "<", "best_loss", ":", "\n", "                    ", "ckpt", ".", "write", "(", "output_path", "+", "'/ckpt/best'", ")", "\n", "best_loss", "=", "np", ".", "mean", "(", "ep_valid_eval", "[", "'loss'", "]", ")", "\n", "\n", "# time_ep_save_imgs_end = time.time()", "\n", "", "", "train_log", "=", "(", "\n", "'epoch {} ------ time cost: overall {:.1f} ------ step training {:.1f} ------ step evaluation {:.1f} ------ learning rate: {} ------'", "\n", ".", "format", "(", "ep", ",", "time", ".", "time", "(", ")", "-", "time_start", ",", "ep_train_time", ",", "ep_eval_time", ",", "[", "str", "(", "lr", ")", "for", "lr", "in", "learning_rate", "]", ")", ")", "\n", "\n", "if", "ep", "%", "eval_frequency", "==", "0", "or", "ep", "==", "epochs", "-", "1", ":", "\n", "                ", "train_log", "+=", "(", "'\\n  train      : {}'", ".", "format", "(", "U", ".", "dict_to_str", "(", "ep_train_eval", ")", ")", "+", "'\\n  validation : {}'", ".", "format", "(", "U", ".", "dict_to_str", "(", "ep_valid_eval", ")", ")", ")", "\n", "\n", "", "print", "(", "train_log", ")", "\n", "with", "open", "(", "output_path", "+", "'/train_log.txt'", ",", "'a+'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "train_log", "+", "'\\n'", ")", "\n", "\n", "", "train_eval_str", "=", "U", ".", "dict_append", "(", "train_eval_str", ",", "ep_train_eval", ")", "\n", "valid_eval_str", "=", "U", ".", "dict_append", "(", "valid_eval_str", ",", "ep_valid_eval", ")", "\n", "\n", "# TODO add early stopping and best ckpt save", "\n", "# TODO add tensorboard summary", "\n", "ckpt", ".", "write", "(", "output_path", "+", "'/ckpt/final'", ")", "\n", "\n", "", "return", "train_eval_str", ",", "valid_eval_str", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer.restore": [[119, 126], ["range", "tensorflow.train.Checkpoint", "tensorflow.train.Checkpoint.restore", "len", "net_args.update", "type"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer.restore"], ["", "def", "restore", "(", "self", ",", "ckpt_path", ")", ":", "\n", "        ", "nets", "=", "self", ".", "model", ".", "net", "if", "type", "(", "self", ".", "model", ".", "net", ")", "is", "list", "else", "[", "self", ".", "model", ".", "net", "]", "\n", "net_args", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "nets", ")", ")", ":", "\n", "            ", "net_args", ".", "update", "(", "{", "'net%d'", "%", "i", ":", "nets", "[", "i", "]", "}", ")", "\n", "", "ckpt", "=", "tf", ".", "train", ".", "Checkpoint", "(", "**", "net_args", ")", "\n", "ckpt", ".", "restore", "(", "ckpt_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer.eval": [[127, 171], ["kwargs.get", "kwargs.get", "kwargs.get", "time.time", "range", "type", "time.time", "trainer_tf.Trainer.model.eval", "print", "trainer_tf.Trainer.model.eval", "utils.util.dict_concat", "trainer_tf.Trainer.model.eval", "utils.util.dict_concat", "print", "print", "print", "time.time", "print", "data_provider", "trainer_tf.Trainer.pop", "utils.util.dict_append", "print", "data_provider", "trainer_tf.Trainer.pop", "utils.util.dict_append", "time.time", "utils.util.dict_to_str"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer.eval", "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer.eval", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_concat", "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer.eval", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_concat", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_append", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_append", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_to_str"], ["", "def", "eval", "(", "self", ",", "data_in", ",", "**", "kwargs", ")", ":", "\n", "        ", "batch_size", "=", "kwargs", ".", "get", "(", "'batch_size'", ",", "1", ")", "\n", "print_str", "=", "kwargs", ".", "get", "(", "'print_str'", ",", "True", ")", "\n", "need_imgs", "=", "kwargs", ".", "get", "(", "'need_imgs'", ",", "False", ")", "\n", "if", "type", "(", "data_in", ")", "is", "dict", ":", "\n", "            ", "time_start", "=", "time", ".", "time", "(", ")", "\n", "eval_dict", "=", "self", ".", "model", ".", "eval", "(", "data_in", ",", "**", "kwargs", ")", "\n", "time_cost", "=", "time", ".", "time", "(", ")", "-", "time_start", "\n", "if", "print_str", ":", "\n", "                ", "print", "(", "'Evaluation time cost is {:.1f}'", ".", "format", "(", "time_cost", ")", ")", "\n", "", "return", "eval_dict", "\n", "\n", "", "data_provider", "=", "data_in", "\n", "ndata", "=", "data_provider", ".", "size", "\n", "m", "=", "ndata", "//", "batch_size", "\n", "n", "=", "ndata", "%", "batch_size", "\n", "results", "=", "{", "}", "\n", "imgs", "=", "{", "}", "\n", "if", "print_str", ":", "\n", "            ", "print", "(", "'Evaluate {} data:'", ".", "format", "(", "ndata", ")", ")", "\n", "", "time_start", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "sub_results", "=", "self", ".", "model", ".", "eval", "(", "data_provider", "(", "batch_size", ")", ",", "**", "kwargs", ")", "\n", "sub_imgs", "=", "sub_results", ".", "pop", "(", "'imgs'", ")", "if", "'imgs'", "in", "sub_results", "else", "None", "\n", "results", "=", "U", ".", "dict_concat", "(", "results", ",", "sub_results", ")", "\n", "if", "need_imgs", "and", "sub_imgs", "is", "not", "None", ":", "\n", "                ", "imgs", "=", "U", ".", "dict_append", "(", "imgs", ",", "sub_imgs", ")", "\n", "", "if", "print_str", ":", "\n", "                ", "print", "(", "'evalated {} data'", ".", "format", "(", "batch_size", "*", "(", "i", "+", "1", ")", ")", ")", "\n", "", "", "if", "n", ">", "0", ":", "\n", "            ", "sub_results", "=", "self", ".", "model", ".", "eval", "(", "data_provider", "(", "n", ")", ",", "**", "kwargs", ")", "\n", "sub_imgs", "=", "sub_results", ".", "pop", "(", "'imgs'", ")", "if", "'imgs'", "in", "sub_results", "else", "None", "\n", "results", "=", "U", ".", "dict_concat", "(", "results", ",", "sub_results", ")", "\n", "if", "need_imgs", "and", "sub_imgs", "is", "not", "None", ":", "\n", "                ", "imgs", "=", "U", ".", "dict_append", "(", "imgs", ",", "sub_imgs", ")", "\n", "", "print", "(", "'evalated {} data'", ".", "format", "(", "ndata", ")", ")", "\n", "", "if", "print_str", ":", "\n", "            ", "time_cost", "=", "time", ".", "time", "(", ")", "-", "time_start", "\n", "print", "(", "'Time cost is {:.1f}'", ".", "format", "(", "time_cost", ")", ")", "\n", "print", "(", "'  {}'", ".", "format", "(", "U", ".", "dict_to_str", "(", "results", ")", ")", ")", "\n", "", "if", "need_imgs", ":", "\n", "            ", "return", "results", ",", "imgs", "\n", "", "else", ":", "\n", "            ", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer.predict": [[172, 193], ["range", "type", "time.time", "trainer_tf.Trainer.model.predict", "print", "trainer_tf.Trainer.model.predict", "trainer_tf.Trainer.model.predict", "time.time", "data_provider", "numpy.concatenate", "data_provider", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer.predict", "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer.predict", "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer.predict"], ["", "", "def", "predict", "(", "self", ",", "data_in", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "if", "type", "(", "data_in", ")", "is", "dict", ":", "\n", "            ", "time_start", "=", "time", ".", "time", "(", ")", "\n", "predictions", "=", "self", ".", "model", ".", "predict", "(", "data_in", ")", "\n", "time_cost", "=", "time", ".", "time", "(", ")", "-", "time_start", "\n", "print", "(", "'Prediction time cost is {:.1f}'", ".", "format", "(", "time_cost", ")", ")", "\n", "return", "predictions", "\n", "", "data_provider", "=", "data_in", "\n", "ndata", "=", "data_provider", ".", "size", "\n", "m", "=", "ndata", "//", "batch_size", "\n", "n", "=", "ndata", "%", "batch_size", "\n", "predictions", "=", "None", "\n", "for", "_", "in", "range", "(", "m", ")", ":", "\n", "            ", "sub_predictions", "=", "self", ".", "model", ".", "predict", "(", "data_provider", "(", "batch_size", ")", ")", "\n", "predictions", "=", "np", ".", "concatenate", "(", "(", "predictions", ",", "sub_predictions", ")", ",", "\n", "0", ")", "if", "predictions", "is", "not", "None", "else", "sub_predictions", "\n", "", "if", "n", ">", "0", ":", "\n", "            ", "sub_predictions", "=", "self", ".", "model", ".", "predict", "(", "data_provider", "(", "n", ")", ")", "\n", "predictions", "=", "np", ".", "concatenate", "(", "(", "predictions", ",", "sub_predictions", ")", ",", "\n", "0", ")", "if", "predictions", "is", "not", "None", "else", "sub_predictions", "\n", "", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer._grads_add": [[195, 211], ["type", "enumerate", "range", "len", "enumerate"], "methods", ["None"], ["", "def", "_grads_add", "(", "self", ",", "grads", ",", "mini_grads", ")", ":", "\n", "        ", "if", "grads", "is", "None", ":", "\n", "            ", "grads", "=", "mini_grads", "\n", "", "else", ":", "\n", "            ", "if", "type", "(", "grads", ")", "is", "not", "tuple", ":", "\n", "                ", "for", "i", ",", "g", "in", "enumerate", "(", "mini_grads", ")", ":", "\n", "                    ", "if", "g", "is", "not", "None", ":", "\n", "                        ", "grads", "[", "i", "]", "+=", "g", "\n", "", "", "", "else", ":", "\n", "                ", "for", "gi", "in", "range", "(", "len", "(", "grads", ")", ")", ":", "\n", "                    ", "sub_grads", "=", "grads", "[", "gi", "]", "\n", "sub_mini_grads", "=", "mini_grads", "[", "gi", "]", "\n", "for", "i", ",", "g", "in", "enumerate", "(", "sub_mini_grads", ")", ":", "\n", "                        ", "if", "g", "is", "not", "None", ":", "\n", "                            ", "sub_grads", "[", "i", "]", "+=", "g", "\n", "", "", "", "", "", "return", "grads", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.trainer_tf.Trainer._grads_div": [[212, 225], ["type", "range", "range", "len", "len", "range", "len"], "methods", ["None"], ["", "def", "_grads_div", "(", "self", ",", "grads", ",", "n", ")", ":", "\n", "        ", "if", "n", "!=", "1", ":", "\n", "            ", "if", "type", "(", "grads", ")", "is", "not", "tuple", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "grads", ")", ")", ":", "\n", "                    ", "if", "grads", "[", "i", "]", "is", "not", "None", ":", "\n", "                        ", "grads", "[", "i", "]", "/=", "n", "\n", "", "", "", "else", ":", "\n", "                ", "for", "gi", "in", "range", "(", "len", "(", "grads", ")", ")", ":", "\n", "                    ", "sub_grads", "=", "grads", "[", "gi", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "sub_grads", ")", ")", ":", "\n", "                        ", "if", "sub_grads", "[", "i", "]", "is", "not", "None", ":", "\n", "                            ", "sub_grads", "[", "i", "]", "/=", "n", "\n", "", "", "", "", "", "return", "grads", "", "", "", ""]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.learning_rate.StepDecayLearningRate.__init__": [[4, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "learning_rate", ",", "decay_step", ",", "decay_rate", ",", "data_size", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "_lr", "=", "learning_rate", "\n", "self", ".", "_iteration", "=", "data_size", "//", "batch_size", "\n", "self", ".", "_decay_step", "=", "decay_step", "\n", "self", ".", "_decay_rate", "=", "decay_rate", "\n", "self", ".", "_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.learning_rate.StepDecayLearningRate.__call__": [[11, 17], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_idx", "+=", "1", "\n", "if", "self", ".", "_idx", "/", "self", ".", "_iteration", ">", "self", ".", "_decay_step", ":", "\n", "            ", "self", ".", "_lr", "*=", "self", ".", "_decay_rate", "\n", "self", ".", "_idx", "=", "1", "\n", "", "return", "self", ".", "_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.learning_rate.StepDecayLearningRate.__str__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'{:g}'", ".", "format", "(", "self", ".", "_lr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_processor.Processor.pre_process": [[8, 22], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "pre_process", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"Abstract method, need to be inherited for pre-processing.\n        Parameters\n        ----------\n        data_dict: dict\n            Dictionary for all of the input data.\n\n        Returns\n        -------\n        dict\n            Dictionary for all the data after processing.\n            Size won't change if no resize operation.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_processor.Processor.post_process": [[24, 38], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "post_process", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"Abstract method, need to be inherited for post-processing.\n        Parameters\n        ----------\n        data_dict: dict\n            Dictionary for all of the input data.\n\n        Returns\n        -------\n        dict\n            Dictionary for all the data after processing.\n            Size won't change if no resize operation.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_processor.SimpleImageProcessor.__init__": [[86, 98], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "pre", "=", "None", ",", "post", "=", "None", ")", ":", "\n", "        ", "self", ".", "_pre", "=", "pre", "\n", "self", ".", "_post", "=", "post", "\n", "self", ".", "_mdict", "=", "{", "\n", "'min-max'", ":", "M", ".", "min_max", ",", "\n", "'zero-mean'", ":", "M", ".", "zero_mean", ",", "\n", "'median-mean'", ":", "M", ".", "median_mean", ",", "\n", "'one-hot'", ":", "M", ".", "one_hot", ",", "\n", "'rgb2gray'", ":", "M", ".", "rgb2gray", ",", "\n", "'resize2d'", ":", "M", ".", "resize2d", ",", "\n", "'resize3d'", ":", "M", ".", "resize3d", ",", "\n", "'channelcheck'", ":", "M", ".", "channel_check", "\n", "#TODO new method add here", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_processor.SimpleImageProcessor.pre_process": [[102, 128], ["data_processor.SimpleImageProcessor._process", "data_dict.update"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_processor.SimpleImageProcessor._process"], ["", "def", "pre_process", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"A basic pre processing pipline. TODO: Modify as required\n\n        Parameters\n        ----------\n        data_dict: dict\n            Dictionary for all of the input data.\n\n        Returns\n        -------\n        dict\n            Dictionary for all the data after processing.\n            Size won't change if no resize operation.\n\n        \"\"\"", "\n", "if", "self", ".", "_pre", "is", "None", ":", "\n", "            ", "return", "data_dict", "\n", "\n", "", "for", "key", "in", "self", ".", "_pre", ":", "\n", "            ", "for", "augm", "in", "self", ".", "_pre", "[", "key", "]", ":", "\n", "                ", "if", "key", "in", "data_dict", ":", "\n", "                    ", "item", "=", "data_dict", "[", "key", "]", "\n", "new_item", "=", "self", ".", "_process", "(", "item", ",", "augm", ")", "\n", "data_dict", ".", "update", "(", "{", "key", ":", "new_item", "}", ")", "\n", "\n", "", "", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_processor.SimpleImageProcessor.post_process": [[129, 136], ["None"], "methods", ["None"], ["", "def", "post_process", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"Post processing method\n        TODO\n        \"\"\"", "\n", "if", "self", ".", "_pre", "is", "None", ":", "\n", "            ", "return", "data_dict", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_processor.SimpleImageProcessor._process": [[137, 158], ["type", "type", "callable"], "methods", ["None"], ["", "def", "_process", "(", "self", ",", "data", ",", "augm", ")", ":", "\n", "        ", "\"\"\"Process data according to accepted augments.\n\n        Parameters\n        ----------\n            data: ndarray\n                Data need to be processed.\n            augm: str or dict\n                Method name or a list of method name and required augments (e.g. ['resize2d', (512,512)]).\n                Custom method is allowed here. If it is, the augm should like [function, {'arg1': arg1, 'arg2': arg2, ...}]\n\n        \"\"\"", "\n", "if", "type", "(", "augm", ")", "is", "str", ":", "\n", "            ", "assert", "augm", "in", "self", ".", "_mdict", ",", "'Method \"{}\" not found!'", ".", "format", "(", "augm", ")", "\n", "return", "self", ".", "_mdict", "[", "augm", "]", "(", "data", ")", "\n", "", "if", "type", "(", "augm", ")", "is", "tuple", ":", "\n", "# custom process method", "\n", "            ", "if", "callable", "(", "augm", "[", "0", "]", ")", ":", "\n", "                ", "return", "augm", "[", "0", "]", "(", "data", ",", "**", "augm", "[", "1", "]", ")", "\n", "", "assert", "augm", "[", "0", "]", "in", "self", ".", "_mdict", ",", "'Method \"{}\" not found!'", ".", "format", "(", "augm", "[", "0", "]", ")", "\n", "return", "self", ".", "_mdict", "[", "augm", "[", "0", "]", "]", "(", "data", ",", "augm", "[", "1", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider.__init__": [[47, 79], ["len", "type", "glob.glob", "data_provider.DataProvider._load_data", "type", "type", "type", "ValueError", "len", "data_provider.DataProvider._build_temp_folder"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider._load_data", "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider._build_temp_folder"], ["def", "__init__", "(", "self", ",", "\n", "data", ",", "\n", "data_suffix", ",", "\n", "processor", "=", "None", ",", "\n", "is_save_temp", "=", "False", ",", "\n", "is_pre_load", "=", "False", ",", "\n", "is_shuffle", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "data_suffix", ")", ">", "0", ",", "'Empty suffix!'", "\n", "self", ".", "_org_suffix", "=", "data_suffix", "[", "0", "]", "\n", "self", ".", "_other_suffix", "=", "data_suffix", "[", "1", ":", "]", "\n", "self", ".", "_is_shuffle", "=", "is_shuffle", "\n", "self", ".", "_is_save_temp", "=", "is_save_temp", "\n", "\n", "self", ".", "_processor", "=", "processor", "\n", "\n", "self", ".", "_file_list", "=", "None", "\n", "self", ".", "_all_data", "=", "None", "\n", "if", "type", "(", "data", ")", "is", "str", ":", "\n", "            ", "self", ".", "_file_list", "=", "glob", ".", "glob", "(", "data", ")", "\n", "", "elif", "type", "(", "data", ")", "is", "list", "or", "type", "(", "data", ")", "is", "np", ".", "ndarray", ":", "\n", "            ", "self", ".", "_file_list", "=", "data", "\n", "", "elif", "type", "(", "data", ")", "is", "dict", ":", "\n", "            ", "self", ".", "_all_data", "=", "data", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Only accept one of (search_path, file_list, data_dict).'", ")", "\n", "\n", "", "self", ".", "_cur_i", "=", "0", "\n", "if", "self", ".", "_file_list", "is", "not", "None", ":", "\n", "            ", "if", "is_pre_load", ":", "\n", "                ", "self", ".", "_all_data", "=", "self", ".", "_load_data", "(", "len", "(", "self", ".", "_file_list", ")", ")", "\n", "", "elif", "is_save_temp", ":", "\n", "                ", "self", ".", "_temp_dir", "=", "self", ".", "_build_temp_folder", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider.__call__": [[80, 114], ["numpy.array", "len", "data_dict.update", "data_provider.DataProvider._next_idx", "data_dict.update", "data_dict.update", "range", "data_provider.DataProvider._load_temp_file", "data_provider.DataProvider._load_data"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider._next_idx", "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider._load_temp_file", "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider._load_data"], ["", "", "", "def", "__call__", "(", "self", ",", "n", ")", ":", "\n", "        ", "\"\"\"Require images.\n\n        Parameters\n        ----------\n        n: int\n            The number of images required.\n\n        Returns\n        -------\n        dict\n            A dictionary of ndarray data:\n                {\n                    'data_suffix':      ndarray,\n                    'other_suffix 1':   ndarray,\n                    'other_suffix 1':   ndarray,\n                    ...\n                }\n            The shape of ndarray will be (n, x, y, ..., c).\n                n is the number of data, which caller asked.\n                x, y, ... is the size of data.\n                c is the number of channels (for label is the numebr of classes).\n        \"\"\"", "\n", "data_dict", "=", "{", "}", "\n", "if", "self", ".", "_all_data", "is", "not", "None", ":", "\n", "            ", "idx_list", "=", "np", ".", "array", "(", "range", "(", "self", ".", "_cur_i", ",", "self", ".", "_cur_i", "+", "n", ")", ")", "%", "len", "(", "self", ".", "_file_list", ")", "\n", "for", "key", "in", "self", ".", "_all_data", ":", "\n", "                ", "data_dict", ".", "update", "(", "{", "key", ":", "self", ".", "_all_data", "[", "key", "]", "[", "idx_list", "]", "}", ")", "\n", "self", ".", "_next_idx", "(", "n", ")", "\n", "", "", "elif", "self", ".", "_is_save_temp", ":", "\n", "            ", "data_dict", ".", "update", "(", "self", ".", "_load_temp_file", "(", "n", ")", ")", "\n", "", "else", ":", "\n", "            ", "data_dict", ".", "update", "(", "self", ".", "_load_data", "(", "n", ")", ")", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider.size": [[115, 118], ["len", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_file_list", ")", "if", "self", ".", "_file_list", "is", "not", "None", "else", "len", "(", "self", ".", "_all_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider._load_data": [[119, 159], ["range", "utils.util.dict_list2arr", "data_provider.DataProvider.update", "utils.util.dict_append", "data_provider.DataProvider._next_idx", "x_name.replace", "data_provider.DataProvider.update", "data_provider.DataProvider._processor.pre_process", "utils.data_loader.load_file", "utils.data_loader.load_file"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_list2arr", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_append", "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider._next_idx", "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_processor.SimpleImageProcessor.pre_process", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.data_loader.load_file", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.data_loader.load_file"], ["", "def", "_load_data", "(", "self", ",", "n", ")", ":", "\n", "        ", "\"\"\"Load and process data one by one\n\n        Parameters\n        ----------\n        n: int\n            The number of images loaded.\n\n        Returns\n        -------\n        dict\n            A dictionary of ndarray data:\n                {\n                    'data_suffix':      ndarray,\n                    'other_suffix 1':   ndarray,\n                    'other_suffix 1':   ndarray,\n                    ...\n                }\n            The shape of ndarray will be (n, x, y, ..., c).\n                n is the number of data, which caller asked.\n                x, y, ... is the size of data.\n                c is the number of channels (for label is the numebr of classes).\n        \"\"\"", "\n", "data_dict", "=", "{", "}", "\n", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "            ", "sub_data_dict", "=", "{", "}", "\n", "x_name", "=", "self", ".", "_file_list", "[", "self", ".", "_cur_i", "]", "\n", "sub_data_dict", ".", "update", "(", "{", "self", ".", "_org_suffix", ":", "L", ".", "load_file", "(", "x_name", ")", "}", ")", "\n", "\n", "for", "o_suffix", "in", "self", ".", "_other_suffix", ":", "\n", "                ", "o_name", "=", "x_name", ".", "replace", "(", "self", ".", "_org_suffix", ",", "o_suffix", ")", "\n", "sub_data_dict", ".", "update", "(", "{", "o_suffix", ":", "L", ".", "load_file", "(", "o_name", ")", "}", ")", "\n", "# process", "\n", "", "if", "self", ".", "_processor", "is", "not", "None", ":", "\n", "                ", "sub_data_dict", "=", "self", ".", "_processor", ".", "pre_process", "(", "sub_data_dict", ")", "\n", "\n", "", "data_dict", "=", "U", ".", "dict_append", "(", "data_dict", ",", "sub_data_dict", ")", "\n", "self", ".", "_next_idx", "(", ")", "\n", "", "U", ".", "dict_list2arr", "(", "data_dict", ")", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider._build_temp_folder": [[160, 172], ["print", "tempfile.TemporaryDirectory", "range", "print", "len", "data_provider.DataProvider._load_data", "new_filelist.append", "numpy.save"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider._load_data"], ["", "def", "_build_temp_folder", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Build temp folder...'", ")", "\n", "temp_dir", "=", "tempfile", ".", "TemporaryDirectory", "(", ")", "\n", "new_filelist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_file_list", ")", ")", ":", "\n", "            ", "data_dict", "=", "self", ".", "_load_data", "(", "1", ")", "\n", "temp_filepath", "=", "'{}/temp_dict_{}.npy'", ".", "format", "(", "temp_dir", ".", "name", ",", "i", ")", "\n", "new_filelist", ".", "append", "(", "temp_filepath", ")", "\n", "np", ".", "save", "(", "temp_filepath", ",", "data_dict", ")", "\n", "", "self", ".", "_file_list", "=", "new_filelist", "\n", "print", "(", "'Processed temp files were saved to \\'{}\\''", ".", "format", "(", "temp_dir", ")", ")", "\n", "return", "temp_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider._load_temp_file": [[173, 183], ["os.path.exists", "range", "numpy.load().item", "data_provider.DataProvider._next_idx", "utils.util.dict_concat", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider._next_idx", "home.repos.pwc.inspect_result.MinaJf_DRU-net.utils.util.dict_concat"], ["", "def", "_load_temp_file", "(", "self", ",", "n", ")", ":", "\n", "        ", "assert", "self", ".", "_temp_dir", "is", "not", "None", ",", "'Temp dir is None'", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_temp_dir", ".", "name", ")", ",", "'Can\\'t find temp directory \\'{}\\''", ".", "foramt", "(", "self", ".", "_temp_dir", ".", "name", ")", "\n", "data_dict", "=", "{", "}", "\n", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "            ", "temp_filename", "=", "self", ".", "_file_list", "[", "self", ".", "_cur_i", "]", "\n", "sub_data_dict", "=", "np", ".", "load", "(", "temp_filename", ",", "allow_pickle", "=", "'TRUE'", ")", ".", "item", "(", ")", "\n", "self", ".", "_next_idx", "(", ")", "\n", "data_dict", "=", "U", ".", "dict_concat", "(", "data_dict", ",", "sub_data_dict", ")", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.MinaJf_DRU-net.core.data_provider.DataProvider._next_idx": [[184, 201], ["len", "len", "numpy.random.permutation", "len"], "methods", ["None"], ["", "def", "_next_idx", "(", "self", ",", "n", "=", "1", ")", ":", "\n", "        ", "\"\"\"Cycle index.\n        Parameters\n        ----------\n        n: int, optional\n            The value needs to be added\u3002\n        \"\"\"", "\n", "self", ".", "_cur_i", "+=", "n", "\n", "if", "self", ".", "_cur_i", ">=", "len", "(", "self", ".", "_file_list", ")", ":", "\n", "            ", "self", ".", "_cur_i", "=", "self", ".", "_cur_i", "%", "len", "(", "self", ".", "_file_list", ")", "\n", "if", "self", ".", "_is_shuffle", ":", "\n", "                ", "shuffle_idx", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "_file_list", ")", ")", "\n", "if", "self", ".", "_file_list", "is", "not", "None", ":", "\n", "                    ", "self", ".", "_file_list", "=", "[", "self", ".", "_file_list", "[", "i", "]", "for", "i", "in", "shuffle_idx", "]", "\n", "", "if", "self", ".", "_all_data", "is", "not", "None", ":", "\n", "                    ", "for", "key", "in", "self", ".", "_all_data", ":", "\n", "                        ", "self", ".", "_all_data", "[", "key", "]", "=", "self", ".", "_all_data", "[", "key", "]", "[", "shuffle_idx", "]", "", "", "", "", "", "", "", ""]]}