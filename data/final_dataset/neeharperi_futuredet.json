{"home.repos.pwc.inspect_result.neeharperi_futuredet.None.statistics.get_sample_data": [[53, 96], ["nusc.get", "nusc.get", "nusc.get", "nusc.get", "nusc.get_sample_data_path", "numpy.array", "list", "nusc.get_boxes", "nusc.box_velocity", "box.translate", "box.rotate", "box.translate", "box.rotate", "box_list.append", "map", "numpy.array", "pyquaternion.Quaternion", "numpy.array", "pyquaternion.Quaternion"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["def", "get_sample_data", "(", "nusc", ",", "sample_data_token", ":", "str", ",", "selected_anntokens", ":", "List", "[", "str", "]", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Returns the data path as well as all annotations related to that sample_data.\n    Note that the boxes are transformed into the current sensor's coordinate frame.\n    :param sample_data_token: Sample_data token.\n    :param selected_anntokens: If provided only return the selected annotation.\n    :return: (data_path, boxes, camera_intrinsic <np.array: 3, 3>)\n    \"\"\"", "\n", "\n", "# Retrieve sensor & pose records", "\n", "sd_record", "=", "nusc", ".", "get", "(", "\"sample_data\"", ",", "sample_data_token", ")", "\n", "cs_record", "=", "nusc", ".", "get", "(", "\"calibrated_sensor\"", ",", "sd_record", "[", "\"calibrated_sensor_token\"", "]", ")", "\n", "sensor_record", "=", "nusc", ".", "get", "(", "\"sensor\"", ",", "cs_record", "[", "\"sensor_token\"", "]", ")", "\n", "pose_record", "=", "nusc", ".", "get", "(", "\"ego_pose\"", ",", "sd_record", "[", "\"ego_pose_token\"", "]", ")", "\n", "\n", "data_path", "=", "nusc", ".", "get_sample_data_path", "(", "sample_data_token", ")", "\n", "\n", "if", "sensor_record", "[", "\"modality\"", "]", "==", "\"camera\"", ":", "\n", "        ", "cam_intrinsic", "=", "np", ".", "array", "(", "cs_record", "[", "\"camera_intrinsic\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "cam_intrinsic", "=", "None", "\n", "\n", "# Retrieve all sample annotations and map to sensor coordinate system.", "\n", "", "if", "selected_anntokens", "is", "not", "None", ":", "\n", "        ", "boxes", "=", "list", "(", "map", "(", "nusc", ".", "get_box", ",", "selected_anntokens", ")", ")", "\n", "", "else", ":", "\n", "        ", "boxes", "=", "nusc", ".", "get_boxes", "(", "sample_data_token", ")", "\n", "\n", "# Make list of Box objects including coord system transforms.", "\n", "", "box_list", "=", "[", "]", "\n", "for", "box", "in", "boxes", ":", "\n", "        ", "box", ".", "velocity", "=", "nusc", ".", "box_velocity", "(", "box", ".", "token", ")", "\n", "# Move box to ego vehicle coord system", "\n", "box", ".", "translate", "(", "-", "np", ".", "array", "(", "pose_record", "[", "\"translation\"", "]", ")", ")", "\n", "box", ".", "rotate", "(", "Quaternion", "(", "pose_record", "[", "\"rotation\"", "]", ")", ".", "inverse", ")", "\n", "\n", "#  Move box to sensor coord system", "\n", "box", ".", "translate", "(", "-", "np", ".", "array", "(", "cs_record", "[", "\"translation\"", "]", ")", ")", "\n", "box", ".", "rotate", "(", "Quaternion", "(", "cs_record", "[", "\"rotation\"", "]", ")", ".", "inverse", ")", "\n", "\n", "box_list", ".", "append", "(", "box", ")", "\n", "\n", "", "return", "data_path", ",", "box_list", ",", "cam_intrinsic", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.None.statistics.window": [[97, 104], ["itertools.tee", "range", "zip", "next"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.next"], ["", "def", "window", "(", "iterable", ",", "size", ")", ":", "\n", "    ", "iters", "=", "tee", "(", "iterable", ",", "size", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "size", ")", ":", "\n", "        ", "for", "each", "in", "iters", "[", "i", ":", "]", ":", "\n", "            ", "next", "(", "each", ",", "None", ")", "\n", "\n", "", "", "return", "zip", "(", "*", "iters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.None.statistics.get_time": [[105, 111], ["nusc.get", "nusc.get"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["", "def", "get_time", "(", "nusc", ",", "src_token", ",", "dst_token", ")", ":", "\n", "    ", "time_last", "=", "1e-6", "*", "nusc", ".", "get", "(", "'sample'", ",", "src_token", ")", "[", "\"timestamp\"", "]", "\n", "time_first", "=", "1e-6", "*", "nusc", ".", "get", "(", "'sample'", ",", "dst_token", ")", "[", "\"timestamp\"", "]", "\n", "time_diff", "=", "time_first", "-", "time_last", "\n", "\n", "return", "time_diff", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.None.statistics.center_distance": [[112, 120], ["numpy.linalg.norm", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_module.ConvModule.norm"], ["", "def", "center_distance", "(", "gt_box", ",", "pred_box", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    L2 distance between the box centers (xy only).\n    :param gt_box: GT annotation sample.\n    :param pred_box: Predicted sample.\n    :return: L2 distance.\n    \"\"\"", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "pred_box", ".", "center", "[", ":", "2", "]", ")", "-", "np", ".", "array", "(", "gt_box", ".", "center", "[", ":", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.None.statistics.trajectory": [[121, 139], ["copy.deepcopy", "copy.deepcopy", "numpy.sum", "list", "statistics.center_distance", "max", "map", "statistics.center_distance", "max", "numpy.array", "list", "datetime.time"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.center_distance", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.center_distance"], ["", "def", "trajectory", "(", "nusc", ",", "boxes", ",", "time", ",", "timesteps", "=", "7", ")", ":", "\n", "    ", "target", "=", "boxes", "[", "-", "1", "]", "\n", "\n", "static_forecast", "=", "deepcopy", "(", "boxes", "[", "0", "]", ")", "\n", "\n", "linear_forecast", "=", "deepcopy", "(", "boxes", "[", "0", "]", ")", "\n", "vel", "=", "linear_forecast", ".", "velocity", "[", ":", "2", "]", "\n", "disp", "=", "np", ".", "sum", "(", "list", "(", "map", "(", "lambda", "x", ":", "np", ".", "array", "(", "list", "(", "vel", ")", "+", "[", "0", "]", ")", "*", "x", ",", "time", ")", ")", ",", "axis", "=", "0", ")", "\n", "linear_forecast", ".", "center", "=", "linear_forecast", ".", "center", "+", "disp", "\n", "\n", "if", "center_distance", "(", "target", ",", "static_forecast", ")", "<", "max", "(", "target", ".", "wlh", "[", "0", "]", ",", "target", ".", "wlh", "[", "1", "]", ")", ":", "\n", "        ", "return", "\"static\"", "\n", "\n", "", "elif", "center_distance", "(", "target", ",", "linear_forecast", ")", "<", "max", "(", "target", ".", "wlh", "[", "0", "]", ",", "target", ".", "wlh", "[", "1", "]", ")", ":", "\n", "        ", "return", "\"linear\"", "\n", "\n", "", "else", ":", "\n", "        ", "return", "\"nonlinear\"", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.None.statistics.get_annotations": [[140, 193], ["zip", "nusc.get", "nusc.get", "nusc.get", "range", "statistics.trajectory", "forecast_boxes.append", "forecast_annotations.append", "forecast_trajectory.append", "Box", "Box.translate", "Box.rotate", "Box.translate", "Box.rotate", "tracklet_box.append", "tracklet_annotation.append", "statistics.get_time", "nusc.get", "nusc.get", "statistics.window", "pyquaternion.Quaternion", "nusc.box_velocity", "numpy.array", "pyquaternion.Quaternion", "numpy.array", "pyquaternion.Quaternion", "sample_tokens.index"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.trajectory", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.get_time", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.window"], ["", "", "def", "get_annotations", "(", "nusc", ",", "annotations", ",", "ref_boxes", ",", "timesteps", ")", ":", "\n", "    ", "forecast_annotations", "=", "[", "]", "\n", "forecast_boxes", "=", "[", "]", "\n", "forecast_trajectory", "=", "[", "]", "\n", "sample_tokens", "=", "[", "s", "[", "\"token\"", "]", "for", "s", "in", "nusc", ".", "sample", "]", "\n", "\n", "for", "annotation", ",", "ref_box", "in", "zip", "(", "annotations", ",", "ref_boxes", ")", ":", "\n", "        ", "tracklet_box", "=", "[", "]", "\n", "tracklet_annotation", "=", "[", "]", "\n", "tracklet_trajectory", "=", "[", "]", "\n", "\n", "token", "=", "nusc", ".", "sample", "[", "sample_tokens", ".", "index", "(", "annotation", "[", "\"sample_token\"", "]", ")", "]", "[", "\"data\"", "]", "[", "\"LIDAR_TOP\"", "]", "\n", "sd_record", "=", "nusc", ".", "get", "(", "\"sample_data\"", ",", "token", ")", "\n", "cs_record", "=", "nusc", ".", "get", "(", "\"calibrated_sensor\"", ",", "sd_record", "[", "\"calibrated_sensor_token\"", "]", ")", "\n", "pose_record", "=", "nusc", ".", "get", "(", "\"ego_pose\"", ",", "sd_record", "[", "\"ego_pose_token\"", "]", ")", "\n", "\n", "pannotation", "=", "annotation", "\n", "for", "i", "in", "range", "(", "timesteps", ")", ":", "\n", "            ", "box", "=", "Box", "(", "center", "=", "annotation", "[", "\"translation\"", "]", ",", "\n", "size", "=", "ref_box", ".", "wlh", ",", "\n", "orientation", "=", "Quaternion", "(", "annotation", "[", "\"rotation\"", "]", ")", ",", "\n", "velocity", "=", "nusc", ".", "box_velocity", "(", "annotation", "[", "\"token\"", "]", ")", ",", "\n", "name", "=", "annotation", "[", "\"category_name\"", "]", ",", "\n", "token", "=", "annotation", "[", "\"token\"", "]", ")", "\n", "\n", "box", ".", "translate", "(", "-", "np", ".", "array", "(", "pose_record", "[", "\"translation\"", "]", ")", ")", "\n", "box", ".", "rotate", "(", "Quaternion", "(", "pose_record", "[", "\"rotation\"", "]", ")", ".", "inverse", ")", "\n", "\n", "#  Move box to sensor coord system", "\n", "box", ".", "translate", "(", "-", "np", ".", "array", "(", "cs_record", "[", "\"translation\"", "]", ")", ")", "\n", "box", ".", "rotate", "(", "Quaternion", "(", "cs_record", "[", "\"rotation\"", "]", ")", ".", "inverse", ")", "\n", "\n", "tracklet_box", ".", "append", "(", "box", ")", "\n", "tracklet_annotation", ".", "append", "(", "annotation", ")", "\n", "\n", "next_token", "=", "annotation", "[", "\"next\"", "]", "\n", "prev_token", "=", "pannotation", "[", "\"prev\"", "]", "\n", "\n", "if", "next_token", "!=", "\"\"", ":", "\n", "                ", "annotation", "=", "nusc", ".", "get", "(", "\"sample_annotation\"", ",", "next_token", ")", "\n", "\n", "", "if", "prev_token", "!=", "\"\"", ":", "\n", "                ", "pannotation", "=", "nusc", ".", "get", "(", "\"sample_annotation\"", ",", "prev_token", ")", "\n", "\n", "", "", "tokens", "=", "[", "b", "[", "\"sample_token\"", "]", "for", "b", "in", "tracklet_annotation", "]", "\n", "time", "=", "[", "get_time", "(", "nusc", ",", "src", ",", "dst", ")", "for", "src", ",", "dst", "in", "window", "(", "tokens", ",", "2", ")", "]", "\n", "tracklet_trajectory", "=", "trajectory", "(", "nusc", ",", "tracklet_box", ",", "time", ",", "timesteps", ")", "\n", "\n", "forecast_boxes", ".", "append", "(", "tracklet_box", ")", "\n", "forecast_annotations", ".", "append", "(", "tracklet_annotation", ")", "\n", "forecast_trajectory", ".", "append", "(", "timesteps", "*", "[", "tracklet_trajectory", "]", ")", "\n", "\n", "", "return", "forecast_boxes", ",", "forecast_annotations", ",", "forecast_trajectory", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.None.visualize.center_distance": [[35, 44], ["numpy.linalg.norm", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_module.ConvModule.norm"], ["def", "center_distance", "(", "gt_box", ":", "EvalBox", ",", "pred_box", ":", "EvalBox", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    L2 distance between the box centers (xy only).\n    :param gt_box: GT annotation sample.\n    :param pred_box: Predicted sample.\n    :return: L2 distance.\n    \"\"\"", "\n", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "pred_box", "[", "\"translation\"", "]", "[", ":", "2", "]", ")", "-", "np", ".", "array", "(", "gt_box", "[", "\"translation\"", "]", "[", ":", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.None.visualize.window": [[45, 52], ["itertools.tee", "range", "zip", "next"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.next"], ["", "def", "window", "(", "iterable", ",", "size", ")", ":", "\n", "    ", "iters", "=", "tee", "(", "iterable", ",", "size", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "size", ")", ":", "\n", "        ", "for", "each", "in", "iters", "[", "i", ":", "]", ":", "\n", "            ", "next", "(", "each", ",", "None", ")", "\n", "\n", "", "", "return", "zip", "(", "*", "iters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.None.visualize.get_time": [[53, 59], ["nusc.get", "nusc.get"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["", "def", "get_time", "(", "nusc", ",", "src_token", ",", "dst_token", ")", ":", "\n", "    ", "time_last", "=", "1e-6", "*", "nusc", ".", "get", "(", "'sample'", ",", "src_token", ")", "[", "\"timestamp\"", "]", "\n", "time_first", "=", "1e-6", "*", "nusc", ".", "get", "(", "'sample'", ",", "dst_token", ")", "[", "\"timestamp\"", "]", "\n", "time_diff", "=", "time_first", "-", "time_last", "\n", "\n", "return", "time_diff", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.None.visualize.box2d_iou": [[61, 74], ["nuscenes.utils.data_classes.Box", "nuscenes.utils.data_classes.Box", "shapely.geometry.Polygon", "shapely.geometry.Polygon", "pyquaternion.Quaternion", "pyquaternion.Quaternion", "nuscenes.utils.geometry_utils.view_points", "nuscenes.utils.geometry_utils.view_points", "shapely.geometry.Polygon.intersection", "shapely.geometry.Polygon.union", "nuscenes.utils.data_classes.Box.corners", "numpy.eye", "nuscenes.utils.data_classes.Box.corners", "numpy.eye"], "function", ["None"], ["", "def", "box2d_iou", "(", "boxA", ",", "boxB", ")", ":", "\n", "    ", "A", "=", "Box", "(", "center", "=", "boxA", "[", "\"translation\"", "]", ",", "size", "=", "boxA", "[", "\"size\"", "]", ",", "orientation", "=", "Quaternion", "(", "boxA", "[", "\"rotation\"", "]", ")", ")", "\n", "B", "=", "Box", "(", "center", "=", "boxB", "[", "\"translation\"", "]", ",", "size", "=", "boxB", "[", "\"size\"", "]", ",", "orientation", "=", "Quaternion", "(", "boxB", "[", "\"rotation\"", "]", ")", ")", "\n", "\n", "cornersA", "=", "view_points", "(", "A", ".", "corners", "(", ")", ",", "np", ".", "eye", "(", "4", ")", ",", "normalize", "=", "False", ")", "[", ":", "2", ",", ":", "]", ".", "T", "\n", "cornersB", "=", "view_points", "(", "B", ".", "corners", "(", ")", ",", "np", ".", "eye", "(", "4", ")", ",", "normalize", "=", "False", ")", "[", ":", "2", ",", ":", "]", ".", "T", "\n", "\n", "polyA", "=", "Polygon", "(", "[", "(", "cornersA", "[", "0", "]", "[", "0", "]", ",", "cornersA", "[", "0", "]", "[", "1", "]", ")", ",", "(", "cornersA", "[", "1", "]", "[", "0", "]", ",", "cornersA", "[", "1", "]", "[", "1", "]", ")", ",", "(", "cornersA", "[", "5", "]", "[", "0", "]", ",", "cornersA", "[", "5", "]", "[", "1", "]", ")", ",", "(", "cornersA", "[", "4", "]", "[", "0", "]", ",", "cornersA", "[", "4", "]", "[", "1", "]", ")", "]", ")", "\n", "polyB", "=", "Polygon", "(", "[", "(", "cornersB", "[", "0", "]", "[", "0", "]", ",", "cornersB", "[", "0", "]", "[", "1", "]", ")", ",", "(", "cornersB", "[", "1", "]", "[", "0", "]", ",", "cornersB", "[", "1", "]", "[", "1", "]", ")", ",", "(", "cornersB", "[", "5", "]", "[", "0", "]", ",", "cornersB", "[", "5", "]", "[", "1", "]", ")", ",", "(", "cornersB", "[", "4", "]", "[", "0", "]", ",", "cornersB", "[", "4", "]", "[", "1", "]", ")", "]", ")", "\n", "\n", "iou", "=", "polyA", ".", "intersection", "(", "polyB", ")", ".", "area", "/", "polyA", ".", "union", "(", "polyB", ")", ".", "area", "\n", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.None.visualize.trajectory": [[76, 95], ["copy.deepcopy", "copy.deepcopy", "numpy.sum", "visualize.get_time", "visualize.box2d_iou", "list", "visualize.box2d_iou", "visualize.window", "map", "numpy.array", "list"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.get_time", "home.repos.pwc.inspect_result.neeharperi_futuredet.None.visualize.box2d_iou", "home.repos.pwc.inspect_result.neeharperi_futuredet.None.visualize.box2d_iou", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.window"], ["", "def", "trajectory", "(", "nusc", ",", "box", ":", "DetectionBox", ")", "->", "float", ":", "\n", "    ", "target", "=", "box", ".", "forecast_boxes", "[", "-", "1", "]", "\n", "time", "=", "[", "get_time", "(", "nusc", ",", "token", "[", "0", "]", ",", "token", "[", "1", "]", ")", "for", "token", "in", "window", "(", "[", "b", "[", "\"sample_token\"", "]", "for", "b", "in", "box", ".", "forecast_boxes", "]", ",", "2", ")", "]", "\n", "\n", "static_forecast", "=", "deepcopy", "(", "box", ".", "forecast_boxes", "[", "0", "]", ")", "\n", "\n", "if", "box2d_iou", "(", "target", ",", "static_forecast", ")", ">", "0", ":", "\n", "        ", "return", "\"static\"", "\n", "\n", "", "linear_forecast", "=", "deepcopy", "(", "box", ".", "forecast_boxes", "[", "0", "]", ")", "\n", "vel", "=", "linear_forecast", "[", "\"velocity\"", "]", "[", ":", "2", "]", "\n", "\n", "disp", "=", "np", ".", "sum", "(", "list", "(", "map", "(", "lambda", "x", ":", "np", ".", "array", "(", "list", "(", "vel", ")", "+", "[", "0", "]", ")", "*", "x", ",", "time", ")", ")", ",", "axis", "=", "0", ")", "\n", "linear_forecast", "[", "\"translation\"", "]", "=", "linear_forecast", "[", "\"translation\"", "]", "+", "disp", "\n", "\n", "if", "box2d_iou", "(", "target", ",", "linear_forecast", ")", ">", "0", ":", "\n", "        ", "return", "\"linear\"", "\n", "\n", "", "return", "\"nonlinear\"", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.tools.dist_test.save_pred": [[41, 44], ["open", "pickle.dump", "os.path.join"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.dump"], ["def", "save_pred", "(", "pred", ",", "root", ",", "split", ",", "modelCheckPoint", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"prediction_{}_{}.pkl\"", ".", "format", "(", "split", ",", "modelCheckPoint", ")", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "pred", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.tools.dist_test.load_pred": [[45, 49], ["open", "pickle.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load"], ["", "", "def", "load_pred", "(", "root", ",", "split", ",", "modelCheckPoint", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"prediction_{}_{}.pkl\"", ".", "format", "(", "split", ",", "modelCheckPoint", ")", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "pred", "=", "pickle", ".", "load", "(", "f", ")", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.tools.dist_test.parse_args": [[50, 107], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Train a detector\"", ")", "\n", "parser", ".", "add_argument", "(", "\"config\"", ",", "help", "=", "\"train config file path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--work_dir\"", ",", "required", "=", "True", ",", "help", "=", "\"the dir to save logs and models\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkpoint\"", ",", "help", "=", "\"the dir to checkpoint which the model read from\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--root\"", ",", "default", "=", "\"/ssd0/nperi/nuScenes/\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--txt_result\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"whether to save results to standard KITTI format of txt type\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpus\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"number of gpus to use \"", "\"(only applicable to non-distributed training)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--launcher\"", ",", "\n", "choices", "=", "[", "\"none\"", ",", "\"pytorch\"", ",", "\"slurm\"", ",", "\"mpi\"", "]", ",", "\n", "default", "=", "\"none\"", ",", "\n", "help", "=", "\"job launcher\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--speed_test\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--testset\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--extractBox\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--forecast\"", ",", "type", "=", "int", ",", "default", "=", "6", ")", "\n", "parser", ".", "add_argument", "(", "\"--forecast_mode\"", ",", "default", "=", "\"velocity_forward\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--classname\"", ",", "default", "=", "\"car\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--rerank\"", ",", "default", "=", "\"last\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--tp_pct\"", ",", "type", "=", "float", ",", "default", "=", "0.6", ")", "\n", "parser", ".", "add_argument", "(", "\"--static_only\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_only\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cohort_analysis\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--jitter\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--association_oracle\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--postprocess\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--nogroup\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--K\"", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--C\"", ",", "default", "=", "1", ",", "type", "=", "float", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--split\"", ",", "default", "=", "\"val\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--version\"", ",", "default", "=", "\"v1.0-trainval\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--modelCheckPoint\"", ",", "default", "=", "\"latest\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "\"LOCAL_RANK\"", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "\"LOCAL_RANK\"", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.tools.dist_test.main": [[109, 269], ["dist_test.parse_args", "det3d.torchie.Config.fromfile", "det3d.torchie.apis.get_root_logger", "det3d.torchie.apis.get_root_logger.info", "det3d.torchie.apis.get_root_logger.info", "det3d.models.build_detector", "dist_test.load_pred", "det3d.datasets.build_dataset.evaluation", "torch.cuda.set_device", "torch.distributed.init_process_group", "torch.distributed.get_world_size", "print", "det3d.datasets.build_dataset", "nuscenes.nuscenes.NuScenes", "zip", "det3d.datasets.build_dataloader", "det3d.torchie.trainer.load_checkpoint", "model.cuda.eval", "det3d.torchie.apis.get_root_logger.info", "torch.device", "time.time", "int", "int", "enumerate", "det3d.torchie.trainer.utils.synchronize", "det3d.torchie.trainer.utils.all_gather", "print", "dist_test.save_pred", "copy.deepcopy", "result_dict[].items", "int", "print", "det3d.datasets.build_dataset", "print", "Config.fromfile.data.val.info_path.replace", "Config.fromfile.data.val.info_path.replace", "det3d.datasets.build_dataset", "scene_data[].append", "apex.parallel.convert_syncbn_model", "torch.nn.parallel.DistributedDataParallel", "model.cuda.cuda", "det3d.torchie.ProgressBar", "load_pred.update", "os.path.exists", "os.makedirs", "print", "scene_data.keys", "model.cuda.cuda", "len", "torch.cuda.synchronize", "time.time", "torch.cuda.synchronize", "time.time", "torch.no_grad", "det3d.torchie.apis.batch_processor", "output.items", "detections.update", "len", "len", "torchie.ProgressBar.update", "v.to"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.parse_args", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.fromfile", "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.env.get_root_logger", "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_detector", "home.repos.pwc.inspect_result.neeharperi_futuredet.tools.dist_test.load_pred", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.evaluation", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_checkpoint", "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.eval", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.synchronize", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.all_gather", "home.repos.pwc.inspect_result.neeharperi_futuredet.tools.dist_test.save_pred", "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.exists", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.synchronize", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.synchronize", "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.batch_processor", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update"], ["", "def", "main", "(", ")", ":", "\n", "\n", "# torch.manual_seed(0)", "\n", "# torch.backends.cudnn.deterministic = True", "\n", "# torch.backends.cudnn.benchmark = False", "\n", "# np.random.seed(0)", "\n", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "cfg", ".", "local_rank", "=", "args", ".", "local_rank", "\n", "\n", "# update configs according to CLI args", "\n", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "\n", "", "distributed", "=", "False", "\n", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", ":", "\n", "        ", "distributed", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", ">", "1", "\n", "\n", "", "if", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", ")", "\n", "\n", "cfg", ".", "gpus", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "gpus", "=", "args", ".", "gpus", "\n", "\n", "# init logger before other steps", "\n", "", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "logger", ".", "info", "(", "\"Distributed testing: {}\"", ".", "format", "(", "distributed", ")", ")", "\n", "logger", ".", "info", "(", "f\"torch.backends.cudnn.benchmark: {torch.backends.cudnn.benchmark}\"", ")", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "train_cfg", "=", "None", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ")", "\n", "\n", "if", "args", ".", "testset", ":", "\n", "        ", "print", "(", "\"Use Test Set\"", ")", "\n", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "split", "==", "\"val\"", "or", "args", ".", "split", "==", "\"mini_val\"", ":", "\n", "            ", "print", "(", "\"Use Val Set\"", ")", "\n", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "val", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Use Train Set\"", ")", "\n", "cfg", ".", "data", ".", "val", ".", "info_path", "=", "cfg", ".", "data", ".", "val", ".", "info_path", ".", "replace", "(", "\"infos_val_10sweeps_withvelo_filter_True\"", ",", "\"infos_train_10sweeps_withvelo_filter_True\"", ")", "\n", "cfg", ".", "data", ".", "val", ".", "ann_file", "=", "cfg", ".", "data", ".", "val", ".", "info_path", ".", "replace", "(", "\"infos_val_10sweeps_withvelo_filter_True\"", ",", "\"infos_train_10sweeps_withvelo_filter_True\"", ")", "\n", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "val", ")", "\n", "\n", "", "", "if", "args", ".", "extractBox", ":", "\n", "        ", "nusc", "=", "NuScenes", "(", "version", "=", "args", ".", "version", ",", "dataroot", "=", "args", ".", "root", ",", "verbose", "=", "False", ")", "\n", "sample_data", "=", "[", "s", "for", "s", "in", "nusc", ".", "sample", "]", "\n", "scene_tokens", "=", "[", "s", "[", "\"scene_token\"", "]", "for", "s", "in", "nusc", ".", "sample", "]", "\n", "\n", "scene_data", "=", "{", "}", "\n", "\n", "for", "sample", ",", "scene", "in", "zip", "(", "sample_data", ",", "scene_tokens", ")", ":", "\n", "            ", "if", "scene", "not", "in", "scene_data", ".", "keys", "(", ")", ":", "\n", "                ", "scene_data", "[", "scene", "]", "=", "[", "]", "\n", "\n", "", "scene_data", "[", "scene", "]", ".", "append", "(", "sample", ")", "\n", "\n", "", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "cfg", ".", "data", ".", "samples_per_gpu", "if", "not", "args", ".", "speed_test", "else", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ",", "\n", ")", "\n", "\n", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "# put model on gpus", "\n", "if", "distributed", ":", "\n", "            ", "model", "=", "apex", ".", "parallel", ".", "convert_syncbn_model", "(", "model", ")", "\n", "model", "=", "DistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", "cfg", ".", "local_rank", ")", ",", "\n", "device_ids", "=", "[", "cfg", ".", "local_rank", "]", ",", "\n", "output_device", "=", "cfg", ".", "local_rank", ",", "\n", "# broadcast_buffers=False,", "\n", "find_unused_parameters", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "# model = fuse_bn_recursively(model)", "\n", "            ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "logger", ".", "info", "(", "f\"work dir: {args.work_dir}\"", ")", "\n", "if", "cfg", ".", "local_rank", "==", "0", ":", "\n", "            ", "prog_bar", "=", "torchie", ".", "ProgressBar", "(", "len", "(", "data_loader", ".", "dataset", ")", "//", "cfg", ".", "gpus", ")", "\n", "\n", "", "detections", "=", "{", "}", "\n", "cpu_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "start", "=", "int", "(", "len", "(", "dataset", ")", "/", "3", ")", "\n", "end", "=", "int", "(", "len", "(", "dataset", ")", "*", "2", "/", "3", ")", "\n", "\n", "time_start", "=", "0", "\n", "time_end", "=", "0", "\n", "\n", "for", "i", ",", "data_batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "if", "i", "==", "start", ":", "\n", "                ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "i", "==", "end", ":", "\n", "                ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "time_end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outputs", "=", "batch_processor", "(", "\n", "model", ",", "data_batch", ",", "train_mode", "=", "False", ",", "local_rank", "=", "args", ".", "local_rank", ",", "\n", ")", "\n", "", "for", "output", "in", "outputs", ":", "\n", "                ", "token", "=", "output", "[", "\"metadata\"", "]", "[", "\"token\"", "]", "\n", "for", "k", ",", "v", "in", "output", ".", "items", "(", ")", ":", "\n", "                    ", "if", "k", "not", "in", "[", "\n", "\"metadata\"", ",", "\n", "]", ":", "\n", "                        ", "output", "[", "k", "]", "=", "v", ".", "to", "(", "cpu_device", ")", "\n", "", "", "detections", ".", "update", "(", "\n", "{", "token", ":", "output", ",", "}", "\n", ")", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                    ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "", "", "synchronize", "(", ")", "\n", "\n", "all_predictions", "=", "all_gather", "(", "detections", ")", "\n", "\n", "print", "(", "\"\\n Total time per frame: \"", ",", "(", "time_end", "-", "time_start", ")", "/", "(", "end", "-", "start", ")", ")", "\n", "\n", "if", "args", ".", "local_rank", "!=", "0", ":", "\n", "            ", "return", "\n", "\n", "", "predictions", "=", "{", "}", "\n", "for", "p", "in", "all_predictions", ":", "\n", "            ", "predictions", ".", "update", "(", "p", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "work_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "work_dir", ")", "\n", "\n", "", "save_pred", "(", "predictions", ",", "args", ".", "work_dir", ",", "args", ".", "split", ",", "args", ".", "modelCheckPoint", ")", "\n", "\n", "", "if", "args", ".", "local_rank", "!=", "0", ":", "\n", "        ", "return", "\n", "\n", "", "predictions", "=", "load_pred", "(", "args", ".", "work_dir", ",", "args", ".", "split", ",", "args", ".", "modelCheckPoint", ")", "\n", "result_dict", ",", "_", "=", "dataset", ".", "evaluation", "(", "copy", ".", "deepcopy", "(", "predictions", ")", ",", "output_dir", "=", "args", ".", "work_dir", ",", "testset", "=", "args", ".", "testset", ",", "forecast", "=", "args", ".", "forecast", ",", "forecast_mode", "=", "args", ".", "forecast_mode", ",", "classname", "=", "args", ".", "classname", ",", "\n", "rerank", "=", "args", ".", "rerank", ",", "tp_pct", "=", "args", ".", "tp_pct", ",", "root", "=", "args", ".", "root", ",", "static_only", "=", "args", ".", "static_only", ",", "cohort_analysis", "=", "args", ".", "cohort_analysis", ",", "\n", "K", "=", "args", ".", "K", ",", "C", "=", "args", ".", "C", ",", "split", "=", "args", ".", "split", ",", "version", "=", "args", ".", "version", ",", "eval_only", "=", "args", ".", "eval_only", ",", "jitter", "=", "args", ".", "jitter", ",", "\n", "association_oracle", "=", "args", ".", "association_oracle", ",", "postprocess", "=", "args", ".", "postprocess", ",", "nogroup", "=", "args", ".", "nogroup", ")", "\n", "\n", "if", "result_dict", "is", "not", "None", ":", "\n", "        ", "for", "k", ",", "v", "in", "result_dict", "[", "\"results\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "f\"Evaluation {k}: {v}\"", ")", "\n", "\n", "", "", "if", "args", ".", "txt_result", ":", "\n", "        ", "assert", "False", ",", "\"No longer support kitti\"", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.tools.train.parse_args": [[26, 60], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.parse_args"], ["\n", "try", ":", "\n", "    ", "numDevices", "=", "len", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ".", "split", "(", "\",\"", ")", ")", "\n", "", "except", ":", "\n", "    ", "pynvml", ".", "nvmlInit", "(", ")", "\n", "numDevices", "=", "pynvml", ".", "nvmlDeviceGetCount", "(", ")", "\n", "\n", "", "if", "args", ".", "debug", ":", "\n", "    ", "print", "(", "\"Starting in Debug Mode\"", ")", "\n", "os", ".", "system", "(", "\"python  ./tools/train.py configs/{architecture}/{configPath} --seed 0 --work_dir models/{experiment}/{dataset}_{architecture}_{model}_detection\"", ".", "format", "(", "architecture", "=", "architecture", ",", "\n", "configPath", "=", "configPath", ",", "\n", "experiment", "=", "experiment", ",", "\n", "model", "=", "model", ",", "\n", "dataset", "=", "dataset", ")", ")", "\n", "", "else", ":", "\n", "    ", "os", ".", "system", "(", "\"python -m torch.distributed.launch --nproc_per_node={numDevices} ./tools/train.py configs/{architecture}/{configPath} --work_dir models/{experiment}/{dataset}_{architecture}_{model}_detection\"", ".", "format", "(", "architecture", "=", "architecture", ",", "\n", "configPath", "=", "configPath", ",", "\n", "experiment", "=", "experiment", ",", "\n", "model", "=", "model", ",", "\n", "dataset", "=", "dataset", ",", "\n", "numDevices", "=", "numDevices", ")", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.tools.train.main": [[62, 136], ["train.parse_args", "det3d.torchie.Config.fromfile", "torch.cuda.set_device", "det3d.torchie.apis.get_root_logger", "det3d.torchie.apis.get_root_logger.info", "det3d.torchie.apis.get_root_logger.info", "det3d.models.build_detector", "det3d.torchie.apis.train_detector", "torch.cuda.set_device", "torch.distributed.init_process_group", "torch.distributed.get_world_size", "os.path.join", "os.makedirs", "det3d.torchie.apis.get_root_logger.info", "det3d.torchie.apis.set_random_seed", "det3d.datasets.build_dataset", "len", "datasets.append", "dict", "int", "det3d.datasets.build_dataset"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.parse_args", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.fromfile", "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.env.get_root_logger", "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_detector", "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.train_detector", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.env.set_random_seed", "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.builder.build_dataset"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.tools.create_data.nuscenes_data_prep": [[15, 28], ["det3d.datasets.nuscenes.nusc_common.create_nuscenes_infos", "det3d.datasets.utils.create_gt_database.create_groundtruth_database", "os.path.isdir", "os.makedirs", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.create_nuscenes_infos", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.create_gt_database.create_groundtruth_database"], ["def", "nuscenes_data_prep", "(", "root_path", ",", "version", ",", "experiment", "=", "\"trainval_forecast\"", ",", "nsweeps", "=", "20", ",", "filter_zero", "=", "True", ",", "timesteps", "=", "7", ")", ":", "\n", "    ", "past", "=", "True", "if", "\"past\"", "in", "experiment", "else", "False", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "root_path", "+", "\"/\"", "+", "experiment", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "root_path", "+", "\"/\"", "+", "experiment", ")", "\n", "\n", "", "nu_ds", ".", "create_nuscenes_infos", "(", "root_path", ",", "version", "=", "version", ",", "experiment", "=", "experiment", ",", "nsweeps", "=", "nsweeps", ",", "filter_zero", "=", "filter_zero", ",", "timesteps", "=", "timesteps", ",", "past", "=", "past", ")", "\n", "create_groundtruth_database", "(", "\n", "\"NUSC\"", ",", "\n", "root_path", "+", "\"/{}\"", ".", "format", "(", "experiment", ")", ",", "\n", "Path", "(", "root_path", ")", "/", "\"{}/infos_train_{:02d}sweeps_withvelo_filter_{}.pkl\"", ".", "format", "(", "experiment", ",", "nsweeps", ",", "filter_zero", ")", ",", "\n", "nsweeps", "=", "nsweeps", ",", "\n", "timesteps", "=", "timesteps", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.tools.create_data.waymo_data_prep": [[30, 39], ["det3d.datasets.waymo.waymo_common.create_waymo_infos", "det3d.datasets.utils.create_gt_database.create_groundtruth_database", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.create_waymo_infos", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.create_gt_database.create_groundtruth_database"], ["", "def", "waymo_data_prep", "(", "root_path", ",", "split", ",", "nsweeps", "=", "1", ")", ":", "\n", "    ", "waymo_ds", ".", "create_waymo_infos", "(", "root_path", ",", "split", "=", "split", ",", "nsweeps", "=", "nsweeps", ")", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "create_groundtruth_database", "(", "\n", "\"WAYMO\"", ",", "\n", "root_path", ",", "\n", "Path", "(", "root_path", ")", "/", "\"infos_train_{:02d}sweeps_filter_zero_gt.pkl\"", ".", "format", "(", "nsweeps", ")", ",", "\n", "used_classes", "=", "[", "'VEHICLE'", ",", "'CYCLIST'", ",", "'PEDESTRIAN'", "]", ",", "\n", "nsweeps", "=", "nsweeps", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.build_voxel_generator": [[18, 28], ["det3d.core.input.voxel_generator.VoxelGenerator"], "function", ["None"], ["def", "build_voxel_generator", "(", "voxel_config", ")", ":", "\n", "\n", "    ", "voxel_generator", "=", "VoxelGenerator", "(", "\n", "voxel_size", "=", "voxel_config", ".", "VOXEL_SIZE", ",", "\n", "point_cloud_range", "=", "voxel_config", ".", "RANGE", ",", "\n", "max_num_points", "=", "voxel_config", ".", "MAX_POINTS_NUM_PER_VOXEL", ",", "\n", "max_voxels", "=", "20000", ",", "\n", ")", "\n", "\n", "return", "voxel_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.build_db_preprocess": [[29, 40], ["logging.getLogger", "det3d.DBFilterByDifficulty", "det3d.DBFilterByMinNumPoint", "ValueError"], "function", ["None"], ["", "def", "build_db_preprocess", "(", "db_prep_config", ",", "logger", "=", "None", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"build_db_preprocess\"", ")", "\n", "cfg", "=", "db_prep_config", "\n", "if", "\"filter_by_difficulty\"", "in", "cfg", ":", "\n", "        ", "v", "=", "cfg", "[", "\"filter_by_difficulty\"", "]", "\n", "return", "prep", ".", "DBFilterByDifficulty", "(", "v", ",", "logger", "=", "logger", ")", "\n", "", "elif", "\"filter_by_min_num_points\"", "in", "cfg", ":", "\n", "        ", "v", "=", "cfg", "[", "\"filter_by_min_num_points\"", "]", "\n", "return", "prep", ".", "DBFilterByMinNumPoint", "(", "v", ",", "logger", "=", "logger", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"unknown database prep type\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.children": [[42, 45], ["list", "m.children"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.children"], ["", "", "def", "children", "(", "m", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"Get children of `m`.\"", "\n", "return", "list", "(", "m", ".", "children", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.num_children": [[47, 50], ["len", "builder.children"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.children"], ["", "def", "num_children", "(", "m", ":", "nn", ".", "Module", ")", "->", "int", ":", "\n", "    ", "\"Get number of children modules in `m`.\"", "\n", "return", "len", "(", "children", "(", "m", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.flatten_model": [[52, 54], ["builder.num_children", "sum", "map", "m.children"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.num_children", "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.children"], ["", "def", "flatten_model", "(", "m", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "return", "sum", "(", "map", "(", "flatten_model", ",", "m", ".", "children", "(", ")", ")", ",", "[", "]", ")", "if", "num_children", "(", "m", ")", "else", "[", "m", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.get_layer_groups": [[56, 58], ["torch.nn.Sequential", "builder.flatten_model"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.flatten_model"], ["", "def", "get_layer_groups", "(", "m", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "return", "[", "nn", ".", "Sequential", "(", "*", "flatten_model", "(", "m", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.build_optimizer": [[60, 119], ["det3d.solver.fastai_optim.OptimWrapper.create", "functools.partial", "builder.get_layer_groups", "ValueError", "ValueError", "functools.partial", "functools.partial", "functools.partial"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.FastAIMixedOptim.create", "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.get_layer_groups"], ["", "def", "build_optimizer", "(", "optimizer_config", ",", "net", ",", "name", "=", "None", ",", "mixed", "=", "False", ",", "loss_scale", "=", "512.0", ")", ":", "\n", "    ", "\"\"\"Create optimizer based on config.\n\n    Args:\n        optimizer_config: A Optimizer proto message.\n\n    Returns:\n        An optimizer and a list of variables for summary.\n\n    Raises:\n        ValueError: when using an unsupported input data type.\n    \"\"\"", "\n", "optimizer_type", "=", "optimizer_config", ".", "TYPE", "\n", "config", "=", "optimizer_config", ".", "VALUE", "\n", "\n", "if", "optimizer_type", "==", "\"rms_prop_optimizer\"", ":", "\n", "        ", "optimizer_func", "=", "partial", "(", "\n", "torch", ".", "optim", ".", "RMSprop", ",", "\n", "alpha", "=", "config", ".", "decay", ",", "\n", "momentum", "=", "config", ".", "momentum_optimizer_value", ",", "\n", "eps", "=", "config", ".", "epsilon", ",", "\n", ")", "\n", "", "elif", "optimizer_type", "==", "\"momentum_optimizer\"", ":", "\n", "        ", "optimizer_func", "=", "partial", "(", "\n", "torch", ".", "optim", ".", "SGD", ",", "\n", "momentum", "=", "config", ".", "momentum_optimizer_value", ",", "\n", "eps", "=", "config", ".", "epsilon", ",", "\n", ")", "\n", "", "elif", "optimizer_type", "==", "\"adam\"", ":", "\n", "        ", "if", "optimizer_config", ".", "FIXED_WD", ":", "\n", "            ", "optimizer_func", "=", "partial", "(", "\n", "torch", ".", "optim", ".", "Adam", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ",", "amsgrad", "=", "config", ".", "amsgrad", "\n", ")", "\n", "", "else", ":", "\n", "# regular adam", "\n", "            ", "optimizer_func", "=", "partial", "(", "torch", ".", "optim", ".", "Adam", ",", "amsgrad", "=", "config", ".", "amsgrad", ")", "\n", "\n", "", "", "optimizer", "=", "OptimWrapper", ".", "create", "(", "\n", "optimizer_func", ",", "\n", "3e-3", ",", "\n", "get_layer_groups", "(", "net", ")", ",", "\n", "wd", "=", "config", ".", "WD", ",", "\n", "true_wd", "=", "optimizer_config", ".", "FIXED_WD", ",", "\n", "bn_wd", "=", "True", ",", "\n", ")", "\n", "\n", "if", "optimizer", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"Optimizer %s not supported.\"", "%", "optimizer_type", ")", "\n", "\n", "", "if", "optimizer_config", ".", "MOVING_AVERAGE", ":", "\n", "        ", "raise", "ValueError", "(", "\"torch don't support moving average\"", ")", "\n", "\n", "", "if", "name", "is", "None", ":", "\n", "# assign a name to optimizer for checkpoint system", "\n", "        ", "optimizer", ".", "name", "=", "optimizer_type", "\n", "", "else", ":", "\n", "        ", "optimizer", ".", "name", "=", "name", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.build_lr_scheduler": [[121, 151], ["builder._create_learning_rate_scheduler", "builder._create_learning_rate_scheduler", "builder._create_learning_rate_scheduler"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder._create_learning_rate_scheduler", "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder._create_learning_rate_scheduler", "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder._create_learning_rate_scheduler"], ["", "def", "build_lr_scheduler", "(", "optimizer", ",", "optimizer_config", ",", "total_step", ")", ":", "\n", "    ", "\"\"\"Create lr scheduler based on config. note that\n    lr_scheduler must accept a optimizer that has been restored.\n\n    Args:\n        optimizer_config: A Optimizer proto message.\n\n    Returns:\n        An optimizer and a list of variables for summary.\n\n    Raises:\n        ValueError: when using an unsupported input data type.\n    \"\"\"", "\n", "optimizer_type", "=", "optimizer_config", ".", "type", "\n", "config", "=", "optimizer_config", "\n", "\n", "if", "optimizer_type", "==", "\"rms_prop_optimizer\"", ":", "\n", "        ", "lr_scheduler", "=", "_create_learning_rate_scheduler", "(", "\n", "config", ",", "optimizer", ",", "total_step", "=", "total_step", "\n", ")", "\n", "", "elif", "optimizer_type", "==", "\"momentum_optimizer\"", ":", "\n", "        ", "lr_scheduler", "=", "_create_learning_rate_scheduler", "(", "\n", "config", ",", "optimizer", ",", "total_step", "=", "total_step", "\n", ")", "\n", "", "elif", "optimizer_type", "==", "\"adam\"", ":", "\n", "        ", "lr_scheduler", "=", "_create_learning_rate_scheduler", "(", "\n", "config", ",", "optimizer", ",", "total_step", "=", "total_step", "\n", ")", "\n", "\n", "", "return", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder._create_learning_rate_scheduler": [[153, 202], ["det3d.solver.learning_schedules_fastai.LRSchedulerStep", "lr_phases.append", "mom_phases.append", "det3d.solver.learning_schedules_fastai.OneCycle", "det3d.solver.learning_schedules_fastai.ExponentialDecay", "det3d.solver.learning_schedules_fastai.ManualStepping", "ValueError"], "function", ["None"], ["", "def", "_create_learning_rate_scheduler", "(", "optimizer", ",", "learning_rate_config", ",", "total_step", ")", ":", "\n", "    ", "\"\"\"Create optimizer learning rate scheduler based on config.\n\n    Args:\n        learning_rate_config: A LearningRate proto message.\n\n    Returns:\n        A learning rate.\n\n    Raises:\n        ValueError: when using an unsupported input data type.\n    \"\"\"", "\n", "lr_scheduler", "=", "None", "\n", "learning_rate_type", "=", "learning_rate_config", ".", "type", "\n", "config", "=", "learning_rate_config", "\n", "\n", "if", "learning_rate_type", "==", "\"multi_phase\"", ":", "\n", "        ", "lr_phases", "=", "[", "]", "\n", "mom_phases", "=", "[", "]", "\n", "for", "phase_cfg", "in", "config", ".", "phases", ":", "\n", "            ", "lr_phases", ".", "append", "(", "(", "phase_cfg", ".", "start", ",", "phase_cfg", ".", "lambda_func", ")", ")", "\n", "mom_phases", ".", "append", "(", "(", "phase_cfg", ".", "start", ",", "phase_cfg", ".", "momentum_lambda_func", ")", ")", "\n", "", "lr_scheduler", "=", "lsf", ".", "LRSchedulerStep", "(", "optimizer", ",", "total_step", ",", "lr_phases", ",", "mom_phases", ")", "\n", "", "elif", "learning_rate_type", "==", "\"one_cycle\"", ":", "\n", "        ", "lr_scheduler", "=", "lsf", ".", "OneCycle", "(", "\n", "optimizer", ",", "\n", "total_step", ",", "\n", "config", ".", "lr_max", ",", "\n", "config", ".", "moms", ",", "\n", "config", ".", "div_factor", ",", "\n", "config", ".", "pct_start", ",", "\n", ")", "\n", "", "elif", "learning_rate_type", "==", "\"exponential_decay\"", ":", "\n", "        ", "lr_scheduler", "=", "lsf", ".", "ExponentialDecay", "(", "\n", "optimizer", ",", "\n", "total_step", ",", "\n", "config", ".", "initial_learning_rate", ",", "\n", "config", ".", "decay_length", ",", "\n", "config", ".", "decay_factor", ",", "\n", "config", ".", "staircase", ",", "\n", ")", "\n", "", "elif", "learning_rate_type", "==", "\"manual_stepping\"", ":", "\n", "        ", "lr_scheduler", "=", "lsf", ".", "ManualStepping", "(", "\n", "optimizer", ",", "total_step", ",", "config", ".", "boundaries", ",", "config", ".", "rates", "\n", ")", "\n", "", "elif", "lr_scheduler", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"Learning_rate %s not supported.\"", "%", "learning_rate_type", ")", "\n", "\n", "", "return", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.build_dbsampler": [[204, 223], ["logging.getLogger", "det3d.core.sampler.preprocess.DataBasePreprocessor", "list", "det3d.core.sampler.sample_ops.DataBaseSamplerV2", "builder.build_db_preprocess", "open", "pickle.load", "len"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.build_db_preprocess", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load"], ["", "def", "build_dbsampler", "(", "cfg", ",", "logger", "=", "None", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"build_dbsampler\"", ")", "\n", "prepors", "=", "[", "build_db_preprocess", "(", "c", ",", "logger", "=", "logger", ")", "for", "c", "in", "cfg", ".", "db_prep_steps", "]", "\n", "db_prepor", "=", "DataBasePreprocessor", "(", "prepors", ")", "\n", "rate", "=", "cfg", ".", "rate", "\n", "grot_range", "=", "cfg", ".", "global_random_rotation_range_per_object", "\n", "groups", "=", "cfg", ".", "sample_groups", "\n", "# groups = [dict(g.name_to_max_num) for g in groups]", "\n", "info_path", "=", "cfg", ".", "db_info_path", "\n", "with", "open", "(", "info_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "db_infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "grot_range", "=", "list", "(", "grot_range", ")", "\n", "if", "len", "(", "grot_range", ")", "==", "0", ":", "\n", "        ", "grot_range", "=", "None", "\n", "", "sampler", "=", "DataBaseSamplerV2", "(", "\n", "db_infos", ",", "groups", ",", "db_prepor", ",", "rate", ",", "grot_range", ",", "logger", "=", "logger", "\n", ")", "\n", "\n", "return", "sampler", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config_tool.change_detection_range": [[10, 37], ["list", "list", "len", "anchor_generator.WhichOneof", "list", "list", "list", "ValueError"], "function", ["None"], ["def", "change_detection_range", "(", "model_config", ",", "new_range", ")", ":", "\n", "    ", "assert", "len", "(", "new_range", ")", "==", "4", ",", "\"you must provide a list such as [-50, -50, 50, 50]\"", "\n", "old_pc_range", "=", "list", "(", "model_config", ".", "voxel_generator", ".", "point_cloud_range", ")", "\n", "old_pc_range", "[", ":", "2", "]", "=", "new_range", "[", ":", "2", "]", "\n", "old_pc_range", "[", "3", ":", "5", "]", "=", "new_range", "[", "2", ":", "]", "\n", "model_config", ".", "voxel_generator", ".", "point_cloud_range", "[", ":", "]", "=", "old_pc_range", "\n", "for", "anchor_generator", "in", "model_config", ".", "target_assigner", ".", "anchor_generators", ":", "\n", "        ", "a_type", "=", "anchor_generator", ".", "WhichOneof", "(", "\"anchor_generator\"", ")", "\n", "if", "a_type", "==", "\"anchor_generator_range\"", ":", "\n", "            ", "a_cfg", "=", "anchor_generator", ".", "anchor_generator_range", "\n", "old_a_range", "=", "list", "(", "a_cfg", ".", "anchor_ranges", ")", "\n", "old_a_range", "[", ":", "2", "]", "=", "new_range", "[", ":", "2", "]", "\n", "old_a_range", "[", "3", ":", "5", "]", "=", "new_range", "[", "2", ":", "]", "\n", "a_cfg", ".", "anchor_ranges", "[", ":", "]", "=", "old_a_range", "\n", "", "elif", "a_type", "==", "\"anchor_generator_stride\"", ":", "\n", "            ", "a_cfg", "=", "anchor_generator", ".", "anchor_generator_stride", "\n", "old_offset", "=", "list", "(", "a_cfg", ".", "offsets", ")", "\n", "stride", "=", "list", "(", "a_cfg", ".", "strides", ")", "\n", "old_offset", "[", "0", "]", "=", "new_range", "[", "0", "]", "+", "stride", "[", "0", "]", "/", "2", "\n", "old_offset", "[", "1", "]", "=", "new_range", "[", "1", "]", "+", "stride", "[", "1", "]", "/", "2", "\n", "a_cfg", ".", "offsets", "[", ":", "]", "=", "old_offset", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown\"", ")", "\n", "", "", "old_post_range", "=", "list", "(", "model_config", ".", "post_center_limit_range", ")", "\n", "old_post_range", "[", ":", "2", "]", "=", "new_range", "[", ":", "2", "]", "\n", "old_post_range", "[", "3", ":", "5", "]", "=", "new_range", "[", "2", ":", "]", "\n", "model_config", ".", "post_center_limit_range", "[", ":", "]", "=", "old_post_range", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config_tool.get_downsample_factor": [[39, 54], ["numpy.prod", "int", "neck_cfg.get", "len", "neck_cfg.get", "neck_cfg.get"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["", "def", "get_downsample_factor", "(", "model_config", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "neck_cfg", "=", "model_config", "[", "\"neck\"", "]", "\n", "", "except", ":", "\n", "        ", "model_config", "=", "model_config", "[", "'first_stage_cfg'", "]", "\n", "neck_cfg", "=", "model_config", "[", "'neck'", "]", "\n", "", "downsample_factor", "=", "np", ".", "prod", "(", "neck_cfg", ".", "get", "(", "\"ds_layer_strides\"", ",", "[", "1", "]", ")", ")", "\n", "if", "len", "(", "neck_cfg", ".", "get", "(", "\"us_layer_strides\"", ",", "[", "]", ")", ")", ">", "0", ":", "\n", "        ", "downsample_factor", "/=", "neck_cfg", ".", "get", "(", "\"us_layer_strides\"", ",", "[", "]", ")", "[", "-", "1", "]", "\n", "\n", "", "backbone_cfg", "=", "model_config", "[", "'backbone'", "]", "\n", "downsample_factor", "*=", "backbone_cfg", "[", "\"ds_factor\"", "]", "\n", "downsample_factor", "=", "int", "(", "downsample_factor", ")", "\n", "assert", "downsample_factor", ">", "0", "\n", "return", "downsample_factor", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.get_model_complexity_info": [[59, 92], ["flops_counter.add_flops_counting_methods", "add_flops_counting_methods.eval().start_flops_count", "add_flops_counting_methods.compute_average_flops_cost", "flops_counter.get_model_parameters_number", "add_flops_counting_methods.stop_flops_count", "type", "len", "input_constructor", "add_flops_counting_methods.", "torch.ones().new_empty", "torch.ones().new_empty", "add_flops_counting_methods.", "flops_counter.print_model_with_flops", "add_flops_counting_methods.eval", "flops_counter.flops_to_string", "flops_counter.params_to_string", "torch.ones", "torch.ones", "next", "next", "add_flops_counting_methods.parameters", "add_flops_counting_methods.parameters"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.add_flops_counting_methods", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.start_flops_count", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.compute_average_flops_cost", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.get_model_parameters_number", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.stop_flops_count", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.print_model_with_flops", "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.eval", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.flops_to_string", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.params_to_string", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.next", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.next"], ["def", "get_model_complexity_info", "(", "\n", "model", ",", "\n", "input_res", ",", "\n", "print_per_layer_stat", "=", "True", ",", "\n", "as_strings", "=", "True", ",", "\n", "input_constructor", "=", "None", ",", "\n", "ost", "=", "sys", ".", "stdout", ",", "\n", ")", ":", "\n", "    ", "assert", "type", "(", "input_res", ")", "is", "tuple", "\n", "assert", "len", "(", "input_res", ")", ">=", "2", "\n", "flops_model", "=", "add_flops_counting_methods", "(", "model", ")", "\n", "flops_model", ".", "eval", "(", ")", ".", "start_flops_count", "(", ")", "\n", "if", "input_constructor", ":", "\n", "        ", "input", "=", "input_constructor", "(", "input_res", ")", "\n", "_", "=", "flops_model", "(", "**", "input", ")", "\n", "", "else", ":", "\n", "        ", "batch", "=", "torch", ".", "ones", "(", "(", ")", ")", ".", "new_empty", "(", "\n", "(", "1", ",", "*", "input_res", ")", ",", "\n", "dtype", "=", "next", "(", "flops_model", ".", "parameters", "(", ")", ")", ".", "dtype", ",", "\n", "device", "=", "next", "(", "flops_model", ".", "parameters", "(", ")", ")", ".", "device", ",", "\n", ")", "\n", "flops_model", "(", "batch", ")", "\n", "\n", "", "if", "print_per_layer_stat", ":", "\n", "        ", "print_model_with_flops", "(", "flops_model", ",", "ost", "=", "ost", ")", "\n", "", "flops_count", "=", "flops_model", ".", "compute_average_flops_cost", "(", ")", "\n", "params_count", "=", "get_model_parameters_number", "(", "flops_model", ")", "\n", "flops_model", ".", "stop_flops_count", "(", ")", "\n", "\n", "if", "as_strings", ":", "\n", "        ", "return", "flops_to_string", "(", "flops_count", ")", ",", "params_to_string", "(", "params_count", ")", "\n", "\n", "", "return", "flops_count", ",", "params_count", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.flops_to_string": [[94, 113], ["str", "round", "str", "str", "round", "str", "str", "round", "str", "str", "round", "round", "str", "round"], "function", ["None"], ["", "def", "flops_to_string", "(", "flops", ",", "units", "=", "\"GMac\"", ",", "precision", "=", "2", ")", ":", "\n", "    ", "if", "units", "is", "None", ":", "\n", "        ", "if", "flops", "//", "10", "**", "9", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.0", "**", "9", ",", "precision", ")", ")", "+", "\" GMac\"", "\n", "", "elif", "flops", "//", "10", "**", "6", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.0", "**", "6", ",", "precision", ")", ")", "+", "\" MMac\"", "\n", "", "elif", "flops", "//", "10", "**", "3", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.0", "**", "3", ",", "precision", ")", ")", "+", "\" KMac\"", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "flops", ")", "+", "\" Mac\"", "\n", "", "", "else", ":", "\n", "        ", "if", "units", "==", "\"GMac\"", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.0", "**", "9", ",", "precision", ")", ")", "+", "\" \"", "+", "units", "\n", "", "elif", "units", "==", "\"MMac\"", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.0", "**", "6", ",", "precision", ")", ")", "+", "\" \"", "+", "units", "\n", "", "elif", "units", "==", "\"KMac\"", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.0", "**", "3", ",", "precision", ")", ")", "+", "\" \"", "+", "units", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "flops", ")", "+", "\" Mac\"", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.params_to_string": [[115, 132], ["str", "str", "round", "str", "round"], "function", ["None"], ["", "", "", "def", "params_to_string", "(", "params_num", ")", ":", "\n", "    ", "\"\"\"converting number to string\n    :param float params_num: number\n    :returns str: number\n    >>> params_to_string(1e9)\n    '1000.0 M'\n    >>> params_to_string(2e5)\n    '200.0 k'\n    >>> params_to_string(3e-9)\n    '3e-09'\n    \"\"\"", "\n", "if", "params_num", "//", "10", "**", "6", ">", "0", ":", "\n", "        ", "return", "str", "(", "round", "(", "params_num", "/", "10", "**", "6", ",", "2", ")", ")", "+", "\" M\"", "\n", "", "elif", "params_num", "//", "10", "**", "3", ":", "\n", "        ", "return", "str", "(", "round", "(", "params_num", "/", "10", "**", "3", ",", "2", ")", ")", "+", "\" k\"", "\n", "", "else", ":", "\n", "        ", "return", "str", "(", "params_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.print_model_with_flops": [[134, 176], ["model.compute_average_flops_cost", "model.apply", "print", "model.apply", "flops_counter.is_supported_instance", "flops_counter..accumulate_flops", "accumulate_flops.__get__", "flops_repr.__get__", "hasattr", "hasattr", "flops_counter..children", "m.accumulate_flops", "flops_counter.flops_to_string", "flops_counter..original_extra_repr"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.compute_average_flops_cost", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.is_supported_instance", "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.children", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.flops_to_string"], ["", "", "def", "print_model_with_flops", "(", "model", ",", "units", "=", "\"GMac\"", ",", "precision", "=", "3", ",", "ost", "=", "sys", ".", "stdout", ")", ":", "\n", "    ", "total_flops", "=", "model", ".", "compute_average_flops_cost", "(", ")", "\n", "\n", "def", "accumulate_flops", "(", "self", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "self", ")", ":", "\n", "            ", "return", "self", ".", "__flops__", "/", "model", ".", "__batch_counter__", "\n", "", "else", ":", "\n", "            ", "sum", "=", "0", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "                ", "sum", "+=", "m", ".", "accumulate_flops", "(", ")", "\n", "", "return", "sum", "\n", "\n", "", "", "def", "flops_repr", "(", "self", ")", ":", "\n", "        ", "accumulated_flops_cost", "=", "self", ".", "accumulate_flops", "(", ")", "\n", "return", "\", \"", ".", "join", "(", "\n", "[", "\n", "flops_to_string", "(", "\n", "accumulated_flops_cost", ",", "units", "=", "units", ",", "precision", "=", "precision", "\n", ")", ",", "\n", "\"{:.3%} MACs\"", ".", "format", "(", "accumulated_flops_cost", "/", "total_flops", ")", ",", "\n", "self", ".", "original_extra_repr", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "", "def", "add_extra_repr", "(", "m", ")", ":", "\n", "        ", "m", ".", "accumulate_flops", "=", "accumulate_flops", ".", "__get__", "(", "m", ")", "\n", "flops_extra_repr", "=", "flops_repr", ".", "__get__", "(", "m", ")", "\n", "if", "m", ".", "extra_repr", "!=", "flops_extra_repr", ":", "\n", "            ", "m", ".", "original_extra_repr", "=", "m", ".", "extra_repr", "\n", "m", ".", "extra_repr", "=", "flops_extra_repr", "\n", "assert", "m", ".", "extra_repr", "!=", "m", ".", "original_extra_repr", "\n", "\n", "", "", "def", "del_extra_repr", "(", "m", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "\"original_extra_repr\"", ")", ":", "\n", "            ", "m", ".", "extra_repr", "=", "m", ".", "original_extra_repr", "\n", "del", "m", ".", "original_extra_repr", "\n", "", "if", "hasattr", "(", "m", ",", "\"accumulate_flops\"", ")", ":", "\n", "            ", "del", "m", ".", "accumulate_flops", "\n", "\n", "", "", "model", ".", "apply", "(", "add_extra_repr", ")", "\n", "print", "(", "model", ",", "file", "=", "ost", ")", "\n", "model", ".", "apply", "(", "del_extra_repr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.get_model_parameters_number": [[178, 181], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "get_model_parameters_number", "(", "model", ")", ":", "\n", "    ", "params_num", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "return", "params_num", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.add_flops_counting_methods": [[183, 199], ["start_flops_count.__get__", "stop_flops_count.__get__", "reset_flops_count.__get__", "compute_average_flops_cost.__get__", "net_main_module.reset_flops_count", "net_main_module.apply"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.reset_flops_count"], ["", "def", "add_flops_counting_methods", "(", "net_main_module", ")", ":", "\n", "# adding additional methods to the existing module object,", "\n", "# this is done this way so that each function has access to self object", "\n", "    ", "net_main_module", ".", "start_flops_count", "=", "start_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "stop_flops_count", "=", "stop_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "reset_flops_count", "=", "reset_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "compute_average_flops_cost", "=", "compute_average_flops_cost", ".", "__get__", "(", "\n", "net_main_module", "\n", ")", "\n", "\n", "net_main_module", ".", "reset_flops_count", "(", ")", "\n", "\n", "# Adding variables necessary for masked flops computation", "\n", "net_main_module", ".", "apply", "(", "add_flops_mask_variable_or_reset", ")", "\n", "\n", "return", "net_main_module", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.compute_average_flops_cost": [[201, 215], ["flops_counter..modules", "flops_counter.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.is_supported_instance"], ["", "def", "compute_average_flops_cost", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is\n    called on a desired net object.\n    Returns current mean flops consumption per image.\n    \"\"\"", "\n", "\n", "batches_count", "=", "self", ".", "__batch_counter__", "\n", "flops_sum", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "            ", "flops_sum", "+=", "module", ".", "__flops__", "\n", "\n", "", "", "return", "flops_sum", "/", "batches_count", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.start_flops_count": [[217, 226], ["flops_counter.add_batch_counter_hook_function", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.add_batch_counter_hook_function"], ["", "def", "start_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is\n    called on a desired net object.\n    Activates the computation of mean flops consumption per image.\n    Call it before you run the network.\n    \"\"\"", "\n", "add_batch_counter_hook_function", "(", "self", ")", "\n", "self", ".", "apply", "(", "add_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.stop_flops_count": [[228, 237], ["flops_counter.remove_batch_counter_hook_function", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.remove_batch_counter_hook_function"], ["", "def", "stop_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is\n    called on a desired net object.\n    Stops computing the mean flops consumption per image.\n    Call whenever you want to pause the computation.\n    \"\"\"", "\n", "remove_batch_counter_hook_function", "(", "self", ")", "\n", "self", ".", "apply", "(", "remove_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.reset_flops_count": [[239, 247], ["flops_counter.add_batch_counter_variables_or_reset", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.add_batch_counter_variables_or_reset"], ["", "def", "reset_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is\n    called on a desired net object.\n    Resets statistics computed so far.\n    \"\"\"", "\n", "add_batch_counter_variables_or_reset", "(", "self", ")", "\n", "self", ".", "apply", "(", "add_flops_counter_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.add_flops_mask": [[249, 255], ["module.apply", "isinstance"], "function", ["None"], ["", "def", "add_flops_mask", "(", "module", ",", "mask", ")", ":", "\n", "    ", "def", "add_flops_mask_func", "(", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "module", ".", "__mask__", "=", "mask", "\n", "\n", "", "", "module", ".", "apply", "(", "add_flops_mask_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.remove_flops_mask": [[257, 259], ["module.apply"], "function", ["None"], ["", "def", "remove_flops_mask", "(", "module", ")", ":", "\n", "    ", "module", ".", "apply", "(", "add_flops_mask_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.is_supported_instance": [[261, 266], ["isinstance"], "function", ["None"], ["", "def", "is_supported_instance", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "SUPPORTED_TYPES", ")", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.empty_flops_counter_hook": [[268, 270], ["None"], "function", ["None"], ["", "", "def", "empty_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "module", ".", "__flops__", "+=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.upsample_flops_counter_hook": [[272, 279], ["int"], "function", ["None"], ["", "def", "upsample_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "output_size", "=", "output", "[", "0", "]", "\n", "batch_size", "=", "output_size", ".", "shape", "[", "0", "]", "\n", "output_elements_count", "=", "batch_size", "\n", "for", "val", "in", "output_size", ".", "shape", "[", "1", ":", "]", ":", "\n", "        ", "output_elements_count", "*=", "val", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "output_elements_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.relu_flops_counter_hook": [[281, 284], ["output.numel", "int"], "function", ["None"], ["", "def", "relu_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "active_elements_count", "=", "output", ".", "numel", "(", ")", "\n", "module", ".", "__flops__", "+=", "int", "(", "active_elements_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.linear_flops_counter_hook": [[286, 290], ["int"], "function", ["None"], ["", "def", "linear_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "module", ".", "__flops__", "+=", "int", "(", "batch_size", "*", "input", ".", "shape", "[", "1", "]", "*", "output", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.pool_flops_counter_hook": [[292, 295], ["int", "numpy.prod"], "function", ["None"], ["", "def", "pool_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "module", ".", "__flops__", "+=", "int", "(", "np", ".", "prod", "(", "input", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.bn_flops_counter_hook": [[297, 305], ["numpy.prod", "int"], "function", ["None"], ["", "def", "bn_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "module", ".", "affine", "\n", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_flops", "=", "np", ".", "prod", "(", "input", ".", "shape", ")", "\n", "if", "module", ".", "affine", ":", "\n", "        ", "batch_flops", "*=", "2", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "batch_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.deconv_flops_counter_hook": [[307, 333], ["int"], "function", ["None"], ["", "def", "deconv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "input_height", ",", "input_width", "=", "input", ".", "shape", "[", "2", ":", "]", "\n", "\n", "kernel_height", ",", "kernel_width", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "filters_per_channel", "=", "out_channels", "//", "groups", "\n", "conv_per_position_flops", "=", "(", "\n", "kernel_height", "*", "kernel_width", "*", "in_channels", "*", "filters_per_channel", "\n", ")", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "input_height", "*", "input_width", "\n", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "bias_flops", "=", "0", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "bias_flops", "=", "out_channels", "*", "batch_size", "*", "output_height", "*", "output_height", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "int", "(", "overall_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.conv_flops_counter_hook": [[335, 371], ["list", "list", "int", "numpy.prod", "conv_module.__mask__.expand", "conv_module.__mask__.expand.sum", "numpy.prod"], "function", ["None"], ["", "def", "conv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "output_dims", "=", "list", "(", "output", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "kernel_dims", "=", "list", "(", "conv_module", ".", "kernel_size", ")", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "filters_per_channel", "=", "out_channels", "//", "groups", "\n", "conv_per_position_flops", "=", "np", ".", "prod", "(", "kernel_dims", ")", "*", "in_channels", "*", "filters_per_channel", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "np", ".", "prod", "(", "output_dims", ")", "\n", "\n", "if", "conv_module", ".", "__mask__", "is", "not", "None", ":", "\n", "# (b, 1, h, w)", "\n", "        ", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "flops_mask", "=", "conv_module", ".", "__mask__", ".", "expand", "(", "\n", "batch_size", ",", "1", ",", "output_height", ",", "output_width", "\n", ")", "\n", "active_elements_count", "=", "flops_mask", ".", "sum", "(", ")", "\n", "\n", "", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "bias_flops", "=", "0", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "\n", "        ", "bias_flops", "=", "out_channels", "*", "active_elements_count", "\n", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "int", "(", "overall_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.batch_counter_hook": [[373, 385], ["len", "len", "print"], "function", ["None"], ["", "def", "batch_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "if", "len", "(", "input", ")", ">", "0", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "        ", "input", "=", "input", "[", "0", "]", "\n", "batch_size", "=", "len", "(", "input", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\n", "\"Warning! No positional inputs found for a module, \"", "\n", "\"assuming batch size is 1.\"", "\n", ")", "\n", "", "module", ".", "__batch_counter__", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.add_batch_counter_variables_or_reset": [[387, 390], ["None"], "function", ["None"], ["", "def", "add_batch_counter_variables_or_reset", "(", "module", ")", ":", "\n", "\n", "    ", "module", ".", "__batch_counter__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.add_batch_counter_hook_function": [[392, 398], ["hasattr", "module.register_forward_hook"], "function", ["None"], ["", "def", "add_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "\"__batch_counter_handle__\"", ")", ":", "\n", "        ", "return", "\n", "\n", "", "handle", "=", "module", ".", "register_forward_hook", "(", "batch_counter_hook", ")", "\n", "module", ".", "__batch_counter_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.remove_batch_counter_hook_function": [[400, 404], ["hasattr", "module.__batch_counter_handle__.remove"], "function", ["None"], ["", "def", "remove_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "\"__batch_counter_handle__\"", ")", ":", "\n", "        ", "module", ".", "__batch_counter_handle__", ".", "remove", "(", ")", "\n", "del", "module", ".", "__batch_counter_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.add_flops_counter_variable_or_reset": [[406, 409], ["flops_counter.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.is_supported_instance"], ["", "", "def", "add_flops_counter_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "module", ".", "__flops__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.add_flops_counter_hook_function": [[411, 433], ["flops_counter.is_supported_instance", "hasattr", "isinstance", "module.register_forward_hook", "isinstance", "module.register_forward_hook", "isinstance", "module.register_forward_hook", "isinstance", "module.register_forward_hook", "isinstance", "module.register_forward_hook", "isinstance", "module.register_forward_hook", "isinstance", "module.register_forward_hook", "module.register_forward_hook"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.is_supported_instance"], ["", "", "def", "add_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "\"__flops_handle__\"", ")", ":", "\n", "            ", "return", "\n", "\n", "", "if", "isinstance", "(", "module", ",", "CONV_TYPES", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "conv_flops_counter_hook", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "RELU_TYPES", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "relu_flops_counter_hook", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "LINEAR_TYPES", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "linear_flops_counter_hook", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "POOLING_TYPES", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "pool_flops_counter_hook", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "BN_TYPES", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "bn_flops_counter_hook", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "UPSAMPLE_TYPES", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "upsample_flops_counter_hook", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "DECONV_TYPES", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "deconv_flops_counter_hook", ")", "\n", "", "else", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "empty_flops_counter_hook", ")", "\n", "", "module", ".", "__flops_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.remove_flops_counter_hook_function": [[435, 440], ["flops_counter.is_supported_instance", "hasattr", "module.__flops_handle__.remove"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.is_supported_instance"], ["", "", "def", "remove_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "\"__flops_handle__\"", ")", ":", "\n", "            ", "module", ".", "__flops_handle__", ".", "remove", "(", ")", "\n", "del", "module", ".", "__flops_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.add_flops_mask_variable_or_reset": [[444, 447], ["flops_counter.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.flops_counter.is_supported_instance"], ["", "", "", "def", "add_flops_mask_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "module", ".", "__mask__", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.find._get_info_from_anaconda_info": [[12, 26], ["info.strip().replace.strip().replace", "info.strip().replace.splitlines", "info.strip().replace.strip", "line.split", "info_dict[].append", "isinstance"], "function", ["None"], ["def", "_get_info_from_anaconda_info", "(", "info", ",", "split", "=", "\":\"", ")", ":", "\n", "    ", "info", "=", "info", ".", "strip", "(", "\"\\n\"", ")", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "\n", "info_dict", "=", "{", "}", "\n", "latest_key", "=", "\"\"", "\n", "for", "line", "in", "info", ".", "splitlines", "(", ")", ":", "\n", "        ", "if", "split", "in", "line", ":", "\n", "            ", "pair", "=", "line", ".", "split", "(", "split", ")", "\n", "info_dict", "[", "pair", "[", "0", "]", "]", "=", "pair", "[", "1", "]", "\n", "latest_key", "=", "pair", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "if", "not", "isinstance", "(", "info_dict", "[", "latest_key", "]", ",", "list", ")", ":", "\n", "                ", "info_dict", "[", "latest_key", "]", "=", "[", "info_dict", "[", "latest_key", "]", "]", "\n", "", "info_dict", "[", "latest_key", "]", ".", "append", "(", "line", ")", "\n", "", "", "return", "info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.find.find_anaconda": [[28, 40], ["path.exists", "pathlib.Path.home", "subprocess.check_output().decode", "find._get_info_from_anaconda_info", "RuntimeError", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.exists", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.find._get_info_from_anaconda_info"], ["", "def", "find_anaconda", "(", ")", ":", "\n", "# try find in default path", "\n", "    ", "path", "=", "Path", ".", "home", "(", ")", "/", "\"anaconda3\"", "\n", "if", "path", ".", "exists", "(", ")", ":", "\n", "        ", "return", "path", "\n", "# try conda in cmd", "\n", "", "try", ":", "\n", "        ", "info", "=", "subprocess", ".", "check_output", "(", "\"conda info\"", ",", "shell", "=", "True", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "info_dict", "=", "_get_info_from_anaconda_info", "(", "info", ")", "\n", "return", "info_dict", "[", "\"activeenvlocation\"", "]", "\n", "", "except", "subprocess", ".", "CalledProcessError", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"find anadonda failed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.find.find_cuda": [[42, 71], ["os.environ.get", "os.environ.get", "RuntimeError", "glob.glob", "os.path.exists", "len", "subprocess.check_output().decode().rstrip", "os.path.dirname", "os.path.dirname", "subprocess.check_output().decode", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.exists"], ["", "", "def", "find_cuda", "(", ")", ":", "\n", "    ", "\"\"\"Finds the CUDA install path.\"\"\"", "\n", "# Guess #1", "\n", "cuda_home", "=", "os", ".", "environ", ".", "get", "(", "\"CUDA_HOME\"", ")", "or", "os", ".", "environ", ".", "get", "(", "\"CUDA_PATH\"", ")", "\n", "if", "cuda_home", "is", "None", ":", "\n", "# Guess #2", "\n", "        ", "if", "sys", ".", "platform", "==", "\"win32\"", ":", "\n", "            ", "cuda_homes", "=", "glob", ".", "glob", "(", "\n", "\"C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v*.*\"", "\n", ")", "\n", "if", "len", "(", "cuda_homes", ")", "==", "0", ":", "\n", "                ", "cuda_home", "=", "\"\"", "\n", "", "else", ":", "\n", "                ", "cuda_home", "=", "cuda_homes", "[", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "cuda_home", "=", "\"/usr/local/cuda\"", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cuda_home", ")", ":", "\n", "# Guess #3", "\n", "            ", "try", ":", "\n", "                ", "which", "=", "\"where\"", "if", "sys", ".", "platform", "==", "\"win32\"", "else", "\"which\"", "\n", "nvcc", "=", "subprocess", ".", "check_output", "(", "[", "which", ",", "\"nvcc\"", "]", ")", ".", "decode", "(", ")", ".", "rstrip", "(", "\"\\r\\n\"", ")", "\n", "cuda_home", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "nvcc", ")", ")", "\n", "", "except", "Exception", ":", "\n", "                ", "cuda_home", "=", "None", "\n", "", "", "", "if", "cuda_home", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"No CUDA runtime is found, using CUDA_HOME='{}'\"", ".", "format", "(", "cuda_home", ")", "\n", ")", "\n", "", "return", "cuda_home", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.find.find_cuda_device_arch": [[73, 159], ["find.find_cuda", "pathlib.Path", "device_query_path.exists", "int", "tempfile.NamedTemporaryFile", "pathlib.Path", "f.write", "f.flush", "subprocess.check_output().decode().rstrip().split", "arch.split", "subprocess.check_output", "print", "subprocess.check_output", "subprocess.check_output().decode().rstrip().split", "str", "len", "subprocess.check_output().decode().rstrip", "e.output.decode", "subprocess.check_output().decode().rstrip", "e.output.decode", "RuntimeError", "subprocess.check_output().decode", "subprocess.check_output().decode", "subprocess.check_output", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.find.find_cuda", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.exists"], ["", "def", "find_cuda_device_arch", "(", ")", ":", "\n", "    ", "if", "sys", ".", "platform", "==", "\"win32\"", ":", "\n", "# TODO: add windows support", "\n", "        ", "return", "None", "\n", "", "cuda_home", "=", "find_cuda", "(", ")", "\n", "if", "cuda_home", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "cuda_home", "=", "Path", "(", "cuda_home", ")", "\n", "try", ":", "\n", "        ", "device_query_path", "=", "cuda_home", "/", "\"extras/demo_suite/deviceQuery\"", "\n", "if", "not", "device_query_path", ".", "exists", "(", ")", ":", "\n", "            ", "source", "=", "\"\"\"\n            #include <cuda_runtime.h>\n            #include <iostream>\n            int main(){\n                int nDevices;\n                cudaGetDeviceCount(&nDevices);\n                for (int i = 0; i < nDevices; i++) {\n                    cudaDeviceProp prop;\n                    cudaGetDeviceProperties(&prop, i);\n                    std::cout << prop.major << \".\" << prop.minor << std::endl;\n                }\n                return 0;\n            }\n            \"\"\"", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "\"w\"", ",", "suffix", "=", "\".cc\"", ")", "as", "f", ":", "\n", "                ", "f_path", "=", "Path", "(", "f", ".", "name", ")", "\n", "f", ".", "write", "(", "source", ")", "\n", "f", ".", "flush", "(", ")", "\n", "try", ":", "\n", "# TODO: add windows support", "\n", "                    ", "cmd", "=", "(", "\n", "f\"g++ {f.name} -o {f_path.stem}\"", "\n", "f\" -I{cuda_home / 'include'} -L{cuda_home / 'lib64'} -lcudart\"", "\n", ")", "\n", "print", "(", "cmd", ")", "\n", "subprocess", ".", "check_output", "(", "cmd", ",", "shell", "=", "True", ",", "cwd", "=", "f_path", ".", "parent", ")", "\n", "cmd", "=", "f\"./{f_path.stem}\"", "\n", "arches", "=", "(", "\n", "subprocess", ".", "check_output", "(", "cmd", ",", "shell", "=", "True", ",", "cwd", "=", "f_path", ".", "parent", ")", "\n", ".", "decode", "(", ")", "\n", ".", "rstrip", "(", "\"\\r\\n\"", ")", "\n", ".", "split", "(", "\"\\n\"", ")", "\n", ")", "\n", "if", "len", "(", "arches", ")", "<", "1", ":", "\n", "                        ", "return", "None", "\n", "", "arch", "=", "arches", "[", "0", "]", "\n", "", "except", "Exception", ":", "\n", "                    ", "return", "None", "\n", "", "", "", "else", ":", "\n", "            ", "cmd", "=", "f\"{str(device_query_path)} | grep 'CUDA Capability'\"", "\n", "arch", "=", "(", "\n", "subprocess", ".", "check_output", "(", "cmd", ",", "shell", "=", "True", ")", "\n", ".", "decode", "(", ")", "\n", ".", "rstrip", "(", "\"\\r\\n\"", ")", "\n", ".", "split", "(", "\" \"", ")", "[", "-", "1", "]", "\n", ")", "\n", "# assert len(arch) == 2", "\n", "", "arch_list", "=", "[", "int", "(", "s", ")", "for", "s", "in", "arch", ".", "split", "(", "\".\"", ")", "]", "\n", "arch_int", "=", "arch_list", "[", "0", "]", "*", "10", "+", "arch_list", "[", "1", "]", "\n", "find_work_arch", "=", "False", "\n", "while", "arch_int", ">", "10", ":", "\n", "            ", "try", ":", "\n", "                ", "res", "=", "subprocess", ".", "check_output", "(", "\n", "\"nvcc -arch=sm_{}\"", ".", "format", "(", "arch_int", ")", ",", "\n", "shell", "=", "True", ",", "\n", "stderr", "=", "subprocess", ".", "STDOUT", ",", "\n", ")", "\n", "", "except", "subprocess", ".", "CalledProcessError", "as", "e", ":", "\n", "                ", "if", "\"No input files specified\"", "in", "e", ".", "output", ".", "decode", "(", ")", ":", "\n", "                    ", "find_work_arch", "=", "True", "\n", "break", "\n", "", "elif", "(", "\n", "\"is not defined for option 'gpu-architecture'\"", "in", "e", ".", "output", ".", "decode", "(", ")", "\n", ")", ":", "\n", "                    ", "arch_int", "-=", "1", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"unknown error\"", ")", "\n", "", "", "", "if", "find_work_arch", ":", "\n", "            ", "arch", "=", "f\"sm_{arch_int}\"", "\n", "", "else", ":", "\n", "            ", "arch", "=", "None", "\n", "\n", "", "", "except", "Exception", ":", "\n", "        ", "arch", "=", "None", "\n", "", "return", "arch", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.find.get_gpu_memory_usage": [[161, 210], ["find.find_cuda", "pathlib.Path", "tempfile.NamedTemporaryFile", "pathlib.Path", "f.write", "f.flush", "print", "subprocess.check_output", "subprocess.check_output().decode", "json.loads", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.find.find_cuda"], ["", "def", "get_gpu_memory_usage", "(", ")", ":", "\n", "    ", "if", "sys", ".", "platform", "==", "\"win32\"", ":", "\n", "# TODO: add windows support", "\n", "        ", "return", "None", "\n", "", "cuda_home", "=", "find_cuda", "(", ")", "\n", "if", "cuda_home", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "cuda_home", "=", "Path", "(", "cuda_home", ")", "\n", "source", "=", "\"\"\"\n    #include <cuda_runtime.h>\n    #include <iostream>\n    int main(){\n        int nDevices;\n        cudaGetDeviceCount(&nDevices);\n        size_t free_m, total_m;\n        // output json format.\n        std::cout << \"[\";\n        for (int i = 0; i < nDevices; i++) {\n            cudaSetDevice(i);\n            cudaMemGetInfo(&free_m, &total_m);\n            std::cout << \"[\" << free_m << \",\" << total_m << \"]\";\n            if (i != nDevices - 1)\n                std::cout << \",\" << std::endl;\n        }\n        std::cout << \"]\" << std::endl;\n        return 0;\n    }\n    \"\"\"", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "\"w\"", ",", "suffix", "=", "\".cc\"", ")", "as", "f", ":", "\n", "        ", "f_path", "=", "Path", "(", "f", ".", "name", ")", "\n", "f", ".", "write", "(", "source", ")", "\n", "f", ".", "flush", "(", ")", "\n", "try", ":", "\n", "# TODO: add windows support", "\n", "            ", "cmd", "=", "(", "\n", "f\"g++ {f.name} -o {f_path.stem} -std=c++11\"", "\n", "f\" -I{cuda_home / 'include'} -L{cuda_home / 'lib64'} -lcudart\"", "\n", ")", "\n", "print", "(", "cmd", ")", "\n", "subprocess", ".", "check_output", "(", "cmd", ",", "shell", "=", "True", ",", "cwd", "=", "f_path", ".", "parent", ")", "\n", "cmd", "=", "f\"./{f_path.stem}\"", "\n", "usages", "=", "subprocess", ".", "check_output", "(", "\n", "cmd", ",", "shell", "=", "True", ",", "cwd", "=", "f_path", ".", "parent", "\n", ")", ".", "decode", "(", ")", "\n", "usages", "=", "json", ".", "loads", "(", "usages", ")", "\n", "return", "usages", "\n", "", "except", "Exception", ":", "\n", "            ", "return", "None", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.__init__": [[7, 10], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_module_dict", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.__repr__": [[11, 16], ["list", "registry.Registry._module_dict.keys"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_str", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(name={}, items={})\"", ".", "format", "(", "\n", "self", ".", "_name", ",", "list", "(", "self", ".", "_module_dict", ".", "keys", "(", ")", ")", "\n", ")", "\n", "return", "format_str", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.name": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.module_dict": [[21, 24], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "module_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get": [[25, 27], ["registry.Registry._module_dict.get"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["", "def", "get", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", ".", "get", "(", "key", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry._register_module": [[28, 43], ["inspect.isclass", "TypeError", "KeyError", "type"], "methods", ["None"], ["", "def", "_register_module", "(", "self", ",", "module_class", ")", ":", "\n", "        ", "\"\"\"Register a module.\n        Args:\n            module (:obj:`nn.Module`): Module to be registered.\n        \"\"\"", "\n", "if", "not", "inspect", ".", "isclass", "(", "module_class", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"module must be a class, but got {}\"", ".", "format", "(", "type", "(", "module_class", ")", ")", "\n", ")", "\n", "", "module_name", "=", "module_class", ".", "__name__", "\n", "if", "module_name", "in", "self", ".", "_module_dict", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "\"{} is already registered in {}\"", ".", "format", "(", "module_name", ",", "self", ".", "name", ")", "\n", ")", "\n", "", "self", ".", "_module_dict", "[", "module_name", "]", "=", "module_class", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.register_module": [[44, 47], ["registry.Registry._register_module"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry._register_module"], ["", "def", "register_module", "(", "self", ",", "cls", ")", ":", "\n", "        ", "self", ".", "_register_module", "(", "cls", ")", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.build_from_cfg": [[49, 79], ["cfg.copy", "cfg.copy.pop", "det3d.torchie.is_str", "registry.get.", "isinstance", "isinstance", "registry.get", "inspect.isclass", "default_args.items", "KeyError", "TypeError", "cfg.copy.setdefault", "type"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_str", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["", "", "def", "build_from_cfg", "(", "cfg", ",", "registry", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build a module from config dict.\n    Args:\n        cfg (dict): Config dict. It should at least contain the key \"type\".\n        registry (:obj:`Registry`): The registry to search the type from.\n        default_args (dict, optional): Default initialization arguments.\n    Returns:\n        obj: The constructed object.\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "\"type\"", "in", "cfg", "\n", "assert", "isinstance", "(", "default_args", ",", "dict", ")", "or", "default_args", "is", "None", "\n", "args", "=", "cfg", ".", "copy", "(", ")", "\n", "obj_type", "=", "args", ".", "pop", "(", "\"type\"", ")", "\n", "if", "torchie", ".", "is_str", "(", "obj_type", ")", ":", "\n", "        ", "obj_cls", "=", "registry", ".", "get", "(", "obj_type", ")", "\n", "if", "obj_cls", "is", "None", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "\"{} is not in the {} registry\"", ".", "format", "(", "obj_type", ",", "registry", ".", "name", ")", "\n", ")", "\n", "", "", "elif", "inspect", ".", "isclass", "(", "obj_type", ")", ":", "\n", "        ", "obj_cls", "=", "obj_type", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "\"type must be a str or valid type, but got {}\"", ".", "format", "(", "type", "(", "obj_type", ")", ")", "\n", ")", "\n", "", "if", "default_args", "is", "not", "None", ":", "\n", "        ", "for", "name", ",", "value", "in", "default_args", ".", "items", "(", ")", ":", "\n", "            ", "args", ".", "setdefault", "(", "name", ",", "value", ")", "\n", "\n", "", "", "return", "obj_cls", "(", "**", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.print_utils._flat_nested_json_dict": [[1, 7], ["json_dict.items", "isinstance", "print_utils._flat_nested_json_dict", "str", "str"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint._flat_nested_json_dict"], ["def", "_flat_nested_json_dict", "(", "json_dict", ",", "flatted", ",", "sep", "=", "\".\"", ",", "start", "=", "\"\"", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "json_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "_flat_nested_json_dict", "(", "v", ",", "flatted", ",", "sep", ",", "start", "+", "sep", "+", "str", "(", "k", ")", ")", "\n", "", "else", ":", "\n", "            ", "flatted", "[", "start", "+", "sep", "+", "str", "(", "k", ")", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.print_utils.flat_nested_json_dict": [[9, 19], ["json_dict.items", "isinstance", "print_utils._flat_nested_json_dict", "str", "str"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint._flat_nested_json_dict"], ["", "", "", "def", "flat_nested_json_dict", "(", "json_dict", ",", "sep", "=", "\".\"", ")", "->", "dict", ":", "\n", "    ", "\"\"\"flat a nested json-like dict. this function make shadow copy.\n    \"\"\"", "\n", "flatted", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "json_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "_flat_nested_json_dict", "(", "v", ",", "flatted", ",", "sep", ",", "str", "(", "k", ")", ")", "\n", "", "else", ":", "\n", "            ", "flatted", "[", "str", "(", "k", ")", "]", "=", "v", "\n", "", "", "return", "flatted", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.print_utils.metric_to_str": [[21, 36], ["print_utils.flat_nested_json_dict", "flat_nested_json_dict.items", "isinstance", "metrics_str_list.append", "isinstance", "metrics_str_list.append", "isinstance", "metrics_str_list.append", "metrics_str_list.append"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.flat_nested_json_dict"], ["", "def", "metric_to_str", "(", "metrics", ",", "sep", "=", "\".\"", ")", ":", "\n", "    ", "flatted_metrics", "=", "flat_nested_json_dict", "(", "metrics", ",", "sep", ")", "\n", "metrics_str_list", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "flatted_metrics", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "float", ")", ":", "\n", "            ", "metrics_str_list", ".", "append", "(", "f\"{k}={v:.4}\"", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "if", "v", "and", "isinstance", "(", "v", "[", "0", "]", ",", "float", ")", ":", "\n", "                ", "v_str", "=", "\", \"", ".", "join", "(", "[", "f\"{e:.4}\"", "for", "e", "in", "v", "]", ")", "\n", "metrics_str_list", ".", "append", "(", "f\"{k}=[{v_str}]\"", ")", "\n", "", "else", ":", "\n", "                ", "metrics_str_list", ".", "append", "(", "f\"{k}={v}\"", ")", "\n", "", "", "else", ":", "\n", "            ", "metrics_str_list", ".", "append", "(", "f\"{k}={v}\"", ")", "\n", "", "", "return", "\", \"", ".", "join", "(", "metrics_str_list", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.check.is_array_like": [[4, 6], ["isinstance"], "function", ["None"], ["def", "is_array_like", "(", "x", ")", ":", "\n", "    ", "return", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.check.shape_mergeable": [[8, 18], ["check.is_array_like", "check.is_array_like", "numpy.array", "len", "len", "zip"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.check.is_array_like", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.check.is_array_like"], ["", "def", "shape_mergeable", "(", "x", ",", "expected_shape", ")", ":", "\n", "    ", "mergeable", "=", "True", "\n", "if", "is_array_like", "(", "x", ")", "and", "is_array_like", "(", "expected_shape", ")", ":", "\n", "        ", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "len", "(", "expected_shape", ")", ":", "\n", "            ", "for", "s", ",", "s_ex", "in", "zip", "(", "x", ".", "shape", ",", "expected_shape", ")", ":", "\n", "                ", "if", "s_ex", "is", "not", "None", "and", "s", "!=", "s_ex", ":", "\n", "                    ", "mergeable", "=", "False", "\n", "break", "\n", "", "", "", "", "return", "mergeable", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.utils.example_to_device": [[5, 37], ["example.items", "torch.device", "v.items", "res.append", "v.cuda", "vvv.unsqueeze_", "torch.cat().cuda", "v.items", "v1.cuda", "torch.cat"], "function", ["None"], ["def", "example_to_device", "(", "\n", "example", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "None", ",", "non_blocking", "=", "True", "\n", ")", "->", "dict", ":", "\n", "    ", "device", "=", "device", "or", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "example_torch", "=", "{", "}", "\n", "float_names", "=", "[", "\"voxels\"", ",", "\"bev_map\"", "]", "\n", "for", "k", ",", "v", "in", "example", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "in", "[", "\"anchors\"", ",", "\"reg_targets\"", ",", "\"reg_weights\"", ",", "\"labels\"", ",", "\"anchors_mask\"", "]", ":", "\n", "            ", "res", "=", "[", "]", "\n", "for", "kk", ",", "vv", "in", "v", ".", "items", "(", ")", ":", "\n", "                ", "vv", "=", "[", "vvv", ".", "unsqueeze_", "(", "0", ")", "for", "vvv", "in", "vv", "]", "\n", "res", ".", "append", "(", "torch", ".", "cat", "(", "vv", ",", "dim", "=", "0", ")", ".", "cuda", "(", "device", ",", "non_blocking", "=", "non_blocking", ")", ")", "\n", "", "example_torch", "[", "k", "]", "=", "res", "\n", "", "elif", "k", "in", "[", "\n", "\"voxels\"", ",", "\n", "\"bev_map\"", ",", "\n", "\"coordinates\"", ",", "\n", "\"num_points\"", ",", "\n", "\"points\"", ",", "\n", "\"num_voxels\"", ",", "\n", "]", ":", "\n", "# slow when directly provide fp32 data with dtype=torch.half", "\n", "            ", "example_torch", "[", "k", "]", "=", "v", ".", "cuda", "(", "device", ",", "non_blocking", "=", "non_blocking", ")", "\n", "", "elif", "k", "==", "\"calib\"", ":", "\n", "            ", "calib", "=", "{", "}", "\n", "for", "k1", ",", "v1", "in", "v", ".", "items", "(", ")", ":", "\n", "                ", "calib", "[", "k1", "]", "=", "v1", ".", "cuda", "(", "device", ",", "non_blocking", "=", "non_blocking", ")", "\n", "", "example_torch", "[", "k", "]", "=", "calib", "\n", "", "else", ":", "\n", "            ", "example_torch", "[", "k", "]", "=", "v", "\n", "\n", "", "", "return", "example_torch", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.utils._worker_init_fn": [[39, 43], ["numpy.array", "numpy.random.seed", "print", "time.time", "numpy.random.get_state"], "function", ["None"], ["", "def", "_worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "time_seed", "=", "np", ".", "array", "(", "time", ".", "time", "(", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "np", ".", "random", ".", "seed", "(", "time_seed", "+", "worker_id", ")", "\n", "print", "(", "f\"WORKER {worker_id} seed:\"", ",", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer.__init__": [[139, 159], ["logging.getLogger"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "optimizer", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "\n", "save_dir", "=", "\"\"", ",", "\n", "ckpt_path", "=", "None", ",", "\n", "save_to_disk", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "pretrained_path", "=", "ckpt_path", "# whether pretrained", "\n", "self", ".", "finetune", "=", "False", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "self", ".", "save_to_disk", "=", "save_to_disk", "\n", "if", "logger", "is", "None", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer.save": [[160, 181], ["checkpoint.Checkpointer.logger.info", "checkpoint.Checkpointer.model.state_dict", "data.update", "os.path.join", "checkpoint.Checkpointer.logger.info", "torch.save", "checkpoint.Checkpointer.tag_last_checkpoint", "checkpoint.Checkpointer.optimizer.state_dict", "print", "checkpoint.Checkpointer.scheduler.state_dict", "dir"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.state_dict", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer.tag_last_checkpoint", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.state_dict", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.state_dict"], ["", "def", "save", "(", "self", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "name", ")", "\n", "if", "not", "self", ".", "save_dir", ":", "\n", "            ", "return", "\n", "\n", "", "if", "not", "self", ".", "save_to_disk", ":", "\n", "            ", "return", "\n", "\n", "", "data", "=", "{", "}", "\n", "data", "[", "\"model\"", "]", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "if", "self", ".", "optimizer", "is", "not", "None", ":", "\n", "            ", "data", "[", "\"optimizer\"", "]", "=", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "", "if", "self", ".", "scheduler", "is", "not", "None", ":", "\n", "            ", "print", "(", "dir", "(", "self", ".", "scheduler", ")", ")", "\n", "data", "[", "\"scheduler\"", "]", "=", "self", ".", "scheduler", ".", "state_dict", "(", ")", "\n", "", "data", ".", "update", "(", "kwargs", ")", "\n", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"{}.pth\"", ".", "format", "(", "name", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving checkpoint to {}\"", ".", "format", "(", "save_file", ")", ")", "\n", "torch", ".", "save", "(", "data", ",", "save_file", ")", "\n", "self", ".", "tag_last_checkpoint", "(", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer.load": [[182, 205], ["checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer._load_file", "checkpoint.Checkpointer.Checkpointer._load_model", "checkpoint.Checkpointer.Checkpointer.get_checkpoint_file", "checkpoint.Checkpointer.Checkpointer.has_checkpoint", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.optimizer.load_state_dict", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.scheduler.load_state_dict", "checkpoint.Checkpointer.Checkpointer.get_checkpoint_file", "checkpoint.Checkpointer.Checkpointer.pop", "checkpoint.Checkpointer.Checkpointer.pop"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.det3dCheckpointer._load_file", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer._load_model", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer.get_checkpoint_file", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer.has_checkpoint", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.load_state_dict", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.load_state_dict", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer.get_checkpoint_file"], ["", "def", "load", "(", "self", ",", "f", "=", "None", ")", ":", "\n", "        ", "if", "f", "is", "not", "None", ":", "\n", "            ", "f", "=", "self", ".", "get_checkpoint_file", "(", "f", ")", "\n", "", "elif", "self", ".", "has_checkpoint", "(", "self", ".", "save_dir", ")", ":", "\n", "# override argument with existing checkpoint", "\n", "            ", "f", "=", "self", ".", "get_checkpoint_file", "(", "self", ".", "save_dir", ")", "\n", "\n", "", "if", "not", "f", ":", "\n", "# no checkpoint could be found", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"No checkpoint found. Initializing model from scratch\"", ")", "\n", "return", "{", "}", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint from {}\"", ".", "format", "(", "f", ")", ")", "\n", "checkpoint", "=", "self", ".", "_load_file", "(", "f", ")", "\n", "self", ".", "_load_model", "(", "checkpoint", ")", "\n", "if", "\"optimizer\"", "in", "checkpoint", "and", "self", ".", "optimizer", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Loading optimizer from {}\"", ".", "format", "(", "f", ")", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "\"optimizer\"", ")", ")", "\n", "", "if", "\"scheduler\"", "in", "checkpoint", "and", "self", ".", "scheduler", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Loading scheduler from {}\"", ".", "format", "(", "f", ")", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "\"scheduler\"", ")", ")", "\n", "\n", "# return any further checkpoint data", "\n", "", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer.finetune_load": [[206, 215], ["checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer._load_file", "checkpoint.Checkpointer.Checkpointer._load_model", "checkpoint.Checkpointer.Checkpointer.get_checkpoint_file"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.det3dCheckpointer._load_file", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer._load_model", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer.get_checkpoint_file"], ["", "def", "finetune_load", "(", "self", ",", "ckpt_path", "=", "None", ",", "f", "=", "None", ")", ":", "\n", "        ", "if", "ckpt_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "pretrained_path", "=", "ckpt_path", "\n", "self", ".", "finetune", "=", "True", "\n", "f", "=", "self", ".", "get_checkpoint_file", "(", "ckpt_path", ")", "\n", "", "assert", "f", "is", "not", "None", ",", "\"Finetune should provide a valid ckpt path\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Loading pretrained model from {}\"", ".", "format", "(", "f", ")", ")", "\n", "checkpoint", "=", "self", ".", "_load_file", "(", "f", ")", "\n", "self", ".", "_load_model", "(", "checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer.has_checkpoint": [[216, 219], ["os.path.join", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.exists"], ["", "def", "has_checkpoint", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "return", "os", ".", "path", ".", "exists", "(", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer.get_checkpoint_file": [[220, 231], ["os.path.join", "open", "f.read", "last_saved.strip.strip.strip"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open"], ["", "def", "get_checkpoint_file", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "try", ":", "\n", "            ", "with", "open", "(", "save_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "last_saved", "=", "f", ".", "read", "(", ")", "\n", "last_saved", "=", "last_saved", ".", "strip", "(", ")", "\n", "", "", "except", "IOError", ":", "\n", "# if file doesn't exist, maybe because it has just been", "\n", "# deleted by a separate process", "\n", "            ", "last_saved", "=", "\"\"", "\n", "", "return", "last_saved", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer.tag_last_checkpoint": [[232, 236], ["os.path.join", "open", "f.write"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open"], ["", "def", "tag_last_checkpoint", "(", "self", ",", "last_filename", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "with", "open", "(", "save_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "last_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer._load_file": [[237, 239], ["torch.load", "torch.device"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load"], ["", "", "def", "_load_file", "(", "self", ",", "f", ")", ":", "\n", "        ", "return", "torch", ".", "load", "(", "f", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer._load_model": [[240, 247], ["checkpoint.finetune_load_state_dict", "checkpoint.load_state_dict", "checkpoint.pop", "checkpoint.pop"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.finetune_load_state_dict", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.load_state_dict"], ["", "def", "_load_model", "(", "self", ",", "checkpoint", ")", ":", "\n", "        ", "if", "self", ".", "finetune", ":", "\n", "            ", "finetune_load_state_dict", "(", "\n", "self", ".", "model", ",", "checkpoint", ".", "pop", "(", "\"model\"", ")", ",", "logger", "=", "self", ".", "logger", "\n", ")", "\n", "", "else", ":", "\n", "            ", "load_state_dict", "(", "self", ".", "model", ",", "checkpoint", ".", "pop", "(", "\"model\"", ")", ",", "logger", "=", "self", ".", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.det3dCheckpointer.__init__": [[250, 266], ["checkpoint.Checkpointer.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "# cfg,", "\n", "model", ",", "\n", "optimizer", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "\n", "save_dir", "=", "\"\"", ",", "\n", "save_to_disk", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "det3dCheckpointer", ",", "self", ")", ".", "__init__", "(", "\n", "model", ",", "optimizer", ",", "scheduler", ",", "save_dir", ",", "save_to_disk", ",", "logger", "\n", ")", "\n", "# self.cfg = cfg.clone()", "\n", "# self.writer = Writer(save_dir)", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.det3dCheckpointer._load_file": [[267, 273], ["checkpoint.Checkpointer._load_file", "dict"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.det3dCheckpointer._load_file"], ["", "def", "_load_file", "(", "self", ",", "f", ")", ":", "\n", "# load native detectron.pytorch checkpoint", "\n", "        ", "loaded", "=", "super", "(", "det3dCheckpointer", ",", "self", ")", ".", "_load_file", "(", "f", ")", "\n", "if", "\"model\"", "not", "in", "loaded", ":", "\n", "            ", "loaded", "=", "dict", "(", "model", "=", "loaded", ")", "\n", "", "return", "loaded", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.__init__": [[276, 283], ["pathlib.Path"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "self", ".", "save_dir", "=", "Path", "(", "save_dir", ")", "\n", "self", ".", "log_mjson_file", "=", "None", "\n", "self", ".", "summary_writter", "=", "None", "\n", "self", ".", "metrics", "=", "[", "]", "\n", "self", ".", "_text_current_gstep", "=", "-", "1", "\n", "self", ".", "_tb_texts", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open": [[284, 291], ["save_dir.exists", "summary_dir.mkdir", "tensorboardX.SummaryWriter", "str"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.exists"], ["", "def", "open", "(", "self", ")", ":", "\n", "        ", "save_dir", "=", "self", ".", "save_dir", "\n", "assert", "save_dir", ".", "exists", "(", ")", "\n", "summary_dir", "=", "save_dir", "/", "\"summary\"", "\n", "summary_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "summary_writter", "=", "SummaryWriter", "(", "str", "(", "summary_dir", ")", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.close": [[292, 298], ["str", "checkpoint.Writer.summary_writter.export_scalars_to_json", "checkpoint.Writer.summary_writter.close"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "summary_writter", "is", "not", "None", "\n", "tb_json_path", "=", "str", "(", "self", ".", "save_dir", "/", "\"tensorboard_scalars.json\"", ")", "\n", "self", ".", "summary_writter", ".", "export_scalars_to_json", "(", "tb_json_path", ")", "\n", "self", ".", "summary_writter", ".", "close", "(", ")", "\n", "self", ".", "summary_writter", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.log_text": [[299, 312], ["checkpoint.Writer.summary_writter.add_text", "checkpoint.Writer._tb_texts.append"], "methods", ["None"], ["", "def", "log_text", "(", "self", ",", "text", ",", "step", ",", "tag", "=", "\"regular log\"", ")", ":", "\n", "        ", "\"\"\"This function only add text to log.txt and tensorboard texts\n        \"\"\"", "\n", "if", "step", ">", "self", ".", "_text_current_gstep", "and", "self", ".", "_text_current_gstep", "!=", "-", "1", ":", "\n", "            ", "total_text", "=", "\"\\n\"", ".", "join", "(", "self", ".", "_tb_texts", ")", "\n", "self", ".", "summary_writter", ".", "add_text", "(", "tag", ",", "total_text", ",", "global_step", "=", "step", ")", "\n", "self", ".", "_tb_texts", "=", "[", "]", "\n", "self", ".", "_text_current_gstep", "=", "step", "\n", "", "else", ":", "\n", "            ", "self", ".", "_tb_texts", ".", "append", "(", "text", ")", "\n", "\n", "", "if", "self", ".", "_text_current_gstep", "==", "-", "1", ":", "\n", "            ", "self", ".", "_text_current_gstep", "=", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.log_metrics": [[313, 326], ["checkpoint.flat_nested_json_dict", "flat_nested_json_dict.items", "isinstance", "any", "v_dict.items", "isinstance", "checkpoint.Writer.summary_writter.add_scalar", "str", "checkpoint.Writer.summary_writter.add_scalar", "isinstance", "enumerate"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.flat_nested_json_dict"], ["", "", "def", "log_metrics", "(", "self", ",", "metrics", ":", "dict", ",", "step", ")", ":", "\n", "        ", "flatted_summarys", "=", "flat_nested_json_dict", "(", "metrics", ",", "\"/\"", ")", "\n", "for", "k", ",", "v", "in", "flatted_summarys", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "if", "any", "(", "[", "isinstance", "(", "e", ",", "str", ")", "for", "e", "in", "v", "]", ")", ":", "\n", "                    ", "continue", "\n", "", "v_dict", "=", "{", "str", "(", "i", ")", ":", "e", "for", "i", ",", "e", "in", "enumerate", "(", "v", ")", "}", "\n", "for", "k1", ",", "v1", "in", "v_dict", ".", "items", "(", ")", ":", "\n", "                    ", "self", ".", "summary_writter", ".", "add_scalar", "(", "k", "+", "\"/\"", "+", "k1", ",", "v1", ",", "step", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "summary_writter", ".", "add_scalar", "(", "k", ",", "v", ",", "step", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint._flat_nested_json_dict": [[12, 18], ["json_dict.items", "isinstance", "checkpoint._flat_nested_json_dict", "str", "str"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint._flat_nested_json_dict"], ["def", "_flat_nested_json_dict", "(", "json_dict", ",", "flatted", ",", "sep", "=", "\".\"", ",", "start", "=", "\"\"", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "json_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "_flat_nested_json_dict", "(", "v", ",", "flatted", ",", "sep", ",", "start", "+", "sep", "+", "str", "(", "k", ")", ")", "\n", "", "else", ":", "\n", "            ", "flatted", "[", "start", "+", "sep", "+", "str", "(", "k", ")", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.flat_nested_json_dict": [[20, 30], ["json_dict.items", "isinstance", "checkpoint._flat_nested_json_dict", "str", "str"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint._flat_nested_json_dict"], ["", "", "", "def", "flat_nested_json_dict", "(", "json_dict", ",", "sep", "=", "\".\"", ")", "->", "dict", ":", "\n", "    ", "\"\"\"flat a nested json-like dict. this function make shadow copy.\n    \"\"\"", "\n", "flatted", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "json_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "_flat_nested_json_dict", "(", "v", ",", "flatted", ",", "sep", ",", "str", "(", "k", ")", ")", "\n", "", "else", ":", "\n", "            ", "flatted", "[", "str", "(", "k", ")", "]", "=", "v", "\n", "", "", "return", "flatted", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.metric_to_str": [[32, 47], ["checkpoint.flat_nested_json_dict", "flat_nested_json_dict.items", "isinstance", "metrics_str_list.append", "isinstance", "metrics_str_list.append", "isinstance", "metrics_str_list.append", "metrics_str_list.append"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.flat_nested_json_dict"], ["", "def", "metric_to_str", "(", "metrics", ",", "sep", "=", "\".\"", ")", ":", "\n", "    ", "flatted_metrics", "=", "flat_nested_json_dict", "(", "metrics", ",", "sep", ")", "\n", "metrics_str_list", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "flatted_metrics", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "float", ")", ":", "\n", "            ", "metrics_str_list", ".", "append", "(", "f\"{k}={v:.4}\"", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "if", "v", "and", "isinstance", "(", "v", "[", "0", "]", ",", "float", ")", ":", "\n", "                ", "v_str", "=", "\", \"", ".", "join", "(", "[", "f\"{e:.4}\"", "for", "e", "in", "v", "]", ")", "\n", "metrics_str_list", ".", "append", "(", "f\"{k}=[{v_str}]\"", ")", "\n", "", "else", ":", "\n", "                ", "metrics_str_list", ".", "append", "(", "f\"{k}={v}\"", ")", "\n", "", "", "else", ":", "\n", "            ", "metrics_str_list", ".", "append", "(", "f\"{k}={v}\"", ")", "\n", "", "", "return", "\", \"", ".", "join", "(", "metrics_str_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.align_and_update_state_dicts": [[49, 97], ["sorted", "sorted", "torch.as_tensor().view", "torch.as_tensor().view.max", "enumerate", "list", "list", "len", "len", "max", "max", "logging.getLogger", "idxs.tolist", "logging.getLogger.info", "model_state_dict.keys", "loaded_state_dict.keys", "i.endswith", "len", "torch.as_tensor", "log_str_template.format", "len", "len", "tuple"], "function", ["None"], ["", "def", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ",", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Strategy: suppose that the models that we will create will have prefixes appended\n    to each of its keys, for example due to an extra level of nesting that the original\n    pre-trained weights from ImageNet won't contain. For example, model.state_dict()\n    might return backbone[0].body.res2.conv1.weight, while the pre-trained model contains\n    res2.conv1.weight. We thus want to match both parameters together.\n    For that, we look for each model weight, look among all loaded keys if there is one\n    that is a suffix of the current weight name, and use it if that's the case.\n    If multiple matches exist, take the one with longest size\n    of the corresponding name. For example, for the same model as before, the pretrained\n    weight file can contain both res2.conv1.weight, as well as conv1.weight. In this case,\n    we want to match backbone[0].body.conv1.weight to conv1.weight, and\n    backbone[0].body.res2.conv1.weight to res2.conv1.weight.\n    \"\"\"", "\n", "current_keys", "=", "sorted", "(", "list", "(", "model_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "loaded_keys", "=", "sorted", "(", "list", "(", "loaded_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "# get a matrix of string matches, where each (i, j) entry correspond to the size of the", "\n", "# loaded_key string, if it matches", "\n", "match_matrix", "=", "[", "\n", "len", "(", "j", ")", "if", "i", ".", "endswith", "(", "j", ")", "else", "0", "for", "i", "in", "current_keys", "for", "j", "in", "loaded_keys", "\n", "]", "\n", "match_matrix", "=", "torch", ".", "as_tensor", "(", "match_matrix", ")", ".", "view", "(", "\n", "len", "(", "current_keys", ")", ",", "len", "(", "loaded_keys", ")", "\n", ")", "\n", "max_match_size", ",", "idxs", "=", "match_matrix", ".", "max", "(", "1", ")", "\n", "# remove indices that correspond to no-match", "\n", "idxs", "[", "max_match_size", "==", "0", "]", "=", "-", "1", "\n", "\n", "# used for logging", "\n", "max_size", "=", "max", "(", "[", "len", "(", "key", ")", "for", "key", "in", "current_keys", "]", ")", "if", "current_keys", "else", "1", "\n", "max_size_loaded", "=", "max", "(", "[", "len", "(", "key", ")", "for", "key", "in", "loaded_keys", "]", ")", "if", "loaded_keys", "else", "1", "\n", "log_str_template", "=", "\"{: <{}} loaded from {: <{}} of shape {}\"", "\n", "if", "logger", "is", "None", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "", "for", "idx_new", ",", "idx_old", "in", "enumerate", "(", "idxs", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "if", "idx_old", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "key", "=", "current_keys", "[", "idx_new", "]", "\n", "key_old", "=", "loaded_keys", "[", "idx_old", "]", "\n", "model_state_dict", "[", "key", "]", "=", "loaded_state_dict", "[", "key_old", "]", "\n", "logger", ".", "info", "(", "\n", "log_str_template", ".", "format", "(", "\n", "key", ",", "\n", "max_size", ",", "\n", "key_old", ",", "\n", "max_size_loaded", ",", "\n", "tuple", "(", "loaded_state_dict", "[", "key_old", "]", ".", "shape", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.strip_prefix_if_present": [[101, 109], ["sorted", "collections.OrderedDict", "state_dict.items", "state_dict.keys", "all", "key.startswith", "key.replace"], "function", ["None"], ["", "", "def", "strip_prefix_if_present", "(", "state_dict", ",", "prefix", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "not", "all", "(", "key", ".", "startswith", "(", "prefix", ")", "for", "key", "in", "keys", ")", ":", "\n", "        ", "return", "state_dict", "\n", "", "stripped_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "stripped_state_dict", "[", "key", ".", "replace", "(", "prefix", ",", "\"\"", ")", "]", "=", "value", "\n", "", "return", "stripped_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.load_state_dict": [[111, 121], ["model.state_dict", "checkpoint.strip_prefix_if_present", "checkpoint.align_and_update_state_dicts", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.state_dict", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.strip_prefix_if_present", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.align_and_update_state_dicts", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.load_state_dict"], ["", "def", "load_state_dict", "(", "model", ",", "loaded_state_dict", ",", "logger", "=", "None", ")", ":", "\n", "    ", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# if the state_dict comes from a model that was wrapped in a", "\n", "# DataParallel or DistributedDataParallel during serialization,", "\n", "# remove the \"module\" prefix before performing the matching", "\n", "loaded_state_dict", "=", "strip_prefix_if_present", "(", "loaded_state_dict", ",", "prefix", "=", "\"module.\"", ")", "\n", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ",", "logger", "=", "logger", ")", "\n", "\n", "# use strict loading", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.finetune_load_state_dict": [[123, 136], ["model.state_dict", "checkpoint.strip_prefix_if_present", "checkpoint.align_and_update_state_dicts", "model.load_state_dict", "strip_prefix_if_present.items", "k.startswith"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.state_dict", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.strip_prefix_if_present", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.align_and_update_state_dicts", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.load_state_dict"], ["", "def", "finetune_load_state_dict", "(", "model", ",", "loaded_state_dict", ",", "logger", "=", "None", ")", ":", "\n", "    ", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# if the state_dict comes from a model that was wrapped in a", "\n", "# DataParallel or DistributedDataParallel during serialization,", "\n", "# remove the \"module\" prefix before performing the matching", "\n", "loaded_state_dict", "=", "strip_prefix_if_present", "(", "loaded_state_dict", ",", "prefix", "=", "\"module.\"", ")", "\n", "loaded_state_dict", "=", "{", "\n", "k", ":", "v", "for", "k", ",", "v", "in", "loaded_state_dict", ".", "items", "(", ")", "if", "not", "k", ".", "startswith", "(", "\"rpn.tasks\"", ")", "\n", "}", "\n", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ",", "logger", "=", "logger", ")", "\n", "\n", "# use strict loading", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.loader._get_possible_module_path": [[12, 21], ["pathlib.Path", "pathlib.Path.glob", "path.is_dir", "path.stem.isidentifier", "ret.append"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.is_dir"], ["def", "_get_possible_module_path", "(", "paths", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "for", "p", "in", "paths", ":", "\n", "        ", "p", "=", "Path", "(", "p", ")", "\n", "for", "path", "in", "p", ".", "glob", "(", "\"*\"", ")", ":", "\n", "            ", "if", "path", ".", "suffix", "in", "[", "\"py\"", ",", "\".so\"", "]", "or", "(", "path", ".", "is_dir", "(", ")", ")", ":", "\n", "                ", "if", "path", ".", "stem", ".", "isidentifier", "(", ")", ":", "\n", "                    ", "ret", ".", "append", "(", "path", ")", "\n", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.loader._get_regular_import_name": [[23, 37], ["pathlib.Path", "pathlib.Path", "pathlib.Path.relative_to", "list", "pathlib.Path"], "function", ["None"], ["", "def", "_get_regular_import_name", "(", "path", ",", "module_paths", ")", ":", "\n", "    ", "path", "=", "Path", "(", "path", ")", "\n", "for", "mp", "in", "module_paths", ":", "\n", "        ", "mp", "=", "Path", "(", "mp", ")", "\n", "if", "mp", "==", "path", ":", "\n", "            ", "return", "path", ".", "stem", "\n", "", "try", ":", "\n", "            ", "relative_path", "=", "path", ".", "relative_to", "(", "Path", "(", "mp", ")", ")", "\n", "parts", "=", "list", "(", "(", "relative_path", ".", "parent", "/", "relative_path", ".", "stem", ")", ".", "parts", ")", "\n", "module_name", "=", "\".\"", ".", "join", "(", "[", "mp", ".", "stem", "]", "+", "parts", ")", "\n", "return", "module_name", "\n", "", "except", "Exception", ":", "\n", "            ", "pass", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.loader.import_file": [[39, 75], ["pathlib.Path", "loader._get_possible_module_path", "loader._get_regular_import_name", "importlib.util.spec_from_file_location", "importlib.util.module_from_spec", "importlib.util.spec_from_file_location.loader.exec_module", "os.environ[].split", "loader.import_name", "logger.warning", "ValueError"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.loader._get_possible_module_path", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.loader._get_regular_import_name", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.loader.import_name"], ["", "def", "import_file", "(", "path", ",", "name", ":", "str", "=", "None", ",", "add_to_sys", "=", "True", ",", "disable_warning", "=", "False", ")", ":", "\n", "    ", "global", "CUSTOM_LOADED_MODULES", "\n", "path", "=", "Path", "(", "path", ")", "\n", "module_name", "=", "path", ".", "stem", "\n", "try", ":", "\n", "        ", "user_paths", "=", "os", ".", "environ", "[", "\"PYTHONPATH\"", "]", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "", "except", "KeyError", ":", "\n", "        ", "user_paths", "=", "[", "]", "\n", "", "possible_paths", "=", "_get_possible_module_path", "(", "user_paths", ")", "\n", "model_import_name", "=", "_get_regular_import_name", "(", "path", ",", "possible_paths", ")", "\n", "if", "model_import_name", "is", "not", "None", ":", "\n", "        ", "return", "import_name", "(", "model_import_name", ")", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "        ", "module_name", "=", "name", "\n", "", "spec", "=", "importlib", ".", "util", ".", "spec_from_file_location", "(", "module_name", ",", "path", ")", "\n", "module", "=", "importlib", ".", "util", ".", "module_from_spec", "(", "spec", ")", "\n", "spec", ".", "loader", ".", "exec_module", "(", "module", ")", "\n", "if", "not", "disable_warning", ":", "\n", "        ", "logger", ".", "warning", "(", "\n", "(", "\n", "f\"Failed to perform regular import for file {path}. \"", "\n", "\"this means this file isn't in any folder in PYTHONPATH \"", "\n", "\"or don't have __init__.py in that project. \"", "\n", "\"directly file import may fail and some reflecting features are \"", "\n", "\"disabled even if import succeed. please add your project to PYTHONPATH \"", "\n", "\"or add __init__.py to ensure this file can be regularly imported. \"", "\n", ")", "\n", ")", "\n", "\n", "", "if", "add_to_sys", ":", "# this will enable find objects defined in a file.", "\n", "# avoid replace system modules.", "\n", "        ", "if", "module_name", "in", "sys", ".", "modules", "and", "module_name", "not", "in", "CUSTOM_LOADED_MODULES", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{module_name} exists in system.\"", ")", "\n", "", "CUSTOM_LOADED_MODULES", "[", "module_name", "]", "=", "module", "\n", "sys", ".", "modules", "[", "module_name", "]", "=", "module", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.loader.import_name": [[77, 80], ["importlib.import_module"], "function", ["None"], ["", "def", "import_name", "(", "name", ",", "package", "=", "None", ")", ":", "\n", "    ", "module", "=", "importlib", ".", "import_module", "(", "name", ",", "package", ")", "\n", "return", "module", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.__new__": [[123, 127], ["boto3.client", "cls._parse_s3url", "cls._create"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath._parse_s3url", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath._create"], ["def", "__new__", "(", "cls", ",", "s3url", ":", "Optional", "[", "str", "]", "=", "None", ",", "endpoint_url", "=", "OSS_ENDPOINT", ")", ":", "\n", "        ", "_client", "=", "boto3", ".", "client", "(", "\"s3\"", ",", "endpoint_url", "=", "endpoint_url", ")", "\n", "bucket", ",", "parts", "=", "cls", ".", "_parse_s3url", "(", "s3url", ")", "\n", "return", "cls", ".", "_create", "(", "_client", ",", "bucket", ",", "parts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath._parse_s3url": [[128, 145], ["urllib.parse.urlparse", "urllib.parse.urlparse.path.lstrip", "s3url.startswith", "ValueError", "pathlib.PosixPath"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_parse_s3url", "(", "cls", ",", "s3url", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "        ", "if", "s3url", "is", "None", ":", "\n", "            ", "return", "\"\"", ",", "(", ")", "\n", "\n", "", "if", "not", "s3url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"s3url must be formated as 's3://<bucket_name>/path/to/object'\"", "\n", ")", "\n", "\n", "", "r", "=", "urlparse", "(", "s3url", ")", "\n", "assert", "r", ".", "scheme", "==", "\"s3\"", "\n", "\n", "key", "=", "r", ".", "path", ".", "lstrip", "(", "\"/\"", ")", "# remove the leading /", "\n", "\n", "parts", "=", "PosixPath", "(", "key", ")", ".", "parts", "\n", "return", "r", ".", "netloc", ",", "parts", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath._create": [[146, 154], ["isinstance", "object.__new__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.__new__"], ["", "@", "classmethod", "\n", "def", "_create", "(", "cls", ",", "client", ",", "bucket", ":", "str", ",", "key_parts", ":", "Tuple", "[", "str", "]", ")", ":", "\n", "        ", "assert", "isinstance", "(", "key_parts", ",", "tuple", ")", "\n", "self", "=", "object", ".", "__new__", "(", "cls", ")", "\n", "self", ".", "_client", "=", "client", "\n", "self", ".", "bucket", "=", "bucket", "\n", "self", ".", "_key_parts", "=", "key_parts", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.key": [[155, 158], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "key", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"/\"", ".", "join", "(", "self", ".", "_key_parts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.parent": [[159, 167], ["oss.OSSPath._create", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath._create"], ["", "@", "property", "\n", "def", "parent", "(", "self", ")", ":", "\n", "        ", "\"\"\"The logical parent of the path.\"\"\"", "\n", "\n", "if", "not", "len", "(", "self", ".", "_key_parts", ")", ":", "\n", "            ", "return", "self", "\n", "\n", "", "return", "self", ".", "_create", "(", "self", ".", "_client", ",", "self", ".", "bucket", ",", "self", ".", "_key_parts", "[", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.root": [[168, 171], ["oss.OSSPath._create"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath._create"], ["", "@", "property", "\n", "def", "root", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create", "(", "self", ".", "_client", ",", "self", ".", "bucket", ",", "key_parts", "=", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.name": [[172, 177], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_key_parts", ")", "<", "1", ":", "\n", "            ", "return", "\"\"", "\n", "", "return", "self", ".", "_key_parts", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.suffix": [[178, 187], ["name.rfind", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "suffix", "(", "self", ")", ":", "\n", "        ", "\"\"\"The final component's last suffix, if any.\"\"\"", "\n", "name", "=", "self", ".", "name", "\n", "i", "=", "name", ".", "rfind", "(", "\".\"", ")", "\n", "if", "0", "<", "i", "<", "len", "(", "name", ")", "-", "1", ":", "\n", "            ", "return", "name", "[", "i", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.suffixes": [[188, 196], ["name.lstrip.lstrip.endswith", "name.lstrip.lstrip.lstrip", "name.lstrip.lstrip.split"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "suffixes", "(", "self", ")", ":", "\n", "        ", "\"\"\"A list of the final component's suffixes, if any.\"\"\"", "\n", "name", "=", "self", ".", "name", "\n", "if", "name", ".", "endswith", "(", "\".\"", ")", ":", "\n", "            ", "return", "[", "]", "\n", "", "name", "=", "name", ".", "lstrip", "(", "\".\"", ")", "\n", "return", "[", "\".\"", "+", "suffix", "for", "suffix", "in", "name", ".", "split", "(", "\".\"", ")", "[", "1", ":", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.stem": [[197, 206], ["name.rfind", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "stem", "(", "self", ")", ":", "\n", "        ", "\"\"\"The final path component, minus its last suffix.\"\"\"", "\n", "name", "=", "self", ".", "name", "\n", "i", "=", "name", ".", "rfind", "(", "\".\"", ")", "\n", "if", "0", "<", "i", "<", "len", "(", "name", ")", "-", "1", ":", "\n", "            ", "return", "name", "[", ":", "i", "]", "\n", "", "else", ":", "\n", "            ", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.parts": [[207, 213], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "parts", "(", "self", ")", ":", "\n", "        ", "\"\"\"An object providing sequence-like access to the\n        components in the filesystem path.\"\"\"", "\n", "\n", "return", "self", ".", "_key_parts", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.__str__": [[214, 216], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"s3://{}/{}\"", ".", "format", "(", "self", ".", "bucket", ",", "self", ".", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.__eq__": [[217, 221], ["isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "other", ",", "OSSPath", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "self", ".", "bucket", "==", "other", ".", "bucket", "and", "self", ".", "key", "==", "other", ".", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.__hash__": [[222, 224], ["hash", "str"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "str", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.__repr__": [[225, 227], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "str", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.__lt__": [[228, 232], ["isinstance", "NotImplementedError", "str", "str"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "other", ",", "OSSPath", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "str", "(", "self", ")", "<", "str", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.__le__": [[233, 237], ["isinstance", "NotImplementedError", "str", "str"], "methods", ["None"], ["", "def", "__le__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "other", ",", "OSSPath", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "str", "(", "self", ")", "<=", "str", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.__gt__": [[238, 242], ["isinstance", "NotImplementedError", "str", "str"], "methods", ["None"], ["", "def", "__gt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "other", ",", "OSSPath", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "str", "(", "self", ")", ">", "str", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.__ge__": [[243, 247], ["isinstance", "NotImplementedError", "str", "str"], "methods", ["None"], ["", "def", "__ge__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "other", ",", "OSSPath", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "str", "(", "self", ")", ">=", "str", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.with_name": [[248, 258], ["urllib.parse.urlparse", "oss.OSSPath._create", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath._create"], ["", "def", "with_name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Return a new path with the file name changed.\"\"\"", "\n", "if", "not", "self", ".", "name", ":", "\n", "            ", "raise", "ValueError", "(", "\"%r has an empty name\"", "%", "(", "self", ",", ")", ")", "\n", "\n", "", "r", "=", "urlparse", "(", "name", ")", "\n", "if", "not", "(", "r", ".", "scheme", "==", "\"\"", "and", "r", ".", "netloc", "==", "\"\"", "or", "\"/\"", "in", "name", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid name %r\"", "%", "(", "name", ")", ")", "\n", "\n", "", "return", "self", ".", "_create", "(", "self", ".", "_client", ",", "self", ".", "bucket", ",", "self", ".", "_key_parts", "[", ":", "-", "1", "]", "+", "(", "name", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.with_suffix": [[259, 277], ["oss.OSSPath._create", "ValueError", "ValueError", "ValueError", "suffix.startswith", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath._create"], ["", "def", "with_suffix", "(", "self", ",", "suffix", ")", ":", "\n", "        ", "\"\"\"Return a new path with the file suffix changed.  If the path\n        has no suffix, add given suffix.  If the given suffix is an empty\n        string, remove the suffix from the path.\n        \"\"\"", "\n", "if", "\"/\"", "in", "suffix", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid suffix %r\"", "%", "(", "suffix", ",", ")", ")", "\n", "", "if", "suffix", "and", "not", "suffix", ".", "startswith", "(", "\".\"", ")", "or", "suffix", "==", "\".\"", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid suffix %r\"", "%", "(", "suffix", ")", ")", "\n", "", "name", "=", "self", ".", "name", "\n", "if", "not", "name", ":", "\n", "            ", "raise", "ValueError", "(", "\"%r has an empty name\"", "%", "(", "self", ",", ")", ")", "\n", "", "old_suffix", "=", "self", ".", "suffix", "\n", "if", "not", "old_suffix", ":", "\n", "            ", "name", "=", "name", "+", "suffix", "\n", "", "else", ":", "\n", "            ", "name", "=", "name", "[", ":", "-", "len", "(", "old_suffix", ")", "]", "+", "suffix", "\n", "", "return", "self", ".", "_create", "(", "self", ".", "_client", ",", "self", ".", "bucket", ",", "self", ".", "_key_parts", "[", ":", "-", "1", "]", "+", "(", "name", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.with_bucket": [[278, 288], ["bucket.strip.strip.strip", "oss.OSSPath._create", "isinstance", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath._create"], ["", "def", "with_bucket", "(", "self", ",", "bucket", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "bucket", ",", "str", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"bucket be string\"", ")", "\n", "\n", "", "bucket", "=", "bucket", ".", "strip", "(", "\"/\"", ")", "\n", "if", "not", "bucket", ":", "\n", "            ", "raise", "ValueError", "(", "\"bucket must not be empty\"", ")", "\n", "", "if", "\"/\"", "in", "bucket", ":", "\n", "            ", "raise", "ValueError", "(", "\"bucket_name must not contain '/'\"", ")", "\n", "", "return", "self", ".", "_create", "(", "self", ".", "_client", ",", "bucket", ",", "self", ".", "_key_parts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath._make_child": [[289, 308], ["oss.OSSPath._create", "bucket.lstrip.lstrip.lstrip", "oss.OSSPath.with_bucket()._make_child", "item.lstrip.lstrip.lstrip", "tuple", "pathlib.PosixPath", "isinstance", "ValueError", "ValueError", "pathlib.PosixPath", "parts.append", "oss.OSSPath.with_bucket"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath._create", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath._make_child", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.with_bucket"], ["", "def", "_make_child", "(", "self", ",", "args", ":", "Iterable", "[", "str", "]", ")", ":", "\n", "\n", "        ", "if", "not", "self", ".", "bucket", ":", "\n", "            ", "bucket", ",", "*", "rest_args", "=", "args", "\n", "bucket", "=", "bucket", ".", "lstrip", "(", "\"/\"", ")", "\n", "bucket", ",", "*", "rest_parts", "=", "PosixPath", "(", "bucket", ")", ".", "parts", "\n", "return", "self", ".", "with_bucket", "(", "bucket", ")", ".", "_make_child", "(", "rest_parts", "+", "rest_args", ")", "\n", "\n", "", "parts", "=", "[", "p", "for", "p", "in", "self", ".", "_key_parts", "]", "\n", "for", "item", "in", "args", ":", "\n", "            ", "if", "not", "isinstance", "(", "item", ",", "str", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"child must be string\"", ")", "\n", "", "item", "=", "item", ".", "lstrip", "(", "\"/\"", ")", "# remove leading '/'", "\n", "if", "not", "item", ":", "\n", "                ", "raise", "ValueError", "(", "\"child must not be empty\"", ")", "\n", "", "for", "p", "in", "PosixPath", "(", "item", ")", ".", "parts", ":", "\n", "                ", "parts", ".", "append", "(", "p", ")", "\n", "\n", "", "", "return", "self", ".", "_create", "(", "self", ".", "_client", ",", "self", ".", "bucket", ",", "tuple", "(", "parts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.joinpath": [[309, 316], ["oss.OSSPath._make_child"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath._make_child"], ["", "def", "joinpath", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"Combine this path with one or several arguments, and return a\n        new path representing either a subpath (if all arguments are relative\n        paths) or a totally different path (if one of the arguments is\n        anchored).\n        \"\"\"", "\n", "return", "self", ".", "_make_child", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.__truediv__": [[317, 319], ["oss.OSSPath._make_child"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath._make_child"], ["", "def", "__truediv__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_make_child", "(", "(", "key", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.__rtruediv__": [[320, 322], ["None"], "methods", ["None"], ["", "def", "__rtruediv__", "(", "self", ",", "key", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.is_dir": [[323, 343], ["oss.OSSPath._client.list_objects", "oss.OSSPath._client.head_bucket"], "methods", ["None"], ["", "def", "is_dir", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "bucket", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "not", "self", ".", "key", ":", "\n", "# key empty, return whether bucket exists", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "_client", ".", "head_bucket", "(", "Bucket", "=", "self", ".", "bucket", ")", "\n", "return", "True", "\n", "", "except", "ClientError", "as", "e", ":", "\n", "                ", "if", "e", ".", "response", "[", "\"Error\"", "]", "[", "\"Code\"", "]", "==", "\"404\"", ":", "\n", "                    ", "return", "False", "\n", "\n", "", "", "", "prefix", "=", "self", ".", "key", "\n", "if", "prefix", "[", "-", "1", "]", "!=", "\"/\"", ":", "\n", "            ", "prefix", "=", "prefix", "+", "\"/\"", "\n", "", "resp", "=", "self", ".", "_client", ".", "list_objects", "(", "\n", "Bucket", "=", "self", ".", "bucket", ",", "Delimiter", "=", "\"/\"", ",", "Prefix", "=", "prefix", "\n", ")", "\n", "return", "\"CommonPrefixes\"", "in", "resp", "or", "\"Contents\"", "in", "resp", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.is_file": [[344, 355], ["oss.OSSPath._client.head_object"], "methods", ["None"], ["", "def", "is_file", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "bucket", ":", "\n", "            ", "return", "False", "\n", "", "if", "not", "self", ".", "key", ":", "\n", "            ", "return", "False", "\n", "", "try", ":", "\n", "            ", "self", ".", "_client", ".", "head_object", "(", "Bucket", "=", "self", ".", "bucket", ",", "Key", "=", "self", ".", "key", ")", "\n", "return", "True", "\n", "", "except", "ClientError", "as", "e", ":", "\n", "            ", "if", "e", ".", "response", "[", "\"Error\"", "]", "[", "\"Code\"", "]", "==", "\"404\"", ":", "\n", "                ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.exists": [[356, 364], ["oss.OSSPath.is_dir", "oss.OSSPath.is_file"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.is_dir", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.is_file"], ["", "", "", "def", "exists", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "bucket", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "is_dir", "(", ")", ":", "\n", "            ", "return", "True", "\n", "", "elif", "self", ".", "is_file", "(", ")", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.get_size": [[365, 375], ["oss.OSSPath.is_dir", "oss.OSSPath.key.lstrip", "oss.OSSPath.is_file", "oss.OSSPath._client.head_object"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.is_dir", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.is_file"], ["", "def", "get_size", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "bucket", ":", "\n", "            ", "return", "-", "1", "\n", "", "if", "self", ".", "is_dir", "(", ")", ":", "\n", "            ", "return", "0", "\n", "", "if", "not", "self", ".", "is_file", "(", ")", ":", "\n", "            ", "return", "-", "1", "\n", "\n", "", "key", "=", "self", ".", "key", ".", "lstrip", "(", "\"/\"", ")", "\n", "return", "self", ".", "_client", ".", "head_object", "(", "Bucket", "=", "self", ".", "bucket", ",", "Key", "=", "key", ")", "[", "\"ContentLength\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.list_all": [[376, 416], ["oss.OSSPath.is_dir", "print", "dict", "oss.OSSPath._client.list_objects", "oss.OSSPath.get", "print"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.is_dir", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["", "def", "list_all", "(", "self", ",", "batch_size", "=", "1000", ")", ":", "\n", "        ", "\"\"\"\\\n        List all subkeys\n        :returns: Iterator[OSSPath]\n        \"\"\"", "\n", "if", "not", "self", ".", "is_dir", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "if", "batch_size", ">", "1000", ":", "\n", "            ", "print", "(", "\n", "\"At most 1000 keys can be operated at once. Clipping batch_size to 1000.\"", "\n", ")", "\n", "batch_size", "=", "1000", "\n", "\n", "", "prefix", "=", "self", ".", "key", "\n", "if", "prefix", "[", "-", "1", "]", "!=", "\"/\"", ":", "\n", "            ", "prefix", "=", "prefix", "+", "\"/\"", "\n", "\n", "", "marker", "=", "None", "\n", "while", "True", ":", "\n", "            ", "request", "=", "dict", "(", "\n", "Bucket", "=", "self", ".", "bucket", ",", "Delimiter", "=", "\"\"", ",", "Prefix", "=", "prefix", ",", "MaxKeys", "=", "batch_size", ",", "\n", ")", "\n", "if", "marker", ":", "\n", "                ", "request", "[", "\"Marker\"", "]", "=", "marker", "\n", "\n", "", "resp", "=", "self", ".", "_client", ".", "list_objects", "(", "**", "request", ")", "\n", "\n", "for", "p", "in", "resp", ".", "get", "(", "\"Contents\"", ",", "[", "]", ")", ":", "\n", "                ", "yield", "self", ".", "root", "/", "p", "[", "\"Key\"", "]", "\n", "\n", "", "if", "not", "resp", "[", "\"IsTruncated\"", "]", ":", "\n", "                ", "break", "\n", "\n", "", "print", "(", "\n", "\"More than {} objects are found under {}, you should avoid putting too many small objects!\"", ".", "format", "(", "\n", "batch_size", ",", "self", "\n", ")", "\n", ")", "\n", "marker", "=", "resp", "[", "\"NextMarker\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.walk": [[417, 480], ["oss.OSSPath.is_dir", "print", "dict", "oss.OSSPath._client.list_objects", "print", "oss.OSSPath.get", "oss.OSSPath.get", "subdir.walk"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.is_dir", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.walk"], ["", "", "def", "walk", "(", "self", ",", "topdown", "=", "True", ",", "recursive", "=", "True", ",", "batch_size", "=", "1000", ")", ":", "\n", "        ", "\"\"\"\\\n        Generate path tree by walking either top-down or bottom-up just like :func:`os.walk`.\n        For each prefix in the tree, it yields a 3-tuple (subtree-root, subdirs, subfiles).\n\n        If optional argument *topdown* is True or not specified, the triple for a directory\n        is generated before the triples for any subdirectories. If *topdown* is False,\n        the triple for a directory is generated after its subdirectries.\n\n        If *recurisve* is set to False, it only yields the top level subdirectries and subfiles.\n\n        *batch_size* is the maximum keys that OSS returns in one request-response,\n        and it cannot be set larger than 1000.\n        \"\"\"", "\n", "if", "not", "self", ".", "is_dir", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "if", "batch_size", ">", "1000", ":", "\n", "            ", "print", "(", "\n", "\"At most 1000 keys can be operated at once. Clipping batch_size to 1000.\"", "\n", ")", "\n", "batch_size", "=", "1000", "\n", "\n", "", "prefix", "=", "self", ".", "key", "\n", "if", "prefix", "[", "-", "1", "]", "!=", "\"/\"", ":", "\n", "            ", "prefix", "=", "prefix", "+", "\"/\"", "\n", "\n", "", "dirs", ",", "files", "=", "[", "]", ",", "[", "]", "\n", "marker", "=", "None", "\n", "while", "True", ":", "\n", "            ", "request", "=", "dict", "(", "\n", "Bucket", "=", "self", ".", "bucket", ",", "Delimiter", "=", "\"/\"", ",", "Prefix", "=", "prefix", ",", "MaxKeys", "=", "batch_size", ",", "\n", ")", "\n", "if", "marker", ":", "\n", "                ", "request", "[", "\"Marker\"", "]", "=", "marker", "\n", "\n", "", "resp", "=", "self", ".", "_client", ".", "list_objects", "(", "**", "request", ")", "\n", "\n", "dirs", "+=", "[", "self", ".", "root", "/", "p", "[", "\"Prefix\"", "]", "for", "p", "in", "resp", ".", "get", "(", "\"CommonPrefixes\"", ",", "[", "]", ")", "]", "\n", "\n", "files", "+=", "[", "self", ".", "root", "/", "p", "[", "\"Key\"", "]", "for", "p", "in", "resp", ".", "get", "(", "\"Contents\"", ",", "[", "]", ")", "]", "\n", "\n", "if", "not", "resp", "[", "\"IsTruncated\"", "]", ":", "\n", "                ", "break", "\n", "\n", "", "print", "(", "\n", "\"More than {} objects are found under {}, you should avoid putting too many small objects!\"", ".", "format", "(", "\n", "batch_size", ",", "self", "\n", ")", "\n", ")", "\n", "marker", "=", "resp", "[", "\"NextMarker\"", "]", "\n", "\n", "", "if", "topdown", ":", "\n", "            ", "yield", "self", ",", "dirs", ",", "files", "\n", "\n", "", "if", "recursive", ":", "\n", "            ", "for", "subdir", "in", "dirs", ":", "\n", "                ", "yield", "from", "subdir", ".", "walk", "(", "\n", "recursive", "=", "True", ",", "topdown", "=", "topdown", ",", "batch_size", "=", "batch_size", "\n", ")", "\n", "\n", "", "", "if", "not", "topdown", ":", "\n", "            ", "yield", "self", ",", "dirs", ",", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.iterdir": [[481, 489], ["oss.OSSPath.walk"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.walk"], ["", "", "def", "iterdir", "(", "self", ",", "batch_size", "=", "1000", ")", ":", "\n", "        ", "\"\"\"\n        Iterates over self directory, yields subdirs and subfiles.\n        :returns: Iterator[OSSPath]\n        \"\"\"", "\n", "for", "root", ",", "dirs", ",", "files", "in", "self", ".", "walk", "(", "batch_size", "=", "batch_size", ",", "recursive", "=", "False", ")", ":", "\n", "            ", "yield", "from", "dirs", "\n", "yield", "from", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.download": [[490, 507], ["oss.OSSPath._client.get_object", "oss.OSSPath.is_file", "FileNotFoundError", "codecs.getreader"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.is_file"], ["", "", "def", "download", "(", "self", ",", "encoding", "=", "None", ")", "->", "Optional", "[", "io", ".", "IOBase", "]", ":", "\n", "        ", "\"\"\"\n        :param encoding: if None, it returns bytes io;\n            if an encoding (such as 'utf-8') is specified, it returns text io\n\n        :returns: file-like object which can be read out\n        \"\"\"", "\n", "\n", "if", "not", "self", ".", "is_file", "(", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\"{!r} is not an existing object.\"", ".", "format", "(", "self", ")", ")", "\n", "\n", "", "r", "=", "self", ".", "_client", ".", "get_object", "(", "Bucket", "=", "self", ".", "bucket", ",", "Key", "=", "self", ".", "key", ")", "\n", "b", "=", "r", "[", "\"Body\"", "]", "\n", "if", "encoding", "is", "not", "None", ":", "\n", "            ", "b", "=", "codecs", ".", "getreader", "(", "encoding", ")", "(", "b", ")", "\n", "\n", "", "return", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.put": [[508, 522], ["oss.OSSPath.key.endswith", "oss.OSSPath._client.put_object", "ValueError", "ValueError"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "bytes_or_file", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        :param bytes_or_file: bytes or file-like object to be uploaded to OSS\n        :returns: wheter successfully uploaded\n        \"\"\"", "\n", "if", "not", "self", ".", "bucket", "or", "not", "self", ".", "key", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid path to put object: {!r}\"", ".", "format", "(", "self", ")", ")", "\n", "", "if", "self", ".", "key", ".", "endswith", "(", "\"/\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Object key cannot endswith \"/\": {}'", ".", "format", "(", "self", ".", "key", ")", ")", "\n", "\n", "", "r", "=", "self", ".", "_client", ".", "put_object", "(", "\n", "Body", "=", "bytes_or_file", ",", "Bucket", "=", "self", ".", "bucket", ",", "Key", "=", "self", ".", "key", ",", "\n", ")", "\n", "return", "r", "[", "\"ResponseMetadata\"", "]", "[", "\"HTTPStatusCode\"", "]", "==", "200", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.delete": [[523, 532], ["oss.OSSPath._client.delete_object", "oss.OSSPath.is_file"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.is_file"], ["", "def", "delete", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        :returns: whether this object is deleted\n        \"\"\"", "\n", "if", "not", "self", ".", "is_file", "(", ")", ":", "\n", "            ", "return", "True", "\n", "", "r", "=", "self", ".", "_client", ".", "delete_object", "(", "Bucket", "=", "self", ".", "bucket", ",", "Key", "=", "self", ".", "key", ")", "\n", "\n", "return", "r", "[", "\"ResponseMetadata\"", "]", "[", "\"HTTPStatusCode\"", "]", "==", "204", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.rmtree": [[533, 576], ["oss.OSSPath.is_dir", "oss.OSSPath.is_file", "print", "oss.OSSPath._client.list_objects", "oss.OSSPath._client.delete_objects", "print", "ValueError", "ret.append", "oss.OSSPath.get"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.is_dir", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.is_file", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["", "def", "rmtree", "(", "self", ",", "batch_size", "=", "1000", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        :returns: list of deleted objects\n        \"\"\"", "\n", "if", "not", "self", ".", "is_dir", "(", ")", ":", "\n", "            ", "if", "self", ".", "is_file", "(", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"{!r} is not a directory\"", ".", "format", "(", "self", ")", ")", "\n", "", "return", "True", "\n", "\n", "", "if", "batch_size", ">", "1000", ":", "\n", "            ", "print", "(", "\n", "\"At most 1000 keys can be operated at once. Clipping batch_size to 1000.\"", "\n", ")", "\n", "batch_size", "=", "1000", "\n", "\n", "", "prefix", "=", "self", ".", "key", "\n", "if", "prefix", "[", "-", "1", "]", "!=", "\"/\"", ":", "\n", "            ", "prefix", "=", "prefix", "+", "\"/\"", "\n", "\n", "", "ret", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "lr", "=", "self", ".", "_client", ".", "list_objects", "(", "\n", "Bucket", "=", "self", ".", "bucket", ",", "Delimiter", "=", "\"\"", ",", "Prefix", "=", "prefix", ",", "MaxKeys", "=", "batch_size", ",", "\n", ")", "\n", "\n", "dr", "=", "self", ".", "_client", ".", "delete_objects", "(", "\n", "Bucket", "=", "self", ".", "bucket", ",", "\n", "Delete", "=", "{", "\"Objects\"", ":", "[", "{", "\"Key\"", ":", "i", "[", "\"Key\"", "]", "}", "for", "i", "in", "lr", ".", "get", "(", "\"Contents\"", ",", "[", "]", ")", "]", "}", ",", "\n", ")", "\n", "\n", "for", "i", "in", "dr", "[", "\"Deleted\"", "]", ":", "\n", "                ", "ret", ".", "append", "(", "\"s3://{}/{}\"", ".", "format", "(", "self", ".", "bucket", ",", "i", "[", "\"Key\"", "]", ")", ")", "\n", "\n", "", "if", "not", "lr", "[", "\"IsTruncated\"", "]", ":", "\n", "                ", "break", "\n", "\n", "", "print", "(", "\n", "\"More than {} objects are found under {}, you should avoid putting too many small objects!\"", ".", "format", "(", "\n", "batch_size", ",", "self", "\n", ")", "\n", ")", "\n", "\n", "", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.get_site": [[108, 112], ["re.search", "socket.getfqdn", "re.search.group"], "function", ["None"], ["def", "get_site", "(", ")", ":", "\n", "    ", "m", "=", "re", ".", "search", "(", "r\"([^.]+)\\.brainpp\\.cn$\"", ",", "socket", ".", "getfqdn", "(", ")", ")", "\n", "if", "m", ":", "\n", "        ", "return", "m", ".", "group", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.distributed.DistributedSampler.__init__": [[22, 38], ["int", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "math.ceil", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_rank", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_rank"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.distributed.DistributedSampler.__iter__": [[39, 57], ["iter", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.iter"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.distributed.DistributedSampler.__len__": [[58, 60], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.distributed.DistributedSampler.set_epoch": [[61, 63], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.create_gt_database.create_groundtruth_database": [[17, 177], ["pathlib.Path", "db_path.mkdir", "tqdm.tqdm", "print", "all_db_infos.items", "NotImplementedError", "range", "dataset.get_sensor_data", "numpy.full", "det3d.core.box_np_ops.points_in_rbbox", "range", "len", "print", "open", "pickle.dump", "det3d.datasets.dataset_factory.get_dataset", "det3d.datasets.dataset_factory.get_dataset", "NotImplementedError", "len", "numpy.zeros", "numpy.logical_not", "numpy.logical_not", "numpy.arange", "range", "os.path.join", "os.makedirs", "os.path.join", "range", "len", "str", "str", "open", "os.path.join", "str", "all_db_infos[].append", "len", "len", "gt_points[].tofile", "print", "range", "range", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.get_sensor_data", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.points_in_rbbox", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.dump", "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.dataset_factory.get_dataset", "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.dataset_factory.get_dataset", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open"], ["def", "create_groundtruth_database", "(", "\n", "dataset_class_name", ",", "\n", "data_path", ",", "\n", "info_path", "=", "None", ",", "\n", "used_classes", "=", "None", ",", "\n", "db_path", "=", "None", ",", "\n", "dbinfo_path", "=", "None", ",", "\n", "relative_path", "=", "True", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "    ", "pipeline", "=", "[", "\n", "{", "\n", "\"type\"", ":", "\"LoadPointCloudFromFile\"", ",", "\n", "\"dataset\"", ":", "dataset_name_map", "[", "dataset_class_name", "]", ",", "\n", "}", ",", "\n", "{", "\"type\"", ":", "\"LoadPointCloudAnnotations\"", ",", "\"with_bbox\"", ":", "True", "}", ",", "\n", "]", "\n", "\n", "if", "\"nsweeps\"", "in", "kwargs", ":", "\n", "        ", "dataset", "=", "get_dataset", "(", "dataset_class_name", ")", "(", "\n", "info_path", "=", "info_path", ",", "\n", "root_path", "=", "data_path", ",", "\n", "pipeline", "=", "pipeline", ",", "\n", "test_mode", "=", "True", ",", "\n", "nsweeps", "=", "kwargs", "[", "\"nsweeps\"", "]", ",", "\n", "timesteps", "=", "kwargs", "[", "\"timesteps\"", "]", "\n", ")", "\n", "nsweeps", "=", "dataset", ".", "nsweeps", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "get_dataset", "(", "dataset_class_name", ")", "(", "\n", "info_path", "=", "info_path", ",", "root_path", "=", "data_path", ",", "test_mode", "=", "True", ",", "pipeline", "=", "pipeline", "\n", ")", "\n", "nsweeps", "=", "1", "\n", "\n", "", "root_path", "=", "Path", "(", "data_path", ")", "\n", "\n", "if", "dataset_class_name", "in", "[", "\"WAYMO\"", ",", "\"NUSC\"", "]", ":", "\n", "        ", "if", "db_path", "is", "None", ":", "\n", "            ", "db_path", "=", "root_path", "/", "f\"gt_database_{nsweeps}sweeps_withvelo\"", "\n", "", "if", "dbinfo_path", "is", "None", ":", "\n", "            ", "dbinfo_path", "=", "root_path", "/", "f\"dbinfos_train_{nsweeps}sweeps_withvelo.pkl\"", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "if", "dataset_class_name", "==", "\"NUSC\"", ":", "\n", "        ", "point_features", "=", "5", "\n", "", "elif", "dataset_class_name", "==", "\"WAYMO\"", ":", "\n", "        ", "point_features", "=", "5", "if", "nsweeps", "==", "1", "else", "6", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "db_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "all_db_infos", "=", "{", "}", "\n", "group_counter", "=", "0", "\n", "\n", "for", "index", "in", "tqdm", "(", "range", "(", "len", "(", "dataset", ")", ")", ")", ":", "\n", "        ", "image_idx", "=", "index", "\n", "# modified to nuscenes", "\n", "sensor_data", "=", "dataset", ".", "get_sensor_data", "(", "index", ")", "\n", "\n", "if", "\"image_idx\"", "in", "sensor_data", "[", "\"metadata\"", "]", ":", "\n", "            ", "image_idx", "=", "sensor_data", "[", "\"metadata\"", "]", "[", "\"image_idx\"", "]", "\n", "\n", "", "if", "nsweeps", ">", "1", ":", "\n", "            ", "points", "=", "sensor_data", "[", "\"lidar\"", "]", "[", "\"combined\"", "]", "\n", "", "else", ":", "\n", "            ", "points", "=", "sensor_data", "[", "\"lidar\"", "]", "[", "\"points\"", "]", "\n", "\n", "", "annos", "=", "sensor_data", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "\n", "gt_boxes", "=", "annos", "[", "\"boxes\"", "]", "\n", "names", "=", "annos", "[", "\"names\"", "]", "\n", "trajectories", "=", "annos", "[", "\"trajectory\"", "]", "\n", "\n", "if", "dataset_class_name", "==", "'WAYMO'", ":", "\n", "# waymo dataset contains millions of objects and it is not possible to store", "\n", "# all of them into a single folder", "\n", "# we randomly sample a few objects for gt augmentation", "\n", "# We keep all cyclist as they are rare ", "\n", "            ", "if", "index", "%", "4", "!=", "0", ":", "\n", "                ", "mask", "=", "(", "names", "==", "'VEHICLE'", ")", "\n", "mask", "=", "np", ".", "logical_not", "(", "mask", ")", "\n", "names", "=", "names", "[", "mask", "]", "\n", "gt_boxes", "=", "gt_boxes", "[", "mask", "]", "\n", "\n", "", "if", "index", "%", "2", "!=", "0", ":", "\n", "                ", "mask", "=", "(", "names", "==", "'PEDESTRIAN'", ")", "\n", "mask", "=", "np", ".", "logical_not", "(", "mask", ")", "\n", "names", "=", "names", "[", "mask", "]", "\n", "gt_boxes", "=", "gt_boxes", "[", "mask", "]", "\n", "\n", "\n", "", "", "group_dict", "=", "{", "}", "\n", "group_ids", "=", "np", ".", "full", "(", "[", "gt_boxes", "[", "0", "]", ".", "shape", "[", "0", "]", "]", ",", "-", "1", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "if", "\"group_ids\"", "in", "annos", ":", "\n", "            ", "group_ids", "=", "annos", "[", "\"group_ids\"", "]", "\n", "", "else", ":", "\n", "            ", "group_ids", "=", "[", "np", ".", "arange", "(", "gt_boxes", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "int64", ")", "for", "i", "in", "range", "(", "len", "(", "gt_boxes", ")", ")", "]", "\n", "", "difficulty", "=", "[", "np", ".", "zeros", "(", "gt_boxes", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", "for", "i", "in", "range", "(", "len", "(", "gt_boxes", ")", ")", "]", "\n", "if", "\"difficulty\"", "in", "annos", ":", "\n", "            ", "difficulty", "=", "annos", "[", "\"difficulty\"", "]", "\n", "\n", "", "num_obj", "=", "gt_boxes", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "if", "num_obj", "==", "0", ":", "\n", "            ", "continue", "\n", "", "point_indices", "=", "box_np_ops", ".", "points_in_rbbox", "(", "points", ",", "gt_boxes", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "num_obj", ")", ":", "\n", "            ", "if", "(", "used_classes", "is", "None", ")", "or", "names", "[", "0", "]", "[", "i", "]", "in", "used_classes", ":", "\n", "                ", "filename", "=", "f\"{image_idx}_{names[0][i]}_{i}.bin\"", "\n", "dirpath", "=", "os", ".", "path", ".", "join", "(", "str", "(", "db_path", ")", ",", "names", "[", "0", "]", "[", "i", "]", ")", "\n", "os", ".", "makedirs", "(", "dirpath", ",", "exist_ok", "=", "True", ")", "\n", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "str", "(", "db_path", ")", ",", "names", "[", "0", "]", "[", "i", "]", ",", "filename", ")", "\n", "gt_points", "=", "points", "[", "point_indices", "[", ":", ",", "i", "]", "]", "\n", "gt_points", "[", ":", ",", ":", "3", "]", "-=", "gt_boxes", "[", "0", "]", "[", "i", ",", ":", "3", "]", "\n", "\n", "with", "open", "(", "filepath", ",", "\"w\"", ")", "as", "f", ":", "\n", "                    ", "try", ":", "\n", "                        ", "gt_points", "[", ":", ",", ":", "point_features", "]", ".", "tofile", "(", "f", ")", "\n", "", "except", ":", "\n", "                        ", "print", "(", "\"process {} files\"", ".", "format", "(", "index", ")", ")", "\n", "break", "\n", "\n", "", "", "", "if", "(", "used_classes", "is", "None", ")", "or", "names", "[", "0", "]", "[", "i", "]", "in", "used_classes", ":", "\n", "                ", "if", "relative_path", ":", "\n", "                    ", "db_dump_path", "=", "os", ".", "path", ".", "join", "(", "db_path", ".", "stem", ",", "names", "[", "0", "]", "[", "i", "]", ",", "filename", ")", "\n", "", "else", ":", "\n", "                    ", "db_dump_path", "=", "str", "(", "filepath", ")", "\n", "\n", "", "db_info", "=", "{", "\n", "\"name\"", ":", "[", "names", "[", "t", "]", "[", "i", "]", "for", "t", "in", "range", "(", "len", "(", "gt_boxes", ")", ")", "]", ",", "\n", "\"trajectory\"", ":", "[", "trajectories", "[", "t", "]", "[", "i", "]", "for", "t", "in", "range", "(", "len", "(", "gt_boxes", ")", ")", "]", ",", "\n", "\"path\"", ":", "db_dump_path", ",", "\n", "\"image_idx\"", ":", "image_idx", ",", "\n", "\"gt_idx\"", ":", "i", ",", "\n", "\"box3d_lidar\"", ":", "[", "gt_boxes", "[", "t", "]", "[", "i", "]", "for", "t", "in", "range", "(", "len", "(", "gt_boxes", ")", ")", "]", ",", "\n", "\"num_points_in_gt\"", ":", "gt_points", ".", "shape", "[", "0", "]", ",", "\n", "\"difficulty\"", ":", "[", "difficulty", "[", "t", "]", "[", "i", "]", "for", "t", "in", "range", "(", "len", "(", "gt_boxes", ")", ")", "]", ",", "\n", "# \"group_id\": -1,", "\n", "# \"bbox\": bboxes[i],", "\n", "}", "\n", "local_group_id", "=", "group_ids", "[", "0", "]", "[", "i", "]", "\n", "# if local_group_id >= 0:", "\n", "if", "local_group_id", "not", "in", "group_dict", ":", "\n", "                    ", "group_dict", "[", "local_group_id", "]", "=", "group_counter", "\n", "group_counter", "+=", "1", "\n", "", "db_info", "[", "\"group_id\"", "]", "=", "group_dict", "[", "local_group_id", "]", "\n", "if", "\"score\"", "in", "annos", ":", "\n", "                    ", "db_info", "[", "\"score\"", "]", "=", "annos", "[", "\"score\"", "]", "[", "i", "]", "\n", "", "if", "names", "[", "0", "]", "[", "i", "]", "in", "all_db_infos", ":", "\n", "                    ", "all_db_infos", "[", "names", "[", "0", "]", "[", "i", "]", "]", ".", "append", "(", "db_info", ")", "\n", "", "else", ":", "\n", "                    ", "all_db_infos", "[", "names", "[", "0", "]", "[", "i", "]", "]", "=", "[", "db_info", "]", "\n", "\n", "", "", "", "", "print", "(", "\"dataset length: \"", ",", "len", "(", "dataset", ")", ")", "\n", "for", "k", ",", "v", "in", "all_db_infos", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "f\"load {len(v)} {k} database infos\"", ")", "\n", "\n", "", "with", "open", "(", "dbinfo_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "all_db_infos", ",", "f", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.eval.get_split_parts": [[9, 16], ["None"], "function", ["None"], ["def", "get_split_parts", "(", "num", ",", "num_part", ")", ":", "\n", "    ", "same_part", "=", "num", "//", "num_part", "\n", "remain_num", "=", "num", "%", "num_part", "\n", "if", "remain_num", "==", "0", ":", "\n", "        ", "return", "[", "same_part", "]", "*", "num_part", "\n", "", "else", ":", "\n", "        ", "return", "[", "same_part", "]", "*", "num_part", "+", "[", "remain_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.eval.prepare_data": [[18, 58], ["range", "numpy.stack", "len", "clean_data", "ignored_gts.append", "ignored_dets.append", "np.stack.append", "dontcares.append", "numpy.concatenate", "numpy.concatenate", "gt_datas_list.append", "dt_datas_list.append", "numpy.array", "numpy.array", "len", "numpy.zeros().astype", "numpy.stack().astype", "numpy.zeros", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack"], ["", "", "def", "prepare_data", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "difficulty", "=", "None", ",", "clean_data", "=", "None", ")", ":", "\n", "    ", "gt_datas_list", "=", "[", "]", "\n", "dt_datas_list", "=", "[", "]", "\n", "total_dc_num", "=", "[", "]", "\n", "ignored_gts", ",", "ignored_dets", ",", "dontcares", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "total_num_valid_gt", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_annos", ")", ")", ":", "\n", "        ", "rets", "=", "clean_data", "(", "gt_annos", "[", "i", "]", ",", "dt_annos", "[", "i", "]", ",", "current_class", ",", "difficulty", ")", "\n", "num_valid_gt", ",", "ignored_gt", ",", "ignored_det", ",", "dc_bboxes", "=", "rets", "\n", "ignored_gts", ".", "append", "(", "np", ".", "array", "(", "ignored_gt", ",", "dtype", "=", "np", ".", "int64", ")", ")", "\n", "ignored_dets", ".", "append", "(", "np", ".", "array", "(", "ignored_det", ",", "dtype", "=", "np", ".", "int64", ")", ")", "\n", "if", "len", "(", "dc_bboxes", ")", "==", "0", ":", "\n", "            ", "dc_bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "else", ":", "\n", "            ", "dc_bboxes", "=", "np", ".", "stack", "(", "dc_bboxes", ",", "0", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "total_dc_num", ".", "append", "(", "dc_bboxes", ".", "shape", "[", "0", "]", ")", "\n", "dontcares", ".", "append", "(", "dc_bboxes", ")", "\n", "total_num_valid_gt", "+=", "num_valid_gt", "\n", "gt_datas", "=", "np", ".", "concatenate", "(", "\n", "[", "gt_annos", "[", "i", "]", "[", "\"bbox\"", "]", ",", "gt_annos", "[", "i", "]", "[", "\"alpha\"", "]", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "1", "\n", ")", "\n", "dt_datas", "=", "np", ".", "concatenate", "(", "\n", "[", "\n", "dt_annos", "[", "i", "]", "[", "\"bbox\"", "]", ",", "\n", "dt_annos", "[", "i", "]", "[", "\"alpha\"", "]", "[", "...", ",", "np", ".", "newaxis", "]", ",", "\n", "dt_annos", "[", "i", "]", "[", "\"score\"", "]", "[", "...", ",", "np", ".", "newaxis", "]", ",", "\n", "]", ",", "\n", "1", ",", "\n", ")", "\n", "gt_datas_list", ".", "append", "(", "gt_datas", ")", "\n", "dt_datas_list", ".", "append", "(", "dt_datas", ")", "\n", "", "total_dc_num", "=", "np", ".", "stack", "(", "total_dc_num", ",", "axis", "=", "0", ")", "\n", "return", "(", "\n", "gt_datas_list", ",", "\n", "dt_datas_list", ",", "\n", "ignored_gts", ",", "\n", "ignored_dets", ",", "\n", "dontcares", ",", "\n", "total_dc_num", ",", "\n", "total_num_valid_gt", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.eval.calculate_iou_partly": [[61, 141], ["numpy.stack", "numpy.stack", "len", "eval.get_split_parts", "list", "list.pop", "enumerate", "len", "len", "range", "parted_overlaps.append", "range", "len", "len", "numpy.concatenate", "numpy.concatenate", "eval.image_box_overlap", "overlaps.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "bev_box_overlap().astype", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "box3d_overlap().astype", "ValueError", "eval.bev_box_overlap", "eval.box3d_overlap"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.eval.get_split_parts", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.eval.image_box_overlap", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.eval.bev_box_overlap", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.eval.box3d_overlap"], ["", "def", "calculate_iou_partly", "(", "\n", "gt_annos", ",", "dt_annos", ",", "metric", ",", "num_parts", "=", "50", ",", "z_axis", "=", "1", ",", "z_center", "=", "1.0", "\n", ")", ":", "\n", "    ", "\"\"\"fast iou algorithm. this function can be used independently to\n    do result analysis.\n    Args:\n        gt_annos: dict, must from get_label_annos() in kitti_common.py\n        dt_annos: dict, must from get_label_annos() in kitti_common.py\n        metric: eval type. 0: bbox, 1: bev, 2: 3d\n        num_parts: int. a parameter for fast calculate algorithm\n        z_axis: height axis. kitti camera use 1, lidar use 2.\n    \"\"\"", "\n", "assert", "len", "(", "gt_annos", ")", "==", "len", "(", "dt_annos", ")", "\n", "total_dt_num", "=", "np", ".", "stack", "(", "[", "len", "(", "a", "[", "\"name\"", "]", ")", "for", "a", "in", "dt_annos", "]", ",", "0", ")", "\n", "total_gt_num", "=", "np", ".", "stack", "(", "[", "len", "(", "a", "[", "\"name\"", "]", ")", "for", "a", "in", "gt_annos", "]", ",", "0", ")", "\n", "num_examples", "=", "len", "(", "gt_annos", ")", "\n", "split_parts", "=", "get_split_parts", "(", "num_examples", ",", "num_parts", ")", "\n", "parted_overlaps", "=", "[", "]", "\n", "example_idx", "=", "0", "\n", "bev_axes", "=", "list", "(", "range", "(", "3", ")", ")", "\n", "bev_axes", ".", "pop", "(", "z_axis", ")", "\n", "split_parts", "=", "[", "i", "for", "i", "in", "split_parts", "if", "i", "!=", "0", "]", "\n", "for", "num_part", "in", "split_parts", ":", "\n", "        ", "gt_annos_part", "=", "gt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "dt_annos_part", "=", "dt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "if", "metric", "==", "0", ":", "\n", "            ", "gt_boxes", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"bbox\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "dt_boxes", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"bbox\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "overlap_part", "=", "image_box_overlap", "(", "gt_boxes", ",", "dt_boxes", ")", "\n", "", "elif", "metric", "==", "1", ":", "\n", "            ", "loc", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"location\"", "]", "[", ":", ",", "bev_axes", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"dimensions\"", "]", "[", ":", ",", "bev_axes", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", "\n", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "loc", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"location\"", "]", "[", ":", ",", "bev_axes", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"dimensions\"", "]", "[", ":", ",", "bev_axes", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", "\n", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dt_boxes", "=", "np", ".", "concatenate", "(", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "overlap_part", "=", "bev_box_overlap", "(", "gt_boxes", ",", "dt_boxes", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "elif", "metric", "==", "2", ":", "\n", "            ", "loc", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"location\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"dimensions\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "loc", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"location\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"dimensions\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dt_boxes", "=", "np", ".", "concatenate", "(", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "overlap_part", "=", "box3d_overlap", "(", "\n", "gt_boxes", ",", "dt_boxes", ",", "z_axis", "=", "z_axis", ",", "z_center", "=", "z_center", "\n", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown metric\"", ")", "\n", "", "parted_overlaps", ".", "append", "(", "overlap_part", ")", "\n", "example_idx", "+=", "num_part", "\n", "\n", "", "overlaps", "=", "[", "]", "\n", "example_idx", "=", "0", "\n", "for", "j", ",", "num_part", "in", "enumerate", "(", "split_parts", ")", ":", "\n", "        ", "gt_annos_part", "=", "gt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "dt_annos_part", "=", "dt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "gt_num_idx", ",", "dt_num_idx", "=", "0", ",", "0", "\n", "for", "i", "in", "range", "(", "num_part", ")", ":", "\n", "            ", "gt_box_num", "=", "total_gt_num", "[", "example_idx", "+", "i", "]", "\n", "dt_box_num", "=", "total_dt_num", "[", "example_idx", "+", "i", "]", "\n", "overlaps", ".", "append", "(", "\n", "parted_overlaps", "[", "j", "]", "[", "\n", "gt_num_idx", ":", "gt_num_idx", "+", "gt_box_num", ",", "\n", "dt_num_idx", ":", "dt_num_idx", "+", "dt_box_num", ",", "\n", "]", "\n", ")", "\n", "gt_num_idx", "+=", "gt_box_num", "\n", "dt_num_idx", "+=", "dt_box_num", "\n", "", "example_idx", "+=", "num_part", "\n", "\n", "", "return", "overlaps", ",", "parted_overlaps", ",", "total_gt_num", ",", "total_dt_num", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.eval.compute_statistics_jit": [[143, 279], ["numba.jit", "numpy.zeros", "numpy.zeros", "range", "range", "range", "range", "eval.image_box_overlap", "range", "numpy.zeros", "range", "range", "numpy.sum", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.eval.image_box_overlap"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "compute_statistics_jit", "(", "\n", "overlaps", ",", "\n", "gt_datas", ",", "\n", "dt_datas", ",", "\n", "ignored_gt", ",", "\n", "ignored_det", ",", "\n", "dc_bboxes", ",", "\n", "metric", ",", "\n", "min_overlap", ",", "\n", "thresh", "=", "0", ",", "\n", "compute_fp", "=", "False", ",", "\n", "compute_aos", "=", "False", ",", "\n", ")", ":", "\n", "\n", "    ", "det_size", "=", "dt_datas", ".", "shape", "[", "0", "]", "\n", "gt_size", "=", "gt_datas", ".", "shape", "[", "0", "]", "\n", "dt_scores", "=", "dt_datas", "[", ":", ",", "-", "1", "]", "\n", "dt_alphas", "=", "dt_datas", "[", ":", ",", "4", "]", "\n", "gt_alphas", "=", "gt_datas", "[", ":", ",", "4", "]", "\n", "dt_bboxes", "=", "dt_datas", "[", ":", ",", ":", "4", "]", "\n", "# gt_bboxes = gt_datas[:, :4]", "\n", "\n", "assigned_detection", "=", "[", "False", "]", "*", "det_size", "\n", "ignored_threshold", "=", "[", "False", "]", "*", "det_size", "\n", "if", "compute_fp", ":", "\n", "        ", "for", "i", "in", "range", "(", "det_size", ")", ":", "\n", "            ", "if", "dt_scores", "[", "i", "]", "<", "thresh", ":", "\n", "                ", "ignored_threshold", "[", "i", "]", "=", "True", "\n", "", "", "", "NO_DETECTION", "=", "-", "10000000", "\n", "tp", ",", "fp", ",", "fn", ",", "similarity", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "# thresholds = [0.0]", "\n", "# delta = [0.0]", "\n", "thresholds", "=", "np", ".", "zeros", "(", "(", "gt_size", ",", ")", ")", "\n", "thresh_idx", "=", "0", "\n", "delta", "=", "np", ".", "zeros", "(", "(", "gt_size", ",", ")", ")", "\n", "delta_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "gt_size", ")", ":", "\n", "        ", "if", "ignored_gt", "[", "i", "]", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "det_idx", "=", "-", "1", "\n", "valid_detection", "=", "NO_DETECTION", "\n", "max_overlap", "=", "0", "\n", "assigned_ignored_det", "=", "False", "\n", "\n", "for", "j", "in", "range", "(", "det_size", ")", ":", "\n", "            ", "if", "ignored_det", "[", "j", "]", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "if", "assigned_detection", "[", "j", "]", ":", "\n", "                ", "continue", "\n", "", "if", "ignored_threshold", "[", "j", "]", ":", "\n", "                ", "continue", "\n", "", "overlap", "=", "overlaps", "[", "j", ",", "i", "]", "\n", "dt_score", "=", "dt_scores", "[", "j", "]", "\n", "if", "(", "\n", "not", "compute_fp", "\n", "and", "(", "overlap", ">", "min_overlap", ")", "\n", "and", "dt_score", ">", "valid_detection", "\n", ")", ":", "\n", "                ", "det_idx", "=", "j", "\n", "valid_detection", "=", "dt_score", "\n", "", "elif", "(", "\n", "compute_fp", "\n", "and", "(", "overlap", ">", "min_overlap", ")", "\n", "and", "(", "overlap", ">", "max_overlap", "or", "assigned_ignored_det", ")", "\n", "and", "ignored_det", "[", "j", "]", "==", "0", "\n", ")", ":", "\n", "                ", "max_overlap", "=", "overlap", "\n", "det_idx", "=", "j", "\n", "valid_detection", "=", "1", "\n", "assigned_ignored_det", "=", "False", "\n", "", "elif", "(", "\n", "compute_fp", "\n", "and", "(", "overlap", ">", "min_overlap", ")", "\n", "and", "(", "valid_detection", "==", "NO_DETECTION", ")", "\n", "and", "ignored_det", "[", "j", "]", "==", "1", "\n", ")", ":", "\n", "                ", "det_idx", "=", "j", "\n", "valid_detection", "=", "1", "\n", "assigned_ignored_det", "=", "True", "\n", "\n", "", "", "if", "(", "valid_detection", "==", "NO_DETECTION", ")", "and", "ignored_gt", "[", "i", "]", "==", "0", ":", "\n", "            ", "fn", "+=", "1", "\n", "", "elif", "(", "valid_detection", "!=", "NO_DETECTION", ")", "and", "(", "\n", "ignored_gt", "[", "i", "]", "==", "1", "or", "ignored_det", "[", "det_idx", "]", "==", "1", "\n", ")", ":", "\n", "            ", "assigned_detection", "[", "det_idx", "]", "=", "True", "\n", "", "elif", "valid_detection", "!=", "NO_DETECTION", ":", "\n", "# only a tp add a threshold.", "\n", "            ", "tp", "+=", "1", "\n", "# thresholds.append(dt_scores[det_idx])", "\n", "thresholds", "[", "thresh_idx", "]", "=", "dt_scores", "[", "det_idx", "]", "\n", "thresh_idx", "+=", "1", "\n", "if", "compute_aos", ":", "\n", "# delta.append(gt_alphas[i] - dt_alphas[det_idx])", "\n", "                ", "delta", "[", "delta_idx", "]", "=", "gt_alphas", "[", "i", "]", "-", "dt_alphas", "[", "det_idx", "]", "\n", "delta_idx", "+=", "1", "\n", "\n", "", "assigned_detection", "[", "det_idx", "]", "=", "True", "\n", "", "", "if", "compute_fp", ":", "\n", "        ", "for", "i", "in", "range", "(", "det_size", ")", ":", "\n", "            ", "if", "not", "(", "\n", "assigned_detection", "[", "i", "]", "\n", "or", "ignored_det", "[", "i", "]", "==", "-", "1", "\n", "or", "ignored_det", "[", "i", "]", "==", "1", "\n", "or", "ignored_threshold", "[", "i", "]", "\n", ")", ":", "\n", "                ", "fp", "+=", "1", "\n", "", "", "nstuff", "=", "0", "\n", "if", "metric", "==", "0", ":", "\n", "            ", "overlaps_dt_dc", "=", "image_box_overlap", "(", "dt_bboxes", ",", "dc_bboxes", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "dc_bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "det_size", ")", ":", "\n", "                    ", "if", "assigned_detection", "[", "j", "]", ":", "\n", "                        ", "continue", "\n", "", "if", "ignored_det", "[", "j", "]", "==", "-", "1", "or", "ignored_det", "[", "j", "]", "==", "1", ":", "\n", "                        ", "continue", "\n", "", "if", "ignored_threshold", "[", "j", "]", ":", "\n", "                        ", "continue", "\n", "", "if", "overlaps_dt_dc", "[", "j", ",", "i", "]", ">", "min_overlap", ":", "\n", "                        ", "assigned_detection", "[", "j", "]", "=", "True", "\n", "nstuff", "+=", "1", "\n", "", "", "", "", "fp", "-=", "nstuff", "\n", "if", "compute_aos", ":", "\n", "            ", "tmp", "=", "np", ".", "zeros", "(", "(", "fp", "+", "delta_idx", ",", ")", ")", "\n", "# tmp = [0] * fp", "\n", "for", "i", "in", "range", "(", "delta_idx", ")", ":", "\n", "                ", "tmp", "[", "i", "+", "fp", "]", "=", "(", "1.0", "+", "np", ".", "cos", "(", "delta", "[", "i", "]", ")", ")", "/", "2.0", "\n", "# tmp.append((1.0 + np.cos(delta[i])) / 2.0)", "\n", "# assert len(tmp) == fp + tp", "\n", "# assert len(delta) == tp", "\n", "", "if", "tp", ">", "0", "or", "fp", ">", "0", ":", "\n", "                ", "similarity", "=", "np", ".", "sum", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                ", "similarity", "=", "-", "1", "\n", "", "", "", "return", "tp", ",", "fp", ",", "fn", ",", "similarity", ",", "thresholds", "[", ":", "thresh_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.eval.image_box_overlap": [[281, 313], ["numba.jit", "numpy.zeros", "range", "range", "min", "max", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "image_box_overlap", "(", "boxes", ",", "query_boxes", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "qbox_area", "=", "(", "query_boxes", "[", "k", ",", "2", "]", "-", "query_boxes", "[", "k", ",", "0", "]", ")", "*", "(", "\n", "query_boxes", "[", "k", ",", "3", "]", "-", "query_boxes", "[", "k", ",", "1", "]", "\n", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "            ", "iw", "=", "min", "(", "boxes", "[", "n", ",", "2", "]", ",", "query_boxes", "[", "k", ",", "2", "]", ")", "-", "max", "(", "\n", "boxes", "[", "n", ",", "0", "]", ",", "query_boxes", "[", "k", ",", "0", "]", "\n", ")", "\n", "if", "iw", ">", "0", ":", "\n", "                ", "ih", "=", "min", "(", "boxes", "[", "n", ",", "3", "]", ",", "query_boxes", "[", "k", ",", "3", "]", ")", "-", "max", "(", "\n", "boxes", "[", "n", ",", "1", "]", ",", "query_boxes", "[", "k", ",", "1", "]", "\n", ")", "\n", "if", "ih", ">", "0", ":", "\n", "                    ", "if", "criterion", "==", "-", "1", ":", "\n", "                        ", "ua", "=", "(", "\n", "(", "boxes", "[", "n", ",", "2", "]", "-", "boxes", "[", "n", ",", "0", "]", ")", "*", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "1", "]", ")", "\n", "+", "qbox_area", "\n", "-", "iw", "*", "ih", "\n", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "                        ", "ua", "=", "(", "boxes", "[", "n", ",", "2", "]", "-", "boxes", "[", "n", ",", "0", "]", ")", "*", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "1", "]", ")", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "                        ", "ua", "=", "qbox_area", "\n", "", "else", ":", "\n", "                        ", "ua", "=", "1.0", "\n", "", "overlaps", "[", "n", ",", "k", "]", "=", "iw", "*", "ih", "/", "ua", "\n", "", "", "", "", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.eval.bev_box_overlap": [[315, 321], ["det3d.core.box_np_ops.riou_cc", "det3d.ops.nms.nms_gpu.rotate_iou_gpu_eval"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.riou_cc"], ["", "def", "bev_box_overlap", "(", "boxes", ",", "qboxes", ",", "criterion", "=", "-", "1", ",", "stable", "=", "False", ")", ":", "\n", "    ", "if", "stable", ":", "\n", "        ", "riou", "=", "box_np_ops", ".", "riou_cc", "(", "boxes", ",", "qboxes", ")", "\n", "", "else", ":", "\n", "        ", "riou", "=", "rotate_iou_gpu_eval", "(", "boxes", ",", "qboxes", ",", "criterion", ")", "\n", "", "return", "riou", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.eval.box3d_overlap_kernel": [[323, 357], ["numba.jit", "range", "range", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ",", "parallel", "=", "True", ")", "\n", "def", "box3d_overlap_kernel", "(", "boxes", ",", "qboxes", ",", "rinc", ",", "criterion", "=", "-", "1", ",", "z_axis", "=", "1", ",", "z_center", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n        z_axis: the z (height) axis.\n        z_center: unified z (height) center of box.\n    \"\"\"", "\n", "N", ",", "K", "=", "boxes", ".", "shape", "[", "0", "]", ",", "qboxes", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "            ", "if", "rinc", "[", "i", ",", "j", "]", ">", "0", ":", "\n", "                ", "min_z", "=", "min", "(", "\n", "boxes", "[", "i", ",", "z_axis", "]", "+", "boxes", "[", "i", ",", "z_axis", "+", "3", "]", "*", "(", "1", "-", "z_center", ")", ",", "\n", "qboxes", "[", "j", ",", "z_axis", "]", "+", "qboxes", "[", "j", ",", "z_axis", "+", "3", "]", "*", "(", "1", "-", "z_center", ")", ",", "\n", ")", "\n", "max_z", "=", "max", "(", "\n", "boxes", "[", "i", ",", "z_axis", "]", "-", "boxes", "[", "i", ",", "z_axis", "+", "3", "]", "*", "z_center", ",", "\n", "qboxes", "[", "j", ",", "z_axis", "]", "-", "qboxes", "[", "j", ",", "z_axis", "+", "3", "]", "*", "z_center", ",", "\n", ")", "\n", "iw", "=", "min_z", "-", "max_z", "\n", "if", "iw", ">", "0", ":", "\n", "                    ", "area1", "=", "boxes", "[", "i", ",", "3", "]", "*", "boxes", "[", "i", ",", "4", "]", "*", "boxes", "[", "i", ",", "5", "]", "\n", "area2", "=", "qboxes", "[", "j", ",", "3", "]", "*", "qboxes", "[", "j", ",", "4", "]", "*", "qboxes", "[", "j", ",", "5", "]", "\n", "inc", "=", "iw", "*", "rinc", "[", "i", ",", "j", "]", "\n", "if", "criterion", "==", "-", "1", ":", "\n", "                        ", "ua", "=", "area1", "+", "area2", "-", "inc", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "                        ", "ua", "=", "area1", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "                        ", "ua", "=", "area2", "\n", "", "else", ":", "\n", "                        ", "ua", "=", "1.0", "\n", "", "rinc", "[", "i", ",", "j", "]", "=", "inc", "/", "ua", "\n", "", "else", ":", "\n", "                    ", "rinc", "[", "i", ",", "j", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.eval.box3d_overlap": [[359, 368], ["list", "list.pop", "list.pop", "det3d.ops.nms.nms_gpu.rotate_iou_gpu_eval", "eval.box3d_overlap_kernel", "range"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.eval.box3d_overlap_kernel"], ["", "", "", "", "", "def", "box3d_overlap", "(", "boxes", ",", "qboxes", ",", "criterion", "=", "-", "1", ",", "z_axis", "=", "1", ",", "z_center", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"kitti camera format z_axis=1.\n    \"\"\"", "\n", "bev_axes", "=", "list", "(", "range", "(", "7", ")", ")", "\n", "bev_axes", ".", "pop", "(", "z_axis", "+", "3", ")", "\n", "bev_axes", ".", "pop", "(", "z_axis", ")", "\n", "rinc", "=", "rotate_iou_gpu_eval", "(", "boxes", "[", ":", ",", "bev_axes", "]", ",", "qboxes", "[", ":", ",", "bev_axes", "]", ",", "2", ")", "\n", "box3d_overlap_kernel", "(", "boxes", ",", "qboxes", ",", "rinc", ",", "criterion", ",", "z_axis", ",", "z_center", ")", "\n", "return", "rinc", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.AllReduce.forward": [[10, 17], ["torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.all_gather", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.all_gather", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.all_gather", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "input_list", "=", "[", "torch", ".", "zeros_like", "(", "input", ")", "for", "k", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "# Use allgather instead of allreduce since I don't trust in-place operations ..", "\n", "dist", ".", "all_gather", "(", "input_list", ",", "input", ",", "async_op", "=", "False", ")", "\n", "inputs", "=", "torch", ".", "stack", "(", "input_list", ",", "dim", "=", "0", ")", "\n", "return", "torch", ".", "sum", "(", "inputs", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.AllReduce.backward": [[18, 22], ["torch.all_reduce", "torch.all_reduce", "torch.all_reduce"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "dist", ".", "all_reduce", "(", "grad_output", ",", "async_op", "=", "False", ")", "\n", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.NaiveSyncBatchNorm.forward": [[34, 57], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "scale.reshape.reshape.reshape", "bias.reshape.reshape.reshape", "super().forward", "AllReduce.apply", "det3d.utils.dist.dist_common.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "var.detach"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.alexnet.AlexNet.forward", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size"], ["def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "comm", ".", "get_world_size", "(", ")", "==", "1", "or", "not", "self", ".", "training", ":", "\n", "            ", "return", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "\n", "", "assert", "input", ".", "shape", "[", "0", "]", ">", "0", ",", "\"SyncBatchNorm does not support empty input\"", "\n", "C", "=", "input", ".", "shape", "[", "1", "]", "\n", "mean", "=", "torch", ".", "mean", "(", "input", ",", "dim", "=", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "meansqr", "=", "torch", ".", "mean", "(", "input", "*", "input", ",", "dim", "=", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "\n", "vec", "=", "torch", ".", "cat", "(", "[", "mean", ",", "meansqr", "]", ",", "dim", "=", "0", ")", "\n", "vec", "=", "AllReduce", ".", "apply", "(", "vec", ")", "*", "(", "1.0", "/", "dist", ".", "get_world_size", "(", ")", ")", "\n", "\n", "mean", ",", "meansqr", "=", "torch", ".", "split", "(", "vec", ",", "C", ")", "\n", "var", "=", "meansqr", "-", "mean", "*", "mean", "\n", "self", ".", "running_mean", "+=", "self", ".", "momentum", "*", "(", "mean", ".", "detach", "(", ")", "-", "self", ".", "running_mean", ")", "\n", "self", ".", "running_var", "+=", "self", ".", "momentum", "*", "(", "var", ".", "detach", "(", ")", "-", "self", ".", "running_var", ")", "\n", "\n", "invstd", "=", "torch", ".", "rsqrt", "(", "var", "+", "self", ".", "eps", ")", "\n", "scale", "=", "self", ".", "weight", "*", "invstd", "\n", "bias", "=", "self", ".", "bias", "-", "mean", "*", "scale", "\n", "scale", "=", "scale", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "input", "*", "scale", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.build_norm_layer": [[67, 109], ["cfg.copy", "cfg.copy.pop", "isinstance", "cfg.copy.pop", "cfg.copy.setdefault", "norm_layer.parameters", "isinstance", "KeyError", "str", "norm_layer", "norm_layer"], "function", ["None"], ["def", "build_norm_layer", "(", "cfg", ",", "num_features", ",", "postfix", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\" Build normalization layer\n    Args:\n        cfg (dict): cfg should contain:\n            type (str): identify norm layer type.\n            layer args: args needed to instantiate a norm layer.\n            requires_grad (bool): [optional] whether stop gradient updates\n        num_features (int): number of channels from input.\n        postfix (int, str): appended into norm abbreviation to\n            create named layer.\n    Returns:\n        name (str): abbreviation + postfix\n        layer (nn.Module): created norm layer\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "\"type\"", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "layer_type", "=", "cfg_", ".", "pop", "(", "\"type\"", ")", "\n", "if", "layer_type", "not", "in", "norm_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "\"Unrecognized norm type {}\"", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "abbr", ",", "norm_layer", "=", "norm_cfg", "[", "layer_type", "]", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "assert", "isinstance", "(", "postfix", ",", "(", "int", ",", "str", ")", ")", "\n", "name", "=", "abbr", "+", "str", "(", "postfix", ")", "\n", "\n", "requires_grad", "=", "cfg_", ".", "pop", "(", "\"requires_grad\"", ",", "True", ")", "\n", "cfg_", ".", "setdefault", "(", "\"eps\"", ",", "1e-5", ")", "\n", "if", "layer_type", "!=", "\"GN\"", ":", "\n", "        ", "layer", "=", "norm_layer", "(", "num_features", ",", "**", "cfg_", ")", "\n", "# if layer_type == 'SyncBN':", "\n", "#     layer._specify_ddp_gpu_num(1)", "\n", "", "else", ":", "\n", "        ", "assert", "\"num_groups\"", "in", "cfg_", "\n", "layer", "=", "norm_layer", "(", "num_channels", "=", "num_features", ",", "**", "cfg_", ")", "\n", "\n", "", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "", "return", "name", ",", "layer", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.scale.Scale.__init__": [[6, 9], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "Scale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "scale", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.scale.Scale.forward": [[10, 12], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "scale", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_module.ConvModule.__init__": [[64, 146], ["torch.Module.__init__", "conv_module.build_conv_layer", "conv_module.ConvModule.init_weights", "isinstance", "isinstance", "isinstance", "set", "set", "warnings.warn", "norm.build_norm_layer", "conv_module.ConvModule.add_module", "len", "order.index", "order.index", "ValueError", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.alexnet.AlexNet.init_weights", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.build_norm_layer"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "\"auto\"", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "activation", "=", "\"relu\"", ",", "\n", "inplace", "=", "True", ",", "\n", "order", "=", "(", "\"conv\"", ",", "\"norm\"", ",", "\"act\"", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ConvModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "conv_cfg", "is", "None", "or", "isinstance", "(", "conv_cfg", ",", "dict", ")", "\n", "assert", "norm_cfg", "is", "None", "or", "isinstance", "(", "norm_cfg", ",", "dict", ")", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "inplace", "=", "inplace", "\n", "self", ".", "order", "=", "order", "\n", "assert", "isinstance", "(", "self", ".", "order", ",", "tuple", ")", "and", "len", "(", "self", ".", "order", ")", "==", "3", "\n", "assert", "set", "(", "order", ")", "==", "set", "(", "[", "\"conv\"", ",", "\"norm\"", ",", "\"act\"", "]", ")", "\n", "\n", "self", ".", "with_norm", "=", "norm_cfg", "is", "not", "None", "\n", "self", ".", "with_activatation", "=", "activation", "is", "not", "None", "\n", "# if the conv layer is before a norm layer, bias is unnecessary.", "\n", "if", "bias", "==", "\"auto\"", ":", "\n", "            ", "bias", "=", "False", "if", "self", ".", "with_norm", "else", "True", "\n", "", "self", ".", "with_bias", "=", "bias", "\n", "\n", "if", "self", ".", "with_norm", "and", "self", ".", "with_bias", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"ConvModule has norm and bias at the same time\"", ")", "\n", "\n", "# build convolution layer", "\n", "", "self", ".", "conv", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "# export the attributes of self.conv to a higher level for convenience", "\n", "self", ".", "in_channels", "=", "self", ".", "conv", ".", "in_channels", "\n", "self", ".", "out_channels", "=", "self", ".", "conv", ".", "out_channels", "\n", "self", ".", "kernel_size", "=", "self", ".", "conv", ".", "kernel_size", "\n", "self", ".", "stride", "=", "self", ".", "conv", ".", "stride", "\n", "self", ".", "padding", "=", "self", ".", "conv", ".", "padding", "\n", "self", ".", "dilation", "=", "self", ".", "conv", ".", "dilation", "\n", "self", ".", "transposed", "=", "self", ".", "conv", ".", "transposed", "\n", "self", ".", "output_padding", "=", "self", ".", "conv", ".", "output_padding", "\n", "self", ".", "groups", "=", "self", ".", "conv", ".", "groups", "\n", "\n", "# build normalization layers", "\n", "if", "self", ".", "with_norm", ":", "\n", "# norm layer is after conv layer", "\n", "            ", "if", "order", ".", "index", "(", "\"norm\"", ")", ">", "order", ".", "index", "(", "\"conv\"", ")", ":", "\n", "                ", "norm_channels", "=", "out_channels", "\n", "", "else", ":", "\n", "                ", "norm_channels", "=", "in_channels", "\n", "", "self", ".", "norm_name", ",", "norm", "=", "build_norm_layer", "(", "norm_cfg", ",", "norm_channels", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm_name", ",", "norm", ")", "\n", "\n", "# build activation layer", "\n", "", "if", "self", ".", "with_activatation", ":", "\n", "# TODO: introduce `act_cfg` and supports more activation layers", "\n", "            ", "if", "self", ".", "activation", "not", "in", "[", "\"relu\"", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"{} is currently not supported.\"", ".", "format", "(", "self", ".", "activation", ")", "\n", ")", "\n", "", "if", "self", ".", "activation", "==", "\"relu\"", ":", "\n", "                ", "self", ".", "activate", "=", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", "\n", "# Use msra init by default", "\n", "", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_module.ConvModule.norm": [[147, 150], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_module.ConvModule.init_weights": [[151, 156], ["det3d.torchie.cnn.kaiming_init", "det3d.torchie.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.weight_init.kaiming_init", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.weight_init.constant_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "nonlinearity", "=", "\"relu\"", "if", "self", ".", "activation", "is", "None", "else", "self", ".", "activation", "\n", "kaiming_init", "(", "self", ".", "conv", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "if", "self", ".", "with_norm", ":", "\n", "            ", "constant_init", "(", "self", ".", "norm", ",", "1", ",", "bias", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_module.ConvModule.forward": [[157, 166], ["conv_module.ConvModule.conv", "conv_module.ConvModule.norm", "conv_module.ConvModule.activate"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_module.ConvModule.norm"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "activate", "=", "True", ",", "norm", "=", "True", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "order", ":", "\n", "            ", "if", "layer", "==", "\"conv\"", ":", "\n", "                ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "elif", "layer", "==", "\"norm\"", "and", "norm", "and", "self", ".", "with_norm", ":", "\n", "                ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "elif", "layer", "==", "\"act\"", "and", "activate", "and", "self", ".", "with_activatation", ":", "\n", "                ", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_module.build_conv_layer": [[16, 40], ["cfg.copy.pop", "conv_layer", "dict", "cfg.copy", "KeyError", "isinstance"], "function", ["None"], ["def", "build_conv_layer", "(", "cfg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Build convolution layer\n    Args:\n        cfg (None or dict): cfg should contain:\n            type (str): identify conv layer type.\n            layer args: args needed to instantiate a conv layer.\n    Returns:\n        layer (nn.Module): created conv layer\n    \"\"\"", "\n", "if", "cfg", "is", "None", ":", "\n", "        ", "cfg_", "=", "dict", "(", "type", "=", "\"Conv\"", ")", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "\"type\"", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "", "layer_type", "=", "cfg_", ".", "pop", "(", "\"type\"", ")", "\n", "if", "layer_type", "not", "in", "conv_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "\"Unrecognized norm type {}\"", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "conv_layer", "=", "conv_cfg", "[", "layer_type", "]", "\n", "\n", "", "layer", "=", "conv_layer", "(", "*", "args", ",", "**", "kwargs", ",", "**", "cfg_", ")", "\n", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.Sequential.__init__": [[54, 68], ["super().__init__", "kwargs.items", "isinstance", "args[].items", "enumerate", "misc.Sequential.add_module", "len", "misc.Sequential.add_module", "misc.Sequential.add_module", "ValueError", "ValueError", "str"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Sequential", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "len", "(", "args", ")", "==", "1", "and", "isinstance", "(", "args", "[", "0", "]", ",", "OrderedDict", ")", ":", "\n", "            ", "for", "key", ",", "module", "in", "args", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "add_module", "(", "key", ",", "module", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "idx", ",", "module", "in", "enumerate", "(", "args", ")", ":", "\n", "                ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "module", ")", "\n", "", "", "for", "name", ",", "module", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "sys", ".", "version_info", "<", "(", "3", ",", "6", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"kwargs only supported in py36+\"", ")", "\n", "", "if", "name", "in", "self", ".", "_modules", ":", "\n", "                ", "raise", "ValueError", "(", "\"name exists.\"", ")", "\n", "", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.Sequential.__getitem__": [[69, 78], ["iter", "range", "next", "IndexError", "len", "misc.Sequential._modules.values", "next", "len", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.iter", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.next", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.next"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "not", "(", "-", "len", "(", "self", ")", "<=", "idx", "<", "len", "(", "self", ")", ")", ":", "\n", "            ", "raise", "IndexError", "(", "\"index {} is out of range\"", ".", "format", "(", "idx", ")", ")", "\n", "", "if", "idx", "<", "0", ":", "\n", "            ", "idx", "+=", "len", "(", "self", ")", "\n", "", "it", "=", "iter", "(", "self", ".", "_modules", ".", "values", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "idx", ")", ":", "\n", "            ", "next", "(", "it", ")", "\n", "", "return", "next", "(", "it", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.Sequential.__len__": [[79, 81], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.Sequential.add": [[82, 88], ["misc.Sequential.add_module", "str", "len", "KeyError"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "module", ",", "name", "=", "None", ")", ":", "\n", "        ", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "str", "(", "len", "(", "self", ".", "_modules", ")", ")", "\n", "if", "name", "in", "self", ".", "_modules", ":", "\n", "                ", "raise", "KeyError", "(", "\"name exists\"", ")", "\n", "", "", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.Sequential.forward": [[89, 96], ["misc.Sequential._modules.values", "module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# i = 0", "\n", "        ", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "# print(i)", "\n", "            ", "input", "=", "module", "(", "input", ")", "\n", "# i += 1", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.GroupNorm.__init__": [[99, 102], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", ",", "num_groups", ",", "eps", "=", "1e-5", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_groups", "=", "num_groups", ",", "num_channels", "=", "num_channels", ",", "eps", "=", "eps", ",", "affine", "=", "affine", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.Empty.__init__": [[106, 108], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Empty", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.Empty.forward": [[109, 115], ["len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "return", "args", "[", "0", "]", "\n", "", "elif", "len", "(", "args", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.get_pos_to_kw_map": [[117, 126], ["inspect.signature", "inspect.signature.parameters.items"], "function", ["None"], ["", "", "def", "get_pos_to_kw_map", "(", "func", ")", ":", "\n", "    ", "pos_to_kw", "=", "{", "}", "\n", "fsig", "=", "inspect", ".", "signature", "(", "func", ")", "\n", "pos", "=", "0", "\n", "for", "name", ",", "info", "in", "fsig", ".", "parameters", ".", "items", "(", ")", ":", "\n", "        ", "if", "info", ".", "kind", "is", "info", ".", "POSITIONAL_OR_KEYWORD", ":", "\n", "            ", "pos_to_kw", "[", "pos", "]", "=", "name", "\n", "", "pos", "+=", "1", "\n", "", "return", "pos_to_kw", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.get_kw_to_default_map": [[128, 136], ["inspect.signature", "inspect.signature.parameters.items"], "function", ["None"], ["", "def", "get_kw_to_default_map", "(", "func", ")", ":", "\n", "    ", "kw_to_default", "=", "{", "}", "\n", "fsig", "=", "inspect", ".", "signature", "(", "func", ")", "\n", "for", "name", ",", "info", "in", "fsig", ".", "parameters", ".", "items", "(", ")", ":", "\n", "        ", "if", "info", ".", "kind", "is", "info", ".", "POSITIONAL_OR_KEYWORD", ":", "\n", "            ", "if", "info", ".", "default", "is", "not", "info", ".", "empty", ":", "\n", "                ", "kw_to_default", "[", "name", "]", "=", "info", ".", "default", "\n", "", "", "", "return", "kw_to_default", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.change_default_args": [[138, 152], ["misc.get_pos_to_kw_map", "kwargs.items", "super().__init__", "get_pos_to_kw_map.items", "len"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.get_pos_to_kw_map", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["", "def", "change_default_args", "(", "**", "kwargs", ")", ":", "\n", "    ", "def", "layer_wrapper", "(", "layer_class", ")", ":", "\n", "        ", "class", "DefaultArgLayer", "(", "layer_class", ")", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kw", ")", ":", "\n", "                ", "pos_to_kw", "=", "get_pos_to_kw_map", "(", "layer_class", ".", "__init__", ")", "\n", "kw_to_pos", "=", "{", "kw", ":", "pos", "for", "pos", ",", "kw", "in", "pos_to_kw", ".", "items", "(", ")", "}", "\n", "for", "key", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", "not", "in", "kw", "and", "kw_to_pos", "[", "key", "]", ">", "len", "(", "args", ")", ":", "\n", "                        ", "kw", "[", "key", "]", "=", "val", "\n", "", "", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kw", ")", "\n", "\n", "", "", "return", "DefaultArgLayer", "\n", "\n", "", "return", "layer_wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.get_printer": [[154, 170], ["tensor.nelement", "print", "print", "tensor.max", "tensor.min", "tensor.mean"], "function", ["None"], ["", "def", "get_printer", "(", "msg", ")", ":", "\n", "    ", "\"\"\"This function returns a printer function, that prints information about a  tensor's\n    gradient. Used by register_hook in the backward pass.\n    \"\"\"", "\n", "\n", "def", "printer", "(", "tensor", ")", ":", "\n", "        ", "if", "tensor", ".", "nelement", "(", ")", "==", "1", ":", "\n", "            ", "print", "(", "f\"{msg} {tensor}\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\n", "f\"{msg} shape: {tensor.shape}\"", "\n", "f\" max: {tensor.max()} min: {tensor.min()}\"", "\n", "f\" mean: {tensor.mean()}\"", "\n", ")", "\n", "\n", "", "", "return", "printer", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.register_hook": [[172, 178], ["tensor.retain_grad", "tensor.register_hook", "misc.get_printer"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.register_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.get_printer"], ["", "def", "register_hook", "(", "tensor", ",", "msg", ")", ":", "\n", "    ", "\"\"\"Utility function to call retain_grad and Pytorch's register_hook\n    in a single line\n    \"\"\"", "\n", "tensor", ".", "retain_grad", "(", ")", "\n", "tensor", ".", "register_hook", "(", "get_printer", "(", "msg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.get_paddings_indicator": [[180, 203], ["torch.unsqueeze", "torch.arange().view", "len", "torch.unsqueeze.int", "torch.arange"], "function", ["None"], ["", "def", "get_paddings_indicator", "(", "actual_num", ",", "max_num", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"Create boolean mask by actually number of a padded tensor.\n\n    Args:\n        actual_num ([type]): [description]\n        max_num ([type]): [description]\n\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "\n", "actual_num", "=", "torch", ".", "unsqueeze", "(", "actual_num", ",", "axis", "+", "1", ")", "\n", "# tiled_actual_num: [N, M, 1]", "\n", "max_num_shape", "=", "[", "1", "]", "*", "len", "(", "actual_num", ".", "shape", ")", "\n", "max_num_shape", "[", "axis", "+", "1", "]", "=", "-", "1", "\n", "max_num", "=", "torch", ".", "arange", "(", "max_num", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "actual_num", ".", "device", ")", ".", "view", "(", "\n", "max_num_shape", "\n", ")", "\n", "# tiled_actual_num: [[3,3,3,3,3], [4,4,4,4,4], [2,2,2,2,2]]", "\n", "# tiled_max_num: [[0,1,2,3,4], [0,1,2,3,4], [0,1,2,3,4]]", "\n", "paddings_indicator", "=", "actual_num", ".", "int", "(", ")", ">", "max_num", "\n", "# paddings_indicator shape: [batch_size, max_num]", "\n", "return", "paddings_indicator", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.weight_init.xavier_init": [[5, 13], ["hasattr", "torch.init.xavier_uniform_", "torch.init.xavier_normal_", "torch.init.constant_"], "function", ["None"], ["def", "xavier_init", "(", "module", ",", "gain", "=", "1", ",", "bias", "=", "0", ",", "distribution", "=", "\"normal\"", ")", ":", "\n", "    ", "assert", "distribution", "in", "[", "\"uniform\"", ",", "\"normal\"", "]", "\n", "if", "distribution", "==", "\"uniform\"", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "module", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "", "if", "hasattr", "(", "module", ",", "\"bias\"", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.weight_init.normal_init": [[15, 19], ["torch.init.normal_", "hasattr", "torch.init.constant_"], "function", ["None"], ["", "", "def", "normal_init", "(", "module", ",", "mean", "=", "0", ",", "std", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "    ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "weight", ",", "mean", ",", "std", ")", "\n", "if", "hasattr", "(", "module", ",", "\"bias\"", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.weight_init.uniform_init": [[21, 25], ["torch.init.uniform_", "hasattr", "torch.init.constant_"], "function", ["None"], ["", "", "def", "uniform_init", "(", "module", ",", "a", "=", "0", ",", "b", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "    ", "nn", ".", "init", ".", "uniform_", "(", "module", ".", "weight", ",", "a", ",", "b", ")", "\n", "if", "hasattr", "(", "module", ",", "\"bias\"", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.weight_init.kaiming_init": [[27, 37], ["hasattr", "torch.init.kaiming_uniform_", "torch.init.kaiming_normal_", "torch.init.constant_"], "function", ["None"], ["", "", "def", "kaiming_init", "(", "\n", "module", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ",", "bias", "=", "0", ",", "distribution", "=", "\"normal\"", "\n", ")", ":", "\n", "    ", "assert", "distribution", "in", "[", "\"uniform\"", ",", "\"normal\"", "]", "\n", "if", "distribution", "==", "\"uniform\"", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "module", ".", "weight", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "else", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "if", "hasattr", "(", "module", ",", "\"bias\"", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.weight_init.bias_init_with_prob": [[39, 43], ["float", "numpy.log"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log"], ["", "", "def", "bias_init_with_prob", "(", "prior_prob", ")", ":", "\n", "    ", "\"\"\" initialize conv/fc bias value according to giving probablity\"\"\"", "\n", "bias_init", "=", "float", "(", "-", "np", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", ")", "\n", "return", "bias_init", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.finetune_utils.FrozenBatchNorm2d.__init__": [[26, 34], ["torch.nn.Module.__init__", "finetune_utils.FrozenBatchNorm2d.register_buffer", "finetune_utils.FrozenBatchNorm2d.register_buffer", "finetune_utils.FrozenBatchNorm2d.register_buffer", "finetune_utils.FrozenBatchNorm2d.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "register_buffer", "(", "\"weight\"", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_var\"", ",", "torch", ".", "ones", "(", "num_features", ")", "-", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.finetune_utils.FrozenBatchNorm2d.forward": [[35, 55], ["scale.reshape.reshape.reshape", "bias.reshape.reshape.reshape", "torch.nn.functional.batch_norm", "torch.nn.functional.batch_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "requires_grad", ":", "\n", "# When gradients are needed, F.batch_norm will use extra memory", "\n", "# because its backward op computes gradients for weight/bias as well.", "\n", "            ", "scale", "=", "self", ".", "weight", "*", "(", "self", ".", "running_var", "+", "self", ".", "eps", ")", ".", "rsqrt", "(", ")", "\n", "bias", "=", "self", ".", "bias", "-", "self", ".", "running_mean", "*", "scale", "\n", "scale", "=", "scale", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "scale", "+", "bias", "\n", "", "else", ":", "\n", "# When gradients are not needed, F.batch_norm is a single fused op", "\n", "# and provide more optimization opportunities.", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "x", ",", "\n", "self", ".", "running_mean", ",", "\n", "self", ".", "running_var", ",", "\n", "self", ".", "weight", ",", "\n", "self", ".", "bias", ",", "\n", "training", "=", "False", ",", "\n", "eps", "=", "self", ".", "eps", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.finetune_utils.FrozenBatchNorm2d._load_from_state_dict": [[57, 78], ["local_metadata.get", "super()._load_from_state_dict", "logging.getLogger", "logging.getLogger.info", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "prefix.rstrip"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConvPack._load_from_state_dict"], ["", "", "def", "_load_from_state_dict", "(", "\n", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", "\n", ")", ":", "\n", "        ", "version", "=", "local_metadata", ".", "get", "(", "\"version\"", ",", "None", ")", "\n", "\n", "if", "version", "is", "None", "or", "version", "<", "2", ":", "\n", "# No running_mean/var in early versions", "\n", "# This will silent the warnings", "\n", "            ", "if", "prefix", "+", "\"running_mean\"", "not", "in", "state_dict", ":", "\n", "                ", "state_dict", "[", "prefix", "+", "\"running_mean\"", "]", "=", "torch", ".", "zeros_like", "(", "self", ".", "running_mean", ")", "\n", "", "if", "prefix", "+", "\"running_var\"", "not", "in", "state_dict", ":", "\n", "                ", "state_dict", "[", "prefix", "+", "\"running_var\"", "]", "=", "torch", ".", "ones_like", "(", "self", ".", "running_var", ")", "\n", "\n", "", "", "if", "version", "is", "not", "None", "and", "version", "<", "3", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "info", "(", "\"FrozenBatchNorm {} is upgraded to version 3.\"", ".", "format", "(", "prefix", ".", "rstrip", "(", "\".\"", ")", ")", ")", "\n", "# In version < 3, running_var are used without +eps.", "\n", "state_dict", "[", "prefix", "+", "\"running_var\"", "]", "-=", "self", ".", "eps", "\n", "\n", "", "super", "(", ")", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.finetune_utils.FrozenBatchNorm2d.__repr__": [[80, 82], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"FrozenBatchNorm2d(num_features={}, eps={})\"", ".", "format", "(", "self", ".", "num_features", ",", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.finetune_utils.FrozenBatchNorm2d.convert_frozen_batchnorm": [[83, 112], ["isinstance", "cls", "module.named_children", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "cls.convert_frozen_batchnorm", "cls.add_module", "module.weight.data.clone", "module.bias.data.clone"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.finetune_utils.FrozenBatchNorm2d.convert_frozen_batchnorm"], ["", "@", "classmethod", "\n", "def", "convert_frozen_batchnorm", "(", "cls", ",", "module", ")", ":", "\n", "        ", "\"\"\"\n        Convert BatchNorm/SyncBatchNorm in module into FrozenBatchNorm.\n        Args:\n            module (torch.nn.Module):\n        Returns:\n            If module is BatchNorm/SyncBatchNorm, returns a new module.\n            Otherwise, in-place convert module and return it.\n        Similar to convert_sync_batchnorm in\n        https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/batchnorm.py\n        \"\"\"", "\n", "bn_module", "=", "nn", ".", "modules", ".", "batchnorm", "\n", "bn_module", "=", "(", "bn_module", ".", "BatchNorm2d", ",", "bn_module", ".", "SyncBatchNorm", ")", "\n", "res", "=", "module", "\n", "if", "isinstance", "(", "module", ",", "bn_module", ")", ":", "\n", "            ", "res", "=", "cls", "(", "module", ".", "num_features", ")", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "res", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "res", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "res", ".", "running_mean", ".", "data", "=", "module", ".", "running_mean", ".", "data", "\n", "res", ".", "running_var", ".", "data", "=", "module", ".", "running_var", ".", "data", "\n", "res", ".", "eps", "=", "module", ".", "eps", "\n", "", "else", ":", "\n", "            ", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "                ", "new_child", "=", "cls", ".", "convert_frozen_batchnorm", "(", "child", ")", "\n", "if", "new_child", "is", "not", "child", ":", "\n", "                    ", "res", ".", "add_module", "(", "name", ",", "new_child", ")", "\n", "", "", "", "return", "res", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_ws.ConvWS2d.__init__": [[17, 40], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "eps", "=", "1e-5", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ConvWS2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_ws.ConvWS2d.forward": [[41, 51], ["conv_ws.conv_ws_2d"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_ws.conv_ws_2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "conv_ws_2d", "(", "\n", "x", ",", "\n", "self", ".", "weight", ",", "\n", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "\n", "self", ".", "eps", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_ws.conv_ws_2d": [[5, 14], ["weight.size", "weight.view", "weight.view.mean().view", "weight.view.std().view", "torch.conv2d", "weight.view.mean", "weight.view.std"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["def", "conv_ws_2d", "(", "\n", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "eps", "=", "1e-5", "\n", ")", ":", "\n", "    ", "c_in", "=", "weight", ".", "size", "(", "0", ")", "\n", "weight_flat", "=", "weight", ".", "view", "(", "c_in", ",", "-", "1", ")", "\n", "mean", "=", "weight_flat", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "c_in", ",", "1", ",", "1", ",", "1", ")", "\n", "std", "=", "weight_flat", ".", "std", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "c_in", ",", "1", ",", "1", ",", "1", ")", "\n", "weight", "=", "(", "weight", "-", "mean", ")", "/", "(", "std", "+", "eps", ")", "\n", "return", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "bias", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.ConfigDict.__missing__": [[13, 15], ["KeyError"], "methods", ["None"], ["    ", "def", "__missing__", "(", "self", ",", "name", ")", ":", "\n", "        ", "raise", "KeyError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.ConfigDict.__getattr__": [[16, 30], ["super().__getattr__", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.__getattr__"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "value", "=", "super", "(", "ConfigDict", ",", "self", ")", ".", "__getattr__", "(", "name", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "ex", "=", "AttributeError", "(", "\n", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "name", "\n", ")", "\n", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "ex", "=", "e", "\n", "", "else", ":", "\n", "            ", "return", "value", "\n", "", "raise", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.fromfile": [[77, 101], ["os.abspath", "path.check_file_exist", "os.abspath.endswith", "config.Config", "os.expanduser", "os.dirname", "sys.path.insert", "importlib.import_module", "sys.path.pop", "os.abspath.endswith", "os.basename", "ValueError", "torchie.load", "IOError", "importlib.import_module.__dict__.items", "name.startswith"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path.check_file_exist", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load"], ["@", "staticmethod", "\n", "def", "fromfile", "(", "filename", ")", ":", "\n", "        ", "filename", "=", "osp", ".", "abspath", "(", "osp", ".", "expanduser", "(", "filename", ")", ")", "\n", "check_file_exist", "(", "filename", ")", "\n", "if", "filename", ".", "endswith", "(", "\".py\"", ")", ":", "\n", "            ", "module_name", "=", "osp", ".", "basename", "(", "filename", ")", "[", ":", "-", "3", "]", "\n", "if", "\".\"", "in", "module_name", ":", "\n", "                ", "raise", "ValueError", "(", "\"Dots are not allowed in config file path.\"", ")", "\n", "", "config_dir", "=", "osp", ".", "dirname", "(", "filename", ")", "\n", "sys", ".", "path", ".", "insert", "(", "0", ",", "config_dir", ")", "\n", "mod", "=", "import_module", "(", "module_name", ")", "\n", "sys", ".", "path", ".", "pop", "(", "0", ")", "\n", "cfg_dict", "=", "{", "\n", "name", ":", "value", "\n", "for", "name", ",", "value", "in", "mod", ".", "__dict__", ".", "items", "(", ")", "\n", "if", "not", "name", ".", "startswith", "(", "\"__\"", ")", "\n", "}", "\n", "", "elif", "filename", ".", "endswith", "(", "(", "\".yml\"", ",", "\".yaml\"", ",", "\".json\"", ")", ")", ":", "\n", "            ", "import", "torchie", "\n", "\n", "cfg_dict", "=", "torchie", ".", "load", "(", "filename", ")", "\n", "", "else", ":", "\n", "            ", "raise", "IOError", "(", "\"Only py/yml/yaml/json type are supported now!\"", ")", "\n", "", "return", "Config", "(", "cfg_dict", ",", "filename", "=", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.auto_argparser": [[102, 114], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "config.Config.fromfile", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "config.add_args", "argparse.ArgumentParser.parse_known_args"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.fromfile", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.add_args"], ["", "@", "staticmethod", "\n", "def", "auto_argparser", "(", "description", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate argparser from config file automatically (experimental)\n        \"\"\"", "\n", "partial_parser", "=", "ArgumentParser", "(", "description", "=", "description", ")", "\n", "partial_parser", ".", "add_argument", "(", "\"config\"", ",", "help", "=", "\"config file path\"", ")", "\n", "cfg_file", "=", "partial_parser", ".", "parse_known_args", "(", ")", "[", "0", "]", ".", "config", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "cfg_file", ")", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "description", ")", "\n", "parser", ".", "add_argument", "(", "\"config\"", ",", "help", "=", "\"config file path\"", ")", "\n", "add_args", "(", "parser", ",", "cfg", ")", "\n", "return", "parser", ",", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.__init__": [[115, 130], ["object.__setattr__", "object.__setattr__", "dict", "config.ConfigDict", "object.__setattr__", "isinstance", "TypeError", "open", "object.__setattr__", "f.read", "type"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.__setattr__", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.__setattr__", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.__setattr__", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.__setattr__"], ["", "def", "__init__", "(", "self", ",", "cfg_dict", "=", "None", ",", "filename", "=", "None", ")", ":", "\n", "        ", "if", "cfg_dict", "is", "None", ":", "\n", "            ", "cfg_dict", "=", "dict", "(", ")", "\n", "", "elif", "not", "isinstance", "(", "cfg_dict", ",", "dict", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"cfg_dict must be a dict, but got {}\"", ".", "format", "(", "type", "(", "cfg_dict", ")", ")", "\n", ")", "\n", "\n", "", "super", "(", "Config", ",", "self", ")", ".", "__setattr__", "(", "\"_cfg_dict\"", ",", "ConfigDict", "(", "cfg_dict", ")", ")", "\n", "super", "(", "Config", ",", "self", ")", ".", "__setattr__", "(", "\"_filename\"", ",", "filename", ")", "\n", "if", "filename", ":", "\n", "            ", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "super", "(", "Config", ",", "self", ")", ".", "__setattr__", "(", "\"_text\"", ",", "f", ".", "read", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "super", "(", "Config", ",", "self", ")", ".", "__setattr__", "(", "\"_text\"", ",", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.filename": [[131, 134], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "filename", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_filename", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.text": [[135, 138], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "text", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_text", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.__repr__": [[139, 141], ["config.Config._cfg_dict.__repr__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Config (path: {}): {}\"", ".", "format", "(", "self", ".", "filename", ",", "self", ".", "_cfg_dict", ".", "__repr__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.__len__": [[142, 144], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_cfg_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.__getattr__": [[145, 147], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_cfg_dict", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.__getitem__": [[148, 150], ["config.Config._cfg_dict.__getitem__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "_cfg_dict", ".", "__getitem__", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.__setattr__": [[151, 155], ["isinstance", "config.Config._cfg_dict.__setattr__", "config.ConfigDict"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.__setattr__"], ["", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "value", "=", "ConfigDict", "(", "value", ")", "\n", "", "self", ".", "_cfg_dict", ".", "__setattr__", "(", "name", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.__setitem__": [[156, 160], ["isinstance", "config.Config._cfg_dict.__setitem__", "config.ConfigDict"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.__setitem__"], ["", "def", "__setitem__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "value", "=", "ConfigDict", "(", "value", ")", "\n", "", "self", ".", "_cfg_dict", ".", "__setitem__", "(", "name", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.__iter__": [[161, 163], ["iter"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.iter"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_cfg_dict", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.add_args": [[32, 49], ["cfg.items", "isinstance", "parser.add_argument", "isinstance", "parser.add_argument", "isinstance", "parser.add_argument", "isinstance", "parser.add_argument", "isinstance", "config.add_args", "isinstance", "parser.add_argument", "print", "type", "type"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.add_args"], ["", "", "def", "add_args", "(", "parser", ",", "cfg", ",", "prefix", "=", "\"\"", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "\"--\"", "+", "prefix", "+", "k", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "int", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "\"--\"", "+", "prefix", "+", "k", ",", "type", "=", "int", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "float", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "\"--\"", "+", "prefix", "+", "k", ",", "type", "=", "float", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "\"--\"", "+", "prefix", "+", "k", ",", "action", "=", "\"store_true\"", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "add_args", "(", "parser", ",", "v", ",", "k", "+", "\".\"", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "collections_abc", ".", "Iterable", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "\"--\"", "+", "prefix", "+", "k", ",", "type", "=", "type", "(", "v", "[", "0", "]", ")", ",", "nargs", "=", "\"+\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"connot parse key {} of type {}\"", ".", "format", "(", "prefix", "+", "k", ",", "type", "(", "v", ")", ")", ")", "\n", "", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.timer.TimerError.__init__": [[5, 8], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "message", "=", "message", "\n", "super", "(", "TimerError", ",", "self", ")", ".", "__init__", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.timer.Timer.__init__": [[36, 41], ["timer.Timer.start"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.ProgressBar.start"], ["def", "__init__", "(", "self", ",", "start", "=", "True", ",", "print_tmpl", "=", "None", ")", ":", "\n", "        ", "self", ".", "_is_running", "=", "False", "\n", "self", ".", "print_tmpl", "=", "print_tmpl", "if", "print_tmpl", "else", "\"{:.3f}\"", "\n", "if", "start", ":", "\n", "            ", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.timer.Timer.is_running": [[42, 46], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_running", "(", "self", ")", ":", "\n", "        ", "\"\"\"bool: indicate whether the timer is running\"\"\"", "\n", "return", "self", ".", "_is_running", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.timer.Timer.__enter__": [[47, 50], ["timer.Timer.start"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.ProgressBar.start"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.timer.Timer.__exit__": [[51, 54], ["print", "timer.Timer.print_tmpl.format", "timer.Timer.since_last_check"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.timer.Timer.since_last_check"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "print", "(", "self", ".", "print_tmpl", ".", "format", "(", "self", ".", "since_last_check", "(", ")", ")", ")", "\n", "self", ".", "_is_running", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.timer.Timer.start": [[55, 61], ["time.time.time", "time.time.time"], "methods", ["None"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start the timer.\"\"\"", "\n", "if", "not", "self", ".", "_is_running", ":", "\n", "            ", "self", ".", "_t_start", "=", "time", "(", ")", "\n", "self", ".", "_is_running", "=", "True", "\n", "", "self", ".", "_t_last", "=", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.timer.Timer.since_start": [[62, 71], ["time.time.time", "timer.TimerError"], "methods", ["None"], ["", "def", "since_start", "(", "self", ")", ":", "\n", "        ", "\"\"\"Total time since the timer is started.\n\n        Returns (float): Time in seconds.\n        \"\"\"", "\n", "if", "not", "self", ".", "_is_running", ":", "\n", "            ", "raise", "TimerError", "(", "\"timer is not running\"", ")", "\n", "", "self", ".", "_t_last", "=", "time", "(", ")", "\n", "return", "self", ".", "_t_last", "-", "self", ".", "_t_start", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.timer.Timer.since_last_check": [[72, 85], ["time.time.time", "timer.TimerError", "time.time.time"], "methods", ["None"], ["", "def", "since_last_check", "(", "self", ")", ":", "\n", "        ", "\"\"\"Time since the last checking.\n\n        Either :func:`since_start` or :func:`since_last_check` is a checking\n        operation.\n\n        Returns (float): Time in seconds.\n        \"\"\"", "\n", "if", "not", "self", ".", "_is_running", ":", "\n", "            ", "raise", "TimerError", "(", "\"timer is not running\"", ")", "\n", "", "dur", "=", "time", "(", ")", "-", "self", ".", "_t_last", "\n", "self", ".", "_t_last", "=", "time", "(", ")", "\n", "return", "dur", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.timer.check_time": [[90, 117], ["timer.Timer", "_g_timers[].since_last_check"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.timer.Timer.since_last_check"], ["def", "check_time", "(", "timer_id", ")", ":", "\n", "    ", "\"\"\"Add check points in a single line.\n\n    This method is suitable for running a task on a list of items. A timer will\n    be registered when the method is called for the first time.\n\n    :Example:\n\n    >>> import time\n    >>> import mmcv\n    >>> for i in range(1, 6):\n    >>>     # simulate a code block\n    >>>     time.sleep(i)\n    >>>     mmcv.check_time('task1')\n    2.000\n    3.000\n    4.000\n    5.000\n\n    Args:\n        timer_id (str): Timer identifier.\n    \"\"\"", "\n", "if", "timer_id", "not", "in", "_g_timers", ":", "\n", "        ", "_g_timers", "[", "timer_id", "]", "=", "Timer", "(", ")", "\n", "return", "0", "\n", "", "else", ":", "\n", "        ", "return", "_g_timers", "[", "timer_id", "]", ".", "since_last_check", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.ProgressBar.__init__": [[11, 18], ["progressbar.ProgressBar._get_max_bar_width", "progressbar.ProgressBar.start"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.ProgressBar._get_max_bar_width", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.ProgressBar.start"], ["def", "__init__", "(", "self", ",", "task_num", "=", "0", ",", "bar_width", "=", "50", ",", "start", "=", "True", ")", ":", "\n", "        ", "self", ".", "task_num", "=", "task_num", "\n", "max_bar_width", "=", "self", ".", "_get_max_bar_width", "(", ")", "\n", "self", ".", "bar_width", "=", "bar_width", "if", "bar_width", "<=", "max_bar_width", "else", "max_bar_width", "\n", "self", ".", "completed", "=", "0", "\n", "if", "start", ":", "\n", "            ", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.ProgressBar._get_max_bar_width": [[19, 34], ["get_terminal_size", "min", "int", "print"], "methods", ["None"], ["", "", "def", "_get_max_bar_width", "(", "self", ")", ":", "\n", "        ", "if", "sys", ".", "version_info", ">", "(", "3", ",", "3", ")", ":", "\n", "            ", "from", "shutil", "import", "get_terminal_size", "\n", "", "else", ":", "\n", "            ", "from", "backports", ".", "shutil_get_terminal_size", "import", "get_terminal_size", "\n", "", "terminal_width", ",", "_", "=", "get_terminal_size", "(", ")", "\n", "max_bar_width", "=", "min", "(", "int", "(", "terminal_width", "*", "0.6", ")", ",", "terminal_width", "-", "50", ")", "\n", "if", "max_bar_width", "<", "10", ":", "\n", "            ", "print", "(", "\n", "\"terminal width is too small ({}), please consider \"", "\n", "\"widen the terminal for better progressbar \"", "\n", "\"visualization\"", ".", "format", "(", "terminal_width", ")", "\n", ")", "\n", "max_bar_width", "=", "10", "\n", "", "return", "max_bar_width", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.ProgressBar.start": [[35, 46], ["sys.stdout.flush", "timer.Timer", "sys.stdout.write", "sys.stdout.write"], "methods", ["None"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "task_num", ">", "0", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "\n", "\"[{}] 0/{}, elapsed: 0s, ETA:\"", ".", "format", "(", "\n", "\" \"", "*", "self", ".", "bar_width", ",", "self", ".", "task_num", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "\"completed: 0, elapsed: 0s\"", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "self", ".", "timer", "=", "Timer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.ProgressBar.update": [[47, 73], ["progressbar.ProgressBar.timer.since_start", "sys.stdout.flush", "int", "int", "sys.stdout.write", "sys.stdout.write", "float", "int", "int"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.timer.Timer.since_start"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "self", ".", "completed", "+=", "1", "\n", "elapsed", "=", "self", ".", "timer", ".", "since_start", "(", ")", "\n", "fps", "=", "self", ".", "completed", "/", "elapsed", "\n", "if", "self", ".", "task_num", ">", "0", ":", "\n", "            ", "percentage", "=", "self", ".", "completed", "/", "float", "(", "self", ".", "task_num", ")", "\n", "eta", "=", "int", "(", "elapsed", "*", "(", "1", "-", "percentage", ")", "/", "percentage", "+", "0.5", ")", "\n", "mark_width", "=", "int", "(", "self", ".", "bar_width", "*", "percentage", ")", "\n", "bar_chars", "=", "\">\"", "*", "mark_width", "+", "\" \"", "*", "(", "self", ".", "bar_width", "-", "mark_width", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\r[{}] {}/{}, {:.1f} task/s, elapsed: {}s, ETA: {:5}s\"", ".", "format", "(", "\n", "bar_chars", ",", "\n", "self", ".", "completed", ",", "\n", "self", ".", "task_num", ",", "\n", "fps", ",", "\n", "int", "(", "elapsed", "+", "0.5", ")", ",", "\n", "eta", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "\n", "\"completed: {}, elapsed: {}s, {:.1f} tasks/s\"", ".", "format", "(", "\n", "self", ".", "completed", ",", "int", "(", "elapsed", "+", "0.5", ")", ",", "fps", "\n", ")", "\n", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.track_progress": [[75, 106], ["isinstance", "progressbar.ProgressBar", "sys.stdout.write", "isinstance", "isinstance", "isinstance", "results.append", "progressbar.ProgressBar.update", "len", "len", "TypeError", "func"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update"], ["", "", "def", "track_progress", "(", "func", ",", "tasks", ",", "bar_width", "=", "50", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Track the progress of tasks execution with a progress bar.\n\n    Tasks are done with a simple for-loop.\n\n    Args:\n        func (callable): The function to be applied to each task.\n        tasks (list or tuple[Iterable, int]): A list of tasks or\n            (tasks, total num).\n        bar_width (int): Width of progress bar.\n\n    Returns:\n        list: The task results.\n    \"\"\"", "\n", "if", "isinstance", "(", "tasks", ",", "tuple", ")", ":", "\n", "        ", "assert", "len", "(", "tasks", ")", "==", "2", "\n", "assert", "isinstance", "(", "tasks", "[", "0", "]", ",", "collections_abc", ".", "Iterable", ")", "\n", "assert", "isinstance", "(", "tasks", "[", "1", "]", ",", "int", ")", "\n", "task_num", "=", "tasks", "[", "1", "]", "\n", "tasks", "=", "tasks", "[", "0", "]", "\n", "", "elif", "isinstance", "(", "tasks", ",", "collections_abc", ".", "Iterable", ")", ":", "\n", "        ", "task_num", "=", "len", "(", "tasks", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'\"tasks\" must be an iterable object or a (iterator, int) tuple'", ")", "\n", "", "prog_bar", "=", "ProgressBar", "(", "task_num", ",", "bar_width", ")", "\n", "results", "=", "[", "]", "\n", "for", "task", "in", "tasks", ":", "\n", "        ", "results", ".", "append", "(", "func", "(", "task", ",", "**", "kwargs", ")", ")", "\n", "prog_bar", ".", "update", "(", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "\"\\n\"", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.init_pool": [[108, 117], ["multiprocessing.Pool", "multiprocessing.Pool", "multiprocessing.Pool", "isinstance", "TypeError"], "function", ["None"], ["", "def", "init_pool", "(", "process_num", ",", "initializer", "=", "None", ",", "initargs", "=", "None", ")", ":", "\n", "    ", "if", "initializer", "is", "None", ":", "\n", "        ", "return", "Pool", "(", "process_num", ")", "\n", "", "elif", "initargs", "is", "None", ":", "\n", "        ", "return", "Pool", "(", "process_num", ",", "initializer", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "isinstance", "(", "initargs", ",", "tuple", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'\"initargs\" must be a tuple'", ")", "\n", "", "return", "Pool", "(", "process_num", ",", "initializer", ",", "initargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.track_parallel_progress": [[119, 187], ["isinstance", "progressbar.init_pool", "progressbar.ProgressBar", "sys.stdout.write", "init_pool.close", "init_pool.join", "isinstance", "isinstance", "isinstance", "int", "init_pool.imap", "init_pool.imap_unordered", "results.append", "progressbar.ProgressBar.update", "len", "len", "TypeError", "len", "len", "progressbar.ProgressBar.start"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.init_pool", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.close", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.ProgressBar.start"], ["", "", "def", "track_parallel_progress", "(", "\n", "func", ",", "\n", "tasks", ",", "\n", "nproc", ",", "\n", "initializer", "=", "None", ",", "\n", "initargs", "=", "None", ",", "\n", "bar_width", "=", "50", ",", "\n", "chunksize", "=", "1", ",", "\n", "skip_first", "=", "False", ",", "\n", "keep_order", "=", "True", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Track the progress of parallel task execution with a progress bar.\n\n    The built-in :mod:`multiprocessing` module is used for process pools and\n    tasks are done with :func:`Pool.map` or :func:`Pool.imap_unordered`.\n\n    Args:\n        func (callable): The function to be applied to each task.\n        tasks (list or tuple[Iterable, int]): A list of tasks or\n            (tasks, total num).\n        nproc (int): Process (worker) number.\n        initializer (None or callable): Refer to :class:`multiprocessing.Pool`\n            for details.\n        initargs (None or tuple): Refer to :class:`multiprocessing.Pool` for\n            details.\n        chunksize (int): Refer to :class:`multiprocessing.Pool` for details.\n        bar_width (int): Width of progress bar.\n        skip_first (bool): Whether to skip the first sample for each worker\n            when estimating fps, since the initialization step may takes\n            longer.\n        keep_order (bool): If True, :func:`Pool.imap` is used, otherwise\n            :func:`Pool.imap_unordered` is used.\n\n    Returns:\n        list: The task results.\n    \"\"\"", "\n", "if", "isinstance", "(", "tasks", ",", "tuple", ")", ":", "\n", "        ", "assert", "len", "(", "tasks", ")", "==", "2", "\n", "assert", "isinstance", "(", "tasks", "[", "0", "]", ",", "collections_abc", ".", "Iterable", ")", "\n", "assert", "isinstance", "(", "tasks", "[", "1", "]", ",", "int", ")", "\n", "task_num", "=", "tasks", "[", "1", "]", "\n", "tasks", "=", "tasks", "[", "0", "]", "\n", "", "elif", "isinstance", "(", "tasks", ",", "collections_abc", ".", "Iterable", ")", ":", "\n", "        ", "task_num", "=", "len", "(", "tasks", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'\"tasks\" must be an iterable object or a (iterator, int) tuple'", ")", "\n", "", "pool", "=", "init_pool", "(", "nproc", ",", "initializer", ",", "initargs", ")", "\n", "start", "=", "not", "skip_first", "\n", "task_num", "-=", "nproc", "*", "chunksize", "*", "int", "(", "skip_first", ")", "\n", "prog_bar", "=", "ProgressBar", "(", "task_num", ",", "bar_width", ",", "start", ")", "\n", "results", "=", "[", "]", "\n", "if", "keep_order", ":", "\n", "        ", "gen", "=", "pool", ".", "imap", "(", "func", ",", "tasks", ",", "chunksize", ")", "\n", "", "else", ":", "\n", "        ", "gen", "=", "pool", ".", "imap_unordered", "(", "func", ",", "tasks", ",", "chunksize", ")", "\n", "", "for", "result", "in", "gen", ":", "\n", "        ", "results", ".", "append", "(", "result", ")", "\n", "if", "skip_first", ":", "\n", "            ", "if", "len", "(", "results", ")", "<", "nproc", "*", "chunksize", ":", "\n", "                ", "continue", "\n", "", "elif", "len", "(", "results", ")", "==", "nproc", "*", "chunksize", ":", "\n", "                ", "prog_bar", ".", "start", "(", ")", "\n", "continue", "\n", "", "", "prog_bar", ".", "update", "(", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "\"\\n\"", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.track_iter_progress": [[189, 217], ["isinstance", "progressbar.ProgressBar", "sys.stdout.write", "isinstance", "isinstance", "isinstance", "progressbar.ProgressBar.update", "len", "len", "TypeError"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update"], ["", "def", "track_iter_progress", "(", "tasks", ",", "bar_width", "=", "50", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Track the progress of tasks iteration or enumeration with a progress bar.\n\n    Tasks are yielded with a simple for-loop.\n\n    Args:\n        tasks (list or tuple[Iterable, int]): A list of tasks or\n            (tasks, total num).\n        bar_width (int): Width of progress bar.\n\n    Yields:\n        list: The task results.\n    \"\"\"", "\n", "if", "isinstance", "(", "tasks", ",", "tuple", ")", ":", "\n", "        ", "assert", "len", "(", "tasks", ")", "==", "2", "\n", "assert", "isinstance", "(", "tasks", "[", "0", "]", ",", "collections_abc", ".", "Iterable", ")", "\n", "assert", "isinstance", "(", "tasks", "[", "1", "]", ",", "int", ")", "\n", "task_num", "=", "tasks", "[", "1", "]", "\n", "tasks", "=", "tasks", "[", "0", "]", "\n", "", "elif", "isinstance", "(", "tasks", ",", "collections_abc", ".", "Iterable", ")", ":", "\n", "        ", "task_num", "=", "len", "(", "tasks", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'\"tasks\" must be an iterable object or a (iterator, int) tuple'", ")", "\n", "", "prog_bar", "=", "ProgressBar", "(", "task_num", ",", "bar_width", ")", "\n", "for", "task", "in", "tasks", ":", "\n", "        ", "yield", "task", "\n", "prog_bar", ".", "update", "(", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "\"\\n\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path.is_filepath": [[16, 21], ["misc.is_str", "isinstance"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_str"], ["", "def", "is_filepath", "(", "x", ")", ":", "\n", "    ", "if", "is_str", "(", "x", ")", "or", "isinstance", "(", "x", ",", "Path", ")", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path.fopen": [[23, 28], ["misc.is_str", "open", "isinstance", "filepath.open"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_str", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open"], ["", "", "def", "fopen", "(", "filepath", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_str", "(", "filepath", ")", ":", "\n", "        ", "return", "open", "(", "filepath", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "isinstance", "(", "filepath", ",", "Path", ")", ":", "\n", "        ", "return", "filepath", ".", "open", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path.check_file_exist": [[30, 33], ["os.isfile", "FileNotFoundError", "msg_tmpl.format"], "function", ["None"], ["", "", "def", "check_file_exist", "(", "filename", ",", "msg_tmpl", "=", "'file \"{}\" does not exist'", ")", ":", "\n", "    ", "if", "not", "osp", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "msg_tmpl", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path.mkdir_or_exist": [[35, 44], ["os.expanduser", "os.makedirs", "os.makedirs", "os.isdir", "os.makedirs", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir_or_exist", "(", "dir_name", ",", "mode", "=", "0o777", ")", ":", "\n", "    ", "if", "dir_name", "==", "\"\"", ":", "\n", "        ", "return", "\n", "", "dir_name", "=", "osp", ".", "expanduser", "(", "dir_name", ")", "\n", "if", "six", ".", "PY3", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_name", ",", "mode", "=", "mode", ",", "exist_ok", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "osp", ".", "isdir", "(", "dir_name", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir_name", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path.symlink": [[46, 50], ["os.symlink", "os.symlink", "os.path.lexists", "os.path.lexists", "os.remove", "os.remove"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path.symlink", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path.symlink"], ["", "", "", "def", "symlink", "(", "src", ",", "dst", ",", "overwrite", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "lexists", "(", "dst", ")", "and", "overwrite", ":", "\n", "        ", "os", ".", "remove", "(", "dst", ")", "\n", "", "os", ".", "symlink", "(", "src", ",", "dst", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path._scandir_py35": [[52, 61], ["os.scandir", "os.scandir", "entry.is_file", "filename.endswith"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path.scandir", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path.scandir", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.is_file"], ["", "def", "_scandir_py35", "(", "dir_path", ",", "suffix", "=", "None", ")", ":", "\n", "    ", "for", "entry", "in", "os", ".", "scandir", "(", "dir_path", ")", ":", "\n", "        ", "if", "not", "entry", ".", "is_file", "(", ")", ":", "\n", "            ", "continue", "\n", "", "filename", "=", "entry", ".", "name", "\n", "if", "suffix", "is", "None", ":", "\n", "            ", "yield", "filename", "\n", "", "elif", "filename", ".", "endswith", "(", "suffix", ")", ":", "\n", "            ", "yield", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path._scandir_py": [[63, 71], ["os.listdir", "os.listdir", "os.isfile", "filename.endswith", "os.join"], "function", ["None"], ["", "", "", "def", "_scandir_py", "(", "dir_path", ",", "suffix", "=", "None", ")", ":", "\n", "    ", "for", "filename", "in", "os", ".", "listdir", "(", "dir_path", ")", ":", "\n", "        ", "if", "not", "osp", ".", "isfile", "(", "osp", ".", "join", "(", "dir_path", ",", "filename", ")", ")", ":", "\n", "            ", "continue", "\n", "", "if", "suffix", "is", "None", ":", "\n", "            ", "yield", "filename", "\n", "", "elif", "filename", ".", "endswith", "(", "suffix", ")", ":", "\n", "            ", "yield", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path.scandir": [[73, 80], ["TypeError", "path._scandir_py35", "path._scandir_py", "isinstance"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path._scandir_py35", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path._scandir_py"], ["", "", "", "def", "scandir", "(", "dir_path", ",", "suffix", "=", "None", ")", ":", "\n", "    ", "if", "suffix", "is", "not", "None", "and", "not", "isinstance", "(", "suffix", ",", "(", "str", ",", "tuple", ")", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'\"suffix\" must be a string or tuple of strings'", ")", "\n", "", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "5", ")", ":", "\n", "        ", "return", "_scandir_py35", "(", "dir_path", ",", "suffix", ")", "\n", "", "else", ":", "\n", "        ", "return", "_scandir_py", "(", "dir_path", ",", "suffix", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_str": [[17, 20], ["isinstance"], "function", ["None"], ["# ROI_KEYPOINT_PREDICTOR = Registry()", "\n", "# ROI_MASK_FEATURE_EXTRACTORS = Registry()", "\n", "# ROI_MASK_PREDICTOR = Registry()", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.iter_cast": [[22, 45], ["six.moves.map", "isinstance", "TypeError", "isinstance", "TypeError", "return_type"], "function", ["None"], ["class", "Sequential", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.list_cast": [[47, 53], ["misc.iter_cast"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.iter_cast"], ["\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.tuple_cast": [[55, 61], ["misc.iter_cast"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.iter_cast"], ["        ", "super", "(", "Sequential", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "len", "(", "args", ")", "==", "1", "and", "isinstance", "(", "args", "[", "0", "]", ",", "OrderedDict", ")", ":", "\n", "            ", "for", "key", ",", "module", "in", "args", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "add_module", "(", "key", ",", "module", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "idx", ",", "module", "in", "enumerate", "(", "args", ")", ":", "\n", "                ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "module", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_seq_of": [[63, 85], ["isinstance", "isinstance", "isinstance"], "function", ["None"], ["            ", "if", "sys", ".", "version_info", "<", "(", "3", ",", "6", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"kwargs only supported in py36+\"", ")", "\n", "", "if", "name", "in", "self", ".", "_modules", ":", "\n", "                ", "raise", "ValueError", "(", "\"name exists.\"", ")", "\n", "", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "\n", "", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "not", "(", "-", "len", "(", "self", ")", "<=", "idx", "<", "len", "(", "self", ")", ")", ":", "\n", "            ", "raise", "IndexError", "(", "\"index {} is out of range\"", ".", "format", "(", "idx", ")", ")", "\n", "", "if", "idx", "<", "0", ":", "\n", "            ", "idx", "+=", "len", "(", "self", ")", "\n", "", "it", "=", "iter", "(", "self", ".", "_modules", ".", "values", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "idx", ")", ":", "\n", "            ", "next", "(", "it", ")", "\n", "", "return", "next", "(", "it", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_modules", ")", "\n", "\n", "", "def", "add", "(", "self", ",", "module", ",", "name", "=", "None", ")", ":", "\n", "        ", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "str", "(", "len", "(", "self", ".", "_modules", ")", ")", "\n", "if", "name", "in", "self", ".", "_modules", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_list_of": [[87, 93], ["misc.is_seq_of"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_seq_of"], ["", "", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# i = 0", "\n", "        ", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "# print(i)", "\n", "            ", "input", "=", "module", "(", "input", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_tuple_of": [[95, 101], ["misc.is_seq_of"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_seq_of"], ["", "return", "input", "\n", "\n", "\n", "", "", "class", "GroupNorm", "(", "torch", ".", "nn", ".", "GroupNorm", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_channels", ",", "num_groups", ",", "eps", "=", "1e-5", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_groups", "=", "num_groups", ",", "num_channels", "=", "num_channels", ",", "eps", "=", "eps", ",", "affine", "=", "affine", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.slice_list": [[103, 127], ["range", "isinstance", "TypeError", "len", "out_list.append", "sum", "len", "ValueError", "sum", "len"], "function", ["None"], ["\n", "\n", "", "", "class", "Empty", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Empty", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "return", "args", "[", "0", "]", "\n", "", "elif", "len", "(", "args", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "return", "args", "\n", "\n", "\n", "", "", "def", "get_pos_to_kw_map", "(", "func", ")", ":", "\n", "    ", "pos_to_kw", "=", "{", "}", "\n", "fsig", "=", "inspect", ".", "signature", "(", "func", ")", "\n", "pos", "=", "0", "\n", "for", "name", ",", "info", "in", "fsig", ".", "parameters", ".", "items", "(", ")", ":", "\n", "        ", "if", "info", ".", "kind", "is", "info", ".", "POSITIONAL_OR_KEYWORD", ":", "\n", "            ", "pos_to_kw", "[", "pos", "]", "=", "name", "\n", "", "pos", "+=", "1", "\n", "", "return", "pos_to_kw", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.concat_list": [[129, 139], ["list", "itertools.chain"], "function", ["None"], ["    ", "kw_to_default", "=", "{", "}", "\n", "fsig", "=", "inspect", ".", "signature", "(", "func", ")", "\n", "for", "name", ",", "info", "in", "fsig", ".", "parameters", ".", "items", "(", ")", ":", "\n", "        ", "if", "info", ".", "kind", "is", "info", ".", "POSITIONAL_OR_KEYWORD", ":", "\n", "            ", "if", "info", ".", "default", "is", "not", "info", ".", "empty", ":", "\n", "                ", "kw_to_default", "[", "name", "]", "=", "info", ".", "default", "\n", "", "", "", "return", "kw_to_default", "\n", "\n", "\n", "", "def", "change_default_args", "(", "**", "kwargs", ")", ":", "\n", "    ", "def", "layer_wrapper", "(", "layer_class", ")", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.check_prerequisites": [[141, 178], ["functools.wraps", "isinstance", "print", "RuntimeError", "func", "checker", "missing.append", "msg_tmpl.format"], "function", ["None"], ["            ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kw", ")", ":", "\n", "                ", "pos_to_kw", "=", "get_pos_to_kw_map", "(", "layer_class", ".", "__init__", ")", "\n", "kw_to_pos", "=", "{", "kw", ":", "pos", "for", "pos", ",", "kw", "in", "pos_to_kw", ".", "items", "(", ")", "}", "\n", "for", "key", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", "not", "in", "kw", "and", "kw_to_pos", "[", "key", "]", ">", "len", "(", "args", ")", ":", "\n", "                        ", "kw", "[", "key", "]", "=", "val", "\n", "", "", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kw", ")", "\n", "\n", "", "", "return", "DefaultArgLayer", "\n", "\n", "", "return", "layer_wrapper", "\n", "\n", "\n", "", "def", "get_printer", "(", "msg", ")", ":", "\n", "    ", "\"\"\"This function returns a printer function, that prints information about a  tensor's\n    gradient. Used by register_hook in the backward pass.\n    \"\"\"", "\n", "\n", "def", "printer", "(", "tensor", ")", ":", "\n", "        ", "if", "tensor", ".", "nelement", "(", ")", "==", "1", ":", "\n", "            ", "print", "(", "f\"{msg} {tensor}\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\n", "f\"{msg} shape: {tensor.shape}\"", "\n", "f\" max: {tensor.max()} min: {tensor.min()}\"", "\n", "f\" mean: {tensor.mean()}\"", "\n", ")", "\n", "\n", "", "", "return", "printer", "\n", "\n", "\n", "", "def", "register_hook", "(", "tensor", ",", "msg", ")", ":", "\n", "    ", "\"\"\"Utility function to call retain_grad and Pytorch's register_hook\n    in a single line\n    \"\"\"", "\n", "tensor", ".", "retain_grad", "(", ")", "\n", "tensor", ".", "register_hook", "(", "get_printer", "(", "msg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc._check_py_package": [[180, 187], ["importlib.import_module"], "function", ["None"], ["", "def", "get_paddings_indicator", "(", "actual_num", ",", "max_num", ",", "axis", "=", "0", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc._check_executable": [[189, 194], ["subprocess.call"], "function", ["None"], ["\n", "\n", "actual_num", "=", "torch", ".", "unsqueeze", "(", "actual_num", ",", "axis", "+", "1", ")", "\n", "# tiled_actual_num: [N, M, 1]", "\n", "max_num_shape", "=", "[", "1", "]", "*", "len", "(", "actual_num", ".", "shape", ")", "\n", "max_num_shape", "[", "axis", "+", "1", "]", "=", "-", "1", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.requires_package": [[196, 210], ["misc.check_prerequisites"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.check_prerequisites"], ["max_num_shape", "\n", ")", "\n", "# tiled_actual_num: [[3,3,3,3,3], [4,4,4,4,4], [2,2,2,2,2]]", "\n", "# tiled_max_num: [[0,1,2,3,4], [0,1,2,3,4], [0,1,2,3,4]]", "\n", "paddings_indicator", "=", "actual_num", ".", "int", "(", ")", ">", "max_num", "\n", "# paddings_indicator shape: [batch_size, max_num]", "\n", "return", "paddings_indicator", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.requires_executable": [[212, 222], ["misc.check_prerequisites"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.check_prerequisites"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils.gaussian_radius": [[17, 39], ["numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "min"], "function", ["None"], ["def", "gaussian_radius", "(", "det_size", ",", "min_overlap", "=", "0.5", ")", ":", "\n", "    ", "height", ",", "width", "=", "det_size", "\n", "\n", "a1", "=", "1", "\n", "b1", "=", "(", "height", "+", "width", ")", "\n", "c1", "=", "width", "*", "height", "*", "(", "1", "-", "min_overlap", ")", "/", "(", "1", "+", "min_overlap", ")", "\n", "sq1", "=", "np", ".", "sqrt", "(", "b1", "**", "2", "-", "4", "*", "a1", "*", "c1", ")", "\n", "r1", "=", "(", "b1", "+", "sq1", ")", "/", "2", "\n", "\n", "a2", "=", "4", "\n", "b2", "=", "2", "*", "(", "height", "+", "width", ")", "\n", "c2", "=", "(", "1", "-", "min_overlap", ")", "*", "width", "*", "height", "\n", "sq2", "=", "np", ".", "sqrt", "(", "b2", "**", "2", "-", "4", "*", "a2", "*", "c2", ")", "\n", "r2", "=", "(", "b2", "+", "sq2", ")", "/", "2", "\n", "\n", "a3", "=", "4", "*", "min_overlap", "\n", "b3", "=", "-", "2", "*", "min_overlap", "*", "(", "height", "+", "width", ")", "\n", "c3", "=", "(", "min_overlap", "-", "1", ")", "*", "width", "*", "height", "\n", "sq3", "=", "np", ".", "sqrt", "(", "b3", "**", "2", "-", "4", "*", "a3", "*", "c3", ")", "\n", "r3", "=", "(", "b3", "+", "sq3", ")", "/", "2", "\n", "\n", "return", "min", "(", "r1", ",", "r2", ",", "r3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils.gaussian2D": [[40, 47], ["numpy.exp", "np.exp.max", "numpy.finfo"], "function", ["None"], ["", "def", "gaussian2D", "(", "shape", ",", "sigma", "=", "1", ")", ":", "\n", "    ", "m", ",", "n", "=", "[", "(", "ss", "-", "1.", ")", "/", "2.", "for", "ss", "in", "shape", "]", "\n", "y", ",", "x", "=", "np", ".", "ogrid", "[", "-", "m", ":", "m", "+", "1", ",", "-", "n", ":", "n", "+", "1", "]", "\n", "\n", "h", "=", "np", ".", "exp", "(", "-", "(", "x", "*", "x", "+", "y", "*", "y", ")", "/", "(", "2", "*", "sigma", "*", "sigma", ")", ")", "\n", "h", "[", "h", "<", "np", ".", "finfo", "(", "h", ".", "dtype", ")", ".", "eps", "*", "h", ".", "max", "(", ")", "]", "=", "0", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils.draw_umich_gaussian": [[49, 65], ["center_utils.gaussian2D", "int", "int", "min", "min", "min", "min", "numpy.maximum", "min", "min"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils.gaussian2D"], ["", "def", "draw_umich_gaussian", "(", "heatmap", ",", "center", ",", "radius", ",", "k", "=", "1", ")", ":", "\n", "    ", "diameter", "=", "2", "*", "radius", "+", "1", "\n", "gaussian", "=", "gaussian2D", "(", "(", "diameter", ",", "diameter", ")", ",", "sigma", "=", "diameter", "/", "6", ")", "\n", "\n", "x", ",", "y", "=", "int", "(", "center", "[", "0", "]", ")", ",", "int", "(", "center", "[", "1", "]", ")", "\n", "\n", "height", ",", "width", "=", "heatmap", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "left", ",", "right", "=", "min", "(", "x", ",", "radius", ")", ",", "min", "(", "width", "-", "x", ",", "radius", "+", "1", ")", "\n", "top", ",", "bottom", "=", "min", "(", "y", ",", "radius", ")", ",", "min", "(", "height", "-", "y", ",", "radius", "+", "1", ")", "\n", "\n", "masked_heatmap", "=", "heatmap", "[", "y", "-", "top", ":", "y", "+", "bottom", ",", "x", "-", "left", ":", "x", "+", "right", "]", "\n", "masked_gaussian", "=", "gaussian", "[", "radius", "-", "top", ":", "radius", "+", "bottom", ",", "radius", "-", "left", ":", "radius", "+", "right", "]", "\n", "if", "min", "(", "masked_gaussian", ".", "shape", ")", ">", "0", "and", "min", "(", "masked_heatmap", ".", "shape", ")", ">", "0", ":", "# TODO debug", "\n", "        ", "np", ".", "maximum", "(", "masked_heatmap", ",", "masked_gaussian", "*", "k", ",", "out", "=", "masked_heatmap", ")", "\n", "", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils._gather_feat": [[66, 75], ["feat.view.size", "ind.unsqueeze().expand.unsqueeze().expand", "feat.view.gather", "ind.unsqueeze().expand.size", "ind.unsqueeze().expand.size", "mask.unsqueeze().expand_as.unsqueeze().expand_as", "feat.view.view", "ind.unsqueeze().expand.unsqueeze", "mask.unsqueeze().expand_as.unsqueeze"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["", "def", "_gather_feat", "(", "feat", ",", "ind", ",", "mask", "=", "None", ")", ":", "\n", "    ", "dim", "=", "feat", ".", "size", "(", "2", ")", "\n", "ind", "=", "ind", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "ind", ".", "size", "(", "0", ")", ",", "ind", ".", "size", "(", "1", ")", ",", "dim", ")", "\n", "feat", "=", "feat", ".", "gather", "(", "1", ",", "ind", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "feat", ")", "\n", "feat", "=", "feat", "[", "mask", "]", "\n", "feat", "=", "feat", ".", "view", "(", "-", "1", ",", "dim", ")", "\n", "", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils._transpose_and_gather_feat": [[76, 81], ["_gather_feat.permute().contiguous", "_gather_feat.view", "center_utils._gather_feat", "_gather_feat.size", "_gather_feat.size", "_gather_feat.permute"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils._gather_feat", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["", "def", "_transpose_and_gather_feat", "(", "feat", ",", "ind", ")", ":", "\n", "    ", "feat", "=", "feat", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "feat", "=", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ",", "feat", ".", "size", "(", "3", ")", ")", "\n", "feat", "=", "_gather_feat", "(", "feat", ",", "ind", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils._circle_nms": [[82, 91], ["torch.from_numpy().long().to", "numpy.array", "circle_nms_jit.circle_nms", "torch.from_numpy().long", "boxes.cpu().numpy", "torch.from_numpy", "boxes.cpu"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.circle_nms_jit.circle_nms"], ["", "def", "_circle_nms", "(", "boxes", ",", "min_radius", ",", "post_max_size", "=", "83", ")", ":", "\n", "    ", "\"\"\"\n    NMS according to center distance\n    \"\"\"", "\n", "keep", "=", "np", ".", "array", "(", "circle_nms", "(", "boxes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "thresh", "=", "min_radius", ")", ")", "[", ":", "post_max_size", "]", "\n", "\n", "keep", "=", "torch", ".", "from_numpy", "(", "keep", ")", ".", "long", "(", ")", ".", "to", "(", "boxes", ".", "device", ")", "\n", "\n", "return", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils.bilinear_interpolate_torch": [[93, 123], ["torch.floor().long", "torch.floor().long", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.t", "torch.floor", "torch.floor", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t"], "function", ["None"], ["", "def", "bilinear_interpolate_torch", "(", "im", ",", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        im: (H, W, C) [y, x]\n        x: (N)\n        y: (N)\n    Returns:\n    \"\"\"", "\n", "x0", "=", "torch", ".", "floor", "(", "x", ")", ".", "long", "(", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "\n", "y0", "=", "torch", ".", "floor", "(", "y", ")", ".", "long", "(", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "\n", "x0", "=", "torch", ".", "clamp", "(", "x0", ",", "0", ",", "im", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "x1", "=", "torch", ".", "clamp", "(", "x1", ",", "0", ",", "im", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "y0", "=", "torch", ".", "clamp", "(", "y0", ",", "0", ",", "im", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "y1", "=", "torch", ".", "clamp", "(", "y1", ",", "0", ",", "im", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "Ia", "=", "im", "[", "y0", ",", "x0", "]", "\n", "Ib", "=", "im", "[", "y1", ",", "x0", "]", "\n", "Ic", "=", "im", "[", "y0", ",", "x1", "]", "\n", "Id", "=", "im", "[", "y1", ",", "x1", "]", "\n", "\n", "wa", "=", "(", "x1", ".", "type_as", "(", "x", ")", "-", "x", ")", "*", "(", "y1", ".", "type_as", "(", "y", ")", "-", "y", ")", "\n", "wb", "=", "(", "x1", ".", "type_as", "(", "x", ")", "-", "x", ")", "*", "(", "y", "-", "y0", ".", "type_as", "(", "y", ")", ")", "\n", "wc", "=", "(", "x", "-", "x0", ".", "type_as", "(", "x", ")", ")", "*", "(", "y1", ".", "type_as", "(", "y", ")", "-", "y", ")", "\n", "wd", "=", "(", "x", "-", "x0", ".", "type_as", "(", "x", ")", ")", "*", "(", "y", "-", "y0", ".", "type_as", "(", "y", ")", ")", "\n", "ans", "=", "torch", ".", "t", "(", "(", "torch", ".", "t", "(", "Ia", ")", "*", "wa", ")", ")", "+", "torch", ".", "t", "(", "torch", ".", "t", "(", "Ib", ")", "*", "wb", ")", "+", "torch", ".", "t", "(", "torch", ".", "t", "(", "Ic", ")", "*", "wc", ")", "+", "torch", ".", "t", "(", "torch", ".", "t", "(", "Id", ")", "*", "wd", ")", "\n", "return", "ans", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.dist_utils.DistOptimizerHook.__init__": [[46, 50], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "grad_clip", "=", "None", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "coalesce", "=", "coalesce", "\n", "self", ".", "bucket_size_mb", "=", "bucket_size_mb", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.dist_utils.DistOptimizerHook.after_train_iter": [[51, 58], ["runner.optimizer.zero_grad", "runner.outputs[].backward", "dist_utils.allreduce_grads", "runner.optimizer.step", "runner.model.parameters", "dist_utils.DistOptimizerHook.clip_grads", "runner.model.parameters"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.zero_grad", "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConvFunction.backward", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.dist_utils.allreduce_grads", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.optimizer.OptimizerHook.clip_grads"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "runner", ".", "outputs", "[", "\"loss\"", "]", ".", "backward", "(", ")", "\n", "allreduce_grads", "(", "runner", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "coalesce", ",", "self", ".", "bucket_size_mb", ")", "\n", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "            ", "self", ".", "clip_grads", "(", "runner", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "runner", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.dist_utils._allreduce_coalesced": [[8, 29], ["torch._utils._take_tensors", "collections.OrderedDict", "buckets.values.values", "torch._utils._flatten_dense_tensors", "torch.all_reduce", "torch._utils._flatten_dense_tensors.div_", "zip", "tensor.type", "buckets[].append", "torch._utils._unflatten_dense_tensors", "tensor.copy_"], "function", ["None"], ["def", "_allreduce_coalesced", "(", "tensors", ",", "world_size", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "if", "bucket_size_mb", ">", "0", ":", "\n", "        ", "bucket_size_bytes", "=", "bucket_size_mb", "*", "1024", "*", "1024", "\n", "buckets", "=", "_take_tensors", "(", "tensors", ",", "bucket_size_bytes", ")", "\n", "", "else", ":", "\n", "        ", "buckets", "=", "OrderedDict", "(", ")", "\n", "for", "tensor", "in", "tensors", ":", "\n", "            ", "tp", "=", "tensor", ".", "type", "(", ")", "\n", "if", "tp", "not", "in", "buckets", ":", "\n", "                ", "buckets", "[", "tp", "]", "=", "[", "]", "\n", "", "buckets", "[", "tp", "]", ".", "append", "(", "tensor", ")", "\n", "", "buckets", "=", "buckets", ".", "values", "(", ")", "\n", "\n", "", "for", "bucket", "in", "buckets", ":", "\n", "        ", "flat_tensors", "=", "_flatten_dense_tensors", "(", "bucket", ")", "\n", "dist", ".", "all_reduce", "(", "flat_tensors", ")", "\n", "flat_tensors", ".", "div_", "(", "world_size", ")", "\n", "for", "tensor", ",", "synced", "in", "zip", "(", "\n", "bucket", ",", "_unflatten_dense_tensors", "(", "flat_tensors", ",", "bucket", ")", "\n", ")", ":", "\n", "            ", "tensor", ".", "copy_", "(", "synced", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.dist_utils.allreduce_grads": [[31, 43], ["torch.get_world_size", "dist_utils._allreduce_coalesced", "torch.all_reduce", "tensor.div_"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.dist_utils._allreduce_coalesced"], ["", "", "", "def", "allreduce_grads", "(", "params", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "grads", "=", "[", "\n", "param", ".", "grad", ".", "data", "\n", "for", "param", "in", "params", "\n", "if", "param", ".", "requires_grad", "and", "param", ".", "grad", "is", "not", "None", "\n", "]", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "coalesce", ":", "\n", "        ", "_allreduce_coalesced", "(", "grads", ",", "world_size", ",", "bucket_size_mb", ")", "\n", "", "else", ":", "\n", "        ", "for", "tensor", "in", "grads", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "tensor", ".", "div_", "(", "world_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.circle_nms_jit.circle_nms": [[4, 29], ["numba.jit", "[].astype", "numpy.zeros", "range", "keep.append", "range", "scores.argsort"], "function", ["None"], ["@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "circle_nms", "(", "dets", ",", "thresh", ")", ":", "\n", "    ", "x1", "=", "dets", "[", ":", ",", "0", "]", "\n", "y1", "=", "dets", "[", ":", ",", "1", "]", "\n", "scores", "=", "dets", "[", ":", ",", "2", "]", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "# highest->lowest", "\n", "ndets", "=", "dets", ".", "shape", "[", "0", "]", "\n", "suppressed", "=", "np", ".", "zeros", "(", "(", "ndets", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "keep", "=", "[", "]", "\n", "for", "_i", "in", "range", "(", "ndets", ")", ":", "\n", "        ", "i", "=", "order", "[", "_i", "]", "# start with highest score box", "\n", "if", "suppressed", "[", "i", "]", "==", "1", ":", "# if any box have enough iou with this, remove it", "\n", "            ", "continue", "\n", "", "keep", ".", "append", "(", "i", ")", "\n", "for", "_j", "in", "range", "(", "_i", "+", "1", ",", "ndets", ")", ":", "\n", "            ", "j", "=", "order", "[", "_j", "]", "\n", "if", "suppressed", "[", "j", "]", "==", "1", ":", "\n", "                ", "continue", "\n", "# calculate center distance between i and j box", "\n", "", "dist", "=", "(", "x1", "[", "i", "]", "-", "x1", "[", "j", "]", ")", "**", "2", "+", "(", "y1", "[", "i", "]", "-", "y1", "[", "j", "]", ")", "**", "2", "\n", "\n", "# ovr = inter / areas[j]", "\n", "if", "dist", "<=", "thresh", ":", "\n", "                ", "suppressed", "[", "j", "]", "=", "1", "\n", "", "", "", "return", "keep", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.tensor2imgs": [[8, 18], ["tensor.size", "numpy.array", "numpy.array", "range", "tensor[].cpu().numpy().transpose", "det3d.torchie.imdenormalize().astype", "imgs.append", "numpy.ascontiguousarray", "tensor[].cpu().numpy", "det3d.torchie.imdenormalize", "tensor[].cpu"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["import", "torch", "\n", "\n", "# from lib.models.backbone.utils import Registry", "\n", "#", "\n", "# BACKBONES = Registry()", "\n", "# RPN_HEADS = Registry()", "\n", "# ROI_BOX_FEATURE_EXTRACTORS = Registry()", "\n", "# ROI_BOX_PREDICTOR = Registry()", "\n", "# ROI_KEYPOINT_FEATURE_EXTRACTORS = Registry()", "\n", "# ROI_KEYPOINT_PREDICTOR = Registry()", "\n", "# ROI_MASK_FEATURE_EXTRACTORS = Registry()", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.multi_apply": [[20, 24], ["six.moves.map", "tuple", "functools.partial", "six.moves.map", "six.moves.zip"], "function", ["None"], ["\n", "\n", "class", "Sequential", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.unmap": [[26, 37], ["data.dim", "data.new_full", "data.new_full", "data.size"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.dim", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.pybind11_build.Pybind11Link.__init__": [[13, 47], ["subprocess.check_output().decode().strip", "command.Gpp.__init__", "subprocess.check_output().decode", "subprocess.check_output"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "sources", ",", "\n", "target", ",", "\n", "std", "=", "\"c++11\"", ",", "\n", "includes", ":", "list", "=", "None", ",", "\n", "defines", ":", "dict", "=", "None", ",", "\n", "cflags", ":", "str", "=", "None", ",", "\n", "libraries", ":", "dict", "=", "None", ",", "\n", "lflags", ":", "str", "=", "None", ",", "\n", "extra_cflags", ":", "str", "=", "None", ",", "\n", "extra_lflags", ":", "str", "=", "None", ",", "\n", "build_directory", ":", "str", "=", "None", ",", "\n", ")", ":", "\n", "        ", "pb11_includes", "=", "(", "\n", "subprocess", ".", "check_output", "(", "\"python3 -m pybind11 --includes\"", ",", "shell", "=", "True", ")", "\n", ".", "decode", "(", "\"utf8\"", ")", "\n", ".", "strip", "(", "\"\\n\"", ")", "\n", ")", "\n", "cflags", "=", "cflags", "or", "\"-fPIC -O3 \"", "\n", "cflags", "+=", "pb11_includes", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "sources", ",", "\n", "target", ",", "\n", "std", ",", "\n", "includes", ",", "\n", "defines", ",", "\n", "cflags", ",", "\n", "link", "=", "True", ",", "\n", "libraries", "=", "libraries", ",", "\n", "lflags", "=", "lflags", ",", "\n", "extra_cflags", "=", "extra_cflags", ",", "\n", "extra_lflags", "=", "extra_lflags", ",", "\n", "build_directory", "=", "build_directory", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.pybind11_build.Pybind11CUDALink.__init__": [[51, 84], ["subprocess.check_output().decode().strip", "command.CUDALink.__init__", "subprocess.check_output().decode", "subprocess.check_output"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "sources", ",", "\n", "target", ",", "\n", "std", "=", "\"c++11\"", ",", "\n", "includes", ":", "list", "=", "None", ",", "\n", "defines", ":", "dict", "=", "None", ",", "\n", "cflags", ":", "str", "=", "None", ",", "\n", "libraries", ":", "dict", "=", "None", ",", "\n", "lflags", ":", "str", "=", "None", ",", "\n", "extra_cflags", ":", "str", "=", "None", ",", "\n", "extra_lflags", ":", "str", "=", "None", ",", "\n", "build_directory", ":", "str", "=", "None", ",", "\n", ")", ":", "\n", "        ", "pb11_includes", "=", "(", "\n", "subprocess", ".", "check_output", "(", "\"python3 -m pybind11 --includes\"", ",", "shell", "=", "True", ")", "\n", ".", "decode", "(", "\"utf8\"", ")", "\n", ".", "strip", "(", "\"\\n\"", ")", "\n", ")", "\n", "cflags", "=", "cflags", "or", "\"-fPIC -O3 \"", "\n", "cflags", "+=", "pb11_includes", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "sources", ",", "\n", "target", ",", "\n", "std", ",", "\n", "includes", ",", "\n", "defines", ",", "\n", "cflags", ",", "\n", "libraries", "=", "libraries", ",", "\n", "lflags", "=", "lflags", ",", "\n", "extra_cflags", "=", "extra_cflags", ",", "\n", "extra_lflags", "=", "extra_lflags", ",", "\n", "build_directory", "=", "build_directory", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.pybind11_build.load_pb11": [[87, 129], ["cmd_groups.append", "det3d.utils.loader.import_file", "det3d.utils.find.find_cuda_device_arch", "str", "ValueError", "cmd_groups.append", "cmd_groups.append", "command.compile_libraries", "cmds.append", "outs.append", "main_sources.append", "command.Nvcc", "command.out", "pybind11_build.Pybind11CUDALink", "pybind11_build.Pybind11Link", "command.out"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.loader.import_file", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.find.find_cuda_device_arch", "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.compile_libraries", "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.out", "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.out"], ["", "", "def", "load_pb11", "(", "\n", "sources", ",", "\n", "target", ",", "\n", "cwd", "=", "\".\"", ",", "\n", "cuda", "=", "False", ",", "\n", "arch", "=", "None", ",", "\n", "num_workers", "=", "4", ",", "\n", "includes", ":", "list", "=", "None", ",", "\n", "build_directory", "=", "None", ",", "\n", "compiler", "=", "\"g++\"", ",", "\n", ")", ":", "\n", "    ", "cmd_groups", "=", "[", "]", "\n", "cmds", "=", "[", "]", "\n", "outs", "=", "[", "]", "\n", "main_sources", "=", "[", "]", "\n", "if", "arch", "is", "None", ":", "\n", "        ", "arch", "=", "find_cuda_device_arch", "(", ")", "\n", "\n", "", "for", "s", "in", "sources", ":", "\n", "        ", "s", "=", "str", "(", "s", ")", "\n", "if", "\".cu\"", "in", "s", "or", "\".cu.cc\"", "in", "s", ":", "\n", "            ", "assert", "cuda", "is", "True", ",", "\"cuda must be true if contain cuda file\"", "\n", "cmds", ".", "append", "(", "Nvcc", "(", "s", ",", "out", "(", "s", ")", ",", "arch", ")", ")", "\n", "outs", ".", "append", "(", "out", "(", "s", ")", ")", "\n", "", "else", ":", "\n", "            ", "main_sources", ".", "append", "(", "s", ")", "\n", "\n", "", "", "if", "cuda", "is", "True", "and", "arch", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"you must specify arch if sources contains\"", "\" cuda files\"", ")", "\n", "", "cmd_groups", ".", "append", "(", "cmds", ")", "\n", "if", "cuda", ":", "\n", "        ", "cmd_groups", ".", "append", "(", "\n", "[", "Pybind11CUDALink", "(", "outs", "+", "main_sources", ",", "target", ",", "includes", "=", "includes", ")", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "cmd_groups", ".", "append", "(", "\n", "[", "Pybind11Link", "(", "outs", "+", "main_sources", ",", "target", ",", "includes", "=", "includes", ")", "]", "\n", ")", "\n", "", "for", "cmds", "in", "cmd_groups", ":", "\n", "        ", "compile_libraries", "(", "cmds", ",", "cwd", ",", "num_workers", "=", "num_workers", ",", "compiler", "=", "compiler", ")", "\n", "\n", "", "return", "import_file", "(", "target", ",", "add_to_sys", "=", "False", ",", "disable_warning", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Gpp.__init__": [[15, 57], ["str", "isinstance", "pathlib.Path", "pathlib.Path", "str", "str.is_absolute", "str", "pathlib.Path().is_absolute", "new_sources.append", "new_sources.append", "str", "pathlib.Path"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "sources", ",", "\n", "target", ",", "\n", "std", "=", "\"c++11\"", ",", "\n", "includes", ":", "list", "=", "None", ",", "\n", "defines", ":", "dict", "=", "None", ",", "\n", "cflags", ":", "str", "=", "None", ",", "\n", "compiler", "=", "\"g++\"", ",", "\n", "link", "=", "False", ",", "\n", "libraries", ":", "dict", "=", "None", ",", "\n", "lflags", ":", "str", "=", "None", ",", "\n", "extra_cflags", ":", "str", "=", "None", ",", "\n", "extra_lflags", ":", "str", "=", "None", ",", "\n", "build_directory", ":", "str", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "sources", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "sources", "=", "[", "sources", "]", "\n", "", "if", "build_directory", "is", "not", "None", ":", "\n", "            ", "build_directory", "=", "Path", "(", "build_directory", ")", "\n", "new_sources", "=", "[", "]", "\n", "for", "p", "in", "sources", ":", "\n", "                ", "if", "not", "Path", "(", "p", ")", ".", "is_absolute", "(", ")", ":", "\n", "                    ", "new_sources", ".", "append", "(", "str", "(", "build_directory", "/", "p", ")", ")", "\n", "", "else", ":", "\n", "                    ", "new_sources", ".", "append", "(", "p", ")", "\n", "", "", "sources", "=", "new_sources", "\n", "target", "=", "Path", "(", "target", ")", "\n", "if", "not", "target", ".", "is_absolute", "(", ")", ":", "\n", "                ", "target", "=", "str", "(", "build_directory", "/", "target", ")", "\n", "", "", "self", ".", "sources", "=", "[", "str", "(", "p", ")", "for", "p", "in", "sources", "]", "\n", "self", ".", "target", "=", "str", "(", "target", ")", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "includes", "=", "includes", "or", "[", "]", "\n", "self", ".", "cflags", "=", "cflags", "or", "\"-fPIC -O3\"", "\n", "self", ".", "defines", "=", "defines", "or", "{", "}", "\n", "self", ".", "compiler", "=", "compiler", "\n", "self", ".", "link", "=", "link", "\n", "self", ".", "libraries", "=", "libraries", "or", "{", "}", "\n", "self", ".", "lflags", "=", "lflags", "or", "\"\"", "\n", "self", ".", "extra_cflags", "=", "extra_cflags", "or", "\"\"", "\n", "self", ".", "extra_lflags", "=", "extra_lflags", "or", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Gpp.shell": [[58, 81], ["re.sub", "command.Gpp.defines.items", "command.Gpp.libraries.items"], "methods", ["None"], ["", "def", "shell", "(", "self", ",", "target", ":", "str", "=", "None", ",", "compiler", ":", "str", "=", "None", ")", ":", "\n", "        ", "defines", "=", "[", "f\"-D {n}={v}\"", "for", "n", ",", "v", "in", "self", ".", "defines", ".", "items", "(", ")", "]", "\n", "includes", "=", "[", "f\"-I{inc}\"", "for", "inc", "in", "self", ".", "includes", "]", "\n", "libraries", "=", "[", "\n", "f\"-L{n} {' '.join(['-l' + l for l in v])}\"", "\n", "for", "n", ",", "v", "in", "self", ".", "libraries", ".", "items", "(", ")", "\n", "]", "\n", "compiler", "=", "compiler", "or", "self", ".", "compiler", "\n", "string", "=", "f\"{compiler} -std={self.std} \"", "\n", "if", "self", ".", "link", ":", "\n", "            ", "string", "+=", "\" -shared \"", "\n", "", "else", ":", "\n", "            ", "string", "+=", "\" -c \"", "\n", "", "target", "=", "target", "or", "self", ".", "target", "\n", "string", "+=", "(", "\n", "f\"-o {target} {' '.join(self.sources)} \"", "\n", "f\"{' '.join(defines)} \"", "\n", "f\"{' '.join(includes)} \"", "\n", "f\"{self.cflags} {self.extra_cflags}\"", "\n", "f\"{' '.join(libraries)} \"", "\n", "f\"{self.lflags} {self.extra_lflags}\"", "\n", ")", "\n", "return", "re", ".", "sub", "(", "r\" +\"", ",", "r\" \"", ",", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Link.__init__": [[84, 102], ["str", "isinstance", "pathlib.Path", "pathlib.Path", "str.is_absolute", "str", "str", "pathlib.Path().is_absolute", "new_outs.append", "new_outs.append", "str", "pathlib.Path"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "outs", ",", "target", ",", "compiler", "=", "\"ld\"", ",", "build_directory", ":", "str", "=", "None", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "outs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "outs", "=", "[", "outs", "]", "\n", "", "if", "build_directory", "is", "not", "None", ":", "\n", "            ", "build_directory", "=", "Path", "(", "build_directory", ")", "\n", "new_outs", "=", "[", "]", "\n", "for", "p", "in", "outs", ":", "\n", "                ", "if", "not", "Path", "(", "p", ")", ".", "is_absolute", "(", ")", ":", "\n", "                    ", "new_outs", ".", "append", "(", "str", "(", "build_directory", "/", "p", ")", ")", "\n", "", "else", ":", "\n", "                    ", "new_outs", ".", "append", "(", "p", ")", "\n", "", "", "outs", "=", "new_outs", "\n", "target", "=", "Path", "(", "target", ")", "\n", "if", "target", ".", "is_absolute", "(", ")", ":", "\n", "                ", "target", "=", "str", "(", "build_directory", "/", "target", ")", "\n", "", "", "self", ".", "outs", "=", "[", "str", "(", "p", ")", "for", "p", "in", "outs", "]", "\n", "self", ".", "target", "=", "str", "(", "target", ")", "\n", "self", ".", "compiler", "=", "compiler", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Link.shell": [[103, 109], ["None"], "methods", ["None"], ["", "def", "shell", "(", "self", ",", "target", ":", "str", "=", "None", ")", ":", "\n", "        ", "string", "=", "f\"{self.compiler} -r \"", "\n", "if", "target", "is", "None", ":", "\n", "            ", "target", "=", "self", ".", "target", "\n", "", "string", "+=", "f\"-o {target} {' '.join(self.outs)} \"", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Nvcc.__init__": [[112, 152], ["command.Gpp.__init__", "det3d.utils.find.find_cuda_device_arch", "det3d.utils.find.find_cuda", "str", "ValueError", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.find.find_cuda_device_arch", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.find.find_cuda"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "sources", ",", "\n", "target", ",", "\n", "arch", "=", "None", ",", "\n", "std", "=", "\"c++11\"", ",", "\n", "includes", ":", "list", "=", "None", ",", "\n", "defines", ":", "dict", "=", "None", ",", "\n", "cflags", ":", "str", "=", "None", ",", "\n", "extra_cflags", ":", "str", "=", "None", ",", "\n", "extra_lflags", ":", "str", "=", "None", ",", "\n", "build_directory", ":", "str", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "arch", "is", "None", ":", "\n", "            ", "arch", "=", "find_cuda_device_arch", "(", ")", "\n", "if", "arch", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"you must specify arch if use cuda.\"", ")", "\n", "\n", "", "", "cflags", "=", "(", "\n", "cflags", "or", "f\"-x cu -Xcompiler -fPIC -arch={arch} --expt-relaxed-constexpr\"", "\n", ")", "\n", "try", ":", "\n", "            ", "cuda_home", "=", "find_cuda", "(", ")", "\n", "", "except", ":", "\n", "            ", "cuda_home", "=", "None", "\n", "", "if", "cuda_home", "is", "not", "None", ":", "\n", "            ", "cuda_include", "=", "Path", "(", "cuda_home", ")", "/", "\"include\"", "\n", "", "includes", "=", "includes", "or", "[", "]", "\n", "includes", "+=", "[", "str", "(", "cuda_include", ")", "]", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "sources", ",", "\n", "target", ",", "\n", "std", ",", "\n", "includes", ",", "\n", "defines", ",", "\n", "cflags", ",", "\n", "compiler", "=", "\"nvcc\"", ",", "\n", "extra_cflags", "=", "extra_cflags", ",", "\n", "extra_lflags", "=", "extra_lflags", ",", "\n", "build_directory", "=", "build_directory", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.CUDALink.__init__": [[156, 197], ["command.Gpp.__init__", "det3d.utils.find.find_cuda", "pathlib.Path", "str", "pathlib.Path", "str"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.find.find_cuda"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "sources", ",", "\n", "target", ",", "\n", "std", "=", "\"c++11\"", ",", "\n", "includes", ":", "list", "=", "None", ",", "\n", "defines", ":", "dict", "=", "None", ",", "\n", "cflags", ":", "str", "=", "None", ",", "\n", "libraries", ":", "dict", "=", "None", ",", "\n", "lflags", ":", "str", "=", "None", ",", "\n", "extra_cflags", ":", "str", "=", "None", ",", "\n", "extra_lflags", ":", "str", "=", "None", ",", "\n", "build_directory", ":", "str", "=", "None", ",", "\n", ")", ":", "\n", "        ", "includes", "=", "includes", "or", "[", "]", "\n", "defines", "=", "defines", "or", "{", "}", "\n", "libraries", "=", "libraries", "or", "{", "}", "\n", "cflags", "=", "cflags", "or", "\"-fPIC -O3\"", "\n", "try", ":", "\n", "            ", "cuda_home", "=", "find_cuda", "(", ")", "\n", "", "except", ":", "\n", "            ", "cuda_home", "=", "None", "\n", "", "if", "cuda_home", "is", "not", "None", ":", "\n", "            ", "cuda_include", "=", "Path", "(", "cuda_home", ")", "/", "\"include\"", "\n", "includes", "+=", "[", "str", "(", "cuda_include", ")", "]", "\n", "cuda_lib_path", "=", "Path", "(", "cuda_home", ")", "/", "\"lib64\"", "\n", "cuda_libs", "=", "{", "str", "(", "cuda_lib_path", ")", ":", "[", "\"cublas\"", ",", "\"cudart\"", "]", "}", "\n", "libraries", "=", "{", "**", "libraries", ",", "**", "cuda_libs", "}", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "sources", ",", "\n", "target", ",", "\n", "std", ",", "\n", "includes", ",", "\n", "defines", ",", "\n", "cflags", ",", "\n", "link", "=", "True", ",", "\n", "libraries", "=", "libraries", ",", "\n", "lflags", "=", "lflags", ",", "\n", "extra_cflags", "=", "extra_cflags", ",", "\n", "extra_lflags", "=", "extra_lflags", ",", "\n", "build_directory", "=", "build_directory", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.__init__": [[207, 212], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "prev", "=", "[", "]", "\n", "self", ".", "next", "=", "[", "]", "\n", "self", ".", "state", "=", "NodeState", ".", "Normal", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.__call__": [[213, 218], ["command.Node.prev.append", "node.next.append"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "nodes", ")", ":", "\n", "        ", "for", "node", "in", "nodes", ":", "\n", "            ", "self", ".", "prev", ".", "append", "(", "node", ")", "\n", "node", ".", "next", ".", "append", "(", "self", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node._eval": [[219, 221], ["None"], "methods", ["None"], ["", "def", "_eval", "(", "self", ",", "*", "args", ",", "**", "kw", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.eval": [[222, 234], ["command.Node._eval", "p.eval"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.TargetNode._eval", "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.eval"], ["", "def", "eval", "(", "self", ",", "*", "args", ",", "**", "kw", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "prev", ":", "\n", "            ", "if", "not", "p", ".", "eval", "(", "*", "args", ",", "**", "kw", ")", ":", "\n", "                ", "self", ".", "state", "=", "NodeState", ".", "Error", "\n", "return", "False", "\n", "", "", "if", "self", ".", "state", "==", "NodeState", ".", "Normal", ":", "\n", "            ", "if", "self", ".", "_eval", "(", "*", "args", ",", "**", "kw", ")", ":", "\n", "                ", "self", ".", "state", "=", "NodeState", ".", "Evaled", "\n", "", "else", ":", "\n", "                ", "self", ".", "state", "=", "NodeState", ".", "Error", "\n", "return", "True", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.reset": [[235, 241], ["node.reset"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "NodeState", ".", "Normal", "\n", "self", ".", "prev", "=", "[", "]", "\n", "self", ".", "next", "=", "[", "]", "\n", "for", "node", "in", "self", ".", "prev", ":", "\n", "            ", "node", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.TargetNode.__init__": [[244, 250], ["command.Node.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "srcs", ",", "hdrs", ",", "deps", ",", "copts", ",", "name", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", ")", "\n", "self", ".", "srcs", "=", "srcs", "\n", "self", ".", "hdrs", "=", "hdrs", "\n", "self", ".", "deps", "=", "deps", "\n", "self", ".", "copts", "=", "copts", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.TargetNode._eval": [[251, 253], ["None"], "methods", ["None"], ["", "def", "_eval", "(", "self", ",", "executor", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.compile_func": [[255, 268], ["print", "subprocess.run", "isinstance", "cmd.shell", "cmd.shell", "str", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.run", "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Link.shell", "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Link.shell"], ["", "", "def", "compile_func", "(", "cmd", ",", "code_folder", ",", "compiler", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "cmd", ",", "(", "Link", ",", "Nvcc", ")", ")", ":", "\n", "        ", "shell", "=", "cmd", ".", "shell", "(", "compiler", "=", "compiler", ")", "\n", "", "else", ":", "\n", "        ", "shell", "=", "cmd", ".", "shell", "(", ")", "\n", "", "print", "(", "shell", ")", "\n", "cwd", "=", "None", "\n", "if", "code_folder", "is", "not", "None", ":", "\n", "        ", "cwd", "=", "str", "(", "code_folder", ")", "\n", "", "ret", "=", "subprocess", ".", "run", "(", "shell", ",", "shell", "=", "True", ",", "cwd", "=", "cwd", ")", "\n", "if", "ret", ".", "returncode", "!=", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"compile failed with retcode\"", ",", "ret", ".", "returncode", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.compile_libraries": [[270, 289], ["any", "cmds.clear", "min", "map", "cmds.clear", "len", "multiprocessing.cpu_count", "functools.partial", "concurrent.futures.ProcessPoolExecutor", "functools.partial", "pool.map"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.clear", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.clear"], ["", "def", "compile_libraries", "(", "cmds", ",", "code_folder", "=", "None", ",", "compiler", ":", "str", "=", "None", ",", "num_workers", "=", "-", "1", ")", ":", "\n", "    ", "if", "num_workers", "==", "-", "1", ":", "\n", "        ", "num_workers", "=", "min", "(", "len", "(", "cmds", ")", ",", "multiprocessing", ".", "cpu_count", "(", ")", ")", "\n", "# for cmd in cmds:", "\n", "#     print(cmd.shell())", "\n", "", "if", "num_workers", "==", "0", ":", "\n", "        ", "rets", "=", "map", "(", "\n", "partial", "(", "compile_func", ",", "code_folder", "=", "code_folder", ",", "compiler", "=", "compiler", ")", ",", "cmds", "\n", ")", "\n", "", "else", ":", "\n", "        ", "with", "ProcessPoolExecutor", "(", "num_workers", ")", "as", "pool", ":", "\n", "            ", "func", "=", "partial", "(", "compile_func", ",", "code_folder", "=", "code_folder", ",", "compiler", "=", "compiler", ")", "\n", "rets", "=", "pool", ".", "map", "(", "func", ",", "cmds", ")", "\n", "\n", "", "", "if", "any", "(", "[", "r", ".", "returncode", "!=", "0", "for", "r", "in", "rets", "]", ")", ":", "\n", "        ", "cmds", ".", "clear", "(", ")", "\n", "return", "False", "\n", "", "cmds", ".", "clear", "(", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.out": [[291, 293], ["pathlib.Path", "pathlib.Path"], "function", ["None"], ["", "def", "out", "(", "path", ")", ":", "\n", "    ", "return", "Path", "(", "path", ")", ".", "parent", "/", "(", "Path", "(", "path", ")", ".", "stem", "+", "\".o\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dist.logger.setup_logger": [[7, 27], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join"], "function", ["None"], ["def", "setup_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ",", "filename", "=", "\"log.txt\"", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# don't log results for the non-master process", "\n", "if", "distributed_rank", ">", "0", ":", "\n", "        ", "return", "logger", "\n", "\n", "", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "filename", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dist.dist_common.get_world_size": [[13, 19], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dist.dist_common.get_rank": [[21, 27], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dist.dist_common.is_main_process": [[29, 31], ["dist_common.get_rank"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dist.dist_common.synchronize": [[33, 46], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dist.dist_common.all_gather": [[48, 89], ["dist_common.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.IntTensor().to", "torch.IntTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.IntTensor", "torch.IntTensor", "range", "size.item", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.IntTensor", "torch.IntTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.all_gather", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.all_gather"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "IntTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dist.dist_common.reduce_dict": [[91, 118], ["dist_common.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dist.collect_env.get_pil_version": [[7, 9], ["None"], "function", ["None"], ["def", "get_pil_version", "(", ")", ":", "\n", "    ", "return", "\"\\n        Pillow ({})\"", ".", "format", "(", "PIL", ".", "__version__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dist.collect_env.collect_env_info": [[11, 15], ["torch.utils.collect_env.get_pretty_env_info", "collect_env.get_pil_version"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.dist.collect_env.get_pil_version"], ["", "def", "collect_env_info", "(", ")", ":", "\n", "    ", "env_str", "=", "get_pretty_env_info", "(", ")", "\n", "env_str", "+=", "get_pil_version", "(", ")", "\n", "return", "env_str", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.custom.PointCloudDataset.__init__": [[22, 43], ["pathlib.Path", "custom.PointCloudDataset._set_group_flag", "pipelines.Compose"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.custom.PointCloudDataset._set_group_flag"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root_path", ",", "\n", "info_path", ",", "\n", "pipeline", "=", "None", ",", "\n", "test_mode", "=", "False", ",", "\n", "class_names", "=", "None", ",", "\n", "**", "kwrags", "\n", ")", ":", "\n", "        ", "self", ".", "_info_path", "=", "info_path", "\n", "self", ".", "_root_path", "=", "Path", "(", "root_path", ")", "\n", "self", ".", "_class_names", "=", "class_names", "\n", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "\n", "self", ".", "_set_group_flag", "(", ")", "\n", "\n", "if", "pipeline", "is", "None", ":", "\n", "            ", "self", ".", "pipeline", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "pipeline", "=", "Compose", "(", "pipeline", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.custom.PointCloudDataset.__getitem__": [[44, 60], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"This function is used for preprocess.\n        you need to create a input dict in this function for network inference.\n        format: {\n            anchors\n            voxels\n            num_points\n            coordinates\n            if training:\n                labels\n                reg_targets\n            [optional]anchors_mask, slow in SECOND v1.5, don't use this.\n            [optional]metadata, in kitti, image index is saved in metadata\n        }\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.custom.PointCloudDataset.__len__": [[61, 63], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.custom.PointCloudDataset.get_sensor_data": [[64, 118], ["None"], "methods", ["None"], ["", "def", "get_sensor_data", "(", "self", ",", "query", ")", ":", "\n", "        ", "\"\"\"Dataset must provide a unified function to get data.\n        Args:\n            query: int or dict. this param must support int for training.\n                if dict, should have this format (no example yet):\n                {\n                    sensor_name: {\n                        sensor_meta\n                    }\n                }\n                if int, will return all sensor data.\n                (TODO: how to deal with unsynchronized data?)\n        Returns:\n            sensor_data: dict.\n            if query is int (return all), return a dict with all sensors:\n            {\n                sensor_name: sensor_data\n                ...\n                metadata: ... (for kitti, contains image_idx)\n            }\n\n            if sensor is lidar (all lidar point cloud must be concatenated to one array):\n            e.g. If your dataset have two lidar sensor, you need to return a single dict:\n            {\n                \"lidar\": {\n                    \"points\": ...\n                    ...\n                }\n            }\n            sensor_data: {\n                points: [N, 3+]\n                [optional]annotations: {\n                    \"boxes\": [N, 7] locs, dims, yaw, in lidar coord system. must tested\n                        in provided visualization tools such as second.utils.simplevis\n                        or web tool.\n                    \"names\": array of string.\n                }\n            }\n            if sensor is camera (not used yet):\n            sensor_data: {\n                data: image string (array is too large)\n                [optional]annotations: {\n                    \"boxes\": [N, 4] 2d bbox\n                    \"names\": array of string.\n                }\n            }\n            metadata: {\n                # dataset-specific information.\n                # for kitti, must have image_idx for label file generation.\n                image_idx: ...\n            }\n            [optional]calib # only used for kitti\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.custom.PointCloudDataset.evaluation": [[119, 122], ["None"], "methods", ["None"], ["", "def", "evaluation", "(", "self", ",", "dt_annos", ",", "output_dir", ")", ":", "\n", "        ", "\"\"\"Dataset must provide a evaluation function to evaluate model.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.custom.PointCloudDataset.ground_truth_annotations": [[123, 143], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ground_truth_annotations", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        If you want to eval by my KITTI eval function, you must\n        provide the correct format annotations.\n        ground_truth_annotations format:\n        {\n            bbox: [N, 4], if you fill fake data, MUST HAVE >25 HEIGHT!!!!!!\n            alpha: [N], you can use -10 to ignore it.\n            occluded: [N], you can use zero.\n            truncated: [N], you can use zero.\n            name: [N]\n            location: [N, 3] center of 3d box.\n            dimensions: [N, 3] dim of 3d box.\n            rotation_y: [N] angle.\n        }\n        all fields must be filled, but some fields can fill\n        zero.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.custom.PointCloudDataset.pre_pipeline": [[144, 150], ["None"], "methods", ["None"], ["", "def", "pre_pipeline", "(", "self", ",", "results", ")", ":", "\n", "        ", "results", "[", "\"img_prefix\"", "]", "=", "self", ".", "img_prefix", "\n", "results", "[", "\"seg_prefix\"", "]", "=", "self", ".", "seg_prefix", "\n", "results", "[", "\"proposal_file\"", "]", "=", "self", ".", "proposal_file", "\n", "results", "[", "\"bbox_fields\"", "]", "=", "[", "]", "\n", "results", "[", "\"mask_fields\"", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.custom.PointCloudDataset._filter_imgs": [[151, 158], ["enumerate", "min", "valid_inds.append"], "methods", ["None"], ["", "def", "_filter_imgs", "(", "self", ",", "min_size", "=", "32", ")", ":", "\n", "        ", "\"\"\"Filter images too small.\"\"\"", "\n", "valid_inds", "=", "[", "]", "\n", "for", "i", ",", "img_info", "in", "enumerate", "(", "self", ".", "img_infos", ")", ":", "\n", "            ", "if", "min", "(", "img_info", "[", "\"width\"", "]", ",", "img_info", "[", "\"height\"", "]", ")", ">=", "min_size", ":", "\n", "                ", "valid_inds", ".", "append", "(", "i", ")", "\n", "", "", "return", "valid_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.custom.PointCloudDataset._set_group_flag": [[159, 165], ["numpy.ones", "len"], "methods", ["None"], ["", "def", "_set_group_flag", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set flag according to image aspect ratio.\n        Images with aspect ratio greater than 1 will be set as group 1,\n        otherwise group 0.\n        \"\"\"", "\n", "self", ".", "flag", "=", "np", ".", "ones", "(", "len", "(", "self", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# self.flag = np.zeros(len(self), dtype=np.uint8)", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.custom.PointCloudDataset.prepare_train_input": [[171, 173], ["None"], "methods", ["None"], ["", "def", "prepare_train_input", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.custom.PointCloudDataset.prepare_test_input": [[182, 184], ["None"], "methods", ["None"], ["", "def", "prepare_test_input", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.builder._concat_dataset": [[9, 29], ["cfg.get", "cfg.get", "cfg.get", "len", "range", "dataset_wrappers.ConcatDataset", "copy.deepcopy", "isinstance", "isinstance", "isinstance", "datasets.append", "builder.build_dataset"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.builder.build_dataset"], ["from", "det3d", ".", "core", ".", "sampler", ".", "preprocess", "import", "DataBasePreprocessor", "\n", "from", "det3d", ".", "core", ".", "sampler", ".", "sample_ops", "import", "DataBaseSamplerV2", "\n", "from", "det3d", ".", "solver", "import", "learning_schedules", "\n", "from", "det3d", ".", "solver", "import", "learning_schedules_fastai", "as", "lsf", "\n", "from", "det3d", ".", "solver", "import", "optim", "\n", "from", "det3d", ".", "solver", ".", "fastai_optim", "import", "FastAIMixedOptim", ",", "OptimWrapper", "\n", "from", "torch", "import", "nn", "\n", "\n", "\n", "def", "build_voxel_generator", "(", "voxel_config", ")", ":", "\n", "\n", "    ", "voxel_generator", "=", "VoxelGenerator", "(", "\n", "voxel_size", "=", "voxel_config", ".", "VOXEL_SIZE", ",", "\n", "point_cloud_range", "=", "voxel_config", ".", "RANGE", ",", "\n", "max_num_points", "=", "voxel_config", ".", "MAX_POINTS_NUM_PER_VOXEL", ",", "\n", "max_voxels", "=", "20000", ",", "\n", ")", "\n", "\n", "return", "voxel_generator", "\n", "\n", "", "def", "build_db_preprocess", "(", "db_prep_config", ",", "logger", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.builder.build_dataset": [[31, 44], ["isinstance", "dataset_wrappers.ConcatDataset", "dataset_wrappers.RepeatDataset", "det3d.utils.build_from_cfg", "builder.build_dataset", "builder.build_dataset"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.build_from_cfg", "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.builder.build_dataset"], ["cfg", "=", "db_prep_config", "\n", "if", "\"filter_by_difficulty\"", "in", "cfg", ":", "\n", "        ", "v", "=", "cfg", "[", "\"filter_by_difficulty\"", "]", "\n", "return", "prep", ".", "DBFilterByDifficulty", "(", "v", ",", "logger", "=", "logger", ")", "\n", "", "elif", "\"filter_by_min_num_points\"", "in", "cfg", ":", "\n", "        ", "v", "=", "cfg", "[", "\"filter_by_min_num_points\"", "]", "\n", "return", "prep", ".", "DBFilterByMinNumPoint", "(", "v", ",", "logger", "=", "logger", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"unknown database prep type\"", ")", "\n", "\n", "\n", "", "", "def", "children", "(", "m", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"Get children of `m`.\"", "\n", "return", "list", "(", "m", ".", "children", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.dataset_wrappers.ConcatDataset.__init__": [[18, 26], ["torch.utils.data.dataset.ConcatDataset.__init__", "hasattr", "range", "numpy.concatenate", "len", "flags.append"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", "datasets", ")", "\n", "self", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "if", "hasattr", "(", "datasets", "[", "0", "]", ",", "\"flag\"", ")", ":", "\n", "            ", "flags", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "datasets", ")", ")", ":", "\n", "                ", "flags", ".", "append", "(", "datasets", "[", "i", "]", ".", "flag", ")", "\n", "", "self", ".", "flag", "=", "np", ".", "concatenate", "(", "flags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.dataset_wrappers.RepeatDataset.__init__": [[42, 50], ["hasattr", "len", "numpy.tile"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "times", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "times", "=", "times", "\n", "self", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "if", "hasattr", "(", "self", ".", "dataset", ",", "\"flag\"", ")", ":", "\n", "            ", "self", ".", "flag", "=", "np", ".", "tile", "(", "self", ".", "dataset", ".", "flag", ",", "times", ")", "\n", "\n", "", "self", ".", "_ori_len", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.dataset_wrappers.RepeatDataset.__getitem__": [[51, 53], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "idx", "%", "self", ".", "_ori_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.dataset_wrappers.RepeatDataset.__len__": [[54, 56], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "times", "*", "self", ".", "_ori_len", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.datasets.dataset_factory.get_dataset": [[10, 12], ["None"], "function", ["None"], ["def", "get_dataset", "(", "dataset_name", ")", ":", "\n", "    ", "return", "dataset_factory", "[", "dataset_name", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo.WaymoDataset.__init__": [[22, 46], ["print", "det3d.datasets.custom.PointCloudDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "info_path", ",", "\n", "root_path", ",", "\n", "cfg", "=", "None", ",", "\n", "pipeline", "=", "None", ",", "\n", "class_names", "=", "None", ",", "\n", "test_mode", "=", "False", ",", "\n", "sample", "=", "False", ",", "\n", "nsweeps", "=", "1", ",", "\n", "load_interval", "=", "1", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "self", ".", "load_interval", "=", "load_interval", "\n", "self", ".", "sample", "=", "sample", "\n", "self", ".", "nsweeps", "=", "nsweeps", "\n", "print", "(", "\"Using {} sweeps\"", ".", "format", "(", "nsweeps", ")", ")", "\n", "super", "(", "WaymoDataset", ",", "self", ")", ".", "__init__", "(", "\n", "root_path", ",", "info_path", ",", "pipeline", ",", "test_mode", "=", "test_mode", ",", "class_names", "=", "class_names", "\n", ")", "\n", "\n", "self", ".", "_info_path", "=", "info_path", "\n", "self", ".", "_class_names", "=", "class_names", "\n", "self", ".", "_num_point_features", "=", "WaymoDataset", ".", "NumPointFeatures", "if", "nsweeps", "==", "1", "else", "WaymoDataset", ".", "NumPointFeatures", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo.WaymoDataset.reset": [[47, 49], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo.WaymoDataset.load_infos": [[50, 58], ["print", "open", "pickle.load", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load"], ["", "def", "load_infos", "(", "self", ",", "info_path", ")", ":", "\n", "\n", "        ", "with", "open", "(", "self", ".", "_info_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "_waymo_infos_all", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "_waymo_infos", "=", "_waymo_infos_all", "[", ":", ":", "self", ".", "load_interval", "]", "\n", "\n", "print", "(", "\"Using {} Frames\"", ".", "format", "(", "len", "(", "self", ".", "_waymo_infos", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo.WaymoDataset.__len__": [[59, 65], ["len", "hasattr", "waymo.WaymoDataset.load_infos"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.load_infos"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_waymo_infos\"", ")", ":", "\n", "            ", "self", ".", "load_infos", "(", "self", ".", "_info_path", ")", "\n", "\n", "", "return", "len", "(", "self", ".", "_waymo_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo.WaymoDataset.get_sensor_data": [[66, 90], ["waymo.WaymoDataset.pipeline"], "methods", ["None"], ["", "def", "get_sensor_data", "(", "self", ",", "idx", ")", ":", "\n", "        ", "info", "=", "self", ".", "_waymo_infos", "[", "idx", "]", "\n", "\n", "res", "=", "{", "\n", "\"lidar\"", ":", "{", "\n", "\"type\"", ":", "\"lidar\"", ",", "\n", "\"points\"", ":", "None", ",", "\n", "\"annotations\"", ":", "None", ",", "\n", "\"nsweeps\"", ":", "self", ".", "nsweeps", ",", "\n", "}", ",", "\n", "\"metadata\"", ":", "{", "\n", "\"image_prefix\"", ":", "self", ".", "_root_path", ",", "\n", "\"num_point_features\"", ":", "self", ".", "_num_point_features", ",", "\n", "\"token\"", ":", "info", "[", "\"token\"", "]", ",", "\n", "}", ",", "\n", "\"calib\"", ":", "None", ",", "\n", "\"cam\"", ":", "{", "}", ",", "\n", "\"mode\"", ":", "\"val\"", "if", "self", ".", "test_mode", "else", "\"train\"", ",", "\n", "\"type\"", ":", "\"WaymoDataset\"", ",", "\n", "}", "\n", "\n", "data", ",", "_", "=", "self", ".", "pipeline", "(", "res", ",", "info", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo.WaymoDataset.__getitem__": [[91, 93], ["waymo.WaymoDataset.get_sensor_data"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.get_sensor_data"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_sensor_data", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo.WaymoDataset.evaluation": [[94, 105], ["reorganize_info", "_create_pd_detection", "print"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.reorganize_info", "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common._create_pd_detection"], ["", "def", "evaluation", "(", "self", ",", "detections", ",", "output_dir", "=", "None", ",", "testset", "=", "False", ")", ":", "\n", "        ", "from", ".", "waymo_common", "import", "_create_pd_detection", ",", "reorganize_info", "\n", "\n", "infos", "=", "self", ".", "_waymo_infos", "\n", "infos", "=", "reorganize_info", "(", "infos", ")", "\n", "\n", "_create_pd_detection", "(", "detections", ",", "infos", ",", "output_dir", ")", "\n", "\n", "print", "(", "\"use waymo devkit tool for evaluation\"", ")", "\n", "\n", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_converter.convert": [[25, 40], ["tensorflow.data.TFRecordDataset", "enumerate", "waymo_open_dataset.dataset_pb2.Frame", "dataset_pb2.Frame.ParseFromString", "waymo_decoder.decode_frame", "waymo_decoder.decode_annos", "bytearray", "open", "pickle.dump", "open", "pickle.dump", "data.numpy", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_decoder.decode_frame", "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_decoder.decode_annos", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.dump", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.dump"], ["def", "convert", "(", "idx", ")", ":", "\n", "    ", "global", "fnames", "\n", "fname", "=", "fnames", "[", "idx", "]", "\n", "dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "fname", ",", "compression_type", "=", "''", ")", "\n", "for", "frame_id", ",", "data", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "frame", "=", "dataset_pb2", ".", "Frame", "(", ")", "\n", "frame", ".", "ParseFromString", "(", "bytearray", "(", "data", ".", "numpy", "(", ")", ")", ")", "\n", "decoded_frame", "=", "waymo_decoder", ".", "decode_frame", "(", "frame", ",", "frame_id", ")", "\n", "decoded_annos", "=", "waymo_decoder", ".", "decode_annos", "(", "frame", ",", "frame_id", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "LIDAR_PATH", ",", "'seq_{}_frame_{}.pkl'", ".", "format", "(", "idx", ",", "frame_id", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "decoded_frame", ",", "f", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "ANNO_PATH", ",", "'seq_{}_frame_{}.pkl'", ".", "format", "(", "idx", ",", "frame_id", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "decoded_annos", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_converter.main": [[42, 50], ["list", "print", "glob.glob", "multiprocessing.Pool", "list", "len", "tqdm.tqdm", "p.imap", "range", "len", "len"], "function", ["None"], ["", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "global", "fnames", "\n", "fnames", "=", "list", "(", "glob", ".", "glob", "(", "args", ".", "record_path", ")", ")", "\n", "\n", "print", "(", "\"Number of files {}\"", ".", "format", "(", "len", "(", "fnames", ")", ")", ")", "\n", "\n", "with", "Pool", "(", "128", ")", "as", "p", ":", "# change according to your cpu", "\n", "        ", "r", "=", "list", "(", "tqdm", ".", "tqdm", "(", "p", ".", "imap", "(", "convert", ",", "range", "(", "len", "(", "fnames", ")", ")", ")", ",", "total", "=", "len", "(", "fnames", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_decoder.decode_frame": [[22, 43], ["waymo_decoder.extract_points"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_decoder.extract_points"], ["def", "decode_frame", "(", "frame", ",", "frame_id", ")", ":", "\n", "  ", "\"\"\"Decodes native waymo Frame proto to tf.Examples.\"\"\"", "\n", "\n", "lidars", "=", "extract_points", "(", "frame", ".", "lasers", ",", "\n", "frame", ".", "context", ".", "laser_calibrations", ",", "\n", "frame", ".", "pose", ")", "\n", "\n", "frame_name", "=", "'{scene_name}_{location}_{time_of_day}_{timestamp}'", ".", "format", "(", "\n", "scene_name", "=", "frame", ".", "context", ".", "name", ",", "\n", "location", "=", "frame", ".", "context", ".", "stats", ".", "location", ",", "\n", "time_of_day", "=", "frame", ".", "context", ".", "stats", ".", "time_of_day", ",", "\n", "timestamp", "=", "frame", ".", "timestamp_micros", ")", "\n", "\n", "example_data", "=", "{", "\n", "'scene_name'", ":", "frame", ".", "context", ".", "name", ",", "\n", "'frame_name'", ":", "frame_name", ",", "\n", "'frame_id'", ":", "frame_id", ",", "\n", "'lidars'", ":", "lidars", ",", "\n", "}", "\n", "\n", "return", "example_data", "\n", "# return encode_tf_example(example_data, FEATURE_SPEC)", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_decoder.decode_annos": [[45, 69], ["numpy.array", "numpy.reshape", "waymo_decoder.extract_objects", "numpy.array"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_decoder.extract_objects"], ["", "def", "decode_annos", "(", "frame", ",", "frame_id", ")", ":", "\n", "  ", "\"\"\"Decodes some meta data (e.g. calibration matrices, frame matrices).\"\"\"", "\n", "\n", "veh_to_global", "=", "np", ".", "array", "(", "frame", ".", "pose", ".", "transform", ")", "\n", "\n", "ref_pose", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "frame", ".", "pose", ".", "transform", ")", ",", "[", "4", ",", "4", "]", ")", "\n", "global_from_ref_rotation", "=", "ref_pose", "[", ":", "3", ",", ":", "3", "]", "\n", "objects", "=", "extract_objects", "(", "frame", ".", "laser_labels", ",", "global_from_ref_rotation", ")", "\n", "\n", "frame_name", "=", "'{scene_name}_{location}_{time_of_day}_{timestamp}'", ".", "format", "(", "\n", "scene_name", "=", "frame", ".", "context", ".", "name", ",", "\n", "location", "=", "frame", ".", "context", ".", "stats", ".", "location", ",", "\n", "time_of_day", "=", "frame", ".", "context", ".", "stats", ".", "time_of_day", ",", "\n", "timestamp", "=", "frame", ".", "timestamp_micros", ")", "\n", "\n", "annos", "=", "{", "\n", "'scene_name'", ":", "frame", ".", "context", ".", "name", ",", "\n", "'frame_name'", ":", "frame_name", ",", "\n", "'frame_id'", ":", "frame_id", ",", "\n", "'veh_to_global'", ":", "veh_to_global", ",", "\n", "'objects'", ":", "objects", ",", "\n", "}", "\n", "\n", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_decoder.extract_points_from_range_image": [[71, 133], ["zlib.decompress", "zlib.decompress", "ValueError", "tensorflow.convert_to_tensor", "waymo_open_dataset.dataset_pb2.MatrixFloat.FromString", "tensorflow.reshape", "waymo_open_dataset.utils.transform_utils.get_rotation_matrix", "waymo_open_dataset.utils.transform_utils.get_transform", "tensorflow.expand_dims", "tensorflow.expand_dims", "waymo_open_dataset.dataset_pb2.MatrixFloat.FromString", "tensorflow.reverse", "numpy.reshape", "tensorflow.reshape", "waymo_open_dataset.utils.range_image_utils.extract_point_cloud_from_range_image", "tensorflow.squeeze", "tensorflow.gather_nd", "points_list.append", "numpy.reshape", "zlib.decompress", "tensorflow.convert_to_tensor", "waymo_open_dataset.utils.range_image_utils.compute_inclination", "tensorflow.constant", "numpy.array", "tensorflow.convert_to_tensor", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.where", "tf.gather_nd.numpy", "numpy.array", "tensorflow.constant", "tensorflow.convert_to_tensor"], "function", ["None"], ["", "def", "extract_points_from_range_image", "(", "laser", ",", "calibration", ",", "frame_pose", ")", ":", "\n", "  ", "\"\"\"Decode points from lidar.\"\"\"", "\n", "if", "laser", ".", "name", "!=", "calibration", ".", "name", ":", "\n", "    ", "raise", "ValueError", "(", "'Laser and calibration do not match'", ")", "\n", "", "if", "laser", ".", "name", "==", "dataset_pb2", ".", "LaserName", ".", "TOP", ":", "\n", "    ", "frame_pose", "=", "tf", ".", "convert_to_tensor", "(", "\n", "np", ".", "reshape", "(", "np", ".", "array", "(", "frame_pose", ".", "transform", ")", ",", "[", "4", ",", "4", "]", ")", ")", "\n", "range_image_top_pose", "=", "dataset_pb2", ".", "MatrixFloat", ".", "FromString", "(", "\n", "zlib", ".", "decompress", "(", "laser", ".", "ri_return1", ".", "range_image_pose_compressed", ")", ")", "\n", "# [H, W, 6]", "\n", "range_image_top_pose_tensor", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "convert_to_tensor", "(", "range_image_top_pose", ".", "data", ")", ",", "\n", "range_image_top_pose", ".", "shape", ".", "dims", ")", "\n", "# [H, W, 3, 3]", "\n", "range_image_top_pose_tensor_rotation", "=", "transform_utils", ".", "get_rotation_matrix", "(", "\n", "range_image_top_pose_tensor", "[", "...", ",", "0", "]", ",", "\n", "range_image_top_pose_tensor", "[", "...", ",", "1", "]", ",", "range_image_top_pose_tensor", "[", "...", ",", "\n", "2", "]", ")", "\n", "range_image_top_pose_tensor_translation", "=", "range_image_top_pose_tensor", "[", "...", ",", "\n", "3", ":", "]", "\n", "range_image_top_pose_tensor", "=", "transform_utils", ".", "get_transform", "(", "\n", "range_image_top_pose_tensor_rotation", ",", "\n", "range_image_top_pose_tensor_translation", ")", "\n", "frame_pose", "=", "tf", ".", "expand_dims", "(", "frame_pose", ",", "axis", "=", "0", ")", "\n", "pixel_pose", "=", "tf", ".", "expand_dims", "(", "range_image_top_pose_tensor", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "    ", "pixel_pose", "=", "None", "\n", "frame_pose", "=", "None", "\n", "", "first_return", "=", "zlib", ".", "decompress", "(", "\n", "laser", ".", "ri_return1", ".", "range_image_compressed", ")", "\n", "second_return", "=", "zlib", ".", "decompress", "(", "\n", "laser", ".", "ri_return2", ".", "range_image_compressed", ")", "\n", "points_list", "=", "[", "]", "\n", "for", "range_image_str", "in", "[", "first_return", ",", "second_return", "]", ":", "\n", "    ", "range_image", "=", "dataset_pb2", ".", "MatrixFloat", ".", "FromString", "(", "range_image_str", ")", "\n", "if", "not", "calibration", ".", "beam_inclinations", ":", "\n", "      ", "beam_inclinations", "=", "range_image_utils", ".", "compute_inclination", "(", "\n", "tf", ".", "constant", "(", "[", "\n", "calibration", ".", "beam_inclination_min", ",", "calibration", ".", "beam_inclination_max", "\n", "]", ")", ",", "\n", "height", "=", "range_image", ".", "shape", ".", "dims", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "      ", "beam_inclinations", "=", "tf", ".", "constant", "(", "calibration", ".", "beam_inclinations", ")", "\n", "", "beam_inclinations", "=", "tf", ".", "reverse", "(", "beam_inclinations", ",", "axis", "=", "[", "-", "1", "]", ")", "\n", "extrinsic", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "calibration", ".", "extrinsic", ".", "transform", ")", ",", "[", "4", ",", "4", "]", ")", "\n", "range_image_tensor", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "convert_to_tensor", "(", "range_image", ".", "data", ")", ",", "range_image", ".", "shape", ".", "dims", ")", "\n", "range_image_mask", "=", "range_image_tensor", "[", "...", ",", "0", "]", ">", "0", "\n", "range_image_cartesian", "=", "(", "\n", "range_image_utils", ".", "extract_point_cloud_from_range_image", "(", "\n", "tf", ".", "expand_dims", "(", "range_image_tensor", "[", "...", ",", "0", "]", ",", "axis", "=", "0", ")", ",", "\n", "tf", ".", "expand_dims", "(", "extrinsic", ",", "axis", "=", "0", ")", ",", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "convert_to_tensor", "(", "beam_inclinations", ")", ",", "axis", "=", "0", ")", ",", "\n", "pixel_pose", "=", "pixel_pose", ",", "\n", "frame_pose", "=", "frame_pose", ")", ")", "\n", "range_image_cartesian", "=", "tf", ".", "squeeze", "(", "range_image_cartesian", ",", "axis", "=", "0", ")", "\n", "points_tensor", "=", "tf", ".", "gather_nd", "(", "\n", "tf", ".", "concat", "(", "[", "range_image_cartesian", ",", "range_image_tensor", "[", "...", ",", "1", ":", "4", "]", "]", ",", "\n", "axis", "=", "-", "1", ")", ",", "\n", "tf", ".", "where", "(", "range_image_mask", ")", ")", "\n", "points_list", ".", "append", "(", "points_tensor", ".", "numpy", "(", ")", ")", "\n", "", "return", "points_list", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_decoder.extract_points": [[135, 154], ["zip", "sorted", "sorted", "waymo_decoder.extract_points_from_range_image", "numpy.concatenate", "points_xyz.extend", "points_feature.extend", "points_nlz.extend", "numpy.asarray", "numpy.asarray", "points[].astype", "points[].astype", "points[].astype"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_decoder.extract_points_from_range_image"], ["", "def", "extract_points", "(", "lasers", ",", "laser_calibrations", ",", "frame_pose", ")", ":", "\n", "  ", "\"\"\"Extract point clouds.\"\"\"", "\n", "sort_lambda", "=", "lambda", "x", ":", "x", ".", "name", "\n", "lasers_with_calibration", "=", "zip", "(", "\n", "sorted", "(", "lasers", ",", "key", "=", "sort_lambda", ")", ",", "\n", "sorted", "(", "laser_calibrations", ",", "key", "=", "sort_lambda", ")", ")", "\n", "points_xyz", "=", "[", "]", "\n", "points_feature", "=", "[", "]", "\n", "points_nlz", "=", "[", "]", "\n", "for", "laser", ",", "calibration", "in", "lasers_with_calibration", ":", "\n", "    ", "points_list", "=", "extract_points_from_range_image", "(", "laser", ",", "calibration", ",", "\n", "frame_pose", ")", "\n", "points", "=", "np", ".", "concatenate", "(", "points_list", ",", "axis", "=", "0", ")", "\n", "points_xyz", ".", "extend", "(", "points", "[", "...", ",", ":", "3", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "points_feature", ".", "extend", "(", "points", "[", "...", ",", "3", ":", "5", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "points_nlz", ".", "extend", "(", "points", "[", "...", ",", "5", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "return", "{", "\n", "'points_xyz'", ":", "np", ".", "asarray", "(", "points_xyz", ")", ",", "\n", "'points_feature'", ":", "np", ".", "asarray", "(", "points_feature", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_decoder.global_vel_to_ref": [[156, 163], ["numpy.dot", "pyquaternion.Quaternion"], "function", ["None"], ["", "def", "global_vel_to_ref", "(", "vel", ",", "global_from_ref_rotation", ")", ":", "\n", "# inverse means ref_from_global, rotation_matrix for normalization", "\n", "  ", "vel", "=", "[", "vel", "[", "0", "]", ",", "vel", "[", "1", "]", ",", "0", "]", "\n", "ref", "=", "np", ".", "dot", "(", "Quaternion", "(", "matrix", "=", "global_from_ref_rotation", ")", ".", "inverse", ".", "rotation_matrix", ",", "vel", ")", "\n", "ref", "=", "[", "ref", "[", "0", "]", ",", "ref", "[", "1", "]", ",", "0.0", "]", "\n", "\n", "return", "ref", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_decoder.extract_objects": [[164, 208], ["enumerate", "waymo_decoder.global_vel_to_ref", "objects.append", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_decoder.global_vel_to_ref"], ["", "def", "extract_objects", "(", "laser_labels", ",", "global_from_ref_rotation", ")", ":", "\n", "  ", "\"\"\"Extract objects.\"\"\"", "\n", "objects", "=", "[", "]", "\n", "for", "object_id", ",", "label", "in", "enumerate", "(", "laser_labels", ")", ":", "\n", "    ", "category_label", "=", "label", ".", "type", "\n", "box", "=", "label", ".", "box", "\n", "\n", "speed", "=", "[", "label", ".", "metadata", ".", "speed_x", ",", "label", ".", "metadata", ".", "speed_y", "]", "\n", "accel", "=", "[", "label", ".", "metadata", ".", "accel_x", ",", "label", ".", "metadata", ".", "accel_y", "]", "\n", "num_lidar_points_in_box", "=", "label", ".", "num_lidar_points_in_box", "\n", "# Difficulty level is 0 if labeler did not say this was LEVEL_2.", "\n", "# Set difficulty level of \"999\" for boxes with no points in box.", "\n", "if", "num_lidar_points_in_box", "<=", "0", ":", "\n", "      ", "combined_difficulty_level", "=", "999", "\n", "", "if", "label", ".", "detection_difficulty_level", "==", "0", ":", "\n", "# Use points in box to compute difficulty level.", "\n", "      ", "if", "num_lidar_points_in_box", ">=", "5", ":", "\n", "        ", "combined_difficulty_level", "=", "1", "\n", "", "else", ":", "\n", "        ", "combined_difficulty_level", "=", "2", "\n", "", "", "else", ":", "\n", "      ", "combined_difficulty_level", "=", "label", ".", "detection_difficulty_level", "\n", "\n", "", "ref_velocity", "=", "global_vel_to_ref", "(", "speed", ",", "global_from_ref_rotation", ")", "\n", "\n", "objects", ".", "append", "(", "{", "\n", "'id'", ":", "object_id", ",", "\n", "'name'", ":", "label", ".", "id", ",", "\n", "'label'", ":", "category_label", ",", "\n", "'box'", ":", "np", ".", "array", "(", "[", "box", ".", "center_x", ",", "box", ".", "center_y", ",", "box", ".", "center_z", ",", "\n", "box", ".", "length", ",", "box", ".", "width", ",", "box", ".", "height", ",", "ref_velocity", "[", "0", "]", ",", "\n", "ref_velocity", "[", "1", "]", ",", "box", ".", "heading", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "'num_points'", ":", "\n", "num_lidar_points_in_box", ",", "\n", "'detection_difficulty_level'", ":", "\n", "label", ".", "detection_difficulty_level", ",", "\n", "'combined_difficulty_level'", ":", "\n", "combined_difficulty_level", ",", "\n", "'global_speed'", ":", "\n", "np", ".", "array", "(", "speed", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "'global_accel'", ":", "\n", "np", ".", "array", "(", "accel", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "}", ")", "\n", "", "return", "objects", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.UUIDGeneration.__init__": [[44, 46], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "mapping", "=", "{", "}", "\n", "", "def", "get_uuid", "(", "self", ",", "seed", ")", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.UUIDGeneration.get_uuid": [[46, 50], ["uuid.uuid4"], "methods", ["None"], ["", "def", "get_uuid", "(", "self", ",", "seed", ")", ":", "\n", "        ", "if", "seed", "not", "in", "self", ".", "mapping", ":", "\n", "            ", "self", ".", "mapping", "[", "seed", "]", "=", "uuid", ".", "uuid4", "(", ")", ".", "hex", "\n", "", "return", "self", ".", "mapping", "[", "seed", "]", "\n", "", "", "uuid_gen", "=", "UUIDGeneration", "(", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.get_obj": [[33, 37], ["open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load"], ["def", "get_obj", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "obj", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common._create_pd_detection": [[52, 116], ["metrics_pb2.Objects", "tqdm.tqdm", "print", "open", "open.write", "open.close", "detections.items", "waymo_common.get_obj", "detection[].detach().cpu().numpy", "detection[].detach().cpu().numpy", "detection[].detach().cpu().numpy", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "metrics_pb2.Objects.SerializeToString", "metrics_pb2.Object", "int", "label_pb2.Label.Box", "metrics_pb2.Object.object.box.CopyFrom", "metrics_pb2.Objects.objects.append", "detection[].detach().cpu", "detection[].detach().cpu", "detection[].detach().cpu", "uuid_gen.get_uuid", "obj[].split", "int", "detection[].detach", "detection[].detach", "detection[].detach"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.close", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.get_obj", "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.UUIDGeneration.get_uuid"], ["def", "_create_pd_detection", "(", "detections", ",", "infos", ",", "result_path", ",", "tracking", "=", "False", ")", ":", "\n", "    ", "\"\"\"Creates a prediction objects file.\"\"\"", "\n", "from", "waymo_open_dataset", "import", "label_pb2", "\n", "from", "waymo_open_dataset", ".", "protos", "import", "metrics_pb2", "\n", "\n", "objects", "=", "metrics_pb2", ".", "Objects", "(", ")", "\n", "\n", "for", "token", ",", "detection", "in", "tqdm", "(", "detections", ".", "items", "(", ")", ")", ":", "\n", "        ", "info", "=", "infos", "[", "token", "]", "\n", "obj", "=", "get_obj", "(", "info", "[", "'anno_path'", "]", ")", "\n", "\n", "box3d", "=", "detection", "[", "\"box3d_lidar\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "scores", "=", "detection", "[", "\"scores\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "detection", "[", "\"label_preds\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# transform back to Waymo coordinate", "\n", "# x,y,z,w,l,h,r2", "\n", "# x,y,z,l,w,h,r1", "\n", "# r2 = -pi/2 - r1  ", "\n", "box3d", "[", ":", ",", "-", "1", "]", "=", "-", "box3d", "[", ":", ",", "-", "1", "]", "-", "np", ".", "pi", "/", "2", "\n", "box3d", "=", "box3d", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "4", ",", "3", ",", "5", ",", "-", "1", "]", "]", "\n", "\n", "if", "tracking", ":", "\n", "            ", "tracking_ids", "=", "detection", "[", "'tracking_ids'", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "box3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "det", "=", "box3d", "[", "i", "]", "\n", "score", "=", "scores", "[", "i", "]", "\n", "\n", "label", "=", "labels", "[", "i", "]", "\n", "\n", "o", "=", "metrics_pb2", ".", "Object", "(", ")", "\n", "o", ".", "context_name", "=", "obj", "[", "'scene_name'", "]", "\n", "o", ".", "frame_timestamp_micros", "=", "int", "(", "obj", "[", "'frame_name'", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "\n", "\n", "# Populating box and score.", "\n", "box", "=", "label_pb2", ".", "Label", ".", "Box", "(", ")", "\n", "box", ".", "center_x", "=", "det", "[", "0", "]", "\n", "box", ".", "center_y", "=", "det", "[", "1", "]", "\n", "box", ".", "center_z", "=", "det", "[", "2", "]", "\n", "box", ".", "length", "=", "det", "[", "3", "]", "\n", "box", ".", "width", "=", "det", "[", "4", "]", "\n", "box", ".", "height", "=", "det", "[", "5", "]", "\n", "box", ".", "heading", "=", "det", "[", "-", "1", "]", "\n", "o", ".", "object", ".", "box", ".", "CopyFrom", "(", "box", ")", "\n", "o", ".", "score", "=", "score", "\n", "# Use correct type.", "\n", "o", ".", "object", ".", "type", "=", "LABEL_TO_TYPE", "[", "label", "]", "\n", "\n", "if", "tracking", ":", "\n", "                ", "o", ".", "object", ".", "id", "=", "uuid_gen", ".", "get_uuid", "(", "int", "(", "tracking_ids", "[", "i", "]", ")", ")", "\n", "\n", "", "objects", ".", "objects", ".", "append", "(", "o", ")", "\n", "\n", "# Write objects to a file.", "\n", "", "", "if", "tracking", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "result_path", ",", "'tracking_pred.bin'", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "result_path", ",", "'detection_pred.bin'", ")", "\n", "\n", "", "print", "(", "\"results saved to {}\"", ".", "format", "(", "path", ")", ")", "\n", "f", "=", "open", "(", "path", ",", "'wb'", ")", "\n", "f", ".", "write", "(", "objects", ".", "SerializeToString", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common._create_gt_detection": [[117, 175], ["metrics_pb2.Objects", "tqdm.tqdm", "open", "open.write", "open.close", "range", "waymo_common.get_obj", "numpy.array", "numpy.array", "numpy.array", "range", "os.path.join", "os.path.join", "metrics_pb2.Objects.SerializeToString", "len", "len", "metrics_pb2.Object", "int", "label_pb2.Label.Box", "metrics_pb2.Object.object.box.CopyFrom", "metrics_pb2.Objects.objects.append", "obj[].split"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.close", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.get_obj"], ["", "def", "_create_gt_detection", "(", "infos", ",", "tracking", "=", "True", ")", ":", "\n", "    ", "\"\"\"Creates a gt prediction object file for local evaluation.\"\"\"", "\n", "from", "waymo_open_dataset", "import", "label_pb2", "\n", "from", "waymo_open_dataset", ".", "protos", "import", "metrics_pb2", "\n", "\n", "objects", "=", "metrics_pb2", ".", "Objects", "(", ")", "\n", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "len", "(", "infos", ")", ")", ")", ":", "\n", "        ", "info", "=", "infos", "[", "idx", "]", "\n", "\n", "obj", "=", "get_obj", "(", "info", "[", "'path'", "]", ")", "\n", "annos", "=", "obj", "[", "'objects'", "]", "\n", "num_points_in_gt", "=", "np", ".", "array", "(", "[", "ann", "[", "'num_points'", "]", "for", "ann", "in", "annos", "]", ")", "\n", "box3d", "=", "np", ".", "array", "(", "[", "ann", "[", "'box'", "]", "for", "ann", "in", "annos", "]", ")", "\n", "\n", "if", "len", "(", "box3d", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "names", "=", "np", ".", "array", "(", "[", "TYPE_LIST", "[", "ann", "[", "'label'", "]", "]", "for", "ann", "in", "annos", "]", ")", "\n", "\n", "box3d", "=", "box3d", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "-", "1", "]", "]", "\n", "\n", "for", "i", "in", "range", "(", "box3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "num_points_in_gt", "[", "i", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "names", "[", "i", "]", "==", "'UNKNOWN'", ":", "\n", "                ", "continue", "\n", "\n", "", "det", "=", "box3d", "[", "i", "]", "\n", "score", "=", "1.0", "\n", "label", "=", "names", "[", "i", "]", "\n", "\n", "o", "=", "metrics_pb2", ".", "Object", "(", ")", "\n", "o", ".", "context_name", "=", "obj", "[", "'scene_name'", "]", "\n", "o", ".", "frame_timestamp_micros", "=", "int", "(", "obj", "[", "'frame_name'", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "\n", "\n", "# Populating box and score.", "\n", "box", "=", "label_pb2", ".", "Label", ".", "Box", "(", ")", "\n", "box", ".", "center_x", "=", "det", "[", "0", "]", "\n", "box", ".", "center_y", "=", "det", "[", "1", "]", "\n", "box", ".", "center_z", "=", "det", "[", "2", "]", "\n", "box", ".", "length", "=", "det", "[", "3", "]", "\n", "box", ".", "width", "=", "det", "[", "4", "]", "\n", "box", ".", "height", "=", "det", "[", "5", "]", "\n", "box", ".", "heading", "=", "det", "[", "-", "1", "]", "\n", "o", ".", "object", ".", "box", ".", "CopyFrom", "(", "box", ")", "\n", "o", ".", "score", "=", "score", "\n", "# Use correct type.", "\n", "o", ".", "object", ".", "type", "=", "CAT_NAME_TO_ID", "[", "label", "]", "\n", "o", ".", "object", ".", "num_lidar_points_in_box", "=", "num_points_in_gt", "[", "i", "]", "\n", "o", ".", "object", ".", "id", "=", "annos", "[", "i", "]", "[", "'name'", "]", "\n", "\n", "objects", ".", "objects", ".", "append", "(", "o", ")", "\n", "\n", "# Write objects to a file.", "\n", "", "", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_path", ",", "'gt_preds.bin'", ")", ",", "'wb'", ")", "\n", "f", ".", "write", "(", "objects", ".", "SerializeToString", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.veh_pos_to_transform": [[176, 190], ["nuscenes.utils.geometry_utils.transform_matrix", "nuscenes.utils.geometry_utils.transform_matrix", "pyquaternion.Quaternion", "pyquaternion.Quaternion"], "function", ["None"], ["", "def", "veh_pos_to_transform", "(", "veh_pos", ")", ":", "\n", "    ", "\"convert vehicle pose to two transformation matrix\"", "\n", "rotation", "=", "veh_pos", "[", ":", "3", ",", ":", "3", "]", "\n", "tran", "=", "veh_pos", "[", ":", "3", ",", "3", "]", "\n", "\n", "global_from_car", "=", "transform_matrix", "(", "\n", "tran", ",", "Quaternion", "(", "matrix", "=", "rotation", ")", ",", "inverse", "=", "False", "\n", ")", "\n", "\n", "car_from_global", "=", "transform_matrix", "(", "\n", "tran", ",", "Quaternion", "(", "matrix", "=", "rotation", ")", ",", "inverse", "=", "True", "\n", ")", "\n", "\n", "return", "global_from_car", ",", "car_from_global", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common._fill_infos": [[191, 281], ["tqdm.tqdm", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "waymo_common.get_obj", "numpy.reshape", "waymo_common.veh_pos_to_transform", "int", "int", "infos.append", "int", "len", "numpy.array", "numpy.array().reshape", "numpy.array", "gt_boxes[].astype", "gt_names[].astype", "frame_name.split", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "waymo_common.get_obj", "numpy.reshape", "waymo_common.veh_pos_to_transform", "functools.reduce", "int", "sweeps.append", "len", "ref_obj[].split", "frame_name.split", "len", "sweeps.append", "sweeps.append", "numpy.array", "curr_obj[].split"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.get_obj", "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.veh_pos_to_transform", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.get_obj", "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.veh_pos_to_transform"], ["", "def", "_fill_infos", "(", "root_path", ",", "frames", ",", "split", "=", "'train'", ",", "nsweeps", "=", "1", ")", ":", "\n", "# load all train infos", "\n", "    ", "infos", "=", "[", "]", "\n", "for", "frame_name", "in", "tqdm", "(", "frames", ")", ":", "# global id", "\n", "        ", "lidar_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "split", ",", "'lidar'", ",", "frame_name", ")", "\n", "ref_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "split", ",", "'annos'", ",", "frame_name", ")", "\n", "\n", "ref_obj", "=", "get_obj", "(", "ref_path", ")", "\n", "ref_time", "=", "1e-6", "*", "int", "(", "ref_obj", "[", "'frame_name'", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "\n", "\n", "ref_pose", "=", "np", ".", "reshape", "(", "ref_obj", "[", "'veh_to_global'", "]", ",", "[", "4", ",", "4", "]", ")", "\n", "_", ",", "ref_from_global", "=", "veh_pos_to_transform", "(", "ref_pose", ")", "\n", "\n", "info", "=", "{", "\n", "\"path\"", ":", "lidar_path", ",", "\n", "\"anno_path\"", ":", "ref_path", ",", "\n", "\"token\"", ":", "frame_name", ",", "\n", "\"timestamp\"", ":", "ref_time", ",", "\n", "\"sweeps\"", ":", "[", "]", "\n", "}", "\n", "\n", "sequence_id", "=", "int", "(", "frame_name", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "\n", "frame_id", "=", "int", "(", "frame_name", ".", "split", "(", "\"_\"", ")", "[", "3", "]", "[", ":", "-", "4", "]", ")", "# remove .pkl", "\n", "\n", "prev_id", "=", "frame_id", "\n", "sweeps", "=", "[", "]", "\n", "while", "len", "(", "sweeps", ")", "<", "nsweeps", "-", "1", ":", "\n", "            ", "if", "prev_id", "<=", "0", ":", "\n", "                ", "if", "len", "(", "sweeps", ")", "==", "0", ":", "\n", "                    ", "sweep", "=", "{", "\n", "\"path\"", ":", "lidar_path", ",", "\n", "\"token\"", ":", "frame_name", ",", "\n", "\"transform_matrix\"", ":", "None", ",", "\n", "\"time_lag\"", ":", "0", "\n", "}", "\n", "sweeps", ".", "append", "(", "sweep", ")", "\n", "", "else", ":", "\n", "                    ", "sweeps", ".", "append", "(", "sweeps", "[", "-", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "prev_id", "=", "prev_id", "-", "1", "\n", "# global identifier  ", "\n", "\n", "curr_name", "=", "'seq_{}_frame_{}.pkl'", ".", "format", "(", "sequence_id", ",", "prev_id", ")", "\n", "curr_lidar_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "split", ",", "'lidar'", ",", "curr_name", ")", "\n", "curr_label_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "split", ",", "'annos'", ",", "curr_name", ")", "\n", "\n", "curr_obj", "=", "get_obj", "(", "curr_label_path", ")", "\n", "curr_pose", "=", "np", ".", "reshape", "(", "curr_obj", "[", "'veh_to_global'", "]", ",", "[", "4", ",", "4", "]", ")", "\n", "global_from_car", ",", "_", "=", "veh_pos_to_transform", "(", "curr_pose", ")", "\n", "\n", "tm", "=", "reduce", "(", "\n", "np", ".", "dot", ",", "\n", "[", "ref_from_global", ",", "global_from_car", "]", ",", "\n", ")", "\n", "\n", "curr_time", "=", "int", "(", "curr_obj", "[", "'frame_name'", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "\n", "time_lag", "=", "ref_time", "-", "1e-6", "*", "curr_time", "\n", "\n", "sweep", "=", "{", "\n", "\"path\"", ":", "curr_lidar_path", ",", "\n", "\"transform_matrix\"", ":", "tm", ",", "\n", "\"time_lag\"", ":", "time_lag", ",", "\n", "}", "\n", "sweeps", ".", "append", "(", "sweep", ")", "\n", "\n", "", "", "info", "[", "\"sweeps\"", "]", "=", "sweeps", "\n", "\n", "if", "split", "!=", "'test'", ":", "\n", "# read boxes ", "\n", "            ", "TYPE_LIST", "=", "[", "'UNKNOWN'", ",", "'VEHICLE'", ",", "'PEDESTRIAN'", ",", "'SIGN'", ",", "'CYCLIST'", "]", "\n", "annos", "=", "ref_obj", "[", "'objects'", "]", "\n", "num_points_in_gt", "=", "np", ".", "array", "(", "[", "ann", "[", "'num_points'", "]", "for", "ann", "in", "annos", "]", ")", "\n", "gt_boxes", "=", "np", ".", "array", "(", "[", "ann", "[", "'box'", "]", "for", "ann", "in", "annos", "]", ")", ".", "reshape", "(", "-", "1", ",", "9", ")", "\n", "\n", "if", "len", "(", "gt_boxes", ")", "!=", "0", ":", "\n", "# transform from Waymo to KITTI coordinate ", "\n", "# Waymo: x, y, z, length, width, height, rotation from positive x axis clockwisely", "\n", "# KITTI: x, y, z, width, length, height, rotation from negative y axis counterclockwisely ", "\n", "                ", "gt_boxes", "[", ":", ",", "-", "1", "]", "=", "-", "np", ".", "pi", "/", "2", "-", "gt_boxes", "[", ":", ",", "-", "1", "]", "\n", "gt_boxes", "[", ":", ",", "[", "3", ",", "4", "]", "]", "=", "gt_boxes", "[", ":", ",", "[", "4", ",", "3", "]", "]", "\n", "\n", "", "gt_names", "=", "np", ".", "array", "(", "[", "TYPE_LIST", "[", "ann", "[", "'label'", "]", "]", "for", "ann", "in", "annos", "]", ")", "\n", "mask_not_zero", "=", "(", "num_points_in_gt", ">", "0", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "# filter boxes without lidar points ", "\n", "info", "[", "'gt_boxes'", "]", "=", "gt_boxes", "[", "mask_not_zero", ",", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "info", "[", "'gt_names'", "]", "=", "gt_names", "[", "mask_not_zero", "]", ".", "astype", "(", "str", ")", "\n", "\n", "", "infos", ".", "append", "(", "info", ")", "\n", "", "return", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.sort_frame": [[282, 296], ["list", "int", "int", "indices.append", "numpy.argsort", "numpy.array", "f.split", "f.split"], "function", ["None"], ["", "def", "sort_frame", "(", "frames", ")", ":", "\n", "    ", "indices", "=", "[", "]", "\n", "\n", "for", "f", "in", "frames", ":", "\n", "        ", "seq_id", "=", "int", "(", "f", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ")", "\n", "frame_id", "=", "int", "(", "f", ".", "split", "(", "\"_\"", ")", "[", "3", "]", "[", ":", "-", "4", "]", ")", "\n", "\n", "idx", "=", "seq_id", "*", "1000", "+", "frame_id", "\n", "indices", ".", "append", "(", "idx", ")", "\n", "\n", "", "rank", "=", "list", "(", "np", ".", "argsort", "(", "np", ".", "array", "(", "indices", ")", ")", ")", "\n", "\n", "frames", "=", "[", "frames", "[", "r", "]", "for", "r", "in", "rank", "]", "\n", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.get_available_frames": [[297, 305], ["os.path.join", "os.path.join", "list", "waymo_common.sort_frame", "print", "os.listdir", "os.listdir", "len"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.sort_frame"], ["", "def", "get_available_frames", "(", "root", ",", "split", ")", ":", "\n", "    ", "dir_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "split", ",", "'lidar'", ")", "\n", "available_frames", "=", "list", "(", "os", ".", "listdir", "(", "dir_path", ")", ")", "\n", "\n", "sorted_frames", "=", "sort_frame", "(", "available_frames", ")", "\n", "\n", "print", "(", "split", ",", "\" split \"", ",", "\"exist frame num:\"", ",", "len", "(", "available_frames", ")", ")", "\n", "return", "sorted_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.create_waymo_infos": [[307, 321], ["waymo_common.get_available_frames", "waymo_common._fill_infos", "print", "open", "pickle.dump", "os.path.join", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.get_available_frames", "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common._fill_infos", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.dump"], ["", "def", "create_waymo_infos", "(", "root_path", ",", "split", "=", "'train'", ",", "nsweeps", "=", "1", ")", ":", "\n", "    ", "frames", "=", "get_available_frames", "(", "root_path", ",", "split", ")", "\n", "\n", "waymo_infos", "=", "_fill_infos", "(", "\n", "root_path", ",", "frames", ",", "split", ",", "nsweeps", "\n", ")", "\n", "\n", "print", "(", "\n", "f\"sample: {len(waymo_infos)}\"", "\n", ")", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "root_path", ",", "\"infos_\"", "+", "split", "+", "\"_{:02d}sweeps_filter_zero_gt.pkl\"", ".", "format", "(", "nsweeps", ")", ")", ",", "\"wb\"", "\n", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "waymo_infos", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.parse_args": [[322, 331], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Waymo 3D Extractor\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--path\"", ",", "type", "=", "str", ",", "default", "=", "\"data/Waymo/tfrecord_training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--info_path\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--result_path\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--gt\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--tracking\"", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_common.reorganize_info": [[333, 341], ["None"], "function", ["None"], ["", "def", "reorganize_info", "(", "infos", ")", ":", "\n", "    ", "new_info", "=", "{", "}", "\n", "\n", "for", "info", "in", "infos", ":", "\n", "        ", "token", "=", "info", "[", "'token'", "]", "\n", "new_info", "[", "token", "]", "=", "info", "\n", "\n", "", "return", "new_info", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.__init__": [[515, 550], ["det3d.datasets.custom.PointCloudDataset.__init__", "print", "kwargs.get", "kwargs.get", "hasattr", "nuscenes.NuScenesDataset.load_infos"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.load_infos"], ["def", "__init__", "(", "\n", "self", ",", "\n", "info_path", ",", "\n", "root_path", ",", "\n", "nsweeps", "=", "0", ",", "# here set to zero to catch unset nsweep", "\n", "cfg", "=", "None", ",", "\n", "pipeline", "=", "None", ",", "\n", "class_names", "=", "None", ",", "\n", "test_mode", "=", "False", ",", "\n", "version", "=", "\"v1.0-trainval\"", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "NuScenesDataset", ",", "self", ")", ".", "__init__", "(", "\n", "root_path", ",", "info_path", ",", "pipeline", ",", "test_mode", "=", "test_mode", ",", "class_names", "=", "class_names", "\n", ")", "\n", "\n", "self", ".", "nsweeps", "=", "nsweeps", "\n", "assert", "self", ".", "nsweeps", ">", "0", ",", "\"At least input one sweep please!\"", "\n", "print", "(", "self", ".", "nsweeps", ")", "\n", "\n", "self", ".", "_info_path", "=", "info_path", "\n", "self", ".", "_class_names", "=", "class_names", "\n", "\n", "if", "not", "hasattr", "(", "self", ",", "\"_nusc_infos\"", ")", ":", "\n", "            ", "self", ".", "load_infos", "(", "self", ".", "_info_path", ")", "\n", "\n", "", "self", ".", "_num_point_features", "=", "NuScenesDataset", ".", "NumPointFeatures", "\n", "self", ".", "_name_mapping", "=", "general_to_detection", "\n", "\n", "self", ".", "painted", "=", "kwargs", ".", "get", "(", "'painted'", ",", "False", ")", "\n", "if", "self", ".", "painted", ":", "\n", "            ", "self", ".", "_num_point_features", "+=", "10", "\n", "\n", "", "self", ".", "version", "=", "version", "\n", "self", ".", "timesteps", "=", "kwargs", ".", "get", "(", "\"timesteps\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.reset": [[551, 555], ["nuscenes.NuScenesDataset.logger.info", "random.shuffle"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "f\"re-sample {self.frac} frames from full set\"", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "_nusc_infos_all", ")", "\n", "self", ".", "_nusc_infos", "=", "self", ".", "_nusc_infos_all", "[", ":", "self", ".", "frac", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.load_infos": [[556, 598], ["open", "pickle.load", "int", "sum", "zip", "isinstance", "len", "list", "numpy.random.choice", "[].tolist", "set", "pickle.load.values", "len", "len", "set", "len", "len", "max", "_cls_infos.items", "_cls_dist.values", "_cls_infos.values", "numpy.array", "int", "len", "len", "_cls_infos.items", "nuscenes.NuScenesDataset._nusc_infos.extend", "_cls_infos.items", "range", "_cls_infos[].append", "_cls_infos[].append", "len", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load"], ["", "def", "load_infos", "(", "self", ",", "info_path", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "_info_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "_nusc_infos_all", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "if", "not", "self", ".", "test_mode", ":", "# if training", "\n", "            ", "self", ".", "frac", "=", "int", "(", "len", "(", "_nusc_infos_all", ")", "*", "0.25", ")", "\n", "\n", "_cls_infos", "=", "{", "name", ":", "[", "]", "for", "name", "in", "self", ".", "_class_names", "}", "\n", "for", "info", "in", "_nusc_infos_all", ":", "\n", "                ", "if", "len", "(", "info", "[", "\"gt_names\"", "]", ")", ">", "0", ":", "\n", "                    ", "for", "name", "in", "set", "(", "info", "[", "\"gt_names\"", "]", "[", ":", ",", "0", "]", ")", ":", "\n", "                        ", "if", "name", "in", "self", ".", "_class_names", ":", "\n", "                            ", "_cls_infos", "[", "name", "]", ".", "append", "(", "info", ")", "\n", "\n", "", "", "", "", "duplicated_samples", "=", "sum", "(", "[", "len", "(", "v", ")", "for", "_", ",", "v", "in", "_cls_infos", ".", "items", "(", ")", "]", ")", "\n", "_cls_dist", "=", "{", "k", ":", "len", "(", "v", ")", "/", "max", "(", "duplicated_samples", ",", "1", ")", "for", "k", ",", "v", "in", "_cls_infos", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "_nusc_infos", "=", "[", "]", "\n", "\n", "frac", "=", "1.0", "/", "len", "(", "self", ".", "_class_names", ")", "\n", "ratios", "=", "[", "frac", "/", "v", "for", "v", "in", "_cls_dist", ".", "values", "(", ")", "]", "\n", "\n", "for", "cls_infos", ",", "ratio", "in", "zip", "(", "list", "(", "_cls_infos", ".", "values", "(", ")", ")", ",", "ratios", ")", ":", "\n", "                ", "select", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "array", "(", "range", "(", "len", "(", "cls_infos", ")", ")", ")", ",", "int", "(", "len", "(", "cls_infos", ")", "*", "ratio", ")", ")", "\n", "self", ".", "_nusc_infos", "+=", "np", ".", "array", "(", "cls_infos", ")", "[", "select", "]", ".", "tolist", "(", ")", "\n", "\n", "", "_cls_infos", "=", "{", "name", ":", "[", "]", "for", "name", "in", "self", ".", "_class_names", "}", "\n", "for", "info", "in", "self", ".", "_nusc_infos", ":", "\n", "                ", "for", "name", "in", "set", "(", "info", "[", "\"gt_names\"", "]", "[", ":", ",", "0", "]", ")", ":", "\n", "                    ", "if", "name", "in", "self", ".", "_class_names", ":", "\n", "                        ", "_cls_infos", "[", "name", "]", ".", "append", "(", "info", ")", "\n", "\n", "", "", "", "_cls_dist", "=", "{", "\n", "k", ":", "len", "(", "v", ")", "/", "len", "(", "self", ".", "_nusc_infos", ")", "for", "k", ",", "v", "in", "_cls_infos", ".", "items", "(", ")", "\n", "}", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "_nusc_infos_all", ",", "dict", ")", ":", "\n", "                ", "self", ".", "_nusc_infos", "=", "[", "]", "\n", "for", "v", "in", "_nusc_infos_all", ".", "values", "(", ")", ":", "\n", "                    ", "self", ".", "_nusc_infos", ".", "extend", "(", "v", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "_nusc_infos", "=", "_nusc_infos_all", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.__len__": [[599, 605], ["len", "hasattr", "nuscenes.NuScenesDataset.load_infos"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.load_infos"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_nusc_infos\"", ")", ":", "\n", "            ", "self", ".", "load_infos", "(", "self", ".", "_info_path", ")", "\n", "\n", "", "return", "len", "(", "self", ".", "_nusc_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.ground_truth_annotations": [[606, 647], ["config_factory().serialize", "numpy.array", "int", "gt_annos.append", "numpy.array", "numpy.array", "numpy.array", "numpy.sum", "config_factory", "numpy.array", "numpy.array", "numpy.tile", "numpy.full", "numpy.zeros", "numpy.zeros", "numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "ground_truth_annotations", "(", "self", ")", ":", "\n", "        ", "if", "\"gt_boxes\"", "not", "in", "self", ".", "_nusc_infos", "[", "0", "]", ":", "\n", "            ", "return", "None", "\n", "", "cls_range_map", "=", "config_factory", "(", "self", ".", "eval_version", ")", ".", "serialize", "(", ")", "[", "'class_range'", "]", "\n", "gt_annos", "=", "[", "]", "\n", "for", "info", "in", "self", ".", "_nusc_infos", ":", "\n", "            ", "try", ":", "\n", "                ", "gt_names", "=", "np", ".", "array", "(", "info", "[", "\"gt_names\"", "]", "[", ":", ",", "0", "]", ")", "\n", "gt_boxes", "=", "info", "[", "\"gt_boxes\"", "]", "[", ":", ",", "0", ",", ":", "]", "\n", "", "except", ":", "\n", "                ", "gt_names", "=", "np", ".", "array", "(", "info", "[", "\"gt_names\"", "]", ")", "\n", "gt_boxes", "=", "info", "[", "\"gt_boxes\"", "]", "\n", "\n", "", "mask", "=", "np", ".", "array", "(", "[", "n", "!=", "\"ignore\"", "for", "n", "in", "gt_names", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "gt_names", "=", "gt_names", "[", "mask", "]", "\n", "gt_boxes", "=", "gt_boxes", "[", "mask", "]", "\n", "# det_range = np.array([cls_range_map[n] for n in gt_names_mapped])", "\n", "try", ":", "\n", "                ", "det_range", "=", "np", ".", "array", "(", "[", "cls_range_map", "[", "n", "]", "for", "n", "in", "gt_names", "]", ")", "\n", "", "except", ":", "\n", "                ", "det_range", "=", "np", ".", "array", "(", "[", "50", "for", "n", "in", "gt_names", "]", ")", "\n", "\n", "", "det_range", "=", "det_range", "[", "...", ",", "np", ".", "newaxis", "]", "@", "np", ".", "array", "(", "[", "[", "-", "1", ",", "-", "1", ",", "1", ",", "1", "]", "]", ")", "\n", "mask", "=", "(", "gt_boxes", "[", ":", ",", ":", "2", "]", ">=", "det_range", "[", ":", ",", ":", "2", "]", ")", ".", "all", "(", "1", ")", "\n", "mask", "&=", "(", "gt_boxes", "[", ":", ",", ":", "2", "]", "<=", "det_range", "[", ":", ",", "2", ":", "]", ")", ".", "all", "(", "1", ")", "\n", "N", "=", "int", "(", "np", ".", "sum", "(", "mask", ")", ")", "\n", "gt_annos", ".", "append", "(", "\n", "{", "\n", "\"bbox\"", ":", "np", ".", "tile", "(", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "50", ",", "50", "]", "]", ")", ",", "[", "N", ",", "1", "]", ")", ",", "\n", "\"alpha\"", ":", "np", ".", "full", "(", "N", ",", "-", "10", ")", ",", "\n", "\"occluded\"", ":", "np", ".", "zeros", "(", "N", ")", ",", "\n", "\"truncated\"", ":", "np", ".", "zeros", "(", "N", ")", ",", "\n", "\"name\"", ":", "gt_names", "[", "mask", "]", ",", "\n", "\"location\"", ":", "gt_boxes", "[", "mask", "]", "[", ":", ",", ":", "3", "]", ",", "\n", "\"dimensions\"", ":", "gt_boxes", "[", "mask", "]", "[", ":", ",", "3", ":", "6", "]", ",", "\n", "\"rotation_y\"", ":", "gt_boxes", "[", "mask", "]", "[", ":", ",", "6", "]", ",", "\n", "\"token\"", ":", "info", "[", "\"token\"", "]", ",", "\n", "}", "\n", ")", "\n", "", "return", "gt_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.get_sensor_data": [[648, 677], ["nuscenes.NuScenesDataset.pipeline"], "methods", ["None"], ["", "def", "get_sensor_data", "(", "self", ",", "idx", ")", ":", "\n", "        ", "info", "=", "self", ".", "_nusc_infos", "[", "idx", "]", "\n", "\n", "res", "=", "{", "\n", "\"lidar\"", ":", "{", "\n", "\"type\"", ":", "\"lidar\"", ",", "\n", "\"points\"", ":", "None", ",", "\n", "\"nsweeps\"", ":", "self", ".", "nsweeps", ",", "\n", "# \"ground_plane\": -gp[-1] if with_gp else None,", "\n", "\"annotations\"", ":", "None", ",", "\n", "}", ",", "\n", "\"metadata\"", ":", "{", "\n", "\"image_prefix\"", ":", "self", ".", "_root_path", ",", "\n", "\"num_point_features\"", ":", "self", ".", "_num_point_features", ",", "\n", "\"token\"", ":", "info", "[", "\"token\"", "]", ",", "\n", "\"timesteps\"", ":", "self", ".", "timesteps", "\n", "}", ",", "\n", "\"calib\"", ":", "None", ",", "\n", "\"cam\"", ":", "{", "}", ",", "\n", "\"mode\"", ":", "\"val\"", "if", "self", ".", "test_mode", "else", "\"train\"", ",", "\n", "\"painted\"", ":", "self", ".", "painted", "\n", "}", "\n", "\n", "data", ",", "_", "=", "self", ".", "pipeline", "(", "res", ",", "info", ")", "\n", "\n", "if", "\"bev_map\"", "in", "res", "[", "\"lidar\"", "]", ":", "\n", "            ", "data", "[", "\"bev_map\"", "]", "=", "res", "[", "\"lidar\"", "]", "[", "\"bev_map\"", "]", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.__getitem__": [[678, 680], ["nuscenes.NuScenesDataset.get_sensor_data"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.get_sensor_data"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_sensor_data", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.evaluation": [[681, 876], ["str", "os.path.isfile", "zip", "numpy.array", "print", "[].split", "pickle.load", "NuScenes", "pickle.dump", "scene_data[].append", "pickle.load", "enumerate", "det3d.datasets.nuscenes.nusc_common.eval_main", "getDetectionNames", "pathlib.Path", "pathlib.Path", "len", "open", "open", "mapped_class_names.append", "mapped_class_names.append", "scene_data.keys", "open", "numpy.array.append", "print", "tqdm.tqdm.tqdm", "nuscenes.forecast_boxes", "enumerate", "nuscenes.multi_future", "open", "json.dump", "open", "json.load", "[].items", "list", "dets.append", "detections.items", "numpy.array", "nuscenes.trajectory_score", "annos.append", "nusc_annos[].keys", "list", "[].values", "sum", "len", "nuscenes.NuScenesDataset._info_path.split", "numpy.sqrt", "nuscenes.box_serialize", "box.center.tolist", "box.wlh.tolist", "box.orientation.elements.tolist", "box.velocity[].tolist", "pathlib.Path", "[].keys", "list", "max", "zip", "list", "numpy.hstack", "cls_attr_dist[].items", "operator.itemgetter"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.dump", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.eval_main", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.forecast_boxes", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.multi_future", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.dump", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.trajectory_score", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.box_serialize"], ["", "def", "evaluation", "(", "self", ",", "detections", ",", "output_dir", "=", "None", ",", "testset", "=", "False", ",", "forecast", "=", "7", ",", "forecast_mode", "=", "\"velocity_forward\"", ",", "classname", "=", "\"car\"", ",", "rerank", "=", "\"last\"", ",", "tp_pct", "=", "0.6", ",", "root", "=", "\"/ssd0/nperi/nuScenes\"", ",", "\n", "static_only", "=", "False", ",", "cohort_analysis", "=", "False", ",", "K", "=", "1", ",", "C", "=", "1", ",", "split", "=", "\"val\"", ",", "version", "=", "\"v1.0-trainval\"", ",", "eval_only", "=", "False", ",", "jitter", "=", "False", ",", "\n", "association_oracle", "=", "False", ",", "postprocess", "=", "False", ",", "nogroup", "=", "False", ")", ":", "\n", "        ", "self", ".", "eval_version", "=", "\"detection_forecast\"", "\n", "name", "=", "self", ".", "_info_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "\n", "if", "postprocess", ":", "\n", "            ", "name", "=", "name", "+", "\"_pp\"", "\n", "\n", "", "res_path", "=", "str", "(", "Path", "(", "output_dir", ")", "/", "Path", "(", "name", "+", "\".json\"", ")", ")", "\n", "\n", "if", "not", "testset", ":", "\n", "            ", "dets", "=", "[", "]", "\n", "gt_annos", "=", "self", ".", "ground_truth_annotations", "\n", "assert", "gt_annos", "is", "not", "None", "\n", "\n", "miss", "=", "0", "\n", "for", "gt", "in", "gt_annos", ":", "\n", "                ", "try", ":", "\n", "                    ", "dets", ".", "append", "(", "detections", "[", "gt", "[", "\"token\"", "]", "]", ")", "\n", "", "except", "Exception", ":", "\n", "                    ", "miss", "+=", "1", "\n", "\n", "", "", "assert", "miss", "==", "0", "\n", "", "else", ":", "\n", "            ", "dets", "=", "[", "v", "for", "_", ",", "v", "in", "detections", ".", "items", "(", ")", "]", "\n", "assert", "len", "(", "detections", ")", "==", "6008", "\n", "\n", "", "nusc_annos", "=", "{", "\n", "\"results\"", ":", "{", "}", ",", "\n", "\"meta\"", ":", "None", ",", "\n", "}", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "root", "+", "\"/nusc.pkl\"", ")", ":", "\n", "            ", "nusc", "=", "pickle", ".", "load", "(", "open", "(", "root", "+", "\"/nusc.pkl\"", ",", "\"rb\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "nusc", "=", "NuScenes", "(", "version", "=", "version", ",", "dataroot", "=", "root", ",", "verbose", "=", "True", ")", "\n", "pickle", ".", "dump", "(", "nusc", ",", "open", "(", "root", "+", "\"/nusc.pkl\"", ",", "\"wb\"", ")", ")", "\n", "\n", "", "mapped_class_names", "=", "[", "]", "\n", "for", "n", "in", "self", ".", "_class_names", ":", "\n", "            ", "if", "n", "in", "self", ".", "_name_mapping", ":", "\n", "                ", "mapped_class_names", ".", "append", "(", "self", ".", "_name_mapping", "[", "n", "]", ")", "\n", "", "else", ":", "\n", "                ", "mapped_class_names", ".", "append", "(", "n", ")", "\n", "\n", "", "", "sample_data", "=", "[", "s", "for", "s", "in", "nusc", ".", "sample", "]", "\n", "sample_data_tokens", "=", "[", "s", "[", "\"token\"", "]", "for", "s", "in", "nusc", ".", "sample", "]", "\n", "scene_tokens", "=", "[", "s", "[", "\"scene_token\"", "]", "for", "s", "in", "nusc", ".", "sample", "]", "\n", "\n", "scene_data", "=", "{", "}", "\n", "\n", "for", "sample_tokens", ",", "scene_token", "in", "zip", "(", "sample_data_tokens", ",", "scene_tokens", ")", ":", "\n", "            ", "if", "scene_token", "not", "in", "scene_data", ".", "keys", "(", ")", ":", "\n", "                ", "scene_data", "[", "scene_token", "]", "=", "[", "]", "\n", "\n", "", "scene_data", "[", "scene_token", "]", ".", "append", "(", "sample_tokens", ")", "\n", "\n", "\n", "", "train_dist", "=", "[", "]", "\n", "try", ":", "\n", "            ", "train_trajectories", "=", "pickle", ".", "load", "(", "open", "(", "\"~/Workspace/FutureDet/{}_trajectory.pkl\"", ".", "format", "(", "classname", ")", ",", "\"rb\"", ")", ")", "\n", "for", "trajectory", "in", "train_trajectories", ":", "\n", "                ", "velocity", ",", "rotation", "=", "trajectory", "[", "0", "]", "\n", "train_dist", ".", "append", "(", "np", ".", "array", "(", "list", "(", "velocity", ")", "+", "rotation", "+", "list", "(", "np", ".", "hstack", "(", "trajectory", "[", "1", ":", "]", ")", ")", ")", ")", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "\"{}_trajectory.pkl Not Found!\"", ".", "format", "(", "classname", ")", ")", "\n", "\n", "", "train_dist", "=", "np", ".", "array", "(", "train_dist", ")", "\n", "\n", "if", "not", "eval_only", ":", "\n", "            ", "for", "j", ",", "det_forecast", "in", "enumerate", "(", "tqdm", "(", "dets", ")", ")", ":", "\n", "                ", "det_boxes", ",", "tokens", "=", "forecast_boxes", "(", "nusc", ",", "sample_data", ",", "scene_data", ",", "sample_data_tokens", ",", "det_forecast", ",", "forecast", ",", "forecast_mode", ",", "classname", ",", "jitter", ",", "K", ",", "C", ",", "train_dist", ",", "postprocess", ")", "\n", "token", "=", "tokens", "[", "0", "]", "\n", "annos", "=", "[", "]", "\n", "\n", "for", "i", ",", "boxes", "in", "enumerate", "(", "det_boxes", ")", ":", "\n", "                    ", "box", "=", "boxes", "[", "0", "]", "\n", "name", "=", "classname", "\n", "\n", "if", "np", ".", "sqrt", "(", "box", ".", "velocity", "[", "0", "]", "**", "2", "+", "box", ".", "velocity", "[", "1", "]", "**", "2", ")", ">", "0.2", ":", "\n", "                        ", "if", "name", "in", "[", "\n", "\"car\"", ",", "\n", "\"construction_vehicle\"", ",", "\n", "\"bus\"", ",", "\n", "\"truck\"", ",", "\n", "\"trailer\"", ",", "\n", "]", ":", "\n", "                            ", "attr", "=", "\"vehicle.moving\"", "\n", "", "elif", "name", "in", "[", "\"bicycle\"", ",", "\"motorcycle\"", "]", ":", "\n", "                            ", "attr", "=", "\"cycle.with_rider\"", "\n", "", "else", ":", "\n", "                            ", "attr", "=", "None", "\n", "", "", "else", ":", "\n", "                        ", "if", "name", "in", "[", "\"pedestrian\"", "]", ":", "\n", "                            ", "attr", "=", "\"pedestrian.standing\"", "\n", "", "elif", "name", "in", "[", "\"bus\"", "]", ":", "\n", "                            ", "attr", "=", "\"vehicle.stopped\"", "\n", "", "else", ":", "\n", "                            ", "attr", "=", "None", "\n", "\n", "\n", "", "", "attr", "=", "attr", "if", "attr", "is", "not", "None", "else", "max", "(", "cls_attr_dist", "[", "name", "]", ".", "items", "(", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "[", "0", "]", "\n", "\n", "fboxes", "=", "[", "box_serialize", "(", "box", ",", "token", ",", "name", ",", "attr", ")", "for", "box", ",", "token", "in", "zip", "(", "boxes", ",", "tokens", ")", "]", "\n", "\n", "forecast_score", "=", "trajectory_score", "(", "fboxes", ",", "rerank", ",", "forecast", ")", "\n", "\n", "nusc_anno", "=", "{", "\n", "\"sample_token\"", ":", "token", ",", "\n", "\"translation\"", ":", "box", ".", "center", ".", "tolist", "(", ")", ",", "\n", "\"size\"", ":", "box", ".", "wlh", ".", "tolist", "(", ")", ",", "\n", "\"rotation\"", ":", "box", ".", "orientation", ".", "elements", ".", "tolist", "(", ")", ",", "\n", "\"velocity\"", ":", "box", ".", "velocity", "[", ":", "2", "]", ".", "tolist", "(", ")", ",", "\n", "\"forecast_boxes\"", ":", "fboxes", ",", "\n", "\"detection_name\"", ":", "name", ",", "\n", "\"detection_score\"", ":", "fboxes", "[", "0", "]", "[", "\"detection_score\"", "]", ",", "\n", "\"forecast_score\"", ":", "forecast_score", ",", "\n", "\"forecast_id\"", ":", "(", "i", "+", "1", ")", "*", "(", "j", "+", "1", ")", ",", "\n", "\"attribute_name\"", ":", "attr", ",", "\n", "}", "\n", "annos", ".", "append", "(", "nusc_anno", ")", "\n", "\n", "", "if", "token", "not", "in", "nusc_annos", "[", "\"results\"", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "nusc_annos", "[", "\"results\"", "]", "[", "token", "]", "=", "[", "]", "\n", "\n", "", "nusc_annos", "[", "\"results\"", "]", "[", "token", "]", "+=", "annos", "\n", "\n", "", "nusc_annos", "[", "\"meta\"", "]", "=", "{", "\n", "\"use_camera\"", ":", "False", ",", "\n", "\"use_lidar\"", ":", "True", ",", "\n", "\"use_radar\"", ":", "False", ",", "\n", "\"use_map\"", ":", "False", ",", "\n", "\"use_external\"", ":", "False", ",", "\n", "}", "\n", "\n", "if", "not", "nogroup", ":", "\n", "                ", "nusc_annos", "[", "\"results\"", "]", "=", "multi_future", "(", "nusc_annos", "[", "\"results\"", "]", ",", "classname", ")", "\n", "\n", "", "with", "open", "(", "res_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "nusc_annos", ",", "f", ")", "\n", "\n", "", "", "print", "(", "f\"Finish generate predictions for testset, save to {res_path}\"", ")", "\n", "\n", "if", "not", "testset", ":", "\n", "            ", "eval_main", "(", "\n", "nusc", ",", "\n", "\"detection_forecast_cohort\"", "if", "cohort_analysis", "else", "\"detection_forecast\"", ",", "\n", "res_path", ",", "\n", "split", ",", "\n", "output_dir", ",", "\n", "forecast", "=", "forecast", ",", "\n", "tp_pct", "=", "tp_pct", ",", "\n", "static_only", "=", "static_only", ",", "\n", "cohort_analysis", "=", "cohort_analysis", ",", "\n", "topK", "=", "K", ",", "\n", "root", "=", "root", ",", "\n", "association_oracle", "=", "association_oracle", ",", "\n", "nogroup", "=", "nogroup", "\n", ")", "\n", "\n", "with", "open", "(", "Path", "(", "output_dir", ")", "/", "\"metrics_summary.json\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "metrics", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "detail", "=", "{", "}", "\n", "result", "=", "f\"Nusc {version} Evaluation\\n\"", "\n", "\n", "for", "name", "in", "getDetectionNames", "(", "cohort_analysis", ")", ":", "\n", "                ", "detail", "[", "name", "]", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "metrics", "[", "\"label_aps\"", "]", "[", "name", "]", ".", "items", "(", ")", ":", "\n", "                    ", "detail", "[", "name", "]", "[", "f\"dist@{k}\"", "]", "=", "v", "\n", "", "threshs", "=", "\", \"", ".", "join", "(", "list", "(", "metrics", "[", "\"label_aps\"", "]", "[", "name", "]", ".", "keys", "(", ")", ")", ")", "\n", "scores", "=", "list", "(", "metrics", "[", "\"label_aps\"", "]", "[", "name", "]", ".", "values", "(", ")", ")", "\n", "mean", "=", "sum", "(", "scores", ")", "/", "len", "(", "scores", ")", "\n", "scores", "=", "\", \"", ".", "join", "(", "[", "f\"{s * 100:.2f}\"", "for", "s", "in", "scores", "]", ")", "\n", "result", "+=", "f\"{name} Nusc dist AP@{threshs}\\n\"", "\n", "result", "+=", "scores", "\n", "result", "+=", "f\" mean AP: {mean}\"", "\n", "result", "+=", "\"\\n\"", "\n", "", "res_nusc", "=", "{", "\n", "\"results\"", ":", "{", "\"nusc\"", ":", "result", "}", ",", "\n", "\"detail\"", ":", "{", "\"nusc\"", ":", "detail", "}", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "res_nusc", "=", "None", "\n", "\n", "", "if", "res_nusc", "is", "not", "None", ":", "\n", "            ", "res", "=", "{", "\n", "\"results\"", ":", "{", "\"nusc\"", ":", "res_nusc", "[", "\"results\"", "]", "[", "\"nusc\"", "]", ",", "}", ",", "\n", "\"detail\"", ":", "{", "\"eval.nusc\"", ":", "res_nusc", "[", "\"detail\"", "]", "[", "\"nusc\"", "]", ",", "}", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "res", "=", "None", "\n", "\n", "", "return", "res", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.window": [[49, 56], ["itertools.tee", "range", "zip", "next"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.next"], ["def", "window", "(", "iterable", ",", "size", ")", ":", "\n", "    ", "iters", "=", "tee", "(", "iterable", ",", "size", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "size", ")", ":", "\n", "        ", "for", "each", "in", "iters", "[", "i", ":", "]", ":", "\n", "            ", "next", "(", "each", ",", "None", ")", "\n", "\n", "", "", "return", "zip", "(", "*", "iters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.get_time": [[57, 63], ["nusc.get", "nusc.get"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["", "def", "get_time", "(", "nusc", ",", "src_token", ",", "dst_token", ")", ":", "\n", "    ", "time_last", "=", "1e-6", "*", "nusc", ".", "get", "(", "'sample'", ",", "src_token", ")", "[", "\"timestamp\"", "]", "\n", "time_first", "=", "1e-6", "*", "nusc", ".", "get", "(", "'sample'", ",", "dst_token", ")", "[", "\"timestamp\"", "]", "\n", "time_diff", "=", "time_first", "-", "time_last", "\n", "\n", "return", "time_diff", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.get_token": [[64, 77], ["scene_data[].index", "len", "len", "sample_data_tokens.index", "sample_data_tokens.index"], "function", ["None"], ["", "def", "get_token", "(", "scene_data", ",", "sample_data", ",", "sample_data_tokens", ",", "src_data_token", ",", "offset", ")", ":", "\n", "    ", "scene", "=", "sample_data", "[", "sample_data_tokens", ".", "index", "(", "src_data_token", ")", "]", "[", "\"scene_token\"", "]", "\n", "timestep", "=", "scene_data", "[", "scene", "]", ".", "index", "(", "src_data_token", ")", "+", "offset", "\n", "\n", "if", "timestep", ">", "len", "(", "scene_data", "[", "scene", "]", ")", "-", "1", ":", "\n", "        ", "timestep", "=", "len", "(", "scene_data", "[", "scene", "]", ")", "-", "1", "\n", "\n", "", "if", "timestep", "<", "0", ":", "\n", "        ", "timestep", "=", "0", "\n", "\n", "", "dst_data_token", "=", "sample_data", "[", "sample_data_tokens", ".", "index", "(", "scene_data", "[", "scene", "]", "[", "timestep", "]", ")", "]", "[", "\"token\"", "]", "\n", "\n", "return", "dst_data_token", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.box_center": [[78, 81], ["numpy.array", "box.center[].tolist"], "function", ["None"], ["", "def", "box_center", "(", "boxes", ")", ":", "\n", "    ", "center_box", "=", "np", ".", "array", "(", "[", "box", ".", "center", "[", ":", "2", "]", ".", "tolist", "(", ")", "for", "box", "in", "boxes", "]", ")", "\n", "return", "center_box", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.box_past_center": [[82, 85], ["numpy.array"], "function", ["None"], ["", "def", "box_past_center", "(", "time", ",", "boxes", ")", ":", "\n", "    ", "center_box", "=", "np", ".", "array", "(", "[", "(", "box", ".", "center", "[", ":", "2", "]", "-", "time", "*", "box", ".", "velocity", "[", ":", "2", "]", ")", ".", "tolist", "(", ")", "for", "box", "in", "boxes", "]", ")", "\n", "return", "center_box", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.box_future_center": [[86, 89], ["numpy.array"], "function", ["None"], ["", "def", "box_future_center", "(", "time", ",", "boxes", ")", ":", "\n", "    ", "center_box", "=", "np", ".", "array", "(", "[", "(", "box", ".", "center", "[", ":", "2", "]", "+", "time", "*", "box", ".", "velocity", "[", ":", "2", "]", ")", ".", "tolist", "(", ")", "for", "box", "in", "boxes", "]", ")", "\n", "return", "center_box", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.box_center_": [[90, 93], ["numpy.array"], "function", ["None"], ["", "def", "box_center_", "(", "boxes", ")", ":", "\n", "    ", "center_box", "=", "np", ".", "array", "(", "[", "box", "[", "\"translation\"", "]", "for", "box", "in", "boxes", "]", ")", "\n", "return", "center_box", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.distance_matrix": [[94, 111], ["numpy.ones", "numpy.ones", "numpy.less", "numpy.sqrt", "A.dot"], "function", ["None"], ["", "def", "distance_matrix", "(", "A", ",", "B", ",", "squared", "=", "False", ")", ":", "\n", "    ", "M", "=", "A", ".", "shape", "[", "0", "]", "\n", "N", "=", "B", ".", "shape", "[", "0", "]", "\n", "\n", "assert", "A", ".", "shape", "[", "1", "]", "==", "B", ".", "shape", "[", "1", "]", ",", "f\"The number of components for vectors in A \\\n        {A.shape[1]} does not match that of B {B.shape[1]}!\"", "\n", "\n", "A_dots", "=", "(", "A", "*", "A", ")", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "(", "M", ",", "1", ")", ")", "*", "np", ".", "ones", "(", "shape", "=", "(", "1", ",", "N", ")", ")", "\n", "B_dots", "=", "(", "B", "*", "B", ")", ".", "sum", "(", "axis", "=", "1", ")", "*", "np", ".", "ones", "(", "shape", "=", "(", "M", ",", "1", ")", ")", "\n", "D_squared", "=", "A_dots", "+", "B_dots", "-", "2", "*", "A", ".", "dot", "(", "B", ".", "T", ")", "\n", "\n", "if", "squared", "==", "False", ":", "\n", "        ", "zero_mask", "=", "np", ".", "less", "(", "D_squared", ",", "0.0", ")", "\n", "D_squared", "[", "zero_mask", "]", "=", "0.0", "\n", "return", "np", ".", "sqrt", "(", "D_squared", ")", "\n", "\n", "", "return", "D_squared", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.match_boxes": [[112, 124], ["zip", "nuscenes.box_center", "idx.append", "match_boxes.append", "numpy.argmin", "nuscenes.distance_matrix", "numpy.array"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.box_center", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.distance_matrix"], ["", "def", "match_boxes", "(", "ret_boxes", ")", ":", "\n", "    ", "box_centers", "=", "[", "box_center", "(", "boxes", ")", "for", "boxes", "in", "ret_boxes", "]", "\n", "cbox", "=", "box_centers", "[", "0", "]", "\n", "match_boxes", ",", "idx", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "fbox", "in", "box_centers", ":", "\n", "        ", "idx", ".", "append", "(", "np", ".", "argmin", "(", "distance_matrix", "(", "cbox", ",", "fbox", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "for", "box", ",", "match", "in", "zip", "(", "ret_boxes", ",", "idx", ")", ":", "\n", "        ", "match_boxes", ".", "append", "(", "np", ".", "array", "(", "box", ")", "[", "match", "]", ")", "\n", "\n", "", "return", "match_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.tracker": [[125, 258], ["zip", "range", "numpy.arange", "zip", "range", "nuscenes.window", "nuscenes.box_center", "nuscenes.box_future_center", "nuscenes.box_center", "nuscenes.distance_matrix", "numpy.argmin", "numpy.min", "idx.append", "dist.append", "len", "zip", "zip", "trajectory.append", "len", "trajectory.append", "nuscenes.window", "nuscenes.box_center", "nuscenes.box_past_center", "nuscenes.box_center", "nuscenes.distance_matrix", "numpy.argmin", "numpy.min", "idx.append", "dist.append", "len", "zip", "zip", "trajectory.append", "len", "trajectory_idx.append", "trajectory_idxs.append", "forecast.append", "copy.deepcopy", "forecast.append", "len", "trajectory_idx.append", "trajectory_idxs.append", "forecast.append", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.window", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.box_center", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.box_future_center", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.box_center", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.distance_matrix", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.window", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.box_center", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.box_past_center", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.box_center", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.distance_matrix"], ["", "def", "tracker", "(", "classname", ",", "time", ",", "ret_boxes", ")", ":", "\n", "    ", "if", "classname", "==", "\"car\"", ":", "\n", "        ", "reject_thresh", "=", "2", "\n", "match_thresh", "=", "0.25", "\n", "\n", "", "else", ":", "\n", "        ", "reject_thresh", "=", "1", "\n", "match_thresh", "=", "0.25", "\n", "\n", "", "reverse_time", "=", "time", "[", ":", ":", "-", "1", "]", "\n", "reverse_ret_boxes", "=", "ret_boxes", "[", ":", ":", "-", "1", "]", "\n", "trajectory", "=", "[", "]", "\n", "\n", "####################################################################", "\n", "if", "classname", "in", "[", "\"car\"", ",", "\"pedestrian\"", "]", ":", "\n", "## Forecasting ", "\n", "        ", "idx", ",", "dist", "=", "[", "]", ",", "[", "]", "\n", "for", "timesteps", ",", "tm", "in", "zip", "(", "window", "(", "ret_boxes", ",", "2", ")", ",", "time", ")", ":", "\n", "            ", "current", ",", "future", "=", "timesteps", "\n", "\n", "curr", "=", "box_center", "(", "current", ")", "\n", "curr_future", "=", "box_future_center", "(", "tm", ",", "current", ")", "\n", "futr", "=", "box_center", "(", "future", ")", "\n", "\n", "if", "len", "(", "curr", ")", "==", "0", "or", "len", "(", "futr", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "dist_mat", "=", "distance_matrix", "(", "curr_future", ",", "futr", ")", "\n", "min_idx", "=", "np", ".", "argmin", "(", "dist_mat", ",", "axis", "=", "1", ")", "\n", "min_dist", "=", "np", ".", "min", "(", "dist_mat", ",", "axis", "=", "1", ")", "\n", "idx", ".", "append", "(", "min_idx", ")", "\n", "dist", ".", "append", "(", "min_dist", ")", "\n", "\n", "", "if", "len", "(", "idx", ")", "!=", "len", "(", "ret_boxes", ")", "-", "1", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "trajectory_idxs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "idx", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "trajectory_idx", "=", "[", "i", "]", "\n", "void", "=", "False", "\n", "for", "ind", ",", "dis", "in", "zip", "(", "idx", ",", "dist", ")", ":", "\n", "                ", "if", "dis", "[", "trajectory_idx", "[", "-", "1", "]", "]", ">", "reject_thresh", ":", "\n", "                    ", "void", "=", "True", "\n", "\n", "", "trajectory_idx", ".", "append", "(", "ind", "[", "trajectory_idx", "[", "-", "1", "]", "]", ")", "\n", "\n", "", "if", "not", "void", ":", "\n", "                ", "trajectory_idxs", ".", "append", "(", "trajectory_idx", ")", "\n", "\n", "", "", "for", "idxs", "in", "trajectory_idxs", ":", "\n", "            ", "forecast", "=", "[", "]", "\n", "for", "ind", ",", "boxes", "in", "zip", "(", "idxs", ",", "ret_boxes", ")", ":", "\n", "                ", "forecast", ".", "append", "(", "boxes", "[", "ind", "]", ")", "\n", "\n", "", "trajectory", ".", "append", "(", "forecast", ")", "\n", "\n", "## Constant Velocity Forward", "\n", "", "for", "idx", "in", "np", ".", "arange", "(", "len", "(", "ret_boxes", "[", "0", "]", ")", ")", ":", "\n", "            ", "curr", "=", "ret_boxes", "[", "0", "]", "[", "idx", "]", "\n", "velocity", "=", "curr", ".", "velocity", "\n", "\n", "forecast", "=", "[", "curr", "]", "\n", "for", "t", "in", "time", ":", "\n", "                ", "new_box", "=", "deepcopy", "(", "forecast", "[", "-", "1", "]", ")", "\n", "new_box", ".", "center", "=", "new_box", ".", "center", "+", "t", "*", "velocity", "\n", "forecast", ".", "append", "(", "new_box", ")", "\n", "\n", "", "trajectory", ".", "append", "(", "forecast", ")", "\n", "##########################################################################", "\n", "## Back-Casting ", "\n", "", "idx", ",", "dist", "=", "[", "]", ",", "[", "]", "\n", "for", "timesteps", ",", "tm", "in", "zip", "(", "window", "(", "reverse_ret_boxes", ",", "2", ")", ",", "reverse_time", ")", ":", "\n", "            ", "current", ",", "previous", "=", "timesteps", "\n", "\n", "curr", "=", "box_center", "(", "current", ")", "\n", "curr_past", "=", "box_past_center", "(", "tm", ",", "current", ")", "\n", "prev", "=", "box_center", "(", "previous", ")", "\n", "\n", "if", "len", "(", "curr", ")", "==", "0", "or", "len", "(", "prev", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "dist_mat", "=", "distance_matrix", "(", "curr_past", ",", "prev", ")", "\n", "min_idx", "=", "np", ".", "argmin", "(", "dist_mat", ",", "axis", "=", "1", ")", "\n", "min_dist", "=", "np", ".", "min", "(", "dist_mat", ",", "axis", "=", "1", ")", "\n", "idx", ".", "append", "(", "min_idx", ")", "\n", "dist", ".", "append", "(", "min_dist", ")", "\n", "\n", "", "if", "len", "(", "idx", ")", "!=", "len", "(", "ret_boxes", ")", "-", "1", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "trajectory_idxs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "idx", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "trajectory_idx", "=", "[", "i", "]", "\n", "void", "=", "False", "\n", "for", "ind", ",", "dis", "in", "zip", "(", "idx", ",", "dist", ")", ":", "\n", "                ", "if", "dis", "[", "trajectory_idx", "[", "-", "1", "]", "]", ">", "reject_thresh", ":", "\n", "                    ", "void", "=", "True", "\n", "\n", "", "trajectory_idx", ".", "append", "(", "ind", "[", "trajectory_idx", "[", "-", "1", "]", "]", ")", "\n", "\n", "", "if", "not", "void", ":", "\n", "                ", "trajectory_idxs", ".", "append", "(", "trajectory_idx", ")", "\n", "\n", "", "", "for", "idxs", "in", "trajectory_idxs", ":", "\n", "            ", "forecast", "=", "[", "]", "\n", "for", "ind", ",", "boxes", "in", "zip", "(", "idxs", ",", "reverse_ret_boxes", ")", ":", "\n", "                ", "forecast", ".", "append", "(", "boxes", "[", "ind", "]", ")", "\n", "\n", "", "forecast", "=", "forecast", "[", ":", ":", "-", "1", "]", "\n", "trajectory", ".", "append", "(", "forecast", ")", "\n", "\n", "\n", "# Constant Velocity Backward", "\n", "#for idx in np.arange(len(ret_boxes[-1])):", "\n", "#    curr = deepcopy(ret_boxes[-1][idx])", "\n", "#    velocity = curr.velocity", "\n", "\n", "#    forecast = [curr]", "\n", "#    for t in time:", "\n", "#        new_box = deepcopy(forecast[-1])", "\n", "#        new_box.center = new_box.center - t * velocity", "\n", "#        forecast.append(new_box)", "\n", "\n", "#    forecast = forecast[::-1]", "\n", "\n", "#    anchor_center = box_center(ret_boxes[0])", "\n", "#    forecast_center = box_center([forecast[0]])", "\n", "#    dist = distance_matrix(forecast_center, anchor_center)", "\n", "\n", "#    if np.min(dist) < match_thresh:", "\n", "#        trajectory.append(forecast)", "\n", "\n", "", "", "return", "trajectory", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.box_serialize": [[259, 277], ["box.center.tolist", "box.wlh.tolist", "box.orientation.elements.tolist", "box.velocity[].tolist", "max", "cls_attr_dist[].items", "operator.itemgetter"], "function", ["None"], ["", "def", "box_serialize", "(", "box", ",", "token", ",", "name", ",", "attr", ")", ":", "\n", "    ", "ret", "=", "{", "\"sample_token\"", ":", "token", ",", "\n", "\"translation\"", ":", "box", ".", "center", ".", "tolist", "(", ")", ",", "\n", "\"size\"", ":", "box", ".", "wlh", ".", "tolist", "(", ")", ",", "\n", "\"rotation\"", ":", "box", ".", "orientation", ".", "elements", ".", "tolist", "(", ")", ",", "\n", "\"velocity\"", ":", "box", ".", "velocity", "[", ":", "2", "]", ".", "tolist", "(", ")", ",", "\n", "\"detection_name\"", ":", "name", ",", "\n", "\"detection_score\"", ":", "box", ".", "score", ",", "\n", "\"forecast_score\"", ":", "box", ".", "score", ",", "\n", "\"forecast_id\"", ":", "-", "1", ",", "\n", "\"attribute_name\"", ":", "attr", "\n", "if", "attr", "is", "not", "None", "\n", "else", "max", "(", "cls_attr_dist", "[", "name", "]", ".", "items", "(", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "[", "\n", "0", "\n", "]", ",", "\n", "}", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.network_split": [[278, 298], ["networkx.from_edgelist", "list", "sorted", "networkx.connected_components", "list", "enumerate", "itertools.groupby"], "function", ["None"], ["", "def", "network_split", "(", "L", ")", ":", "\n", "    ", "G", "=", "nx", ".", "from_edgelist", "(", "L", ")", "\n", "\n", "l", "=", "list", "(", "nx", ".", "connected_components", "(", "G", ")", ")", "\n", "# after that we create the map dict , for get the unique id for each nodes", "\n", "mapdict", "=", "{", "z", ":", "x", "for", "x", ",", "y", "in", "enumerate", "(", "l", ")", "for", "z", "in", "y", "}", "\n", "# then append the id back to original data for groupby ", "\n", "newlist", "=", "[", "x", "+", "(", "mapdict", "[", "x", "[", "0", "]", "]", ",", ")", "for", "x", "in", "L", "]", "\n", "#using groupby make the same id into one sublist", "\n", "newlist", "=", "sorted", "(", "newlist", ",", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ")", "\n", "yourlist", "=", "[", "list", "(", "y", ")", "for", "x", ",", "y", "in", "itertools", ".", "groupby", "(", "newlist", ",", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ")", "]", "\n", "\n", "ret", "=", "{", "}", "\n", "\n", "for", "group", "in", "yourlist", ":", "\n", "        ", "for", "pair", "in", "group", ":", "\n", "            ", "a", ",", "b", ",", "i", "=", "pair", "\n", "ret", "[", "(", "a", ",", "b", ")", "]", "=", "i", "\n", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.multi_future": [[299, 340], ["forecast_boxes.keys", "nuscenes.box_center_", "nuscenes.distance_matrix", "numpy.where", "zip", "nuscenes.network_split", "zip", "len", "L.append"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.box_center_", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.distance_matrix", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.network_split"], ["", "def", "multi_future", "(", "forecast_boxes", ",", "classname", ")", ":", "\n", "    ", "match_thresh", "=", "0.25", "\n", "\n", "for", "sample_token", "in", "forecast_boxes", ".", "keys", "(", ")", ":", "\n", "        ", "boxes", "=", "[", "box", "for", "box", "in", "forecast_boxes", "[", "sample_token", "]", "if", "classname", "in", "box", "[", "\"detection_name\"", "]", "]", "\n", "pred_center", "=", "box_center_", "(", "boxes", ")", "\n", "if", "len", "(", "pred_center", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "dist_mat", "=", "distance_matrix", "(", "pred_center", ",", "pred_center", ")", "\n", "idxa", ",", "idxb", "=", "np", ".", "where", "(", "dist_mat", "<", "match_thresh", ")", "\n", "\n", "L", "=", "[", "]", "\n", "for", "ida", ",", "idb", "in", "zip", "(", "idxa", ",", "idxb", ")", ":", "\n", "            ", "L", ".", "append", "(", "(", "ida", ",", "idb", ")", ")", "\n", "\n", "", "net", "=", "network_split", "(", "L", ")", "\n", "for", "ida", ",", "idb", "in", "zip", "(", "idxa", ",", "idxb", ")", ":", "\n", "            ", "forecast_id", "=", "net", "[", "(", "ida", ",", "idb", ")", "]", "\n", "boxes", "[", "ida", "]", "[", "\"forecast_id\"", "]", "=", "forecast_id", "\n", "boxes", "[", "idb", "]", "[", "\"forecast_id\"", "]", "=", "forecast_id", "\n", "\n", "detection_score", "=", "boxes", "[", "ida", "]", "[", "\"detection_score\"", "]", "\n", "forecast_score", "=", "boxes", "[", "ida", "]", "[", "\"forecast_score\"", "]", "\n", "\n", "for", "box", "in", "boxes", "[", "ida", "]", "[", "\"forecast_boxes\"", "]", ":", "\n", "                ", "box", "[", "\"detection_score\"", "]", "=", "detection_score", "\n", "box", "[", "\"forecast_score\"", "]", "=", "forecast_score", "\n", "box", "[", "\"forecast_id\"", "]", "=", "forecast_id", "\n", "\n", "", "detection_score", "=", "boxes", "[", "idb", "]", "[", "\"detection_score\"", "]", "\n", "forecast_score", "=", "boxes", "[", "idb", "]", "[", "\"forecast_score\"", "]", "\n", "\n", "for", "box", "in", "boxes", "[", "idb", "]", "[", "\"forecast_boxes\"", "]", ":", "\n", "                ", "box", "[", "\"detection_score\"", "]", "=", "detection_score", "\n", "box", "[", "\"forecast_score\"", "]", "=", "forecast_score", "\n", "box", "[", "\"forecast_id\"", "]", "=", "forecast_id", "\n", "\n", "", "", "forecast_boxes", "[", "sample_token", "]", "=", "boxes", "\n", "\n", "", "return", "forecast_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.process_trajectories": [[341, 383], ["numpy.array", "nuscenes.distance_matrix", "numpy.argmin", "enumerate", "test_trajectories.append", "np.array.append", "zip", "copy.deepcopy", "range", "out_boxes.append", "numpy.array", "copy.deepcopy", "range", "list", "list", "numpy.hstack", "nuscenes.forecast_boxes"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.distance_matrix", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.forecast_boxes"], ["", "def", "process_trajectories", "(", "nusc", ",", "sample_token", ",", "ret_boxes", ",", "forecast", ",", "train_dist", ")", ":", "\n", "#sample_rec = nusc.get('sample', sample_token)", "\n", "#sd_record = nusc.get('sample_data', sample_rec['data']['LIDAR_TOP'])", "\n", "#cs_record = nusc.get('calibrated_sensor', sd_record['calibrated_sensor_token'])", "\n", "#pose_record = nusc.get('ego_pose', sd_record['ego_pose_token'])", "\n", "#ego_map = nusc.get_ego_centric_map(sd_record[\"token\"])", "\n", "#bev = cv2.resize(ego_map, dsize=(50, 50), interpolation=cv2.INTER_CUBIC).T", "\n", "\n", "    ", "test_trajectories", "=", "[", "]", "\n", "for", "ret_box", "in", "ret_boxes", ":", "\n", "        ", "box", "=", "ret_box", "[", "0", "]", "\n", "\n", "translation", "=", "box", ".", "center", "\n", "velocity", "=", "box", ".", "velocity", "[", ":", "2", "]", "\n", "rotation", "=", "[", "box", ".", "orientation", "[", "0", "]", ",", "box", ".", "orientation", "[", "1", "]", ",", "box", ".", "orientation", "[", "2", "]", ",", "box", ".", "orientation", "[", "3", "]", "]", "\n", "\n", "position", "=", "[", "(", "velocity", ",", "rotation", ")", "]", "+", "[", "ret_box", "[", "i", "]", ".", "center", "-", "translation", "for", "i", "in", "range", "(", "1", ",", "forecast", ")", "]", "\n", "test_trajectories", ".", "append", "(", "position", ")", "\n", "\n", "", "test_dist", "=", "[", "]", "\n", "for", "trajectory", "in", "test_trajectories", ":", "\n", "        ", "velocity", ",", "rotation", "=", "trajectory", "[", "0", "]", "\n", "test_dist", ".", "append", "(", "np", ".", "array", "(", "list", "(", "velocity", ")", "+", "rotation", "+", "list", "(", "np", ".", "hstack", "(", "trajectory", "[", "1", ":", "]", ")", ")", ")", ")", "\n", "\n", "", "test_dist", "=", "np", ".", "array", "(", "test_dist", ")", "\n", "\n", "dist", "=", "distance_matrix", "(", "train_dist", ",", "test_dist", ")", "\n", "idx", "=", "np", ".", "argmin", "(", "dist", ",", "axis", "=", "0", ")", "\n", "matched_trajectory", "=", "(", "train_dist", "[", "idx", "]", ")", "\n", "\n", "out_boxes", "=", "[", "]", "\n", "for", "i", ",", "out", "in", "enumerate", "(", "zip", "(", "ret_boxes", ",", "matched_trajectory", ")", ")", ":", "\n", "        ", "ret_box", ",", "trajectory", "=", "out", "\n", "translation", "=", "deepcopy", "(", "ret_box", "[", "0", "]", ".", "center", ")", "\n", "\n", "trajectory", "=", "trajectory", "[", "6", ":", "]", "\n", "for", "i", "in", "range", "(", "forecast", "-", "1", ")", ":", "\n", "            ", "ret_box", "[", "i", "+", "1", "]", ".", "center", "=", "translation", "+", "trajectory", "[", "3", "*", "i", ":", "3", "*", "i", "+", "3", "]", "\n", "\n", "", "out_boxes", ".", "append", "(", "deepcopy", "(", "ret_box", ")", ")", "\n", "\n", "", "return", "out_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.forecast_boxes": [[384, 494], ["range", "nuscenes.window", "range", "nuscenes.get_token", "ret_tokens.append", "nuscenes.get_time", "time.append", "numpy.array", "det3d.datasets.nuscenes.nusc_common._second_det_to_nusc_box", "det3d.datasets.nuscenes.nusc_common._lidar_nusc_box_to_global", "process_trajectories.append", "nuscenes.match_boxes", "range", "nuscenes.tracker", "len", "nuscenes.match_boxes", "nuscenes.match_boxes", "len", "range", "trajectory_boxes.append", "range", "process_trajectories.append", "range", "det3d.datasets.nuscenes.nusc_common._lidar_nusc_box_to_global.append", "copy.deepcopy", "tracker.append", "nuscenes.process_trajectories", "numpy.random.normal", "range", "jitter_boxes.append", "zip", "nusc.get", "numpy.linalg.norm", "numpy.array", "copy.deepcopy", "tracker.append"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.window", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.get_token", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.get_time", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common._second_det_to_nusc_box", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common._lidar_nusc_box_to_global", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.match_boxes", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.tracker", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.match_boxes", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.match_boxes", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.process_trajectories", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_module.ConvModule.norm"], ["", "def", "forecast_boxes", "(", "nusc", ",", "sample_data", ",", "scene_data", ",", "sample_data_tokens", ",", "det_forecast", ",", "forecast", ",", "forecast_mode", ",", "classname", ",", "jitter", ",", "K", ",", "C", ",", "train_dist", ",", "postprocess", ")", ":", "\n", "    ", "ret_boxes", ",", "ret_tokens", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "t", "in", "range", "(", "forecast", ")", ":", "\n", "        ", "dst_token", "=", "get_token", "(", "scene_data", ",", "sample_data", ",", "sample_data_tokens", ",", "det_forecast", "[", "\"metadata\"", "]", "[", "\"token\"", "]", ",", "t", ")", "\n", "ret_tokens", ".", "append", "(", "dst_token", ")", "\n", "\n", "", "time", "=", "[", "]", "\n", "stale", "=", "False", "\n", "for", "src", ",", "dst", "in", "window", "(", "ret_tokens", ",", "2", ")", ":", "\n", "        ", "elapse_time", "=", "get_time", "(", "nusc", ",", "src", ",", "dst", ")", "\n", "\n", "if", "elapse_time", "==", "0", ":", "\n", "            ", "stale", "=", "True", "\n", "\n", "", "time", ".", "append", "(", "elapse_time", ")", "\n", "\n", "", "for", "t", "in", "range", "(", "forecast", ")", ":", "\n", "        ", "mask", "=", "np", ".", "array", "(", "det_forecast", "[", "\"label_preds\"", "]", "==", "t", ")", "\n", "box3d", "=", "det_forecast", "[", "\"box3d_lidar\"", "]", "[", "mask", "]", "\n", "scores", "=", "det_forecast", "[", "\"scores\"", "]", "[", "mask", "]", "\n", "labels", "=", "det_forecast", "[", "\"label_preds\"", "]", "[", "mask", "]", "\n", "det", "=", "{", "\"box3d_lidar\"", ":", "box3d", ",", "\"scores\"", ":", "scores", ",", "\"label_preds\"", ":", "labels", ",", "\"metadata\"", ":", "det_forecast", "[", "\"metadata\"", "]", "}", "\n", "\n", "boxes", "=", "_second_det_to_nusc_box", "(", "det", ")", "\n", "boxes", "=", "_lidar_nusc_box_to_global", "(", "nusc", ",", "boxes", ",", "det", "[", "\"metadata\"", "]", "[", "\"token\"", "]", ")", "\n", "\n", "ret_boxes", ".", "append", "(", "boxes", ")", "\n", "\n", "", "if", "stale", "or", "len", "(", "ret_boxes", "[", "0", "]", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", ",", "ret_tokens", "\n", "\n", "", "if", "forecast_mode", "in", "[", "\"velocity_constant\"", ",", "\"velocity_forward\"", ",", "\"velocity_reverse\"", "]", ":", "\n", "        ", "ret_boxes", "=", "match_boxes", "(", "ret_boxes", ")", "\n", "\n", "", "elif", "forecast_mode", "in", "[", "\"velocity_sparse_forward\"", ",", "\"velocity_sparse_reverse\"", ",", "\"velocity_sparse_match\"", "]", ":", "\n", "        ", "forward_box", "=", "[", "box", "[", "0", "]", "for", "box", "in", "ret_boxes", "]", "\n", "reverse_box", "=", "[", "box", "[", "1", "]", "for", "box", "in", "ret_boxes", "]", "\n", "\n", "forward_box", "=", "match_boxes", "(", "forward_box", ")", "\n", "reverse_box", "=", "match_boxes", "(", "reverse_box", ")", "\n", "\n", "ret_boxes", "=", "[", "[", "forward", ",", "reverse", "]", "for", "forward", ",", "reverse", "in", "zip", "(", "forward_box", ",", "reverse_box", ")", "]", "\n", "\n", "", "if", "\"dense\"", "not", "in", "forecast_mode", ":", "\n", "        ", "trajectory_boxes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "ret_boxes", "[", "0", "]", ")", ")", ":", "\n", "            ", "boxes", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "forecast", ")", ":", "\n", "                ", "boxes", ".", "append", "(", "ret_boxes", "[", "i", "]", "[", "j", "]", ")", "\n", "\n", "", "trajectory_boxes", ".", "append", "(", "boxes", ")", "\n", "", "", "else", ":", "\n", "        ", "forecast_boxes", "=", "tracker", "(", "classname", ",", "time", ",", "ret_boxes", ")", "\n", "\n", "", "if", "forecast_mode", "in", "[", "\"velocity_constant\"", ",", "\"velocity_forward\"", ",", "\"velocity_reverse\"", "]", ":", "\n", "        ", "if", "forecast_mode", "==", "\"velocity_reverse\"", ":", "\n", "            ", "time", "=", "time", "[", ":", ":", "-", "1", "]", "\n", "\n", "", "ret_boxes", "=", "[", "]", "\n", "for", "trajectory_box", "in", "trajectory_boxes", ":", "\n", "            ", "forecast_boxes", "=", "[", "trajectory_box", "[", "0", "]", "]", "\n", "for", "i", "in", "range", "(", "forecast", "-", "1", ")", ":", "\n", "                ", "new_box", "=", "deepcopy", "(", "forecast_boxes", "[", "-", "1", "]", ")", "\n", "\n", "if", "forecast_mode", "==", "\"velocity_reverse\"", ":", "\n", "                    ", "new_box", ".", "center", "=", "new_box", ".", "center", "-", "time", "[", "i", "]", "*", "trajectory_box", "[", "i", "]", ".", "velocity", "\n", "", "else", ":", "\n", "                    ", "new_box", ".", "center", "=", "new_box", ".", "center", "+", "time", "[", "i", "]", "*", "trajectory_box", "[", "i", "]", ".", "velocity", "\n", "\n", "", "forecast_boxes", ".", "append", "(", "new_box", ")", "\n", "\n", "", "if", "forecast_mode", "==", "\"velocity_reverse\"", ":", "\n", "                ", "forecast_boxes", "=", "forecast_boxes", "[", ":", ":", "-", "1", "]", "\n", "\n", "", "ret_boxes", ".", "append", "(", "forecast_boxes", ")", "\n", "\n", "", "", "elif", "forecast_mode", "==", "\"velocity_dense\"", ":", "\n", "        ", "ret_boxes", "=", "forecast_boxes", "\n", "\n", "if", "postprocess", ":", "\n", "            ", "sample_token", "=", "nusc", ".", "get", "(", "\"sample\"", ",", "ret_tokens", "[", "0", "]", ")", "[", "\"token\"", "]", "\n", "ret_boxes", "=", "process_trajectories", "(", "nusc", ",", "sample_token", ",", "ret_boxes", ",", "forecast", ",", "train_dist", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "assert", "False", ",", "\"Invalid Forecast Mode\"", "\n", "\n", "\n", "", "if", "jitter", ":", "\n", "        ", "jitter_boxes", "=", "[", "]", "\n", "for", "trajectory_box", "in", "ret_boxes", ":", "\n", "            ", "for", "_", "in", "range", "(", "K", "-", "1", ")", ":", "\n", "                ", "start_box", "=", "trajectory_box", "[", "0", "]", "\n", "vel_norm", "=", "C", "*", "np", ".", "linalg", ".", "norm", "(", "start_box", ".", "velocity", ")", "\n", "start_vel", "=", "start_box", ".", "velocity", "\n", "jittered_vel", "=", "np", ".", "random", ".", "normal", "(", "start_vel", ",", "np", ".", "array", "(", "[", "vel_norm", ",", "vel_norm", ",", "vel_norm", "]", ")", ")", "\n", "\n", "forecast_boxes", "=", "[", "start_box", "]", "\n", "for", "i", "in", "range", "(", "forecast", "-", "1", ")", ":", "\n", "                    ", "new_box", "=", "deepcopy", "(", "forecast_boxes", "[", "-", "1", "]", ")", "\n", "new_box", ".", "center", "=", "new_box", ".", "center", "+", "time", "[", "i", "]", "*", "jittered_vel", "\n", "\n", "forecast_boxes", ".", "append", "(", "new_box", ")", "\n", "\n", "", "jitter_boxes", ".", "append", "(", "forecast_boxes", ")", "\n", "\n", "", "", "ret_boxes", "=", "ret_boxes", "+", "jitter_boxes", "\n", "\n", "", "return", "ret_boxes", ",", "ret_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.trajectory_score": [[495, 509], ["numpy.sum", "numpy.product", "range", "range"], "function", ["None"], ["", "def", "trajectory_score", "(", "fboxes", ",", "rerank", ",", "timesteps", ")", ":", "\n", "    ", "if", "rerank", "==", "\"first\"", ":", "\n", "        ", "return", "fboxes", "[", "0", "]", "[", "\"detection_score\"", "]", "\n", "\n", "", "if", "rerank", "==", "\"last\"", ":", "\n", "        ", "return", "fboxes", "[", "-", "1", "]", "[", "\"detection_score\"", "]", "\n", "\n", "", "elif", "rerank", "==", "\"add\"", ":", "\n", "        ", "return", "np", ".", "sum", "(", "[", "fboxes", "[", "i", "]", "[", "\"detection_score\"", "]", "for", "i", "in", "range", "(", "timesteps", ")", "]", ")", "/", "timesteps", "\n", "\n", "", "elif", "rerank", "==", "\"mult\"", ":", "\n", "        ", "return", "np", ".", "product", "(", "[", "fboxes", "[", "i", "]", "[", "\"detection_score\"", "]", "for", "i", "in", "range", "(", "timesteps", ")", "]", ")", "\n", "\n", "", "assert", "False", ",", "\"{} is Invalid\"", ".", "format", "(", "rerank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common._second_det_to_nusc_box": [[167, 190], ["detection[].detach().cpu().numpy", "detection[].detach().cpu().numpy", "detection[].detach().cpu().numpy", "range", "pyquaternion.Quaternion", "Box", "box_list.append", "detection[].detach().cpu", "detection[].detach().cpu", "detection[].detach().cpu", "detection[].detach", "detection[].detach", "detection[].detach"], "function", ["None"], ["def", "_second_det_to_nusc_box", "(", "detection", ")", ":", "\n", "    ", "box3d", "=", "detection", "[", "\"box3d_lidar\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "scores", "=", "detection", "[", "\"scores\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "detection", "[", "\"label_preds\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "box3d", "[", ":", ",", "-", "1", "]", "=", "-", "box3d", "[", ":", ",", "-", "1", "]", "-", "np", ".", "pi", "/", "2", "\n", "\n", "box_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "box3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "quat", "=", "Quaternion", "(", "axis", "=", "[", "0", ",", "0", ",", "1", "]", ",", "radians", "=", "box3d", "[", "i", ",", "-", "1", "]", ")", "\n", "velocity", "=", "(", "*", "box3d", "[", "i", ",", "6", ":", "8", "]", ",", "0.0", ")", "\n", "box", "=", "Box", "(", "\n", "center", "=", "box3d", "[", "i", ",", ":", "3", "]", ",", "\n", "size", "=", "box3d", "[", "i", ",", "3", ":", "6", "]", ",", "\n", "orientation", "=", "quat", ",", "\n", "label", "=", "labels", "[", "i", "]", ",", "\n", "score", "=", "scores", "[", "i", "]", ",", "\n", "velocity", "=", "velocity", ",", "\n", ")", "\n", "\n", "box_list", ".", "append", "(", "box", ")", "\n", "\n", "", "return", "box_list", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common._lidar_nusc_box_to_global": [[192, 215], ["nusc.get", "nusc.get", "nusc.get", "nusc.get", "box.rotate", "box.translate", "box.rotate", "box.translate", "box_list.append", "pyquaternion.Quaternion", "numpy.array", "pyquaternion.Quaternion", "numpy.array"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["", "def", "_lidar_nusc_box_to_global", "(", "nusc", ",", "boxes", ",", "sample_token", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "s_record", "=", "nusc", ".", "get", "(", "\"sample\"", ",", "sample_token", ")", "\n", "sample_data_token", "=", "s_record", "[", "\"data\"", "]", "[", "\"LIDAR_TOP\"", "]", "\n", "", "except", ":", "\n", "        ", "sample_data_token", "=", "sample_token", "\n", "\n", "", "sd_record", "=", "nusc", ".", "get", "(", "\"sample_data\"", ",", "sample_data_token", ")", "\n", "cs_record", "=", "nusc", ".", "get", "(", "\"calibrated_sensor\"", ",", "sd_record", "[", "\"calibrated_sensor_token\"", "]", ")", "\n", "pose_record", "=", "nusc", ".", "get", "(", "\"ego_pose\"", ",", "sd_record", "[", "\"ego_pose_token\"", "]", ")", "\n", "\n", "box_list", "=", "[", "]", "\n", "for", "box", "in", "boxes", ":", "\n", "# Move box to ego vehicle coord system", "\n", "        ", "box", ".", "rotate", "(", "Quaternion", "(", "cs_record", "[", "\"rotation\"", "]", ")", ")", "\n", "box", ".", "translate", "(", "np", ".", "array", "(", "cs_record", "[", "\"translation\"", "]", ")", ")", "\n", "# Move box to global coord system", "\n", "box", ".", "rotate", "(", "Quaternion", "(", "pose_record", "[", "\"rotation\"", "]", ")", ")", "\n", "box", ".", "translate", "(", "np", ".", "array", "(", "pose_record", "[", "\"translation\"", "]", ")", ")", "\n", "\n", "box_list", ".", "append", "(", "box", ")", "\n", "\n", "", "return", "box_list", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common._get_available_scenes": [[217, 239], ["print", "print", "len", "nusc.get", "nusc.get", "nusc.get", "available_scenes.append", "len", "nusc.get_sample_data", "pathlib.Path().exists", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.get_sample_data", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.exists"], ["", "def", "_get_available_scenes", "(", "nusc", ")", ":", "\n", "    ", "available_scenes", "=", "[", "]", "\n", "print", "(", "\"total scene num:\"", ",", "len", "(", "nusc", ".", "scene", ")", ")", "\n", "for", "scene", "in", "nusc", ".", "scene", ":", "\n", "        ", "scene_token", "=", "scene", "[", "\"token\"", "]", "\n", "scene_rec", "=", "nusc", ".", "get", "(", "\"scene\"", ",", "scene_token", ")", "\n", "sample_rec", "=", "nusc", ".", "get", "(", "\"sample\"", ",", "scene_rec", "[", "\"first_sample_token\"", "]", ")", "\n", "sd_rec", "=", "nusc", ".", "get", "(", "\"sample_data\"", ",", "sample_rec", "[", "\"data\"", "]", "[", "\"LIDAR_TOP\"", "]", ")", "\n", "has_more_frames", "=", "True", "\n", "scene_not_exist", "=", "False", "\n", "while", "has_more_frames", ":", "\n", "            ", "lidar_path", ",", "boxes", ",", "_", "=", "nusc", ".", "get_sample_data", "(", "sd_rec", "[", "\"token\"", "]", ")", "\n", "if", "not", "Path", "(", "lidar_path", ")", ".", "exists", "(", ")", ":", "\n", "                ", "scene_not_exist", "=", "True", "\n", "break", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "if", "scene_not_exist", ":", "\n", "            ", "continue", "\n", "", "available_scenes", ".", "append", "(", "scene", ")", "\n", "", "print", "(", "\"exist scene num:\"", ",", "len", "(", "available_scenes", ")", ")", "\n", "return", "available_scenes", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.get_sample_data": [[241, 286], ["nusc.get", "nusc.get", "nusc.get", "nusc.get", "nusc.get_sample_data_path", "numpy.array", "list", "nusc.get_boxes", "nusc.box_velocity", "box.translate", "box.rotate", "box.translate", "box.rotate", "box_list.append", "map", "numpy.array", "pyquaternion.Quaternion", "numpy.array", "pyquaternion.Quaternion"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["", "def", "get_sample_data", "(", "\n", "nusc", ",", "sample_data_token", ":", "str", ",", "selected_anntokens", ":", "List", "[", "str", "]", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Returns the data path as well as all annotations related to that sample_data.\n    Note that the boxes are transformed into the current sensor's coordinate frame.\n    :param sample_data_token: Sample_data token.\n    :param selected_anntokens: If provided only return the selected annotation.\n    :return: (data_path, boxes, camera_intrinsic <np.array: 3, 3>)\n    \"\"\"", "\n", "\n", "# Retrieve sensor & pose records", "\n", "sd_record", "=", "nusc", ".", "get", "(", "\"sample_data\"", ",", "sample_data_token", ")", "\n", "cs_record", "=", "nusc", ".", "get", "(", "\"calibrated_sensor\"", ",", "sd_record", "[", "\"calibrated_sensor_token\"", "]", ")", "\n", "sensor_record", "=", "nusc", ".", "get", "(", "\"sensor\"", ",", "cs_record", "[", "\"sensor_token\"", "]", ")", "\n", "pose_record", "=", "nusc", ".", "get", "(", "\"ego_pose\"", ",", "sd_record", "[", "\"ego_pose_token\"", "]", ")", "\n", "\n", "data_path", "=", "nusc", ".", "get_sample_data_path", "(", "sample_data_token", ")", "\n", "\n", "if", "sensor_record", "[", "\"modality\"", "]", "==", "\"camera\"", ":", "\n", "        ", "cam_intrinsic", "=", "np", ".", "array", "(", "cs_record", "[", "\"camera_intrinsic\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "cam_intrinsic", "=", "None", "\n", "\n", "# Retrieve all sample annotations and map to sensor coordinate system.", "\n", "", "if", "selected_anntokens", "is", "not", "None", ":", "\n", "        ", "boxes", "=", "list", "(", "map", "(", "nusc", ".", "get_box", ",", "selected_anntokens", ")", ")", "\n", "", "else", ":", "\n", "        ", "boxes", "=", "nusc", ".", "get_boxes", "(", "sample_data_token", ")", "\n", "\n", "# Make list of Box objects including coord system transforms.", "\n", "", "box_list", "=", "[", "]", "\n", "for", "box", "in", "boxes", ":", "\n", "        ", "box", ".", "velocity", "=", "nusc", ".", "box_velocity", "(", "box", ".", "token", ")", "\n", "# Move box to ego vehicle coord system", "\n", "box", ".", "translate", "(", "-", "np", ".", "array", "(", "pose_record", "[", "\"translation\"", "]", ")", ")", "\n", "box", ".", "rotate", "(", "Quaternion", "(", "pose_record", "[", "\"rotation\"", "]", ")", ".", "inverse", ")", "\n", "\n", "#  Move box to sensor coord system", "\n", "box", ".", "translate", "(", "-", "np", ".", "array", "(", "cs_record", "[", "\"translation\"", "]", ")", ")", "\n", "box", ".", "rotate", "(", "Quaternion", "(", "cs_record", "[", "\"rotation\"", "]", ")", ".", "inverse", ")", "\n", "\n", "box_list", ".", "append", "(", "box", ")", "\n", "\n", "", "return", "data_path", ",", "box_list", ",", "cam_intrinsic", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.window": [[287, 294], ["itertools.tee", "range", "zip", "next"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.next"], ["", "def", "window", "(", "iterable", ",", "size", ")", ":", "\n", "    ", "iters", "=", "tee", "(", "iterable", ",", "size", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "size", ")", ":", "\n", "        ", "for", "each", "in", "iters", "[", "i", ":", "]", ":", "\n", "            ", "next", "(", "each", ",", "None", ")", "\n", "\n", "", "", "return", "zip", "(", "*", "iters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.get_time": [[295, 301], ["nusc.get", "nusc.get"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["", "def", "get_time", "(", "nusc", ",", "src_token", ",", "dst_token", ")", ":", "\n", "    ", "time_last", "=", "1e-6", "*", "nusc", ".", "get", "(", "'sample'", ",", "src_token", ")", "[", "\"timestamp\"", "]", "\n", "time_first", "=", "1e-6", "*", "nusc", ".", "get", "(", "'sample'", ",", "dst_token", ")", "[", "\"timestamp\"", "]", "\n", "time_diff", "=", "time_first", "-", "time_last", "\n", "\n", "return", "time_diff", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.center_distance": [[302, 310], ["numpy.linalg.norm", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_module.ConvModule.norm"], ["", "def", "center_distance", "(", "gt_box", ",", "pred_box", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    L2 distance between the box centers (xy only).\n    :param gt_box: GT annotation sample.\n    :param pred_box: Predicted sample.\n    :return: L2 distance.\n    \"\"\"", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "pred_box", ".", "center", "[", ":", "2", "]", ")", "-", "np", ".", "array", "(", "gt_box", ".", "center", "[", ":", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.trajectory": [[311, 334], ["copy.deepcopy", "copy.deepcopy", "numpy.sum", "list", "nusc_common.center_distance", "max", "map", "nusc_common.center_distance", "max", "numpy.array", "list", "datetime.time"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.center_distance", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.center_distance"], ["", "def", "trajectory", "(", "nusc", ",", "boxes", ",", "time", ",", "timesteps", "=", "7", ",", "past", "=", "False", ")", ":", "\n", "    ", "target", "=", "boxes", "[", "-", "1", "]", "\n", "\n", "static_forecast", "=", "deepcopy", "(", "boxes", "[", "0", "]", ")", "\n", "\n", "linear_forecast", "=", "deepcopy", "(", "boxes", "[", "0", "]", ")", "\n", "vel", "=", "linear_forecast", ".", "velocity", "[", ":", "2", "]", "\n", "disp", "=", "np", ".", "sum", "(", "list", "(", "map", "(", "lambda", "x", ":", "np", ".", "array", "(", "list", "(", "vel", ")", "+", "[", "0", "]", ")", "*", "x", ",", "time", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "if", "past", ":", "\n", "        ", "linear_forecast", ".", "center", "=", "linear_forecast", ".", "center", "-", "disp", "\n", "\n", "", "else", ":", "\n", "        ", "linear_forecast", ".", "center", "=", "linear_forecast", ".", "center", "+", "disp", "\n", "\n", "", "if", "center_distance", "(", "target", ",", "static_forecast", ")", "<", "max", "(", "target", ".", "wlh", "[", "0", "]", ",", "target", ".", "wlh", "[", "1", "]", ")", ":", "\n", "        ", "return", "\"static\"", "\n", "\n", "", "elif", "center_distance", "(", "target", ",", "linear_forecast", ")", "<", "max", "(", "target", ".", "wlh", "[", "0", "]", ",", "target", ".", "wlh", "[", "1", "]", ")", ":", "\n", "        ", "return", "\"linear\"", "\n", "\n", "", "else", ":", "\n", "        ", "return", "\"nonlinear\"", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.get_annotations": [[335, 395], ["zip", "nusc.get", "nusc.get", "nusc.get", "range", "nusc_common.trajectory", "forecast_boxes.append", "forecast_annotations.append", "forecast_trajectory.append", "Box", "Box.translate", "Box.rotate", "Box.translate", "Box.rotate", "tracklet_box.append", "tracklet_annotation.append", "nusc_common.get_time", "nusc_common.window", "pyquaternion.Quaternion", "nusc.box_velocity", "numpy.array", "pyquaternion.Quaternion", "numpy.array", "pyquaternion.Quaternion", "nusc.get", "nusc.get", "nusc.get", "nusc.get", "sample_tokens.index"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.trajectory", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.get_time", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.window", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["", "", "def", "get_annotations", "(", "nusc", ",", "annotations", ",", "ref_boxes", ",", "timesteps", ",", "past", ")", ":", "\n", "    ", "forecast_annotations", "=", "[", "]", "\n", "forecast_boxes", "=", "[", "]", "\n", "forecast_trajectory", "=", "[", "]", "\n", "sample_tokens", "=", "[", "s", "[", "\"token\"", "]", "for", "s", "in", "nusc", ".", "sample", "]", "\n", "\n", "for", "annotation", ",", "ref_box", "in", "zip", "(", "annotations", ",", "ref_boxes", ")", ":", "\n", "        ", "tracklet_box", "=", "[", "]", "\n", "tracklet_annotation", "=", "[", "]", "\n", "tracklet_trajectory", "=", "[", "]", "\n", "\n", "token", "=", "nusc", ".", "sample", "[", "sample_tokens", ".", "index", "(", "annotation", "[", "\"sample_token\"", "]", ")", "]", "[", "\"data\"", "]", "[", "\"LIDAR_TOP\"", "]", "\n", "sd_record", "=", "nusc", ".", "get", "(", "\"sample_data\"", ",", "token", ")", "\n", "cs_record", "=", "nusc", ".", "get", "(", "\"calibrated_sensor\"", ",", "sd_record", "[", "\"calibrated_sensor_token\"", "]", ")", "\n", "pose_record", "=", "nusc", ".", "get", "(", "\"ego_pose\"", ",", "sd_record", "[", "\"ego_pose_token\"", "]", ")", "\n", "\n", "pannotation", "=", "annotation", "\n", "for", "i", "in", "range", "(", "timesteps", ")", ":", "\n", "            ", "box", "=", "Box", "(", "center", "=", "annotation", "[", "\"translation\"", "]", ",", "\n", "size", "=", "ref_box", ".", "wlh", ",", "\n", "orientation", "=", "Quaternion", "(", "annotation", "[", "\"rotation\"", "]", ")", ",", "\n", "velocity", "=", "nusc", ".", "box_velocity", "(", "annotation", "[", "\"token\"", "]", ")", ",", "\n", "name", "=", "annotation", "[", "\"category_name\"", "]", ",", "\n", "token", "=", "annotation", "[", "\"token\"", "]", ")", "\n", "\n", "box", ".", "translate", "(", "-", "np", ".", "array", "(", "pose_record", "[", "\"translation\"", "]", ")", ")", "\n", "box", ".", "rotate", "(", "Quaternion", "(", "pose_record", "[", "\"rotation\"", "]", ")", ".", "inverse", ")", "\n", "\n", "#  Move box to sensor coord system", "\n", "box", ".", "translate", "(", "-", "np", ".", "array", "(", "cs_record", "[", "\"translation\"", "]", ")", ")", "\n", "box", ".", "rotate", "(", "Quaternion", "(", "cs_record", "[", "\"rotation\"", "]", ")", ".", "inverse", ")", "\n", "\n", "tracklet_box", ".", "append", "(", "box", ")", "\n", "tracklet_annotation", ".", "append", "(", "annotation", ")", "\n", "\n", "next_token", "=", "annotation", "[", "\"next\"", "]", "\n", "prev_token", "=", "pannotation", "[", "\"prev\"", "]", "\n", "\n", "if", "past", ":", "\n", "                ", "if", "next_token", "!=", "\"\"", ":", "\n", "                    ", "pannotation", "=", "nusc", ".", "get", "(", "\"sample_annotation\"", ",", "next_token", ")", "\n", "\n", "", "if", "prev_token", "!=", "\"\"", ":", "\n", "                    ", "annotation", "=", "nusc", ".", "get", "(", "\"sample_annotation\"", ",", "prev_token", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "next_token", "!=", "\"\"", ":", "\n", "                    ", "annotation", "=", "nusc", ".", "get", "(", "\"sample_annotation\"", ",", "next_token", ")", "\n", "\n", "", "if", "prev_token", "!=", "\"\"", ":", "\n", "                    ", "pannotation", "=", "nusc", ".", "get", "(", "\"sample_annotation\"", ",", "prev_token", ")", "\n", "\n", "", "", "", "tokens", "=", "[", "b", "[", "\"sample_token\"", "]", "for", "b", "in", "tracklet_annotation", "]", "\n", "time", "=", "[", "get_time", "(", "nusc", ",", "src", ",", "dst", ")", "for", "src", ",", "dst", "in", "window", "(", "tokens", ",", "2", ")", "]", "\n", "tracklet_trajectory", "=", "trajectory", "(", "nusc", ",", "tracklet_box", ",", "time", ",", "timesteps", ")", "\n", "\n", "forecast_boxes", ".", "append", "(", "tracklet_box", ")", "\n", "forecast_annotations", ".", "append", "(", "tracklet_annotation", ")", "\n", "forecast_trajectory", ".", "append", "(", "timesteps", "*", "[", "tracklet_trajectory", "]", ")", "\n", "\n", "", "return", "forecast_boxes", ",", "forecast_annotations", ",", "forecast_trajectory", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common._fill_trainval_infos": [[396, 585], ["tqdm.tqdm", "nusc.get", "nusc.get", "nusc.get", "nusc_common.get_sample_data", "nusc.get_sample_data", "transform_matrix", "transform_matrix", "nusc.get", "pyquaternion.Quaternion", "pyquaternion.Quaternion", "len", "len", "nusc.get_ego_centric_map", "cv2.resize", "nusc_common.get_annotations", "numpy.array().reshape", "train_nusc_infos.append", "val_nusc_infos.append", "nusc.get", "nusc.get", "transform_matrix", "nusc.get", "transform_matrix", "functools.reduce", "nusc.get_sample_data_path", "sweeps.append", "len", "nusc.get", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "len", "len", "len", "len", "len", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.array", "len", "sweeps.append", "sweeps.append", "pyquaternion.Quaternion", "pyquaternion.Quaternion", "numpy.array", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "nusc_common.quaternion_yaw", "nusc_common.quaternion_yaw", "nusc_common.quaternion_yaw"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.get_sample_data", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.get_sample_data", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.get_annotations", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.quaternion_yaw", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.quaternion_yaw", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.quaternion_yaw"], ["", "def", "_fill_trainval_infos", "(", "nusc", ",", "train_scenes", ",", "val_scenes", ",", "test", "=", "False", ",", "nsweeps", "=", "20", ",", "filter_zero", "=", "True", ",", "timesteps", "=", "7", ",", "past", "=", "False", ")", ":", "\n", "    ", "from", "nuscenes", ".", "utils", ".", "geometry_utils", "import", "transform_matrix", "\n", "\n", "train_nusc_infos", "=", "[", "]", "\n", "val_nusc_infos", "=", "[", "]", "\n", "\n", "ref_chan", "=", "\"LIDAR_TOP\"", "# The radar channel from which we track back n sweeps to aggregate the point cloud.", "\n", "chan", "=", "\"LIDAR_TOP\"", "# The reference channel of the current sample_rec that the point clouds are mapped to.", "\n", "\n", "for", "sample", "in", "tqdm", "(", "nusc", ".", "sample", ")", ":", "\n", "        ", "\"\"\" Manual save info[\"sweeps\"] \"\"\"", "\n", "# Get reference pose and timestamp", "\n", "# ref_chan == \"LIDAR_TOP\"", "\n", "ref_sd_token", "=", "sample", "[", "\"data\"", "]", "[", "ref_chan", "]", "\n", "ref_sd_rec", "=", "nusc", ".", "get", "(", "\"sample_data\"", ",", "ref_sd_token", ")", "\n", "ref_cs_rec", "=", "nusc", ".", "get", "(", "\n", "\"calibrated_sensor\"", ",", "ref_sd_rec", "[", "\"calibrated_sensor_token\"", "]", "\n", ")", "\n", "ref_pose_rec", "=", "nusc", ".", "get", "(", "\"ego_pose\"", ",", "ref_sd_rec", "[", "\"ego_pose_token\"", "]", ")", "\n", "ref_time", "=", "1e-6", "*", "ref_sd_rec", "[", "\"timestamp\"", "]", "\n", "\n", "ref_lidar_path", ",", "ref_boxes", ",", "_", "=", "get_sample_data", "(", "nusc", ",", "ref_sd_token", ")", "\n", "\n", "ref_cam_front_token", "=", "sample", "[", "\"data\"", "]", "[", "\"CAM_FRONT\"", "]", "\n", "ref_cam_path", ",", "_", ",", "ref_cam_intrinsic", "=", "nusc", ".", "get_sample_data", "(", "ref_cam_front_token", ")", "\n", "\n", "# Homogeneous transform from ego car frame to reference frame", "\n", "ref_from_car", "=", "transform_matrix", "(", "\n", "ref_cs_rec", "[", "\"translation\"", "]", ",", "Quaternion", "(", "ref_cs_rec", "[", "\"rotation\"", "]", ")", ",", "inverse", "=", "True", "\n", ")", "\n", "\n", "# Homogeneous transformation matrix from global to _current_ ego car frame", "\n", "car_from_global", "=", "transform_matrix", "(", "\n", "ref_pose_rec", "[", "\"translation\"", "]", ",", "\n", "Quaternion", "(", "ref_pose_rec", "[", "\"rotation\"", "]", ")", ",", "\n", "inverse", "=", "True", ",", "\n", ")", "\n", "\n", "info", "=", "{", "\n", "\"lidar_path\"", ":", "ref_lidar_path", ",", "\n", "\"cam_front_path\"", ":", "ref_cam_path", ",", "\n", "\"cam_intrinsic\"", ":", "ref_cam_intrinsic", ",", "\n", "\"token\"", ":", "sample", "[", "\"token\"", "]", ",", "\n", "\"sweeps\"", ":", "[", "]", ",", "\n", "\"ref_from_car\"", ":", "ref_from_car", ",", "\n", "\"car_from_global\"", ":", "car_from_global", ",", "\n", "\"timestamp\"", ":", "ref_time", ",", "\n", "}", "\n", "\n", "\n", "sample_data_token", "=", "sample", "[", "\"data\"", "]", "[", "chan", "]", "\n", "curr_sd_rec", "=", "nusc", ".", "get", "(", "\"sample_data\"", ",", "sample_data_token", ")", "\n", "\n", "sweeps", "=", "[", "]", "\n", "while", "len", "(", "sweeps", ")", "<", "nsweeps", "-", "1", ":", "\n", "            ", "if", "curr_sd_rec", "[", "\"prev\"", "]", "==", "\"\"", ":", "\n", "                ", "if", "len", "(", "sweeps", ")", "==", "0", ":", "\n", "                    ", "sweep", "=", "{", "\n", "\"lidar_path\"", ":", "ref_lidar_path", ",", "\n", "\"sample_data_token\"", ":", "curr_sd_rec", "[", "\"token\"", "]", ",", "\n", "\"transform_matrix\"", ":", "None", ",", "\n", "\"time_lag\"", ":", "curr_sd_rec", "[", "\"timestamp\"", "]", "*", "0", ",", "\n", "# time_lag: 0,", "\n", "}", "\n", "sweeps", ".", "append", "(", "sweep", ")", "\n", "", "else", ":", "\n", "                    ", "sweeps", ".", "append", "(", "sweeps", "[", "-", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "curr_sd_rec", "=", "nusc", ".", "get", "(", "\"sample_data\"", ",", "curr_sd_rec", "[", "\"prev\"", "]", ")", "\n", "\n", "# Get past pose", "\n", "current_pose_rec", "=", "nusc", ".", "get", "(", "\"ego_pose\"", ",", "curr_sd_rec", "[", "\"ego_pose_token\"", "]", ")", "\n", "global_from_car", "=", "transform_matrix", "(", "\n", "current_pose_rec", "[", "\"translation\"", "]", ",", "\n", "Quaternion", "(", "current_pose_rec", "[", "\"rotation\"", "]", ")", ",", "\n", "inverse", "=", "False", ",", "\n", ")", "\n", "\n", "# Homogeneous transformation matrix from sensor coordinate frame to ego car frame.", "\n", "current_cs_rec", "=", "nusc", ".", "get", "(", "\n", "\"calibrated_sensor\"", ",", "curr_sd_rec", "[", "\"calibrated_sensor_token\"", "]", "\n", ")", "\n", "car_from_current", "=", "transform_matrix", "(", "\n", "current_cs_rec", "[", "\"translation\"", "]", ",", "\n", "Quaternion", "(", "current_cs_rec", "[", "\"rotation\"", "]", ")", ",", "\n", "inverse", "=", "False", ",", "\n", ")", "\n", "\n", "tm", "=", "reduce", "(", "\n", "np", ".", "dot", ",", "\n", "[", "ref_from_car", ",", "car_from_global", ",", "global_from_car", ",", "car_from_current", "]", ",", "\n", ")", "\n", "\n", "lidar_path", "=", "nusc", ".", "get_sample_data_path", "(", "curr_sd_rec", "[", "\"token\"", "]", ")", "\n", "\n", "time_lag", "=", "ref_time", "-", "1e-6", "*", "curr_sd_rec", "[", "\"timestamp\"", "]", "\n", "\n", "sweep", "=", "{", "\n", "\"lidar_path\"", ":", "lidar_path", ",", "\n", "\"sample_data_token\"", ":", "curr_sd_rec", "[", "\"token\"", "]", ",", "\n", "\"transform_matrix\"", ":", "tm", ",", "\n", "\"global_from_car\"", ":", "global_from_car", ",", "\n", "\"car_from_current\"", ":", "car_from_current", ",", "\n", "\"time_lag\"", ":", "time_lag", ",", "\n", "}", "\n", "sweeps", ".", "append", "(", "sweep", ")", "\n", "\n", "", "", "info", "[", "\"sweeps\"", "]", "=", "sweeps", "\n", "\n", "assert", "(", "len", "(", "info", "[", "\"sweeps\"", "]", ")", "==", "nsweeps", "-", "1", ")", ",", "f\"sweep {curr_sd_rec['token']} only has {len(info['sweeps'])} sweeps, you should duplicate to sweep num {nsweeps-1}\"", "\n", "\"\"\" read from api \"\"\"", "\n", "if", "not", "test", ":", "\n", "            ", "ego_map", "=", "nusc", ".", "get_ego_centric_map", "(", "sweeps", "[", "0", "]", "[", "\"sample_data_token\"", "]", ")", "\n", "bev", "=", "cv2", ".", "resize", "(", "ego_map", ",", "dsize", "=", "(", "180", ",", "180", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "annotations", "=", "[", "nusc", ".", "get", "(", "\"sample_annotation\"", ",", "token", ")", "for", "token", "in", "sample", "[", "\"anns\"", "]", "]", "\n", "forecast_boxes", ",", "forecast_annotations", ",", "forecast_trajectory", "=", "get_annotations", "(", "nusc", ",", "annotations", ",", "ref_boxes", ",", "timesteps", ",", "past", ")", "\n", "\n", "mask", "=", "np", ".", "array", "(", "[", "(", "anno", "[", "'num_lidar_pts'", "]", "+", "anno", "[", "'num_radar_pts'", "]", ")", ">", "0", "for", "anno", "in", "annotations", "]", ",", "dtype", "=", "bool", ")", ".", "reshape", "(", "-", "1", ")", "\n", "locs", "=", "[", "np", ".", "array", "(", "[", "b", ".", "center", "for", "b", "in", "boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "for", "boxes", "in", "forecast_boxes", "]", "\n", "rlocs", "=", "[", "np", ".", "array", "(", "[", "b", ".", "center", "for", "b", "in", "boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "for", "boxes", "in", "forecast_boxes", "]", "\n", "\n", "dims", "=", "[", "np", ".", "array", "(", "[", "b", ".", "wlh", "for", "b", "in", "boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "for", "boxes", "in", "forecast_boxes", "]", "\n", "# rots = np.array([b.orientation.yaw_pitch_roll[0] for b in ref_boxes]).reshape(-1, 1)", "\n", "velocity", "=", "[", "np", ".", "array", "(", "[", "b", ".", "velocity", "for", "b", "in", "boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "for", "boxes", "in", "forecast_boxes", "]", "\n", "rvelocity", "=", "[", "np", ".", "array", "(", "[", "b", ".", "velocity", "for", "b", "in", "boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "for", "boxes", "in", "forecast_boxes", "]", "\n", "rots", "=", "[", "np", ".", "array", "(", "[", "quaternion_yaw", "(", "b", ".", "orientation", ")", "for", "b", "in", "boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "for", "boxes", "in", "forecast_boxes", "]", "\n", "rrots", "=", "[", "np", ".", "array", "(", "[", "quaternion_yaw", "(", "b", ".", "orientation", ")", "for", "b", "in", "boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "for", "boxes", "in", "forecast_boxes", "]", "\n", "\n", "names", "=", "[", "np", ".", "array", "(", "[", "b", ".", "name", "for", "b", "in", "boxes", "]", ")", "for", "boxes", "in", "forecast_boxes", "]", "\n", "tokens", "=", "[", "np", ".", "array", "(", "[", "b", ".", "token", "for", "b", "in", "boxes", "]", ")", "for", "boxes", "in", "forecast_boxes", "]", "\n", "rtokens", "=", "[", "np", ".", "array", "(", "[", "b", ".", "token", "for", "b", "in", "boxes", "]", ")", "for", "boxes", "in", "forecast_boxes", "]", "\n", "\n", "trajectory", "=", "[", "np", ".", "array", "(", "[", "b", "for", "b", "in", "boxes", "]", ")", "for", "boxes", "in", "forecast_trajectory", "]", "\n", "\n", "gt_boxes", "=", "[", "np", ".", "concatenate", "(", "[", "locs", "[", "i", "]", ",", "dims", "[", "i", "]", ",", "velocity", "[", "i", "]", "[", ":", ",", ":", "2", "]", ",", "rvelocity", "[", "i", "]", "[", ":", ",", ":", "2", "]", ",", "-", "rots", "[", "i", "]", "-", "np", ".", "pi", "/", "2", ",", "-", "rrots", "[", "i", "]", "-", "np", ".", "pi", "/", "2", "]", ",", "axis", "=", "1", ")", "for", "i", "in", "range", "(", "len", "(", "annotations", ")", ")", "]", "\n", "# gt_boxes = np.concatenate([locs, dims, rots], axis=1)", "\n", "assert", "len", "(", "annotations", ")", "==", "len", "(", "gt_boxes", ")", "==", "len", "(", "velocity", ")", "==", "len", "(", "rvelocity", ")", "\n", "\n", "if", "len", "(", "annotations", ")", ">", "0", ":", "\n", "                ", "if", "not", "filter_zero", ":", "\n", "                    ", "info", "[", "\"gt_boxes\"", "]", "=", "np", ".", "array", "(", "gt_boxes", ")", "\n", "info", "[", "\"gt_boxes_velocity\"", "]", "=", "np", ".", "array", "(", "velocity", ")", "\n", "info", "[", "\"gt_boxes_rvelocity\"", "]", "=", "np", ".", "array", "(", "rvelocity", ")", "\n", "info", "[", "\"gt_names\"", "]", "=", "np", ".", "array", "(", "[", "[", "general_to_detection", "[", "n", "]", "for", "n", "in", "name", "]", "for", "name", "in", "names", "]", ")", "\n", "info", "[", "\"gt_boxes_token\"", "]", "=", "np", ".", "array", "(", "tokens", ")", "\n", "info", "[", "\"gt_boxes_rtoken\"", "]", "=", "np", ".", "array", "(", "rtokens", ")", "\n", "info", "[", "\"gt_trajectory\"", "]", "=", "np", ".", "array", "(", "trajectory", ")", "\n", "info", "[", "\"bev\"", "]", "=", "bev", "\n", "\n", "", "else", ":", "\n", "                    ", "info", "[", "\"gt_boxes\"", "]", "=", "np", ".", "array", "(", "gt_boxes", ")", "[", "mask", ",", ":", "]", "\n", "info", "[", "\"gt_boxes_velocity\"", "]", "=", "np", ".", "array", "(", "velocity", ")", "[", "mask", ",", ":", "]", "\n", "info", "[", "\"gt_boxes_rvelocity\"", "]", "=", "np", ".", "array", "(", "rvelocity", ")", "[", "mask", ",", ":", "]", "\n", "info", "[", "\"gt_names\"", "]", "=", "np", ".", "array", "(", "[", "[", "general_to_detection", "[", "n", "]", "for", "n", "in", "name", "]", "for", "name", "in", "names", "]", ")", "[", "mask", "]", "\n", "info", "[", "\"gt_boxes_token\"", "]", "=", "np", ".", "array", "(", "tokens", ")", "[", "mask", "]", "\n", "info", "[", "\"gt_boxes_rtoken\"", "]", "=", "np", ".", "array", "(", "rtokens", ")", "[", "mask", "]", "\n", "info", "[", "\"gt_trajectory\"", "]", "=", "np", ".", "array", "(", "trajectory", ")", "[", "mask", "]", "\n", "info", "[", "\"bev\"", "]", "=", "bev", "\n", "", "", "else", ":", "\n", "                ", "mask", "=", "np", ".", "array", "(", "[", "(", "anno", "[", "'num_lidar_pts'", "]", "+", "anno", "[", "'num_radar_pts'", "]", ")", ">", "0", "for", "anno", "in", "annotations", "]", ",", "dtype", "=", "bool", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "locs", "=", "np", ".", "array", "(", "[", "b", ".", "center", "for", "b", "in", "ref_boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "dims", "=", "np", ".", "array", "(", "[", "b", ".", "wlh", "for", "b", "in", "ref_boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "# rots = np.array([b.orientation.yaw_pitch_roll[0] for b in ref_boxes]).reshape(-1, 1)", "\n", "velocity", "=", "np", ".", "array", "(", "[", "b", ".", "velocity", "for", "b", "in", "ref_boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "rvelocity", "=", "np", ".", "array", "(", "[", "b", ".", "rvelocity", "for", "b", "in", "ref_boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "rots", "=", "np", ".", "array", "(", "[", "quaternion_yaw", "(", "b", ".", "orientation", ")", "for", "b", "in", "ref_boxes", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "names", "=", "np", ".", "array", "(", "[", "b", ".", "name", "for", "b", "in", "ref_boxes", "]", ")", "\n", "tokens", "=", "np", ".", "array", "(", "[", "b", ".", "token", "for", "b", "in", "ref_boxes", "]", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "[", "locs", ",", "dims", ",", "velocity", "[", ":", ",", ":", "2", "]", ",", "rvelocity", "[", ":", ",", ":", "2", "]", ",", "-", "rots", "-", "np", ".", "pi", "/", "2", "]", ",", "axis", "=", "1", ")", "\n", "trajectory", "=", "np", ".", "array", "(", "[", "\"static\"", "for", "b", "in", "ref_boxes", "]", ")", "\n", "\n", "info", "[", "\"gt_boxes\"", "]", "=", "gt_boxes", "\n", "info", "[", "\"gt_boxes_velocity\"", "]", "=", "velocity", "\n", "info", "[", "\"gt_boxes_rvelocity\"", "]", "=", "rvelocity", "\n", "info", "[", "\"gt_names\"", "]", "=", "np", ".", "array", "(", "[", "general_to_detection", "[", "name", "]", "for", "name", "in", "names", "]", ")", "\n", "info", "[", "\"gt_boxes_token\"", "]", "=", "tokens", "\n", "info", "[", "\"gt_boxes_rtoken\"", "]", "=", "tokens", "\n", "info", "[", "\"gt_boxes_rtoken\"", "]", "=", "tokens", "\n", "info", "[", "\"gt_trajectory\"", "]", "=", "trajectory", "\n", "info", "[", "'bev'", "]", "=", "bev", "\n", "\n", "", "", "if", "sample", "[", "\"scene_token\"", "]", "in", "train_scenes", ":", "\n", "            ", "train_nusc_infos", ".", "append", "(", "info", ")", "\n", "", "else", ":", "\n", "            ", "val_nusc_infos", ".", "append", "(", "info", ")", "\n", "\n", "", "", "return", "train_nusc_infos", ",", "val_nusc_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.quaternion_yaw": [[587, 603], ["numpy.dot", "numpy.arctan2", "numpy.array"], "function", ["None"], ["", "def", "quaternion_yaw", "(", "q", ":", "Quaternion", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Calculate the yaw angle from a quaternion.\n    Note that this only works for a quaternion that represents a box in lidar or global coordinate frame.\n    It does not work for a box in the camera frame.\n    :param q: Quaternion of interest.\n    :return: Yaw angle in radians.\n    \"\"\"", "\n", "\n", "# Project into xy plane.", "\n", "v", "=", "np", ".", "dot", "(", "q", ".", "rotation_matrix", ",", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", ")", "\n", "\n", "# Measure yaw using arctan.", "\n", "yaw", "=", "np", ".", "arctan2", "(", "v", "[", "1", "]", ",", "v", "[", "0", "]", ")", "\n", "\n", "return", "yaw", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.create_nuscenes_infos": [[605, 665], ["NuScenes", "pathlib.Path", "nusc_common._get_available_scenes", "list", "list", "set", "set", "nusc_common._fill_trainval_infos", "filter", "filter", "print", "print", "print", "print", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "ValueError", "len", "len", "len", "len", "len", "len", "available_scene_names.index", "available_scene_names.index"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common._get_available_scenes", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common._fill_trainval_infos", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.dump", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.dump", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.dump"], ["", "def", "create_nuscenes_infos", "(", "root_path", ",", "version", "=", "\"v1.0-trainval\"", ",", "experiment", "=", "\"trainval_forecast\"", ",", "nsweeps", "=", "20", ",", "filter_zero", "=", "True", ",", "timesteps", "=", "7", ",", "past", "=", "False", ")", ":", "\n", "    ", "nusc", "=", "NuScenes", "(", "version", "=", "version", ",", "dataroot", "=", "root_path", ",", "verbose", "=", "True", ")", "\n", "available_vers", "=", "[", "\"v1.0-trainval\"", ",", "\"v1.0-test\"", ",", "\"v1.0-mini\"", "]", "\n", "assert", "version", "in", "available_vers", "\n", "if", "version", "==", "\"v1.0-trainval\"", ":", "\n", "        ", "train_scenes", "=", "splits", ".", "train", "\n", "# random.shuffle(train_scenes)", "\n", "# train_scenes = train_scenes[:int(len(train_scenes)*0.2)]", "\n", "val_scenes", "=", "splits", ".", "val", "\n", "", "elif", "version", "==", "\"v1.0-test\"", ":", "\n", "        ", "train_scenes", "=", "splits", ".", "test", "\n", "val_scenes", "=", "[", "]", "\n", "", "elif", "version", "==", "\"v1.0-mini\"", ":", "\n", "        ", "train_scenes", "=", "splits", ".", "mini_train", "\n", "val_scenes", "=", "splits", ".", "mini_val", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"unknown\"", ")", "\n", "", "test", "=", "\"test\"", "in", "version", "\n", "root_path", "=", "Path", "(", "root_path", ")", "\n", "# filter exist scenes. you may only download part of dataset.", "\n", "available_scenes", "=", "_get_available_scenes", "(", "nusc", ")", "\n", "available_scene_names", "=", "[", "s", "[", "\"name\"", "]", "for", "s", "in", "available_scenes", "]", "\n", "train_scenes", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "in", "available_scene_names", ",", "train_scenes", ")", ")", "\n", "val_scenes", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "in", "available_scene_names", ",", "val_scenes", ")", ")", "\n", "train_scenes", "=", "set", "(", "\n", "[", "\n", "available_scenes", "[", "available_scene_names", ".", "index", "(", "s", ")", "]", "[", "\"token\"", "]", "\n", "for", "s", "in", "train_scenes", "\n", "]", "\n", ")", "\n", "val_scenes", "=", "set", "(", "\n", "[", "available_scenes", "[", "available_scene_names", ".", "index", "(", "s", ")", "]", "[", "\"token\"", "]", "for", "s", "in", "val_scenes", "]", "\n", ")", "\n", "if", "test", ":", "\n", "        ", "print", "(", "f\"test scene: {len(train_scenes)}\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"train scene: {len(train_scenes)}, val scene: {len(val_scenes)}\"", ")", "\n", "\n", "", "train_nusc_infos", ",", "val_nusc_infos", "=", "_fill_trainval_infos", "(", "\n", "nusc", ",", "train_scenes", ",", "val_scenes", ",", "test", ",", "nsweeps", "=", "nsweeps", ",", "filter_zero", "=", "filter_zero", ",", "timesteps", "=", "timesteps", "\n", ")", "\n", "\n", "if", "test", ":", "\n", "        ", "print", "(", "f\"test sample: {len(train_nusc_infos)}\"", ")", "\n", "with", "open", "(", "\n", "root_path", "/", "\"{}/infos_test_{:02d}sweeps_withvelo.pkl\"", ".", "format", "(", "experiment", ",", "nsweeps", ")", ",", "\"wb\"", "\n", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "train_nusc_infos", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "\n", "f\"train sample: {len(train_nusc_infos)}, val sample: {len(val_nusc_infos)}\"", "\n", ")", "\n", "with", "open", "(", "\n", "root_path", "/", "\"{}/infos_train_{:02d}sweeps_withvelo_filter_{}.pkl\"", ".", "format", "(", "experiment", ",", "nsweeps", ",", "filter_zero", ")", ",", "\"wb\"", "\n", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "train_nusc_infos", ",", "f", ")", "\n", "", "with", "open", "(", "\n", "root_path", "/", "\"{}/infos_val_{:02d}sweeps_withvelo_filter_{}.pkl\"", ".", "format", "(", "experiment", ",", "nsweeps", ",", "filter_zero", ")", ",", "\"wb\"", "\n", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "val_nusc_infos", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nusc_common.eval_main": [[667, 689], ["config_factory", "NuScenesEval", "NuScenesEval.main"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.waymo.waymo_converter.main"], ["", "", "", "def", "eval_main", "(", "nusc", ",", "eval_version", ",", "res_path", ",", "eval_set", ",", "output_dir", ",", "forecast", ",", "tp_pct", ",", "static_only", ",", "\n", "cohort_analysis", ",", "topK", ",", "root", ",", "association_oracle", ",", "nogroup", ")", ":", "\n", "# nusc = NuScenes(version=version, dataroot=str(root_path), verbose=True)", "\n", "    ", "cfg", "=", "config_factory", "(", "eval_version", ")", "\n", "\n", "nusc_eval", "=", "NuScenesEval", "(", "\n", "nusc", ",", "\n", "config", "=", "cfg", ",", "\n", "result_path", "=", "res_path", ",", "\n", "eval_set", "=", "eval_set", ",", "\n", "output_dir", "=", "output_dir", ",", "\n", "verbose", "=", "True", ",", "\n", "forecast", "=", "forecast", ",", "\n", "tp_pct", "=", "tp_pct", ",", "\n", "static_only", "=", "static_only", ",", "\n", "cohort_analysis", "=", "cohort_analysis", ",", "\n", "topK", "=", "topK", ",", "\n", "root", "=", "root", ",", "\n", "association_oracle", "=", "association_oracle", ",", "\n", "nogroup", "=", "nogroup", "\n", ")", "\n", "metrics_summary", "=", "nusc_eval", ".", "main", "(", "plot_examples", "=", "10", ",", "cohort_analysis", "=", "cohort_analysis", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.LoadPointCloudFromFile.__init__": [[103, 107], ["kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["    ", "def", "__init__", "(", "self", ",", "dataset", "=", "\"KittiDataset\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "type", "=", "dataset", "\n", "self", ".", "random_select", "=", "kwargs", ".", "get", "(", "\"random_select\"", ",", "False", ")", "\n", "self", ".", "npoints", "=", "kwargs", ".", "get", "(", "\"npoints\"", ",", "16834", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.LoadPointCloudFromFile.__call__": [[108, 175], ["pathlib.Path", "loading.read_file", "numpy.random.default_rng", "numpy.random.default_rng.choice", "numpy.concatenate", "numpy.concatenate().astype", "numpy.hstack", "str", "numpy.zeros", "len", "len", "len", "loading.read_sweep", "sweep_points_list.append", "sweep_times_list.append", "loading.get_obj", "loading.read_single_waymo", "numpy.concatenate", "range", "numpy.concatenate", "numpy.concatenate().astype", "numpy.hstack", "numpy.zeros", "len", "len", "loading.read_single_waymo_sweep", "sweep_points_list.append", "sweep_times_list.append", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.read_file", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.read_sweep", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.get_obj", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.read_single_waymo", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.read_single_waymo_sweep"], ["", "def", "__call__", "(", "self", ",", "res", ",", "info", ")", ":", "\n", "\n", "        ", "res", "[", "\"type\"", "]", "=", "self", ".", "type", "\n", "\n", "if", "self", ".", "type", "==", "\"NuScenesDataset\"", ":", "\n", "\n", "            ", "nsweeps", "=", "res", "[", "\"lidar\"", "]", "[", "\"nsweeps\"", "]", "\n", "\n", "lidar_path", "=", "Path", "(", "info", "[", "\"lidar_path\"", "]", ")", "\n", "points", "=", "read_file", "(", "str", "(", "lidar_path", ")", ",", "painted", "=", "res", "[", "\"painted\"", "]", ")", "\n", "\n", "sweep_points_list", "=", "[", "points", "]", "\n", "sweep_times_list", "=", "[", "np", ".", "zeros", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", "\n", "\n", "assert", "(", "nsweeps", "-", "1", ")", "==", "len", "(", "\n", "info", "[", "\"sweeps\"", "]", "\n", ")", ",", "\"nsweeps {} should equal to list length {}.\"", ".", "format", "(", "\n", "nsweeps", ",", "len", "(", "info", "[", "\"sweeps\"", "]", ")", "\n", ")", "\n", "\n", "rng", "=", "np", ".", "random", ".", "default_rng", "(", "0", ")", "\n", "for", "i", "in", "rng", ".", "choice", "(", "len", "(", "info", "[", "\"sweeps\"", "]", ")", ",", "nsweeps", "-", "1", ",", "replace", "=", "False", ")", ":", "\n", "                ", "sweep", "=", "info", "[", "\"sweeps\"", "]", "[", "i", "]", "\n", "points_sweep", ",", "times_sweep", "=", "read_sweep", "(", "sweep", ",", "painted", "=", "res", "[", "\"painted\"", "]", ")", "\n", "sweep_points_list", ".", "append", "(", "points_sweep", ")", "\n", "sweep_times_list", ".", "append", "(", "times_sweep", ")", "\n", "\n", "", "points", "=", "np", ".", "concatenate", "(", "sweep_points_list", ",", "axis", "=", "0", ")", "\n", "times", "=", "np", ".", "concatenate", "(", "sweep_times_list", ",", "axis", "=", "0", ")", ".", "astype", "(", "points", ".", "dtype", ")", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"points\"", "]", "=", "points", "\n", "res", "[", "\"lidar\"", "]", "[", "\"times\"", "]", "=", "times", "\n", "res", "[", "\"lidar\"", "]", "[", "\"combined\"", "]", "=", "np", ".", "hstack", "(", "[", "points", ",", "times", "]", ")", "\n", "\n", "", "elif", "self", ".", "type", "==", "\"WaymoDataset\"", ":", "\n", "            ", "path", "=", "info", "[", "'path'", "]", "\n", "nsweeps", "=", "res", "[", "\"lidar\"", "]", "[", "\"nsweeps\"", "]", "\n", "obj", "=", "get_obj", "(", "path", ")", "\n", "points", "=", "read_single_waymo", "(", "obj", ")", "\n", "res", "[", "\"lidar\"", "]", "[", "\"points\"", "]", "=", "points", "\n", "\n", "if", "nsweeps", ">", "1", ":", "\n", "                ", "sweep_points_list", "=", "[", "points", "]", "\n", "sweep_times_list", "=", "[", "np", ".", "zeros", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", "\n", "\n", "assert", "(", "nsweeps", "-", "1", ")", "==", "len", "(", "\n", "info", "[", "\"sweeps\"", "]", "\n", ")", ",", "\"nsweeps {} should be equal to the list length {}.\"", ".", "format", "(", "\n", "nsweeps", ",", "len", "(", "info", "[", "\"sweeps\"", "]", ")", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "nsweeps", "-", "1", ")", ":", "\n", "                    ", "sweep", "=", "info", "[", "\"sweeps\"", "]", "[", "i", "]", "\n", "points_sweep", ",", "times_sweep", "=", "read_single_waymo_sweep", "(", "sweep", ")", "\n", "sweep_points_list", ".", "append", "(", "points_sweep", ")", "\n", "sweep_times_list", ".", "append", "(", "times_sweep", ")", "\n", "\n", "", "points", "=", "np", ".", "concatenate", "(", "sweep_points_list", ",", "axis", "=", "0", ")", "\n", "times", "=", "np", ".", "concatenate", "(", "sweep_times_list", ",", "axis", "=", "0", ")", ".", "astype", "(", "points", ".", "dtype", ")", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"points\"", "]", "=", "points", "\n", "res", "[", "\"lidar\"", "]", "[", "\"times\"", "]", "=", "times", "\n", "res", "[", "\"lidar\"", "]", "[", "\"combined\"", "]", "=", "np", ".", "hstack", "(", "[", "points", ",", "times", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "res", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.LoadPointCloudAnnotations.__init__": [[179, 181], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "with_bbox", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.LoadPointCloudAnnotations.__call__": [[182, 231], ["info[].astype", "range", "numpy.isnan", "boxes.append", "names.append", "tokens.append", "rtokens.append", "velocity.append", "rvelocity.append", "trajectory.append", "numpy.zeros", "info[].astype", "[].astype", "[].astype", "print", "boxes.append", "names.append", "tokens.append", "rtokens.append", "velocity.append", "rvelocity.append", "trajectory.append", "info[].astype", "info[].astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "res", ",", "info", ")", ":", "\n", "\n", "        ", "if", "res", "[", "\"type\"", "]", "in", "[", "\"NuScenesDataset\"", "]", "and", "\"gt_boxes\"", "in", "info", ":", "\n", "            ", "gt_boxes", "=", "info", "[", "\"gt_boxes\"", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gt_boxes", "[", "np", ".", "isnan", "(", "gt_boxes", ")", "]", "=", "0", "\n", "\n", "boxes", ",", "names", ",", "tokens", ",", "rtokens", ",", "velocity", ",", "rvelocity", ",", "trajectory", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "res", "[", "\"metadata\"", "]", "[", "\"timesteps\"", "]", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "boxes", ".", "append", "(", "gt_boxes", "[", ":", ",", "i", ",", ":", "]", ")", "\n", "names", ".", "append", "(", "info", "[", "\"gt_names\"", "]", "[", ":", ",", "i", "]", ")", "\n", "tokens", ".", "append", "(", "info", "[", "\"gt_boxes_token\"", "]", "[", ":", ",", "i", "]", ")", "\n", "rtokens", ".", "append", "(", "info", "[", "\"gt_boxes_rtoken\"", "]", "[", ":", ",", "i", "]", ")", "\n", "velocity", ".", "append", "(", "info", "[", "\"gt_boxes_velocity\"", "]", "[", ":", ",", "i", ",", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "rvelocity", ".", "append", "(", "info", "[", "\"gt_boxes_rvelocity\"", "]", "[", ":", ",", "i", ",", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "trajectory", ".", "append", "(", "info", "[", "\"gt_trajectory\"", "]", "[", ":", ",", "i", "]", ")", "\n", "\n", "", "except", ":", "\n", "                    ", "print", "(", "\"No Annotations in Scene\"", ")", "\n", "boxes", ".", "append", "(", "gt_boxes", ")", "\n", "names", ".", "append", "(", "info", "[", "\"gt_names\"", "]", ")", "\n", "tokens", ".", "append", "(", "info", "[", "\"gt_boxes_token\"", "]", ")", "\n", "rtokens", ".", "append", "(", "info", "[", "\"gt_boxes_rtoken\"", "]", ")", "\n", "velocity", ".", "append", "(", "info", "[", "\"gt_boxes_velocity\"", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "rvelocity", ".", "append", "(", "info", "[", "\"gt_boxes_rvelocity\"", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "trajectory", ".", "append", "(", "info", "[", "\"gt_trajectory\"", "]", ")", "\n", "\n", "\n", "", "", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "=", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"names\"", ":", "names", ",", "\n", "\"tokens\"", ":", "tokens", ",", "\n", "\"rtokens\"", ":", "rtokens", ",", "\n", "\"velocities\"", ":", "velocity", ",", "\n", "\"rvelocities\"", ":", "rvelocity", ",", "\n", "\"trajectory\"", ":", "trajectory", ",", "\n", "\"bev\"", ":", "info", "[", "\"bev\"", "]", "if", "\"bev\"", "in", "info", "else", "np", ".", "zeros", "(", "(", "1", ",", "180", ",", "180", ")", ")", "\n", "}", "\n", "\n", "", "elif", "res", "[", "\"type\"", "]", "==", "'WaymoDataset'", "and", "\"gt_boxes\"", "in", "info", ":", "\n", "            ", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "=", "{", "\n", "\"boxes\"", ":", "info", "[", "\"gt_boxes\"", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "\"names\"", ":", "info", "[", "\"gt_names\"", "]", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "", "return", "res", ",", "info", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading._dict_select": [[17, 23], ["dict_.items", "isinstance", "loading._dict_select"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess._dict_select"], ["def", "_dict_select", "(", "dict_", ",", "inds", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "dict_", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "_dict_select", "(", "v", ",", "inds", ")", "\n", "", "else", ":", "\n", "            ", "dict_", "[", "k", "]", "=", "v", "[", "inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.read_file": [[24, 34], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.load", "numpy.fromfile().reshape", "path.split", "path.split", "path.split", "numpy.fromfile"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.fromfile"], ["", "", "", "def", "read_file", "(", "path", ",", "tries", "=", "2", ",", "num_point_feature", "=", "4", ",", "painted", "=", "False", ")", ":", "\n", "    ", "if", "painted", ":", "\n", "        ", "dir_path", "=", "os", ".", "path", ".", "join", "(", "*", "path", ".", "split", "(", "'/'", ")", "[", ":", "-", "2", "]", ",", "'painted_'", "+", "path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ")", "\n", "painted_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "+", "'.npy'", ")", "\n", "points", "=", "np", ".", "load", "(", "painted_path", ")", "\n", "points", "=", "points", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", "]", "]", "# remove ring_index from features ", "\n", "", "else", ":", "\n", "        ", "points", "=", "np", ".", "fromfile", "(", "path", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "5", ")", "[", ":", ",", ":", "num_point_feature", "]", "\n", "\n", "", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.remove_close": [[36, 46], ["numpy.logical_not", "numpy.abs", "numpy.abs", "numpy.logical_and"], "function", ["None"], ["", "def", "remove_close", "(", "points", ",", "radius", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Removes point too close within a certain radius from origin.\n    :param radius: Radius below which points are removed.\n    \"\"\"", "\n", "x_filt", "=", "np", ".", "abs", "(", "points", "[", "0", ",", ":", "]", ")", "<", "radius", "\n", "y_filt", "=", "np", ".", "abs", "(", "points", "[", "1", ",", ":", "]", ")", "<", "radius", "\n", "not_close", "=", "np", ".", "logical_not", "(", "np", ".", "logical_and", "(", "x_filt", ",", "y_filt", ")", ")", "\n", "points", "=", "points", "[", ":", ",", "not_close", "]", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.read_sweep": [[48, 61], ["loading.remove_close", "loading.read_file", "numpy.ones", "str", "sweep[].dot", "numpy.vstack", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.remove_close", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.read_file"], ["", "def", "read_sweep", "(", "sweep", ",", "painted", "=", "False", ")", ":", "\n", "    ", "min_distance", "=", "1.0", "\n", "points_sweep", "=", "read_file", "(", "str", "(", "sweep", "[", "\"lidar_path\"", "]", ")", ",", "painted", "=", "painted", ")", ".", "T", "\n", "points_sweep", "=", "remove_close", "(", "points_sweep", ",", "min_distance", ")", "\n", "\n", "nbr_points", "=", "points_sweep", ".", "shape", "[", "1", "]", "\n", "if", "sweep", "[", "\"transform_matrix\"", "]", "is", "not", "None", ":", "\n", "        ", "points_sweep", "[", ":", "3", ",", ":", "]", "=", "sweep", "[", "\"transform_matrix\"", "]", ".", "dot", "(", "\n", "np", ".", "vstack", "(", "(", "points_sweep", "[", ":", "3", ",", ":", "]", ",", "np", ".", "ones", "(", "nbr_points", ")", ")", ")", "\n", ")", "[", ":", "3", ",", ":", "]", "\n", "", "curr_times", "=", "sweep", "[", "\"time_lag\"", "]", "*", "np", ".", "ones", "(", "(", "1", ",", "points_sweep", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "return", "points_sweep", ".", "T", ",", "curr_times", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.read_single_waymo": [[62, 72], ["numpy.tanh", "numpy.concatenate"], "function", ["None"], ["", "def", "read_single_waymo", "(", "obj", ")", ":", "\n", "    ", "points_xyz", "=", "obj", "[", "\"lidars\"", "]", "[", "\"points_xyz\"", "]", "\n", "points_feature", "=", "obj", "[", "\"lidars\"", "]", "[", "\"points_feature\"", "]", "\n", "\n", "# normalize intensity ", "\n", "points_feature", "[", ":", ",", "0", "]", "=", "np", ".", "tanh", "(", "points_feature", "[", ":", ",", "0", "]", ")", "\n", "\n", "points", "=", "np", ".", "concatenate", "(", "[", "points_xyz", ",", "points_feature", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.read_single_waymo_sweep": [[73, 93], ["loading.get_obj", "numpy.tanh", "numpy.concatenate", "numpy.ones", "sweep[].dot", "numpy.vstack", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.get_obj"], ["", "def", "read_single_waymo_sweep", "(", "sweep", ")", ":", "\n", "    ", "obj", "=", "get_obj", "(", "sweep", "[", "'path'", "]", ")", "\n", "\n", "points_xyz", "=", "obj", "[", "\"lidars\"", "]", "[", "\"points_xyz\"", "]", "\n", "points_feature", "=", "obj", "[", "\"lidars\"", "]", "[", "\"points_feature\"", "]", "\n", "\n", "# normalize intensity ", "\n", "points_feature", "[", ":", ",", "0", "]", "=", "np", ".", "tanh", "(", "points_feature", "[", ":", ",", "0", "]", ")", "\n", "points_sweep", "=", "np", ".", "concatenate", "(", "[", "points_xyz", ",", "points_feature", "]", ",", "axis", "=", "-", "1", ")", ".", "T", "# 5 x N", "\n", "\n", "nbr_points", "=", "points_sweep", ".", "shape", "[", "1", "]", "\n", "\n", "if", "sweep", "[", "\"transform_matrix\"", "]", "is", "not", "None", ":", "\n", "        ", "points_sweep", "[", ":", "3", ",", ":", "]", "=", "sweep", "[", "\"transform_matrix\"", "]", ".", "dot", "(", "\n", "np", ".", "vstack", "(", "(", "points_sweep", "[", ":", "3", ",", ":", "]", ",", "np", ".", "ones", "(", "nbr_points", ")", ")", ")", "\n", ")", "[", ":", "3", ",", ":", "]", "\n", "\n", "", "curr_times", "=", "sweep", "[", "\"time_lag\"", "]", "*", "np", ".", "ones", "(", "(", "1", ",", "points_sweep", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "return", "points_sweep", ".", "T", ",", "curr_times", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.loading.get_obj": [[95, 99], ["open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load"], ["", "def", "get_obj", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "obj", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.formating.DataBundle.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.formating.Reformat.__init__": [[15, 18], ["kwargs.get"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "double_flip", "=", "kwargs", ".", "get", "(", "'double_flip'", ",", "False", ")", "\n", "self", ".", "double_flip", "=", "double_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.formating.Reformat.__call__": [[19, 82], ["dict", "dict.update", "dict.update", "dict", "dict", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update"], ["", "def", "__call__", "(", "self", ",", "res", ",", "info", ")", ":", "\n", "        ", "meta", "=", "res", "[", "\"metadata\"", "]", "\n", "points", "=", "res", "[", "\"lidar\"", "]", "[", "\"points\"", "]", "\n", "voxels", "=", "res", "[", "\"lidar\"", "]", "[", "\"voxels\"", "]", "\n", "\n", "data_bundle", "=", "dict", "(", "\n", "metadata", "=", "meta", ",", "\n", "points", "=", "points", ",", "\n", "voxels", "=", "voxels", "[", "\"voxels\"", "]", ",", "\n", "shape", "=", "voxels", "[", "\"shape\"", "]", ",", "\n", "num_points", "=", "voxels", "[", "\"num_points\"", "]", ",", "\n", "num_voxels", "=", "voxels", "[", "\"num_voxels\"", "]", ",", "\n", "coordinates", "=", "voxels", "[", "\"coordinates\"", "]", "\n", ")", "\n", "\n", "if", "res", "[", "\"mode\"", "]", "==", "\"train\"", ":", "\n", "            ", "data_bundle", ".", "update", "(", "res", "[", "\"lidar\"", "]", "[", "\"targets\"", "]", ")", "\n", "", "elif", "res", "[", "\"mode\"", "]", "==", "\"val\"", ":", "\n", "            ", "data_bundle", ".", "update", "(", "dict", "(", "metadata", "=", "meta", ",", ")", ")", "\n", "\n", "if", "self", ".", "double_flip", ":", "\n", "# y axis ", "\n", "                ", "yflip_points", "=", "res", "[", "\"lidar\"", "]", "[", "\"yflip_points\"", "]", "\n", "yflip_voxels", "=", "res", "[", "\"lidar\"", "]", "[", "\"yflip_voxels\"", "]", "\n", "yflip_data_bundle", "=", "dict", "(", "\n", "metadata", "=", "meta", ",", "\n", "points", "=", "yflip_points", ",", "\n", "voxels", "=", "yflip_voxels", "[", "\"voxels\"", "]", ",", "\n", "shape", "=", "yflip_voxels", "[", "\"shape\"", "]", ",", "\n", "num_points", "=", "yflip_voxels", "[", "\"num_points\"", "]", ",", "\n", "num_voxels", "=", "yflip_voxels", "[", "\"num_voxels\"", "]", ",", "\n", "coordinates", "=", "yflip_voxels", "[", "\"coordinates\"", "]", ",", "\n", ")", "\n", "\n", "# x axis ", "\n", "xflip_points", "=", "res", "[", "\"lidar\"", "]", "[", "\"xflip_points\"", "]", "\n", "xflip_voxels", "=", "res", "[", "\"lidar\"", "]", "[", "\"xflip_voxels\"", "]", "\n", "xflip_data_bundle", "=", "dict", "(", "\n", "metadata", "=", "meta", ",", "\n", "points", "=", "xflip_points", ",", "\n", "voxels", "=", "xflip_voxels", "[", "\"voxels\"", "]", ",", "\n", "shape", "=", "xflip_voxels", "[", "\"shape\"", "]", ",", "\n", "num_points", "=", "xflip_voxels", "[", "\"num_points\"", "]", ",", "\n", "num_voxels", "=", "xflip_voxels", "[", "\"num_voxels\"", "]", ",", "\n", "coordinates", "=", "xflip_voxels", "[", "\"coordinates\"", "]", ",", "\n", ")", "\n", "# double axis flip ", "\n", "double_flip_points", "=", "res", "[", "\"lidar\"", "]", "[", "\"double_flip_points\"", "]", "\n", "double_flip_voxels", "=", "res", "[", "\"lidar\"", "]", "[", "\"double_flip_voxels\"", "]", "\n", "double_flip_data_bundle", "=", "dict", "(", "\n", "metadata", "=", "meta", ",", "\n", "points", "=", "double_flip_points", ",", "\n", "voxels", "=", "double_flip_voxels", "[", "\"voxels\"", "]", ",", "\n", "shape", "=", "double_flip_voxels", "[", "\"shape\"", "]", ",", "\n", "num_points", "=", "double_flip_voxels", "[", "\"num_points\"", "]", ",", "\n", "num_voxels", "=", "double_flip_voxels", "[", "\"num_voxels\"", "]", ",", "\n", "coordinates", "=", "double_flip_voxels", "[", "\"coordinates\"", "]", ",", "\n", ")", "\n", "\n", "return", "[", "data_bundle", ",", "yflip_data_bundle", ",", "xflip_data_bundle", ",", "double_flip_data_bundle", "]", ",", "info", "\n", "\n", "\n", "", "", "return", "data_bundle", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.Preprocess.__init__": [[94, 113], ["cfg.get", "cfg.get", "cfg.get", "cfg.get", "det3d.builder.build_dbsampler"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.build_dbsampler"], ["    ", "def", "__init__", "(", "self", ",", "cfg", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "shuffle_points", "=", "cfg", ".", "shuffle_points", "\n", "self", ".", "min_points_in_gt", "=", "cfg", ".", "get", "(", "\"min_points_in_gt\"", ",", "-", "1", ")", "\n", "\n", "self", ".", "mode", "=", "cfg", ".", "mode", "\n", "if", "self", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "self", ".", "global_rotation_noise", "=", "cfg", ".", "global_rot_noise", "\n", "self", ".", "global_scaling_noise", "=", "cfg", ".", "global_scale_noise", "\n", "self", ".", "global_translate_std", "=", "cfg", ".", "get", "(", "'global_translate_std'", ",", "0", ")", "\n", "self", ".", "class_names", "=", "cfg", ".", "class_names", "\n", "if", "cfg", ".", "db_sampler", "!=", "None", ":", "\n", "                ", "self", ".", "db_sampler", "=", "build_dbsampler", "(", "cfg", ".", "db_sampler", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "db_sampler", "=", "None", "\n", "\n", "", "self", ".", "npoints", "=", "cfg", ".", "get", "(", "\"npoints\"", ",", "-", "1", ")", "\n", "self", ".", "sampler_type", "=", "cfg", ".", "sampler_type", "\n", "\n", "", "self", ".", "no_augmentation", "=", "cfg", ".", "get", "(", "'no_augmentation'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.Preprocess.__call__": [[114, 224], ["preprocess.get_mask", "get_mask.transpose", "preprocess._dict_select", "preprocess._dict_select", "det3d.core.sampler.preprocess.random_flip_both", "det3d.core.sampler.preprocess.global_rotation", "det3d.core.sampler.preprocess.global_scaling_v2", "det3d.core.sampler.preprocess.global_translate_", "numpy.random.default_rng", "numpy.random.default_rng.shuffle", "preprocess.drop_arrays_by_name", "preprocess._dict_select", "numpy.array", "det3d.core.sampler.preprocess.Preprocess.db_sampler.sample_all", "numpy.array", "preprocess._dict_select", "numpy.array().reshape", "numpy.array().reshape", "det3d.core.bbox.box_np_ops.points_count_rbbox", "range", "range", "numpy.concatenate", "range", "numpy.array", "numpy.array", "range", "range", "len", "len", "range", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "len", "range", "range", "numpy.array", "numpy.array", "len", "len", "len", "det3d.core.sampler.preprocess.Preprocess.class_names.index", "len", "len", "det3d.core.sampler.preprocess.Preprocess.class_names.index"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.get_mask", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess._dict_select", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess._dict_select", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.random_flip_both", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.global_rotation", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.global_scaling_v2", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.global_translate_", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.drop_arrays_by_name", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess._dict_select", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.sample_ops.DataBaseSamplerV2.sample_all", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess._dict_select", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.points_count_rbbox"], ["", "def", "__call__", "(", "self", ",", "res", ",", "info", ")", ":", "\n", "        ", "res", "[", "\"mode\"", "]", "=", "self", ".", "mode", "\n", "\n", "if", "res", "[", "\"type\"", "]", "in", "[", "\"WaymoDataset\"", "]", ":", "\n", "            ", "if", "\"combined\"", "in", "res", "[", "\"lidar\"", "]", ":", "\n", "                ", "points", "=", "res", "[", "\"lidar\"", "]", "[", "\"combined\"", "]", "\n", "", "else", ":", "\n", "                ", "points", "=", "res", "[", "\"lidar\"", "]", "[", "\"points\"", "]", "\n", "", "", "elif", "res", "[", "\"type\"", "]", "in", "[", "\"NuScenesDataset\"", "]", ":", "\n", "            ", "points", "=", "res", "[", "\"lidar\"", "]", "[", "\"combined\"", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "anno_dict", "=", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "\n", "\n", "if", "self", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "gt_dict", "=", "{", "\n", "\"gt_boxes\"", ":", "anno_dict", "[", "\"boxes\"", "]", ",", "\n", "\"gt_names\"", ":", "[", "np", ".", "array", "(", "box", ")", ".", "reshape", "(", "-", "1", ")", "for", "box", "in", "anno_dict", "[", "\"names\"", "]", "]", ",", "\n", "\"gt_trajectory\"", ":", "[", "np", ".", "array", "(", "box", ")", ".", "reshape", "(", "-", "1", ")", "for", "box", "in", "anno_dict", "[", "\"trajectory\"", "]", "]", ",", "\n", "}", "\n", "\n", "", "if", "self", ".", "mode", "==", "\"train\"", "and", "not", "self", ".", "no_augmentation", ":", "\n", "            ", "selected", "=", "[", "drop_arrays_by_name", "(", "box", ",", "[", "\"DontCare\"", ",", "\"ignore\"", ",", "\"UNKNOWN\"", "]", ")", "for", "box", "in", "gt_dict", "[", "\"gt_names\"", "]", "]", "\n", "_dict_select", "(", "gt_dict", ",", "selected", ")", "\n", "\n", "if", "self", ".", "min_points_in_gt", ">", "0", ":", "\n", "                ", "point_counts", "=", "[", "box_np_ops", ".", "points_count_rbbox", "(", "points", ",", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "0", "]", ")", "for", "i", "in", "range", "(", "len", "(", "selected", ")", ")", "]", "\n", "mask", "=", "[", "point_counts", "[", "i", "]", ">=", "self", ".", "min_points_in_gt", "for", "i", "in", "range", "(", "len", "(", "selected", ")", ")", "]", "\n", "_dict_select", "(", "gt_dict", ",", "mask", ")", "\n", "\n", "", "gt_boxes_mask", "=", "[", "np", ".", "array", "(", "[", "n", "in", "self", ".", "class_names", "for", "n", "in", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "for", "i", "in", "range", "(", "len", "(", "selected", ")", ")", "]", "\n", "\n", "if", "self", ".", "db_sampler", ":", "\n", "                ", "sampled_dict", "=", "self", ".", "db_sampler", ".", "sample_all", "(", "\n", "res", "[", "\"metadata\"", "]", "[", "\"image_prefix\"", "]", ",", "\n", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "0", "]", ",", "\n", "gt_dict", "[", "\"gt_names\"", "]", "[", "0", "]", ",", "\n", "gt_dict", "[", "\"gt_trajectory\"", "]", "[", "0", "]", ",", "\n", "res", "[", "\"metadata\"", "]", "[", "\"num_point_features\"", "]", ",", "\n", "False", ",", "\n", "gt_group_ids", "=", "None", ",", "\n", "calib", "=", "None", ",", "\n", "road_planes", "=", "None", ",", "\n", "sampler_type", "=", "self", ".", "sampler_type", "\n", ")", "\n", "\n", "if", "sampled_dict", "is", "not", "None", ":", "\n", "                    ", "sampled_gt_names", "=", "sampled_dict", "[", "\"gt_names\"", "]", "\n", "sampled_gt_trajectory", "=", "sampled_dict", "[", "\"gt_trajectory\"", "]", "\n", "sampled_gt_boxes", "=", "sampled_dict", "[", "\"gt_boxes\"", "]", "\n", "\n", "sampled_points", "=", "sampled_dict", "[", "\"points\"", "]", "\n", "sampled_gt_masks", "=", "sampled_dict", "[", "\"gt_masks\"", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_dict", "[", "\"gt_boxes\"", "]", ")", ")", ":", "\n", "                        ", "for", "j", "in", "range", "(", "len", "(", "sampled_gt_boxes", ")", ")", ":", "\n", "                            ", "try", ":", "\n", "                                ", "sampled_gt_boxes", "[", "j", "]", "[", "-", "6", ":", "]", "=", "sampled_dict", "[", "\"gt_forecast\"", "]", "[", "j", "]", "[", "i", "]", "\n", "", "except", ":", "\n", "                                ", "sampled_gt_boxes", "[", "j", "]", "[", "-", "6", ":", "]", "=", "sampled_dict", "[", "\"gt_forecast\"", "]", "[", "j", "]", "[", "0", "]", "\n", "\n", "", "", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "=", "np", ".", "concatenate", "(", "[", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", ",", "sampled_gt_names", "]", ",", "axis", "=", "0", ")", "\n", "gt_dict", "[", "\"gt_trajectory\"", "]", "[", "i", "]", "=", "np", ".", "concatenate", "(", "[", "gt_dict", "[", "\"gt_trajectory\"", "]", "[", "i", "]", ",", "sampled_gt_trajectory", "]", ",", "axis", "=", "0", ")", "\n", "\n", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "i", "]", "=", "np", ".", "concatenate", "(", "[", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "i", "]", ",", "sampled_gt_boxes", "]", ")", "\n", "gt_boxes_mask", "[", "i", "]", "=", "np", ".", "concatenate", "(", "[", "gt_boxes_mask", "[", "i", "]", ",", "sampled_gt_masks", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "points", "=", "np", ".", "concatenate", "(", "[", "sampled_points", ",", "points", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "_dict_select", "(", "gt_dict", ",", "gt_boxes_mask", ")", "\n", "\n", "gt_classes", "=", "[", "np", ".", "array", "(", "[", "self", ".", "class_names", ".", "index", "(", "n", ")", "+", "1", "for", "n", "in", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "int32", ",", ")", "for", "i", "in", "range", "(", "len", "(", "gt_dict", "[", "\"gt_boxes\"", "]", ")", ")", "]", "\n", "gt_dict", "[", "\"gt_classes\"", "]", "=", "gt_classes", "\n", "\n", "gt_dict", "[", "\"gt_boxes\"", "]", ",", "points", ",", "flip_aug", "=", "prep", ".", "random_flip_both", "(", "gt_dict", "[", "\"gt_boxes\"", "]", ",", "points", ")", "\n", "gt_dict", "[", "\"gt_boxes\"", "]", ",", "points", ",", "rot_aug", "=", "prep", ".", "global_rotation", "(", "gt_dict", "[", "\"gt_boxes\"", "]", ",", "points", ",", "rotation", "=", "self", ".", "global_rotation_noise", ")", "\n", "gt_dict", "[", "\"gt_boxes\"", "]", ",", "points", ",", "scale_aug", "=", "prep", ".", "global_scaling_v2", "(", "gt_dict", "[", "\"gt_boxes\"", "]", ",", "points", ",", "*", "self", ".", "global_scaling_noise", ")", "\n", "gt_dict", "[", "\"gt_boxes\"", "]", ",", "points", ",", "trans_aug", "=", "prep", ".", "global_translate_", "(", "gt_dict", "[", "\"gt_boxes\"", "]", ",", "points", ",", "noise_translate_std", "=", "self", ".", "global_translate_std", ")", "\n", "\n", "", "elif", "self", ".", "no_augmentation", ":", "\n", "            ", "gt_boxes_mask", "=", "[", "np", ".", "array", "(", "[", "n", "in", "self", ".", "class_names", "for", "n", "in", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "for", "i", "in", "range", "(", "len", "(", "gt_dict", "[", "\"gt_names\"", "]", ")", ")", "]", "\n", "_dict_select", "(", "gt_dict", ",", "gt_boxes_mask", ")", "\n", "\n", "gt_classes", "=", "[", "np", ".", "array", "(", "[", "self", ".", "class_names", ".", "index", "(", "n", ")", "+", "1", "for", "n", "in", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "int32", ",", ")", "for", "i", "in", "range", "(", "len", "(", "gt_dict", "[", "\"gt_names\"", "]", ")", ")", "]", "\n", "gt_dict", "[", "\"gt_classes\"", "]", "=", "gt_classes", "\n", "\n", "", "if", "self", ".", "shuffle_points", ":", "\n", "            ", "rng", "=", "np", ".", "random", ".", "default_rng", "(", "0", ")", "\n", "rng", ".", "shuffle", "(", "points", ")", "\n", "\n", "", "if", "self", ".", "mode", "!=", "\"train\"", ":", "\n", "            ", "trans_aug", "=", "[", "0", ",", "0", "]", "\n", "rot_aug", "=", "0", "\n", "flip_aug", "=", "[", "False", ",", "False", "]", "\n", "scale_aug", "=", "1", "\n", "\n", "#bev_map, xbins, ybins, zbins, = z_offset(points)", "\n", "", "bev", "=", "get_mask", "(", "anno_dict", "[", "\"bev\"", "]", ",", "t", "=", "trans_aug", ",", "angle", "=", "rot_aug", ",", "flip", "=", "flip_aug", ",", "scale", "=", "scale_aug", ")", "\n", "\n", "#bev = np.concatenate((bev_map, bev[...,None]), axis=-1)", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"bev_map\"", "]", "=", "bev", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"points\"", "]", "=", "points", "\n", "\n", "if", "self", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "=", "gt_dict", "\n", "\n", "", "return", "res", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.Voxelization.__init__": [[228, 242], ["kwargs.get", "kwargs.get.get", "det3d.core.input.voxel_generator.VoxelGenerator", "isinstance"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "cfg", "=", "kwargs", ".", "get", "(", "\"cfg\"", ",", "None", ")", "\n", "self", ".", "range", "=", "cfg", ".", "range", "\n", "self", ".", "voxel_size", "=", "cfg", ".", "voxel_size", "\n", "self", ".", "max_points_in_voxel", "=", "cfg", ".", "max_points_in_voxel", "\n", "self", ".", "max_voxel_num", "=", "[", "cfg", ".", "max_voxel_num", ",", "cfg", ".", "max_voxel_num", "]", "if", "isinstance", "(", "cfg", ".", "max_voxel_num", ",", "int", ")", "else", "cfg", ".", "max_voxel_num", "\n", "\n", "self", ".", "double_flip", "=", "cfg", ".", "get", "(", "'double_flip'", ",", "False", ")", "\n", "\n", "self", ".", "voxel_generator", "=", "VoxelGenerator", "(", "\n", "voxel_size", "=", "self", ".", "voxel_size", ",", "\n", "point_cloud_range", "=", "self", ".", "range", ",", "\n", "max_num_points", "=", "self", ".", "max_points_in_voxel", ",", "\n", "max_voxels", "=", "self", ".", "max_voxel_num", "[", "0", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.Voxelization.__call__": [[244, 322], ["det3d.core.sampler.preprocess.Voxelization.voxel_generator.generate", "numpy.array", "dict", "preprocess._dict_select", "det3d.core.sampler.preprocess.Voxelization.voxel_generator.generate", "numpy.array", "dict", "det3d.core.sampler.preprocess.Voxelization.voxel_generator.generate", "numpy.array", "dict", "det3d.core.sampler.preprocess.Voxelization.voxel_generator.generate", "numpy.array", "dict", "det3d.core.sampler.preprocess.filter_gt_box_outside_range", "range", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.input.voxel_generator.VoxelGenerator.generate", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess._dict_select", "home.repos.pwc.inspect_result.neeharperi_futuredet.input.voxel_generator.VoxelGenerator.generate", "home.repos.pwc.inspect_result.neeharperi_futuredet.input.voxel_generator.VoxelGenerator.generate", "home.repos.pwc.inspect_result.neeharperi_futuredet.input.voxel_generator.VoxelGenerator.generate", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.filter_gt_box_outside_range"], ["", "def", "__call__", "(", "self", ",", "res", ",", "info", ")", ":", "\n", "        ", "voxel_size", "=", "self", ".", "voxel_generator", ".", "voxel_size", "\n", "pc_range", "=", "self", ".", "voxel_generator", ".", "point_cloud_range", "\n", "grid_size", "=", "self", ".", "voxel_generator", ".", "grid_size", "\n", "\n", "if", "res", "[", "\"mode\"", "]", "==", "\"train\"", ":", "\n", "            ", "gt_dict", "=", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "\n", "bv_range", "=", "pc_range", "[", "[", "0", ",", "1", ",", "3", ",", "4", "]", "]", "\n", "mask", "=", "[", "prep", ".", "filter_gt_box_outside_range", "(", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "0", "]", ",", "bv_range", ")", "for", "i", "in", "range", "(", "len", "(", "gt_dict", "[", "\"gt_boxes\"", "]", ")", ")", "]", "\n", "_dict_select", "(", "gt_dict", ",", "mask", ")", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "=", "gt_dict", "\n", "max_voxels", "=", "self", ".", "max_voxel_num", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "max_voxels", "=", "self", ".", "max_voxel_num", "[", "1", "]", "\n", "\n", "", "voxels", ",", "coordinates", ",", "num_points", "=", "self", ".", "voxel_generator", ".", "generate", "(", "res", "[", "\"lidar\"", "]", "[", "\"points\"", "]", ",", "max_voxels", "=", "max_voxels", ")", "\n", "num_voxels", "=", "np", ".", "array", "(", "[", "voxels", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"voxels\"", "]", "=", "dict", "(", "\n", "voxels", "=", "voxels", ",", "\n", "coordinates", "=", "coordinates", ",", "\n", "num_points", "=", "num_points", ",", "\n", "num_voxels", "=", "num_voxels", ",", "\n", "shape", "=", "grid_size", ",", "\n", "range", "=", "pc_range", ",", "\n", "size", "=", "voxel_size", "\n", ")", "\n", "\n", "double_flip", "=", "self", ".", "double_flip", "and", "(", "res", "[", "\"mode\"", "]", "!=", "'train'", ")", "\n", "\n", "if", "double_flip", ":", "\n", "            ", "flip_voxels", ",", "flip_coordinates", ",", "flip_num_points", "=", "self", ".", "voxel_generator", ".", "generate", "(", "\n", "res", "[", "\"lidar\"", "]", "[", "\"yflip_points\"", "]", "\n", ")", "\n", "flip_num_voxels", "=", "np", ".", "array", "(", "[", "flip_voxels", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"yflip_voxels\"", "]", "=", "dict", "(", "\n", "voxels", "=", "flip_voxels", ",", "\n", "coordinates", "=", "flip_coordinates", ",", "\n", "num_points", "=", "flip_num_points", ",", "\n", "num_voxels", "=", "flip_num_voxels", ",", "\n", "shape", "=", "grid_size", ",", "\n", "range", "=", "pc_range", ",", "\n", "size", "=", "voxel_size", "\n", ")", "\n", "\n", "flip_voxels", ",", "flip_coordinates", ",", "flip_num_points", "=", "self", ".", "voxel_generator", ".", "generate", "(", "\n", "res", "[", "\"lidar\"", "]", "[", "\"xflip_points\"", "]", "\n", ")", "\n", "flip_num_voxels", "=", "np", ".", "array", "(", "[", "flip_voxels", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"xflip_voxels\"", "]", "=", "dict", "(", "\n", "voxels", "=", "flip_voxels", ",", "\n", "coordinates", "=", "flip_coordinates", ",", "\n", "num_points", "=", "flip_num_points", ",", "\n", "num_voxels", "=", "flip_num_voxels", ",", "\n", "shape", "=", "grid_size", ",", "\n", "range", "=", "pc_range", ",", "\n", "size", "=", "voxel_size", "\n", ")", "\n", "\n", "flip_voxels", ",", "flip_coordinates", ",", "flip_num_points", "=", "self", ".", "voxel_generator", ".", "generate", "(", "\n", "res", "[", "\"lidar\"", "]", "[", "\"double_flip_points\"", "]", "\n", ")", "\n", "flip_num_voxels", "=", "np", ".", "array", "(", "[", "flip_voxels", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"double_flip_voxels\"", "]", "=", "dict", "(", "\n", "voxels", "=", "flip_voxels", ",", "\n", "coordinates", "=", "flip_coordinates", ",", "\n", "num_points", "=", "flip_num_points", ",", "\n", "num_voxels", "=", "flip_num_voxels", ",", "\n", "shape", "=", "grid_size", ",", "\n", "range", "=", "pc_range", ",", "\n", "size", "=", "voxel_size", "\n", ")", "\n", "\n", "", "return", "res", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.AssignLabel.__init__": [[338, 349], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Return CenterNet training labels like heatmap, height, offset\"\"\"", "\n", "assigner_cfg", "=", "kwargs", "[", "\"cfg\"", "]", "\n", "self", ".", "radius_mult", "=", "assigner_cfg", ".", "radius_mult", "\n", "self", ".", "sampler_type", "=", "assigner_cfg", ".", "sampler_type", "\n", "\n", "self", ".", "out_size_factor", "=", "assigner_cfg", ".", "out_size_factor", "\n", "self", ".", "tasks", "=", "assigner_cfg", ".", "target_assigner", ".", "tasks", "\n", "self", ".", "gaussian_overlap", "=", "assigner_cfg", ".", "gaussian_overlap", "\n", "self", ".", "_max_objs", "=", "assigner_cfg", ".", "max_objs", "\n", "self", ".", "_min_radius", "=", "assigner_cfg", ".", "min_radius", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.AssignLabel.__call__": [[350, 911], ["len", "len", "range", "range", "range", "ef.keys", "zip", "gt_dict[].append", "gt_dict[].append", "gt_dict[].append", "zip", "enumerate", "enumerate", "preprocess.flatten", "preprocess.merge_multi_group_label", "numpy.concatenate", "len", "example.update", "example.update", "example_forecast.append", "example_forecast[].keys", "ex[].append", "name_trajectories.append", "classes_trajectories.append", "boxes_trajectories.append", "numpy.array", "numpy.array", "numpy.array", "name_forecast.append", "classes_forecast.append", "boxes_forecast.append", "numpy.array", "numpy.array", "numpy.array", "task_masks.append", "len", "task_boxes.append", "task_classes.append", "task_names.append", "len", "det3d.core.bbox.box_np_ops.limit_period", "det3d.core.bbox.box_np_ops.limit_period", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "min", "range", "hms.append", "anno_boxs.append", "masks.append", "inds.append", "cats.append", "numpy.zeros", "enumerate", "enumerate", "preprocess.flatten", "preprocess.merge_multi_group_label", "numpy.concatenate", "len", "example.update", "example.update", "enumerate", "enumerate", "preprocess.flatten", "preprocess.merge_multi_group_label", "numpy.concatenate", "len", "example.update", "example.update", "task_box.append", "task_class.append", "task_name.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "NotImplementedError", "merge_multi_group_label.reshape().astype", "task_masks.append", "len", "task_boxes.append", "task_classes.append", "task_names.append", "len", "det3d.core.bbox.box_np_ops.limit_period", "det3d.core.bbox.box_np_ops.limit_period", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "min", "range", "hms.append", "anno_boxs.append", "masks.append", "inds.append", "cats.append", "numpy.zeros", "task_masks.append", "len", "task_boxes.append", "task_classes.append", "task_names.append", "len", "det3d.core.bbox.box_np_ops.limit_period", "det3d.core.bbox.box_np_ops.limit_period", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "min", "range", "hms.append", "anno_boxs.append", "masks.append", "inds.append", "cats.append", "numpy.zeros", "numpy.where", "len", "numpy.zeros", "NotImplementedError", "numpy.linalg.norm", "max", "numpy.array", "numpy.array.astype", "draw_gaussian", "task_box.append", "task_class.append", "task_name.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "NotImplementedError", "merge_multi_group_label.reshape().astype", "task_box.append", "task_class.append", "task_name.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "NotImplementedError", "merge_multi_group_label.reshape().astype", "min", "det3d.core.utils.center_utils.gaussian_radius", "int", "numpy.concatenate", "merge_multi_group_label.reshape", "numpy.where", "len", "numpy.zeros", "NotImplementedError", "numpy.linalg.norm", "max", "numpy.array", "numpy.array.astype", "draw_gaussian", "numpy.where", "len", "numpy.zeros", "NotImplementedError", "numpy.linalg.norm", "max", "numpy.array", "numpy.array.astype", "draw_gaussian", "max", "numpy.concatenate", "NotImplementedError", "min", "det3d.core.utils.center_utils.gaussian_radius", "int", "numpy.concatenate", "merge_multi_group_label.reshape", "min", "det3d.core.utils.center_utils.gaussian_radius", "int", "numpy.concatenate", "merge_multi_group_label.reshape", "numpy.log", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "max", "numpy.concatenate", "NotImplementedError", "max", "numpy.concatenate", "NotImplementedError", "class_name.index", "numpy.log", "numpy.array", "numpy.array", "numpy.sin", "numpy.cos", "numpy.log", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.log", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "class_name.index", "numpy.log", "numpy.array", "numpy.array", "numpy.sin", "numpy.cos", "class_name.index", "numpy.log", "numpy.array", "numpy.array", "numpy.sin", "numpy.cos"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.flatten", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.merge_multi_group_label", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.limit_period", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.limit_period", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.flatten", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.merge_multi_group_label", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.flatten", "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.merge_multi_group_label", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.limit_period", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.limit_period", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.limit_period", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.limit_period", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_module.ConvModule.norm", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils.gaussian_radius", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_module.ConvModule.norm", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_module.ConvModule.norm", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils.gaussian_radius", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils.gaussian_radius", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log"], ["", "def", "__call__", "(", "self", ",", "res", ",", "info", ")", ":", "\n", "        ", "max_objs", "=", "self", ".", "_max_objs", "\n", "class_names_by_task", "=", "[", "t", ".", "class_names", "for", "t", "in", "self", ".", "tasks", "]", "\n", "num_classes_by_task", "=", "[", "t", ".", "num_class", "for", "t", "in", "self", ".", "tasks", "]", "\n", "\n", "# Calculate output featuremap size", "\n", "grid_size", "=", "res", "[", "\"lidar\"", "]", "[", "\"voxels\"", "]", "[", "\"shape\"", "]", "\n", "pc_range", "=", "res", "[", "\"lidar\"", "]", "[", "\"voxels\"", "]", "[", "\"range\"", "]", "\n", "voxel_size", "=", "res", "[", "\"lidar\"", "]", "[", "\"voxels\"", "]", "[", "\"size\"", "]", "\n", "\n", "feature_map_size", "=", "grid_size", "[", ":", "2", "]", "//", "self", ".", "out_size_factor", "\n", "\n", "example_forecast", "=", "[", "]", "\n", "if", "res", "[", "\"mode\"", "]", "==", "\"train\"", ":", "\n", "            ", "length", "=", "len", "(", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "[", "\"gt_boxes\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "length", "=", "len", "(", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "[", "\"boxes\"", "]", ")", "\n", "\n", "", "classname", "=", "\"car\"", "if", "\"car\"", "in", "class_names_by_task", "[", "0", "]", "[", "0", "]", "else", "\"pedestrian\"", "\n", "\n", "if", "classname", "==", "\"car\"", ":", "\n", "            ", "trajectory_map", "=", "{", "\"static_car\"", ":", "1", ",", "\"linear_car\"", ":", "2", ",", "\"nonlinear_car\"", ":", "3", "}", "\n", "forecast_map", "=", "{", "\"car_1\"", ":", "1", ",", "\"car_2\"", ":", "2", ",", "\"car_3\"", ":", "3", ",", "\"car_4\"", ":", "4", ",", "\"car_5\"", ":", "5", ",", "\"car_6\"", ":", "6", ",", "\"car_7\"", ":", "7", "}", "\n", "", "else", ":", "\n", "            ", "trajectory_map", "=", "{", "\"static_pedestrian\"", ":", "1", ",", "\"linear_pedestrian\"", ":", "2", ",", "\"nonlinear_pedestrian\"", ":", "3", "}", "\n", "forecast_map", "=", "{", "\"pedestrian_1\"", ":", "1", ",", "\"pedestrian_2\"", ":", "2", ",", "\"pedestrian_3\"", ":", "3", ",", "\"pedestrian_4\"", ":", "4", ",", "\"pedestrian_5\"", ":", "5", ",", "\"pedestrian_6\"", ":", "6", ",", "\"pedestrian_7\"", ":", "7", "}", "\n", "\n", "", "if", "res", "[", "\"mode\"", "]", "==", "\"train\"", ":", "\n", "            ", "gt_dict", "=", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "\n", "gt_dict", "[", "\"gt_names_trajectory\"", "]", ",", "gt_dict", "[", "\"gt_names_forecast\"", "]", ",", "gt_dict", "[", "\"gt_classes_trajectory\"", "]", ",", "gt_dict", "[", "\"gt_classes_forecast\"", "]", ",", "gt_dict", "[", "\"gt_boxes_trajectory\"", "]", ",", "gt_dict", "[", "\"gt_boxes_forecast\"", "]", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                ", "class_names", "=", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "\n", "trajectory_names", "=", "gt_dict", "[", "\"gt_trajectory\"", "]", "[", "i", "]", "\n", "boxes", "=", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "i", "]", "\n", "\n", "name_trajectories", ",", "classes_trajectories", ",", "boxes_trajectories", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "name", ",", "trajectory", ",", "box", "in", "zip", "(", "class_names", ",", "trajectory_names", ",", "boxes", ")", ":", "\n", "                    ", "name_trajectories", ".", "append", "(", "\"{}_{}\"", ".", "format", "(", "trajectory", ",", "name", ")", ")", "\n", "classes_trajectories", ".", "append", "(", "trajectory_map", "[", "\"{}_{}\"", ".", "format", "(", "trajectory", ",", "name", ")", "]", ")", "\n", "boxes_trajectories", ".", "append", "(", "box", ")", "\n", "\n", "", "gt_dict", "[", "\"gt_names_trajectory\"", "]", ".", "append", "(", "np", ".", "array", "(", "name_trajectories", ")", ")", "\n", "gt_dict", "[", "\"gt_classes_trajectory\"", "]", ".", "append", "(", "np", ".", "array", "(", "classes_trajectories", ")", ")", "\n", "gt_dict", "[", "\"gt_boxes_trajectory\"", "]", ".", "append", "(", "np", ".", "array", "(", "boxes_trajectories", ")", ")", "\n", "\n", "", "name_forecast", ",", "classes_forecast", ",", "boxes_forecast", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                ", "class_names", "=", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "\n", "boxes", "=", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "i", "]", "\n", "\n", "for", "name", ",", "box", "in", "zip", "(", "class_names", ",", "boxes", ")", ":", "\n", "                    ", "name_forecast", ".", "append", "(", "\"{}_{}\"", ".", "format", "(", "name", ",", "i", "+", "1", ")", ")", "\n", "classes_forecast", ".", "append", "(", "forecast_map", "[", "\"{}_{}\"", ".", "format", "(", "name", ",", "i", "+", "1", ")", "]", ")", "\n", "boxes_forecast", ".", "append", "(", "box", ")", "\n", "\n", "", "", "gt_dict", "[", "\"gt_names_forecast\"", "]", "=", "length", "*", "[", "np", ".", "array", "(", "name_forecast", ")", "]", "\n", "gt_dict", "[", "\"gt_classes_forecast\"", "]", "=", "length", "*", "[", "np", ".", "array", "(", "classes_forecast", ")", "]", "\n", "gt_dict", "[", "\"gt_boxes_forecast\"", "]", "=", "length", "*", "[", "np", ".", "array", "(", "boxes_forecast", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                ", "example", "=", "{", "}", "\n", "# reorganize the gt_dict by tasks", "\n", "task_masks", "=", "[", "]", "\n", "flag", "=", "0", "\n", "for", "class_name", "in", "class_names_by_task", ":", "\n", "                    ", "task_masks", ".", "append", "(", "\n", "[", "\n", "np", ".", "where", "(", "\n", "gt_dict", "[", "\"gt_classes\"", "]", "[", "i", "]", "==", "class_name", ".", "index", "(", "j", ")", "+", "1", "+", "flag", "\n", ")", "\n", "for", "j", "in", "class_name", "\n", "]", "\n", ")", "\n", "flag", "+=", "len", "(", "class_name", ")", "\n", "\n", "", "task_boxes", "=", "[", "]", "\n", "task_classes", "=", "[", "]", "\n", "task_names", "=", "[", "]", "\n", "flag2", "=", "0", "\n", "for", "idx", ",", "mask", "in", "enumerate", "(", "task_masks", ")", ":", "\n", "                    ", "task_box", "=", "[", "]", "\n", "task_class", "=", "[", "]", "\n", "task_name", "=", "[", "]", "\n", "for", "m", "in", "mask", ":", "\n", "                        ", "task_box", ".", "append", "(", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "i", "]", "[", "m", "]", ")", "\n", "task_class", ".", "append", "(", "gt_dict", "[", "\"gt_classes\"", "]", "[", "i", "]", "[", "m", "]", "-", "flag2", ")", "\n", "task_name", ".", "append", "(", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "[", "m", "]", ")", "\n", "", "task_boxes", ".", "append", "(", "np", ".", "concatenate", "(", "task_box", ",", "axis", "=", "0", ")", ")", "\n", "task_classes", ".", "append", "(", "np", ".", "concatenate", "(", "task_class", ")", ")", "\n", "task_names", ".", "append", "(", "np", ".", "concatenate", "(", "task_name", ")", ")", "\n", "flag2", "+=", "len", "(", "mask", ")", "\n", "\n", "", "for", "task_box", "in", "task_boxes", ":", "\n", "# limit rad to [-pi, pi]", "\n", "                    ", "task_box", "[", ":", ",", "-", "1", "]", "=", "box_np_ops", ".", "limit_period", "(", "\n", "task_box", "[", ":", ",", "-", "1", "]", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", "*", "2", "\n", ")", "\n", "task_box", "[", ":", ",", "-", "2", "]", "=", "box_np_ops", ".", "limit_period", "(", "\n", "task_box", "[", ":", ",", "-", "2", "]", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", "*", "2", "\n", ")", "\n", "\n", "# print(gt_dict.keys())", "\n", "", "gt_dict", "[", "\"gt_classes\"", "]", "[", "i", "]", "=", "task_classes", "\n", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "=", "task_names", "\n", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "i", "]", "=", "task_boxes", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "=", "gt_dict", "\n", "\n", "draw_gaussian", "=", "draw_umich_gaussian", "\n", "\n", "hms", ",", "anno_boxs", ",", "inds", ",", "masks", ",", "cats", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "idx", ",", "task", "in", "enumerate", "(", "self", ".", "tasks", ")", ":", "\n", "                    ", "hm", "=", "np", ".", "zeros", "(", "(", "len", "(", "class_names_by_task", "[", "idx", "]", ")", ",", "feature_map_size", "[", "1", "]", ",", "feature_map_size", "[", "0", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "res", "[", "'type'", "]", "==", "'NuScenesDataset'", ":", "\n", "# [reg, hei, dim, vx, vy, rots, rotc]", "\n", "                        ", "anno_box", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "14", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "'WaymoDataset'", ":", "\n", "                        ", "anno_box", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "10", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", "\"Only Support nuScene for Now!\"", ")", "\n", "\n", "", "ind", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cat", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "num_objs", "=", "min", "(", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", ".", "shape", "[", "0", "]", ",", "max_objs", ")", "\n", "\n", "for", "k", "in", "range", "(", "num_objs", ")", ":", "\n", "                        ", "cls_id", "=", "gt_dict", "[", "'gt_classes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "-", "1", "\n", "\n", "w", ",", "l", ",", "h", "=", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "3", "]", ",", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "4", "]", ",", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "5", "]", "\n", "w", ",", "l", "=", "w", "/", "voxel_size", "[", "0", "]", "/", "self", ".", "out_size_factor", ",", "l", "/", "voxel_size", "[", "1", "]", "/", "self", ".", "out_size_factor", "\n", "if", "w", ">", "0", "and", "l", ">", "0", ":", "\n", "                            ", "vel_norm", "=", "np", ".", "linalg", ".", "norm", "(", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", ")", "\n", "\n", "if", "self", ".", "radius_mult", ":", "\n", "                                ", "mult", "=", "min", "(", "max", "(", "1", ",", "vel_norm", "*", "(", "1", "+", "i", ")", "/", "2", ")", ",", "4", ")", "\n", "", "else", ":", "\n", "                                ", "mult", "=", "1.0", "\n", "\n", "", "radius", "=", "mult", "*", "gaussian_radius", "(", "(", "l", ",", "w", ")", ",", "min_overlap", "=", "self", ".", "gaussian_overlap", ")", "\n", "radius", "=", "max", "(", "self", ".", "_min_radius", ",", "int", "(", "radius", ")", ")", "\n", "\n", "# be really careful for the coordinate system of your box annotation. ", "\n", "x", ",", "y", ",", "z", "=", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "0", "]", ",", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "1", "]", ",", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "2", "]", "\n", "\n", "coor_x", ",", "coor_y", "=", "(", "x", "-", "pc_range", "[", "0", "]", ")", "/", "voxel_size", "[", "0", "]", "/", "self", ".", "out_size_factor", ",", "(", "y", "-", "pc_range", "[", "1", "]", ")", "/", "voxel_size", "[", "1", "]", "/", "self", ".", "out_size_factor", "\n", "\n", "ct", "=", "np", ".", "array", "(", "\n", "[", "coor_x", ",", "coor_y", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ct_int", "=", "ct", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# throw out not in range objects to avoid out of array area when creating the heatmap", "\n", "if", "not", "(", "0", "<=", "ct_int", "[", "0", "]", "<", "feature_map_size", "[", "0", "]", "and", "0", "<=", "ct_int", "[", "1", "]", "<", "feature_map_size", "[", "1", "]", ")", ":", "\n", "                                ", "continue", "\n", "\n", "", "draw_gaussian", "(", "hm", "[", "cls_id", "]", ",", "ct", ",", "radius", ")", "\n", "\n", "new_idx", "=", "k", "\n", "x", ",", "y", "=", "ct_int", "[", "0", "]", ",", "ct_int", "[", "1", "]", "\n", "\n", "cat", "[", "new_idx", "]", "=", "cls_id", "\n", "ind", "[", "new_idx", "]", "=", "y", "*", "feature_map_size", "[", "0", "]", "+", "x", "\n", "mask", "[", "new_idx", "]", "=", "1", "\n", "\n", "if", "res", "[", "'type'", "]", "==", "'NuScenesDataset'", ":", "\n", "                                ", "vx", ",", "vy", "=", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", "\n", "rvx", ",", "rvy", "=", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "8", ":", "10", "]", "\n", "rot", "=", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "10", "]", "\n", "rrot", "=", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "11", "]", "\n", "\n", "anno_box", "[", "new_idx", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "ct", "-", "(", "x", ",", "y", ")", ",", "z", ",", "np", ".", "log", "(", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "3", ":", "6", "]", ")", ",", "\n", "np", ".", "array", "(", "vx", ")", ",", "np", ".", "array", "(", "vy", ")", ",", "np", ".", "array", "(", "rvx", ")", ",", "np", ".", "array", "(", "rvy", ")", ",", "np", ".", "sin", "(", "rot", ")", ",", "np", ".", "cos", "(", "rot", ")", ",", "np", ".", "sin", "(", "rrot", ")", ",", "np", ".", "cos", "(", "rrot", ")", ")", ",", "axis", "=", "None", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "'WaymoDataset'", ":", "\n", "                                ", "vx", ",", "vy", "=", "gt_dict", "[", "'gt_boxes'", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", "\n", "rot", "=", "gt_dict", "[", "'gt_boxes'", "]", "[", "idx", "]", "[", "k", "]", "[", "-", "1", "]", "\n", "anno_box", "[", "new_idx", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "ct", "-", "(", "x", ",", "y", ")", ",", "z", ",", "np", ".", "log", "(", "gt_dict", "[", "'gt_boxes'", "]", "[", "idx", "]", "[", "k", "]", "[", "3", ":", "6", "]", ")", ",", "\n", "np", ".", "array", "(", "vx", ")", ",", "np", ".", "array", "(", "vy", ")", ",", "np", ".", "sin", "(", "rot", ")", ",", "np", ".", "cos", "(", "rot", ")", ")", ",", "axis", "=", "None", ")", "\n", "", "else", ":", "\n", "                                ", "raise", "NotImplementedError", "(", "\"Only Support Waymo and nuScene for Now\"", ")", "\n", "\n", "\n", "", "", "", "hms", ".", "append", "(", "hm", ")", "\n", "anno_boxs", ".", "append", "(", "anno_box", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "inds", ".", "append", "(", "ind", ")", "\n", "cats", ".", "append", "(", "cat", ")", "\n", "\n", "# used for two stage code ", "\n", "", "boxes", "=", "flatten", "(", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", ")", "\n", "classes", "=", "merge_multi_group_label", "(", "gt_dict", "[", "'gt_classes'", "]", "[", "i", "]", ",", "num_classes_by_task", ")", "\n", "\n", "if", "res", "[", "\"type\"", "]", "==", "\"NuScenesDataset\"", ":", "\n", "                    ", "gt_boxes_and_cls", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "13", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "\"WaymoDataset\"", ":", "\n", "                    ", "gt_boxes_and_cls", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "10", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "boxes_and_cls", "=", "np", ".", "concatenate", "(", "(", "boxes", ",", "\n", "classes", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "axis", "=", "1", ")", "\n", "num_obj", "=", "len", "(", "boxes_and_cls", ")", "\n", "assert", "num_obj", "<=", "max_objs", ",", "\"{} is greater than {}\"", ".", "format", "(", "num_obj", ",", "max_objs", ")", "\n", "# x, y, z, w, l, h, rotation_y, velocity_x, velocity_y, class_name", "\n", "boxes_and_cls", "=", "boxes_and_cls", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "10", ",", "11", ",", "6", ",", "7", ",", "8", ",", "9", ",", "12", "]", "]", "\n", "gt_boxes_and_cls", "[", ":", "num_obj", "]", "=", "boxes_and_cls", "\n", "\n", "example", ".", "update", "(", "{", "'gt_boxes_and_cls'", ":", "gt_boxes_and_cls", "}", ")", "\n", "example", ".", "update", "(", "{", "'hm'", ":", "hms", ",", "'anno_box'", ":", "anno_boxs", ",", "'ind'", ":", "inds", ",", "'mask'", ":", "masks", ",", "'cat'", ":", "cats", "}", ")", "\n", "\n", "###############################################################################################                ", "\n", "if", "self", ".", "sampler_type", "!=", "\"standard\"", ":", "\n", "                    ", "if", "classname", "==", "\"car\"", ":", "\n", "                        ", "class_trajectory_names_by_task", "=", "[", "[", "\"static_car\"", ",", "\"linear_car\"", ",", "\"nonlinear_car\"", "]", "]", "\n", "", "else", ":", "\n", "                        ", "class_trajectory_names_by_task", "=", "[", "[", "\"static_pedestrian\"", ",", "\"linear_pedestrian\"", ",", "\"nonlinear_pedestrian\"", "]", "]", "\n", "\n", "", "num_classes_trajectory_by_task", "=", "[", "3", "]", "\n", "task_masks", "=", "[", "]", "\n", "flag", "=", "0", "\n", "for", "class_name", "in", "class_trajectory_names_by_task", ":", "\n", "                        ", "task_masks", ".", "append", "(", "\n", "[", "\n", "np", ".", "where", "(", "\n", "gt_dict", "[", "\"gt_classes_trajectory\"", "]", "[", "i", "]", "==", "class_name", ".", "index", "(", "j", ")", "+", "1", "+", "flag", "\n", ")", "\n", "for", "j", "in", "class_name", "\n", "]", "\n", ")", "\n", "flag", "+=", "len", "(", "class_name", ")", "\n", "\n", "", "task_boxes", "=", "[", "]", "\n", "task_classes", "=", "[", "]", "\n", "task_names", "=", "[", "]", "\n", "flag2", "=", "0", "\n", "for", "idx", ",", "mask", "in", "enumerate", "(", "task_masks", ")", ":", "\n", "                        ", "task_box", "=", "[", "]", "\n", "task_class", "=", "[", "]", "\n", "task_name", "=", "[", "]", "\n", "for", "m", "in", "mask", ":", "\n", "                            ", "task_box", ".", "append", "(", "gt_dict", "[", "\"gt_boxes_trajectory\"", "]", "[", "i", "]", "[", "m", "]", ")", "\n", "task_class", ".", "append", "(", "gt_dict", "[", "\"gt_classes_trajectory\"", "]", "[", "i", "]", "[", "m", "]", "-", "flag2", ")", "\n", "task_name", ".", "append", "(", "gt_dict", "[", "\"gt_names_trajectory\"", "]", "[", "i", "]", "[", "m", "]", ")", "\n", "", "task_boxes", ".", "append", "(", "np", ".", "concatenate", "(", "task_box", ",", "axis", "=", "0", ")", ")", "\n", "task_classes", ".", "append", "(", "np", ".", "concatenate", "(", "task_class", ")", ")", "\n", "task_names", ".", "append", "(", "np", ".", "concatenate", "(", "task_name", ")", ")", "\n", "flag2", "+=", "len", "(", "mask", ")", "\n", "\n", "\n", "", "for", "task_box", "in", "task_boxes", ":", "\n", "# limit rad to [-pi, pi]", "\n", "                        ", "task_box", "[", ":", ",", "-", "1", "]", "=", "box_np_ops", ".", "limit_period", "(", "\n", "task_box", "[", ":", ",", "-", "1", "]", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", "*", "2", "\n", ")", "\n", "task_box", "[", ":", ",", "-", "2", "]", "=", "box_np_ops", ".", "limit_period", "(", "\n", "task_box", "[", ":", ",", "-", "2", "]", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", "*", "2", "\n", ")", "\n", "\n", "# print(gt_dict.keys())", "\n", "", "gt_dict", "[", "\"gt_classes_trajectory\"", "]", "[", "i", "]", "=", "task_classes", "\n", "gt_dict", "[", "\"gt_names_trajectory\"", "]", "[", "i", "]", "=", "task_names", "\n", "gt_dict", "[", "\"gt_boxes_trajectory\"", "]", "[", "i", "]", "=", "task_boxes", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "=", "gt_dict", "\n", "\n", "draw_gaussian", "=", "draw_umich_gaussian", "\n", "\n", "hms", ",", "anno_boxs", ",", "inds", ",", "masks", ",", "cats", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "idx", ",", "task", "in", "enumerate", "(", "self", ".", "tasks", ")", ":", "\n", "                        ", "hm", "=", "np", ".", "zeros", "(", "(", "len", "(", "class_trajectory_names_by_task", "[", "idx", "]", ")", ",", "feature_map_size", "[", "1", "]", ",", "feature_map_size", "[", "0", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "res", "[", "'type'", "]", "==", "'NuScenesDataset'", ":", "\n", "# [reg, hei, dim, vx, vy, rots, rotc]", "\n", "                            ", "anno_box", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "14", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "'WaymoDataset'", ":", "\n", "                            ", "anno_box", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "10", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                            ", "raise", "NotImplementedError", "(", "\"Only Support nuScene for Now!\"", ")", "\n", "\n", "", "ind", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cat", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "num_objs", "=", "min", "(", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", ".", "shape", "[", "0", "]", ",", "max_objs", ")", "\n", "\n", "for", "k", "in", "range", "(", "num_objs", ")", ":", "\n", "                            ", "cls_id", "=", "gt_dict", "[", "'gt_classes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "-", "1", "\n", "\n", "w", ",", "l", ",", "h", "=", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "3", "]", ",", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "4", "]", ",", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "5", "]", "\n", "w", ",", "l", "=", "w", "/", "voxel_size", "[", "0", "]", "/", "self", ".", "out_size_factor", ",", "l", "/", "voxel_size", "[", "1", "]", "/", "self", ".", "out_size_factor", "\n", "if", "w", ">", "0", "and", "l", ">", "0", ":", "\n", "                                ", "vel_norm", "=", "np", ".", "linalg", ".", "norm", "(", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", ")", "\n", "\n", "if", "self", ".", "radius_mult", ":", "\n", "                                    ", "mult", "=", "min", "(", "max", "(", "1", ",", "vel_norm", "*", "(", "1", "+", "i", ")", "/", "2", ")", ",", "4", ")", "\n", "", "else", ":", "\n", "                                    ", "mult", "=", "1.0", "\n", "\n", "", "radius", "=", "mult", "*", "gaussian_radius", "(", "(", "l", ",", "w", ")", ",", "min_overlap", "=", "self", ".", "gaussian_overlap", ")", "\n", "radius", "=", "max", "(", "self", ".", "_min_radius", ",", "int", "(", "radius", ")", ")", "\n", "\n", "# be really careful for the coordinate system of your box annotation. ", "\n", "x", ",", "y", ",", "z", "=", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "0", "]", ",", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "1", "]", ",", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "2", "]", "\n", "\n", "coor_x", ",", "coor_y", "=", "(", "x", "-", "pc_range", "[", "0", "]", ")", "/", "voxel_size", "[", "0", "]", "/", "self", ".", "out_size_factor", ",", "(", "y", "-", "pc_range", "[", "1", "]", ")", "/", "voxel_size", "[", "1", "]", "/", "self", ".", "out_size_factor", "\n", "\n", "ct", "=", "np", ".", "array", "(", "\n", "[", "coor_x", ",", "coor_y", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ct_int", "=", "ct", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# throw out not in range objects to avoid out of array area when creating the heatmap", "\n", "if", "not", "(", "0", "<=", "ct_int", "[", "0", "]", "<", "feature_map_size", "[", "0", "]", "and", "0", "<=", "ct_int", "[", "1", "]", "<", "feature_map_size", "[", "1", "]", ")", ":", "\n", "                                    ", "continue", "\n", "\n", "", "draw_gaussian", "(", "hm", "[", "cls_id", "]", ",", "ct", ",", "radius", ")", "\n", "\n", "new_idx", "=", "k", "\n", "x", ",", "y", "=", "ct_int", "[", "0", "]", ",", "ct_int", "[", "1", "]", "\n", "\n", "cat", "[", "new_idx", "]", "=", "cls_id", "\n", "ind", "[", "new_idx", "]", "=", "y", "*", "feature_map_size", "[", "0", "]", "+", "x", "\n", "mask", "[", "new_idx", "]", "=", "1", "\n", "\n", "if", "res", "[", "'type'", "]", "==", "'NuScenesDataset'", ":", "\n", "                                    ", "vx", ",", "vy", "=", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", "\n", "rvx", ",", "rvy", "=", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "8", ":", "10", "]", "\n", "rot", "=", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "10", "]", "\n", "rrot", "=", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "11", "]", "\n", "\n", "anno_box", "[", "new_idx", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "ct", "-", "(", "x", ",", "y", ")", ",", "z", ",", "np", ".", "log", "(", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "3", ":", "6", "]", ")", ",", "\n", "np", ".", "array", "(", "vx", ")", ",", "np", ".", "array", "(", "vy", ")", ",", "np", ".", "array", "(", "rvx", ")", ",", "np", ".", "array", "(", "rvy", ")", ",", "np", ".", "sin", "(", "rot", ")", ",", "np", ".", "cos", "(", "rot", ")", ",", "np", ".", "sin", "(", "rrot", ")", ",", "np", ".", "cos", "(", "rrot", ")", ")", ",", "axis", "=", "None", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "'WaymoDataset'", ":", "\n", "                                    ", "vx", ",", "vy", "=", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", "\n", "rot", "=", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "idx", "]", "[", "k", "]", "[", "-", "1", "]", "\n", "anno_box", "[", "new_idx", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "ct", "-", "(", "x", ",", "y", ")", ",", "z", ",", "np", ".", "log", "(", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "idx", "]", "[", "k", "]", "[", "3", ":", "6", "]", ")", ",", "\n", "np", ".", "array", "(", "vx", ")", ",", "np", ".", "array", "(", "vy", ")", ",", "np", ".", "sin", "(", "rot", ")", ",", "np", ".", "cos", "(", "rot", ")", ")", ",", "axis", "=", "None", ")", "\n", "", "else", ":", "\n", "                                    ", "raise", "NotImplementedError", "(", "\"Only Support Waymo and nuScene for Now\"", ")", "\n", "\n", "\n", "", "", "", "hms", ".", "append", "(", "hm", ")", "\n", "anno_boxs", ".", "append", "(", "anno_box", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "inds", ".", "append", "(", "ind", ")", "\n", "cats", ".", "append", "(", "cat", ")", "\n", "\n", "# used for two stage code ", "\n", "", "boxes", "=", "flatten", "(", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", ")", "\n", "classes", "=", "merge_multi_group_label", "(", "gt_dict", "[", "'gt_classes_trajectory'", "]", "[", "i", "]", ",", "num_classes_trajectory_by_task", ")", "\n", "\n", "if", "res", "[", "\"type\"", "]", "==", "\"NuScenesDataset\"", ":", "\n", "                        ", "gt_boxes_and_cls", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "13", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "\"WaymoDataset\"", ":", "\n", "                        ", "gt_boxes_and_cls", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "10", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "boxes_and_cls", "=", "np", ".", "concatenate", "(", "(", "boxes", ",", "\n", "classes", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "axis", "=", "1", ")", "\n", "num_obj", "=", "len", "(", "boxes_and_cls", ")", "\n", "assert", "num_obj", "<=", "max_objs", ",", "\"{} is greater than {}\"", ".", "format", "(", "num_obj", ",", "max_objs", ")", "\n", "# x, y, z, w, l, h, rotation_y, velocity_x, velocity_y, class_name", "\n", "boxes_and_cls", "=", "boxes_and_cls", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "10", ",", "11", ",", "6", ",", "7", ",", "8", ",", "9", ",", "12", "]", "]", "\n", "gt_boxes_and_cls", "[", ":", "num_obj", "]", "=", "boxes_and_cls", "\n", "\n", "example", ".", "update", "(", "{", "'gt_boxes_and_cls_trajectory'", ":", "gt_boxes_and_cls", "}", ")", "\n", "example", ".", "update", "(", "{", "'hm_trajectory'", ":", "hms", ",", "'anno_box_trajectory'", ":", "anno_boxs", ",", "'ind_trajectory'", ":", "inds", ",", "'mask_trajectory'", ":", "masks", ",", "'cat_trajectory'", ":", "cats", "}", ")", "\n", "\n", "############################################################################################### ", "\n", "\n", "if", "classname", "==", "\"car\"", ":", "\n", "                        ", "class_forecast_names_by_task", "=", "[", "[", "\"car_1\"", ",", "\"car_2\"", ",", "\"car_3\"", ",", "\"car_4\"", ",", "\"car_5\"", ",", "\"car_6\"", ",", "\"car_7\"", "]", "]", "\n", "", "else", ":", "\n", "                        ", "class_forecast_names_by_task", "=", "[", "[", "\"pedestrian_1\"", ",", "\"pedestrian_2\"", ",", "\"pedestrian_3\"", ",", "\"pedestrian_4\"", ",", "\"pedestrian_5\"", ",", "\"pedestrian_6\"", ",", "\"pedestrian_7\"", "]", "]", "\n", "\n", "", "num_classes_forecast_by_task", "=", "[", "7", "]", "\n", "task_masks", "=", "[", "]", "\n", "flag", "=", "0", "\n", "for", "class_name", "in", "class_forecast_names_by_task", ":", "\n", "                        ", "task_masks", ".", "append", "(", "\n", "[", "\n", "np", ".", "where", "(", "\n", "gt_dict", "[", "\"gt_classes_forecast\"", "]", "[", "i", "]", "==", "class_name", ".", "index", "(", "j", ")", "+", "1", "+", "flag", "\n", ")", "\n", "for", "j", "in", "class_name", "\n", "]", "\n", ")", "\n", "flag", "+=", "len", "(", "class_name", ")", "\n", "\n", "", "task_boxes", "=", "[", "]", "\n", "task_classes", "=", "[", "]", "\n", "task_names", "=", "[", "]", "\n", "flag2", "=", "0", "\n", "for", "idx", ",", "mask", "in", "enumerate", "(", "task_masks", ")", ":", "\n", "                        ", "task_box", "=", "[", "]", "\n", "task_class", "=", "[", "]", "\n", "task_name", "=", "[", "]", "\n", "for", "m", "in", "mask", ":", "\n", "                            ", "task_box", ".", "append", "(", "gt_dict", "[", "\"gt_boxes_forecast\"", "]", "[", "i", "]", "[", "m", "]", ")", "\n", "task_class", ".", "append", "(", "gt_dict", "[", "\"gt_classes_forecast\"", "]", "[", "i", "]", "[", "m", "]", "-", "flag2", ")", "\n", "task_name", ".", "append", "(", "gt_dict", "[", "\"gt_names_forecast\"", "]", "[", "i", "]", "[", "m", "]", ")", "\n", "", "task_boxes", ".", "append", "(", "np", ".", "concatenate", "(", "task_box", ",", "axis", "=", "0", ")", ")", "\n", "task_classes", ".", "append", "(", "np", ".", "concatenate", "(", "task_class", ")", ")", "\n", "task_names", ".", "append", "(", "np", ".", "concatenate", "(", "task_name", ")", ")", "\n", "flag2", "+=", "len", "(", "mask", ")", "\n", "\n", "", "for", "task_box", "in", "task_boxes", ":", "\n", "# limit rad to [-pi, pi]", "\n", "                        ", "task_box", "[", ":", ",", "-", "1", "]", "=", "box_np_ops", ".", "limit_period", "(", "\n", "task_box", "[", ":", ",", "-", "1", "]", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", "*", "2", "\n", ")", "\n", "task_box", "[", ":", ",", "-", "2", "]", "=", "box_np_ops", ".", "limit_period", "(", "\n", "task_box", "[", ":", ",", "-", "2", "]", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", "*", "2", "\n", ")", "\n", "\n", "# print(gt_dict.keys())", "\n", "", "gt_dict", "[", "\"gt_classes_forecast\"", "]", "[", "i", "]", "=", "task_classes", "\n", "gt_dict", "[", "\"gt_names_forecast\"", "]", "[", "i", "]", "=", "task_names", "\n", "gt_dict", "[", "\"gt_boxes_forecast\"", "]", "[", "i", "]", "=", "task_boxes", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "=", "gt_dict", "\n", "\n", "draw_gaussian", "=", "draw_umich_gaussian", "\n", "\n", "hms", ",", "anno_boxs", ",", "inds", ",", "masks", ",", "cats", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "idx", ",", "task", "in", "enumerate", "(", "self", ".", "tasks", ")", ":", "\n", "                        ", "hm", "=", "np", ".", "zeros", "(", "(", "len", "(", "class_forecast_names_by_task", "[", "idx", "]", ")", ",", "feature_map_size", "[", "1", "]", ",", "feature_map_size", "[", "0", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "res", "[", "'type'", "]", "==", "'NuScenesDataset'", ":", "\n", "# [reg, hei, dim, vx, vy, rots, rotc]", "\n", "                            ", "anno_box", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "14", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "'WaymoDataset'", ":", "\n", "                            ", "anno_box", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "10", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                            ", "raise", "NotImplementedError", "(", "\"Only Support nuScene for Now!\"", ")", "\n", "\n", "", "ind", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cat", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "num_objs", "=", "min", "(", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", ".", "shape", "[", "0", "]", ",", "max_objs", ")", "\n", "\n", "for", "k", "in", "range", "(", "num_objs", ")", ":", "\n", "                            ", "cls_id", "=", "gt_dict", "[", "'gt_classes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "-", "1", "\n", "\n", "w", ",", "l", ",", "h", "=", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "3", "]", ",", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "4", "]", ",", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "5", "]", "\n", "w", ",", "l", "=", "w", "/", "voxel_size", "[", "0", "]", "/", "self", ".", "out_size_factor", ",", "l", "/", "voxel_size", "[", "1", "]", "/", "self", ".", "out_size_factor", "\n", "if", "w", ">", "0", "and", "l", ">", "0", ":", "\n", "                                ", "vel_norm", "=", "np", ".", "linalg", ".", "norm", "(", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", ")", "\n", "\n", "if", "self", ".", "radius_mult", ":", "\n", "                                    ", "mult", "=", "min", "(", "max", "(", "1", ",", "vel_norm", "*", "(", "1", "+", "i", ")", "/", "2", ")", ",", "4", ")", "\n", "", "else", ":", "\n", "                                    ", "mult", "=", "1.0", "\n", "\n", "", "radius", "=", "mult", "*", "gaussian_radius", "(", "(", "l", ",", "w", ")", ",", "min_overlap", "=", "self", ".", "gaussian_overlap", ")", "\n", "radius", "=", "max", "(", "self", ".", "_min_radius", ",", "int", "(", "radius", ")", ")", "\n", "\n", "# be really careful for the coordinate system of your box annotation. ", "\n", "x", ",", "y", ",", "z", "=", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "0", "]", ",", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "1", "]", ",", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "2", "]", "\n", "\n", "coor_x", ",", "coor_y", "=", "(", "x", "-", "pc_range", "[", "0", "]", ")", "/", "voxel_size", "[", "0", "]", "/", "self", ".", "out_size_factor", ",", "(", "y", "-", "pc_range", "[", "1", "]", ")", "/", "voxel_size", "[", "1", "]", "/", "self", ".", "out_size_factor", "\n", "\n", "ct", "=", "np", ".", "array", "(", "\n", "[", "coor_x", ",", "coor_y", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ct_int", "=", "ct", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# throw out not in range objects to avoid out of array area when creating the heatmap", "\n", "if", "not", "(", "0", "<=", "ct_int", "[", "0", "]", "<", "feature_map_size", "[", "0", "]", "and", "0", "<=", "ct_int", "[", "1", "]", "<", "feature_map_size", "[", "1", "]", ")", ":", "\n", "                                    ", "continue", "\n", "\n", "", "draw_gaussian", "(", "hm", "[", "cls_id", "]", ",", "ct", ",", "radius", ")", "\n", "\n", "new_idx", "=", "k", "\n", "x", ",", "y", "=", "ct_int", "[", "0", "]", ",", "ct_int", "[", "1", "]", "\n", "\n", "cat", "[", "new_idx", "]", "=", "cls_id", "\n", "ind", "[", "new_idx", "]", "=", "y", "*", "feature_map_size", "[", "0", "]", "+", "x", "\n", "mask", "[", "new_idx", "]", "=", "1", "\n", "\n", "if", "res", "[", "'type'", "]", "==", "'NuScenesDataset'", ":", "\n", "                                    ", "vx", ",", "vy", "=", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", "\n", "rvx", ",", "rvy", "=", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "8", ":", "10", "]", "\n", "rot", "=", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "10", "]", "\n", "rrot", "=", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "11", "]", "\n", "\n", "anno_box", "[", "new_idx", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "ct", "-", "(", "x", ",", "y", ")", ",", "z", ",", "np", ".", "log", "(", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "3", ":", "6", "]", ")", ",", "\n", "np", ".", "array", "(", "vx", ")", ",", "np", ".", "array", "(", "vy", ")", ",", "np", ".", "array", "(", "rvx", ")", ",", "np", ".", "array", "(", "rvy", ")", ",", "np", ".", "sin", "(", "rot", ")", ",", "np", ".", "cos", "(", "rot", ")", ",", "np", ".", "sin", "(", "rrot", ")", ",", "np", ".", "cos", "(", "rrot", ")", ")", ",", "axis", "=", "None", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "'WaymoDataset'", ":", "\n", "                                    ", "vx", ",", "vy", "=", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", "\n", "rot", "=", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "idx", "]", "[", "k", "]", "[", "-", "1", "]", "\n", "anno_box", "[", "new_idx", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "ct", "-", "(", "x", ",", "y", ")", ",", "z", ",", "np", ".", "log", "(", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "idx", "]", "[", "k", "]", "[", "3", ":", "6", "]", ")", ",", "\n", "np", ".", "array", "(", "vx", ")", ",", "np", ".", "array", "(", "vy", ")", ",", "np", ".", "sin", "(", "rot", ")", ",", "np", ".", "cos", "(", "rot", ")", ")", ",", "axis", "=", "None", ")", "\n", "", "else", ":", "\n", "                                    ", "raise", "NotImplementedError", "(", "\"Only Support Waymo and nuScene for Now\"", ")", "\n", "\n", "\n", "", "", "", "hms", ".", "append", "(", "hm", ")", "\n", "anno_boxs", ".", "append", "(", "anno_box", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "inds", ".", "append", "(", "ind", ")", "\n", "cats", ".", "append", "(", "cat", ")", "\n", "\n", "# used for two stage code ", "\n", "", "boxes", "=", "flatten", "(", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", ")", "\n", "classes", "=", "merge_multi_group_label", "(", "gt_dict", "[", "'gt_classes_forecast'", "]", "[", "i", "]", ",", "num_classes_forecast_by_task", ")", "\n", "\n", "if", "res", "[", "\"type\"", "]", "==", "\"NuScenesDataset\"", ":", "\n", "                        ", "gt_boxes_and_cls", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "13", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "\"WaymoDataset\"", ":", "\n", "                        ", "gt_boxes_and_cls", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "10", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "boxes_and_cls", "=", "np", ".", "concatenate", "(", "(", "boxes", ",", "\n", "classes", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "axis", "=", "1", ")", "\n", "num_obj", "=", "len", "(", "boxes_and_cls", ")", "\n", "assert", "num_obj", "<=", "max_objs", ",", "\"{} is greater than {}\"", ".", "format", "(", "num_obj", ",", "max_objs", ")", "\n", "# x, y, z, w, l, h, rotation_y, velocity_x, velocity_y, class_name", "\n", "boxes_and_cls", "=", "boxes_and_cls", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "10", ",", "11", ",", "6", ",", "7", ",", "8", ",", "9", ",", "12", "]", "]", "\n", "gt_boxes_and_cls", "[", ":", "num_obj", "]", "=", "boxes_and_cls", "\n", "\n", "example", ".", "update", "(", "{", "'gt_boxes_and_cls_forecast'", ":", "gt_boxes_and_cls", "}", ")", "\n", "example", ".", "update", "(", "{", "'hm_forecast'", ":", "hms", ",", "'anno_box_forecast'", ":", "anno_boxs", ",", "'ind_forecast'", ":", "inds", ",", "'mask_forecast'", ":", "masks", ",", "'cat_forecast'", ":", "cats", "}", ")", "\n", "\n", "", "example_forecast", ".", "append", "(", "example", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "example_forecast", "=", "length", "*", "[", "{", "}", "]", "\n", "\n", "", "ex", "=", "{", "k", ":", "[", "]", "for", "k", "in", "example_forecast", "[", "0", "]", ".", "keys", "(", ")", "}", "\n", "for", "ef", "in", "example_forecast", ":", "\n", "            ", "for", "k", "in", "ef", ".", "keys", "(", ")", ":", "\n", "                ", "ex", "[", "k", "]", ".", "append", "(", "ef", "[", "k", "]", ")", "\n", "\n", "", "", "res", "[", "\"lidar\"", "]", "[", "\"targets\"", "]", "=", "ex", "\n", "return", "res", ",", "info", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess._dict_select": [[14, 20], ["dict_.items", "isinstance", "preprocess._dict_select", "range", "len"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess._dict_select"], ["def", "_dict_select", "(", "dict_", ",", "inds", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "dict_", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "_dict_select", "(", "v", ",", "inds", ")", "\n", "", "else", ":", "\n", "            ", "dict_", "[", "k", "]", "=", "[", "v", "[", "i", "]", "[", "inds", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "inds", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.drop_arrays_by_name": [[21, 25], ["numpy.array", "enumerate"], "function", ["None"], ["", "", "", "def", "drop_arrays_by_name", "(", "gt_names", ",", "used_classes", ")", ":", "\n", "    ", "inds", "=", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "gt_names", ")", "if", "x", "not", "in", "used_classes", "]", "\n", "inds", "=", "np", ".", "array", "(", "inds", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "return", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.forecast_augmentation": [[26, 35], ["ground_truth.append", "points.append"], "function", ["None"], ["", "def", "forecast_augmentation", "(", "output", ")", ":", "\n", "    ", "ground_truth", ",", "points", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "out", "in", "output", ":", "\n", "        ", "gt", ",", "pt", "=", "out", "\n", "\n", "ground_truth", ".", "append", "(", "gt", ")", ",", "points", ".", "append", "(", "pt", ")", "\n", "\n", "", "return", "ground_truth", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.forecast_voxelization": [[36, 44], ["voxels.append", "coordinates.append", "num_points.append"], "function", ["None"], ["", "def", "forecast_voxelization", "(", "output", ")", ":", "\n", "    ", "voxels", ",", "coordinates", ",", "num_points", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "out", "in", "output", ":", "\n", "        ", "vo", ",", "co", ",", "pt", "=", "out", "\n", "\n", "voxels", ".", "append", "(", "vo", ")", ",", "coordinates", ".", "append", "(", "co", ")", ",", "num_points", ".", "append", "(", "pt", ")", "\n", "\n", "", "return", "voxels", ",", "coordinates", ",", "num_points", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.z_offset": [[45, 74], ["numpy.array", "numpy.linspace", "numpy.isclose", "numpy.isclose", "cv2.resize", "numpy.histogramdd"], "function", ["None"], ["", "def", "z_offset", "(", "points", ",", "\n", "meters_max", "=", "45", ",", "\n", "pixels_per_meter", "=", "2", ",", "\n", "hist_max_per_pixel", "=", "50", ",", "\n", "zbins", "=", "np", ".", "array", "(", "[", "-", "3.", ",", "0.0", ",", "1.", ",", "2.", ",", "3.", ",", "10.", "]", ")", ",", "\n", "hist_normalize", "=", "True", ")", ":", "\n", "    ", "assert", "(", "points", ".", "shape", "[", "-", "1", "]", ">=", "3", ")", "\n", "assert", "(", "points", ".", "shape", "[", "0", "]", ">", "points", ".", "shape", "[", "1", "]", ")", "\n", "meters_total", "=", "meters_max", "*", "2", "\n", "pixels_total", "=", "meters_total", "*", "pixels_per_meter", "\n", "xbins", "=", "np", ".", "linspace", "(", "-", "meters_max", ",", "meters_max", ",", "pixels_total", "+", "1", ",", "endpoint", "=", "True", ")", "\n", "ybins", "=", "xbins", "\n", "# The first left bin edge must match the last right bin edge.", "\n", "assert", "(", "np", ".", "isclose", "(", "xbins", "[", "0", "]", ",", "-", "1", "*", "xbins", "[", "-", "1", "]", ")", ")", "\n", "assert", "(", "np", ".", "isclose", "(", "ybins", "[", "0", "]", ",", "-", "1", "*", "ybins", "[", "-", "1", "]", ")", ")", "\n", "\n", "hist", "=", "np", ".", "histogramdd", "(", "points", "[", "...", ",", ":", "3", "]", ",", "bins", "=", "(", "xbins", ",", "ybins", ",", "zbins", ")", ",", "normed", "=", "False", ")", "[", "0", "]", "\n", "\n", "# Clip histogram ", "\n", "hist", "[", "hist", ">", "hist_max_per_pixel", "]", "=", "hist_max_per_pixel", "\n", "\n", "# Normalize histogram by the maximum number of points in a bin we care about.", "\n", "if", "hist_normalize", ":", "\n", "        ", "overhead_splat", "=", "hist", "/", "hist_max_per_pixel", "\n", "", "else", ":", "\n", "        ", "overhead_splat", "=", "hist", "\n", "\n", "", "overhead_splat", "=", "cv2", ".", "resize", "(", "overhead_splat", ",", "dsize", "=", "(", "180", ",", "180", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "return", "overhead_splat", ",", "xbins", ",", "ybins", ",", "zbins", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.get_mask": [[75, 91], ["numpy.degrees", "cv2.getRotationMatrix2D", "cv2.warpAffine", "numpy.float32", "cv2.warpAffine", "numpy.fliplr", "numpy.flipud"], "function", ["None"], ["", "def", "get_mask", "(", "mask", ",", "t", ",", "angle", ",", "flip", ",", "scale", ")", ":", "\n", "    ", "angle", "=", "np", ".", "degrees", "(", "-", "angle", ")", "\n", "if", "flip", "[", "0", "]", ":", "\n", "        ", "mask", "=", "np", ".", "fliplr", "(", "mask", ")", "\n", "", "if", "flip", "[", "1", "]", ":", "\n", "        ", "mask", "=", "np", ".", "flipud", "(", "mask", ")", "\n", "\n", "", "rot_mat", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "90", ",", "90", ")", ",", "angle", ",", "scale", ")", "\n", "mask", "=", "cv2", ".", "warpAffine", "(", "mask", ",", "rot_mat", ",", "(", "180", ",", "180", ")", ")", "\n", "\n", "M", "=", "np", ".", "float32", "(", "[", "[", "1", ",", "0", ",", "t", "[", "0", "]", "]", ",", "\n", "[", "0", ",", "1", ",", "t", "[", "1", "]", "]", "]", ")", "\n", "\n", "mask", "=", "cv2", ".", "warpAffine", "(", "mask", ",", "M", ",", "(", "180", ",", "180", ")", ")", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.flatten": [[323, 325], ["numpy.concatenate"], "function", ["None"], ["", "", "def", "flatten", "(", "box", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "box", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.merge_multi_group_label": [[326, 335], ["len", "range", "preprocess.flatten"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.preprocess.flatten"], ["", "def", "merge_multi_group_label", "(", "gt_classes", ",", "num_classes_by_task", ")", ":", "\n", "    ", "num_task", "=", "len", "(", "gt_classes", ")", "\n", "flag", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "num_task", ")", ":", "\n", "        ", "gt_classes", "[", "i", "]", "+=", "flag", "\n", "flag", "+=", "num_classes_by_task", "[", "i", "]", "\n", "\n", "", "return", "flatten", "(", "gt_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.test_aug.DoubleFlip.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.test_aug.DoubleFlip.__call__": [[12, 39], ["[].copy", "range", "[].copy", "range", "[].copy", "range", "len", "len", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "res", ",", "info", ")", ":", "\n", "# y flip", "\n", "        ", "points", "=", "res", "[", "\"lidar\"", "]", "[", "\"points\"", "]", ".", "copy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "points", ")", ")", ":", "\n", "            ", "points", "[", "i", "]", "[", ":", ",", "1", "]", "=", "-", "points", "[", "i", "]", "[", ":", ",", "1", "]", "\n", "\n", "", "res", "[", "\"lidar\"", "]", "[", "'yflip_points'", "]", "=", "points", "\n", "\n", "# x flip", "\n", "points", "=", "res", "[", "\"lidar\"", "]", "[", "\"points\"", "]", ".", "copy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "points", ")", ")", ":", "\n", "            ", "points", "[", "i", "]", "[", ":", ",", "0", "]", "=", "-", "points", "[", "i", "]", "[", ":", ",", "0", "]", "\n", "\n", "", "res", "[", "\"lidar\"", "]", "[", "'xflip_points'", "]", "=", "points", "\n", "\n", "# x y flip", "\n", "points", "=", "res", "[", "\"lidar\"", "]", "[", "\"points\"", "]", ".", "copy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "points", ")", ")", ":", "\n", "            ", "points", "[", "i", "]", "[", ":", ",", "0", "]", "=", "-", "points", "[", "i", "]", "[", ":", ",", "0", "]", "\n", "points", "[", "i", "]", "[", ":", ",", "1", "]", "=", "-", "points", "[", "i", "]", "[", ":", ",", "1", "]", "\n", "\n", "", "res", "[", "\"lidar\"", "]", "[", "\"double_flip_points\"", "]", "=", "points", "\n", "\n", "return", "res", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.compose.Compose.__init__": [[9, 22], ["isinstance", "isinstance", "det3d.utils.build_from_cfg", "compose.Compose.transforms.append", "callable", "compose.Compose.transforms.append", "TypeError"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.build_from_cfg"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "assert", "isinstance", "(", "transforms", ",", "collections", ".", "abc", ".", "Sequence", ")", "\n", "self", ".", "transforms", "=", "[", "]", "\n", "for", "transform", "in", "transforms", ":", "\n", "            ", "if", "isinstance", "(", "transform", ",", "dict", ")", ":", "\n", "                ", "if", "transform", "[", "'type'", "]", "==", "'Empty'", ":", "\n", "                    ", "continue", "\n", "", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "self", ".", "transforms", ".", "append", "(", "transform", ")", "\n", "", "elif", "callable", "(", "transform", ")", ":", "\n", "                ", "self", ".", "transforms", ".", "append", "(", "transform", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\"transform must be callable or a dict\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.compose.Compose.__call__": [[23, 29], ["t"], "methods", ["None"], ["", "", "", "def", "__call__", "(", "self", ",", "res", ",", "info", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "res", ",", "info", "=", "t", "(", "res", ",", "info", ")", "\n", "if", "res", "is", "None", ":", "\n", "                ", "return", "None", "\n", "", "", "return", "res", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.pipelines.compose.Compose.__repr__": [[30, 37], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "\"\\n\"", "\n", "format_string", "+=", "\"    {0}\"", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "\"\\n)\"", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.DistributedSamplerV2.__init__": [[31, 47], ["int", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_rank", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_rank"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.DistributedSamplerV2.__iter__": [[48, 66], ["iter", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.iter"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.DistributedSamplerV2.__len__": [[67, 69], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.DistributedSamplerV2.set_epoch": [[70, 72], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.DistributedSampler.__init__": [[75, 78], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "num_replicas", "=", "num_replicas", ",", "rank", "=", "rank", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.DistributedSampler.__iter__": [[79, 97], ["iter", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.iter"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.GroupSampler.__init__": [[100, 110], ["hasattr", "dataset.flag.astype", "numpy.bincount", "enumerate", "int", "numpy.ceil"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "samples_per_gpu", "=", "1", ")", ":", "\n", "        ", "assert", "hasattr", "(", "dataset", ",", "\"flag\"", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "flag", "=", "dataset", ".", "flag", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "(", "\n", "int", "(", "np", ".", "ceil", "(", "size", "/", "self", ".", "samples_per_gpu", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.GroupSampler.__iter__": [[112, 134], ["enumerate", "numpy.concatenate", "numpy.concatenate", "indices.astype().tolist.astype().tolist.astype().tolist", "iter", "numpy.random.shuffle", "numpy.concatenate", "indices.astype().tolist.astype().tolist.append", "len", "numpy.where", "len", "len", "numpy.random.permutation", "indices.astype().tolist.astype().tolist.astype", "int", "range", "numpy.ceil", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.iter"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", "==", "0", ":", "\n", "                ", "continue", "\n", "", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "np", ".", "random", ".", "shuffle", "(", "indice", ")", "\n", "num_extra", "=", "int", "(", "\n", "np", ".", "ceil", "(", "size", "/", "self", ".", "samples_per_gpu", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "-", "len", "(", "indice", ")", "\n", "indice", "=", "np", ".", "concatenate", "(", "[", "indice", ",", "indice", "[", ":", "num_extra", "]", "]", ")", "\n", "indices", ".", "append", "(", "indice", ")", "\n", "", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "[", "\n", "indices", "[", "i", "*", "self", ".", "samples_per_gpu", ":", "(", "i", "+", "1", ")", "*", "self", ".", "samples_per_gpu", "]", "\n", "for", "i", "in", "np", ".", "random", ".", "permutation", "(", "range", "(", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ")", ")", "\n", "]", "\n", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "indices", ".", "astype", "(", "np", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.GroupSampler.__len__": [[135, 137], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.DistributedGroupSampler.__init__": [[154, 184], ["det3d.torchie.trainer.get_dist_info", "hasattr", "numpy.bincount", "enumerate", "int", "math.ceil", "math.ceil", "math.ceil", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_dist_info"], ["def", "__init__", "(", "self", ",", "dataset", ",", "samples_per_gpu", "=", "1", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ")", ":", "\n", "        ", "_rank", ",", "_num_replicas", "=", "get_dist_info", "(", ")", "\n", "if", "num_replicas", "is", "None", ":", "\n", "            ", "num_replicas", "=", "_num_replicas", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "rank", "=", "_rank", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "\n", "assert", "hasattr", "(", "self", ".", "dataset", ",", "\"flag\"", ")", "\n", "self", ".", "flag", "=", "self", ".", "dataset", ".", "flag", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "(", "\n", "int", "(", "\n", "math", ".", "ceil", "(", "\n", "self", ".", "group_sizes", "[", "i", "]", "\n", "*", "1.0", "\n", "/", "self", ".", "samples_per_gpu", "\n", "/", "self", ".", "num_replicas", "\n", ")", "\n", ")", "\n", "*", "self", ".", "samples_per_gpu", "\n", ")", "\n", "", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.DistributedGroupSampler.__iter__": [[185, 218], ["torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "enumerate", "iter", "len", "len", "indice[].tolist", "list", "range", "numpy.where", "len", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "int", "len", "list", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "int"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.iter"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "\n", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", ">", "0", ":", "\n", "                ", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "indice", "=", "indice", "[", "list", "(", "torch", ".", "randperm", "(", "int", "(", "size", ")", ",", "generator", "=", "g", ")", ")", "]", ".", "tolist", "(", ")", "\n", "extra", "=", "int", "(", "\n", "math", ".", "ceil", "(", "size", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "self", ".", "num_replicas", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "*", "self", ".", "num_replicas", "-", "len", "(", "indice", ")", "\n", "indice", "+=", "indice", "[", ":", "extra", "]", "\n", "indices", "+=", "indice", "\n", "\n", "", "", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "indices", "=", "[", "\n", "indices", "[", "j", "]", "\n", "for", "i", "in", "list", "(", "\n", "torch", ".", "randperm", "(", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ",", "generator", "=", "g", ")", "\n", ")", "\n", "for", "j", "in", "range", "(", "i", "*", "self", ".", "samples_per_gpu", ",", "(", "i", "+", "1", ")", "*", "self", ".", "samples_per_gpu", ")", "\n", "]", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.DistributedGroupSampler.__len__": [[219, 221], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.DistributedGroupSampler.set_epoch": [[222, 224], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.build_loader.build_dataloader": [[24, 60], ["kwargs.get", "torch.utils.data.DataLoader", "det3d.torchie.trainer.get_dist_info", "sampler.DistributedGroupSampler", "sampler.DistributedSampler", "sampler.GroupSampler"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_dist_info"], ["", "def", "build_dataloader", "(", "\n", "dataset", ",", "batch_size", ",", "workers_per_gpu", ",", "num_gpus", "=", "1", ",", "dist", "=", "True", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "shuffle", "=", "kwargs", ".", "get", "(", "\"shuffle\"", ",", "True", ")", "\n", "\n", "if", "dist", ":", "\n", "        ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# sampler = DistributedSamplerV2(dataset,", "\n", "#                      num_replicas=world_size,", "\n", "#                      rank=rank,", "\n", "#                      shuffle=shuffle)", "\n", "if", "shuffle", ":", "\n", "            ", "sampler", "=", "DistributedGroupSampler", "(", "dataset", ",", "batch_size", ",", "world_size", ",", "rank", ")", "\n", "", "else", ":", "\n", "            ", "sampler", "=", "DistributedSampler", "(", "dataset", ",", "world_size", ",", "rank", ",", "shuffle", "=", "False", ")", "\n", "", "batch_size", "=", "batch_size", "\n", "num_workers", "=", "workers_per_gpu", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "GroupSampler", "(", "dataset", ",", "batch_size", ")", "if", "shuffle", "else", "None", "\n", "sampler", "=", "None", "\n", "batch_size", "=", "num_gpus", "*", "batch_size", "\n", "num_workers", "=", "num_gpus", "*", "workers_per_gpu", "\n", "\n", "# TODO change pin_memory", "\n", "", "data_loader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "sampler", ",", "\n", "shuffle", "=", "(", "sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "collate_kitti_multi", ",", "\n", "# pin_memory=True,", "\n", "pin_memory", "=", "False", ",", "\n", ")", "\n", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.iou3d_nms.iou3d_nms_utils.boxes_iou_bev": [[13, 28], ["torch.cuda.FloatTensor().zero_", "iou3d_nms_cuda.boxes_iou_bev_gpu", "boxes_a.contiguous", "boxes_b.contiguous", "torch.cuda.FloatTensor", "torch.Size"], "function", ["None"], ["def", "boxes_iou_bev", "(", "boxes_a", ",", "boxes_b", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes_a: (N, 7) [x, y, z, dx, dy, dz, heading]\n        boxes_b: (N, 7) [x, y, z, dx, dy, dz, heading]\n\n    Returns:\n        ans_iou: (N, M)\n    \"\"\"", "\n", "assert", "boxes_a", ".", "shape", "[", "1", "]", "==", "boxes_b", ".", "shape", "[", "1", "]", "==", "7", "\n", "ans_iou", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "(", "boxes_a", ".", "shape", "[", "0", "]", ",", "boxes_b", ".", "shape", "[", "0", "]", ")", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "iou3d_nms_cuda", ".", "boxes_iou_bev_gpu", "(", "boxes_a", ".", "contiguous", "(", ")", ",", "boxes_b", ".", "contiguous", "(", ")", ",", "ans_iou", ")", "\n", "\n", "return", "ans_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.iou3d_nms.iou3d_nms_utils.to_pcdet": [[29, 34], ["None"], "function", ["None"], ["", "def", "to_pcdet", "(", "boxes", ")", ":", "\n", "# transform back to pcdet's coordinate", "\n", "    ", "boxes", "=", "boxes", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "4", ",", "3", ",", "5", ",", "-", "1", "]", "]", "\n", "boxes", "[", ":", ",", "-", "1", "]", "=", "-", "boxes", "[", ":", ",", "-", "1", "]", "-", "np", ".", "pi", "/", "2", "\n", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu": [[35, 73], ["iou3d_nms_utils.to_pcdet", "iou3d_nms_utils.to_pcdet", "torch.cuda.FloatTensor().zero_", "iou3d_nms_cuda.boxes_overlap_bev_gpu", "torch.max", "torch.min", "torch.clamp", "to_pcdet.contiguous", "to_pcdet.contiguous", "torch.clamp", "torch.cuda.FloatTensor", "torch.Size"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.iou3d_nms.iou3d_nms_utils.to_pcdet", "home.repos.pwc.inspect_result.neeharperi_futuredet.iou3d_nms.iou3d_nms_utils.to_pcdet"], ["", "def", "boxes_iou3d_gpu", "(", "boxes_a", ",", "boxes_b", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes_a: (N, 7) [x, y, z, dx, dy, dz, heading]\n        boxes_b: (N, 7) [x, y, z, dx, dy, dz, heading]\n\n    Returns:\n        ans_iou: (N, M)\n    \"\"\"", "\n", "assert", "boxes_a", ".", "shape", "[", "1", "]", "==", "boxes_b", ".", "shape", "[", "1", "]", "==", "7", "\n", "\n", "# transform back to pcdet's coordinate", "\n", "boxes_a", "=", "to_pcdet", "(", "boxes_a", ")", "\n", "boxes_b", "=", "to_pcdet", "(", "boxes_b", ")", "\n", "\n", "# height overlap", "\n", "boxes_a_height_max", "=", "(", "boxes_a", "[", ":", ",", "2", "]", "+", "boxes_a", "[", ":", ",", "5", "]", "/", "2", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "boxes_a_height_min", "=", "(", "boxes_a", "[", ":", ",", "2", "]", "-", "boxes_a", "[", ":", ",", "5", "]", "/", "2", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "boxes_b_height_max", "=", "(", "boxes_b", "[", ":", ",", "2", "]", "+", "boxes_b", "[", ":", ",", "5", "]", "/", "2", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "boxes_b_height_min", "=", "(", "boxes_b", "[", ":", ",", "2", "]", "-", "boxes_b", "[", ":", ",", "5", "]", "/", "2", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "# bev overlap", "\n", "overlaps_bev", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "(", "boxes_a", ".", "shape", "[", "0", "]", ",", "boxes_b", ".", "shape", "[", "0", "]", ")", ")", ")", ".", "zero_", "(", ")", "# (N, M)", "\n", "iou3d_nms_cuda", ".", "boxes_overlap_bev_gpu", "(", "boxes_a", ".", "contiguous", "(", ")", ",", "boxes_b", ".", "contiguous", "(", ")", ",", "overlaps_bev", ")", "\n", "\n", "max_of_min", "=", "torch", ".", "max", "(", "boxes_a_height_min", ",", "boxes_b_height_min", ")", "\n", "min_of_max", "=", "torch", ".", "min", "(", "boxes_a_height_max", ",", "boxes_b_height_max", ")", "\n", "overlaps_h", "=", "torch", ".", "clamp", "(", "min_of_max", "-", "max_of_min", ",", "min", "=", "0", ")", "\n", "\n", "# 3d iou", "\n", "overlaps_3d", "=", "overlaps_bev", "*", "overlaps_h", "\n", "\n", "vol_a", "=", "(", "boxes_a", "[", ":", ",", "3", "]", "*", "boxes_a", "[", ":", ",", "4", "]", "*", "boxes_a", "[", ":", ",", "5", "]", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "vol_b", "=", "(", "boxes_b", "[", ":", ",", "3", "]", "*", "boxes_b", "[", ":", ",", "4", "]", "*", "boxes_b", "[", ":", ",", "5", "]", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "iou3d", "=", "overlaps_3d", "/", "torch", ".", "clamp", "(", "vol_a", "+", "vol_b", "-", "overlaps_3d", ",", "min", "=", "1e-6", ")", "\n", "\n", "return", "iou3d", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.iou3d_nms.iou3d_nms_utils.nms_gpu": [[75, 91], ["boxes[].contiguous", "torch.LongTensor", "iou3d_nms_cuda.nms_gpu", "scores.sort", "boxes[].contiguous.size", "order[].contiguous", "keep[].cuda"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.iou3d_nms.iou3d_nms_utils.nms_gpu", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["", "def", "nms_gpu", "(", "boxes", ",", "scores", ",", "thresh", ",", "pre_maxsize", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes: (N, 7) [x, y, z, dx, dy, dz, heading]\n    :param scores: (N)\n    :param thresh:\n    :return:\n    \"\"\"", "\n", "assert", "boxes", ".", "shape", "[", "1", "]", "==", "7", "\n", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "[", "1", "]", "\n", "if", "pre_maxsize", "is", "not", "None", ":", "\n", "        ", "order", "=", "order", "[", ":", "pre_maxsize", "]", "\n", "\n", "", "boxes", "=", "boxes", "[", "order", "]", ".", "contiguous", "(", ")", "\n", "keep", "=", "torch", ".", "LongTensor", "(", "boxes", ".", "size", "(", "0", ")", ")", "\n", "num_out", "=", "iou3d_nms_cuda", ".", "nms_gpu", "(", "boxes", ",", "keep", ",", "thresh", ")", "\n", "return", "order", "[", "keep", "[", ":", "num_out", "]", ".", "cuda", "(", ")", "]", ".", "contiguous", "(", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.iou3d_nms.iou3d_nms_utils.nms_normal_gpu": [[93, 108], ["boxes[].contiguous", "torch.LongTensor", "iou3d_nms_cuda.nms_normal_gpu", "scores.sort", "boxes[].contiguous.size", "order[].contiguous", "keep[].cuda"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.iou3d_nms.iou3d_nms_utils.nms_normal_gpu", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["", "def", "nms_normal_gpu", "(", "boxes", ",", "scores", ",", "thresh", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes: (N, 7) [x, y, z, dx, dy, dz, heading]\n    :param scores: (N)\n    :param thresh:\n    :return:\n    \"\"\"", "\n", "assert", "boxes", ".", "shape", "[", "1", "]", "==", "7", "\n", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "[", "1", "]", "\n", "\n", "boxes", "=", "boxes", "[", "order", "]", ".", "contiguous", "(", ")", "\n", "\n", "keep", "=", "torch", ".", "LongTensor", "(", "boxes", ".", "size", "(", "0", ")", ")", "\n", "num_out", "=", "iou3d_nms_cuda", ".", "nms_normal_gpu", "(", "boxes", ",", "keep", ",", "thresh", ")", "\n", "return", "order", "[", "keep", "[", ":", "num_out", "]", ".", "cuda", "(", ")", "]", ".", "contiguous", "(", ")", ",", "None", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.DeformConvFunction.forward": [[16, 59], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "ctx.save_for_backward", "input.new_empty", "ValueError", "deform_conv.DeformConvFunction._output_size", "input.new_empty", "input.new_empty", "min", "deform_conv_cuda.deform_conv_forward_cuda", "input.dim", "weight.size", "weight.size", "input.dim"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.DeformConvFunction._output_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.dim", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.dim"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "\n", "input", ",", "\n", "offset", ",", "\n", "weight", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "im2col_step", "=", "64", ")", ":", "\n", "        ", "if", "input", "is", "not", "None", "and", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Expected 4D tensor as input, got {}D tensor instead.'", ".", "format", "(", "\n", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "ctx", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "ctx", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "ctx", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "ctx", ".", "groups", "=", "groups", "\n", "ctx", ".", "deformable_groups", "=", "deformable_groups", "\n", "ctx", ".", "im2col_step", "=", "im2col_step", "\n", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "offset", ",", "weight", ")", "\n", "\n", "output", "=", "input", ".", "new_empty", "(", "\n", "DeformConvFunction", ".", "_output_size", "(", "input", ",", "weight", ",", "ctx", ".", "padding", ",", "\n", "ctx", ".", "dilation", ",", "ctx", ".", "stride", ")", ")", "\n", "\n", "ctx", ".", "bufs_", "=", "[", "input", ".", "new_empty", "(", "0", ")", ",", "input", ".", "new_empty", "(", "0", ")", "]", "# columns, ones", "\n", "\n", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "cur_im2col_step", "=", "min", "(", "ctx", ".", "im2col_step", ",", "input", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "input", ".", "shape", "[", "0", "]", "%", "\n", "cur_im2col_step", ")", "==", "0", ",", "'im2col step must divide batchsize'", "\n", "deform_conv_cuda", ".", "deform_conv_forward_cuda", "(", "\n", "input", ",", "weight", ",", "offset", ",", "output", ",", "ctx", ".", "bufs_", "[", "0", "]", ",", "ctx", ".", "bufs_", "[", "1", "]", ",", "\n", "weight", ".", "size", "(", "3", ")", ",", "weight", ".", "size", "(", "2", ")", ",", "ctx", ".", "stride", "[", "1", "]", ",", "ctx", ".", "stride", "[", "0", "]", ",", "\n", "ctx", ".", "padding", "[", "1", "]", ",", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "\n", "cur_im2col_step", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.DeformConvFunction.backward": [[60, 97], ["min", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "deform_conv_cuda.deform_conv_backward_input_cuda", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "deform_conv_cuda.deform_conv_backward_parameters_cuda", "weight.size", "weight.size", "weight.size", "weight.size"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "offset", ",", "weight", "=", "ctx", ".", "saved_tensors", "\n", "\n", "grad_input", "=", "grad_offset", "=", "grad_weight", "=", "None", "\n", "\n", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "cur_im2col_step", "=", "min", "(", "ctx", ".", "im2col_step", ",", "input", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "input", ".", "shape", "[", "0", "]", "%", "\n", "cur_im2col_step", ")", "==", "0", ",", "'im2col step must divide batchsize'", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "grad_input", "=", "torch", ".", "zeros_like", "(", "input", ")", "\n", "grad_offset", "=", "torch", ".", "zeros_like", "(", "offset", ")", "\n", "deform_conv_cuda", ".", "deform_conv_backward_input_cuda", "(", "\n", "input", ",", "offset", ",", "grad_output", ",", "grad_input", ",", "\n", "grad_offset", ",", "weight", ",", "ctx", ".", "bufs_", "[", "0", "]", ",", "weight", ".", "size", "(", "3", ")", ",", "\n", "weight", ".", "size", "(", "2", ")", ",", "ctx", ".", "stride", "[", "1", "]", ",", "ctx", ".", "stride", "[", "0", "]", ",", "\n", "ctx", ".", "padding", "[", "1", "]", ",", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "\n", "cur_im2col_step", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "                ", "grad_weight", "=", "torch", ".", "zeros_like", "(", "weight", ")", "\n", "deform_conv_cuda", ".", "deform_conv_backward_parameters_cuda", "(", "\n", "input", ",", "offset", ",", "grad_output", ",", "\n", "grad_weight", ",", "ctx", ".", "bufs_", "[", "0", "]", ",", "ctx", ".", "bufs_", "[", "1", "]", ",", "weight", ".", "size", "(", "3", ")", ",", "\n", "weight", ".", "size", "(", "2", ")", ",", "ctx", ".", "stride", "[", "1", "]", ",", "ctx", ".", "stride", "[", "0", "]", ",", "\n", "ctx", ".", "padding", "[", "1", "]", ",", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "1", ",", "\n", "cur_im2col_step", ")", "\n", "\n", "", "", "return", "(", "grad_input", ",", "grad_offset", ",", "grad_weight", ",", "None", ",", "None", ",", "None", ",", "None", ",", "\n", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.DeformConvFunction._output_size": [[98, 113], ["weight.size", "range", "input.size", "input.size", "all", "ValueError", "input.dim", "map", "weight.size", "map"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.dim", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["", "@", "staticmethod", "\n", "def", "_output_size", "(", "input", ",", "weight", ",", "padding", ",", "dilation", ",", "stride", ")", ":", "\n", "        ", "channels", "=", "weight", ".", "size", "(", "0", ")", "\n", "output_size", "=", "(", "input", ".", "size", "(", "0", ")", ",", "channels", ")", "\n", "for", "d", "in", "range", "(", "input", ".", "dim", "(", ")", "-", "2", ")", ":", "\n", "            ", "in_size", "=", "input", ".", "size", "(", "d", "+", "2", ")", "\n", "pad", "=", "padding", "[", "d", "]", "\n", "kernel", "=", "dilation", "[", "d", "]", "*", "(", "weight", ".", "size", "(", "d", "+", "2", ")", "-", "1", ")", "+", "1", "\n", "stride_", "=", "stride", "[", "d", "]", "\n", "output_size", "+=", "(", "(", "in_size", "+", "(", "2", "*", "pad", ")", "-", "kernel", ")", "//", "stride_", "+", "1", ",", ")", "\n", "", "if", "not", "all", "(", "map", "(", "lambda", "s", ":", "s", ">", "0", ",", "output_size", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'convolution input is too small (output would be {})'", ".", "format", "(", "\n", "'x'", ".", "join", "(", "map", "(", "str", ",", "output_size", ")", ")", ")", ")", "\n", "", "return", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConvFunction.forward": [[117, 151], ["input.new_empty", "deform_conv_cuda.modulated_deform_conv_cuda_forward", "input.new_empty", "ctx.save_for_backward", "deform_conv.ModulatedDeformConvFunction._infer_shape", "input.new_empty", "input.new_empty"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConvFunction._infer_shape"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "\n", "input", ",", "\n", "offset", ",", "\n", "mask", ",", "\n", "weight", ",", "\n", "bias", "=", "None", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ")", ":", "\n", "        ", "ctx", ".", "stride", "=", "stride", "\n", "ctx", ".", "padding", "=", "padding", "\n", "ctx", ".", "dilation", "=", "dilation", "\n", "ctx", ".", "groups", "=", "groups", "\n", "ctx", ".", "deformable_groups", "=", "deformable_groups", "\n", "ctx", ".", "with_bias", "=", "bias", "is", "not", "None", "\n", "if", "not", "ctx", ".", "with_bias", ":", "\n", "            ", "bias", "=", "input", ".", "new_empty", "(", "1", ")", "# fake tensor", "\n", "", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "weight", ".", "requires_grad", "or", "mask", ".", "requires_grad", "or", "offset", ".", "requires_grad", "or", "input", ".", "requires_grad", ":", "\n", "            ", "ctx", ".", "save_for_backward", "(", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", ")", "\n", "", "output", "=", "input", ".", "new_empty", "(", "\n", "ModulatedDeformConvFunction", ".", "_infer_shape", "(", "ctx", ",", "input", ",", "weight", ")", ")", "\n", "ctx", ".", "_bufs", "=", "[", "input", ".", "new_empty", "(", "0", ")", ",", "input", ".", "new_empty", "(", "0", ")", "]", "\n", "deform_conv_cuda", ".", "modulated_deform_conv_cuda_forward", "(", "\n", "input", ",", "weight", ",", "bias", ",", "ctx", ".", "_bufs", "[", "0", "]", ",", "offset", ",", "mask", ",", "output", ",", "\n", "ctx", ".", "_bufs", "[", "1", "]", ",", "weight", ".", "shape", "[", "2", "]", ",", "weight", ".", "shape", "[", "3", "]", ",", "ctx", ".", "stride", ",", "\n", "ctx", ".", "stride", ",", "ctx", ".", "padding", ",", "ctx", ".", "padding", ",", "ctx", ".", "dilation", ",", "ctx", ".", "dilation", ",", "\n", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "ctx", ".", "with_bias", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConvFunction.backward": [[152, 174], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "deform_conv_cuda.modulated_deform_conv_cuda_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "torch", ".", "zeros_like", "(", "input", ")", "\n", "grad_offset", "=", "torch", ".", "zeros_like", "(", "offset", ")", "\n", "grad_mask", "=", "torch", ".", "zeros_like", "(", "mask", ")", "\n", "grad_weight", "=", "torch", ".", "zeros_like", "(", "weight", ")", "\n", "grad_bias", "=", "torch", ".", "zeros_like", "(", "bias", ")", "\n", "deform_conv_cuda", ".", "modulated_deform_conv_cuda_backward", "(", "\n", "input", ",", "weight", ",", "bias", ",", "ctx", ".", "_bufs", "[", "0", "]", ",", "offset", ",", "mask", ",", "ctx", ".", "_bufs", "[", "1", "]", ",", "\n", "grad_input", ",", "grad_weight", ",", "grad_bias", ",", "grad_offset", ",", "grad_mask", ",", "\n", "grad_output", ",", "weight", ".", "shape", "[", "2", "]", ",", "weight", ".", "shape", "[", "3", "]", ",", "ctx", ".", "stride", ",", "\n", "ctx", ".", "stride", ",", "ctx", ".", "padding", ",", "ctx", ".", "padding", ",", "ctx", ".", "dilation", ",", "ctx", ".", "dilation", ",", "\n", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "ctx", ".", "with_bias", ")", "\n", "if", "not", "ctx", ".", "with_bias", ":", "\n", "            ", "grad_bias", "=", "None", "\n", "\n", "", "return", "(", "grad_input", ",", "grad_offset", ",", "grad_mask", ",", "grad_weight", ",", "grad_bias", ",", "\n", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConvFunction._infer_shape": [[175, 186], ["input.size", "weight.size"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["", "@", "staticmethod", "\n", "def", "_infer_shape", "(", "ctx", ",", "input", ",", "weight", ")", ":", "\n", "        ", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "channels_out", "=", "weight", ".", "size", "(", "0", ")", "\n", "height", ",", "width", "=", "input", ".", "shape", "[", "2", ":", "4", "]", "\n", "kernel_h", ",", "kernel_w", "=", "weight", ".", "shape", "[", "2", ":", "4", "]", "\n", "height_out", "=", "(", "height", "+", "2", "*", "ctx", ".", "padding", "-", "\n", "(", "ctx", ".", "dilation", "*", "(", "kernel_h", "-", "1", ")", "+", "1", ")", ")", "//", "ctx", ".", "stride", "+", "1", "\n", "width_out", "=", "(", "width", "+", "2", "*", "ctx", ".", "padding", "-", "\n", "(", "ctx", ".", "dilation", "*", "(", "kernel_w", "-", "1", ")", "+", "1", ")", ")", "//", "ctx", ".", "stride", "+", "1", "\n", "return", "n", ",", "channels_out", ",", "height_out", ",", "width_out", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.DeformConv.__init__": [[194, 231], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._single", "torch.nn.modules.utils._single", "torch.nn.modules.utils._single", "torch.Parameter", "torch.Parameter", "torch.Parameter", "deform_conv.DeformConv.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConv.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "DeformConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "not", "bias", "\n", "assert", "in_channels", "%", "groups", "==", "0", ",", "'in_channels {} cannot be divisible by groups {}'", ".", "format", "(", "\n", "in_channels", ",", "groups", ")", "\n", "assert", "out_channels", "%", "groups", "==", "0", ",", "'out_channels {} cannot be divisible by groups {}'", ".", "format", "(", "\n", "out_channels", ",", "groups", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "self", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "# enable compatibility with nn.Conv2d", "\n", "self", ".", "transposed", "=", "False", "\n", "self", ".", "output_padding", "=", "_single", "(", "0", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", "//", "self", ".", "groups", ",", "\n", "*", "self", ".", "kernel_size", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.DeformConv.reset_parameters": [[232, 238], ["deform_conv.DeformConv.weight.data.uniform_", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.DeformConv.forward": [[239, 256], ["deform_conv", "max", "max", "torch.pad().contiguous", "torch.pad().contiguous", "torch.pad().contiguous", "torch.pad().contiguous", "torch.pad().contiguous", "torch.pad().contiguous", "out[].contiguous", "torch.pad().contiguous.size", "torch.pad().contiguous.size", "torch.pad().contiguous.size", "torch.pad().contiguous.size", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "out[].contiguous.size", "out[].contiguous.size"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "offset", ")", ":", "\n", "# To fix an assert error in deform_conv_cuda.cpp:128", "\n", "# input image is smaller than kernel", "\n", "        ", "input_pad", "=", "(", "\n", "x", ".", "size", "(", "2", ")", "<", "self", ".", "kernel_size", "[", "0", "]", "or", "x", ".", "size", "(", "3", ")", "<", "self", ".", "kernel_size", "[", "1", "]", ")", "\n", "if", "input_pad", ":", "\n", "            ", "pad_h", "=", "max", "(", "self", ".", "kernel_size", "[", "0", "]", "-", "x", ".", "size", "(", "2", ")", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "kernel_size", "[", "1", "]", "-", "x", ".", "size", "(", "3", ")", ",", "0", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "pad_w", ",", "0", ",", "pad_h", ")", ",", "'constant'", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "offset", "=", "F", ".", "pad", "(", "offset", ",", "(", "0", ",", "pad_w", ",", "0", ",", "pad_h", ")", ",", "'constant'", ",", "\n", "0", ")", ".", "contiguous", "(", ")", "\n", "", "out", "=", "deform_conv", "(", "x", ",", "offset", ",", "self", ".", "weight", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "deformable_groups", ")", "\n", "if", "input_pad", ":", "\n", "            ", "out", "=", "out", "[", ":", ",", ":", ",", ":", "out", ".", "size", "(", "2", ")", "-", "pad_h", ",", ":", "out", ".", "size", "(", "3", ")", "-", "\n", "pad_w", "]", ".", "contiguous", "(", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.DeformConvPack.__init__": [[276, 288], ["deform_conv.DeformConv.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "deform_conv.DeformConvPack.init_offset", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.FeatureAdaption.init_offset"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DeformConvPack", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "conv_offset", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "deformable_groups", "*", "2", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "\n", "self", ".", "kernel_size", "[", "1", "]", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "_pair", "(", "self", ".", "stride", ")", ",", "\n", "padding", "=", "_pair", "(", "self", ".", "padding", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "init_offset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.DeformConvPack.init_offset": [[289, 292], ["deform_conv.DeformConvPack.conv_offset.weight.data.zero_", "deform_conv.DeformConvPack.conv_offset.bias.data.zero_"], "methods", ["None"], ["", "def", "init_offset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_offset", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv_offset", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.DeformConvPack.forward": [[293, 297], ["deform_conv.DeformConvPack.conv_offset", "deform_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "offset", "=", "self", ".", "conv_offset", "(", "x", ")", "\n", "return", "deform_conv", "(", "x", ",", "offset", ",", "self", ".", "weight", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.DeformConvPack._load_from_state_dict": [[298, 324], ["local_metadata.get", "super()._load_from_state_dict", "print_log", "state_dict.pop", "state_dict.pop", "prefix.rstrip"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConvPack._load_from_state_dict"], ["", "def", "_load_from_state_dict", "(", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", ":", "\n", "        ", "version", "=", "local_metadata", ".", "get", "(", "'version'", ",", "None", ")", "\n", "\n", "if", "version", "is", "None", "or", "version", "<", "2", ":", "\n", "# the key is different in early versions", "\n", "# In version < 2, DeformConvPack loads previous benchmark models.", "\n", "            ", "if", "(", "prefix", "+", "'conv_offset.weight'", "not", "in", "state_dict", "\n", "and", "prefix", "[", ":", "-", "1", "]", "+", "'_offset.weight'", "in", "state_dict", ")", ":", "\n", "                ", "state_dict", "[", "prefix", "+", "'conv_offset.weight'", "]", "=", "state_dict", ".", "pop", "(", "\n", "prefix", "[", ":", "-", "1", "]", "+", "'_offset.weight'", ")", "\n", "", "if", "(", "prefix", "+", "'conv_offset.bias'", "not", "in", "state_dict", "\n", "and", "prefix", "[", ":", "-", "1", "]", "+", "'_offset.bias'", "in", "state_dict", ")", ":", "\n", "                ", "state_dict", "[", "prefix", "+", "\n", "'conv_offset.bias'", "]", "=", "state_dict", ".", "pop", "(", "prefix", "[", ":", "-", "1", "]", "+", "\n", "'_offset.bias'", ")", "\n", "\n", "", "", "if", "version", "is", "not", "None", "and", "version", ">", "1", ":", "\n", "            ", "print_log", "(", "\n", "'DeformConvPack {} is upgraded to version 2.'", ".", "format", "(", "\n", "prefix", ".", "rstrip", "(", "'.'", ")", ")", ",", "\n", "logger", "=", "'root'", ")", "\n", "\n", "", "super", "(", ")", ".", "_load_from_state_dict", "(", "state_dict", ",", "prefix", ",", "local_metadata", ",", "\n", "strict", ",", "missing_keys", ",", "unexpected_keys", ",", "\n", "error_msgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConv.__init__": [[328, 360], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._single", "torch.nn.modules.utils._single", "torch.nn.modules.utils._single", "torch.Parameter", "torch.Parameter", "torch.Parameter", "deform_conv.ModulatedDeformConv.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "deform_conv.ModulatedDeformConv.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConv.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "self", ".", "with_bias", "=", "bias", "\n", "# enable compatibility with nn.Conv2d", "\n", "self", ".", "transposed", "=", "False", "\n", "self", ".", "output_padding", "=", "_single", "(", "0", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", "//", "groups", ",", "\n", "*", "self", ".", "kernel_size", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConv.reset_parameters": [[361, 369], ["deform_conv.ModulatedDeformConv.weight.data.uniform_", "math.sqrt", "deform_conv.ModulatedDeformConv.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConv.forward": [[370, 374], ["modulated_deform_conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "offset", ",", "mask", ")", ":", "\n", "        ", "return", "modulated_deform_conv", "(", "x", ",", "offset", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConvPack.__init__": [[394, 406], ["deform_conv.ModulatedDeformConv.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "deform_conv.ModulatedDeformConvPack.init_offset", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.FeatureAdaption.init_offset"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformConvPack", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "conv_offset", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "deformable_groups", "*", "3", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "\n", "self", ".", "kernel_size", "[", "1", "]", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "_pair", "(", "self", ".", "stride", ")", ",", "\n", "padding", "=", "_pair", "(", "self", ".", "padding", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "init_offset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConvPack.init_offset": [[407, 410], ["deform_conv.ModulatedDeformConvPack.conv_offset.weight.data.zero_", "deform_conv.ModulatedDeformConvPack.conv_offset.bias.data.zero_"], "methods", ["None"], ["", "def", "init_offset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_offset", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv_offset", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConvPack.forward": [[411, 419], ["deform_conv.ModulatedDeformConvPack.conv_offset", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "modulated_deform_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv_offset", "(", "x", ")", "\n", "o1", ",", "o2", ",", "mask", "=", "torch", ".", "chunk", "(", "out", ",", "3", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "cat", "(", "(", "o1", ",", "o2", ")", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "sigmoid", "(", "mask", ")", "\n", "return", "modulated_deform_conv", "(", "x", ",", "offset", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConvPack._load_from_state_dict": [[420, 447], ["local_metadata.get", "super()._load_from_state_dict", "print_log", "state_dict.pop", "state_dict.pop", "prefix.rstrip"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConvPack._load_from_state_dict"], ["", "def", "_load_from_state_dict", "(", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", ":", "\n", "        ", "version", "=", "local_metadata", ".", "get", "(", "'version'", ",", "None", ")", "\n", "\n", "if", "version", "is", "None", "or", "version", "<", "2", ":", "\n", "# the key is different in early versions", "\n", "# In version < 2, ModulatedDeformConvPack", "\n", "# loads previous benchmark models.", "\n", "            ", "if", "(", "prefix", "+", "'conv_offset.weight'", "not", "in", "state_dict", "\n", "and", "prefix", "[", ":", "-", "1", "]", "+", "'_offset.weight'", "in", "state_dict", ")", ":", "\n", "                ", "state_dict", "[", "prefix", "+", "'conv_offset.weight'", "]", "=", "state_dict", ".", "pop", "(", "\n", "prefix", "[", ":", "-", "1", "]", "+", "'_offset.weight'", ")", "\n", "", "if", "(", "prefix", "+", "'conv_offset.bias'", "not", "in", "state_dict", "\n", "and", "prefix", "[", ":", "-", "1", "]", "+", "'_offset.bias'", "in", "state_dict", ")", ":", "\n", "                ", "state_dict", "[", "prefix", "+", "\n", "'conv_offset.bias'", "]", "=", "state_dict", ".", "pop", "(", "prefix", "[", ":", "-", "1", "]", "+", "\n", "'_offset.bias'", ")", "\n", "\n", "", "", "if", "version", "is", "not", "None", "and", "version", ">", "1", ":", "\n", "            ", "print_log", "(", "\n", "'ModulatedDeformConvPack {} is upgraded to version 2.'", ".", "format", "(", "\n", "prefix", ".", "rstrip", "(", "'.'", ")", ")", ",", "\n", "logger", "=", "'root'", ")", "\n", "\n", "", "super", "(", ")", ".", "_load_from_state_dict", "(", "state_dict", ",", "prefix", ",", "local_metadata", ",", "\n", "strict", ",", "missing_keys", ",", "unexpected_keys", ",", "\n", "error_msgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.point_cloud.bev_ops._points_to_bevmap_reverse_kernel": [[7, 62], ["numba.jit", "numpy.round().astype", "numpy.zeros", "range", "range", "numpy.round", "numpy.floor"], "function", ["None"], ["@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "_points_to_bevmap_reverse_kernel", "(", "\n", "points", ",", "\n", "voxel_size", ",", "\n", "coors_range", ",", "\n", "coor_to_voxelidx", ",", "\n", "# coors_2d,", "\n", "bev_map", ",", "\n", "height_lowers", ",", "\n", "# density_norm_num=16,", "\n", "with_reflectivity", "=", "False", ",", "\n", "max_voxels", "=", "40000", ",", "\n", ")", ":", "\n", "# put all computations to one loop.", "\n", "# we shouldn't create large array in main jit code, otherwise", "\n", "# reduce performance", "\n", "    ", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "ndim", "=", "points", ".", "shape", "[", "1", "]", "-", "1", "\n", "# ndim = 3", "\n", "ndim_minus_1", "=", "ndim", "-", "1", "\n", "grid_size", "=", "(", "coors_range", "[", "3", ":", "]", "-", "coors_range", "[", ":", "3", "]", ")", "/", "voxel_size", "\n", "# np.round(grid_size)", "\n", "# grid_size = np.round(grid_size).astype(np.int64)(np.int32)", "\n", "grid_size", "=", "np", ".", "round", "(", "grid_size", ",", "0", ",", "grid_size", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "height_slice_size", "=", "voxel_size", "[", "-", "1", "]", "\n", "coor", "=", "np", ".", "zeros", "(", "shape", "=", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "# DHW", "\n", "voxel_num", "=", "0", "\n", "failed", "=", "False", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "failed", "=", "False", "\n", "for", "j", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "c", "=", "np", ".", "floor", "(", "(", "points", "[", "i", ",", "j", "]", "-", "coors_range", "[", "j", "]", ")", "/", "voxel_size", "[", "j", "]", ")", "\n", "if", "c", "<", "0", "or", "c", ">=", "grid_size", "[", "j", "]", ":", "\n", "                ", "failed", "=", "True", "\n", "break", "\n", "", "coor", "[", "ndim_minus_1", "-", "j", "]", "=", "c", "\n", "", "if", "failed", ":", "\n", "            ", "continue", "\n", "", "voxelidx", "=", "coor_to_voxelidx", "[", "coor", "[", "0", "]", ",", "coor", "[", "1", "]", ",", "coor", "[", "2", "]", "]", "\n", "if", "voxelidx", "==", "-", "1", ":", "\n", "            ", "voxelidx", "=", "voxel_num", "\n", "if", "voxel_num", ">=", "max_voxels", ":", "\n", "                ", "break", "\n", "", "voxel_num", "+=", "1", "\n", "coor_to_voxelidx", "[", "coor", "[", "0", "]", ",", "coor", "[", "1", "]", ",", "coor", "[", "2", "]", "]", "=", "voxelidx", "\n", "# coors_2d[voxelidx] = coor[1:]", "\n", "", "bev_map", "[", "-", "1", ",", "coor", "[", "1", "]", ",", "coor", "[", "2", "]", "]", "+=", "1", "\n", "height_norm", "=", "bev_map", "[", "coor", "[", "0", "]", ",", "coor", "[", "1", "]", ",", "coor", "[", "2", "]", "]", "\n", "incomimg_height_norm", "=", "(", "\n", "points", "[", "i", ",", "2", "]", "-", "height_lowers", "[", "coor", "[", "0", "]", "]", "\n", ")", "/", "height_slice_size", "\n", "if", "incomimg_height_norm", ">", "height_norm", ":", "\n", "            ", "bev_map", "[", "coor", "[", "0", "]", ",", "coor", "[", "1", "]", ",", "coor", "[", "2", "]", "]", "=", "incomimg_height_norm", "\n", "if", "with_reflectivity", ":", "\n", "                ", "bev_map", "[", "-", "2", ",", "coor", "[", "1", "]", ",", "coor", "[", "2", "]", "]", "=", "points", "[", "i", ",", "3", "]", "\n", "# return voxel_num", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.point_cloud.bev_ops.points_to_bev": [[65, 118], ["tuple", "list", "numpy.linspace", "numpy.zeros", "bev_ops._points_to_bevmap_reverse_kernel", "isinstance", "numpy.array", "isinstance", "numpy.array", "numpy.round().astype().tolist", "numpy.ones", "numpy.round().astype", "numpy.round"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.point_cloud.bev_ops._points_to_bevmap_reverse_kernel"], ["", "", "", "", "def", "points_to_bev", "(", "\n", "points", ",", "\n", "voxel_size", ",", "\n", "coors_range", ",", "\n", "with_reflectivity", "=", "False", ",", "\n", "density_norm_num", "=", "16", ",", "\n", "max_voxels", "=", "40000", ",", "\n", ")", ":", "\n", "    ", "\"\"\"convert kitti points(N, 4) to a bev map. return [C, H, W] map.\n    this function based on algorithm in points_to_voxel.\n    takes 5ms in a reduced pointcloud with voxel_size=[0.1, 0.1, 0.8]\n\n    Args:\n        points: [N, ndim] float tensor. points[:, :3] contain xyz points and\n            points[:, 3] contain reflectivity.\n        voxel_size: [3] list/tuple or array, float. xyz, indicate voxel size\n        coors_range: [6] list/tuple or array, float. indicate voxel range.\n            format: xyzxyz, minmax\n        with_reflectivity: bool. if True, will add a intensity map to bev map.\n    Returns:\n        bev_map: [num_height_maps + 1(2), H, W] float tensor.\n            `WARNING`: bev_map[-1] is num_points map, NOT density map,\n            because calculate density map need more time in cpu rather than gpu.\n            if with_reflectivity is True, bev_map[-2] is intensity map.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "voxel_size", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "voxel_size", "=", "np", ".", "array", "(", "voxel_size", ",", "dtype", "=", "points", ".", "dtype", ")", "\n", "", "if", "not", "isinstance", "(", "coors_range", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "coors_range", "=", "np", ".", "array", "(", "coors_range", ",", "dtype", "=", "points", ".", "dtype", ")", "\n", "", "voxelmap_shape", "=", "(", "coors_range", "[", "3", ":", "]", "-", "coors_range", "[", ":", "3", "]", ")", "/", "voxel_size", "\n", "voxelmap_shape", "=", "tuple", "(", "np", ".", "round", "(", "voxelmap_shape", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tolist", "(", ")", ")", "\n", "voxelmap_shape", "=", "voxelmap_shape", "[", ":", ":", "-", "1", "]", "# DHW format", "\n", "coor_to_voxelidx", "=", "-", "np", ".", "ones", "(", "shape", "=", "voxelmap_shape", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# coors_2d = np.zeros(shape=(max_voxels, 2), dtype=np.int32)", "\n", "bev_map_shape", "=", "list", "(", "voxelmap_shape", ")", "\n", "bev_map_shape", "[", "0", "]", "+=", "1", "\n", "height_lowers", "=", "np", ".", "linspace", "(", "\n", "coors_range", "[", "2", "]", ",", "coors_range", "[", "5", "]", ",", "voxelmap_shape", "[", "0", "]", ",", "endpoint", "=", "False", "\n", ")", "\n", "if", "with_reflectivity", ":", "\n", "        ", "bev_map_shape", "[", "0", "]", "+=", "1", "\n", "", "bev_map", "=", "np", ".", "zeros", "(", "shape", "=", "bev_map_shape", ",", "dtype", "=", "points", ".", "dtype", ")", "\n", "_points_to_bevmap_reverse_kernel", "(", "\n", "points", ",", "\n", "voxel_size", ",", "\n", "coors_range", ",", "\n", "coor_to_voxelidx", ",", "\n", "bev_map", ",", "\n", "height_lowers", ",", "\n", "with_reflectivity", ",", "\n", "max_voxels", ",", "\n", ")", "\n", "return", "bev_map", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.point_cloud.point_cloud_ops._points_to_voxel_reverse_kernel": [[7, 56], ["numba.jit", "numpy.round().astype", "numpy.zeros", "range", "range", "numpy.round", "numpy.floor"], "function", ["None"], ["@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "_points_to_voxel_reverse_kernel", "(", "\n", "points", ",", "\n", "voxel_size", ",", "\n", "coors_range", ",", "\n", "num_points_per_voxel", ",", "\n", "coor_to_voxelidx", ",", "\n", "voxels", ",", "\n", "coors", ",", "\n", "max_points", "=", "35", ",", "\n", "max_voxels", "=", "20000", ",", "\n", ")", ":", "\n", "# put all computations to one loop.", "\n", "# we shouldn't create large array in main jit code, otherwise", "\n", "# reduce performance", "\n", "    ", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "# ndim = points.shape[1] - 1", "\n", "ndim", "=", "3", "\n", "ndim_minus_1", "=", "ndim", "-", "1", "\n", "grid_size", "=", "(", "coors_range", "[", "3", ":", "]", "-", "coors_range", "[", ":", "3", "]", ")", "/", "voxel_size", "\n", "# np.round(grid_size)", "\n", "# grid_size = np.round(grid_size).astype(np.int64)(np.int32)", "\n", "grid_size", "=", "np", ".", "round", "(", "grid_size", ",", "0", ",", "grid_size", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "coor", "=", "np", ".", "zeros", "(", "shape", "=", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "voxel_num", "=", "0", "\n", "failed", "=", "False", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "failed", "=", "False", "\n", "for", "j", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "c", "=", "np", ".", "floor", "(", "(", "points", "[", "i", ",", "j", "]", "-", "coors_range", "[", "j", "]", ")", "/", "voxel_size", "[", "j", "]", ")", "\n", "if", "c", "<", "0", "or", "c", ">=", "grid_size", "[", "j", "]", ":", "\n", "                ", "failed", "=", "True", "\n", "break", "\n", "", "coor", "[", "ndim_minus_1", "-", "j", "]", "=", "c", "\n", "", "if", "failed", ":", "\n", "            ", "continue", "\n", "", "voxelidx", "=", "coor_to_voxelidx", "[", "coor", "[", "0", "]", ",", "coor", "[", "1", "]", ",", "coor", "[", "2", "]", "]", "\n", "if", "voxelidx", "==", "-", "1", ":", "\n", "            ", "voxelidx", "=", "voxel_num", "\n", "if", "voxel_num", ">=", "max_voxels", ":", "\n", "                ", "continue", "\n", "", "voxel_num", "+=", "1", "\n", "coor_to_voxelidx", "[", "coor", "[", "0", "]", ",", "coor", "[", "1", "]", ",", "coor", "[", "2", "]", "]", "=", "voxelidx", "\n", "coors", "[", "voxelidx", "]", "=", "coor", "\n", "", "num", "=", "num_points_per_voxel", "[", "voxelidx", "]", "\n", "if", "num", "<", "max_points", ":", "\n", "            ", "voxels", "[", "voxelidx", ",", "num", "]", "=", "points", "[", "i", "]", "\n", "num_points_per_voxel", "[", "voxelidx", "]", "+=", "1", "\n", "", "", "return", "voxel_num", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.point_cloud.point_cloud_ops._points_to_voxel_kernel": [[58, 110], ["numba.jit", "numpy.round().astype", "numpy.zeros", "range", "range", "numpy.round", "numpy.floor"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "_points_to_voxel_kernel", "(", "\n", "points", ",", "\n", "voxel_size", ",", "\n", "coors_range", ",", "\n", "num_points_per_voxel", ",", "\n", "coor_to_voxelidx", ",", "\n", "voxels", ",", "\n", "coors", ",", "\n", "max_points", "=", "35", ",", "\n", "max_voxels", "=", "20000", ",", "\n", ")", ":", "\n", "# need mutex if write in cuda, but numba.cuda don't support mutex.", "\n", "# in addition, pytorch don't support cuda in dataloader(tensorflow support this).", "\n", "# put all computations to one loop.", "\n", "# we shouldn't create large array in main jit code, otherwise", "\n", "# decrease performance", "\n", "    ", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "# ndim = points.shape[1] - 1", "\n", "ndim", "=", "3", "\n", "grid_size", "=", "(", "coors_range", "[", "3", ":", "]", "-", "coors_range", "[", ":", "3", "]", ")", "/", "voxel_size", "\n", "# grid_size = np.round(grid_size).astype(np.int64)(np.int32)", "\n", "grid_size", "=", "np", ".", "round", "(", "grid_size", ",", "0", ",", "grid_size", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "lower_bound", "=", "coors_range", "[", ":", "3", "]", "\n", "upper_bound", "=", "coors_range", "[", "3", ":", "]", "\n", "coor", "=", "np", ".", "zeros", "(", "shape", "=", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "voxel_num", "=", "0", "\n", "failed", "=", "False", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "failed", "=", "False", "\n", "for", "j", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "c", "=", "np", ".", "floor", "(", "(", "points", "[", "i", ",", "j", "]", "-", "coors_range", "[", "j", "]", ")", "/", "voxel_size", "[", "j", "]", ")", "\n", "if", "c", "<", "0", "or", "c", ">=", "grid_size", "[", "j", "]", ":", "\n", "                ", "failed", "=", "True", "\n", "break", "\n", "", "coor", "[", "j", "]", "=", "c", "\n", "", "if", "failed", ":", "\n", "            ", "continue", "\n", "", "voxelidx", "=", "coor_to_voxelidx", "[", "coor", "[", "0", "]", ",", "coor", "[", "1", "]", ",", "coor", "[", "2", "]", "]", "\n", "if", "voxelidx", "==", "-", "1", ":", "\n", "            ", "voxelidx", "=", "voxel_num", "\n", "if", "voxel_num", ">=", "max_voxels", ":", "\n", "                ", "continue", "\n", "", "voxel_num", "+=", "1", "\n", "coor_to_voxelidx", "[", "coor", "[", "0", "]", ",", "coor", "[", "1", "]", ",", "coor", "[", "2", "]", "]", "=", "voxelidx", "\n", "coors", "[", "voxelidx", "]", "=", "coor", "\n", "", "num", "=", "num_points_per_voxel", "[", "voxelidx", "]", "\n", "if", "num", "<", "max_points", ":", "\n", "            ", "voxels", "[", "voxelidx", ",", "num", "]", "=", "points", "[", "i", "]", "\n", "num_points_per_voxel", "[", "voxelidx", "]", "+=", "1", "\n", "", "", "return", "voxel_num", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.point_cloud.point_cloud_ops.points_to_voxel": [[112, 185], ["tuple", "numpy.zeros", "numpy.zeros", "numpy.zeros", "isinstance", "numpy.array", "isinstance", "numpy.array", "numpy.round().astype().tolist", "numpy.ones", "point_cloud_ops._points_to_voxel_reverse_kernel", "point_cloud_ops._points_to_voxel_kernel", "numpy.round().astype", "numpy.round"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.point_cloud.point_cloud_ops._points_to_voxel_reverse_kernel", "home.repos.pwc.inspect_result.neeharperi_futuredet.point_cloud.point_cloud_ops._points_to_voxel_kernel"], ["", "def", "points_to_voxel", "(", "\n", "points", ",", "voxel_size", ",", "coors_range", ",", "max_points", "=", "35", ",", "reverse_index", "=", "True", ",", "max_voxels", "=", "20000", "\n", ")", ":", "\n", "    ", "\"\"\"convert kitti points(N, >=3) to voxels. This version calculate\n    everything in one loop. now it takes only 4.2ms(complete point cloud)\n    with jit and 3.2ghz cpu.(don't calculate other features)\n    Note: this function in ubuntu seems faster than windows 10.\n\n    Args:\n        points: [N, ndim] float tensor. points[:, :3] contain xyz points and\n            points[:, 3:] contain other information such as reflectivity.\n        voxel_size: [3] list/tuple or array, float. xyz, indicate voxel size\n        coors_range: [6] list/tuple or array, float. indicate voxel range.\n            format: xyzxyz, minmax\n        max_points: int. indicate maximum points contained in a voxel.\n        reverse_index: boolean. indicate whether return reversed coordinates.\n            if points has xyz format and reverse_index is True, output\n            coordinates will be zyx format, but points in features always\n            xyz format.\n        max_voxels: int. indicate maximum voxels this function create.\n            for second, 20000 is a good choice. you should shuffle points\n            before call this function because max_voxels may drop some points.\n\n    Returns:\n        voxels: [M, max_points, ndim] float tensor. only contain points.\n        coordinates: [M, 3] int32 tensor.\n        num_points_per_voxel: [M] int32 tensor.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "voxel_size", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "voxel_size", "=", "np", ".", "array", "(", "voxel_size", ",", "dtype", "=", "points", ".", "dtype", ")", "\n", "", "if", "not", "isinstance", "(", "coors_range", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "coors_range", "=", "np", ".", "array", "(", "coors_range", ",", "dtype", "=", "points", ".", "dtype", ")", "\n", "", "voxelmap_shape", "=", "(", "coors_range", "[", "3", ":", "]", "-", "coors_range", "[", ":", "3", "]", ")", "/", "voxel_size", "\n", "voxelmap_shape", "=", "tuple", "(", "np", ".", "round", "(", "voxelmap_shape", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tolist", "(", ")", ")", "\n", "if", "reverse_index", ":", "\n", "        ", "voxelmap_shape", "=", "voxelmap_shape", "[", ":", ":", "-", "1", "]", "\n", "# don't create large array in jit(nopython=True) code.", "\n", "", "num_points_per_voxel", "=", "np", ".", "zeros", "(", "shape", "=", "(", "max_voxels", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "coor_to_voxelidx", "=", "-", "np", ".", "ones", "(", "shape", "=", "voxelmap_shape", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "voxels", "=", "np", ".", "zeros", "(", "\n", "shape", "=", "(", "max_voxels", ",", "max_points", ",", "points", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "points", ".", "dtype", "\n", ")", "\n", "coors", "=", "np", ".", "zeros", "(", "shape", "=", "(", "max_voxels", ",", "3", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "if", "reverse_index", ":", "\n", "        ", "voxel_num", "=", "_points_to_voxel_reverse_kernel", "(", "\n", "points", ",", "\n", "voxel_size", ",", "\n", "coors_range", ",", "\n", "num_points_per_voxel", ",", "\n", "coor_to_voxelidx", ",", "\n", "voxels", ",", "\n", "coors", ",", "\n", "max_points", ",", "\n", "max_voxels", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "voxel_num", "=", "_points_to_voxel_kernel", "(", "\n", "points", ",", "\n", "voxel_size", ",", "\n", "coors_range", ",", "\n", "num_points_per_voxel", ",", "\n", "coor_to_voxelidx", ",", "\n", "voxels", ",", "\n", "coors", ",", "\n", "max_points", ",", "\n", "max_voxels", ",", "\n", ")", "\n", "\n", "", "coors", "=", "coors", "[", ":", "voxel_num", "]", "\n", "voxels", "=", "voxels", "[", ":", "voxel_num", "]", "\n", "num_points_per_voxel", "=", "num_points_per_voxel", "[", ":", "voxel_num", "]", "\n", "return", "voxels", ",", "coors", ",", "num_points_per_voxel", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.point_cloud.point_cloud_ops.bound_points_jit": [[187, 203], ["numba.jit", "numpy.zeros", "range", "range"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "bound_points_jit", "(", "points", ",", "upper_bound", ",", "lower_bound", ")", ":", "\n", "# to use nopython=True, np.bool is not supported. so you need", "\n", "# convert result to np.bool after this function.", "\n", "    ", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "ndim", "=", "points", ".", "shape", "[", "1", "]", "\n", "keep_indices", "=", "np", ".", "zeros", "(", "(", "N", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "success", "=", "0", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "success", "=", "1", "\n", "for", "j", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "if", "points", "[", "i", ",", "j", "]", "<", "lower_bound", "[", "j", "]", "or", "points", "[", "i", ",", "j", "]", ">=", "upper_bound", "[", "j", "]", ":", "\n", "                ", "success", "=", "0", "\n", "break", "\n", "", "", "keep_indices", "[", "i", "]", "=", "success", "\n", "", "return", "keep_indices", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build": [[16, 22], ["isinstance", "torch.nn.Sequential", "det3d.utils.build_from_cfg", "det3d.utils.build_from_cfg", "registry.SECOND_STAGE", "registry.ROI_HEAD", "registry.READERS", "registry.BACKBONES", "registry.NECKS", "registry.HEADS", "registry.LOSSES", "registry.DETECTORS"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.build_from_cfg", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.build_from_cfg"], ["\n", "\n", "def", "build_voxel_generator", "(", "voxel_config", ")", ":", "\n", "\n", "    ", "voxel_generator", "=", "VoxelGenerator", "(", "\n", "voxel_size", "=", "voxel_config", ".", "VOXEL_SIZE", ",", "\n", "point_cloud_range", "=", "voxel_config", ".", "RANGE", ",", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_second_stage_module": [[23, 25], ["builder.build"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build"], ["max_num_points", "=", "voxel_config", ".", "MAX_POINTS_NUM_PER_VOXEL", ",", "\n", "max_voxels", "=", "20000", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_roi_head": [[26, 28], ["builder.build"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build"], ["\n", "return", "voxel_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_reader": [[30, 32], ["builder.build"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build"], ["    ", "logger", "=", "logging", ".", "getLogger", "(", "\"build_db_preprocess\"", ")", "\n", "cfg", "=", "db_prep_config", "\n", "if", "\"filter_by_difficulty\"", "in", "cfg", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_backbone": [[34, 36], ["builder.build"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build"], ["return", "prep", ".", "DBFilterByDifficulty", "(", "v", ",", "logger", "=", "logger", ")", "\n", "", "elif", "\"filter_by_min_num_points\"", "in", "cfg", ":", "\n", "        ", "v", "=", "cfg", "[", "\"filter_by_min_num_points\"", "]", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_neck": [[38, 40], ["builder.build"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build"], ["", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"unknown database prep type\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_head": [[41, 43], ["builder.build"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build"], ["\n", "", "", "def", "children", "(", "m", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"Get children of `m`.\"", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_loss": [[45, 47], ["builder.build"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build"], ["\n", "\n", "", "def", "num_children", "(", "m", ":", "nn", ".", "Module", ")", "->", "int", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_detector": [[49, 51], ["builder.build", "dict"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build"], ["return", "len", "(", "children", "(", "m", ")", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.necks.rpn.RPN.__init__": [[24, 116], ["torch.nn.Module.__init__", "range", "enumerate", "torch.nn.ModuleList", "torch.nn.ModuleList", "logger.info", "dict", "len", "len", "len", "len", "len", "len", "len", "len", "len", "must_equal_list.append", "rpn.RPN._make_layer", "blocks.append", "deblocks.append", "numpy.prod", "det3d.models.utils.Sequential", "numpy.round().astype", "det3d.models.utils.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "utils.build_norm_layer", "numpy.round", "utils.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.necks.rpn.RPN._make_layer", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.build_norm_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "layer_nums", ",", "\n", "ds_layer_strides", ",", "\n", "ds_num_filters", ",", "\n", "us_layer_strides", ",", "\n", "us_num_filters", ",", "\n", "num_input_features", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "name", "=", "\"rpn\"", ",", "\n", "logger", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "RPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer_strides", "=", "ds_layer_strides", "\n", "self", ".", "_num_filters", "=", "ds_num_filters", "\n", "self", ".", "_layer_nums", "=", "layer_nums", "\n", "self", ".", "_upsample_strides", "=", "us_layer_strides", "\n", "self", ".", "_num_upsample_filters", "=", "us_num_filters", "\n", "self", ".", "_num_input_features", "=", "num_input_features", "\n", "\n", "if", "norm_cfg", "is", "None", ":", "\n", "            ", "norm_cfg", "=", "dict", "(", "type", "=", "\"BN\"", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "\n", "", "self", ".", "_norm_cfg", "=", "norm_cfg", "\n", "\n", "assert", "len", "(", "self", ".", "_layer_strides", ")", "==", "len", "(", "self", ".", "_layer_nums", ")", "\n", "assert", "len", "(", "self", ".", "_num_filters", ")", "==", "len", "(", "self", ".", "_layer_nums", ")", "\n", "assert", "len", "(", "self", ".", "_num_upsample_filters", ")", "==", "len", "(", "self", ".", "_upsample_strides", ")", "\n", "\n", "self", ".", "_upsample_start_idx", "=", "len", "(", "self", ".", "_layer_nums", ")", "-", "len", "(", "self", ".", "_upsample_strides", ")", "\n", "\n", "must_equal_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_upsample_strides", ")", ")", ":", "\n", "# print(upsample_strides[i])", "\n", "            ", "must_equal_list", ".", "append", "(", "\n", "self", ".", "_upsample_strides", "[", "i", "]", "\n", "/", "np", ".", "prod", "(", "self", ".", "_layer_strides", "[", ":", "i", "+", "self", ".", "_upsample_start_idx", "+", "1", "]", ")", "\n", ")", "\n", "\n", "", "for", "val", "in", "must_equal_list", ":", "\n", "            ", "assert", "val", "==", "must_equal_list", "[", "0", "]", "\n", "\n", "", "in_filters", "=", "[", "self", ".", "_num_input_features", ",", "*", "self", ".", "_num_filters", "[", ":", "-", "1", "]", "]", "\n", "blocks", "=", "[", "]", "\n", "deblocks", "=", "[", "]", "\n", "\n", "for", "i", ",", "layer_num", "in", "enumerate", "(", "self", ".", "_layer_nums", ")", ":", "\n", "            ", "block", ",", "num_out_filters", "=", "self", ".", "_make_layer", "(", "\n", "in_filters", "[", "i", "]", ",", "\n", "self", ".", "_num_filters", "[", "i", "]", ",", "\n", "layer_num", ",", "\n", "stride", "=", "self", ".", "_layer_strides", "[", "i", "]", ",", "\n", ")", "\n", "blocks", ".", "append", "(", "block", ")", "\n", "if", "i", "-", "self", ".", "_upsample_start_idx", ">=", "0", ":", "\n", "                ", "stride", "=", "(", "self", ".", "_upsample_strides", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", ")", "\n", "if", "stride", ">", "1", ":", "\n", "                    ", "deblock", "=", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "num_out_filters", ",", "\n", "self", ".", "_num_upsample_filters", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", ",", "\n", "stride", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "build_norm_layer", "(", "\n", "self", ".", "_norm_cfg", ",", "\n", "self", ".", "_num_upsample_filters", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", ",", "\n", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "stride", "=", "np", ".", "round", "(", "1", "/", "stride", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "deblock", "=", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_out_filters", ",", "\n", "self", ".", "_num_upsample_filters", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", ",", "\n", "stride", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "build_norm_layer", "(", "\n", "self", ".", "_norm_cfg", ",", "\n", "self", ".", "_num_upsample_filters", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", ",", "\n", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "", "deblocks", ".", "append", "(", "deblock", ")", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "blocks", ")", "\n", "self", ".", "deblocks", "=", "nn", ".", "ModuleList", "(", "deblocks", ")", "\n", "\n", "logger", ".", "info", "(", "\"Finish RPN Initialization\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.necks.rpn.RPN.downsample_factor": [[117, 123], ["numpy.prod", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "downsample_factor", "(", "self", ")", ":", "\n", "        ", "factor", "=", "np", ".", "prod", "(", "self", ".", "_layer_strides", ")", "\n", "if", "len", "(", "self", ".", "_upsample_strides", ")", ">", "0", ":", "\n", "            ", "factor", "/=", "self", ".", "_upsample_strides", "[", "-", "1", "]", "\n", "", "return", "factor", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.necks.rpn.RPN._make_layer": [[124, 143], ["det3d.models.utils.Sequential", "range", "torch.nn.ZeroPad2d", "torch.nn.Conv2d", "torch.nn.ReLU", "det3d.models.utils.Sequential.add", "det3d.models.utils.Sequential.add", "det3d.models.utils.Sequential.add", "utils.build_norm_layer", "torch.nn.Conv2d", "torch.nn.ReLU", "utils.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.Sequential.add", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.Sequential.add", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.Sequential.add", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.build_norm_layer"], ["", "def", "_make_layer", "(", "self", ",", "inplanes", ",", "planes", ",", "num_blocks", ",", "stride", "=", "1", ")", ":", "\n", "\n", "        ", "block", "=", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "_norm_cfg", ",", "planes", ")", "[", "1", "]", ",", "\n", "# nn.BatchNorm2d(planes, eps=1e-3, momentum=0.01),", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "for", "j", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "block", ".", "add", "(", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "block", ".", "add", "(", "\n", "build_norm_layer", "(", "self", ".", "_norm_cfg", ",", "planes", ")", "[", "1", "]", ",", "\n", "# nn.BatchNorm2d(planes, eps=1e-3, momentum=0.01)", "\n", ")", "\n", "block", ".", "add", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "return", "block", ",", "planes", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.necks.rpn.RPN.init_weights": [[145, 149], ["rpn.RPN.modules", "isinstance", "det3d.torchie.cnn.xavier_init"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.weight_init.xavier_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "\"uniform\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.necks.rpn.RPN.forward": [[150, 160], ["range", "len", "len", "torch.cat", "ups.append"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ups", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "blocks", "[", "i", "]", "(", "x", ")", "\n", "if", "i", "-", "self", ".", "_upsample_start_idx", ">=", "0", ":", "\n", "                ", "ups", ".", "append", "(", "self", ".", "deblocks", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", "(", "x", ")", ")", "\n", "", "", "if", "len", "(", "ups", ")", ">", "0", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "ups", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.base.BaseDetector.__init__": [[15, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDetector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.base.BaseDetector.with_reader": [[19, 23], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_reader", "(", "self", ")", ":", "\n", "# Whether input data need to be processed by Input Feature Extractor", "\n", "        ", "return", "hasattr", "(", "self", ",", "\"reader\"", ")", "and", "self", ".", "reader", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.base.BaseDetector.with_neck": [[24, 27], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_neck", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "\"neck\"", ")", "and", "self", ".", "neck", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.base.BaseDetector.with_shared_head": [[28, 31], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_shared_head", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "\"shared_head\"", ")", "and", "self", ".", "shared_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.base.BaseDetector.with_bbox": [[32, 35], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_bbox", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "\"bbox_head\"", ")", "and", "self", ".", "bbox_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.base.BaseDetector.with_mask": [[36, 39], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_mask", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "\"mask_head\"", ")", "and", "self", ".", "mask_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.base.BaseDetector.extract_feat": [[40, 43], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "extract_feat", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.base.BaseDetector.extract_feats": [[44, 48], ["isinstance", "base.BaseDetector.extract_feat"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.voxelnet.VoxelNet.extract_feat"], ["", "def", "extract_feats", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "imgs", ",", "list", ")", "\n", "for", "img", "in", "imgs", ":", "\n", "            ", "yield", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.base.BaseDetector.forward_train": [[49, 52], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "forward_train", "(", "self", ",", "imgs", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.base.BaseDetector.simple_test": [[53, 56], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "simple_test", "(", "self", ",", "img", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.base.BaseDetector.aug_test": [[57, 60], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "aug_test", "(", "self", ",", "imgs", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.base.BaseDetector.init_weights": [[61, 65], ["logging.getLogger", "logging.getLogger.info"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "pretrained", "is", "not", "None", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "info", "(", "\"load model from: {}\"", ".", "format", "(", "pretrained", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.base.BaseDetector.forward_test": [[66, 68], ["None"], "methods", ["None"], ["", "", "def", "forward_test", "(", "self", ",", "imgs", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.base.BaseDetector.forward": [[69, 71], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "example", ",", "return_loss", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.two_stage.TwoStageDetector.__init__": [[10, 39], ["base.BaseDetector.__init__", "builder.build_detector", "torch.nn.ModuleList", "builder.build_roi_head", "print", "two_stage.TwoStageDetector.single_det.freeze", "two_stage.TwoStageDetector.second_stage.append", "builder.build_second_stage_module"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_detector", "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_roi_head", "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.single_stage.SingleStageDetector.freeze", "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_second_stage_module"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "first_stage_cfg", ",", "\n", "second_stage_modules", ",", "\n", "roi_head", ",", "\n", "NMS_POST_MAXSIZE", ",", "\n", "num_point", "=", "1", ",", "\n", "freeze", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "TwoStageDetector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "single_det", "=", "builder", ".", "build_detector", "(", "first_stage_cfg", ",", "**", "kwargs", ")", "\n", "self", ".", "NMS_POST_MAXSIZE", "=", "NMS_POST_MAXSIZE", "\n", "\n", "if", "freeze", ":", "\n", "            ", "print", "(", "\"Freeze First Stage Network\"", ")", "\n", "# we train the model in two steps ", "\n", "self", ".", "single_det", "=", "self", ".", "single_det", ".", "freeze", "(", ")", "\n", "", "self", ".", "bbox_head", "=", "self", ".", "single_det", ".", "bbox_head", "\n", "\n", "self", ".", "second_stage", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# can be any number of modules ", "\n", "# bird eye view, cylindrical view, image, multiple timesteps, etc.. ", "\n", "for", "module", "in", "second_stage_modules", ":", "\n", "            ", "self", ".", "second_stage", ".", "append", "(", "builder", ".", "build_second_stage_module", "(", "module", ")", ")", "\n", "\n", "", "self", ".", "roi_head", "=", "builder", ".", "build_roi_head", "(", "roi_head", ")", "\n", "\n", "self", ".", "num_point", "=", "num_point", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.two_stage.TwoStageDetector.combine_loss": [[40, 48], ["range", "len", "one_stage_loss[].append", "one_stage_loss[].append"], "methods", ["None"], ["", "def", "combine_loss", "(", "self", ",", "one_stage_loss", ",", "roi_loss", ",", "tb_dict", ")", ":", "\n", "        ", "one_stage_loss", "[", "'loss'", "]", "[", "0", "]", "+=", "(", "roi_loss", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "one_stage_loss", "[", "'loss'", "]", ")", ")", ":", "\n", "            ", "one_stage_loss", "[", "'roi_reg_loss'", "]", ".", "append", "(", "tb_dict", "[", "'rcnn_loss_reg'", "]", ")", "\n", "one_stage_loss", "[", "'roi_cls_loss'", "]", ".", "append", "(", "tb_dict", "[", "'rcnn_loss_cls'", "]", ")", "\n", "\n", "", "return", "one_stage_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.two_stage.TwoStageDetector.get_box_center": [[49, 77], ["centers.append", "len", "det3d.core.bbox.box_torch_ops.center_to_corner_box2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "centers.append", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box2d"], ["", "def", "get_box_center", "(", "self", ",", "boxes", ")", ":", "\n", "# box [List]", "\n", "        ", "centers", "=", "[", "]", "\n", "for", "box", "in", "boxes", ":", "\n", "            ", "if", "self", ".", "num_point", "==", "1", "or", "len", "(", "box", "[", "'box3d_lidar'", "]", ")", "==", "0", ":", "\n", "                ", "centers", ".", "append", "(", "box", "[", "'box3d_lidar'", "]", "[", ":", ",", ":", "3", "]", ")", "\n", "\n", "", "elif", "self", ".", "num_point", "==", "5", ":", "\n", "                ", "center2d", "=", "box", "[", "'box3d_lidar'", "]", "[", ":", ",", ":", "2", "]", "\n", "height", "=", "box", "[", "'box3d_lidar'", "]", "[", ":", ",", "2", ":", "3", "]", "\n", "dim2d", "=", "box", "[", "'box3d_lidar'", "]", "[", ":", ",", "3", ":", "5", "]", "\n", "rotation_y", "=", "box", "[", "'box3d_lidar'", "]", "[", ":", ",", "-", "1", "]", "\n", "\n", "corners", "=", "box_torch_ops", ".", "center_to_corner_box2d", "(", "center2d", ",", "dim2d", ",", "rotation_y", ")", "\n", "\n", "front_middle", "=", "torch", ".", "cat", "(", "[", "(", "corners", "[", ":", ",", "0", "]", "+", "corners", "[", ":", ",", "1", "]", ")", "/", "2", ",", "height", "]", ",", "dim", "=", "-", "1", ")", "\n", "back_middle", "=", "torch", ".", "cat", "(", "[", "(", "corners", "[", ":", ",", "2", "]", "+", "corners", "[", ":", ",", "3", "]", ")", "/", "2", ",", "height", "]", ",", "dim", "=", "-", "1", ")", "\n", "left_middle", "=", "torch", ".", "cat", "(", "[", "(", "corners", "[", ":", ",", "0", "]", "+", "corners", "[", ":", ",", "3", "]", ")", "/", "2", ",", "height", "]", ",", "dim", "=", "-", "1", ")", "\n", "right_middle", "=", "torch", ".", "cat", "(", "[", "(", "corners", "[", ":", ",", "1", "]", "+", "corners", "[", ":", ",", "2", "]", ")", "/", "2", ",", "height", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "points", "=", "torch", ".", "cat", "(", "[", "box", "[", "'box3d_lidar'", "]", "[", ":", ",", ":", "3", "]", ",", "front_middle", ",", "back_middle", ",", "left_middle", ",", "right_middle", "]", ",", "dim", "=", "0", ")", "\n", "\n", "centers", ".", "append", "(", "points", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "", "return", "centers", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.two_stage.TwoStageDetector.reorder_first_stage_pred_and_feature": [[78, 120], ["len", "sum", "[].new_zeros", "[].new_zeros", "[].new_zeros", "[].new_zeros", "range", "torch.cat"], "methods", ["None"], ["", "def", "reorder_first_stage_pred_and_feature", "(", "self", ",", "first_pred", ",", "example", ",", "features", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "first_pred", ")", "\n", "box_length", "=", "first_pred", "[", "0", "]", "[", "'box3d_lidar'", "]", ".", "shape", "[", "1", "]", "\n", "feature_vector_length", "=", "sum", "(", "[", "feat", "[", "0", "]", ".", "shape", "[", "-", "1", "]", "for", "feat", "in", "features", "]", ")", "\n", "\n", "rois", "=", "first_pred", "[", "0", "]", "[", "'box3d_lidar'", "]", ".", "new_zeros", "(", "(", "batch_size", ",", "\n", "self", ".", "NMS_POST_MAXSIZE", ",", "box_length", "\n", ")", ")", "\n", "roi_scores", "=", "first_pred", "[", "0", "]", "[", "'scores'", "]", ".", "new_zeros", "(", "(", "batch_size", ",", "\n", "self", ".", "NMS_POST_MAXSIZE", "\n", ")", ")", "\n", "roi_labels", "=", "first_pred", "[", "0", "]", "[", "'label_preds'", "]", ".", "new_zeros", "(", "(", "batch_size", ",", "\n", "self", ".", "NMS_POST_MAXSIZE", ")", ",", "dtype", "=", "torch", ".", "long", "\n", ")", "\n", "roi_features", "=", "features", "[", "0", "]", "[", "0", "]", ".", "new_zeros", "(", "(", "batch_size", ",", "\n", "self", ".", "NMS_POST_MAXSIZE", ",", "feature_vector_length", "\n", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "num_obj", "=", "features", "[", "0", "]", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "# basically move rotation to position 6, so now the box is 7 + C . C is 2 for nuscenes to", "\n", "# include velocity target", "\n", "\n", "box_preds", "=", "first_pred", "[", "i", "]", "[", "'box3d_lidar'", "]", "\n", "\n", "if", "self", ".", "roi_head", ".", "code_size", "==", "9", ":", "\n", "# x, y, z, w, l, h, rotation_y, velocity_x, velocity_y", "\n", "                ", "box_preds", "=", "box_preds", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "8", ",", "6", ",", "7", "]", "]", "\n", "\n", "", "rois", "[", "i", ",", ":", "num_obj", "]", "=", "box_preds", "\n", "roi_labels", "[", "i", ",", ":", "num_obj", "]", "=", "first_pred", "[", "i", "]", "[", "'label_preds'", "]", "+", "1", "\n", "roi_scores", "[", "i", ",", ":", "num_obj", "]", "=", "first_pred", "[", "i", "]", "[", "'scores'", "]", "\n", "roi_features", "[", "i", ",", ":", "num_obj", "]", "=", "torch", ".", "cat", "(", "[", "feat", "[", "i", "]", "for", "feat", "in", "features", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "example", "[", "'rois'", "]", "=", "rois", "\n", "example", "[", "'roi_labels'", "]", "=", "roi_labels", "\n", "example", "[", "'roi_scores'", "]", "=", "roi_scores", "\n", "example", "[", "'roi_features'", "]", "=", "roi_features", "\n", "\n", "example", "[", "'has_class_labels'", "]", "=", "True", "\n", "\n", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.two_stage.TwoStageDetector.post_process": [[121, 152], ["range", "torch.sqrt", "pred_dicts.append", "torch.sigmoid().reshape", "[].reshape", "torch.sigmoid"], "methods", ["None"], ["", "def", "post_process", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "pred_dicts", "=", "[", "]", "\n", "\n", "for", "index", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "box_preds", "=", "batch_dict", "[", "'batch_box_preds'", "]", "[", "index", "]", "\n", "cls_preds", "=", "batch_dict", "[", "'batch_cls_preds'", "]", "[", "index", "]", "# this is the predicted iou ", "\n", "label_preds", "=", "batch_dict", "[", "'roi_labels'", "]", "[", "index", "]", "\n", "\n", "if", "box_preds", ".", "shape", "[", "-", "1", "]", "==", "9", ":", "\n", "# move rotation to the end (the create submission file will take elements from 0:6 and -1) ", "\n", "                ", "box_preds", "=", "box_preds", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "7", ",", "8", ",", "6", "]", "]", "\n", "\n", "", "scores", "=", "torch", ".", "sqrt", "(", "torch", ".", "sigmoid", "(", "cls_preds", ")", ".", "reshape", "(", "-", "1", ")", "*", "batch_dict", "[", "'roi_scores'", "]", "[", "index", "]", ".", "reshape", "(", "-", "1", ")", ")", "\n", "mask", "=", "(", "label_preds", "!=", "0", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "box_preds", "=", "box_preds", "[", "mask", ",", ":", "]", "\n", "scores", "=", "scores", "[", "mask", "]", "\n", "labels", "=", "label_preds", "[", "mask", "]", "-", "1", "\n", "\n", "# currently don't need nms ", "\n", "pred_dict", "=", "{", "\n", "'box3d_lidar'", ":", "box_preds", ",", "\n", "'scores'", ":", "scores", ",", "\n", "'label_preds'", ":", "labels", ",", "\n", "\"metadata\"", ":", "batch_dict", "[", "\"metadata\"", "]", "[", "index", "]", "\n", "}", "\n", "\n", "pred_dicts", ".", "append", "(", "pred_dict", ")", "\n", "\n", "", "return", "pred_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.two_stage.TwoStageDetector.forward": [[154, 194], ["two_stage.TwoStageDetector.single_det.forward_two_stage", "bev_feature.permute().contiguous", "two_stage.TwoStageDetector.get_box_center", "two_stage.TwoStageDetector.reorder_first_stage_pred_and_feature", "two_stage.TwoStageDetector.roi_head", "len", "module.forward", "features.append", "two_stage.TwoStageDetector.roi_head.get_loss", "two_stage.TwoStageDetector.combine_loss", "two_stage.TwoStageDetector.post_process", "len", "bev_feature.permute"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.voxelnet.VoxelNet.forward_two_stage", "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.two_stage.TwoStageDetector.get_box_center", "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.two_stage.TwoStageDetector.reorder_first_stage_pred_and_feature", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.alexnet.AlexNet.forward", "home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head_template.RoIHeadTemplate.get_loss", "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.two_stage.TwoStageDetector.combine_loss", "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.two_stage.TwoStageDetector.post_process"], ["", "def", "forward", "(", "self", ",", "example", ",", "return_loss", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "out", "=", "self", ".", "single_det", ".", "forward_two_stage", "(", "example", ",", "\n", "return_loss", ",", "**", "kwargs", ")", "\n", "if", "len", "(", "out", ")", "==", "4", ":", "\n", "            ", "one_stage_pred", ",", "bev_feature", ",", "voxel_feature", ",", "one_stage_loss", "=", "out", "\n", "example", "[", "'voxel_feature'", "]", "=", "voxel_feature", "\n", "", "elif", "len", "(", "out", ")", "==", "3", ":", "\n", "            ", "one_stage_pred", ",", "bev_feature", ",", "one_stage_loss", "=", "out", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# N C H W -> N H W C ", "\n", "", "example", "[", "'bev_feature'", "]", "=", "bev_feature", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "centers_vehicle_frame", "=", "self", ".", "get_box_center", "(", "one_stage_pred", ")", "\n", "\n", "if", "self", ".", "roi_head", ".", "code_size", "==", "7", "and", "return_loss", "is", "True", ":", "\n", "# drop velocity ", "\n", "            ", "example", "[", "'gt_boxes_and_cls'", "]", "=", "example", "[", "'gt_boxes_and_cls'", "]", "[", ":", ",", ":", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "-", "1", "]", "]", "\n", "\n", "", "features", "=", "[", "]", "\n", "\n", "for", "module", "in", "self", ".", "second_stage", ":", "\n", "            ", "feature", "=", "module", ".", "forward", "(", "example", ",", "centers_vehicle_frame", ",", "self", ".", "num_point", ")", "\n", "features", ".", "append", "(", "feature", ")", "\n", "# feature is two level list ", "\n", "# first level is number of two stage information streams", "\n", "# second level is batch ", "\n", "\n", "", "example", "=", "self", ".", "reorder_first_stage_pred_and_feature", "(", "first_pred", "=", "one_stage_pred", ",", "example", "=", "example", ",", "features", "=", "features", ")", "\n", "\n", "# final classification / regression ", "\n", "batch_dict", "=", "self", ".", "roi_head", "(", "example", ",", "training", "=", "return_loss", ")", "\n", "\n", "if", "return_loss", ":", "\n", "            ", "roi_loss", ",", "tb_dict", "=", "self", ".", "roi_head", ".", "get_loss", "(", ")", "\n", "\n", "return", "self", ".", "combine_loss", "(", "one_stage_loss", ",", "roi_loss", ",", "tb_dict", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "post_process", "(", "batch_dict", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.single_stage.SingleStageDetector.__init__": [[12, 32], ["base.BaseDetector.__init__", "builder.build_reader", "builder.build_backbone", "builder.build_head", "single_stage.SingleStageDetector.init_weights", "builder.build_neck"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_reader", "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_backbone", "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_head", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.alexnet.AlexNet.init_weights", "home.repos.pwc.inspect_result.neeharperi_futuredet.models.builder.build_neck"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "reader", ",", "\n", "backbone", ",", "\n", "neck", "=", "None", ",", "\n", "bbox_head", "=", "None", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "SingleStageDetector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reader", "=", "builder", ".", "build_reader", "(", "reader", ")", "\n", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "if", "neck", "is", "not", "None", ":", "\n", "            ", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "\n", "", "self", ".", "bbox_head", "=", "builder", ".", "build_head", "(", "bbox_head", ")", "\n", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "\n", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.single_stage.SingleStageDetector.init_weights": [[33, 41], ["det3d.torchie.trainer.load_checkpoint", "print", "print"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_checkpoint"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "pretrained", "is", "None", ":", "\n", "            ", "return", "\n", "", "try", ":", "\n", "            ", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"init weight from {}\"", ".", "format", "(", "pretrained", ")", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"no pretrained model at {}\"", ".", "format", "(", "pretrained", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.single_stage.SingleStageDetector.extract_feat": [[42, 48], ["single_stage.SingleStageDetector.reader", "single_stage.SingleStageDetector.backbone", "single_stage.SingleStageDetector.neck"], "methods", ["None"], ["", "", "def", "extract_feat", "(", "self", ",", "data", ")", ":", "\n", "        ", "input_features", "=", "self", ".", "reader", "(", "data", ")", "\n", "x", "=", "self", ".", "backbone", "(", "input_features", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.single_stage.SingleStageDetector.aug_test": [[49, 51], ["None"], "methods", ["None"], ["", "def", "aug_test", "(", "self", ",", "example", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.single_stage.SingleStageDetector.forward": [[52, 54], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "example", ",", "return_loss", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.single_stage.SingleStageDetector.predict": [[55, 57], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "example", ",", "preds_dicts", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.single_stage.SingleStageDetector.freeze": [[58, 63], ["single_stage.SingleStageDetector.parameters", "utils.finetune_utils.FrozenBatchNorm2d.convert_frozen_batchnorm"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.finetune_utils.FrozenBatchNorm2d.convert_frozen_batchnorm"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "FrozenBatchNorm2d", ".", "convert_frozen_batchnorm", "(", "self", ")", "\n", "return", "self", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.point_pillars.PointPillars.__init__": [[7, 19], ["single_stage.SingleStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "reader", ",", "\n", "backbone", ",", "\n", "neck", ",", "\n", "bbox_head", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "PointPillars", ",", "self", ")", ".", "__init__", "(", "\n", "reader", ",", "backbone", ",", "neck", ",", "bbox_head", ",", "train_cfg", ",", "test_cfg", ",", "pretrained", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.point_pillars.PointPillars.extract_feat": [[21, 31], ["point_pillars.PointPillars.reader", "point_pillars.PointPillars.backbone", "point_pillars.PointPillars.neck"], "methods", ["None"], ["", "def", "extract_feat", "(", "self", ",", "data", ")", ":", "\n", "        ", "input_features", "=", "self", ".", "reader", "(", "\n", "data", "[", "\"features\"", "]", ",", "data", "[", "\"num_voxels\"", "]", ",", "data", "[", "\"coors\"", "]", "\n", ")", "\n", "x", "=", "self", ".", "backbone", "(", "\n", "input_features", ",", "data", "[", "\"coors\"", "]", ",", "data", "[", "\"batch_size\"", "]", ",", "data", "[", "\"input_shape\"", "]", "\n", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.point_pillars.PointPillars.forward": [[32, 55], ["len", "dict", "point_pillars.PointPillars.extract_feat", "point_pillars.PointPillars.bbox_head", "point_pillars.PointPillars.bbox_head.loss", "point_pillars.PointPillars.bbox_head.predict"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.voxelnet.VoxelNet.extract_feat", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.CenterHead.loss", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.CenterHead.predict"], ["", "def", "forward", "(", "self", ",", "example", ",", "return_loss", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "voxels", "=", "example", "[", "\"voxels\"", "]", "\n", "coordinates", "=", "example", "[", "\"coordinates\"", "]", "\n", "num_points_in_voxel", "=", "example", "[", "\"num_points\"", "]", "\n", "num_voxels", "=", "example", "[", "\"num_voxels\"", "]", "\n", "\n", "batch_size", "=", "len", "(", "num_voxels", ")", "\n", "\n", "data", "=", "dict", "(", "\n", "features", "=", "voxels", ",", "\n", "num_voxels", "=", "num_points_in_voxel", ",", "\n", "coors", "=", "coordinates", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "input_shape", "=", "example", "[", "\"shape\"", "]", "[", "0", "]", ",", "\n", ")", "\n", "\n", "x", "=", "self", ".", "extract_feat", "(", "data", ")", "\n", "preds", "=", "self", ".", "bbox_head", "(", "x", ")", "\n", "\n", "if", "return_loss", ":", "\n", "            ", "return", "self", ".", "bbox_head", ".", "loss", "(", "example", ",", "preds", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "bbox_head", ".", "predict", "(", "example", ",", "preds", ",", "self", ".", "test_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.point_pillars.PointPillars.forward_two_stage": [[56, 91], ["len", "dict", "point_pillars.PointPillars.extract_feat", "point_pillars.PointPillars.bbox_head", "point_pillars.PointPillars.bbox_head.predict", "pred.items", "new_preds.append", "v.detach", "point_pillars.PointPillars.bbox_head.loss"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.voxelnet.VoxelNet.extract_feat", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.CenterHead.predict", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.CenterHead.loss"], ["", "", "def", "forward_two_stage", "(", "self", ",", "example", ",", "return_loss", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "voxels", "=", "example", "[", "\"voxels\"", "]", "\n", "coordinates", "=", "example", "[", "\"coordinates\"", "]", "\n", "num_points_in_voxel", "=", "example", "[", "\"num_points\"", "]", "\n", "num_voxels", "=", "example", "[", "\"num_voxels\"", "]", "\n", "\n", "batch_size", "=", "len", "(", "num_voxels", ")", "\n", "\n", "data", "=", "dict", "(", "\n", "features", "=", "voxels", ",", "\n", "num_voxels", "=", "num_points_in_voxel", ",", "\n", "coors", "=", "coordinates", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "input_shape", "=", "example", "[", "\"shape\"", "]", "[", "0", "]", ",", "\n", ")", "\n", "\n", "x", "=", "self", ".", "extract_feat", "(", "data", ")", "\n", "bev_feature", "=", "x", "\n", "preds", "=", "self", ".", "bbox_head", "(", "x", ")", "\n", "\n", "# manual deepcopy ...", "\n", "new_preds", "=", "[", "]", "\n", "for", "pred", "in", "preds", ":", "\n", "            ", "new_pred", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "pred", ".", "items", "(", ")", ":", "\n", "                ", "new_pred", "[", "k", "]", "=", "v", ".", "detach", "(", ")", "\n", "\n", "", "new_preds", ".", "append", "(", "new_pred", ")", "\n", "\n", "", "boxes", "=", "self", ".", "bbox_head", ".", "predict", "(", "example", ",", "new_preds", ",", "self", ".", "test_cfg", ")", "\n", "\n", "if", "return_loss", ":", "\n", "            ", "return", "boxes", ",", "bev_feature", ",", "self", ".", "bbox_head", ".", "loss", "(", "example", ",", "preds", ")", "\n", "", "else", ":", "\n", "            ", "return", "boxes", ",", "bev_feature", ",", "None", "", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.voxelnet.VoxelNet.__init__": [[9, 21], ["single_stage.SingleStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "reader", ",", "\n", "backbone", ",", "\n", "neck", ",", "\n", "bbox_head", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "VoxelNet", ",", "self", ")", ".", "__init__", "(", "\n", "reader", ",", "backbone", ",", "neck", ",", "bbox_head", ",", "train_cfg", ",", "test_cfg", ",", "pretrained", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.voxelnet.VoxelNet.extract_feat": [[23, 32], ["voxelnet.VoxelNet.reader", "voxelnet.VoxelNet.backbone", "voxelnet.VoxelNet.neck"], "methods", ["None"], ["", "def", "extract_feat", "(", "self", ",", "data", ")", ":", "\n", "        ", "input_features", "=", "self", ".", "reader", "(", "data", "[", "\"features\"", "]", ",", "data", "[", "\"num_voxels\"", "]", ")", "\n", "x", ",", "voxel_feature", "=", "self", ".", "backbone", "(", "\n", "input_features", ",", "data", "[", "\"coors\"", "]", ",", "data", "[", "\"batch_size\"", "]", ",", "data", "[", "\"input_shape\"", "]", "\n", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "\n", "", "return", "x", ",", "voxel_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.voxelnet.VoxelNet.forward": [[33, 57], ["len", "dict", "torch.stack().float", "voxelnet.VoxelNet.extract_feat", "voxelnet.VoxelNet.bbox_head", "voxelnet.VoxelNet.bbox_head.loss", "voxelnet.VoxelNet.bbox_head.predict", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.voxelnet.VoxelNet.extract_feat", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.CenterHead.loss", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.CenterHead.predict", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack"], ["", "def", "forward", "(", "self", ",", "example", ",", "return_loss", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "voxels", "=", "example", "[", "\"voxels\"", "]", "\n", "coordinates", "=", "example", "[", "\"coordinates\"", "]", "\n", "num_points_in_voxel", "=", "example", "[", "\"num_points\"", "]", "\n", "num_voxels", "=", "example", "[", "\"num_voxels\"", "]", "\n", "batch_size", "=", "len", "(", "num_voxels", ")", "\n", "\n", "data", "=", "dict", "(", "\n", "features", "=", "voxels", ",", "\n", "num_voxels", "=", "num_points_in_voxel", ",", "\n", "coors", "=", "coordinates", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "input_shape", "=", "example", "[", "\"shape\"", "]", "[", "0", "]", ",", "\n", ")", "\n", "\n", "bev_map", "=", "torch", ".", "stack", "(", "example", "[", "\"bev_map\"", "]", ",", "dim", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "x", ",", "_", "=", "self", ".", "extract_feat", "(", "data", ")", "\n", "preds", "=", "self", ".", "bbox_head", "(", "x", ",", "bev_map", ")", "\n", "\n", "if", "return_loss", ":", "\n", "            ", "return", "self", ".", "bbox_head", ".", "loss", "(", "example", ",", "preds", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "bbox_head", ".", "predict", "(", "example", ",", "preds", ",", "self", ".", "test_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.voxelnet.VoxelNet.forward_two_stage": [[58, 93], ["len", "dict", "voxelnet.VoxelNet.extract_feat", "voxelnet.VoxelNet.bbox_head", "voxelnet.VoxelNet.bbox_head.predict", "pred.items", "new_preds.append", "v.detach", "voxelnet.VoxelNet.bbox_head.loss"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.detectors.voxelnet.VoxelNet.extract_feat", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.CenterHead.predict", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.CenterHead.loss"], ["", "", "def", "forward_two_stage", "(", "self", ",", "example", ",", "return_loss", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "voxels", "=", "example", "[", "\"voxels\"", "]", "\n", "coordinates", "=", "example", "[", "\"coordinates\"", "]", "\n", "num_points_in_voxel", "=", "example", "[", "\"num_points\"", "]", "\n", "num_voxels", "=", "example", "[", "\"num_voxels\"", "]", "\n", "\n", "batch_size", "=", "len", "(", "num_voxels", ")", "\n", "\n", "data", "=", "dict", "(", "\n", "features", "=", "voxels", ",", "\n", "num_voxels", "=", "num_points_in_voxel", ",", "\n", "coors", "=", "coordinates", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "input_shape", "=", "example", "[", "\"shape\"", "]", "[", "0", "]", ",", "\n", ")", "\n", "\n", "x", ",", "voxel_feature", "=", "self", ".", "extract_feat", "(", "data", ")", "\n", "bev_feature", "=", "x", "\n", "preds", "=", "self", ".", "bbox_head", "(", "x", ")", "\n", "\n", "# manual deepcopy ...", "\n", "new_preds", "=", "[", "]", "\n", "for", "pred", "in", "preds", ":", "\n", "            ", "new_pred", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "pred", ".", "items", "(", ")", ":", "\n", "                ", "new_pred", "[", "k", "]", "=", "v", ".", "detach", "(", ")", "\n", "\n", "", "new_preds", ".", "append", "(", "new_pred", ")", "\n", "\n", "", "boxes", "=", "self", ".", "bbox_head", ".", "predict", "(", "example", ",", "new_preds", ",", "self", ".", "test_cfg", ")", "\n", "\n", "if", "return_loss", ":", "\n", "            ", "return", "boxes", ",", "bev_feature", ",", "voxel_feature", ",", "self", ".", "bbox_head", ".", "loss", "(", "example", ",", "preds", ")", "\n", "", "else", ":", "\n", "            ", "return", "boxes", ",", "bev_feature", ",", "voxel_feature", ",", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head_template.RoIHeadTemplate.__init__": [[19, 26], ["torch.Module.__init__", "target_assigner.proposal_target_layer.ProposalTargetLayer"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "model_cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "proposal_target_layer", "=", "ProposalTargetLayer", "(", "roi_sampler_cfg", "=", "self", ".", "model_cfg", ".", "TARGET_CONFIG", ")", "\n", "\n", "self", ".", "forward_ret_dict", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head_template.RoIHeadTemplate.make_fc_layers": [[27, 42], ["range", "torch.Sequential.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fc_list.__len__", "torch.Sequential.extend", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Sequential.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.DistributedGroupSampler.__len__"], ["", "def", "make_fc_layers", "(", "self", ",", "input_channels", ",", "output_channels", ",", "fc_list", ")", ":", "\n", "        ", "fc_layers", "=", "[", "]", "\n", "pre_channel", "=", "input_channels", "\n", "for", "k", "in", "range", "(", "0", ",", "fc_list", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "fc_layers", ".", "extend", "(", "[", "\n", "nn", ".", "Conv1d", "(", "pre_channel", ",", "fc_list", "[", "k", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "fc_list", "[", "k", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "pre_channel", "=", "fc_list", "[", "k", "]", "\n", "if", "self", ".", "model_cfg", ".", "DP_RATIO", ">=", "0", "and", "k", "==", "0", ":", "\n", "                ", "fc_layers", ".", "append", "(", "nn", ".", "Dropout", "(", "self", ".", "model_cfg", ".", "DP_RATIO", ")", ")", "\n", "", "", "fc_layers", ".", "append", "(", "nn", ".", "Conv1d", "(", "pre_channel", ",", "output_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ")", "\n", "fc_layers", "=", "nn", ".", "Sequential", "(", "*", "fc_layers", ")", "\n", "return", "fc_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head_template.RoIHeadTemplate.assign_targets": [[43, 87], ["det3d.core.bbox.box_torch_ops.rotate_points_along_z().view.clone().detach", "roi_head_template.limit_period", "det3d.core.bbox.box_torch_ops.rotate_points_along_z().view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "roi_head_template.RoIHeadTemplate.proposal_target_layer.forward", "det3d.core.bbox.box_torch_ops.rotate_points_along_z().view.clone", "det3d.core.bbox.box_torch_ops.rotate_points_along_z", "det3d.core.bbox.box_torch_ops.rotate_points_along_z().view.view", "limit_period.view"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.limit_period", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.alexnet.AlexNet.forward", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.rotate_points_along_z"], ["", "def", "assign_targets", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "targets_dict", "=", "self", ".", "proposal_target_layer", ".", "forward", "(", "batch_dict", ")", "\n", "\n", "", "rois", "=", "targets_dict", "[", "'rois'", "]", "# (B, N, 7 + C)", "\n", "gt_of_rois", "=", "targets_dict", "[", "'gt_of_rois'", "]", "# (B, N, 7 + C + 1)", "\n", "targets_dict", "[", "'gt_of_rois_src'", "]", "=", "gt_of_rois", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "roi_ry", "=", "limit_period", "(", "rois", "[", ":", ",", ":", ",", "6", "]", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", "*", "2", ")", "\n", "\n", "gt_of_rois", "[", ":", ",", ":", ",", ":", "6", "]", "=", "gt_of_rois", "[", ":", ",", ":", ",", ":", "6", "]", "-", "rois", "[", ":", ",", ":", ",", ":", "6", "]", "\n", "gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "=", "gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "-", "roi_ry", "\n", "\n", "gt_of_rois", "=", "box_torch_ops", ".", "rotate_points_along_z", "(", "\n", "points", "=", "gt_of_rois", ".", "view", "(", "-", "1", ",", "1", ",", "gt_of_rois", ".", "shape", "[", "-", "1", "]", ")", ",", "angle", "=", "-", "roi_ry", ".", "view", "(", "-", "1", ")", "\n", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "gt_of_rois", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "if", "rois", ".", "shape", "[", "-", "1", "]", "==", "9", ":", "\n", "# rotate velocity", "\n", "            ", "gt_of_rois", "[", ":", ",", ":", ",", "7", ":", "-", "1", "]", "=", "gt_of_rois", "[", ":", ",", ":", ",", "7", ":", "-", "1", "]", "-", "rois", "[", ":", ",", ":", ",", "7", ":", "]", "\n", "\n", "\"\"\"\n            roi_vel = gt_of_rois[:, :, 7:-1]\n            roi_vel = torch.cat([roi_vel, torch.zeros([roi_vel.shape[0], roi_vel.shape[1], 1]).to(roi_vel)], dim=-1)\n\n            gt_of_rois[:, :, 7:-1] = box_torch_ops.rotate_points_along_z(\n                points=roi_vel.view(-1, 1, 3), angle=-roi_ry.view(-1)\n            ).view(batch_size, -1, 3)[..., :2]\n            \"\"\"", "\n", "\n", "# flip orientation if rois have opposite orientation", "\n", "", "heading_label", "=", "gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "%", "(", "2", "*", "np", ".", "pi", ")", "# 0 ~ 2pi", "\n", "opposite_flag", "=", "(", "heading_label", ">", "np", ".", "pi", "*", "0.5", ")", "&", "(", "heading_label", "<", "np", ".", "pi", "*", "1.5", ")", "\n", "heading_label", "[", "opposite_flag", "]", "=", "(", "heading_label", "[", "opposite_flag", "]", "+", "np", ".", "pi", ")", "%", "(", "2", "*", "np", ".", "pi", ")", "# (0 ~ pi/2, 3pi/2 ~ 2pi)", "\n", "flag", "=", "heading_label", ">", "np", ".", "pi", "\n", "heading_label", "[", "flag", "]", "=", "heading_label", "[", "flag", "]", "-", "np", ".", "pi", "*", "2", "# (-pi/2, pi/2)", "\n", "heading_label", "=", "torch", ".", "clamp", "(", "heading_label", ",", "min", "=", "-", "np", ".", "pi", "/", "2", ",", "max", "=", "np", ".", "pi", "/", "2", ")", "\n", "\n", "gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "=", "heading_label", "\n", "\n", "\n", "targets_dict", "[", "'gt_of_rois'", "]", "=", "gt_of_rois", "\n", "return", "targets_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head_template.RoIHeadTemplate.get_box_reg_layer_loss": [[88, 119], ["forward_ret_dict[].view", "fg_mask.long().sum().item", "gt_boxes3d_ct.view", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss.detach", "gt_boxes3d_ct.view", "fg_mask.long().sum", "rcnn_reg.view", "torch.l1_loss.new_tensor", "max", "fg_mask.long", "torch.l1_loss.view", "fg_mask.unsqueeze().float", "fg_mask.unsqueeze"], "methods", ["None"], ["", "def", "get_box_reg_layer_loss", "(", "self", ",", "forward_ret_dict", ")", ":", "\n", "        ", "loss_cfgs", "=", "self", ".", "model_cfg", ".", "LOSS_CONFIG", "\n", "code_size", "=", "forward_ret_dict", "[", "'rcnn_reg'", "]", ".", "shape", "[", "-", "1", "]", "\n", "reg_valid_mask", "=", "forward_ret_dict", "[", "'reg_valid_mask'", "]", ".", "view", "(", "-", "1", ")", "\n", "gt_boxes3d_ct", "=", "forward_ret_dict", "[", "'gt_of_rois'", "]", "[", "...", ",", "0", ":", "code_size", "]", "\n", "rcnn_reg", "=", "forward_ret_dict", "[", "'rcnn_reg'", "]", "# (rcnn_batch_size, C)", "\n", "rcnn_batch_size", "=", "gt_boxes3d_ct", ".", "view", "(", "-", "1", ",", "code_size", ")", ".", "shape", "[", "0", "]", "\n", "\n", "fg_mask", "=", "(", "reg_valid_mask", ">", "0", ")", "\n", "fg_sum", "=", "fg_mask", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "tb_dict", "=", "{", "}", "\n", "\n", "if", "loss_cfgs", ".", "REG_LOSS", "==", "'L1'", ":", "\n", "            ", "reg_targets", "=", "gt_boxes3d_ct", ".", "view", "(", "rcnn_batch_size", ",", "-", "1", ")", "\n", "rcnn_loss_reg", "=", "F", ".", "l1_loss", "(", "\n", "rcnn_reg", ".", "view", "(", "rcnn_batch_size", ",", "-", "1", ")", ",", "\n", "reg_targets", ",", "\n", "reduction", "=", "'none'", "\n", ")", "# [B, M, 7]", "\n", "\n", "rcnn_loss_reg", "=", "rcnn_loss_reg", "*", "rcnn_loss_reg", ".", "new_tensor", "(", "loss_cfgs", ".", "LOSS_WEIGHTS", "[", "'code_weights'", "]", ")", "\n", "\n", "rcnn_loss_reg", "=", "(", "rcnn_loss_reg", ".", "view", "(", "rcnn_batch_size", ",", "-", "1", ")", "*", "fg_mask", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "/", "max", "(", "fg_sum", ",", "1", ")", "\n", "rcnn_loss_reg", "=", "rcnn_loss_reg", "*", "loss_cfgs", ".", "LOSS_WEIGHTS", "[", "'rcnn_reg_weight'", "]", "\n", "tb_dict", "[", "'rcnn_loss_reg'", "]", "=", "rcnn_loss_reg", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "rcnn_loss_reg", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head_template.RoIHeadTemplate.get_box_cls_layer_loss": [[120, 139], ["forward_ret_dict[].view", "rcnn_cls.view", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "rcnn_loss_cls.detach", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "forward_ret_dict[].view.float", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "cls_valid_mask.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "cls_valid_mask.sum"], "methods", ["None"], ["", "def", "get_box_cls_layer_loss", "(", "self", ",", "forward_ret_dict", ")", ":", "\n", "        ", "loss_cfgs", "=", "self", ".", "model_cfg", ".", "LOSS_CONFIG", "\n", "rcnn_cls", "=", "forward_ret_dict", "[", "'rcnn_cls'", "]", "\n", "rcnn_cls_labels", "=", "forward_ret_dict", "[", "'rcnn_cls_labels'", "]", ".", "view", "(", "-", "1", ")", "\n", "if", "loss_cfgs", ".", "CLS_LOSS", "==", "'BinaryCrossEntropy'", ":", "\n", "            ", "rcnn_cls_flat", "=", "rcnn_cls", ".", "view", "(", "-", "1", ")", "\n", "batch_loss_cls", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "rcnn_cls_flat", ")", ",", "rcnn_cls_labels", ".", "float", "(", ")", ",", "reduction", "=", "'none'", ")", "\n", "cls_valid_mask", "=", "(", "rcnn_cls_labels", ">=", "0", ")", ".", "float", "(", ")", "\n", "rcnn_loss_cls", "=", "(", "batch_loss_cls", "*", "cls_valid_mask", ")", ".", "sum", "(", ")", "/", "torch", ".", "clamp", "(", "cls_valid_mask", ".", "sum", "(", ")", ",", "min", "=", "1.0", ")", "\n", "", "elif", "loss_cfgs", ".", "CLS_LOSS", "==", "'CrossEntropy'", ":", "\n", "            ", "batch_loss_cls", "=", "F", ".", "cross_entropy", "(", "rcnn_cls", ",", "rcnn_cls_labels", ",", "reduction", "=", "'none'", ",", "ignore_index", "=", "-", "1", ")", "\n", "cls_valid_mask", "=", "(", "rcnn_cls_labels", ">=", "0", ")", ".", "float", "(", ")", "\n", "rcnn_loss_cls", "=", "(", "batch_loss_cls", "*", "cls_valid_mask", ")", ".", "sum", "(", ")", "/", "torch", ".", "clamp", "(", "cls_valid_mask", ".", "sum", "(", ")", ",", "min", "=", "1.0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "rcnn_loss_cls", "=", "rcnn_loss_cls", "*", "loss_cfgs", ".", "LOSS_WEIGHTS", "[", "'rcnn_cls_weight'", "]", "\n", "tb_dict", "=", "{", "'rcnn_loss_cls'", ":", "rcnn_loss_cls", ".", "detach", "(", ")", "}", "\n", "return", "rcnn_loss_cls", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head_template.RoIHeadTemplate.get_loss": [[140, 152], ["roi_head_template.RoIHeadTemplate.get_box_cls_layer_loss", "tb_dict.update", "roi_head_template.RoIHeadTemplate.get_box_reg_layer_loss", "tb_dict.update", "rcnn_loss.item"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head_template.RoIHeadTemplate.get_box_cls_layer_loss", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head_template.RoIHeadTemplate.get_box_reg_layer_loss", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update"], ["", "def", "get_loss", "(", "self", ",", "tb_dict", "=", "None", ")", ":", "\n", "        ", "tb_dict", "=", "{", "}", "if", "tb_dict", "is", "None", "else", "tb_dict", "\n", "rcnn_loss", "=", "0", "\n", "rcnn_loss_cls", ",", "cls_tb_dict", "=", "self", ".", "get_box_cls_layer_loss", "(", "self", ".", "forward_ret_dict", ")", "\n", "rcnn_loss", "+=", "rcnn_loss_cls", "\n", "tb_dict", ".", "update", "(", "cls_tb_dict", ")", "\n", "\n", "rcnn_loss_reg", ",", "reg_tb_dict", "=", "self", ".", "get_box_reg_layer_loss", "(", "self", ".", "forward_ret_dict", ")", "\n", "rcnn_loss", "+=", "rcnn_loss_reg", "\n", "tb_dict", ".", "update", "(", "reg_tb_dict", ")", "\n", "tb_dict", "[", "'rcnn_loss'", "]", "=", "rcnn_loss", ".", "item", "(", ")", "\n", "return", "rcnn_loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head_template.RoIHeadTemplate.generate_predicted_boxes": [[153, 184], ["cls_preds.view", "box_preds.view", "rois[].view", "rois[].view", "rois.clone().detach", "det3d.core.bbox.box_torch_ops.rotate_points_along_z().squeeze", "batch_box_preds.view.view.view", "rois.clone", "det3d.core.bbox.box_torch_ops.rotate_points_along_z", "batch_box_preds.view.view.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.rotate_points_along_z"], ["", "def", "generate_predicted_boxes", "(", "self", ",", "batch_size", ",", "rois", ",", "cls_preds", ",", "box_preds", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_size:\n            rois: (B, N, 7)\n            cls_preds: (BN, num_class)\n            box_preds: (BN, code_size)\n\n        Returns:\n\n        \"\"\"", "\n", "code_size", "=", "box_preds", ".", "shape", "[", "-", "1", "]", "\n", "# batch_cls_preds: (B, N, num_class or 1)", "\n", "batch_cls_preds", "=", "cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "cls_preds", ".", "shape", "[", "-", "1", "]", ")", "\n", "batch_box_preds", "=", "box_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "code_size", ")", "\n", "\n", "roi_ry", "=", "rois", "[", ":", ",", ":", ",", "6", "]", ".", "view", "(", "-", "1", ")", "\n", "roi_xyz", "=", "rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "\n", "local_rois", "=", "rois", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "local_rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", "=", "0", "\n", "\n", "batch_box_preds", "=", "(", "batch_box_preds", "+", "local_rois", ")", ".", "view", "(", "-", "1", ",", "code_size", ")", "\n", "batch_box_preds", "=", "box_torch_ops", ".", "rotate_points_along_z", "(", "\n", "batch_box_preds", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "roi_ry", "\n", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n", "batch_box_preds", "[", ":", ",", "0", ":", "3", "]", "+=", "roi_xyz", "\n", "batch_box_preds", "=", "batch_box_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "code_size", ")", "\n", "\n", "return", "batch_cls_preds", ",", "batch_box_preds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head_template.limit_period": [[14, 16], ["torch.floor", "torch.floor", "torch.floor"], "function", ["None"], ["def", "limit_period", "(", "val", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", ")", ":", "\n", "    ", "return", "val", "-", "torch", ".", "floor", "(", "val", "/", "period", "+", "offset", ")", "*", "period", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head.RoIHead.__init__": [[18, 49], ["roi_head_template.RoIHeadTemplate.__init__", "range", "torch.Sequential", "roi_head.RoIHead.make_fc_layers", "roi_head.RoIHead.make_fc_layers", "roi_head.RoIHead.init_weights", "roi_head.RoIHead.model_cfg.SHARED_FC.__len__", "shared_fc_list.extend", "shared_fc_list.append", "torch.Conv1d", "torch.BatchNorm1d", "torch.ReLU", "torch.Dropout", "roi_head.RoIHead.model_cfg.SHARED_FC.__len__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head_template.RoIHeadTemplate.make_fc_layers", "home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head_template.RoIHeadTemplate.make_fc_layers", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.alexnet.AlexNet.init_weights", "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.DistributedGroupSampler.__len__", "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.DistributedGroupSampler.__len__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "model_cfg", ",", "num_class", "=", "1", ",", "code_size", "=", "7", ",", "test_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_class", "=", "num_class", ",", "model_cfg", "=", "model_cfg", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "self", ".", "code_size", "=", "code_size", "\n", "\n", "pre_channel", "=", "input_channels", "\n", "\n", "shared_fc_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "model_cfg", ".", "SHARED_FC", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "shared_fc_list", ".", "extend", "(", "[", "\n", "nn", ".", "Conv1d", "(", "pre_channel", ",", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "pre_channel", "=", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", "\n", "\n", "if", "k", "!=", "self", ".", "model_cfg", ".", "SHARED_FC", ".", "__len__", "(", ")", "-", "1", "and", "self", ".", "model_cfg", ".", "DP_RATIO", ">", "0", ":", "\n", "                ", "shared_fc_list", ".", "append", "(", "nn", ".", "Dropout", "(", "self", ".", "model_cfg", ".", "DP_RATIO", ")", ")", "\n", "\n", "", "", "self", ".", "shared_fc_layer", "=", "nn", ".", "Sequential", "(", "*", "shared_fc_list", ")", "\n", "\n", "self", ".", "cls_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "input_channels", "=", "pre_channel", ",", "output_channels", "=", "self", ".", "num_class", ",", "fc_list", "=", "self", ".", "model_cfg", ".", "CLS_FC", "\n", ")", "\n", "self", ".", "reg_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "input_channels", "=", "pre_channel", ",", "\n", "output_channels", "=", "code_size", ",", "\n", "fc_list", "=", "self", ".", "model_cfg", ".", "REG_FC", "\n", ")", "\n", "self", ".", "init_weights", "(", "weight_init", "=", "'xavier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head.RoIHead.init_weights": [[50, 69], ["roi_head.RoIHead.modules", "torch.init.normal_", "isinstance", "isinstance", "init_func", "init_func", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "weight_init", "=", "'xavier'", ")", ":", "\n", "        ", "if", "weight_init", "==", "'kaiming'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "kaiming_normal_", "\n", "", "elif", "weight_init", "==", "'xavier'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "xavier_normal_", "\n", "", "elif", "weight_init", "==", "'normal'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "normal_", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", ":", "\n", "                ", "if", "weight_init", "==", "'normal'", ":", "\n", "                    ", "init_func", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "", "else", ":", "\n", "                    ", "init_func", "(", "m", ".", "weight", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "", "nn", ".", "init", ".", "normal_", "(", "self", ".", "reg_layers", "[", "-", "1", "]", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head.RoIHead.forward": [[70, 107], ["len", "batch_dict[].reshape().contiguous", "pooled_features.permute().contiguous.permute().contiguous.permute().contiguous", "roi_head.RoIHead.shared_fc_layer", "roi_head.RoIHead.cls_layers().transpose().contiguous().squeeze", "roi_head.RoIHead.reg_layers().transpose().contiguous().squeeze", "roi_head.RoIHead.assign_targets", "pooled_features.permute().contiguous.permute().contiguous.view", "roi_head.RoIHead.generate_predicted_boxes", "batch_dict[].reshape", "pooled_features.permute().contiguous.permute().contiguous.permute", "roi_head.RoIHead.cls_layers().transpose().contiguous", "roi_head.RoIHead.reg_layers().transpose().contiguous", "roi_head.RoIHead.cls_layers().transpose", "roi_head.RoIHead.reg_layers().transpose", "roi_head.RoIHead.cls_layers", "roi_head.RoIHead.reg_layers"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head_template.RoIHeadTemplate.assign_targets", "home.repos.pwc.inspect_result.neeharperi_futuredet.roi_heads.roi_head_template.RoIHeadTemplate.generate_predicted_boxes"], ["", "def", "forward", "(", "self", ",", "batch_dict", ",", "training", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param input_data: input dict\n        :return:\n        \"\"\"", "\n", "batch_dict", "[", "'batch_size'", "]", "=", "len", "(", "batch_dict", "[", "'rois'", "]", ")", "\n", "if", "training", ":", "\n", "            ", "targets_dict", "=", "self", ".", "assign_targets", "(", "batch_dict", ")", "\n", "batch_dict", "[", "'rois'", "]", "=", "targets_dict", "[", "'rois'", "]", "\n", "batch_dict", "[", "'roi_labels'", "]", "=", "targets_dict", "[", "'roi_labels'", "]", "\n", "batch_dict", "[", "'roi_features'", "]", "=", "targets_dict", "[", "'roi_features'", "]", "\n", "\n", "# RoI aware pooling", "\n", "", "pooled_features", "=", "batch_dict", "[", "'roi_features'", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "\n", "batch_dict", "[", "'roi_features'", "]", ".", "shape", "[", "-", "1", "]", ")", ".", "contiguous", "(", ")", "# (BxN, 1, C)", "\n", "\n", "batch_size_rcnn", "=", "pooled_features", ".", "shape", "[", "0", "]", "\n", "pooled_features", "=", "pooled_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (BxN, C, 1)", "\n", "\n", "shared_features", "=", "self", ".", "shared_fc_layer", "(", "pooled_features", ".", "view", "(", "batch_size_rcnn", ",", "-", "1", ",", "1", ")", ")", "\n", "rcnn_cls", "=", "self", ".", "cls_layers", "(", "shared_features", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "# (B, 1 or 2)", "\n", "rcnn_reg", "=", "self", ".", "reg_layers", "(", "shared_features", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "# (B, C)", "\n", "\n", "if", "not", "training", ":", "\n", "            ", "batch_cls_preds", ",", "batch_box_preds", "=", "self", ".", "generate_predicted_boxes", "(", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", ",", "rois", "=", "batch_dict", "[", "'rois'", "]", ",", "cls_preds", "=", "rcnn_cls", ",", "box_preds", "=", "rcnn_reg", "\n", ")", "\n", "batch_dict", "[", "'batch_cls_preds'", "]", "=", "batch_cls_preds", "\n", "batch_dict", "[", "'batch_box_preds'", "]", "=", "batch_box_preds", "\n", "batch_dict", "[", "'cls_preds_normalized'", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "targets_dict", "[", "'rcnn_cls'", "]", "=", "rcnn_cls", "\n", "targets_dict", "[", "'rcnn_reg'", "]", "=", "rcnn_reg", "\n", "\n", "self", ".", "forward_ret_dict", "=", "targets_dict", "\n", "\n", "", "return", "batch_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.target_assigner.proposal_target_layer.ProposalTargetLayer.__init__": [[15, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "roi_sampler_cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "roi_sampler_cfg", "=", "roi_sampler_cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.target_assigner.proposal_target_layer.ProposalTargetLayer.forward": [[19, 73], ["proposal_target_layer.ProposalTargetLayer.sample_rois_for_rcnn"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.target_assigner.proposal_target_layer.ProposalTargetLayer.sample_rois_for_rcnn"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                rois: (B, num_rois, 7 + C)\n                roi_scores: (B, num_rois)\n                gt_boxes: (B, N, 7 + C + 1)\n                roi_labels: (B, num_rois)\n        Returns:\n            batch_dict:\n                rois: (B, M, 7 + C)\n                gt_of_rois: (B, M, 7 + C)\n                gt_iou_of_rois: (B, M)\n                roi_scores: (B, M)\n                roi_labels: (B, M)\n                reg_valid_mask: (B, M)\n                rcnn_cls_labels: (B, M)\n        \"\"\"", "\n", "batch_rois", ",", "batch_gt_of_rois", ",", "batch_roi_ious", ",", "batch_roi_scores", ",", "batch_roi_labels", ",", "batch_roi_features", "=", "self", ".", "sample_rois_for_rcnn", "(", "\n", "batch_dict", "=", "batch_dict", "\n", ")", "\n", "# regression valid mask", "\n", "reg_valid_mask", "=", "(", "batch_roi_ious", ">", "self", ".", "roi_sampler_cfg", ".", "REG_FG_THRESH", ")", ".", "long", "(", ")", "\n", "\n", "# classification label", "\n", "if", "self", ".", "roi_sampler_cfg", ".", "CLS_SCORE_TYPE", "==", "'cls'", ":", "\n", "            ", "batch_cls_labels", "=", "(", "batch_roi_ious", ">", "self", ".", "roi_sampler_cfg", ".", "CLS_FG_THRESH", ")", ".", "long", "(", ")", "\n", "ignore_mask", "=", "(", "batch_roi_ious", ">", "self", ".", "roi_sampler_cfg", ".", "CLS_BG_THRESH", ")", "&", "(", "batch_roi_ious", "<", "self", ".", "roi_sampler_cfg", ".", "CLS_FG_THRESH", ")", "\n", "batch_cls_labels", "[", "ignore_mask", ">", "0", "]", "=", "-", "1", "\n", "", "elif", "self", ".", "roi_sampler_cfg", ".", "CLS_SCORE_TYPE", "==", "'roi_iou'", ":", "\n", "# padding_mask = (torch.isclose(batch_rois.sum(dim=-1), batch_rois.new_zeros(1))) ", "\n", "\n", "            ", "iou_bg_thresh", "=", "self", ".", "roi_sampler_cfg", ".", "CLS_BG_THRESH", "\n", "iou_fg_thresh", "=", "self", ".", "roi_sampler_cfg", ".", "CLS_FG_THRESH", "\n", "fg_mask", "=", "batch_roi_ious", ">", "iou_fg_thresh", "\n", "bg_mask", "=", "batch_roi_ious", "<", "iou_bg_thresh", "\n", "interval_mask", "=", "(", "fg_mask", "==", "0", ")", "&", "(", "bg_mask", "==", "0", ")", "\n", "\n", "batch_cls_labels", "=", "(", "fg_mask", ">", "0", ")", ".", "float", "(", ")", "\n", "batch_cls_labels", "[", "interval_mask", "]", "=", "(", "batch_roi_ious", "[", "interval_mask", "]", "-", "iou_bg_thresh", ")", "/", "(", "iou_fg_thresh", "-", "iou_bg_thresh", ")", "\n", "# batch_cls_labels[padding_mask > 0] = -1 ", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "targets_dict", "=", "{", "'rois'", ":", "batch_rois", ",", "'gt_of_rois'", ":", "batch_gt_of_rois", ",", "'gt_iou_of_rois'", ":", "batch_roi_ious", ",", "\n", "'roi_scores'", ":", "batch_roi_scores", ",", "'roi_labels'", ":", "batch_roi_labels", ",", "\n", "'roi_features'", ":", "batch_roi_features", ",", "'reg_valid_mask'", ":", "reg_valid_mask", ",", "\n", "'rcnn_cls_labels'", ":", "batch_cls_labels", "}", "\n", "\n", "return", "targets_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.target_assigner.proposal_target_layer.ProposalTargetLayer.sample_rois_for_rcnn": [[74, 132], ["rois.new_zeros", "rois.new_zeros", "rois.new_zeros", "rois.new_zeros", "rois.new_zeros", "roi_features.new_zeros", "range", "proposal_target_layer.ProposalTargetLayer.roi_sampler_cfg.get", "proposal_target_layer.ProposalTargetLayer.subsample_rois", "cur_gt.__len__", "cur_gt.new_zeros", "proposal_target_layer.ProposalTargetLayer.get_max_iou_with_same_class", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "torch.max", "torch.max", "torch.max", "torch.max", "cur_gt[].sum", "len", "cur_gt[].long"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.target_assigner.proposal_target_layer.ProposalTargetLayer.subsample_rois", "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.DistributedGroupSampler.__len__", "home.repos.pwc.inspect_result.neeharperi_futuredet.target_assigner.proposal_target_layer.ProposalTargetLayer.get_max_iou_with_same_class", "home.repos.pwc.inspect_result.neeharperi_futuredet.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu"], ["", "def", "sample_rois_for_rcnn", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                rois: (B, num_rois, 7 + C)\n                roi_scores: (B, num_rois)\n                gt_boxes: (B, N, 7 + C + 1)\n                roi_labels: (B, num_rois)\n        Returns:\n\n        \"\"\"", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "rois", "=", "batch_dict", "[", "'rois'", "]", "\n", "roi_scores", "=", "batch_dict", "[", "'roi_scores'", "]", "\n", "roi_labels", "=", "batch_dict", "[", "'roi_labels'", "]", "\n", "gt_boxes", "=", "batch_dict", "[", "'gt_boxes_and_cls'", "]", "\n", "roi_features", "=", "batch_dict", "[", "'roi_features'", "]", "\n", "\n", "code_size", "=", "rois", ".", "shape", "[", "-", "1", "]", "\n", "batch_rois", "=", "rois", ".", "new_zeros", "(", "batch_size", ",", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ",", "code_size", ")", "\n", "batch_gt_of_rois", "=", "rois", ".", "new_zeros", "(", "batch_size", ",", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ",", "code_size", "+", "1", ")", "\n", "batch_roi_ious", "=", "rois", ".", "new_zeros", "(", "batch_size", ",", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ")", "\n", "batch_roi_scores", "=", "rois", ".", "new_zeros", "(", "batch_size", ",", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ")", "\n", "batch_roi_labels", "=", "rois", ".", "new_zeros", "(", "(", "batch_size", ",", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "batch_roi_features", "=", "roi_features", ".", "new_zeros", "(", "batch_size", ",", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ",", "\n", "roi_features", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "for", "index", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "cur_roi", ",", "cur_gt", ",", "cur_roi_labels", ",", "cur_roi_scores", ",", "cur_roi_features", "=", "rois", "[", "index", "]", ",", "gt_boxes", "[", "index", "]", ",", "roi_labels", "[", "index", "]", ",", "roi_scores", "[", "index", "]", ",", "roi_features", "[", "index", "]", "\n", "\n", "k", "=", "cur_gt", ".", "__len__", "(", ")", "-", "1", "\n", "while", "k", ">", "0", "and", "cur_gt", "[", "k", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "k", "-=", "1", "\n", "", "cur_gt", "=", "cur_gt", "[", ":", "k", "+", "1", "]", "\n", "cur_gt", "=", "cur_gt", ".", "new_zeros", "(", "(", "1", ",", "cur_gt", ".", "shape", "[", "1", "]", ")", ")", "if", "len", "(", "cur_gt", ")", "==", "0", "else", "cur_gt", "\n", "\n", "if", "self", ".", "roi_sampler_cfg", ".", "get", "(", "'SAMPLE_ROI_BY_EACH_CLASS'", ",", "False", ")", ":", "\n", "                ", "max_overlaps", ",", "gt_assignment", "=", "self", ".", "get_max_iou_with_same_class", "(", "\n", "rois", "=", "cur_roi", "[", ":", ",", ":", "7", "]", ",", "roi_labels", "=", "cur_roi_labels", ",", "\n", "gt_boxes", "=", "cur_gt", "[", ":", ",", "0", ":", "7", "]", ",", "gt_labels", "=", "cur_gt", "[", ":", ",", "-", "1", "]", ".", "long", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "iou3d", "=", "boxes_iou3d_gpu", "(", "cur_roi", ",", "cur_gt", "[", ":", ",", "0", ":", "7", "]", ")", "# (M, N)", "\n", "max_overlaps", ",", "gt_assignment", "=", "torch", ".", "max", "(", "iou3d", ",", "dim", "=", "1", ")", "\n", "\n", "", "sampled_inds", "=", "self", ".", "subsample_rois", "(", "max_overlaps", "=", "max_overlaps", ")", "\n", "\n", "batch_rois", "[", "index", "]", "=", "cur_roi", "[", "sampled_inds", "]", "\n", "batch_roi_labels", "[", "index", "]", "=", "cur_roi_labels", "[", "sampled_inds", "]", "\n", "batch_roi_ious", "[", "index", "]", "=", "max_overlaps", "[", "sampled_inds", "]", "\n", "batch_roi_scores", "[", "index", "]", "=", "cur_roi_scores", "[", "sampled_inds", "]", "\n", "batch_gt_of_rois", "[", "index", "]", "=", "cur_gt", "[", "gt_assignment", "[", "sampled_inds", "]", "]", "\n", "batch_roi_features", "[", "index", "]", "=", "cur_roi_features", "[", "sampled_inds", "]", "\n", "\n", "", "return", "batch_rois", ",", "batch_gt_of_rois", ",", "batch_roi_ious", ",", "batch_roi_scores", ",", "batch_roi_labels", ",", "batch_roi_features", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.target_assigner.proposal_target_layer.ProposalTargetLayer.subsample_rois": [[133, 179], ["int", "min", "fg_inds.numel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.round", "hard_bg_inds.numel", "easy_bg_inds.numel", "min", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "proposal_target_layer.ProposalTargetLayer.sample_bg_inds", "numpy.floor", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "proposal_target_layer.ProposalTargetLayer.sample_bg_inds", "print", "print", "numpy.random.rand", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.permutation", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "max_overlaps.min().item", "max_overlaps.max().item", "max_overlaps.min", "max_overlaps.max"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.target_assigner.proposal_target_layer.ProposalTargetLayer.sample_bg_inds", "home.repos.pwc.inspect_result.neeharperi_futuredet.target_assigner.proposal_target_layer.ProposalTargetLayer.sample_bg_inds"], ["", "def", "subsample_rois", "(", "self", ",", "max_overlaps", ")", ":", "\n", "# sample fg, easy_bg, hard_bg", "\n", "        ", "fg_rois_per_image", "=", "int", "(", "np", ".", "round", "(", "self", ".", "roi_sampler_cfg", ".", "FG_RATIO", "*", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ")", ")", "\n", "fg_thresh", "=", "min", "(", "self", ".", "roi_sampler_cfg", ".", "REG_FG_THRESH", ",", "self", ".", "roi_sampler_cfg", ".", "CLS_FG_THRESH", ")", "\n", "\n", "fg_inds", "=", "(", "(", "max_overlaps", ">=", "fg_thresh", ")", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "easy_bg_inds", "=", "(", "(", "max_overlaps", "<", "self", ".", "roi_sampler_cfg", ".", "CLS_BG_THRESH_LO", ")", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "hard_bg_inds", "=", "(", "(", "max_overlaps", "<", "self", ".", "roi_sampler_cfg", ".", "REG_FG_THRESH", ")", "&", "\n", "(", "max_overlaps", ">=", "self", ".", "roi_sampler_cfg", ".", "CLS_BG_THRESH_LO", ")", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "fg_num_rois", "=", "fg_inds", ".", "numel", "(", ")", "\n", "bg_num_rois", "=", "hard_bg_inds", ".", "numel", "(", ")", "+", "easy_bg_inds", ".", "numel", "(", ")", "\n", "\n", "if", "fg_num_rois", ">", "0", "and", "bg_num_rois", ">", "0", ":", "\n", "# sampling fg", "\n", "            ", "fg_rois_per_this_image", "=", "min", "(", "fg_rois_per_image", ",", "fg_num_rois", ")", "\n", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "permutation", "(", "fg_num_rois", ")", ")", ".", "type_as", "(", "max_overlaps", ")", ".", "long", "(", ")", "\n", "fg_inds", "=", "fg_inds", "[", "rand_num", "[", ":", "fg_rois_per_this_image", "]", "]", "\n", "\n", "# sampling bg", "\n", "bg_rois_per_this_image", "=", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", "-", "fg_rois_per_this_image", "\n", "bg_inds", "=", "self", ".", "sample_bg_inds", "(", "\n", "hard_bg_inds", ",", "easy_bg_inds", ",", "bg_rois_per_this_image", ",", "self", ".", "roi_sampler_cfg", ".", "HARD_BG_RATIO", "\n", ")", "\n", "\n", "", "elif", "fg_num_rois", ">", "0", "and", "bg_num_rois", "==", "0", ":", "\n", "# sampling fg", "\n", "            ", "rand_num", "=", "np", ".", "floor", "(", "np", ".", "random", ".", "rand", "(", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ")", "*", "fg_num_rois", ")", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "rand_num", ")", ".", "type_as", "(", "max_overlaps", ")", ".", "long", "(", ")", "\n", "fg_inds", "=", "fg_inds", "[", "rand_num", "]", "\n", "bg_inds", "=", "[", "]", "\n", "\n", "", "elif", "bg_num_rois", ">", "0", "and", "fg_num_rois", "==", "0", ":", "\n", "# sampling bg", "\n", "            ", "bg_rois_per_this_image", "=", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", "\n", "bg_inds", "=", "self", ".", "sample_bg_inds", "(", "\n", "hard_bg_inds", ",", "easy_bg_inds", ",", "bg_rois_per_this_image", ",", "self", ".", "roi_sampler_cfg", ".", "HARD_BG_RATIO", "\n", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'maxoverlaps:(min=%f, max=%f)'", "%", "(", "max_overlaps", ".", "min", "(", ")", ".", "item", "(", ")", ",", "max_overlaps", ".", "max", "(", ")", ".", "item", "(", ")", ")", ")", "\n", "print", "(", "'ERROR: FG=%d, BG=%d'", "%", "(", "fg_num_rois", ",", "bg_num_rois", ")", ")", "\n", "raise", "NotImplementedError", "\n", "\n", "", "sampled_inds", "=", "torch", ".", "cat", "(", "(", "fg_inds", ",", "bg_inds", ")", ",", "dim", "=", "0", ")", "\n", "return", "sampled_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.target_assigner.proposal_target_layer.ProposalTargetLayer.sample_bg_inds": [[180, 209], ["min", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hard_bg_inds.numel", "easy_bg_inds.numel", "int", "len", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "hard_bg_inds.numel", "easy_bg_inds.numel", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "hard_bg_inds.numel", "easy_bg_inds.numel", "hard_bg_inds.numel", "easy_bg_inds.numel", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "hard_bg_inds.numel", "easy_bg_inds.numel"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sample_bg_inds", "(", "hard_bg_inds", ",", "easy_bg_inds", ",", "bg_rois_per_this_image", ",", "hard_bg_ratio", ")", ":", "\n", "        ", "if", "hard_bg_inds", ".", "numel", "(", ")", ">", "0", "and", "easy_bg_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "hard_bg_rois_num", "=", "min", "(", "int", "(", "bg_rois_per_this_image", "*", "hard_bg_ratio", ")", ",", "len", "(", "hard_bg_inds", ")", ")", "\n", "easy_bg_rois_num", "=", "bg_rois_per_this_image", "-", "hard_bg_rois_num", "\n", "\n", "# sampling hard bg", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "hard_bg_inds", ".", "numel", "(", ")", ",", "size", "=", "(", "hard_bg_rois_num", ",", ")", ")", ".", "long", "(", ")", "\n", "hard_bg_inds", "=", "hard_bg_inds", "[", "rand_idx", "]", "\n", "\n", "# sampling easy bg", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "easy_bg_inds", ".", "numel", "(", ")", ",", "size", "=", "(", "easy_bg_rois_num", ",", ")", ")", ".", "long", "(", ")", "\n", "easy_bg_inds", "=", "easy_bg_inds", "[", "rand_idx", "]", "\n", "\n", "bg_inds", "=", "torch", ".", "cat", "(", "[", "hard_bg_inds", ",", "easy_bg_inds", "]", ",", "dim", "=", "0", ")", "\n", "", "elif", "hard_bg_inds", ".", "numel", "(", ")", ">", "0", "and", "easy_bg_inds", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "hard_bg_rois_num", "=", "bg_rois_per_this_image", "\n", "# sampling hard bg", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "hard_bg_inds", ".", "numel", "(", ")", ",", "size", "=", "(", "hard_bg_rois_num", ",", ")", ")", ".", "long", "(", ")", "\n", "bg_inds", "=", "hard_bg_inds", "[", "rand_idx", "]", "\n", "", "elif", "hard_bg_inds", ".", "numel", "(", ")", "==", "0", "and", "easy_bg_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "easy_bg_rois_num", "=", "bg_rois_per_this_image", "\n", "# sampling easy bg", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "easy_bg_inds", ".", "numel", "(", ")", ",", "size", "=", "(", "easy_bg_rois_num", ",", ")", ")", ".", "long", "(", ")", "\n", "bg_inds", "=", "easy_bg_inds", "[", "rand_idx", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "bg_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.target_assigner.proposal_target_layer.ProposalTargetLayer.get_max_iou_with_same_class": [[210, 245], ["rois.new_zeros", "roi_labels.new_zeros", "range", "gt_labels.min().item", "gt_labels.max().item", "gt_mask.nonzero().view", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "torch.max", "torch.max", "torch.max", "torch.max", "gt_labels.min", "roi_mask.sum", "gt_mask.sum", "gt_labels.max", "gt_mask.nonzero"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu"], ["", "@", "staticmethod", "\n", "def", "get_max_iou_with_same_class", "(", "rois", ",", "roi_labels", ",", "gt_boxes", ",", "gt_labels", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            rois: (N, 7)\n            roi_labels: (N)\n            gt_boxes: (N, )\n            gt_labels:\n\n        Returns:\n\n        \"\"\"", "\n", "\"\"\"\n        :param rois: (N, 7)\n        :param roi_labels: (N)\n        :param gt_boxes: (N, 8)\n        :return:\n        \"\"\"", "\n", "max_overlaps", "=", "rois", ".", "new_zeros", "(", "rois", ".", "shape", "[", "0", "]", ")", "\n", "gt_assignment", "=", "roi_labels", ".", "new_zeros", "(", "roi_labels", ".", "shape", "[", "0", "]", ")", "\n", "\n", "for", "k", "in", "range", "(", "gt_labels", ".", "min", "(", ")", ".", "item", "(", ")", ",", "gt_labels", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", ")", ":", "\n", "            ", "roi_mask", "=", "(", "roi_labels", "==", "k", ")", "\n", "gt_mask", "=", "(", "gt_labels", "==", "k", ")", "\n", "if", "roi_mask", ".", "sum", "(", ")", ">", "0", "and", "gt_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "cur_roi", "=", "rois", "[", "roi_mask", "]", "\n", "cur_gt", "=", "gt_boxes", "[", "gt_mask", "]", "\n", "original_gt_assignment", "=", "gt_mask", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "iou3d", "=", "boxes_iou3d_gpu", "(", "cur_roi", ",", "cur_gt", ")", "# (M, N)", "\n", "cur_max_overlaps", ",", "cur_gt_assignment", "=", "torch", ".", "max", "(", "iou3d", ",", "dim", "=", "1", ")", "\n", "max_overlaps", "[", "roi_mask", "]", "=", "cur_max_overlaps", "\n", "gt_assignment", "[", "roi_mask", "]", "=", "original_gt_assignment", "[", "cur_gt_assignment", "]", "\n", "\n", "", "", "return", "max_overlaps", ",", "gt_assignment", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.second_stage.bird_eye_view.BEVFeatureExtractor.__init__": [[11, 17], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pc_start", ",", "\n", "voxel_size", ",", "out_stride", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pc_start", "=", "pc_start", "\n", "self", ".", "voxel_size", "=", "voxel_size", "\n", "self", ".", "out_stride", "=", "out_stride", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.second_stage.bird_eye_view.BEVFeatureExtractor.absl_to_relative": [[18, 23], ["None"], "methods", ["None"], ["", "def", "absl_to_relative", "(", "self", ",", "absolute", ")", ":", "\n", "        ", "a1", "=", "(", "absolute", "[", "...", ",", "0", "]", "-", "self", ".", "pc_start", "[", "0", "]", ")", "/", "self", ".", "voxel_size", "[", "0", "]", "/", "self", ".", "out_stride", "\n", "a2", "=", "(", "absolute", "[", "...", ",", "1", "]", "-", "self", ".", "pc_start", "[", "1", "]", ")", "/", "self", ".", "voxel_size", "[", "1", "]", "/", "self", ".", "out_stride", "\n", "\n", "return", "a1", ",", "a2", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.second_stage.bird_eye_view.BEVFeatureExtractor.forward": [[24, 42], ["len", "range", "bird_eye_view.BEVFeatureExtractor.absl_to_relative", "det3d.core.utils.center_utils.bilinear_interpolate_torch", "ret_maps.append", "torch.cat", "len", "range"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.second_stage.bird_eye_view.BEVFeatureExtractor.absl_to_relative", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils.bilinear_interpolate_torch"], ["", "def", "forward", "(", "self", ",", "example", ",", "batch_centers", ",", "num_point", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "example", "[", "'bev_feature'", "]", ")", "\n", "ret_maps", "=", "[", "]", "\n", "\n", "for", "batch_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "xs", ",", "ys", "=", "self", ".", "absl_to_relative", "(", "batch_centers", "[", "batch_idx", "]", ")", "\n", "\n", "# N x C ", "\n", "feature_map", "=", "bilinear_interpolate_torch", "(", "example", "[", "'bev_feature'", "]", "[", "batch_idx", "]", ",", "\n", "xs", ",", "ys", ")", "\n", "\n", "if", "num_point", ">", "1", ":", "\n", "                ", "section_size", "=", "len", "(", "feature_map", ")", "//", "num_point", "\n", "feature_map", "=", "torch", ".", "cat", "(", "[", "feature_map", "[", "i", "*", "section_size", ":", "(", "i", "+", "1", ")", "*", "section_size", "]", "for", "i", "in", "range", "(", "num_point", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "ret_maps", ".", "append", "(", "feature_map", ")", "\n", "\n", "", "return", "ret_maps", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.backbones.scn.SparseBasicBlock.__init__": [[40, 63], ["spconv.SparseModule.__init__", "scn.conv3x3", "torch.nn.ReLU", "scn.conv3x3", "dict", "utils.build_norm_layer", "utils.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.resnet.conv3x3", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.resnet.conv3x3", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.build_norm_layer"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "downsample", "=", "None", ",", "\n", "indice_key", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "SparseBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "norm_cfg", "is", "None", ":", "\n", "            ", "norm_cfg", "=", "dict", "(", "type", "=", "\"BN1d\"", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "\n", "\n", "", "bias", "=", "norm_cfg", "is", "not", "None", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "indice_key", "=", "indice_key", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn1", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ")", "[", "1", "]", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "indice_key", "=", "indice_key", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn2", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ")", "[", "1", "]", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.backbones.scn.SparseBasicBlock.forward": [[64, 81], ["scn.SparseBasicBlock.conv1", "scn.SparseBasicBlock.bn1", "scn.SparseBasicBlock.relu", "scn.SparseBasicBlock.conv2", "scn.SparseBasicBlock.bn2", "scn.SparseBasicBlock.relu", "scn.SparseBasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", ".", "features", "=", "self", ".", "bn1", "(", "out", ".", "features", ")", "\n", "out", ".", "features", "=", "self", ".", "relu", "(", "out", ".", "features", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", ".", "features", "=", "self", ".", "bn2", "(", "out", ".", "features", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", ".", "features", "+=", "identity", ".", "features", "\n", "out", ".", "features", "=", "self", ".", "relu", "(", "out", ".", "features", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.backbones.scn.SpMiddleResNetFHD.__init__": [[85, 146], ["torch.nn.Module.__init__", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "dict", "spconv.SubMConv3d", "torch.nn.ReLU", "scn.SparseBasicBlock", "scn.SparseBasicBlock", "spconv.SparseConv3d", "torch.nn.ReLU", "scn.SparseBasicBlock", "scn.SparseBasicBlock", "spconv.SparseConv3d", "torch.nn.ReLU", "scn.SparseBasicBlock", "scn.SparseBasicBlock", "spconv.SparseConv3d", "torch.nn.ReLU", "scn.SparseBasicBlock", "scn.SparseBasicBlock", "spconv.SparseConv3d", "torch.nn.ReLU", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_norm_layer", "utils.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.build_norm_layer", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.build_norm_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "num_input_features", "=", "128", ",", "norm_cfg", "=", "None", ",", "name", "=", "\"SpMiddleResNetFHD\"", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "SpMiddleResNetFHD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "\n", "self", ".", "dcn", "=", "None", "\n", "self", ".", "zero_init_residual", "=", "False", "\n", "\n", "if", "norm_cfg", "is", "None", ":", "\n", "            ", "norm_cfg", "=", "dict", "(", "type", "=", "\"BN1d\"", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "\n", "\n", "# input: # [1600, 1200, 41]", "\n", "", "self", ".", "conv_input", "=", "spconv", ".", "SparseSequential", "(", "\n", "SubMConv3d", "(", "num_input_features", ",", "16", ",", "3", ",", "bias", "=", "False", ",", "indice_key", "=", "\"res0\"", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "16", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "conv1", "=", "spconv", ".", "SparseSequential", "(", "\n", "SparseBasicBlock", "(", "16", ",", "16", ",", "norm_cfg", "=", "norm_cfg", ",", "indice_key", "=", "\"res0\"", ")", ",", "\n", "SparseBasicBlock", "(", "16", ",", "16", ",", "norm_cfg", "=", "norm_cfg", ",", "indice_key", "=", "\"res0\"", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "SparseConv3d", "(", "\n", "16", ",", "32", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", ",", "# [1600, 1200, 41] -> [800, 600, 21]", "\n", "build_norm_layer", "(", "norm_cfg", ",", "32", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "SparseBasicBlock", "(", "32", ",", "32", ",", "norm_cfg", "=", "norm_cfg", ",", "indice_key", "=", "\"res1\"", ")", ",", "\n", "SparseBasicBlock", "(", "32", ",", "32", ",", "norm_cfg", "=", "norm_cfg", ",", "indice_key", "=", "\"res1\"", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "spconv", ".", "SparseSequential", "(", "\n", "SparseConv3d", "(", "\n", "32", ",", "64", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", ",", "# [800, 600, 21] -> [400, 300, 11]", "\n", "build_norm_layer", "(", "norm_cfg", ",", "64", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "SparseBasicBlock", "(", "64", ",", "64", ",", "norm_cfg", "=", "norm_cfg", ",", "indice_key", "=", "\"res2\"", ")", ",", "\n", "SparseBasicBlock", "(", "64", ",", "64", ",", "norm_cfg", "=", "norm_cfg", ",", "indice_key", "=", "\"res2\"", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv4", "=", "spconv", ".", "SparseSequential", "(", "\n", "SparseConv3d", "(", "\n", "64", ",", "128", ",", "3", ",", "2", ",", "padding", "=", "[", "0", ",", "1", ",", "1", "]", ",", "bias", "=", "False", "\n", ")", ",", "# [400, 300, 11] -> [200, 150, 5]", "\n", "build_norm_layer", "(", "norm_cfg", ",", "128", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "SparseBasicBlock", "(", "128", ",", "128", ",", "norm_cfg", "=", "norm_cfg", ",", "indice_key", "=", "\"res3\"", ")", ",", "\n", "SparseBasicBlock", "(", "128", ",", "128", ",", "norm_cfg", "=", "norm_cfg", ",", "indice_key", "=", "\"res3\"", ")", ",", "\n", ")", "\n", "\n", "\n", "self", ".", "extra_conv", "=", "spconv", ".", "SparseSequential", "(", "\n", "SparseConv3d", "(", "\n", "128", ",", "128", ",", "(", "3", ",", "1", ",", "1", ")", ",", "(", "2", ",", "1", ",", "1", ")", ",", "bias", "=", "False", "\n", ")", ",", "# [200, 150, 5] -> [200, 150, 2]", "\n", "build_norm_layer", "(", "norm_cfg", ",", "128", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.backbones.scn.SpMiddleResNetFHD.forward": [[148, 178], ["coors.int.int.int", "spconv.SparseConvTensor", "scn.SpMiddleResNetFHD.conv_input", "scn.SpMiddleResNetFHD.conv1", "scn.SpMiddleResNetFHD.conv2", "scn.SpMiddleResNetFHD.conv3", "scn.SpMiddleResNetFHD.conv4", "scn.SpMiddleResNetFHD.extra_conv", "ret.view.view.dense", "ret.view.view.view", "numpy.array"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coors", ",", "batch_size", ",", "input_shape", ")", ":", "\n", "\n", "# input: # [41, 1600, 1408]", "\n", "        ", "sparse_shape", "=", "np", ".", "array", "(", "input_shape", "[", ":", ":", "-", "1", "]", ")", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "\n", "coors", "=", "coors", ".", "int", "(", ")", "\n", "ret", "=", "spconv", ".", "SparseConvTensor", "(", "voxel_features", ",", "coors", ",", "sparse_shape", ",", "batch_size", ")", "\n", "\n", "x", "=", "self", ".", "conv_input", "(", "ret", ")", "\n", "\n", "x_conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x_conv2", "=", "self", ".", "conv2", "(", "x_conv1", ")", "\n", "x_conv3", "=", "self", ".", "conv3", "(", "x_conv2", ")", "\n", "x_conv4", "=", "self", ".", "conv4", "(", "x_conv3", ")", "\n", "\n", "ret", "=", "self", ".", "extra_conv", "(", "x_conv4", ")", "\n", "\n", "ret", "=", "ret", ".", "dense", "(", ")", "\n", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "ret", ".", "shape", "\n", "ret", "=", "ret", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "\n", "multi_scale_voxel_features", "=", "{", "\n", "'conv1'", ":", "x_conv1", ",", "\n", "'conv2'", ":", "x_conv2", ",", "\n", "'conv3'", ":", "x_conv3", ",", "\n", "'conv4'", ":", "x_conv4", ",", "\n", "}", "\n", "\n", "return", "ret", ",", "multi_scale_voxel_features", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.backbones.scn.conv3x3": [[11, 21], ["spconv.SubMConv3d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "indice_key", "=", "None", ",", "bias", "=", "True", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "spconv", ".", "SubMConv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", "indice_key", "=", "indice_key", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.backbones.scn.conv1x1": [[24, 34], ["spconv.SubMConv3d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "indice_key", "=", "None", ",", "bias", "=", "True", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "spconv", ".", "SubMConv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", "indice_key", "=", "indice_key", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.FeatureAdaption.__init__": [[54, 72], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "DeformConv", "torch.nn.ReLU", "center_head.FeatureAdaption.init_offset"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.FeatureAdaption.init_offset"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "deformable_groups", "=", "4", ")", ":", "\n", "\n", "        ", "super", "(", "FeatureAdaption", ",", "self", ")", ".", "__init__", "(", ")", "\n", "offset_channels", "=", "kernel_size", "*", "kernel_size", "*", "2", "\n", "self", ".", "conv_offset", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "deformable_groups", "*", "offset_channels", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_adaption", "=", "DeformConv", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "deformable_groups", "=", "deformable_groups", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "init_offset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.FeatureAdaption.init_offset": [[73, 75], ["center_head.FeatureAdaption.conv_offset.weight.data.zero_"], "methods", ["None"], ["", "def", "init_offset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_offset", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.FeatureAdaption.forward": [[76, 80], ["center_head.FeatureAdaption.conv_offset", "center_head.FeatureAdaption.relu", "center_head.FeatureAdaption.conv_adaption"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", ")", ":", "\n", "        ", "offset", "=", "self", ".", "conv_offset", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv_adaption", "(", "x", ",", "offset", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.SepHead.__init__": [[82, 153], ["torch.nn.Module.__init__", "torch.nn.Sequential", "det3d.models.utils.Sequential", "range", "det3d.models.utils.Sequential.add", "center_head.SepHead.__setattr__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "det3d.models.utils.Sequential.add", "det3d.models.utils.Sequential.add", "torch.nn.Conv2d", "fc[].bias.data.fill_", "det3d.models.utils.Sequential.modules", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "det3d.models.utils.Sequential.add", "torch.nn.ReLU", "isinstance", "torch.nn.BatchNorm2d", "det3d.torchie.cnn.kaiming_init"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.Sequential.add", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.__setattr__", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.Sequential.add", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.Sequential.add", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.Sequential.add", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.weight_init.kaiming_init"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "heads", ",", "\n", "head_conv", "=", "64", ",", "\n", "final_kernel", "=", "1", ",", "\n", "bn", "=", "False", ",", "\n", "init_bias", "=", "-", "2.19", ",", "\n", "two_stage", "=", "False", ",", "\n", "forecast_feature", "=", "False", ",", "\n", "wide_head", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "SepHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "two_stage", "=", "two_stage", "\n", "self", ".", "forecast_feature", "=", "forecast_feature", "\n", "self", ".", "wide_head", "=", "wide_head", "\n", "\n", "if", "self", ".", "two_stage", ":", "\n", "            ", "if", "\"vel\"", "in", "self", ".", "heads", "and", "\"rot\"", "in", "self", ".", "heads", ":", "\n", "                ", "self", ".", "forecast_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "head_conv", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "head_conv", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "", "if", "\"rvel\"", "in", "self", ".", "heads", "and", "\"rrot\"", "in", "self", ".", "heads", ":", "\n", "                ", "self", ".", "reverse_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "head_conv", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "head_conv", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "", "", "if", "self", ".", "forecast_feature", ":", "\n", "            ", "self", ".", "forecast_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "head_conv", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "nn", ".", "BatchNorm2d", "(", "head_conv", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_conv", ",", "head_conv", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "nn", ".", "BatchNorm2d", "(", "head_conv", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", ")", "\n", "\n", "", "if", "self", ".", "wide_head", ":", "\n", "            ", "head_conv", "=", "in_channels", "\n", "\n", "", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "classes", ",", "num_conv", "=", "self", ".", "heads", "[", "head", "]", "\n", "\n", "fc", "=", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "num_conv", "-", "1", ")", ":", "\n", "                ", "fc", ".", "add", "(", "nn", ".", "Conv2d", "(", "head_conv", ",", "head_conv", ",", "\n", "kernel_size", "=", "final_kernel", ",", "stride", "=", "1", ",", "\n", "padding", "=", "final_kernel", "//", "2", ",", "bias", "=", "True", ")", ")", "\n", "if", "bn", ":", "\n", "                    ", "fc", ".", "add", "(", "nn", ".", "BatchNorm2d", "(", "head_conv", ")", ")", "\n", "", "fc", ".", "add", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "fc", ".", "add", "(", "nn", ".", "Conv2d", "(", "head_conv", ",", "classes", ",", "\n", "kernel_size", "=", "final_kernel", ",", "stride", "=", "1", ",", "\n", "padding", "=", "final_kernel", "//", "2", ",", "bias", "=", "True", ")", ")", "\n", "\n", "if", "'hm'", "in", "head", ":", "\n", "                ", "fc", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "fill_", "(", "init_bias", ")", "\n", "", "else", ":", "\n", "                ", "for", "m", "in", "fc", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                        ", "kaiming_init", "(", "m", ")", "\n", "\n", "", "", "", "self", ".", "__setattr__", "(", "head", ",", "fc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.SepHead.forward": [[155, 175], ["dict", "center_head.SepHead.forecast_conv", "center_head.SepHead.__getattr__", "center_head.SepHead.forecast_conv", "center_head.SepHead.reverse_conv", "center_head.SepHead.__getattr__", "center_head.SepHead.__getattr__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.__getattr__", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.__getattr__", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.__getattr__"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ret_dict", "=", "dict", "(", ")", "\n", "\n", "if", "self", ".", "forecast_feature", ":", "\n", "            ", "x", "=", "self", ".", "forecast_conv", "(", "x", ")", "\n", "ret_dict", "[", "\"feats\"", "]", "=", "x", "\n", "\n", "", "for", "head", "in", "self", ".", "heads", ":", "\n", "            ", "if", "self", ".", "two_stage", ":", "\n", "                ", "if", "head", "in", "[", "\"vel\"", ",", "\"rot\"", "]", ":", "\n", "                    ", "shared_forecast", "=", "self", ".", "forecast_conv", "(", "x", ")", "\n", "ret_dict", "[", "head", "]", "=", "self", ".", "__getattr__", "(", "head", ")", "(", "shared_forecast", ")", "\n", "\n", "", "if", "head", "in", "[", "\"rvel\"", ",", "\"rrot\"", "]", ":", "\n", "                    ", "shared_reverse", "=", "self", ".", "reverse_conv", "(", "x", ")", "\n", "ret_dict", "[", "head", "]", "=", "self", ".", "__getattr__", "(", "head", ")", "(", "shared_reverse", ")", "\n", "\n", "", "", "ret_dict", "[", "head", "]", "=", "self", ".", "__getattr__", "(", "head", ")", "(", "x", ")", "\n", "\n", "", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.DCNSepHead.__init__": [[177, 218], ["torch.nn.Module.__init__", "center_head.FeatureAdaption", "center_head.FeatureAdaption", "det3d.models.utils.Sequential", "center_head.DCNSepHead.cls_head[].bias.data.fill_", "center_head.SepHead", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "num_cls", ",", "\n", "heads", ",", "\n", "head_conv", "=", "64", ",", "\n", "final_kernel", "=", "1", ",", "\n", "bn", "=", "False", ",", "\n", "init_bias", "=", "-", "2.19", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "DCNSepHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "# feature adaptation with dcn", "\n", "# use separate features for classification / regression", "\n", "self", ".", "feature_adapt_cls", "=", "FeatureAdaption", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "deformable_groups", "=", "4", ")", "\n", "\n", "self", ".", "feature_adapt_reg", "=", "FeatureAdaption", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "deformable_groups", "=", "4", ")", "\n", "\n", "# heatmap prediction head ", "\n", "self", ".", "cls_head", "=", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "head_conv", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "head_conv", ",", "num_cls", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", ")", "\n", "self", ".", "cls_head", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "fill_", "(", "init_bias", ")", "\n", "\n", "# other regression target ", "\n", "self", ".", "task_head", "=", "SepHead", "(", "in_channels", ",", "heads", ",", "head_conv", "=", "head_conv", ",", "bn", "=", "bn", ",", "final_kernel", "=", "final_kernel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.DCNSepHead.forward": [[220, 229], ["center_head.DCNSepHead.feature_adapt_cls", "center_head.DCNSepHead.feature_adapt_reg", "center_head.DCNSepHead.cls_head", "center_head.DCNSepHead.task_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "center_feat", "=", "self", ".", "feature_adapt_cls", "(", "x", ")", "\n", "reg_feat", "=", "self", ".", "feature_adapt_reg", "(", "x", ")", "\n", "\n", "cls_score", "=", "self", ".", "cls_head", "(", "center_feat", ")", "\n", "ret", "=", "self", ".", "task_head", "(", "reg_feat", ")", "\n", "ret", "[", "'hm'", "]", "=", "cls_score", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.CenterHead.__init__": [[233, 374], ["dict", "torch.nn.Module.__init__", "det3d.models.losses.centernet_loss.FastFocalLoss", "det3d.models.losses.centernet_loss.RegLoss", "det3d.models.losses.centernet_loss.ForecastLoss", "logging.getLogger.info", "torch.nn.ModuleList", "print", "torch.nn.Sequential", "enumerate", "logging.getLogger.info", "len", "list", "logging.getLogger", "print", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "copy.deepcopy", "copy.deepcopy.keys", "list", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "copy.deepcopy.update", "center_head.CenterHead.tasks.append", "numpy.array", "numpy.array", "dict", "center_head.CenterHead.tasks.append", "center_head.CenterHead.tasks.append", "center_head.DCNSepHead", "numpy.array", "numpy.array", "center_head.SepHead", "center_head.SepHead"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", "=", "[", "128", ",", "]", ",", "\n", "tasks", "=", "[", "]", ",", "\n", "dataset", "=", "'nuscenes'", ",", "\n", "weight", "=", "0.25", ",", "\n", "code_weights", "=", "[", "]", ",", "\n", "common_heads", "=", "dict", "(", ")", ",", "\n", "logger", "=", "None", ",", "\n", "init_bias", "=", "-", "2.19", ",", "\n", "share_conv_channel", "=", "64", ",", "\n", "num_hm_conv", "=", "2", ",", "\n", "dcn_head", "=", "False", ",", "\n", "timesteps", "=", "1", ",", "\n", "two_stage", "=", "False", ",", "\n", "reverse", "=", "False", ",", "\n", "sparse", "=", "False", ",", "\n", "dense", "=", "False", ",", "\n", "bev_map", "=", "False", ",", "\n", "forecast_feature", "=", "False", ",", "\n", "classify", "=", "True", ",", "\n", "wide_head", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "CenterHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "two_stage", "=", "two_stage", "\n", "self", ".", "reverse", "=", "reverse", "\n", "self", ".", "sparse", "=", "sparse", "\n", "self", ".", "dense", "=", "dense", "\n", "self", ".", "bev_map", "=", "bev_map", "\n", "self", ".", "forecast_feature", "=", "forecast_feature", "\n", "self", ".", "classify", "=", "classify", "\n", "self", ".", "wide_head", "=", "wide_head", "\n", "self", ".", "target_timesteps", "=", "7", "\n", "\n", "if", "not", "self", ".", "reverse", "and", "not", "self", ".", "sparse", "and", "not", "self", ".", "dense", "and", "not", "self", ".", "classify", "and", "not", "self", ".", "wide_head", ":", "\n", "            ", "self", ".", "standard", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "standard", "=", "False", "\n", "\n", "", "num_classes", "=", "[", "len", "(", "t", "[", "\"class_names\"", "]", ")", "for", "t", "in", "tasks", "]", "\n", "self", ".", "class_names", "=", "[", "t", "[", "\"class_names\"", "]", "for", "t", "in", "tasks", "]", "\n", "self", ".", "code_weights", "=", "code_weights", "\n", "self", ".", "box_n_dim", "=", "7", "\n", "\n", "if", "'vel'", "in", "common_heads", "and", "'rvel'", "in", "common_heads", "and", "'rot'", "in", "common_heads", "and", "'rrot'", "in", "common_heads", ":", "\n", "            ", "self", ".", "box_n_dim", "=", "13", "\n", "self", ".", "code_weights_forecast", "=", "list", "(", "np", ".", "array", "(", "self", ".", "code_weights", ")", "*", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", ")", "\n", "\n", "self", ".", "code_weights_two_stage_forecast", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "\n", "", "elif", "'vel'", "in", "common_heads", "and", "'rot'", "in", "common_heads", ":", "\n", "            ", "self", ".", "box_n_dim", "=", "9", "\n", "self", ".", "code_weights_forecast", "=", "list", "(", "np", ".", "array", "(", "self", ".", "code_weights", ")", "*", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ")", ")", "\n", "\n", "self", ".", "code_weights_two_stage_forecast", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "\n", "\n", "", "self", ".", "weight", "=", "weight", "# weight between hm loss and loc loss", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "crit", "=", "FastFocalLoss", "(", ")", "\n", "self", ".", "crit_reg", "=", "RegLoss", "(", ")", "\n", "self", ".", "crit_forecast", "=", "ForecastLoss", "(", ")", "\n", "\n", "self", ".", "use_direction_classifier", "=", "False", "\n", "\n", "self", ".", "timesteps", "=", "timesteps", "\n", "if", "not", "logger", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", "\"CenterHead\"", ")", "\n", "", "self", ".", "logger", "=", "logger", "\n", "\n", "logger", ".", "info", "(", "\n", "f\"num_classes: {num_classes}\"", "\n", ")", "\n", "\n", "# a shared convolution ", "\n", "\n", "self", ".", "tasks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "print", "(", "\"Use HM Bias: \"", ",", "init_bias", ")", "\n", "\n", "if", "dcn_head", ":", "\n", "            ", "print", "(", "\"Use Deformable Convolution in the CenterHead!\"", ")", "\n", "\n", "\n", "", "if", "self", ".", "sparse", ":", "\n", "#self.num_classes = 2 * [1, 1]", "\n", "            ", "self", ".", "num_classes", "=", "2", "*", "[", "1", "]", "\n", "\n", "", "if", "self", ".", "dense", ":", "\n", "#self.num_classes = self.timesteps * [1, 1]", "\n", "            ", "self", ".", "num_classes", "=", "self", ".", "timesteps", "*", "[", "1", "]", "\n", "\n", "", "if", "self", ".", "classify", ":", "\n", "            ", "self", ".", "num_classes", "=", "self", ".", "timesteps", "*", "[", "3", "]", "\n", "\n", "", "if", "self", ".", "wide_head", ":", "\n", "            ", "self", ".", "num_classes", "=", "[", "7", "]", "\n", "share_conv_channel", "=", "512", "\n", "\n", "", "if", "self", ".", "bev_map", ":", "\n", "            ", "self", ".", "bev_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "share_conv_channel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "nn", ".", "BatchNorm2d", "(", "share_conv_channel", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "\n", "", "self", ".", "shared_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "share_conv_channel", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "share_conv_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "for", "i", ",", "num_cls", "in", "enumerate", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "heads", "=", "copy", ".", "deepcopy", "(", "common_heads", ")", "\n", "\n", "for", "head", "in", "heads", ".", "keys", "(", ")", ":", "\n", "                ", "if", "not", "self", ".", "dense", "and", "not", "self", ".", "classify", "and", "not", "self", ".", "wide_head", "and", "head", "in", "[", "\"vel\"", ",", "\"rvel\"", "]", ":", "\n", "                    ", "heads", "[", "head", "]", "=", "(", "self", ".", "timesteps", "*", "heads", "[", "head", "]", "[", "0", "]", ",", "heads", "[", "head", "]", "[", "1", "]", ")", "\n", "\n", "", "", "if", "not", "dcn_head", ":", "\n", "                ", "heads", ".", "update", "(", "dict", "(", "hm", "=", "(", "num_cls", ",", "num_hm_conv", ")", ")", ")", "\n", "\n", "if", "i", "!=", "0", "and", "self", ".", "forecast_feature", ":", "\n", "                    ", "self", ".", "tasks", ".", "append", "(", "\n", "SepHead", "(", "2", "*", "share_conv_channel", ",", "heads", ",", "bn", "=", "True", ",", "init_bias", "=", "init_bias", ",", "final_kernel", "=", "3", ",", "two_stage", "=", "self", ".", "two_stage", ",", "forecast_feature", "=", "self", ".", "forecast_feature", ",", "wide_head", "=", "self", ".", "wide_head", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "tasks", ".", "append", "(", "\n", "SepHead", "(", "share_conv_channel", ",", "heads", ",", "bn", "=", "True", ",", "init_bias", "=", "init_bias", ",", "final_kernel", "=", "3", ",", "two_stage", "=", "self", ".", "two_stage", ",", "forecast_feature", "=", "self", ".", "forecast_feature", ",", "wide_head", "=", "self", ".", "wide_head", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "tasks", ".", "append", "(", "\n", "DCNSepHead", "(", "share_conv_channel", ",", "num_cls", ",", "heads", ",", "bn", "=", "True", ",", "init_bias", "=", "init_bias", ",", "final_kernel", "=", "3", ")", "\n", ")", "\n", "", "", "logger", ".", "info", "(", "\"Finish CenterHead Initialization\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.CenterHead.forward": [[375, 391], ["center_head.CenterHead.shared_conv", "enumerate", "center_head.CenterHead.bev_conv", "torch.cat", "ret_dicts.append", "ret_dicts.append", "task", "task"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "bev_map", "=", "None", ",", "*", "kwargs", ")", ":", "\n", "        ", "ret_dicts", "=", "[", "]", "\n", "\n", "x", "=", "self", ".", "shared_conv", "(", "x", ")", "\n", "\n", "if", "self", ".", "bev_map", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "bev_conv", "(", "bev_map", ")", "\n", "\n", "", "for", "i", ",", "task", "in", "enumerate", "(", "self", ".", "tasks", ")", ":", "\n", "            ", "if", "i", "!=", "0", "and", "self", ".", "forecast_feature", ":", "\n", "                ", "feature_map", "=", "torch", ".", "cat", "(", "[", "x", ",", "ret_dicts", "[", "i", "-", "1", "]", "[", "\"feats\"", "]", "]", ",", "axis", "=", "1", ")", "\n", "ret_dicts", ".", "append", "(", "task", "(", "feature_map", ")", ")", "\n", "", "else", ":", "\n", "                ", "ret_dicts", ".", "append", "(", "task", "(", "x", ")", ")", "\n", "\n", "", "", "return", "ret_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.CenterHead._sigmoid": [[392, 395], ["torch.clamp", "x.sigmoid_"], "methods", ["None"], ["", "def", "_sigmoid", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "torch", ".", "clamp", "(", "x", ".", "sigmoid_", "(", ")", ",", "min", "=", "1e-4", ",", "max", "=", "1", "-", "1e-4", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.CenterHead.loss": [[396, 540], ["enumerate", "collections.defaultdict", "center_head.CenterHead._sigmoid", "rets.append", "ret.items", "torch.tensor().cuda", "NotImplementedError", "range", "ret.update", "rets_merged[].append", "center_head.CenterHead.crit", "center_head.CenterHead.crit_reg", "loc_loss.append", "loc_loss.append", "range", "sum", "ret.update", "ret.update", "torch.tensor", "center_head.CenterHead.crit", "torch.cat", "range", "center_head.CenterHead.crit_reg", "center_head.CenterHead.crit_reg", "loc_loss.append", "center_head.CenterHead.detach().cpu", "sum", "center_head.CenterHead.crit", "range", "torch.cat", "torch.cat", "torch.cat", "range", "center_head.CenterHead.crit_reg", "box_loss[].detach().cpu", "sum", "center_head.CenterHead.detach().cpu", "center_head.CenterHead.detach().cpu", "sum", "center_head.CenterHead.detach().cpu", "sum", "center_head.CenterHead.crit", "range", "range", "torch.cat", "range", "range", "center_head.CenterHead.crit_reg", "center_head.CenterHead.detach", "range", "[].float", "sum", "box_loss[].detach().cpu", "sum", "center_head.CenterHead.crit", "center_head.CenterHead.crit", "range", "range", "range", "center_head.CenterHead.crit_reg", "box_loss[].new_tensor", "center_head.CenterHead.new_tensor", "box_loss[].detach", "center_head.CenterHead.detach", "center_head.CenterHead.detach", "[].float", "center_head.CenterHead.detach", "range", "sum", "range", "range", "box_loss[].detach", "box_loss[].new_tensor", "box_loss[].new_tensor", "[].float", "range"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.CenterHead._sigmoid", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update"], ["", "def", "loss", "(", "self", ",", "example", ",", "preds_dicts", ",", "**", "kwargs", ")", ":", "\n", "        ", "rets", "=", "[", "]", "\n", "\n", "for", "task_id", ",", "preds_dict", "in", "enumerate", "(", "preds_dicts", ")", ":", "\n", "# heatmap focal loss", "\n", "            ", "hm", "=", "self", ".", "num_classes", "[", "task_id", "]", "\n", "preds_dict", "[", "'hm'", "]", "=", "self", ".", "_sigmoid", "(", "preds_dict", "[", "'hm'", "]", ")", "\n", "\n", "#HM Loss", "\n", "if", "self", ".", "two_stage", ":", "\n", "                ", "hm_loss", "=", "torch", ".", "tensor", "(", "0", ")", ".", "cuda", "(", ")", "\n", "", "elif", "self", ".", "reverse", ":", "\n", "                ", "hm_loss", "=", "self", ".", "crit", "(", "preds_dict", "[", "'hm'", "]", ",", "example", "[", "'hm'", "]", "[", "-", "1", "]", "[", "task_id", "]", ",", "example", "[", "'ind'", "]", "[", "-", "1", "]", "[", "task_id", "]", ",", "example", "[", "'mask'", "]", "[", "-", "1", "]", "[", "task_id", "]", ",", "example", "[", "'cat'", "]", "[", "-", "1", "]", "[", "task_id", "]", ")", "\n", "", "elif", "self", ".", "sparse", ":", "\n", "#hm_loss = self.crit(preds_dict['hm'], example['hm'][(self.timesteps - 1) * (task_id // 2)][task_id % 2], example['ind'][(self.timesteps - 1) * (task_id // 2)][task_id % 2], example['mask'][(self.timesteps - 1) * (task_id // 2)][task_id % 2], example['cat'][(self.timesteps - 1) * (task_id // 2)][task_id % 2])", "\n", "                ", "hm_loss", "=", "self", ".", "crit", "(", "preds_dict", "[", "'hm'", "]", ",", "example", "[", "'hm'", "]", "[", "(", "self", ".", "timesteps", "-", "1", ")", "*", "(", "task_id", ")", "]", "[", "0", "]", ",", "example", "[", "'ind'", "]", "[", "(", "self", ".", "timesteps", "-", "1", ")", "*", "(", "task_id", ")", "]", "[", "0", "]", ",", "example", "[", "'mask'", "]", "[", "(", "self", ".", "timesteps", "-", "1", ")", "*", "(", "task_id", ")", "]", "[", "0", "]", ",", "example", "[", "'cat'", "]", "[", "(", "self", ".", "timesteps", "-", "1", ")", "*", "(", "task_id", ")", "]", "[", "0", "]", ")", "\n", "", "elif", "self", ".", "dense", ":", "\n", "#hm_loss = self.crit(preds_dict['hm'], example['hm'][task_id // 2][task_id % 2], example['ind'][task_id // 2][task_id % 2], example['mask'][task_id // 2][task_id % 2], example['cat'][task_id // 2][task_id % 2])", "\n", "                ", "hm_loss", "=", "self", ".", "crit", "(", "preds_dict", "[", "'hm'", "]", ",", "example", "[", "'hm'", "]", "[", "task_id", "]", "[", "0", "]", ",", "example", "[", "'ind'", "]", "[", "task_id", "]", "[", "0", "]", ",", "example", "[", "'mask'", "]", "[", "task_id", "]", "[", "0", "]", ",", "example", "[", "'cat'", "]", "[", "task_id", "]", "[", "0", "]", ")", "\n", "", "elif", "self", ".", "classify", ":", "\n", "                ", "hm_loss", "=", "self", ".", "crit", "(", "preds_dict", "[", "'hm'", "]", ",", "example", "[", "'hm_trajectory'", "]", "[", "task_id", "]", "[", "0", "]", ",", "example", "[", "'ind_trajectory'", "]", "[", "task_id", "]", "[", "0", "]", ",", "example", "[", "'mask_trajectory'", "]", "[", "task_id", "]", "[", "0", "]", ",", "example", "[", "'cat_trajectory'", "]", "[", "task_id", "]", "[", "0", "]", ")", "\n", "", "elif", "self", ".", "wide_head", ":", "\n", "                ", "hm_loss", "=", "self", ".", "crit", "(", "preds_dict", "[", "'hm'", "]", ",", "example", "[", "'hm_forecast'", "]", "[", "task_id", "]", "[", "0", "]", ",", "example", "[", "'ind_forecast'", "]", "[", "task_id", "]", "[", "0", "]", ",", "example", "[", "'mask_forecast'", "]", "[", "task_id", "]", "[", "0", "]", ",", "example", "[", "'cat_forecast'", "]", "[", "task_id", "]", "[", "0", "]", ")", "\n", "\n", "", "else", ":", "\n", "                ", "hm_loss", "=", "self", ".", "crit", "(", "preds_dict", "[", "'hm'", "]", ",", "example", "[", "'hm'", "]", "[", "0", "]", "[", "task_id", "]", ",", "example", "[", "'ind'", "]", "[", "0", "]", "[", "task_id", "]", ",", "example", "[", "'mask'", "]", "[", "0", "]", "[", "task_id", "]", ",", "example", "[", "'cat'", "]", "[", "0", "]", "[", "task_id", "]", ")", "\n", "\n", "#Generate Target Boxes", "\n", "", "if", "self", ".", "reverse", ":", "\n", "                ", "target_box", "=", "[", "example", "[", "'anno_box'", "]", "[", "i", "]", "[", "task_id", "]", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", "[", ":", ":", "-", "1", "]", "\n", "", "elif", "self", ".", "sparse", ":", "\n", "                ", "if", "task_id", "==", "0", ":", "\n", "#target_box = [example['anno_box'][i][task_id % 2] for i in range(self.timesteps)]", "\n", "                    ", "target_box", "=", "[", "example", "[", "'anno_box'", "]", "[", "i", "]", "[", "0", "]", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", "\n", "", "else", ":", "\n", "#target_box = [example['anno_box'][i][task_id % 2] for i in range(self.timesteps)][::-1]", "\n", "                    ", "target_box", "=", "[", "example", "[", "'anno_box'", "]", "[", "i", "]", "[", "0", "]", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", "[", ":", ":", "-", "1", "]", "\n", "", "", "elif", "self", ".", "dense", ":", "\n", "#target_box = example['anno_box'][task_id // 2][task_id % 2]", "\n", "                ", "target_box", "=", "example", "[", "'anno_box'", "]", "[", "task_id", "]", "[", "0", "]", "\n", "\n", "", "elif", "self", ".", "classify", ":", "\n", "                ", "target_box", "=", "example", "[", "'anno_box_trajectory'", "]", "[", "task_id", "]", "[", "0", "]", "\n", "\n", "", "elif", "self", ".", "wide_head", ":", "\n", "                ", "target_box", "=", "example", "[", "'anno_box_trajectory'", "]", "[", "task_id", "]", "[", "0", "]", "\n", "\n", "", "else", ":", "\n", "                ", "target_box", "=", "[", "example", "[", "'anno_box'", "]", "[", "i", "]", "[", "task_id", "]", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", "\n", "\n", "# reconstruct the anno_box from multiple reg heads", "\n", "", "if", "self", ".", "dataset", "in", "[", "'waymo'", ",", "'nuscenes'", "]", ":", "\n", "                ", "if", "'vel'", "in", "preds_dict", "and", "'rvel'", "in", "preds_dict", "and", "'rot'", "in", "preds_dict", "and", "'rrot'", "in", "preds_dict", ":", "\n", "                    ", "if", "self", ".", "dense", "or", "self", ".", "classify", "or", "self", ".", "wide_head", ":", "\n", "                        ", "preds_dict", "[", "'anno_box'", "]", "=", "torch", ".", "cat", "(", "(", "preds_dict", "[", "'reg'", "]", ",", "preds_dict", "[", "'height'", "]", ",", "preds_dict", "[", "'dim'", "]", ",", "\n", "preds_dict", "[", "'vel'", "]", ",", "preds_dict", "[", "'rvel'", "]", ",", "preds_dict", "[", "'rot'", "]", ",", "preds_dict", "[", "'rrot'", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "else", ":", "\n", "                        ", "preds_dict", "[", "'anno_box'", "]", "=", "[", "torch", ".", "cat", "(", "(", "preds_dict", "[", "'reg'", "]", ",", "preds_dict", "[", "'height'", "]", ",", "preds_dict", "[", "'dim'", "]", ",", "\n", "preds_dict", "[", "'vel'", "]", "[", ":", ",", "2", "*", "i", ":", "2", "*", "i", "+", "2", ",", ":", ":", "]", ",", "preds_dict", "[", "'rvel'", "]", "[", ":", ",", "2", "*", "i", ":", "2", "*", "i", "+", "2", ",", ":", ":", "]", ",", "preds_dict", "[", "'rot'", "]", ",", "preds_dict", "[", "'rrot'", "]", ")", ",", "dim", "=", "1", ")", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", "\n", "\n", "", "", "elif", "'vel'", "in", "preds_dict", "and", "'rot'", "in", "preds_dict", ":", "\n", "                    ", "if", "self", ".", "dense", "or", "self", ".", "classify", "or", "self", ".", "wide_head", ":", "\n", "                        ", "preds_dict", "[", "'anno_box'", "]", "=", "torch", ".", "cat", "(", "(", "preds_dict", "[", "'reg'", "]", ",", "preds_dict", "[", "'height'", "]", ",", "preds_dict", "[", "'dim'", "]", ",", "\n", "preds_dict", "[", "'vel'", "]", ",", "preds_dict", "[", "'rot'", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "target_box", "=", "target_box", "[", "...", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "-", "2", ",", "-", "1", "]", "]", "\n", "\n", "", "else", ":", "\n", "                        ", "preds_dict", "[", "'anno_box'", "]", "=", "[", "torch", ".", "cat", "(", "(", "preds_dict", "[", "'reg'", "]", ",", "preds_dict", "[", "'height'", "]", ",", "preds_dict", "[", "'dim'", "]", ",", "\n", "preds_dict", "[", "'vel'", "]", "[", ":", ",", "2", "*", "i", ":", "2", "*", "i", "+", "2", ",", ":", ":", "]", ",", "preds_dict", "[", "'rot'", "]", ")", ",", "dim", "=", "1", ")", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", "\n", "\n", "\n", "target_box", "=", "[", "target_box", "[", "i", "]", "[", "...", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "-", "2", ",", "-", "1", "]", "]", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", "# remove vel target                       ", "\n", "\n", "", "", "else", ":", "\n", "                    ", "preds_dict", "[", "'anno_box'", "]", "=", "[", "torch", ".", "cat", "(", "(", "preds_dict", "[", "'reg'", "]", ",", "preds_dict", "[", "'height'", "]", ",", "preds_dict", "[", "'dim'", "]", ",", "\n", "preds_dict", "[", "'rot'", "]", ")", ",", "dim", "=", "1", ")", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", "\n", "\n", "target_box", "=", "[", "target_box", "[", "i", "]", "[", "...", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "-", "2", ",", "-", "1", "]", "]", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", "# remove vel target                       ", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "ret", "=", "{", "}", "\n", "\n", "# Regression loss for dimension, offset, height, rotation   ", "\n", "if", "self", ".", "reverse", ":", "\n", "                ", "box_loss", "=", "[", "self", ".", "crit_reg", "(", "preds_dict", "[", "'anno_box'", "]", "[", "i", "]", ",", "example", "[", "'mask'", "]", "[", "-", "1", "]", "[", "task_id", "]", ",", "example", "[", "'ind'", "]", "[", "-", "1", "]", "[", "task_id", "]", ",", "target_box", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", "\n", "\n", "", "elif", "self", ".", "sparse", ":", "\n", "#box_loss = [self.crit_reg(preds_dict['anno_box'][i], example['mask'][(self.timesteps - 1) * (task_id // 2)][task_id % 2], example['ind'][(self.timesteps - 1) * (task_id // 2)][task_id % 2], target_box[(self.timesteps - 1) * (task_id // 2)]) for i in range(self.timesteps)]", "\n", "                ", "box_loss", "=", "[", "self", ".", "crit_reg", "(", "preds_dict", "[", "'anno_box'", "]", "[", "i", "]", ",", "example", "[", "'mask'", "]", "[", "(", "self", ".", "timesteps", "-", "1", ")", "*", "(", "task_id", ")", "]", "[", "0", "]", ",", "example", "[", "'ind'", "]", "[", "(", "self", ".", "timesteps", "-", "1", ")", "*", "(", "task_id", ")", "]", "[", "0", "]", ",", "target_box", "[", "(", "self", ".", "timesteps", "-", "1", ")", "*", "(", "task_id", ")", "]", ")", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", "\n", "\n", "", "elif", "self", ".", "dense", ":", "\n", "#box_loss = self.crit_reg(preds_dict['anno_box'], example['mask'][task_id // 2][task_id % 2], example['ind'][task_id // 2][task_id % 2], target_box[task_id // 2])", "\n", "                ", "box_loss", "=", "self", ".", "crit_reg", "(", "preds_dict", "[", "'anno_box'", "]", ",", "example", "[", "'mask'", "]", "[", "task_id", "]", "[", "0", "]", ",", "example", "[", "'ind'", "]", "[", "task_id", "]", "[", "0", "]", ",", "target_box", ")", "\n", "\n", "", "elif", "self", ".", "classify", ":", "\n", "                ", "box_loss", "=", "self", ".", "crit_reg", "(", "preds_dict", "[", "'anno_box'", "]", ",", "example", "[", "'mask_trajectory'", "]", "[", "task_id", "]", "[", "0", "]", ",", "example", "[", "'ind_trajectory'", "]", "[", "task_id", "]", "[", "0", "]", ",", "target_box", ")", "\n", "\n", "", "elif", "self", ".", "wide_head", ":", "\n", "                ", "box_loss", "=", "self", ".", "crit_reg", "(", "preds_dict", "[", "'anno_box'", "]", ",", "example", "[", "'mask_forecast'", "]", "[", "task_id", "]", "[", "0", "]", ",", "example", "[", "'ind_forecast'", "]", "[", "task_id", "]", "[", "0", "]", ",", "target_box", ")", "\n", "\n", "", "else", ":", "\n", "                ", "box_loss", "=", "[", "self", ".", "crit_reg", "(", "preds_dict", "[", "'anno_box'", "]", "[", "i", "]", ",", "example", "[", "'mask'", "]", "[", "0", "]", "[", "task_id", "]", ",", "example", "[", "'ind'", "]", "[", "0", "]", "[", "task_id", "]", ",", "target_box", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", "\n", "\n", "\n", "", "loc_loss", "=", "[", "]", "\n", "\n", "if", "self", ".", "two_stage", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", ":", "\n", "                    ", "loc_loss", ".", "append", "(", "(", "box_loss", "[", "i", "]", "*", "box_loss", "[", "i", "]", ".", "new_tensor", "(", "self", ".", "code_weights_two_stage_forecast", ")", ")", ".", "sum", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "dense", "or", "self", ".", "classify", "or", "self", ".", "wide_head", ":", "\n", "                    ", "loc_loss", ".", "append", "(", "(", "box_loss", "*", "box_loss", ".", "new_tensor", "(", "self", ".", "code_weights", ")", ")", ".", "sum", "(", ")", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", ":", "\n", "                        ", "loc_loss", ".", "append", "(", "(", "box_loss", "[", "i", "]", "*", "box_loss", "[", "i", "]", ".", "new_tensor", "(", "self", ".", "code_weights", ")", ")", ".", "sum", "(", ")", "if", "i", "==", "0", "else", "(", "box_loss", "[", "i", "]", "*", "box_loss", "[", "i", "]", ".", "new_tensor", "(", "self", ".", "code_weights_forecast", ")", ")", ".", "sum", "(", ")", ")", "\n", "\n", "", "", "", "loss", "=", "hm_loss", "+", "self", ".", "weight", "*", "sum", "(", "loc_loss", ")", "\n", "\n", "if", "self", ".", "sparse", ":", "\n", "#ret.update({'loss': loss, 'hm_loss': hm_loss.detach().cpu(), 'loc_loss': loc_loss, 'loc_loss_elem': [box_loss[i].detach().cpu() for i in range(self.timesteps)], 'num_positive': sum(sum(example['mask'][(self.timesteps - 1) * (task_id // 2)][task_id % 2].float()))})", "\n", "                ", "ret", ".", "update", "(", "{", "'loss'", ":", "loss", ",", "'hm_loss'", ":", "hm_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "'loc_loss'", ":", "loc_loss", ",", "'loc_loss_elem'", ":", "[", "box_loss", "[", "i", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", ",", "'num_positive'", ":", "sum", "(", "sum", "(", "example", "[", "'mask'", "]", "[", "(", "self", ".", "timesteps", "-", "1", ")", "*", "(", "task_id", ")", "]", "[", "0", "]", ".", "float", "(", ")", ")", ")", "}", ")", "\n", "\n", "", "elif", "self", ".", "dense", "or", "self", ".", "classify", "or", "self", ".", "wide_head", ":", "\n", "#ret.update({'loss': loss, 'hm_loss': hm_loss.detach().cpu(), 'loc_loss': loc_loss, 'loc_loss_elem': box_loss.detach().cpu(), 'num_positive': sum(sum(example['mask'][task_id // 2][task_id % 2].float()))})", "\n", "                ", "ret", ".", "update", "(", "{", "'loss'", ":", "loss", ",", "'hm_loss'", ":", "hm_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "'loc_loss'", ":", "loc_loss", ",", "'loc_loss_elem'", ":", "box_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "'num_positive'", ":", "sum", "(", "sum", "(", "example", "[", "'mask'", "]", "[", "task_id", "]", "[", "0", "]", ".", "float", "(", ")", ")", ")", "}", ")", "\n", "\n", "", "else", ":", "\n", "                ", "ret", ".", "update", "(", "{", "'loss'", ":", "loss", ",", "'hm_loss'", ":", "hm_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "'loc_loss'", ":", "loc_loss", ",", "'loc_loss_elem'", ":", "[", "box_loss", "[", "i", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", ",", "'num_positive'", ":", "sum", "(", "sum", "(", "sum", "(", "[", "example", "[", "'mask'", "]", "[", "i", "]", "[", "task_id", "]", ".", "float", "(", ")", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", ")", ")", ")", "}", ")", "\n", "\n", "", "rets", ".", "append", "(", "ret", ")", "\n", "\n", "", "\"\"\"convert batch-key to key-batch\n        \"\"\"", "\n", "\n", "rets_merged", "=", "defaultdict", "(", "list", ")", "\n", "for", "ret", "in", "rets", ":", "\n", "            ", "for", "k", ",", "v", "in", "ret", ".", "items", "(", ")", ":", "\n", "                ", "rets_merged", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "", "return", "rets_merged", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.CenterHead.predict": [[541, 696], ["torch.no_grad", "enumerate", "len", "range", "len", "torch.tensor", "preds_dict.items", "torch.sigmoid", "torch.exp", "torch.atan2", "batch_hm.reshape.reshape.size", "batch_reg.reshape.reshape.reshape", "batch_hei.reshape.reshape.reshape", "batch_rot.reshape.reshape.reshape", "batch_dim.reshape.reshape.reshape", "batch_hm.reshape.reshape.reshape", "torch.meshgrid", "ys.view().repeat().to.view().repeat().to.view().repeat().to", "xs.view().repeat().to.view().repeat().to.view().repeat().to", "metas.append", "test_cfg.get", "[].keys", "ret_list.append", "len", "forecast_preds_dicts.append", "val.permute().contiguous", "xs.view().repeat().to.view().repeat().to.view", "ys.view().repeat().to.view().repeat().to.view", "batch_vel.reshape.reshape.reshape", "batch_rvel.reshape.reshape.reshape", "torch.cat", "rets.append", "range", "copy.deepcopy", "forecast_preds_dicts.append", "forecast_preds_dicts.append", "len", "torch.arange", "torch.arange", "ys.view().repeat().to.view().repeat().to.view().repeat", "xs.view().repeat().to.view().repeat().to.view().repeat", "batch_vel.reshape.reshape.reshape", "torch.cat", "torch.cat", "center_head.CenterHead.post_processing", "torch.cat", "range", "range", "copy.deepcopy", "copy.deepcopy", "[].unsqueeze", "forecast_preds_dicts.append", "val.permute", "enumerate", "torch.cat", "copy.deepcopy", "hm.unsqueeze", "forecast_preds_dicts.append", "ys.view().repeat().to.view().repeat().to.view", "xs.view().repeat().to.view().repeat().to.view", "range", "copy.deepcopy", "torch.max"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.CenterHead.post_processing"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "predict", "(", "self", ",", "example", ",", "preds_dicts", ",", "test_cfg", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"decode, nms, then return the detection result. Additionaly support double flip testing \n        \"\"\"", "\n", "# get loss info", "\n", "rets", "=", "[", "]", "\n", "metas", "=", "[", "]", "\n", "\n", "post_center_range", "=", "test_cfg", ".", "post_center_limit_range", "\n", "if", "len", "(", "post_center_range", ")", ">", "0", ":", "\n", "            ", "post_center_range", "=", "torch", ".", "tensor", "(", "\n", "post_center_range", ",", "\n", "dtype", "=", "preds_dicts", "[", "0", "]", "[", "'hm'", "]", ".", "dtype", ",", "\n", "device", "=", "preds_dicts", "[", "0", "]", "[", "'hm'", "]", ".", "device", ",", "\n", ")", "\n", "\n", "", "forecast_preds_dicts", "=", "[", "]", "\n", "\n", "if", "self", ".", "standard", "or", "self", ".", "reverse", ":", "\n", "            ", "preds_dict", "=", "preds_dicts", "[", "0", "]", "\n", "vels", "=", "[", "preds_dict", "[", "'vel'", "]", "[", ":", ",", "2", "*", "i", ":", "2", "*", "i", "+", "2", "]", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", "\n", "\n", "if", "len", "(", "vels", ")", "==", "1", ":", "\n", "                ", "vels", "=", "self", ".", "target_timesteps", "*", "vels", "\n", "\n", "", "self", ".", "num_classes", "=", "[", "1", "]", "*", "self", ".", "target_timesteps", "\n", "\n", "for", "vel", "in", "vels", ":", "\n", "                ", "preds_dict", "[", "\"vel\"", "]", "=", "vel", "\n", "forecast_preds_dicts", ".", "append", "(", "copy", ".", "deepcopy", "(", "preds_dict", ")", ")", "\n", "\n", "", "", "elif", "self", ".", "sparse", ":", "\n", "            ", "forward_dict", "=", "preds_dicts", "[", "0", "]", "\n", "reverse_dict", "=", "preds_dicts", "[", "1", "]", "\n", "\n", "forward_vels", "=", "[", "forward_dict", "[", "'vel'", "]", "[", ":", ",", "2", "*", "i", ":", "2", "*", "i", "+", "2", "]", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", "\n", "reverse_vels", "=", "[", "reverse_dict", "[", "'vel'", "]", "[", ":", ",", "2", "*", "i", ":", "2", "*", "i", "+", "2", "]", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", "\n", "\n", "self", ".", "num_classes", "=", "[", "1", ",", "1", "]", "*", "self", ".", "target_timesteps", "\n", "\n", "for", "vel", "in", "forward_vels", ":", "\n", "                ", "forward_dict", "[", "\"vel\"", "]", "=", "vel", "\n", "forecast_preds_dicts", ".", "append", "(", "copy", ".", "deepcopy", "(", "forward_dict", ")", ")", "\n", "\n", "", "for", "vel", "in", "reverse_vels", ":", "\n", "                ", "reverse_dict", "[", "\"vel\"", "]", "=", "vel", "\n", "forecast_preds_dicts", ".", "append", "(", "copy", ".", "deepcopy", "(", "reverse_dict", ")", ")", "\n", "\n", "", "", "elif", "self", ".", "classify", ":", "\n", "            ", "self", ".", "num_classes", "=", "self", ".", "timesteps", "*", "[", "1", "]", "\n", "for", "pred_dict", "in", "preds_dicts", ":", "\n", "                ", "pred_dict", "[", "\"hm\"", "]", "=", "torch", ".", "max", "(", "pred_dict", "[", "\"hm\"", "]", ",", "dim", "=", "1", ")", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "forecast_preds_dicts", ".", "append", "(", "copy", ".", "deepcopy", "(", "pred_dict", ")", ")", "\n", "\n", "", "forecast_pred_dicts", "=", "pred_dict", "\n", "\n", "", "elif", "self", ".", "wide_head", ":", "\n", "            ", "self", ".", "num_classes", "=", "self", ".", "timesteps", "*", "[", "1", "]", "\n", "pred_dict", "=", "preds_dicts", "[", "0", "]", "\n", "hms", "=", "[", "pred_dict", "[", "'hm'", "]", "[", ":", ",", "i", "]", "for", "i", "in", "range", "(", "self", ".", "timesteps", ")", "]", "\n", "\n", "for", "hm", "in", "hms", ":", "\n", "                ", "pred_dict", "[", "\"hm\"", "]", "=", "hm", ".", "unsqueeze", "(", "1", ")", "\n", "forecast_preds_dicts", ".", "append", "(", "copy", ".", "deepcopy", "(", "pred_dict", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "forecast_preds_dicts", "=", "preds_dicts", "\n", "\n", "", "for", "task_id", ",", "preds_dict", "in", "enumerate", "(", "forecast_preds_dicts", ")", ":", "\n", "# convert N C H W to N H W C ", "\n", "            ", "for", "key", ",", "val", "in", "preds_dict", ".", "items", "(", ")", ":", "\n", "                ", "preds_dict", "[", "key", "]", "=", "val", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "batch_size", "=", "preds_dict", "[", "'hm'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "if", "\"metadata\"", "not", "in", "example", "or", "len", "(", "example", "[", "\"metadata\"", "]", ")", "==", "0", ":", "\n", "                ", "meta_list", "=", "[", "None", "]", "*", "batch_size", "\n", "", "else", ":", "\n", "                ", "meta_list", "=", "example", "[", "\"metadata\"", "]", "\n", "\n", "", "batch_hm", "=", "torch", ".", "sigmoid", "(", "preds_dict", "[", "'hm'", "]", ")", "\n", "\n", "batch_dim", "=", "torch", ".", "exp", "(", "preds_dict", "[", "'dim'", "]", ")", "\n", "\n", "batch_rots", "=", "preds_dict", "[", "'rot'", "]", "[", "...", ",", "0", ":", "1", "]", "\n", "batch_rotc", "=", "preds_dict", "[", "'rot'", "]", "[", "...", ",", "1", ":", "2", "]", "\n", "batch_reg", "=", "preds_dict", "[", "'reg'", "]", "\n", "batch_hei", "=", "preds_dict", "[", "'height'", "]", "\n", "\n", "batch_rot", "=", "torch", ".", "atan2", "(", "batch_rots", ",", "batch_rotc", ")", "\n", "\n", "batch", ",", "H", ",", "W", ",", "num_cls", "=", "batch_hm", ".", "size", "(", ")", "\n", "\n", "batch_reg", "=", "batch_reg", ".", "reshape", "(", "batch", ",", "H", "*", "W", ",", "2", ")", "\n", "batch_hei", "=", "batch_hei", ".", "reshape", "(", "batch", ",", "H", "*", "W", ",", "1", ")", "\n", "\n", "batch_rot", "=", "batch_rot", ".", "reshape", "(", "batch", ",", "H", "*", "W", ",", "1", ")", "\n", "batch_dim", "=", "batch_dim", ".", "reshape", "(", "batch", ",", "H", "*", "W", ",", "3", ")", "\n", "batch_hm", "=", "batch_hm", ".", "reshape", "(", "batch", ",", "H", "*", "W", ",", "num_cls", ")", "\n", "\n", "ys", ",", "xs", "=", "torch", ".", "meshgrid", "(", "[", "torch", ".", "arange", "(", "0", ",", "H", ")", ",", "torch", ".", "arange", "(", "0", ",", "W", ")", "]", ")", "\n", "ys", "=", "ys", ".", "view", "(", "1", ",", "H", ",", "W", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", ".", "to", "(", "batch_hm", ")", "\n", "xs", "=", "xs", ".", "view", "(", "1", ",", "H", ",", "W", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", ".", "to", "(", "batch_hm", ")", "\n", "\n", "xs", "=", "xs", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", "+", "batch_reg", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "ys", "=", "ys", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", "+", "batch_reg", "[", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "\n", "xs", "=", "xs", "*", "test_cfg", ".", "out_size_factor", "*", "test_cfg", ".", "voxel_size", "[", "0", "]", "+", "test_cfg", ".", "pc_range", "[", "0", "]", "\n", "ys", "=", "ys", "*", "test_cfg", ".", "out_size_factor", "*", "test_cfg", ".", "voxel_size", "[", "1", "]", "+", "test_cfg", ".", "pc_range", "[", "1", "]", "\n", "\n", "if", "'rvel'", "in", "preds_dict", ":", "\n", "                ", "batch_vel", "=", "preds_dict", "[", "'vel'", "]", "\n", "batch_vel", "=", "batch_vel", ".", "reshape", "(", "batch", ",", "H", "*", "W", ",", "2", ")", "\n", "\n", "batch_rvel", "=", "preds_dict", "[", "'rvel'", "]", "\n", "batch_rvel", "=", "batch_rvel", ".", "reshape", "(", "batch", ",", "H", "*", "W", ",", "2", ")", "\n", "\n", "batch_box_preds", "=", "torch", ".", "cat", "(", "[", "xs", ",", "ys", ",", "batch_hei", ",", "batch_dim", ",", "batch_vel", ",", "batch_rvel", ",", "batch_rot", "]", ",", "dim", "=", "2", ")", "\n", "\n", "", "elif", "'vel'", "in", "preds_dict", ":", "\n", "                ", "batch_vel", "=", "preds_dict", "[", "'vel'", "]", "\n", "batch_vel", "=", "batch_vel", ".", "reshape", "(", "batch", ",", "H", "*", "W", ",", "2", ")", "\n", "\n", "batch_box_preds", "=", "torch", ".", "cat", "(", "[", "xs", ",", "ys", ",", "batch_hei", ",", "batch_dim", ",", "batch_vel", ",", "batch_rot", "]", ",", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "                ", "batch_box_preds", "=", "torch", ".", "cat", "(", "[", "xs", ",", "ys", ",", "batch_hei", ",", "batch_dim", ",", "batch_rot", "]", ",", "dim", "=", "2", ")", "\n", "\n", "", "metas", ".", "append", "(", "meta_list", ")", "\n", "\n", "if", "test_cfg", ".", "get", "(", "'per_class_nms'", ",", "False", ")", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "rets", ".", "append", "(", "self", ".", "post_processing", "(", "batch_box_preds", ",", "batch_hm", ",", "test_cfg", ",", "post_center_range", ",", "task_id", ")", ")", "\n", "\n", "# Merge branches results", "\n", "", "", "ret_list", "=", "[", "]", "\n", "num_samples", "=", "len", "(", "rets", "[", "0", "]", ")", "\n", "\n", "ret_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "            ", "ret", "=", "{", "}", "\n", "for", "k", "in", "rets", "[", "0", "]", "[", "i", "]", ".", "keys", "(", ")", ":", "\n", "                ", "if", "k", "in", "[", "\"box3d_lidar\"", ",", "\"scores\"", "]", ":", "\n", "                    ", "ret", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "ret", "[", "i", "]", "[", "k", "]", "for", "ret", "in", "rets", "]", ")", "\n", "", "elif", "k", "in", "[", "\"label_preds\"", "]", ":", "\n", "                    ", "flag", "=", "0", "\n", "for", "j", ",", "num_class", "in", "enumerate", "(", "self", ".", "num_classes", ")", ":", "\n", "                        ", "rets", "[", "j", "]", "[", "i", "]", "[", "k", "]", "+=", "flag", "\n", "flag", "+=", "num_class", "\n", "", "ret", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "ret", "[", "i", "]", "[", "k", "]", "for", "ret", "in", "rets", "]", ")", "\n", "\n", "", "", "ret", "[", "'metadata'", "]", "=", "metas", "[", "0", "]", "[", "i", "]", "\n", "ret_list", ".", "append", "(", "ret", ")", "\n", "\n", "", "return", "ret_list", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head.CenterHead.post_processing": [[698, 748], ["torch.no_grad", "len", "range", "torch.max", "test_cfg.get", "prediction_dicts.append", "torch.cat", "center_head._circle_nms", "det3d.core.box_torch_ops.rotate_nms_pcdet", "boxes_for_nms.float", "scores.float", "scores.view"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head._circle_nms", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.rotate_nms_pcdet"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "post_processing", "(", "self", ",", "batch_box_preds", ",", "batch_hm", ",", "test_cfg", ",", "post_center_range", ",", "task_id", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "batch_hm", ")", "\n", "\n", "prediction_dicts", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "box_preds", "=", "batch_box_preds", "[", "i", "]", "\n", "hm_preds", "=", "batch_hm", "[", "i", "]", "\n", "\n", "scores", ",", "labels", "=", "torch", ".", "max", "(", "hm_preds", ",", "dim", "=", "-", "1", ")", "\n", "\n", "score_mask", "=", "scores", ">", "test_cfg", ".", "score_threshold", "\n", "distance_mask", "=", "(", "box_preds", "[", "...", ",", ":", "3", "]", ">=", "post_center_range", "[", ":", "3", "]", ")", ".", "all", "(", "1", ")", "&", "(", "box_preds", "[", "...", ",", ":", "3", "]", "<=", "post_center_range", "[", "3", ":", "]", ")", ".", "all", "(", "1", ")", "\n", "\n", "mask", "=", "distance_mask", "&", "score_mask", "\n", "\n", "box_preds", "=", "box_preds", "[", "mask", "]", "\n", "scores", "=", "scores", "[", "mask", "]", "\n", "labels", "=", "labels", "[", "mask", "]", "\n", "\n", "if", "batch_box_preds", ".", "shape", "[", "-", "1", "]", "==", "9", ":", "\n", "                ", "boxes_for_nms", "=", "box_preds", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "-", "1", "]", "]", "\n", "\n", "", "else", ":", "\n", "                ", "boxes_for_nms", "=", "box_preds", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "-", "2", "]", "]", "\n", "\n", "", "if", "test_cfg", ".", "get", "(", "'circular_nms'", ",", "False", ")", ":", "\n", "                ", "centers", "=", "boxes_for_nms", "[", ":", ",", "[", "0", ",", "1", "]", "]", "\n", "boxes", "=", "torch", ".", "cat", "(", "[", "centers", ",", "scores", ".", "view", "(", "-", "1", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "selected", "=", "_circle_nms", "(", "boxes", ",", "min_radius", "=", "test_cfg", ".", "min_radius", "[", "task_id", "]", ",", "post_max_size", "=", "test_cfg", ".", "nms", ".", "nms_post_max_size", ")", "\n", "", "else", ":", "\n", "                ", "selected", "=", "box_torch_ops", ".", "rotate_nms_pcdet", "(", "boxes_for_nms", ".", "float", "(", ")", ",", "scores", ".", "float", "(", ")", ",", "\n", "thresh", "=", "test_cfg", ".", "nms", ".", "nms_iou_threshold", ",", "\n", "pre_maxsize", "=", "test_cfg", ".", "nms", ".", "nms_pre_max_size", ",", "\n", "post_max_size", "=", "test_cfg", ".", "nms", ".", "nms_post_max_size", ")", "\n", "\n", "", "selected_boxes", "=", "box_preds", "[", "selected", "]", "\n", "selected_scores", "=", "scores", "[", "selected", "]", "\n", "selected_labels", "=", "labels", "[", "selected", "]", "\n", "\n", "prediction_dict", "=", "{", "\n", "'box3d_lidar'", ":", "selected_boxes", ",", "\n", "'scores'", ":", "selected_scores", ",", "\n", "'label_preds'", ":", "selected_labels", "\n", "}", "\n", "\n", "prediction_dicts", ".", "append", "(", "prediction_dict", ")", "\n", "\n", "", "return", "prediction_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox_heads.center_head._circle_nms": [[752, 761], ["torch.from_numpy().long().to", "numpy.array", "det3d.core.utils.circle_nms_jit.circle_nms", "torch.from_numpy().long", "boxes.cpu().numpy", "torch.from_numpy", "boxes.cpu"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.circle_nms_jit.circle_nms"], ["def", "_circle_nms", "(", "boxes", ",", "min_radius", ",", "post_max_size", "=", "83", ")", ":", "\n", "    ", "\"\"\"\n    NMS according to center distance\n    \"\"\"", "\n", "keep", "=", "np", ".", "array", "(", "circle_nms", "(", "boxes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "thresh", "=", "min_radius", ")", ")", "[", ":", "post_max_size", "]", "\n", "\n", "keep", "=", "torch", ".", "from_numpy", "(", "keep", ")", ".", "long", "(", ")", ".", "to", "(", "boxes", ".", "device", ")", "\n", "\n", "return", "keep", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.readers.voxel_encoder.VoxelFeatureExtractorV3.__init__": [[10, 16], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "num_input_features", "=", "4", ",", "norm_cfg", "=", "None", ",", "name", "=", "\"VoxelFeatureExtractorV3\"", "\n", ")", ":", "\n", "        ", "super", "(", "VoxelFeatureExtractorV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "num_input_features", "=", "num_input_features", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.readers.voxel_encoder.VoxelFeatureExtractorV3.forward": [[17, 25], ["points_mean.contiguous", "features[].sum", "num_voxels.type_as().view", "num_voxels.type_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "num_voxels", ",", "coors", "=", "None", ")", ":", "\n", "        ", "assert", "self", ".", "num_input_features", "==", "features", ".", "shape", "[", "-", "1", "]", "\n", "\n", "points_mean", "=", "features", "[", ":", ",", ":", ",", ":", "self", ".", "num_input_features", "]", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "False", "\n", ")", "/", "num_voxels", ".", "type_as", "(", "features", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "return", "points_mean", ".", "contiguous", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.readers.pillar_encoder.PFNLayer.__init__": [[16, 39], ["torch.nn.Module.__init__", "torch.nn.Linear", "dict", "utils.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.norm.build_norm_layer"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "norm_cfg", "=", "None", ",", "last_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Pillar Feature Net Layer.\n        The Pillar Feature Net could be composed of a series of these layers, but the PointPillars paper results only\n        used a single PFNLayer. This layer performs a similar role as second.pytorch.voxelnet.VFELayer.\n        :param in_channels: <int>. Number of input channels.\n        :param out_channels: <int>. Number of output channels.\n        :param last_layer: <bool>. If last_layer, there is no concatenation of features.\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"PFNLayer\"", "\n", "self", ".", "last_vfe", "=", "last_layer", "\n", "if", "not", "self", ".", "last_vfe", ":", "\n", "            ", "out_channels", "=", "out_channels", "//", "2", "\n", "", "self", ".", "units", "=", "out_channels", "\n", "\n", "if", "norm_cfg", "is", "None", ":", "\n", "            ", "norm_cfg", "=", "dict", "(", "type", "=", "\"BN1d\"", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "\n", "", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_channels", ",", "self", ".", "units", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "self", ".", "units", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.readers.pillar_encoder.PFNLayer.forward": [[40, 56], ["pillar_encoder.PFNLayer.linear", "pillar_encoder.PFNLayer.norm().permute().contiguous", "torch.nn.functional.relu", "torch.max", "x_max.repeat", "torch.cat", "pillar_encoder.PFNLayer.norm().permute", "pillar_encoder.PFNLayer.norm", "torch.nn.functional.relu.permute().contiguous", "torch.nn.functional.relu.permute"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_module.ConvModule.norm"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "linear", "(", "inputs", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x_max", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "last_vfe", ":", "\n", "            ", "return", "x_max", "\n", "", "else", ":", "\n", "            ", "x_repeat", "=", "x_max", ".", "repeat", "(", "1", ",", "inputs", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "x_concatenated", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_repeat", "]", ",", "dim", "=", "2", ")", "\n", "return", "x_concatenated", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.readers.pillar_encoder.PillarFeatureNet.__init__": [[60, 112], ["torch.nn.Module.__init__", "range", "torch.nn.ModuleList", "len", "list", "pfn_layers.append", "len", "pillar_encoder.PFNLayer", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_input_features", "=", "4", ",", "\n", "num_filters", "=", "(", "64", ",", ")", ",", "\n", "with_distance", "=", "False", ",", "\n", "voxel_size", "=", "(", "0.2", ",", "0.2", ",", "4", ")", ",", "\n", "pc_range", "=", "(", "0", ",", "-", "40", ",", "-", "3", ",", "70.4", ",", "40", ",", "1", ")", ",", "\n", "norm_cfg", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Pillar Feature Net.\n        The network prepares the pillar features and performs forward pass through PFNLayers. This net performs a\n        similar role to SECOND's second.pytorch.voxelnet.VoxelFeatureExtractor.\n        :param num_input_features: <int>. Number of input features, either x, y, z or x, y, z, r.\n        :param num_filters: (<int>: N). Number of features in each of the N PFNLayers.\n        :param with_distance: <bool>. Whether to include Euclidean distance to points.\n        :param voxel_size: (<float>: 3). Size of voxels, only utilize x and y size.\n        :param pc_range: (<float>: 6). Point cloud range, only utilize x and y min.\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"PillarFeatureNet\"", "\n", "assert", "len", "(", "num_filters", ")", ">", "0", "\n", "\n", "self", ".", "num_input", "=", "num_input_features", "\n", "num_input_features", "+=", "5", "\n", "if", "with_distance", ":", "\n", "            ", "num_input_features", "+=", "1", "\n", "", "self", ".", "_with_distance", "=", "with_distance", "\n", "\n", "# Create PillarFeatureNet layers", "\n", "num_filters", "=", "[", "num_input_features", "]", "+", "list", "(", "num_filters", ")", "\n", "pfn_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "num_filters", ")", "-", "1", ")", ":", "\n", "            ", "in_filters", "=", "num_filters", "[", "i", "]", "\n", "out_filters", "=", "num_filters", "[", "i", "+", "1", "]", "\n", "if", "i", "<", "len", "(", "num_filters", ")", "-", "2", ":", "\n", "                ", "last_layer", "=", "False", "\n", "", "else", ":", "\n", "                ", "last_layer", "=", "True", "\n", "", "pfn_layers", ".", "append", "(", "\n", "PFNLayer", "(", "\n", "in_filters", ",", "out_filters", ",", "norm_cfg", "=", "norm_cfg", ",", "last_layer", "=", "last_layer", "\n", ")", "\n", ")", "\n", "", "self", ".", "pfn_layers", "=", "nn", ".", "ModuleList", "(", "pfn_layers", ")", "\n", "\n", "# Need pillar (voxel) size and x/y offset in order to calculate pillar offset", "\n", "self", ".", "vx", "=", "voxel_size", "[", "0", "]", "\n", "self", ".", "vy", "=", "voxel_size", "[", "1", "]", "\n", "self", ".", "x_offset", "=", "self", ".", "vx", "/", "2", "+", "pc_range", "[", "0", "]", "\n", "self", ".", "y_offset", "=", "self", ".", "vy", "/", "2", "+", "pc_range", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.readers.pillar_encoder.PillarFeatureNet.forward": [[113, 154], ["torch.zeros_like", "torch.cat", "det3d.models.utils.get_paddings_indicator", "torch.unsqueeze().type_as", "pfn.squeeze", "features[].sum", "num_voxels.type_as().view", "torch.norm", "features_ls.append", "pfn", "torch.unsqueeze", "num_voxels.type_as", "coors[].to().unsqueeze", "coors[].to().unsqueeze", "coors[].to", "coors[].to"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.get_paddings_indicator", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.conv_module.ConvModule.norm"], ["", "def", "forward", "(", "self", ",", "features", ",", "num_voxels", ",", "coors", ")", ":", "\n", "        ", "device", "=", "features", ".", "device", "\n", "\n", "dtype", "=", "features", ".", "dtype", "\n", "\n", "# Find distance of x, y, and z from cluster center", "\n", "# features = features[:, :, :self.num_input]", "\n", "points_mean", "=", "features", "[", ":", ",", ":", ",", ":", "3", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "num_voxels", ".", "type_as", "(", "\n", "features", "\n", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "f_cluster", "=", "features", "[", ":", ",", ":", ",", ":", "3", "]", "-", "points_mean", "\n", "\n", "# Find distance of x, y, and z from pillar center", "\n", "# f_center = features[:, :, :2]", "\n", "f_center", "=", "torch", ".", "zeros_like", "(", "features", "[", ":", ",", ":", ",", ":", "2", "]", ")", "\n", "f_center", "[", ":", ",", ":", ",", "0", "]", "=", "features", "[", ":", ",", ":", ",", "0", "]", "-", "(", "\n", "coors", "[", ":", ",", "3", "]", ".", "to", "(", "dtype", ")", ".", "unsqueeze", "(", "1", ")", "*", "self", ".", "vx", "+", "self", ".", "x_offset", "\n", ")", "\n", "f_center", "[", ":", ",", ":", ",", "1", "]", "=", "features", "[", ":", ",", ":", ",", "1", "]", "-", "(", "\n", "coors", "[", ":", ",", "2", "]", ".", "to", "(", "dtype", ")", ".", "unsqueeze", "(", "1", ")", "*", "self", ".", "vy", "+", "self", ".", "y_offset", "\n", ")", "\n", "\n", "# Combine together feature decorations", "\n", "features_ls", "=", "[", "features", ",", "f_cluster", ",", "f_center", "]", "\n", "if", "self", ".", "_with_distance", ":", "\n", "            ", "points_dist", "=", "torch", ".", "norm", "(", "features", "[", ":", ",", ":", ",", ":", "3", "]", ",", "2", ",", "2", ",", "keepdim", "=", "True", ")", "\n", "features_ls", ".", "append", "(", "points_dist", ")", "\n", "", "features", "=", "torch", ".", "cat", "(", "features_ls", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# The feature decorations were calculated without regard to whether pillar was empty. Need to ensure that", "\n", "# empty pillars remain set to zeros.", "\n", "voxel_count", "=", "features", ".", "shape", "[", "1", "]", "\n", "mask", "=", "get_paddings_indicator", "(", "num_voxels", ",", "voxel_count", ",", "axis", "=", "0", ")", "\n", "mask", "=", "torch", ".", "unsqueeze", "(", "mask", ",", "-", "1", ")", ".", "type_as", "(", "features", ")", "\n", "features", "*=", "mask", "\n", "\n", "# Forward pass through PFNLayers", "\n", "for", "pfn", "in", "self", ".", "pfn_layers", ":", "\n", "            ", "features", "=", "pfn", "(", "features", ")", "\n", "\n", "", "return", "features", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.readers.pillar_encoder.PointPillarsScatter.__init__": [[158, 172], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "num_input_features", "=", "64", ",", "norm_cfg", "=", "None", ",", "name", "=", "\"PointPillarsScatter\"", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Point Pillar's Scatter.\n        Converts learned features from dense tensor to sparse pseudo image. This replaces SECOND's\n        second.pytorch.voxelnet.SparseMiddleExtractor.\n        :param output_shape: ([int]: 4). Required output shape of features.\n        :param num_input_features: <int>. Number of input features.\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"PointPillarsScatter\"", "\n", "self", ".", "nchannels", "=", "num_input_features", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.readers.pillar_encoder.PointPillarsScatter.forward": [[173, 210], ["range", "torch.stack", "batch_canvas.view.view.view", "torch.zeros", "indices.type.type.type", "voxels.t.t.t", "batch_canvas.view.view.append"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coords", ",", "batch_size", ",", "input_shape", ")", ":", "\n", "\n", "        ", "self", ".", "nx", "=", "input_shape", "[", "0", "]", "\n", "self", ".", "ny", "=", "input_shape", "[", "1", "]", "\n", "\n", "# batch_canvas will be the final output.", "\n", "batch_canvas", "=", "[", "]", "\n", "for", "batch_itt", "in", "range", "(", "batch_size", ")", ":", "\n", "# Create the canvas for this sample", "\n", "            ", "canvas", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "nchannels", ",", "\n", "self", ".", "nx", "*", "self", ".", "ny", ",", "\n", "dtype", "=", "voxel_features", ".", "dtype", ",", "\n", "device", "=", "voxel_features", ".", "device", ",", "\n", ")", "\n", "\n", "# Only include non-empty pillars", "\n", "batch_mask", "=", "coords", "[", ":", ",", "0", "]", "==", "batch_itt", "\n", "\n", "this_coords", "=", "coords", "[", "batch_mask", ",", ":", "]", "\n", "indices", "=", "this_coords", "[", ":", ",", "2", "]", "*", "self", ".", "nx", "+", "this_coords", "[", ":", ",", "3", "]", "\n", "indices", "=", "indices", ".", "type", "(", "torch", ".", "long", ")", "\n", "voxels", "=", "voxel_features", "[", "batch_mask", ",", ":", "]", "\n", "voxels", "=", "voxels", ".", "t", "(", ")", "\n", "\n", "# Now scatter the blob back to the canvas.", "\n", "canvas", "[", ":", ",", "indices", "]", "=", "voxels", "\n", "\n", "# Append to a list for later stacking.", "\n", "batch_canvas", ".", "append", "(", "canvas", ")", "\n", "\n", "# Stack to 3-dim tensor (batch-size, nchannels, nrows*ncols)", "\n", "", "batch_canvas", "=", "torch", ".", "stack", "(", "batch_canvas", ",", "0", ")", "\n", "\n", "# Undo the column stacking to final 4-dim tensor", "\n", "batch_canvas", "=", "batch_canvas", ".", "view", "(", "batch_size", ",", "self", ".", "nchannels", ",", "self", ".", "ny", ",", "self", ".", "nx", ")", "\n", "return", "batch_canvas", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.losses.centernet_loss.RegLoss.__init__": [[15, 17], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "RegLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.losses.centernet_loss.RegLoss.forward": [[18, 26], ["det3d.core.utils.center_utils._transpose_and_gather_feat", "mask.float().unsqueeze.float().unsqueeze.float().unsqueeze", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "loss.transpose().sum().sum.transpose().sum().sum.transpose().sum().sum", "mask.float().unsqueeze.float().unsqueeze.float", "mask.float().unsqueeze.float().unsqueeze.sum", "loss.transpose().sum().sum.transpose().sum().sum.transpose().sum", "loss.transpose().sum().sum.transpose().sum().sum.transpose"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils._transpose_and_gather_feat"], ["", "def", "forward", "(", "self", ",", "output", ",", "mask", ",", "ind", ",", "target", ")", ":", "\n", "    ", "pred", "=", "_transpose_and_gather_feat", "(", "output", ",", "ind", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "loss", "=", "F", ".", "l1_loss", "(", "pred", "*", "mask", ",", "target", "*", "mask", ",", "reduction", "=", "'none'", ")", "\n", "loss", "=", "loss", "/", "(", "mask", ".", "sum", "(", ")", "+", "1e-4", ")", "\n", "loss", "=", "loss", ".", "transpose", "(", "2", ",", "0", ")", ".", "sum", "(", "dim", "=", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.losses.centernet_loss.ForecastLoss.__init__": [[35, 37], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "ForecastLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.losses.centernet_loss.ForecastLoss.forward": [[38, 66], ["det3d.core.utils.center_utils._transpose_and_gather_feat", "det3d.core.utils.center_utils._transpose_and_gather_feat", "mask.float().unsqueeze.float().unsqueeze.float().unsqueeze", "torch.l1_loss.transpose().sum().sum", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "mask.float().unsqueeze.float().unsqueeze.float", "mask.float().unsqueeze.float().unsqueeze.sum", "torch.l1_loss.transpose().sum", "torch.l1_loss.transpose"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils._transpose_and_gather_feat"], ["", "def", "forward", "(", "self", ",", "current_pred", ",", "future_pred", ",", "current_gt", ",", "future_gt", ",", "mask", ",", "ind", ",", "reverse", ")", ":", "\n", "    ", "current_pred", "=", "_transpose_and_gather_feat", "(", "current_pred", ",", "ind", ")", "\n", "future_pred", "=", "_transpose_and_gather_feat", "(", "future_pred", ",", "ind", ")", "\n", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "unsqueeze", "(", "2", ")", "\n", "current_pred_reg", "=", "current_pred", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "current_pred_vel", "=", "current_pred", "[", ":", ",", ":", ",", "6", ":", "8", "]", "\n", "target", "=", "future_pred", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "\n", "current_gt_reg", "=", "current_gt", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "current_gt_vel", "=", "current_gt", "[", ":", ",", ":", ",", "6", ":", "8", "]", "\n", "future_gt_reg", "=", "future_gt", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "future_gt_vel", "=", "future_gt", "[", ":", ",", ":", ",", "6", ":", "8", "]", "\n", "\n", "time", "=", "(", "future_gt_reg", "-", "current_gt_reg", ")", "/", "(", "current_gt_vel", "+", "1e-4", ")", "\n", "\n", "if", "reverse", ":", "\n", "      ", "pred", "=", "current_pred_reg", "-", "time", "*", "current_pred_vel", "\n", "loss", "=", "F", ".", "l1_loss", "(", "pred", "*", "mask", ",", "target", "*", "mask", ",", "reduction", "=", "'none'", ")", "\n", "\n", "", "else", ":", "\n", "      ", "pred", "=", "current_pred_reg", "+", "time", "*", "current_pred_vel", "\n", "loss", "=", "F", ".", "l1_loss", "(", "pred", "*", "mask", ",", "target", "*", "mask", ",", "reduction", "=", "'none'", ")", "\n", "\n", "", "loss", "=", "loss", "/", "(", "mask", ".", "sum", "(", ")", "+", "1e-4", ")", "\n", "loss", "=", "loss", ".", "transpose", "(", "2", ",", "0", ")", ".", "sum", "(", "dim", "=", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.losses.centernet_loss.FastFocalLoss.__init__": [[72, 74], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "FastFocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.losses.centernet_loss.FastFocalLoss.forward": [[75, 96], ["mask.float.float.float", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "neg_loss.sum.sum.sum", "det3d.core.utils.center_utils._transpose_and_gather_feat", "det3d.core.utils.center_utils._transpose_and_gather_feat.gather", "mask.float.float.sum", "pos_loss.sum.sum.sum", "cat.unsqueeze", "mask.float.float.unsqueeze", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.center_utils._transpose_and_gather_feat", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log"], ["", "def", "forward", "(", "self", ",", "out", ",", "target", ",", "ind", ",", "mask", ",", "cat", ")", ":", "\n", "    ", "'''\n    Arguments:\n      out, target: B x C x H x W\n      ind, mask: B x M\n      cat (category id for peaks): B x M\n    '''", "\n", "mask", "=", "mask", ".", "float", "(", ")", "\n", "gt", "=", "torch", ".", "pow", "(", "1", "-", "target", ",", "4", ")", "\n", "neg_loss", "=", "torch", ".", "log", "(", "1", "-", "out", ")", "*", "torch", ".", "pow", "(", "out", ",", "2", ")", "*", "gt", "\n", "neg_loss", "=", "neg_loss", ".", "sum", "(", ")", "\n", "\n", "pos_pred_pix", "=", "_transpose_and_gather_feat", "(", "out", ",", "ind", ")", "# B x M x C", "\n", "pos_pred", "=", "pos_pred_pix", ".", "gather", "(", "2", ",", "cat", ".", "unsqueeze", "(", "2", ")", ")", "# B x M", "\n", "num_pos", "=", "mask", ".", "sum", "(", ")", "\n", "pos_loss", "=", "torch", ".", "log", "(", "pos_pred", ")", "*", "torch", ".", "pow", "(", "1", "-", "pos_pred", ",", "2", ")", "*", "mask", ".", "unsqueeze", "(", "2", ")", "\n", "pos_loss", "=", "pos_loss", ".", "sum", "(", ")", "\n", "if", "num_pos", "==", "0", ":", "\n", "      ", "return", "-", "neg_loss", "\n", "", "return", "-", "(", "pos_loss", "+", "neg_loss", ")", "/", "num_pos", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.__init__": [[37, 44], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data", ",", "stack", "=", "False", ",", "padding_value", "=", "0", ",", "cpu_only", "=", "False", ",", "pad_dims", "=", "2", ")", ":", "\n", "        ", "self", ".", "_data", "=", "data", "\n", "self", ".", "_cpu_only", "=", "cpu_only", "\n", "self", ".", "_stack", "=", "stack", "\n", "self", ".", "_padding_value", "=", "padding_value", "\n", "assert", "pad_dims", "in", "[", "None", ",", "1", ",", "2", ",", "3", "]", "\n", "self", ".", "_pad_dims", "=", "pad_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.__repr__": [[45, 47], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "repr", "(", "self", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.data": [[48, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.datatype": [[52, 58], ["isinstance", "data_container.DataContainer.data.type", "type"], "methods", ["None"], ["", "@", "property", "\n", "def", "datatype", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "self", ".", "data", ".", "type", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "type", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.cpu_only": [[59, 62], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "cpu_only", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cpu_only", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack": [[63, 66], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "stack", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_stack", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.padding_value": [[67, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "padding_value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_padding_value", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.pad_dims": [[71, 74], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pad_dims", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_pad_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size": [[75, 78], ["data_container.DataContainer.data.size"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["", "@", "assert_tensor_type", "\n", "def", "size", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "size", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.dim": [[79, 82], ["data_container.DataContainer.data.dim"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.dim"], ["", "@", "assert_tensor_type", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "dim", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.assert_tensor_type": [[6, 18], ["functools.wraps", "func", "isinstance", "AttributeError"], "function", ["None"], ["def", "assert_tensor_type", "(", "func", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "args", "[", "0", "]", ".", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"{} has no attribute {} for type {}\"", ".", "format", "(", "\n", "args", "[", "0", "]", ".", "__class__", ".", "__name__", ",", "func", ".", "__name__", ",", "args", "[", "0", "]", ".", "datatype", "\n", ")", "\n", ")", "\n", "", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.collate.collate": [[12, 88], ["isinstance", "isinstance", "TypeError", "data_container.DataContainer", "isinstance", "range", "data_container.DataContainer", "zip", "isinstance", "len", "len", "stacked.append", "range", "range", "collate.collate", "torch.utils.data.dataloader.default_collate", "len", "isinstance", "len", "stacked.append", "collate.collate", "batch[].dim", "range", "stacked.append", "batch[].size", "range", "range", "range", "padded_samples.append", "torch.utils.data.dataloader.default_collate", "stacked.append", "ValueError", "range", "max", "torch.pad", "torch.utils.data.dataloader.default_collate", "batch[].size", "sample.size", "sample.size", "range", "sample.size"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.collate.collate", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.collate.collate", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.dim", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["def", "collate", "(", "batch", ",", "samples_per_gpu", "=", "1", ")", ":", "\n", "    ", "\"\"\"Puts each data field into a tensor/DataContainer with outer dimension\n    batch size.\n\n    Extend default_collate to add support for\n    :type:`~torchie.parallel.DataContainer`. There are 3 cases.\n\n    1. cpu_only = True, e.g., meta data\n    2. cpu_only = False, stack = True, e.g., images tensors\n    3. cpu_only = False, stack = False, e.g., gt bboxes\n    \"\"\"", "\n", "\n", "if", "not", "isinstance", "(", "batch", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"{} is not supported.\"", ".", "format", "(", "batch", ".", "dtype", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "batch", "[", "0", "]", ",", "DataContainer", ")", ":", "\n", "        ", "assert", "len", "(", "batch", ")", "%", "samples_per_gpu", "==", "0", "\n", "stacked", "=", "[", "]", "\n", "if", "batch", "[", "0", "]", ".", "cpu_only", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "batch", ")", ",", "samples_per_gpu", ")", ":", "\n", "                ", "stacked", ".", "append", "(", "\n", "[", "sample", ".", "data", "for", "sample", "in", "batch", "[", "i", ":", "i", "+", "samples_per_gpu", "]", "]", "\n", ")", "\n", "", "return", "DataContainer", "(", "\n", "stacked", ",", "batch", "[", "0", "]", ".", "stack", ",", "batch", "[", "0", "]", ".", "padding_value", ",", "cpu_only", "=", "True", "\n", ")", "\n", "", "elif", "batch", "[", "0", "]", ".", "stack", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "batch", ")", ",", "samples_per_gpu", ")", ":", "\n", "                ", "assert", "isinstance", "(", "batch", "[", "i", "]", ".", "data", ",", "torch", ".", "Tensor", ")", "\n", "\n", "if", "batch", "[", "i", "]", ".", "pad_dims", "is", "not", "None", ":", "\n", "                    ", "ndim", "=", "batch", "[", "i", "]", ".", "dim", "(", ")", "\n", "assert", "ndim", ">", "batch", "[", "i", "]", ".", "pad_dims", "\n", "max_shape", "=", "[", "0", "for", "_", "in", "range", "(", "batch", "[", "i", "]", ".", "pad_dims", ")", "]", "\n", "for", "dim", "in", "range", "(", "1", ",", "batch", "[", "i", "]", ".", "pad_dims", "+", "1", ")", ":", "\n", "                        ", "max_shape", "[", "dim", "-", "1", "]", "=", "batch", "[", "i", "]", ".", "size", "(", "-", "dim", ")", "\n", "", "for", "sample", "in", "batch", "[", "i", ":", "i", "+", "samples_per_gpu", "]", ":", "\n", "                        ", "for", "dim", "in", "range", "(", "0", ",", "ndim", "-", "batch", "[", "i", "]", ".", "pad_dims", ")", ":", "\n", "                            ", "assert", "batch", "[", "i", "]", ".", "size", "(", "dim", ")", "==", "sample", ".", "size", "(", "dim", ")", "\n", "", "for", "dim", "in", "range", "(", "1", ",", "batch", "[", "i", "]", ".", "pad_dims", "+", "1", ")", ":", "\n", "                            ", "max_shape", "[", "dim", "-", "1", "]", "=", "max", "(", "\n", "max_shape", "[", "dim", "-", "1", "]", ",", "sample", ".", "size", "(", "-", "dim", ")", "\n", ")", "\n", "", "", "padded_samples", "=", "[", "]", "\n", "for", "sample", "in", "batch", "[", "i", ":", "i", "+", "samples_per_gpu", "]", ":", "\n", "                        ", "pad", "=", "[", "0", "for", "_", "in", "range", "(", "batch", "[", "i", "]", ".", "pad_dims", "*", "2", ")", "]", "\n", "for", "dim", "in", "range", "(", "1", ",", "batch", "[", "i", "]", ".", "pad_dims", "+", "1", ")", ":", "\n", "                            ", "pad", "[", "2", "*", "dim", "-", "1", "]", "=", "max_shape", "[", "dim", "-", "1", "]", "-", "sample", ".", "size", "(", "-", "dim", ")", "\n", "", "padded_samples", ".", "append", "(", "\n", "F", ".", "pad", "(", "sample", ".", "data", ",", "pad", ",", "value", "=", "sample", ".", "padding_value", ")", "\n", ")", "\n", "", "stacked", ".", "append", "(", "default_collate", "(", "padded_samples", ")", ")", "\n", "", "elif", "batch", "[", "i", "]", ".", "pad_dims", "is", "None", ":", "\n", "                    ", "stacked", ".", "append", "(", "\n", "default_collate", "(", "\n", "[", "sample", ".", "data", "for", "sample", "in", "batch", "[", "i", ":", "i", "+", "samples_per_gpu", "]", "]", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"pad_dims should be either None or integers (1-3)\"", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "batch", ")", ",", "samples_per_gpu", ")", ":", "\n", "                ", "stacked", ".", "append", "(", "\n", "[", "sample", ".", "data", "for", "sample", "in", "batch", "[", "i", ":", "i", "+", "samples_per_gpu", "]", "]", "\n", ")", "\n", "", "", "return", "DataContainer", "(", "stacked", ",", "batch", "[", "0", "]", ".", "stack", ",", "batch", "[", "0", "]", ".", "padding_value", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "transposed", "=", "zip", "(", "*", "batch", ")", "\n", "return", "[", "collate", "(", "samples", ",", "samples_per_gpu", ")", "for", "samples", "in", "transposed", "]", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "\n", "key", ":", "collate", "(", "[", "d", "[", "key", "]", "for", "d", "in", "batch", "]", ",", "samples_per_gpu", ")", "for", "key", "in", "batch", "[", "0", "]", "\n", "}", "\n", "", "else", ":", "\n", "        ", "return", "default_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.collate.collate_kitti": [[90, 162], ["collections.defaultdict", "len", "collections.defaultdict.items", "type", "example.items", "torch.tensor", "torch.tensor", "subexample.items", "example_merged[].append", "numpy.concatenate", "range", "enumerate", "example_merged[].append", "len", "range", "task_max_gts.append", "numpy.zeros", "range", "res.append", "max", "ret[].items", "len", "elem.items", "torch.tensor", "torch.tensor", "enumerate", "torch.tensor", "torch.tensor", "numpy.stack", "numpy.pad", "coors.append", "numpy.concatenate", "collections.defaultdict", "ret[].items", "len", "[].append", "enumerate", "res.append", "torch.tensor", "torch.tensor", "numpy.stack", "[].append", "torch.stack", "torch.stack", "numpy.stack", "torch.tensor", "torch.tensor", "str"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack"], ["", "", "def", "collate_kitti", "(", "batch_list", ",", "samples_per_gpu", "=", "1", ")", ":", "\n", "    ", "example_merged", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "example", "in", "batch_list", ":", "\n", "        ", "if", "type", "(", "example", ")", "is", "list", ":", "\n", "            ", "for", "subexample", "in", "example", ":", "\n", "                ", "for", "k", ",", "v", "in", "subexample", ".", "items", "(", ")", ":", "\n", "                    ", "example_merged", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "k", ",", "v", "in", "example", ".", "items", "(", ")", ":", "\n", "                ", "example_merged", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "", "batch_size", "=", "len", "(", "example_merged", "[", "'metadata'", "]", ")", "\n", "ret", "=", "{", "}", "\n", "# voxel_nums_list = example_merged[\"num_voxels\"]", "\n", "# example_merged.pop(\"num_voxels\")", "\n", "for", "key", ",", "elems", "in", "example_merged", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "in", "[", "\"voxels\"", ",", "\"num_points\"", ",", "\"num_gt\"", ",", "\"voxel_labels\"", ",", "\"num_voxels\"", ",", "\n", "\"cyv_voxels\"", ",", "\"cyv_num_points\"", ",", "\"cyv_num_voxels\"", "]", ":", "\n", "            ", "ret", "[", "key", "]", "=", "torch", ".", "tensor", "(", "np", ".", "concatenate", "(", "elems", ",", "axis", "=", "0", ")", ")", "\n", "", "elif", "key", "in", "[", "\n", "\"gt_boxes\"", ",", "\n", "]", ":", "\n", "            ", "task_max_gts", "=", "[", "]", "\n", "for", "task_id", "in", "range", "(", "len", "(", "elems", "[", "0", "]", ")", ")", ":", "\n", "                ", "max_gt", "=", "0", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "max_gt", "=", "max", "(", "max_gt", ",", "len", "(", "elems", "[", "k", "]", "[", "task_id", "]", ")", ")", "\n", "", "task_max_gts", ".", "append", "(", "max_gt", ")", "\n", "", "res", "=", "[", "]", "\n", "for", "idx", ",", "max_gt", "in", "enumerate", "(", "task_max_gts", ")", ":", "\n", "                ", "batch_task_gt_boxes3d", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_gt", ",", "7", ")", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "batch_task_gt_boxes3d", "[", "i", ",", ":", "len", "(", "elems", "[", "i", "]", "[", "idx", "]", ")", ",", ":", "]", "=", "elems", "[", "i", "]", "[", "idx", "]", "\n", "", "res", ".", "append", "(", "batch_task_gt_boxes3d", ")", "\n", "", "ret", "[", "key", "]", "=", "res", "\n", "", "elif", "key", "==", "\"metadata\"", ":", "\n", "            ", "ret", "[", "key", "]", "=", "elems", "\n", "", "elif", "key", "==", "\"calib\"", ":", "\n", "            ", "ret", "[", "key", "]", "=", "{", "}", "\n", "for", "elem", "in", "elems", ":", "\n", "                ", "for", "k1", ",", "v1", "in", "elem", ".", "items", "(", ")", ":", "\n", "                    ", "if", "k1", "not", "in", "ret", "[", "key", "]", ":", "\n", "                        ", "ret", "[", "key", "]", "[", "k1", "]", "=", "[", "v1", "]", "\n", "", "else", ":", "\n", "                        ", "ret", "[", "key", "]", "[", "k1", "]", ".", "append", "(", "v1", ")", "\n", "", "", "", "for", "k1", ",", "v1", "in", "ret", "[", "key", "]", ".", "items", "(", ")", ":", "\n", "                ", "ret", "[", "key", "]", "[", "k1", "]", "=", "torch", ".", "tensor", "(", "np", ".", "stack", "(", "v1", ",", "axis", "=", "0", ")", ")", "\n", "", "", "elif", "key", "in", "[", "\"coordinates\"", ",", "\"points\"", ",", "\"cyv_coordinates\"", "]", ":", "\n", "            ", "coors", "=", "[", "]", "\n", "for", "i", ",", "coor", "in", "enumerate", "(", "elems", ")", ":", "\n", "                ", "coor_pad", "=", "np", ".", "pad", "(", "\n", "coor", ",", "(", "(", "0", ",", "0", ")", ",", "(", "1", ",", "0", ")", ")", ",", "mode", "=", "\"constant\"", ",", "constant_values", "=", "i", "\n", ")", "\n", "coors", ".", "append", "(", "coor_pad", ")", "\n", "", "ret", "[", "key", "]", "=", "torch", ".", "tensor", "(", "np", ".", "concatenate", "(", "coors", ",", "axis", "=", "0", ")", ")", "\n", "", "elif", "key", "in", "[", "\"anchors\"", ",", "\"anchors_mask\"", ",", "\"reg_targets\"", ",", "\"reg_weights\"", ",", "\"labels\"", ",", "\"hm\"", ",", "\"anno_box\"", ",", "\n", "\"ind\"", ",", "\"mask\"", ",", "\"cat\"", "]", ":", "\n", "\n", "            ", "ret", "[", "key", "]", "=", "defaultdict", "(", "list", ")", "\n", "res", "=", "[", "]", "\n", "for", "elem", "in", "elems", ":", "\n", "                ", "for", "idx", ",", "ele", "in", "enumerate", "(", "elem", ")", ":", "\n", "                    ", "ret", "[", "key", "]", "[", "str", "(", "idx", ")", "]", ".", "append", "(", "torch", ".", "tensor", "(", "ele", ")", ")", "\n", "", "", "for", "kk", ",", "vv", "in", "ret", "[", "key", "]", ".", "items", "(", ")", ":", "\n", "                ", "res", ".", "append", "(", "torch", ".", "stack", "(", "vv", ")", ")", "\n", "", "ret", "[", "key", "]", "=", "res", "\n", "", "elif", "key", "==", "'gt_boxes_and_cls'", ":", "\n", "            ", "ret", "[", "key", "]", "=", "torch", ".", "tensor", "(", "np", ".", "stack", "(", "elems", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "ret", "[", "key", "]", "=", "np", ".", "stack", "(", "elems", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.collate.collate_kitti_multi": [[163, 246], ["collections.defaultdict", "len", "collections.defaultdict.items", "type", "example.items", "torch.tensor", "torch.tensor", "subexample.items", "example_merged[].append", "numpy.concatenate", "pdb.set_trace", "range", "enumerate", "example_merged[].append", "len", "range", "task_max_gts.append", "numpy.zeros", "range", "res.append", "max", "enumerate", "torch.tensor", "torch.tensor", "len", "numpy.pad", "coors.append", "numpy.concatenate", "range", "len", "elements.append", "collections.defaultdict", "ret[].items", "res_forecast.append", "range", "numpy.stack", "len", "element.append", "enumerate", "res.append", "len", "ret[].append", "[].append", "torch.stack", "torch.stack", "el.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.stack", "str"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack"], ["", "def", "collate_kitti_multi", "(", "batch_list", ",", "samples_per_gpu", "=", "1", ")", ":", "\n", "    ", "example_merged", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "example", "in", "batch_list", ":", "\n", "        ", "if", "type", "(", "example", ")", "is", "list", ":", "\n", "            ", "for", "subexample", "in", "example", ":", "\n", "                ", "for", "k", ",", "v", "in", "subexample", ".", "items", "(", ")", ":", "\n", "                    ", "example_merged", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "k", ",", "v", "in", "example", ".", "items", "(", ")", ":", "\n", "                ", "example_merged", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "", "batch_size", "=", "len", "(", "example_merged", "[", "'metadata'", "]", ")", "\n", "ret", "=", "{", "}", "\n", "# voxel_nums_list = example_merged[\"num_voxels\"]", "\n", "# example_merged.pop(\"num_voxels\")", "\n", "for", "key", ",", "elems", "in", "example_merged", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "in", "[", "\"voxels\"", ",", "\"num_points\"", ",", "\"num_gt\"", ",", "\"voxel_labels\"", ",", "\"num_voxels\"", ",", "\n", "\"cyv_voxels\"", ",", "\"cyv_num_points\"", ",", "\"cyv_num_voxels\"", "]", ":", "\n", "            ", "ret", "[", "key", "]", "=", "torch", ".", "tensor", "(", "np", ".", "concatenate", "(", "elems", ",", "axis", "=", "0", ")", ")", "\n", "", "elif", "key", "in", "[", "\"gt_boxes\"", ",", "]", ":", "\n", "            ", "pdb", ".", "set_trace", "(", ")", "\n", "task_max_gts", "=", "[", "]", "\n", "for", "task_id", "in", "range", "(", "len", "(", "elems", "[", "0", "]", ")", ")", ":", "\n", "                ", "max_gt", "=", "0", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "max_gt", "=", "max", "(", "max_gt", ",", "len", "(", "elems", "[", "k", "]", "[", "task_id", "]", ")", ")", "\n", "", "task_max_gts", ".", "append", "(", "max_gt", ")", "\n", "", "res", "=", "[", "]", "\n", "for", "idx", ",", "max_gt", "in", "enumerate", "(", "task_max_gts", ")", ":", "\n", "                ", "batch_task_gt_boxes3d", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_gt", ",", "7", ")", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "batch_task_gt_boxes3d", "[", "i", ",", ":", "len", "(", "elems", "[", "i", "]", "[", "idx", "]", ")", ",", ":", "]", "=", "elems", "[", "i", "]", "[", "idx", "]", "\n", "", "res", ".", "append", "(", "batch_task_gt_boxes3d", ")", "\n", "", "ret", "[", "key", "]", "=", "res", "\n", "", "elif", "key", "==", "\"metadata\"", ":", "\n", "            ", "ret", "[", "key", "]", "=", "elems", "\n", "\n", "", "elif", "key", "in", "[", "\"coordinates\"", ",", "\"points\"", ",", "\"cyv_coordinates\"", "]", ":", "\n", "            ", "coors", "=", "[", "]", "\n", "for", "i", ",", "coor", "in", "enumerate", "(", "elems", ")", ":", "\n", "                ", "coor_pad", "=", "np", ".", "pad", "(", "\n", "coor", ",", "(", "(", "0", ",", "0", ")", ",", "(", "1", ",", "0", ")", ")", ",", "mode", "=", "\"constant\"", ",", "constant_values", "=", "i", "\n", ")", "\n", "coors", ".", "append", "(", "coor_pad", ")", "\n", "", "ret", "[", "key", "]", "=", "torch", ".", "tensor", "(", "np", ".", "concatenate", "(", "coors", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "elif", "key", "in", "[", "\"anchors\"", ",", "\"anchors_mask\"", ",", "\"reg_targets\"", ",", "\"reg_weights\"", ",", "\"labels\"", ",", "\n", "\"hm\"", ",", "\"anno_box\"", ",", "\"ind\"", ",", "\"mask\"", ",", "\"cat\"", ",", "\n", "\"hm_trajectory\"", ",", "\"anno_box_trajectory\"", ",", "\"ind_trajectory\"", ",", "\"mask_trajectory\"", ",", "\"cat_trajectory\"", ",", "\n", "\"hm_forecast\"", ",", "\"anno_box_forecast\"", ",", "\"ind_forecast\"", ",", "\"mask_forecast\"", ",", "\"cat_forecast\"", "]", ":", "\n", "            ", "elements", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "elems", "[", "0", "]", ")", ")", ":", "\n", "                ", "element", "=", "[", "]", "\n", "for", "elem", "in", "elems", ":", "\n", "                    ", "element", ".", "append", "(", "elem", "[", "i", "]", ")", "\n", "", "elements", ".", "append", "(", "element", ")", "\n", "\n", "", "res_forecast", "=", "[", "]", "\n", "for", "element", "in", "elements", ":", "\n", "                ", "ret", "[", "key", "]", "=", "defaultdict", "(", "list", ")", "\n", "res", "=", "[", "]", "\n", "for", "elem", "in", "element", ":", "\n", "                    ", "for", "idx", ",", "ele", "in", "enumerate", "(", "elem", ")", ":", "\n", "                        ", "ret", "[", "key", "]", "[", "str", "(", "idx", ")", "]", ".", "append", "(", "torch", ".", "tensor", "(", "ele", ")", ")", "\n", "\n", "", "", "for", "kk", ",", "vv", "in", "ret", "[", "key", "]", ".", "items", "(", ")", ":", "\n", "                    ", "res", ".", "append", "(", "torch", ".", "stack", "(", "vv", ")", ")", "\n", "\n", "", "res_forecast", ".", "append", "(", "res", ")", "\n", "\n", "", "ret", "[", "key", "]", "=", "res_forecast", "\n", "\n", "", "elif", "key", "in", "[", "'gt_boxes_and_cls'", ",", "'gt_boxes_and_cls_trajectory'", ",", "'gt_boxes_and_cls_forecast'", ",", "'bev_map'", "]", ":", "\n", "            ", "ret", "[", "key", "]", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "elems", "[", "0", "]", ")", ")", ":", "\n", "                ", "el", "=", "[", "]", "\n", "for", "elem", "in", "elems", ":", "\n", "                    ", "el", ".", "append", "(", "elem", "[", "i", "]", ")", "\n", "\n", "", "ret", "[", "key", "]", ".", "append", "(", "torch", ".", "tensor", "(", "np", ".", "stack", "(", "el", ",", "axis", "=", "0", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "ret", "[", "key", "]", "=", "np", ".", "stack", "(", "elems", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.distributed.MegDistributedDataParallel.__init__": [[10, 18], ["torch.Module.__init__", "distributed.MegDistributedDataParallel._sync_params"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.distributed.MegDistributedDataParallel._sync_params"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.distributed.MegDistributedDataParallel._dist_broadcast_coalesced": [[19, 27], ["torch._utils._take_tensors", "torch._utils._take_tensors", "torch._utils._take_tensors", "torch._utils._flatten_dense_tensors", "torch._utils._flatten_dense_tensors", "torch._utils._flatten_dense_tensors", "torch.broadcast", "torch.broadcast", "torch.broadcast", "zip", "torch._utils._unflatten_dense_tensors", "torch._utils._unflatten_dense_tensors", "torch._utils._unflatten_dense_tensors", "tensor.copy_"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.distributed.MegDistributedDataParallel._sync_params": [[28, 39], ["list", "distributed.MegDistributedDataParallel.module.state_dict().values", "len", "distributed.MegDistributedDataParallel._dist_broadcast_coalesced", "len", "distributed.MegDistributedDataParallel._dist_broadcast_coalesced", "distributed.MegDistributedDataParallel.module.state_dict", "distributed.MegDistributedDataParallel.module._all_buffers", "distributed.MegDistributedDataParallel.module.buffers"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.distributed.MegDistributedDataParallel._dist_broadcast_coalesced", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.distributed.MegDistributedDataParallel._dist_broadcast_coalesced", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.state_dict"], ["            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.distributed.MegDistributedDataParallel.scatter": [[40, 42], ["scatter_gather.scatter_kwargs"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.scatter_gather.scatter_kwargs"], ["        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.distributed.MegDistributedDataParallel.forward": [[43, 46], ["distributed.MegDistributedDataParallel.scatter", "distributed.MegDistributedDataParallel.module", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel._functions.scatter"], ["g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_parallel.MegDataParallel.scatter": [[7, 9], ["scatter_gather.scatter_kwargs"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.scatter_gather.scatter_kwargs"], ["    ", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n", "        ", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "dim", "=", "self", ".", "dim", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.scatter_gather.scatter": [[8, 42], ["isinstance", "isinstance", "scatter_gather.scatter.scatter_map"], "function", ["None"], ["def", "scatter", "(", "inputs", ",", "target_gpus", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"Scatter inputs to target gpus.\n\n    The only difference from original :func:`scatter` is to add support for\n    :type:`~mmcv.parallel.DataContainer`.\n    \"\"\"", "\n", "\n", "def", "scatter_map", "(", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "OrigScatter", ".", "apply", "(", "target_gpus", ",", "None", ",", "dim", ",", "obj", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "DataContainer", ")", ":", "\n", "            ", "if", "obj", ".", "cpu_only", ":", "\n", "                ", "return", "obj", ".", "data", "\n", "", "else", ":", "\n", "                ", "return", "Scatter", ".", "forward", "(", "target_gpus", ",", "obj", ".", "data", ")", "\n", "", "", "if", "isinstance", "(", "obj", ",", "tuple", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "return", "list", "(", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "list", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "out", "=", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", ")", "\n", "return", "out", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "out", "=", "list", "(", "map", "(", "type", "(", "obj", ")", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ".", "items", "(", ")", ")", ")", ")", ")", "\n", "return", "out", "\n", "", "return", "[", "obj", "for", "targets", "in", "target_gpus", "]", "\n", "\n", "# After scatter_map is called, a scatter_map cell will exist. This cell", "\n", "# has a reference to the actual function scatter_map, which has references", "\n", "# to a closure that has a reference to the scatter_map cell (because the", "\n", "# fn is recursive). To avoid this reference cycle, we set the function to", "\n", "# None, clearing the cell", "\n", "", "try", ":", "\n", "        ", "return", "scatter_map", "(", "inputs", ")", "\n", "", "finally", ":", "\n", "        ", "scatter_map", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.scatter_gather.scatter_kwargs": [[44, 55], ["tuple", "tuple", "scatter_gather.scatter", "scatter_gather.scatter", "len", "len", "tuple.extend", "len", "len", "tuple.extend", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel._functions.scatter", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel._functions.scatter"], ["", "", "def", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "target_gpus", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"Scatter with support for kwargs dictionary\"\"\"", "\n", "inputs", "=", "scatter", "(", "inputs", ",", "target_gpus", ",", "dim", ")", "if", "inputs", "else", "[", "]", "\n", "kwargs", "=", "scatter", "(", "kwargs", ",", "target_gpus", ",", "dim", ")", "if", "kwargs", "else", "[", "]", "\n", "if", "len", "(", "inputs", ")", "<", "len", "(", "kwargs", ")", ":", "\n", "        ", "inputs", ".", "extend", "(", "[", "(", ")", "for", "_", "in", "range", "(", "len", "(", "kwargs", ")", "-", "len", "(", "inputs", ")", ")", "]", ")", "\n", "", "elif", "len", "(", "kwargs", ")", "<", "len", "(", "inputs", ")", ":", "\n", "        ", "kwargs", ".", "extend", "(", "[", "{", "}", "for", "_", "in", "range", "(", "len", "(", "inputs", ")", "-", "len", "(", "kwargs", ")", ")", "]", ")", "\n", "", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "kwargs", "=", "tuple", "(", "kwargs", ")", "\n", "return", "inputs", ",", "kwargs", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel._functions.Scatter.forward": [[61, 75], ["_functions.get_input_device", "_functions.scatter", "tuple", "_functions.synchronize_stream", "torch.nn.parallel._functions._get_stream"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel._functions.get_input_device", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel._functions.scatter", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel._functions.synchronize_stream"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "target_gpus", ",", "input", ")", ":", "\n", "        ", "input_device", "=", "get_input_device", "(", "input", ")", "\n", "streams", "=", "None", "\n", "if", "input_device", "==", "-", "1", ":", "\n", "# Perform CPU to GPU copies in a background stream", "\n", "            ", "streams", "=", "[", "_get_stream", "(", "device", ")", "for", "device", "in", "target_gpus", "]", "\n", "\n", "", "outputs", "=", "scatter", "(", "input", ",", "target_gpus", ",", "streams", ")", "\n", "# Synchronize with the copy stream", "\n", "if", "streams", "is", "not", "None", ":", "\n", "            ", "synchronize_stream", "(", "outputs", ",", "target_gpus", ",", "streams", ")", "\n", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel._functions.scatter": [[5, 27], ["isinstance", "isinstance", "len", "_functions.scatter", "input.contiguous", "Exception", "len", "range", "torch.cuda.device", "torch.cuda.stream", "output.cuda.cuda", "len", "len", "output.cuda.numel", "type"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel._functions.scatter"], ["def", "scatter", "(", "input", ",", "devices", ",", "streams", "=", "None", ")", ":", "\n", "    ", "\"\"\"Scatters tensor across multiple GPUs.\n    \"\"\"", "\n", "if", "streams", "is", "None", ":", "\n", "        ", "streams", "=", "[", "None", "]", "*", "len", "(", "devices", ")", "\n", "\n", "", "if", "isinstance", "(", "input", ",", "list", ")", ":", "\n", "        ", "chunk_size", "=", "(", "len", "(", "input", ")", "-", "1", ")", "//", "len", "(", "devices", ")", "+", "1", "\n", "outputs", "=", "[", "\n", "scatter", "(", "input", "[", "i", "]", ",", "[", "devices", "[", "i", "//", "chunk_size", "]", "]", ",", "[", "streams", "[", "i", "//", "chunk_size", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "input", ")", ")", "\n", "]", "\n", "return", "outputs", "\n", "", "elif", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "output", "=", "input", ".", "contiguous", "(", ")", "\n", "# TODO: copy to a pinned buffer first (if copying from CPU)", "\n", "stream", "=", "streams", "[", "0", "]", "if", "output", ".", "numel", "(", ")", ">", "0", "else", "None", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "devices", "[", "0", "]", ")", ",", "torch", ".", "cuda", ".", "stream", "(", "stream", ")", ":", "\n", "            ", "output", "=", "output", ".", "cuda", "(", "devices", "[", "0", "]", ",", "non_blocking", "=", "True", ")", "\n", "", "return", "output", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unknown type {}.\"", ".", "format", "(", "type", "(", "input", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel._functions.synchronize_stream": [[29, 45], ["isinstance", "range", "isinstance", "len", "len", "len", "range", "Exception", "_functions.synchronize_stream", "output.numel", "torch.cuda.device", "torch.cuda.current_stream", "torch.cuda.current_stream.wait_stream", "output.record_stream", "type"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel._functions.synchronize_stream"], ["", "", "def", "synchronize_stream", "(", "output", ",", "devices", ",", "streams", ")", ":", "\n", "    ", "if", "isinstance", "(", "output", ",", "list", ")", ":", "\n", "        ", "chunk_size", "=", "len", "(", "output", ")", "//", "len", "(", "devices", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "devices", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "chunk_size", ")", ":", "\n", "                ", "synchronize_stream", "(", "\n", "output", "[", "i", "*", "chunk_size", "+", "j", "]", ",", "[", "devices", "[", "i", "]", "]", ",", "[", "streams", "[", "i", "]", "]", "\n", ")", "\n", "", "", "", "elif", "isinstance", "(", "output", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "if", "output", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "devices", "[", "0", "]", ")", ":", "\n", "                ", "main_stream", "=", "torch", ".", "cuda", ".", "current_stream", "(", ")", "\n", "main_stream", ".", "wait_stream", "(", "streams", "[", "0", "]", ")", "\n", "output", ".", "record_stream", "(", "main_stream", ")", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unknown type {}.\"", ".", "format", "(", "type", "(", "output", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel._functions.get_input_device": [[47, 58], ["isinstance", "isinstance", "_functions.get_input_device", "Exception", "input.get_device", "type"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel._functions.get_input_device"], ["", "", "def", "get_input_device", "(", "input", ")", ":", "\n", "    ", "if", "isinstance", "(", "input", ",", "list", ")", ":", "\n", "        ", "for", "item", "in", "input", ":", "\n", "            ", "input_device", "=", "get_input_device", "(", "item", ")", "\n", "if", "input_device", "!=", "-", "1", ":", "\n", "                ", "return", "input_device", "\n", "", "", "return", "-", "1", "\n", "", "elif", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "input", ".", "get_device", "(", ")", "if", "input", ".", "is_cuda", "else", "-", "1", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unknown type {}.\"", ".", "format", "(", "type", "(", "input", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.example_to_device": [[28, 72], ["example.items", "example_torch[].append", "v.to", "v.items", "res.to", "torch.tensor().to", "example_torch[].append", "fc.to", "torch.tensor"], "function", ["None"], ["    ", "numDevices", "=", "len", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ".", "split", "(", "\",\"", ")", ")", "\n", "", "except", ":", "\n", "    ", "pynvml", ".", "nvmlInit", "(", ")", "\n", "numDevices", "=", "pynvml", ".", "nvmlDeviceGetCount", "(", ")", "\n", "\n", "", "if", "args", ".", "debug", ":", "\n", "    ", "print", "(", "\"Starting in Debug Mode\"", ")", "\n", "os", ".", "system", "(", "\"python  ./tools/train.py configs/{architecture}/{configPath} --seed 0 --work_dir models/{experiment}/{dataset}_{architecture}_{model}_detection\"", ".", "format", "(", "architecture", "=", "architecture", ",", "\n", "configPath", "=", "configPath", ",", "\n", "experiment", "=", "experiment", ",", "\n", "model", "=", "model", ",", "\n", "dataset", "=", "dataset", ")", ")", "\n", "", "else", ":", "\n", "    ", "os", ".", "system", "(", "\"python -m torch.distributed.launch --nproc_per_node={numDevices} ./tools/train.py configs/{architecture}/{configPath} --work_dir models/{experiment}/{dataset}_{architecture}_{model}_detection\"", ".", "format", "(", "architecture", "=", "architecture", ",", "\n", "configPath", "=", "configPath", ",", "\n", "experiment", "=", "experiment", ",", "\n", "model", "=", "model", ",", "\n", "dataset", "=", "dataset", ",", "\n", "numDevices", "=", "numDevices", ")", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.parse_losses": [[74, 91], ["collections.OrderedDict", "losses.items", "sum", "isinstance", "log_vars[].item", "loss_value.mean", "isinstance", "sum", "TypeError", "collections.OrderedDict.items", "_loss.mean"], "function", ["None"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.parse_second_losses": [[93, 104], ["collections.OrderedDict", "sum", "losses.items", "i.item", "i.item"], "function", ["None"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.batch_processor": [[106, 127], ["train.example_to_device", "torch.device", "model", "train.parse_second_losses", "dict", "model", "len"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.example_to_device", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.parse_second_losses"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.batch_processor_ensemble": [[128, 159], ["train.example_to_device", "model1.pred_hm", "model2.pred_hm", "len", "range", "model1.pred_result", "torch.device", "preds_dict1.keys", "merge_list.append"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.example_to_device"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.flatten_model": [[161, 163], ["len", "sum", "list", "map", "m.children", "m.children"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.children", "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.children"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.get_layer_groups": [[165, 181], ["torch.nn.Sequential", "layers.append", "layers.append", "layers.append", "hasattr", "torch.nn.Sequential", "layers.append", "layers.append", "layers.append", "train.flatten_model", "train.flatten_model", "torch.nn.Sequential"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.flatten_model", "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.flatten_model"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.build_one_cycle_optimizer": [[183, 201], ["det3d.solver.fastai_optim.OptimWrapper.create", "functools.partial", "functools.partial", "train.get_layer_groups"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.FastAIMixedOptim.create", "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.get_layer_groups"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.build_optimizer": [[203, 276], ["hasattr", "optimizer_cfg.copy.copy", "optimizer_cfg.copy.pop", "det3d.torchie.trainer.obj_from_dict", "isinstance", "optimizer_cfg.copy.get", "optimizer_cfg.pop.get", "optimizer_cfg.pop.get", "optimizer_cfg.pop.get", "model.named_parameters", "getattr", "getattr.", "dict", "re.search", "params.append", "optimizer_cfg.copy.pop", "params.append", "name.endswith", "model.parameters"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.obj_from_dict", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.train_detector": [[278, 359], ["env.get_root_logger.info", "det3d.torchie.trainer.Trainer", "det3d.torchie.trainer.Trainer.register_training_hooks", "det3d.torchie.trainer.Trainer.run", "env.get_root_logger", "isinstance", "det3d.datasets.build_dataloader", "len", "apex.parallel.convert_syncbn_model", "train.build_one_cycle_optimizer", "det3d.builder._create_learning_rate_scheduler", "train.build_optimizer", "torch.optim.lr_scheduler.MultiStepLR", "torch.nn.parallel.DistributedDataParallel", "model.cuda.cuda", "det3d.core.DistOptimizerHook", "det3d.torchie.trainer.Trainer.register_hook", "det3d.torchie.trainer.Trainer.resume", "model.cuda.named_parameters", "model.cuda.cuda", "det3d.torchie.trainer.DistSamplerSeedHook", "det3d.torchie.trainer.Trainer.load_checkpoint"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.register_training_hooks", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.run", "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.env.get_root_logger", "home.repos.pwc.inspect_result.neeharperi_futuredet.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.build_one_cycle_optimizer", "home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder._create_learning_rate_scheduler", "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.build_optimizer", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.register_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.resume", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_checkpoint"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.env.init_dist": [[13, 24], ["torch.get_start_method", "torch.set_start_method", "env._init_dist_pytorch", "env._init_dist_mpi", "env._init_dist_slurm", "ValueError"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.apis.env._init_dist_pytorch", "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.env._init_dist_mpi", "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.env._init_dist_slurm"], ["def", "init_dist", "(", "launcher", ",", "backend", "=", "\"nccl\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "is", "None", ":", "\n", "        ", "mp", ".", "set_start_method", "(", "\"spawn\"", ")", "\n", "", "if", "launcher", "==", "\"pytorch\"", ":", "\n", "        ", "_init_dist_pytorch", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "elif", "launcher", "==", "\"mpi\"", ":", "\n", "        ", "_init_dist_mpi", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "elif", "launcher", "==", "\"slurm\"", ":", "\n", "        ", "_init_dist_slurm", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid launcher type: {}\"", ".", "format", "(", "launcher", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.env._init_dist_pytorch": [[26, 29], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "int"], "function", ["None"], ["", "", "def", "_init_dist_pytorch", "(", "backend", ",", "**", "kwargs", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "int", "(", "os", ".", "environ", "[", "\"LOCAL_RANK\"", "]", ")", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.env._init_dist_mpi": [[31, 33], ["None"], "function", ["None"], ["", "def", "_init_dist_mpi", "(", "backend", ",", "**", "kwargs", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.env._init_dist_slurm": [[35, 49], ["int", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "subprocess.getoutput", "str", "str", "str", "torch.init_process_group"], "function", ["None"], ["", "def", "_init_dist_slurm", "(", "backend", ",", "port", "=", "29500", ",", "**", "kwargs", ")", ":", "\n", "    ", "proc_id", "=", "int", "(", "os", ".", "environ", "[", "\"SLURM_PROCID\"", "]", ")", "\n", "ntasks", "=", "int", "(", "os", ".", "environ", "[", "\"SLURM_NTASKS\"", "]", ")", "\n", "node_list", "=", "os", ".", "environ", "[", "\"SLURM_NODELIST\"", "]", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "proc_id", "%", "num_gpus", ")", "\n", "addr", "=", "subprocess", ".", "getoutput", "(", "\n", "\"scontrol show hostname {} | head -n1\"", ".", "format", "(", "node_list", ")", "\n", ")", "\n", "os", ".", "environ", "[", "\"MASTER_PORT\"", "]", "=", "str", "(", "port", ")", "\n", "os", ".", "environ", "[", "\"MASTER_ADDR\"", "]", "=", "addr", "\n", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", "=", "str", "(", "ntasks", ")", "\n", "os", ".", "environ", "[", "\"RANK\"", "]", "=", "str", "(", "proc_id", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.env.set_random_seed": [[51, 56], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.env.get_root_logger": [[58, 71], ["logging.getLogger", "det3d.torchie.trainer.get_dist_info", "logging.getLogger.hasHandlers", "logging.basicConfig", "logging.getLogger.setLevel", "logging.getLogger.setLevel"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_dist_info"], ["", "def", "get_root_logger", "(", "log_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "if", "not", "logger", ".", "hasHandlers", "(", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "\n", "format", "=", "\"%(asctime)s - %(levelname)s - %(message)s\"", ",", "level", "=", "log_level", "\n", ")", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "logger", ".", "setLevel", "(", "\"ERROR\"", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "setLevel", "(", "\"INFO\"", ")", "\n", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load": [[15, 46], ["isinstance", "utils.is_str", "str", "utils.is_str", "TypeError", "handler.load_from_path", "hasattr", "str.split", "handler.load_from_fileobj", "TypeError"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_str", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_str", "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.pickle_handler.PickleHandler.load_from_path", "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.pickle_handler.PickleHandler.load_from_fileobj"], ["def", "load", "(", "file", ",", "file_format", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Load data from json/yaml/pickle files.\n\n    This method provides a unified api for loading data from serialized files.\n\n    Args:\n        file (str or :obj:`Path` or file-like object): Filename or a file-like\n            object.\n        file_format (str, optional): If not specified, the file format will be\n            inferred from the file extension, otherwise use the specified one.\n            Currently supported formats include \"json\", \"yaml/yml\" and\n            \"pickle/pkl\".\n\n    Returns:\n        The content from the file.\n    \"\"\"", "\n", "if", "isinstance", "(", "file", ",", "Path", ")", ":", "\n", "        ", "file", "=", "str", "(", "file", ")", "\n", "", "if", "file_format", "is", "None", "and", "is_str", "(", "file", ")", ":", "\n", "        ", "file_format", "=", "file", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "\n", "", "if", "file_format", "not", "in", "file_handlers", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unsupported format: {}\"", ".", "format", "(", "file_format", ")", ")", "\n", "\n", "", "handler", "=", "file_handlers", "[", "file_format", "]", "\n", "if", "is_str", "(", "file", ")", ":", "\n", "        ", "obj", "=", "handler", ".", "load_from_path", "(", "file", ",", "**", "kwargs", ")", "\n", "", "elif", "hasattr", "(", "file", ",", "\"read\"", ")", ":", "\n", "        ", "obj", "=", "handler", ".", "load_from_fileobj", "(", "file", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'\"file\" must be a filepath str or a file-object'", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.dump": [[48, 83], ["isinstance", "str", "utils.is_str", "TypeError", "handler.dump_to_str", "utils.is_str", "handler.dump_to_path", "hasattr", "str.split", "ValueError", "handler.dump_to_fileobj", "TypeError"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_str", "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.pickle_handler.PickleHandler.dump_to_str", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_str", "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.pickle_handler.PickleHandler.dump_to_path", "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.pickle_handler.PickleHandler.dump_to_fileobj"], ["", "def", "dump", "(", "obj", ",", "file", "=", "None", ",", "file_format", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Dump data to json/yaml/pickle strings or files.\n\n    This method provides a unified api for dumping data as strings or to files,\n    and also supports custom arguments for each file format.\n\n    Args:\n        obj (any): The python object to be dumped.\n        file (str or :obj:`Path` or file-like object, optional): If not\n            specified, then the object is dump to a str, otherwise to a file\n            specified by the filename or file-like object.\n        file_format (str, optional): Same as :func:`load`.\n\n    Returns:\n        bool: True for success, False otherwise.\n    \"\"\"", "\n", "if", "isinstance", "(", "file", ",", "Path", ")", ":", "\n", "        ", "file", "=", "str", "(", "file", ")", "\n", "", "if", "file_format", "is", "None", ":", "\n", "        ", "if", "is_str", "(", "file", ")", ":", "\n", "            ", "file_format", "=", "file", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "\n", "", "elif", "file", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"file_format must be specified since file is None\"", ")", "\n", "", "", "if", "file_format", "not", "in", "file_handlers", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unsupported format: {}\"", ".", "format", "(", "file_format", ")", ")", "\n", "\n", "", "handler", "=", "file_handlers", "[", "file_format", "]", "\n", "if", "file", "is", "None", ":", "\n", "        ", "return", "handler", ".", "dump_to_str", "(", "obj", ",", "**", "kwargs", ")", "\n", "", "elif", "is_str", "(", "file", ")", ":", "\n", "        ", "handler", ".", "dump_to_path", "(", "obj", ",", "file", ",", "**", "kwargs", ")", "\n", "", "elif", "hasattr", "(", "file", ",", "\"write\"", ")", ":", "\n", "        ", "handler", ".", "dump_to_fileobj", "(", "obj", ",", "file", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'\"file\" must be a filename str or a file-object'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io._register_handler": [[85, 103], ["isinstance", "isinstance", "TypeError", "utils.is_list_of", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_list_of"], ["", "", "def", "_register_handler", "(", "handler", ",", "file_formats", ")", ":", "\n", "    ", "\"\"\"Register a handler for some file extensions.\n\n    Args:\n        handler (:obj:`BaseFileHandler`): Handler to be registered.\n        file_formats (str or list[str]): File formats to be handled by this\n            handler.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "handler", ",", "BaseFileHandler", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "\"handler must be a child of BaseFileHandler, not {}\"", ".", "format", "(", "type", "(", "handler", ")", ")", "\n", ")", "\n", "", "if", "isinstance", "(", "file_formats", ",", "str", ")", ":", "\n", "        ", "file_formats", "=", "[", "file_formats", "]", "\n", "", "if", "not", "is_list_of", "(", "file_formats", ",", "str", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"file_formats must be a str or a list of str\"", ")", "\n", "", "for", "ext", "in", "file_formats", ":", "\n", "        ", "file_handlers", "[", "ext", "]", "=", "handler", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.register_handler": [[105, 111], ["io._register_handler", "cls"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io._register_handler"], ["", "", "def", "register_handler", "(", "file_formats", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "wrap", "(", "cls", ")", ":", "\n", "        ", "_register_handler", "(", "cls", "(", "**", "kwargs", ")", ",", "file_formats", ")", "\n", "return", "cls", "\n", "\n", "", "return", "wrap", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.parse.list_from_file": [[1, 25], ["open", "range", "f.readline", "item_list.append", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open"], ["def", "list_from_file", "(", "filename", ",", "prefix", "=", "\"\"", ",", "offset", "=", "0", ",", "max_num", "=", "0", ")", ":", "\n", "    ", "\"\"\"Load a text file and parse the content as a list of strings.\n\n    Args:\n        filename (str): Filename.\n        prefix (str): The prefix to be inserted to the begining of each item.\n        offset (int): The offset of lines.\n        max_num (int): The maximum number of lines to be read,\n            zeros and negatives mean no limitation.\n\n    Returns:\n        list[str]: A list of strings.\n    \"\"\"", "\n", "cnt", "=", "0", "\n", "item_list", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "_", "in", "range", "(", "offset", ")", ":", "\n", "            ", "f", ".", "readline", "(", ")", "\n", "", "for", "line", "in", "f", ":", "\n", "            ", "if", "max_num", ">", "0", "and", "cnt", ">=", "max_num", ":", "\n", "                ", "break", "\n", "", "item_list", ".", "append", "(", "prefix", "+", "line", ".", "rstrip", "(", "\"\\n\"", ")", ")", "\n", "cnt", "+=", "1", "\n", "", "", "return", "item_list", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.parse.dict_from_file": [[27, 51], ["open", "line.rstrip().split", "key_type", "len", "line.rstrip", "len"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open"], ["", "def", "dict_from_file", "(", "filename", ",", "key_type", "=", "str", ")", ":", "\n", "    ", "\"\"\"Load a text file and parse the content as a dict.\n\n    Each line of the text file will be two or more columns splited by\n    whitespaces or tabs. The first column will be parsed as dict keys, and\n    the following columns will be parsed as dict values.\n\n    Args:\n        filename(str): Filename.\n        key_type(type): Type of the dict's keys. str is user by default and\n            type conversion will be performed if specified.\n\n    Returns:\n        dict: The parsed contents.\n    \"\"\"", "\n", "mapping", "=", "{", "}", "\n", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "items", "=", "line", ".", "rstrip", "(", "\"\\n\"", ")", ".", "split", "(", ")", "\n", "assert", "len", "(", "items", ")", ">=", "2", "\n", "key", "=", "key_type", "(", "items", "[", "0", "]", ")", "\n", "val", "=", "items", "[", "1", ":", "]", "if", "len", "(", "items", ")", ">", "2", "else", "items", "[", "1", "]", "\n", "mapping", "[", "key", "]", "=", "val", "\n", "", "", "return", "mapping", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.json_handler.JsonHandler.load_from_fileobj": [[7, 9], ["json.load"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load"], ["    ", "def", "load_from_fileobj", "(", "self", ",", "file", ")", ":", "\n", "        ", "return", "json", ".", "load", "(", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.json_handler.JsonHandler.dump_to_fileobj": [[10, 12], ["json.dump"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.dump"], ["", "def", "dump_to_fileobj", "(", "self", ",", "obj", ",", "file", ",", "**", "kwargs", ")", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "file", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.json_handler.JsonHandler.dump_to_str": [[13, 15], ["json.dumps"], "methods", ["None"], ["", "def", "dump_to_str", "(", "self", ",", "obj", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "obj", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.base.BaseFileHandler.load_from_fileobj": [[8, 11], ["None"], "methods", ["None"], ["\n", "\n", "class", "BaseDetector", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Base class for detectors\"\"\"", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.base.BaseFileHandler.dump_to_fileobj": [[12, 15], ["None"], "methods", ["None"], ["\n", "__metaclass__", "=", "ABCMeta", "\n", "\n", "def", "__init__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.base.BaseFileHandler.dump_to_str": [[16, 19], ["None"], "methods", ["None"], ["        ", "super", "(", "BaseDetector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.base.BaseFileHandler.load_from_path": [[20, 23], ["open", "base.BaseFileHandler.load_from_fileobj"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.pickle_handler.PickleHandler.load_from_fileobj"], ["def", "with_reader", "(", "self", ")", ":", "\n", "# Whether input data need to be processed by Input Feature Extractor", "\n", "        ", "return", "hasattr", "(", "self", ",", "\"reader\"", ")", "and", "self", ".", "reader", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.base.BaseFileHandler.dump_to_path": [[24, 27], ["open", "base.BaseFileHandler.dump_to_fileobj"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.pickle_handler.PickleHandler.dump_to_fileobj"], ["", "@", "property", "\n", "def", "with_neck", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "\"neck\"", ")", "and", "self", ".", "neck", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.yaml_handler.YamlHandler.load_from_fileobj": [[12, 15], ["kwargs.setdefault", "yaml.load"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load"], ["    ", "def", "load_from_fileobj", "(", "self", ",", "file", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "setdefault", "(", "\"Loader\"", ",", "Loader", ")", "\n", "return", "yaml", ".", "load", "(", "file", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.yaml_handler.YamlHandler.dump_to_fileobj": [[16, 19], ["kwargs.setdefault", "yaml.dump"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.dump"], ["", "def", "dump_to_fileobj", "(", "self", ",", "obj", ",", "file", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "setdefault", "(", "\"Dumper\"", ",", "Dumper", ")", "\n", "yaml", ".", "dump", "(", "obj", ",", "file", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.yaml_handler.YamlHandler.dump_to_str": [[20, 23], ["kwargs.setdefault", "yaml.dump"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.dump"], ["", "def", "dump_to_str", "(", "self", ",", "obj", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "setdefault", "(", "\"Dumper\"", ",", "Dumper", ")", "\n", "return", "yaml", ".", "dump", "(", "obj", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.pickle_handler.PickleHandler.load_from_fileobj": [[7, 9], ["six.moves.cPickle.load"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load"], ["    ", "def", "load_from_fileobj", "(", "self", ",", "file", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "file", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.pickle_handler.PickleHandler.load_from_path": [[10, 12], ["super().load_from_path"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.pickle_handler.PickleHandler.load_from_path"], ["", "def", "load_from_path", "(", "self", ",", "filepath", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "super", "(", "PickleHandler", ",", "self", ")", ".", "load_from_path", "(", "filepath", ",", "mode", "=", "\"rb\"", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.pickle_handler.PickleHandler.dump_to_str": [[13, 16], ["kwargs.setdefault", "six.moves.cPickle.dumps"], "methods", ["None"], ["", "def", "dump_to_str", "(", "self", ",", "obj", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "setdefault", "(", "\"protocol\"", ",", "2", ")", "\n", "return", "pickle", ".", "dumps", "(", "obj", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.pickle_handler.PickleHandler.dump_to_fileobj": [[17, 20], ["kwargs.setdefault", "six.moves.cPickle.dump"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.dump"], ["", "def", "dump_to_fileobj", "(", "self", ",", "obj", ",", "file", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "setdefault", "(", "\"protocol\"", ",", "2", ")", "\n", "pickle", ".", "dump", "(", "obj", ",", "file", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.pickle_handler.PickleHandler.dump_to_path": [[21, 23], ["super().dump_to_path"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.handlers.pickle_handler.PickleHandler.dump_to_path"], ["", "def", "dump_to_path", "(", "self", ",", "obj", ",", "filepath", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PickleHandler", ",", "self", ")", ".", "dump_to_path", "(", "obj", ",", "filepath", ",", "mode", "=", "\"wb\"", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.vgg.VGG.__init__": [[55, 120], ["torch.Module.__init__", "enumerate", "vgg.VGG.add_module", "KeyError", "len", "max", "vgg.make_vgg_layer", "vgg_layers.extend", "vgg.VGG.range_sub_modules.append", "vgg_layers.pop", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.ReLU", "torch.Dropout", "torch.Linear", "torch.ReLU", "torch.Dropout", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.vgg.make_vgg_layer"], ["def", "__init__", "(", "\n", "self", ",", "\n", "depth", ",", "\n", "with_bn", "=", "False", ",", "\n", "num_classes", "=", "-", "1", ",", "\n", "num_stages", "=", "5", ",", "\n", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ",", "4", ")", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "bn_eval", "=", "True", ",", "\n", "bn_frozen", "=", "False", ",", "\n", "ceil_mode", "=", "False", ",", "\n", "with_last_pool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "not", "in", "self", ".", "arch_settings", ":", "\n", "            ", "raise", "KeyError", "(", "\"invalid depth {} for vgg\"", ".", "format", "(", "depth", ")", ")", "\n", "", "assert", "num_stages", ">=", "1", "and", "num_stages", "<=", "5", "\n", "stage_blocks", "=", "self", ".", "arch_settings", "[", "depth", "]", "\n", "self", ".", "stage_blocks", "=", "stage_blocks", "[", ":", "num_stages", "]", "\n", "assert", "len", "(", "dilations", ")", "==", "num_stages", "\n", "assert", "max", "(", "out_indices", ")", "<=", "num_stages", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "bn_eval", "=", "bn_eval", "\n", "self", ".", "bn_frozen", "=", "bn_frozen", "\n", "\n", "self", ".", "inplanes", "=", "3", "\n", "start_idx", "=", "0", "\n", "vgg_layers", "=", "[", "]", "\n", "self", ".", "range_sub_modules", "=", "[", "]", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "num_modules", "=", "num_blocks", "*", "(", "2", "+", "with_bn", ")", "+", "1", "\n", "end_idx", "=", "start_idx", "+", "num_modules", "\n", "dilation", "=", "dilations", "[", "i", "]", "\n", "planes", "=", "64", "*", "2", "**", "i", "if", "i", "<", "4", "else", "512", "\n", "vgg_layer", "=", "make_vgg_layer", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "dilation", "=", "dilation", ",", "\n", "with_bn", "=", "with_bn", ",", "\n", "ceil_mode", "=", "ceil_mode", ",", "\n", ")", "\n", "vgg_layers", ".", "extend", "(", "vgg_layer", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "self", ".", "range_sub_modules", ".", "append", "(", "[", "start_idx", ",", "end_idx", "]", ")", "\n", "start_idx", "=", "end_idx", "\n", "", "if", "not", "with_last_pool", ":", "\n", "            ", "vgg_layers", ".", "pop", "(", "-", "1", ")", "\n", "self", ".", "range_sub_modules", "[", "-", "1", "]", "[", "1", "]", "-=", "1", "\n", "", "self", ".", "module_name", "=", "\"features\"", "\n", "self", ".", "add_module", "(", "self", ".", "module_name", ",", "nn", ".", "Sequential", "(", "*", "vgg_layers", ")", ")", "\n", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "7", "*", "7", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.vgg.VGG.init_weights": [[122, 136], ["isinstance", "logging.getLogger", "trainer.load_checkpoint", "vgg.VGG.modules", "TypeError", "isinstance", "weight_init.kaiming_init", "isinstance", "weight_init.constant_init", "isinstance", "weight_init.normal_init"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_checkpoint", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.weight_init.kaiming_init", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.weight_init.constant_init", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.weight_init.normal_init"], ["", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "normal_init", "(", "m", ",", "std", "=", "0.01", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"pretrained must be a str or None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.vgg.VGG.forward": [[137, 154], ["getattr", "enumerate", "range", "vgg_layer.view", "vgg.VGG.classifier", "outs.append", "len", "tuple", "vgg_layer", "outs.append", "vgg_layer.size"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "vgg_layers", "=", "getattr", "(", "self", ",", "self", ".", "module_name", ")", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "*", "self", ".", "range_sub_modules", "[", "i", "]", ")", ":", "\n", "                ", "vgg_layer", "=", "vgg_layers", "[", "j", "]", "\n", "x", "=", "vgg_layer", "(", "x", ")", "\n", "", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "", "if", "len", "(", "outs", ")", "==", "1", ":", "\n", "            ", "return", "outs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.vgg.VGG.train": [[155, 172], ["super().train", "getattr", "vgg.VGG.modules", "range", "isinstance", "range", "m.eval", "mod.eval", "mod.parameters", "m.parameters"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.train", "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.eval", "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.eval"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "self", ".", "bn_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "if", "self", ".", "bn_frozen", ":", "\n", "                        ", "for", "params", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                            ", "params", ".", "requires_grad", "=", "False", "\n", "", "", "", "", "", "vgg_layers", "=", "getattr", "(", "self", ",", "self", ".", "module_name", ")", "\n", "if", "mode", "and", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "frozen_stages", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "*", "self", ".", "range_sub_modules", "[", "i", "]", ")", ":", "\n", "                    ", "mod", "=", "vgg_layers", "[", "j", "]", "\n", "mod", ".", "eval", "(", ")", "\n", "for", "param", "in", "mod", ".", "parameters", "(", ")", ":", "\n", "                        ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.vgg.conv3x3": [[9, 13], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.vgg.make_vgg_layer": [[16, 29], ["range", "layers.append", "layers.append", "layers.append", "torch.MaxPool2d", "vgg.conv3x3", "layers.append", "torch.ReLU", "torch.BatchNorm2d"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.resnet.conv3x3"], ["", "def", "make_vgg_layer", "(", "\n", "inplanes", ",", "planes", ",", "num_blocks", ",", "dilation", "=", "1", ",", "with_bn", "=", "False", ",", "ceil_mode", "=", "False", "\n", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_blocks", ")", ":", "\n", "        ", "layers", ".", "append", "(", "conv3x3", "(", "inplanes", ",", "planes", ",", "dilation", ")", ")", "\n", "if", "with_bn", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "planes", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "inplanes", "=", "planes", "\n", "", "layers", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "ceil_mode", "=", "ceil_mode", ")", ")", "\n", "\n", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.resnet.BasicBlock.__init__": [[26, 46], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.resnet.conv3x3", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "\"pytorch\"", ",", "\n", "with_cp", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "dilation", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "assert", "not", "with_cp", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.resnet.BasicBlock.forward": [[47, 64], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.resnet.Bottleneck.__init__": [[69, 116], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "\"pytorch\"", ",", "\n", "with_cp", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Bottleneck block.\n\n        If style is \"pytorch\", the stride-two layer is the 3x3 conv layer,\n        if it is \"caffe\", the stride-two layer is the first 1x1 conv layer.\n        \"\"\"", "\n", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "style", "in", "[", "\"pytorch\"", ",", "\"caffe\"", "]", "\n", "if", "style", "==", "\"pytorch\"", ":", "\n", "            ", "conv1_stride", "=", "1", "\n", "conv2_stride", "=", "stride", "\n", "", "else", ":", "\n", "            ", "conv1_stride", "=", "stride", "\n", "conv2_stride", "=", "1", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "conv1_stride", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "conv2_stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.resnet.Bottleneck.forward": [[117, 147], ["resnet.Bottleneck.relu", "resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "torch.checkpoint", "torch.checkpoint", "resnet.Bottleneck.forward._inner_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.resnet.ResNet.__init__": [[216, 272], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "enumerate", "KeyError", "len", "len", "max", "resnet.make_res_layer", "resnet.ResNet.add_module", "resnet.ResNet.res_layers.append", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.resnet.make_res_layer"], ["def", "__init__", "(", "\n", "self", ",", "\n", "depth", ",", "\n", "num_stages", "=", "4", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "\n", "style", "=", "\"pytorch\"", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "bn_eval", "=", "True", ",", "\n", "bn_frozen", "=", "False", ",", "\n", "with_cp", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "not", "in", "self", ".", "arch_settings", ":", "\n", "            ", "raise", "KeyError", "(", "\"invalid depth {} for resnet\"", ".", "format", "(", "depth", ")", ")", "\n", "", "assert", "num_stages", ">=", "1", "and", "num_stages", "<=", "4", "\n", "block", ",", "stage_blocks", "=", "self", ".", "arch_settings", "[", "depth", "]", "\n", "stage_blocks", "=", "stage_blocks", "[", ":", "num_stages", "]", "\n", "assert", "len", "(", "strides", ")", "==", "len", "(", "dilations", ")", "==", "num_stages", "\n", "assert", "max", "(", "out_indices", ")", "<", "num_stages", "\n", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "bn_eval", "=", "bn_eval", "\n", "self", ".", "bn_frozen", "=", "bn_frozen", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "res_layers", "=", "[", "]", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "stage_blocks", ")", ":", "\n", "            ", "stride", "=", "strides", "[", "i", "]", "\n", "dilation", "=", "dilations", "[", "i", "]", "\n", "planes", "=", "64", "*", "2", "**", "i", "\n", "res_layer", "=", "make_res_layer", "(", "\n", "block", ",", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "style", "=", "self", ".", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "layer_name", "=", "\"layer{}\"", ".", "format", "(", "i", "+", "1", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "res_layer", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "", "self", ".", "feat_dim", "=", "block", ".", "expansion", "*", "64", "*", "2", "**", "(", "len", "(", "stage_blocks", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.resnet.ResNet.init_weights": [[273, 285], ["isinstance", "logging.getLogger", "trainer.load_checkpoint", "resnet.ResNet.modules", "TypeError", "isinstance", "weight_init.kaiming_init", "isinstance", "weight_init.constant_init"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_checkpoint", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.weight_init.kaiming_init", "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.weight_init.constant_init"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"pretrained must be a str or None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.resnet.ResNet.forward": [[286, 301], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "enumerate", "getattr", "getattr.", "len", "tuple", "outs.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "layer_name", "in", "enumerate", "(", "self", ".", "res_layers", ")", ":", "\n", "            ", "res_layer", "=", "getattr", "(", "self", ",", "layer_name", ")", "\n", "x", "=", "res_layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "", "if", "len", "(", "outs", ")", "==", "1", ":", "\n", "            ", "return", "outs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.resnet.ResNet.train": [[302, 324], ["super().train", "resnet.ResNet.modules", "resnet.ResNet.conv1.parameters", "resnet.ResNet.bn1.parameters", "resnet.ResNet.bn1.eval", "range", "isinstance", "getattr", "getattr.eval", "getattr.parameters", "m.eval", "m.parameters"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.train", "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.eval", "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.eval", "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.eval"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "self", ".", "bn_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "if", "self", ".", "bn_frozen", ":", "\n", "                        ", "for", "params", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                            ", "params", ".", "requires_grad", "=", "False", "\n", "", "", "", "", "", "if", "mode", "and", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "for", "param", "in", "self", ".", "conv1", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "bn1", ".", "eval", "(", ")", "\n", "self", ".", "bn1", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "bn1", ".", "bias", ".", "requires_grad", "=", "False", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "                ", "mod", "=", "getattr", "(", "self", ",", "\"layer{}\"", ".", "format", "(", "i", ")", ")", "\n", "mod", ".", "eval", "(", ")", "\n", "for", "param", "in", "mod", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.resnet.conv3x3": [[10, 20], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.resnet.make_res_layer": [[149, 185], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "function", ["None"], ["", "", "def", "make_res_layer", "(", "\n", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "style", "=", "\"pytorch\"", ",", "\n", "with_cp", "=", "False", ",", "\n", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "        ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", ",", "planes", ",", "stride", ",", "dilation", ",", "downsample", ",", "style", "=", "style", ",", "with_cp", "=", "with_cp", "\n", ")", "\n", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "        ", "layers", ".", "append", "(", "\n", "block", "(", "inplanes", ",", "planes", ",", "1", ",", "dilation", ",", "style", "=", "style", ",", "with_cp", "=", "with_cp", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.weight_init.constant_init": [[4, 8], ["torch.init.constant_", "hasattr", "torch.init.constant_"], "function", ["None"], ["\n", "def", "xavier_init", "(", "module", ",", "gain", "=", "1", ",", "bias", "=", "0", ",", "distribution", "=", "\"normal\"", ")", ":", "\n", "    ", "assert", "distribution", "in", "[", "\"uniform\"", ",", "\"normal\"", "]", "\n", "if", "distribution", "==", "\"uniform\"", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ",", "gain", "=", "gain", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.weight_init.xavier_init": [[10, 18], ["torch.init.xavier_uniform_", "torch.init.xavier_normal_", "hasattr", "torch.init.constant_"], "function", ["None"], ["        ", "nn", ".", "init", ".", "xavier_normal_", "(", "module", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "", "if", "hasattr", "(", "module", ",", "\"bias\"", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n", "\n", "", "", "def", "normal_init", "(", "module", ",", "mean", "=", "0", ",", "std", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "    ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "weight", ",", "mean", ",", "std", ")", "\n", "if", "hasattr", "(", "module", ",", "\"bias\"", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.weight_init.normal_init": [[20, 24], ["torch.init.normal_", "hasattr", "torch.init.constant_"], "function", ["None"], ["\n", "", "", "def", "uniform_init", "(", "module", ",", "a", "=", "0", ",", "b", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "    ", "nn", ".", "init", ".", "uniform_", "(", "module", ".", "weight", ",", "a", ",", "b", ")", "\n", "if", "hasattr", "(", "module", ",", "\"bias\"", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.weight_init.uniform_init": [[26, 30], ["torch.init.uniform_", "hasattr", "torch.init.constant_"], "function", ["None"], ["\n", "", "", "def", "kaiming_init", "(", "\n", "module", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ",", "bias", "=", "0", ",", "distribution", "=", "\"normal\"", "\n", ")", ":", "\n", "    ", "assert", "distribution", "in", "[", "\"uniform\"", ",", "\"normal\"", "]", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.weight_init.kaiming_init": [[32, 46], ["torch.init.kaiming_uniform_", "torch.init.kaiming_normal_", "hasattr", "torch.init.constant_"], "function", ["None"], ["        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "module", ".", "weight", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "else", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "if", "hasattr", "(", "module", ",", "\"bias\"", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n", "\n", "", "", "def", "bias_init_with_prob", "(", "prior_prob", ")", ":", "\n", "    ", "\"\"\" initialize conv/fc bias value according to giving probablity\"\"\"", "\n", "bias_init", "=", "float", "(", "-", "np", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", ")", "\n", "return", "bias_init", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.weight_init.caffe2_xavier_init": [[48, 53], ["weight_init.kaiming_init"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.weight_init.kaiming_init"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.alexnet.AlexNet.__init__": [[15, 42], ["torch.Module.__init__", "torch.Sequential", "torch.Conv2d", "torch.ReLU", "torch.MaxPool2d", "torch.Conv2d", "torch.ReLU", "torch.MaxPool2d", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU", "torch.Conv2d", "torch.ReLU", "torch.MaxPool2d", "torch.Sequential", "torch.Dropout", "torch.Linear", "torch.ReLU", "torch.Dropout", "torch.Linear", "torch.ReLU", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "4", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", "*", "6", "*", "6", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.alexnet.AlexNet.init_weights": [[44, 53], ["isinstance", "logging.getLogger", "trainer.load_checkpoint", "TypeError"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_checkpoint"], ["", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "# use default initializer", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"pretrained must be a str or None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.cnn.alexnet.AlexNet.forward": [[54, 62], ["alexnet.AlexNet.features", "alexnet.AlexNet.view", "alexnet.AlexNet.classifier", "alexnet.AlexNet.size"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "256", "*", "6", "*", "6", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.parallel_test.worker_func": [[9, 30], ["model_cls", "checkpoint.load_checkpoint", "torch.cuda.set_device", "model_cls.cuda", "model_cls.eval", "torch.no_grad", "idx_queue.get", "model_cls.", "result_queue.put", "data_func"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_checkpoint", "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.eval", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.put"], ["def", "worker_func", "(", "\n", "model_cls", ",", "\n", "model_kwargs", ",", "\n", "checkpoint", ",", "\n", "dataset", ",", "\n", "data_func", ",", "\n", "gpu_id", ",", "\n", "idx_queue", ",", "\n", "result_queue", ",", "\n", ")", ":", "\n", "    ", "model", "=", "model_cls", "(", "**", "model_kwargs", ")", "\n", "load_checkpoint", "(", "model", ",", "checkpoint", ",", "map_location", "=", "\"cpu\"", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu_id", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "idx", "=", "idx_queue", ".", "get", "(", ")", "\n", "data", "=", "dataset", "[", "idx", "]", "\n", "result", "=", "model", "(", "**", "data_func", "(", "data", ",", "gpu_id", ")", ")", "\n", "result_queue", ".", "put", "(", "(", "idx", ",", "result", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.parallel_test.parallel_test": [[32, 78], ["multiprocessing.get_context", "multiprocessing.get_context.Queue", "multiprocessing.get_context.Queue", "range", "len", "multiprocessing.get_context.Process", "w.start", "len", "ctx.Queue.put", "range", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.ProgressBar.start", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.put"], ["", "", "", "def", "parallel_test", "(", "\n", "model_cls", ",", "model_kwargs", ",", "checkpoint", ",", "dataset", ",", "data_func", ",", "gpus", ",", "workers_per_gpu", "=", "1", "\n", ")", ":", "\n", "    ", "\"\"\"Parallel testing on multiple GPUs.\n\n    Args:\n        model_cls (type): Model class type.\n        model_kwargs (dict): Arguments to init the model.\n        checkpoint (str): Checkpoint filepath.\n        dataset (:obj:`Dataset`): The dataset to be tested.\n        data_func (callable): The function that generates model inputs.\n        gpus (list[int]): GPU ids to be used.\n        workers_per_gpu (int): Number of processes on each GPU. It is possible\n            to run multiple workers on each GPU.\n\n    Returns:\n        list: Test results.\n    \"\"\"", "\n", "ctx", "=", "multiprocessing", ".", "get_context", "(", "\"spawn\"", ")", "\n", "idx_queue", "=", "ctx", ".", "Queue", "(", ")", "\n", "result_queue", "=", "ctx", ".", "Queue", "(", ")", "\n", "num_workers", "=", "len", "(", "gpus", ")", "*", "workers_per_gpu", "\n", "workers", "=", "[", "\n", "ctx", ".", "Process", "(", "\n", "target", "=", "worker_func", ",", "\n", "args", "=", "(", "\n", "model_cls", ",", "\n", "model_kwargs", ",", "\n", "checkpoint", ",", "\n", "dataset", ",", "\n", "data_func", ",", "\n", "gpus", "[", "i", "%", "len", "(", "gpus", ")", "]", ",", "\n", "idx_queue", ",", "\n", "result_queue", ",", "\n", ")", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "num_workers", ")", "\n", "]", "\n", "for", "w", "in", "workers", ":", "\n", "        ", "w", ".", "daemon", "=", "True", "\n", "w", ".", "start", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "idx_queue", ".", "put", "(", "i", ")", "\n", "\n", "", "results", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.BackgroundGenerator.__init__": [[105, 111], ["threading.Thread.__init__", "queue.Queue", "trainer.BackgroundGenerator.start"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.ProgressBar.start"], ["    ", "def", "__init__", "(", "self", ",", "generator", ",", "max_prefetch", "=", "1", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "self", ".", "queue", "=", "queue", ".", "Queue", "(", "max_prefetch", ")", "\n", "self", ".", "generator", "=", "generator", "\n", "self", ".", "daemon", "=", "True", "\n", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.BackgroundGenerator.run": [[112, 116], ["trainer.BackgroundGenerator.queue.put", "trainer.BackgroundGenerator.queue.put"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.put", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.put"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "for", "item", "in", "self", ".", "generator", ":", "\n", "            ", "self", ".", "queue", ".", "put", "(", "item", ")", "\n", "", "self", ".", "queue", ".", "put", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.BackgroundGenerator.next": [[117, 122], ["trainer.BackgroundGenerator.queue.get"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "next_item", "=", "self", ".", "queue", ".", "get", "(", ")", "\n", "if", "next_item", "is", "None", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "return", "next_item", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.BackgroundGenerator.__next__": [[124, 126], ["trainer.BackgroundGenerator.next"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.next"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.BackgroundGenerator.__iter__": [[127, 129], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Prefetcher.__init__": [[132, 136], ["iter", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "trainer.Prefetcher.preload"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.iter", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Prefetcher.preload"], ["    ", "def", "__init__", "(", "self", ",", "dataloader", ")", ":", "\n", "        ", "self", ".", "loader", "=", "iter", "(", "dataloader", ")", "\n", "self", ".", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "self", ".", "preload", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Prefetcher.preload": [[137, 146], ["trainer.Prefetcher.next"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.next"], ["", "def", "preload", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "next_input", "=", "next", "(", "self", ".", "loader", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "next_input", "=", "None", "\n", "return", "\n", "", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "self", ".", "next_input", "=", "example_to_device", "(", "\n", "self", ".", "next_input", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", ",", "non_blocking", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Prefetcher.next": [[148, 153], ["torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "trainer.Prefetcher.preload", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Prefetcher.preload"], ["", "", "def", "next", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "input", "=", "self", ".", "next_input", "\n", "self", ".", "preload", "(", ")", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.__init__": [[167, 215], ["callable", "det3d.torchie.is_str", "hasattr", "utils.get_dist_info", "utils.get_time_str", "log_buffer.LogBuffer", "os.abspath", "det3d.torchie.mkdir_or_exist", "trainer.Trainer.init_logger", "TypeError"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_str", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_dist_info", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_time_str", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path.mkdir_or_exist", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.init_logger"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "batch_processor", ",", "\n", "optimizer", "=", "None", ",", "\n", "lr_scheduler", "=", "None", ",", "\n", "work_dir", "=", "None", ",", "\n", "log_level", "=", "logging", ".", "INFO", ",", "\n", "logger", "=", "None", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "assert", "callable", "(", "batch_processor", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "lr_scheduler", "=", "lr_scheduler", "\n", "\n", "self", ".", "batch_processor", "=", "batch_processor", "\n", "\n", "# Create work_dir", "\n", "if", "torchie", ".", "is_str", "(", "work_dir", ")", ":", "\n", "            ", "self", ".", "work_dir", "=", "osp", ".", "abspath", "(", "work_dir", ")", "\n", "torchie", ".", "mkdir_or_exist", "(", "self", ".", "work_dir", ")", "\n", "", "elif", "work_dir", "is", "None", ":", "\n", "            ", "self", ".", "work_dir", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"'work_dir' must be a str or None\"", ")", "\n", "\n", "# Get model name from the model class", "\n", "", "if", "hasattr", "(", "self", ".", "model", ",", "\"module\"", ")", ":", "\n", "            ", "self", ".", "_model_name", "=", "self", ".", "model", ".", "module", ".", "__class__", ".", "__name__", "\n", "", "else", ":", "\n", "            ", "self", ".", "_model_name", "=", "self", ".", "model", ".", "__class__", ".", "__name__", "\n", "\n", "", "self", ".", "_rank", ",", "self", ".", "_world_size", "=", "get_dist_info", "(", ")", "\n", "self", ".", "timestamp", "=", "get_time_str", "(", ")", "\n", "if", "logger", "is", "None", ":", "\n", "            ", "self", ".", "logger", "=", "self", ".", "init_logger", "(", "work_dir", ",", "log_level", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", "=", "logger", "\n", "", "self", ".", "log_buffer", "=", "LogBuffer", "(", ")", "\n", "\n", "self", ".", "mode", "=", "None", "\n", "self", ".", "_hooks", "=", "[", "]", "\n", "self", ".", "_epoch", "=", "0", "\n", "self", ".", "_iter", "=", "0", "\n", "self", ".", "_inner_iter", "=", "0", "\n", "self", ".", "_max_epochs", "=", "0", "\n", "self", ".", "_max_iters", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.model_name": [[216, 220], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_name", "(", "self", ")", ":", "\n", "        ", "\"\"\"str: Name of the model, usually the module class name.\"\"\"", "\n", "return", "self", ".", "_model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.rank": [[221, 225], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rank", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Rank of current process. (distributed training)\"\"\"", "\n", "return", "self", ".", "_rank", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.world_size": [[226, 231], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "world_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Number of processes participating in the job.\n        (distributed training)\"\"\"", "\n", "return", "self", ".", "_world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.hooks": [[232, 236], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hooks", "(", "self", ")", ":", "\n", "        ", "\"\"\"list[:obj:`Hook`]: A list of registered hooks.\"\"\"", "\n", "return", "self", ".", "_hooks", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.epoch": [[237, 241], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Current epoch.\"\"\"", "\n", "return", "self", ".", "_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.iter": [[242, 246], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "iter", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Current iteration.\"\"\"", "\n", "return", "self", ".", "_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.inner_iter": [[247, 251], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "inner_iter", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Iteration in an epoch.\"\"\"", "\n", "return", "self", ".", "_inner_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.max_epochs": [[252, 256], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_epochs", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Maximum training epochs.\"\"\"", "\n", "return", "self", ".", "_max_epochs", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.max_iters": [[257, 261], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_iters", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Maximum training iterations.\"\"\"", "\n", "return", "self", ".", "_max_iters", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.init_optimizer": [[262, 286], ["isinstance", "utils.obj_from_dict", "dict", "isinstance", "TypeError", "trainer.Trainer.model.parameters", "type"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.obj_from_dict"], ["", "def", "init_optimizer", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"Init the optimizer\n\n        Args:\n            optimizer (dict or :obj:`~torch.optim.Optimizer`)\n\n        Returns:\n            :obj:`~torch.optim.Optimizer`\n\n        Examples:\n            >>> optimizer = dict(type='SGD', lr=0.01, momentum=0.9)\n            >>> type(runner.init_optimizer(optimizer))\n            <class 'torch.optim.sgd.SGD`>\n        \"\"\"", "\n", "if", "isinstance", "(", "optimizer", ",", "dict", ")", ":", "\n", "            ", "optimizer", "=", "obj_from_dict", "(", "\n", "optimizer", ",", "torch", ".", "optim", ",", "dict", "(", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", ")", "\n", "", "elif", "not", "isinstance", "(", "optimizer", ",", "torch", ".", "optim", ".", "Optimizer", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"optimizer must be either an Optimizer object or a dict, \"", "\n", "\"but got {}\"", ".", "format", "(", "type", "(", "optimizer", ")", ")", "\n", ")", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer._add_file_handler": [[287, 296], ["logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logger.addHandler", "logging.Formatter"], "methods", ["None"], ["", "def", "_add_file_handler", "(", "self", ",", "logger", ",", "filename", "=", "None", ",", "mode", "=", "\"w\"", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "# TODO: move this method out of runner", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "filename", ",", "mode", ")", "\n", "file_handler", ".", "setFormatter", "(", "\n", "logging", ".", "Formatter", "(", "\"%(asctime)s - %(levelname)s - %(message)s\"", ")", "\n", ")", "\n", "file_handler", ".", "setLevel", "(", "level", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.init_logger": [[297, 314], ["logging.basicConfig", "logging.getLogger", "os.join", "trainer.Trainer._add_file_handler"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer._add_file_handler"], ["", "def", "init_logger", "(", "self", ",", "log_dir", "=", "None", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "        ", "\"\"\"Init the logger.\n\n        Args:\n\n        Returns:\n            :obj:`~logging.Logger`: Python logger.\n        \"\"\"", "\n", "logging", ".", "basicConfig", "(", "\n", "format", "=", "\"%(asctime)s - %(levelname)s - % (message)s\"", ",", "level", "=", "level", "\n", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "if", "log_dir", "and", "self", ".", "rank", "==", "0", ":", "\n", "            ", "filename", "=", "\"{}.log\"", ".", "format", "(", "self", ".", "timestamp", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "log_dir", ",", "filename", ")", "\n", "self", ".", "_add_file_handler", "(", "logger", ",", "log_file", ",", "level", "=", "level", ")", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.current_lr": [[315, 319], ["RuntimeError"], "methods", ["None"], ["", "def", "current_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "optimizer", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"lr is not applicable because optimizer does not exist.\"", ")", "\n", "", "return", "[", "group", "[", "\"lr\"", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.register_hook": [[320, 341], ["isinstance", "hasattr", "priority.get_priority.get_priority", "range", "ValueError", "trainer.Trainer._hooks.insert", "len", "trainer.Trainer._hooks.insert"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.priority.get_priority"], ["", "def", "register_hook", "(", "self", ",", "hook", ",", "priority", "=", "\"NORMAL\"", ")", ":", "\n", "        ", "\"\"\"Register a hook into the hook list.\n\n        Args:\n            hook (:obj:`Hook`)\n            priority (int or str or :obj:`Priority`)\n        \"\"\"", "\n", "assert", "isinstance", "(", "hook", ",", "Hook", ")", "\n", "if", "hasattr", "(", "hook", ",", "\"priority\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'\"priority\" is a reserved attribute for hooks'", ")", "\n", "", "priority", "=", "get_priority", "(", "priority", ")", "\n", "hook", ".", "priority", "=", "priority", "\n", "# Insert the hook to a sorted list", "\n", "inserted", "=", "False", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_hooks", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "if", "priority", ">=", "self", ".", "_hooks", "[", "i", "]", ".", "priority", ":", "\n", "                ", "self", ".", "_hooks", ".", "insert", "(", "i", "+", "1", ",", "hook", ")", "\n", "inserted", "=", "True", "\n", "break", "\n", "", "", "if", "not", "inserted", ":", "\n", "            ", "self", ".", "_hooks", ".", "insert", "(", "0", ",", "hook", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.build_hook": [[342, 352], ["isinstance", "isinstance", "issubclass", "hook_type", "TypeError", "type"], "methods", ["None"], ["", "", "def", "build_hook", "(", "self", ",", "args", ",", "hook_type", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "args", ",", "Hook", ")", ":", "\n", "            ", "return", "args", "\n", "", "elif", "isinstance", "(", "args", ",", "dict", ")", ":", "\n", "            ", "assert", "issubclass", "(", "hook_type", ",", "Hook", ")", "\n", "return", "hook_type", "(", "**", "args", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"'args' must be either a Hook object\"", "\n", "\" or dict, not {}\"", ".", "format", "(", "type", "(", "args", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.call_hook": [[354, 357], ["getattr"], "methods", ["None"], ["", "", "def", "call_hook", "(", "self", ",", "fn_name", ")", ":", "\n", "        ", "for", "hook", "in", "self", ".", "_hooks", ":", "\n", "            ", "getattr", "(", "hook", ",", "fn_name", ")", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.load_checkpoint": [[358, 361], ["trainer.Trainer.logger.info", "checkpoint.load_checkpoint"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_checkpoint"], ["", "", "def", "load_checkpoint", "(", "self", ",", "filename", ",", "map_location", "=", "\"cpu\"", ",", "strict", "=", "False", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "\"load checkpoint from %s\"", ",", "filename", ")", "\n", "return", "load_checkpoint", "(", "self", ".", "model", ",", "filename", ",", "map_location", ",", "strict", ",", "self", ".", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.save_checkpoint": [[362, 377], ["filename_tmpl.format", "os.join", "os.join", "checkpoint.save_checkpoint", "det3d.torchie.symlink", "dict", "dict.update"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.save_checkpoint", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path.symlink", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update"], ["", "def", "save_checkpoint", "(", "\n", "self", ",", "out_dir", ",", "filename_tmpl", "=", "\"epoch_{}.pth\"", ",", "save_optimizer", "=", "True", ",", "meta", "=", "None", "\n", ")", ":", "\n", "        ", "if", "meta", "is", "None", ":", "\n", "            ", "meta", "=", "dict", "(", "epoch", "=", "self", ".", "epoch", "+", "1", ",", "iter", "=", "self", ".", "iter", ")", "\n", "", "else", ":", "\n", "            ", "meta", ".", "update", "(", "epoch", "=", "self", ".", "epoch", "+", "1", ",", "iter", "=", "self", ".", "iter", ")", "\n", "\n", "", "filename", "=", "filename_tmpl", ".", "format", "(", "self", ".", "epoch", "+", "1", ")", "\n", "filepath", "=", "osp", ".", "join", "(", "out_dir", ",", "filename", ")", "\n", "linkpath", "=", "osp", ".", "join", "(", "out_dir", ",", "\"latest.pth\"", ")", "\n", "optimizer", "=", "self", ".", "optimizer", "if", "save_optimizer", "else", "None", "\n", "save_checkpoint", "(", "self", ".", "model", ",", "filepath", ",", "optimizer", "=", "optimizer", ",", "meta", "=", "meta", ")", "\n", "# Use relative symlink", "\n", "torchie", ".", "symlink", "(", "filename", ",", "linkpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.batch_processor_inline": [[378, 405], ["trainer.example_to_device", "trainer.Trainer.call_hook", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "model", "trainer.Trainer.call_hook", "trainer.parse_second_losses", "dict", "trainer.Trainer.call_hook", "model"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.example_to_device", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.call_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.call_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.parse_second_losses", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.call_hook"], ["", "def", "batch_processor_inline", "(", "self", ",", "model", ",", "data", ",", "train_mode", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "\"local_rank\"", "in", "kwargs", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "kwargs", "[", "\"local_rank\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "None", "\n", "\n", "# data = example_convert_to_torch(data, device=device)", "\n", "", "example", "=", "example_to_device", "(", "\n", "data", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", ",", "non_blocking", "=", "False", "\n", ")", "\n", "\n", "self", ".", "call_hook", "(", "\"after_data_to_device\"", ")", "\n", "\n", "if", "train_mode", ":", "\n", "            ", "losses", "=", "model", "(", "example", ",", "return_loss", "=", "True", ")", "\n", "self", ".", "call_hook", "(", "\"after_forward\"", ")", "\n", "loss", ",", "log_vars", "=", "parse_second_losses", "(", "losses", ")", "\n", "del", "losses", "\n", "\n", "outputs", "=", "dict", "(", "\n", "loss", "=", "loss", ",", "log_vars", "=", "log_vars", ",", "num_samples", "=", "-", "1", "# TODO: FIX THIS", "\n", ")", "\n", "self", ".", "call_hook", "(", "\"after_parse_loss\"", ")", "\n", "\n", "return", "outputs", "\n", "", "else", ":", "\n", "            ", "return", "model", "(", "example", ",", "return_loss", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.train": [[406, 464], ["trainer.Trainer.model.train", "len", "trainer.Trainer.call_hook", "enumerate", "trainer.Trainer.call_hook", "trainer.Trainer.model.named_modules", "trainer.Trainer.call_hook", "trainer.Trainer.batch_processor_inline", "trainer.Trainer.call_hook", "trainer.Trainer.lr_scheduler.step", "isinstance", "TypeError", "trainer.Trainer.log_buffer.update", "m.eval", "m.train", "module.apply", "module.apply", "classname.find", "classname.find", "classname.find", "classname.find"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.train", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.call_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.call_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.call_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.batch_processor_inline", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.call_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.eval", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.train"], ["", "", "def", "train", "(", "self", ",", "data_loader", ",", "epoch", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "TWO_STAGE", ":", "\n", "            ", "def", "freeze_bn", "(", "m", ")", ":", "\n", "                ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'BatchNorm1d'", ")", "!=", "-", "1", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n", "", "", "def", "unfreeze_bn", "(", "m", ")", ":", "\n", "                ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'BatchNorm1d'", ")", "!=", "-", "1", ":", "\n", "                    ", "m", ".", "train", "(", ")", "\n", "\n", "", "", "for", "name", ",", "module", "in", "self", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "\"forecast_conv\"", "not", "in", "name", "and", "\"reverse_conv\"", "not", "in", "name", "and", "\"vel\"", "not", "in", "name", "and", "\"rot\"", "not", "in", "name", "and", "\"rvel\"", "not", "in", "name", "and", "\"rrot\"", "not", "in", "name", ":", "\n", "                    ", "module", ".", "apply", "(", "freeze_bn", ")", "\n", "", "else", ":", "\n", "                    ", "module", ".", "apply", "(", "unfreeze_bn", ")", "\n", "\n", "\n", "", "", "", "self", ".", "mode", "=", "\"train\"", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "length", "=", "len", "(", "data_loader", ")", "\n", "self", ".", "_max_iters", "=", "self", ".", "_max_epochs", "*", "self", ".", "length", "\n", "self", ".", "call_hook", "(", "\"before_train_epoch\"", ")", "\n", "base_step", "=", "epoch", "*", "self", ".", "length", "\n", "\n", "# prefetcher = Prefetcher(data_loader)", "\n", "# for data_batch in BackgroundGenerator(data_loader, max_prefetch=3):", "\n", "for", "i", ",", "data_batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "global_step", "=", "base_step", "+", "i", "\n", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "#print(global_step)", "\n", "                ", "self", ".", "lr_scheduler", ".", "step", "(", "global_step", ")", "\n", "\n", "", "self", ".", "_inner_iter", "=", "i", "\n", "\n", "self", ".", "call_hook", "(", "\"before_train_iter\"", ")", "\n", "# outputs = self.batch_processor(self.model,", "\n", "#                                data_batch,", "\n", "#                                train_mode=True,", "\n", "#                                **kwargs)", "\n", "outputs", "=", "self", ".", "batch_processor_inline", "(", "\n", "self", ".", "model", ",", "data_batch", ",", "train_mode", "=", "True", ",", "**", "kwargs", "\n", ")", "\n", "\n", "if", "not", "isinstance", "(", "outputs", ",", "dict", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"batch_processor() must return a dict\"", ")", "\n", "", "if", "\"log_vars\"", "in", "outputs", ":", "\n", "                ", "self", ".", "log_buffer", ".", "update", "(", "outputs", "[", "\"log_vars\"", "]", ",", "outputs", "[", "\"num_samples\"", "]", ")", "\n", "\n", "", "self", ".", "outputs", "=", "outputs", "\n", "self", ".", "call_hook", "(", "\"after_train_iter\"", ")", "\n", "self", ".", "_iter", "+=", "1", "\n", "\n", "", "self", ".", "call_hook", "(", "\"after_train_epoch\"", ")", "\n", "self", ".", "_epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.val": [[465, 522], ["trainer.Trainer.model.eval", "trainer.Trainer.call_hook", "trainer.Trainer.logger.info", "torch.device", "torch.device", "torch.device", "torch.device", "enumerate", "utils.synchronize", "utils.all_gather", "trainer.Trainer.data_loader.dataset.evaluation", "trainer.Trainer.logger.info", "result_dict[].items", "trainer.Trainer.call_hook", "det3d.torchie.ProgressBar", "trainer.Trainer.call_hook", "predictions.update", "trainer.Trainer.logger.info", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.batch_processor", "output.items", "detections.update", "range", "v.to", "det3d.torchie.ProgressBar.update"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.eval", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.call_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.synchronize", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.all_gather", "home.repos.pwc.inspect_result.neeharperi_futuredet.nuscenes.nuscenes.NuScenesDataset.evaluation", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.call_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.call_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.apis.train.batch_processor", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update"], ["", "def", "val", "(", "self", ",", "data_loader", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "mode", "=", "\"val\"", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "call_hook", "(", "\"before_val_epoch\"", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f\"work dir: {self.work_dir}\"", ")", "\n", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "prog_bar", "=", "torchie", ".", "ProgressBar", "(", "len", "(", "data_loader", ".", "dataset", ")", ")", "\n", "\n", "", "detections", "=", "{", "}", "\n", "cpu_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "for", "i", ",", "data_batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "self", ".", "_inner_iter", "=", "i", "\n", "self", ".", "call_hook", "(", "\"before_val_iter\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outputs", "=", "self", ".", "batch_processor", "(", "\n", "self", ".", "model", ",", "data_batch", ",", "train_mode", "=", "False", ",", "**", "kwargs", "\n", ")", "\n", "", "for", "output", "in", "outputs", ":", "\n", "                ", "token", "=", "output", "[", "\"metadata\"", "]", "[", "\"token\"", "]", "\n", "for", "k", ",", "v", "in", "output", ".", "items", "(", ")", ":", "\n", "                    ", "if", "k", "not", "in", "[", "\n", "\"metadata\"", ",", "\n", "]", ":", "\n", "                        ", "output", "[", "k", "]", "=", "v", ".", "to", "(", "cpu_device", ")", "\n", "", "", "detections", ".", "update", "(", "\n", "{", "token", ":", "output", ",", "}", "\n", ")", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "                    ", "for", "_", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "                        ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "", "", "", "synchronize", "(", ")", "\n", "\n", "all_predictions", "=", "all_gather", "(", "detections", ")", "\n", "\n", "if", "self", ".", "rank", "!=", "0", ":", "\n", "            ", "return", "\n", "\n", "", "predictions", "=", "{", "}", "\n", "for", "p", "in", "all_predictions", ":", "\n", "            ", "predictions", ".", "update", "(", "p", ")", "\n", "\n", "# torch.save(predictions, \"final_predictions_debug.pkl\")", "\n", "# TODO fix evaluation module", "\n", "", "result_dict", ",", "_", "=", "self", ".", "data_loader", ".", "dataset", ".", "evaluation", "(", "\n", "predictions", ",", "output_dir", "=", "self", ".", "work_dir", "\n", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\"\\n\"", ")", "\n", "for", "k", ",", "v", "in", "result_dict", "[", "\"results\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "f\"Evaluation {k}: {v}\"", ")", "\n", "\n", "", "self", ".", "call_hook", "(", "\"after_val_epoch\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.resume": [[523, 537], ["trainer.Trainer.logger.info", "trainer.Trainer.load_checkpoint", "trainer.Trainer.load_checkpoint", "trainer.Trainer.optimizer.load_state_dict", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_checkpoint", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_checkpoint", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.load_state_dict"], ["", "def", "resume", "(", "self", ",", "checkpoint", ",", "resume_optimizer", "=", "True", ",", "map_location", "=", "\"default\"", ")", ":", "\n", "        ", "if", "map_location", "==", "\"default\"", ":", "\n", "            ", "checkpoint", "=", "self", ".", "load_checkpoint", "(", "\n", "checkpoint", ",", "map_location", "=", "'cuda:{}'", ".", "format", "(", "torch", ".", "cuda", ".", "current_device", "(", ")", ")", "# TODO: FIX THIS!!", "\n", ")", "\n", "", "else", ":", "\n", "            ", "checkpoint", "=", "self", ".", "load_checkpoint", "(", "checkpoint", ",", "map_location", "=", "map_location", ")", "\n", "\n", "", "self", ".", "_epoch", "=", "checkpoint", "[", "\"meta\"", "]", "[", "\"epoch\"", "]", "\n", "self", ".", "_iter", "=", "checkpoint", "[", "\"meta\"", "]", "[", "\"iter\"", "]", "\n", "if", "\"optimizer\"", "in", "checkpoint", "and", "resume_optimizer", ":", "\n", "            ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\"resumed epoch %d, iter %d\"", ",", "self", ".", "epoch", ",", "self", ".", "iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.run": [[538, 588], ["isinstance", "det3d.torchie.is_list_of", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "trainer.Trainer.call_hook", "trainer.Trainer.call_hook", "len", "len", "utils.get_host_info", "enumerate", "isinstance", "range", "getattr", "callable", "hasattr", "ValueError", "TypeError", "getattr.", "getattr.", "type"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_list_of", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.call_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.call_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_host_info"], ["", "def", "run", "(", "self", ",", "data_loaders", ",", "workflow", ",", "max_epochs", ",", "cfg", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Start running.\n\n        Args:\n            data_loaders (list[:obj:`DataLoader`])\n            workflow (list[tuple]): A list of (phase, epochs) to specify the\n                running order and epochs.\n            max_epochs (int)\n        \"\"\"", "\n", "assert", "isinstance", "(", "data_loaders", ",", "list", ")", "\n", "assert", "torchie", ".", "is_list_of", "(", "workflow", ",", "tuple", ")", "\n", "assert", "len", "(", "data_loaders", ")", "==", "len", "(", "workflow", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "_max_epochs", "=", "max_epochs", "\n", "work_dir", "=", "self", ".", "work_dir", "if", "self", ".", "work_dir", "is", "not", "None", "else", "\"NONE\"", "\n", "self", ".", "logger", ".", "info", "(", "\n", "\"Start running, host: %s, work_dir: %s\"", ",", "get_host_info", "(", ")", ",", "work_dir", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"workflow: %s, max: %d epochs\"", ",", "workflow", ",", "max_epochs", ")", "\n", "self", ".", "call_hook", "(", "\"before_run\"", ")", "\n", "\n", "while", "self", ".", "epoch", "<", "max_epochs", ":", "\n", "            ", "for", "i", ",", "flow", "in", "enumerate", "(", "workflow", ")", ":", "\n", "                ", "mode", ",", "epochs", "=", "flow", "\n", "if", "isinstance", "(", "mode", ",", "str", ")", ":", "\n", "                    ", "if", "not", "hasattr", "(", "self", ",", "mode", ")", ":", "\n", "                        ", "raise", "ValueError", "(", "\n", "\"Trainer has no method named '{}' to run an epoch\"", ".", "format", "(", "\n", "mode", "\n", ")", "\n", ")", "\n", "", "epoch_runner", "=", "getattr", "(", "self", ",", "mode", ")", "\n", "", "elif", "callable", "(", "mode", ")", ":", "\n", "                    ", "epoch_runner", "=", "mode", "\n", "", "else", ":", "\n", "                    ", "raise", "TypeError", "(", "\n", "\"mode in workflow must be a str or \"", "\n", "\"callable function not '{}'\"", ".", "format", "(", "type", "(", "mode", ")", ")", "\n", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "epochs", ")", ":", "\n", "                    ", "if", "mode", "==", "\"train\"", "and", "self", ".", "epoch", ">=", "max_epochs", ":", "\n", "                        ", "return", "\n", "", "elif", "mode", "==", "\"val\"", ":", "\n", "                        ", "epoch_runner", "(", "data_loaders", "[", "i", "]", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                        ", "epoch_runner", "(", "data_loaders", "[", "i", "]", ",", "self", ".", "epoch", ",", "**", "kwargs", ")", "\n", "\n", "# time.sleep(1)", "\n", "", "", "", "", "self", ".", "call_hook", "(", "\"after_run\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.register_lr_hooks": [[589, 603], ["isinstance", "trainer.Trainer.register_hook", "isinstance", "getattr", "trainer.Trainer.register_hook", "TypeError", "lr_config[].title", "hasattr", "ValueError", "getattr.", "type"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.register_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.register_hook"], ["", "def", "register_lr_hooks", "(", "self", ",", "lr_config", ")", ":", "\n", "        ", "if", "isinstance", "(", "lr_config", ",", "LrUpdaterHook", ")", ":", "\n", "            ", "self", ".", "register_hook", "(", "lr_config", ")", "\n", "", "elif", "isinstance", "(", "lr_config", ",", "dict", ")", ":", "\n", "            ", "assert", "\"policy\"", "in", "lr_config", "\n", "hook_name", "=", "lr_config", "[", "\"policy\"", "]", ".", "title", "(", ")", "+", "\"LrUpdaterHook\"", "\n", "if", "not", "hasattr", "(", "lr_updater", ",", "hook_name", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'\"{}\" does not exist'", ".", "format", "(", "hook_name", ")", ")", "\n", "", "hook_cls", "=", "getattr", "(", "lr_updater", ",", "hook_name", ")", "\n", "self", ".", "register_hook", "(", "hook_cls", "(", "**", "lr_config", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"'lr_config' must be eigher a LrUpdaterHook object\"", "\n", "\" or dict, not '{}'\"", ".", "format", "(", "type", "(", "lr_config", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.register_logger_hooks": [[605, 612], ["utils.obj_from_dict", "trainer.Trainer.register_hook", "dict"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.obj_from_dict", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.register_hook"], ["", "", "def", "register_logger_hooks", "(", "self", ",", "log_config", ")", ":", "\n", "        ", "log_interval", "=", "log_config", "[", "\"interval\"", "]", "\n", "for", "info", "in", "log_config", "[", "\"hooks\"", "]", ":", "\n", "            ", "logger_hook", "=", "obj_from_dict", "(", "\n", "info", ",", "hooks", ",", "default_args", "=", "dict", "(", "interval", "=", "log_interval", ")", "\n", ")", "\n", "self", ".", "register_hook", "(", "logger_hook", ",", "priority", "=", "\"VERY_LOW\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.register_training_hooks": [[613, 637], ["trainer.Trainer.register_hook", "trainer.Trainer.register_hook", "trainer.Trainer.register_hook", "trainer.Trainer.register_lr_hooks", "trainer.Trainer.build_hook", "trainer.Trainer.build_hook", "hooks.IterTimerHook", "trainer.Trainer.register_logger_hooks"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.register_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.register_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.register_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.register_lr_hooks", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.build_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.build_hook", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.register_logger_hooks"], ["", "", "def", "register_training_hooks", "(", "\n", "self", ",", "lr_config", ",", "optimizer_config", "=", "None", ",", "checkpoint_config", "=", "None", ",", "log_config", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Register default hooks for training.\n\n        Default hooks include:\n            - LrUpdaterHook\n            - OptimizerStepperHook\n            - CheckpointSaverHook\n            - IterTimerHook\n            - LoggerHook(s)\n        \"\"\"", "\n", "if", "optimizer_config", "is", "None", ":", "\n", "            ", "optimizer_config", "=", "{", "}", "\n", "", "if", "checkpoint_config", "is", "None", ":", "\n", "            ", "checkpoint_config", "=", "{", "}", "\n", "", "if", "lr_config", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "lr_scheduler", "is", "None", "\n", "self", ".", "register_lr_hooks", "(", "lr_config", ")", "\n", "", "self", ".", "register_hook", "(", "self", ".", "build_hook", "(", "optimizer_config", ",", "OptimizerHook", ")", ")", "\n", "self", ".", "register_hook", "(", "self", ".", "build_hook", "(", "checkpoint_config", ",", "CheckpointHook", ")", ")", "\n", "self", ".", "register_hook", "(", "IterTimerHook", "(", ")", ")", "\n", "if", "log_config", "is", "not", "None", ":", "\n", "            ", "self", ".", "register_logger_hooks", "(", "log_config", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.example_to_device": [[35, 80], ["example.items", "example_torch[].append", "v.to", "v.items", "res.to", "v1.to", "example_torch[].append", "fc.to"], "function", ["None"], ["def", "example_to_device", "(", "example", ",", "device", ",", "non_blocking", "=", "False", ")", "->", "dict", ":", "\n", "    ", "example_torch", "=", "{", "}", "\n", "float_names", "=", "[", "\"voxels\"", "]", "\n", "for", "k", ",", "v", "in", "example", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "in", "[", "\"anchors\"", ",", "\"anchors_mask\"", ",", "\"reg_targets\"", ",", "\"reg_weights\"", ",", "\"labels\"", ",", "\n", "\"hm\"", ",", "\"anno_box\"", ",", "\"ind\"", ",", "\"mask\"", ",", "'cat'", ",", "\n", "\"hm_trajectory\"", ",", "\"anno_box_trajectory\"", ",", "\"ind_trajectory\"", ",", "\"mask_trajectory\"", ",", "'cat_trajectory'", ",", "\n", "\"hm_forecast\"", ",", "\"anno_box_forecast\"", ",", "\"ind_forecast\"", ",", "\"mask_forecast\"", ",", "'cat_forecast'", "]", ":", "\n", "\n", "            ", "example_torch", "[", "k", "]", "=", "[", "]", "\n", "for", "fc", "in", "v", ":", "\n", "                ", "example_torch", "[", "k", "]", ".", "append", "(", "[", "res", ".", "to", "(", "device", ",", "non_blocking", "=", "non_blocking", ")", "for", "res", "in", "fc", "]", ")", "\n", "\n", "", "", "elif", "k", "in", "[", "\n", "\"voxels\"", ",", "\n", "\"bev_map\"", ",", "\n", "\"coordinates\"", ",", "\n", "\"num_points\"", ",", "\n", "\"points\"", ",", "\n", "\"num_voxels\"", ",", "\n", "\"cyv_voxels\"", ",", "\n", "\"cyv_num_voxels\"", ",", "\n", "\"cyv_coordinates\"", ",", "\n", "\"cyv_num_points\"", ",", "\n", "\"gt_boxes_and_cls\"", ",", "\n", "\"gt_boxes_and_cls_trajectory\"", ",", "\n", "\"gt_boxes_and_cls_forecast\"", ",", "\n", "\"bev_map\"", "\n", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "example_torch", "[", "k", "]", "=", "v", ".", "to", "(", "device", ",", "non_blocking", "=", "non_blocking", ")", "\n", "", "except", ":", "\n", "                ", "example_torch", "[", "k", "]", "=", "[", "]", "\n", "for", "fc", "in", "v", ":", "\n", "                    ", "example_torch", "[", "k", "]", ".", "append", "(", "fc", ".", "to", "(", "device", ",", "non_blocking", "=", "non_blocking", ")", ")", "\n", "\n", "", "", "", "elif", "k", "==", "\"calib\"", ":", "\n", "            ", "calib", "=", "{", "}", "\n", "for", "k1", ",", "v1", "in", "v", ".", "items", "(", ")", ":", "\n", "                ", "calib", "[", "k1", "]", "=", "v1", ".", "to", "(", "device", ",", "non_blocking", "=", "non_blocking", ")", "\n", "", "example_torch", "[", "k", "]", "=", "calib", "\n", "", "else", ":", "\n", "            ", "example_torch", "[", "k", "]", "=", "v", "\n", "\n", "", "", "return", "example_torch", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.parse_second_losses": [[82, 102], ["collections.OrderedDict", "sum", "losses.items", "j.item", "i.item", "k.item", "i.item"], "function", ["None"], ["", "def", "parse_second_losses", "(", "losses", ")", ":", "\n", "\n", "    ", "log_vars", "=", "OrderedDict", "(", ")", "\n", "loss", "=", "sum", "(", "losses", "[", "\"loss\"", "]", ")", "\n", "for", "loss_name", ",", "loss_value", "in", "losses", ".", "items", "(", ")", ":", "\n", "        ", "if", "loss_name", "==", "\"loc_loss_elem\"", ":", "\n", "            ", "try", ":", "\n", "                ", "log_vars", "[", "loss_name", "]", "=", "[", "[", "[", "k", ".", "item", "(", ")", "for", "k", "in", "i", "]", "for", "i", "in", "j", "]", "for", "j", "in", "loss_value", "]", "\n", "\n", "", "except", ":", "\n", "                ", "log_vars", "[", "loss_name", "]", "=", "[", "[", "i", ".", "item", "(", ")", "for", "i", "in", "j", "]", "for", "j", "in", "loss_value", "]", "\n", "\n", "\n", "", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "log_vars", "[", "loss_name", "]", "=", "[", "[", "j", ".", "item", "(", ")", "for", "j", "in", "i", "]", "for", "i", "in", "loss_value", "]", "\n", "", "except", ":", "\n", "                ", "log_vars", "[", "loss_name", "]", "=", "[", "i", ".", "item", "(", ")", "for", "i", "in", "loss_value", "]", "\n", "\n", "", "", "", "return", "loss", ",", "log_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.__init__": [[7, 12], ["collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val_history", "=", "OrderedDict", "(", ")", "\n", "self", ".", "n_history", "=", "OrderedDict", "(", ")", "\n", "self", ".", "output", "=", "OrderedDict", "(", ")", "\n", "self", ".", "ready", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.clear": [[13, 17], ["log_buffer.LogBuffer.val_history.clear", "log_buffer.LogBuffer.n_history.clear", "log_buffer.LogBuffer.clear_output"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.clear", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.clear", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.clear_output"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "val_history", ".", "clear", "(", ")", "\n", "self", ".", "n_history", ".", "clear", "(", ")", "\n", "self", ".", "clear_output", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.clear_output": [[18, 21], ["log_buffer.LogBuffer.output.clear"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.clear"], ["", "def", "clear_output", "(", "self", ")", ":", "\n", "        ", "self", ".", "output", ".", "clear", "(", ")", "\n", "self", ".", "ready", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update": [[22, 30], ["isinstance", "vars.items", "log_buffer.LogBuffer.val_history[].append", "log_buffer.LogBuffer.n_history[].append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "vars", ",", "count", "=", "1", ")", ":", "\n", "        ", "assert", "isinstance", "(", "vars", ",", "dict", ")", "\n", "for", "key", ",", "var", "in", "vars", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "val_history", ":", "\n", "                ", "self", ".", "val_history", "[", "key", "]", "=", "[", "]", "\n", "self", ".", "n_history", "[", "key", "]", "=", "[", "]", "\n", "", "self", ".", "val_history", "[", "key", "]", ".", "append", "(", "var", ")", "\n", "self", ".", "n_history", "[", "key", "]", ".", "append", "(", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.average": [[31, 43], ["numpy.array", "numpy.array", "numpy.mean().tolist", "numpy.sum", "numpy.sum", "numpy.mean"], "methods", ["None"], ["", "", "def", "average", "(", "self", ",", "n", "=", "0", ")", ":", "\n", "        ", "\"\"\"Average latest n values or all values\"\"\"", "\n", "assert", "n", ">=", "0", "\n", "for", "key", "in", "self", ".", "val_history", ":", "\n", "            ", "values", "=", "np", ".", "array", "(", "self", ".", "val_history", "[", "key", "]", "[", "-", "n", ":", "]", ")", "\n", "nums", "=", "np", ".", "array", "(", "self", ".", "n_history", "[", "key", "]", "[", "-", "n", ":", "]", ")", "\n", "if", "values", ".", "shape", "==", "nums", ".", "shape", ":", "\n", "                ", "avg", "=", "np", ".", "sum", "(", "values", "*", "nums", ")", "/", "np", ".", "sum", "(", "nums", ")", "\n", "", "else", ":", "\n", "                ", "avg", "=", "np", ".", "mean", "(", "values", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "", "self", ".", "output", "[", "key", "]", "=", "avg", "\n", "", "self", ".", "ready", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.priority.get_priority": [[35, 54], ["isinstance", "isinstance", "ValueError", "isinstance", "TypeError", "priority.upper"], "function", ["None"], ["", "def", "get_priority", "(", "priority", ")", ":", "\n", "    ", "\"\"\"Get priority value.\n\n    Args:\n        priority (int or str or :obj:`Priority`): Priority.\n\n    Returns:\n        int: The priority value.\n    \"\"\"", "\n", "if", "isinstance", "(", "priority", ",", "int", ")", ":", "\n", "        ", "if", "priority", "<", "0", "or", "priority", ">", "100", ":", "\n", "            ", "raise", "ValueError", "(", "\"priority must be between 0 and 100\"", ")", "\n", "", "return", "priority", "\n", "", "elif", "isinstance", "(", "priority", ",", "Priority", ")", ":", "\n", "        ", "return", "priority", ".", "value", "\n", "", "elif", "isinstance", "(", "priority", ",", "str", ")", ":", "\n", "        ", "return", "Priority", "[", "priority", ".", "upper", "(", ")", "]", ".", "value", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"priority must be an integer or Priority enum value\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_host_info": [[18, 20], ["getpass.getuser", "socket.gethostname"], "function", ["None"], ["", "elif", "k", "in", "[", "\n", "\"voxels\"", ",", "\n", "\"bev_map\"", ",", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_dist_info": [[22, 35], ["torch.is_initialized", "torch.get_rank", "torch.get_world_size"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_rank", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size"], ["\"num_points\"", ",", "\n", "\"points\"", ",", "\n", "\"num_voxels\"", ",", "\n", "]", ":", "\n", "# slow when directly provide fp32 data with dtype=torch.half", "\n", "            ", "example_torch", "[", "k", "]", "=", "v", ".", "cuda", "(", "device", ",", "non_blocking", "=", "non_blocking", ")", "\n", "", "elif", "k", "==", "\"calib\"", ":", "\n", "            ", "calib", "=", "{", "}", "\n", "for", "k1", ",", "v1", "in", "v", ".", "items", "(", ")", ":", "\n", "                ", "calib", "[", "k1", "]", "=", "v1", ".", "cuda", "(", "device", ",", "non_blocking", "=", "non_blocking", ")", "\n", "", "example_torch", "[", "k", "]", "=", "calib", "\n", "", "else", ":", "\n", "            ", "example_torch", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.master_only": [[37, 45], ["functools.wraps", "utils.get_dist_info", "func"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_dist_info"], ["\n", "\n", "", "def", "_worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "time_seed", "=", "np", ".", "array", "(", "time", ".", "time", "(", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "np", ".", "random", ".", "seed", "(", "time_seed", "+", "worker_id", ")", "\n", "print", "(", "f\"WORKER {worker_id} seed:\"", ",", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_time_str": [[47, 49], ["time.strftime", "time.localtime"], "function", ["None"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.obj_from_dict": [[51, 78], ["info.copy", "info.copy.pop", "det3d.torchie.is_str", "getattr.", "isinstance", "isinstance", "default_args.items", "getattr", "isinstance", "TypeError", "info.copy.setdefault", "type"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.misc.is_str"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size": [[80, 86], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_rank": [[88, 94], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_rank"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.is_main_process": [[96, 98], ["utils.get_rank"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_rank"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.synchronize": [[100, 113], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.all_gather": [[115, 156], ["utils.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.IntTensor().to", "torch.IntTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.IntTensor", "torch.IntTensor", "range", "size.item", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.IntTensor", "torch.IntTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.all_gather", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.all_gather"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.reduce_dict": [[158, 185], ["utils.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_world_size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_rank"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_state_dict": [[42, 94], ["module.state_dict", "state_dict.items", "utils.get_dist_info", "isinstance", "own_state[].copy_", "set", "set", "err_msg.append", "err_msg.append", "terminaltables.AsciiTable", "err_msg.append", "err_msg.insert", "unexpected_keys.append", "param.size", "own_state[].size", "shape_mismatch_pairs.append", "module.state_dict.keys", "state_dict.keys", "len", "RuntimeError", "logger.warning", "print", "own_state[].size", "param.size"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.state_dict", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_dist_info", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["", "else", ":", "\n", "                ", "metrics_str_list", ".", "append", "(", "f\"{k}={v}\"", ")", "\n", "", "", "else", ":", "\n", "            ", "metrics_str_list", ".", "append", "(", "f\"{k}={v}\"", ")", "\n", "", "", "return", "\", \"", ".", "join", "(", "metrics_str_list", ")", "\n", "\n", "\n", "", "def", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ",", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Strategy: suppose that the models that we will create will have prefixes appended\n    to each of its keys, for example due to an extra level of nesting that the original\n    pre-trained weights from ImageNet won't contain. For example, model.state_dict()\n    might return backbone[0].body.res2.conv1.weight, while the pre-trained model contains\n    res2.conv1.weight. We thus want to match both parameters together.\n    For that, we look for each model weight, look among all loaded keys if there is one\n    that is a suffix of the current weight name, and use it if that's the case.\n    If multiple matches exist, take the one with longest size\n    of the corresponding name. For example, for the same model as before, the pretrained\n    weight file can contain both res2.conv1.weight, as well as conv1.weight. In this case,\n    we want to match backbone[0].body.conv1.weight to conv1.weight, and\n    backbone[0].body.res2.conv1.weight to res2.conv1.weight.\n    \"\"\"", "\n", "current_keys", "=", "sorted", "(", "list", "(", "model_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "loaded_keys", "=", "sorted", "(", "list", "(", "loaded_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "# get a matrix of string matches, where each (i, j) entry correspond to the size of the", "\n", "# loaded_key string, if it matches", "\n", "match_matrix", "=", "[", "\n", "len", "(", "j", ")", "if", "i", ".", "endswith", "(", "j", ")", "else", "0", "for", "i", "in", "current_keys", "for", "j", "in", "loaded_keys", "\n", "]", "\n", "match_matrix", "=", "torch", ".", "as_tensor", "(", "match_matrix", ")", ".", "view", "(", "\n", "len", "(", "current_keys", ")", ",", "len", "(", "loaded_keys", ")", "\n", ")", "\n", "max_match_size", ",", "idxs", "=", "match_matrix", ".", "max", "(", "1", ")", "\n", "# remove indices that correspond to no-match", "\n", "idxs", "[", "max_match_size", "==", "0", "]", "=", "-", "1", "\n", "\n", "# used for logging", "\n", "max_size", "=", "max", "(", "[", "len", "(", "key", ")", "for", "key", "in", "current_keys", "]", ")", "if", "current_keys", "else", "1", "\n", "max_size_loaded", "=", "max", "(", "[", "len", "(", "key", ")", "for", "key", "in", "loaded_keys", "]", ")", "if", "loaded_keys", "else", "1", "\n", "log_str_template", "=", "\"{: <{}} loaded from {: <{}} of shape {}\"", "\n", "if", "logger", "is", "None", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "", "for", "idx_new", ",", "idx_old", "in", "enumerate", "(", "idxs", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "if", "idx_old", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "key", "=", "current_keys", "[", "idx_new", "]", "\n", "key_old", "=", "loaded_keys", "[", "idx_old", "]", "\n", "model_state_dict", "[", "key", "]", "=", "loaded_state_dict", "[", "key_old", "]", "\n", "logger", ".", "info", "(", "\n", "log_str_template", ".", "format", "(", "\n", "key", ",", "\n", "max_size", ",", "\n", "key_old", ",", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_url_dist": [[96, 108], ["utils.get_dist_info", "int", "os.environ.get", "os.environ.get", "torch.utils.model_zoo.load_url", "torch.distributed.barrier", "torch.utils.model_zoo.load_url"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_dist_info", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["tuple", "(", "loaded_state_dict", "[", "key_old", "]", ".", "shape", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "\n", "", "", "def", "strip_prefix_if_present", "(", "state_dict", ",", "prefix", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "not", "all", "(", "key", ".", "startswith", "(", "prefix", ")", "for", "key", "in", "keys", ")", ":", "\n", "        ", "return", "state_dict", "\n", "", "stripped_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "stripped_state_dict", "[", "key", ".", "replace", "(", "prefix", ",", "\"\"", ")", "]", "=", "value", "\n", "", "return", "stripped_state_dict", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.get_torchvision_models": [[110, 120], ["dict", "pkgutil.walk_packages", "importlib.import_module", "hasattr", "getattr", "dict.update"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update"], ["\n", "", "def", "load_state_dict", "(", "model", ",", "loaded_state_dict", ",", "logger", "=", "None", ")", ":", "\n", "    ", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# if the state_dict comes from a model that was wrapped in a", "\n", "# DataParallel or DistributedDataParallel during serialization,", "\n", "# remove the \"module\" prefix before performing the matching", "\n", "loaded_state_dict", "=", "strip_prefix_if_present", "(", "loaded_state_dict", ",", "prefix", "=", "\"module.\"", ")", "\n", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ",", "logger", "=", "logger", ")", "\n", "\n", "# use strict loading", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_checkpoint": [[122, 174], ["filename.startswith", "isinstance", "[].startswith", "hasattr", "warnings.warn", "checkpoint.get_torchvision_models", "checkpoint.load_url_dist", "filename.startswith", "checkpoint.load_state_dict", "checkpoint.load_state_dict", "checkpoint.get_torchvision_models", "checkpoint.load_url_dist", "filename.startswith", "isinstance", "RuntimeError", "checkpoint.load_url_dist", "filename.startswith", "list", "checkpoint[].items", "checkpoint.load_url_dist", "torch.load", "state_dict.keys", "os.isfile", "IOError"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.get_torchvision_models", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_url_dist", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.load_state_dict", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.load_state_dict", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.get_torchvision_models", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_url_dist", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_url_dist", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.load_url_dist", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.load"], ["\n", "", "def", "finetune_load_state_dict", "(", "model", ",", "loaded_state_dict", ",", "logger", "=", "None", ")", ":", "\n", "    ", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# if the state_dict comes from a model that was wrapped in a", "\n", "# DataParallel or DistributedDataParallel during serialization,", "\n", "# remove the \"module\" prefix before performing the matching", "\n", "loaded_state_dict", "=", "strip_prefix_if_present", "(", "loaded_state_dict", ",", "prefix", "=", "\"module.\"", ")", "\n", "loaded_state_dict", "=", "{", "\n", "k", ":", "v", "for", "k", ",", "v", "in", "loaded_state_dict", ".", "items", "(", ")", "if", "not", "k", ".", "startswith", "(", "\"rpn.tasks\"", ")", "\n", "}", "\n", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ",", "logger", "=", "logger", ")", "\n", "\n", "# use strict loading", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "\n", "\n", "", "class", "Checkpointer", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "optimizer", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "\n", "save_dir", "=", "\"\"", ",", "\n", "ckpt_path", "=", "None", ",", "\n", "save_to_disk", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "pretrained_path", "=", "ckpt_path", "# whether pretrained", "\n", "self", ".", "finetune", "=", "False", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "self", ".", "save_to_disk", "=", "save_to_disk", "\n", "if", "logger", "is", "None", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "", "self", ".", "logger", "=", "logger", "\n", "\n", "", "def", "save", "(", "self", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "name", ")", "\n", "if", "not", "self", ".", "save_dir", ":", "\n", "            ", "return", "\n", "\n", "", "if", "not", "self", ".", "save_to_disk", ":", "\n", "            ", "return", "\n", "\n", "", "data", "=", "{", "}", "\n", "data", "[", "\"model\"", "]", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "if", "self", ".", "optimizer", "is", "not", "None", ":", "\n", "            ", "data", "[", "\"optimizer\"", "]", "=", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "", "if", "self", ".", "scheduler", "is", "not", "None", ":", "\n", "            ", "print", "(", "dir", "(", "self", ".", "scheduler", ")", ")", "\n", "data", "[", "\"scheduler\"", "]", "=", "self", ".", "scheduler", ".", "state_dict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.weights_to_cpu": [[176, 189], ["collections.OrderedDict", "state_dict.items", "val.cpu"], "function", ["None"], ["\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"{}.pth\"", ".", "format", "(", "name", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving checkpoint to {}\"", ".", "format", "(", "save_file", ")", ")", "\n", "torch", ".", "save", "(", "data", ",", "save_file", ")", "\n", "self", ".", "tag_last_checkpoint", "(", "save_file", ")", "\n", "\n", "", "def", "load", "(", "self", ",", "f", "=", "None", ")", ":", "\n", "        ", "if", "f", "is", "not", "None", ":", "\n", "            ", "f", "=", "self", ".", "get_checkpoint_file", "(", "f", ")", "\n", "", "elif", "self", ".", "has_checkpoint", "(", "self", ".", "save_dir", ")", ":", "\n", "# override argument with existing checkpoint", "\n", "            ", "f", "=", "self", ".", "get_checkpoint_file", "(", "self", ".", "save_dir", ")", "\n", "\n", "", "if", "not", "f", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.save_checkpoint": [[191, 217], ["det3d.torchie.mkdir_or_exist", "hasattr", "torch.save", "os.dirname", "checkpoint.weights_to_cpu", "optimizer.state_dict", "isinstance", "TypeError", "model.state_dict", "type"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.path.mkdir_or_exist", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.weights_to_cpu", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.state_dict", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.state_dict"], ["            ", "self", ".", "logger", ".", "info", "(", "\"No checkpoint found. Initializing model from scratch\"", ")", "\n", "return", "{", "}", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint from {}\"", ".", "format", "(", "f", ")", ")", "\n", "checkpoint", "=", "self", ".", "_load_file", "(", "f", ")", "\n", "self", ".", "_load_model", "(", "checkpoint", ")", "\n", "if", "\"optimizer\"", "in", "checkpoint", "and", "self", ".", "optimizer", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Loading optimizer from {}\"", ".", "format", "(", "f", ")", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "\"optimizer\"", ")", ")", "\n", "", "if", "\"scheduler\"", "in", "checkpoint", "and", "self", ".", "scheduler", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Loading scheduler from {}\"", ".", "format", "(", "f", ")", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "\"scheduler\"", ")", ")", "\n", "\n", "# return any further checkpoint data", "\n", "", "return", "checkpoint", "\n", "\n", "", "def", "finetune_load", "(", "self", ",", "ckpt_path", "=", "None", ",", "f", "=", "None", ")", ":", "\n", "        ", "if", "ckpt_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "pretrained_path", "=", "ckpt_path", "\n", "self", ".", "finetune", "=", "True", "\n", "f", "=", "self", ".", "get_checkpoint_file", "(", "ckpt_path", ")", "\n", "", "assert", "f", "is", "not", "None", ",", "\"Finetune should provide a valid ckpt path\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Loading pretrained model from {}\"", ".", "format", "(", "f", ")", ")", "\n", "checkpoint", "=", "self", ".", "_load_file", "(", "f", ")", "\n", "self", ".", "_load_model", "(", "checkpoint", ")", "\n", "\n", "", "def", "has_checkpoint", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"last_checkpoint\"", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.before_run": [[2, 4], ["None"], "methods", ["None"], ["    ", "def", "before_run", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.after_run": [[5, 7], ["None"], "methods", ["None"], ["", "def", "after_run", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.before_epoch": [[8, 10], ["None"], "methods", ["None"], ["", "def", "before_epoch", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.after_epoch": [[11, 13], ["None"], "methods", ["None"], ["", "def", "after_epoch", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.before_iter": [[14, 16], ["None"], "methods", ["None"], ["", "def", "before_iter", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.after_iter": [[17, 19], ["None"], "methods", ["None"], ["", "def", "after_iter", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.after_data_to_device": [[20, 22], ["None"], "methods", ["None"], ["", "def", "after_data_to_device", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.after_forward": [[23, 25], ["None"], "methods", ["None"], ["", "def", "after_forward", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.after_parse_loss": [[26, 28], ["None"], "methods", ["None"], ["", "def", "after_parse_loss", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.before_train_epoch": [[29, 31], ["hook.Hook.before_epoch"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.logger.base.LoggerHook.before_epoch"], ["", "def", "before_train_epoch", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "before_epoch", "(", "trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.before_val_epoch": [[32, 34], ["hook.Hook.before_epoch"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.logger.base.LoggerHook.before_epoch"], ["", "def", "before_val_epoch", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "before_epoch", "(", "trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.after_train_epoch": [[35, 37], ["hook.Hook.after_epoch"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.memory.EmptyCacheHook.after_epoch"], ["", "def", "after_train_epoch", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "after_epoch", "(", "trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.after_val_epoch": [[38, 40], ["hook.Hook.after_epoch"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.memory.EmptyCacheHook.after_epoch"], ["", "def", "after_val_epoch", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "after_epoch", "(", "trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.before_train_iter": [[41, 43], ["hook.Hook.before_iter"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.iter_timer.IterTimerHook.before_iter"], ["", "def", "before_train_iter", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "before_iter", "(", "trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.before_val_iter": [[44, 46], ["hook.Hook.before_iter"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.iter_timer.IterTimerHook.before_iter"], ["", "def", "before_val_iter", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "before_iter", "(", "trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.after_train_iter": [[47, 49], ["hook.Hook.after_iter"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.memory.EmptyCacheHook.after_iter"], ["", "def", "after_train_iter", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "after_iter", "(", "trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.after_val_iter": [[50, 52], ["hook.Hook.after_iter"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.memory.EmptyCacheHook.after_iter"], ["", "def", "after_val_iter", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "after_iter", "(", "trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.every_n_epochs": [[53, 55], ["None"], "methods", ["None"], ["", "def", "every_n_epochs", "(", "self", ",", "trainer", ",", "n", ")", ":", "\n", "        ", "return", "(", "trainer", ".", "epoch", "+", "1", ")", "%", "n", "==", "0", "if", "n", ">", "0", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.every_n_iters": [[56, 58], ["None"], "methods", ["None"], ["", "def", "every_n_iters", "(", "self", ",", "trainer", ",", "n", ")", ":", "\n", "        ", "return", "(", "trainer", ".", "iter", "+", "1", ")", "%", "n", "==", "0", "if", "n", ">", "0", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.every_n_inner_iters": [[59, 61], ["None"], "methods", ["None"], ["", "def", "every_n_inner_iters", "(", "self", ",", "trainer", ",", "n", ")", ":", "\n", "        ", "return", "(", "trainer", ".", "inner_iter", "+", "1", ")", "%", "n", "==", "0", "if", "n", ">", "0", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.end_of_epoch": [[62, 64], ["len"], "methods", ["None"], ["", "def", "end_of_epoch", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "return", "trainer", ".", "inner_iter", "+", "1", "==", "len", "(", "trainer", ".", "data_loader", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook.__init__": [[11, 32], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "by_epoch", "=", "True", ",", "warmup", "=", "None", ",", "warmup_iters", "=", "0", ",", "warmup_ratio", "=", "0.1", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "if", "warmup", "is", "not", "None", ":", "\n", "            ", "if", "warmup", "not", "in", "[", "\"constant\"", ",", "\"linear\"", ",", "\"exp\"", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'\"{}\" is not a supported type for warming up, valid types'", "\n", "' are \"constant\" and \"linear\"'", ".", "format", "(", "warmup", ")", "\n", ")", "\n", "\n", "", "", "if", "warmup", "is", "not", "None", ":", "\n", "            ", "assert", "warmup_iters", ">", "0", ",", "'\"warmup_iters\" must be a positive integer'", "\n", "assert", "0", "<", "warmup_ratio", "<=", "1.0", ",", "'\"warmup_ratio\" must be in range (0,1]'", "\n", "\n", "", "self", ".", "by_epoch", "=", "by_epoch", "\n", "self", ".", "warmup", "=", "warmup", "\n", "self", ".", "warmup_ratio", "=", "warmup_ratio", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "\n", "self", ".", "base_lr", "=", "[", "]", "# initial lr for all param groups", "\n", "self", ".", "regular_lr", "=", "[", "]", "# expected lr if no warming up is performed", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook._set_lr": [[33, 36], ["zip"], "methods", ["None"], ["", "def", "_set_lr", "(", "self", ",", "trainer", ",", "lr_groups", ")", ":", "\n", "        ", "for", "param_group", ",", "lr", "in", "zip", "(", "trainer", ".", "optimizer", ".", "param_groups", ",", "lr_groups", ")", ":", "\n", "            ", "param_group", "[", "\"lr\"", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook.get_lr": [[37, 39], ["None"], "methods", ["None"], ["", "", "def", "get_lr", "(", "self", ",", "runner", ",", "base_lr", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook.get_regular_lr": [[40, 42], ["lr_updater.LrUpdaterHook.get_lr"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules._LRSchedulerStep.get_lr"], ["", "def", "get_regular_lr", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "return", "[", "self", ".", "get_lr", "(", "trainer", ",", "_base_lr", ")", "for", "_base_lr", "in", "self", ".", "base_lr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook.get_warmup_lr": [[43, 54], ["None"], "methods", ["None"], ["", "def", "get_warmup_lr", "(", "self", ",", "cur_iters", ")", ":", "\n", "        ", "if", "self", ".", "warmup", "==", "\"constant\"", ":", "\n", "            ", "warmup_lr", "=", "[", "_lr", "*", "self", ".", "warmup_ratio", "for", "_lr", "in", "self", ".", "regular_lr", "]", "\n", "", "elif", "self", ".", "warmup", "==", "\"linear\"", ":", "\n", "            ", "k", "=", "(", "1", "-", "cur_iters", "/", "self", ".", "warmup_iters", ")", "*", "(", "1", "-", "self", ".", "warmup_ratio", ")", "\n", "warmup_lr", "=", "[", "_lr", "*", "(", "1", "-", "k", ")", "for", "_lr", "in", "self", ".", "regular_lr", "]", "\n", "", "elif", "self", ".", "warmup", "==", "\"exp\"", ":", "\n", "            ", "k", "=", "self", ".", "warmup_ratio", "**", "(", "1", "-", "cur_iters", "/", "self", ".", "warmup_iters", ")", "\n", "warmup_lr", "=", "[", "_lr", "*", "k", "for", "_lr", "in", "self", ".", "regular_lr", "]", "\n", "\n", "", "return", "warmup_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook.before_run": [[55, 59], ["group.setdefault"], "methods", ["None"], ["", "def", "before_run", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "for", "group", "in", "trainer", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "\"initial_lr\"", ",", "group", "[", "\"lr\"", "]", ")", "\n", "", "self", ".", "base_lr", "=", "[", "group", "[", "\"initial_lr\"", "]", "for", "group", "in", "trainer", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook.before_train_epoch": [[60, 65], ["lr_updater.LrUpdaterHook.get_regular_lr", "lr_updater.LrUpdaterHook._set_lr"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook.get_regular_lr", "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook._set_lr"], ["", "def", "before_train_epoch", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "if", "not", "self", ".", "by_epoch", ":", "\n", "            ", "return", "\n", "", "self", ".", "regular_lr", "=", "self", ".", "get_regular_lr", "(", "trainer", ")", "\n", "self", ".", "_set_lr", "(", "trainer", ",", "self", ".", "regular_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook.before_train_iter": [[66, 83], ["lr_updater.LrUpdaterHook.get_regular_lr", "lr_updater.LrUpdaterHook._set_lr", "lr_updater.LrUpdaterHook.get_warmup_lr", "lr_updater.LrUpdaterHook._set_lr", "lr_updater.LrUpdaterHook._set_lr", "lr_updater.LrUpdaterHook.get_warmup_lr", "lr_updater.LrUpdaterHook._set_lr"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook.get_regular_lr", "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook._set_lr", "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook.get_warmup_lr", "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook._set_lr", "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook._set_lr", "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook.get_warmup_lr", "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.LrUpdaterHook._set_lr"], ["", "def", "before_train_iter", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "cur_iter", "=", "trainer", ".", "iter", "\n", "if", "not", "self", ".", "by_epoch", ":", "\n", "            ", "self", ".", "regular_lr", "=", "self", ".", "get_regular_lr", "(", "trainer", ")", "\n", "if", "self", ".", "warmup", "is", "None", "or", "cur_iter", ">=", "self", ".", "warmup_iters", ":", "\n", "                ", "self", ".", "_set_lr", "(", "trainer", ",", "self", ".", "regular_lr", ")", "\n", "", "else", ":", "\n", "                ", "warmup_lr", "=", "self", ".", "get_warmup_lr", "(", "cur_iter", ")", "\n", "self", ".", "_set_lr", "(", "trainer", ",", "warmup_lr", ")", "\n", "", "", "elif", "self", ".", "by_epoch", ":", "\n", "            ", "if", "self", ".", "warmup", "is", "None", "or", "cur_iter", ">", "self", ".", "warmup_iters", ":", "\n", "                ", "return", "\n", "", "elif", "cur_iter", "==", "self", ".", "warmup_iters", ":", "\n", "                ", "self", ".", "_set_lr", "(", "trainer", ",", "self", ".", "regular_lr", ")", "\n", "", "else", ":", "\n", "                ", "warmup_lr", "=", "self", ".", "get_warmup_lr", "(", "cur_iter", ")", "\n", "self", ".", "_set_lr", "(", "trainer", ",", "warmup_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.FixedLrUpdaterHook.__init__": [[86, 88], ["lr_updater.LrUpdaterHook.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FixedLrUpdaterHook", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.FixedLrUpdaterHook.get_lr": [[89, 91], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ",", "trainer", ",", "base_lr", ")", ":", "\n", "        ", "return", "base_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.StepLrUpdaterHook.__init__": [[94, 106], ["isinstance", "isinstance", "lr_updater.LrUpdaterHook.__init__", "isinstance", "TypeError", "isinstance"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "step", ",", "gamma", "=", "0.1", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "step", ",", "(", "list", ",", "int", ")", ")", "\n", "if", "isinstance", "(", "step", ",", "list", ")", ":", "\n", "            ", "for", "s", "in", "step", ":", "\n", "                ", "assert", "isinstance", "(", "s", ",", "int", ")", "and", "s", ">", "0", "\n", "", "", "elif", "isinstance", "(", "step", ",", "int", ")", ":", "\n", "            ", "assert", "step", ">", "0", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'\"step\" must be a list or integer'", ")", "\n", "", "self", ".", "step", "=", "step", "\n", "self", ".", "gamma", "=", "gamma", "\n", "super", "(", "StepLrUpdaterHook", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.StepLrUpdaterHook.get_lr": [[107, 120], ["isinstance", "len", "enumerate"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ",", "runner", ",", "base_lr", ")", ":", "\n", "        ", "progress", "=", "runner", ".", "epoch", "if", "self", ".", "by_epoch", "else", "trainer", ".", "iter", "\n", "\n", "if", "isinstance", "(", "self", ".", "step", ",", "int", ")", ":", "\n", "            ", "return", "base_lr", "*", "(", "self", ".", "gamma", "**", "(", "progress", "//", "self", ".", "step", ")", ")", "\n", "\n", "", "exp", "=", "len", "(", "self", ".", "step", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "self", ".", "step", ")", ":", "\n", "            ", "if", "progress", "<", "s", ":", "\n", "                ", "exp", "=", "i", "\n", "break", "\n", "\n", "", "", "return", "base_lr", "*", "self", ".", "gamma", "**", "exp", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.ExpLrUpdaterHook.__init__": [[123, 126], ["lr_updater.LrUpdaterHook.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "gamma", "=", "gamma", "\n", "super", "(", "ExpLrUpdaterHook", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.ExpLrUpdaterHook.get_lr": [[127, 130], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ",", "runner", ",", "base_lr", ")", ":", "\n", "        ", "progress", "=", "trainer", ".", "epoch", "if", "self", ".", "by_epoch", "else", "trainer", ".", "iter", "\n", "return", "base_lr", "*", "self", ".", "gamma", "**", "progress", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.PolyLrUpdaterHook.__init__": [[133, 137], ["lr_updater.LrUpdaterHook.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "power", "=", "1.0", ",", "min_lr", "=", "0.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "power", "=", "power", "\n", "self", ".", "min_lr", "=", "min_lr", "\n", "super", "(", "PolyLrUpdaterHook", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.PolyLrUpdaterHook.get_lr": [[138, 147], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ",", "trainer", ",", "base_lr", ")", ":", "\n", "        ", "if", "self", ".", "by_epoch", ":", "\n", "            ", "progress", "=", "trainer", ".", "epoch", "\n", "max_progress", "=", "trainer", ".", "max_epochs", "\n", "", "else", ":", "\n", "            ", "progress", "=", "trainer", ".", "iter", "\n", "max_progress", "=", "trainer", ".", "max_iters", "\n", "", "coeff", "=", "(", "1", "-", "progress", "/", "max_progress", ")", "**", "self", ".", "power", "\n", "return", "(", "base_lr", "-", "self", ".", "min_lr", ")", "*", "coeff", "+", "self", ".", "min_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.InvLrUpdaterHook.__init__": [[150, 154], ["lr_updater.LrUpdaterHook.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ",", "power", "=", "1.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "power", "=", "power", "\n", "super", "(", "InvLrUpdaterHook", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.InvLrUpdaterHook.get_lr": [[155, 158], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ",", "trainer", ",", "base_lr", ")", ":", "\n", "        ", "progress", "=", "trainer", ".", "epoch", "if", "self", ".", "by_epoch", "else", "trainer", ".", "iter", "\n", "return", "base_lr", "*", "(", "1", "+", "self", ".", "gamma", "*", "progress", ")", "**", "(", "-", "self", ".", "power", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.CosineLrUpdaterHook.__init__": [[161, 164], ["lr_updater.LrUpdaterHook.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "target_lr", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "target_lr", "=", "target_lr", "\n", "super", "(", "CosineLrUpdaterHook", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.lr_updater.CosineLrUpdaterHook.get_lr": [[165, 175], ["math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ",", "trainer", ",", "base_lr", ")", ":", "\n", "        ", "if", "self", ".", "by_epoch", ":", "\n", "            ", "progress", "=", "trainer", ".", "epoch", "\n", "max_progress", "=", "trainer", ".", "max_epochs", "\n", "", "else", ":", "\n", "            ", "progress", "=", "trainer", ".", "iter", "\n", "max_progress", "=", "trainer", ".", "max_iters", "\n", "\n", "", "return", "self", ".", "target_lr", "+", "0.5", "*", "(", "base_lr", "-", "self", ".", "target_lr", ")", "*", "(", "\n", "1", "+", "cos", "(", "pi", "*", "(", "progress", "/", "max_progress", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.iter_timer.IterTimerHook.before_epoch": [[7, 9], ["time.time"], "methods", ["None"], ["    ", "def", "before_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "self", ".", "t", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.iter_timer.IterTimerHook.before_iter": [[10, 12], ["runner.log_buffer.update", "time.time"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update"], ["", "def", "before_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "log_buffer", ".", "update", "(", "{", "\"data_time\"", ":", "time", ".", "time", "(", ")", "-", "self", ".", "t", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.iter_timer.IterTimerHook.after_iter": [[13, 16], ["runner.log_buffer.update", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update"], ["", "def", "after_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "log_buffer", ".", "update", "(", "{", "\"time\"", ":", "time", ".", "time", "(", ")", "-", "self", ".", "t", "}", ")", "\n", "self", ".", "t", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.iter_timer.IterTimerHook.after_data_to_device": [[17, 19], ["runner.log_buffer.update", "time.time"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update"], ["", "def", "after_data_to_device", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "log_buffer", ".", "update", "(", "{", "\"transfer_time\"", ":", "time", ".", "time", "(", ")", "-", "self", ".", "t", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.iter_timer.IterTimerHook.after_forward": [[20, 22], ["runner.log_buffer.update", "time.time"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update"], ["", "def", "after_forward", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "log_buffer", ".", "update", "(", "{", "\"forward_time\"", ":", "time", ".", "time", "(", ")", "-", "self", ".", "t", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.iter_timer.IterTimerHook.after_parse_loss": [[23, 25], ["runner.log_buffer.update", "time.time"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update"], ["", "def", "after_parse_loss", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "log_buffer", ".", "update", "(", "{", "\"loss_parse_time\"", ":", "time", ".", "time", "(", ")", "-", "self", ".", "t", "}", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.closure.ClosureHook.__init__": [[5, 9], ["hasattr", "callable", "setattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fn_name", ",", "fn", ")", ":", "\n", "        ", "assert", "hasattr", "(", "self", ",", "fn_name", ")", "\n", "assert", "callable", "(", "fn", ")", "\n", "setattr", "(", "self", ",", "fn_name", ",", "fn", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.optimizer.OptimizerHook.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "grad_clip", "=", "None", ")", ":", "\n", "        ", "self", ".", "grad_clip", "=", "grad_clip", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.optimizer.OptimizerHook.clip_grads": [[10, 13], ["torch.nn.utils.clip_grad.clip_grad_norm_", "filter"], "methods", ["None"], ["", "def", "clip_grads", "(", "self", ",", "params", ")", ":", "\n", "        ", "clip_grad", ".", "clip_grad_norm_", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "params", ")", ",", "**", "self", ".", "grad_clip", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.optimizer.OptimizerHook.after_train_iter": [[15, 22], ["trainer.optimizer.zero_grad", "trainer.outputs[].backward", "trainer.optimizer.step", "optimizer.OptimizerHook.clip_grads", "trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.zero_grad", "home.repos.pwc.inspect_result.neeharperi_futuredet.dcn.deform_conv.ModulatedDeformConvFunction.backward", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.optimizer.OptimizerHook.clip_grads"], ["", "def", "after_train_iter", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "trainer", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "# print(trainer.outputs[\"loss\"])", "\n", "trainer", ".", "outputs", "[", "\"loss\"", "]", ".", "backward", "(", ")", "\n", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "            ", "self", ".", "clip_grads", "(", "trainer", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "trainer", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.checkpoint.CheckpointHook.__init__": [[6, 11], ["None"], "methods", ["None"], ["from", "pathlib", "import", "Path", "\n", "\n", "import", "torch", "\n", "from", "tensorboardX", "import", "SummaryWriter", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.checkpoint.CheckpointHook.after_train_epoch": [[12, 22], ["trainer.save_checkpoint", "checkpoint.CheckpointHook.every_n_epochs"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.checkpoint.save_checkpoint", "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.every_n_epochs"], ["def", "_flat_nested_json_dict", "(", "json_dict", ",", "flatted", ",", "sep", "=", "\".\"", ",", "start", "=", "\"\"", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "json_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "_flat_nested_json_dict", "(", "v", ",", "flatted", ",", "sep", ",", "start", "+", "sep", "+", "str", "(", "k", ")", ")", "\n", "", "else", ":", "\n", "            ", "flatted", "[", "start", "+", "sep", "+", "str", "(", "k", ")", "]", "=", "v", "\n", "\n", "\n", "", "", "", "def", "flat_nested_json_dict", "(", "json_dict", ",", "sep", "=", "\".\"", ")", "->", "dict", ":", "\n", "    ", "\"\"\"flat a nested json-like dict. this function make shadow copy.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.sampler_seed.DistSamplerSeedHook.before_epoch": [[5, 7], ["trainer.data_loader.sampler.set_epoch"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.loader.sampler.DistributedGroupSampler.set_epoch"], ["    ", "def", "before_epoch", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "trainer", ".", "data_loader", ".", "sampler", ".", "set_epoch", "(", "trainer", ".", "epoch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.memory.EmptyCacheHook.__init__": [[7, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "before_epoch", "=", "False", ",", "after_epoch", "=", "True", ",", "after_iter", "=", "False", ")", ":", "\n", "        ", "self", ".", "_before_epoch", "=", "before_epoch", "\n", "self", ".", "_after_epoch", "=", "after_epoch", "\n", "self", ".", "_after_iter", "=", "after_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.memory.EmptyCacheHook.after_iter": [[12, 15], ["torch.cuda.empty_cache"], "methods", ["None"], ["", "def", "after_iter", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "if", "self", ".", "_after_iter", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.memory.EmptyCacheHook.before_epoch": [[16, 19], ["torch.cuda.empty_cache"], "methods", ["None"], ["", "", "def", "before_epoch", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "if", "self", ".", "_before_epoch", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.memory.EmptyCacheHook.after_epoch": [[20, 23], ["torch.cuda.empty_cache"], "methods", ["None"], ["", "", "def", "after_epoch", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "if", "self", ".", "_after_epoch", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.base.LoggerHook.__init__": [[17, 21], ["None"], "methods", ["None"], ["self", ".", "fp16_enabled", "=", "False", "\n", "\n", "", "@", "property", "\n", "def", "with_reader", "(", "self", ")", ":", "\n", "# Whether input data need to be processed by Input Feature Extractor", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.base.LoggerHook.log": [[22, 25], ["None"], "methods", ["None"], ["        ", "return", "hasattr", "(", "self", ",", "\"reader\"", ")", "and", "self", ".", "reader", "is", "not", "None", "\n", "\n", "", "@", "property", "\n", "def", "with_neck", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.base.LoggerHook.before_run": [[26, 31], ["isinstance"], "methods", ["None"], ["        ", "return", "hasattr", "(", "self", ",", "\"neck\"", ")", "and", "self", ".", "neck", "is", "not", "None", "\n", "\n", "", "@", "property", "\n", "def", "with_shared_head", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "\"shared_head\"", ")", "and", "self", ".", "shared_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.base.LoggerHook.before_epoch": [[32, 34], ["trainer.log_buffer.clear"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.clear"], ["", "@", "property", "\n", "def", "with_bbox", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "\"bbox_head\"", ")", "and", "self", ".", "bbox_head", "is", "not", "None", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.base.LoggerHook.after_train_iter": [[35, 46], ["base.LoggerHook.every_n_inner_iters", "trainer.log_buffer.average", "base.LoggerHook.log", "base.LoggerHook.end_of_epoch", "trainer.log_buffer.average", "trainer.log_buffer.clear_output"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.every_n_inner_iters", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.average", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.hooks.hook.Hook.end_of_epoch", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.average", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.clear_output"], ["\n", "", "@", "property", "\n", "def", "with_mask", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "\"mask_head\"", ")", "and", "self", ".", "mask_head", "is", "not", "None", "\n", "\n", "", "@", "abstractmethod", "\n", "def", "extract_feat", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "extract_feats", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "imgs", ",", "list", ")", "\n", "for", "img", "in", "imgs", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.base.LoggerHook.after_train_epoch": [[47, 52], ["base.LoggerHook.log", "trainer.log_buffer.clear_output"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.clear_output"], ["            ", "yield", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "", "", "@", "abstractmethod", "\n", "def", "forward_train", "(", "self", ",", "imgs", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.base.LoggerHook.after_val_epoch": [[53, 58], ["trainer.log_buffer.average", "base.LoggerHook.log", "trainer.log_buffer.clear_output"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.average", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.clear_output"], ["", "@", "abstractmethod", "\n", "def", "simple_test", "(", "self", ",", "img", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "@", "abstractmethod", "\n", "def", "aug_test", "(", "self", ",", "imgs", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.tensorboard.TensorboardLoggerHook.__init__": [[10, 13], ["base.LoggerHook.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", "=", "None", ",", "interval", "=", "10", ",", "ignore_last", "=", "True", ",", "reset_flag", "=", "True", ")", ":", "\n", "        ", "super", "(", "TensorboardLoggerHook", ",", "self", ")", ".", "__init__", "(", "interval", ",", "ignore_last", ",", "reset_flag", ")", "\n", "self", ".", "log_dir", "=", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.tensorboard.TensorboardLoggerHook.before_run": [[14, 36], ["SummaryWriter", "os.join", "ImportError", "ImportError"], "methods", ["None"], ["", "@", "master_only", "\n", "def", "before_run", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "if", "torch", ".", "__version__", ">=", "\"1.1\"", ":", "\n", "            ", "try", ":", "\n", "                ", "from", "torch", ".", "utils", ".", "tensorboard", "import", "SummaryWriter", "\n", "", "except", "ImportError", ":", "\n", "                ", "raise", "ImportError", "(", "\n", "'Please run \"pip install future tensorboard\" to install '", "\n", "\"the dependencies to use torch.utils.tensorboard \"", "\n", "\"(applicable to PyTorch 1.1 or higher)\"", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "from", "tensorboardX", "import", "SummaryWriter", "\n", "", "except", "ImportError", ":", "\n", "                ", "raise", "ImportError", "(", "\n", "\"Please install tensorboardX to use \"", "\"TensorboardLoggerHook.\"", "\n", ")", "\n", "\n", "", "", "if", "self", ".", "log_dir", "is", "None", ":", "\n", "            ", "self", ".", "log_dir", "=", "osp", ".", "join", "(", "trainer", ".", "work_dir", ",", "\"tf_logs\"", ")", "\n", "", "self", ".", "writer", "=", "SummaryWriter", "(", "self", ".", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.tensorboard.TensorboardLoggerHook.log": [[37, 49], ["isinstance", "tensorboard.TensorboardLoggerHook.writer.add_text", "tensorboard.TensorboardLoggerHook.writer.add_scalar"], "methods", ["None"], ["", "@", "master_only", "\n", "def", "log", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "for", "var", "in", "trainer", ".", "log_buffer", ".", "output", ":", "\n", "            ", "if", "var", "in", "[", "\"time\"", ",", "\"data_time\"", "]", ":", "\n", "                ", "continue", "\n", "", "tag", "=", "\"{}/{}\"", ".", "format", "(", "var", ",", "trainer", ".", "mode", ")", "\n", "record", "=", "trainer", ".", "log_buffer", ".", "output", "[", "var", "]", "\n", "if", "isinstance", "(", "record", ",", "str", ")", ":", "\n", "                ", "self", ".", "writer", ".", "add_text", "(", "tag", ",", "record", ",", "trainer", ".", "iter", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "\n", "tag", ",", "trainer", ".", "log_buffer", ".", "output", "[", "var", "]", ",", "trainer", ".", "iter", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.tensorboard.TensorboardLoggerHook.after_run": [[51, 54], ["tensorboard.TensorboardLoggerHook.writer.close"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.close"], ["", "", "", "@", "master_only", "\n", "def", "after_run", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "writer", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.text.TextLoggerHook.__init__": [[13, 16], ["base.LoggerHook.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "interval", "=", "10", ",", "ignore_last", "=", "True", ",", "reset_flag", "=", "False", ")", ":", "\n", "        ", "super", "(", "TextLoggerHook", ",", "self", ")", ".", "__init__", "(", "interval", ",", "ignore_last", ",", "reset_flag", ")", "\n", "self", ".", "time_sec_tot", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.text.TextLoggerHook.before_run": [[17, 22], ["super().before_run", "os.join"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.before_run"], ["", "def", "before_run", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "super", "(", "TextLoggerHook", ",", "self", ")", ".", "before_run", "(", "trainer", ")", "\n", "self", ".", "start_iter", "=", "trainer", ".", "iter", "\n", "self", ".", "json_log_path", "=", "osp", ".", "join", "(", "\n", "trainer", ".", "work_dir", ",", "\"{}.log.json\"", ".", "format", "(", "trainer", ".", "timestamp", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.text.TextLoggerHook._get_max_memory": [[24, 32], ["torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.item", "torch.tensor.item", "torch.reduce", "torch.reduce", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["", "def", "_get_max_memory", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "mem", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "\n", "mem_mb", "=", "torch", ".", "tensor", "(", "\n", "[", "mem", "/", "(", "1024", "*", "1024", ")", "]", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", ")", "\n", "if", "trainer", ".", "world_size", ">", "1", ":", "\n", "            ", "dist", ".", "reduce", "(", "mem_mb", ",", "0", ",", "op", "=", "dist", ".", "ReduceOp", ".", "MAX", ")", "\n", "", "return", "mem_mb", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.text.TextLoggerHook._convert_to_precision4": [[33, 40], ["isinstance", "isinstance", "text.TextLoggerHook._convert_to_precision4"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.logger.text.TextLoggerHook._convert_to_precision4"], ["", "def", "_convert_to_precision4", "(", "self", ",", "val", ")", ":", "\n", "        ", "if", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "            ", "val", "=", "\"{:.4f}\"", ".", "format", "(", "val", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "list", ")", ":", "\n", "            ", "val", "=", "[", "self", ".", "_convert_to_precision4", "(", "v", ")", "for", "v", "in", "val", "]", "\n", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.text.TextLoggerHook._log_info": [[41, 110], ["trainer.logger.info", "enumerate", "log_dict.items", "trainer.logger.info", "len", "log_dict.keys", "str", "isinstance", "isinstance", "datetime.timedelta", "log_items.append", "log_items.append", "len", "int", "text.TextLoggerHook._convert_to_precision4"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.logger.text.TextLoggerHook._convert_to_precision4"], ["", "def", "_log_info", "(", "self", ",", "log_dict", ",", "trainer", ")", ":", "\n", "        ", "if", "trainer", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "log_str", "=", "\"Epoch [{}/{}][{}/{}]\\tlr: {:.5f}, \"", ".", "format", "(", "\n", "log_dict", "[", "\"epoch\"", "]", ",", "\n", "trainer", ".", "_max_epochs", ",", "\n", "log_dict", "[", "\"iter\"", "]", ",", "\n", "len", "(", "trainer", ".", "data_loader", ")", ",", "\n", "log_dict", "[", "\"lr\"", "]", ",", "\n", ")", "\n", "if", "\"time\"", "in", "log_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "time_sec_tot", "+=", "log_dict", "[", "\"time\"", "]", "*", "self", ".", "interval", "\n", "time_sec_avg", "=", "self", ".", "time_sec_tot", "/", "(", "trainer", ".", "iter", "-", "self", ".", "start_iter", "+", "1", ")", "\n", "eta_sec", "=", "time_sec_avg", "*", "(", "trainer", ".", "max_iters", "-", "trainer", ".", "iter", "-", "1", ")", "\n", "eta_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_sec", ")", ")", ")", "\n", "log_str", "+=", "\"eta: {}, \"", ".", "format", "(", "eta_str", ")", "\n", "log_str", "+=", "\"time: {:.3f}, data_time: {:.3f}, transfer_time: {:.3f}, forward_time: {:.3f}, loss_parse_time: {:.3f} \"", ".", "format", "(", "\n", "log_dict", "[", "\"time\"", "]", ",", "\n", "log_dict", "[", "\"data_time\"", "]", ",", "\n", "log_dict", "[", "\"transfer_time\"", "]", "-", "log_dict", "[", "\"data_time\"", "]", ",", "\n", "log_dict", "[", "\"forward_time\"", "]", "-", "log_dict", "[", "\"transfer_time\"", "]", ",", "\n", "log_dict", "[", "\"loss_parse_time\"", "]", "-", "log_dict", "[", "\"forward_time\"", "]", ",", "\n", ")", "\n", "log_str", "+=", "\"memory: {}, \"", ".", "format", "(", "log_dict", "[", "\"memory\"", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "log_str", "=", "\"Epoch({}) [{}][{}]\\t\"", ".", "format", "(", "\n", "log_dict", "[", "\"mode\"", "]", ",", "log_dict", "[", "\"epoch\"", "]", "-", "1", ",", "log_dict", "[", "\"iter\"", "]", "\n", ")", "\n", "\n", "", "trainer", ".", "logger", ".", "info", "(", "log_str", ")", "\n", "\n", "if", "trainer", ".", "world_size", ">", "1", ":", "\n", "            ", "class_names", "=", "trainer", ".", "model", ".", "module", ".", "bbox_head", ".", "class_names", "\n", "", "else", ":", "\n", "            ", "class_names", "=", "trainer", ".", "model", ".", "bbox_head", ".", "class_names", "\n", "\n", "", "for", "idx", ",", "task_class_names", "in", "enumerate", "(", "class_names", ")", ":", "\n", "            ", "log_items", "=", "[", "f\"task : {task_class_names}\"", "]", "\n", "log_str", "=", "\"\"", "\n", "for", "name", ",", "val", "in", "log_dict", ".", "items", "(", ")", ":", "\n", "# TODO:", "\n", "                ", "if", "name", "in", "[", "\n", "\"mode\"", ",", "\n", "\"Epoch\"", ",", "\n", "\"iter\"", ",", "\n", "\"lr\"", ",", "\n", "\"time\"", ",", "\n", "\"data_time\"", ",", "\n", "\"memory\"", ",", "\n", "\"epoch\"", ",", "\n", "\"transfer_time\"", ",", "\n", "\"forward_time\"", ",", "\n", "\"loss_parse_time\"", ",", "\n", "]", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "                    ", "val", "=", "\"{:.4f}\"", ".", "format", "(", "val", ")", "\n", "\n", "", "if", "isinstance", "(", "val", ",", "list", ")", ":", "\n", "                    ", "log_items", ".", "append", "(", "\n", "\"{}: {}\"", ".", "format", "(", "name", ",", "self", ".", "_convert_to_precision4", "(", "val", "[", "idx", "]", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "log_items", ".", "append", "(", "\"{}: {}\"", ".", "format", "(", "name", ",", "val", ")", ")", "\n", "\n", "", "", "log_str", "+=", "\", \"", ".", "join", "(", "log_items", ")", "\n", "if", "idx", "==", "(", "len", "(", "class_names", ")", "-", "1", ")", ":", "\n", "                ", "log_str", "+=", "\"\\n\"", "\n", "", "trainer", ".", "logger", ".", "info", "(", "log_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.text.TextLoggerHook._dump_log": [[111, 120], ["collections.OrderedDict", "log_dict.items", "text.TextLoggerHook._round_float", "open", "det3d.torchie.dump", "f.write"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.logger.text.TextLoggerHook._round_float", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open", "home.repos.pwc.inspect_result.neeharperi_futuredet.fileio.io.dump"], ["", "", "def", "_dump_log", "(", "self", ",", "log_dict", ",", "trainer", ")", ":", "\n", "        ", "json_log", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "log_dict", ".", "items", "(", ")", ":", "\n", "            ", "json_log", "[", "k", "]", "=", "self", ".", "_round_float", "(", "v", ")", "\n", "\n", "", "if", "trainer", ".", "rank", "==", "0", ":", "\n", "            ", "with", "open", "(", "self", ".", "json_log_path", ",", "\"a+\"", ")", "as", "f", ":", "\n", "                ", "torchie", ".", "dump", "(", "json_log", ",", "f", ",", "file_format", "=", "\"json\"", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.text.TextLoggerHook._round_float": [[121, 128], ["isinstance", "isinstance", "text.TextLoggerHook._round_float", "round"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.logger.text.TextLoggerHook._round_float"], ["", "", "", "def", "_round_float", "(", "self", ",", "items", ")", ":", "\n", "        ", "if", "isinstance", "(", "items", ",", "list", ")", ":", "\n", "            ", "return", "[", "self", ".", "_round_float", "(", "item", ")", "for", "item", "in", "items", "]", "\n", "", "elif", "isinstance", "(", "items", ",", "float", ")", ":", "\n", "            ", "return", "round", "(", "items", ",", "5", ")", "\n", "", "else", ":", "\n", "            ", "return", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.text.TextLoggerHook.log": [[129, 151], ["collections.OrderedDict", "trainer.log_buffer.output.items", "text.TextLoggerHook._log_info", "text.TextLoggerHook._dump_log", "trainer.current_lr", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "text.TextLoggerHook._get_max_memory"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.logger.text.TextLoggerHook._log_info", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.text.TextLoggerHook._dump_log", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.trainer.Trainer.current_lr", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.text.TextLoggerHook._get_max_memory"], ["", "", "def", "log", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "log_dict", "=", "OrderedDict", "(", ")", "\n", "# Training mode if the output contains the key time", "\n", "mode", "=", "\"train\"", "if", "\"time\"", "in", "trainer", ".", "log_buffer", ".", "output", "else", "\"val\"", "\n", "log_dict", "[", "\"mode\"", "]", "=", "mode", "\n", "log_dict", "[", "\"epoch\"", "]", "=", "trainer", ".", "epoch", "+", "1", "\n", "log_dict", "[", "\"iter\"", "]", "=", "trainer", ".", "inner_iter", "+", "1", "\n", "# Only record lr of the first param group", "\n", "log_dict", "[", "\"lr\"", "]", "=", "trainer", ".", "current_lr", "(", ")", "[", "0", "]", "\n", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "log_dict", "[", "\"time\"", "]", "=", "trainer", ".", "log_buffer", ".", "output", "[", "\"time\"", "]", "\n", "log_dict", "[", "\"data_time\"", "]", "=", "trainer", ".", "log_buffer", ".", "output", "[", "\"data_time\"", "]", "\n", "# statistic memory", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "log_dict", "[", "\"memory\"", "]", "=", "self", ".", "_get_max_memory", "(", "trainer", ")", "\n", "", "", "for", "name", ",", "val", "in", "trainer", ".", "log_buffer", ".", "output", ".", "items", "(", ")", ":", "\n", "            ", "if", "name", "in", "[", "\"time\"", ",", "\"data_time\"", "]", ":", "\n", "                ", "continue", "\n", "", "log_dict", "[", "name", "]", "=", "val", "\n", "\n", "", "self", ".", "_log_info", "(", "log_dict", ",", "trainer", ")", "\n", "self", ".", "_dump_log", "(", "log_dict", ",", "trainer", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviClient.__init__": [[18, 25], ["pavi.PaviClient._get_env_var", "pavi.PaviClient._get_env_var"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviClient._get_env_var", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviClient._get_env_var"], ["    ", "def", "__init__", "(", "self", ",", "url", ",", "username", "=", "None", ",", "password", "=", "None", ",", "instance_id", "=", "None", ")", ":", "\n", "        ", "self", ".", "url", "=", "url", "\n", "self", ".", "username", "=", "self", ".", "_get_env_var", "(", "username", ",", "\"PAVI_USERNAME\"", ")", "\n", "self", ".", "password", "=", "self", ".", "_get_env_var", "(", "password", ",", "\"PAVI_PASSWORD\"", ")", "\n", "self", ".", "instance_id", "=", "instance_id", "\n", "self", ".", "log_queue", "=", "None", "\n", "self", ".", "logger", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviClient._get_env_var": [[26, 36], ["os.getenv", "os.getenv", "os.getenv", "os.getenv", "str", "ValueError"], "methods", ["None"], ["", "def", "_get_env_var", "(", "self", ",", "var", ",", "env_var", ")", ":", "\n", "        ", "if", "var", "is", "not", "None", ":", "\n", "            ", "return", "str", "(", "var", ")", "\n", "\n", "", "var", "=", "os", ".", "getenv", "(", "env_var", ")", "\n", "if", "not", "var", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'\"{}\" is neither specified nor defined as env variables'", ".", "format", "(", "env_var", ")", "\n", ")", "\n", "", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviClient._print_log": [[37, 42], ["pavi.PaviClient.logger.log", "print"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log"], ["", "def", "_print_log", "(", "self", ",", "msg", ",", "level", "=", "logging", ".", "INFO", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "log", "(", "level", ",", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "msg", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviClient.connect": [[43, 83], ["dict", "pavi.PaviClient._print_log", "dict", "requests.post", "str", "info.get", "info.get", "info.get", "utils.get_host_info", "pavi.PaviClient._print_log", "pavi.PaviClient._print_log", "six.moves.queue.Queue", "threading.Thread", "pavi.PaviClient.log_thread.start", "pavi.PaviClient._print_log", "datetime.datetime.datetime.now", "os.abspath", "os.abspath"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviClient._print_log", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.utils.get_host_info", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviClient._print_log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviClient._print_log", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.ProgressBar.start", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviClient._print_log"], ["", "", "def", "connect", "(", "self", ",", "model_name", ",", "work_dir", "=", "None", ",", "info", "=", "dict", "(", ")", ",", "timeout", "=", "5", ",", "logger", "=", "None", ")", ":", "\n", "        ", "if", "logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", "=", "logger", "\n", "", "self", ".", "_print_log", "(", "\"connecting pavi service {}...\"", ".", "format", "(", "self", ".", "url", ")", ")", "\n", "post_data", "=", "dict", "(", "\n", "time", "=", "str", "(", "datetime", ".", "now", "(", ")", ")", ",", "\n", "username", "=", "self", ".", "username", ",", "\n", "password", "=", "self", ".", "password", ",", "\n", "instance_id", "=", "self", ".", "instance_id", ",", "\n", "model", "=", "model_name", ",", "\n", "work_dir", "=", "osp", ".", "abspath", "(", "work_dir", ")", "if", "work_dir", "else", "\"\"", ",", "\n", "session_file", "=", "info", ".", "get", "(", "\"session_file\"", ",", "\"\"", ")", ",", "\n", "session_text", "=", "info", ".", "get", "(", "\"session_text\"", ",", "\"\"", ")", ",", "\n", "model_text", "=", "info", ".", "get", "(", "\"model_text\"", ",", "\"\"", ")", ",", "\n", "device", "=", "get_host_info", "(", ")", ",", "\n", ")", "\n", "try", ":", "\n", "            ", "response", "=", "requests", ".", "post", "(", "self", ".", "url", ",", "json", "=", "post_data", ",", "timeout", "=", "timeout", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "self", ".", "_print_log", "(", "\n", "\"fail to connect to pavi service: {}\"", ".", "format", "(", "ex", ")", ",", "level", "=", "logging", ".", "ERROR", "\n", ")", "\n", "", "else", ":", "\n", "            ", "if", "response", ".", "status_code", "==", "200", ":", "\n", "                ", "self", ".", "instance_id", "=", "response", ".", "text", "\n", "self", ".", "_print_log", "(", "\n", "\"pavi service connected, instance_id: {}\"", ".", "format", "(", "self", ".", "instance_id", ")", "\n", ")", "\n", "self", ".", "log_queue", "=", "Queue", "(", ")", "\n", "self", ".", "log_thread", "=", "Thread", "(", "target", "=", "self", ".", "post_worker_fn", ")", "\n", "self", ".", "log_thread", ".", "daemon", "=", "True", "\n", "self", ".", "log_thread", ".", "start", "(", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "                ", "self", ".", "_print_log", "(", "\n", "\"fail to connect to pavi service, status code: \"", "\n", "\"{}, err message: {}\"", ".", "format", "(", "response", ".", "status_code", ",", "response", ".", "reason", ")", ",", "\n", "level", "=", "logging", ".", "ERROR", ",", "\n", ")", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviClient.post_worker_fn": [[84, 123], ["pavi.PaviClient.log_queue.get", "time.sleep", "pavi.PaviClient._print_log", "pavi.PaviClient._print_log", "requests.post", "pavi.PaviClient._print_log", "pavi.PaviClient._print_log"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviClient._print_log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviClient._print_log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviClient._print_log", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviClient._print_log"], ["", "def", "post_worker_fn", "(", "self", ",", "max_retry", "=", "3", ",", "queue_timeout", "=", "1", ",", "req_timeout", "=", "3", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "log", "=", "self", ".", "log_queue", ".", "get", "(", "timeout", "=", "queue_timeout", ")", "\n", "", "except", "Empty", ":", "\n", "                ", "time", ".", "sleep", "(", "1", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "self", ".", "_print_log", "(", "\n", "\"fail to get logs from queue: {}\"", ".", "format", "(", "ex", ")", ",", "level", "=", "logging", ".", "ERROR", "\n", ")", "\n", "", "else", ":", "\n", "                ", "retry", "=", "0", "\n", "while", "retry", "<", "max_retry", ":", "\n", "                    ", "try", ":", "\n", "                        ", "response", "=", "requests", ".", "post", "(", "\n", "self", ".", "url", ",", "json", "=", "log", ",", "timeout", "=", "req_timeout", "\n", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                        ", "retry", "+=", "1", "\n", "self", ".", "_print_log", "(", "\n", "\"error when posting logs to pavi: {}\"", ".", "format", "(", "ex", ")", ",", "\n", "level", "=", "logging", ".", "ERROR", ",", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "status_code", "=", "response", ".", "status_code", "\n", "if", "status_code", "==", "200", ":", "\n", "                            ", "break", "\n", "", "else", ":", "\n", "                            ", "self", ".", "_print_log", "(", "\n", "\"unexpected status code: {}, err msg: {}\"", ".", "format", "(", "\n", "status_code", ",", "response", ".", "reason", "\n", ")", ",", "\n", "level", "=", "logging", ".", "ERROR", ",", "\n", ")", "\n", "retry", "+=", "1", "\n", "", "", "", "if", "retry", "==", "max_retry", ":", "\n", "                    ", "self", ".", "_print_log", "(", "\n", "\"fail to send logs of iteration {}\"", ".", "format", "(", "log", "[", "\"iter_num\"", "]", ")", ",", "\n", "level", "=", "logging", ".", "ERROR", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviClient.log": [[125, 136], ["pavi.PaviClient.log_queue.put", "str", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.put"], ["", "", "", "", "def", "log", "(", "self", ",", "phase", ",", "iter", ",", "outputs", ")", ":", "\n", "        ", "if", "self", ".", "log_queue", "is", "not", "None", ":", "\n", "            ", "logs", "=", "{", "\n", "\"time\"", ":", "str", "(", "datetime", ".", "now", "(", ")", ")", ",", "\n", "\"instance_id\"", ":", "self", ".", "instance_id", ",", "\n", "\"flow_id\"", ":", "phase", ",", "\n", "\"iter_num\"", ":", "iter", ",", "\n", "\"outputs\"", ":", "outputs", ",", "\n", "\"msg\"", ":", "\"\"", ",", "\n", "}", "\n", "self", ".", "log_queue", ".", "put", "(", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.__init__": [[139, 153], ["pavi.PaviClient", "base.LoggerHook.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "url", ",", "\n", "username", "=", "None", ",", "\n", "password", "=", "None", ",", "\n", "instance_id", "=", "None", ",", "\n", "config_file", "=", "None", ",", "\n", "interval", "=", "10", ",", "\n", "ignore_last", "=", "True", ",", "\n", "reset_flag", "=", "True", ",", "\n", ")", ":", "\n", "        ", "self", ".", "pavi", "=", "PaviClient", "(", "url", ",", "username", ",", "password", ",", "instance_id", ")", "\n", "self", ".", "config_file", "=", "config_file", "\n", "super", "(", "PaviLoggerHook", ",", "self", ")", ".", "__init__", "(", "interval", ",", "ignore_last", ",", "reset_flag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.before_run": [[154, 157], ["super().before_run", "pavi.PaviLoggerHook.connect"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.before_run", "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.connect"], ["", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "        ", "super", "(", "PaviLoggerHook", ",", "self", ")", ".", "before_run", "(", "runner", ")", "\n", "self", ".", "connect", "(", "runner", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.connect": [[158, 167], ["dict", "pavi.PaviLoggerHook.pavi.connect", "dict.update", "open", "f.read"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.connect", "home.repos.pwc.inspect_result.neeharperi_futuredet.trainer.log_buffer.LogBuffer.update", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.checkpoint.Writer.open"], ["", "@", "master_only", "\n", "def", "connect", "(", "self", ",", "runner", ",", "timeout", "=", "5", ")", ":", "\n", "        ", "cfg_info", "=", "dict", "(", ")", "\n", "if", "self", ".", "config_file", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "self", ".", "config_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "config_text", "=", "f", ".", "read", "(", ")", "\n", "", "cfg_info", ".", "update", "(", "session_file", "=", "self", ".", "config_file", ",", "session_text", "=", "config_text", ")", "\n", "", "return", "self", ".", "pavi", ".", "connect", "(", "\n", "runner", ".", "model_name", ",", "runner", ".", "work_dir", ",", "cfg_info", ",", "timeout", ",", "runner", ".", "logger", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log": [[169, 178], ["runner.log_buffer.output.copy", "runner.log_buffer.output.copy.pop", "runner.log_buffer.output.copy.pop", "runner.log_buffer.output.copy.items", "pavi.PaviLoggerHook.pavi.log", "isinstance", "runner.log_buffer.output.copy.pop"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.logger.pavi.PaviLoggerHook.log"], ["", "@", "master_only", "\n", "def", "log", "(", "self", ",", "runner", ")", ":", "\n", "        ", "log_outs", "=", "runner", ".", "log_buffer", ".", "output", ".", "copy", "(", ")", "\n", "log_outs", ".", "pop", "(", "\"time\"", ",", "None", ")", "\n", "log_outs", ".", "pop", "(", "\"data_time\"", ",", "None", ")", "\n", "for", "k", ",", "v", "in", "log_outs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "                ", "log_outs", ".", "pop", "(", "k", ")", "\n", "", "", "self", ".", "pavi", ".", "log", "(", "runner", ".", "mode", ",", "runner", ".", "iter", "+", "1", ",", "log_outs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.input.voxel_generator.VoxelGenerator.__init__": [[6, 18], ["numpy.array", "numpy.array", "numpy.round().astype", "numpy.round"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "voxel_size", ",", "point_cloud_range", ",", "max_num_points", ",", "max_voxels", "=", "20000", ")", ":", "\n", "        ", "point_cloud_range", "=", "np", ".", "array", "(", "point_cloud_range", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# [0, -40, -3, 70.4, 40, 1]", "\n", "voxel_size", "=", "np", ".", "array", "(", "voxel_size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "grid_size", "=", "(", "point_cloud_range", "[", "3", ":", "]", "-", "point_cloud_range", "[", ":", "3", "]", ")", "/", "voxel_size", "\n", "grid_size", "=", "np", ".", "round", "(", "grid_size", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "self", ".", "_voxel_size", "=", "voxel_size", "\n", "self", ".", "_point_cloud_range", "=", "point_cloud_range", "\n", "self", ".", "_max_num_points", "=", "max_num_points", "\n", "self", ".", "_max_voxels", "=", "max_voxels", "\n", "self", ".", "_grid_size", "=", "grid_size", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.input.voxel_generator.VoxelGenerator.generate": [[19, 30], ["det3d.ops.point_cloud.point_cloud_ops.points_to_voxel"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.point_cloud.point_cloud_ops.points_to_voxel"], ["", "def", "generate", "(", "self", ",", "points", ",", "max_voxels", "=", "-", "1", ")", ":", "\n", "        ", "if", "max_voxels", "==", "-", "1", ":", "\n", "            ", "max_voxels", "=", "self", ".", "_max_voxels", "\n", "\n", "", "return", "points_to_voxel", "(", "\n", "points", ",", "\n", "self", ".", "_voxel_size", ",", "\n", "self", ".", "_point_cloud_range", ",", "\n", "self", ".", "_max_num_points", ",", "\n", "True", ",", "\n", "max_voxels", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.input.voxel_generator.VoxelGenerator.voxel_size": [[32, 35], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "voxel_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_voxel_size", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.input.voxel_generator.VoxelGenerator.max_num_points_per_voxel": [[36, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_num_points_per_voxel", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_max_num_points", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.input.voxel_generator.VoxelGenerator.point_cloud_range": [[40, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "point_cloud_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_point_cloud_range", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.input.voxel_generator.VoxelGenerator.grid_size": [[44, 47], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "grid_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_grid_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.points_count_rbbox": [[15, 21], ["box_np_ops.center_to_corner_box3d", "box_np_ops.corner_to_surfaces_3d", "det3d.core.bbox.geometry.points_count_convex_polygon_3d_jit"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corner_to_surfaces_3d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.points_count_convex_polygon_3d_jit"], ["", "def", "points_count_rbbox", "(", "points", ",", "rbbox", ",", "z_axis", "=", "2", ",", "origin", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ":", "\n", "    ", "rbbox_corners", "=", "center_to_corner_box3d", "(", "\n", "rbbox", "[", ":", ",", ":", "3", "]", ",", "rbbox", "[", ":", ",", "3", ":", "6", "]", ",", "rbbox", "[", ":", ",", "-", "1", "]", ",", "origin", "=", "origin", ",", "axis", "=", "z_axis", "\n", ")", "\n", "surfaces", "=", "corner_to_surfaces_3d", "(", "rbbox_corners", ")", "\n", "return", "points_count_convex_polygon_3d_jit", "(", "points", "[", ":", ",", ":", "3", "]", ",", "surfaces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.riou_cc": [[23, 36], ["box_np_ops.center_to_corner_box2d", "box_np_ops.corner_to_standup_nd", "box_np_ops.center_to_corner_box2d", "box_np_ops.corner_to_standup_nd", "box_np_ops.iou_jit", "rbbox_iou"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.corner_to_standup_nd", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.corner_to_standup_nd", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.iou_jit"], ["", "def", "riou_cc", "(", "rbboxes", ",", "qrbboxes", ",", "standup_thresh", "=", "0.0", ")", ":", "\n", "# less than 50ms when used in second one thread. 10x slower than gpu", "\n", "    ", "boxes_corners", "=", "center_to_corner_box2d", "(", "\n", "rbboxes", "[", ":", ",", ":", "2", "]", ",", "rbboxes", "[", ":", ",", "2", ":", "4", "]", ",", "rbboxes", "[", ":", ",", "4", "]", "\n", ")", "\n", "boxes_standup", "=", "corner_to_standup_nd", "(", "boxes_corners", ")", "\n", "qboxes_corners", "=", "center_to_corner_box2d", "(", "\n", "qrbboxes", "[", ":", ",", ":", "2", "]", ",", "qrbboxes", "[", ":", ",", "2", ":", "4", "]", ",", "qrbboxes", "[", ":", ",", "4", "]", "\n", ")", "\n", "qboxes_standup", "=", "corner_to_standup_nd", "(", "qboxes_corners", ")", "\n", "# if standup box not overlapped, rbbox not overlapped too.", "\n", "standup_iou", "=", "iou_jit", "(", "boxes_standup", ",", "qboxes_standup", ",", "eps", "=", "0.0", ")", "\n", "return", "rbbox_iou", "(", "boxes_corners", ",", "qboxes_corners", ",", "standup_iou", ",", "standup_thresh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.rinter_cc": [[38, 52], ["box_np_ops.center_to_corner_box2d", "box_np_ops.corner_to_standup_nd", "box_np_ops.center_to_corner_box2d", "box_np_ops.corner_to_standup_nd", "box_np_ops.iou_jit", "rbbox_intersection"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.corner_to_standup_nd", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.corner_to_standup_nd", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.iou_jit"], ["", "def", "rinter_cc", "(", "rbboxes", ",", "qrbboxes", ",", "standup_thresh", "=", "0.0", ")", ":", "\n", "# less than 50ms when used in second one thread. 10x slower than gpu", "\n", "    ", "boxes_corners", "=", "center_to_corner_box2d", "(", "\n", "rbboxes", "[", ":", ",", ":", "2", "]", ",", "rbboxes", "[", ":", ",", "2", ":", "4", "]", ",", "rbboxes", "[", ":", ",", "4", "]", "\n", ")", "\n", "boxes_standup", "=", "corner_to_standup_nd", "(", "boxes_corners", ")", "\n", "qboxes_corners", "=", "center_to_corner_box2d", "(", "\n", "qrbboxes", "[", ":", ",", ":", "2", "]", ",", "qrbboxes", "[", ":", ",", "2", ":", "4", "]", ",", "qrbboxes", "[", ":", ",", "4", "]", "\n", ")", "\n", "qboxes_standup", "=", "corner_to_standup_nd", "(", "qboxes_corners", ")", "\n", "# if standup box not overlapped, rbbox not overlapped too.", "\n", "standup_iou", "=", "iou_jit", "(", "boxes_standup", ",", "qboxes_standup", ",", "eps", "=", "0.0", ")", "\n", "return", "rbbox_intersection", "(", "\n", "boxes_corners", ",", "qboxes_corners", ",", "standup_iou", ",", "standup_thresh", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corners_nd": [[55, 86], ["int", "numpy.stack().astype", "numpy.array", "dims.reshape", "np.stack().astype.reshape", "numpy.stack", "numpy.unravel_index", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack"], ["", "def", "corners_nd", "(", "dims", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"generate relative box corners based on length per dim and\n    origin point.\n\n    Args:\n        dims (float array, shape=[N, ndim]): array of length per dim\n        origin (list or array or float): origin point relate to smallest point.\n\n    Returns:\n        float array, shape=[N, 2 ** ndim, ndim]: returned corners.\n        point layout example: (2d) x0y0, x0y1, x1y0, x1y1;\n            (3d) x0y0z0, x0y0z1, x0y1z0, x0y1z1, x1y0z0, x1y0z1, x1y1z0, x1y1z1\n            where x0 < x1, y0 < y1, z0 < z1\n    \"\"\"", "\n", "ndim", "=", "int", "(", "dims", ".", "shape", "[", "1", "]", ")", "\n", "corners_norm", "=", "np", ".", "stack", "(", "\n", "np", ".", "unravel_index", "(", "np", ".", "arange", "(", "2", "**", "ndim", ")", ",", "[", "2", "]", "*", "ndim", ")", ",", "axis", "=", "1", "\n", ")", ".", "astype", "(", "dims", ".", "dtype", ")", "\n", "# now corners_norm has format: (2d) x0y0, x0y1, x1y0, x1y1", "\n", "# (3d) x0y0z0, x0y0z1, x0y1z0, x0y1z1, x1y0z0, x1y0z1, x1y1z0, x1y1z1", "\n", "# so need to convert to a format which is convenient to do other computing.", "\n", "# for 2d boxes, format is clockwise start with minimum point", "\n", "# for 3d boxes, please draw lines by your hand.", "\n", "if", "ndim", "==", "2", ":", "\n", "# generate clockwise box corners", "\n", "        ", "corners_norm", "=", "corners_norm", "[", "[", "0", ",", "1", ",", "3", ",", "2", "]", "]", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "        ", "corners_norm", "=", "corners_norm", "[", "[", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ",", "7", ",", "6", "]", "]", "\n", "", "corners_norm", "=", "corners_norm", "-", "np", ".", "array", "(", "origin", ",", "dtype", "=", "dims", ".", "dtype", ")", "\n", "corners", "=", "dims", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "ndim", "]", ")", "*", "corners_norm", ".", "reshape", "(", "[", "1", ",", "2", "**", "ndim", ",", "ndim", "]", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corners_2d_jit": [[88, 95], ["numpy.array", "numpy.array", "dims.reshape", "np.array.reshape"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "corners_2d_jit", "(", "dims", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "ndim", "=", "2", "\n", "corners_norm", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ",", "dtype", "=", "dims", ".", "dtype", ")", "\n", "corners_norm", "=", "corners_norm", "-", "np", ".", "array", "(", "origin", ",", "dtype", "=", "dims", ".", "dtype", ")", "\n", "corners", "=", "dims", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "ndim", ")", ")", "*", "corners_norm", ".", "reshape", "(", "(", "1", ",", "2", "**", "ndim", ",", "ndim", ")", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corners_3d_jit": [[97, 108], ["numpy.array().reshape", "numpy.array", "dims.reshape", "np.array().reshape.reshape", "numpy.array"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "corners_3d_jit", "(", "dims", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "ndim", "=", "3", "\n", "corners_norm", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "dtype", "=", "dims", ".", "dtype", ",", "\n", ")", ".", "reshape", "(", "(", "8", ",", "3", ")", ")", "\n", "corners_norm", "=", "corners_norm", "[", "[", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ",", "7", ",", "6", "]", "]", "\n", "corners_norm", "=", "corners_norm", "-", "np", ".", "array", "(", "origin", ",", "dtype", "=", "dims", ".", "dtype", ")", "\n", "corners", "=", "dims", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "ndim", ")", ")", "*", "corners_norm", ".", "reshape", "(", "(", "1", ",", "2", "**", "ndim", ",", "ndim", ")", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corner_to_standup_nd_jit": [[110, 121], ["numpy.zeros", "range", "range", "range", "numpy.min", "numpy.max"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "corner_to_standup_nd_jit", "(", "boxes_corner", ")", ":", "\n", "    ", "num_boxes", "=", "boxes_corner", ".", "shape", "[", "0", "]", "\n", "ndim", "=", "boxes_corner", ".", "shape", "[", "-", "1", "]", "\n", "result", "=", "np", ".", "zeros", "(", "(", "num_boxes", ",", "ndim", "*", "2", ")", ",", "dtype", "=", "boxes_corner", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "num_boxes", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "result", "[", "i", ",", "j", "]", "=", "np", ".", "min", "(", "boxes_corner", "[", "i", ",", ":", ",", "j", "]", ")", "\n", "", "for", "j", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "result", "[", "i", ",", "j", "+", "ndim", "]", "=", "np", ".", "max", "(", "boxes_corner", "[", "i", ",", ":", ",", "j", "]", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corner_to_standup_nd": [[123, 129], ["standup_boxes.append", "standup_boxes.append", "numpy.concatenate", "len", "numpy.min", "numpy.max"], "function", ["None"], ["", "def", "corner_to_standup_nd", "(", "boxes_corner", ")", ":", "\n", "    ", "assert", "len", "(", "boxes_corner", ".", "shape", ")", "==", "3", "\n", "standup_boxes", "=", "[", "]", "\n", "standup_boxes", ".", "append", "(", "np", ".", "min", "(", "boxes_corner", ",", "axis", "=", "1", ")", ")", "\n", "standup_boxes", ".", "append", "(", "np", ".", "max", "(", "boxes_corner", ",", "axis", "=", "1", ")", ")", "\n", "return", "np", ".", "concatenate", "(", "standup_boxes", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.rbbox2d_to_near_bbox": [[131, 144], ["numpy.abs", "numpy.where", "box_np_ops.center_to_minmax_2d", "box_np_ops.limit_period"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.center_to_minmax_2d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.limit_period"], ["", "def", "rbbox2d_to_near_bbox", "(", "rbboxes", ")", ":", "\n", "    ", "\"\"\"convert rotated bbox to nearest 'standing' or 'lying' bbox.\n    Args:\n        rbboxes: [N, 5(x, y, xdim, ydim, rad)] rotated bboxes\n    Returns:\n        bboxes: [N, 4(xmin, ymin, xmax, ymax)] bboxes\n    \"\"\"", "\n", "rots", "=", "rbboxes", "[", "...", ",", "-", "1", "]", "\n", "rots_0_pi_div_2", "=", "np", ".", "abs", "(", "limit_period", "(", "rots", ",", "0.5", ",", "np", ".", "pi", ")", ")", "\n", "cond", "=", "(", "rots_0_pi_div_2", ">", "np", ".", "pi", "/", "4", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "bboxes_center", "=", "np", ".", "where", "(", "cond", ",", "rbboxes", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", "]", ",", "rbboxes", "[", ":", ",", ":", "4", "]", ")", "\n", "bboxes", "=", "center_to_minmax_2d", "(", "bboxes_center", "[", ":", ",", ":", "2", "]", ",", "bboxes_center", "[", ":", ",", "2", ":", "]", ")", "\n", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.rotation_3d_in_axis": [[146, 180], ["numpy.sin", "numpy.cos", "numpy.ones_like", "numpy.zeros_like", "numpy.einsum", "numpy.stack", "numpy.stack", "numpy.stack", "ValueError"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack"], ["", "def", "rotation_3d_in_axis", "(", "points", ",", "angles", ",", "axis", "=", "0", ")", ":", "\n", "# points: [N, point_size, 3]", "\n", "    ", "rot_sin", "=", "np", ".", "sin", "(", "angles", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "angles", ")", "\n", "ones", "=", "np", ".", "ones_like", "(", "rot_cos", ")", "\n", "zeros", "=", "np", ".", "zeros_like", "(", "rot_cos", ")", "\n", "if", "axis", "==", "1", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "stack", "(", "\n", "[", "\n", "[", "rot_cos", ",", "zeros", ",", "-", "rot_sin", "]", ",", "\n", "[", "zeros", ",", "ones", ",", "zeros", "]", ",", "\n", "[", "rot_sin", ",", "zeros", ",", "rot_cos", "]", ",", "\n", "]", "\n", ")", "\n", "", "elif", "axis", "==", "2", "or", "axis", "==", "-", "1", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "stack", "(", "\n", "[", "\n", "[", "rot_cos", ",", "-", "rot_sin", ",", "zeros", "]", ",", "\n", "[", "rot_sin", ",", "rot_cos", ",", "zeros", "]", ",", "\n", "[", "zeros", ",", "zeros", ",", "ones", "]", ",", "\n", "]", "\n", ")", "\n", "", "elif", "axis", "==", "0", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "stack", "(", "\n", "[", "\n", "[", "zeros", ",", "rot_cos", ",", "-", "rot_sin", "]", ",", "\n", "[", "zeros", ",", "rot_sin", ",", "rot_cos", "]", ",", "\n", "[", "ones", ",", "zeros", ",", "zeros", "]", ",", "\n", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"axis should in range\"", ")", "\n", "\n", "", "return", "np", ".", "einsum", "(", "\"aij,jka->aik\"", ",", "points", ",", "rot_mat_T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.rotation_points_single_angle": [[182, 205], ["numpy.sin", "numpy.cos", "numpy.array", "numpy.array", "numpy.array", "ValueError"], "function", ["None"], ["", "def", "rotation_points_single_angle", "(", "points", ",", "angle", ",", "axis", "=", "0", ")", ":", "\n", "# points: [N, 3]", "\n", "    ", "rot_sin", "=", "np", ".", "sin", "(", "angle", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "angle", ")", "\n", "if", "axis", "==", "1", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "array", "(", "\n", "[", "[", "rot_cos", ",", "0", ",", "-", "rot_sin", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "rot_sin", ",", "0", ",", "rot_cos", "]", "]", ",", "\n", "dtype", "=", "points", ".", "dtype", ",", "\n", ")", "\n", "", "elif", "axis", "==", "2", "or", "axis", "==", "-", "1", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "array", "(", "\n", "[", "[", "rot_cos", ",", "-", "rot_sin", ",", "0", "]", ",", "[", "rot_sin", ",", "rot_cos", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ",", "\n", "dtype", "=", "points", ".", "dtype", ",", "\n", ")", "\n", "", "elif", "axis", "==", "0", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "array", "(", "\n", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "rot_cos", ",", "-", "rot_sin", "]", ",", "[", "0", ",", "rot_sin", ",", "rot_cos", "]", "]", ",", "\n", "dtype", "=", "points", ".", "dtype", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"axis should in range\"", ")", "\n", "\n", "", "return", "points", "@", "rot_mat_T", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.rotation_2d": [[207, 221], ["numpy.sin", "numpy.cos", "numpy.stack", "numpy.einsum"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack"], ["", "def", "rotation_2d", "(", "points", ",", "angles", ")", ":", "\n", "    ", "\"\"\"rotation 2d points based on origin point clockwise when angle positive.\n\n    Args:\n        points (float array, shape=[N, point_size, 2]): points to be rotated.\n        angles (float array, shape=[N]): rotation angle.\n\n    Returns:\n        float array: same shape as points\n    \"\"\"", "\n", "rot_sin", "=", "np", ".", "sin", "(", "angles", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "angles", ")", "\n", "rot_mat_T", "=", "np", ".", "stack", "(", "[", "[", "rot_cos", ",", "-", "rot_sin", "]", ",", "[", "rot_sin", ",", "rot_cos", "]", "]", ")", "\n", "return", "np", ".", "einsum", "(", "\"aij,jka->aik\"", ",", "points", ",", "rot_mat_T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.rotation_box": [[223, 239], ["numpy.sin", "numpy.cos", "numpy.array"], "function", ["None"], ["", "def", "rotation_box", "(", "box_corners", ",", "angle", ")", ":", "\n", "    ", "\"\"\"rotation 2d points based on origin point clockwise when angle positive.\n\n    Args:\n        points (float array, shape=[N, point_size, 2]): points to be rotated.\n        angle (float): rotation angle.\n\n    Returns:\n        float array: same shape as points\n    \"\"\"", "\n", "rot_sin", "=", "np", ".", "sin", "(", "angle", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "angle", ")", "\n", "rot_mat_T", "=", "np", ".", "array", "(", "\n", "[", "[", "rot_cos", ",", "-", "rot_sin", "]", ",", "[", "rot_sin", ",", "rot_cos", "]", "]", ",", "dtype", "=", "box_corners", ".", "dtype", "\n", ")", "\n", "return", "box_corners", "@", "rot_mat_T", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.center_to_corner_box3d": [[241, 263], ["box_np_ops.corners_nd", "centers.reshape", "box_np_ops.rotation_3d_in_axis"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.corners_nd", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.rotation_3d_in_axis"], ["", "def", "center_to_corner_box3d", "(", "centers", ",", "dims", ",", "angles", "=", "None", ",", "origin", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "axis", "=", "2", ")", ":", "\n", "    ", "\"\"\"convert kitti locations, dimensions and angles to corners\n\n    Args:\n        centers (float array, shape=[N, 3]): locations in kitti label file.\n        dims (float array, shape=[N, 3]): dimensions in kitti label file.\n        angles (float array, shape=[N]): rotation_y in kitti label file.\n        origin (list or array or float): origin point relate to smallest point.\n            use [0.5, 1.0, 0.5] in camera and [0.5, 0.5, 0] in lidar.\n        axis (int): rotation axis. 1 for camera and 2 for lidar.\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "# 'length' in kitti format is in x axis.", "\n", "# yzx(hwl)(kitti label file)<->xyz(lhw)(camera)<->z(-x)(-y)(wlh)(lidar)", "\n", "# center in kitti format is [0.5, 1.0, 0.5] in xyz.", "\n", "corners", "=", "corners_nd", "(", "dims", ",", "origin", "=", "origin", ")", "\n", "# corners: [N, 8, 3]", "\n", "if", "angles", "is", "not", "None", ":", "\n", "        ", "corners", "=", "rotation_3d_in_axis", "(", "corners", ",", "angles", ",", "axis", "=", "axis", ")", "\n", "", "corners", "+=", "centers", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "3", "]", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.center_to_corner_box2d": [[265, 286], ["box_np_ops.corners_nd", "centers.reshape", "box_np_ops.rotation_2d"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.corners_nd", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.rotation_2d"], ["", "def", "center_to_corner_box2d", "(", "centers", ",", "dims", ",", "angles", "=", "None", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"convert kitti locations, dimensions and angles to corners.\n    format: center(xy), dims(xy), angles(clockwise when positive)\n\n    Args:\n        centers (float array, shape=[N, 2]): locations in kitti label file.\n        dims (float array, shape=[N, 2]): dimensions in kitti label file.\n        angles (float array, shape=[N]): rotation_y in kitti label file.\n\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "# 'length' in kitti format is in x axis.", "\n", "# xyz(hwl)(kitti label file)<->xyz(lhw)(camera)<->z(-x)(-y)(wlh)(lidar)", "\n", "# center in kitti format is [0.5, 1.0, 0.5] in xyz.", "\n", "corners", "=", "corners_nd", "(", "dims", ",", "origin", "=", "origin", ")", "\n", "# corners: [N, 4, 2]", "\n", "if", "angles", "is", "not", "None", ":", "\n", "        ", "corners", "=", "rotation_2d", "(", "corners", ",", "angles", ")", "\n", "", "corners", "+=", "centers", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "2", "]", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.box2d_to_corner_jit": [[288, 308], ["numba.jit", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.zeros", "range", "np.zeros.reshape", "numpy.sin", "numpy.cos", "boxes.reshape"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "box2d_to_corner_jit", "(", "boxes", ")", ":", "\n", "    ", "num_box", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "corners_norm", "=", "np", ".", "zeros", "(", "(", "4", ",", "2", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "corners_norm", "[", "1", ",", "1", "]", "=", "1.0", "\n", "corners_norm", "[", "2", "]", "=", "1.0", "\n", "corners_norm", "[", "3", ",", "0", "]", "=", "1.0", "\n", "corners_norm", "-=", "np", ".", "array", "(", "[", "0.5", ",", "0.5", "]", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "corners", "=", "boxes", ".", "reshape", "(", "num_box", ",", "1", ",", "5", ")", "[", ":", ",", ":", ",", "2", ":", "4", "]", "*", "corners_norm", ".", "reshape", "(", "1", ",", "4", ",", "2", ")", "\n", "rot_mat_T", "=", "np", ".", "zeros", "(", "(", "2", ",", "2", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "box_corners", "=", "np", ".", "zeros", "(", "(", "num_box", ",", "4", ",", "2", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "num_box", ")", ":", "\n", "        ", "rot_sin", "=", "np", ".", "sin", "(", "boxes", "[", "i", ",", "-", "1", "]", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "boxes", "[", "i", ",", "-", "1", "]", ")", "\n", "rot_mat_T", "[", "0", ",", "0", "]", "=", "rot_cos", "\n", "rot_mat_T", "[", "0", ",", "1", "]", "=", "-", "rot_sin", "\n", "rot_mat_T", "[", "1", ",", "0", "]", "=", "rot_sin", "\n", "rot_mat_T", "[", "1", ",", "1", "]", "=", "rot_cos", "\n", "box_corners", "[", "i", "]", "=", "corners", "[", "i", "]", "@", "rot_mat_T", "+", "boxes", "[", "i", ",", ":", "2", "]", "\n", "", "return", "box_corners", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.rbbox3d_to_corners": [[310, 313], ["box_np_ops.center_to_corner_box3d"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box3d"], ["", "def", "rbbox3d_to_corners", "(", "rbboxes", ",", "origin", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "axis", "=", "2", ")", ":", "\n", "    ", "return", "center_to_corner_box3d", "(", "\n", "rbboxes", "[", "...", ",", ":", "3", "]", ",", "rbboxes", "[", "...", ",", "3", ":", "6", "]", ",", "rbboxes", "[", "...", ",", "6", "]", ",", "origin", ",", "axis", "=", "axis", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.rbbox3d_to_bev_corners": [[316, 319], ["box_np_ops.center_to_corner_box2d"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box2d"], ["", "def", "rbbox3d_to_bev_corners", "(", "rbboxes", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "return", "center_to_corner_box2d", "(", "\n", "rbboxes", "[", "...", ",", ":", "2", "]", ",", "rbboxes", "[", "...", ",", "3", ":", "5", "]", ",", "rbboxes", "[", "...", ",", "6", "]", ",", "origin", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.minmax_to_corner_2d": [[322, 327], ["box_np_ops.center_to_corner_box2d"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box2d"], ["", "def", "minmax_to_corner_2d", "(", "minmax_box", ")", ":", "\n", "    ", "ndim", "=", "minmax_box", ".", "shape", "[", "-", "1", "]", "//", "2", "\n", "center", "=", "minmax_box", "[", "...", ",", ":", "ndim", "]", "\n", "dims", "=", "minmax_box", "[", "...", ",", "ndim", ":", "]", "-", "center", "\n", "return", "center_to_corner_box2d", "(", "center", ",", "dims", ",", "origin", "=", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.minmax_to_corner_2d_v2": [[329, 332], ["minmax_box[].reshape"], "function", ["None"], ["", "def", "minmax_to_corner_2d_v2", "(", "minmax_box", ")", ":", "\n", "# N, 4 -> N 4 2", "\n", "    ", "return", "minmax_box", "[", "...", ",", "[", "0", ",", "1", ",", "0", ",", "3", ",", "2", ",", "3", ",", "2", ",", "1", "]", "]", ".", "reshape", "(", "-", "1", ",", "4", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.minmax_to_corner_3d": [[334, 339], ["box_np_ops.center_to_corner_box3d"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box3d"], ["", "def", "minmax_to_corner_3d", "(", "minmax_box", ")", ":", "\n", "    ", "ndim", "=", "minmax_box", ".", "shape", "[", "-", "1", "]", "//", "2", "\n", "center", "=", "minmax_box", "[", "...", ",", ":", "ndim", "]", "\n", "dims", "=", "minmax_box", "[", "...", ",", "ndim", ":", "]", "-", "center", "\n", "return", "center_to_corner_box3d", "(", "center", ",", "dims", ",", "origin", "=", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.minmax_to_center_2d": [[341, 347], ["numpy.concatenate"], "function", ["None"], ["", "def", "minmax_to_center_2d", "(", "minmax_box", ")", ":", "\n", "    ", "ndim", "=", "minmax_box", ".", "shape", "[", "-", "1", "]", "//", "2", "\n", "center_min", "=", "minmax_box", "[", "...", ",", ":", "ndim", "]", "\n", "dims", "=", "minmax_box", "[", "...", ",", "ndim", ":", "]", "-", "center_min", "\n", "center", "=", "center_min", "+", "0.5", "*", "dims", "\n", "return", "np", ".", "concatenate", "(", "[", "center", ",", "dims", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.center_to_minmax_2d_0_5": [[349, 351], ["numpy.concatenate"], "function", ["None"], ["", "def", "center_to_minmax_2d_0_5", "(", "centers", ",", "dims", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "[", "centers", "-", "dims", "/", "2", ",", "centers", "+", "dims", "/", "2", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.center_to_minmax_2d": [[353, 358], ["box_np_ops.center_to_corner_box2d", "corners[].reshape", "box_np_ops.center_to_minmax_2d_0_5"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.center_to_minmax_2d_0_5"], ["", "def", "center_to_minmax_2d", "(", "centers", ",", "dims", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "if", "origin", "==", "0.5", ":", "\n", "        ", "return", "center_to_minmax_2d_0_5", "(", "centers", ",", "dims", ")", "\n", "", "corners", "=", "center_to_corner_box2d", "(", "centers", ",", "dims", ",", "origin", "=", "origin", ")", "\n", "return", "corners", "[", ":", ",", "[", "0", ",", "2", "]", "]", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.limit_period": [[360, 362], ["numpy.floor", "numpy.np.pi"], "function", ["None"], ["", "def", "limit_period", "(", "val", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", ")", ":", "\n", "    ", "return", "val", "-", "np", ".", "floor", "(", "val", "/", "period", "+", "offset", ")", "*", "period", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.projection_matrix_to_CRT_kitti": [[364, 376], ["numpy.linalg.inv", "numpy.linalg.qr", "numpy.linalg.inv", "numpy.linalg.inv"], "function", ["None"], ["", "def", "projection_matrix_to_CRT_kitti", "(", "proj", ")", ":", "\n", "# P = C @ [R|T]", "\n", "# C is upper triangular matrix, so we need to inverse CR and use QR", "\n", "# stable for all kitti camera projection matrix", "\n", "    ", "CR", "=", "proj", "[", "0", ":", "3", ",", "0", ":", "3", "]", "\n", "CT", "=", "proj", "[", "0", ":", "3", ",", "3", "]", "\n", "RinvCinv", "=", "np", ".", "linalg", ".", "inv", "(", "CR", ")", "\n", "Rinv", ",", "Cinv", "=", "np", ".", "linalg", ".", "qr", "(", "RinvCinv", ")", "\n", "C", "=", "np", ".", "linalg", ".", "inv", "(", "Cinv", ")", "\n", "R", "=", "np", ".", "linalg", ".", "inv", "(", "Rinv", ")", "\n", "T", "=", "Cinv", "@", "CT", "\n", "return", "C", ",", "R", ",", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.get_frustum": [[378, 396], ["numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "get_frustum", "(", "bbox_image", ",", "C", ",", "near_clip", "=", "0.001", ",", "far_clip", "=", "100", ")", ":", "\n", "    ", "fku", "=", "C", "[", "0", ",", "0", "]", "\n", "fkv", "=", "-", "C", "[", "1", ",", "1", "]", "\n", "u0v0", "=", "C", "[", "0", ":", "2", ",", "2", "]", "\n", "z_points", "=", "np", ".", "array", "(", "[", "near_clip", "]", "*", "4", "+", "[", "far_clip", "]", "*", "4", ",", "dtype", "=", "C", ".", "dtype", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "b", "=", "bbox_image", "\n", "box_corners", "=", "np", ".", "array", "(", "\n", "[", "[", "b", "[", "0", "]", ",", "b", "[", "1", "]", "]", ",", "[", "b", "[", "0", "]", ",", "b", "[", "3", "]", "]", ",", "[", "b", "[", "2", "]", ",", "b", "[", "3", "]", "]", ",", "[", "b", "[", "2", "]", ",", "b", "[", "1", "]", "]", "]", ",", "dtype", "=", "C", ".", "dtype", "\n", ")", "\n", "near_box_corners", "=", "(", "box_corners", "-", "u0v0", ")", "/", "np", ".", "array", "(", "\n", "[", "fku", "/", "near_clip", ",", "-", "fkv", "/", "near_clip", "]", ",", "dtype", "=", "C", ".", "dtype", "\n", ")", "\n", "far_box_corners", "=", "(", "box_corners", "-", "u0v0", ")", "/", "np", ".", "array", "(", "\n", "[", "fku", "/", "far_clip", ",", "-", "fkv", "/", "far_clip", "]", ",", "dtype", "=", "C", ".", "dtype", "\n", ")", "\n", "ret_xy", "=", "np", ".", "concatenate", "(", "[", "near_box_corners", ",", "far_box_corners", "]", ",", "axis", "=", "0", ")", "# [8, 2]", "\n", "ret_xyz", "=", "np", ".", "concatenate", "(", "[", "ret_xy", ",", "z_points", "]", ",", "axis", "=", "1", ")", "\n", "return", "ret_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.get_frustum_v2": [[398, 417], ["numpy.tile", "box_np_ops.minmax_to_corner_2d_v2", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.minmax_to_corner_2d_v2"], ["", "def", "get_frustum_v2", "(", "bboxes", ",", "C", ",", "near_clip", "=", "0.001", ",", "far_clip", "=", "100", ")", ":", "\n", "    ", "fku", "=", "C", "[", "0", ",", "0", "]", "\n", "fkv", "=", "-", "C", "[", "1", ",", "1", "]", "\n", "u0v0", "=", "C", "[", "0", ":", "2", ",", "2", "]", "\n", "num_box", "=", "bboxes", ".", "shape", "[", "0", "]", "\n", "z_points", "=", "np", ".", "array", "(", "[", "near_clip", "]", "*", "4", "+", "[", "far_clip", "]", "*", "4", ",", "dtype", "=", "C", ".", "dtype", ")", "[", "\n", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", "\n", "]", "\n", "z_points", "=", "np", ".", "tile", "(", "z_points", ",", "[", "num_box", ",", "1", ",", "1", "]", ")", "\n", "box_corners", "=", "minmax_to_corner_2d_v2", "(", "bboxes", ")", "\n", "near_box_corners", "=", "(", "box_corners", "-", "u0v0", ")", "/", "np", ".", "array", "(", "\n", "[", "fku", "/", "near_clip", ",", "-", "fkv", "/", "near_clip", "]", ",", "dtype", "=", "C", ".", "dtype", "\n", ")", "\n", "far_box_corners", "=", "(", "box_corners", "-", "u0v0", ")", "/", "np", ".", "array", "(", "\n", "[", "fku", "/", "far_clip", ",", "-", "fkv", "/", "far_clip", "]", ",", "dtype", "=", "C", ".", "dtype", "\n", ")", "\n", "ret_xy", "=", "np", ".", "concatenate", "(", "[", "near_box_corners", ",", "far_box_corners", "]", ",", "axis", "=", "1", ")", "# [8, 2]", "\n", "ret_xyz", "=", "np", ".", "concatenate", "(", "[", "ret_xy", ",", "z_points", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "ret_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops._add_rgb_to_points_kernel": [[419, 428], ["range", "numpy.floor().astype", "numpy.floor"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "_add_rgb_to_points_kernel", "(", "points_2d", ",", "image", ",", "points_rgb", ")", ":", "\n", "    ", "num_points", "=", "points_2d", ".", "shape", "[", "0", "]", "\n", "image_h", ",", "image_w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "for", "i", "in", "range", "(", "num_points", ")", ":", "\n", "        ", "img_pos", "=", "np", ".", "floor", "(", "points_2d", "[", "i", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "if", "img_pos", "[", "0", "]", ">=", "0", "and", "img_pos", "[", "0", "]", "<", "image_w", ":", "\n", "            ", "if", "img_pos", "[", "1", "]", ">=", "0", "and", "img_pos", "[", "1", "]", "<", "image_h", ":", "\n", "                ", "points_rgb", "[", "i", ",", ":", "]", "=", "image", "[", "img_pos", "[", "1", "]", ",", "img_pos", "[", "0", "]", ",", ":", "]", "\n", "# image[img_pos[1], img_pos[0]] = 0", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.add_rgb_to_points": [[431, 439], ["box_np_ops.lidar_to_camera", "box_np_ops.project_to_image", "numpy.zeros", "box_np_ops._add_rgb_to_points_kernel", "numpy.ones", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.lidar_to_camera", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.project_to_image", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops._add_rgb_to_points_kernel"], ["", "", "", "", "def", "add_rgb_to_points", "(", "points", ",", "image", ",", "rect", ",", "Trv2c", ",", "P2", ",", "mean_size", "=", "[", "5", ",", "5", "]", ")", ":", "\n", "    ", "kernel", "=", "np", ".", "ones", "(", "mean_size", ",", "np", ".", "float32", ")", "/", "np", ".", "prod", "(", "mean_size", ")", "\n", "# image = cv2.filter2D(image, -1, kernel)", "\n", "points_cam", "=", "lidar_to_camera", "(", "points", "[", ":", ",", ":", "3", "]", ",", "rect", ",", "Trv2c", ")", "\n", "points_2d", "=", "project_to_image", "(", "points_cam", ",", "P2", ")", "\n", "points_rgb", "=", "np", ".", "zeros", "(", "[", "points_cam", ".", "shape", "[", "0", "]", ",", "3", "]", ",", "dtype", "=", "points", ".", "dtype", ")", "\n", "_add_rgb_to_points_kernel", "(", "points_2d", ",", "image", ",", "points_rgb", ")", "\n", "return", "points_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.project_to_image": [[441, 448], ["list", "numpy.concatenate", "numpy.ones"], "function", ["None"], ["", "def", "project_to_image", "(", "points_3d", ",", "proj_mat", ")", ":", "\n", "    ", "points_shape", "=", "list", "(", "points_3d", ".", "shape", ")", "\n", "points_shape", "[", "-", "1", "]", "=", "1", "\n", "points_4", "=", "np", ".", "concatenate", "(", "[", "points_3d", ",", "np", ".", "ones", "(", "points_shape", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "point_2d", "=", "points_4", "@", "proj_mat", ".", "T", "\n", "point_2d_res", "=", "point_2d", "[", "...", ",", ":", "2", "]", "/", "point_2d", "[", "...", ",", "2", ":", "3", "]", "\n", "return", "point_2d_res", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.camera_to_lidar": [[450, 456], ["list", "numpy.concatenate", "numpy.linalg.inv", "numpy.ones"], "function", ["None"], ["", "def", "camera_to_lidar", "(", "points", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "points_shape", "=", "list", "(", "points", ".", "shape", "[", "0", ":", "-", "1", "]", ")", "\n", "if", "points", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "        ", "points", "=", "np", ".", "concatenate", "(", "[", "points", ",", "np", ".", "ones", "(", "points_shape", "+", "[", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "lidar_points", "=", "points", "@", "np", ".", "linalg", ".", "inv", "(", "(", "r_rect", "@", "velo2cam", ")", ".", "T", ")", "\n", "return", "lidar_points", "[", "...", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.lidar_to_camera": [[458, 464], ["list", "numpy.concatenate", "numpy.ones"], "function", ["None"], ["", "def", "lidar_to_camera", "(", "points", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "points_shape", "=", "list", "(", "points", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "if", "points", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "        ", "points", "=", "np", ".", "concatenate", "(", "[", "points", ",", "np", ".", "ones", "(", "points_shape", "+", "[", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "camera_points", "=", "points", "@", "(", "r_rect", "@", "velo2cam", ")", ".", "T", "\n", "return", "camera_points", "[", "...", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.box_camera_to_lidar": [[466, 472], ["box_np_ops.camera_to_lidar", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.camera_to_lidar"], ["", "def", "box_camera_to_lidar", "(", "data", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "xyz", "=", "data", "[", ":", ",", "0", ":", "3", "]", "\n", "l", ",", "h", ",", "w", "=", "data", "[", ":", ",", "3", ":", "4", "]", ",", "data", "[", ":", ",", "4", ":", "5", "]", ",", "data", "[", ":", ",", "5", ":", "6", "]", "\n", "r", "=", "data", "[", ":", ",", "6", ":", "7", "]", "\n", "xyz_lidar", "=", "camera_to_lidar", "(", "xyz", ",", "r_rect", ",", "velo2cam", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "xyz_lidar", ",", "w", ",", "l", ",", "h", ",", "r", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.box_lidar_to_camera": [[474, 480], ["box_np_ops.lidar_to_camera", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.lidar_to_camera"], ["", "def", "box_lidar_to_camera", "(", "data", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "xyz_lidar", "=", "data", "[", ":", ",", "0", ":", "3", "]", "\n", "w", ",", "l", ",", "h", "=", "data", "[", ":", ",", "3", ":", "4", "]", ",", "data", "[", ":", ",", "4", ":", "5", "]", ",", "data", "[", ":", ",", "5", ":", "6", "]", "\n", "r", "=", "data", "[", ":", ",", "6", ":", "7", "]", "\n", "xyz", "=", "lidar_to_camera", "(", "xyz_lidar", ",", "r_rect", ",", "velo2cam", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "xyz", ",", "l", ",", "h", ",", "w", ",", "r", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.remove_outside_points": [[482, 494], ["box_np_ops.projection_matrix_to_CRT_kitti", "box_np_ops.get_frustum", "box_np_ops.camera_to_lidar", "box_np_ops.corner_to_surfaces_3d_jit", "det3d.core.bbox.geometry.points_in_convex_polygon_3d_jit", "numpy.linalg.inv", "det3d.core.bbox.geometry.points_in_convex_polygon_3d_jit.reshape"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.projection_matrix_to_CRT_kitti", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.get_frustum", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.camera_to_lidar", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corner_to_surfaces_3d_jit", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.points_in_convex_polygon_3d_jit"], ["", "def", "remove_outside_points", "(", "points", ",", "rect", ",", "Trv2c", ",", "P2", ",", "image_shape", ")", ":", "\n", "# 5x faster than remove_outside_points_v1(2ms vs 10ms)", "\n", "    ", "C", ",", "R", ",", "T", "=", "projection_matrix_to_CRT_kitti", "(", "P2", ")", "\n", "image_bbox", "=", "[", "0", ",", "0", ",", "image_shape", "[", "1", "]", ",", "image_shape", "[", "0", "]", "]", "\n", "frustum", "=", "get_frustum", "(", "image_bbox", ",", "C", ")", "\n", "frustum", "-=", "T", "\n", "frustum", "=", "np", ".", "linalg", ".", "inv", "(", "R", ")", "@", "frustum", ".", "T", "\n", "frustum", "=", "camera_to_lidar", "(", "frustum", ".", "T", ",", "rect", ",", "Trv2c", ")", "\n", "frustum_surfaces", "=", "corner_to_surfaces_3d_jit", "(", "frustum", "[", "np", ".", "newaxis", ",", "...", "]", ")", "\n", "indices", "=", "points_in_convex_polygon_3d_jit", "(", "points", "[", ":", ",", ":", "3", "]", ",", "frustum_surfaces", ")", "\n", "points", "=", "points", "[", "indices", ".", "reshape", "(", "[", "-", "1", "]", ")", "]", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.iou_jit": [[496, 536], ["numba.jit", "numpy.zeros", "range", "range", "min", "max", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "iou_jit", "(", "boxes", ",", "query_boxes", ",", "eps", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"calculate box iou. note that jit version runs 2x faster than cython in\n    my machine!\n    Parameters\n    ----------\n    boxes: (N, 4) ndarray of float\n    query_boxes: (K, 4) ndarray of float\n    Returns\n    -------\n    overlaps: (N, K) ndarray of overlap between boxes and query_boxes\n    \"\"\"", "\n", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "box_area", "=", "(", "query_boxes", "[", "k", ",", "2", "]", "-", "query_boxes", "[", "k", ",", "0", "]", "+", "eps", ")", "*", "(", "\n", "query_boxes", "[", "k", ",", "3", "]", "-", "query_boxes", "[", "k", ",", "1", "]", "+", "eps", "\n", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "            ", "iw", "=", "(", "\n", "min", "(", "boxes", "[", "n", ",", "2", "]", ",", "query_boxes", "[", "k", ",", "2", "]", ")", "\n", "-", "max", "(", "boxes", "[", "n", ",", "0", "]", ",", "query_boxes", "[", "k", ",", "0", "]", ")", "\n", "+", "eps", "\n", ")", "\n", "if", "iw", ">", "0", ":", "\n", "                ", "ih", "=", "(", "\n", "min", "(", "boxes", "[", "n", ",", "3", "]", ",", "query_boxes", "[", "k", ",", "3", "]", ")", "\n", "-", "max", "(", "boxes", "[", "n", ",", "1", "]", ",", "query_boxes", "[", "k", ",", "1", "]", ")", "\n", "+", "eps", "\n", ")", "\n", "if", "ih", ">", "0", ":", "\n", "                    ", "ua", "=", "(", "\n", "(", "boxes", "[", "n", ",", "2", "]", "-", "boxes", "[", "n", ",", "0", "]", "+", "eps", ")", "\n", "*", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "1", "]", "+", "eps", ")", "\n", "+", "box_area", "\n", "-", "iw", "*", "ih", "\n", ")", "\n", "overlaps", "[", "n", ",", "k", "]", "=", "iw", "*", "ih", "/", "ua", "\n", "", "", "", "", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.iou_3d_jit": [[538, 589], ["numba.jit", "numpy.zeros", "range", "range", "min", "max", "min", "max", "float", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "iou_3d_jit", "(", "boxes", ",", "query_boxes", ",", "add1", "=", "True", ")", ":", "\n", "    ", "\"\"\"calculate box iou3d,\n    ----------\n    boxes: (N, 6) ndarray of float\n    query_boxes: (K, 6) ndarray of float\n    Returns\n    -------\n    overlaps: (N, K) ndarray of overlap between boxes and query_boxes\n    \"\"\"", "\n", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "if", "add1", ":", "\n", "        ", "add1", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "add1", "=", "0.0", "\n", "", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "box_area", "=", "(", "\n", "(", "query_boxes", "[", "k", ",", "3", "]", "-", "query_boxes", "[", "k", ",", "0", "]", "+", "add1", ")", "\n", "*", "(", "query_boxes", "[", "k", ",", "4", "]", "-", "query_boxes", "[", "k", ",", "1", "]", "+", "add1", ")", "\n", "*", "(", "query_boxes", "[", "k", ",", "5", "]", "-", "query_boxes", "[", "k", ",", "2", "]", "+", "add1", ")", "\n", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "            ", "iw", "=", "(", "\n", "min", "(", "boxes", "[", "n", ",", "3", "]", ",", "query_boxes", "[", "k", ",", "3", "]", ")", "\n", "-", "max", "(", "boxes", "[", "n", ",", "0", "]", ",", "query_boxes", "[", "k", ",", "0", "]", ")", "\n", "+", "add1", "\n", ")", "\n", "if", "iw", ">", "0", ":", "\n", "                ", "ih", "=", "(", "\n", "min", "(", "boxes", "[", "n", ",", "4", "]", ",", "query_boxes", "[", "k", ",", "4", "]", ")", "\n", "-", "max", "(", "boxes", "[", "n", ",", "1", "]", ",", "query_boxes", "[", "k", ",", "1", "]", ")", "\n", "+", "add1", "\n", ")", "\n", "if", "ih", ">", "0", ":", "\n", "                    ", "il", "=", "(", "\n", "min", "(", "boxes", "[", "n", ",", "5", "]", ",", "query_boxes", "[", "k", ",", "5", "]", ")", "\n", "-", "max", "(", "boxes", "[", "n", ",", "2", "]", ",", "query_boxes", "[", "k", ",", "2", "]", ")", "\n", "+", "add1", "\n", ")", "\n", "if", "il", ">", "0", ":", "\n", "                        ", "ua", "=", "float", "(", "\n", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "0", "]", "+", "add1", ")", "\n", "*", "(", "boxes", "[", "n", ",", "4", "]", "-", "boxes", "[", "n", ",", "1", "]", "+", "add1", ")", "\n", "*", "(", "boxes", "[", "n", ",", "5", "]", "-", "boxes", "[", "n", ",", "2", "]", "+", "add1", ")", "\n", "+", "box_area", "\n", "-", "iw", "*", "ih", "*", "il", "\n", ")", "\n", "overlaps", "[", "n", ",", "k", "]", "=", "iw", "*", "ih", "*", "il", "/", "ua", "\n", "", "", "", "", "", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.iou_nd_jit": [[591, 639], ["numba.jit", "numpy.zeros", "numpy.zeros", "range", "range", "range", "range", "range", "range", "float", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "iou_nd_jit", "(", "boxes", ",", "query_boxes", ",", "add1", "=", "True", ")", ":", "\n", "    ", "\"\"\"calculate box iou nd, 2x slower than iou_jit.\n    ----------\n    boxes: (N, ndim * 2) ndarray of float\n    query_boxes: (K, ndim * 2) ndarray of float\n    Returns\n    -------\n    overlaps: (N, K) ndarray of overlap between boxes and query_boxes\n    \"\"\"", "\n", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "ndim", "=", "boxes", ".", "shape", "[", "1", "]", "//", "2", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "side_lengths", "=", "np", ".", "zeros", "(", "(", "ndim", ",", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "if", "add1", ":", "\n", "        ", "add1", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "add1", "=", "0.0", "\n", "", "invalid", "=", "False", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "qbox_area", "=", "query_boxes", "[", "k", ",", "ndim", "]", "-", "query_boxes", "[", "k", ",", "0", "]", "+", "add1", "\n", "for", "i", "in", "range", "(", "1", ",", "ndim", ")", ":", "\n", "            ", "qbox_area", "*=", "query_boxes", "[", "k", ",", "ndim", "+", "i", "]", "-", "query_boxes", "[", "k", ",", "i", "]", "+", "add1", "\n", "", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "            ", "invalid", "=", "False", "\n", "for", "i", "in", "range", "(", "ndim", ")", ":", "\n", "                ", "side_length", "=", "(", "\n", "min", "(", "boxes", "[", "n", ",", "i", "+", "ndim", "]", ",", "query_boxes", "[", "k", ",", "i", "+", "ndim", "]", ")", "\n", "-", "max", "(", "boxes", "[", "n", ",", "i", "]", ",", "query_boxes", "[", "k", ",", "i", "]", ")", "\n", "+", "add1", "\n", ")", "\n", "if", "side_length", "<=", "0", ":", "\n", "                    ", "invalid", "=", "True", "\n", "break", "\n", "", "side_lengths", "[", "i", "]", "=", "side_length", "\n", "", "if", "not", "invalid", ":", "\n", "                ", "box_area", "=", "boxes", "[", "n", ",", "ndim", "]", "-", "boxes", "[", "n", ",", "0", "]", "+", "add1", "\n", "for", "i", "in", "range", "(", "1", ",", "ndim", ")", ":", "\n", "                    ", "box_area", "*=", "boxes", "[", "n", ",", "ndim", "+", "i", "]", "-", "boxes", "[", "n", ",", "i", "]", "+", "add1", "\n", "", "inter", "=", "side_lengths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "ndim", ")", ":", "\n", "                    ", "inter", "*=", "side_lengths", "[", "i", "]", "\n", "# inter = np.prod(side_lengths)", "\n", "", "ua", "=", "float", "(", "box_area", "+", "qbox_area", "-", "inter", ")", "\n", "overlaps", "[", "n", ",", "k", "]", "=", "inter", "/", "ua", "\n", "\n", "", "", "", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.points_in_rbbox": [[641, 648], ["box_np_ops.center_to_corner_box3d", "box_np_ops.corner_to_surfaces_3d", "det3d.core.bbox.geometry.points_in_convex_polygon_3d_jit"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corner_to_surfaces_3d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.points_in_convex_polygon_3d_jit"], ["", "def", "points_in_rbbox", "(", "points", ",", "rbbox", ",", "z_axis", "=", "2", ",", "origin", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ":", "\n", "    ", "rbbox_corners", "=", "center_to_corner_box3d", "(", "\n", "rbbox", "[", ":", ",", ":", "3", "]", ",", "rbbox", "[", ":", ",", "3", ":", "6", "]", ",", "rbbox", "[", ":", ",", "-", "1", "]", ",", "origin", "=", "origin", ",", "axis", "=", "z_axis", "\n", ")", "\n", "surfaces", "=", "corner_to_surfaces_3d", "(", "rbbox_corners", ")", "\n", "indices", "=", "points_in_convex_polygon_3d_jit", "(", "points", "[", ":", ",", ":", "3", "]", ",", "surfaces", ")", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corner_to_surfaces_3d": [[650, 671], ["numpy.array().transpose", "numpy.array"], "function", ["None"], ["", "def", "corner_to_surfaces_3d", "(", "corners", ")", ":", "\n", "    ", "\"\"\"convert 3d box corners from corner function above\n    to surfaces that normal vectors all direct to internal.\n\n    Args:\n        corners (float array, [N, 8, 3]): 3d box corners.\n    Returns:\n        surfaces (float array, [N, 6, 4, 3]):\n    \"\"\"", "\n", "# box_corners: [N, 8, 3], must from corner functions in this module", "\n", "surfaces", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "corners", "[", ":", ",", "0", "]", ",", "corners", "[", ":", ",", "1", "]", ",", "corners", "[", ":", ",", "2", "]", ",", "corners", "[", ":", ",", "3", "]", "]", ",", "\n", "[", "corners", "[", ":", ",", "7", "]", ",", "corners", "[", ":", ",", "6", "]", ",", "corners", "[", ":", ",", "5", "]", ",", "corners", "[", ":", ",", "4", "]", "]", ",", "\n", "[", "corners", "[", ":", ",", "0", "]", ",", "corners", "[", ":", ",", "3", "]", ",", "corners", "[", ":", ",", "7", "]", ",", "corners", "[", ":", ",", "4", "]", "]", ",", "\n", "[", "corners", "[", ":", ",", "1", "]", ",", "corners", "[", ":", ",", "5", "]", ",", "corners", "[", ":", ",", "6", "]", ",", "corners", "[", ":", ",", "2", "]", "]", ",", "\n", "[", "corners", "[", ":", ",", "0", "]", ",", "corners", "[", ":", ",", "4", "]", ",", "corners", "[", ":", ",", "5", "]", ",", "corners", "[", ":", ",", "1", "]", "]", ",", "\n", "[", "corners", "[", ":", ",", "3", "]", ",", "corners", "[", ":", ",", "2", "]", ",", "corners", "[", ":", ",", "6", "]", ",", "corners", "[", ":", ",", "7", "]", "]", ",", "\n", "]", "\n", ")", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", "\n", "return", "surfaces", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corner_to_surfaces_3d_jit": [[673, 694], ["numba.jit", "numpy.zeros", "numpy.array().reshape", "range", "range", "numpy.array", "range"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "corner_to_surfaces_3d_jit", "(", "corners", ")", ":", "\n", "    ", "\"\"\"convert 3d box corners from corner function above\n    to surfaces that normal vectors all direct to internal.\n\n    Args:\n        corners (float array, [N, 8, 3]): 3d box corners.\n    Returns:\n        surfaces (float array, [N, 6, 4, 3]):\n    \"\"\"", "\n", "# box_corners: [N, 8, 3], must from corner functions in this module", "\n", "num_boxes", "=", "corners", ".", "shape", "[", "0", "]", "\n", "surfaces", "=", "np", ".", "zeros", "(", "(", "num_boxes", ",", "6", ",", "4", ",", "3", ")", ",", "dtype", "=", "corners", ".", "dtype", ")", "\n", "corner_idxes", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "1", ",", "2", ",", "3", ",", "7", ",", "6", ",", "5", ",", "4", ",", "0", ",", "3", ",", "7", ",", "4", ",", "1", ",", "5", ",", "6", ",", "2", ",", "0", ",", "4", ",", "5", ",", "1", ",", "3", ",", "2", ",", "6", ",", "7", "]", "\n", ")", ".", "reshape", "(", "6", ",", "4", ")", "\n", "for", "i", "in", "range", "(", "num_boxes", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "6", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "4", ")", ":", "\n", "                ", "surfaces", "[", "i", ",", "j", ",", "k", "]", "=", "corners", "[", "i", ",", "corner_idxes", "[", "j", ",", "k", "]", "]", "\n", "", "", "", "return", "surfaces", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.assign_label_to_voxel": [[696, 715], ["numpy.array", "numpy.array", "box_np_ops.center_to_corner_box3d", "box_np_ops.corner_to_surfaces_3d", "det3d.core.bbox.geometry.points_in_convex_polygon_3d_jit", "numpy.any().astype", "numpy.any"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corner_to_surfaces_3d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.points_in_convex_polygon_3d_jit"], ["", "def", "assign_label_to_voxel", "(", "gt_boxes", ",", "coors", ",", "voxel_size", ",", "coors_range", ")", ":", "\n", "    ", "\"\"\"assign a 0/1 label to each voxel based on whether\n    the center of voxel is in gt_box. LIDAR.\n    \"\"\"", "\n", "voxel_size", "=", "np", ".", "array", "(", "voxel_size", ",", "dtype", "=", "gt_boxes", ".", "dtype", ")", "\n", "coors_range", "=", "np", ".", "array", "(", "coors_range", ",", "dtype", "=", "gt_boxes", ".", "dtype", ")", "\n", "shift", "=", "coors_range", "[", ":", "3", "]", "\n", "voxel_origins", "=", "coors", "[", ":", ",", ":", ":", "-", "1", "]", "*", "voxel_size", "+", "shift", "\n", "voxel_centers", "=", "voxel_origins", "+", "voxel_size", "*", "0.5", "\n", "gt_box_corners", "=", "center_to_corner_box3d", "(", "\n", "gt_boxes", "[", ":", ",", ":", "3", "]", "-", "voxel_size", "*", "0.5", ",", "\n", "gt_boxes", "[", ":", ",", "3", ":", "6", "]", "+", "voxel_size", ",", "\n", "gt_boxes", "[", ":", ",", "6", "]", ",", "\n", "origin", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "\n", "axis", "=", "2", ",", "\n", ")", "\n", "gt_surfaces", "=", "corner_to_surfaces_3d", "(", "gt_box_corners", ")", "\n", "ret", "=", "points_in_convex_polygon_3d_jit", "(", "voxel_centers", ",", "gt_surfaces", ")", "\n", "return", "np", ".", "any", "(", "ret", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.assign_label_to_voxel_v3": [[717, 740], ["numpy.array", "numpy.array", "numpy.concatenate", "box_np_ops.minmax_to_corner_3d", "box_np_ops.center_to_corner_box3d", "box_np_ops.corner_to_surfaces_3d", "minmax_to_corner_3d.reshape", "det3d.core.bbox.geometry.points_in_convex_polygon_3d_jit", "ret.reshape.reshape", "ret.reshape.any().any().astype", "ret.reshape.any().any", "ret.reshape.any"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.minmax_to_corner_3d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corner_to_surfaces_3d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.points_in_convex_polygon_3d_jit"], ["", "def", "assign_label_to_voxel_v3", "(", "gt_boxes", ",", "coors", ",", "voxel_size", ",", "coors_range", ")", ":", "\n", "    ", "\"\"\"assign a 0/1 label to each voxel based on whether\n    the center of voxel is in gt_box. LIDAR.\n    \"\"\"", "\n", "voxel_size", "=", "np", ".", "array", "(", "voxel_size", ",", "dtype", "=", "gt_boxes", ".", "dtype", ")", "\n", "coors_range", "=", "np", ".", "array", "(", "coors_range", ",", "dtype", "=", "gt_boxes", ".", "dtype", ")", "\n", "shift", "=", "coors_range", "[", ":", "3", "]", "\n", "voxel_origins", "=", "coors", "[", ":", ",", ":", ":", "-", "1", "]", "*", "voxel_size", "+", "shift", "\n", "voxel_maxes", "=", "voxel_origins", "+", "voxel_size", "\n", "voxel_minmax", "=", "np", ".", "concatenate", "(", "[", "voxel_origins", ",", "voxel_maxes", "]", ",", "axis", "=", "-", "1", ")", "\n", "voxel_corners", "=", "minmax_to_corner_3d", "(", "voxel_minmax", ")", "\n", "gt_box_corners", "=", "center_to_corner_box3d", "(", "\n", "gt_boxes", "[", ":", ",", ":", "3", "]", ",", "\n", "gt_boxes", "[", ":", ",", "3", ":", "6", "]", ",", "\n", "gt_boxes", "[", ":", ",", "6", "]", ",", "\n", "origin", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "\n", "axis", "=", "2", ",", "\n", ")", "\n", "gt_surfaces", "=", "corner_to_surfaces_3d", "(", "gt_box_corners", ")", "\n", "voxel_corners_flat", "=", "voxel_corners", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", "\n", "ret", "=", "points_in_convex_polygon_3d_jit", "(", "voxel_corners_flat", ",", "gt_surfaces", ")", "\n", "ret", "=", "ret", ".", "reshape", "(", "[", "-", "1", ",", "8", ",", "ret", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "return", "ret", ".", "any", "(", "-", "1", ")", ".", "any", "(", "-", "1", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.image_box_region_area": [[742, 767], ["numpy.zeros"], "function", ["None"], ["", "def", "image_box_region_area", "(", "img_cumsum", ",", "bbox", ")", ":", "\n", "    ", "\"\"\"check a 2d voxel is contained by a box. used to filter empty\n    anchors.\n    Summed-area table algorithm:\n    ==> W\n    ------------------\n    |      |         |\n    |------A---------B\n    |      |         |\n    |      |         |\n    |----- C---------D\n    Iabcd = ID-IB-IC+IA\n    Args:\n        img_cumsum: [M, H, W](yx) cumsumed image.\n        bbox: [N, 4](xyxy) bounding box,\n    \"\"\"", "\n", "N", "=", "bbox", ".", "shape", "[", "0", "]", "\n", "M", "=", "img_cumsum", ".", "shape", "[", "0", "]", "\n", "ret", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", "]", ",", "dtype", "=", "img_cumsum", ".", "dtype", ")", "\n", "ID", "=", "img_cumsum", "[", ":", ",", "bbox", "[", ":", ",", "3", "]", ",", "bbox", "[", ":", ",", "2", "]", "]", "\n", "IA", "=", "img_cumsum", "[", ":", ",", "bbox", "[", ":", ",", "1", "]", ",", "bbox", "[", ":", ",", "0", "]", "]", "\n", "IB", "=", "img_cumsum", "[", ":", ",", "bbox", "[", ":", ",", "3", "]", ",", "bbox", "[", ":", ",", "0", "]", "]", "\n", "IC", "=", "img_cumsum", "[", ":", ",", "bbox", "[", ":", ",", "1", "]", ",", "bbox", "[", ":", ",", "2", "]", "]", "\n", "ret", "=", "ID", "-", "IB", "-", "IC", "+", "IA", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.get_minimum_bounding_box_bv": [[769, 785], ["points[].max", "points[].max", "points[].min", "points[].min", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.array", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor"], "function", ["None"], ["", "def", "get_minimum_bounding_box_bv", "(", "points", ",", "voxel_size", ",", "bound", ",", "downsample", "=", "8", ",", "margin", "=", "1.6", ")", ":", "\n", "    ", "x_vsize", "=", "voxel_size", "[", "0", "]", "\n", "y_vsize", "=", "voxel_size", "[", "1", "]", "\n", "max_x", "=", "points", "[", ":", ",", "0", "]", ".", "max", "(", ")", "\n", "max_y", "=", "points", "[", ":", ",", "1", "]", ".", "max", "(", ")", "\n", "min_x", "=", "points", "[", ":", ",", "0", "]", ".", "min", "(", ")", "\n", "min_y", "=", "points", "[", ":", ",", "1", "]", ".", "min", "(", ")", "\n", "max_x", "=", "np", ".", "floor", "(", "max_x", "/", "(", "x_vsize", "*", "downsample", ")", "+", "1", ")", "*", "(", "x_vsize", "*", "downsample", ")", "\n", "max_y", "=", "np", ".", "floor", "(", "max_y", "/", "(", "y_vsize", "*", "downsample", ")", "+", "1", ")", "*", "(", "y_vsize", "*", "downsample", ")", "\n", "min_x", "=", "np", ".", "floor", "(", "min_x", "/", "(", "x_vsize", "*", "downsample", ")", ")", "*", "(", "x_vsize", "*", "downsample", ")", "\n", "min_y", "=", "np", ".", "floor", "(", "min_y", "/", "(", "y_vsize", "*", "downsample", ")", ")", "*", "(", "y_vsize", "*", "downsample", ")", "\n", "max_x", "=", "np", ".", "minimum", "(", "max_x", "+", "margin", ",", "bound", "[", "2", "]", ")", "\n", "max_y", "=", "np", ".", "minimum", "(", "max_y", "+", "margin", ",", "bound", "[", "3", "]", ")", "\n", "min_x", "=", "np", ".", "maximum", "(", "min_x", "-", "margin", ",", "bound", "[", "0", "]", ")", "\n", "min_y", "=", "np", ".", "maximum", "(", "min_y", "-", "margin", ",", "bound", "[", "1", "]", ")", "\n", "return", "np", ".", "array", "(", "[", "min_x", ",", "min_y", ",", "max_x", ",", "max_y", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.box3d_to_bbox": [[787, 798], ["box_np_ops.box_lidar_to_camera", "box_np_ops.center_to_corner_box3d", "box_np_ops.project_to_image", "numpy.min", "numpy.max", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.box_lidar_to_camera", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.project_to_image"], ["", "def", "box3d_to_bbox", "(", "box3d", ",", "rect", ",", "Trv2c", ",", "P2", ")", ":", "\n", "    ", "box3d_to_cam", "=", "box_lidar_to_camera", "(", "box3d", ",", "rect", ",", "Trv2c", ")", "\n", "box_corners", "=", "center_to_corner_box3d", "(", "\n", "box3d", "[", ":", ",", ":", "3", "]", ",", "box3d", "[", ":", ",", "3", ":", "6", "]", ",", "box3d", "[", ":", ",", "6", "]", ",", "[", "0.5", ",", "1.0", ",", "0.5", "]", ",", "axis", "=", "1", "\n", ")", "\n", "box_corners_in_image", "=", "project_to_image", "(", "box_corners", ",", "P2", ")", "\n", "# box_corners_in_image: [N, 8, 2]", "\n", "minxy", "=", "np", ".", "min", "(", "box_corners_in_image", ",", "axis", "=", "1", ")", "\n", "maxxy", "=", "np", ".", "max", "(", "box_corners_in_image", ",", "axis", "=", "1", ")", "\n", "bbox", "=", "np", ".", "concatenate", "(", "[", "minxy", ",", "maxxy", "]", ",", "axis", "=", "1", ")", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.change_box3d_center_": [[800, 804], ["numpy.array", "numpy.array"], "function", ["None"], ["", "def", "change_box3d_center_", "(", "box3d", ",", "src", ",", "dst", ")", ":", "\n", "    ", "dst", "=", "np", ".", "array", "(", "dst", ",", "dtype", "=", "box3d", ".", "dtype", ")", "\n", "src", "=", "np", ".", "array", "(", "src", ",", "dtype", "=", "box3d", ".", "dtype", ")", "\n", "box3d", "[", "...", ",", ":", "3", "]", "+=", "box3d", "[", "...", ",", "3", ":", "6", "]", "*", "(", "dst", "-", "src", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry._points_count_convex_polygon_3d_jit": [[5, 41], ["numpy.full", "range", "range", "range"], "function", ["None"], ["@", "numba", ".", "njit", "\n", "def", "_points_count_convex_polygon_3d_jit", "(", "\n", "points", ",", "polygon_surfaces", ",", "normal_vec", ",", "d", ",", "num_surfaces", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"count points in 3d convex polygons.\n    Args:\n        points: [num_points, 3] array.\n        polygon_surfaces: [num_polygon, max_num_surfaces,\n            max_num_points_of_surface, 3]\n            array. all surfaces' normal vector must direct to internal.\n            max_num_points_of_surface must at least 3.\n        num_surfaces: [num_polygon] array. indicate how many surfaces\n            a polygon contain\n    Returns:\n        [num_polygon] array.\n    \"\"\"", "\n", "max_num_surfaces", ",", "max_num_points_of_surface", "=", "polygon_surfaces", ".", "shape", "[", "1", ":", "3", "]", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "num_polygons", "=", "polygon_surfaces", ".", "shape", "[", "0", "]", "\n", "ret", "=", "np", ".", "full", "(", "(", "num_polygons", ",", ")", ",", "num_points", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "sign", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_points", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_polygons", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "max_num_surfaces", ")", ":", "\n", "                ", "if", "k", ">", "num_surfaces", "[", "j", "]", ":", "\n", "                    ", "break", "\n", "", "sign", "=", "(", "\n", "points", "[", "i", ",", "0", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "0", "]", "\n", "+", "points", "[", "i", ",", "1", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "1", "]", "\n", "+", "points", "[", "i", ",", "2", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "2", "]", "\n", "+", "d", "[", "j", ",", "k", "]", "\n", ")", "\n", "if", "sign", ">=", "0", ":", "\n", "                    ", "ret", "[", "j", "]", "-=", "1", "\n", "break", "\n", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.points_count_convex_polygon_3d_jit": [[43, 66], ["geometry.surface_equ_3d_jitv2", "geometry._points_count_convex_polygon_3d_jit", "numpy.full"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.surface_equ_3d_jitv2", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry._points_count_convex_polygon_3d_jit"], ["", "def", "points_count_convex_polygon_3d_jit", "(", "points", ",", "polygon_surfaces", ",", "num_surfaces", "=", "None", ")", ":", "\n", "    ", "\"\"\"check points is in 3d convex polygons.\n    Args:\n        points: [num_points, 3] array.\n        polygon_surfaces: [num_polygon, max_num_surfaces,\n            max_num_points_of_surface, 3]\n            array. all surfaces' normal vector must direct to internal.\n            max_num_points_of_surface must at least 3.\n        num_surfaces: [num_polygon] array. indicate how many surfaces\n            a polygon contain\n    Returns:\n        [num_polygon] array.\n    \"\"\"", "\n", "max_num_surfaces", ",", "max_num_points_of_surface", "=", "polygon_surfaces", ".", "shape", "[", "1", ":", "3", "]", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "num_polygons", "=", "polygon_surfaces", ".", "shape", "[", "0", "]", "\n", "if", "num_surfaces", "is", "None", ":", "\n", "        ", "num_surfaces", "=", "np", ".", "full", "(", "(", "num_polygons", ",", ")", ",", "9999999", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "normal_vec", ",", "d", "=", "surface_equ_3d_jitv2", "(", "polygon_surfaces", "[", ":", ",", ":", ",", ":", "3", ",", ":", "]", ")", "\n", "# normal_vec: [num_polygon, max_num_surfaces, 3]", "\n", "# d: [num_polygon, max_num_surfaces]", "\n", "return", "_points_count_convex_polygon_3d_jit", "(", "\n", "points", ",", "polygon_surfaces", ",", "normal_vec", ",", "d", ",", "num_surfaces", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.is_line_segment_intersection_jit": [[69, 99], ["numpy.zeros", "range", "range"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "is_line_segment_intersection_jit", "(", "lines1", ",", "lines2", ")", ":", "\n", "    ", "\"\"\"check if line segments1 and line segments2 have cross point\n\n    Args:\n        lines1 (float, [N, 2, 2]): [description]\n        lines2 (float, [M, 2, 2]): [description]\n\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "\n", "# Return true if line segments AB and CD intersect", "\n", "N", "=", "lines1", ".", "shape", "[", "0", "]", "\n", "M", "=", "lines2", ".", "shape", "[", "0", "]", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "N", ",", "M", ")", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "M", ")", ":", "\n", "            ", "A", "=", "lines1", "[", "i", ",", "0", "]", "\n", "B", "=", "lines1", "[", "i", ",", "1", "]", "\n", "C", "=", "lines2", "[", "j", ",", "0", "]", "\n", "D", "=", "lines2", "[", "j", ",", "1", "]", "\n", "acd", "=", "(", "D", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "A", "[", "0", "]", ")", ">", "(", "C", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "A", "[", "0", "]", ")", "\n", "bcd", "=", "(", "D", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "B", "[", "0", "]", ")", ">", "(", "C", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "B", "[", "0", "]", ")", "\n", "if", "acd", "!=", "bcd", ":", "\n", "                ", "abc", "=", "(", "C", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "B", "[", "0", "]", "-", "A", "[", "0", "]", ")", ">", "(", "B", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "A", "[", "0", "]", ")", "\n", "abd", "=", "(", "D", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "B", "[", "0", "]", "-", "A", "[", "0", "]", ")", ">", "(", "B", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "A", "[", "0", "]", ")", "\n", "if", "abc", "!=", "abd", ":", "\n", "                    ", "ret", "[", "i", ",", "j", "]", "=", "True", "\n", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.line_segment_intersection": [[101, 128], ["None"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "line_segment_intersection", "(", "line1", ",", "line2", ",", "intersection", ")", ":", "\n", "    ", "A", "=", "line1", "[", "0", "]", "\n", "B", "=", "line1", "[", "1", "]", "\n", "C", "=", "line2", "[", "0", "]", "\n", "D", "=", "line2", "[", "1", "]", "\n", "BA0", "=", "B", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "BA1", "=", "B", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "DA0", "=", "D", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "CA0", "=", "C", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "DA1", "=", "D", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "CA1", "=", "C", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "acd", "=", "DA1", "*", "CA0", ">", "CA1", "*", "DA0", "\n", "bcd", "=", "(", "D", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "B", "[", "0", "]", ")", ">", "(", "C", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "B", "[", "0", "]", ")", "\n", "if", "acd", "!=", "bcd", ":", "\n", "        ", "abc", "=", "CA1", "*", "BA0", ">", "BA1", "*", "CA0", "\n", "abd", "=", "DA1", "*", "BA0", ">", "BA1", "*", "DA0", "\n", "if", "abc", "!=", "abd", ":", "\n", "            ", "DC0", "=", "D", "[", "0", "]", "-", "C", "[", "0", "]", "\n", "DC1", "=", "D", "[", "1", "]", "-", "C", "[", "1", "]", "\n", "ABBA", "=", "A", "[", "0", "]", "*", "B", "[", "1", "]", "-", "B", "[", "0", "]", "*", "A", "[", "1", "]", "\n", "CDDC", "=", "C", "[", "0", "]", "*", "D", "[", "1", "]", "-", "D", "[", "0", "]", "*", "C", "[", "1", "]", "\n", "DH", "=", "BA1", "*", "DC0", "-", "BA0", "*", "DC1", "\n", "intersection", "[", "0", "]", "=", "(", "ABBA", "*", "DC0", "-", "BA0", "*", "CDDC", ")", "/", "DH", "\n", "intersection", "[", "1", "]", "=", "(", "ABBA", "*", "DC1", "-", "BA1", "*", "CDDC", ")", "/", "DH", "\n", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry._ccw": [[130, 134], ["None"], "function", ["None"], ["", "def", "_ccw", "(", "A", ",", "B", ",", "C", ")", ":", "\n", "    ", "return", "(", "C", "[", "...", ",", "1", "]", "-", "A", "[", "...", ",", "1", "]", ")", "*", "(", "B", "[", "...", ",", "0", "]", "-", "A", "[", "...", ",", "0", "]", ")", ">", "(", "\n", "B", "[", "...", ",", "1", "]", "-", "A", "[", "...", ",", "1", "]", "\n", ")", "*", "(", "C", "[", "...", ",", "0", "]", "-", "A", "[", "...", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.is_line_segment_cross": [[136, 146], ["numpy.logical_and", "geometry._ccw", "geometry._ccw", "geometry._ccw", "geometry._ccw"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry._ccw", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry._ccw", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry._ccw", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry._ccw"], ["", "def", "is_line_segment_cross", "(", "lines1", ",", "lines2", ")", ":", "\n", "# 10x slower than jit version with 1000-1000 random lines input.", "\n", "# lines1, [N, 2, 2]", "\n", "# lines2, [M, 2, 2]", "\n", "    ", "A", "=", "lines1", "[", ":", ",", "0", ",", ":", "]", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "B", "=", "lines1", "[", ":", ",", "1", ",", ":", "]", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "C", "=", "lines2", "[", ":", ",", "0", ",", ":", "]", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "D", "=", "lines2", "[", ":", ",", "1", ",", ":", "]", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "return", "np", ".", "logical_and", "(", "\n", "_ccw", "(", "A", ",", "C", ",", "D", ")", "!=", "_ccw", "(", "B", ",", "C", ",", "D", ")", ",", "_ccw", "(", "A", ",", "B", ",", "C", ")", "!=", "_ccw", "(", "A", ",", "B", ",", "D", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.surface_equ_3d_jit": [[149, 160], ["numba.jit", "numpy.cross", "numpy.einsum"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "False", ")", "\n", "def", "surface_equ_3d_jit", "(", "polygon_surfaces", ")", ":", "\n", "# return [a, b, c], d in ax+by+cz+d=0", "\n", "# polygon_surfaces: [num_polygon, num_surfaces, num_points_of_polygon, 3]", "\n", "    ", "surface_v", "=", "polygon_surfaces", "[", ":", ",", ":", ",", ":", "2", ",", ":", "]", "-", "polygon_surfaces", "[", ":", ",", ":", ",", "1", ":", "3", ",", ":", "]", "\n", "# normal_vec: [..., 3]", "\n", "normal_v", "=", "np", ".", "cross", "(", "surface_v", "[", ":", ",", ":", ",", "0", ",", ":", "]", ",", "surface_v", "[", ":", ",", ":", ",", "1", ",", ":", "]", ")", "\n", "# print(normal_vec.shape, points[..., 0, :].shape)", "\n", "# d = -np.inner(normal_vec, points[..., 0, :])", "\n", "d", "=", "np", ".", "einsum", "(", "\"aij, aij->ai\"", ",", "normal_v", ",", "polygon_surfaces", "[", ":", ",", ":", ",", "0", ",", ":", "]", ")", "\n", "return", "normal_vec", ",", "-", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.points_in_convex_polygon_3d_jit_v1": [[162, 201], ["numba.jit", "geometry.surface_equ_3d_jit", "numpy.ones", "range", "numpy.full", "range", "range"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.surface_equ_3d_jit"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "False", ")", "\n", "def", "points_in_convex_polygon_3d_jit_v1", "(", "points", ",", "polygon_surfaces", ",", "num_surfaces", "=", "None", ")", ":", "\n", "    ", "\"\"\"check points is in 3d convex polygons.\n    Args:\n        points: [num_points, 3] array.\n        polygon_surfaces: [num_polygon, max_num_surfaces,\n            max_num_points_of_surface, 3]\n            array. all surfaces' normal vector must direct to internal.\n            max_num_points_of_surface must at least 3.\n        num_surfaces: [num_polygon] array. indicate how many surfaces\n            a polygon contain\n    Returns:\n        [num_points, num_polygon] bool array.\n    \"\"\"", "\n", "max_num_surfaces", ",", "max_num_points_of_surface", "=", "polygon_surfaces", ".", "shape", "[", "1", ":", "3", "]", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "num_polygons", "=", "polygon_surfaces", ".", "shape", "[", "0", "]", "\n", "if", "num_surfaces", "is", "None", ":", "\n", "        ", "num_surfaces", "=", "np", ".", "full", "(", "(", "num_polygons", ",", ")", ",", "9999999", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "normal_vec", ",", "d", "=", "surface_equ_3d_jit", "(", "polygon_surfaces", "[", ":", ",", ":", ",", ":", "3", ",", ":", "]", ")", "\n", "# normal_vec: [num_polygon, max_num_surfaces, 3]", "\n", "# d: [num_polygon, max_num_surfaces]", "\n", "ret", "=", "np", ".", "ones", "(", "(", "num_points", ",", "num_polygons", ")", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "sign", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_points", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_polygons", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "max_num_surfaces", ")", ":", "\n", "                ", "if", "k", ">", "num_surfaces", "[", "j", "]", ":", "\n", "                    ", "break", "\n", "", "sign", "=", "(", "\n", "points", "[", "i", ",", "0", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "0", "]", "\n", "+", "points", "[", "i", ",", "1", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "1", "]", "\n", "+", "points", "[", "i", ",", "2", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "2", "]", "\n", "+", "d", "[", "j", ",", "k", "]", "\n", ")", "\n", "if", "sign", ">=", "0", ":", "\n", "                    ", "ret", "[", "i", ",", "j", "]", "=", "False", "\n", "break", "\n", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.surface_equ_3d": [[203, 213], ["numpy.cross", "numpy.einsum"], "function", ["None"], ["", "def", "surface_equ_3d", "(", "polygon_surfaces", ")", ":", "\n", "# return [a, b, c], d in ax+by+cz+d=0", "\n", "# polygon_surfaces: [num_polygon, num_surfaces, num_points_of_polygon, 3]", "\n", "    ", "surface_v", "=", "polygon_surfaces", "[", ":", ",", ":", ",", ":", "2", ",", ":", "]", "-", "polygon_surfaces", "[", ":", ",", ":", ",", "1", ":", "3", ",", ":", "]", "\n", "# normal_vec: [..., 3]", "\n", "normal_v", "=", "np", ".", "cross", "(", "surface_v", "[", ":", ",", ":", ",", "0", ",", ":", "]", ",", "surface_v", "[", ":", ",", ":", ",", "1", ",", ":", "]", ")", "\n", "# print(normal_vec.shape, points[..., 0, :].shape)", "\n", "# d = -np.inner(normal_vec, points[..., 0, :])", "\n", "d", "=", "np", ".", "einsum", "(", "\"aij, aij->ai\"", ",", "normal_v", ",", "polygon_surfaces", "[", ":", ",", ":", ",", "0", ",", ":", "]", ")", "\n", "return", "normal_v", ",", "-", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.points_in_convex_polygon_3d_jit": [[215, 238], ["geometry.surface_equ_3d_jitv2", "geometry._points_in_convex_polygon_3d_jit", "numpy.full"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.surface_equ_3d_jitv2", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry._points_in_convex_polygon_3d_jit"], ["", "def", "points_in_convex_polygon_3d_jit", "(", "points", ",", "polygon_surfaces", ",", "num_surfaces", "=", "None", ")", ":", "\n", "    ", "\"\"\"check points is in 3d convex polygons.\n    Args:\n        points: [num_points, 3] array.\n        polygon_surfaces: [num_polygon, max_num_surfaces,\n            max_num_points_of_surface, 3]\n            array. all surfaces' normal vector must direct to internal.\n            max_num_points_of_surface must at least 3.\n        num_surfaces: [num_polygon] array. indicate how many surfaces\n            a polygon contain\n    Returns:\n        [num_points, num_polygon] bool array.\n    \"\"\"", "\n", "max_num_surfaces", ",", "max_num_points_of_surface", "=", "polygon_surfaces", ".", "shape", "[", "1", ":", "3", "]", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "num_polygons", "=", "polygon_surfaces", ".", "shape", "[", "0", "]", "\n", "if", "num_surfaces", "is", "None", ":", "\n", "        ", "num_surfaces", "=", "np", ".", "full", "(", "(", "num_polygons", ",", ")", ",", "9999999", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "normal_vec", ",", "d", "=", "surface_equ_3d_jitv2", "(", "polygon_surfaces", "[", ":", ",", ":", ",", ":", "3", ",", ":", "]", ")", "\n", "# normal_vec: [num_polygon, max_num_surfaces, 3]", "\n", "# d: [num_polygon, max_num_surfaces]", "\n", "return", "_points_in_convex_polygon_3d_jit", "(", "\n", "points", ",", "polygon_surfaces", ",", "normal_vec", ",", "d", ",", "num_surfaces", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry._points_in_convex_polygon_3d_jit": [[241, 277], ["numpy.ones", "range", "range", "range"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "_points_in_convex_polygon_3d_jit", "(", "\n", "points", ",", "polygon_surfaces", ",", "normal_vec", ",", "d", ",", "num_surfaces", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"check points is in 3d convex polygons.\n    Args:\n        points: [num_points, 3] array.\n        polygon_surfaces: [num_polygon, max_num_surfaces,\n            max_num_points_of_surface, 3]\n            array. all surfaces' normal vector must direct to internal.\n            max_num_points_of_surface must at least 3.\n        num_surfaces: [num_polygon] array. indicate how many surfaces\n            a polygon contain\n    Returns:\n        [num_points, num_polygon] bool array.\n    \"\"\"", "\n", "max_num_surfaces", ",", "max_num_points_of_surface", "=", "polygon_surfaces", ".", "shape", "[", "1", ":", "3", "]", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "num_polygons", "=", "polygon_surfaces", ".", "shape", "[", "0", "]", "\n", "ret", "=", "np", ".", "ones", "(", "(", "num_points", ",", "num_polygons", ")", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "sign", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_points", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_polygons", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "max_num_surfaces", ")", ":", "\n", "                ", "if", "k", ">", "num_surfaces", "[", "j", "]", ":", "\n", "                    ", "break", "\n", "", "sign", "=", "(", "\n", "points", "[", "i", ",", "0", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "0", "]", "\n", "+", "points", "[", "i", ",", "1", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "1", "]", "\n", "+", "points", "[", "i", ",", "2", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "2", "]", "\n", "+", "d", "[", "j", ",", "k", "]", "\n", ")", "\n", "if", "sign", ">=", "0", ":", "\n", "                    ", "ret", "[", "i", ",", "j", "]", "=", "False", "\n", "break", "\n", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.points_in_convex_polygon_jit": [[279, 326], ["numpy.zeros", "range", "range", "range", "list", "list", "range", "range"], "function", ["None"], ["", "@", "numba", ".", "jit", "\n", "def", "points_in_convex_polygon_jit", "(", "points", ",", "polygon", ",", "clockwise", "=", "True", ")", ":", "\n", "    ", "\"\"\"check points is in 2d convex polygons. True when point in polygon\n    Args:\n        points: [num_points, 2] array.\n        polygon: [num_polygon, num_points_of_polygon, 2] array.\n        clockwise: bool. indicate polygon is clockwise.\n    Returns:\n        [num_points, num_polygon] bool array.\n    \"\"\"", "\n", "# first convert polygon to directed lines", "\n", "num_points_of_polygon", "=", "polygon", ".", "shape", "[", "1", "]", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "num_polygons", "=", "polygon", ".", "shape", "[", "0", "]", "\n", "if", "clockwise", ":", "\n", "        ", "vec1", "=", "(", "\n", "polygon", "\n", "-", "polygon", "[", "\n", ":", ",", "\n", "[", "num_points_of_polygon", "-", "1", "]", "+", "list", "(", "range", "(", "num_points_of_polygon", "-", "1", ")", ")", ",", "\n", ":", ",", "\n", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "vec1", "=", "(", "\n", "polygon", "[", "\n", ":", ",", "\n", "[", "num_points_of_polygon", "-", "1", "]", "+", "list", "(", "range", "(", "num_points_of_polygon", "-", "1", ")", ")", ",", "\n", ":", ",", "\n", "]", "\n", "-", "polygon", "\n", ")", "\n", "# vec1: [num_polygon, num_points_of_polygon, 2]", "\n", "", "ret", "=", "np", ".", "zeros", "(", "(", "num_points", ",", "num_polygons", ")", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "success", "=", "True", "\n", "cross", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_points", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_polygons", ")", ":", "\n", "            ", "success", "=", "True", "\n", "for", "k", "in", "range", "(", "num_points_of_polygon", ")", ":", "\n", "                ", "cross", "=", "vec1", "[", "j", ",", "k", ",", "1", "]", "*", "(", "polygon", "[", "j", ",", "k", ",", "0", "]", "-", "points", "[", "i", ",", "0", "]", ")", "\n", "cross", "-=", "vec1", "[", "j", ",", "k", ",", "0", "]", "*", "(", "polygon", "[", "j", ",", "k", ",", "1", "]", "-", "points", "[", "i", ",", "1", "]", ")", "\n", "if", "cross", ">=", "0", ":", "\n", "                    ", "success", "=", "False", "\n", "break", "\n", "", "", "ret", "[", "i", ",", "j", "]", "=", "success", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.points_in_convex_polygon": [[328, 349], ["numpy.cross", "numpy.all", "list", "range"], "function", ["None"], ["", "def", "points_in_convex_polygon", "(", "points", ",", "polygon", ",", "clockwise", "=", "True", ")", ":", "\n", "    ", "\"\"\"check points is in convex polygons. may run 2x faster when write in\n    cython(don't need to calculate all cross-product between edge and point)\n    Args:\n        points: [num_points, 2] array.\n        polygon: [num_polygon, num_points_of_polygon, 2] array.\n        clockwise: bool. indicate polygon is clockwise.\n    Returns:\n        [num_points, num_polygon] bool array.\n    \"\"\"", "\n", "# first convert polygon to directed lines", "\n", "num_lines", "=", "polygon", ".", "shape", "[", "1", "]", "\n", "polygon_next", "=", "polygon", "[", ":", ",", "[", "num_lines", "-", "1", "]", "+", "list", "(", "range", "(", "num_lines", "-", "1", ")", ")", ",", ":", "]", "\n", "if", "clockwise", ":", "\n", "        ", "vec1", "=", "(", "polygon", "-", "polygon_next", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "else", ":", "\n", "        ", "vec1", "=", "(", "polygon_next", "-", "polygon", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "vec2", "=", "polygon", "[", "np", ".", "newaxis", ",", "...", "]", "-", "points", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "# [num_points, num_polygon, num_points_of_polygon, 2]", "\n", "cross", "=", "np", ".", "cross", "(", "vec1", ",", "vec2", ")", "\n", "return", "np", ".", "all", "(", "cross", ">", "0", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.surface_equ_3d_jitv2": [[351, 378], ["numpy.zeros", "numpy.zeros", "range", "range"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "surface_equ_3d_jitv2", "(", "surfaces", ")", ":", "\n", "# polygon_surfaces: [num_polygon, num_surfaces, num_points_of_polygon, 3]", "\n", "    ", "num_polygon", "=", "surfaces", ".", "shape", "[", "0", "]", "\n", "max_num_surfaces", "=", "surfaces", ".", "shape", "[", "1", "]", "\n", "normal_vec", "=", "np", ".", "zeros", "(", "(", "num_polygon", ",", "max_num_surfaces", ",", "3", ")", ",", "dtype", "=", "surfaces", ".", "dtype", ")", "\n", "d", "=", "np", ".", "zeros", "(", "(", "num_polygon", ",", "max_num_surfaces", ")", ",", "dtype", "=", "surfaces", ".", "dtype", ")", "\n", "sv0", "=", "surfaces", "[", "0", ",", "0", ",", "0", "]", "-", "surfaces", "[", "0", ",", "0", ",", "1", "]", "\n", "sv1", "=", "surfaces", "[", "0", ",", "0", ",", "0", "]", "-", "surfaces", "[", "0", ",", "0", ",", "1", "]", "\n", "for", "i", "in", "range", "(", "num_polygon", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "max_num_surfaces", ")", ":", "\n", "            ", "sv0", "[", "0", "]", "=", "surfaces", "[", "i", ",", "j", ",", "0", ",", "0", "]", "-", "surfaces", "[", "i", ",", "j", ",", "1", ",", "0", "]", "\n", "sv0", "[", "1", "]", "=", "surfaces", "[", "i", ",", "j", ",", "0", ",", "1", "]", "-", "surfaces", "[", "i", ",", "j", ",", "1", ",", "1", "]", "\n", "sv0", "[", "2", "]", "=", "surfaces", "[", "i", ",", "j", ",", "0", ",", "2", "]", "-", "surfaces", "[", "i", ",", "j", ",", "1", ",", "2", "]", "\n", "sv1", "[", "0", "]", "=", "surfaces", "[", "i", ",", "j", ",", "1", ",", "0", "]", "-", "surfaces", "[", "i", ",", "j", ",", "2", ",", "0", "]", "\n", "sv1", "[", "1", "]", "=", "surfaces", "[", "i", ",", "j", ",", "1", ",", "1", "]", "-", "surfaces", "[", "i", ",", "j", ",", "2", ",", "1", "]", "\n", "sv1", "[", "2", "]", "=", "surfaces", "[", "i", ",", "j", ",", "1", ",", "2", "]", "-", "surfaces", "[", "i", ",", "j", ",", "2", ",", "2", "]", "\n", "normal_vec", "[", "i", ",", "j", ",", "0", "]", "=", "sv0", "[", "1", "]", "*", "sv1", "[", "2", "]", "-", "sv0", "[", "2", "]", "*", "sv1", "[", "1", "]", "\n", "normal_vec", "[", "i", ",", "j", ",", "1", "]", "=", "sv0", "[", "2", "]", "*", "sv1", "[", "0", "]", "-", "sv0", "[", "0", "]", "*", "sv1", "[", "2", "]", "\n", "normal_vec", "[", "i", ",", "j", ",", "2", "]", "=", "sv0", "[", "0", "]", "*", "sv1", "[", "1", "]", "-", "sv0", "[", "1", "]", "*", "sv1", "[", "0", "]", "\n", "\n", "d", "[", "i", ",", "j", "]", "=", "(", "\n", "-", "surfaces", "[", "i", ",", "j", ",", "0", ",", "0", "]", "*", "normal_vec", "[", "i", ",", "j", ",", "0", "]", "\n", "-", "surfaces", "[", "i", ",", "j", ",", "0", ",", "1", "]", "*", "normal_vec", "[", "i", ",", "j", ",", "1", "]", "\n", "-", "surfaces", "[", "i", ",", "j", ",", "0", ",", "2", "]", "*", "normal_vec", "[", "i", ",", "j", ",", "2", "]", "\n", ")", "\n", "", "", "return", "normal_vec", ",", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry._points_in_convex_polygon_3d_jit_v2": [[380, 402], ["numpy.ones", "range", "range", "range"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "_points_in_convex_polygon_3d_jit_v2", "(", "points", ",", "surfaces", ")", ":", "\n", "    ", "max_num_surfaces", ",", "max_num_points_of_surface", "=", "polygon_surfaces", ".", "shape", "[", "1", ":", "3", "]", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "num_polygons", "=", "polygon_surfaces", ".", "shape", "[", "0", "]", "\n", "ret", "=", "np", ".", "ones", "(", "(", "num_points", ",", "num_polygons", ")", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "sign", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_points", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_polygons", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "max_num_surfaces", ")", ":", "\n", "                ", "if", "k", ">", "num_surfaces", "[", "j", "]", ":", "\n", "                    ", "break", "\n", "", "sign", "=", "(", "\n", "points", "[", "i", ",", "0", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "0", "]", "\n", "+", "points", "[", "i", ",", "1", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "1", "]", "\n", "+", "points", "[", "i", ",", "2", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "2", "]", "\n", "+", "d", "[", "j", ",", "k", "]", "\n", ")", "\n", "if", "sign", ">=", "0", ":", "\n", "                    ", "ret", "[", "i", ",", "j", "]", "=", "False", "\n", "break", "\n", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.points_in_convex_polygon_3d_jit_v2": [[404, 458], ["numpy.zeros", "numpy.zeros", "numpy.ones", "range", "range", "range", "range", "range"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "points_in_convex_polygon_3d_jit_v2", "(", "points", ",", "surfaces", ",", "num_surfaces", "=", "None", ")", ":", "\n", "    ", "\"\"\"check points is in 3d convex polygons.\n    Args:\n        points: [num_points, 3] array.\n        polygon_surfaces: [num_polygon, max_num_surfaces,\n            max_num_points_of_surface, 3]\n            array. all surfaces' normal vector must direct to internal.\n            max_num_points_of_surface must at least 3.\n        num_surfaces: [num_polygon] array. indicate how many surfaces\n            a polygon contain\n    Returns:\n        [num_points, num_polygon] bool array.\n    \"\"\"", "\n", "num_polygon", "=", "surfaces", ".", "shape", "[", "0", "]", "\n", "max_num_surfaces", "=", "surfaces", ".", "shape", "[", "1", "]", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "normal_vec", "=", "np", ".", "zeros", "(", "(", "num_polygon", ",", "max_num_surfaces", ",", "3", ")", ",", "dtype", "=", "surfaces", ".", "dtype", ")", "\n", "d", "=", "np", ".", "zeros", "(", "(", "num_polygon", ",", "max_num_surfaces", ")", ",", "dtype", "=", "surfaces", ".", "dtype", ")", "\n", "sv0", "=", "surfaces", "[", "0", ",", "0", ",", "0", "]", "-", "surfaces", "[", "0", ",", "0", ",", "1", "]", "\n", "sv1", "=", "surfaces", "[", "0", ",", "0", ",", "0", "]", "-", "surfaces", "[", "0", ",", "0", ",", "1", "]", "\n", "ret", "=", "np", ".", "ones", "(", "(", "num_points", ",", "num_polygon", ")", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "for", "i", "in", "range", "(", "num_polygon", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "max_num_surfaces", ")", ":", "\n", "            ", "sv0", "[", "0", "]", "=", "surfaces", "[", "i", ",", "j", ",", "0", ",", "0", "]", "-", "surfaces", "[", "i", ",", "j", ",", "1", ",", "0", "]", "\n", "sv0", "[", "1", "]", "=", "surfaces", "[", "i", ",", "j", ",", "0", ",", "1", "]", "-", "surfaces", "[", "i", ",", "j", ",", "1", ",", "1", "]", "\n", "sv0", "[", "2", "]", "=", "surfaces", "[", "i", ",", "j", ",", "0", ",", "2", "]", "-", "surfaces", "[", "i", ",", "j", ",", "1", ",", "2", "]", "\n", "sv1", "[", "0", "]", "=", "surfaces", "[", "i", ",", "j", ",", "1", ",", "0", "]", "-", "surfaces", "[", "i", ",", "j", ",", "2", ",", "0", "]", "\n", "sv1", "[", "1", "]", "=", "surfaces", "[", "i", ",", "j", ",", "1", ",", "1", "]", "-", "surfaces", "[", "i", ",", "j", ",", "2", ",", "1", "]", "\n", "sv1", "[", "2", "]", "=", "surfaces", "[", "i", ",", "j", ",", "1", ",", "2", "]", "-", "surfaces", "[", "i", ",", "j", ",", "2", ",", "2", "]", "\n", "normal_vec", "[", "i", ",", "j", ",", "0", "]", "=", "sv0", "[", "1", "]", "*", "sv1", "[", "2", "]", "-", "sv0", "[", "2", "]", "*", "sv1", "[", "1", "]", "\n", "normal_vec", "[", "i", ",", "j", ",", "1", "]", "=", "sv0", "[", "2", "]", "*", "sv1", "[", "0", "]", "-", "sv0", "[", "0", "]", "*", "sv1", "[", "2", "]", "\n", "normal_vec", "[", "i", ",", "j", ",", "2", "]", "=", "sv0", "[", "0", "]", "*", "sv1", "[", "1", "]", "-", "sv0", "[", "1", "]", "*", "sv1", "[", "0", "]", "\n", "\n", "d", "[", "i", ",", "j", "]", "=", "(", "\n", "-", "surfaces", "[", "i", ",", "j", ",", "0", ",", "0", "]", "*", "normal_vec", "[", "i", ",", "j", ",", "0", "]", "\n", "-", "surfaces", "[", "i", ",", "j", ",", "0", ",", "1", "]", "*", "normal_vec", "[", "i", ",", "j", ",", "1", "]", "\n", "-", "surfaces", "[", "i", ",", "j", ",", "0", ",", "2", "]", "*", "normal_vec", "[", "i", ",", "j", ",", "2", "]", "\n", ")", "\n", "\n", "", "", "sign", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_points", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_polygon", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "max_num_surfaces", ")", ":", "\n", "                ", "sign", "=", "(", "\n", "points", "[", "i", ",", "0", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "0", "]", "\n", "+", "points", "[", "i", ",", "1", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "1", "]", "\n", "+", "points", "[", "i", ",", "2", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "2", "]", "\n", "+", "d", "[", "j", ",", "k", "]", "\n", ")", "\n", "if", "sign", ">=", "0", ":", "\n", "                    ", "ret", "[", "i", ",", "j", "]", "=", "False", "\n", "break", "\n", "", "", "", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.torch_to_np_dtype": [[12, 22], ["numpy.dtype", "numpy.dtype", "numpy.dtype", "numpy.dtype", "numpy.dtype", "numpy.dtype"], "function", ["None"], ["", "def", "torch_to_np_dtype", "(", "ttype", ")", ":", "\n", "    ", "type_map", "=", "{", "\n", "torch", ".", "float16", ":", "np", ".", "dtype", "(", "np", ".", "float16", ")", ",", "\n", "torch", ".", "float32", ":", "np", ".", "dtype", "(", "np", ".", "float32", ")", ",", "\n", "torch", ".", "float16", ":", "np", ".", "dtype", "(", "np", ".", "float64", ")", ",", "\n", "torch", ".", "int32", ":", "np", ".", "dtype", "(", "np", ".", "int32", ")", ",", "\n", "torch", ".", "int64", ":", "np", ".", "dtype", "(", "np", ".", "int64", ")", ",", "\n", "torch", ".", "uint8", ":", "np", ".", "dtype", "(", "np", ".", "uint8", ")", ",", "\n", "}", "\n", "return", "type_map", "[", "ttype", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.corners_nd": [[24, 60], ["int", "box_torch_ops.torch_to_np_dtype", "isinstance", "numpy.stack().astype", "torch.from_numpy().type_as", "numpy.array", "dims.view", "torch.from_numpy().type_as.view", "numpy.stack", "torch.from_numpy", "numpy.unravel_index", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.torch_to_np_dtype", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack"], ["", "def", "corners_nd", "(", "dims", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"generate relative box corners based on length per dim and\n    origin point.\n\n    Args:\n        dims (float array, shape=[N, ndim]): array of length per dim\n        origin (list or array or float): origin point relate to smallest point.\n        dtype (output dtype, optional): Defaults to np.float32\n\n    Returns:\n        float array, shape=[N, 2 ** ndim, ndim]: returned corners.\n        point layout example: (2d) x0y0, x0y1, x1y0, x1y1;\n            (3d) x0y0z0, x0y0z1, x0y1z0, x0y1z1, x1y0z0, x1y0z1, x1y1z0, x1y1z1\n            where x0 < x1, y0 < y1, z0 < z1\n    \"\"\"", "\n", "ndim", "=", "int", "(", "dims", ".", "shape", "[", "1", "]", ")", "\n", "dtype", "=", "torch_to_np_dtype", "(", "dims", ".", "dtype", ")", "\n", "if", "isinstance", "(", "origin", ",", "float", ")", ":", "\n", "        ", "origin", "=", "[", "origin", "]", "*", "ndim", "\n", "", "corners_norm", "=", "np", ".", "stack", "(", "\n", "np", ".", "unravel_index", "(", "np", ".", "arange", "(", "2", "**", "ndim", ")", ",", "[", "2", "]", "*", "ndim", ")", ",", "axis", "=", "1", "\n", ")", ".", "astype", "(", "dtype", ")", "\n", "# now corners_norm has format: (2d) x0y0, x0y1, x1y0, x1y1", "\n", "# (3d) x0y0z0, x0y0z1, x0y1z0, x0y1z1, x1y0z0, x1y0z1, x1y1z0, x1y1z1", "\n", "# so need to convert to a format which is convenient to do other computing.", "\n", "# for 2d boxes, format is clockwise start from minimum point", "\n", "# for 3d boxes, please draw them by your hand.", "\n", "if", "ndim", "==", "2", ":", "\n", "# generate clockwise box corners", "\n", "        ", "corners_norm", "=", "corners_norm", "[", "[", "0", ",", "1", ",", "3", ",", "2", "]", "]", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "        ", "corners_norm", "=", "corners_norm", "[", "[", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ",", "7", ",", "6", "]", "]", "\n", "", "corners_norm", "=", "corners_norm", "-", "np", ".", "array", "(", "origin", ",", "dtype", "=", "dtype", ")", "\n", "corners_norm", "=", "torch", ".", "from_numpy", "(", "corners_norm", ")", ".", "type_as", "(", "dims", ")", "\n", "corners", "=", "dims", ".", "view", "(", "-", "1", ",", "1", ",", "ndim", ")", "*", "corners_norm", ".", "view", "(", "1", ",", "2", "**", "ndim", ",", "ndim", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.corners_2d": [[62, 76], ["box_torch_ops.corners_nd"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.corners_nd"], ["", "def", "corners_2d", "(", "dims", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"generate relative 2d box corners based on length per dim and\n    origin point.\n\n    Args:\n        dims (float array, shape=[N, 2]): array of length per dim\n        origin (list or array or float): origin point relate to smallest point.\n        dtype (output dtype, optional): Defaults to np.float32\n\n    Returns:\n        float array, shape=[N, 4, 2]: returned corners.\n        point layout: x0y0, x0y1, x1y1, x1y0\n    \"\"\"", "\n", "return", "corners_nd", "(", "dims", ",", "origin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.corner_to_standup_nd": [[78, 86], ["range", "range", "torch.stack", "standup_boxes.append", "standup_boxes.append", "torch.min", "torch.max"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack"], ["", "def", "corner_to_standup_nd", "(", "boxes_corner", ")", ":", "\n", "    ", "ndim", "=", "boxes_corner", ".", "shape", "[", "2", "]", "\n", "standup_boxes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ndim", ")", ":", "\n", "        ", "standup_boxes", ".", "append", "(", "torch", ".", "min", "(", "boxes_corner", "[", ":", ",", ":", ",", "i", "]", ",", "dim", "=", "1", ")", "[", "0", "]", ")", "\n", "", "for", "i", "in", "range", "(", "ndim", ")", ":", "\n", "        ", "standup_boxes", ".", "append", "(", "torch", ".", "max", "(", "boxes_corner", "[", ":", ",", ":", ",", "i", "]", ",", "dim", "=", "1", ")", "[", "0", "]", ")", "\n", "", "return", "torch", ".", "stack", "(", "standup_boxes", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.rotation_3d_in_axis": [[88, 123], ["torch.sin", "torch.cos", "torch.ones_like", "torch.zeros_like", "torch.einsum", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "ValueError", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack"], ["", "def", "rotation_3d_in_axis", "(", "points", ",", "angles", ",", "axis", "=", "0", ")", ":", "\n", "# points: [N, point_size, 3]", "\n", "# angles: [N]", "\n", "    ", "rot_sin", "=", "torch", ".", "sin", "(", "angles", ")", "\n", "rot_cos", "=", "torch", ".", "cos", "(", "angles", ")", "\n", "ones", "=", "torch", ".", "ones_like", "(", "rot_cos", ")", "\n", "zeros", "=", "torch", ".", "zeros_like", "(", "rot_cos", ")", "\n", "if", "axis", "==", "1", ":", "\n", "        ", "rot_mat_T", "=", "tstack", "(", "\n", "[", "\n", "tstack", "(", "[", "rot_cos", ",", "zeros", ",", "-", "rot_sin", "]", ")", ",", "\n", "tstack", "(", "[", "zeros", ",", "ones", ",", "zeros", "]", ")", ",", "\n", "tstack", "(", "[", "rot_sin", ",", "zeros", ",", "rot_cos", "]", ")", ",", "\n", "]", "\n", ")", "\n", "", "elif", "axis", "==", "2", "or", "axis", "==", "-", "1", ":", "\n", "        ", "rot_mat_T", "=", "tstack", "(", "\n", "[", "\n", "tstack", "(", "[", "rot_cos", ",", "-", "rot_sin", ",", "zeros", "]", ")", ",", "\n", "tstack", "(", "[", "rot_sin", ",", "rot_cos", ",", "zeros", "]", ")", ",", "\n", "tstack", "(", "[", "zeros", ",", "zeros", ",", "ones", "]", ")", ",", "\n", "]", "\n", ")", "\n", "", "elif", "axis", "==", "0", ":", "\n", "        ", "rot_mat_T", "=", "tstack", "(", "\n", "[", "\n", "tstack", "(", "[", "zeros", ",", "rot_cos", ",", "-", "rot_sin", "]", ")", ",", "\n", "tstack", "(", "[", "zeros", ",", "rot_sin", ",", "rot_cos", "]", ")", ",", "\n", "tstack", "(", "[", "ones", ",", "zeros", ",", "zeros", "]", ")", ",", "\n", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"axis should in range\"", ")", "\n", "# print(points.shape, rot_mat_T.shape)", "\n", "", "return", "torch", ".", "einsum", "(", "\"aij,jka->aik\"", ",", "points", ",", "rot_mat_T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.rotate_points_along_z": [[124, 143], ["torch.cos", "torch.sin", "angle.new_zeros", "angle.new_ones", "torch.stack().view().float", "torch.matmul", "torch.cat", "torch.stack().view", "torch.stack"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack"], ["", "def", "rotate_points_along_z", "(", "points", ",", "angle", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        points: (B, N, 3 + C)\n        angle: (B), angle along z-axis, angle increases x ==> y\n    Returns:\n    \"\"\"", "\n", "cosa", "=", "torch", ".", "cos", "(", "angle", ")", "\n", "sina", "=", "torch", ".", "sin", "(", "angle", ")", "\n", "zeros", "=", "angle", ".", "new_zeros", "(", "points", ".", "shape", "[", "0", "]", ")", "\n", "ones", "=", "angle", ".", "new_ones", "(", "points", ".", "shape", "[", "0", "]", ")", "\n", "rot_matrix", "=", "torch", ".", "stack", "(", "(", "\n", "cosa", ",", "-", "sina", ",", "zeros", ",", "\n", "sina", ",", "cosa", ",", "zeros", ",", "\n", "zeros", ",", "zeros", ",", "ones", "\n", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", ".", "float", "(", ")", "\n", "points_rot", "=", "torch", ".", "matmul", "(", "points", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "rot_matrix", ")", "\n", "points_rot", "=", "torch", ".", "cat", "(", "(", "points_rot", ",", "points", "[", ":", ",", ":", ",", "3", ":", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "points_rot", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.rotation_2d": [[145, 159], ["torch.sin", "torch.cos", "torch.stack", "torch.einsum", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack"], ["", "def", "rotation_2d", "(", "points", ",", "angles", ")", ":", "\n", "    ", "\"\"\"rotation 2d points based on origin point clockwise when angle positive.\n\n    Args:\n        points (float array, shape=[N, point_size, 2]): points to be rotated.\n        angles (float array, shape=[N]): rotation angle.\n\n    Returns:\n        float array: same shape as points\n    \"\"\"", "\n", "rot_sin", "=", "torch", ".", "sin", "(", "angles", ")", "\n", "rot_cos", "=", "torch", ".", "cos", "(", "angles", ")", "\n", "rot_mat_T", "=", "torch", ".", "stack", "(", "[", "tstack", "(", "[", "rot_cos", ",", "-", "rot_sin", "]", ")", ",", "tstack", "(", "[", "rot_sin", ",", "rot_cos", "]", ")", "]", ")", "\n", "return", "torch", ".", "einsum", "(", "\"aij,jka->aik\"", ",", "(", "points", ",", "rot_mat_T", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box3d": [[161, 182], ["box_torch_ops.corners_nd", "box_torch_ops.rotation_3d_in_axis", "centers.view"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.corners_nd", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.rotation_3d_in_axis"], ["", "def", "center_to_corner_box3d", "(", "centers", ",", "dims", ",", "angles", ",", "origin", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "axis", "=", "1", ")", ":", "\n", "    ", "\"\"\"convert kitti locations, dimensions and angles to corners\n\n    Args:\n        centers (float array, shape=[N, 3]): locations in kitti label file.\n        dims (float array, shape=[N, 3]): dimensions in kitti label file.\n        angles (float array, shape=[N]): rotation_y in kitti label file.\n        origin (list or array or float): origin point relate to smallest point.\n            use [0.5, 1.0, 0.5] in camera and [0.5, 0.5, 0] in lidar.\n        axis (int): rotation axis. 1 for camera and 2 for lidar.\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "# 'length' in kitti format is in x axis.", "\n", "# yzx(hwl)(kitti label file)<->xyz(lhw)(camera)<->z(-x)(-y)(wlh)(lidar)", "\n", "# center in kitti format is [0.5, 1.0, 0.5] in xyz.", "\n", "corners", "=", "corners_nd", "(", "dims", ",", "origin", "=", "origin", ")", "\n", "# corners: [N, 8, 3]", "\n", "corners", "=", "rotation_3d_in_axis", "(", "corners", ",", "angles", ",", "axis", "=", "axis", ")", "\n", "corners", "+=", "centers", ".", "view", "(", "-", "1", ",", "1", ",", "3", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box2d": [[184, 204], ["box_torch_ops.corners_nd", "centers.view", "box_torch_ops.rotation_2d"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.corners_nd", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.rotation_2d"], ["", "def", "center_to_corner_box2d", "(", "centers", ",", "dims", ",", "angles", "=", "None", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"convert kitti locations, dimensions and angles to corners\n\n    Args:\n        centers (float array, shape=[N, 2]): locations in kitti label file.\n        dims (float array, shape=[N, 2]): dimensions in kitti label file.\n        angles (float array, shape=[N]): rotation_y in kitti label file.\n\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "# 'length' in kitti format is in x axis.", "\n", "# xyz(hwl)(kitti label file)<->xyz(lhw)(camera)<->z(-x)(-y)(wlh)(lidar)", "\n", "# center in kitti format is [0.5, 1.0, 0.5] in xyz.", "\n", "corners", "=", "corners_nd", "(", "dims", ",", "origin", "=", "origin", ")", "\n", "# corners: [N, 4, 2]", "\n", "if", "angles", "is", "not", "None", ":", "\n", "        ", "corners", "=", "rotation_2d", "(", "corners", ",", "angles", ")", "\n", "", "corners", "+=", "centers", ".", "view", "(", "-", "1", ",", "1", ",", "2", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.project_to_image": [[206, 216], ["numpy.concatenate().tolist", "torch.cat", "torch.matmul", "list", "proj_mat.t", "numpy.concatenate", "torch.ones().type_as", "torch.ones"], "function", ["None"], ["", "def", "project_to_image", "(", "points_3d", ",", "proj_mat", ")", ":", "\n", "    ", "points_num", "=", "list", "(", "points_3d", ".", "shape", ")", "[", ":", "-", "1", "]", "\n", "points_shape", "=", "np", ".", "concatenate", "(", "[", "points_num", ",", "[", "1", "]", "]", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "points_4", "=", "torch", ".", "cat", "(", "\n", "[", "points_3d", ",", "torch", ".", "ones", "(", "*", "points_shape", ")", ".", "type_as", "(", "points_3d", ")", "]", ",", "dim", "=", "-", "1", "\n", ")", "\n", "# point_2d = points_4 @ tf.transpose(proj_mat, [1, 0])", "\n", "point_2d", "=", "torch", ".", "matmul", "(", "points_4", ",", "proj_mat", ".", "t", "(", ")", ")", "\n", "point_2d_res", "=", "point_2d", "[", "...", ",", ":", "2", "]", "/", "point_2d", "[", "...", ",", "2", ":", "3", "]", "\n", "return", "point_2d_res", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.camera_to_lidar": [[218, 223], ["torch.cat", "torch.inverse", "torch.ones().type_as", "torch.ones"], "function", ["None"], ["", "def", "camera_to_lidar", "(", "points", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "points", "=", "torch", ".", "cat", "(", "[", "points", ",", "torch", ".", "ones", "(", "num_points", ",", "1", ")", ".", "type_as", "(", "points", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "lidar_points", "=", "points", "@", "torch", ".", "inverse", "(", "(", "r_rect", "@", "velo2cam", ")", ".", "t", "(", ")", ")", "\n", "return", "lidar_points", "[", "...", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.lidar_to_camera": [[225, 230], ["torch.cat", "torch.ones().type_as", "torch.ones"], "function", ["None"], ["", "def", "lidar_to_camera", "(", "points", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "points", "=", "torch", ".", "cat", "(", "[", "points", ",", "torch", ".", "ones", "(", "num_points", ",", "1", ")", ".", "type_as", "(", "points", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "camera_points", "=", "points", "@", "(", "r_rect", "@", "velo2cam", ")", ".", "t", "(", ")", "\n", "return", "camera_points", "[", "...", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.box_camera_to_lidar": [[232, 238], ["box_torch_ops.camera_to_lidar", "torch.cat"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.camera_to_lidar"], ["", "def", "box_camera_to_lidar", "(", "data", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "xyz", "=", "data", "[", "...", ",", "0", ":", "3", "]", "\n", "l", ",", "h", ",", "w", "=", "data", "[", "...", ",", "3", ":", "4", "]", ",", "data", "[", "...", ",", "4", ":", "5", "]", ",", "data", "[", "...", ",", "5", ":", "6", "]", "\n", "r", "=", "data", "[", "...", ",", "6", ":", "7", "]", "\n", "xyz_lidar", "=", "camera_to_lidar", "(", "xyz", ",", "r_rect", ",", "velo2cam", ")", "\n", "return", "torch", ".", "cat", "(", "[", "xyz_lidar", ",", "w", ",", "l", ",", "h", ",", "r", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.box_lidar_to_camera": [[240, 246], ["box_torch_ops.lidar_to_camera", "torch.cat"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.lidar_to_camera"], ["", "def", "box_lidar_to_camera", "(", "data", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "xyz_lidar", "=", "data", "[", "...", ",", "0", ":", "3", "]", "\n", "w", ",", "l", ",", "h", "=", "data", "[", "...", ",", "3", ":", "4", "]", ",", "data", "[", "...", ",", "4", ":", "5", "]", ",", "data", "[", "...", ",", "5", ":", "6", "]", "\n", "r", "=", "data", "[", "...", ",", "6", ":", "7", "]", "\n", "xyz", "=", "lidar_to_camera", "(", "xyz_lidar", ",", "r_rect", ",", "velo2cam", ")", "\n", "return", "torch", ".", "cat", "(", "[", "xyz", ",", "l", ",", "h", ",", "w", ",", "r", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.rotate_nms_pcdet": [[248, 278], ["boxes[].contiguous", "torch.LongTensor", "order[].contiguous", "scores.sort", "boxes[].contiguous.size", "len", "iou3d_nms_cuda.nms_gpu", "keep[].cuda"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.neeharperi_futuredet.iou3d_nms.iou3d_nms_utils.nms_gpu"], ["", "def", "rotate_nms_pcdet", "(", "boxes", ",", "scores", ",", "thresh", ",", "pre_maxsize", "=", "None", ",", "post_max_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes: (N, 5) [x, y, z, l, w, h, theta]\n    :param scores: (N)\n    :param thresh:\n    :return:\n    \"\"\"", "\n", "# transform back to pcdet's coordinate", "\n", "boxes", "=", "boxes", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "4", ",", "3", ",", "5", ",", "-", "1", "]", "]", "\n", "boxes", "[", ":", ",", "-", "1", "]", "=", "-", "boxes", "[", ":", ",", "-", "1", "]", "-", "np", ".", "pi", "/", "2", "\n", "\n", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "[", "1", "]", "\n", "if", "pre_maxsize", "is", "not", "None", ":", "\n", "        ", "order", "=", "order", "[", ":", "pre_maxsize", "]", "\n", "\n", "", "boxes", "=", "boxes", "[", "order", "]", ".", "contiguous", "(", ")", "\n", "\n", "keep", "=", "torch", ".", "LongTensor", "(", "boxes", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "len", "(", "boxes", ")", "==", "0", ":", "\n", "        ", "num_out", "=", "0", "\n", "", "else", ":", "\n", "        ", "num_out", "=", "iou3d_nms_cuda", ".", "nms_gpu", "(", "boxes", ",", "keep", ",", "thresh", ")", "\n", "\n", "", "selected", "=", "order", "[", "keep", "[", ":", "num_out", "]", ".", "cuda", "(", ")", "]", ".", "contiguous", "(", ")", "\n", "\n", "if", "post_max_size", "is", "not", "None", ":", "\n", "        ", "selected", "=", "selected", "[", ":", "post_max_size", "]", "\n", "\n", "", "return", "selected", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.sample_ops.DataBaseSamplerV2.__init__": [[14, 96], ["db_prepor.items", "any", "sample_ops.DataBaseSamplerV2._group_db_infos.items", "logger.info", "db_prepor", "logger.info", "db_prepor.items", "det3d.core.sampler.preprocess.BatchSampler", "logger.info", "list", "list", "list", "list", "sample_ops.DataBaseSamplerV2._group_name_to_names.append", "list", "print", "isinstance", "det3d.utils.check.shape_mergeable", "numpy.abs", "len", "group_info.keys", "group_info.values", "group_info.keys", "group_info.values", "ValueError", "group_dict.values", "len", "len", "sorted", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.check.shape_mergeable"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "db_infos", ",", "\n", "groups", ",", "\n", "db_prepor", "=", "None", ",", "\n", "rate", "=", "1.0", ",", "\n", "global_rot_range", "=", "None", ",", "\n", "sampler_type", "=", "\"standard\"", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "db_infos", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "f\"load {len(v)} {k} database infos\"", ")", "\n", "\n", "", "if", "db_prepor", "is", "not", "None", ":", "\n", "            ", "db_infos", "=", "db_prepor", "(", "db_infos", ")", "\n", "logger", ".", "info", "(", "\"After filter database:\"", ")", "\n", "for", "k", ",", "v", "in", "db_infos", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "f\"load {len(v)} {k} database infos\"", ")", "\n", "\n", "", "", "self", ".", "db_infos", "=", "db_infos", "\n", "self", ".", "_rate", "=", "rate", "\n", "self", ".", "_groups", "=", "groups", "\n", "self", ".", "_group_db_infos", "=", "{", "}", "\n", "self", ".", "_group_name_to_names", "=", "[", "]", "\n", "self", ".", "_sample_classes", "=", "[", "]", "\n", "self", ".", "_sample_max_nums", "=", "[", "]", "\n", "self", ".", "_use_group_sampling", "=", "False", "# slower", "\n", "self", ".", "sampler_type", "=", "sampler_type", "\n", "\n", "if", "any", "(", "[", "len", "(", "g", ")", ">", "1", "for", "g", "in", "groups", "]", ")", ":", "\n", "            ", "self", ".", "_use_group_sampling", "=", "True", "\n", "", "if", "not", "self", ".", "_use_group_sampling", ":", "\n", "            ", "self", ".", "_group_db_infos", "=", "self", ".", "db_infos", "# just use db_infos", "\n", "for", "group_info", "in", "groups", ":", "\n", "                ", "group_names", "=", "list", "(", "group_info", ".", "keys", "(", ")", ")", "\n", "self", ".", "_sample_classes", "+=", "group_names", "\n", "self", ".", "_sample_max_nums", "+=", "list", "(", "group_info", ".", "values", "(", ")", ")", "\n", "", "", "else", ":", "\n", "\n", "            ", "for", "group_info", "in", "groups", ":", "\n", "                ", "group_dict", "=", "{", "}", "\n", "group_names", "=", "list", "(", "group_info", ".", "keys", "(", ")", ")", "\n", "group_name", "=", "\", \"", ".", "join", "(", "group_names", ")", "\n", "self", ".", "_sample_classes", "+=", "group_names", "\n", "self", ".", "_sample_max_nums", "+=", "list", "(", "group_info", ".", "values", "(", ")", ")", "\n", "self", ".", "_group_name_to_names", ".", "append", "(", "(", "group_name", ",", "group_names", ")", ")", "\n", "# self._group_name_to_names[group_name] = group_names", "\n", "for", "name", "in", "group_names", ":", "\n", "                    ", "for", "item", "in", "db_infos", "[", "name", "]", ":", "\n", "                        ", "gid", "=", "item", "[", "\"group_id\"", "]", "\n", "if", "gid", "not", "in", "group_dict", ":", "\n", "                            ", "group_dict", "[", "gid", "]", "=", "[", "item", "]", "\n", "", "else", ":", "\n", "                            ", "group_dict", "[", "gid", "]", "+=", "[", "item", "]", "\n", "", "", "", "if", "group_name", "in", "self", ".", "_group_db_infos", ":", "\n", "                    ", "raise", "ValueError", "(", "\"group must be unique\"", ")", "\n", "", "group_data", "=", "list", "(", "group_dict", ".", "values", "(", ")", ")", "\n", "self", ".", "_group_db_infos", "[", "group_name", "]", "=", "group_data", "\n", "info_dict", "=", "{", "}", "\n", "if", "len", "(", "group_info", ")", ">", "1", ":", "\n", "                    ", "for", "group", "in", "group_data", ":", "\n", "                        ", "names", "=", "[", "item", "[", "\"name\"", "]", "for", "item", "in", "group", "]", "\n", "names", "=", "sorted", "(", "names", ")", "\n", "group_name", "=", "\", \"", ".", "join", "(", "names", ")", "\n", "if", "group_name", "in", "info_dict", ":", "\n", "                            ", "info_dict", "[", "group_name", "]", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "info_dict", "[", "group_name", "]", "=", "1", "\n", "", "", "", "print", "(", "info_dict", ")", "\n", "\n", "", "", "self", ".", "_sampler_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "_group_db_infos", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_sampler_dict", "[", "k", "]", "=", "prep", ".", "BatchSampler", "(", "v", ",", "k", ")", "\n", "", "self", ".", "_enable_global_rot", "=", "False", "\n", "if", "global_rot_range", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "global_rot_range", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "                ", "global_rot_range", "=", "[", "-", "global_rot_range", ",", "global_rot_range", "]", "\n", "", "else", ":", "\n", "                ", "assert", "shape_mergeable", "(", "global_rot_range", ",", "[", "2", "]", ")", "\n", "", "if", "np", ".", "abs", "(", "global_rot_range", "[", "0", "]", "-", "global_rot_range", "[", "1", "]", ")", ">=", "1e-3", ":", "\n", "                ", "self", ".", "_enable_global_rot", "=", "True", "\n", "", "", "self", ".", "_global_rot_range", "=", "global_rot_range", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.sample_ops.DataBaseSamplerV2.use_group_sampling": [[97, 100], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "use_group_sampling", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_use_group_sampling", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.sample_ops.DataBaseSamplerV2.sample_all": [[101, 254], ["zip", "numpy.array", "zip", "zip", "numpy.array.append", "numpy.round().astype", "sample_num_per_class.append", "len", "numpy.concatenate", "len", "int", "int", "numpy.max", "sample_num_per_class.append", "sampled_groups.append", "det3d.core.bbox.box_np_ops.box3d_to_bbox", "det3d.core.sampler.preprocess.random_crop_frustum", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.ones", "numpy.array", "numpy.arange", "numpy.round", "sample_ops.DataBaseSamplerV2.sample_group", "sample_ops.DataBaseSamplerV2.sample_class_v2", "len", "numpy.concatenate", "numpy.fromfile().reshape", "s_points_list.append", "det3d.core.sampler.preprocess.mask_points_in_corners().reshape", "numpy.sum", "s_points_list_new.append", "numpy.sum", "numpy.sum", "len", "numpy.stack", "numpy.concatenate", "det3d.core.bbox.box_np_ops.rotation_points_single_angle", "print", "len", "len", "numpy.stack", "numpy.fromfile", "str", "det3d.core.sampler.preprocess.mask_points_in_corners", "numpy.array", "str", "numpy.logical_not", "pathlib.Path", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.box3d_to_bbox", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.sample_ops.DataBaseSamplerV2.sample_group", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.sample_ops.DataBaseSamplerV2.sample_class_v2", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.rotation_points_single_angle", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.config.Config.fromfile", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.mask_points_in_corners"], ["", "def", "sample_all", "(", "\n", "self", ",", "\n", "root_path", ",", "\n", "gt_boxes", ",", "\n", "gt_names", ",", "\n", "gt_trajectory", ",", "\n", "num_point_features", ",", "\n", "random_crop", "=", "False", ",", "\n", "gt_group_ids", "=", "None", ",", "\n", "calib", "=", "None", ",", "\n", "road_planes", "=", "None", ",", "\n", "sampler_type", "=", "\"standard\"", "\n", ")", ":", "\n", "        ", "name_trajectory", "=", "[", "]", "\n", "for", "name", ",", "traj", "in", "zip", "(", "gt_names", ",", "gt_trajectory", ")", ":", "\n", "            ", "name_trajectory", ".", "append", "(", "traj", "+", "\"_\"", "+", "name", ")", "\n", "", "name_trajectory", "=", "np", ".", "array", "(", "name_trajectory", ")", "\n", "\n", "sampled_num_dict", "=", "{", "}", "\n", "sample_num_per_class", "=", "[", "]", "\n", "for", "class_name", ",", "max_sample_num", "in", "zip", "(", "\n", "self", ".", "_sample_classes", ",", "self", ".", "_sample_max_nums", "\n", ")", ":", "\n", "\n", "            ", "if", "sampler_type", "==", "\"standard\"", ":", "\n", "                ", "sampled_num", "=", "int", "(", "\n", "max_sample_num", "-", "np", ".", "sum", "(", "[", "n", "==", "class_name", "for", "n", "in", "gt_names", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "sampled_num", "=", "int", "(", "\n", "max_sample_num", "-", "np", ".", "sum", "(", "[", "n", "==", "class_name", "for", "n", "in", "name_trajectory", "]", ")", "\n", ")", "\n", "\n", "", "sampled_num", "=", "np", ".", "round", "(", "self", ".", "_rate", "*", "sampled_num", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "sampled_num_dict", "[", "class_name", "]", "=", "sampled_num", "\n", "sample_num_per_class", ".", "append", "(", "sampled_num", ")", "\n", "\n", "", "sampled_groups", "=", "self", ".", "_sample_classes", "\n", "if", "self", ".", "_use_group_sampling", ":", "\n", "            ", "assert", "gt_group_ids", "is", "not", "None", "\n", "sampled_groups", "=", "[", "]", "\n", "sample_num_per_class", "=", "[", "]", "\n", "for", "group_name", ",", "class_names", "in", "self", ".", "_group_name_to_names", ":", "\n", "                ", "sampled_nums_group", "=", "[", "sampled_num_dict", "[", "n", "]", "for", "n", "in", "class_names", "]", "\n", "sampled_num", "=", "np", ".", "max", "(", "sampled_nums_group", ")", "\n", "sample_num_per_class", ".", "append", "(", "sampled_num", ")", "\n", "sampled_groups", ".", "append", "(", "group_name", ")", "\n", "", "total_group_ids", "=", "gt_group_ids", "\n", "", "sampled", "=", "[", "]", "\n", "forecasted", "=", "[", "]", "\n", "sampled_gt_boxes", "=", "[", "]", "\n", "avoid_coll_boxes", "=", "gt_boxes", "\n", "\n", "for", "class_name", ",", "sampled_num", "in", "zip", "(", "sampled_groups", ",", "sample_num_per_class", ")", ":", "\n", "            ", "if", "sampled_num", ">", "0", ":", "\n", "                ", "if", "self", ".", "_use_group_sampling", ":", "\n", "                    ", "sampled_cls", "=", "self", ".", "sample_group", "(", "\n", "class_name", ",", "sampled_num", ",", "avoid_coll_boxes", ",", "total_group_ids", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "sampled_cls", ",", "forecast_cls", "=", "self", ".", "sample_class_v2", "(", "\n", "class_name", ",", "sampled_num", ",", "avoid_coll_boxes", ",", "sampler_type", "\n", ")", "\n", "\n", "", "sampled", "+=", "sampled_cls", "\n", "forecasted", "+=", "forecast_cls", "\n", "if", "len", "(", "sampled_cls", ")", ">", "0", ":", "\n", "                    ", "if", "len", "(", "sampled_cls", ")", "==", "1", ":", "\n", "                        ", "sampled_gt_box", "=", "sampled_cls", "[", "0", "]", "[", "\"box3d_lidar\"", "]", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "else", ":", "\n", "                        ", "sampled_gt_box", "=", "np", ".", "stack", "(", "\n", "[", "s", "[", "\"box3d_lidar\"", "]", "for", "s", "in", "sampled_cls", "]", ",", "axis", "=", "0", "\n", ")", "\n", "\n", "", "sampled_gt_boxes", "+=", "[", "sampled_gt_box", "]", "\n", "avoid_coll_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "avoid_coll_boxes", ",", "sampled_gt_box", "]", ",", "axis", "=", "0", "\n", ")", "\n", "if", "self", ".", "_use_group_sampling", ":", "\n", "                        ", "if", "len", "(", "sampled_cls", ")", "==", "1", ":", "\n", "                            ", "sampled_group_ids", "=", "np", ".", "array", "(", "sampled_cls", "[", "0", "]", "[", "\"group_id\"", "]", ")", "[", "\n", "np", ".", "newaxis", ",", "...", "\n", "]", "\n", "", "else", ":", "\n", "                            ", "sampled_group_ids", "=", "np", ".", "stack", "(", "\n", "[", "s", "[", "\"group_id\"", "]", "for", "s", "in", "sampled_cls", "]", ",", "axis", "=", "0", "\n", ")", "\n", "", "total_group_ids", "=", "np", ".", "concatenate", "(", "\n", "[", "total_group_ids", ",", "sampled_group_ids", "]", ",", "axis", "=", "0", "\n", ")", "\n", "\n", "", "", "", "", "if", "len", "(", "sampled", ")", ">", "0", ":", "\n", "            ", "sampled_gt_boxes", "=", "np", ".", "concatenate", "(", "sampled_gt_boxes", ",", "axis", "=", "0", ")", "\n", "\n", "num_sampled", "=", "len", "(", "sampled", ")", "\n", "s_points_list", "=", "[", "]", "\n", "for", "info", "in", "sampled", ":", "\n", "                ", "try", ":", "\n", "                    ", "s_points", "=", "np", ".", "fromfile", "(", "\n", "str", "(", "pathlib", ".", "Path", "(", "root_path", ")", "/", "info", "[", "\"path\"", "]", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ".", "reshape", "(", "-", "1", ",", "num_point_features", ")", "\n", "\n", "if", "\"rot_transform\"", "in", "info", ":", "\n", "                        ", "rot", "=", "info", "[", "\"rot_transform\"", "]", "\n", "s_points", "[", ":", ",", ":", "3", "]", "=", "box_np_ops", ".", "rotation_points_single_angle", "(", "\n", "s_points", "[", ":", ",", ":", "4", "]", ",", "rot", ",", "axis", "=", "2", "\n", ")", "\n", "\n", "", "s_points", "[", ":", ",", ":", "3", "]", "+=", "info", "[", "\"box3d_lidar\"", "]", "[", ":", "3", "]", "\n", "s_points_list", ".", "append", "(", "s_points", ")", "\n", "# print(pathlib.Path(info[\"path\"]).stem)", "\n", "", "except", "Exception", ":", "\n", "                    ", "print", "(", "str", "(", "pathlib", ".", "Path", "(", "root_path", ")", "/", "info", "[", "\"path\"", "]", ")", ")", "\n", "continue", "\n", "\n", "", "", "if", "random_crop", ":", "\n", "                ", "s_points_list_new", "=", "[", "]", "\n", "assert", "calib", "is", "not", "None", "\n", "rect", "=", "calib", "[", "\"rect\"", "]", "\n", "Trv2c", "=", "calib", "[", "\"Trv2c\"", "]", "\n", "P2", "=", "calib", "[", "\"P2\"", "]", "\n", "gt_bboxes", "=", "box_np_ops", ".", "box3d_to_bbox", "(", "sampled_gt_boxes", ",", "rect", ",", "Trv2c", ",", "P2", ")", "\n", "crop_frustums", "=", "prep", ".", "random_crop_frustum", "(", "gt_bboxes", ",", "rect", ",", "Trv2c", ",", "P2", ")", "\n", "for", "i", "in", "range", "(", "crop_frustums", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "s_points", "=", "s_points_list", "[", "i", "]", "\n", "mask", "=", "prep", ".", "mask_points_in_corners", "(", "\n", "s_points", ",", "crop_frustums", "[", "i", ":", "i", "+", "1", "]", "\n", ")", ".", "reshape", "(", "-", "1", ")", "\n", "num_remove", "=", "np", ".", "sum", "(", "mask", ")", "\n", "if", "num_remove", ">", "0", "and", "(", "s_points", ".", "shape", "[", "0", "]", "-", "num_remove", ")", ">", "15", ":", "\n", "                        ", "s_points", "=", "s_points", "[", "np", ".", "logical_not", "(", "mask", ")", "]", "\n", "", "s_points_list_new", ".", "append", "(", "s_points", ")", "\n", "", "s_points_list", "=", "s_points_list_new", "\n", "", "ret", "=", "{", "\n", "\"gt_names\"", ":", "np", ".", "array", "(", "[", "s", "[", "\"name\"", "]", "for", "s", "in", "sampled", "]", ")", ",", "\n", "\"gt_trajectory\"", ":", "np", ".", "array", "(", "[", "s", "[", "\"trajectory\"", "]", "[", "0", "]", "for", "s", "in", "sampled", "]", ")", ",", "\n", "\"difficulty\"", ":", "np", ".", "array", "(", "[", "s", "[", "\"difficulty\"", "]", "for", "s", "in", "sampled", "]", ")", ",", "\n", "\"gt_boxes\"", ":", "sampled_gt_boxes", ",", "\n", "\"gt_forecast\"", ":", "forecasted", ",", "\n", "\"points\"", ":", "np", ".", "concatenate", "(", "s_points_list", ",", "axis", "=", "0", ")", ",", "\n", "\"gt_masks\"", ":", "np", ".", "ones", "(", "(", "num_sampled", ",", ")", ",", "dtype", "=", "np", ".", "bool_", ")", ",", "\n", "}", "\n", "\n", "if", "self", ".", "_use_group_sampling", ":", "\n", "                ", "ret", "[", "\"group_ids\"", "]", "=", "np", ".", "array", "(", "[", "s", "[", "\"group_id\"", "]", "for", "s", "in", "sampled", "]", ")", "\n", "", "else", ":", "\n", "                ", "ret", "[", "\"group_ids\"", "]", "=", "np", ".", "arange", "(", "\n", "gt_boxes", ".", "shape", "[", "0", "]", ",", "gt_boxes", ".", "shape", "[", "0", "]", "+", "len", "(", "sampled", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "ret", "=", "None", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.sample_ops.DataBaseSamplerV2.sample": [[255, 264], ["sample_ops.DataBaseSamplerV2._sampler_dict[].sample", "sample_ops.DataBaseSamplerV2._sampler_dict[].sample", "len", "functools.reduce", "numpy.ones", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.BatchSampler.sample", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.BatchSampler.sample"], ["", "def", "sample", "(", "self", ",", "name", ",", "num", ")", ":", "\n", "        ", "if", "self", ".", "_use_group_sampling", ":", "\n", "            ", "group_name", "=", "name", "\n", "ret", "=", "self", ".", "_sampler_dict", "[", "group_name", "]", ".", "sample", "(", "num", ")", "\n", "groups_num", "=", "[", "len", "(", "l", ")", "for", "l", "in", "ret", "]", "\n", "return", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "ret", ")", ",", "groups_num", "\n", "", "else", ":", "\n", "            ", "ret", "=", "self", ".", "_sampler_dict", "[", "name", "]", ".", "sample", "(", "num", ")", "\n", "return", "ret", ",", "np", ".", "ones", "(", "(", "len", "(", "ret", ")", ",", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.sample_ops.DataBaseSamplerV2.sample_v1": [[265, 274], ["isinstance", "sample_ops.DataBaseSamplerV2._sampler_dict[].sample", "sample_ops.DataBaseSamplerV2._sampler_dict[].sample", "len", "functools.reduce", "numpy.ones", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.BatchSampler.sample", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.BatchSampler.sample"], ["", "", "def", "sample_v1", "(", "self", ",", "name", ",", "num", ")", ":", "\n", "        ", "if", "isinstance", "(", "name", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "group_name", "=", "\", \"", ".", "join", "(", "name", ")", "\n", "ret", "=", "self", ".", "_sampler_dict", "[", "group_name", "]", ".", "sample", "(", "num", ")", "\n", "groups_num", "=", "[", "len", "(", "l", ")", "for", "l", "in", "ret", "]", "\n", "return", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "ret", ")", ",", "groups_num", "\n", "", "else", ":", "\n", "            ", "ret", "=", "self", ".", "_sampler_dict", "[", "name", "]", ".", "sample", "(", "num", ")", "\n", "return", "ret", ",", "np", ".", "ones", "(", "(", "len", "(", "ret", ")", ",", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.sample_ops.DataBaseSamplerV2.sample_class_v2": [[275, 352], ["copy.deepcopy", "copy.deepcopy", "len", "det3d.core.bbox.box_np_ops.center_to_corner_box2d", "numpy.stack", "numpy.zeros", "numpy.concatenate", "numpy.concatenate().copy", "det3d.core.bbox.box_np_ops.center_to_corner_box2d", "numpy.concatenate", "det3d.core.sampler.preprocess.box_collision_test", "numpy.arange", "range", "name.split", "sample_ops.DataBaseSamplerV2._sampler_dict[].sample", "det3d.core.sampler.preprocess.noise_per_object_v3_", "coll_mat[].any", "len", "sample_ops.DataBaseSamplerV2.append", "copy.deepcopy.append", "numpy.ones", "numpy.concatenate", "valid_samples.append", "valid_forecast.append", "sample_ops.DataBaseSamplerV2._sampler_dict[].sample", "copy.deepcopy.append", "range", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.box_collision_test", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.BatchSampler.sample", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.noise_per_object_v3_", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.BatchSampler.sample"], ["", "", "def", "sample_class_v2", "(", "self", ",", "name", ",", "num", ",", "gt_boxes", ",", "sampler_type", ")", ":", "\n", "        ", "if", "sampler_type", "!=", "\"standard\"", ":", "\n", "            ", "trajectory", ",", "name", "=", "name", ".", "split", "(", "\"_\"", ")", "\n", "\n", "", "if", "name", "not", "in", "self", ".", "_sampler_dict", ":", "\n", "            ", "return", "[", "]", ",", "[", "]", "\n", "\n", "", "if", "sampler_type", "==", "\"standard\"", ":", "\n", "            ", "sampled", "=", "self", ".", "_sampler_dict", "[", "name", "]", ".", "sample", "(", "num", ")", "\n", "", "else", ":", "\n", "            ", "sampled", "=", "[", "]", "\n", "\n", "while", "len", "(", "sampled", ")", "<", "num", ":", "\n", "                ", "sample", "=", "self", ".", "_sampler_dict", "[", "name", "]", ".", "sample", "(", "1", ")", "[", "0", "]", "\n", "if", "sample", "[", "\"trajectory\"", "]", "[", "0", "]", "!=", "trajectory", ":", "\n", "                    ", "continue", "\n", "\n", "", "sampled", ".", "append", "(", "sample", ")", "\n", "\n", "", "", "forecast", "=", "[", "]", "\n", "for", "sample", "in", "sampled", ":", "\n", "            ", "try", ":", "\n", "                ", "forecast", ".", "append", "(", "[", "sample", "[", "\"box3d_lidar\"", "]", "[", "i", "]", "[", "-", "6", ":", "]", "for", "i", "in", "range", "(", "len", "(", "sample", "[", "\"box3d_lidar\"", "]", ")", ")", "]", ")", "\n", "sample", "[", "\"name\"", "]", "=", "sample", "[", "\"name\"", "]", "[", "0", "]", "\n", "sample", "[", "\"box3d_lidar\"", "]", "=", "sample", "[", "\"box3d_lidar\"", "]", "[", "0", "]", "\n", "sample", "[", "\"difficulty\"", "]", "=", "sample", "[", "\"difficulty\"", "]", "[", "0", "]", "\n", "", "except", ":", "\n", "                ", "forecast", ".", "append", "(", "[", "sample", "[", "\"box3d_lidar\"", "]", "[", "-", "6", ":", "]", "]", ")", "\n", "\n", "", "", "sampled", "=", "copy", ".", "deepcopy", "(", "sampled", ")", "\n", "forecast", "=", "copy", ".", "deepcopy", "(", "forecast", ")", "\n", "num_gt", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "num_sampled", "=", "len", "(", "sampled", ")", "\n", "gt_boxes_bv", "=", "box_np_ops", ".", "center_to_corner_box2d", "(", "\n", "gt_boxes", "[", ":", ",", "0", ":", "2", "]", ",", "gt_boxes", "[", ":", ",", "3", ":", "5", "]", ",", "gt_boxes", "[", ":", ",", "-", "2", "]", "\n", ")", "\n", "\n", "sp_boxes", "=", "np", ".", "stack", "(", "[", "i", "[", "\"box3d_lidar\"", "]", "for", "i", "in", "sampled", "]", ",", "axis", "=", "0", ")", "\n", "\n", "valid_mask", "=", "np", ".", "zeros", "(", "[", "gt_boxes", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "valid_mask", "=", "np", ".", "concatenate", "(", "\n", "[", "valid_mask", ",", "np", ".", "ones", "(", "[", "sp_boxes", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "]", ",", "axis", "=", "0", "\n", ")", "\n", "boxes", "=", "np", ".", "concatenate", "(", "[", "gt_boxes", ",", "sp_boxes", "]", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", "\n", "if", "self", ".", "_enable_global_rot", ":", "\n", "# place samples to any place in a circle.", "\n", "            ", "prep", ".", "noise_per_object_v3_", "(", "\n", "boxes", ",", "None", ",", "valid_mask", ",", "0", ",", "0", ",", "self", ".", "_global_rot_range", ",", "num_try", "=", "100", "\n", ")", "\n", "\n", "", "sp_boxes_new", "=", "boxes", "[", "gt_boxes", ".", "shape", "[", "0", "]", ":", "]", "\n", "sp_boxes_bv", "=", "box_np_ops", ".", "center_to_corner_box2d", "(", "\n", "sp_boxes_new", "[", ":", ",", "0", ":", "2", "]", ",", "sp_boxes_new", "[", ":", ",", "3", ":", "5", "]", ",", "sp_boxes_new", "[", ":", ",", "-", "1", "]", "\n", ")", "\n", "\n", "total_bv", "=", "np", ".", "concatenate", "(", "[", "gt_boxes_bv", ",", "sp_boxes_bv", "]", ",", "axis", "=", "0", ")", "\n", "# coll_mat = collision_test_allbox(total_bv)", "\n", "coll_mat", "=", "prep", ".", "box_collision_test", "(", "total_bv", ",", "total_bv", ")", "\n", "diag", "=", "np", ".", "arange", "(", "total_bv", ".", "shape", "[", "0", "]", ")", "\n", "coll_mat", "[", "diag", ",", "diag", "]", "=", "False", "\n", "\n", "valid_samples", "=", "[", "]", "\n", "valid_forecast", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_gt", ",", "num_gt", "+", "num_sampled", ")", ":", "\n", "            ", "if", "coll_mat", "[", "i", "]", ".", "any", "(", ")", ":", "\n", "                ", "coll_mat", "[", "i", "]", "=", "False", "\n", "coll_mat", "[", ":", ",", "i", "]", "=", "False", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "_enable_global_rot", ":", "\n", "                    ", "sampled", "[", "i", "-", "num_gt", "]", "[", "\"box3d_lidar\"", "]", "[", ":", "2", "]", "=", "boxes", "[", "i", ",", ":", "2", "]", "\n", "sampled", "[", "i", "-", "num_gt", "]", "[", "\"box3d_lidar\"", "]", "[", "-", "1", "]", "=", "boxes", "[", "i", ",", "-", "1", "]", "\n", "sampled", "[", "i", "-", "num_gt", "]", "[", "\"rot_transform\"", "]", "=", "(", "\n", "boxes", "[", "i", ",", "-", "1", "]", "-", "sp_boxes", "[", "i", "-", "num_gt", ",", "-", "1", "]", "\n", ")", "\n", "", "valid_samples", ".", "append", "(", "sampled", "[", "i", "-", "num_gt", "]", ")", "\n", "valid_forecast", ".", "append", "(", "forecast", "[", "i", "-", "num_gt", "]", ")", "\n", "", "", "return", "valid_samples", ",", "valid_forecast", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.sample_ops.DataBaseSamplerV2.sample_group": [[353, 425], ["sample_ops.DataBaseSamplerV2.sample", "copy.deepcopy", "numpy.max", "det3d.core.bbox.box_np_ops.center_to_corner_box2d", "numpy.stack", "numpy.stack", "numpy.zeros", "numpy.concatenate", "numpy.concatenate().copy", "numpy.concatenate", "det3d.core.bbox.box_np_ops.center_to_corner_box2d", "numpy.concatenate", "det3d.core.sampler.preprocess.box_collision_test", "numpy.arange", "det3d.core.sampler.preprocess.noise_per_object_v3_", "coll_mat[].any", "numpy.ones", "numpy.concatenate", "range", "valid_samples.append"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.BatchSampler.sample", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.box_collision_test", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.noise_per_object_v3_"], ["", "def", "sample_group", "(", "self", ",", "name", ",", "num", ",", "gt_boxes", ",", "gt_group_ids", ")", ":", "\n", "        ", "sampled", ",", "group_num", "=", "self", ".", "sample", "(", "name", ",", "num", ")", "\n", "sampled", "=", "copy", ".", "deepcopy", "(", "sampled", ")", "\n", "# rewrite sampled group id to avoid duplicated with gt group ids", "\n", "gid_map", "=", "{", "}", "\n", "max_gt_gid", "=", "np", ".", "max", "(", "gt_group_ids", ")", "\n", "sampled_gid", "=", "max_gt_gid", "+", "1", "\n", "for", "s", "in", "sampled", ":", "\n", "            ", "gid", "=", "s", "[", "\"group_id\"", "]", "\n", "if", "gid", "in", "gid_map", ":", "\n", "                ", "s", "[", "\"group_id\"", "]", "=", "gid_map", "[", "gid", "]", "\n", "", "else", ":", "\n", "                ", "gid_map", "[", "gid", "]", "=", "sampled_gid", "\n", "s", "[", "\"group_id\"", "]", "=", "sampled_gid", "\n", "sampled_gid", "+=", "1", "\n", "\n", "", "", "num_gt", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "gt_boxes_bv", "=", "box_np_ops", ".", "center_to_corner_box2d", "(", "\n", "gt_boxes", "[", ":", ",", "0", ":", "2", "]", ",", "gt_boxes", "[", ":", ",", "3", ":", "5", "]", ",", "gt_boxes", "[", ":", ",", "-", "1", "]", "\n", ")", "\n", "\n", "sp_boxes", "=", "np", ".", "stack", "(", "[", "i", "[", "\"box3d_lidar\"", "]", "for", "i", "in", "sampled", "]", ",", "axis", "=", "0", ")", "\n", "sp_group_ids", "=", "np", ".", "stack", "(", "[", "i", "[", "\"group_id\"", "]", "for", "i", "in", "sampled", "]", ",", "axis", "=", "0", ")", "\n", "valid_mask", "=", "np", ".", "zeros", "(", "[", "gt_boxes", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "valid_mask", "=", "np", ".", "concatenate", "(", "\n", "[", "valid_mask", ",", "np", ".", "ones", "(", "[", "sp_boxes", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "]", ",", "axis", "=", "0", "\n", ")", "\n", "boxes", "=", "np", ".", "concatenate", "(", "[", "gt_boxes", ",", "sp_boxes", "]", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", "\n", "group_ids", "=", "np", ".", "concatenate", "(", "[", "gt_group_ids", ",", "sp_group_ids", "]", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "_enable_global_rot", ":", "\n", "# place samples to any place in a circle.", "\n", "            ", "prep", ".", "noise_per_object_v3_", "(", "\n", "boxes", ",", "\n", "None", ",", "\n", "valid_mask", ",", "\n", "0", ",", "\n", "0", ",", "\n", "self", ".", "_global_rot_range", ",", "\n", "group_ids", "=", "group_ids", ",", "\n", "num_try", "=", "100", ",", "\n", ")", "\n", "", "sp_boxes_new", "=", "boxes", "[", "gt_boxes", ".", "shape", "[", "0", "]", ":", "]", "\n", "sp_boxes_bv", "=", "box_np_ops", ".", "center_to_corner_box2d", "(", "\n", "sp_boxes_new", "[", ":", ",", "0", ":", "2", "]", ",", "sp_boxes_new", "[", ":", ",", "3", ":", "5", "]", ",", "sp_boxes_new", "[", ":", ",", "-", "1", "]", "\n", ")", "\n", "total_bv", "=", "np", ".", "concatenate", "(", "[", "gt_boxes_bv", ",", "sp_boxes_bv", "]", ",", "axis", "=", "0", ")", "\n", "# coll_mat = collision_test_allbox(total_bv)", "\n", "coll_mat", "=", "prep", ".", "box_collision_test", "(", "total_bv", ",", "total_bv", ")", "\n", "diag", "=", "np", ".", "arange", "(", "total_bv", ".", "shape", "[", "0", "]", ")", "\n", "coll_mat", "[", "diag", ",", "diag", "]", "=", "False", "\n", "valid_samples", "=", "[", "]", "\n", "idx", "=", "num_gt", "\n", "for", "num", "in", "group_num", ":", "\n", "            ", "if", "coll_mat", "[", "idx", ":", "idx", "+", "num", "]", ".", "any", "(", ")", ":", "\n", "                ", "coll_mat", "[", "idx", ":", "idx", "+", "num", "]", "=", "False", "\n", "coll_mat", "[", ":", ",", "idx", ":", "idx", "+", "num", "]", "=", "False", "\n", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                    ", "if", "self", ".", "_enable_global_rot", ":", "\n", "                        ", "sampled", "[", "idx", "-", "num_gt", "+", "i", "]", "[", "\"box3d_lidar\"", "]", "[", ":", "2", "]", "=", "boxes", "[", "\n", "idx", "+", "i", ",", ":", "2", "\n", "]", "\n", "sampled", "[", "idx", "-", "num_gt", "+", "i", "]", "[", "\"box3d_lidar\"", "]", "[", "-", "1", "]", "=", "boxes", "[", "\n", "idx", "+", "i", ",", "-", "1", "\n", "]", "\n", "sampled", "[", "idx", "-", "num_gt", "+", "i", "]", "[", "\"rot_transform\"", "]", "=", "(", "\n", "boxes", "[", "idx", "+", "i", ",", "-", "1", "]", "-", "sp_boxes", "[", "idx", "+", "i", "-", "num_gt", ",", "-", "1", "]", "\n", ")", "\n", "\n", "", "valid_samples", ".", "append", "(", "sampled", "[", "idx", "-", "num_gt", "+", "i", "]", ")", "\n", "", "", "idx", "+=", "num", "\n", "", "return", "valid_samples", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.BatchSampler.__init__": [[20, 34], ["numpy.arange", "len", "len", "numpy.random.shuffle"], "methods", ["None"], ["\n", "", "", "", "def", "drop_arrays_by_name", "(", "gt_names", ",", "used_classes", ")", ":", "\n", "    ", "inds", "=", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "gt_names", ")", "if", "x", "not", "in", "used_classes", "]", "\n", "inds", "=", "np", ".", "array", "(", "inds", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "return", "inds", "\n", "\n", "", "def", "forecast_augmentation", "(", "output", ")", ":", "\n", "    ", "ground_truth", ",", "points", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "out", "in", "output", ":", "\n", "        ", "gt", ",", "pt", "=", "out", "\n", "\n", "ground_truth", ".", "append", "(", "gt", ")", ",", "points", ".", "append", "(", "pt", ")", "\n", "\n", "", "return", "ground_truth", ",", "points", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.BatchSampler._sample": [[35, 43], ["preprocess.BatchSampler._indices[].copy", "preprocess.BatchSampler._reset"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.BatchSampler._reset"], ["\n", "", "def", "forecast_voxelization", "(", "output", ")", ":", "\n", "    ", "voxels", ",", "coordinates", ",", "num_points", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "out", "in", "output", ":", "\n", "        ", "vo", ",", "co", ",", "pt", "=", "out", "\n", "\n", "voxels", ".", "append", "(", "vo", ")", ",", "coordinates", ".", "append", "(", "co", ")", ",", "num_points", ".", "append", "(", "pt", ")", "\n", "\n", "", "return", "voxels", ",", "coordinates", ",", "num_points", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.BatchSampler._reset": [[44, 50], ["numpy.random.shuffle"], "methods", ["None"], ["\n", "", "def", "z_offset", "(", "points", ",", "\n", "meters_max", "=", "45", ",", "\n", "pixels_per_meter", "=", "2", ",", "\n", "hist_max_per_pixel", "=", "50", ",", "\n", "zbins", "=", "np", ".", "array", "(", "[", "-", "3.", ",", "0.0", ",", "1.", ",", "2.", ",", "3.", ",", "10.", "]", ")", ",", "\n", "hist_normalize", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.BatchSampler.sample": [[51, 54], ["preprocess.BatchSampler._sample"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.BatchSampler._sample"], ["    ", "assert", "(", "points", ".", "shape", "[", "-", "1", "]", ">=", "3", ")", "\n", "assert", "(", "points", ".", "shape", "[", "0", "]", ">", "points", ".", "shape", "[", "1", "]", ")", "\n", "meters_total", "=", "meters_max", "*", "2", "\n", "pixels_total", "=", "meters_total", "*", "pixels_per_meter", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.DataBasePreprocessing.__call__": [[58, 60], ["preprocess.DataBasePreprocessing._preprocess"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.DBFilterByMinNumPoint._preprocess"], ["assert", "(", "np", ".", "isclose", "(", "xbins", "[", "0", "]", ",", "-", "1", "*", "xbins", "[", "-", "1", "]", ")", ")", "\n", "assert", "(", "np", ".", "isclose", "(", "ybins", "[", "0", "]", ",", "-", "1", "*", "ybins", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.DataBasePreprocessing._preprocess": [[61, 64], ["None"], "methods", ["None"], ["hist", "=", "np", ".", "histogramdd", "(", "points", "[", "...", ",", ":", "3", "]", ",", "bins", "=", "(", "xbins", ",", "ybins", ",", "zbins", ")", ",", "normed", "=", "False", ")", "[", "0", "]", "\n", "\n", "# Clip histogram ", "\n", "hist", "[", "hist", ">", "hist_max_per_pixel", "]", "=", "hist_max_per_pixel", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.DBFilterByDifficulty.__init__": [[67, 70], ["logger.info"], "methods", ["None"], ["if", "hist_normalize", ":", "\n", "        ", "overhead_splat", "=", "hist", "/", "hist_max_per_pixel", "\n", "", "else", ":", "\n", "        ", "overhead_splat", "=", "hist", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.DBFilterByDifficulty._preprocess": [[71, 80], ["db_infos.items"], "methods", ["None"], ["\n", "", "overhead_splat", "=", "cv2", ".", "resize", "(", "overhead_splat", ",", "dsize", "=", "(", "180", ",", "180", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "return", "overhead_splat", ",", "xbins", ",", "ybins", ",", "zbins", "\n", "\n", "", "def", "get_mask", "(", "mask", ",", "t", ",", "angle", ",", "flip", ",", "scale", ")", ":", "\n", "    ", "angle", "=", "np", ".", "degrees", "(", "-", "angle", ")", "\n", "if", "flip", "[", "0", "]", ":", "\n", "        ", "mask", "=", "np", ".", "fliplr", "(", "mask", ")", "\n", "", "if", "flip", "[", "1", "]", ":", "\n", "        ", "mask", "=", "np", ".", "flipud", "(", "mask", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.DBFilterByMinNumPoint.__init__": [[83, 86], ["logger.info"], "methods", ["None"], ["mask", "=", "cv2", ".", "warpAffine", "(", "mask", ",", "rot_mat", ",", "(", "180", ",", "180", ")", ")", "\n", "\n", "M", "=", "np", ".", "float32", "(", "[", "[", "1", ",", "0", ",", "t", "[", "0", "]", "]", ",", "\n", "[", "0", ",", "1", ",", "t", "[", "1", "]", "]", "]", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.DBFilterByMinNumPoint._preprocess": [[87, 101], ["preprocess.DBFilterByMinNumPoint._min_gt_point_dict.items", "print", "filtered_infos.append"], "methods", ["None"], ["\n", "mask", "=", "cv2", ".", "warpAffine", "(", "mask", ",", "M", ",", "(", "180", ",", "180", ")", ")", "\n", "\n", "return", "mask", "\n", "\n", "", "@", "PIPELINES", ".", "register_module", "\n", "class", "Preprocess", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "shuffle_points", "=", "cfg", ".", "shuffle_points", "\n", "self", ".", "min_points_in_gt", "=", "cfg", ".", "get", "(", "\"min_points_in_gt\"", ",", "-", "1", ")", "\n", "\n", "self", ".", "mode", "=", "cfg", ".", "mode", "\n", "if", "self", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "self", ".", "global_rotation_noise", "=", "cfg", ".", "global_rot_noise", "\n", "self", ".", "global_scaling_noise", "=", "cfg", ".", "global_scale_noise", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.DataBasePreprocessor.__init__": [[104, 106], ["None"], "methods", ["None"], ["if", "cfg", ".", "db_sampler", "!=", "None", ":", "\n", "                ", "self", ".", "db_sampler", "=", "build_dbsampler", "(", "cfg", ".", "db_sampler", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.DataBasePreprocessor.__call__": [[107, 111], ["prepor"], "methods", ["None"], ["                ", "self", ".", "db_sampler", "=", "None", "\n", "\n", "", "self", ".", "npoints", "=", "cfg", ".", "get", "(", "\"npoints\"", ",", "-", "1", ")", "\n", "self", ".", "sampler_type", "=", "cfg", ".", "sampler_type", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.filter_gt_box_outside_range": [[113, 128], ["det3d.core.bbox.box_np_ops.center_to_corner_box2d", "det3d.core.bbox.box_np_ops.minmax_to_corner_2d", "det3d.core.bbox.geometry.points_in_convex_polygon_jit", "numpy.any", "box_np_ops.center_to_corner_box2d.reshape", "det3d.core.bbox.geometry.points_in_convex_polygon_jit.reshape", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box2d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.minmax_to_corner_2d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.points_in_convex_polygon_jit"], ["\n", "", "def", "__call__", "(", "self", ",", "res", ",", "info", ")", ":", "\n", "        ", "res", "[", "\"mode\"", "]", "=", "self", ".", "mode", "\n", "\n", "if", "res", "[", "\"type\"", "]", "in", "[", "\"WaymoDataset\"", "]", ":", "\n", "            ", "if", "\"combined\"", "in", "res", "[", "\"lidar\"", "]", ":", "\n", "                ", "points", "=", "res", "[", "\"lidar\"", "]", "[", "\"combined\"", "]", "\n", "", "else", ":", "\n", "                ", "points", "=", "res", "[", "\"lidar\"", "]", "[", "\"points\"", "]", "\n", "", "", "elif", "res", "[", "\"type\"", "]", "in", "[", "\"NuScenesDataset\"", "]", ":", "\n", "            ", "points", "=", "res", "[", "\"lidar\"", "]", "[", "\"combined\"", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "anno_dict", "=", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.filter_gt_box_outside_range_by_center": [[130, 143], ["det3d.core.bbox.box_np_ops.minmax_to_corner_2d", "det3d.core.bbox.geometry.points_in_convex_polygon_jit", "det3d.core.bbox.geometry.points_in_convex_polygon_jit.reshape", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.minmax_to_corner_2d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.points_in_convex_polygon_jit"], ["            ", "gt_dict", "=", "{", "\n", "\"gt_boxes\"", ":", "anno_dict", "[", "\"boxes\"", "]", ",", "\n", "\"gt_names\"", ":", "[", "np", ".", "array", "(", "box", ")", ".", "reshape", "(", "-", "1", ")", "for", "box", "in", "anno_dict", "[", "\"names\"", "]", "]", ",", "\n", "\"gt_trajectory\"", ":", "[", "np", ".", "array", "(", "box", ")", ".", "reshape", "(", "-", "1", ")", "for", "box", "in", "anno_dict", "[", "\"trajectory\"", "]", "]", ",", "\n", "}", "\n", "\n", "", "if", "self", ".", "mode", "==", "\"train\"", "and", "not", "self", ".", "no_augmentation", ":", "\n", "            ", "selected", "=", "[", "drop_arrays_by_name", "(", "box", ",", "[", "\"DontCare\"", ",", "\"ignore\"", ",", "\"UNKNOWN\"", "]", ")", "for", "box", "in", "gt_dict", "[", "\"gt_names\"", "]", "]", "\n", "_dict_select", "(", "gt_dict", ",", "selected", ")", "\n", "\n", "if", "self", ".", "min_points_in_gt", ">", "0", ":", "\n", "                ", "point_counts", "=", "[", "box_np_ops", ".", "points_count_rbbox", "(", "points", ",", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "0", "]", ")", "for", "i", "in", "range", "(", "len", "(", "selected", ")", ")", "]", "\n", "mask", "=", "[", "point_counts", "[", "i", "]", ">=", "self", ".", "min_points_in_gt", "for", "i", "in", "range", "(", "len", "(", "selected", ")", ")", "]", "\n", "_dict_select", "(", "gt_dict", ",", "mask", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.filter_gt_low_points": [[145, 155], ["numpy.ones", "numpy.ones", "enumerate", "det3d.core.bbox.box_np_ops.points_in_rbbox", "masks.reshape.reshape", "numpy.logical_not"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.points_in_rbbox"], ["", "gt_boxes_mask", "=", "[", "np", ".", "array", "(", "[", "n", "in", "self", ".", "class_names", "for", "n", "in", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "for", "i", "in", "range", "(", "len", "(", "selected", ")", ")", "]", "\n", "\n", "if", "self", ".", "db_sampler", ":", "\n", "                ", "sampled_dict", "=", "self", ".", "db_sampler", ".", "sample_all", "(", "\n", "res", "[", "\"metadata\"", "]", "[", "\"image_prefix\"", "]", ",", "\n", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "0", "]", ",", "\n", "gt_dict", "[", "\"gt_names\"", "]", "[", "0", "]", ",", "\n", "gt_dict", "[", "\"gt_trajectory\"", "]", "[", "0", "]", ",", "\n", "res", "[", "\"metadata\"", "]", "[", "\"num_point_features\"", "]", ",", "\n", "False", ",", "\n", "gt_group_ids", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.mask_points_in_corners": [[157, 161], ["det3d.core.bbox.box_np_ops.corner_to_surfaces_3d", "det3d.core.bbox.geometry.points_in_convex_polygon_3d_jit"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corner_to_surfaces_3d", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.points_in_convex_polygon_3d_jit"], ["road_planes", "=", "None", ",", "\n", "sampler_type", "=", "self", ".", "sampler_type", "\n", ")", "\n", "\n", "if", "sampled_dict", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess._rotation_matrix_3d_": [[163, 183], ["numpy.sin", "numpy.cos", "numpy.eye"], "function", ["None"], ["sampled_gt_trajectory", "=", "sampled_dict", "[", "\"gt_trajectory\"", "]", "\n", "sampled_gt_boxes", "=", "sampled_dict", "[", "\"gt_boxes\"", "]", "\n", "\n", "sampled_points", "=", "sampled_dict", "[", "\"points\"", "]", "\n", "sampled_gt_masks", "=", "sampled_dict", "[", "\"gt_masks\"", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_dict", "[", "\"gt_boxes\"", "]", ")", ")", ":", "\n", "                        ", "for", "j", "in", "range", "(", "len", "(", "sampled_gt_boxes", ")", ")", ":", "\n", "                            ", "try", ":", "\n", "                                ", "sampled_gt_boxes", "[", "j", "]", "[", "-", "6", ":", "]", "=", "sampled_dict", "[", "\"gt_forecast\"", "]", "[", "j", "]", "[", "i", "]", "\n", "", "except", ":", "\n", "                                ", "sampled_gt_boxes", "[", "j", "]", "[", "-", "6", ":", "]", "=", "sampled_dict", "[", "\"gt_forecast\"", "]", "[", "j", "]", "[", "0", "]", "\n", "\n", "", "", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "=", "np", ".", "concatenate", "(", "[", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", ",", "sampled_gt_names", "]", ",", "axis", "=", "0", ")", "\n", "gt_dict", "[", "\"gt_trajectory\"", "]", "[", "i", "]", "=", "np", ".", "concatenate", "(", "[", "gt_dict", "[", "\"gt_trajectory\"", "]", "[", "i", "]", ",", "sampled_gt_trajectory", "]", ",", "axis", "=", "0", ")", "\n", "\n", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "i", "]", "=", "np", ".", "concatenate", "(", "[", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "i", "]", ",", "sampled_gt_boxes", "]", ")", "\n", "gt_boxes_mask", "[", "i", "]", "=", "np", ".", "concatenate", "(", "[", "gt_boxes_mask", "[", "i", "]", ",", "sampled_gt_masks", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "points", "=", "np", ".", "concatenate", "(", "[", "sampled_points", ",", "points", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess._rotation_box2d_jit_": [[185, 194], ["numpy.sin", "numpy.cos"], "function", ["None"], ["\n", "gt_classes", "=", "[", "np", ".", "array", "(", "[", "self", ".", "class_names", ".", "index", "(", "n", ")", "+", "1", "for", "n", "in", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "int32", ",", ")", "for", "i", "in", "range", "(", "len", "(", "gt_dict", "[", "\"gt_boxes\"", "]", ")", ")", "]", "\n", "gt_dict", "[", "\"gt_classes\"", "]", "=", "gt_classes", "\n", "\n", "gt_dict", "[", "\"gt_boxes\"", "]", ",", "points", ",", "flip_aug", "=", "prep", ".", "random_flip_both", "(", "gt_dict", "[", "\"gt_boxes\"", "]", ",", "points", ")", "\n", "gt_dict", "[", "\"gt_boxes\"", "]", ",", "points", ",", "rot_aug", "=", "prep", ".", "global_rotation", "(", "gt_dict", "[", "\"gt_boxes\"", "]", ",", "points", ",", "rotation", "=", "self", ".", "global_rotation_noise", ")", "\n", "gt_dict", "[", "\"gt_boxes\"", "]", ",", "points", ",", "scale_aug", "=", "prep", ".", "global_scaling_v2", "(", "gt_dict", "[", "\"gt_boxes\"", "]", ",", "points", ",", "*", "self", ".", "global_scaling_noise", ")", "\n", "gt_dict", "[", "\"gt_boxes\"", "]", ",", "points", ",", "trans_aug", "=", "prep", ".", "global_translate_", "(", "gt_dict", "[", "\"gt_boxes\"", "]", ",", "points", ",", "noise_translate_std", "=", "self", ".", "global_translate_std", ")", "\n", "\n", "", "elif", "self", ".", "no_augmentation", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess._box_single_to_corner_jit": [[196, 216], ["numba.jit", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.zeros", "range", "np.zeros.reshape", "numpy.sin", "numpy.cos", "boxes.reshape"], "function", ["None"], ["_dict_select", "(", "gt_dict", ",", "gt_boxes_mask", ")", "\n", "\n", "gt_classes", "=", "[", "np", ".", "array", "(", "[", "self", ".", "class_names", ".", "index", "(", "n", ")", "+", "1", "for", "n", "in", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "int32", ",", ")", "for", "i", "in", "range", "(", "len", "(", "gt_dict", "[", "\"gt_names\"", "]", ")", ")", "]", "\n", "gt_dict", "[", "\"gt_classes\"", "]", "=", "gt_classes", "\n", "\n", "", "if", "self", ".", "shuffle_points", ":", "\n", "            ", "rng", "=", "np", ".", "random", ".", "default_rng", "(", "0", ")", "\n", "rng", ".", "shuffle", "(", "points", ")", "\n", "\n", "", "if", "self", ".", "mode", "!=", "\"train\"", ":", "\n", "            ", "trans_aug", "=", "[", "0", ",", "0", "]", "\n", "rot_aug", "=", "0", "\n", "flip_aug", "=", "[", "False", ",", "False", "]", "\n", "scale_aug", "=", "1", "\n", "\n", "#bev_map, xbins, ybins, zbins, = z_offset(points)", "\n", "", "bev", "=", "get_mask", "(", "anno_dict", "[", "\"bev\"", "]", ",", "t", "=", "trans_aug", ",", "angle", "=", "rot_aug", ",", "flip", "=", "flip_aug", ",", "scale", "=", "scale_aug", ")", "\n", "\n", "#bev = np.concatenate((bev_map, bev[...,None]), axis=-1)", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"bev_map\"", "]", "=", "bev", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.noise_per_box": [[218, 248], ["det3d.core.bbox.box_np_ops.box2d_to_corner_jit", "numpy.zeros", "numpy.zeros", "range", "numpy.ones", "range", "preprocess._rotation_box2d_jit_", "preprocess.box_collision_test", "np.zeros.reshape", "box_collision_test.any"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.box2d_to_corner_jit", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess._rotation_box2d_jit_", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.box_collision_test"], ["res", "[", "\"lidar\"", "]", "[", "\"points\"", "]", "=", "points", "\n", "\n", "if", "self", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "=", "gt_dict", "\n", "\n", "", "return", "res", ",", "info", "\n", "\n", "\n", "", "", "@", "PIPELINES", ".", "register_module", "\n", "class", "Voxelization", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "cfg", "=", "kwargs", ".", "get", "(", "\"cfg\"", ",", "None", ")", "\n", "self", ".", "range", "=", "cfg", ".", "range", "\n", "self", ".", "voxel_size", "=", "cfg", ".", "voxel_size", "\n", "self", ".", "max_points_in_voxel", "=", "cfg", ".", "max_points_in_voxel", "\n", "self", ".", "max_voxel_num", "=", "[", "cfg", ".", "max_voxel_num", ",", "cfg", ".", "max_voxel_num", "]", "if", "isinstance", "(", "cfg", ".", "max_voxel_num", ",", "int", ")", "else", "cfg", ".", "max_voxel_num", "\n", "\n", "self", ".", "double_flip", "=", "cfg", ".", "get", "(", "'double_flip'", ",", "False", ")", "\n", "\n", "self", ".", "voxel_generator", "=", "VoxelGenerator", "(", "\n", "voxel_size", "=", "self", ".", "voxel_size", ",", "\n", "point_cloud_range", "=", "self", ".", "range", ",", "\n", "max_num_points", "=", "self", ".", "max_points_in_voxel", ",", "\n", "max_voxels", "=", "self", ".", "max_voxel_num", "[", "0", "]", ",", "\n", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "res", ",", "info", ")", ":", "\n", "        ", "voxel_size", "=", "self", ".", "voxel_generator", ".", "voxel_size", "\n", "pc_range", "=", "self", ".", "voxel_generator", ".", "point_cloud_range", "\n", "grid_size", "=", "self", ".", "voxel_generator", ".", "grid_size", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.noise_per_box_group": [[250, 291], ["det3d.core.bbox.box_np_ops.box2d_to_corner_jit", "group_nums.max", "numpy.zeros", "numpy.zeros", "numpy.ones", "range", "range", "preprocess.box_collision_test", "range", "preprocess._rotation_box2d_jit_", "current_corners[].reshape", "box_collision_test.any", "range"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.box2d_to_corner_jit", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.box_collision_test", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess._rotation_box2d_jit_"], ["            ", "gt_dict", "=", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "\n", "bv_range", "=", "pc_range", "[", "[", "0", ",", "1", ",", "3", ",", "4", "]", "]", "\n", "mask", "=", "[", "prep", ".", "filter_gt_box_outside_range", "(", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "0", "]", ",", "bv_range", ")", "for", "i", "in", "range", "(", "len", "(", "gt_dict", "[", "\"gt_boxes\"", "]", ")", ")", "]", "\n", "_dict_select", "(", "gt_dict", ",", "mask", ")", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "=", "gt_dict", "\n", "max_voxels", "=", "self", ".", "max_voxel_num", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "max_voxels", "=", "self", ".", "max_voxel_num", "[", "1", "]", "\n", "\n", "", "voxels", ",", "coordinates", ",", "num_points", "=", "self", ".", "voxel_generator", ".", "generate", "(", "res", "[", "\"lidar\"", "]", "[", "\"points\"", "]", ",", "max_voxels", "=", "max_voxels", ")", "\n", "num_voxels", "=", "np", ".", "array", "(", "[", "voxels", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"voxels\"", "]", "=", "dict", "(", "\n", "voxels", "=", "voxels", ",", "\n", "coordinates", "=", "coordinates", ",", "\n", "num_points", "=", "num_points", ",", "\n", "num_voxels", "=", "num_voxels", ",", "\n", "shape", "=", "grid_size", ",", "\n", "range", "=", "pc_range", ",", "\n", "size", "=", "voxel_size", "\n", ")", "\n", "\n", "double_flip", "=", "self", ".", "double_flip", "and", "(", "res", "[", "\"mode\"", "]", "!=", "'train'", ")", "\n", "\n", "if", "double_flip", ":", "\n", "            ", "flip_voxels", ",", "flip_coordinates", ",", "flip_num_points", "=", "self", ".", "voxel_generator", ".", "generate", "(", "\n", "res", "[", "\"lidar\"", "]", "[", "\"yflip_points\"", "]", "\n", ")", "\n", "flip_num_voxels", "=", "np", ".", "array", "(", "[", "flip_voxels", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"yflip_voxels\"", "]", "=", "dict", "(", "\n", "voxels", "=", "flip_voxels", ",", "\n", "coordinates", "=", "flip_coordinates", ",", "\n", "num_points", "=", "flip_num_points", ",", "\n", "num_voxels", "=", "flip_num_voxels", ",", "\n", "shape", "=", "grid_size", ",", "\n", "range", "=", "pc_range", ",", "\n", "size", "=", "voxel_size", "\n", ")", "\n", "\n", "flip_voxels", ",", "flip_coordinates", ",", "flip_num_points", "=", "self", ".", "voxel_generator", ".", "generate", "(", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.noise_per_box_group_v2_": [[293, 371], ["det3d.core.bbox.box_np_ops.box2d_to_corner_jit", "group_nums.max", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "corners_norm.reshape.reshape", "numpy.ones", "range", "range", "preprocess.box_collision_test", "range", "numpy.sqrt", "numpy.arctan2", "numpy.sin", "numpy.cos", "preprocess._rotation_box2d_jit_", "current_corners[].reshape", "box_collision_test.any", "range", "numpy.sin", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.box2d_to_corner_jit", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.box_collision_test", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess._rotation_box2d_jit_"], [")", "\n", "flip_num_voxels", "=", "np", ".", "array", "(", "[", "flip_voxels", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"xflip_voxels\"", "]", "=", "dict", "(", "\n", "voxels", "=", "flip_voxels", ",", "\n", "coordinates", "=", "flip_coordinates", ",", "\n", "num_points", "=", "flip_num_points", ",", "\n", "num_voxels", "=", "flip_num_voxels", ",", "\n", "shape", "=", "grid_size", ",", "\n", "range", "=", "pc_range", ",", "\n", "size", "=", "voxel_size", "\n", ")", "\n", "\n", "flip_voxels", ",", "flip_coordinates", ",", "flip_num_points", "=", "self", ".", "voxel_generator", ".", "generate", "(", "\n", "res", "[", "\"lidar\"", "]", "[", "\"double_flip_points\"", "]", "\n", ")", "\n", "flip_num_voxels", "=", "np", ".", "array", "(", "[", "flip_voxels", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"double_flip_voxels\"", "]", "=", "dict", "(", "\n", "voxels", "=", "flip_voxels", ",", "\n", "coordinates", "=", "flip_coordinates", ",", "\n", "num_points", "=", "flip_num_points", ",", "\n", "num_voxels", "=", "flip_num_voxels", ",", "\n", "shape", "=", "grid_size", ",", "\n", "range", "=", "pc_range", ",", "\n", "size", "=", "voxel_size", "\n", ")", "\n", "\n", "", "return", "res", ",", "info", "\n", "\n", "", "", "def", "flatten", "(", "box", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "box", ",", "axis", "=", "0", ")", "\n", "\n", "", "def", "merge_multi_group_label", "(", "gt_classes", ",", "num_classes_by_task", ")", ":", "\n", "    ", "num_task", "=", "len", "(", "gt_classes", ")", "\n", "flag", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "num_task", ")", ":", "\n", "        ", "gt_classes", "[", "i", "]", "+=", "flag", "\n", "flag", "+=", "num_classes_by_task", "[", "i", "]", "\n", "\n", "", "return", "flatten", "(", "gt_classes", ")", "\n", "\n", "", "@", "PIPELINES", ".", "register_module", "\n", "class", "AssignLabel", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Return CenterNet training labels like heatmap, height, offset\"\"\"", "\n", "assigner_cfg", "=", "kwargs", "[", "\"cfg\"", "]", "\n", "self", ".", "radius_mult", "=", "assigner_cfg", ".", "radius_mult", "\n", "self", ".", "sampler_type", "=", "assigner_cfg", ".", "sampler_type", "\n", "\n", "self", ".", "out_size_factor", "=", "assigner_cfg", ".", "out_size_factor", "\n", "self", ".", "tasks", "=", "assigner_cfg", ".", "target_assigner", ".", "tasks", "\n", "self", ".", "gaussian_overlap", "=", "assigner_cfg", ".", "gaussian_overlap", "\n", "self", ".", "_max_objs", "=", "assigner_cfg", ".", "max_objs", "\n", "self", ".", "_min_radius", "=", "assigner_cfg", ".", "min_radius", "\n", "\n", "", "def", "__call__", "(", "self", ",", "res", ",", "info", ")", ":", "\n", "        ", "max_objs", "=", "self", ".", "_max_objs", "\n", "class_names_by_task", "=", "[", "t", ".", "class_names", "for", "t", "in", "self", ".", "tasks", "]", "\n", "num_classes_by_task", "=", "[", "t", ".", "num_class", "for", "t", "in", "self", ".", "tasks", "]", "\n", "\n", "# Calculate output featuremap size", "\n", "grid_size", "=", "res", "[", "\"lidar\"", "]", "[", "\"voxels\"", "]", "[", "\"shape\"", "]", "\n", "pc_range", "=", "res", "[", "\"lidar\"", "]", "[", "\"voxels\"", "]", "[", "\"range\"", "]", "\n", "voxel_size", "=", "res", "[", "\"lidar\"", "]", "[", "\"voxels\"", "]", "[", "\"size\"", "]", "\n", "\n", "feature_map_size", "=", "grid_size", "[", ":", "2", "]", "//", "self", ".", "out_size_factor", "\n", "\n", "example_forecast", "=", "[", "]", "\n", "if", "res", "[", "\"mode\"", "]", "==", "\"train\"", ":", "\n", "            ", "length", "=", "len", "(", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "[", "\"gt_boxes\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "length", "=", "len", "(", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "[", "\"boxes\"", "]", ")", "\n", "\n", "", "classname", "=", "\"car\"", "if", "\"car\"", "in", "class_names_by_task", "[", "0", "]", "[", "0", "]", "else", "\"pedestrian\"", "\n", "\n", "if", "classname", "==", "\"car\"", ":", "\n", "            ", "trajectory_map", "=", "{", "\"static_car\"", ":", "1", ",", "\"linear_car\"", ":", "2", ",", "\"nonlinear_car\"", ":", "3", "}", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.noise_per_box_v2_": [[373, 428], ["det3d.core.bbox.box_np_ops.box2d_to_corner_jit", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "corners_norm.reshape.reshape", "range", "numpy.ones", "range", "numpy.sqrt", "numpy.arctan2", "numpy.sin", "numpy.cos", "preprocess._rotation_box2d_jit_", "preprocess.box_collision_test", "numpy.sin", "numpy.cos", "np.zeros.reshape", "box_collision_test.any"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.box2d_to_corner_jit", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess._rotation_box2d_jit_", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.box_collision_test"], ["", "else", ":", "\n", "            ", "trajectory_map", "=", "{", "\"static_pedestrian\"", ":", "1", ",", "\"linear_pedestrian\"", ":", "2", ",", "\"nonlinear_pedestrian\"", ":", "3", "}", "\n", "forecast_map", "=", "{", "\"pedestrian_1\"", ":", "1", ",", "\"pedestrian_2\"", ":", "2", ",", "\"pedestrian_3\"", ":", "3", ",", "\"pedestrian_4\"", ":", "4", ",", "\"pedestrian_5\"", ":", "5", ",", "\"pedestrian_6\"", ":", "6", ",", "\"pedestrian_7\"", ":", "7", "}", "\n", "\n", "", "if", "res", "[", "\"mode\"", "]", "==", "\"train\"", ":", "\n", "            ", "gt_dict", "=", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "\n", "gt_dict", "[", "\"gt_names_trajectory\"", "]", ",", "gt_dict", "[", "\"gt_names_forecast\"", "]", ",", "gt_dict", "[", "\"gt_classes_trajectory\"", "]", ",", "gt_dict", "[", "\"gt_classes_forecast\"", "]", ",", "gt_dict", "[", "\"gt_boxes_trajectory\"", "]", ",", "gt_dict", "[", "\"gt_boxes_forecast\"", "]", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                ", "class_names", "=", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "\n", "trajectory_names", "=", "gt_dict", "[", "\"gt_trajectory\"", "]", "[", "i", "]", "\n", "boxes", "=", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "i", "]", "\n", "\n", "name_trajectories", ",", "classes_trajectories", ",", "boxes_trajectories", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "name", ",", "trajectory", ",", "box", "in", "zip", "(", "class_names", ",", "trajectory_names", ",", "boxes", ")", ":", "\n", "                    ", "name_trajectories", ".", "append", "(", "\"{}_{}\"", ".", "format", "(", "trajectory", ",", "name", ")", ")", "\n", "classes_trajectories", ".", "append", "(", "trajectory_map", "[", "\"{}_{}\"", ".", "format", "(", "trajectory", ",", "name", ")", "]", ")", "\n", "boxes_trajectories", ".", "append", "(", "box", ")", "\n", "\n", "", "gt_dict", "[", "\"gt_names_trajectory\"", "]", ".", "append", "(", "np", ".", "array", "(", "name_trajectories", ")", ")", "\n", "gt_dict", "[", "\"gt_classes_trajectory\"", "]", ".", "append", "(", "np", ".", "array", "(", "classes_trajectories", ")", ")", "\n", "gt_dict", "[", "\"gt_boxes_trajectory\"", "]", ".", "append", "(", "np", ".", "array", "(", "boxes_trajectories", ")", ")", "\n", "\n", "", "name_forecast", ",", "classes_forecast", ",", "boxes_forecast", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                ", "class_names", "=", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "\n", "boxes", "=", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "i", "]", "\n", "\n", "for", "name", ",", "box", "in", "zip", "(", "class_names", ",", "boxes", ")", ":", "\n", "                    ", "name_forecast", ".", "append", "(", "\"{}_{}\"", ".", "format", "(", "name", ",", "i", "+", "1", ")", ")", "\n", "classes_forecast", ".", "append", "(", "forecast_map", "[", "\"{}_{}\"", ".", "format", "(", "name", ",", "i", "+", "1", ")", "]", ")", "\n", "boxes_forecast", ".", "append", "(", "box", ")", "\n", "\n", "", "", "gt_dict", "[", "\"gt_names_forecast\"", "]", "=", "length", "*", "[", "np", ".", "array", "(", "name_forecast", ")", "]", "\n", "gt_dict", "[", "\"gt_classes_forecast\"", "]", "=", "length", "*", "[", "np", ".", "array", "(", "classes_forecast", ")", "]", "\n", "gt_dict", "[", "\"gt_boxes_forecast\"", "]", "=", "length", "*", "[", "np", ".", "array", "(", "boxes_forecast", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                ", "example", "=", "{", "}", "\n", "# reorganize the gt_dict by tasks", "\n", "task_masks", "=", "[", "]", "\n", "flag", "=", "0", "\n", "for", "class_name", "in", "class_names_by_task", ":", "\n", "                    ", "task_masks", ".", "append", "(", "\n", "[", "\n", "np", ".", "where", "(", "\n", "gt_dict", "[", "\"gt_classes\"", "]", "[", "i", "]", "==", "class_name", ".", "index", "(", "j", ")", "+", "1", "+", "flag", "\n", ")", "\n", "for", "j", "in", "class_name", "\n", "]", "\n", ")", "\n", "flag", "+=", "len", "(", "class_name", ")", "\n", "\n", "", "task_boxes", "=", "[", "]", "\n", "task_classes", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.points_transform_": [[430, 448], ["numpy.zeros", "range", "range", "preprocess._rotation_matrix_3d_", "range"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess._rotation_matrix_3d_"], ["flag2", "=", "0", "\n", "for", "idx", ",", "mask", "in", "enumerate", "(", "task_masks", ")", ":", "\n", "                    ", "task_box", "=", "[", "]", "\n", "task_class", "=", "[", "]", "\n", "task_name", "=", "[", "]", "\n", "for", "m", "in", "mask", ":", "\n", "                        ", "task_box", ".", "append", "(", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "i", "]", "[", "m", "]", ")", "\n", "task_class", ".", "append", "(", "gt_dict", "[", "\"gt_classes\"", "]", "[", "i", "]", "[", "m", "]", "-", "flag2", ")", "\n", "task_name", ".", "append", "(", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "[", "m", "]", ")", "\n", "", "task_boxes", ".", "append", "(", "np", ".", "concatenate", "(", "task_box", ",", "axis", "=", "0", ")", ")", "\n", "task_classes", ".", "append", "(", "np", ".", "concatenate", "(", "task_class", ")", ")", "\n", "task_names", ".", "append", "(", "np", ".", "concatenate", "(", "task_name", ")", ")", "\n", "flag2", "+=", "len", "(", "mask", ")", "\n", "\n", "", "for", "task_box", "in", "task_boxes", ":", "\n", "# limit rad to [-pi, pi]", "\n", "                    ", "task_box", "[", ":", ",", "-", "1", "]", "=", "box_np_ops", ".", "limit_period", "(", "\n", "task_box", "[", ":", ",", "-", "1", "]", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", "*", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.box3d_transform_": [[450, 457], ["range"], "function", ["None"], ["task_box", "[", ":", ",", "-", "2", "]", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", "*", "2", "\n", ")", "\n", "\n", "# print(gt_dict.keys())", "\n", "", "gt_dict", "[", "\"gt_classes\"", "]", "[", "i", "]", "=", "task_classes", "\n", "gt_dict", "[", "\"gt_names\"", "]", "[", "i", "]", "=", "task_names", "\n", "gt_dict", "[", "\"gt_boxes\"", "]", "[", "i", "]", "=", "task_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess._select_transform": [[459, 465], ["numpy.zeros", "range"], "function", ["None"], ["\n", "draw_gaussian", "=", "draw_umich_gaussian", "\n", "\n", "hms", ",", "anno_boxs", ",", "inds", ",", "masks", ",", "cats", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "idx", ",", "task", "in", "enumerate", "(", "self", ".", "tasks", ")", ":", "\n", "                    ", "hm", "=", "np", ".", "zeros", "(", "(", "len", "(", "class_names_by_task", "[", "idx", "]", ")", ",", "feature_map_size", "[", "1", "]", ",", "feature_map_size", "[", "0", "]", ")", ",", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.group_transform_": [[467, 490], ["range", "numpy.sqrt", "numpy.arctan2", "range", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos"], "function", ["None"], ["\n", "if", "res", "[", "'type'", "]", "==", "'NuScenesDataset'", ":", "\n", "# [reg, hei, dim, vx, vy, rots, rotc]", "\n", "                        ", "anno_box", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "14", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "'WaymoDataset'", ":", "\n", "                        ", "anno_box", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "10", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", "\"Only Support nuScene for Now!\"", ")", "\n", "\n", "", "ind", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cat", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "num_objs", "=", "min", "(", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", ".", "shape", "[", "0", "]", ",", "max_objs", ")", "\n", "\n", "for", "k", "in", "range", "(", "num_objs", ")", ":", "\n", "                        ", "cls_id", "=", "gt_dict", "[", "'gt_classes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "-", "1", "\n", "\n", "w", ",", "l", ",", "h", "=", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "3", "]", ",", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "4", "]", ",", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "5", "]", "\n", "w", ",", "l", "=", "w", "/", "voxel_size", "[", "0", "]", "/", "self", ".", "out_size_factor", ",", "l", "/", "voxel_size", "[", "1", "]", "/", "self", ".", "out_size_factor", "\n", "if", "w", ">", "0", "and", "l", ">", "0", ":", "\n", "                            ", "vel_norm", "=", "np", ".", "linalg", ".", "norm", "(", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.group_transform_v2_": [[493, 520], ["range", "numpy.sqrt", "numpy.arctan2", "range", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos"], "function", ["None"], ["", "else", ":", "\n", "                                ", "mult", "=", "1.0", "\n", "\n", "", "radius", "=", "mult", "*", "gaussian_radius", "(", "(", "l", ",", "w", ")", ",", "min_overlap", "=", "self", ".", "gaussian_overlap", ")", "\n", "radius", "=", "max", "(", "self", ".", "_min_radius", ",", "int", "(", "radius", ")", ")", "\n", "\n", "# be really careful for the coordinate system of your box annotation. ", "\n", "x", ",", "y", ",", "z", "=", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "0", "]", ",", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "1", "]", ",", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "2", "]", "\n", "\n", "coor_x", ",", "coor_y", "=", "(", "x", "-", "pc_range", "[", "0", "]", ")", "/", "voxel_size", "[", "0", "]", "/", "self", ".", "out_size_factor", ",", "(", "y", "-", "pc_range", "[", "1", "]", ")", "/", "voxel_size", "[", "1", "]", "/", "self", ".", "out_size_factor", "\n", "\n", "ct", "=", "np", ".", "array", "(", "\n", "[", "coor_x", ",", "coor_y", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ct_int", "=", "ct", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# throw out not in range objects to avoid out of array area when creating the heatmap", "\n", "if", "not", "(", "0", "<=", "ct_int", "[", "0", "]", "<", "feature_map_size", "[", "0", "]", "and", "0", "<=", "ct_int", "[", "1", "]", "<", "feature_map_size", "[", "1", "]", ")", ":", "\n", "                                ", "continue", "\n", "\n", "", "draw_gaussian", "(", "hm", "[", "cls_id", "]", ",", "ct", ",", "radius", ")", "\n", "\n", "new_idx", "=", "k", "\n", "x", ",", "y", "=", "ct_int", "[", "0", "]", ",", "ct_int", "[", "1", "]", "\n", "\n", "cat", "[", "new_idx", "]", "=", "cls_id", "\n", "ind", "[", "new_idx", "]", "=", "y", "*", "feature_map_size", "[", "0", "]", "+", "x", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.set_group_noise_same_": [[523, 531], ["enumerate", "range"], "function", ["None"], ["if", "res", "[", "'type'", "]", "==", "'NuScenesDataset'", ":", "\n", "                                ", "vx", ",", "vy", "=", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", "\n", "rvx", ",", "rvy", "=", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "8", ":", "10", "]", "\n", "rot", "=", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "10", "]", "\n", "rrot", "=", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "11", "]", "\n", "\n", "anno_box", "[", "new_idx", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "ct", "-", "(", "x", ",", "y", ")", ",", "z", ",", "np", ".", "log", "(", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "3", ":", "6", "]", ")", ",", "\n", "np", ".", "array", "(", "vx", ")", ",", "np", ".", "array", "(", "vy", ")", ",", "np", ".", "array", "(", "rvx", ")", ",", "np", ".", "array", "(", "rvy", ")", ",", "np", ".", "sin", "(", "rot", ")", ",", "np", ".", "cos", "(", "rot", ")", ",", "np", ".", "sin", "(", "rrot", ")", ",", "np", ".", "cos", "(", "rrot", ")", ")", ",", "axis", "=", "None", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.set_group_noise_same_v2_": [[533, 542], ["enumerate", "range"], "function", ["None"], ["                                ", "vx", ",", "vy", "=", "gt_dict", "[", "'gt_boxes'", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", "\n", "rot", "=", "gt_dict", "[", "'gt_boxes'", "]", "[", "idx", "]", "[", "k", "]", "[", "-", "1", "]", "\n", "anno_box", "[", "new_idx", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "ct", "-", "(", "x", ",", "y", ")", ",", "z", ",", "np", ".", "log", "(", "gt_dict", "[", "'gt_boxes'", "]", "[", "idx", "]", "[", "k", "]", "[", "3", ":", "6", "]", ")", ",", "\n", "np", ".", "array", "(", "vx", ")", ",", "np", ".", "array", "(", "vy", ")", ",", "np", ".", "sin", "(", "rot", ")", ",", "np", ".", "cos", "(", "rot", ")", ")", ",", "axis", "=", "None", ")", "\n", "", "else", ":", "\n", "                                ", "raise", "NotImplementedError", "(", "\"Only Support Waymo and nuScene for Now\"", ")", "\n", "\n", "\n", "", "", "", "hms", ".", "append", "(", "hm", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.get_group_center": [[544, 565], ["numpy.zeros_like", "numpy.zeros_like", "collections.OrderedDict", "enumerate", "enumerate"], "function", ["None"], ["masks", ".", "append", "(", "mask", ")", "\n", "inds", ".", "append", "(", "ind", ")", "\n", "cats", ".", "append", "(", "cat", ")", "\n", "\n", "# used for two stage code ", "\n", "", "boxes", "=", "flatten", "(", "gt_dict", "[", "'gt_boxes'", "]", "[", "i", "]", ")", "\n", "classes", "=", "merge_multi_group_label", "(", "gt_dict", "[", "'gt_classes'", "]", "[", "i", "]", ",", "num_classes_by_task", ")", "\n", "\n", "if", "res", "[", "\"type\"", "]", "==", "\"NuScenesDataset\"", ":", "\n", "                    ", "gt_boxes_and_cls", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "13", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "\"WaymoDataset\"", ":", "\n", "                    ", "gt_boxes_and_cls", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "10", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "boxes_and_cls", "=", "np", ".", "concatenate", "(", "(", "boxes", ",", "\n", "classes", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "axis", "=", "1", ")", "\n", "num_obj", "=", "len", "(", "boxes_and_cls", ")", "\n", "assert", "num_obj", "<=", "max_objs", ",", "\"{} is greater than {}\"", ".", "format", "(", "num_obj", ",", "max_objs", ")", "\n", "# x, y, z, w, l, h, rotation_y, velocity_x, velocity_y, class_name", "\n", "boxes_and_cls", "=", "boxes_and_cls", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "10", ",", "11", ",", "6", ",", "7", ",", "8", ",", "9", ",", "12", "]", "]", "\n", "gt_boxes_and_cls", "[", ":", "num_obj", "]", "=", "boxes_and_cls", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.noise_per_object_v3_": [[567, 690], ["numpy.array", "numpy.random.normal", "numpy.random.uniform", "numpy.arctan2", "numpy.random.uniform", "det3d.core.bbox.box_np_ops.center_to_corner_box3d", "preprocess._select_transform", "preprocess._select_transform", "det3d.core.bbox.box_np_ops.corner_to_surfaces_3d_jit", "preprocess.box3d_transform_", "isinstance", "isinstance", "numpy.abs", "isinstance", "numpy.ones", "preprocess.get_group_center", "numpy.array", "det3d.core.bbox.geometry.points_in_convex_polygon_3d_jit", "preprocess.points_transform_", "preprocess.set_group_noise_same_v2_", "preprocess.set_group_noise_same_", "preprocess.group_transform_v2_", "preprocess.group_transform_", "list", "preprocess.noise_per_box_group", "preprocess.noise_per_box_group_v2_", "preprocess.noise_per_box", "preprocess.noise_per_box_v2_", "group_id_num_dict.values"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess._select_transform", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess._select_transform", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corner_to_surfaces_3d_jit", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.box3d_transform_", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.get_group_center", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.points_in_convex_polygon_3d_jit", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.points_transform_", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.set_group_noise_same_v2_", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.set_group_noise_same_", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.group_transform_v2_", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.group_transform_", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.noise_per_box_group", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.noise_per_box_group_v2_", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.noise_per_box", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.noise_per_box_v2_"], ["example", ".", "update", "(", "{", "'gt_boxes_and_cls'", ":", "gt_boxes_and_cls", "}", ")", "\n", "example", ".", "update", "(", "{", "'hm'", ":", "hms", ",", "'anno_box'", ":", "anno_boxs", ",", "'ind'", ":", "inds", ",", "'mask'", ":", "masks", ",", "'cat'", ":", "cats", "}", ")", "\n", "\n", "###############################################################################################                ", "\n", "if", "self", ".", "sampler_type", "!=", "\"standard\"", ":", "\n", "                    ", "if", "classname", "==", "\"car\"", ":", "\n", "                        ", "class_trajectory_names_by_task", "=", "[", "[", "\"static_car\"", ",", "\"linear_car\"", ",", "\"nonlinear_car\"", "]", "]", "\n", "", "else", ":", "\n", "                        ", "class_trajectory_names_by_task", "=", "[", "[", "\"static_pedestrian\"", ",", "\"linear_pedestrian\"", ",", "\"nonlinear_pedestrian\"", "]", "]", "\n", "\n", "", "num_classes_trajectory_by_task", "=", "[", "3", "]", "\n", "task_masks", "=", "[", "]", "\n", "flag", "=", "0", "\n", "for", "class_name", "in", "class_trajectory_names_by_task", ":", "\n", "                        ", "task_masks", ".", "append", "(", "\n", "[", "\n", "np", ".", "where", "(", "\n", "gt_dict", "[", "\"gt_classes_trajectory\"", "]", "[", "i", "]", "==", "class_name", ".", "index", "(", "j", ")", "+", "1", "+", "flag", "\n", ")", "\n", "for", "j", "in", "class_name", "\n", "]", "\n", ")", "\n", "flag", "+=", "len", "(", "class_name", ")", "\n", "\n", "", "task_boxes", "=", "[", "]", "\n", "task_classes", "=", "[", "]", "\n", "task_names", "=", "[", "]", "\n", "flag2", "=", "0", "\n", "for", "idx", ",", "mask", "in", "enumerate", "(", "task_masks", ")", ":", "\n", "                        ", "task_box", "=", "[", "]", "\n", "task_class", "=", "[", "]", "\n", "task_name", "=", "[", "]", "\n", "for", "m", "in", "mask", ":", "\n", "                            ", "task_box", ".", "append", "(", "gt_dict", "[", "\"gt_boxes_trajectory\"", "]", "[", "i", "]", "[", "m", "]", ")", "\n", "task_class", ".", "append", "(", "gt_dict", "[", "\"gt_classes_trajectory\"", "]", "[", "i", "]", "[", "m", "]", "-", "flag2", ")", "\n", "task_name", ".", "append", "(", "gt_dict", "[", "\"gt_names_trajectory\"", "]", "[", "i", "]", "[", "m", "]", ")", "\n", "", "task_boxes", ".", "append", "(", "np", ".", "concatenate", "(", "task_box", ",", "axis", "=", "0", ")", ")", "\n", "task_classes", ".", "append", "(", "np", ".", "concatenate", "(", "task_class", ")", ")", "\n", "task_names", ".", "append", "(", "np", ".", "concatenate", "(", "task_name", ")", ")", "\n", "flag2", "+=", "len", "(", "mask", ")", "\n", "\n", "\n", "", "for", "task_box", "in", "task_boxes", ":", "\n", "# limit rad to [-pi, pi]", "\n", "                        ", "task_box", "[", ":", ",", "-", "1", "]", "=", "box_np_ops", ".", "limit_period", "(", "\n", "task_box", "[", ":", ",", "-", "1", "]", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", "*", "2", "\n", ")", "\n", "task_box", "[", ":", ",", "-", "2", "]", "=", "box_np_ops", ".", "limit_period", "(", "\n", "task_box", "[", ":", ",", "-", "2", "]", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", "*", "2", "\n", ")", "\n", "\n", "# print(gt_dict.keys())", "\n", "", "gt_dict", "[", "\"gt_classes_trajectory\"", "]", "[", "i", "]", "=", "task_classes", "\n", "gt_dict", "[", "\"gt_names_trajectory\"", "]", "[", "i", "]", "=", "task_names", "\n", "gt_dict", "[", "\"gt_boxes_trajectory\"", "]", "[", "i", "]", "=", "task_boxes", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "=", "gt_dict", "\n", "\n", "draw_gaussian", "=", "draw_umich_gaussian", "\n", "\n", "hms", ",", "anno_boxs", ",", "inds", ",", "masks", ",", "cats", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "idx", ",", "task", "in", "enumerate", "(", "self", ".", "tasks", ")", ":", "\n", "                        ", "hm", "=", "np", ".", "zeros", "(", "(", "len", "(", "class_trajectory_names_by_task", "[", "idx", "]", ")", ",", "feature_map_size", "[", "1", "]", ",", "feature_map_size", "[", "0", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "res", "[", "'type'", "]", "==", "'NuScenesDataset'", ":", "\n", "# [reg, hei, dim, vx, vy, rots, rotc]", "\n", "                            ", "anno_box", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "14", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "'WaymoDataset'", ":", "\n", "                            ", "anno_box", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "10", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                            ", "raise", "NotImplementedError", "(", "\"Only Support nuScene for Now!\"", ")", "\n", "\n", "", "ind", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cat", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "num_objs", "=", "min", "(", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", ".", "shape", "[", "0", "]", ",", "max_objs", ")", "\n", "\n", "for", "k", "in", "range", "(", "num_objs", ")", ":", "\n", "                            ", "cls_id", "=", "gt_dict", "[", "'gt_classes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "-", "1", "\n", "\n", "w", ",", "l", ",", "h", "=", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "3", "]", ",", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "4", "]", ",", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "5", "]", "\n", "w", ",", "l", "=", "w", "/", "voxel_size", "[", "0", "]", "/", "self", ".", "out_size_factor", ",", "l", "/", "voxel_size", "[", "1", "]", "/", "self", ".", "out_size_factor", "\n", "if", "w", ">", "0", "and", "l", ">", "0", ":", "\n", "                                ", "vel_norm", "=", "np", ".", "linalg", ".", "norm", "(", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", ")", "\n", "\n", "if", "self", ".", "radius_mult", ":", "\n", "                                    ", "mult", "=", "min", "(", "max", "(", "1", ",", "vel_norm", "*", "(", "1", "+", "i", ")", "/", "2", ")", ",", "4", ")", "\n", "", "else", ":", "\n", "                                    ", "mult", "=", "1.0", "\n", "\n", "", "radius", "=", "mult", "*", "gaussian_radius", "(", "(", "l", ",", "w", ")", ",", "min_overlap", "=", "self", ".", "gaussian_overlap", ")", "\n", "radius", "=", "max", "(", "self", ".", "_min_radius", ",", "int", "(", "radius", ")", ")", "\n", "\n", "# be really careful for the coordinate system of your box annotation. ", "\n", "x", ",", "y", ",", "z", "=", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "0", "]", ",", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "1", "]", ",", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "2", "]", "\n", "\n", "coor_x", ",", "coor_y", "=", "(", "x", "-", "pc_range", "[", "0", "]", ")", "/", "voxel_size", "[", "0", "]", "/", "self", ".", "out_size_factor", ",", "(", "y", "-", "pc_range", "[", "1", "]", ")", "/", "voxel_size", "[", "1", "]", "/", "self", ".", "out_size_factor", "\n", "\n", "ct", "=", "np", ".", "array", "(", "\n", "[", "coor_x", ",", "coor_y", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ct_int", "=", "ct", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# throw out not in range objects to avoid out of array area when creating the heatmap", "\n", "if", "not", "(", "0", "<=", "ct_int", "[", "0", "]", "<", "feature_map_size", "[", "0", "]", "and", "0", "<=", "ct_int", "[", "1", "]", "<", "feature_map_size", "[", "1", "]", ")", ":", "\n", "                                    ", "continue", "\n", "\n", "", "draw_gaussian", "(", "hm", "[", "cls_id", "]", ",", "ct", ",", "radius", ")", "\n", "\n", "new_idx", "=", "k", "\n", "x", ",", "y", "=", "ct_int", "[", "0", "]", ",", "ct_int", "[", "1", "]", "\n", "\n", "cat", "[", "new_idx", "]", "=", "cls_id", "\n", "ind", "[", "new_idx", "]", "=", "y", "*", "feature_map_size", "[", "0", "]", "+", "x", "\n", "mask", "[", "new_idx", "]", "=", "1", "\n", "\n", "if", "res", "[", "'type'", "]", "==", "'NuScenesDataset'", ":", "\n", "                                    ", "vx", ",", "vy", "=", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", "\n", "rvx", ",", "rvy", "=", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "8", ":", "10", "]", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.noise_per_object_v2_": [[692, 765], ["numpy.array", "numpy.random.normal", "numpy.random.uniform", "numpy.arctan2", "numpy.random.uniform", "det3d.core.bbox.box_np_ops.center_to_corner_box3d", "preprocess._select_transform", "preprocess._select_transform", "preprocess.box3d_transform_", "isinstance", "isinstance", "isinstance", "numpy.ones", "numpy.abs", "preprocess.noise_per_box", "preprocess.noise_per_box_v2_", "det3d.core.bbox.box_np_ops.corner_to_surfaces_3d_jit", "det3d.core.bbox.geometry.points_in_convex_polygon_3d_jit", "preprocess.points_transform_"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_torch_ops.center_to_corner_box3d", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess._select_transform", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess._select_transform", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.box3d_transform_", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.noise_per_box", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.noise_per_box_v2_", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corner_to_surfaces_3d_jit", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.geometry.points_in_convex_polygon_3d_jit", "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.points_transform_"], ["rrot", "=", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "11", "]", "\n", "\n", "anno_box", "[", "new_idx", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "ct", "-", "(", "x", ",", "y", ")", ",", "z", ",", "np", ".", "log", "(", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "3", ":", "6", "]", ")", ",", "\n", "np", ".", "array", "(", "vx", ")", ",", "np", ".", "array", "(", "vy", ")", ",", "np", ".", "array", "(", "rvx", ")", ",", "np", ".", "array", "(", "rvy", ")", ",", "np", ".", "sin", "(", "rot", ")", ",", "np", ".", "cos", "(", "rot", ")", ",", "np", ".", "sin", "(", "rrot", ")", ",", "np", ".", "cos", "(", "rrot", ")", ")", ",", "axis", "=", "None", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "'WaymoDataset'", ":", "\n", "                                    ", "vx", ",", "vy", "=", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", "\n", "rot", "=", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "idx", "]", "[", "k", "]", "[", "-", "1", "]", "\n", "anno_box", "[", "new_idx", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "ct", "-", "(", "x", ",", "y", ")", ",", "z", ",", "np", ".", "log", "(", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "idx", "]", "[", "k", "]", "[", "3", ":", "6", "]", ")", ",", "\n", "np", ".", "array", "(", "vx", ")", ",", "np", ".", "array", "(", "vy", ")", ",", "np", ".", "sin", "(", "rot", ")", ",", "np", ".", "cos", "(", "rot", ")", ")", ",", "axis", "=", "None", ")", "\n", "", "else", ":", "\n", "                                    ", "raise", "NotImplementedError", "(", "\"Only Support Waymo and nuScene for Now\"", ")", "\n", "\n", "\n", "", "", "", "hms", ".", "append", "(", "hm", ")", "\n", "anno_boxs", ".", "append", "(", "anno_box", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "inds", ".", "append", "(", "ind", ")", "\n", "cats", ".", "append", "(", "cat", ")", "\n", "\n", "# used for two stage code ", "\n", "", "boxes", "=", "flatten", "(", "gt_dict", "[", "'gt_boxes_trajectory'", "]", "[", "i", "]", ")", "\n", "classes", "=", "merge_multi_group_label", "(", "gt_dict", "[", "'gt_classes_trajectory'", "]", "[", "i", "]", ",", "num_classes_trajectory_by_task", ")", "\n", "\n", "if", "res", "[", "\"type\"", "]", "==", "\"NuScenesDataset\"", ":", "\n", "                        ", "gt_boxes_and_cls", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "13", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "\"WaymoDataset\"", ":", "\n", "                        ", "gt_boxes_and_cls", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "10", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "boxes_and_cls", "=", "np", ".", "concatenate", "(", "(", "boxes", ",", "\n", "classes", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "axis", "=", "1", ")", "\n", "num_obj", "=", "len", "(", "boxes_and_cls", ")", "\n", "assert", "num_obj", "<=", "max_objs", ",", "\"{} is greater than {}\"", ".", "format", "(", "num_obj", ",", "max_objs", ")", "\n", "# x, y, z, w, l, h, rotation_y, velocity_x, velocity_y, class_name", "\n", "boxes_and_cls", "=", "boxes_and_cls", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "10", ",", "11", ",", "6", ",", "7", ",", "8", ",", "9", ",", "12", "]", "]", "\n", "gt_boxes_and_cls", "[", ":", "num_obj", "]", "=", "boxes_and_cls", "\n", "\n", "example", ".", "update", "(", "{", "'gt_boxes_and_cls_trajectory'", ":", "gt_boxes_and_cls", "}", ")", "\n", "example", ".", "update", "(", "{", "'hm_trajectory'", ":", "hms", ",", "'anno_box_trajectory'", ":", "anno_boxs", ",", "'ind_trajectory'", ":", "inds", ",", "'mask_trajectory'", ":", "masks", ",", "'cat_trajectory'", ":", "cats", "}", ")", "\n", "\n", "############################################################################################### ", "\n", "\n", "if", "classname", "==", "\"car\"", ":", "\n", "                        ", "class_forecast_names_by_task", "=", "[", "[", "\"car_1\"", ",", "\"car_2\"", ",", "\"car_3\"", ",", "\"car_4\"", ",", "\"car_5\"", ",", "\"car_6\"", ",", "\"car_7\"", "]", "]", "\n", "", "else", ":", "\n", "                        ", "class_forecast_names_by_task", "=", "[", "[", "\"pedestrian_1\"", ",", "\"pedestrian_2\"", ",", "\"pedestrian_3\"", ",", "\"pedestrian_4\"", ",", "\"pedestrian_5\"", ",", "\"pedestrian_6\"", ",", "\"pedestrian_7\"", "]", "]", "\n", "\n", "", "num_classes_forecast_by_task", "=", "[", "7", "]", "\n", "task_masks", "=", "[", "]", "\n", "flag", "=", "0", "\n", "for", "class_name", "in", "class_forecast_names_by_task", ":", "\n", "                        ", "task_masks", ".", "append", "(", "\n", "[", "\n", "np", ".", "where", "(", "\n", "gt_dict", "[", "\"gt_classes_forecast\"", "]", "[", "i", "]", "==", "class_name", ".", "index", "(", "j", ")", "+", "1", "+", "flag", "\n", ")", "\n", "for", "j", "in", "class_name", "\n", "]", "\n", ")", "\n", "flag", "+=", "len", "(", "class_name", ")", "\n", "\n", "", "task_boxes", "=", "[", "]", "\n", "task_classes", "=", "[", "]", "\n", "task_names", "=", "[", "]", "\n", "flag2", "=", "0", "\n", "for", "idx", ",", "mask", "in", "enumerate", "(", "task_masks", ")", ":", "\n", "                        ", "task_box", "=", "[", "]", "\n", "task_class", "=", "[", "]", "\n", "task_name", "=", "[", "]", "\n", "for", "m", "in", "mask", ":", "\n", "                            ", "task_box", ".", "append", "(", "gt_dict", "[", "\"gt_boxes_forecast\"", "]", "[", "i", "]", "[", "m", "]", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.global_scaling": [[767, 774], ["numpy.random.uniform", "isinstance"], "function", ["None"], ["task_name", ".", "append", "(", "gt_dict", "[", "\"gt_names_forecast\"", "]", "[", "i", "]", "[", "m", "]", ")", "\n", "", "task_boxes", ".", "append", "(", "np", ".", "concatenate", "(", "task_box", ",", "axis", "=", "0", ")", ")", "\n", "task_classes", ".", "append", "(", "np", ".", "concatenate", "(", "task_class", ")", ")", "\n", "task_names", ".", "append", "(", "np", ".", "concatenate", "(", "task_name", ")", ")", "\n", "flag2", "+=", "len", "(", "mask", ")", "\n", "\n", "", "for", "task_box", "in", "task_boxes", ":", "\n", "# limit rad to [-pi, pi]", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.global_rotation": [[776, 800], ["numpy.random.uniform", "det3d.core.bbox.box_np_ops.rotation_points_single_angle", "range", "isinstance", "len", "det3d.core.bbox.box_np_ops.rotation_points_single_angle", "det3d.core.bbox.box_np_ops.rotation_points_single_angle", "det3d.core.bbox.box_np_ops.rotation_points_single_angle", "numpy.hstack", "numpy.hstack", "numpy.zeros", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.rotation_points_single_angle", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.rotation_points_single_angle", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.rotation_points_single_angle", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.rotation_points_single_angle"], ["task_box", "[", ":", ",", "-", "1", "]", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", "*", "2", "\n", ")", "\n", "task_box", "[", ":", ",", "-", "2", "]", "=", "box_np_ops", ".", "limit_period", "(", "\n", "task_box", "[", ":", ",", "-", "2", "]", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", "*", "2", "\n", ")", "\n", "\n", "# print(gt_dict.keys())", "\n", "", "gt_dict", "[", "\"gt_classes_forecast\"", "]", "[", "i", "]", "=", "task_classes", "\n", "gt_dict", "[", "\"gt_names_forecast\"", "]", "[", "i", "]", "=", "task_names", "\n", "gt_dict", "[", "\"gt_boxes_forecast\"", "]", "[", "i", "]", "=", "task_boxes", "\n", "\n", "res", "[", "\"lidar\"", "]", "[", "\"annotations\"", "]", "=", "gt_dict", "\n", "\n", "draw_gaussian", "=", "draw_umich_gaussian", "\n", "\n", "hms", ",", "anno_boxs", ",", "inds", ",", "masks", ",", "cats", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "idx", ",", "task", "in", "enumerate", "(", "self", ".", "tasks", ")", ":", "\n", "                        ", "hm", "=", "np", ".", "zeros", "(", "(", "len", "(", "class_forecast_names_by_task", "[", "idx", "]", ")", ",", "feature_map_size", "[", "1", "]", ",", "feature_map_size", "[", "0", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "res", "[", "'type'", "]", "==", "'NuScenesDataset'", ":", "\n", "# [reg, hei, dim, vx, vy, rots, rotc]", "\n", "                            ", "anno_box", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "14", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "'WaymoDataset'", ":", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.random_flip": [[802, 814], ["numpy.random.choice"], "function", ["None"], ["", "else", ":", "\n", "                            ", "raise", "NotImplementedError", "(", "\"Only Support nuScene for Now!\"", ")", "\n", "\n", "", "ind", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cat", "=", "np", ".", "zeros", "(", "(", "max_objs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "num_objs", "=", "min", "(", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", ".", "shape", "[", "0", "]", ",", "max_objs", ")", "\n", "\n", "for", "k", "in", "range", "(", "num_objs", ")", ":", "\n", "                            ", "cls_id", "=", "gt_dict", "[", "'gt_classes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "-", "1", "\n", "\n", "w", ",", "l", ",", "h", "=", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "3", "]", ",", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "4", "]", ","]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.random_flip_both": [[815, 858], ["numpy.random.choice", "ret_flips.append", "numpy.random.choice", "ret_flips.append", "range", "range", "len", "len"], "function", ["None"], ["gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "5", "]", "\n", "w", ",", "l", "=", "w", "/", "voxel_size", "[", "0", "]", "/", "self", ".", "out_size_factor", ",", "l", "/", "voxel_size", "[", "1", "]", "/", "self", ".", "out_size_factor", "\n", "if", "w", ">", "0", "and", "l", ">", "0", ":", "\n", "                                ", "vel_norm", "=", "np", ".", "linalg", ".", "norm", "(", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", ")", "\n", "\n", "if", "self", ".", "radius_mult", ":", "\n", "                                    ", "mult", "=", "min", "(", "max", "(", "1", ",", "vel_norm", "*", "(", "1", "+", "i", ")", "/", "2", ")", ",", "4", ")", "\n", "", "else", ":", "\n", "                                    ", "mult", "=", "1.0", "\n", "\n", "", "radius", "=", "mult", "*", "gaussian_radius", "(", "(", "l", ",", "w", ")", ",", "min_overlap", "=", "self", ".", "gaussian_overlap", ")", "\n", "radius", "=", "max", "(", "self", ".", "_min_radius", ",", "int", "(", "radius", ")", ")", "\n", "\n", "# be really careful for the coordinate system of your box annotation. ", "\n", "x", ",", "y", ",", "z", "=", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "0", "]", ",", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "1", "]", ",", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "2", "]", "\n", "\n", "coor_x", ",", "coor_y", "=", "(", "x", "-", "pc_range", "[", "0", "]", ")", "/", "voxel_size", "[", "0", "]", "/", "self", ".", "out_size_factor", ",", "(", "y", "-", "pc_range", "[", "1", "]", ")", "/", "voxel_size", "[", "1", "]", "/", "self", ".", "out_size_factor", "\n", "\n", "ct", "=", "np", ".", "array", "(", "\n", "[", "coor_x", ",", "coor_y", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ct_int", "=", "ct", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# throw out not in range objects to avoid out of array area when creating the heatmap", "\n", "if", "not", "(", "0", "<=", "ct_int", "[", "0", "]", "<", "feature_map_size", "[", "0", "]", "and", "0", "<=", "ct_int", "[", "1", "]", "<", "feature_map_size", "[", "1", "]", ")", ":", "\n", "                                    ", "continue", "\n", "\n", "", "draw_gaussian", "(", "hm", "[", "cls_id", "]", ",", "ct", ",", "radius", ")", "\n", "\n", "new_idx", "=", "k", "\n", "x", ",", "y", "=", "ct_int", "[", "0", "]", ",", "ct_int", "[", "1", "]", "\n", "\n", "cat", "[", "new_idx", "]", "=", "cls_id", "\n", "ind", "[", "new_idx", "]", "=", "y", "*", "feature_map_size", "[", "0", "]", "+", "x", "\n", "mask", "[", "new_idx", "]", "=", "1", "\n", "\n", "if", "res", "[", "'type'", "]", "==", "'NuScenesDataset'", ":", "\n", "                                    ", "vx", ",", "vy", "=", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", "\n", "rvx", ",", "rvy", "=", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "8", ":", "10", "]", "\n", "rot", "=", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "10", "]", "\n", "rrot", "=", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", "[", "idx", "]", "[", "k", "]", "[", "11", "]", "\n", "\n", "anno_box", "[", "new_idx", "]", "=", "np", ".", "concatenate", "(", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.global_scaling_v2": [[860, 869], ["numpy.random.uniform", "range", "len"], "function", ["None"], ["np", ".", "array", "(", "vx", ")", ",", "np", ".", "array", "(", "vy", ")", ",", "np", ".", "array", "(", "rvx", ")", ",", "np", ".", "array", "(", "rvy", ")", ",", "np", ".", "sin", "(", "rot", ")", ",", "np", ".", "cos", "(", "rot", ")", ",", "np", ".", "sin", "(", "rrot", ")", ",", "np", ".", "cos", "(", "rrot", ")", ")", ",", "axis", "=", "None", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "'WaymoDataset'", ":", "\n", "                                    ", "vx", ",", "vy", "=", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "idx", "]", "[", "k", "]", "[", "6", ":", "8", "]", "\n", "rot", "=", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "idx", "]", "[", "k", "]", "[", "-", "1", "]", "\n", "anno_box", "[", "new_idx", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "ct", "-", "(", "x", ",", "y", ")", ",", "z", ",", "np", ".", "log", "(", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "idx", "]", "[", "k", "]", "[", "3", ":", "6", "]", ")", ",", "\n", "np", ".", "array", "(", "vx", ")", ",", "np", ".", "array", "(", "vy", ")", ",", "np", ".", "sin", "(", "rot", ")", ",", "np", ".", "cos", "(", "rot", ")", ")", ",", "axis", "=", "None", ")", "\n", "", "else", ":", "\n", "                                    ", "raise", "NotImplementedError", "(", "\"Only Support Waymo and nuScene for Now\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.global_rotation_v2": [[871, 879], ["numpy.random.uniform", "det3d.core.bbox.box_np_ops.rotation_points_single_angle", "det3d.core.bbox.box_np_ops.rotation_points_single_angle"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.rotation_points_single_angle", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.rotation_points_single_angle"], ["", "", "", "hms", ".", "append", "(", "hm", ")", "\n", "anno_boxs", ".", "append", "(", "anno_box", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "inds", ".", "append", "(", "ind", ")", "\n", "cats", ".", "append", "(", "cat", ")", "\n", "\n", "# used for two stage code ", "\n", "", "boxes", "=", "flatten", "(", "gt_dict", "[", "'gt_boxes_forecast'", "]", "[", "i", "]", ")", "\n", "classes", "=", "merge_multi_group_label", "(", "gt_dict", "[", "'gt_classes_forecast'", "]", "[", "i", "]", ",", "num_classes_forecast_by_task", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.box_collision_test": [[881, 965], ["numba.jit", "numpy.zeros", "numpy.array", "numpy.stack", "numpy.stack", "det3d.core.bbox.box_np_ops.corner_to_standup_nd_jit", "det3d.core.bbox.box_np_ops.corner_to_standup_nd_jit", "range", "range", "min", "max", "min", "max", "range", "range", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corner_to_standup_nd_jit", "home.repos.pwc.inspect_result.neeharperi_futuredet.bbox.box_np_ops.corner_to_standup_nd_jit"], ["if", "res", "[", "\"type\"", "]", "==", "\"NuScenesDataset\"", ":", "\n", "                        ", "gt_boxes_and_cls", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "13", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "elif", "res", "[", "'type'", "]", "==", "\"WaymoDataset\"", ":", "\n", "                        ", "gt_boxes_and_cls", "=", "np", ".", "zeros", "(", "(", "max_objs", ",", "10", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "boxes_and_cls", "=", "np", ".", "concatenate", "(", "(", "boxes", ",", "\n", "classes", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "axis", "=", "1", ")", "\n", "num_obj", "=", "len", "(", "boxes_and_cls", ")", "\n", "assert", "num_obj", "<=", "max_objs", ",", "\"{} is greater than {}\"", ".", "format", "(", "num_obj", ",", "max_objs", ")", "\n", "# x, y, z, w, l, h, rotation_y, velocity_x, velocity_y, class_name", "\n", "boxes_and_cls", "=", "boxes_and_cls", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "10", ",", "11", ",", "6", ",", "7", ",", "8", ",", "9", ",", "12", "]", "]", "\n", "gt_boxes_and_cls", "[", ":", "num_obj", "]", "=", "boxes_and_cls", "\n", "\n", "example", ".", "update", "(", "{", "'gt_boxes_and_cls_forecast'", ":", "gt_boxes_and_cls", "}", ")", "\n", "example", ".", "update", "(", "{", "'hm_forecast'", ":", "hms", ",", "'anno_box_forecast'", ":", "anno_boxs", ",", "'ind_forecast'", ":", "inds", ",", "'mask_forecast'", ":", "masks", ",", "'cat_forecast'", ":", "cats", "}", ")", "\n", "\n", "", "example_forecast", ".", "append", "(", "example", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "example_forecast", "=", "length", "*", "[", "{", "}", "]", "\n", "\n", "", "ex", "=", "{", "k", ":", "[", "]", "for", "k", "in", "example_forecast", "[", "0", "]", ".", "keys", "(", ")", "}", "\n", "for", "ef", "in", "example_forecast", ":", "\n", "            ", "for", "k", "in", "ef", ".", "keys", "(", ")", ":", "\n", "                ", "ex", "[", "k", "]", ".", "append", "(", "ef", "[", "k", "]", ")", "\n", "\n", "", "", "res", "[", "\"lidar\"", "]", "[", "\"targets\"", "]", "=", "ex", "\n", "return", "res", ",", "info", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.sampler.preprocess.global_translate_": [[967, 993], ["all", "range", "isinstance", "numpy.array", "numpy.array", "len", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal"], "function", ["None"], []], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules._LRSchedulerStep.__init__": [[9, 28], ["list", "learning_schedules._LRSchedulerStep.step", "isinstance", "TypeError", "enumerate", "map", "group.setdefault", "KeyError", "type"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.LRSchedulerStep.step"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "last_step", "=", "-", "1", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"{} is not an Optimizer\"", ".", "format", "(", "type", "(", "optimizer", ")", ".", "__name__", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "if", "last_step", "==", "-", "1", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", ".", "setdefault", "(", "\"initial_lr\"", ",", "group", "[", "\"lr\"", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", ",", "group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "\"initial_lr\"", "not", "in", "group", ":", "\n", "                    ", "raise", "KeyError", "(", "\n", "\"param 'initial_lr' is not specified \"", "\n", "\"in param_groups[{}] when resuming an optimizer\"", ".", "format", "(", "i", ")", "\n", ")", "\n", "", "", "", "self", ".", "base_lrs", "=", "list", "(", "\n", "map", "(", "lambda", "group", ":", "group", "[", "\"initial_lr\"", "]", ",", "optimizer", ".", "param_groups", ")", "\n", ")", "\n", "self", ".", "step", "(", "last_step", "+", "1", ")", "\n", "self", ".", "last_step", "=", "last_step", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules._LRSchedulerStep.get_lr": [[34, 37], ["learning_schedules._LRSchedulerStep._get_lr_per_group"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules.CosineDecayWithWarmup._get_lr_per_group"], ["def", "get_lr", "(", "self", ")", ":", "\n", "        ", "ret", "=", "[", "self", ".", "_get_lr_per_group", "(", "base_lr", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules._LRSchedulerStep._get_lr_per_group": [[38, 40], ["None"], "methods", ["None"], ["", "def", "_get_lr_per_group", "(", "self", ",", "base_lr", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules._LRSchedulerStep.step": [[41, 47], ["zip", "learning_schedules._LRSchedulerStep.get_lr"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules._LRSchedulerStep.get_lr"], ["", "def", "step", "(", "self", ",", "step", "=", "None", ")", ":", "\n", "        ", "if", "step", "is", "None", ":", "\n", "            ", "step", "=", "self", ".", "last_step", "+", "1", "\n", "", "self", ".", "last_step", "=", "step", "\n", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "self", ".", "get_lr", "(", ")", ")", ":", "\n", "            ", "param_group", "[", "\"lr\"", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules.Constant.__init__": [[50, 52], ["learning_schedules._LRSchedulerStep.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "last_step", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules.Constant._get_lr_per_group": [[53, 55], ["None"], "methods", ["None"], ["", "def", "_get_lr_per_group", "(", "self", ",", "base_lr", ")", ":", "\n", "        ", "return", "base_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules.ManualStepping.__init__": [[62, 81], ["len", "any", "any", "learning_schedules._LRSchedulerStep.__init__", "any", "any", "ValueError", "ValueError", "ValueError", "len", "ValueError", "len", "zip", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "boundaries", ",", "rates", ",", "last_step", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "_boundaries", "=", "boundaries", "\n", "self", ".", "_num_boundaries", "=", "len", "(", "boundaries", ")", "\n", "self", ".", "_learning_rates", "=", "rates", "\n", "\n", "if", "any", "(", "[", "b", "<", "0", "for", "b", "in", "boundaries", "]", ")", "or", "any", "(", "\n", "[", "not", "isinstance", "(", "b", ",", "int", ")", "for", "b", "in", "boundaries", "]", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"boundaries must be a list of positive integers\"", ")", "\n", "", "if", "any", "(", "[", "bnext", "<=", "b", "for", "bnext", ",", "b", "in", "zip", "(", "boundaries", "[", "1", ":", "]", ",", "boundaries", "[", ":", "-", "1", "]", ")", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Entries in boundaries must be strictly increasing.\"", ")", "\n", "", "if", "any", "(", "[", "not", "isinstance", "(", "r", ",", "float", ")", "for", "r", "in", "rates", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Learning rates must be floats\"", ")", "\n", "", "if", "len", "(", "rates", ")", "!=", "len", "(", "boundaries", ")", "+", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Number of provided learning rates must exceed \"", "\n", "\"number of boundary points by exactly 1.\"", "\n", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules.ManualStepping._get_lr_per_group": [[82, 91], ["enumerate"], "methods", ["None"], ["", "def", "_get_lr_per_group", "(", "self", ",", "base_lr", ")", ":", "\n", "        ", "step", "=", "self", ".", "last_step", "\n", "ret", "=", "None", "\n", "for", "i", ",", "bound", "in", "enumerate", "(", "self", ".", "_boundaries", ")", ":", "\n", "            ", "if", "step", ">", "bound", ":", "\n", "                ", "ret", "=", "self", ".", "_learning_rates", "[", "i", "+", "1", "]", "\n", "", "", "if", "ret", "is", "not", "None", ":", "\n", "            ", "return", "ret", "\n", "", "return", "self", ".", "_learning_rates", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules.ExponentialDecayWithBurnin.__init__": [[97, 112], ["learning_schedules._LRSchedulerStep.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "learning_rate_decay_steps", ",", "\n", "learning_rate_decay_factor", ",", "\n", "burnin_learning_rate", ",", "\n", "burnin_steps", ",", "\n", "last_step", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_decay_steps", "=", "learning_rate_decay_steps", "\n", "self", ".", "_decay_factor", "=", "learning_rate_decay_factor", "\n", "self", ".", "_burnin_learning_rate", "=", "burnin_learning_rate", "\n", "self", ".", "_burnin_steps", "=", "burnin_steps", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules.ExponentialDecayWithBurnin._get_lr_per_group": [[113, 124], ["None"], "methods", ["None"], ["", "def", "_get_lr_per_group", "(", "self", ",", "base_lr", ")", ":", "\n", "        ", "if", "self", ".", "_burnin_learning_rate", "==", "0", ":", "\n", "            ", "burnin_learning_rate", "=", "base_lr", "\n", "", "step", "=", "self", ".", "last_step", "\n", "post_burnin_learning_rate", "=", "base_lr", "*", "self", ".", "_decay_factor", "^", "(", "\n", "step", "//", "self", ".", "_decay_steps", "\n", ")", "\n", "if", "step", "<", "self", ".", "_burnin_steps", ":", "\n", "            ", "return", "burnin_learning_rate", "\n", "", "else", ":", "\n", "            ", "return", "post_burnin_learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules.ExponentialDecay.__init__": [[127, 140], ["learning_schedules._LRSchedulerStep.__init__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "learning_rate_decay_steps", ",", "\n", "learning_rate_decay_factor", ",", "\n", "staircase", "=", "True", ",", "\n", "last_step", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_decay_steps", "=", "learning_rate_decay_steps", "\n", "self", ".", "_decay_factor", "=", "learning_rate_decay_factor", "\n", "self", ".", "_staircase", "=", "staircase", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules.ExponentialDecay._get_lr_per_group": [[141, 153], ["pow", "pow"], "methods", ["None"], ["", "def", "_get_lr_per_group", "(", "self", ",", "base_lr", ")", ":", "\n", "        ", "step", "=", "self", ".", "last_step", "\n", "if", "self", ".", "_staircase", ":", "\n", "            ", "post_burnin_learning_rate", "=", "base_lr", "*", "pow", "(", "\n", "self", ".", "_decay_factor", ",", "(", "step", "//", "self", ".", "_decay_steps", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "post_burnin_learning_rate", "=", "base_lr", "*", "pow", "(", "\n", "self", ".", "_decay_factor", ",", "(", "step", "/", "self", ".", "_decay_steps", ")", "\n", ")", "\n", "\n", "", "return", "post_burnin_learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules.CosineDecayWithWarmup.__init__": [[156, 166], ["learning_schedules._LRSchedulerStep.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "optimizer", ",", "total_steps", ",", "warmup_learning_rate", ",", "warmup_steps", ",", "last_step", "=", "-", "1", "\n", ")", ":", "\n", "        ", "if", "total_steps", "<", "warmup_steps", ":", "\n", "            ", "raise", "ValueError", "(", "\"total_steps must be larger or equal to \"", "\"warmup_steps.\"", ")", "\n", "", "self", ".", "_total_steps", "=", "total_steps", "\n", "self", ".", "_warmup_learning_rate", "=", "warmup_learning_rate", "\n", "self", ".", "_warmup_steps", "=", "warmup_steps", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules.CosineDecayWithWarmup._get_lr_per_group": [[167, 193], ["ValueError", "numpy.cos", "float", "float", "float"], "methods", ["None"], ["", "def", "_get_lr_per_group", "(", "self", ",", "base_lr", ")", ":", "\n", "        ", "if", "base_lr", "<", "self", ".", "_warmup_learning_rate", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"learning_rate_base must be larger \"", "\"or equal to warmup_learning_rate.\"", "\n", ")", "\n", "\n", "", "step", "=", "self", ".", "last_step", "\n", "learning_rate", "=", "(", "\n", "0.5", "\n", "*", "base_lr", "\n", "*", "(", "\n", "1", "\n", "+", "np", ".", "cos", "(", "\n", "np", ".", "pi", "\n", "*", "(", "float", "(", "step", ")", "-", "self", ".", "_warmup_steps", ")", "\n", "/", "float", "(", "self", ".", "_total_steps", "-", "self", ".", "_warmup_steps", ")", "\n", ")", "\n", ")", "\n", ")", "\n", "if", "self", ".", "_warmup_steps", ">", "0", ":", "\n", "            ", "slope", "=", "(", "base_lr", "-", "self", ".", "_warmup_learning_rate", ")", "/", "self", ".", "_warmup_steps", "\n", "pre_cosine_learning_rate", "=", "slope", "*", "float", "(", "step", ")", "+", "self", ".", "_warmup_learning_rate", "\n", "if", "step", "<", "self", ".", "_warmup_steps", ":", "\n", "                ", "return", "pre_cosine_learning_rate", "\n", "", "else", ":", "\n", "                ", "return", "learning_rate", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.__init__": [[5, 11], ["threading.Thread.__init__", "queue.Queue", "background.BackgroundGenerator.start"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.progressbar.ProgressBar.start"], ["    ", "def", "__init__", "(", "self", ",", "generator", ",", "max_prefetch", "=", "1", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "self", ".", "queue", "=", "queue", ".", "Queue", "(", "max_prefetch", ")", "\n", "self", ".", "generator", "=", "generator", "\n", "self", ".", "daemon", "=", "True", "\n", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.run": [[12, 16], ["background.BackgroundGenerator.queue.put", "background.BackgroundGenerator.queue.put"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.put", "home.repos.pwc.inspect_result.neeharperi_futuredet.utils.oss.OSSPath.put"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "for", "item", "in", "self", ".", "generator", ":", "\n", "            ", "self", ".", "queue", ".", "put", "(", "item", ")", "\n", "", "self", ".", "queue", ".", "put", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.next": [[17, 22], ["background.BackgroundGenerator.queue.get"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.utils.registry.Registry.get"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "next_item", "=", "self", ".", "queue", ".", "get", "(", ")", "\n", "if", "next_item", "is", "None", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "return", "next_item", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.__next__": [[24, 26], ["background.BackgroundGenerator.next"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.next"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.background.BackgroundGenerator.__iter__": [[27, 29], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.__init__": [[46, 75], ["hasattr", "enumerate", "isinstance", "ValueError", "optim.param_fp32_copy", "param_groups_copy.append", "group.items"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.param_fp32_copy"], ["def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "scale", "=", "None", ",", "\n", "auto_scale", "=", "True", ",", "\n", "inc_factor", "=", "2.0", ",", "\n", "dec_factor", "=", "0.5", ",", "\n", "num_iters_be_stable", "=", "500", ",", "\n", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "optimizer", ",", "torch", ".", "optim", ".", "Optimizer", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"must provide a torch.optim.Optimizer\"", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "if", "hasattr", "(", "self", ".", "optimizer", ",", "\"name\"", ")", ":", "\n", "            ", "self", ".", "name", "=", "self", ".", "optimizer", ".", "name", "# for ckpt system", "\n", "", "param_groups_copy", "=", "[", "]", "\n", "for", "i", ",", "group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "group_copy", "=", "{", "n", ":", "v", "for", "n", ",", "v", "in", "group", ".", "items", "(", ")", "if", "n", "!=", "\"params\"", "}", "\n", "group_copy", "[", "\"params\"", "]", "=", "param_fp32_copy", "(", "group", "[", "\"params\"", "]", ")", "\n", "param_groups_copy", ".", "append", "(", "group_copy", ")", "\n", "\n", "# switch param_groups, may be dangerous", "\n", "", "self", ".", "param_groups", "=", "optimizer", ".", "param_groups", "\n", "optimizer", ".", "param_groups", "=", "param_groups_copy", "\n", "self", ".", "grad_scale", "=", "scale", "\n", "self", ".", "auto_scale", "=", "auto_scale", "\n", "self", ".", "inc_factor", "=", "inc_factor", "\n", "self", ".", "dec_factor", "=", "dec_factor", "\n", "self", ".", "stable_iter_count", "=", "0", "\n", "self", ".", "num_iters_be_stable", "=", "num_iters_be_stable", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.__getstate__": [[76, 78], ["optim.MixedPrecisionWrapper.optimizer.__getstate__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.__getstate__"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "optimizer", ".", "__getstate__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.__setstate__": [[79, 81], ["optim.MixedPrecisionWrapper.optimizer.__setstate__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "self", ".", "optimizer", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.__repr__": [[82, 84], ["optim.MixedPrecisionWrapper.optimizer.__repr__"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "optimizer", ".", "__repr__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.state_dict": [[85, 87], ["optim.MixedPrecisionWrapper.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.load_state_dict": [[88, 90], ["optim.MixedPrecisionWrapper.optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "return", "self", ".", "optimizer", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.zero_grad": [[91, 93], ["optim.MixedPrecisionWrapper.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.step": [[94, 117], ["zip", "zip", "optim.set_grad", "optim.MixedPrecisionWrapper.optimizer.step", "optim.MixedPrecisionWrapper.optimizer.step", "zip", "print", "p.data.copy_", "ValueError"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.set_grad", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.LRSchedulerStep.step"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "for", "g", ",", "g_copy", "in", "zip", "(", "self", ".", "param_groups", ",", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "invalid", "=", "set_grad", "(", "g_copy", "[", "\"params\"", "]", ",", "g", "[", "\"params\"", "]", ",", "self", ".", "grad_scale", ")", "\n", "if", "invalid", ":", "\n", "                ", "if", "self", ".", "grad_scale", "is", "None", "or", "self", ".", "auto_scale", "is", "False", ":", "\n", "                    ", "raise", "ValueError", "(", "\"nan/inf detected but auto_scale disabled.\"", ")", "\n", "", "self", ".", "grad_scale", "*=", "self", ".", "dec_factor", "\n", "print", "(", "\"scale decay to {}\"", ".", "format", "(", "self", ".", "grad_scale", ")", ")", "\n", "return", "\n", "", "", "if", "self", ".", "auto_scale", "is", "True", ":", "\n", "            ", "self", ".", "stable_iter_count", "+=", "1", "\n", "if", "self", ".", "stable_iter_count", ">", "self", ".", "num_iters_be_stable", ":", "\n", "                ", "if", "self", ".", "grad_scale", "is", "not", "None", ":", "\n", "                    ", "self", ".", "grad_scale", "*=", "self", ".", "inc_factor", "\n", "", "self", ".", "stable_iter_count", "=", "0", "\n", "\n", "", "", "if", "closure", "is", "None", ":", "\n", "            ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", ".", "step", "(", "closure", ")", "\n", "", "for", "g", ",", "g_copy", "in", "zip", "(", "self", ".", "param_groups", ",", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "for", "p_copy", ",", "p", "in", "zip", "(", "g_copy", "[", "\"params\"", "]", ",", "g", "[", "\"params\"", "]", ")", ":", "\n", "                ", "p", ".", "data", ".", "copy_", "(", "p_copy", ".", "data", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.param_fp32_copy": [[11, 18], ["param.clone().type().detach", "param.clone().type", "param.clone"], "function", ["None"], ["def", "param_fp32_copy", "(", "params", ")", ":", "\n", "    ", "param_copy", "=", "[", "\n", "param", ".", "clone", "(", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "detach", "(", ")", "for", "param", "in", "params", "\n", "]", "\n", "for", "param", "in", "param_copy", ":", "\n", "        ", "param", ".", "requires_grad", "=", "True", "\n", "", "return", "param_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.set_grad": [[20, 33], ["zip", "param.grad.data.copy_", "torch.nn.Parameter", "torch.isnan().any", "torch.isinf().any", "param.data.new().resize_", "torch.isnan", "torch.isinf", "param.data.new", "param.data.size"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.new", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["", "def", "set_grad", "(", "params", ",", "params_with_grad", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "for", "param", ",", "param_w_grad", "in", "zip", "(", "params", ",", "params_with_grad", ")", ":", "\n", "        ", "if", "param", ".", "grad", "is", "None", ":", "\n", "            ", "param", ".", "grad", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "param", ".", "data", ".", "new", "(", ")", ".", "resize_", "(", "*", "param", ".", "data", ".", "size", "(", ")", ")", "\n", ")", "\n", "", "grad", "=", "param_w_grad", ".", "grad", ".", "data", "\n", "if", "scale", "is", "not", "None", ":", "\n", "            ", "grad", "/=", "scale", "\n", "", "if", "torch", ".", "isnan", "(", "grad", ")", ".", "any", "(", ")", "or", "torch", ".", "isinf", "(", "grad", ")", ".", "any", "(", ")", ":", "\n", "            ", "return", "True", "# invalid grad", "\n", "", "param", ".", "grad", ".", "data", ".", "copy_", "(", "grad", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.__init__": [[124, 130], ["list", "fastai_optim.OptimWrapper.opt_keys.remove", "fastai_optim.OptimWrapper.read_defaults", "fastai_optim.OptimWrapper.opt.param_groups[].keys"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.read_defaults"], ["def", "__init__", "(", "self", ",", "opt", ",", "wd", ",", "true_wd", ":", "bool", "=", "False", ",", "bn_wd", ":", "bool", "=", "True", ")", ":", "\n", "        ", "self", ".", "opt", ",", "self", ".", "true_wd", ",", "self", ".", "bn_wd", "=", "opt", ",", "true_wd", ",", "bn_wd", "\n", "self", ".", "opt_keys", "=", "list", "(", "self", ".", "opt", ".", "param_groups", "[", "0", "]", ".", "keys", "(", ")", ")", "\n", "self", ".", "opt_keys", ".", "remove", "(", "\"params\"", ")", "\n", "self", ".", "read_defaults", "(", ")", "\n", "self", ".", "wd", "=", "wd", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.create": [[131, 139], ["fastai_optim.split_bn_bias", "opt_func", "cls", "fastai_optim.listify", "fastai_optim.trainable_params"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.split_bn_bias", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.listify", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.trainable_params"], ["", "@", "classmethod", "\n", "def", "create", "(", "cls", ",", "opt_func", ",", "lr", ",", "layer_groups", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"Create an `optim.Optimizer` from `opt_func` with `lr`. Set lr on `layer_groups`.\"", "\n", "split_groups", "=", "split_bn_bias", "(", "layer_groups", ")", "\n", "opt", "=", "opt_func", "(", "[", "{", "\"params\"", ":", "trainable_params", "(", "l", ")", ",", "\"lr\"", ":", "0", "}", "for", "l", "in", "split_groups", "]", ")", "\n", "opt", "=", "cls", "(", "opt", ",", "**", "kwargs", ")", "\n", "opt", ".", "lr", ",", "opt", ".", "opt_func", "=", "listify", "(", "lr", ",", "layer_groups", ")", ",", "opt_func", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.new": [[140, 152], ["getattr", "fastai_optim.split_bn_bias", "getattr.", "fastai_optim.OptimWrapper.create", "fastai_optim.trainable_params"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.split_bn_bias", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.FastAIMixedOptim.create", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.trainable_params"], ["", "def", "new", "(", "self", ",", "layer_groups", ")", ":", "\n", "        ", "\"Create a new `OptimWrapper` from `self` with another `layer_groups` but the same hyper-parameters.\"", "\n", "opt_func", "=", "getattr", "(", "self", ",", "\"opt_func\"", ",", "self", ".", "opt", ".", "__class__", ")", "\n", "split_groups", "=", "split_bn_bias", "(", "layer_groups", ")", "\n", "opt", "=", "opt_func", "(", "[", "{", "\"params\"", ":", "trainable_params", "(", "l", ")", ",", "\"lr\"", ":", "0", "}", "for", "l", "in", "split_groups", "]", ")", "\n", "return", "self", ".", "create", "(", "\n", "opt_func", ",", "\n", "self", ".", "lr", ",", "\n", "layer_groups", ",", "\n", "wd", "=", "self", ".", "wd", ",", "\n", "true_wd", "=", "self", ".", "true_wd", ",", "\n", "bn_wd", "=", "self", ".", "bn_wd", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.__repr__": [[154, 156], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"OptimWrapper over {repr(self.opt)}.\\nTrue weight decay: {self.true_wd}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.step": [[158, 175], ["fastai_optim.OptimWrapper.opt.step", "zip", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify", "p.data.mul_", "p.data.mul_"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.listify"], ["", "def", "step", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"Set weight decay and step optimizer.\"", "\n", "# weight decay outside of optimizer step (AdamW)", "\n", "if", "self", ".", "true_wd", ":", "\n", "            ", "for", "lr", ",", "wd", ",", "pg1", ",", "pg2", "in", "zip", "(", "\n", "self", ".", "_lr", ",", "\n", "self", ".", "_wd", ",", "\n", "self", ".", "opt", ".", "param_groups", "[", ":", ":", "2", "]", ",", "\n", "self", ".", "opt", ".", "param_groups", "[", "1", ":", ":", "2", "]", ",", "\n", ")", ":", "\n", "                ", "for", "p", "in", "pg1", "[", "\"params\"", "]", ":", "\n", "                    ", "p", ".", "data", ".", "mul_", "(", "1", "-", "wd", "*", "lr", ")", "\n", "", "if", "self", ".", "bn_wd", ":", "\n", "                    ", "for", "p", "in", "pg2", "[", "\"params\"", "]", ":", "\n", "                        ", "p", ".", "data", ".", "mul_", "(", "1", "-", "wd", "*", "lr", ")", "\n", "", "", "", "self", ".", "set_val", "(", "\"weight_decay\"", ",", "listify", "(", "0", ",", "self", ".", "_wd", ")", ")", "\n", "", "self", ".", "opt", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.zero_grad": [[176, 179], ["fastai_optim.OptimWrapper.opt.zero_grad"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"Clear optimizer gradients.\"", "\n", "self", ".", "opt", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.__getattr__": [[181, 183], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "k", ":", "str", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "opt", ",", "k", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.clear": [[184, 189], ["fastai_optim.OptimWrapper.state_dict", "fastai_optim.OptimWrapper.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.state_dict", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.optim.MixedPrecisionWrapper.load_state_dict"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "\"Reset the state of the inner optimizer.\"", "\n", "sd", "=", "self", ".", "state_dict", "(", ")", "\n", "sd", "[", "\"state\"", "]", "=", "{", "}", "\n", "self", ".", "load_state_dict", "(", "sd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.lr": [[195, 198], ["fastai_optim.OptimWrapper.set_val", "fastai_optim.listify"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.listify"], ["", "@", "lr", ".", "setter", "\n", "def", "lr", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "self", ".", "_lr", "=", "self", ".", "set_val", "(", "\"lr\"", ",", "listify", "(", "val", ",", "self", ".", "_lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.mom": [[203, 210], ["fastai_optim.listify", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.listify", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.listify", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.listify"], ["", "@", "mom", ".", "setter", "\n", "def", "mom", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "if", "\"momentum\"", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "set_val", "(", "\"momentum\"", ",", "listify", "(", "val", ",", "self", ".", "_mom", ")", ")", "\n", "", "elif", "\"betas\"", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "set_val", "(", "\"betas\"", ",", "(", "listify", "(", "val", ",", "self", ".", "_mom", ")", ",", "self", ".", "_beta", ")", ")", "\n", "", "self", ".", "_mom", "=", "listify", "(", "val", ",", "self", ".", "_mom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.beta": [[215, 225], ["fastai_optim.listify", "fastai_optim.OptimWrapper.set_val", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify", "fastai_optim.listify"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.listify", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.listify", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.listify"], ["", "@", "beta", ".", "setter", "\n", "def", "beta", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "\"Set beta (or alpha as makes sense for given optimizer).\"", "\n", "if", "val", "is", "None", ":", "\n", "            ", "return", "\n", "", "if", "\"betas\"", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "set_val", "(", "\"betas\"", ",", "(", "self", ".", "_mom", ",", "listify", "(", "val", ",", "self", ".", "_beta", ")", ")", ")", "\n", "", "elif", "\"alpha\"", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "set_val", "(", "\"alpha\"", ",", "listify", "(", "val", ",", "self", ".", "_beta", ")", ")", "\n", "", "self", ".", "_beta", "=", "listify", "(", "val", ",", "self", ".", "_beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.wd": [[230, 236], ["fastai_optim.listify", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.listify", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.listify"], ["", "@", "wd", ".", "setter", "\n", "def", "wd", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "\"Set weight decay.\"", "\n", "if", "not", "self", ".", "true_wd", ":", "\n", "            ", "self", ".", "set_val", "(", "\"weight_decay\"", ",", "listify", "(", "val", ",", "self", ".", "_wd", ")", ",", "bn_groups", "=", "self", ".", "bn_wd", ")", "\n", "", "self", ".", "_wd", "=", "listify", "(", "val", ",", "self", ".", "_wd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.read_defaults": [[238, 251], ["fastai_optim.OptimWrapper.read_val", "fastai_optim.OptimWrapper.read_val", "fastai_optim.OptimWrapper.read_val", "fastai_optim.OptimWrapper.read_val", "fastai_optim.OptimWrapper.read_val"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.read_val", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.read_val", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.read_val", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.read_val", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.read_val"], ["", "def", "read_defaults", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"Read the values inside the optimizer for the hyper-parameters.\"", "\n", "self", ".", "_beta", "=", "None", "\n", "if", "\"lr\"", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "_lr", "=", "self", ".", "read_val", "(", "\"lr\"", ")", "\n", "", "if", "\"momentum\"", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "_mom", "=", "self", ".", "read_val", "(", "\"momentum\"", ")", "\n", "", "if", "\"alpha\"", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "_beta", "=", "self", ".", "read_val", "(", "\"alpha\"", ")", "\n", "", "if", "\"betas\"", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "_mom", ",", "self", ".", "_beta", "=", "self", ".", "read_val", "(", "\"betas\"", ")", "\n", "", "if", "\"weight_decay\"", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "_wd", "=", "self", ".", "read_val", "(", "\"weight_decay\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.set_val": [[252, 263], ["fastai_optim.is_tuple", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.is_tuple"], ["", "", "def", "set_val", "(", "self", ",", "key", ":", "str", ",", "val", ",", "bn_groups", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"Set `val` inside the optimizer dictionary at `key`.\"", "\n", "if", "is_tuple", "(", "val", ")", ":", "\n", "            ", "val", "=", "[", "(", "v1", ",", "v2", ")", "for", "v1", ",", "v2", "in", "zip", "(", "*", "val", ")", "]", "\n", "", "for", "v", ",", "pg1", ",", "pg2", "in", "zip", "(", "\n", "val", ",", "self", ".", "opt", ".", "param_groups", "[", ":", ":", "2", "]", ",", "self", ".", "opt", ".", "param_groups", "[", "1", ":", ":", "2", "]", "\n", ")", ":", "\n", "            ", "pg1", "[", "key", "]", "=", "v", "\n", "if", "bn_groups", ":", "\n", "                ", "pg2", "[", "key", "]", "=", "v", "\n", "", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.read_val": [[264, 270], ["fastai_optim.is_tuple"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.is_tuple"], ["", "def", "read_val", "(", "self", ",", "key", ":", "str", ")", ":", "\n", "        ", "\"Read a hyperparameter `key` in the optimizer dictionary.\"", "\n", "val", "=", "[", "pg", "[", "key", "]", "for", "pg", "in", "self", ".", "opt", ".", "param_groups", "[", ":", ":", "2", "]", "]", "\n", "if", "is_tuple", "(", "val", "[", "0", "]", ")", ":", "\n", "            ", "val", "=", "[", "o", "[", "0", "]", "for", "o", "in", "val", "]", ",", "[", "o", "[", "1", "]", "for", "o", "in", "val", "]", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.FastAIMixedOptim.create": [[273, 300], ["fastai_optim.OptimWrapper.create", "fastai_optim.get_master", "opt_func", "range", "zip"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.FastAIMixedOptim.create", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.get_master"], ["    ", "@", "classmethod", "\n", "def", "create", "(", "\n", "cls", ",", "\n", "opt_func", ",", "\n", "lr", ",", "\n", "layer_groups", ",", "\n", "model", ",", "\n", "flat_master", "=", "False", ",", "\n", "loss_scale", "=", "512.0", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"Create an `optim.Optimizer` from `opt_func` with `lr`. Set lr on `layer_groups`.\"", "\n", "opt", "=", "OptimWrapper", ".", "create", "(", "opt_func", ",", "lr", ",", "layer_groups", ",", "**", "kwargs", ")", "\n", "opt", ".", "model_params", ",", "opt", ".", "master_params", "=", "get_master", "(", "layer_groups", ",", "flat_master", ")", "\n", "opt", ".", "flat_master", "=", "flat_master", "\n", "opt", ".", "loss_scale", "=", "loss_scale", "\n", "opt", ".", "model", "=", "model", "\n", "# Changes the optimizer so that the optimization step is done in FP32.", "\n", "# opt = self.learn.opt", "\n", "mom", ",", "wd", ",", "beta", "=", "opt", ".", "mom", ",", "opt", ".", "wd", ",", "opt", ".", "beta", "\n", "lrs", "=", "[", "lr", "for", "lr", "in", "opt", ".", "_lr", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "opt_params", "=", "[", "\n", "{", "\"params\"", ":", "mp", ",", "\"lr\"", ":", "lr", "}", "for", "mp", ",", "lr", "in", "zip", "(", "opt", ".", "master_params", ",", "lrs", ")", "\n", "]", "\n", "opt", ".", "opt", "=", "opt_func", "(", "opt_params", ")", "\n", "opt", ".", "mom", ",", "opt", ".", "wd", ",", "opt", ".", "beta", "=", "mom", ",", "wd", ",", "beta", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.FastAIMixedOptim.step": [[301, 310], ["fastai_optim.model_g2master_g", "fastai_optim.OptimWrapper.step", "fastai_optim.FastAIMixedOptim.model.zero_grad", "fastai_optim.master2model", "param.grad.div_"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.model_g2master_g", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.zero_grad", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.master2model"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "model_g2master_g", "(", "self", ".", "model_params", ",", "self", ".", "master_params", ",", "self", ".", "flat_master", ")", "\n", "for", "group", "in", "self", ".", "master_params", ":", "\n", "            ", "for", "param", "in", "group", ":", "\n", "                ", "param", ".", "grad", ".", "div_", "(", "self", ".", "loss_scale", ")", "\n", "", "", "super", "(", "FastAIMixedOptim", ",", "self", ")", ".", "step", "(", ")", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "# Update the params from master to model.", "\n", "master2model", "(", "self", ".", "model_params", ",", "self", ".", "master_params", ",", "self", ".", "flat_master", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.split_bn_bias": [[17, 29], ["l.children", "isinstance", "torch.nn.Sequential", "torch.nn.Sequential", "l2.append", "l1.append"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.det3d.builder.children"], ["", "def", "split_bn_bias", "(", "layer_groups", ")", ":", "\n", "    ", "\"Split the layers in `layer_groups` into batchnorm (`bn_types`) and non-batchnorm groups.\"", "\n", "split_groups", "=", "[", "]", "\n", "for", "l", "in", "layer_groups", ":", "\n", "        ", "l1", ",", "l2", "=", "[", "]", ",", "[", "]", "\n", "for", "c", "in", "l", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "c", ",", "bn_types", ")", ":", "\n", "                ", "l2", ".", "append", "(", "c", ")", "\n", "", "else", ":", "\n", "                ", "l1", ".", "append", "(", "c", ")", "\n", "", "", "split_groups", "+=", "[", "nn", ".", "Sequential", "(", "*", "l1", ")", ",", "nn", ".", "Sequential", "(", "*", "l2", ")", "]", "\n", "", "return", "split_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.get_master": [[31, 58], ["fastai_optim.split_bn_bias", "lg.parameters", "len", "torch.nn.utils.parameters_to_vector", "torch.nn.Parameter", "master_params.append", "master_params.append", "param.clone().float().detach", "torch.nn.Parameter.new", "param.data.float", "param.clone().float", "torch.nn.Parameter.size", "param.clone"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.split_bn_bias", "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.new", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["", "def", "get_master", "(", "layer_groups", ",", "flat_master", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"Return two lists, one for the model parameters in FP16 and one for the master parameters in FP32.\"", "\n", "split_groups", "=", "split_bn_bias", "(", "layer_groups", ")", "\n", "model_params", "=", "[", "\n", "[", "param", "for", "param", "in", "lg", ".", "parameters", "(", ")", "if", "param", ".", "requires_grad", "]", "\n", "for", "lg", "in", "split_groups", "\n", "]", "\n", "if", "flat_master", ":", "\n", "        ", "master_params", "=", "[", "]", "\n", "for", "lg", "in", "model_params", ":", "\n", "            ", "if", "len", "(", "lg", ")", "!=", "0", ":", "\n", "                ", "mp", "=", "parameters_to_vector", "(", "[", "param", ".", "data", ".", "float", "(", ")", "for", "param", "in", "lg", "]", ")", "\n", "mp", "=", "torch", ".", "nn", ".", "Parameter", "(", "mp", ",", "requires_grad", "=", "True", ")", "\n", "if", "mp", ".", "grad", "is", "None", ":", "\n", "                    ", "mp", ".", "grad", "=", "mp", ".", "new", "(", "*", "mp", ".", "size", "(", ")", ")", "\n", "", "master_params", ".", "append", "(", "[", "mp", "]", ")", "\n", "", "else", ":", "\n", "                ", "master_params", ".", "append", "(", "[", "]", ")", "\n", "", "", "return", "model_params", ",", "master_params", "\n", "", "else", ":", "\n", "        ", "master_params", "=", "[", "\n", "[", "param", ".", "clone", "(", ")", ".", "float", "(", ")", ".", "detach", "(", ")", "for", "param", "in", "lg", "]", "for", "lg", "in", "model_params", "\n", "]", "\n", "for", "mp", "in", "master_params", ":", "\n", "            ", "for", "param", "in", "mp", ":", "\n", "                ", "param", ".", "requires_grad", "=", "True", "\n", "", "", "return", "model_params", ",", "master_params", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.model_g2master_g": [[60, 77], ["zip", "zip", "zip", "len", "master_group[].grad.data.copy_", "torch.nn.utils.parameters_to_vector", "master.grad.data.copy_", "master.data.new", "p.grad.data.float", "master.data.size"], "function", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.OptimWrapper.new", "home.repos.pwc.inspect_result.neeharperi_futuredet.parallel.data_container.DataContainer.size"], ["", "", "def", "model_g2master_g", "(", "model_params", ",", "master_params", ",", "flat_master", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "    ", "\"Copy the `model_params` gradients to `master_params` for the optimizer step.\"", "\n", "if", "flat_master", ":", "\n", "        ", "for", "model_group", ",", "master_group", "in", "zip", "(", "model_params", ",", "master_params", ")", ":", "\n", "            ", "if", "len", "(", "master_group", ")", "!=", "0", ":", "\n", "                ", "master_group", "[", "0", "]", ".", "grad", ".", "data", ".", "copy_", "(", "\n", "parameters_to_vector", "(", "[", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "for", "p", "in", "model_group", "]", ")", "\n", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "model_group", ",", "master_group", "in", "zip", "(", "model_params", ",", "master_params", ")", ":", "\n", "            ", "for", "model", ",", "master", "in", "zip", "(", "model_group", ",", "master_group", ")", ":", "\n", "                ", "if", "model", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "if", "master", ".", "grad", "is", "None", ":", "\n", "                        ", "master", ".", "grad", "=", "master", ".", "data", ".", "new", "(", "*", "master", ".", "data", ".", "size", "(", ")", ")", "\n", "", "master", ".", "grad", ".", "data", ".", "copy_", "(", "model", ".", "grad", ".", "data", ")", "\n", "", "else", ":", "\n", "                    ", "master", ".", "grad", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.master2model": [[79, 93], ["zip", "zip", "zip", "len", "zip", "model.data.copy_", "torch._utils._unflatten_dense_tensors", "model.data.copy_"], "function", ["None"], ["", "", "", "", "", "def", "master2model", "(", "model_params", ",", "master_params", ",", "flat_master", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "    ", "\"Copy `master_params` to `model_params`.\"", "\n", "if", "flat_master", ":", "\n", "        ", "for", "model_group", ",", "master_group", "in", "zip", "(", "model_params", ",", "master_params", ")", ":", "\n", "            ", "if", "len", "(", "model_group", ")", "!=", "0", ":", "\n", "                ", "for", "model", ",", "master", "in", "zip", "(", "\n", "model_group", ",", "\n", "_unflatten_dense_tensors", "(", "master_group", "[", "0", "]", ".", "data", ",", "model_group", ")", ",", "\n", ")", ":", "\n", "                    ", "model", ".", "data", ".", "copy_", "(", "master", ")", "\n", "", "", "", "", "else", ":", "\n", "        ", "for", "model_group", ",", "master_group", "in", "zip", "(", "model_params", ",", "master_params", ")", ":", "\n", "            ", "for", "model", ",", "master", "in", "zip", "(", "model_group", ",", "master_group", ")", ":", "\n", "                ", "model", ".", "data", ".", "copy_", "(", "master", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.listify": [[95, 108], ["list", "isinstance", "len", "len", "type", "len", "len", "len", "isinstance"], "function", ["None"], ["", "", "", "", "def", "listify", "(", "p", "=", "None", ",", "q", "=", "None", ")", ":", "\n", "    ", "\"Make `p` listy and the same length as `q`.\"", "\n", "if", "p", "is", "None", ":", "\n", "        ", "p", "=", "[", "]", "\n", "", "elif", "isinstance", "(", "p", ",", "str", ")", ":", "\n", "        ", "p", "=", "[", "p", "]", "\n", "", "elif", "not", "isinstance", "(", "p", ",", "Iterable", ")", ":", "\n", "        ", "p", "=", "[", "p", "]", "\n", "", "n", "=", "q", "if", "type", "(", "q", ")", "==", "int", "else", "len", "(", "p", ")", "if", "q", "is", "None", "else", "len", "(", "q", ")", "\n", "if", "len", "(", "p", ")", "==", "1", ":", "\n", "        ", "p", "=", "p", "*", "n", "\n", "", "assert", "len", "(", "p", ")", "==", "n", ",", "f\"List len mismatch ({len(p)} vs {n})\"", "\n", "return", "list", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.trainable_params": [[110, 114], ["filter", "m.parameters"], "function", ["None"], ["", "def", "trainable_params", "(", "m", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"Return list of trainable params in `m`.\"", "\n", "res", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "m", ".", "parameters", "(", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.fastai_optim.is_tuple": [[116, 118], ["isinstance"], "function", ["None"], ["", "def", "is_tuple", "(", "x", ")", "->", "bool", ":", "\n", "    ", "return", "isinstance", "(", "x", ",", "tuple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.LRSchedulerStep.__init__": [[8, 52], ["enumerate", "enumerate", "isinstance", "isinstance", "len", "len", "eval", "learning_schedules_fastai.LRSchedulerStep.lr_phases.append", "learning_schedules_fastai.LRSchedulerStep.lr_phases.append", "len", "eval", "learning_schedules_fastai.LRSchedulerStep.mom_phases.append", "learning_schedules_fastai.LRSchedulerStep.mom_phases.append", "int", "len", "len", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.eval", "home.repos.pwc.inspect_result.neeharperi_futuredet.buildtools.command.Node.eval"], ["    ", "def", "__init__", "(", "self", ",", "fai_optimizer", ",", "total_step", ",", "lr_phases", ",", "mom_phases", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "fai_optimizer", "\n", "self", ".", "total_step", "=", "total_step", "\n", "self", ".", "lr_phases", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "start", ",", "lambda_func", ")", "in", "enumerate", "(", "lr_phases", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "lr_phases", ")", "!=", "0", ":", "\n", "                ", "assert", "self", ".", "lr_phases", "[", "-", "1", "]", "[", "0", "]", "<", "int", "(", "start", "*", "total_step", ")", "\n", "", "if", "isinstance", "(", "lambda_func", ",", "str", ")", ":", "\n", "                ", "lambda_func", "=", "eval", "(", "lambda_func", ")", "\n", "", "if", "i", "<", "len", "(", "lr_phases", ")", "-", "1", ":", "\n", "                ", "self", ".", "lr_phases", ".", "append", "(", "\n", "(", "\n", "int", "(", "start", "*", "total_step", ")", ",", "\n", "int", "(", "lr_phases", "[", "i", "+", "1", "]", "[", "0", "]", "*", "total_step", ")", ",", "\n", "lambda_func", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "lr_phases", ".", "append", "(", "\n", "(", "int", "(", "start", "*", "total_step", ")", ",", "total_step", ",", "lambda_func", ")", "\n", ")", "\n", "", "", "assert", "self", ".", "lr_phases", "[", "0", "]", "[", "0", "]", "==", "0", "\n", "self", ".", "mom_phases", "=", "[", "]", "\n", "for", "i", ",", "(", "start", ",", "lambda_func", ")", "in", "enumerate", "(", "mom_phases", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "mom_phases", ")", "!=", "0", ":", "\n", "                ", "assert", "self", ".", "mom_phases", "[", "-", "1", "]", "[", "0", "]", "<", "start", "\n", "", "if", "isinstance", "(", "lambda_func", ",", "str", ")", ":", "\n", "                ", "lambda_func", "=", "eval", "(", "lambda_func", ")", "\n", "", "if", "i", "<", "len", "(", "mom_phases", ")", "-", "1", ":", "\n", "                ", "self", ".", "mom_phases", ".", "append", "(", "\n", "(", "\n", "int", "(", "start", "*", "total_step", ")", ",", "\n", "int", "(", "mom_phases", "[", "i", "+", "1", "]", "[", "0", "]", "*", "total_step", ")", ",", "\n", "lambda_func", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "mom_phases", ".", "append", "(", "\n", "(", "int", "(", "start", "*", "total_step", ")", ",", "total_step", ",", "lambda_func", ")", "\n", ")", "\n", "# assert self.mom_phases[0][0] == 0", "\n", "", "", "if", "len", "(", "mom_phases", ")", ">", "0", ":", "\n", "            ", "assert", "self", ".", "mom_phases", "[", "0", "]", "[", "0", "]", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.LRSchedulerStep.step": [[53, 68], ["len", "len", "lrs.append", "moms.append", "func", "func", "func"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "step", ")", ":", "\n", "        ", "lrs", ",", "moms", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "start", ",", "end", ",", "func", "in", "self", ".", "lr_phases", ":", "\n", "            ", "if", "step", ">=", "start", ":", "\n", "# self.optimizer.lr = func((step - start) / (end - start))", "\n", "                ", "lrs", ".", "append", "(", "func", "(", "(", "step", "-", "start", ")", "/", "(", "end", "-", "start", ")", ")", ")", "\n", "", "", "if", "len", "(", "lrs", ")", ">", "0", ":", "\n", "            ", "self", ".", "optimizer", ".", "lr", "=", "lrs", "[", "-", "1", "]", "\n", "", "for", "start", ",", "end", ",", "func", "in", "self", ".", "mom_phases", ":", "\n", "            ", "if", "step", ">=", "start", ":", "\n", "                ", "moms", ".", "append", "(", "func", "(", "(", "step", "-", "start", ")", "/", "(", "end", "-", "start", ")", ")", ")", "\n", "self", ".", "optimizer", ".", "mom", "=", "func", "(", "(", "step", "-", "start", ")", "/", "(", "end", "-", "start", ")", ")", "\n", "", "", "if", "len", "(", "moms", ")", ">", "0", ":", "\n", "            ", "self", ".", "optimizer", ".", "mom", "=", "moms", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.OneCycle.__init__": [[78, 96], ["int", "learning_schedules_fastai.LRSchedulerStep.__init__", "functools.partial", "functools.partial", "functools.partial", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fai_optimizer", ",", "total_step", ",", "lr_max", ",", "moms", ",", "div_factor", ",", "pct_start", ")", ":", "\n", "        ", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "moms", "=", "moms", "\n", "self", ".", "div_factor", "=", "div_factor", "\n", "self", ".", "pct_start", "=", "pct_start", "\n", "a1", "=", "int", "(", "total_step", "*", "self", ".", "pct_start", ")", "\n", "a2", "=", "total_step", "-", "a1", "\n", "low_lr", "=", "self", ".", "lr_max", "/", "self", ".", "div_factor", "\n", "lr_phases", "=", "(", "\n", "(", "0", ",", "partial", "(", "annealing_cos", ",", "low_lr", ",", "self", ".", "lr_max", ")", ")", ",", "\n", "(", "self", ".", "pct_start", ",", "partial", "(", "annealing_cos", ",", "self", ".", "lr_max", ",", "low_lr", "/", "1e4", ")", ")", ",", "\n", ")", "\n", "mom_phases", "=", "(", "\n", "(", "0", ",", "partial", "(", "annealing_cos", ",", "*", "self", ".", "moms", ")", ")", ",", "\n", "(", "self", ".", "pct_start", ",", "partial", "(", "annealing_cos", ",", "*", "self", ".", "moms", "[", ":", ":", "-", "1", "]", ")", ")", ",", "\n", ")", "\n", "fai_optimizer", ".", "lr", ",", "fai_optimizer", ".", "mom", "=", "low_lr", ",", "self", ".", "moms", "[", "0", "]", "\n", "super", "(", ")", ".", "__init__", "(", "fai_optimizer", ",", "total_step", ",", "lr_phases", ",", "mom_phases", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.ExponentialDecay.__init__": [[99, 130], ["learning_schedules_fastai.LRSchedulerStep.__init__", "lr_phases.append", "lr_phases.append", "int", "pow"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "fai_optimizer", ",", "\n", "total_step", ",", "\n", "initial_learning_rate", ",", "\n", "decay_length", ",", "\n", "decay_factor", ",", "\n", "staircase", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            decay_length: must in (0, 1)\n        \"\"\"", "\n", "assert", "decay_length", ">", "0", "\n", "assert", "decay_length", "<", "1", "\n", "self", ".", "_decay_steps_unified", "=", "decay_length", "\n", "self", ".", "_decay_factor", "=", "decay_factor", "\n", "self", ".", "_staircase", "=", "staircase", "\n", "step", "=", "0", "\n", "stage", "=", "1", "\n", "lr_phases", "=", "[", "]", "\n", "if", "staircase", ":", "\n", "            ", "while", "step", "<=", "total_step", ":", "\n", "                ", "func", "=", "lambda", "p", ",", "_d", "=", "initial_learning_rate", "*", "stage", ":", "_d", "\n", "lr_phases", ".", "append", "(", "(", "step", "/", "total_step", ",", "func", ")", ")", "\n", "stage", "*=", "decay_factor", "\n", "step", "+=", "int", "(", "decay_length", "*", "total_step", ")", "\n", "", "", "else", ":", "\n", "            ", "func", "=", "lambda", "p", ":", "pow", "(", "decay_factor", ",", "(", "p", "/", "decay_length", ")", ")", "\n", "lr_phases", ".", "append", "(", "(", "0", ",", "func", ")", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "fai_optimizer", ",", "total_step", ",", "lr_phases", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.ManualStepping.__init__": [[133, 142], ["all", "boundaries.insert", "zip", "learning_schedules_fastai.LRSchedulerStep.__init__", "len", "lr_phases.append", "len"], "methods", ["home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fai_optimizer", ",", "total_step", ",", "boundaries", ",", "rates", ")", ":", "\n", "        ", "assert", "all", "(", "[", "b", ">", "0", "and", "b", "<", "1", "for", "b", "in", "boundaries", "]", ")", "\n", "assert", "len", "(", "boundaries", ")", "+", "1", "==", "len", "(", "rates", ")", "\n", "boundaries", ".", "insert", "(", "0", ",", "0.0", ")", "\n", "lr_phases", "=", "[", "]", "\n", "for", "start", ",", "rate", "in", "zip", "(", "boundaries", ",", "rates", ")", ":", "\n", "            ", "func", "=", "lambda", "p", ",", "_d", "=", "rate", ":", "_d", "\n", "lr_phases", ".", "append", "(", "(", "start", ",", "func", ")", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "fai_optimizer", ",", "total_step", ",", "lr_phases", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.FakeOptim.__init__": [[145, 148], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "lr", "=", "0", "\n", "self", ".", "mom", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.neeharperi_futuredet.solver.learning_schedules_fastai.annealing_cos": [[70, 75], ["numpy.cos"], "function", ["None"], ["", "", "", "def", "annealing_cos", "(", "start", ",", "end", ",", "pct", ")", ":", "\n", "# print(pct, start, end)", "\n", "    ", "\"Cosine anneal from `start` to `end` as pct goes from 0.0 to 1.0.\"", "\n", "cos_out", "=", "np", ".", "cos", "(", "np", ".", "pi", "*", "pct", ")", "+", "1", "\n", "return", "end", "+", "(", "start", "-", "end", ")", "/", "2", "*", "cos_out", "\n", "\n"]]}