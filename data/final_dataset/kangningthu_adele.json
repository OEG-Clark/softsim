{"home.repos.pwc.inspect_result.kangningthu_adele.None.train.worker_init_fn.__init__": [[60, 62], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "worker_id", ")", ":", "\n", "        ", "self", ".", "id", "=", "worker_id", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.None.train.worker_init_fn.__call__": [[63, 65], ["numpy.random.seed"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "seed", "(", "1", "+", "self", ".", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.None.train.str2bool": [[48, 57], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.None.train.get_arguments": [[67, 155], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--EXP_NAME\"", ",", "type", "=", "str", ",", "default", "=", "cfg", ".", "EXP_NAME", ",", "\n", "help", "=", "\"the name of the experiment\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--scale_factor\"", ",", "type", "=", "float", ",", "default", "=", "cfg", ".", "scale_factor", ",", "\n", "help", "=", "\"scale_factor of downsample the image\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--scale_factor2\"", ",", "type", "=", "float", ",", "default", "=", "cfg", ".", "scale_factor2", ",", "\n", "help", "=", "\"scale_factor of upsample the image\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--DATA_PSEUDO_GT\"", ",", "type", "=", "str", ",", "default", "=", "cfg", ".", "DATA_PSEUDO_GT", ",", "\n", "help", "=", "\"Data path for the main segmentation map\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--TRAIN_CKPT\"", ",", "type", "=", "str", ",", "default", "=", "cfg", ".", "TRAIN_CKPT", ",", "\n", "help", "=", "\"Training path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--Lambda1\"", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "\"to balance the loss between CE and Consistency loss\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--TRAIN_BATCHES\"", ",", "type", "=", "int", ",", "default", "=", "cfg", ".", "TRAIN_BATCHES", ",", "\n", "help", "=", "\"training batch szie\"", ")", "\n", "parser", ".", "add_argument", "(", "'--threshold'", ",", "type", "=", "float", ",", "default", "=", "0.8", ",", "\n", "help", "=", "\"threshold to select the mask, \"", ")", "\n", "parser", ".", "add_argument", "(", "'--DATA_WORKERS'", ",", "type", "=", "int", ",", "default", "=", "cfg", ".", "DATA_WORKERS", ",", "\n", "help", "=", "\"number of workers in dataloader\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--TRAIN_LR'", ",", "type", "=", "float", ",", "\n", "default", "=", "cfg", ".", "TRAIN_LR", ",", "\n", "help", "=", "\"the path of trained weight\"", ")", "\n", "parser", ".", "add_argument", "(", "'--TRAIN_ITERATION'", ",", "type", "=", "int", ",", "\n", "default", "=", "cfg", ".", "TRAIN_ITERATION", ",", "\n", "help", "=", "\"the training iteration number\"", ")", "\n", "parser", ".", "add_argument", "(", "'--DATA_RANDOMCROP'", ",", "type", "=", "int", ",", "default", "=", "cfg", ".", "DATA_RANDOMCROP", ",", "\n", "help", "=", "\"the resolution of random crop\"", ")", "\n", "\n", "\n", "\n", "# related to the pseudo label updating", "\n", "parser", ".", "add_argument", "(", "'--mask_threshold'", ",", "type", "=", "float", ",", "default", "=", "0.8", ",", "\n", "help", "=", "\"only the region with high probability and disagree with Pseudo label be updated\"", ")", "\n", "parser", ".", "add_argument", "(", "'--update_interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"evaluate the prediction every 1 epoch\"", ")", "\n", "parser", ".", "add_argument", "(", "'--npl_metrics'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"0: using the original cam to compute the npl similarity, 1: use the updated pseudo label to compute the npl\"", ")", "\n", "parser", ".", "add_argument", "(", "'--r_threshold'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "\"the r threshold to decide if_update\"", ")", "\n", "\n", "# related to the eval mode", "\n", "parser", ".", "add_argument", "(", "'--scale_index'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "\"0: scale [0.7, 1.0, 1.5]  1:[0.5, 1.0, 1.75], 2:[0.5, 0.75, 1.0, 1.25, 1.5, 1.75] \"", ")", "\n", "parser", ".", "add_argument", "(", "'--flip'", ",", "type", "=", "str", ",", "default", "=", "'yes'", ",", "\n", "help", "=", "\"do not flip in the eval pred if no, else flip\"", ")", "\n", "parser", ".", "add_argument", "(", "'--CRF'", ",", "type", "=", "str", ",", "default", "=", "'no'", ",", "\n", "help", "=", "\"whether to use CRF, yes or no, default no\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dict_save_scale_factor'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "\"dict_save_scale_factor downsample_factor (in case the CPU memory is not enough)\"", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate_interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"evaluate the prediction every 1 epoch, this is always set to one for PASCAL VOC dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "'--Reinit_dict'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "\n", "const", "=", "True", ",", "default", "=", "False", ",", "\n", "help", "=", "\"whether to reinit the dict every epoch\"", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate_aug_epoch'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "\n", "help", "=", "\"when to start aug the evaluate with CRF and flip, this can be used to save some time when updating the pseudo label, we did not find significant difference\"", ")", "\n", "\n", "\n", "\n", "# continue_training_related:", "\n", "parser", ".", "add_argument", "(", "'--continue_train_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"load the trained model from which epoch, if 0, no continue training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_path'", ",", "type", "=", "str", ",", "default", "=", "'no'", ",", "\n", "help", "=", "\"the checkpoint path to load the model\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dict_path'", ",", "type", "=", "str", ",", "\n", "default", "=", "'no'", ",", "\n", "help", "=", "\"the dict path of seg path\"", ")", "\n", "parser", ".", "add_argument", "(", "'--MODEL_BACKBONE_PRETRAIN'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "\n", "const", "=", "True", ",", "default", "=", "True", ",", "\n", "help", "=", "\"Do not load pretrained model if false\"", ")", "\n", "\n", "\n", "# Comet", "\n", "parser", ".", "add_argument", "(", "'--api_key'", ",", "type", "=", "str", ",", "\n", "default", "=", "''", ",", "\n", "help", "=", "\"The api_key of Comet\"", ")", "\n", "parser", ".", "add_argument", "(", "'--online'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "\n", "const", "=", "True", ",", "default", "=", "True", ",", "\n", "help", "=", "\"False when use Comet offline\"", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.None.train.curve_func": [[157, 159], ["numpy.exp"], "function", ["None"], ["", "def", "curve_func", "(", "x", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "return", "a", "*", "(", "1", "-", "np", ".", "exp", "(", "-", "1", "/", "c", "*", "x", "**", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.None.train.fit": [[161, 165], ["scipy.optimize.curve_fit", "tuple", "numpy.geomspace", "len", "train.curve_func"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.curve_func"], ["", "def", "fit", "(", "func", ",", "x", ",", "y", ")", ":", "\n", "    ", "popt", ",", "pcov", "=", "curve_fit", "(", "func", ",", "x", ",", "y", ",", "p0", "=", "(", "1", ",", "1", ",", "1", ")", ",", "method", "=", "'trf'", ",", "sigma", "=", "np", ".", "geomspace", "(", "1", ",", ".1", ",", "len", "(", "y", ")", ")", ",", "\n", "absolute_sigma", "=", "True", ",", "bounds", "=", "(", "[", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "1", ",", "np", ".", "inf", "]", ")", ")", "\n", "return", "tuple", "(", "popt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.None.train.derivation": [[167, 170], ["numpy.exp"], "function", ["None"], ["", "def", "derivation", "(", "x", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "x", "=", "x", "+", "1e-6", "# numerical robustness", "\n", "return", "a", "*", "b", "*", "1", "/", "c", "*", "np", ".", "exp", "(", "-", "1", "/", "c", "*", "x", "**", "b", ")", "*", "(", "x", "**", "(", "b", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.None.train.label_update_epoch": [[172, 181], ["numpy.linspace", "train.fit", "numpy.arange", "train.curve_func", "len", "abs", "abs", "numpy.sum", "train.derivation", "len", "abs", "abs", "train.derivation", "train.derivation"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.fit", "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.curve_func", "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.derivation", "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.derivation", "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.derivation"], ["", "def", "label_update_epoch", "(", "ydata_fit", ",", "threshold", "=", "0.9", ",", "eval_interval", "=", "100", ",", "num_iter_per_epoch", "=", "10581", "/", "10", ")", ":", "\n", "    ", "xdata_fit", "=", "np", ".", "linspace", "(", "0", ",", "len", "(", "ydata_fit", ")", "*", "eval_interval", "/", "num_iter_per_epoch", ",", "len", "(", "ydata_fit", ")", ")", "\n", "a", ",", "b", ",", "c", "=", "fit", "(", "curve_func", ",", "xdata_fit", ",", "ydata_fit", ")", "\n", "epoch", "=", "np", ".", "arange", "(", "1", ",", "16", ")", "\n", "y_hat", "=", "curve_func", "(", "epoch", ",", "a", ",", "b", ",", "c", ")", "\n", "relative_change", "=", "abs", "(", "abs", "(", "derivation", "(", "epoch", ",", "a", ",", "b", ",", "c", ")", ")", "-", "abs", "(", "derivation", "(", "1", ",", "a", ",", "b", ",", "c", ")", ")", ")", "/", "abs", "(", "derivation", "(", "1", ",", "a", ",", "b", ",", "c", ")", ")", "\n", "relative_change", "[", "relative_change", ">", "1", "]", "=", "0", "\n", "update_epoch", "=", "np", ".", "sum", "(", "relative_change", "<=", "threshold", ")", "+", "1", "\n", "return", "update_epoch", "# , a, b, c", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.None.train.if_update": [[183, 186], ["train.label_update_epoch"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.label_update_epoch"], ["", "def", "if_update", "(", "iou_value", ",", "current_epoch", ",", "threshold", "=", "0.90", ")", ":", "\n", "    ", "update_epoch", "=", "label_update_epoch", "(", "iou_value", ",", "threshold", "=", "threshold", ")", "\n", "return", "current_epoch", ">=", "update_epoch", "# , update_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.None.train.train_net": [[187, 821], ["train.get_arguments", "os.path.join", "os.path.join", "utils.logger.CometWriter", "utils.configuration.Configuration", "datasets.generateData.generate_dataset", "datasets.generateData.generate_dataset", "datasets.generateData.generate_dataset", "numpy.arange", "numpy.random.shuffle", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "net.generateNet.generate_net", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "nn.DataParallel.to", "net.generateNet.generate_net", "net.generateNet.generate_net", "net.generateNet.generate_net.parameters", "net.generateNet.generate_net.parameters", "nn.DataParallel.state_dict", "collections.OrderedDict", "net.state_dict.items", "net.generateNet.generate_net.load_state_dict", "net.generateNet.generate_net.to", "net.generateNet.generate_net.load_state_dict", "net.generateNet.generate_net.to", "torch.Parameter", "checkpoint[].to.data.fill_", "checkpoint[].to.to", "parameter_source.get_parameter_groups", "torch.SGD", "tensorboardX.SummaryWriter", "torch.utils.data.DataLoader.dataset.do_python_eval_batch_pseudo_one_process", "enumerate", "utils.logger.CometWriter.log_hyperparams", "utils.logger.CometWriter.log_code", "utils.logger.CometWriter.log_code", "utils.logger.CometWriter.log_code", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "utils.finalprocess.writelog", "utils.logger.CometWriter.finalize", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "open", "json.dump", "cfg.__dict__.copy", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel.load_state_dict", "tensorboardX.SummaryWriter", "torch.DataParallel", "net.sync_batchnorm.replicate.patch_replication_callback", "param.detach_", "param.detach_", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "len", "utils.logger.CometWriter.add_text", "checkpoint[].to", "optim.SGD.load_state_dict", "print", "get_arguments.dict_path.endswith", "utils.logger.CometWriter.add_scalar", "tqdm.tqdm", "range", "parameter_source.state_dict", "checkpoint[].to.data.cpu", "optim.SGD.state_dict", "tensorboardX.SummaryWriter.close", "os.path.join", "int", "int", "len", "torch.load.keys", "range", "len", "len", "Updated_class_name_list.append", "numpy.load", "get_arguments.dict_path.endswith", "numpy.array", "utils.eval_net_utils.eval_net_multiprocess", "print", "torch.utils.data.DataLoader.dataset.update_seg_dict", "torch.utils.data.DataLoader.dataset.prev_pred_dict.clear", "numpy.save", "enumerate", "range", "numpy.array", "utils.logger.CometWriter.add_text", "torch.utils.data.DataLoader.dataset.do_python_eval_batch_pseudo_one_process", "enumerate", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "utils.iou_computation.compute_iou", "utils.iou_computation.compute_iou", "utils.iou_computation.compute_iou", "utils.iou_computation.compute_iou", "utils.iou_computation.compute_iou", "enumerate", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "numpy.save", "datetime.datetime.now().strftime", "str", "pickle.load", "os.path.join", "train.adjust_lr", "optim.SGD.zero_grad", "sample[].clone", "inputs.size", "torch.interpolate", "torch.interpolate", "nn.DataParallel.", "torch.interpolate", "nn.DataParallel.", "torch.interpolate", "nn.DataParallel.", "torch.interpolate", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "seg_GT.detach().cpu().numpy", "sample[].clone.numpy", "utils.iou_computation.update_iou_stat", "utils.iou_computation.update_iou_stat", "utils.iou_computation.update_iou_stat", "utils.iou_computation.update_iou_stat", "utils.iou_computation.update_iou_stat", "utils.iou_computation.update_iou_stat", "utils.iou_computation.update_iou_stat", "utils.iou_computation.update_iou_stat", "utils.JSD_loss.calc_jsd_multiscale", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "loss.backward", "optim.SGD.step", "pbar.set_description", "pbar.update", "time.sleep", "update_class_name_list.append", "nn.DataParallel.state_dict", "collections.OrderedDict", "net.state_dict.items", "net.generateNet.generate_net.load_state_dict", "net.generateNet.generate_net.to", "net.generateNet.generate_net.load_state_dict", "net.generateNet.generate_net.to", "utils.eval_net_utils.eval_net_multiprocess", "print", "torch.utils.data.DataLoader.dataset.update_seg_dict", "torch.utils.data.DataLoader.dataset.prev_pred_dict.clear", "utils.logger.CometWriter.add_scalar", "parameter_source.state_dict", "checkpoint[].to.data.cpu", "optim.SGD.state_dict", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "os.path.join", "len", "len", "open", "inputs.to", "F.interpolate.to", "F.interpolate.to", "sample[].clone.numpy", "seg_label.numpy", "seg_label.detach().cpu().numpy", "checkpoint[].to.to", "seg_label.to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "utils.imutils.img_denorm().astype", "seg_ori_ST[].cpu().numpy", "datasets.generateData.generate_dataset.label2colormap().transpose", "inputs.size", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "datasets.generateData.generate_dataset.label2colormap().transpose", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "datasets.generateData.generate_dataset.label2colormap().transpose", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "datasets.generateData.generate_dataset.label2colormap().transpose", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "torch.argmax().detach().cpu().numpy", "datasets.generateData.generate_dataset.label2colormap().transpose", "[].cpu().numpy", "datasets.generateData.generate_dataset.label2colormap().transpose", "utils.iou_computation.compute_iou", "utils.iou_computation.compute_iou", "utils.iou_computation.compute_iou", "range", "enumerate", "numpy.mean", "numpy.mean", "numpy.mean", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "tensorboardX.SummaryWriter.add_image", "tensorboardX.SummaryWriter.add_image", "tensorboardX.SummaryWriter.add_image", "tensorboardX.SummaryWriter.add_image", "tensorboardX.SummaryWriter.add_image", "tensorboardX.SummaryWriter.add_image", "tensorboardX.SummaryWriter.add_image", "tensorboardX.SummaryWriter.add_image", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "seg_label[].cpu().numpy", "datasets.generateData.generate_dataset.label2colormap().transpose", "tensorboardX.SummaryWriter.add_image", "train.if_update", "str", "len", "torch.utils.data.DataLoader.dataset.init_seg_dict", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "len", "datetime.datetime.now", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "seg_GT.detach().cpu", "loss.item", "int", "torch.utils.data.DataLoader.dataset.prev_pred_dict.keys", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.size", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "datasets.generateData.generate_dataset.label2colormap().transpose", "tensorboardX.SummaryWriter.add_image", "IoU_npl_dict[].append", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "utils.logger.CometWriter.add_scalar", "numpy.array", "numpy.array", "numpy.array", "variance[].data.cpu().numpy", "numpy.array", "np.array.append", "Updated_class_list.append", "seg_label.detach().cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "[].cpu().numpy", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "utils.imutils.img_denorm", "seg_ori_ST[].cpu", "datasets.generateData.generate_dataset.label2colormap", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "datasets.generateData.generate_dataset.label2colormap", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "datasets.generateData.generate_dataset.label2colormap", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "datasets.generateData.generate_dataset.label2colormap", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "torch.argmax().detach().cpu", "datasets.generateData.generate_dataset.label2colormap", "[].cpu", "datasets.generateData.generate_dataset.label2colormap", "loss.item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "loss_ce.item", "consistency.item", "weight[].detach().cpu().numpy", "weight[].detach().cpu().numpy", "weight[].detach().cpu().numpy", "seg_label[].cpu", "datasets.generateData.generate_dataset.label2colormap", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "seg_GT.detach", "datasets.generateData.generate_dataset.label2colormap", "inputs[].cpu().numpy", "variance[].data.cpu", "seg_label.detach", "[].cpu", "int", "seg_argmax_vis[].cpu().numpy", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.argmax().detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "weight[].detach().cpu", "weight[].detach().cpu", "weight[].detach().cpu", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "[].cpu().numpy", "inputs[].cpu", "seg_argmax_vis[].cpu", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "weight[].detach", "weight[].detach", "weight[].detach", "[].cpu"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.None.train.get_arguments", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.generateData.generate_dataset", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.generateData.generate_dataset", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.generateData.generate_dataset", "home.repos.pwc.inspect_result.kangningthu_adele.net.generateNet.generate_net", "home.repos.pwc.inspect_result.kangningthu_adele.net.generateNet.generate_net", "home.repos.pwc.inspect_result.kangningthu_adele.net.generateNet.generate_net", "home.repos.pwc.inspect_result.kangningthu_adele.net.deeplabv1_wo_interp.deeplabv1_wo_interp.get_parameter_groups", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.do_python_eval_batch_pseudo_one_process", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.log_hyperparams", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.log_code", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.log_code", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.log_code", "home.repos.pwc.inspect_result.kangningthu_adele.utils.finalprocess.writelog", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.finalize", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.replicate.patch_replication_callback", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_text", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.eval_net_utils.eval_net_multiprocess", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.update_seg_dict", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_text", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.do_python_eval_batch_pseudo_one_process", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.None.train.adjust_lr", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.utils.JSD_loss.calc_jsd_multiscale", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.update", "home.repos.pwc.inspect_result.kangningthu_adele.utils.eval_net_utils.eval_net_multiprocess", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.update_seg_dict", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.if_update", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.init_seg_dict", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar", "home.repos.pwc.inspect_result.kangningthu_adele.utils.imutils.img_denorm", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.label2colormap", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.label2colormap", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.label2colormap", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.label2colormap", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.label2colormap", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.label2colormap", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.label2colormap", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.label2colormap"], ["", "def", "train_net", "(", ")", ":", "\n", "    ", "args", "=", "get_arguments", "(", ")", "\n", "\n", "cfg", ".", "MODEL_SAVE_DIR", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "'model'", ",", "args", ".", "EXP_NAME", ")", "\n", "cfg", ".", "LOG_DIR", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "'log'", ",", "args", ".", "EXP_NAME", ")", "\n", "cfg", ".", "DATA_PSEUDO_GT", "=", "args", ".", "DATA_PSEUDO_GT", "\n", "cfg", ".", "DATA_NAME", "=", "'VOCTrainwsegDataset'", "\n", "cfg", ".", "TRAIN_LR", "=", "args", ".", "TRAIN_LR", "\n", "cfg", ".", "MODEL_NAME", "=", "'deeplabv1_wo_interp'", "\n", "cfg", ".", "DATA_RANDOMCROP", "=", "args", ".", "DATA_RANDOMCROP", "\n", "cfg", ".", "MODEL_BACKBONE_PRETRAIN", "=", "args", ".", "MODEL_BACKBONE_PRETRAIN", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "MODEL_SAVE_DIR", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "cfg", ".", "MODEL_SAVE_DIR", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "LOG_DIR", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "cfg", ".", "LOG_DIR", ")", "\n", "\n", "# save args setting in the log file", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "LOG_DIR", ",", "'commandline_args.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "args", ".", "__dict__", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n", "# initialize writer", "\n", "", "writer", "=", "CometWriter", "(", "\n", "project_name", "=", "\"noisy-segmentation\"", ",", "\n", "experiment_name", "=", "args", ".", "EXP_NAME", "+", "'-'", "+", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m:%d:%H:%M\"", ")", ",", "\n", "api_key", "=", "args", ".", "api_key", ",", "\n", "log_dir", "=", "cfg", ".", "LOG_DIR", ",", "\n", "offline", "=", "(", "(", "not", "args", ".", "online", ")", "and", "(", "args", ".", "api_key", "==", "''", ")", ")", ")", "\n", "\n", "period", "=", "'train'", "\n", "transform", "=", "'weak'", "\n", "\n", "\n", "\n", "cfg_eval", "=", "Configuration", "(", "cfg", ".", "__dict__", ".", "copy", "(", ")", ")", "\n", "# do not want to save the segmentation in the seg_dict for the eval dataset", "\n", "cfg_eval", ".", "DATA_NAME", "=", "'VOCEvalDataset'", "\n", "dataset", "=", "generate_dataset", "(", "cfg", ",", "period", "=", "period", ",", "transform", "=", "transform", ")", "\n", "\n", "scale_index", "=", "args", ".", "scale_index", "\n", "if", "scale_index", "==", "0", ":", "\n", "        ", "TEST_MULTISCALE", "=", "[", "0.75", ",", "1.0", ",", "1.5", "]", "\n", "", "elif", "scale_index", "==", "1", ":", "\n", "        ", "TEST_MULTISCALE", "=", "[", "0.5", ",", "1.0", ",", "1.75", "]", "\n", "", "elif", "scale_index", "==", "2", ":", "\n", "        ", "TEST_MULTISCALE", "=", "[", "0.5", ",", "0.75", ",", "1.0", ",", "1.25", ",", "1.5", ",", "1.75", "]", "\n", "", "elif", "scale_index", "==", "3", ":", "\n", "        ", "TEST_MULTISCALE", "=", "[", "0.7", ",", "1.0", ",", "1.5", "]", "\n", "", "elif", "scale_index", "==", "4", ":", "\n", "        ", "TEST_MULTISCALE", "=", "[", "0.5", ",", "0.75", ",", "1.0", ",", "1.25", ",", "1.5", "]", "\n", "", "elif", "scale_index", "==", "5", ":", "\n", "        ", "TEST_MULTISCALE", "=", "[", "1", "]", "\n", "\n", "", "cfg_eval", ".", "TEST_MULTISCALE", "=", "TEST_MULTISCALE", "\n", "# cfg_eval.TEST_MULTISCALE = [0.5, 0.7, 0.75, 1.0, 1.25, 1.5, 1.75]", "\n", "\n", "\n", "# bs = 1, one by one eval", "\n", "evalset", "=", "generate_dataset", "(", "cfg_eval", ",", "period", "=", "period", ",", "transform", "=", "'none'", ")", "\n", "evalset2", "=", "generate_dataset", "(", "cfg_eval", ",", "period", "=", "period", ",", "transform", "=", "'none'", ")", "\n", "\n", "\n", "indxset_shuffle", "=", "np", ".", "arange", "(", "len", "(", "dataset", ".", "name_list", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indxset_shuffle", ")", "\n", "\n", "evalset", ".", "ori_indx_list", "=", "indxset_shuffle", "[", "0", ":", "int", "(", "0.5", "*", "(", "len", "(", "dataset", ".", "name_list", ")", ")", ")", "]", "\n", "evalset", ".", "name_list", "=", "evalset", ".", "name_list", "[", "evalset", ".", "ori_indx_list", "]", "\n", "\n", "evalset2", ".", "ori_indx_list", "=", "indxset_shuffle", "[", "int", "(", "0.5", "*", "(", "len", "(", "dataset", ".", "name_list", ")", ")", ")", ":", "len", "(", "dataset", ".", "name_list", ")", "]", "\n", "evalset2", ".", "name_list", "=", "evalset2", ".", "name_list", "[", "evalset2", ".", "ori_indx_list", "]", "\n", "\n", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "args", ".", "TRAIN_BATCHES", ",", "\n", "shuffle", "=", "cfg", ".", "TRAIN_SHUFFLE", ",", "\n", "num_workers", "=", "args", ".", "DATA_WORKERS", ",", "\n", "multiprocessing_context", "=", "SpawnContext", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "worker_init_fn", "=", "worker_init_fn", ")", "\n", "# if one by one eval, the batch size is set to 1", "\n", "eval_dataloader1", "=", "DataLoader", "(", "evalset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ")", "\n", "eval_dataloader2", "=", "DataLoader", "(", "evalset2", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ")", "\n", "# load the previous checkpoint", "\n", "if", "args", ".", "checkpoint_path", "!=", "'no'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint_path", ")", "\n", "\n", "", "net", "=", "generate_net", "(", "cfg", ",", "batchnorm", "=", "nn", ".", "BatchNorm2d", ")", "\n", "# load the model", "\n", "if", "args", ".", "checkpoint_path", "!=", "'no'", ":", "\n", "        ", "net", ".", "load_state_dict", "(", "checkpoint", "[", "'net'", "]", ")", "\n", "\n", "", "if", "cfg", ".", "TRAIN_TBLOG", ":", "\n", "        ", "from", "tensorboardX", "import", "SummaryWriter", "\n", "# Set the Tensorboard logger", "\n", "tblogger", "=", "SummaryWriter", "(", "cfg", ".", "LOG_DIR", ")", "\n", "\n", "", "print", "(", "'Use %d GPU'", "%", "cfg", ".", "GPUS", ")", "\n", "device", "=", "torch", ".", "device", "(", "0", ")", "\n", "if", "cfg", ".", "GPUS", ">", "1", ":", "\n", "        ", "net", "=", "nn", ".", "DataParallel", "(", "net", ")", "\n", "patch_replication_callback", "(", "net", ")", "\n", "parameter_source", "=", "net", ".", "module", "\n", "\n", "", "else", ":", "\n", "        ", "parameter_source", "=", "net", "\n", "", "net", ".", "to", "(", "device", ")", "\n", "\n", "\n", "# those two are used for eval only, no gradient is needed, for the multiprocess evaluation purpose", "\n", "net1", "=", "generate_net", "(", "cfg", ",", "batchnorm", "=", "nn", ".", "BatchNorm2d", ")", "\n", "net2", "=", "generate_net", "(", "cfg", ",", "batchnorm", "=", "nn", ".", "BatchNorm2d", ")", "\n", "for", "param", "in", "net1", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "detach_", "(", ")", "\n", "", "for", "param", "in", "net2", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "detach_", "(", ")", "\n", "\n", "", "net_state_dict", "=", "net", ".", "state_dict", "(", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "net_state_dict", ".", "items", "(", ")", ":", "\n", "        ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "net1", ".", "load_state_dict", "(", "new_state_dict", ",", "strict", "=", "True", ")", "\n", "net1", ".", "to", "(", "torch", ".", "device", "(", "0", ")", ")", "\n", "net2", ".", "load_state_dict", "(", "new_state_dict", ",", "strict", "=", "True", ")", "\n", "net2", ".", "to", "(", "torch", ".", "device", "(", "1", ")", ")", "\n", "del", "new_state_dict", "\n", "\n", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "3", ")", ")", "\n", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "weight", ".", "to", "(", "device", ")", "\n", "\n", "parameter_groups", "=", "parameter_source", ".", "get_parameter_groups", "(", ")", "\n", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "\n", "params", "=", "[", "\n", "{", "'params'", ":", "parameter_groups", "[", "0", "]", ",", "'lr'", ":", "args", ".", "TRAIN_LR", ",", "'weight_decay'", ":", "cfg", ".", "TRAIN_WEIGHT_DECAY", "}", ",", "\n", "{", "'params'", ":", "parameter_groups", "[", "1", "]", ",", "'lr'", ":", "2", "*", "args", ".", "TRAIN_LR", ",", "'weight_decay'", ":", "0", "}", ",", "\n", "{", "'params'", ":", "parameter_groups", "[", "2", "]", ",", "'lr'", ":", "10", "*", "args", ".", "TRAIN_LR", ",", "'weight_decay'", ":", "cfg", ".", "TRAIN_WEIGHT_DECAY", "}", ",", "\n", "{", "'params'", ":", "parameter_groups", "[", "3", "]", ",", "'lr'", ":", "20", "*", "args", ".", "TRAIN_LR", ",", "'weight_decay'", ":", "0", "}", ",", "\n", "{", "'params'", ":", "weight", ",", "'lr'", ":", "args", ".", "TRAIN_LR", ",", "'weight_decay'", ":", "0", "}", "\n", "]", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN_MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN_WEIGHT_DECAY", "\n", ")", "\n", "\n", "# load the eval history for tb log", "\n", "if", "args", ".", "checkpoint_path", "!=", "'no'", ":", "\n", "# Load IoU curve for contune training", "\n", "        ", "if", "'IoU_dict'", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "            ", "IoU_npl_dict", "=", "checkpoint", "[", "'IoU_dict'", "]", "\n", "Updated_class_list", "=", "checkpoint", "[", "'updated_class'", "]", "\n", "", "else", ":", "\n", "# use to record the updated class, so that it won't be updated again", "\n", "            ", "Updated_class_list", "=", "[", "]", "\n", "# record the noisy pseudo label fitting IoU for each class", "\n", "IoU_npl_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "21", ")", ":", "\n", "                ", "IoU_npl_dict", "[", "i", "]", "=", "[", "]", "\n", "\n", "", "", "", "else", ":", "\n", "# use to record the updated class, so that it won't be updated again", "\n", "        ", "Updated_class_list", "=", "[", "]", "\n", "# record the noisy pseudo label fitting IoU for each class", "\n", "IoU_npl_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "21", ")", ":", "\n", "            ", "IoU_npl_dict", "[", "i", "]", "=", "[", "]", "\n", "\n", "", "", "itr", "=", "args", ".", "continue_train_epoch", "*", "len", "(", "dataset", ")", "//", "(", "cfg", ".", "TRAIN_BATCHES", ")", "\n", "max_itr", "=", "args", ".", "TRAIN_ITERATION", "\n", "max_epoch", "=", "max_itr", "*", "(", "cfg", ".", "TRAIN_BATCHES", ")", "//", "len", "(", "dataset", ")", "+", "1", "\n", "tblogger", "=", "SummaryWriter", "(", "cfg", ".", "LOG_DIR", ")", "\n", "\n", "if", "len", "(", "Updated_class_list", ")", "!=", "0", ":", "\n", "        ", "class_names_list", "=", "[", "'background'", ",", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "\n", "'chair'", ",", "\n", "'cow'", ",", "\n", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "\n", "'train'", ",", "'tvmonitor'", "]", "\n", "Updated_class_name_list", "=", "[", "]", "\n", "for", "class_indx", "in", "Updated_class_list", ":", "\n", "            ", "Updated_class_name_list", ".", "append", "(", "class_names_list", "[", "class_indx", "]", ")", "\n", "", "writer", ".", "add_text", "(", "'Previous_updated_class_list'", "+", "str", "(", "Updated_class_name_list", ")", ",", "0", ")", "\n", "\n", "#  load the weight and optimizer", "\n", "", "if", "args", ".", "checkpoint_path", "!=", "'no'", ":", "\n", "        ", "weight", "=", "checkpoint", "[", "'w'", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "'load previous checkpoint'", ")", "\n", "\n", "", "if", "not", "args", ".", "dict_path", "==", "'no'", ":", "\n", "        ", "if", "args", ".", "dict_path", ".", "endswith", "(", "'npy'", ")", ":", "\n", "            ", "tempt", "=", "np", ".", "load", "(", "args", ".", "dict_path", ",", "allow_pickle", "=", "True", ")", "\n", "dataloader", ".", "dataset", ".", "seg_dict", "=", "tempt", "[", "(", ")", "]", "\n", "", "elif", "args", ".", "dict_path", ".", "endswith", "(", "'pkl'", ")", ":", "\n", "            ", "dataloader", ".", "dataset", ".", "seg_dict", "=", "pickle", ".", "load", "(", "open", "(", "args", ".", "dict_path", ",", "\"rb\"", ")", ")", "\n", "", "", "else", ":", "\n", "# if not train from scratch, no previous dict to load, reevaluate it", "\n", "        ", "if", "args", ".", "continue_train_epoch", "!=", "0", ":", "\n", "            ", "IoU_npl_indx", "=", "np", ".", "array", "(", "[", "0", "]", "+", "Updated_class_list", ")", "\n", "\n", "eval_net_multiprocess", "(", "SpawnContext", ",", "net1", ",", "net2", ",", "IoU_npl_indx", ",", "dataloader", ",", "eval_dataloader1", ",", "\n", "eval_dataloader2", ",", "\n", "momentum", "=", "0", ",", "scale_index", "=", "args", ".", "scale_index", ",", "flip", "=", "args", ".", "flip", ",", "\n", "scalefactor", "=", "args", ".", "dict_save_scale_factor", ",", "CRF_post", "=", "args", ".", "CRF", ",", "\n", "tempt_save_root", "=", "cfg", ".", "LOG_DIR", ")", "\n", "print", "(", "'pred_done!'", ")", "\n", "# update the segmentation label", "\n", "dataloader", ".", "dataset", ".", "update_seg_dict", "(", "IoU_npl_indx", ",", "mask_threshold", "=", "args", ".", "mask_threshold", ")", "\n", "# clean the prev_pred_dict to save CPU memory", "\n", "dataloader", ".", "dataset", ".", "prev_pred_dict", ".", "clear", "(", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "MODEL_SAVE_DIR", ",", "'seg_dict.npy'", ")", ",", "dataloader", ".", "dataset", ".", "seg_dict", ")", "\n", "\n", "# eval the pseudo label quality", "\n", "", "", "loglist", "=", "dataloader", ".", "dataset", ".", "do_python_eval_batch_pseudo_one_process", "(", ")", "\n", "for", "indx", ",", "class_name", "in", "enumerate", "(", "\n", "[", "'background'", ",", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "\n", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "\n", "'tvmonitor'", ",", "'mIoU'", "]", ")", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "{", "'pseudolabel_dict_'", "+", "class_name", ":", "loglist", "[", "class_name", "]", "}", ",", "step", "=", "itr", ")", "\n", "# experiment.log_metric('pseudolabel_dict_' + class_name, loglist[class_name], step=itr)", "\n", "\n", "\n", "", "writer", ".", "log_hyperparams", "(", "args", ")", "\n", "writer", ".", "log_code", "(", "folder", "=", "'./lib/utils/'", ")", "\n", "writer", ".", "log_code", "(", "file_name", "=", "'./train.py'", ")", "\n", "writer", ".", "log_code", "(", "file_name", "=", "None", ",", "folder", "=", "'./lib/datasets'", ")", "\n", "\n", "\n", "\n", "with", "tqdm", "(", "total", "=", "max_itr", ")", "as", "pbar", ":", "\n", "        ", "for", "epoch", "in", "range", "(", "args", ".", "continue_train_epoch", ",", "max_epoch", ")", ":", "\n", "            ", "TP_clean", "=", "[", "0", "]", "*", "21", "\n", "P_clean", "=", "[", "0", "]", "*", "21", "\n", "T_clean", "=", "[", "0", "]", "*", "21", "\n", "\n", "TP_wrong", "=", "[", "0", "]", "*", "21", "\n", "P_wrong", "=", "[", "0", "]", "*", "21", "\n", "T_wrong", "=", "[", "0", "]", "*", "21", "\n", "\n", "# noisy pseudo label fit", "\n", "TP_npl", "=", "[", "0", "]", "*", "21", "\n", "P_npl", "=", "[", "0", "]", "*", "21", "\n", "T_npl", "=", "[", "0", "]", "*", "21", "\n", "\n", "# stat for each epoch", "\n", "TP_clean_epoch", "=", "[", "0", "]", "*", "21", "\n", "P_clean_epoch", "=", "[", "0", "]", "*", "21", "\n", "T_clean_epoch", "=", "[", "0", "]", "*", "21", "\n", "\n", "TP_wrong_epoch", "=", "[", "0", "]", "*", "21", "\n", "P_wrong_epoch", "=", "[", "0", "]", "*", "21", "\n", "T_wrong_epoch", "=", "[", "0", "]", "*", "21", "\n", "\n", "# record all the statistics", "\n", "TP_gt_epoch", "=", "[", "0", "]", "*", "21", "\n", "P_gt_epoch", "=", "[", "0", "]", "*", "21", "\n", "T_gt_epoch", "=", "[", "0", "]", "*", "21", "\n", "\n", "# the updated pseudo label quality", "\n", "TP_pl_epoch", "=", "[", "0", "]", "*", "21", "\n", "P_pl_epoch", "=", "[", "0", "]", "*", "21", "\n", "T_pl_epoch", "=", "[", "0", "]", "*", "21", "\n", "\n", "# the noisy label fit IoU", "\n", "TP_npl_epoch", "=", "[", "0", "]", "*", "21", "\n", "P_npl_epoch", "=", "[", "0", "]", "*", "21", "\n", "T_npl_epoch", "=", "[", "0", "]", "*", "21", "\n", "\n", "for", "i_batch", ",", "sample", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\n", "                ", "now_lr", "=", "adjust_lr", "(", "optimizer", ",", "itr", ",", "max_itr", ",", "args", ".", "TRAIN_LR", ",", "cfg", ".", "TRAIN_POWER", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "inputs", ",", "seg_label", ",", "seg_GT", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'segmentation'", "]", ",", "sample", "[", "'segmentationgt'", "]", "\n", "seg_ori_ST", "=", "sample", "[", "'segmentation2'", "]", ".", "clone", "(", ")", "\n", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "inputs", ".", "size", "(", ")", "\n", "\n", "\n", "inputs_small", "=", "F", ".", "interpolate", "(", "inputs", ",", "scale_factor", "=", "args", ".", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ",", "\n", "recompute_scale_factor", "=", "True", ")", "\n", "\n", "inputs_large", "=", "F", ".", "interpolate", "(", "inputs", ",", "scale_factor", "=", "args", ".", "scale_factor2", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ",", "\n", "recompute_scale_factor", "=", "True", ")", "\n", "\n", "pred1", "=", "net", "(", "inputs", ".", "to", "(", "device", ")", ")", "\n", "pred1", "=", "F", ".", "interpolate", "(", "pred1", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "\n", "# input to be scaled e.g 0.7", "\n", "pred2", "=", "net", "(", "inputs_small", ".", "to", "(", "device", ")", ")", "\n", "pred2", "=", "F", ".", "interpolate", "(", "pred2", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "# input to be scaled e.g 1.5", "\n", "pred3", "=", "net", "(", "inputs_large", ".", "to", "(", "device", ")", ")", "\n", "pred3", "=", "F", ".", "interpolate", "(", "pred3", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "pred_np", "=", "torch", ".", "argmax", "(", "pred1", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# b, h, w", "\n", "gt_np", "=", "seg_GT", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# label_np = seg_label.numpy()", "\n", "\n", "\n", "label_np", "=", "seg_ori_ST", ".", "numpy", "(", ")", "\n", "if", "args", ".", "npl_metrics", "==", "0", ":", "\n", "                    ", "label_np_updated", "=", "seg_ori_ST", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "label_np_updated", "=", "seg_label", ".", "numpy", "(", ")", "\n", "\n", "# the visualization of the label memorization", "\n", "", "mask_clean", "=", "(", "gt_np", "==", "label_np", ")", "\n", "\n", "gt_np_clean", "=", "(", "gt_np", "+", "1", ")", "*", "mask_clean", "-", "1", "\n", "gt_np_clean", "[", "gt_np_clean", "<", "0", "]", "=", "255", "\n", "\n", "gt_np_wrong", "=", "(", "gt_np", "+", "1", ")", "*", "(", "~", "mask_clean", ")", "-", "1", "\n", "gt_np_wrong", "[", "gt_np_wrong", "<", "0", "]", "=", "255", "\n", "\n", "label_np_clean", "=", "(", "label_np", "+", "1", ")", "*", "mask_clean", "-", "1", "\n", "label_np_clean", "[", "label_np_clean", "<", "0", "]", "=", "255", "\n", "\n", "label_np_wrong", "=", "(", "label_np", "+", "1", ")", "*", "(", "~", "mask_clean", ")", "-", "1", "\n", "label_np_wrong", "[", "label_np_wrong", "<", "0", "]", "=", "255", "\n", "\n", "TP_clean", ",", "P_clean", ",", "T_clean", "=", "update_iou_stat", "(", "pred_np", ",", "gt_np_clean", ",", "TP_clean", ",", "P_clean", ",", "T_clean", ")", "\n", "TP_clean_epoch", ",", "P_clean_epoch", ",", "T_clean_epoch", "=", "update_iou_stat", "(", "pred_np", ",", "gt_np_clean", ",", "TP_clean_epoch", ",", "\n", "P_clean_epoch", ",", "T_clean_epoch", ")", "\n", "\n", "TP_wrong", ",", "P_wrong", ",", "T_wrong", "=", "update_iou_stat", "(", "pred_np", ",", "gt_np_wrong", ",", "TP_wrong", ",", "P_wrong", ",", "T_wrong", ")", "\n", "TP_wrong_epoch", ",", "P_wrong_epoch", ",", "T_wrong_epoch", "=", "update_iou_stat", "(", "pred_np", ",", "gt_np_wrong", ",", "TP_wrong_epoch", ",", "\n", "P_wrong_epoch", ",", "T_wrong_epoch", ")", "\n", "\n", "TP_gt_epoch", ",", "P_gt_epoch", ",", "T_gt_epoch", "=", "update_iou_stat", "(", "pred_np", ",", "gt_np", ",", "TP_gt_epoch", ",", "\n", "P_gt_epoch", ",", "T_gt_epoch", ")", "\n", "\n", "TP_pl_epoch", ",", "P_pl_epoch", ",", "T_pl_epoch", "=", "update_iou_stat", "(", "seg_label", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "gt_np", ",", "\n", "TP_pl_epoch", ",", "\n", "P_pl_epoch", ",", "T_pl_epoch", ")", "\n", "\n", "# the statistics about noise segmentation label fitting", "\n", "TP_npl", ",", "P_npl", ",", "T_npl", "=", "update_iou_stat", "(", "pred_np", ",", "label_np_updated", ",", "TP_npl", ",", "\n", "P_npl", ",", "T_npl", ")", "\n", "\n", "TP_npl_epoch", ",", "P_npl_epoch", ",", "T_npl_epoch", "=", "update_iou_stat", "(", "pred_np", ",", "label_np_updated", ",", "TP_npl_epoch", ",", "\n", "P_npl_epoch", ",", "T_npl_epoch", ")", "\n", "\n", "\n", "# CE loss and the consistency loss", "\n", "loss_ce", ",", "consistency", ",", "variance", ",", "mixture_label", "=", "calc_jsd_temp", "(", "\n", "weight", ".", "to", "(", "device", ")", ",", "seg_label", ".", "to", "(", "device", ")", ",", "pred1", ",", "\n", "pred2", ",", "pred3", ",", "threshold", "=", "args", ".", "threshold", ")", "\n", "loss", "=", "loss_ce", "+", "args", ".", "Lambda1", "*", "consistency", "\n", "\n", "\n", "# check the loss w.r.t GT, this is only used for visualization and analysis, not used for training", "\n", "criterion_GT", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ",", "reduction", "=", "'none'", ")", "\n", "loss_clean", "=", "criterion_GT", "(", "pred1", ",", "torch", ".", "tensor", "(", "label_np_clean", ")", ".", "to", "(", "0", ")", ")", "\n", "loss_wrong", "=", "criterion_GT", "(", "pred1", ",", "torch", ".", "tensor", "(", "label_np_wrong", ")", ".", "to", "(", "0", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "pbar", ".", "set_description", "(", "\"loss=%g \"", "%", "(", "loss", ".", "item", "(", ")", ")", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "time", ".", "sleep", "(", "0.001", ")", "\n", "# for visualization and training metircs", "\n", "if", "cfg", ".", "TRAIN_TBLOG", "and", "itr", "%", "100", "==", "0", ":", "\n", "                    ", "if", "int", "(", "sample", "[", "'batch_idx'", "]", "[", "-", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "in", "dataloader", ".", "dataset", ".", "prev_pred_dict", ".", "keys", "(", ")", ":", "\n", "                        ", "prev_predict_vis", "=", "torch", ".", "tensor", "(", "dataloader", ".", "dataset", ".", "prev_pred_dict", "[", "\n", "int", "(", "sample", "[", "'batch_idx'", "]", "[", "-", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "]", ")", "# 1,c,h/4,w/4", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "prev_predict_vis", ".", "size", "(", ")", "\n", "mask_seg_prednan_vis", "=", "torch", ".", "isnan", "(", "\n", "prev_predict_vis", ")", "# the place where the value is nan in the maskprediction  b,c,h,w", "\n", "seg_argmax_vis", "=", "torch", ".", "ones", "(", "(", "b", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "long", ")", "*", "255", "\n", "seg_argmax_vis", "[", "~", "mask_seg_prednan_vis", "[", ":", ",", "0", ",", ":", ",", ":", "]", "]", "=", "torch", ".", "argmax", "(", "prev_predict_vis", ",", "dim", "=", "1", ")", "[", "\n", "~", "mask_seg_prednan_vis", "[", ":", ",", "0", ",", ":", ",", ":", "]", "]", "# b,h,w", "\n", "seg_argmax_vis_color", "=", "dataset", ".", "label2colormap", "(", "seg_argmax_vis", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "transpose", "(", "\n", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "tblogger", ".", "add_image", "(", "'seg_argmax_vis_dict'", ",", "seg_argmax_vis_color", ",", "itr", ")", "\n", "\n", "", "inputs1", "=", "img_denorm", "(", "inputs", "[", "-", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "label1", "=", "seg_ori_ST", "[", "-", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# label1 = sample['segmentation'][-1].cpu().numpy()", "\n", "label_color1", "=", "dataset", ".", "label2colormap", "(", "label1", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "inputs", ".", "size", "(", ")", "\n", "seg_vis1", "=", "torch", ".", "argmax", "(", "pred1", "[", "-", "1", "]", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "seg_color1", "=", "dataset", ".", "label2colormap", "(", "seg_vis1", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "\n", "seg_vis2", "=", "torch", ".", "argmax", "(", "pred2", "[", "-", "1", "]", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "seg_color2", "=", "dataset", ".", "label2colormap", "(", "seg_vis2", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "seg_vis3", "=", "torch", ".", "argmax", "(", "pred3", "[", "-", "1", "]", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "seg_color3", "=", "dataset", ".", "label2colormap", "(", "seg_vis3", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "mixture_label_vis", "=", "torch", ".", "argmax", "(", "mixture_label", "[", "-", "1", "]", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mixture_label_color", "=", "dataset", ".", "label2colormap", "(", "mixture_label_vis", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "label_GT", "=", "sample", "[", "'segmentationgt'", "]", "[", "-", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label_colorGT", "=", "dataset", ".", "label2colormap", "(", "label_GT", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "IoU_clean", "=", "compute_iou", "(", "TP_clean", ",", "P_clean", ",", "T_clean", ")", "\n", "IoU_wrong", "=", "compute_iou", "(", "TP_wrong", ",", "P_wrong", ",", "T_wrong", ")", "\n", "IoU_npl", "=", "compute_iou", "(", "TP_npl", ",", "P_npl", ",", "T_npl", ")", "\n", "\n", "for", "i", "in", "range", "(", "21", ")", ":", "\n", "                        ", "IoU_npl_dict", "[", "i", "]", ".", "append", "(", "IoU_npl", "[", "i", "]", ")", "\n", "\n", "", "for", "indx", ",", "class_name", "in", "enumerate", "(", "\n", "[", "'background'", ",", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "\n", "'chair'", ",", "'cow'", ",", "\n", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "\n", "'train'", ",", "'tvmonitor'", "]", ")", ":", "\n", "                        ", "writer", ".", "add_scalar", "(", "{", "'clean_'", "+", "class_name", ":", "IoU_clean", "[", "indx", "]", "}", ",", "step", "=", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "{", "'wrong_'", "+", "class_name", ":", "IoU_wrong", "[", "indx", "]", "}", ",", "step", "=", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "{", "'npl_'", "+", "class_name", ":", "IoU_npl", "[", "indx", "]", "}", ",", "step", "=", "itr", ")", "\n", "\n", "", "mIoU_clean", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_clean", ")", ")", "\n", "mIoU_wrong", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_wrong", ")", ")", "\n", "mIoU_npl", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_npl", ")", ")", "\n", "writer", ".", "add_scalar", "(", "{", "'mIoU_clean'", ":", "mIoU_clean", "}", ",", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "{", "'mIoU_wrong'", ":", "mIoU_wrong", "}", ",", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "{", "'mIoU_npl'", ":", "mIoU_npl", "}", ",", "itr", ")", "\n", "\n", "# reset the TP, P, T.", "\n", "TP_clean", "=", "[", "0", "]", "*", "21", "\n", "P_clean", "=", "[", "0", "]", "*", "21", "\n", "T_clean", "=", "[", "0", "]", "*", "21", "\n", "\n", "TP_wrong", "=", "[", "0", "]", "*", "21", "\n", "P_wrong", "=", "[", "0", "]", "*", "21", "\n", "T_wrong", "=", "[", "0", "]", "*", "21", "\n", "\n", "TP_npl", "=", "[", "0", "]", "*", "21", "\n", "P_npl", "=", "[", "0", "]", "*", "21", "\n", "T_npl", "=", "[", "0", "]", "*", "21", "\n", "\n", "writer", ".", "add_scalar", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ",", "itr", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "{", "'lossGT_clean'", ":", "torch", ".", "mean", "(", "loss_clean", ",", "dim", "=", "(", "0", ",", "1", ",", "2", ")", ")", ".", "item", "(", ")", "}", ",", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "{", "'lossGT_wrong'", ":", "torch", ".", "mean", "(", "loss_wrong", ",", "dim", "=", "(", "0", ",", "1", ",", "2", ")", ")", ".", "item", "(", ")", "}", ",", "itr", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "{", "'loss_ce'", ":", "loss_ce", ".", "item", "(", ")", "}", ",", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "{", "'consistency'", ":", "consistency", ".", "item", "(", ")", "}", ",", "itr", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "{", "'lr'", ":", "now_lr", "}", ",", "itr", ")", "\n", "tblogger", ".", "add_image", "(", "'Input'", ",", "inputs1", ",", "itr", ")", "\n", "tblogger", ".", "add_image", "(", "'Label'", ",", "label_color1", ",", "itr", ")", "\n", "tblogger", ".", "add_image", "(", "'label_GT'", ",", "label_colorGT", ",", "itr", ")", "\n", "tblogger", ".", "add_image", "(", "'SEG1'", ",", "seg_color1", ",", "itr", ")", "\n", "\n", "tblogger", ".", "add_image", "(", "'SEG2'", ",", "seg_color2", ",", "itr", ")", "\n", "tblogger", ".", "add_image", "(", "'SEG3'", ",", "seg_color3", ",", "itr", ")", "\n", "tblogger", ".", "add_image", "(", "'Weighted_SEG'", ",", "mixture_label_color", ",", "itr", ")", "\n", "\n", "tblogger", ".", "add_image", "(", "'variance'", ",", "variance", "[", "-", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "itr", ",", "\n", "dataformats", "=", "'HW'", ")", "\n", "\n", "# vis the weight", "\n", "writer", ".", "add_scalar", "(", "{", "'weight1'", ":", "weight", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ",", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "{", "'weight2'", ":", "weight", "[", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ",", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "{", "'weight3'", ":", "weight", "[", "2", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ",", "itr", ")", "\n", "\n", "\n", "label_updated", "=", "seg_label", "[", "-", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label_updated_color", "=", "dataset", ".", "label2colormap", "(", "label_updated", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "tblogger", ".", "add_image", "(", "'Label_updated'", ",", "label_updated_color", ",", "itr", ")", "\n", "\n", "", "itr", "+=", "1", "\n", "if", "itr", ">=", "max_itr", ":", "\n", "                    ", "break", "\n", "\n", "# decide which class to update in this epoch", "\n", "# the background class will always appear in the update list", "\n", "# the already updated class will be updated at each epoch afterwards", "\n", "", "", "IoU_npl_indx", "=", "[", "0", "]", "+", "Updated_class_list", "\n", "\n", "for", "class_idx", "in", "range", "(", "1", ",", "21", ")", ":", "\n", "# current code only support update each class once, if updated, it won't be updated again", "\n", "                ", "if", "not", "class_idx", "in", "Updated_class_list", ":", "\n", "                    ", "update_sign", "=", "if_update", "(", "np", ".", "array", "(", "IoU_npl_dict", "[", "class_idx", "]", ")", ",", "epoch", ",", "threshold", "=", "args", ".", "r_threshold", ")", "\n", "if", "update_sign", ":", "\n", "                        ", "IoU_npl_indx", ".", "append", "(", "class_idx", ")", "\n", "Updated_class_list", ".", "append", "(", "class_idx", ")", "\n", "\n", "# the classes that need to be updated in the current epoch", "\n", "", "", "", "IoU_npl_indx", "=", "np", ".", "array", "(", "IoU_npl_indx", ")", "\n", "\n", "if", "epoch", "<", "args", ".", "evaluate_aug_epoch", ":", "\n", "                ", "Def_CRF", "=", "'no'", "\n", "Def_flip", "=", "'no'", "\n", "", "else", ":", "\n", "                ", "Def_CRF", "=", "args", ".", "CRF", "\n", "Def_flip", "=", "'yes'", "\n", "\n", "# display which class is updated in each epoch in the tensorboard", "\n", "", "class_names_list", "=", "[", "'background'", ",", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "\n", "'chair'", ",", "'cow'", ",", "\n", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "\n", "'train'", ",", "'tvmonitor'", "]", "\n", "update_class_name_list", "=", "[", "]", "\n", "for", "class_indx", "in", "IoU_npl_indx", ":", "\n", "                ", "update_class_name_list", ".", "append", "(", "class_names_list", "[", "class_indx", "]", ")", "\n", "\n", "", "writer", ".", "add_text", "(", "'UpdateIndex'", "+", "str", "(", "update_class_name_list", ")", ",", "itr", ")", "\n", "\n", "# if only the background class is selected, do not update or eval", "\n", "if", "(", "epoch", "%", "args", ".", "evaluate_interval", "==", "0", "and", "len", "(", "\n", "IoU_npl_indx", ")", ">", "1", ")", ":", "\n", "\n", "                ", "if", "args", ".", "Reinit_dict", ":", "\n", "                    ", "dataloader", ".", "dataset", ".", "init_seg_dict", "(", ")", "\n", "# at the end of the epoch, update the dict", "\n", "# IoU_npl_indx, which class to update", "\n", "\n", "", "net_state_dict", "=", "net", ".", "state_dict", "(", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "net_state_dict", ".", "items", "(", ")", ":", "\n", "                    ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "net1", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "net1", ".", "to", "(", "torch", ".", "device", "(", "0", ")", ")", "\n", "net2", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "net2", ".", "to", "(", "torch", ".", "device", "(", "1", ")", ")", "\n", "del", "new_state_dict", "\n", "\n", "eval_net_multiprocess", "(", "SpawnContext", ",", "net1", ",", "net2", ",", "IoU_npl_indx", ",", "dataloader", ",", "eval_dataloader1", ",", "\n", "eval_dataloader2", ",", "\n", "momentum", "=", "0", ",", "scale_index", "=", "args", ".", "scale_index", ",", "flip", "=", "Def_flip", ",", "\n", "scalefactor", "=", "args", ".", "dict_save_scale_factor", ",", "CRF_post", "=", "Def_CRF", ",", "\n", "tempt_save_root", "=", "cfg", ".", "LOG_DIR", ",", "t_eval", "=", "3", ")", "\n", "print", "(", "'pred_done!'", ")", "\n", "\n", "", "if", "epoch", "%", "args", ".", "update_interval", "==", "0", "and", "len", "(", "IoU_npl_indx", ")", ">", "1", ":", "\n", "# update the segmentation label", "\n", "                ", "dataloader", ".", "dataset", ".", "update_seg_dict", "(", "IoU_npl_indx", ",", "\n", "mask_threshold", "=", "args", ".", "mask_threshold", ")", "\n", "# clean the prev_pred_dict to save CPU memory", "\n", "dataloader", ".", "dataset", ".", "prev_pred_dict", ".", "clear", "(", ")", "\n", "\n", "# let's check the pseudo label performance", "\n", "", "loglist", "=", "dataloader", ".", "dataset", ".", "do_python_eval_batch_pseudo_one_process", "(", ")", "\n", "for", "indx", ",", "class_name", "in", "enumerate", "(", "\n", "[", "'background'", ",", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "\n", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "\n", "'tvmonitor'", ",", "'mIoU'", "]", ")", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "{", "'pseudolabel_dict_'", "+", "class_name", ":", "loglist", "[", "class_name", "]", "}", ",", "itr", ")", "\n", "\n", "", "saving_state", "=", "{", "\n", "'net'", ":", "parameter_source", ".", "state_dict", "(", ")", ",", "\n", "'w'", ":", "weight", ".", "data", ".", "cpu", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'IoU_dict'", ":", "IoU_npl_dict", ",", "\n", "'updated_class'", ":", "Updated_class_list", "\n", "}", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "MODEL_SAVE_DIR", ",", "'%s_%s_%s_checkpoint-epoch%d.pth'", "%", "(", "\n", "cfg", ".", "MODEL_NAME", ",", "cfg", ".", "MODEL_BACKBONE", ",", "cfg", ".", "DATA_NAME", ",", "epoch", ")", ")", "\n", "\n", "torch", ".", "save", "(", "saving_state", ",", "save_path", ")", "\n", "\n", "print", "(", "'%s has been saved'", "%", "save_path", ")", "\n", "\n", "IoU_clean_epoch", "=", "compute_iou", "(", "TP_clean_epoch", ",", "P_clean_epoch", ",", "T_clean_epoch", ")", "\n", "IoU_wrong_epoch", "=", "compute_iou", "(", "TP_wrong_epoch", ",", "P_wrong_epoch", ",", "T_wrong_epoch", ")", "\n", "IoU_gt_epoch", "=", "compute_iou", "(", "TP_gt_epoch", ",", "P_gt_epoch", ",", "T_gt_epoch", ")", "\n", "\n", "IoU_pl_epoch", "=", "compute_iou", "(", "TP_pl_epoch", ",", "P_pl_epoch", ",", "T_pl_epoch", ")", "\n", "\n", "IoU_npl_epoch", "=", "compute_iou", "(", "TP_npl_epoch", ",", "P_npl_epoch", ",", "T_npl_epoch", ")", "\n", "\n", "for", "indx", ",", "class_name", "in", "enumerate", "(", "\n", "[", "'background'", ",", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "\n", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "\n", "'tvmonitor'", "]", ")", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "{", "'epoch_clean_'", "+", "class_name", ":", "IoU_clean_epoch", "[", "indx", "]", "}", ",", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "{", "'epoch_wrong_'", "+", "class_name", ":", "IoU_wrong_epoch", "[", "indx", "]", "}", ",", "itr", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "{", "'epoch_gt_'", "+", "class_name", ":", "IoU_gt_epoch", "[", "indx", "]", "}", ",", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "{", "'epoch_pl_'", "+", "class_name", ":", "IoU_pl_epoch", "[", "indx", "]", "}", ",", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "{", "'epoch_npl_'", "+", "class_name", ":", "IoU_npl_epoch", "[", "indx", "]", "}", ",", "itr", ")", "\n", "\n", "", "mIoU_clean_epoch", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_clean_epoch", ")", ")", "\n", "mIoU_wrong_epoch", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_wrong_epoch", ")", ")", "\n", "mIoU_gt_epoch", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_gt_epoch", ")", ")", "\n", "mIoU_pl_epoch", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_pl_epoch", ")", ")", "\n", "mIoU_npl_epoch", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_npl_epoch", ")", ")", "\n", "\n", "#", "\n", "writer", ".", "add_scalar", "(", "{", "'epoch_clean_mIoU'", ":", "mIoU_clean_epoch", "}", ",", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "{", "'epoch_wrong_mIoU'", ":", "mIoU_wrong_epoch", "}", ",", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "{", "'epoch_gt_mIoU'", ":", "mIoU_gt_epoch", "}", ",", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "{", "'epoch_pl_mIoU'", ":", "mIoU_pl_epoch", "}", ",", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "{", "'epoch_npl_mIoU'", ":", "mIoU_npl_epoch", "}", ",", "itr", ")", "\n", "\n", "# save the seg_dict as np.array", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "MODEL_SAVE_DIR", ",", "'seg_dict.npy'", ")", ",", "dataloader", ".", "dataset", ".", "seg_dict", ")", "\n", "\n", "# at the end of the training iteration, save the stats, it will automatically overwrite the epoch stats", "\n", "", "", "saving_state", "=", "{", "\n", "'net'", ":", "parameter_source", ".", "state_dict", "(", ")", ",", "\n", "'w'", ":", "weight", ".", "data", ".", "cpu", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'IoU_dict'", ":", "IoU_npl_dict", ",", "\n", "'updated_class'", ":", "Updated_class_list", "\n", "}", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "MODEL_SAVE_DIR", ",", "'%s_%s_%s_checkpoint_itr%d_all.pth'", "%", "(", "\n", "cfg", ".", "MODEL_NAME", ",", "cfg", ".", "MODEL_BACKBONE", ",", "cfg", ".", "DATA_NAME", ",", "args", ".", "TRAIN_ITERATION", ")", ")", "\n", "\n", "torch", ".", "save", "(", "saving_state", ",", "save_path", ")", "\n", "\n", "if", "cfg", ".", "TRAIN_TBLOG", ":", "\n", "        ", "tblogger", ".", "close", "(", ")", "\n", "", "print", "(", "'%s has been saved'", "%", "save_path", ")", "\n", "writelog", "(", "cfg", ",", "period", ")", "\n", "\n", "writer", ".", "finalize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.None.train.adjust_lr": [[823, 830], ["None"], "function", ["None"], ["", "def", "adjust_lr", "(", "optimizer", ",", "itr", ",", "max_itr", ",", "lr_init", ",", "power", ")", ":", "\n", "    ", "now_lr", "=", "lr_init", "*", "(", "1", "-", "itr", "/", "(", "max_itr", "+", "1", ")", ")", "**", "power", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "now_lr", "\n", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "2", "*", "now_lr", "\n", "optimizer", ".", "param_groups", "[", "2", "]", "[", "'lr'", "]", "=", "10", "*", "now_lr", "\n", "optimizer", ".", "param_groups", "[", "3", "]", "[", "'lr'", "]", "=", "20", "*", "now_lr", "\n", "return", "now_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.None.train.get_params": [[832, 849], ["model.named_modules", "isinstance", "m[].parameters", "isinstance", "m[].parameters", "isinstance", "m[].parameters"], "function", ["None"], ["", "def", "get_params", "(", "model", ",", "key", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "key", "==", "'backbone'", ":", "\n", "            ", "if", "(", "'backbone'", "in", "m", "[", "0", "]", ")", "and", "isinstance", "(", "m", "[", "1", "]", ",", "(", "\n", "nn", ".", "Conv2d", ",", "SynchronizedBatchNorm2d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "InstanceNorm2d", ")", ")", ":", "\n", "                ", "for", "p", "in", "m", "[", "1", "]", ".", "parameters", "(", ")", ":", "\n", "                    ", "yield", "p", "\n", "", "", "", "elif", "key", "==", "'cls'", ":", "\n", "            ", "if", "(", "'cls_conv'", "in", "m", "[", "0", "]", ")", "and", "isinstance", "(", "m", "[", "1", "]", ",", "(", "\n", "nn", ".", "Conv2d", ",", "SynchronizedBatchNorm2d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "InstanceNorm2d", ")", ")", ":", "\n", "                ", "for", "p", "in", "m", "[", "1", "]", ".", "parameters", "(", ")", ":", "\n", "                    ", "yield", "p", "\n", "", "", "", "elif", "key", "==", "'others'", ":", "\n", "            ", "if", "(", "'backbone'", "not", "in", "m", "[", "0", "]", "and", "'cls_conv'", "not", "in", "m", "[", "0", "]", ")", "and", "isinstance", "(", "m", "[", "1", "]", ",", "(", "\n", "nn", ".", "Conv2d", ",", "SynchronizedBatchNorm2d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "InstanceNorm2d", ")", ")", ":", "\n", "                ", "for", "p", "in", "m", "[", "1", "]", ".", "parameters", "(", ")", ":", "\n", "                    ", "yield", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.JSD_loss.calc_jsd_single": [[8, 35], ["torch.softmax", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.softmax", "torch.clamp", "torch.clamp", "torch.clamp", "torch.amax", "torch.amax", "torch.amax", "torch.amax.ge().float", "torch.clamp.log", "torch.sum", "torch.sum", "torch.sum", "sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "Mask_label255.unsqueeze", "torch.amax.ge", "torch.kl_div", "sum"], "function", ["None"], ["def", "calc_jsd_single", "(", "weight", ",", "labels1_a", ",", "pred", ",", "threshold", "=", "0.8", ",", "Mask_label255_sign", "=", "'no'", ")", ":", "\n", "\n", "    ", "Mask_label255", "=", "(", "labels1_a", "<", "255", ")", ".", "float", "(", ")", "# do not compute the area that is irrelavant (dataaug)", "\n", "weight_softmax", "=", "F", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ",", "reduction", "=", "'none'", ")", "\n", "\n", "loss", "=", "criterion", "(", "pred", "*", "weight_softmax", "[", "0", "]", ",", "labels1_a", ")", "# * weight_softmax[0]", "\n", "\n", "\n", "\n", "prob", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "prob", "=", "torch", ".", "clamp", "(", "prob", ",", "1e-7", ",", "1", ")", "\n", "\n", "max_probs", "=", "torch", ".", "amax", "(", "prob", "*", "Mask_label255", ".", "unsqueeze", "(", "1", ")", ",", "dim", "=", "(", "-", "3", ",", "-", "2", ",", "-", "1", ")", ",", "keepdim", "=", "True", ")", "# select according to the pred without the aug area", "\n", "mask", "=", "max_probs", ".", "ge", "(", "threshold", ")", ".", "float", "(", ")", "\n", "\n", "\n", "logp", "=", "prob", ".", "log", "(", ")", "\n", "\n", "log_probs", "=", "torch", ".", "sum", "(", "F", ".", "kl_div", "(", "logp", ",", "prob", ",", "reduction", "=", "'none'", ")", "*", "mask", ",", "dim", "=", "1", ")", "\n", "if", "Mask_label255_sign", "==", "'yes'", ":", "\n", "        ", "consistency", "=", "sum", "(", "log_probs", ")", "*", "Mask_label255", "\n", "", "else", ":", "\n", "        ", "consistency", "=", "sum", "(", "log_probs", ")", "\n", "\n", "", "return", "torch", ".", "mean", "(", "loss", ")", ",", "torch", ".", "mean", "(", "consistency", ")", ",", "consistency", ",", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.JSD_loss.calc_jsd_multiscale": [[7, 48], ["torch.softmax", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.amax.ge().float", "torch.clamp.log", "torch.softmax", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.amax", "torch.amax", "torch.amax", "torch.sum", "torch.sum", "torch.sum", "sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "enumerate", "enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.amax.ge", "sum", "Mask_label255.unsqueeze", "Mask_label255.unsqueeze", "torch.kl_div"], "function", ["None"], ["\n", "def", "calc_jsd_single", "(", "weight", ",", "labels1_a", ",", "pred", ",", "threshold", "=", "0.8", ",", "Mask_label255_sign", "=", "'no'", ")", ":", "\n", "\n", "    ", "Mask_label255", "=", "(", "labels1_a", "<", "255", ")", ".", "float", "(", ")", "# do not compute the area that is irrelavant (dataaug)", "\n", "weight_softmax", "=", "F", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ",", "reduction", "=", "'none'", ")", "\n", "\n", "loss", "=", "criterion", "(", "pred", "*", "weight_softmax", "[", "0", "]", ",", "labels1_a", ")", "# * weight_softmax[0]", "\n", "\n", "\n", "\n", "prob", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "prob", "=", "torch", ".", "clamp", "(", "prob", ",", "1e-7", ",", "1", ")", "\n", "\n", "max_probs", "=", "torch", ".", "amax", "(", "prob", "*", "Mask_label255", ".", "unsqueeze", "(", "1", ")", ",", "dim", "=", "(", "-", "3", ",", "-", "2", ",", "-", "1", ")", ",", "keepdim", "=", "True", ")", "# select according to the pred without the aug area", "\n", "mask", "=", "max_probs", ".", "ge", "(", "threshold", ")", ".", "float", "(", ")", "\n", "\n", "\n", "logp", "=", "prob", ".", "log", "(", ")", "\n", "\n", "log_probs", "=", "torch", ".", "sum", "(", "F", ".", "kl_div", "(", "logp", ",", "prob", ",", "reduction", "=", "'none'", ")", "*", "mask", ",", "dim", "=", "1", ")", "\n", "if", "Mask_label255_sign", "==", "'yes'", ":", "\n", "        ", "consistency", "=", "sum", "(", "log_probs", ")", "*", "Mask_label255", "\n", "", "else", ":", "\n", "        ", "consistency", "=", "sum", "(", "log_probs", ")", "\n", "\n", "", "return", "torch", ".", "mean", "(", "loss", ")", ",", "torch", ".", "mean", "(", "consistency", ")", ",", "consistency", ",", "prob", "\n", "\n", "\n", "", "def", "calc_jsd_multiscale", "(", "weight", ",", "labels1_a", ",", "pred1", ",", "pred2", ",", "pred3", ",", "threshold", "=", "0.8", ",", "Mask_label255_sign", "=", "'no'", ")", ":", "\n", "\n", "    ", "Mask_label255", "=", "(", "labels1_a", "<", "255", ")", ".", "float", "(", ")", "# do not compute the area that is irrelavant (dataaug)  b,h,w", "\n", "weight_softmax", "=", "F", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "\n", "criterion1", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ",", "reduction", "=", "'none'", ")", "\n", "criterion2", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ",", "reduction", "=", "'none'", ")", "\n", "criterion3", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ",", "reduction", "=", "'none'", ")", "\n", "\n", "loss1", "=", "criterion1", "(", "pred1", "*", "weight_softmax", "[", "0", "]", ",", "labels1_a", ")", "# * weight_softmax[0]", "\n", "loss2", "=", "criterion2", "(", "pred2", "*", "weight_softmax", "[", "1", "]", ",", "labels1_a", ")", "# * weight_softmax[1]", "\n", "loss3", "=", "criterion3", "(", "pred3", "*", "weight_softmax", "[", "2", "]", ",", "labels1_a", ")", "# * weight_softmax[2]", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.JSD_loss.calc_multiscale_backup": [[81, 113], ["pred1.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.softmax", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "nn.CrossEntropyLoss.", "seg_tempt[].to", "nn.CrossEntropyLoss.", "seg_tempt[].to", "nn.CrossEntropyLoss.", "seg_tempt[].to", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "seg_backup.to", "seg_backup.to", "seg_backup.to", "seg_backup.to", "seg_backup.to", "seg_backup.to"], "function", ["None"], ["", "def", "calc_multiscale_backup", "(", "weight", ",", "seg_backup", ",", "pred1", ",", "pred2", ",", "pred3", ",", "mask_seg_prednan", ",", "seg_prediction", ",", "Lambda_back", "=", "0", ")", ":", "\n", "    ", "b", ",", "_", ",", "h", ",", "w", "=", "pred1", ".", "size", "(", ")", "\n", "seg_tempt", "=", "torch", ".", "zeros", "(", "(", "b", ",", "21", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "seg_tempt", "[", "~", "mask_seg_prednan", "[", ":", ",", ":", ",", ":", ",", ":", "]", "]", "=", "F", ".", "softmax", "(", "seg_prediction", ",", "dim", "=", "1", ")", "[", "\n", "~", "mask_seg_prednan", "[", ":", ",", ":", ",", ":", ",", ":", "]", "]", "# b,h,w", "\n", "# need to mask out the irrelavant region NaN", "\n", "\n", "weight_softmax", "=", "F", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "\n", "criterion1", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ",", "reduction", "=", "'none'", ")", "\n", "criterion2", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ",", "reduction", "=", "'none'", ")", "\n", "criterion3", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ",", "reduction", "=", "'none'", ")", "\n", "\n", "# to let the loss depends on the confidence of previous prediction on the background class    seg_tempt[:,0,:,:]", "\n", "if", "Lambda_back", "==", "0", ":", "\n", "        ", "loss1", "=", "torch", ".", "mean", "(", "criterion1", "(", "pred1", "*", "weight_softmax", "[", "0", "]", ",", "seg_backup", ".", "to", "(", "0", ")", ")", "*", "seg_tempt", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "to", "(", "0", ")", ")", "\n", "loss2", "=", "torch", ".", "mean", "(", "criterion2", "(", "pred2", "*", "weight_softmax", "[", "1", "]", ",", "seg_backup", ".", "to", "(", "0", ")", ")", "*", "seg_tempt", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "to", "(", "0", ")", ")", "\n", "loss3", "=", "torch", ".", "mean", "(", "criterion3", "(", "pred3", "*", "weight_softmax", "[", "2", "]", ",", "seg_backup", ".", "to", "(", "0", ")", ")", "*", "seg_tempt", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "to", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "        ", "loss1", "=", "torch", ".", "mean", "(", "criterion1", "(", "pred1", "*", "weight_softmax", "[", "0", "]", ",", "seg_backup", ".", "to", "(", "0", ")", ")", ")", "*", "Lambda_back", "\n", "loss2", "=", "torch", ".", "mean", "(", "criterion2", "(", "pred2", "*", "weight_softmax", "[", "1", "]", ",", "seg_backup", ".", "to", "(", "0", ")", ")", ")", "*", "Lambda_back", "\n", "loss3", "=", "torch", ".", "mean", "(", "criterion3", "(", "pred3", "*", "weight_softmax", "[", "2", "]", ",", "seg_backup", ".", "to", "(", "0", ")", ")", ")", "*", "Lambda_back", "\n", "\n", "", "loss", "=", "(", "loss1", "+", "loss2", "+", "loss3", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "return", "loss", "", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat": [[5, 25], ["range", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["def", "update_iou_stat", "(", "predict", ",", "gt", ",", "TP", ",", "P", ",", "T", ",", "num_classes", "=", "21", ")", ":", "\n", "    ", "\"\"\"\n    :param predict: the pred of each batch,  should be numpy array, after take the argmax   b,h,w\n    :param gt: the gt label of the batch, should be numpy array     b,h,w\n    :param TP: True positive\n    :param P: positive prediction\n    :param T: True seg\n    :param num_classes: number of classes in the dataset\n    :return: TP, P, T\n    \"\"\"", "\n", "cal", "=", "gt", "<", "255", "\n", "\n", "mask", "=", "(", "predict", "==", "gt", ")", "*", "cal", "\n", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "P", "[", "i", "]", "+=", "np", ".", "sum", "(", "(", "predict", "==", "i", ")", "*", "cal", ")", "\n", "T", "[", "i", "]", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "cal", ")", "\n", "TP", "[", "i", "]", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "mask", ")", "\n", "\n", "", "return", "TP", ",", "P", ",", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.iter_iou_stat": [[27, 51], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.array", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "iter_iou_stat", "(", "predict", ",", "gt", ",", "num_classes", "=", "21", ")", ":", "\n", "    ", "\"\"\"\n    :param predict: the pred of each batch,  should be numpy array, after take the argmax   b,h,w\n    :param gt: the gt label of the batch, should be numpy array     b,h,w\n    :param TP: True positive\n    :param P: positive prediction\n    :param T: True seg\n    :param num_classes: number of classes in the dataset\n    :return: TP, P, T\n    \"\"\"", "\n", "cal", "=", "gt", "<", "255", "\n", "\n", "mask", "=", "(", "predict", "==", "gt", ")", "*", "cal", "\n", "\n", "TP", "=", "np", ".", "zeros", "(", "num_classes", ")", "\n", "P", "=", "np", ".", "zeros", "(", "num_classes", ")", "\n", "T", "=", "np", ".", "zeros", "(", "num_classes", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "P", "[", "i", "]", "=", "np", ".", "sum", "(", "(", "predict", "==", "i", ")", "*", "cal", ")", "\n", "T", "[", "i", "]", "=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "cal", ")", "\n", "TP", "[", "i", "]", "=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "mask", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "[", "TP", ",", "P", ",", "T", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou": [[53, 65], ["range", "IoU.append"], "function", ["None"], ["", "def", "compute_iou", "(", "TP", ",", "P", ",", "T", ",", "num_classes", "=", "21", ")", ":", "\n", "    ", "\"\"\"\n    :param TP:\n    :param P:\n    :param T:\n    :param num_classes: number of classes in the dataset\n    :return: IoU\n    \"\"\"", "\n", "IoU", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "IoU", ".", "append", "(", "TP", "[", "i", "]", "/", "(", "T", "[", "i", "]", "+", "P", "[", "i", "]", "-", "TP", "[", "i", "]", "+", "1e-10", ")", ")", "\n", "", "return", "IoU", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_fraction_batchwise": [[67, 81], ["range", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "update_fraction_batchwise", "(", "mask", ",", "gt", ",", "fraction", ",", "num_classes", "=", "21", ")", ":", "\n", "    ", "\"\"\"\n    :param mask: True when belong to subgroup (memorized, correct, others) which we want to calculate fraction on\n    :param gt: the gt label of the batch, numpy array\n    :param fraction: fraction of pixels in the subgroup\n    :param num_classes: number of classes in the dataset\n    :return: updated fraction\n    \"\"\"", "\n", "cal", "=", "gt", "<", "255", "\n", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "fraction", "[", "i", "]", "+=", "np", ".", "sum", "(", "(", "mask", "*", "(", "gt", "==", "i", ")", "*", "cal", ")", ")", "/", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "cal", ")", "\n", "\n", "", "return", "fraction", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_fraction_instancewise": [[83, 98], ["range", "numpy.mean", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "update_fraction_instancewise", "(", "mask", ",", "gt", ",", "fraction", ",", "num_classes", "=", "21", ")", ":", "\n", "    ", "\"\"\"\n    :param mask: True when belong to subgroup (memorized, correct, others) which we want to calculate fraction on\n    :param gt: the gt label of the batch, numpy array\n    :param fraction: fraction of pixels in the subgroup\n    :param num_classes: number of classes in the dataset\n    :return: updated fraction\n    \"\"\"", "\n", "# np.sum((gt == i) * cal maybe a nan value, can't do that", "\n", "cal", "=", "gt", "<", "255", "\n", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "fraction", "[", "i", "]", "+=", "np", ".", "mean", "(", "np", ".", "sum", "(", "(", "mask", "*", "(", "gt", "==", "i", ")", "*", "cal", ")", ",", "axis", "=", "(", "-", "2", ",", "-", "1", ")", ")", "/", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "cal", ",", "axis", "=", "(", "-", "2", ",", "-", "1", ")", ")", ")", "\n", "\n", "", "return", "fraction", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_fraction_pixelwise": [[99, 115], ["range", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "update_fraction_pixelwise", "(", "mask", ",", "gt", ",", "abs_num_and_total", ",", "num_classes", "=", "21", ")", ":", "\n", "    ", "\"\"\"\n    :param mask: True when belong to subgroup (memorized, correct, others) which we want to calculate fraction on\n    :param gt: the gt label of the batch, numpy array\n    :param abs_num_and_total: the absolute number of pixel belong to the mask and the total num of pixels [abs_num, pixel_num]\n    :param num_classes: number of classes in the dataset\n    :return: updated fraction\n    \"\"\"", "\n", "cal", "=", "gt", "<", "255", "\n", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "abs_num_and_total", "[", "i", "]", "[", "0", "]", "+=", "np", ".", "sum", "(", "mask", "*", "(", "gt", "==", "i", ")", "*", "cal", ")", "\n", "abs_num_and_total", "[", "i", "]", "[", "1", "]", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "cal", ")", "\n", "\n", "\n", "", "return", "abs_num_and_total", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.iter_fraction_pixelwise": [[116, 133], ["numpy.zeros", "range", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "iter_fraction_pixelwise", "(", "mask", ",", "gt", ",", "num_classes", "=", "21", ")", ":", "\n", "    ", "\"\"\"\n    :param mask: True when belong to subgroup (memorized, correct, others) which we want to calculate fraction on\n    :param gt: the gt label of the batch, numpy array\n    :param num_classes: number of classes in the dataset\n    :return: updated fraction\n    \"\"\"", "\n", "cal", "=", "gt", "<", "255", "\n", "\n", "abs_num_and_total", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "2", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "abs_num_and_total", "[", "i", "]", "[", "0", "]", "+=", "np", ".", "sum", "(", "mask", "*", "(", "gt", "==", "i", ")", "*", "cal", ")", "\n", "abs_num_and_total", "[", "i", "]", "[", "1", "]", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "cal", ")", "\n", "\n", "\n", "", "return", "abs_num_and_total", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.get_mask": [[136, 154], ["None"], "function", ["None"], ["", "def", "get_mask", "(", "gt_np", ",", "label_np", ",", "pred_np", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        gt_np: the GT label\n        label_np: the CAM pseudo label\n        pred_np: the prediction\n\n    Returns: the mask of different type\n\n    \"\"\"", "\n", "wrong_mask_correct", "=", "(", "gt_np", "!=", "label_np", ")", "&", "(", "pred_np", "==", "gt_np", ")", "\n", "wrong_mask_memorized", "=", "(", "gt_np", "!=", "label_np", ")", "&", "(", "pred_np", "==", "label_np", ")", "\n", "wrong_mask_others", "=", "(", "gt_np", "!=", "label_np", ")", "&", "(", "pred_np", "!=", "gt_np", ")", "&", "(", "pred_np", "!=", "label_np", ")", "\n", "clean_mask_correct", "=", "(", "gt_np", "==", "label_np", ")", "&", "(", "pred_np", "==", "gt_np", ")", "\n", "clean_mask_incorrect", "=", "(", "gt_np", "==", "label_np", ")", "&", "(", "pred_np", "!=", "gt_np", ")", "\n", "\n", "return", "(", "wrong_mask_correct", ",", "wrong_mask_memorized", ",", "wrong_mask_others", ",", "clean_mask_correct", ",", "clean_mask_incorrect", ")", "", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.visualization.color_pro": [[8, 28], ["numpy.expand_dims", "cv2.applyColorMap", "cv2.cvtColor", "cv2.addWeighted", "numpy.transpose", "numpy.transpose", "cv2.addWeighted", "numpy.transpose"], "function", ["None"], ["def", "color_pro", "(", "pro", ",", "img", "=", "None", ",", "mode", "=", "'hwc'", ")", ":", "\n", "\t", "H", ",", "W", "=", "pro", ".", "shape", "\n", "pro_255", "=", "(", "pro", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "pro_255", "=", "np", ".", "expand_dims", "(", "pro_255", ",", "axis", "=", "2", ")", "\n", "color", "=", "cv2", ".", "applyColorMap", "(", "pro_255", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "color", "=", "cv2", ".", "cvtColor", "(", "color", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "if", "img", "is", "not", "None", ":", "\n", "\t\t", "rate", "=", "0.5", "\n", "if", "mode", "==", "'hwc'", ":", "\n", "\t\t\t", "assert", "img", ".", "shape", "[", "0", "]", "==", "H", "and", "img", ".", "shape", "[", "1", "]", "==", "W", "\n", "color", "=", "cv2", ".", "addWeighted", "(", "img", ",", "rate", ",", "color", ",", "1", "-", "rate", ",", "0", ")", "\n", "", "elif", "mode", "==", "'chw'", ":", "\n", "\t\t\t", "assert", "img", ".", "shape", "[", "1", "]", "==", "H", "and", "img", ".", "shape", "[", "2", "]", "==", "W", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "color", "=", "cv2", ".", "addWeighted", "(", "img", ",", "rate", ",", "color", ",", "1", "-", "rate", ",", "0", ")", "\n", "color", "=", "np", ".", "transpose", "(", "color", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "", "else", ":", "\n", "\t\t", "if", "mode", "==", "'chw'", ":", "\n", "\t\t\t", "color", "=", "np", ".", "transpose", "(", "color", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "", "return", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.visualization.generate_vis": [[29, 53], ["visualization.ColorCLS", "visualization.ColorCAM", "visualization.max_norm", "numpy.power", "dense_crf", "visualization.ColorCLS", "visualization.ColorCAM", "numpy.max"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.utils.visualization.ColorCLS", "home.repos.pwc.inspect_result.kangningthu_adele.utils.visualization.ColorCAM", "home.repos.pwc.inspect_result.kangningthu_adele.utils.visualization.max_norm", "home.repos.pwc.inspect_result.kangningthu_adele.utils.DenseCRF.dense_crf", "home.repos.pwc.inspect_result.kangningthu_adele.utils.visualization.ColorCLS", "home.repos.pwc.inspect_result.kangningthu_adele.utils.visualization.ColorCAM"], ["", "def", "generate_vis", "(", "p", ",", "gt", ",", "img", ",", "func_label2color", ",", "threshold", "=", "0.1", ",", "norm", "=", "True", ",", "crf", "=", "False", ")", ":", "\n", "# All the input should be numpy.array", "\n", "# img should be 0-255 uint8", "\n", "\t", "C", ",", "H", ",", "W", "=", "p", ".", "shape", "\n", "\n", "if", "norm", ":", "\n", "\t\t", "prob", "=", "max_norm", "(", "p", ",", "'numpy'", ")", "\n", "", "else", ":", "\n", "\t\t", "prob", "=", "p", "\n", "", "if", "gt", "is", "not", "None", ":", "\n", "\t\t", "prob", "=", "prob", "*", "gt", "\n", "", "prob", "[", "prob", "<=", "0", "]", "=", "1e-5", "\n", "if", "threshold", "is", "not", "None", ":", "\n", "\t\t", "prob", "[", "0", ",", ":", ",", ":", "]", "=", "np", ".", "power", "(", "1", "-", "np", ".", "max", "(", "prob", "[", "1", ":", ",", ":", ",", ":", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ",", "4", ")", "\n", "\n", "", "CLS", "=", "ColorCLS", "(", "prob", ",", "func_label2color", ")", "\n", "CAM", "=", "ColorCAM", "(", "prob", ",", "img", ")", "\n", "if", "crf", ":", "\n", "\t\t", "prob_crf", "=", "dense_crf", "(", "prob", ",", "img", ",", "n_classes", "=", "C", ",", "n_iters", "=", "1", ")", "\n", "CLS_crf", "=", "ColorCLS", "(", "prob_crf", ",", "func_label2color", ")", "\n", "CAM_crf", "=", "ColorCAM", "(", "prob_crf", ",", "img", ")", "\n", "return", "CLS", ",", "CAM", ",", "CLS_crf", ",", "CAM_crf", "\n", "", "else", ":", "\n", "\t\t", "return", "CLS", ",", "CAM", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.visualization.max_norm": [[54, 82], ["F.relu.dim", "F.relu.size", "torch.relu", "[].view", "[].view", "torch.relu", "F.relu.dim", "F.relu.size", "torch.relu", "[].view", "[].view", "numpy.max", "numpy.min", "torch.relu", "numpy.max", "numpy.min", "torch.max", "torch.max", "torch.min", "torch.min", "F.relu.view", "F.relu.view", "torch.max", "torch.max", "torch.min", "torch.min", "F.relu.view", "F.relu.view"], "function", ["None"], ["", "", "def", "max_norm", "(", "p", ",", "version", "=", "'torch'", ",", "e", "=", "1e-5", ")", ":", "\n", "\t", "if", "version", "is", "'torch'", ":", "\n", "\t\t", "if", "p", ".", "dim", "(", ")", "==", "3", ":", "\n", "\t\t\t", "C", ",", "H", ",", "W", "=", "p", ".", "size", "(", ")", "\n", "p", "=", "F", ".", "relu", "(", "p", ",", "inplace", "=", "True", ")", "\n", "max_v", "=", "torch", ".", "max", "(", "p", ".", "view", "(", "C", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "view", "(", "C", ",", "1", ",", "1", ")", "\n", "min_v", "=", "torch", ".", "min", "(", "p", ".", "view", "(", "C", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "view", "(", "C", ",", "1", ",", "1", ")", "\n", "p", "=", "F", ".", "relu", "(", "p", "-", "min_v", "-", "e", ",", "inplace", "=", "True", ")", "/", "(", "max_v", "-", "min_v", "+", "e", ")", "\n", "", "elif", "p", ".", "dim", "(", ")", "==", "4", ":", "\n", "\t\t\t", "N", ",", "C", ",", "H", ",", "W", "=", "p", ".", "size", "(", ")", "\n", "p", "=", "F", ".", "relu", "(", "p", ",", "inplace", "=", "True", ")", "\n", "max_v", "=", "torch", ".", "max", "(", "p", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "min_v", "=", "torch", ".", "min", "(", "p", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "p", "=", "F", ".", "relu", "(", "p", "-", "min_v", "-", "e", ",", "inplace", "=", "True", ")", "/", "(", "max_v", "-", "min_v", "+", "e", ")", "\n", "", "", "elif", "version", "is", "'numpy'", "or", "version", "is", "'np'", ":", "\n", "\t\t", "if", "p", ".", "ndim", "==", "3", ":", "\n", "\t\t\t", "C", ",", "H", ",", "W", "=", "p", ".", "shape", "\n", "p", "[", "p", "<", "e", "]", "=", "0", "\n", "max_v", "=", "np", ".", "max", "(", "p", ",", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "min_v", "=", "np", ".", "min", "(", "p", ",", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "p", "=", "(", "p", "-", "min_v", ")", "/", "(", "max_v", "-", "min_v", "+", "e", ")", "\n", "", "elif", "p", ".", "ndim", "==", "4", ":", "\n", "\t\t\t", "N", ",", "C", ",", "H", ",", "W", "=", "p", ".", "shape", "\n", "p", "[", "p", "<", "e", "]", "=", "0", "\n", "max_v", "=", "np", ".", "max", "(", "p", ",", "(", "2", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "min_v", "=", "np", ".", "min", "(", "p", ",", "(", "2", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "p", "=", "(", "p", "-", "min_v", ")", "/", "(", "max_v", "-", "min_v", "+", "e", ")", "\n", "", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.visualization.ColorCAM": [[83, 91], ["range", "colorlist.append", "numpy.array", "visualization.color_pro"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.utils.visualization.color_pro"], ["", "def", "ColorCAM", "(", "prob", ",", "img", ")", ":", "\n", "\t", "assert", "prob", ".", "ndim", "==", "3", "\n", "C", ",", "H", ",", "W", "=", "prob", ".", "shape", "\n", "colorlist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "C", ")", ":", "\n", "\t\t", "colorlist", ".", "append", "(", "color_pro", "(", "prob", "[", "i", ",", ":", ",", ":", "]", ",", "img", "=", "img", ",", "mode", "=", "'chw'", ")", ")", "\n", "", "CAM", "=", "np", ".", "array", "(", "colorlist", ")", "/", "255.0", "\n", "return", "CAM", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.visualization.ColorCLS": [[92, 97], ["numpy.argmax", "func_label2color().transpose", "func_label2color"], "function", ["None"], ["", "def", "ColorCLS", "(", "prob", ",", "func_label2color", ")", ":", "\n", "\t", "assert", "prob", ".", "ndim", "==", "3", "\n", "prob_idx", "=", "np", ".", "argmax", "(", "prob", ",", "axis", "=", "0", ")", "\n", "CLS", "=", "func_label2color", "(", "prob_idx", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "CLS", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.visualization.num_unique_class_per_img_wo_augarea": [[99, 111], ["pred.size", "numpy.mean", "len", "range", "torch.unique", "torch.unique", "torch.argmax", "torch.argmax"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.unique", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.unique"], ["", "def", "num_unique_class_per_img_wo_augarea", "(", "pred", ",", "mask", ")", ":", "\n", "\t", "\"\"\"\n\thow many unique classes are there per prediction (the argmax classes across spatial location), we also choose to maskout the aug area\n\t:param pred: b,c,h,w\n\t:param mask: b,h,w  (0 or 1 in each element) do not want to compute the region in the augment area, make it irrelevant\n\t:return:\n\t\"\"\"", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "pred", ".", "size", "(", ")", "\n", "argmax_probs", "=", "(", "(", "torch", ".", "argmax", "(", "pred", ",", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "+", "1", ")", "*", "mask", ")", ".", "view", "(", "b", ",", "-", "1", ")", "# b, h*w", "\n", "unique_ele_mixlabel", "=", "[", "len", "(", "torch", ".", "unique", "(", "argmax_probs", "[", "i", ",", ":", "]", ")", ")", "-", "1", "for", "i", "in", "range", "(", "b", ")", "]", "# b", "\n", "mean_un_ele_mixlabel", "=", "np", ".", "mean", "(", "unique_ele_mixlabel", ")", "\n", "return", "mean_un_ele_mixlabel", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.DenseCRF.dense_crf": [[5, 40], ["pydensecrf.DenseCRF2D", "pydensecrf.utils.unary_from_softmax", "numpy.ascontiguousarray", "dcrf.DenseCRF2D.setUnaryEnergy", "dcrf.DenseCRF2D.addPairwiseGaussian", "dcrf.DenseCRF2D.addPairwiseBilateral", "dcrf.DenseCRF2D.inference", "numpy.array().reshape", "numpy.transpose().copy", "numpy.copy", "numpy.array", "numpy.transpose"], "function", ["None"], ["def", "dense_crf", "(", "probs", ",", "img", "=", "None", ",", "n_classes", "=", "21", ",", "n_iters", "=", "1", ",", "scale_factor", "=", "1", ")", ":", "\n", "#probs = np.transpose(probs,(1,2,0)).copy(order='C')", "\n", "\t", "c", ",", "h", ",", "w", "=", "probs", ".", "shape", "\n", "\n", "if", "img", "is", "not", "None", ":", "\n", "\t\t", "assert", "(", "img", ".", "shape", "[", "1", ":", "3", "]", "==", "(", "h", ",", "w", ")", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", ".", "copy", "(", "order", "=", "'C'", ")", "\n", "\n", "#probs = probs.transpose(2, 0, 1).copy(order='C') # Need a contiguous array.", "\n", "\n", "", "d", "=", "dcrf", ".", "DenseCRF2D", "(", "w", ",", "h", ",", "n_classes", ")", "# Define DenseCRF model.", "\n", "\n", "unary", "=", "unary_from_softmax", "(", "probs", ")", "\n", "unary", "=", "np", ".", "ascontiguousarray", "(", "unary", ")", "\n", "d", ".", "setUnaryEnergy", "(", "unary", ")", "\n", "d", ".", "addPairwiseGaussian", "(", "sxy", "=", "3", "/", "scale_factor", ",", "compat", "=", "3", ")", "\n", "#d.addPairwiseBilateral(sxy=80/scale_factor, srgb=13, rgbim=np.copy(img), compat=10)", "\n", "d", ".", "addPairwiseBilateral", "(", "sxy", "=", "32", "/", "scale_factor", ",", "srgb", "=", "13", ",", "rgbim", "=", "np", ".", "copy", "(", "img", ")", ",", "compat", "=", "10", ")", "\n", "Q", "=", "d", ".", "inference", "(", "n_iters", ")", "\n", "\n", "#\tU = -np.log(probs) # Unary potential.", "\n", "#\tU = U.reshape((n_classes, -1)) # Needs to be flat.", "\n", "#\td.setUnaryEnergy(U)", "\n", "#\td.addPairwiseGaussian(sxy=sxy_gaussian, compat=compat_gaussian,", "\n", "#\t\t\tkernel=kernel_gaussian, normalization=normalisation_gaussian)", "\n", "#\tif img is not None:", "\n", "#\t\tassert(img.shape[1:3] == (h, w))", "\n", "#\t\timg = np.transpose(img,(1,2,0)).copy(order='C')", "\n", "#\t\td.addPairwiseBilateral(sxy=sxy_bilateral, compat=compat_bilateral,", "\n", "#\t\t\t\tkernel=kernel_bilateral, normalization=normalisation_bilateral,", "\n", "#\t\t\t\tsrgb=srgb_bilateral, rgbim=img)", "\n", "#\tQ = d.inference(n_iters)", "\n", "preds", "=", "np", ".", "array", "(", "Q", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "n_classes", ",", "h", ",", "w", ")", ")", "\n", "#return np.expand_dims(preds, 0)", "\n", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.DenseCRF.pro_crf": [[41, 49], ["range", "numpy.concatenate", "DenseCRF.dense_crf", "img.astype"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.utils.DenseCRF.dense_crf"], ["", "def", "pro_crf", "(", "p", ",", "img", ",", "itr", ")", ":", "\n", "\t", "C", ",", "H", ",", "W", "=", "p", ".", "shape", "\n", "p_bg", "=", "1", "-", "p", "\n", "for", "i", "in", "range", "(", "C", ")", ":", "\n", "\t\t", "cat", "=", "np", ".", "concatenate", "(", "[", "p", "[", "i", ",", ":", ",", ":", "]", ",", "p_bg", "[", "i", ",", ":", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "crf_pro", "=", "dense_crf", "(", "cat", ",", "img", ".", "astype", "(", "np", ".", "uint8", ")", ",", "n_classes", "=", "C", ",", "n_iters", "=", "itr", ")", "\n", "p", "[", "i", ",", ":", ",", ":", "]", "=", "crf_pro", "[", "0", "]", "\n", "", "return", "p", "\n", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.Timer.__init__": [[17, 19], ["datetime.datetime.datetime.now"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "cache", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.Timer.check": [[20, 25], ["datetime.datetime.datetime.now", "duration.total_seconds"], "methods", ["None"], ["", "def", "check", "(", "self", ")", ":", "\n", "        ", "now", "=", "datetime", ".", "now", "(", ")", "\n", "duration", "=", "now", "-", "self", ".", "cache", "\n", "self", ".", "cache", "=", "now", "\n", "return", "duration", ".", "total_seconds", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.Timer.reset": [[26, 28], ["datetime.datetime.datetime.now"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "cache", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.__init__": [[30, 81], ["logger.Timer", "ImportError", "CometExperiment", "CometOfflineExperiment", "logger.CometWriter.experiment.set_name", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "project_name", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "experiment_name", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "api_key", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "log_dir", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "offline", ":", "bool", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "_COMET_AVAILABLE", ":", "\n", "            ", "raise", "ImportError", "(", "\n", "\"You want to use `comet_ml` logger which is not installed yet,\"", "\n", "\" install it with `pip install comet-ml`.\"", "\n", ")", "\n", "\n", "", "self", ".", "project_name", "=", "project_name", "\n", "self", ".", "experiment_name", "=", "experiment_name", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n", "self", ".", "timer", "=", "Timer", "(", ")", "\n", "\n", "\n", "if", "(", "api_key", "is", "not", "None", ")", "and", "(", "log_dir", "is", "not", "None", ")", ":", "\n", "            ", "self", ".", "mode", "=", "\"offline\"", "if", "offline", "else", "\"online\"", "\n", "self", ".", "api_key", "=", "api_key", "\n", "self", ".", "log_dir", "=", "log_dir", "\n", "\n", "", "elif", "api_key", "is", "not", "None", ":", "\n", "            ", "self", ".", "mode", "=", "\"online\"", "\n", "self", ".", "api_key", "=", "api_key", "\n", "self", ".", "log_dir", "=", "None", "\n", "", "elif", "log_dir", "is", "not", "None", ":", "\n", "            ", "self", ".", "mode", "=", "\"offline\"", "\n", "self", ".", "log_dir", "=", "log_dir", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"CometLogger requires either api_key or save_dir during initialization.\"", ")", "\n", "\n", "", "if", "self", ".", "mode", "==", "\"online\"", ":", "\n", "            ", "self", ".", "experiment", "=", "CometExperiment", "(", "\n", "api_key", "=", "self", ".", "api_key", ",", "\n", "project_name", "=", "self", ".", "project_name", ",", "\n", "**", "self", ".", "kwargs", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "experiment", "=", "CometOfflineExperiment", "(", "\n", "offline_directory", "=", "self", ".", "log_dir", ",", "\n", "project_name", "=", "self", ".", "project_name", ",", "\n", "**", "self", ".", "kwargs", ",", "\n", ")", "\n", "\n", "", "if", "self", ".", "experiment_name", ":", "\n", "            ", "self", ".", "experiment", ".", "set_name", "(", "self", ".", "experiment_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.set_step": [[82, 91], ["logger.CometWriter.timer.reset", "logger.CometWriter.timer.check", "logger.CometWriter.add_scalar"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.Timer.reset", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.Timer.check", "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar"], ["", "", "def", "set_step", "(", "self", ",", "step", ",", "epoch", "=", "None", ",", "mode", "=", "'train'", ")", "->", "None", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "epoch", "=", "epoch", "\n", "if", "step", "==", "0", ":", "\n", "            ", "self", ".", "timer", ".", "reset", "(", ")", "\n", "", "else", ":", "\n", "            ", "duration", "=", "self", ".", "timer", ".", "check", "(", ")", "\n", "self", ".", "add_scalar", "(", "{", "'steps_per_sec'", ":", "1", "/", "duration", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.log_hyperparams": [[92, 94], ["logger.CometWriter.experiment.log_parameters"], "methods", ["None"], ["", "", "def", "log_hyperparams", "(", "self", ",", "params", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "None", ":", "\n", "        ", "self", ".", "experiment", ".", "log_parameters", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.log_code": [[95, 97], ["logger.CometWriter.experiment.log_code"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.log_code"], ["", "def", "log_code", "(", "self", ",", "file_name", "=", "None", ",", "folder", "=", "'models/'", ")", "->", "None", ":", "\n", "        ", "self", ".", "experiment", ".", "log_code", "(", "file_name", "=", "file_name", ",", "folder", "=", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_scalar": [[99, 115], ["metrics.items", "torch.is_tensor", "logger.CometWriter.experiment.log_metrics", "val.cpu().detach", "logger.CometWriter.experiment.log_metrics", "logger.CometWriter.experiment.log_metrics", "logger.CometWriter.experiment.log_metrics", "val.cpu"], "methods", ["None"], ["", "def", "add_scalar", "(", "self", ",", "metrics", ":", "Dict", "[", "str", ",", "Union", "[", "torch", ".", "Tensor", ",", "float", "]", "]", ",", "step", ":", "Optional", "[", "int", "]", "=", "None", ",", "epoch", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "metrics_renamed", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "tag", "=", "'{}/{}'", ".", "format", "(", "key", ",", "self", ".", "mode", ")", "\n", "if", "is_tensor", "(", "val", ")", ":", "\n", "                ", "metrics_renamed", "[", "tag", "]", "=", "val", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                ", "metrics_renamed", "[", "tag", "]", "=", "val", "\n", "", "", "if", "epoch", "is", "None", "and", "step", "is", "None", ":", "\n", "            ", "self", ".", "experiment", ".", "log_metrics", "(", "metrics_renamed", ",", "step", "=", "self", ".", "step", ",", "epoch", "=", "self", ".", "epoch", ")", "\n", "", "elif", "epoch", "is", "None", "and", "step", "is", "not", "None", ":", "\n", "            ", "self", ".", "experiment", ".", "log_metrics", "(", "metrics_renamed", ",", "step", "=", "step", ")", "\n", "", "elif", "epoch", "is", "not", "None", "and", "step", "is", "None", ":", "\n", "            ", "self", ".", "experiment", ".", "log_metrics", "(", "metrics_renamed", ",", "epoch", "=", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "experiment", ".", "log_metrics", "(", "metrics_renamed", ",", "step", "=", "step", ",", "epoch", "=", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_plot": [[116, 121], ["logger.CometWriter.experiment.log_figure"], "methods", ["None"], ["", "", "def", "add_plot", "(", "self", ",", "figure_name", ",", "figure", ")", ":", "\n", "        ", "\"\"\"\n        Primarily for log gate plots\n        \"\"\"", "\n", "self", ".", "experiment", ".", "log_figure", "(", "figure_name", "=", "figure_name", ",", "figure", "=", "figure", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_text": [[122, 127], ["logger.CometWriter.experiment.log_text"], "methods", ["None"], ["", "def", "add_text", "(", "self", ",", "text", ",", "step", ")", ":", "\n", "        ", "\"\"\"\n        Primarily for log gate plots\n        \"\"\"", "\n", "self", ".", "experiment", ".", "log_text", "(", "text", ",", "step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.add_hist3d": [[128, 133], ["logger.CometWriter.experiment.log_histogram_3d"], "methods", ["None"], ["", "def", "add_hist3d", "(", "self", ",", "hist", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        Primarily for log gate plots\n        \"\"\"", "\n", "self", ".", "experiment", ".", "log_histogram_3d", "(", "hist", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.reset_experiment": [[134, 136], ["None"], "methods", ["None"], ["", "def", "reset_experiment", "(", "self", ")", ":", "\n", "        ", "self", ".", "experiment", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.finalize": [[137, 140], ["logger.CometWriter.experiment.end", "logger.CometWriter.reset_experiment"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.utils.logger.CometWriter.reset_experiment"], ["", "def", "finalize", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "experiment", ".", "end", "(", ")", "\n", "self", ".", "reset_experiment", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.registry.Registry.__init__": [[3, 7], ["object.__init__", "dict"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "\t\t", "super", "(", "Registry", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_name", "=", "name", "\n", "self", ".", "_module_dict", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.registry.Registry.name": [[8, 11], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.registry.Registry.module_dict": [[12, 15], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "module_dict", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "_module_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.registry.Registry.__len__": [[16, 18], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "module_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.registry.Registry.get": [[19, 21], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "key", ")", ":", "\n", "\t\t", "return", "self", ".", "_module_dict", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.registry.Registry.register_module": [[22, 30], ["TypeError", "KeyError"], "methods", ["None"], ["", "def", "register_module", "(", "self", ",", "module", "=", "None", ")", ":", "\n", "\t\t", "if", "module", "is", "None", ":", "\n", "\t\t\t", "raise", "TypeError", "(", "'fail to register None in Registry {}'", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "", "module_name", "=", "module", ".", "__name__", "\n", "if", "module_name", "in", "self", ".", "_module_dict", ":", "\n", "\t\t\t", "raise", "KeyError", "(", "'{} is already registry in Registry {}'", ".", "format", "(", "module_name", ",", "self", ".", "name", ")", ")", "\n", "", "self", ".", "_module_dict", "[", "module_name", "]", "=", "module", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.eval_net_utils.eval_net_multiprocess": [[12, 47], ["net1.eval", "net2.eval", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "train_dataloader.dataset.seg_dict.copy", "SpawnContext.Process", "SpawnContext.Process", "SpawnContext.Process.start", "SpawnContext.Process.start", "SpawnContext.Process.join", "SpawnContext.Process.join", "numpy.load", "numpy.load", "prev_pred_dict.update", "os.remove", "os.remove", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.update"], ["def", "eval_net_multiprocess", "(", "SpawnContext", ",", "net1", ",", "net2", ",", "IoU_npl_indx", ",", "train_dataloader", ",", "eval_dataloader1", ",", "\n", "eval_dataloader2", ",", "momentum", "=", "0.3", ",", "scale_index", "=", "0", ",", "flip", "=", "'no'", ",", "\n", "scalefactor", "=", "1.0", ",", "CRF_post", "=", "'no'", ",", "tempt_save_root", "=", "'.'", ",", "update_all_bg_img", "=", "True", ",", "t_eval", "=", "3", ")", ":", "\n", "    ", "net1", ".", "eval", "(", ")", "\n", "net2", ".", "eval", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "\n", "\n", "        ", "seg_dict_copy", "=", "train_dataloader", ".", "dataset", ".", "seg_dict", ".", "copy", "(", ")", "\n", "p1", "=", "SpawnContext", ".", "Process", "(", "target", "=", "eval_net_bs_one", ",", "args", "=", "(", "torch", ".", "device", "(", "0", ")", ",", "net1", ",", "IoU_npl_indx", ",", "eval_dataloader1", ",", "seg_dict_copy", ",", "momentum", ",", "scale_index", ",", "flip", ",", "scalefactor", ",", "CRF_post", ",", "tempt_save_root", ",", "'eval_dict_tempt1.npy'", ",", "update_all_bg_img", ",", "t_eval", ")", ")", "\n", "p2", "=", "SpawnContext", ".", "Process", "(", "target", "=", "eval_net_bs_one", ",", "args", "=", "(", "torch", ".", "device", "(", "1", ")", ",", "net2", ",", "IoU_npl_indx", ",", "eval_dataloader2", ",", "seg_dict_copy", ",", "momentum", ",", "scale_index", ",", "flip", ",", "scalefactor", ",", "CRF_post", ",", "tempt_save_root", ",", "'eval_dict_tempt2.npy'", ",", "update_all_bg_img", ",", "t_eval", ")", ")", "\n", "\n", "p1", ".", "start", "(", ")", "\n", "p2", ".", "start", "(", ")", "\n", "\n", "p1", ".", "join", "(", ")", "\n", "p2", ".", "join", "(", ")", "\n", "\n", "\n", "tempt", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "tempt_save_root", ",", "'eval_dict_tempt1.npy'", ")", ",", "allow_pickle", "=", "True", ")", "\n", "prev_pred_dict", "=", "tempt", "[", "(", ")", "]", "\n", "\n", "tempt2", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "tempt_save_root", ",", "'eval_dict_tempt2.npy'", ")", ",", "allow_pickle", "=", "True", ")", "\n", "prev_pred_dict2", "=", "tempt2", "[", "(", ")", "]", "\n", "\n", "prev_pred_dict", ".", "update", "(", "prev_pred_dict2", ")", "\n", "train_dataloader", ".", "dataset", ".", "prev_pred_dict", "=", "prev_pred_dict", "\n", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "tempt_save_root", ",", "'eval_dict_tempt1.npy'", ")", ")", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "tempt_save_root", ",", "'eval_dict_tempt2.npy'", ")", ")", "\n", "del", "seg_dict_copy", "\n", "\n", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.eval_net_utils.eval_net_bs_one": [[49, 124], ["numpy.save", "tqdm.tqdm", "os.path.join", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "len", "set().isdisjoint", "inputs.size", "range", "torch.stack", "torch.stack", "torch.stack", "torch.softmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.max", "torch.max", "torch.max", "sample[].numpy", "pbar.set_description", "pbar.update", "set", "image_multiscale.append", "net", "result_list.append", "img.cpu", "len", "torch.interpolate", "torch.mean", "torch.mean", "torch.mean", "torch.from_numpy.cpu().numpy", "imutils.img_denorm().astype", "DenseCRF.dense_crf", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.unsqueeze", "torch.from_numpy.cpu", "set", "image_multiscale.append", "img.to", "prob_seg.cpu.cpu", "torch.flip", "torch.flip", "torch.flip", "DenseCRF.dense_crf.astype", "numpy.unique", "torch.flip", "torch.flip", "torch.flip", "torch.from_numpy.cpu", "imutils.img_denorm", "seg_labels[].cpu().numpy", "set", "set", "[].numpy", "numpy.unique", "numpy.array", "seg_labels[].cpu", "seg_labels[].numpy"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.update", "home.repos.pwc.inspect_result.kangningthu_adele.utils.DenseCRF.dense_crf", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.unique", "home.repos.pwc.inspect_result.kangningthu_adele.utils.imutils.img_denorm", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.unique"], ["", "def", "eval_net_bs_one", "(", "device", ",", "net", ",", "IoU_npl_indx", ",", "eval_dataloader", ",", "seg_dict_copy", ",", "momentum", "=", "0.3", ",", "scale_index", "=", "0", ",", "flip", "=", "'no'", ",", "scalefactor", "=", "1.0", ",", "CRF_post", "=", "'no'", ",", "tempt_save_root", "=", "'.'", ",", "save_name", "=", "'eval_dict_tempt1.npy'", ",", "update_all_bg_img", "=", "False", ",", "t_eval", "=", "1.0", ")", ":", "\n", "# net.eval()", "\n", "#scale_index = 2 # currently only support this version, improve later", "\n", "    ", "if", "scale_index", "==", "0", ":", "\n", "        ", "TEST_MULTISCALE", "=", "[", "0.75", ",", "1.0", ",", "1.5", "]", "\n", "", "elif", "scale_index", "==", "1", ":", "\n", "        ", "TEST_MULTISCALE", "=", "[", "0.5", ",", "1.0", ",", "1.75", "]", "\n", "", "elif", "scale_index", "==", "2", ":", "\n", "        ", "TEST_MULTISCALE", "=", "[", "0.5", ",", "0.75", ",", "1.0", ",", "1.25", ",", "1.5", ",", "1.75", "]", "\n", "", "elif", "scale_index", "==", "3", ":", "\n", "        ", "TEST_MULTISCALE", "=", "[", "0.7", ",", "1.0", ",", "1.5", "]", "\n", "", "elif", "scale_index", "==", "4", ":", "\n", "        ", "TEST_MULTISCALE", "=", "[", "0.5", ",", "0.75", ",", "1.0", ",", "1.25", ",", "1.5", "]", "\n", "", "elif", "scale_index", "==", "5", ":", "\n", "        ", "TEST_MULTISCALE", "=", "[", "1.0", "]", "\n", "# print('eval_with_onebyone')", "\n", "", "prev_pred_dict", "=", "{", "}", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "eval_dataloader", ")", ")", "as", "pbar", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i_batch", ",", "sample", "in", "enumerate", "(", "eval_dataloader", ")", ":", "\n", "# print(sample['batch_idx'])", "\n", "# seg_labels = sample['segmentation']", "\n", "\n", "                ", "seg_labels", "=", "seg_dict_copy", "[", "eval_dataloader", ".", "dataset", ".", "ori_indx_list", "[", "sample", "[", "'batch_idx'", "]", "]", "]", "\n", "# if they are not disjoint, we should evaluate it", "\n", "if", "set", "(", "np", ".", "unique", "(", "seg_labels", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ".", "isdisjoint", "(", "set", "(", "IoU_npl_indx", "[", "1", ":", "]", ")", ")", ":", "\n", "\n", "                    ", "if", "update_all_bg_img", "and", "not", "(", "set", "(", "np", ".", "unique", "(", "seg_labels", "[", "0", "]", ".", "numpy", "(", ")", ")", ")", "-", "set", "(", "np", ".", "array", "(", "[", "0", ",", "255", "]", ")", ")", ")", ":", "\n", "# only the background in the pseudo label, then this picture will still be evaluated", "\n", "                        ", "pass", "\n", "", "else", ":", "\n", "# skip this one", "\n", "                        ", "continue", "\n", "\n", "", "", "inputs", "=", "sample", "[", "'image'", "]", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "inputs", ".", "size", "(", ")", "# 1,c,h,w", "\n", "result_list", "=", "[", "]", "\n", "image_multiscale", "=", "[", "]", "\n", "for", "rate", "in", "TEST_MULTISCALE", ":", "\n", "                    ", "inputs_batched", "=", "sample", "[", "'image_%f'", "%", "rate", "]", "\n", "image_multiscale", ".", "append", "(", "inputs_batched", ")", "\n", "if", "flip", "!=", "'no'", ":", "\n", "                        ", "image_multiscale", ".", "append", "(", "torch", ".", "flip", "(", "inputs_batched", ",", "[", "3", "]", ")", ")", "\n", "", "", "for", "img", "in", "image_multiscale", ":", "\n", "                    ", "result", "=", "net", "(", "img", ".", "to", "(", "device", ")", ")", "\n", "result_list", ".", "append", "(", "result", ".", "cpu", "(", ")", ")", "\n", "img", ".", "cpu", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "result_list", ")", ")", ":", "\n", "                    ", "result_seg", "=", "F", ".", "interpolate", "(", "result_list", "[", "i", "]", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "if", "i", "%", "2", "==", "1", "and", "flip", "!=", "'no'", ":", "\n", "                        ", "result_seg", "=", "torch", ".", "flip", "(", "result_seg", ",", "[", "3", "]", ")", "\n", "", "result_list", "[", "i", "]", "=", "result_seg", "\n", "", "prob_seg", "=", "torch", ".", "stack", "(", "result_list", ",", "dim", "=", "0", ")", "# 12, 1, c,h,w", "\n", "prob_seg", "=", "F", ".", "softmax", "(", "torch", ".", "mean", "(", "prob_seg", "/", "t_eval", ",", "dim", "=", "0", ",", "keepdim", "=", "False", ")", ",", "dim", "=", "1", ")", "# 1,c,h,w", "\n", "#prob_seg = torch.clamp(prob_seg, 1e-7, 1)", "\n", "# do the CRF", "\n", "if", "CRF_post", "!=", "'no'", ":", "\n", "                    ", "prob", "=", "prob_seg", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# 1,c,h,w", "\n", "img_batched", "=", "img_denorm", "(", "sample", "[", "'image'", "]", "[", "0", "]", ".", "numpy", "(", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "prob", "=", "dense_crf", "(", "prob", "[", "0", "]", ",", "img_batched", ",", "n_classes", "=", "21", ",", "n_iters", "=", "1", ")", "\n", "prob_seg", "=", "torch", ".", "from_numpy", "(", "prob", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "result", "=", "prob_seg", ".", "unsqueeze", "(", "dim", "=", "0", ")", "# 1,c,h,w", "\n", "", "else", ":", "\n", "                    ", "result", "=", "prob_seg", ".", "cpu", "(", ")", "# 1,c,h,w", "\n", "\n", "", "result_argmax", "=", "torch", ".", "argmax", "(", "result", ",", "dim", "=", "1", ")", "# 1,c,h,w  the pred argmax label", "\n", "result_max_prob", ",", "_", "=", "torch", ".", "max", "(", "result", ",", "dim", "=", "1", ")", "# 1,c,h,w  the max probability", "\n", "for", "batch_idx", "in", "sample", "[", "'batch_idx'", "]", ".", "numpy", "(", ")", ":", "\n", "# prev_pred_dict[batch_idx] = result", "\n", "                    ", "prev_pred_dict", "[", "eval_dataloader", ".", "dataset", ".", "ori_indx_list", "[", "batch_idx", "]", "]", "=", "(", "result_argmax", ",", "result_max_prob", ")", "\n", "", "pbar", ".", "set_description", "(", "\"Correcting Labels \"", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "", "", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "tempt_save_root", ",", "save_name", ")", ",", "prev_pred_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.test_utils.single_gpu_test": [[5, 32], ["model.eval", "torch.cuda.device_count", "len", "tqdm.tqdm", "torch.no_grad", "enumerate", "prepare_func", "collect_func", "pbar.set_description", "pbar.update", "time.sleep", "inference_func", "result_list.append", "save_step_func", "collect_list.append", "img.cuda"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.update"], ["def", "single_gpu_test", "(", "model", ",", "dataloader", ",", "prepare_func", ",", "inference_func", ",", "collect_func", ",", "save_step_func", "=", "None", ")", ":", "\n", "\t", "model", ".", "eval", "(", ")", "\n", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "#assert n_gpus == 1", "\n", "collect_list", "=", "[", "]", "\n", "total_num", "=", "len", "(", "dataloader", ")", "\n", "with", "tqdm", "(", "total", "=", "total_num", ")", "as", "pbar", ":", "\n", "\t\t", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "for", "i_batch", ",", "sample", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\t\t\t\t", "name", "=", "sample", "[", "'name'", "]", "\n", "image_msf", "=", "prepare_func", "(", "sample", ")", "\n", "result_list", "=", "[", "]", "\n", "for", "img", "in", "image_msf", ":", "\n", "\t\t\t\t\t", "result", "=", "inference_func", "(", "model", ",", "img", ".", "cuda", "(", ")", ")", "\n", "result_list", ".", "append", "(", "result", ")", "\n", "", "result_item", "=", "collect_func", "(", "result_list", ",", "sample", ")", "\n", "result_sample", "=", "{", "'predict'", ":", "result_item", ",", "'name'", ":", "name", "[", "0", "]", "}", "\n", "#print('%d/%d'%(i_batch,len(dataloader)))", "\n", "pbar", ".", "set_description", "(", "'Processing'", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "time", ".", "sleep", "(", "0.001", ")", "\n", "\n", "if", "save_step_func", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "save_step_func", "(", "result_sample", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "collect_list", ".", "append", "(", "result_sample", ")", "\n", "", "", "", "", "return", "collect_list", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.test_utils.single_gpu_multimodel_ensemble_test": [[34, 61], ["model.eval", "torch.cuda.device_count", "len", "tqdm.tqdm", "torch.no_grad", "enumerate", "prepare_func", "collect_func", "pbar.set_description", "pbar.update", "time.sleep", "inference_func", "result_list.append", "save_step_func", "collect_list.append", "img.cuda"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.update"], ["", "def", "single_gpu_multimodel_ensemble_test", "(", "model", ",", "model2", ",", "dataloader", ",", "prepare_func", ",", "inference_func", ",", "collect_func", ",", "save_step_func", "=", "None", ")", ":", "\n", "\t", "model", ".", "eval", "(", ")", "\n", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "#assert n_gpus == 1", "\n", "collect_list", "=", "[", "]", "\n", "total_num", "=", "len", "(", "dataloader", ")", "\n", "with", "tqdm", "(", "total", "=", "total_num", ")", "as", "pbar", ":", "\n", "\t\t", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "for", "i_batch", ",", "sample", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\t\t\t\t", "name", "=", "sample", "[", "'name'", "]", "\n", "image_msf", "=", "prepare_func", "(", "sample", ")", "\n", "result_list", "=", "[", "]", "\n", "for", "img", "in", "image_msf", ":", "\n", "\t\t\t\t\t", "result", "=", "inference_func", "(", "model", ",", "model2", ",", "img", ".", "cuda", "(", ")", ")", "\n", "result_list", ".", "append", "(", "result", ")", "\n", "", "result_item", "=", "collect_func", "(", "result_list", ",", "sample", ")", "\n", "result_sample", "=", "{", "'predict'", ":", "result_item", ",", "'name'", ":", "name", "[", "0", "]", "}", "\n", "#print('%d/%d'%(i_batch,len(dataloader)))", "\n", "pbar", ".", "set_description", "(", "'Processing'", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "time", ".", "sleep", "(", "0.001", ")", "\n", "\n", "if", "save_step_func", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "save_step_func", "(", "result_sample", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "collect_list", ".", "append", "(", "result_sample", ")", "\n", "", "", "", "", "return", "collect_list", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.test_utils.single_gpu_triplemodel_ensemble_test": [[63, 90], ["model.eval", "torch.cuda.device_count", "len", "tqdm.tqdm", "torch.no_grad", "enumerate", "prepare_func", "collect_func", "pbar.set_description", "pbar.update", "time.sleep", "inference_func", "result_list.append", "save_step_func", "collect_list.append", "img.cuda"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.update"], ["", "def", "single_gpu_triplemodel_ensemble_test", "(", "model", ",", "model2", ",", "model3", ",", "dataloader", ",", "prepare_func", ",", "inference_func", ",", "collect_func", ",", "save_step_func", "=", "None", ")", ":", "\n", "\t", "model", ".", "eval", "(", ")", "\n", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "#assert n_gpus == 1", "\n", "collect_list", "=", "[", "]", "\n", "total_num", "=", "len", "(", "dataloader", ")", "\n", "with", "tqdm", "(", "total", "=", "total_num", ")", "as", "pbar", ":", "\n", "\t\t", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "for", "i_batch", ",", "sample", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\t\t\t\t", "name", "=", "sample", "[", "'name'", "]", "\n", "image_msf", "=", "prepare_func", "(", "sample", ")", "\n", "result_list", "=", "[", "]", "\n", "for", "img", "in", "image_msf", ":", "\n", "\t\t\t\t\t", "result", "=", "inference_func", "(", "model", ",", "model2", ",", "model3", ",", "img", ".", "cuda", "(", ")", ")", "\n", "result_list", ".", "append", "(", "result", ")", "\n", "", "result_item", "=", "collect_func", "(", "result_list", ",", "sample", ")", "\n", "result_sample", "=", "{", "'predict'", ":", "result_item", ",", "'name'", ":", "name", "[", "0", "]", "}", "\n", "#print('%d/%d'%(i_batch,len(dataloader)))", "\n", "pbar", ".", "set_description", "(", "'Processing'", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "time", ".", "sleep", "(", "0.001", ")", "\n", "\n", "if", "save_step_func", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "save_step_func", "(", "result_sample", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "collect_list", ".", "append", "(", "result_sample", ")", "\n", "", "", "", "", "return", "collect_list", "\n", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.finalprocess.writelog": [[4, 40], ["os.path.join", "open", "open.write", "open.write", "dir", "finalprocess.writedict", "finalprocess.writedict", "finalprocess.writedict", "open.write", "open.write", "open.close", "time.strftime", "finalprocess.writedict", "finalprocess.writedict", "finalprocess.writedict", "time.localtime", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.utils.finalprocess.writedict", "home.repos.pwc.inspect_result.kangningthu_adele.utils.finalprocess.writedict", "home.repos.pwc.inspect_result.kangningthu_adele.utils.finalprocess.writedict", "home.repos.pwc.inspect_result.kangningthu_adele.utils.finalprocess.writedict", "home.repos.pwc.inspect_result.kangningthu_adele.utils.finalprocess.writedict", "home.repos.pwc.inspect_result.kangningthu_adele.utils.finalprocess.writedict"], ["def", "writelog", "(", "cfg", ",", "period", ",", "metric", "=", "None", ",", "commit", "=", "''", ")", ":", "\n", "\t", "filepath", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "'log'", ",", "'logfile.txt'", ")", "\n", "logfile", "=", "open", "(", "filepath", ",", "'a'", ")", "\n", "import", "time", "\n", "logfile", ".", "write", "(", "time", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ",", "time", ".", "localtime", "(", ")", ")", ")", "\n", "logfile", ".", "write", "(", "'\\t%s\\n'", "%", "period", ")", "\n", "para_data_dict", "=", "{", "}", "\n", "para_model_dict", "=", "{", "}", "\n", "para_train_dict", "=", "{", "}", "\n", "para_test_dict", "=", "{", "}", "\n", "para_name", "=", "dir", "(", "cfg", ")", "\n", "for", "name", "in", "para_name", ":", "\n", "\t\t", "if", "'DATA_'", "in", "name", ":", "\n", "\t\t\t", "v", "=", "getattr", "(", "cfg", ",", "name", ")", "\n", "para_data_dict", "[", "name", "]", "=", "v", "\n", "", "elif", "'MODEL_'", "in", "name", ":", "\n", "\t\t\t", "v", "=", "getattr", "(", "cfg", ",", "name", ")", "\n", "para_model_dict", "[", "name", "]", "=", "v", "\n", "", "elif", "'TRAIN_'", "in", "name", ":", "\n", "\t\t\t", "v", "=", "getattr", "(", "cfg", ",", "name", ")", "\n", "para_train_dict", "[", "name", "]", "=", "v", "\n", "", "elif", "'TEST_'", "in", "name", ":", "\n", "\t\t\t", "v", "=", "getattr", "(", "cfg", ",", "name", ")", "\n", "para_test_dict", "[", "name", "]", "=", "v", "\n", "", "", "writedict", "(", "logfile", ",", "{", "'EXP_NAME'", ":", "cfg", ".", "EXP_NAME", "}", ")", "\n", "writedict", "(", "logfile", ",", "para_data_dict", ")", "\n", "writedict", "(", "logfile", ",", "para_model_dict", ")", "\n", "if", "'train'", "in", "period", ":", "\n", "\t\t", "writedict", "(", "logfile", ",", "para_train_dict", ")", "\n", "", "else", ":", "\n", "\t\t", "writedict", "(", "logfile", ",", "para_test_dict", ")", "\n", "writedict", "(", "logfile", ",", "metric", ")", "\n", "\n", "", "logfile", ".", "write", "(", "commit", ")", "\n", "logfile", ".", "write", "(", "'=====================================\\n'", ")", "\n", "logfile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.finalprocess.writelog_seperate": [[42, 78], ["os.path.join", "open", "open.write", "open.write", "dir", "finalprocess.writedict", "finalprocess.writedict", "finalprocess.writedict", "open.write", "open.write", "open.close", "time.strftime", "finalprocess.writedict", "finalprocess.writedict", "finalprocess.writedict", "time.localtime", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.utils.finalprocess.writedict", "home.repos.pwc.inspect_result.kangningthu_adele.utils.finalprocess.writedict", "home.repos.pwc.inspect_result.kangningthu_adele.utils.finalprocess.writedict", "home.repos.pwc.inspect_result.kangningthu_adele.utils.finalprocess.writedict", "home.repos.pwc.inspect_result.kangningthu_adele.utils.finalprocess.writedict", "home.repos.pwc.inspect_result.kangningthu_adele.utils.finalprocess.writedict"], ["", "def", "writelog_seperate", "(", "cfg", ",", "period", ",", "metric", "=", "None", ",", "commit", "=", "''", ")", ":", "\n", "\t", "filepath", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "'log'", ",", "cfg", ".", "logfile", ")", "\n", "logfile", "=", "open", "(", "filepath", ",", "'a'", ")", "\n", "import", "time", "\n", "logfile", ".", "write", "(", "time", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ",", "time", ".", "localtime", "(", ")", ")", ")", "\n", "logfile", ".", "write", "(", "'\\t%s\\n'", "%", "period", ")", "\n", "para_data_dict", "=", "{", "}", "\n", "para_model_dict", "=", "{", "}", "\n", "para_train_dict", "=", "{", "}", "\n", "para_test_dict", "=", "{", "}", "\n", "para_name", "=", "dir", "(", "cfg", ")", "\n", "for", "name", "in", "para_name", ":", "\n", "\t\t", "if", "'DATA_'", "in", "name", ":", "\n", "\t\t\t", "v", "=", "getattr", "(", "cfg", ",", "name", ")", "\n", "para_data_dict", "[", "name", "]", "=", "v", "\n", "", "elif", "'MODEL_'", "in", "name", ":", "\n", "\t\t\t", "v", "=", "getattr", "(", "cfg", ",", "name", ")", "\n", "para_model_dict", "[", "name", "]", "=", "v", "\n", "", "elif", "'TRAIN_'", "in", "name", ":", "\n", "\t\t\t", "v", "=", "getattr", "(", "cfg", ",", "name", ")", "\n", "para_train_dict", "[", "name", "]", "=", "v", "\n", "", "elif", "'TEST_'", "in", "name", ":", "\n", "\t\t\t", "v", "=", "getattr", "(", "cfg", ",", "name", ")", "\n", "para_test_dict", "[", "name", "]", "=", "v", "\n", "", "", "writedict", "(", "logfile", ",", "{", "'EXP_NAME'", ":", "cfg", ".", "EXP_NAME", "}", ")", "\n", "writedict", "(", "logfile", ",", "para_data_dict", ")", "\n", "writedict", "(", "logfile", ",", "para_model_dict", ")", "\n", "if", "'train'", "in", "period", ":", "\n", "\t\t", "writedict", "(", "logfile", ",", "para_train_dict", ")", "\n", "", "else", ":", "\n", "\t\t", "writedict", "(", "logfile", ",", "para_test_dict", ")", "\n", "writedict", "(", "logfile", ",", "metric", ")", "\n", "\n", "", "logfile", ".", "write", "(", "commit", ")", "\n", "logfile", ".", "write", "(", "'=====================================\\n'", ")", "\n", "logfile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.finalprocess.writedict": [[81, 88], ["dictionary.keys", "file.write"], "function", ["None"], ["", "def", "writedict", "(", "file", ",", "dictionary", ")", ":", "\n", "\t", "s", "=", "''", "\n", "for", "key", "in", "dictionary", ".", "keys", "(", ")", ":", "\n", "\t\t", "sub", "=", "'%s:%s  '", "%", "(", "key", ",", "dictionary", "[", "key", "]", ")", "\n", "s", "+=", "sub", "\n", "", "s", "+=", "'\\n'", "\n", "file", ".", "write", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.imutils.pseudo_erode": [[4, 12], ["imutils.onehot", "numpy.ones", "cv2.erode", "numpy.max"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.utils.imutils.onehot"], ["def", "pseudo_erode", "(", "label", ",", "num", ",", "t", "=", "1", ")", ":", "\n", "\t", "label_onehot", "=", "onehot", "(", "label", ",", "num", ")", "\n", "k", "=", "np", ".", "ones", "(", "(", "15", ",", "15", ")", ",", "np", ".", "uint8", ")", "\n", "e", "=", "cv2", ".", "erode", "(", "label_onehot", ",", "k", ",", "t", ")", "\n", "m", "=", "(", "e", "!=", "label_onehot", ")", "\n", "m", "=", "np", ".", "max", "(", "m", ",", "axis", "=", "2", ")", "\n", "label", "[", "m", "]", "=", "255", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.imutils.onehot": [[14, 19], ["int", "label.astype", "numpy.eye"], "function", ["None"], ["", "def", "onehot", "(", "label", ",", "num", ")", ":", "\n", "\t", "num", "=", "int", "(", "num", ")", "\n", "m", "=", "label", ".", "astype", "(", "np", ".", "int32", ")", "\n", "one_hot", "=", "np", ".", "eye", "(", "num", ")", "[", "m", "]", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.imutils.seg2cls": [[20, 27], ["numpy.zeros", "numpy.unique", "cls.reshape.reshape"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.unique"], ["", "def", "seg2cls", "(", "label", ",", "num", ")", ":", "\n", "\t", "cls", "=", "np", ".", "zeros", "(", "num", ")", "\n", "index", "=", "np", ".", "unique", "(", "label", ")", "\n", "cls", "[", "index", "]", "=", "1", "\n", "#cls[0] = 0", "\n", "cls", "=", "cls", ".", "reshape", "(", "(", "num", ",", "1", ",", "1", ")", ")", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.imutils.gamma_correction": [[28, 35], ["numpy.empty", "range", "cv2.LUT", "numpy.mean", "numpy.clip", "pow"], "function", ["None"], ["", "def", "gamma_correction", "(", "img", ")", ":", "\n", "\t", "gamma", "=", "np", ".", "mean", "(", "img", ")", "/", "128.0", "\n", "lookUpTable", "=", "np", ".", "empty", "(", "(", "1", ",", "256", ")", ",", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "256", ")", ":", "\n", "\t\t", "lookUpTable", "[", "0", ",", "i", "]", "=", "np", ".", "clip", "(", "pow", "(", "i", "/", "255.0", ",", "gamma", ")", "*", "255.0", ",", "0", ",", "255", ")", "\n", "", "res_img", "=", "cv2", ".", "LUT", "(", "img", ",", "lookUpTable", ")", "\n", "return", "res_img", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.imutils.img_denorm": [[36, 58], ["numpy.ascontiguousarray", "inputs.astype.astype", "range"], "function", ["None"], ["", "def", "img_denorm", "(", "inputs", ",", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ",", "mul", "=", "True", ")", ":", "\n", "\t", "inputs", "=", "np", ".", "ascontiguousarray", "(", "inputs", ")", "\n", "if", "inputs", ".", "ndim", "==", "3", ":", "\n", "\t\t", "inputs", "[", "0", ",", ":", ",", ":", "]", "=", "(", "inputs", "[", "0", ",", ":", ",", ":", "]", "*", "std", "[", "0", "]", "+", "mean", "[", "0", "]", ")", "\n", "inputs", "[", "1", ",", ":", ",", ":", "]", "=", "(", "inputs", "[", "1", ",", ":", ",", ":", "]", "*", "std", "[", "1", "]", "+", "mean", "[", "1", "]", ")", "\n", "inputs", "[", "2", ",", ":", ",", ":", "]", "=", "(", "inputs", "[", "2", ",", ":", ",", ":", "]", "*", "std", "[", "2", "]", "+", "mean", "[", "2", "]", ")", "\n", "", "elif", "inputs", ".", "ndim", "==", "4", ":", "\n", "\t\t", "n", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "\t\t\t", "inputs", "[", "i", ",", "0", ",", ":", ",", ":", "]", "=", "(", "inputs", "[", "i", ",", "0", ",", ":", ",", ":", "]", "*", "std", "[", "0", "]", "+", "mean", "[", "0", "]", ")", "\n", "inputs", "[", "i", ",", "1", ",", ":", ",", ":", "]", "=", "(", "inputs", "[", "i", ",", "1", ",", ":", ",", ":", "]", "*", "std", "[", "1", "]", "+", "mean", "[", "1", "]", ")", "\n", "inputs", "[", "i", ",", "2", ",", ":", ",", ":", "]", "=", "(", "inputs", "[", "i", ",", "2", ",", ":", ",", ":", "]", "*", "std", "[", "2", "]", "+", "mean", "[", "2", "]", ")", "\n", "\n", "", "", "if", "mul", ":", "\n", "\t\t", "inputs", "=", "inputs", "*", "255", "\n", "inputs", "[", "inputs", ">", "255", "]", "=", "255", "\n", "inputs", "[", "inputs", "<", "0", "]", "=", "0", "\n", "inputs", "=", "inputs", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "\t\t", "inputs", "[", "inputs", ">", "1", "]", "=", "1", "\n", "inputs", "[", "inputs", "<", "0", "]", "=", "0", "\n", "", "return", "inputs", "\n", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.configuration.Configuration.__init__": [[10, 14], ["configuration.Configuration.__check"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.utils.configuration.Configuration.__check"], ["\t", "def", "__init__", "(", "self", ",", "config_dict", ",", "clear", "=", "True", ")", ":", "\n", "\t\t", "self", ".", "__dict__", "=", "config_dict", "\n", "self", ".", "clear", "=", "clear", "\n", "self", ".", "__check", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.utils.configuration.Configuration.__check": [[15, 31], ["torch.cuda.is_available", "ValueError", "ValueError", "torch.cuda.device_count", "ValueError", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir"], "methods", ["None"], ["", "def", "__check", "(", "self", ")", ":", "\n", "\t\t", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'config.py: cuda is not avalable'", ")", "\n", "", "if", "self", ".", "GPUS", "==", "0", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'config.py: the number of GPU is 0'", ")", "\n", "", "if", "self", ".", "GPUS", "!=", "torch", ".", "cuda", ".", "device_count", "(", ")", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'config.py: GPU number is not matched'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "LOG_DIR", ")", ":", "\n", "\t\t\t", "os", ".", "mkdir", "(", "self", ".", "LOG_DIR", ")", "\n", "# elif self.clear:", "\n", "# shutil.rmtree(self.LOG_DIR)", "\n", "# \tos.mkdir(self.LOG_DIR)", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "MODEL_SAVE_DIR", ")", ":", "\n", "# os.makedirs(self.MODEL_SAVE_DIR)", "\n", "\t\t\t", "os", ".", "mkdir", "(", "self", ".", "MODEL_SAVE_DIR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.__init__": [[23, 56], ["datasets.BaseDataset.BaseDataset.__init__", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pandas.read_csv", "os.path.join", "VOCDataset.VOCDataset.__colormap", "len", "len"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.__colormap"], ["\t", "def", "__init__", "(", "self", ",", "cfg", ",", "period", ",", "transform", "=", "'none'", ")", ":", "\n", "\t\t", "super", "(", "VOCDataset", ",", "self", ")", ".", "__init__", "(", "cfg", ",", "period", ",", "transform", ")", "\n", "self", ".", "dataset_name", "=", "'VOC%d'", "%", "cfg", ".", "DATA_YEAR", "\n", "self", ".", "root_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "'data'", ",", "'VOCdevkit'", ")", "\n", "self", ".", "dataset_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "dataset_name", ")", "\n", "self", ".", "rst_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'results'", ",", "self", ".", "dataset_name", ",", "'Segmentation'", ")", "\n", "self", ".", "eval_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'eval_result'", ",", "self", ".", "dataset_name", ",", "'Segmentation'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'JPEGImages'", ")", "\n", "# print(self.img_dir)", "\n", "self", ".", "ann_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'Annotations'", ")", "\n", "self", ".", "seg_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'SegmentationClass'", ")", "\n", "self", ".", "set_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'ImageSets'", ",", "'Segmentation'", ")", "\n", "if", "cfg", ".", "DATA_PSEUDO_GT", ":", "\n", "\t\t\t", "self", ".", "pseudo_gt_dir", "=", "cfg", ".", "DATA_PSEUDO_GT", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "pseudo_gt_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'pseudo_gt'", ",", "self", ".", "dataset_name", ",", "'Segmentation'", ")", "\n", "\n", "", "file_name", "=", "None", "\n", "if", "cfg", ".", "DATA_AUG", "and", "'train'", "in", "self", ".", "period", ":", "\n", "\t\t\t", "file_name", "=", "self", ".", "set_dir", "+", "'/'", "+", "period", "+", "'aug.txt'", "\n", "", "else", ":", "\n", "\t\t\t", "file_name", "=", "self", ".", "set_dir", "+", "'/'", "+", "period", "+", "'.txt'", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "file_name", ",", "names", "=", "[", "'filename'", "]", ")", "\n", "self", ".", "name_list", "=", "df", "[", "'filename'", "]", ".", "values", "\n", "# print(self.name_list[1])", "\n", "if", "self", ".", "dataset_name", "==", "'VOC2012'", ":", "\n", "\t\t\t", "self", ".", "categories", "=", "[", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "'cow'", ",", "\n", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", "]", "\n", "self", ".", "coco2voc", "=", "[", "[", "0", "]", ",", "[", "5", "]", ",", "[", "2", "]", ",", "[", "16", "]", ",", "[", "9", "]", ",", "[", "44", "]", ",", "[", "6", "]", ",", "[", "3", "]", ",", "[", "17", "]", ",", "[", "62", "]", ",", "\n", "[", "21", "]", ",", "[", "67", "]", ",", "[", "18", "]", ",", "[", "19", "]", ",", "[", "4", "]", ",", "[", "1", "]", ",", "[", "64", "]", ",", "[", "20", "]", ",", "[", "63", "]", ",", "[", "7", "]", ",", "[", "72", "]", "]", "\n", "\n", "self", ".", "num_categories", "=", "len", "(", "self", ".", "categories", ")", "+", "1", "\n", "self", ".", "cmap", "=", "self", ".", "__colormap", "(", "len", "(", "self", ".", "categories", ")", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.__len__": [[57, 59], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.load_name": [[60, 63], ["None"], "methods", ["None"], ["", "def", "load_name", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.load_image": [[64, 70], ["cv2.imread", "cv2.cvtColor"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "img_file", "=", "self", ".", "img_dir", "+", "'/'", "+", "name", "+", "'.jpg'", "\n", "image", "=", "cv2", ".", "imread", "(", "img_file", ")", "\n", "image_rgb", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "return", "image_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.load_segmentation": [[71, 76], ["numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_segmentation", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "seg_file", "=", "self", ".", "seg_dir", "+", "'/'", "+", "name", "+", "'.png'", "\n", "segmentation", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "seg_file", ")", ")", "\n", "return", "segmentation", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.load_pseudo_segmentation": [[77, 82], ["numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_pseudo_segmentation", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "seg_file", "=", "self", ".", "pseudo_gt_dir", "+", "'/'", "+", "name", "+", "'.png'", "\n", "segmentation", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "seg_file", ")", ")", "\n", "return", "segmentation", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.__colormap": [[83, 113], ["numpy.zeros", "range", "range", "VOCDataset.VOCDataset.__colormap.uint82bin"], "methods", ["None"], ["", "def", "__colormap", "(", "self", ",", "N", ")", ":", "\n", "\t\t", "\"\"\"Get the map from label index to color\n\n\t\tArgs:\n\t\t\tN: number of class\n\n\t\t\treturn: a Nx3 matrix\n\n\t\t\"\"\"", "\n", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "def", "uint82bin", "(", "n", ",", "count", "=", "8", ")", ":", "\n", "\t\t\t", "\"\"\"returns the binary of integer n, count refers to amount of bits\"\"\"", "\n", "return", "''", ".", "join", "(", "[", "str", "(", "(", "n", ">>", "y", ")", "&", "1", ")", "for", "y", "in", "range", "(", "count", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "\t\t\t", "r", "=", "0", "\n", "g", "=", "0", "\n", "b", "=", "0", "\n", "idx", "=", "i", "\n", "for", "j", "in", "range", "(", "7", ")", ":", "\n", "\t\t\t\t", "str_id", "=", "uint82bin", "(", "idx", ")", "\n", "r", "=", "r", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "1", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "g", "=", "g", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "2", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "b", "=", "b", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "3", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "idx", "=", "idx", ">>", "3", "\n", "", "cmap", "[", "i", ",", "0", "]", "=", "r", "\n", "cmap", "[", "i", ",", "1", "]", "=", "g", "\n", "cmap", "[", "i", ",", "2", "]", "=", "b", "\n", "", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.load_ranked_namelist": [[114, 117], ["VOCDataset.VOCDataset.read_rank_result"], "methods", ["None"], ["", "def", "load_ranked_namelist", "(", "self", ")", ":", "\n", "\t\t", "df", "=", "self", ".", "read_rank_result", "(", ")", "\n", "self", ".", "name_list", "=", "df", "[", "'filename'", "]", ".", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.label2colormap": [[118, 127], ["label.astype", "numpy.zeros"], "methods", ["None"], ["", "def", "label2colormap", "(", "self", ",", "label", ")", ":", "\n", "\t\t", "m", "=", "label", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "r", ",", "c", "=", "m", ".", "shape", "\n", "cmap", "=", "np", ".", "zeros", "(", "(", "r", ",", "c", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cmap", "[", ":", ",", ":", ",", "0", "]", "=", "(", "m", "&", "1", ")", "<<", "7", "|", "(", "m", "&", "8", ")", "<<", "3", "\n", "cmap", "[", ":", ",", ":", ",", "1", "]", "=", "(", "m", "&", "2", ")", "<<", "6", "|", "(", "m", "&", "16", ")", "<<", "2", "\n", "cmap", "[", ":", ",", ":", ",", "2", "]", "=", "(", "m", "&", "4", ")", "<<", "5", "\n", "cmap", "[", "m", "==", "255", "]", "=", "[", "255", ",", "255", ",", "255", "]", "\n", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.save_result": [[128, 142], ["os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "cv2.imwrite"], "methods", ["None"], ["", "def", "save_result", "(", "self", ",", "result_list", ",", "model_id", ")", ":", "\n", "\t\t", "\"\"\"Save test results\n\n\t\tArgs:\n\t\t\tresult_list(list of dict): [{'name':name1, 'predict':predict_seg1},{...},...]\n\n\t\t\"\"\"", "\n", "folder_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "rst_dir", ",", "'%s_%s'", "%", "(", "model_id", ",", "self", ".", "period", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "\n", "", "for", "sample", "in", "result_list", ":", "\n", "\t\t\t", "file_path", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "'%s.png'", "%", "sample", "[", "'name'", "]", ")", "\n", "cv2", ".", "imwrite", "(", "file_path", ",", "sample", "[", "'predict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.save_pseudo_gt": [[143, 158], ["os.path.exists", "os.makedirs", "os.path.join", "cv2.imwrite"], "methods", ["None"], ["", "", "def", "save_pseudo_gt", "(", "self", ",", "result_list", ",", "folder_path", "=", "None", ")", ":", "\n", "\t\t", "\"\"\"Save pseudo gt\n\n\t\tArgs:\n\t\t\tresult_list(list of dict): [{'name':name1, 'predict':predict_seg1},{...},...]\n\n\t\t\"\"\"", "\n", "i", "=", "1", "\n", "folder_path", "=", "self", ".", "pseudo_gt_dir", "if", "folder_path", "is", "None", "else", "folder_path", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "", "for", "sample", "in", "result_list", ":", "\n", "\t\t\t", "file_path", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "'%s.png'", "%", "(", "sample", "[", "'name'", "]", ")", ")", "\n", "cv2", ".", "imwrite", "(", "file_path", ",", "sample", "[", "'predict'", "]", ")", "\n", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.do_matlab_eval": [[159, 174], ["os.path.join", "os.path.join", "print", "print", "subprocess.call"], "methods", ["None"], ["", "", "def", "do_matlab_eval", "(", "self", ",", "model_id", ")", ":", "\n", "\t\t", "import", "subprocess", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'VOCcode'", ")", "\n", "eval_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "eval_dir", ",", "'%s_result.mat'", "%", "model_id", ")", "\n", "cmd", "=", "'cd {} && '", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "'matlab -nodisplay -nodesktop '", "\n", "cmd", "+=", "'-r \"dbstop if error; VOCinit; '", "\n", "cmd", "+=", "'VOCevalseg(VOCopts,\\'{:s}\\');'", ".", "format", "(", "model_id", ")", "\n", "cmd", "+=", "'accuracies,avacc,conf,rawcounts = VOCevalseg(VOCopts,\\'{:s}\\'); '", ".", "format", "(", "model_id", ")", "\n", "cmd", "+=", "'save(\\'{:s}\\',\\'accuracies\\',\\'avacc\\',\\'conf\\',\\'rawcounts\\'); '", ".", "format", "(", "eval_filename", ")", "\n", "cmd", "+=", "'quit;\"'", "\n", "\n", "print", "(", "'start subprocess for matlab evaluation...'", ")", "\n", "print", "(", "cmd", ")", "\n", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.do_python_eval": [[175, 234], ["os.path.join", "range", "range", "range", "range", "numpy.mean", "print", "print", "TP.append", "P.append", "T.append", "range", "multiprocessing.Process", "multiprocessing.Process.start", "p_list.append", "multiprocessing.Process.join", "IoU.append", "numpy.array", "multiprocessing.Value", "multiprocessing.Value", "multiprocessing.Value", "len", "os.path.join", "os.path.join", "numpy.array", "numpy.array", "range", "print", "PIL.Image.open", "PIL.Image.open", "P[].acquire", "numpy.sum", "P[].release", "T[].acquire", "numpy.sum", "T[].release", "TP[].acquire", "numpy.sum", "TP[].release", "print", "print"], "methods", ["None"], ["", "def", "do_python_eval", "(", "self", ",", "model_id", ")", ":", "\n", "\t\t", "predict_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "rst_dir", ",", "'%s_%s'", "%", "(", "model_id", ",", "self", ".", "period", ")", ")", "\n", "gt_folder", "=", "self", ".", "seg_dir", "\n", "TP", "=", "[", "]", "\n", "P", "=", "[", "]", "\n", "T", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "\t\t\t", "TP", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "P", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "T", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "\n", "", "def", "compare", "(", "start", ",", "step", ",", "TP", ",", "P", ",", "T", ")", ":", "\n", "\t\t\t", "for", "idx", "in", "range", "(", "start", ",", "len", "(", "self", ".", "name_list", ")", ",", "step", ")", ":", "\n", "#print('%d/%d'%(idx,len(self.name_list)))", "\n", "\t\t\t\t", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "predict_file", "=", "os", ".", "path", ".", "join", "(", "predict_folder", ",", "'%s.png'", "%", "name", ")", "\n", "gt_file", "=", "os", ".", "path", ".", "join", "(", "gt_folder", ",", "'%s.png'", "%", "name", ")", "\n", "predict", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "predict_file", ")", ")", "#cv2.imread(predict_file)", "\n", "gt", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_file", ")", ")", "\n", "cal", "=", "gt", "<", "255", "\n", "mask", "=", "(", "predict", "==", "gt", ")", "*", "cal", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "\t\t\t\t\t", "P", "[", "i", "]", ".", "acquire", "(", ")", "\n", "P", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "predict", "==", "i", ")", "*", "cal", ")", "\n", "P", "[", "i", "]", ".", "release", "(", ")", "\n", "T", "[", "i", "]", ".", "acquire", "(", ")", "\n", "T", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "cal", ")", "\n", "T", "[", "i", "]", ".", "release", "(", ")", "\n", "TP", "[", "i", "]", ".", "acquire", "(", ")", "\n", "TP", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "mask", ")", "\n", "TP", "[", "i", "]", ".", "release", "(", ")", "\n", "", "", "", "p_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "\t\t\t", "p", "=", "multiprocessing", ".", "Process", "(", "target", "=", "compare", ",", "args", "=", "(", "i", ",", "8", ",", "TP", ",", "P", ",", "T", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "p_list", ".", "append", "(", "p", ")", "\n", "", "for", "p", "in", "p_list", ":", "\n", "\t\t\t", "p", ".", "join", "(", ")", "\n", "", "IoU", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "\t\t\t", "IoU", ".", "append", "(", "TP", "[", "i", "]", ".", "value", "/", "(", "T", "[", "i", "]", ".", "value", "+", "P", "[", "i", "]", ".", "value", "-", "TP", "[", "i", "]", ".", "value", "+", "1e-10", ")", ")", "\n", "", "loglist", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "\t\t\t", "if", "i", "==", "0", ":", "\n", "\t\t\t\t", "print", "(", "'%11s:%7.3f%%'", "%", "(", "'background'", ",", "IoU", "[", "i", "]", "*", "100", ")", ",", "end", "=", "'\\t'", ")", "\n", "loglist", "[", "'background'", "]", "=", "IoU", "[", "i", "]", "*", "100", "\n", "", "else", ":", "\n", "\t\t\t\t", "if", "i", "%", "2", "!=", "1", ":", "\n", "\t\t\t\t\t", "print", "(", "'%11s:%7.3f%%'", "%", "(", "self", ".", "categories", "[", "i", "-", "1", "]", ",", "IoU", "[", "i", "]", "*", "100", ")", ",", "end", "=", "'\\t'", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "print", "(", "'%11s:%7.3f%%'", "%", "(", "self", ".", "categories", "[", "i", "-", "1", "]", ",", "IoU", "[", "i", "]", "*", "100", ")", ")", "\n", "", "loglist", "[", "self", ".", "categories", "[", "i", "-", "1", "]", "]", "=", "IoU", "[", "i", "]", "*", "100", "\n", "\n", "", "", "miou", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU", ")", ")", "\n", "print", "(", "'\\n======================================================'", ")", "\n", "print", "(", "'%11s:%7.3f%%'", "%", "(", "'mIoU'", ",", "miou", "*", "100", ")", ")", "\n", "loglist", "[", "'mIoU'", "]", "=", "miou", "*", "100", "\n", "return", "loglist", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.__coco2voc": [[235, 242], ["numpy.zeros", "range"], "methods", ["None"], ["", "def", "__coco2voc", "(", "self", ",", "m", ")", ":", "\n", "\t\t", "r", ",", "c", "=", "m", ".", "shape", "\n", "result", "=", "np", ".", "zeros", "(", "(", "r", ",", "c", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "21", ")", ":", "\n", "\t\t\t", "for", "j", "in", "self", ".", "coco2voc", "[", "i", "]", ":", "\n", "\t\t\t\t", "result", "[", "m", "==", "j", "]", "=", "i", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.do_python_eval_pseudo": [[243, 305], ["os.path.join", "range", "range", "range", "range", "numpy.mean", "print", "print", "TP.append", "P.append", "T.append", "range", "multiprocessing.Process", "multiprocessing.Process.start", "p_list.append", "multiprocessing.Process.join", "IoU.append", "numpy.array", "multiprocessing.Value", "multiprocessing.Value", "multiprocessing.Value", "len", "os.path.join", "os.path.join", "numpy.array", "numpy.array", "range", "print", "PIL.Image.open", "PIL.Image.open", "P[].acquire", "numpy.sum", "P[].release", "T[].acquire", "numpy.sum", "T[].release", "TP[].acquire", "numpy.sum", "TP[].release", "print", "print"], "methods", ["None"], ["", "def", "do_python_eval_pseudo", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "self", ".", "seg_dir_gt", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'SegmentationClassAug'", ")", "\n", "# predict_folder = os.path.join(self.rst_dir, '%s_%s' % (model_id, self.period))", "\n", "predict_folder", "=", "path", "\n", "gt_folder", "=", "self", ".", "seg_dir_gt", "\n", "TP", "=", "[", "]", "\n", "P", "=", "[", "]", "\n", "T", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "\t\t\t", "TP", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "P", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "T", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "\n", "", "def", "compare", "(", "start", ",", "step", ",", "TP", ",", "P", ",", "T", ")", ":", "\n", "\t\t\t", "for", "idx", "in", "range", "(", "start", ",", "len", "(", "self", ".", "name_list", ")", ",", "step", ")", ":", "\n", "# print('%d/%d'%(idx,len(self.name_list)))", "\n", "\t\t\t\t", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "predict_file", "=", "os", ".", "path", ".", "join", "(", "predict_folder", ",", "'%s.png'", "%", "name", ")", "\n", "gt_file", "=", "os", ".", "path", ".", "join", "(", "gt_folder", ",", "'%s.png'", "%", "name", ")", "\n", "predict", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "predict_file", ")", ")", "# cv2.imread(predict_file)", "\n", "gt", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_file", ")", ")", "\n", "cal", "=", "gt", "<", "255", "\n", "mask", "=", "(", "predict", "==", "gt", ")", "*", "cal", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "\t\t\t\t\t", "P", "[", "i", "]", ".", "acquire", "(", ")", "\n", "P", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "predict", "==", "i", ")", "*", "cal", ")", "\n", "P", "[", "i", "]", ".", "release", "(", ")", "\n", "T", "[", "i", "]", ".", "acquire", "(", ")", "\n", "T", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "cal", ")", "\n", "T", "[", "i", "]", ".", "release", "(", ")", "\n", "TP", "[", "i", "]", ".", "acquire", "(", ")", "\n", "TP", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "mask", ")", "\n", "TP", "[", "i", "]", ".", "release", "(", ")", "\n", "\n", "", "", "", "p_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "\t\t\t", "p", "=", "multiprocessing", ".", "Process", "(", "target", "=", "compare", ",", "args", "=", "(", "i", ",", "8", ",", "TP", ",", "P", ",", "T", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "p_list", ".", "append", "(", "p", ")", "\n", "", "for", "p", "in", "p_list", ":", "\n", "\t\t\t", "p", ".", "join", "(", ")", "\n", "", "IoU", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "\t\t\t", "IoU", ".", "append", "(", "TP", "[", "i", "]", ".", "value", "/", "(", "T", "[", "i", "]", ".", "value", "+", "P", "[", "i", "]", ".", "value", "-", "TP", "[", "i", "]", ".", "value", "+", "1e-10", ")", ")", "\n", "", "loglist", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "\t\t\t", "if", "i", "==", "0", ":", "\n", "\t\t\t\t", "print", "(", "'%11s:%7.3f%%'", "%", "(", "'background'", ",", "IoU", "[", "i", "]", "*", "100", ")", ",", "end", "=", "'\\t'", ")", "\n", "loglist", "[", "'background'", "]", "=", "IoU", "[", "i", "]", "*", "100", "\n", "", "else", ":", "\n", "\t\t\t\t", "if", "i", "%", "2", "!=", "1", ":", "\n", "\t\t\t\t\t", "print", "(", "'%11s:%7.3f%%'", "%", "(", "self", ".", "categories", "[", "i", "-", "1", "]", ",", "IoU", "[", "i", "]", "*", "100", ")", ",", "end", "=", "'\\t'", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "print", "(", "'%11s:%7.3f%%'", "%", "(", "self", ".", "categories", "[", "i", "-", "1", "]", ",", "IoU", "[", "i", "]", "*", "100", ")", ")", "\n", "", "loglist", "[", "self", ".", "categories", "[", "i", "-", "1", "]", "]", "=", "IoU", "[", "i", "]", "*", "100", "\n", "\n", "", "", "miou", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU", ")", ")", "\n", "print", "(", "'\\n======================================================'", ")", "\n", "print", "(", "'%11s:%7.3f%%'", "%", "(", "'mIoU'", ",", "miou", "*", "100", ")", ")", "\n", "loglist", "[", "'mIoU'", "]", "=", "miou", "*", "100", "\n", "return", "loglist", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.do_python_eval_two_list": [[307, 369], ["range", "range", "range", "range", "numpy.mean", "print", "print", "TP.append", "P.append", "T.append", "range", "multiprocessing.Process", "multiprocessing.Process.start", "p_list.append", "multiprocessing.Process.join", "IoU.append", "numpy.array", "multiprocessing.Value", "multiprocessing.Value", "multiprocessing.Value", "len", "os.path.join", "os.path.join", "numpy.array", "numpy.array", "range", "print", "PIL.Image.open", "PIL.Image.open", "P[].acquire", "numpy.sum", "P[].release", "T[].acquire", "numpy.sum", "T[].release", "TP[].acquire", "numpy.sum", "TP[].release", "print", "print"], "methods", ["None"], ["", "def", "do_python_eval_two_list", "(", "self", ",", "path1", ",", "path2", ")", ":", "\n", "# self.seg_dir_gt = os.path.join(self.dataset_dir, 'SegmentationClassAug')", "\n", "# predict_folder = os.path.join(self.rst_dir, '%s_%s' % (model_id, self.period))", "\n", "\t\t", "predict_folder", "=", "path1", "\n", "gt_folder", "=", "path2", "\n", "TP", "=", "[", "]", "\n", "P", "=", "[", "]", "\n", "T", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "\t\t\t", "TP", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "P", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "T", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "\n", "", "def", "compare", "(", "start", ",", "step", ",", "TP", ",", "P", ",", "T", ")", ":", "\n", "\t\t\t", "for", "idx", "in", "range", "(", "start", ",", "len", "(", "self", ".", "name_list", ")", ",", "step", ")", ":", "\n", "# print('%d/%d'%(idx,len(self.name_list)))", "\n", "\t\t\t\t", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "predict_file", "=", "os", ".", "path", ".", "join", "(", "predict_folder", ",", "'%s.png'", "%", "name", ")", "\n", "gt_file", "=", "os", ".", "path", ".", "join", "(", "gt_folder", ",", "'%s.png'", "%", "name", ")", "\n", "predict", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "predict_file", ")", ")", "# cv2.imread(predict_file)", "\n", "gt", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_file", ")", ")", "\n", "cal", "=", "gt", "<", "255", "\n", "mask", "=", "(", "predict", "==", "gt", ")", "*", "cal", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "\t\t\t\t\t", "P", "[", "i", "]", ".", "acquire", "(", ")", "\n", "P", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "predict", "==", "i", ")", "*", "cal", ")", "\n", "P", "[", "i", "]", ".", "release", "(", ")", "\n", "T", "[", "i", "]", ".", "acquire", "(", ")", "\n", "T", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "cal", ")", "\n", "T", "[", "i", "]", ".", "release", "(", ")", "\n", "TP", "[", "i", "]", ".", "acquire", "(", ")", "\n", "TP", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "mask", ")", "\n", "TP", "[", "i", "]", ".", "release", "(", ")", "\n", "\n", "", "", "", "p_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "\t\t\t", "p", "=", "multiprocessing", ".", "Process", "(", "target", "=", "compare", ",", "args", "=", "(", "i", ",", "8", ",", "TP", ",", "P", ",", "T", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "p_list", ".", "append", "(", "p", ")", "\n", "", "for", "p", "in", "p_list", ":", "\n", "\t\t\t", "p", ".", "join", "(", ")", "\n", "", "IoU", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "\t\t\t", "IoU", ".", "append", "(", "TP", "[", "i", "]", ".", "value", "/", "(", "T", "[", "i", "]", ".", "value", "+", "P", "[", "i", "]", ".", "value", "-", "TP", "[", "i", "]", ".", "value", "+", "1e-10", ")", ")", "\n", "", "loglist", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "\t\t\t", "if", "i", "==", "0", ":", "\n", "\t\t\t\t", "print", "(", "'%11s:%7.3f%%'", "%", "(", "'background'", ",", "IoU", "[", "i", "]", "*", "100", ")", ",", "end", "=", "'\\t'", ")", "\n", "loglist", "[", "'background'", "]", "=", "IoU", "[", "i", "]", "*", "100", "\n", "", "else", ":", "\n", "\t\t\t\t", "if", "i", "%", "2", "!=", "1", ":", "\n", "\t\t\t\t\t", "print", "(", "'%11s:%7.3f%%'", "%", "(", "self", ".", "categories", "[", "i", "-", "1", "]", ",", "IoU", "[", "i", "]", "*", "100", ")", ",", "end", "=", "'\\t'", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "print", "(", "'%11s:%7.3f%%'", "%", "(", "self", ".", "categories", "[", "i", "-", "1", "]", ",", "IoU", "[", "i", "]", "*", "100", ")", ")", "\n", "", "loglist", "[", "self", ".", "categories", "[", "i", "-", "1", "]", "]", "=", "IoU", "[", "i", "]", "*", "100", "\n", "\n", "", "", "miou", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU", ")", ")", "\n", "print", "(", "'\\n======================================================'", ")", "\n", "print", "(", "'%11s:%7.3f%%'", "%", "(", "'mIoU'", ",", "miou", "*", "100", ")", ")", "\n", "loglist", "[", "'mIoU'", "]", "=", "miou", "*", "100", "\n", "return", "loglist", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.do_python_val_clean_wrong_one_process": [[371, 451], ["os.path.join", "os.path.join", "range", "utils.iou_computation.compute_iou", "utils.iou_computation.compute_iou", "utils.iou_computation.compute_iou", "enumerate", "numpy.mean", "numpy.mean", "numpy.mean", "len", "os.path.join", "numpy.array", "PIL.Image.open", "numpy.array", "os.path.join", "numpy.array", "utils.iou_computation.update_iou_stat", "utils.iou_computation.update_iou_stat", "utils.iou_computation.update_iou_stat", "numpy.array", "numpy.array", "numpy.array", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat"], ["", "def", "do_python_val_clean_wrong_one_process", "(", "self", ",", "model_id", ")", ":", "\n", "\t\t", "predict_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "rst_dir", ",", "'%s_%s'", "%", "(", "model_id", ",", "self", ".", "period", ")", ")", "\n", "self", ".", "seg_dir_gt", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'SegmentationClassAug'", ")", "\n", "gt_folder", "=", "self", ".", "seg_dir_gt", "\n", "\n", "# stat for each epoch", "\n", "TP_clean_epoch", "=", "[", "0", "]", "*", "21", "\n", "P_clean_epoch", "=", "[", "0", "]", "*", "21", "\n", "T_clean_epoch", "=", "[", "0", "]", "*", "21", "\n", "\n", "TP_wrong_epoch", "=", "[", "0", "]", "*", "21", "\n", "P_wrong_epoch", "=", "[", "0", "]", "*", "21", "\n", "T_wrong_epoch", "=", "[", "0", "]", "*", "21", "\n", "\n", "TP_gt_epoch", "=", "[", "0", "]", "*", "21", "\n", "P_gt_epoch", "=", "[", "0", "]", "*", "21", "\n", "T_gt_epoch", "=", "[", "0", "]", "*", "21", "\n", "\n", "loglist_clean", "=", "{", "}", "\n", "loglist_wrong", "=", "{", "}", "\n", "loglist_gt", "=", "{", "}", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "name_list", ")", ")", ":", "\n", "# print(idx)", "\n", "\t\t\t", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "gt_file", "=", "os", ".", "path", ".", "join", "(", "gt_folder", ",", "'%s.png'", "%", "name", ")", "\n", "gt_np", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_file", ")", ")", "\n", "\n", "# the label produced by CAM", "\n", "seg_file", "=", "'/scratch/kl3141/seam/SEAM-master/results/CAM_original_val_aff'", "+", "'/'", "+", "name", "+", "'.png'", "\n", "segmentation1", "=", "Image", ".", "open", "(", "seg_file", ")", "\n", "label_np", "=", "np", ".", "array", "(", "segmentation1", ")", "\n", "\n", "r", ",", "c", "=", "gt_np", ".", "shape", "\n", "\n", "predict_file", "=", "os", ".", "path", ".", "join", "(", "predict_folder", ",", "'%s.png'", "%", "name", ")", "\n", "predict", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "predict_file", ")", ")", "# cv2.imread(predict_file)  #h,w", "\n", "\n", "\n", "pred_np", "=", "predict", "\n", "\n", "mask_clean", "=", "(", "gt_np", "==", "label_np", ")", "\n", "\n", "gt_np_clean", "=", "(", "gt_np", "+", "1", ")", "*", "mask_clean", "-", "1", "\n", "gt_np_clean", "[", "gt_np_clean", "<", "0", "]", "=", "255", "\n", "\n", "gt_np_wrong", "=", "(", "gt_np", "+", "1", ")", "*", "(", "~", "mask_clean", ")", "-", "1", "\n", "gt_np_wrong", "[", "gt_np_wrong", "<", "0", "]", "=", "255", "\n", "\n", "label_np_clean", "=", "(", "label_np", "+", "1", ")", "*", "mask_clean", "-", "1", "\n", "label_np_clean", "[", "label_np_clean", "<", "0", "]", "=", "255", "\n", "\n", "label_np_wrong", "=", "(", "label_np", "+", "1", ")", "*", "(", "~", "mask_clean", ")", "-", "1", "\n", "label_np_wrong", "[", "label_np_wrong", "<", "0", "]", "=", "255", "\n", "\n", "TP_clean_epoch", ",", "P_clean_epoch", ",", "T_clean_epoch", "=", "update_iou_stat", "(", "pred_np", ",", "gt_np_clean", ",", "TP_clean_epoch", ",", "\n", "P_clean_epoch", ",", "T_clean_epoch", ")", "\n", "TP_wrong_epoch", ",", "P_wrong_epoch", ",", "T_wrong_epoch", "=", "update_iou_stat", "(", "pred_np", ",", "gt_np_wrong", ",", "TP_wrong_epoch", ",", "\n", "P_wrong_epoch", ",", "T_wrong_epoch", ")", "\n", "TP_gt_epoch", ",", "P_gt_epoch", ",", "T_gt_epoch", "=", "update_iou_stat", "(", "pred_np", ",", "gt_np", ",", "TP_gt_epoch", ",", "P_gt_epoch", ",", "T_gt_epoch", ")", "\n", "\n", "", "IoU_clean_epoch", "=", "compute_iou", "(", "TP_clean_epoch", ",", "P_clean_epoch", ",", "T_clean_epoch", ")", "\n", "IoU_wrong_epoch", "=", "compute_iou", "(", "TP_wrong_epoch", ",", "P_wrong_epoch", ",", "T_wrong_epoch", ")", "\n", "IoU_gt_epoch", "=", "compute_iou", "(", "TP_gt_epoch", ",", "P_gt_epoch", ",", "T_gt_epoch", ")", "\n", "\n", "for", "indx", ",", "class_name", "in", "enumerate", "(", "\n", "[", "'background'", ",", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "\n", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "\n", "'tvmonitor'", "]", ")", ":", "\n", "\t\t\t", "loglist_clean", "[", "class_name", "]", "=", "IoU_clean_epoch", "[", "indx", "]", "\n", "loglist_wrong", "[", "class_name", "]", "=", "IoU_wrong_epoch", "[", "indx", "]", "\n", "loglist_gt", "[", "class_name", "]", "=", "IoU_gt_epoch", "[", "indx", "]", "\n", "", "mIoU_clean_epoch", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_clean_epoch", ")", ")", "\n", "mIoU_wrong_epoch", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_wrong_epoch", ")", ")", "\n", "mIoU_gt_epoch", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_gt_epoch", ")", ")", "\n", "loglist_clean", "[", "'mIoU'", "]", "=", "mIoU_clean_epoch", "\n", "loglist_wrong", "[", "'mIoU'", "]", "=", "mIoU_wrong_epoch", "\n", "loglist_gt", "[", "'mIoU'", "]", "=", "mIoU_gt_epoch", "\n", "return", "loglist_clean", ",", "loglist_wrong", ",", "loglist_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.do_python_memorization_IoU_one_process": [[454, 558], ["os.path.join", "os.path.join", "range", "utils.iou_computation.compute_iou", "utils.iou_computation.compute_iou", "utils.iou_computation.compute_iou", "utils.iou_computation.compute_iou", "enumerate", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "len", "os.path.join", "numpy.array", "PIL.Image.open", "numpy.array", "os.path.join", "numpy.array", "utils.iou_computation.update_iou_stat", "utils.iou_computation.update_iou_stat", "utils.iou_computation.update_iou_stat", "utils.iou_computation.update_iou_stat", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat"], ["", "def", "do_python_memorization_IoU_one_process", "(", "self", ",", "model_id", ",", "num_classes", "=", "21", ")", ":", "\n", "\t\t", "predict_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "rst_dir", ",", "'%s_%s'", "%", "(", "model_id", ",", "self", ".", "period", ")", ")", "\n", "self", ".", "seg_dir_gt", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'SegmentationClassAug'", ")", "\n", "gt_folder", "=", "self", ".", "seg_dir_gt", "\n", "\n", "# stat for each epoch", "\n", "TP_clean_epoch", "=", "[", "0", "]", "*", "num_classes", "\n", "P_clean_epoch", "=", "[", "0", "]", "*", "num_classes", "\n", "T_clean_epoch", "=", "[", "0", "]", "*", "num_classes", "\n", "\n", "TP_wrong_epoch", "=", "[", "0", "]", "*", "num_classes", "\n", "P_wrong_epoch", "=", "[", "0", "]", "*", "num_classes", "\n", "T_wrong_epoch", "=", "[", "0", "]", "*", "num_classes", "\n", "\n", "\n", "TP_wrong_mem_epoch", "=", "[", "0", "]", "*", "num_classes", "\n", "P_wrong_mem_epoch", "=", "[", "0", "]", "*", "num_classes", "\n", "T_wrong_mem_epoch", "=", "[", "0", "]", "*", "num_classes", "\n", "\n", "TP_gt_epoch", "=", "[", "0", "]", "*", "num_classes", "\n", "P_gt_epoch", "=", "[", "0", "]", "*", "num_classes", "\n", "T_gt_epoch", "=", "[", "0", "]", "*", "num_classes", "\n", "\n", "loglist_clean", "=", "{", "}", "\n", "loglist_wrong", "=", "{", "}", "\n", "loglist_wrong_mem", "=", "{", "}", "\n", "loglist_gt", "=", "{", "}", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "name_list", ")", ")", ":", "\n", "# print(idx)", "\n", "\t\t\t", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "gt_file", "=", "os", ".", "path", ".", "join", "(", "gt_folder", ",", "'%s.png'", "%", "name", ")", "\n", "gt_np", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_file", ")", ")", "\n", "\n", "# the label produced by CAM", "\n", "if", "'train'", "in", "self", ".", "period", ":", "\n", "\t\t\t\t", "seg_file", "=", "'/scratch/kl3141/seam/SEAM-master/results/aff_rw_aug'", "+", "'/'", "+", "name", "+", "'.png'", "\n", "", "else", ":", "\n", "\t\t\t\t", "seg_file", "=", "'/scratch/kl3141/seam/SEAM-master/results/CAM_original_val_aff'", "+", "'/'", "+", "name", "+", "'.png'", "\n", "", "segmentation1", "=", "Image", ".", "open", "(", "seg_file", ")", "\n", "label_np", "=", "np", ".", "array", "(", "segmentation1", ")", "\n", "\n", "r", ",", "c", "=", "gt_np", ".", "shape", "\n", "\n", "predict_file", "=", "os", ".", "path", ".", "join", "(", "predict_folder", ",", "'%s.png'", "%", "name", ")", "\n", "predict", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "predict_file", ")", ")", "# cv2.imread(predict_file)  #h,w", "\n", "\n", "\n", "pred_np", "=", "predict", "\n", "\n", "mask_clean", "=", "(", "gt_np", "==", "label_np", ")", "\n", "\n", "gt_np_clean", "=", "(", "gt_np", "+", "1", ")", "*", "mask_clean", "-", "1", "\n", "gt_np_clean", "[", "gt_np_clean", "<", "0", "]", "=", "255", "\n", "\n", "gt_np_wrong", "=", "(", "gt_np", "+", "1", ")", "*", "(", "~", "mask_clean", ")", "-", "1", "\n", "gt_np_wrong", "[", "gt_np_wrong", "<", "0", "]", "=", "255", "\n", "\n", "label_np_clean", "=", "(", "label_np", "+", "1", ")", "*", "mask_clean", "-", "1", "\n", "label_np_clean", "[", "label_np_clean", "<", "0", "]", "=", "255", "\n", "\n", "label_np_wrong", "=", "(", "label_np", "+", "1", ")", "*", "(", "~", "mask_clean", ")", "-", "1", "\n", "label_np_wrong", "[", "label_np_wrong", "<", "0", "]", "=", "255", "\n", "\n", "TP_clean_epoch", ",", "P_clean_epoch", ",", "T_clean_epoch", "=", "update_iou_stat", "(", "pred_np", ",", "gt_np_clean", ",", "TP_clean_epoch", ",", "\n", "P_clean_epoch", ",", "T_clean_epoch", ")", "\n", "TP_wrong_epoch", ",", "P_wrong_epoch", ",", "T_wrong_epoch", "=", "update_iou_stat", "(", "pred_np", ",", "gt_np_wrong", ",", "TP_wrong_epoch", ",", "\n", "P_wrong_epoch", ",", "T_wrong_epoch", ")", "\n", "TP_gt_epoch", ",", "P_gt_epoch", ",", "T_gt_epoch", "=", "update_iou_stat", "(", "pred_np", ",", "gt_np", ",", "TP_gt_epoch", ",", "P_gt_epoch", ",", "T_gt_epoch", ")", "\n", "\n", "\n", "TP_wrong_mem_epoch", ",", "P_wrong_mem_epoch", ",", "T_wrong_mem_epoch", "=", "update_iou_stat", "(", "pred_np", ",", "label_np_wrong", ",", "TP_wrong_mem_epoch", ",", "P_wrong_mem_epoch", ",", "T_wrong_mem_epoch", ")", "\n", "\n", "\n", "\n", "\n", "", "IoU_clean_epoch", "=", "compute_iou", "(", "TP_clean_epoch", ",", "P_clean_epoch", ",", "T_clean_epoch", ")", "\n", "IoU_wrong_epoch", "=", "compute_iou", "(", "TP_wrong_epoch", ",", "P_wrong_epoch", ",", "T_wrong_epoch", ")", "\n", "IoU_gt_epoch", "=", "compute_iou", "(", "TP_gt_epoch", ",", "P_gt_epoch", ",", "T_gt_epoch", ")", "\n", "IoU_wrong_mem_epoch", "=", "compute_iou", "(", "TP_wrong_mem_epoch", ",", "P_wrong_mem_epoch", ",", "T_wrong_mem_epoch", ")", "\n", "\n", "for", "indx", ",", "class_name", "in", "enumerate", "(", "\n", "[", "'background'", ",", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "\n", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "\n", "'tvmonitor'", "]", ")", ":", "\n", "\t\t\t", "loglist_clean", "[", "class_name", "]", "=", "IoU_clean_epoch", "[", "indx", "]", "\n", "loglist_wrong", "[", "class_name", "]", "=", "IoU_wrong_epoch", "[", "indx", "]", "\n", "loglist_gt", "[", "class_name", "]", "=", "IoU_gt_epoch", "[", "indx", "]", "\n", "loglist_wrong_mem", "[", "class_name", "]", "=", "IoU_wrong_mem_epoch", "[", "indx", "]", "\n", "\n", "", "mIoU_clean_epoch", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_clean_epoch", ")", ")", "\n", "mIoU_wrong_epoch", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_wrong_epoch", ")", ")", "\n", "mIoU_gt_epoch", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_gt_epoch", ")", ")", "\n", "mIoU_wrong_mem_epoch", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_wrong_mem_epoch", ")", ")", "\n", "\n", "\n", "loglist_clean", "[", "'mIoU'", "]", "=", "mIoU_clean_epoch", "\n", "loglist_wrong", "[", "'mIoU'", "]", "=", "mIoU_wrong_epoch", "\n", "loglist_gt", "[", "'mIoU'", "]", "=", "mIoU_gt_epoch", "\n", "loglist_wrong_mem", "[", "'mIoU'", "]", "=", "mIoU_wrong_mem_epoch", "\n", "\n", "\n", "return", "loglist_clean", ",", "loglist_wrong", ",", "loglist_gt", ",", "loglist_wrong_mem", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCDataset.VOCDataset.do_python_memorization_fraction_one_process": [[559, 605], ["os.path.join", "os.path.join", "numpy.zeros", "numpy.zeros", "range", "len", "os.path.join", "numpy.array", "PIL.Image.open", "numpy.array", "os.path.join", "numpy.array", "utils.iou_computation.get_mask", "range", "PIL.Image.open", "PIL.Image.open", "utils.iou_computation.update_fraction_pixelwise"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.get_mask", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_fraction_pixelwise"], ["", "def", "do_python_memorization_fraction_one_process", "(", "self", ",", "model_id", ",", "num_classes", "=", "21", ",", "split", "=", "'train'", ")", ":", "\n", "\t\t", "predict_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "rst_dir", ",", "'%s_%s'", "%", "(", "model_id", ",", "self", ".", "period", ")", ")", "\n", "self", ".", "seg_dir_gt", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'SegmentationClassAug'", ")", "\n", "gt_folder", "=", "self", ".", "seg_dir_gt", "\n", "\n", "# stat for each epoch", "\n", "\n", "\n", "# wrong_correct = [0]* num_classes", "\n", "# wrong_memorized = [0]*num_classes", "\n", "# wrong_others = [0] * num_classes", "\n", "# clean_correct = [0] * num_classes", "\n", "# clean_incorrect = [0] * num_classes", "\n", "\n", "mem_item_list_instancewise", "=", "np", ".", "zeros", "(", "(", "5", ",", "num_classes", ")", ")", "\n", "mem_item_list_pixelwise", "=", "np", ".", "zeros", "(", "(", "5", ",", "num_classes", ",", "2", ")", ")", "# 5 items, 21 classes, (sum_target_pixel, total_pixel_sum)", "\n", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "name_list", ")", ")", ":", "\n", "# print(idx)", "\n", "\t\t\t", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "gt_file", "=", "os", ".", "path", ".", "join", "(", "gt_folder", ",", "'%s.png'", "%", "name", ")", "\n", "gt_np", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_file", ")", ")", "\n", "\n", "# the label produced by CAM", "\n", "if", "'train'", "in", "self", ".", "period", ":", "\n", "\t\t\t\t", "seg_file", "=", "'/scratch/kl3141/seam/SEAM-master/results/aff_rw_aug'", "+", "'/'", "+", "name", "+", "'.png'", "\n", "", "else", ":", "\n", "\t\t\t\t", "seg_file", "=", "'/scratch/kl3141/seam/SEAM-master/results/CAM_original_val_aff'", "+", "'/'", "+", "name", "+", "'.png'", "\n", "", "segmentation1", "=", "Image", ".", "open", "(", "seg_file", ")", "\n", "label_np", "=", "np", ".", "array", "(", "segmentation1", ")", "\n", "\n", "r", ",", "c", "=", "gt_np", ".", "shape", "\n", "\n", "predict_file", "=", "os", ".", "path", ".", "join", "(", "predict_folder", ",", "'%s.png'", "%", "name", ")", "\n", "predict", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "predict_file", ")", ")", "# cv2.imread(predict_file)  #h,w", "\n", "\n", "pred_np", "=", "predict", "\n", "\n", "mask_list", "=", "get_mask", "(", "gt_np", ",", "label_np", ",", "pred_np", ")", "# wrong_mask_correct,wrong_mask_memorized,wrong_mask_others,clean_mask_correct,clean_mask_incorrect", "\n", "\n", "for", "item_indx", "in", "range", "(", "5", ")", ":", "\n", "# mem_item_list_instancewise[item_indx] = update_fraction_instancewise(mask_list[item_indx], gt_np, mem_item_list_instancewise[item_indx], num_classes=num_classes)", "\n", "\t\t\t\t", "mem_item_list_pixelwise", "[", "item_indx", "]", "=", "update_fraction_pixelwise", "(", "mask_list", "[", "item_indx", "]", ",", "gt_np", ",", "mem_item_list_pixelwise", "[", "item_indx", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "", "", "return", "mem_item_list_instancewise", ",", "mem_item_list_pixelwise", "", "", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGT.RandomCrop.__init__": [[20, 27], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "\t\t", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "\t\t\t", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "\t\t\t", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGT.RandomCrop.__call__": [[28, 82], ["min", "min", "sample.keys", "random.randrange", "random.randrange", "random.randrange", "random.randrange", "numpy.zeros", "numpy.ones", "numpy.ones", "numpy.ones"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "\t\t", "h", ",", "w", "=", "sample", "[", "'image'", "]", ".", "shape", "[", ":", "2", "]", "\n", "ch", "=", "min", "(", "h", ",", "self", ".", "output_size", "[", "0", "]", ")", "\n", "cw", "=", "min", "(", "w", ",", "self", ".", "output_size", "[", "1", "]", ")", "\n", "\n", "h_space", "=", "h", "-", "self", ".", "output_size", "[", "0", "]", "\n", "w_space", "=", "w", "-", "self", ".", "output_size", "[", "1", "]", "\n", "\n", "if", "w_space", ">", "0", ":", "\n", "\t\t\t", "cont_left", "=", "0", "\n", "img_left", "=", "random", ".", "randrange", "(", "w_space", "+", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "cont_left", "=", "random", ".", "randrange", "(", "-", "w_space", "+", "1", ")", "\n", "img_left", "=", "0", "\n", "\n", "", "if", "h_space", ">", "0", ":", "\n", "\t\t\t", "cont_top", "=", "0", "\n", "img_top", "=", "random", ".", "randrange", "(", "h_space", "+", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "cont_top", "=", "random", ".", "randrange", "(", "-", "h_space", "+", "1", ")", "\n", "img_top", "=", "0", "\n", "\n", "", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "img", "=", "sample", "[", "key", "]", "\n", "img_crop", "=", "np", ".", "zeros", "(", "(", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "img_crop", "[", "cont_top", ":", "cont_top", "+", "ch", ",", "cont_left", ":", "cont_left", "+", "cw", "]", "=", "img", "[", "img_top", ":", "img_top", "+", "ch", ",", "img_left", ":", "img_left", "+", "cw", "]", "\n", "#img_crop = img[img_top:img_top+ch, img_left:img_left+cw]", "\n", "sample", "[", "key", "]", "=", "img_crop", "\n", "", "elif", "'segmentation'", "==", "key", ":", "\n", "\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg_crop", "=", "np", ".", "ones", "(", "(", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", ",", "np", ".", "float32", ")", "*", "255", "\n", "seg_crop", "[", "cont_top", ":", "cont_top", "+", "ch", ",", "cont_left", ":", "cont_left", "+", "cw", "]", "=", "seg", "[", "img_top", ":", "img_top", "+", "ch", ",", "img_left", ":", "img_left", "+", "cw", "]", "\n", "#seg_crop = seg[img_top:img_top+ch, img_left:img_left+cw]", "\n", "sample", "[", "key", "]", "=", "seg_crop", "\n", "", "elif", "'segmentation2'", "==", "key", "or", "'segmentation3'", "==", "key", "or", "'segmentationgt'", "==", "key", ":", "\n", "\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg_crop", "=", "np", ".", "ones", "(", "(", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", ",", "np", ".", "float32", ")", "*", "255", "\n", "seg_crop", "[", "cont_top", ":", "cont_top", "+", "ch", ",", "cont_left", ":", "cont_left", "+", "cw", "]", "=", "seg", "[", "img_top", ":", "img_top", "+", "ch", ",", "img_left", ":", "img_left", "+", "cw", "]", "\n", "#seg_crop = seg[img_top:img_top+ch, img_left:img_left+cw]", "\n", "sample", "[", "key", "]", "=", "seg_crop", "\n", "", "elif", "'segmentation_pseudo'", "in", "key", ":", "\n", "\t\t\t\t", "seg_pseudo", "=", "sample", "[", "key", "]", "\n", "seg_crop", "=", "np", ".", "ones", "(", "(", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", ",", "np", ".", "float32", ")", "*", "255", "\n", "seg_crop", "[", "cont_top", ":", "cont_top", "+", "ch", ",", "cont_left", ":", "cont_left", "+", "cw", "]", "=", "seg_pseudo", "[", "img_top", ":", "img_top", "+", "ch", ",", "img_left", ":", "img_left", "+", "cw", "]", "\n", "#seg_crop = seg_pseudo[img_top:img_top+ch, img_left:img_left+cw]", "\n", "sample", "[", "key", "]", "=", "seg_crop", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGT.RandomHSV.__init__": [[85, 89], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "h_r", ",", "s_r", ",", "v_r", ")", ":", "\n", "\t\t", "self", ".", "h_r", "=", "h_r", "\n", "self", ".", "s_r", "=", "s_r", "\n", "self", ".", "v_r", "=", "v_r", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGT.RandomHSV.__call__": [[90, 110], ["cv2.cvtColor", "hsv[].astype", "hsv[].astype", "hsv[].astype", "random.randint", "random.randint", "random.randint", "numpy.stack().astype", "cv2.cvtColor().astype", "numpy.stack", "cv2.cvtColor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "image", "=", "sample", "[", "'image'", "]", "\n", "hsv", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_RGB2HSV", ")", "\n", "h", "=", "hsv", "[", ":", ",", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "s", "=", "hsv", "[", ":", ",", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "v", "=", "hsv", "[", ":", ",", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "delta_h", "=", "random", ".", "randint", "(", "-", "self", ".", "h_r", ",", "self", ".", "h_r", ")", "\n", "delta_s", "=", "random", ".", "randint", "(", "-", "self", ".", "s_r", ",", "self", ".", "s_r", ")", "\n", "delta_v", "=", "random", ".", "randint", "(", "-", "self", ".", "v_r", ",", "self", ".", "v_r", ")", "\n", "h", "=", "(", "h", "+", "delta_h", ")", "%", "180", "\n", "s", "=", "s", "+", "delta_s", "\n", "s", "[", "s", ">", "255", "]", "=", "255", "\n", "s", "[", "s", "<", "0", "]", "=", "0", "\n", "v", "=", "v", "+", "delta_v", "\n", "v", "[", "v", ">", "255", "]", "=", "255", "\n", "v", "[", "v", "<", "0", "]", "=", "0", "\n", "hsv", "=", "np", ".", "stack", "(", "[", "h", ",", "s", ",", "v", "]", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "hsv", ",", "cv2", ".", "COLOR_HSV2RGB", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "sample", "[", "'image'", "]", "=", "image", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGT.RandomFlip.__init__": [[113, 115], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "threshold", ")", ":", "\n", "\t\t", "self", ".", "flip_t", "=", "threshold", "\n", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGT.RandomFlip.__call__": [[115, 136], ["random.random", "sample.keys", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "if", "random", ".", "random", "(", ")", "<", "self", ".", "flip_t", ":", "\n", "\t\t\t", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t\t", "img", "=", "sample", "[", "key", "]", "\n", "img", "=", "np", ".", "flip", "(", "img", ",", "axis", "=", "1", ")", "\n", "sample", "[", "key", "]", "=", "img", "\n", "", "elif", "'segmentation'", "==", "key", ":", "\n", "\t\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg", "=", "np", ".", "flip", "(", "seg", ",", "axis", "=", "1", ")", "\n", "sample", "[", "key", "]", "=", "seg", "\n", "", "elif", "'segmentation2'", "==", "key", "or", "'segmentation3'", "==", "key", "or", "'segmentationgt'", "==", "key", ":", "\n", "\t\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg", "=", "np", ".", "flip", "(", "seg", ",", "axis", "=", "1", ")", "\n", "sample", "[", "key", "]", "=", "seg", "\n", "", "elif", "'segmentation_pseudo'", "in", "key", ":", "\n", "\t\t\t\t\t", "seg_pseudo", "=", "sample", "[", "key", "]", "\n", "seg_pseudo", "=", "np", ".", "flip", "(", "seg_pseudo", ",", "axis", "=", "1", ")", "\n", "sample", "[", "key", "]", "=", "seg_pseudo", "\n", "", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGT.RandomScale.__init__": [[139, 142], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale_r", ",", "is_continuous", "=", "False", ")", ":", "\n", "\t\t", "self", ".", "scale_r", "=", "scale_r", "\n", "self", ".", "seg_interpolation", "=", "cv2", ".", "INTER_CUBIC", "if", "is_continuous", "else", "cv2", ".", "INTER_NEAREST", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGT.RandomScale.__call__": [[143, 165], ["sample.keys", "random.random", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "row", ",", "col", ",", "_", "=", "sample", "[", "'image'", "]", ".", "shape", "\n", "rand_scale", "=", "random", ".", "random", "(", ")", "*", "(", "self", ".", "scale_r", "[", "1", "]", "-", "self", ".", "scale_r", "[", "0", "]", ")", "+", "self", ".", "scale_r", "[", "0", "]", "\n", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "img", "=", "sample", "[", "key", "]", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "None", ",", "fx", "=", "rand_scale", ",", "fy", "=", "rand_scale", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "sample", "[", "key", "]", "=", "img", "\n", "", "elif", "'segmentation'", "==", "key", ":", "\n", "\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg", "=", "cv2", ".", "resize", "(", "seg", ",", "None", ",", "fx", "=", "rand_scale", ",", "fy", "=", "rand_scale", ",", "interpolation", "=", "self", ".", "seg_interpolation", ")", "\n", "sample", "[", "key", "]", "=", "seg", "\n", "", "elif", "'segmentation2'", "==", "key", "or", "'segmentation3'", "==", "key", "or", "'segmentationgt'", "==", "key", ":", "\n", "\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg", "=", "cv2", ".", "resize", "(", "seg", ",", "None", ",", "fx", "=", "rand_scale", ",", "fy", "=", "rand_scale", ",", "interpolation", "=", "self", ".", "seg_interpolation", ")", "\n", "sample", "[", "key", "]", "=", "seg", "\n", "", "elif", "'segmentation_pseudo'", "in", "key", ":", "\n", "\t\t\t\t", "seg_pseudo", "=", "sample", "[", "key", "]", "\n", "seg_pseudo", "=", "cv2", ".", "resize", "(", "seg_pseudo", ",", "None", ",", "fx", "=", "rand_scale", ",", "fy", "=", "rand_scale", ",", "interpolation", "=", "self", ".", "seg_interpolation", ")", "\n", "sample", "[", "key", "]", "=", "seg_pseudo", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGT.ImageNorm.__init__": [[168, 171], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", "=", "None", ",", "std", "=", "None", ")", ":", "\n", "\t\t", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGT.ImageNorm.__call__": [[171, 184], ["sample.keys", "sample[].astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "image", "=", "sample", "[", "key", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "self", ".", "mean", "is", "not", "None", "and", "self", ".", "std", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "image", "[", "...", ",", "0", "]", "=", "(", "image", "[", "...", ",", "0", "]", "/", "255", "-", "self", ".", "mean", "[", "0", "]", ")", "/", "self", ".", "std", "[", "0", "]", "\n", "image", "[", "...", ",", "1", "]", "=", "(", "image", "[", "...", ",", "1", "]", "/", "255", "-", "self", ".", "mean", "[", "1", "]", ")", "/", "self", ".", "std", "[", "1", "]", "\n", "image", "[", "...", ",", "2", "]", "=", "(", "image", "[", "...", ",", "2", "]", "/", "255", "-", "self", ".", "mean", "[", "2", "]", ")", "/", "self", ".", "std", "[", "2", "]", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "image", "/=", "255.0", "\n", "", "sample", "[", "key", "]", "=", "image", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGT.Multiscale.__init__": [[186, 188], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "rate_list", ")", ":", "\n", "\t\t", "self", ".", "rate_list", "=", "rate_list", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGT.Multiscale.__call__": [[189, 197], ["cv2.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "image", "=", "sample", "[", "'image'", "]", "\n", "row", ",", "col", ",", "_", "=", "image", ".", "shape", "\n", "image_multiscale", "=", "[", "]", "\n", "for", "rate", "in", "self", ".", "rate_list", ":", "\n", "\t\t\t", "rescaled_image", "=", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "rate", ",", "fy", "=", "rate", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "sample", "[", "'image_%f'", "%", "rate", "]", "=", "rescaled_image", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGT.ToTensor.__call__": [[202, 242], ["sample.keys", "sample[].astype", "image.transpose.transpose.transpose", "torch.from_numpy", "torch.from_numpy", "torch.unsqueeze", "edge.astype", "torch.from_numpy", "segmentation.astype", "torch.from_numpy", "segmentation.astype", "torch.from_numpy", "segmentation_pseudo.astype", "sample[].transpose", "torch.from_numpy", "sample[].transpose.astype", "torch.from_numpy", "sample[].astype", "torch.from_numpy", "mask.astype", "torch.from_numpy", "feature.astype"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "image", "=", "sample", "[", "key", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# swap color axis because", "\n", "# numpy image: H x W x C", "\n", "# torch image: C X H X W", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "sample", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "image", ")", "\n", "#sample[key] = torch.from_numpy(image.astype(np.float32)/128.0-1.0)", "\n", "", "elif", "'edge'", "==", "key", ":", "\n", "\t\t\t\t", "edge", "=", "sample", "[", "'edge'", "]", "\n", "sample", "[", "'edge'", "]", "=", "torch", ".", "from_numpy", "(", "edge", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "sample", "[", "'edge'", "]", "=", "torch", ".", "unsqueeze", "(", "sample", "[", "'edge'", "]", ",", "0", ")", "\n", "", "elif", "'segmentation'", "==", "key", ":", "\n", "\t\t\t\t", "segmentation", "=", "sample", "[", "'segmentation'", "]", "\n", "sample", "[", "'segmentation'", "]", "=", "torch", ".", "from_numpy", "(", "segmentation", ".", "astype", "(", "np", ".", "long", ")", ")", "\n", "\n", "", "elif", "'segmentation2'", "==", "key", "or", "'segmentation3'", "==", "key", "or", "'segmentationgt'", "==", "key", ":", "\n", "# segmentation = sample['segmentation2']", "\n", "# sample['segmentation2'] = torch.from_numpy(segmentation.astype(np.long))", "\n", "\t\t\t\t", "segmentation", "=", "sample", "[", "key", "]", "\n", "sample", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "segmentation", ".", "astype", "(", "np", ".", "long", ")", ")", "\n", "\n", "", "elif", "'segmentation_pseudo'", "in", "key", ":", "\n", "\t\t\t\t", "segmentation_pseudo", "=", "sample", "[", "key", "]", "\n", "sample", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "segmentation_pseudo", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "elif", "'segmentation_onehot'", "==", "key", ":", "\n", "\t\t\t\t", "onehot", "=", "sample", "[", "'segmentation_onehot'", "]", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "sample", "[", "'segmentation_onehot'", "]", "=", "torch", ".", "from_numpy", "(", "onehot", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "elif", "'category'", "in", "key", ":", "\n", "\t\t\t\t", "sample", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "sample", "[", "key", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "elif", "'mask'", "==", "key", ":", "\n", "\t\t\t\t", "mask", "=", "sample", "[", "'mask'", "]", "\n", "sample", "[", "'mask'", "]", "=", "torch", ".", "from_numpy", "(", "mask", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "elif", "'feature'", "==", "key", ":", "\n", "\t\t\t\t", "feature", "=", "sample", "[", "'feature'", "]", "\n", "sample", "[", "'feature'", "]", "=", "torch", ".", "from_numpy", "(", "feature", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseDataset.BaseDataset.__init__": [[21, 43], ["torch.utils.data.Dataset.__init__", "ToTensor", "ImageNorm", "Multiscale", "RandomCrop", "RandomScale", "RandomFlip", "RandomHSV"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "cfg", ",", "period", ",", "transform", "=", "'none'", ")", ":", "\n", "\t\t", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "period", "=", "period", "\n", "self", ".", "transform", "=", "transform", "\n", "if", "'train'", "not", "in", "self", ".", "period", ":", "\n", "\t\t\t", "assert", "self", ".", "transform", "==", "'none'", "\n", "", "self", ".", "num_categories", "=", "None", "\n", "self", ".", "totensor", "=", "ToTensor", "(", ")", "\n", "self", ".", "imagenorm", "=", "ImageNorm", "(", "cfg", ".", "DATA_MEAN", ",", "cfg", ".", "DATA_STD", ")", "\n", "\n", "if", "self", ".", "transform", "!=", "'none'", ":", "\n", "\t\t\t", "if", "cfg", ".", "DATA_RANDOMCROP", ">", "0", ":", "\n", "\t\t\t\t", "self", ".", "randomcrop", "=", "RandomCrop", "(", "cfg", ".", "DATA_RANDOMCROP", ")", "\n", "", "if", "cfg", ".", "DATA_RANDOMSCALE", "!=", "1", ":", "\n", "\t\t\t\t", "self", ".", "randomscale", "=", "RandomScale", "(", "cfg", ".", "DATA_RANDOMSCALE", ")", "\n", "", "if", "cfg", ".", "DATA_RANDOMFLIP", ">", "0", ":", "\n", "\t\t\t\t", "self", ".", "randomflip", "=", "RandomFlip", "(", "cfg", ".", "DATA_RANDOMFLIP", ")", "\n", "", "if", "cfg", ".", "DATA_RANDOM_H", ">", "0", "or", "cfg", ".", "DATA_RANDOM_S", ">", "0", "or", "cfg", ".", "DATA_RANDOM_V", ">", "0", ":", "\n", "\t\t\t\t", "self", ".", "randomhsv", "=", "RandomHSV", "(", "cfg", ".", "DATA_RANDOM_H", ",", "cfg", ".", "DATA_RANDOM_S", ",", "cfg", ".", "DATA_RANDOM_V", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "multiscale", "=", "Multiscale", "(", "self", ".", "cfg", ".", "TEST_MULTISCALE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseDataset.BaseDataset.__getitem__": [[45, 54], ["BaseDataset.BaseDataset.__sample_generate__", "BaseDataset.BaseDataset.totensor", "BaseDataset.BaseDataset.keys", "sample[].copy", "onehot"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.__sample_generate__", "home.repos.pwc.inspect_result.kangningthu_adele.utils.imutils.onehot"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "sample", "=", "self", ".", "__sample_generate__", "(", "idx", ")", "\n", "\n", "if", "'segmentation'", "in", "sample", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "sample", "[", "'mask'", "]", "=", "sample", "[", "'segmentation'", "]", "<", "self", ".", "num_categories", "\n", "t", "=", "sample", "[", "'segmentation'", "]", ".", "copy", "(", ")", "\n", "t", "[", "t", ">=", "self", ".", "num_categories", "]", "=", "0", "\n", "sample", "[", "'segmentation_onehot'", "]", "=", "onehot", "(", "t", ",", "self", ".", "num_categories", ")", "\n", "", "return", "self", ".", "totensor", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseDataset.BaseDataset.__sample_generate__": [[55, 77], ["BaseDataset.BaseDataset.load_name", "BaseDataset.BaseDataset.load_image", "sample[].copy", "seg2cls", "numpy.zeros", "BaseDataset.BaseDataset.__transform__", "BaseDataset.BaseDataset.__transform__", "BaseDataset.BaseDataset.load_feature", "BaseDataset.BaseDataset.load_pseudo_segmentation", "BaseDataset.BaseDataset.load_segmentation"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_name", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_image", "home.repos.pwc.inspect_result.kangningthu_adele.utils.imutils.seg2cls", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__transform__", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__transform__", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.load_feature", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_pseudo_segmentation", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_segmentation"], ["", "def", "__sample_generate__", "(", "self", ",", "idx", ",", "split_idx", "=", "0", ")", ":", "\n", "\t\t", "name", "=", "self", ".", "load_name", "(", "idx", ")", "\n", "image", "=", "self", ".", "load_image", "(", "idx", ")", "\n", "r", ",", "c", ",", "_", "=", "image", ".", "shape", "\n", "sample", "=", "{", "'image'", ":", "image", ",", "'name'", ":", "name", ",", "'row'", ":", "r", ",", "'col'", ":", "c", "}", "\n", "\n", "if", "'test'", "in", "self", ".", "period", ":", "\n", "\t\t\t", "return", "self", ".", "__transform__", "(", "sample", ")", "\n", "", "elif", "self", ".", "cfg", ".", "DATA_PSEUDO_GT", "and", "idx", ">=", "split_idx", "and", "'train'", "in", "self", ".", "period", ":", "\n", "\t\t\t", "segmentation", "=", "self", ".", "load_pseudo_segmentation", "(", "idx", ")", "\n", "", "else", ":", "\n", "\t\t\t", "segmentation", "=", "self", ".", "load_segmentation", "(", "idx", ")", "\n", "", "sample", "[", "'segmentation'", "]", "=", "segmentation", "\n", "t", "=", "sample", "[", "'segmentation'", "]", ".", "copy", "(", ")", "\n", "t", "[", "t", ">=", "self", ".", "num_categories", "]", "=", "0", "\n", "sample", "[", "'category'", "]", "=", "seg2cls", "(", "t", ",", "self", ".", "num_categories", ")", "\n", "sample", "[", "'category_copypaste'", "]", "=", "np", ".", "zeros", "(", "sample", "[", "'category'", "]", ".", "shape", ")", "\n", "\n", "if", "self", ".", "transform", "==", "'none'", "and", "self", ".", "cfg", ".", "DATA_FEATURE_DIR", ":", "\n", "\t\t\t", "feature", "=", "self", ".", "load_feature", "(", "idx", ")", "\n", "sample", "[", "'feature'", "]", "=", "feature", "\n", "", "return", "self", ".", "__transform__", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseDataset.BaseDataset.__transform__": [[78, 87], ["BaseDataset.BaseDataset.__weak_augment__", "BaseDataset.BaseDataset.__strong_augment__", "BaseDataset.BaseDataset.imagenorm", "BaseDataset.BaseDataset.multiscale"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__weak_augment__", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__strong_augment__"], ["", "def", "__transform__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "if", "self", ".", "transform", "==", "'weak'", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "__weak_augment__", "(", "sample", ")", "\n", "", "elif", "self", ".", "transform", "==", "'strong'", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "__strong_augment__", "(", "sample", ")", "\n", "", "else", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "imagenorm", "(", "sample", ")", "\n", "sample", "=", "self", ".", "multiscale", "(", "sample", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseDataset.BaseDataset.__weak_augment__": [[88, 99], ["BaseDataset.BaseDataset.imagenorm", "BaseDataset.BaseDataset.randomhsv", "BaseDataset.BaseDataset.randomflip", "BaseDataset.BaseDataset.randomscale", "BaseDataset.BaseDataset.randomcrop"], "methods", ["None"], ["", "def", "__weak_augment__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "if", "self", ".", "cfg", ".", "DATA_RANDOM_H", ">", "0", "or", "self", ".", "cfg", ".", "DATA_RANDOM_S", ">", "0", "or", "self", ".", "cfg", ".", "DATA_RANDOM_V", ">", "0", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "randomhsv", "(", "sample", ")", "\n", "", "if", "self", ".", "cfg", ".", "DATA_RANDOMFLIP", ">", "0", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "randomflip", "(", "sample", ")", "\n", "", "if", "self", ".", "cfg", ".", "DATA_RANDOMSCALE", "!=", "1", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "randomscale", "(", "sample", ")", "\n", "", "sample", "=", "self", ".", "imagenorm", "(", "sample", ")", "\n", "if", "self", ".", "cfg", ".", "DATA_RANDOMCROP", ">", "0", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "randomcrop", "(", "sample", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseDataset.BaseDataset.__strong_augment__": [[100, 102], ["None"], "methods", ["None"], ["", "def", "__strong_augment__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseDataset.BaseDataset.__len__": [[103, 105], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseDataset.BaseDataset.load_name": [[106, 108], ["None"], "methods", ["None"], ["", "def", "load_name", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseDataset.BaseDataset.load_image": [[109, 111], ["None"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseDataset.BaseDataset.load_segmentation": [[112, 114], ["None"], "methods", ["None"], ["", "def", "load_segmentation", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseDataset.BaseDataset.load_pseudo_segmentation": [[115, 117], ["None"], "methods", ["None"], ["", "def", "load_pseudo_segmentation", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseDataset.BaseDataset.load_feature": [[118, 120], ["None"], "methods", ["None"], ["", "def", "load_feature", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseDataset.BaseDataset.save_result": [[121, 123], ["None"], "methods", ["None"], ["", "def", "save_result", "(", "self", ",", "result_list", ",", "model_id", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseDataset.BaseDataset.save_pseudo_gt": [[124, 126], ["None"], "methods", ["None"], ["", "def", "save_pseudo_gt", "(", "self", ",", "result_list", ",", "level", "=", "None", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseDataset.BaseDataset.do_python_eval": [[127, 129], ["None"], "methods", ["None"], ["", "def", "do_python_eval", "(", "self", ",", "model_id", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__init__": [[17, 43], ["torch.utils.data.Dataset.__init__", "ToTensor", "ImageNorm", "Multiscale", "RandomScale", "RandomFlip", "RandomHSV", "CenterCrop", "RandomCrop"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "cfg", ",", "period", ",", "transform", "=", "'none'", ")", ":", "\n", "\t\t", "super", "(", "BaseMultiwGTauginfoDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "period", "=", "period", "\n", "self", ".", "transform", "=", "transform", "\n", "if", "'train'", "not", "in", "self", ".", "period", ":", "\n", "\t\t\t", "assert", "self", ".", "transform", "==", "'none'", "\n", "", "self", ".", "num_categories", "=", "None", "\n", "self", ".", "totensor", "=", "ToTensor", "(", ")", "\n", "self", ".", "imagenorm", "=", "ImageNorm", "(", "cfg", ".", "DATA_MEAN", ",", "cfg", ".", "DATA_STD", ")", "\n", "\n", "if", "self", ".", "transform", "!=", "'none'", ":", "\n", "\t\t\t", "if", "cfg", ".", "DATA_RANDOMCROP", ">", "0", ":", "\n", "\t\t\t\t", "if", "self", ".", "transform", "==", "'no'", ":", "\n", "# self.randomcrop = RandomCrop(512)", "\n", "\t\t\t\t\t", "self", ".", "randomcrop", "=", "CenterCrop", "(", "512", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "self", ".", "randomcrop", "=", "RandomCrop", "(", "cfg", ".", "DATA_RANDOMCROP", ")", "\n", "", "", "if", "cfg", ".", "DATA_RANDOMSCALE", "!=", "1", ":", "\n", "\t\t\t\t", "self", ".", "randomscale", "=", "RandomScale", "(", "cfg", ".", "DATA_RANDOMSCALE", ")", "\n", "", "if", "cfg", ".", "DATA_RANDOMFLIP", ">", "0", ":", "\n", "\t\t\t\t", "self", ".", "randomflip", "=", "RandomFlip", "(", "cfg", ".", "DATA_RANDOMFLIP", ")", "\n", "", "if", "cfg", ".", "DATA_RANDOM_H", ">", "0", "or", "cfg", ".", "DATA_RANDOM_S", ">", "0", "or", "cfg", ".", "DATA_RANDOM_V", ">", "0", ":", "\n", "\t\t\t\t", "self", ".", "randomhsv", "=", "RandomHSV", "(", "cfg", ".", "DATA_RANDOM_H", ",", "cfg", ".", "DATA_RANDOM_S", ",", "cfg", ".", "DATA_RANDOM_V", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "multiscale", "=", "Multiscale", "(", "self", ".", "cfg", ".", "TEST_MULTISCALE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__getitem__": [[45, 54], ["BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__sample_generate__", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.totensor", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.keys", "sample[].copy", "onehot"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.__sample_generate__", "home.repos.pwc.inspect_result.kangningthu_adele.utils.imutils.onehot"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "sample", "=", "self", ".", "__sample_generate__", "(", "idx", ")", "\n", "\n", "if", "'segmentation'", "in", "sample", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "sample", "[", "'mask'", "]", "=", "sample", "[", "'segmentation'", "]", "<", "self", ".", "num_categories", "\n", "t", "=", "sample", "[", "'segmentation'", "]", ".", "copy", "(", ")", "\n", "t", "[", "t", ">=", "self", ".", "num_categories", "]", "=", "0", "\n", "sample", "[", "'segmentation_onehot'", "]", "=", "onehot", "(", "t", ",", "self", ".", "num_categories", ")", "\n", "", "return", "self", ".", "totensor", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__sample_generate__": [[55, 77], ["BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.load_name", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.load_image", "sample[].copy", "seg2cls", "numpy.zeros", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__transform__", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__transform__", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.load_feature", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.load_pseudo_segmentation", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.load_segmentation"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_name", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_image", "home.repos.pwc.inspect_result.kangningthu_adele.utils.imutils.seg2cls", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__transform__", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__transform__", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.load_feature", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_pseudo_segmentation", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_segmentation"], ["", "def", "__sample_generate__", "(", "self", ",", "idx", ",", "split_idx", "=", "0", ")", ":", "\n", "\t\t", "name", "=", "self", ".", "load_name", "(", "idx", ")", "\n", "image", "=", "self", ".", "load_image", "(", "idx", ")", "\n", "r", ",", "c", ",", "_", "=", "image", ".", "shape", "\n", "sample", "=", "{", "'image'", ":", "image", ",", "'name'", ":", "name", ",", "'row'", ":", "r", ",", "'col'", ":", "c", "}", "\n", "\n", "if", "'test'", "in", "self", ".", "period", ":", "\n", "\t\t\t", "return", "self", ".", "__transform__", "(", "sample", ")", "\n", "", "elif", "self", ".", "cfg", ".", "DATA_PSEUDO_GT", "and", "idx", ">=", "split_idx", "and", "'train'", "in", "self", ".", "period", ":", "\n", "\t\t\t", "segmentation", "=", "self", ".", "load_pseudo_segmentation", "(", "idx", ")", "\n", "", "else", ":", "\n", "\t\t\t", "segmentation", "=", "self", ".", "load_segmentation", "(", "idx", ")", "\n", "", "sample", "[", "'segmentation'", "]", "=", "segmentation", "\n", "t", "=", "sample", "[", "'segmentation'", "]", ".", "copy", "(", ")", "\n", "t", "[", "t", ">=", "self", ".", "num_categories", "]", "=", "0", "\n", "sample", "[", "'category'", "]", "=", "seg2cls", "(", "t", ",", "self", ".", "num_categories", ")", "\n", "sample", "[", "'category_copypaste'", "]", "=", "np", ".", "zeros", "(", "sample", "[", "'category'", "]", ".", "shape", ")", "\n", "\n", "if", "self", ".", "transform", "==", "'none'", "and", "self", ".", "cfg", ".", "DATA_FEATURE_DIR", ":", "\n", "\t\t\t", "feature", "=", "self", ".", "load_feature", "(", "idx", ")", "\n", "sample", "[", "'feature'", "]", "=", "feature", "\n", "", "return", "self", ".", "__transform__", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__transform__": [[78, 89], ["BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__weak_augment__", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__strong_augment__", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__dict_augment__", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.imagenorm", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.multiscale"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__weak_augment__", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__strong_augment__", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__dict_augment__"], ["", "def", "__transform__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "if", "self", ".", "transform", "==", "'weak'", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "__weak_augment__", "(", "sample", ")", "\n", "", "elif", "self", ".", "transform", "==", "'strong'", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "__strong_augment__", "(", "sample", ")", "\n", "", "elif", "self", ".", "transform", "==", "'no'", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "__dict_augment__", "(", "sample", ")", "\n", "", "else", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "imagenorm", "(", "sample", ")", "\n", "sample", "=", "self", ".", "multiscale", "(", "sample", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__weak_augment__": [[90, 101], ["BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.imagenorm", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.randomhsv", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.randomflip", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.randomscale", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.randomcrop"], "methods", ["None"], ["", "def", "__weak_augment__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "if", "self", ".", "cfg", ".", "DATA_RANDOM_H", ">", "0", "or", "self", ".", "cfg", ".", "DATA_RANDOM_S", ">", "0", "or", "self", ".", "cfg", ".", "DATA_RANDOM_V", ">", "0", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "randomhsv", "(", "sample", ")", "\n", "", "if", "self", ".", "cfg", ".", "DATA_RANDOMFLIP", ">", "0", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "randomflip", "(", "sample", ")", "\n", "", "if", "self", ".", "cfg", ".", "DATA_RANDOMSCALE", "!=", "1", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "randomscale", "(", "sample", ")", "\n", "", "sample", "=", "self", ".", "imagenorm", "(", "sample", ")", "\n", "if", "self", ".", "cfg", ".", "DATA_RANDOMCROP", ">", "0", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "randomcrop", "(", "sample", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__dict_augment__": [[102, 107], ["BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.imagenorm", "BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.randomcrop"], "methods", ["None"], ["", "def", "__dict_augment__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "sample", "=", "self", ".", "imagenorm", "(", "sample", ")", "\n", "if", "self", ".", "cfg", ".", "DATA_RANDOMCROP", ">", "0", ":", "\n", "\t\t\t", "sample", "=", "self", ".", "randomcrop", "(", "sample", ")", "\n", "", "return", "sample", "\n", "", "def", "__strong_augment__", "(", "self", ",", "sample", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__strong_augment__": [[107, 109], ["None"], "methods", ["None"], ["", "def", "__strong_augment__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__len__": [[110, 112], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.load_name": [[113, 115], ["None"], "methods", ["None"], ["", "def", "load_name", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.load_image": [[116, 118], ["None"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.load_segmentation": [[119, 121], ["None"], "methods", ["None"], ["", "def", "load_segmentation", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.load_pseudo_segmentation": [[122, 124], ["None"], "methods", ["None"], ["", "def", "load_pseudo_segmentation", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.load_feature": [[125, 127], ["None"], "methods", ["None"], ["", "def", "load_feature", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.save_result": [[128, 130], ["None"], "methods", ["None"], ["", "def", "save_result", "(", "self", ",", "result_list", ",", "model_id", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.save_pseudo_gt": [[131, 133], ["None"], "methods", ["None"], ["", "def", "save_pseudo_gt", "(", "self", ",", "result_list", ",", "level", "=", "None", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.do_python_eval": [[134, 136], ["None"], "methods", ["None"], ["", "def", "do_python_eval", "(", "self", ",", "model_id", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.__init__": [[25, 65], ["datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__init__", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pandas.read_csv", "VOCTrainwsegDataset.VOCTrainwsegDataset.init_seg_dict", "os.path.join", "VOCTrainwsegDataset.VOCTrainwsegDataset.__colormap", "len", "len"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.init_seg_dict", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.__colormap"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "period", ",", "transform", "=", "'none'", ")", ":", "\n", "        ", "super", "(", "VOCTrainwsegDataset", ",", "self", ")", ".", "__init__", "(", "cfg", ",", "period", ",", "transform", ")", "\n", "self", ".", "dataset_name", "=", "'VOC%d'", "%", "cfg", ".", "DATA_YEAR", "\n", "self", ".", "root_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "'data'", ",", "'VOCdevkit'", ")", "\n", "self", ".", "dataset_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "dataset_name", ")", "\n", "self", ".", "rst_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'results'", ",", "self", ".", "dataset_name", ",", "'Segmentation'", ")", "\n", "self", ".", "eval_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'eval_result'", ",", "self", ".", "dataset_name", ",", "'Segmentation'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'JPEGImages'", ")", "\n", "# print(self.img_dir)", "\n", "self", ".", "ann_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'Annotations'", ")", "\n", "self", ".", "seg_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'SegmentationClass'", ")", "\n", "self", ".", "seg_dir_gt", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'SegmentationClassAug'", ")", "\n", "self", ".", "set_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'ImageSets'", ",", "'Segmentation'", ")", "\n", "if", "cfg", ".", "DATA_PSEUDO_GT", ":", "\n", "            ", "self", ".", "pseudo_gt_dir", "=", "cfg", ".", "DATA_PSEUDO_GT", "\n", "", "else", ":", "\n", "            ", "self", ".", "pseudo_gt_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'pseudo_gt'", ",", "self", ".", "dataset_name", ",", "'Segmentation'", ")", "\n", "\n", "", "file_name", "=", "None", "\n", "if", "cfg", ".", "DATA_AUG", "and", "'train'", "in", "self", ".", "period", ":", "\n", "            ", "file_name", "=", "self", ".", "set_dir", "+", "'/'", "+", "period", "+", "'aug.txt'", "\n", "", "else", ":", "\n", "            ", "file_name", "=", "self", ".", "set_dir", "+", "'/'", "+", "period", "+", "'.txt'", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "file_name", ",", "names", "=", "[", "'filename'", "]", ")", "\n", "self", ".", "name_list", "=", "df", "[", "'filename'", "]", ".", "values", "\n", "# print(self.name_list[1])", "\n", "if", "self", ".", "dataset_name", "==", "'VOC2012'", ":", "\n", "            ", "self", ".", "categories", "=", "[", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "'cow'", ",", "\n", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "\n", "'train'", ",", "'tvmonitor'", "]", "\n", "self", ".", "coco2voc", "=", "[", "[", "0", "]", ",", "[", "5", "]", ",", "[", "2", "]", ",", "[", "16", "]", ",", "[", "9", "]", ",", "[", "44", "]", ",", "[", "6", "]", ",", "[", "3", "]", ",", "[", "17", "]", ",", "[", "62", "]", ",", "\n", "[", "21", "]", ",", "[", "67", "]", ",", "[", "18", "]", ",", "[", "19", "]", ",", "[", "4", "]", ",", "[", "1", "]", ",", "[", "64", "]", ",", "[", "20", "]", ",", "[", "63", "]", ",", "[", "7", "]", ",", "[", "72", "]", "]", "\n", "\n", "self", ".", "num_categories", "=", "len", "(", "self", ".", "categories", ")", "+", "1", "\n", "self", ".", "cmap", "=", "self", ".", "__colormap", "(", "len", "(", "self", ".", "categories", ")", "+", "1", ")", "\n", "\n", "# to record the previous prediction", "\n", "", "self", ".", "prev_pred_dict", "=", "{", "}", "\n", "self", ".", "seg_dict", "=", "{", "}", "\n", "self", ".", "init_seg_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.init_seg_dict": [[67, 76], ["range", "len", "PIL.Image.open", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.array"], "methods", ["None"], ["", "def", "init_seg_dict", "(", "self", ")", ":", "\n", "        ", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "name_list", ")", ")", ":", "\n", "            ", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "seg_file", "=", "self", ".", "pseudo_gt_dir", "+", "'/'", "+", "name", "+", "'.png'", "\n", "\n", "segmentation1", "=", "Image", ".", "open", "(", "seg_file", ")", "\n", "\n", "segmentation1", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "segmentation1", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "unsqueeze", "(", "0", ")", "# 1,h,w", "\n", "self", ".", "seg_dict", "[", "idx", "]", "=", "segmentation1", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.update_seg_dict": [[78, 81], ["range", "len", "VOCTrainwsegDataset.VOCTrainwsegDataset.update_allclass"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.update_allclass"], ["", "", "def", "update_seg_dict", "(", "self", ",", "IoU_npl_indx", ",", "mask_threshold", "=", "0.8", ")", ":", "\n", "        ", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "name_list", ")", ")", ":", "\n", "            ", "self", ".", "update_allclass", "(", "idx", ",", "IoU_npl_indx", ",", "mask_threshold", ",", "'single'", ",", "class_constraint", "=", "True", ",", "update_or_mask", "=", "'update'", ",", "update_all_bg_img", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.update_allclass": [[83, 153], ["seg_label.size", "set().isdisjoint", "seg_label.clone", "set", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "set", "set", "set", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.unique", "numpy.unique", "numpy.array", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "seg_label.numpy", "set", "set", "seg_label[].numpy", "numpy.unique", "numpy.array", "seg_label.numpy"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.unique", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.unique", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.unique", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.unique", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.unique", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.unique", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.unique"], ["", "", "def", "update_allclass", "(", "self", ",", "idx", ",", "IoU_npl_indx", ",", "mask_threshold", ",", "IoU_npl_constraint", ",", "class_constraint", "=", "True", ",", "update_or_mask", "=", "'update'", ",", "update_all_bg_img", "=", "False", ")", ":", "\n", "        ", "seg_label", "=", "self", ".", "seg_dict", "[", "idx", "]", "# 1,h,w", "\n", "b", ",", "h", ",", "w", "=", "seg_label", ".", "size", "(", ")", "# 1,h,w", "\n", "\n", "# if seg label does not belong to the set of class that needs to be updated (exclude the background class), return", "\n", "if", "set", "(", "np", ".", "unique", "(", "seg_label", ".", "numpy", "(", ")", ")", ")", ".", "isdisjoint", "(", "set", "(", "IoU_npl_indx", "[", "1", ":", "]", ")", ")", ":", "\n", "# only the background in the pseudo label", "\n", "# if update_all_bg_img and len(np.unique(seg_label.numpy()))==1 and np.unique(seg_label.numpy())[0]==0:", "\n", "            ", "if", "update_all_bg_img", "and", "not", "(", "set", "(", "np", ".", "unique", "(", "seg_label", ".", "numpy", "(", ")", ")", ")", "-", "set", "(", "np", ".", "array", "(", "[", "0", ",", "255", "]", ")", ")", ")", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "return", "\n", "\n", "", "", "seg_argmax", ",", "seg_prediction_max_prob", "=", "self", ".", "prev_pred_dict", "[", "idx", "]", "\n", "\n", "# if the class_constraint==True and seg label has foreground class", "\n", "# we prevent using predicted class that is not in the pseudo label to correct the label", "\n", "if", "class_constraint", "==", "True", "and", "(", "set", "(", "np", ".", "unique", "(", "seg_label", "[", "0", "]", ".", "numpy", "(", ")", ")", ")", "-", "set", "(", "np", ".", "array", "(", "[", "0", ",", "255", "]", ")", ")", ")", ":", "\n", "            ", "for", "i_batch", "in", "range", "(", "b", ")", ":", "\n", "                ", "unique_class", "=", "torch", ".", "unique", "(", "seg_label", "[", "i_batch", "]", ")", "\n", "# print(unique_class)", "\n", "indx", "=", "torch", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "element", "in", "unique_class", ":", "\n", "                    ", "indx", "=", "indx", "|", "(", "seg_argmax", "[", "i_batch", "]", "==", "element", ")", "\n", "", "seg_argmax", "[", "i_batch", "]", "[", "(", "indx", "==", "0", ")", "]", "=", "255", "\n", "\n", "", "", "seg_mask_255", "=", "(", "seg_argmax", "==", "255", ")", "\n", "\n", "# seg_change_indx means which pixels need to be updated,", "\n", "# find index where prediction is different from label,", "\n", "# and  it is not a ignored index and confidence is larger than threshold", "\n", "seg_change_indx", "=", "(", "seg_label", "!=", "seg_argmax", ")", "&", "(", "~", "seg_mask_255", ")", "&", "(", "\n", "seg_prediction_max_prob", ">", "mask_threshold", ")", "\n", "\n", "# when set to \"both\", only when predicted class and pseudo label both existed in the set, the label would be corrected", "\n", "# this is a conservative way, during our whole experiments, IoU_npl_constraint is always set to be \"single\",", "\n", "# this is retained here in case user may find in useful for their dataset", "\n", "if", "IoU_npl_constraint", "==", "'both'", ":", "\n", "            ", "class_indx_seg_argmax", "=", "torch", ".", "zeros", "(", "(", "b", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "class_indx_seg_label", "=", "torch", ".", "zeros", "(", "(", "b", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "for", "element", "in", "IoU_npl_indx", ":", "\n", "                ", "class_indx_seg_argmax", "=", "class_indx_seg_argmax", "|", "(", "seg_argmax", "==", "element", ")", "\n", "class_indx_seg_label", "=", "class_indx_seg_label", "|", "(", "seg_label", "==", "element", ")", "\n", "", "seg_change_indx", "=", "seg_change_indx", "&", "class_indx_seg_label", "&", "class_indx_seg_argmax", "\n", "\n", "#  when set to \"single\", when predicted class existed in the set, the label would be corrected, no need to consider pseudo label", "\n", "# e.g. when person belongs to the set, motor pixels in the pseudo label can be updated to person even if motor is not in set", "\n", "", "elif", "IoU_npl_constraint", "==", "'single'", ":", "\n", "            ", "class_indx_seg_argmax", "=", "torch", ".", "zeros", "(", "(", "b", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "for", "element", "in", "IoU_npl_indx", ":", "\n", "                ", "class_indx_seg_argmax", "=", "class_indx_seg_argmax", "|", "(", "seg_argmax", "==", "element", ")", "\n", "", "seg_change_indx", "=", "seg_change_indx", "&", "class_indx_seg_argmax", "\n", "\n", "# if the foreground class portion is too small, do not update", "\n", "", "seg_label_clone", "=", "seg_label", ".", "clone", "(", ")", "\n", "seg_label_clone", "[", "seg_change_indx", "]", "=", "seg_argmax", "[", "seg_change_indx", "]", "\n", "if", "torch", ".", "sum", "(", "seg_label_clone", "!=", "0", ")", "<", "0.5", "*", "torch", ".", "sum", "(", "seg_label", "!=", "0", ")", "and", "torch", ".", "sum", "(", "seg_label_clone", "==", "0", ")", "/", "(", "b", "*", "h", "*", "w", ")", ">", "0.95", ":", "\n", "            ", "return", "\n", "\n", "# update or mask 255", "\n", "", "if", "update_or_mask", "==", "'update'", ":", "\n", "            ", "seg_label", "[", "seg_change_indx", "]", "=", "seg_argmax", "[", "seg_change_indx", "]", "# update all class of the pseudo label", "\n", "", "else", ":", "\n", "# mask the pseudo label for 255 without computing the loss", "\n", "            ", "seg_label", "[", "seg_change_indx", "]", "=", "(", "torch", ".", "ones", "(", "(", "b", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "long", ")", "*", "255", ")", "[", "\n", "seg_change_indx", "]", "# the updated pseudo label", "\n", "\n", "", "self", ".", "seg_dict", "[", "idx", "]", "=", "seg_label", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.__len__": [[154, 156], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.__getitem__": [[157, 165], ["VOCTrainwsegDataset.VOCTrainwsegDataset.__sample_generate__", "VOCTrainwsegDataset.VOCTrainwsegDataset.totensor", "VOCTrainwsegDataset.VOCTrainwsegDataset.keys", "sample[].copy", "onehot"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.__sample_generate__", "home.repos.pwc.inspect_result.kangningthu_adele.utils.imutils.onehot"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample", "=", "self", ".", "__sample_generate__", "(", "idx", ")", "\n", "if", "'segmentation'", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "sample", "[", "'mask'", "]", "=", "sample", "[", "'segmentation'", "]", "<", "self", ".", "num_categories", "\n", "t", "=", "sample", "[", "'segmentation'", "]", ".", "copy", "(", ")", "\n", "t", "[", "t", ">=", "self", ".", "num_categories", "]", "=", "0", "\n", "sample", "[", "'segmentation_onehot'", "]", "=", "onehot", "(", "t", ",", "self", ".", "num_categories", ")", "\n", "", "return", "self", ".", "totensor", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.__sample_generate__": [[166, 195], ["VOCTrainwsegDataset.VOCTrainwsegDataset.load_name", "VOCTrainwsegDataset.VOCTrainwsegDataset.load_image", "VOCTrainwsegDataset.VOCTrainwsegDataset.load_pseudo_segmentation", "[].numpy", "sample[].copy", "seg2cls", "numpy.zeros", "VOCTrainwsegDataset.VOCTrainwsegDataset.__transform__", "VOCTrainwsegDataset.VOCTrainwsegDataset.__transform__", "VOCTrainwsegDataset.VOCTrainwsegDataset.load_feature"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_name", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_image", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_pseudo_segmentation", "home.repos.pwc.inspect_result.kangningthu_adele.utils.imutils.seg2cls", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__transform__", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__transform__", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.load_feature"], ["", "def", "__sample_generate__", "(", "self", ",", "idx", ",", "split_idx", "=", "0", ")", ":", "\n", "        ", "name", "=", "self", ".", "load_name", "(", "idx", ")", "\n", "image", "=", "self", ".", "load_image", "(", "idx", ")", "\n", "r", ",", "c", ",", "_", "=", "image", ".", "shape", "\n", "sample", "=", "{", "'image'", ":", "image", ",", "'name'", ":", "name", ",", "'row'", ":", "r", ",", "'col'", ":", "c", ",", "'batch_idx'", ":", "idx", "}", "\n", "\n", "if", "'test'", "in", "self", ".", "period", ":", "\n", "            ", "return", "self", ".", "__transform__", "(", "sample", ")", "\n", "# elif self.cfg.DATA_PSEUDO_GT and idx >= split_idx and 'train' in self.period:", "\n", "#     segmentation, segmentation2, segmentation3, seg_gt = self.load_pseudo_segmentation(idx)", "\n", "# else:", "\n", "#     segmentation = self.load_segmentation(idx)", "\n", "", "segmentation2", ",", "seg_gt", "=", "self", ".", "load_pseudo_segmentation", "(", "idx", ")", "\n", "\n", "segmentation", "=", "self", ".", "seg_dict", "[", "idx", "]", "[", "0", "]", ".", "numpy", "(", ")", "#h,w", "\n", "\n", "sample", "[", "'segmentation'", "]", "=", "segmentation", "\n", "sample", "[", "'segmentation2'", "]", "=", "segmentation2", "\n", "t", "=", "sample", "[", "'segmentation'", "]", ".", "copy", "(", ")", "\n", "t", "[", "t", ">=", "self", ".", "num_categories", "]", "=", "0", "\n", "sample", "[", "'category'", "]", "=", "seg2cls", "(", "t", ",", "self", ".", "num_categories", ")", "\n", "sample", "[", "'category_copypaste'", "]", "=", "np", ".", "zeros", "(", "sample", "[", "'category'", "]", ".", "shape", ")", "\n", "\n", "sample", "[", "'segmentationgt'", "]", "=", "seg_gt", "\n", "\n", "if", "self", ".", "transform", "==", "'none'", "and", "self", ".", "cfg", ".", "DATA_FEATURE_DIR", ":", "\n", "            ", "feature", "=", "self", ".", "load_feature", "(", "idx", ")", "\n", "sample", "[", "'feature'", "]", "=", "feature", "\n", "", "return", "self", ".", "__transform__", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.load_name": [[196, 199], ["None"], "methods", ["None"], ["", "def", "load_name", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.load_image": [[200, 206], ["cv2.imread", "cv2.cvtColor"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "img_file", "=", "self", ".", "img_dir", "+", "'/'", "+", "name", "+", "'.jpg'", "\n", "image", "=", "cv2", ".", "imread", "(", "img_file", ")", "\n", "image_rgb", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "return", "image_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.load_segmentation": [[207, 212], ["numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_segmentation", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "seg_file", "=", "self", ".", "seg_dir", "+", "'/'", "+", "name", "+", "'.png'", "\n", "segmentation", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "seg_file", ")", ")", "\n", "return", "segmentation", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.load_pseudo_segmentation": [[213, 224], ["PIL.Image.open", "numpy.array", "numpy.array", "PIL.Image.open().resize", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_pseudo_segmentation", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "seg_file", "=", "self", ".", "pseudo_gt_dir", "+", "'/'", "+", "name", "+", "'.png'", "\n", "segmentation1", "=", "Image", ".", "open", "(", "seg_file", ")", "\n", "width", ",", "height", "=", "segmentation1", ".", "size", "\n", "segmentation1", "=", "np", ".", "array", "(", "segmentation1", ")", "\n", "\n", "seg_gt_file", "=", "self", ".", "seg_dir_gt", "+", "'/'", "+", "name", "+", "'.png'", "\n", "seg_gt", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "seg_gt_file", ")", ".", "resize", "(", "(", "width", ",", "height", ")", ")", ")", "\n", "\n", "return", "segmentation1", ",", "seg_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.__colormap": [[227, 257], ["numpy.zeros", "range", "range", "VOCTrainwsegDataset.VOCTrainwsegDataset.__colormap.uint82bin"], "methods", ["None"], ["", "def", "__colormap", "(", "self", ",", "N", ")", ":", "\n", "        ", "\"\"\"Get the map from label index to color\n\n        Args:\n            N: number of class\n\n            return: a Nx3 matrix\n\n        \"\"\"", "\n", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "def", "uint82bin", "(", "n", ",", "count", "=", "8", ")", ":", "\n", "            ", "\"\"\"returns the binary of integer n, count refers to amount of bits\"\"\"", "\n", "return", "''", ".", "join", "(", "[", "str", "(", "(", "n", ">>", "y", ")", "&", "1", ")", "for", "y", "in", "range", "(", "count", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "r", "=", "0", "\n", "g", "=", "0", "\n", "b", "=", "0", "\n", "idx", "=", "i", "\n", "for", "j", "in", "range", "(", "7", ")", ":", "\n", "                ", "str_id", "=", "uint82bin", "(", "idx", ")", "\n", "r", "=", "r", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "1", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "g", "=", "g", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "2", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "b", "=", "b", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "3", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "idx", "=", "idx", ">>", "3", "\n", "", "cmap", "[", "i", ",", "0", "]", "=", "r", "\n", "cmap", "[", "i", ",", "1", "]", "=", "g", "\n", "cmap", "[", "i", ",", "2", "]", "=", "b", "\n", "", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.load_ranked_namelist": [[258, 261], ["VOCTrainwsegDataset.VOCTrainwsegDataset.read_rank_result"], "methods", ["None"], ["", "def", "load_ranked_namelist", "(", "self", ")", ":", "\n", "        ", "df", "=", "self", ".", "read_rank_result", "(", ")", "\n", "self", ".", "name_list", "=", "df", "[", "'filename'", "]", ".", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.label2colormap": [[262, 271], ["label.astype", "numpy.zeros"], "methods", ["None"], ["", "def", "label2colormap", "(", "self", ",", "label", ")", ":", "\n", "        ", "m", "=", "label", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "r", ",", "c", "=", "m", ".", "shape", "\n", "cmap", "=", "np", ".", "zeros", "(", "(", "r", ",", "c", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cmap", "[", ":", ",", ":", ",", "0", "]", "=", "(", "m", "&", "1", ")", "<<", "7", "|", "(", "m", "&", "8", ")", "<<", "3", "\n", "cmap", "[", ":", ",", ":", ",", "1", "]", "=", "(", "m", "&", "2", ")", "<<", "6", "|", "(", "m", "&", "16", ")", "<<", "2", "\n", "cmap", "[", ":", ",", ":", ",", "2", "]", "=", "(", "m", "&", "4", ")", "<<", "5", "\n", "cmap", "[", "m", "==", "255", "]", "=", "[", "255", ",", "255", ",", "255", "]", "\n", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.save_result": [[272, 286], ["os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "cv2.imwrite"], "methods", ["None"], ["", "def", "save_result", "(", "self", ",", "result_list", ",", "model_id", ")", ":", "\n", "        ", "\"\"\"Save test results\n\n        Args:\n            result_list(list of dict): [{'name':name1, 'predict':predict_seg1},{...},...]\n\n        \"\"\"", "\n", "folder_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "rst_dir", ",", "'%s_%s'", "%", "(", "model_id", ",", "self", ".", "period", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "\n", "", "for", "sample", "in", "result_list", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "'%s.png'", "%", "sample", "[", "'name'", "]", ")", "\n", "cv2", ".", "imwrite", "(", "file_path", ",", "sample", "[", "'predict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.save_pseudo_gt": [[287, 302], ["os.path.exists", "os.makedirs", "os.path.join", "cv2.imwrite"], "methods", ["None"], ["", "", "def", "save_pseudo_gt", "(", "self", ",", "result_list", ",", "folder_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"Save pseudo gt\n\n        Args:\n            result_list(list of dict): [{'name':name1, 'predict':predict_seg1},{...},...]\n\n        \"\"\"", "\n", "i", "=", "1", "\n", "folder_path", "=", "self", ".", "pseudo_gt_dir", "if", "folder_path", "is", "None", "else", "folder_path", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "", "for", "sample", "in", "result_list", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "'%s.png'", "%", "(", "sample", "[", "'name'", "]", ")", ")", "\n", "cv2", ".", "imwrite", "(", "file_path", ",", "sample", "[", "'predict'", "]", ")", "\n", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.do_matlab_eval": [[303, 318], ["os.path.join", "os.path.join", "print", "print", "subprocess.call"], "methods", ["None"], ["", "", "def", "do_matlab_eval", "(", "self", ",", "model_id", ")", ":", "\n", "        ", "import", "subprocess", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'VOCcode'", ")", "\n", "eval_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "eval_dir", ",", "'%s_result.mat'", "%", "model_id", ")", "\n", "cmd", "=", "'cd {} && '", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "'matlab -nodisplay -nodesktop '", "\n", "cmd", "+=", "'-r \"dbstop if error; VOCinit; '", "\n", "cmd", "+=", "'VOCevalseg(VOCopts,\\'{:s}\\');'", ".", "format", "(", "model_id", ")", "\n", "cmd", "+=", "'accuracies,avacc,conf,rawcounts = VOCevalseg(VOCopts,\\'{:s}\\'); '", ".", "format", "(", "model_id", ")", "\n", "cmd", "+=", "'save(\\'{:s}\\',\\'accuracies\\',\\'avacc\\',\\'conf\\',\\'rawcounts\\'); '", ".", "format", "(", "eval_filename", ")", "\n", "cmd", "+=", "'quit;\"'", "\n", "\n", "print", "(", "'start subprocess for matlab evaluation...'", ")", "\n", "print", "(", "cmd", ")", "\n", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.do_python_eval": [[319, 379], ["os.path.join", "range", "range", "range", "range", "numpy.mean", "print", "print", "TP.append", "P.append", "T.append", "range", "multiprocessing.Process", "multiprocessing.Process.start", "p_list.append", "multiprocessing.Process.join", "IoU.append", "numpy.array", "multiprocessing.Value", "multiprocessing.Value", "multiprocessing.Value", "len", "os.path.join", "os.path.join", "numpy.array", "numpy.array", "range", "print", "PIL.Image.open", "PIL.Image.open", "P[].acquire", "numpy.sum", "P[].release", "T[].acquire", "numpy.sum", "T[].release", "TP[].acquire", "numpy.sum", "TP[].release", "print", "print"], "methods", ["None"], ["", "def", "do_python_eval", "(", "self", ",", "model_id", ")", ":", "\n", "        ", "predict_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "rst_dir", ",", "'%s_%s'", "%", "(", "model_id", ",", "self", ".", "period", ")", ")", "\n", "gt_folder", "=", "self", ".", "seg_dir", "\n", "TP", "=", "[", "]", "\n", "P", "=", "[", "]", "\n", "T", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "            ", "TP", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "P", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "T", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "\n", "", "def", "compare", "(", "start", ",", "step", ",", "TP", ",", "P", ",", "T", ")", ":", "\n", "            ", "for", "idx", "in", "range", "(", "start", ",", "len", "(", "self", ".", "name_list", ")", ",", "step", ")", ":", "\n", "# print('%d/%d'%(idx,len(self.name_list)))", "\n", "                ", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "predict_file", "=", "os", ".", "path", ".", "join", "(", "predict_folder", ",", "'%s.png'", "%", "name", ")", "\n", "gt_file", "=", "os", ".", "path", ".", "join", "(", "gt_folder", ",", "'%s.png'", "%", "name", ")", "\n", "predict", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "predict_file", ")", ")", "# cv2.imread(predict_file)", "\n", "gt", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_file", ")", ")", "\n", "cal", "=", "gt", "<", "255", "\n", "mask", "=", "(", "predict", "==", "gt", ")", "*", "cal", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "                    ", "P", "[", "i", "]", ".", "acquire", "(", ")", "\n", "P", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "predict", "==", "i", ")", "*", "cal", ")", "\n", "P", "[", "i", "]", ".", "release", "(", ")", "\n", "T", "[", "i", "]", ".", "acquire", "(", ")", "\n", "T", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "cal", ")", "\n", "T", "[", "i", "]", ".", "release", "(", ")", "\n", "TP", "[", "i", "]", ".", "acquire", "(", ")", "\n", "TP", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "mask", ")", "\n", "TP", "[", "i", "]", ".", "release", "(", ")", "\n", "\n", "", "", "", "p_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "            ", "p", "=", "multiprocessing", ".", "Process", "(", "target", "=", "compare", ",", "args", "=", "(", "i", ",", "8", ",", "TP", ",", "P", ",", "T", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "p_list", ".", "append", "(", "p", ")", "\n", "", "for", "p", "in", "p_list", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "", "IoU", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "            ", "IoU", ".", "append", "(", "TP", "[", "i", "]", ".", "value", "/", "(", "T", "[", "i", "]", ".", "value", "+", "P", "[", "i", "]", ".", "value", "-", "TP", "[", "i", "]", ".", "value", "+", "1e-10", ")", ")", "\n", "", "loglist", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "print", "(", "'%11s:%7.3f%%'", "%", "(", "'background'", ",", "IoU", "[", "i", "]", "*", "100", ")", ",", "end", "=", "'\\t'", ")", "\n", "loglist", "[", "'background'", "]", "=", "IoU", "[", "i", "]", "*", "100", "\n", "", "else", ":", "\n", "                ", "if", "i", "%", "2", "!=", "1", ":", "\n", "                    ", "print", "(", "'%11s:%7.3f%%'", "%", "(", "self", ".", "categories", "[", "i", "-", "1", "]", ",", "IoU", "[", "i", "]", "*", "100", ")", ",", "end", "=", "'\\t'", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'%11s:%7.3f%%'", "%", "(", "self", ".", "categories", "[", "i", "-", "1", "]", ",", "IoU", "[", "i", "]", "*", "100", ")", ")", "\n", "", "loglist", "[", "self", ".", "categories", "[", "i", "-", "1", "]", "]", "=", "IoU", "[", "i", "]", "*", "100", "\n", "\n", "", "", "miou", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU", ")", ")", "\n", "print", "(", "'\\n======================================================'", ")", "\n", "print", "(", "'%11s:%7.3f%%'", "%", "(", "'mIoU'", ",", "miou", "*", "100", ")", ")", "\n", "loglist", "[", "'mIoU'", "]", "=", "miou", "*", "100", "\n", "return", "loglist", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.do_python_eval_batch_pseudo_one_process": [[380, 407], ["os.path.join", "range", "utils.iou_computation.compute_iou", "enumerate", "numpy.mean", "len", "os.path.join", "numpy.array", "VOCTrainwsegDataset.VOCTrainwsegDataset.seg_dict[].cpu().numpy", "utils.iou_computation.update_iou_stat", "numpy.array", "PIL.Image.open", "VOCTrainwsegDataset.VOCTrainwsegDataset.seg_dict[].cpu"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat"], ["", "def", "do_python_eval_batch_pseudo_one_process", "(", "self", ")", ":", "\n", "        ", "self", ".", "seg_dir_gt", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'SegmentationClassAug'", ")", "\n", "gt_folder", "=", "self", ".", "seg_dir_gt", "\n", "TP_gt_epoch", "=", "[", "0", "]", "*", "21", "\n", "P_gt_epoch", "=", "[", "0", "]", "*", "21", "\n", "T_gt_epoch", "=", "[", "0", "]", "*", "21", "\n", "loglist", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "name_list", ")", ")", ":", "\n", "# print(idx)", "\n", "            ", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "gt_file", "=", "os", ".", "path", ".", "join", "(", "gt_folder", ",", "'%s.png'", "%", "name", ")", "\n", "gt", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_file", ")", ")", "\n", "r", ",", "c", "=", "gt", ".", "shape", "\n", "predict", "=", "self", ".", "seg_dict", "[", "idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "TP_gt_epoch", ",", "P_gt_epoch", ",", "T_gt_epoch", "=", "update_iou_stat", "(", "predict", ",", "gt", ",", "TP_gt_epoch", ",", "\n", "P_gt_epoch", ",", "T_gt_epoch", ")", "\n", "", "IoU_gt_epoch", "=", "compute_iou", "(", "TP_gt_epoch", ",", "P_gt_epoch", ",", "T_gt_epoch", ")", "\n", "for", "indx", ",", "class_name", "in", "enumerate", "(", "\n", "[", "'background'", ",", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "\n", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "\n", "'tvmonitor'", "]", ")", ":", "\n", "            ", "loglist", "[", "class_name", "]", "=", "IoU_gt_epoch", "[", "indx", "]", "\n", "", "mIoU_clean_epoch", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_gt_epoch", ")", ")", "\n", "loglist", "[", "'mIoU'", "]", "=", "mIoU_clean_epoch", "\n", "return", "loglist", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCTrainwsegDataset.VOCTrainwsegDataset.__coco2voc": [[408, 415], ["numpy.zeros", "range"], "methods", ["None"], ["", "def", "__coco2voc", "(", "self", ",", "m", ")", ":", "\n", "        ", "r", ",", "c", "=", "m", ".", "shape", "\n", "result", "=", "np", ".", "zeros", "(", "(", "r", ",", "c", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "21", ")", ":", "\n", "            ", "for", "j", "in", "self", ".", "coco2voc", "[", "i", "]", ":", "\n", "                ", "result", "[", "m", "==", "j", "]", "=", "i", "\n", "", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.generateData.generate_dataset": [[3, 6], ["utils.registry.DATASETS.get"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.FutureResult.get"], ["def", "generate_dataset", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "\t", "dataset", "=", "DATASETS", ".", "get", "(", "cfg", ".", "DATA_NAME", ")", "(", "cfg", ",", "**", "kwargs", ")", "\n", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.__init__": [[25, 66], ["datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__init__", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pandas.read_csv", "os.path.join", "VOCEvalDataset.VOCEvalDataset.__colormap", "len", "len"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.__colormap"], ["\t", "def", "__init__", "(", "self", ",", "cfg", ",", "period", ",", "transform", "=", "'none'", ")", ":", "\n", "\t\t", "super", "(", "VOCEvalDataset", ",", "self", ")", ".", "__init__", "(", "cfg", ",", "period", ",", "transform", ")", "\n", "self", ".", "dataset_name", "=", "'VOC%d'", "%", "cfg", ".", "DATA_YEAR", "\n", "self", ".", "root_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "'data'", ",", "'VOCdevkit'", ")", "\n", "self", ".", "dataset_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "dataset_name", ")", "\n", "self", ".", "rst_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'results'", ",", "self", ".", "dataset_name", ",", "'Segmentation'", ")", "\n", "self", ".", "eval_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'eval_result'", ",", "self", ".", "dataset_name", ",", "'Segmentation'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'JPEGImages'", ")", "\n", "# print(self.img_dir)", "\n", "self", ".", "ann_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'Annotations'", ")", "\n", "self", ".", "seg_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'SegmentationClass'", ")", "\n", "self", ".", "seg_dir_gt", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'SegmentationClassAug'", ")", "\n", "self", ".", "set_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'ImageSets'", ",", "'Segmentation'", ")", "\n", "if", "cfg", ".", "DATA_PSEUDO_GT", ":", "\n", "\t\t\t", "self", ".", "pseudo_gt_dir", "=", "cfg", ".", "DATA_PSEUDO_GT", "\n", "# self.pseudo_gt_dir_2 = cfg.DATA_PSEUDO_GT_2", "\n", "# self.pseudo_gt_dir_3 = cfg.DATA_PSEUDO_GT_3", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "pseudo_gt_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'pseudo_gt'", ",", "self", ".", "dataset_name", ",", "'Segmentation'", ")", "\n", "\n", "", "file_name", "=", "None", "\n", "if", "cfg", ".", "DATA_AUG", "and", "'train'", "in", "self", ".", "period", ":", "\n", "\t\t\t", "file_name", "=", "self", ".", "set_dir", "+", "'/'", "+", "period", "+", "'aug.txt'", "\n", "", "else", ":", "\n", "\t\t\t", "file_name", "=", "self", ".", "set_dir", "+", "'/'", "+", "period", "+", "'.txt'", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "file_name", ",", "names", "=", "[", "'filename'", "]", ")", "\n", "self", ".", "name_list", "=", "df", "[", "'filename'", "]", ".", "values", "\n", "# print(self.name_list[1])", "\n", "if", "self", ".", "dataset_name", "==", "'VOC2012'", ":", "\n", "\t\t\t", "self", ".", "categories", "=", "[", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "'cow'", ",", "\n", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", "]", "\n", "self", ".", "coco2voc", "=", "[", "[", "0", "]", ",", "[", "5", "]", ",", "[", "2", "]", ",", "[", "16", "]", ",", "[", "9", "]", ",", "[", "44", "]", ",", "[", "6", "]", ",", "[", "3", "]", ",", "[", "17", "]", ",", "[", "62", "]", ",", "\n", "[", "21", "]", ",", "[", "67", "]", ",", "[", "18", "]", ",", "[", "19", "]", ",", "[", "4", "]", ",", "[", "1", "]", ",", "[", "64", "]", ",", "[", "20", "]", ",", "[", "63", "]", ",", "[", "7", "]", ",", "[", "72", "]", "]", "\n", "\n", "self", ".", "num_categories", "=", "len", "(", "self", ".", "categories", ")", "+", "1", "\n", "self", ".", "cmap", "=", "self", ".", "__colormap", "(", "len", "(", "self", ".", "categories", ")", "+", "1", ")", "\n", "\n", "# to record the previous prediction", "\n", "", "self", ".", "prev_pred_dict", "=", "{", "}", "\n", "\n", "self", ".", "ori_indx_list", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.__getitem__": [[71, 79], ["VOCEvalDataset.VOCEvalDataset.__sample_generate__", "VOCEvalDataset.VOCEvalDataset.totensor", "VOCEvalDataset.VOCEvalDataset.keys", "sample[].copy", "onehot"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.__sample_generate__", "home.repos.pwc.inspect_result.kangningthu_adele.utils.imutils.onehot"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "sample", "=", "self", ".", "__sample_generate__", "(", "idx", ")", "\n", "if", "'segmentation'", "in", "sample", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "sample", "[", "'mask'", "]", "=", "sample", "[", "'segmentation'", "]", "<", "self", ".", "num_categories", "\n", "t", "=", "sample", "[", "'segmentation'", "]", ".", "copy", "(", ")", "\n", "t", "[", "t", ">=", "self", ".", "num_categories", "]", "=", "0", "\n", "sample", "[", "'segmentation_onehot'", "]", "=", "onehot", "(", "t", ",", "self", ".", "num_categories", ")", "\n", "", "return", "self", ".", "totensor", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.__sample_generate__": [[80, 123], ["VOCEvalDataset.VOCEvalDataset.load_name", "VOCEvalDataset.VOCEvalDataset.load_image", "sample[].copy", "seg2cls", "numpy.zeros", "VOCEvalDataset.VOCEvalDataset.__transform__", "VOCEvalDataset.VOCEvalDataset.__transform__", "VOCEvalDataset.VOCEvalDataset.prev_pred_dict.keys", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "VOCEvalDataset.VOCEvalDataset.load_feature", "VOCEvalDataset.VOCEvalDataset.load_pseudo_segmentation", "VOCEvalDataset.VOCEvalDataset.load_segmentation", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_name", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_image", "home.repos.pwc.inspect_result.kangningthu_adele.utils.imutils.seg2cls", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__transform__", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.__transform__", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.BaseMultiwGTauginfoDataset.BaseMultiwGTauginfoDataset.load_feature", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_pseudo_segmentation", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_segmentation"], ["", "def", "__sample_generate__", "(", "self", ",", "idx", ",", "split_idx", "=", "0", ")", ":", "\n", "\t\t", "name", "=", "self", ".", "load_name", "(", "idx", ")", "\n", "image", "=", "self", ".", "load_image", "(", "idx", ")", "\n", "r", ",", "c", ",", "_", "=", "image", ".", "shape", "\n", "sample", "=", "{", "'image'", ":", "image", ",", "'name'", ":", "name", ",", "'row'", ":", "r", ",", "'col'", ":", "c", ",", "'batch_idx'", ":", "idx", "}", "\n", "\n", "if", "'test'", "in", "self", ".", "period", ":", "\n", "\t\t\t", "return", "self", ".", "__transform__", "(", "sample", ")", "\n", "", "elif", "self", ".", "cfg", ".", "DATA_PSEUDO_GT", "and", "idx", ">=", "split_idx", "and", "'train'", "in", "self", ".", "period", ":", "\n", "\t\t\t", "segmentation", ",", "seg_gt", "=", "self", ".", "load_pseudo_segmentation", "(", "idx", ")", "\n", "", "else", ":", "\n", "\t\t\t", "segmentation", "=", "self", ".", "load_segmentation", "(", "idx", ")", "\n", "\n", "", "sample", "[", "'segmentation'", "]", "=", "segmentation", "\n", "t", "=", "sample", "[", "'segmentation'", "]", ".", "copy", "(", ")", "\n", "t", "[", "t", ">=", "self", ".", "num_categories", "]", "=", "0", "\n", "sample", "[", "'category'", "]", "=", "seg2cls", "(", "t", ",", "self", ".", "num_categories", ")", "\n", "sample", "[", "'category_copypaste'", "]", "=", "np", ".", "zeros", "(", "sample", "[", "'category'", "]", ".", "shape", ")", "\n", "\n", "# if there is previous prediction for this video", "\n", "if", "idx", "in", "self", ".", "prev_pred_dict", ".", "keys", "(", ")", ":", "\n", "# interpolate to the image spatial resolution self.prev_pred_dict[idx] size 1,c,h,w", "\n", "\t\t\t", "if", "torch", ".", "is_tensor", "(", "self", ".", "prev_pred_dict", "[", "idx", "]", ")", ":", "\n", "# prev_pred = F.interpolate(self.prev_pred_dict[idx], size=(r, c), mode='nearest')", "\n", "\t\t\t\t", "prev_pred", "=", "F", ".", "interpolate", "(", "self", ".", "prev_pred_dict", "[", "idx", "]", ",", "size", "=", "(", "r", ",", "c", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ",", "\n", "recompute_scale_factor", "=", "False", ")", "\n", "", "else", ":", "\n", "# prev_pred = F.interpolate(torch.tensor(self.prev_pred_dict[idx]), size=(r, c), mode='nearest')", "\n", "\t\t\t\t", "prev_pred", "=", "F", ".", "interpolate", "(", "torch", ".", "tensor", "(", "self", ".", "prev_pred_dict", "[", "idx", "]", ")", ",", "size", "=", "(", "r", ",", "c", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ",", "\n", "recompute_scale_factor", "=", "False", ")", "\n", "", "sample", "[", "'prev_prediction'", "]", "=", "prev_pred", "#1,c,h,w", "\n", "\n", "# the small scale case", "\n", "# sample['segmentation2'] = segmentation2", "\n", "# sample['segmentation3'] = segmentation3", "\n", "\n", "\n", "", "sample", "[", "'segmentationgt'", "]", "=", "seg_gt", "\n", "\n", "if", "self", ".", "transform", "==", "'none'", "and", "self", ".", "cfg", ".", "DATA_FEATURE_DIR", ":", "\n", "\t\t\t", "feature", "=", "self", ".", "load_feature", "(", "idx", ")", "\n", "sample", "[", "'feature'", "]", "=", "feature", "\n", "", "return", "self", ".", "__transform__", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_name": [[125, 128], ["None"], "methods", ["None"], ["", "def", "load_name", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_image": [[129, 135], ["cv2.imread", "cv2.cvtColor"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "img_file", "=", "self", ".", "img_dir", "+", "'/'", "+", "name", "+", "'.jpg'", "\n", "image", "=", "cv2", ".", "imread", "(", "img_file", ")", "\n", "image_rgb", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "return", "image_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_segmentation": [[136, 141], ["numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_segmentation", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "seg_file", "=", "self", ".", "seg_dir", "+", "'/'", "+", "name", "+", "'.png'", "\n", "segmentation", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "seg_file", ")", ")", "\n", "return", "segmentation", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_pseudo_segmentation": [[142, 155], ["PIL.Image.open", "numpy.array", "numpy.array", "PIL.Image.open().resize", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_pseudo_segmentation", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "seg_file", "=", "self", ".", "pseudo_gt_dir", "+", "'/'", "+", "name", "+", "'.png'", "\n", "\n", "segmentation1", "=", "Image", ".", "open", "(", "seg_file", ")", "\n", "width", ",", "height", "=", "segmentation1", ".", "size", "\n", "\n", "segmentation1", "=", "np", ".", "array", "(", "segmentation1", ")", "\n", "\n", "seg_gt_file", "=", "self", ".", "seg_dir_gt", "+", "'/'", "+", "name", "+", "'.png'", "\n", "seg_gt", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "seg_gt_file", ")", ".", "resize", "(", "(", "width", ",", "height", ")", ")", ")", "\n", "\n", "return", "segmentation1", ",", "seg_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.__colormap": [[156, 186], ["numpy.zeros", "range", "range", "VOCEvalDataset.VOCEvalDataset.__colormap.uint82bin"], "methods", ["None"], ["", "def", "__colormap", "(", "self", ",", "N", ")", ":", "\n", "\t\t", "\"\"\"Get the map from label index to color\n\n\t\tArgs:\n\t\t\tN: number of class\n\n\t\t\treturn: a Nx3 matrix\n\n\t\t\"\"\"", "\n", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "def", "uint82bin", "(", "n", ",", "count", "=", "8", ")", ":", "\n", "\t\t\t", "\"\"\"returns the binary of integer n, count refers to amount of bits\"\"\"", "\n", "return", "''", ".", "join", "(", "[", "str", "(", "(", "n", ">>", "y", ")", "&", "1", ")", "for", "y", "in", "range", "(", "count", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "\t\t\t", "r", "=", "0", "\n", "g", "=", "0", "\n", "b", "=", "0", "\n", "idx", "=", "i", "\n", "for", "j", "in", "range", "(", "7", ")", ":", "\n", "\t\t\t\t", "str_id", "=", "uint82bin", "(", "idx", ")", "\n", "r", "=", "r", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "1", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "g", "=", "g", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "2", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "b", "=", "b", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "3", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "idx", "=", "idx", ">>", "3", "\n", "", "cmap", "[", "i", ",", "0", "]", "=", "r", "\n", "cmap", "[", "i", ",", "1", "]", "=", "g", "\n", "cmap", "[", "i", ",", "2", "]", "=", "b", "\n", "", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.load_ranked_namelist": [[187, 190], ["VOCEvalDataset.VOCEvalDataset.read_rank_result"], "methods", ["None"], ["", "def", "load_ranked_namelist", "(", "self", ")", ":", "\n", "\t\t", "df", "=", "self", ".", "read_rank_result", "(", ")", "\n", "self", ".", "name_list", "=", "df", "[", "'filename'", "]", ".", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.label2colormap": [[191, 200], ["label.astype", "numpy.zeros"], "methods", ["None"], ["", "def", "label2colormap", "(", "self", ",", "label", ")", ":", "\n", "\t\t", "m", "=", "label", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "r", ",", "c", "=", "m", ".", "shape", "\n", "cmap", "=", "np", ".", "zeros", "(", "(", "r", ",", "c", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cmap", "[", ":", ",", ":", ",", "0", "]", "=", "(", "m", "&", "1", ")", "<<", "7", "|", "(", "m", "&", "8", ")", "<<", "3", "\n", "cmap", "[", ":", ",", ":", ",", "1", "]", "=", "(", "m", "&", "2", ")", "<<", "6", "|", "(", "m", "&", "16", ")", "<<", "2", "\n", "cmap", "[", ":", ",", ":", ",", "2", "]", "=", "(", "m", "&", "4", ")", "<<", "5", "\n", "cmap", "[", "m", "==", "255", "]", "=", "[", "255", ",", "255", ",", "255", "]", "\n", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.save_result": [[201, 215], ["os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "cv2.imwrite"], "methods", ["None"], ["", "def", "save_result", "(", "self", ",", "result_list", ",", "model_id", ")", ":", "\n", "\t\t", "\"\"\"Save test results\n\n\t\tArgs:\n\t\t\tresult_list(list of dict): [{'name':name1, 'predict':predict_seg1},{...},...]\n\n\t\t\"\"\"", "\n", "folder_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "rst_dir", ",", "'%s_%s'", "%", "(", "model_id", ",", "self", ".", "period", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "\n", "", "for", "sample", "in", "result_list", ":", "\n", "\t\t\t", "file_path", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "'%s.png'", "%", "sample", "[", "'name'", "]", ")", "\n", "cv2", ".", "imwrite", "(", "file_path", ",", "sample", "[", "'predict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.save_pseudo_gt": [[216, 231], ["os.path.exists", "os.makedirs", "os.path.join", "cv2.imwrite"], "methods", ["None"], ["", "", "def", "save_pseudo_gt", "(", "self", ",", "result_list", ",", "folder_path", "=", "None", ")", ":", "\n", "\t\t", "\"\"\"Save pseudo gt\n\n\t\tArgs:\n\t\t\tresult_list(list of dict): [{'name':name1, 'predict':predict_seg1},{...},...]\n\n\t\t\"\"\"", "\n", "i", "=", "1", "\n", "folder_path", "=", "self", ".", "pseudo_gt_dir", "if", "folder_path", "is", "None", "else", "folder_path", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "", "for", "sample", "in", "result_list", ":", "\n", "\t\t\t", "file_path", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "'%s.png'", "%", "(", "sample", "[", "'name'", "]", ")", ")", "\n", "cv2", ".", "imwrite", "(", "file_path", ",", "sample", "[", "'predict'", "]", ")", "\n", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.do_matlab_eval": [[232, 247], ["os.path.join", "os.path.join", "print", "print", "subprocess.call"], "methods", ["None"], ["", "", "def", "do_matlab_eval", "(", "self", ",", "model_id", ")", ":", "\n", "\t\t", "import", "subprocess", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'VOCcode'", ")", "\n", "eval_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "eval_dir", ",", "'%s_result.mat'", "%", "model_id", ")", "\n", "cmd", "=", "'cd {} && '", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "'matlab -nodisplay -nodesktop '", "\n", "cmd", "+=", "'-r \"dbstop if error; VOCinit; '", "\n", "cmd", "+=", "'VOCevalseg(VOCopts,\\'{:s}\\');'", ".", "format", "(", "model_id", ")", "\n", "cmd", "+=", "'accuracies,avacc,conf,rawcounts = VOCevalseg(VOCopts,\\'{:s}\\'); '", ".", "format", "(", "model_id", ")", "\n", "cmd", "+=", "'save(\\'{:s}\\',\\'accuracies\\',\\'avacc\\',\\'conf\\',\\'rawcounts\\'); '", ".", "format", "(", "eval_filename", ")", "\n", "cmd", "+=", "'quit;\"'", "\n", "\n", "print", "(", "'start subprocess for matlab evaluation...'", ")", "\n", "print", "(", "cmd", ")", "\n", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.do_python_eval": [[248, 307], ["os.path.join", "range", "range", "range", "range", "numpy.mean", "print", "print", "TP.append", "P.append", "T.append", "range", "multiprocessing.Process", "multiprocessing.Process.start", "p_list.append", "multiprocessing.Process.join", "IoU.append", "numpy.array", "multiprocessing.Value", "multiprocessing.Value", "multiprocessing.Value", "len", "os.path.join", "os.path.join", "numpy.array", "numpy.array", "range", "print", "PIL.Image.open", "PIL.Image.open", "P[].acquire", "numpy.sum", "P[].release", "T[].acquire", "numpy.sum", "T[].release", "TP[].acquire", "numpy.sum", "TP[].release", "print", "print"], "methods", ["None"], ["", "def", "do_python_eval", "(", "self", ",", "model_id", ")", ":", "\n", "\t\t", "predict_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "rst_dir", ",", "'%s_%s'", "%", "(", "model_id", ",", "self", ".", "period", ")", ")", "\n", "gt_folder", "=", "self", ".", "seg_dir", "\n", "TP", "=", "[", "]", "\n", "P", "=", "[", "]", "\n", "T", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "\t\t\t", "TP", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "P", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "T", ".", "append", "(", "multiprocessing", ".", "Value", "(", "'i'", ",", "0", ",", "lock", "=", "True", ")", ")", "\n", "\n", "", "def", "compare", "(", "start", ",", "step", ",", "TP", ",", "P", ",", "T", ")", ":", "\n", "\t\t\t", "for", "idx", "in", "range", "(", "start", ",", "len", "(", "self", ".", "name_list", ")", ",", "step", ")", ":", "\n", "#print('%d/%d'%(idx,len(self.name_list)))", "\n", "\t\t\t\t", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "predict_file", "=", "os", ".", "path", ".", "join", "(", "predict_folder", ",", "'%s.png'", "%", "name", ")", "\n", "gt_file", "=", "os", ".", "path", ".", "join", "(", "gt_folder", ",", "'%s.png'", "%", "name", ")", "\n", "predict", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "predict_file", ")", ")", "#cv2.imread(predict_file)", "\n", "gt", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_file", ")", ")", "\n", "cal", "=", "gt", "<", "255", "\n", "mask", "=", "(", "predict", "==", "gt", ")", "*", "cal", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "\t\t\t\t\t", "P", "[", "i", "]", ".", "acquire", "(", ")", "\n", "P", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "predict", "==", "i", ")", "*", "cal", ")", "\n", "P", "[", "i", "]", ".", "release", "(", ")", "\n", "T", "[", "i", "]", ".", "acquire", "(", ")", "\n", "T", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "cal", ")", "\n", "T", "[", "i", "]", ".", "release", "(", ")", "\n", "TP", "[", "i", "]", ".", "acquire", "(", ")", "\n", "TP", "[", "i", "]", ".", "value", "+=", "np", ".", "sum", "(", "(", "gt", "==", "i", ")", "*", "mask", ")", "\n", "TP", "[", "i", "]", ".", "release", "(", ")", "\n", "", "", "", "p_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "\t\t\t", "p", "=", "multiprocessing", ".", "Process", "(", "target", "=", "compare", ",", "args", "=", "(", "i", ",", "8", ",", "TP", ",", "P", ",", "T", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "p_list", ".", "append", "(", "p", ")", "\n", "", "for", "p", "in", "p_list", ":", "\n", "\t\t\t", "p", ".", "join", "(", ")", "\n", "", "IoU", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "\t\t\t", "IoU", ".", "append", "(", "TP", "[", "i", "]", ".", "value", "/", "(", "T", "[", "i", "]", ".", "value", "+", "P", "[", "i", "]", ".", "value", "-", "TP", "[", "i", "]", ".", "value", "+", "1e-10", ")", ")", "\n", "", "loglist", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_categories", ")", ":", "\n", "\t\t\t", "if", "i", "==", "0", ":", "\n", "\t\t\t\t", "print", "(", "'%11s:%7.3f%%'", "%", "(", "'background'", ",", "IoU", "[", "i", "]", "*", "100", ")", ",", "end", "=", "'\\t'", ")", "\n", "loglist", "[", "'background'", "]", "=", "IoU", "[", "i", "]", "*", "100", "\n", "", "else", ":", "\n", "\t\t\t\t", "if", "i", "%", "2", "!=", "1", ":", "\n", "\t\t\t\t\t", "print", "(", "'%11s:%7.3f%%'", "%", "(", "self", ".", "categories", "[", "i", "-", "1", "]", ",", "IoU", "[", "i", "]", "*", "100", ")", ",", "end", "=", "'\\t'", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "print", "(", "'%11s:%7.3f%%'", "%", "(", "self", ".", "categories", "[", "i", "-", "1", "]", ",", "IoU", "[", "i", "]", "*", "100", ")", ")", "\n", "", "loglist", "[", "self", ".", "categories", "[", "i", "-", "1", "]", "]", "=", "IoU", "[", "i", "]", "*", "100", "\n", "\n", "", "", "miou", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU", ")", ")", "\n", "print", "(", "'\\n======================================================'", ")", "\n", "print", "(", "'%11s:%7.3f%%'", "%", "(", "'mIoU'", ",", "miou", "*", "100", ")", ")", "\n", "loglist", "[", "'mIoU'", "]", "=", "miou", "*", "100", "\n", "return", "loglist", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.do_python_eval_batch_pseudo_one_process": [[308, 339], ["os.path.join", "range", "utils.iou_computation.compute_iou", "enumerate", "numpy.mean", "len", "os.path.join", "numpy.array", "torch.interpolate", "torch.interpolate", "predict_tensor[].cpu().numpy", "numpy.argmax", "utils.iou_computation.update_iou_stat", "numpy.array", "PIL.Image.open", "predict_tensor[].cpu"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat"], ["", "def", "do_python_eval_batch_pseudo_one_process", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "seg_dir_gt", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'SegmentationClassAug'", ")", "\n", "gt_folder", "=", "self", ".", "seg_dir_gt", "\n", "TP_gt_epoch", "=", "[", "0", "]", "*", "21", "\n", "P_gt_epoch", "=", "[", "0", "]", "*", "21", "\n", "T_gt_epoch", "=", "[", "0", "]", "*", "21", "\n", "loglist", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "name_list", ")", ")", ":", "\n", "# print(idx)", "\n", "\t\t\t", "name", "=", "self", ".", "name_list", "[", "idx", "]", "\n", "gt_file", "=", "os", ".", "path", ".", "join", "(", "gt_folder", ",", "'%s.png'", "%", "name", ")", "\n", "gt", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_file", ")", ")", "\n", "r", ",", "c", "=", "gt", ".", "shape", "\n", "# print(r)", "\n", "predict_tensor", "=", "F", ".", "interpolate", "(", "self", ".", "prev_pred_dict", "[", "idx", "]", ",", "size", "=", "(", "r", ",", "c", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ",", "\n", "recompute_scale_factor", "=", "False", ")", "# 1,c,h,w", "\n", "predict", "=", "predict_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# c,h,w", "\n", "predict", "=", "np", ".", "argmax", "(", "predict", ",", "axis", "=", "0", ")", "# h,w", "\n", "\n", "TP_gt_epoch", ",", "P_gt_epoch", ",", "T_gt_epoch", "=", "update_iou_stat", "(", "predict", ",", "gt", ",", "TP_gt_epoch", ",", "\n", "P_gt_epoch", ",", "T_gt_epoch", ")", "\n", "", "IoU_gt_epoch", "=", "compute_iou", "(", "TP_gt_epoch", ",", "P_gt_epoch", ",", "T_gt_epoch", ")", "\n", "for", "indx", ",", "class_name", "in", "enumerate", "(", "\n", "[", "'background'", ",", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "\n", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "\n", "'tvmonitor'", "]", ")", ":", "\n", "\t\t\t", "loglist", "[", "class_name", "]", "=", "IoU_gt_epoch", "[", "indx", "]", "\n", "", "mIoU_clean_epoch", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "IoU_gt_epoch", ")", ")", "\n", "loglist", "[", "'mIoU'", "]", "=", "mIoU_clean_epoch", "\n", "return", "loglist", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.VOCEvalDataset.VOCEvalDataset.__coco2voc": [[341, 348], ["numpy.zeros", "range"], "methods", ["None"], ["", "def", "__coco2voc", "(", "self", ",", "m", ")", ":", "\n", "\t\t", "r", ",", "c", "=", "m", ".", "shape", "\n", "result", "=", "np", ".", "zeros", "(", "(", "r", ",", "c", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "21", ")", ":", "\n", "\t\t\t", "for", "j", "in", "self", ".", "coco2voc", "[", "i", "]", ":", "\n", "\t\t\t\t", "result", "[", "m", "==", "j", "]", "=", "i", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.RandomCrop.__init__": [[21, 28], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "\t\t", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "\t\t\t", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "\t\t\t", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.RandomCrop.__call__": [[29, 93], ["min", "min", "sample.keys", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "random.randrange", "random.randrange", "random.randrange", "random.randrange", "numpy.zeros", "torch.interpolate", "torch.interpolate", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "numpy.ones", "numpy.ones", "numpy.ones"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "\t\t", "h", ",", "w", "=", "sample", "[", "'image'", "]", ".", "shape", "[", ":", "2", "]", "\n", "ch", "=", "min", "(", "h", ",", "self", ".", "output_size", "[", "0", "]", ")", "\n", "cw", "=", "min", "(", "w", ",", "self", ".", "output_size", "[", "1", "]", ")", "\n", "\n", "h_space", "=", "h", "-", "self", ".", "output_size", "[", "0", "]", "\n", "w_space", "=", "w", "-", "self", ".", "output_size", "[", "1", "]", "\n", "\n", "if", "w_space", ">", "0", ":", "\n", "\t\t\t", "cont_left", "=", "0", "\n", "img_left", "=", "random", ".", "randrange", "(", "w_space", "+", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "cont_left", "=", "random", ".", "randrange", "(", "-", "w_space", "+", "1", ")", "\n", "img_left", "=", "0", "\n", "\n", "", "if", "h_space", ">", "0", ":", "\n", "\t\t\t", "cont_top", "=", "0", "\n", "img_top", "=", "random", ".", "randrange", "(", "h_space", "+", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "cont_top", "=", "random", ".", "randrange", "(", "-", "h_space", "+", "1", ")", "\n", "img_top", "=", "0", "\n", "\n", "", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "img", "=", "sample", "[", "key", "]", "\n", "img_crop", "=", "np", ".", "zeros", "(", "(", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "img_crop", "[", "cont_top", ":", "cont_top", "+", "ch", ",", "cont_left", ":", "cont_left", "+", "cw", "]", "=", "img", "[", "img_top", ":", "img_top", "+", "ch", ",", "img_left", ":", "img_left", "+", "cw", "]", "\n", "#img_crop = img[img_top:img_top+ch, img_left:img_left+cw]", "\n", "sample", "[", "key", "]", "=", "img_crop", "\n", "", "elif", "'prev_prediction'", "in", "key", ":", "\n", "\t\t\t\t", "prev_pred", "=", "sample", "[", "key", "]", "\n", "prev_pred", "=", "F", ".", "interpolate", "(", "prev_pred", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "prev_pred_crop", "=", "torch", ".", "ones", "(", "1", ",", "21", ",", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", "*", "np", ".", "nan", "# tensor", "\n", "prev_pred_crop", "[", ":", ",", ":", ",", "cont_top", ":", "cont_top", "+", "ch", ",", "cont_left", ":", "cont_left", "+", "cw", "]", "=", "prev_pred", "[", ":", ",", ":", ",", "img_top", ":", "img_top", "+", "ch", ",", "img_left", ":", "img_left", "+", "cw", "]", "\n", "sample", "[", "key", "]", "=", "prev_pred_crop", "\n", "\n", "", "elif", "'segmentation'", "==", "key", ":", "\n", "\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg_crop", "=", "np", ".", "ones", "(", "(", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", ",", "np", ".", "float32", ")", "*", "255", "\n", "seg_crop", "[", "cont_top", ":", "cont_top", "+", "ch", ",", "cont_left", ":", "cont_left", "+", "cw", "]", "=", "seg", "[", "img_top", ":", "img_top", "+", "ch", ",", "img_left", ":", "img_left", "+", "cw", "]", "\n", "#seg_crop = seg[img_top:img_top+ch, img_left:img_left+cw]", "\n", "sample", "[", "key", "]", "=", "seg_crop", "\n", "", "elif", "'segmentation2'", "==", "key", "or", "'segmentation3'", "==", "key", "or", "'segmentationgt'", "==", "key", ":", "\n", "\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg_crop", "=", "np", ".", "ones", "(", "(", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", ",", "np", ".", "float32", ")", "*", "255", "\n", "seg_crop", "[", "cont_top", ":", "cont_top", "+", "ch", ",", "cont_left", ":", "cont_left", "+", "cw", "]", "=", "seg", "[", "img_top", ":", "img_top", "+", "ch", ",", "img_left", ":", "img_left", "+", "cw", "]", "\n", "#seg_crop = seg[img_top:img_top+ch, img_left:img_left+cw]", "\n", "sample", "[", "key", "]", "=", "seg_crop", "\n", "", "elif", "'segmentation_pseudo'", "in", "key", ":", "\n", "\t\t\t\t", "seg_pseudo", "=", "sample", "[", "key", "]", "\n", "seg_crop", "=", "np", ".", "ones", "(", "(", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", ",", "np", ".", "float32", ")", "*", "255", "\n", "seg_crop", "[", "cont_top", ":", "cont_top", "+", "ch", ",", "cont_left", ":", "cont_left", "+", "cw", "]", "=", "seg_pseudo", "[", "img_top", ":", "img_top", "+", "ch", ",", "img_left", ":", "img_left", "+", "cw", "]", "\n", "#seg_crop = seg_pseudo[img_top:img_top+ch, img_left:img_left+cw]", "\n", "sample", "[", "key", "]", "=", "seg_crop", "\n", "\n", "", "", "sample", "[", "'cropinfo'", "]", "=", "torch", ".", "tensor", "(", "(", "img_top", ",", "ch", ",", "img_left", ",", "cw", ",", "cont_top", ",", "cont_left", ")", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.CenterCrop.__init__": [[107, 114], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "\t\t", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "\t\t\t", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "\t\t\t", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.CenterCrop.__call__": [[115, 191], ["min", "min", "sample.keys", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "int", "int", "int", "int", "numpy.ceil", "int", "numpy.ceil", "int", "numpy.ceil", "int", "numpy.ceil", "int", "numpy.zeros", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "torch.interpolate", "torch.interpolate", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "numpy.ones", "numpy.ones", "numpy.ones"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "\t\t", "h", ",", "w", "=", "sample", "[", "'image'", "]", ".", "shape", "[", ":", "2", "]", "\n", "ch", "=", "min", "(", "h", ",", "self", ".", "output_size", "[", "0", "]", ")", "\n", "cw", "=", "min", "(", "w", ",", "self", ".", "output_size", "[", "1", "]", ")", "\n", "\n", "h_space", "=", "h", "-", "self", ".", "output_size", "[", "0", "]", "\n", "w_space", "=", "w", "-", "self", ".", "output_size", "[", "1", "]", "\n", "\n", "\n", "if", "w_space", ">", "0", ":", "#cropping is smaller than image", "\n", "\t\t\t", "cont_left", "=", "0", "\n", "cont_right", "=", "w", "\n", "img_left", "=", "int", "(", "np", ".", "ceil", "(", "w_space", "/", "2", ")", ")", "\n", "img_right", "=", "w", "-", "int", "(", "np", ".", "floor", "(", "w_space", "/", "2", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "cont_left", "=", "int", "(", "np", ".", "ceil", "(", "-", "w_space", "/", "2", ")", ")", "\n", "cont_right", "=", "self", ".", "output_size", "[", "1", "]", "-", "int", "(", "np", ".", "floor", "(", "-", "w_space", "/", "2", ")", ")", "\n", "img_left", "=", "0", "\n", "img_right", "=", "self", ".", "output_size", "[", "1", "]", "\n", "\n", "\n", "", "if", "h_space", ">", "0", ":", "\n", "\t\t\t", "cont_top", "=", "0", "\n", "cont_bottom", "=", "h", "\n", "img_top", "=", "int", "(", "np", ".", "ceil", "(", "h_space", "/", "2", ")", ")", "\n", "img_bottom", "=", "h", "-", "int", "(", "np", ".", "floor", "(", "h_space", "/", "2", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "cont_top", "=", "int", "(", "np", ".", "ceil", "(", "-", "h_space", "/", "2", ")", ")", "\n", "cont_bottom", "=", "self", ".", "output_size", "[", "0", "]", "-", "int", "(", "np", ".", "floor", "(", "-", "h_space", "/", "2", ")", ")", "\n", "img_top", "=", "0", "\n", "img_bottom", "=", "self", ".", "output_size", "[", "0", "]", "\n", "\n", "\n", "\n", "", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "img", "=", "sample", "[", "key", "]", "\n", "img_crop", "=", "np", ".", "zeros", "(", "(", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "img_crop", "[", "cont_top", ":", "cont_bottom", ",", "cont_left", ":", "cont_right", "]", "=", "img", "[", "img_top", ":", "img_bottom", ",", "img_left", ":", "img_right", "]", "\n", "#img_crop = img[img_top:img_top+ch, img_left:img_left+cw]", "\n", "sample", "[", "key", "]", "=", "img_crop", "\n", "", "elif", "'prev_prediction'", "in", "key", ":", "\n", "\t\t\t\t", "prev_pred", "=", "sample", "[", "key", "]", "\n", "prev_pred", "=", "F", ".", "interpolate", "(", "prev_pred", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "prev_pred_crop", "=", "torch", ".", "ones", "(", "1", ",", "21", ",", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", "*", "np", ".", "nan", "# tensor", "\n", "prev_pred_crop", "[", ":", ",", ":", ",", "cont_top", ":", "cont_bottom", ",", "cont_left", ":", "cont_right", "]", "=", "prev_pred", "[", ":", ",", ":", ",", "img_top", ":", "img_bottom", ",", "img_left", ":", "img_right", "]", "\n", "sample", "[", "key", "]", "=", "prev_pred_crop", "\n", "\n", "", "elif", "'segmentation'", "==", "key", ":", "\n", "\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg_crop", "=", "np", ".", "ones", "(", "(", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", ",", "np", ".", "float32", ")", "*", "255", "\n", "seg_crop", "[", "cont_top", ":", "cont_bottom", ",", "cont_left", ":", "cont_right", "]", "=", "seg", "[", "img_top", ":", "img_bottom", ",", "img_left", ":", "img_right", "]", "\n", "#seg_crop = seg[img_top:img_top+ch, img_left:img_left+cw]", "\n", "sample", "[", "key", "]", "=", "seg_crop", "\n", "", "elif", "'segmentation2'", "==", "key", "or", "'segmentation3'", "==", "key", "or", "'segmentationgt'", "==", "key", ":", "\n", "\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg_crop", "=", "np", ".", "ones", "(", "(", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", ",", "np", ".", "float32", ")", "*", "255", "\n", "seg_crop", "[", "cont_top", ":", "cont_bottom", ",", "cont_left", ":", "cont_right", "]", "=", "seg", "[", "img_top", ":", "img_bottom", ",", "img_left", ":", "img_right", "]", "\n", "#seg_crop = seg[img_top:img_top+ch, img_left:img_left+cw]", "\n", "sample", "[", "key", "]", "=", "seg_crop", "\n", "", "elif", "'segmentation_pseudo'", "in", "key", ":", "\n", "\t\t\t\t", "seg_pseudo", "=", "sample", "[", "key", "]", "\n", "seg_crop", "=", "np", ".", "ones", "(", "(", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", ",", "np", ".", "float32", ")", "*", "255", "\n", "seg_crop", "[", "cont_top", ":", "cont_bottom", ",", "cont_left", ":", "cont_right", "]", "=", "seg_pseudo", "[", "img_top", ":", "img_bottom", ",", "img_left", ":", "img_right", "]", "\n", "#seg_crop = seg_pseudo[img_top:img_top+ch, img_left:img_left+cw]", "\n", "sample", "[", "key", "]", "=", "seg_crop", "\n", "\n", "", "", "sample", "[", "'cropinfo'", "]", "=", "torch", ".", "tensor", "(", "(", "img_top", ",", "ch", ",", "img_left", ",", "cw", ",", "cont_top", ",", "cont_left", ")", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.RandomHSV.__init__": [[197, 201], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "h_r", ",", "s_r", ",", "v_r", ")", ":", "\n", "\t\t", "self", ".", "h_r", "=", "h_r", "\n", "self", ".", "s_r", "=", "s_r", "\n", "self", ".", "v_r", "=", "v_r", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.RandomHSV.__call__": [[202, 222], ["cv2.cvtColor", "hsv[].astype", "hsv[].astype", "hsv[].astype", "random.randint", "random.randint", "random.randint", "numpy.stack().astype", "cv2.cvtColor().astype", "numpy.stack", "cv2.cvtColor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "image", "=", "sample", "[", "'image'", "]", "\n", "hsv", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_RGB2HSV", ")", "\n", "h", "=", "hsv", "[", ":", ",", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "s", "=", "hsv", "[", ":", ",", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "v", "=", "hsv", "[", ":", ",", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "delta_h", "=", "random", ".", "randint", "(", "-", "self", ".", "h_r", ",", "self", ".", "h_r", ")", "\n", "delta_s", "=", "random", ".", "randint", "(", "-", "self", ".", "s_r", ",", "self", ".", "s_r", ")", "\n", "delta_v", "=", "random", ".", "randint", "(", "-", "self", ".", "v_r", ",", "self", ".", "v_r", ")", "\n", "h", "=", "(", "h", "+", "delta_h", ")", "%", "180", "\n", "s", "=", "s", "+", "delta_s", "\n", "s", "[", "s", ">", "255", "]", "=", "255", "\n", "s", "[", "s", "<", "0", "]", "=", "0", "\n", "v", "=", "v", "+", "delta_v", "\n", "v", "[", "v", ">", "255", "]", "=", "255", "\n", "v", "[", "v", "<", "0", "]", "=", "0", "\n", "hsv", "=", "np", ".", "stack", "(", "[", "h", ",", "s", ",", "v", "]", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "hsv", ",", "cv2", ".", "COLOR_HSV2RGB", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "sample", "[", "'image'", "]", "=", "image", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.RandomFlip.__init__": [[225, 227], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "threshold", ")", ":", "\n", "\t\t", "self", ".", "flip_t", "=", "threshold", "\n", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.RandomFlip.__call__": [[227, 256], ["random.random", "sample.keys", "numpy.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "numpy.flip", "numpy.flip", "numpy.flip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "Flip_sign", "=", "False", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "flip_t", ":", "\n", "\t\t\t", "Flip_sign", "=", "True", "\n", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t\t", "img", "=", "sample", "[", "key", "]", "\n", "img", "=", "np", ".", "flip", "(", "img", ",", "axis", "=", "1", ")", "#h,w,c", "\n", "sample", "[", "key", "]", "=", "img", "\n", "", "elif", "'prev_prediction'", "in", "key", ":", "\n", "\t\t\t\t\t", "prev_pred", "=", "sample", "[", "key", "]", "#1,c,h,w  tensor", "\n", "prev_pred", "=", "torch", ".", "flip", "(", "prev_pred", ",", "dims", "=", "[", "3", "]", ")", "# flip in the w dimension", "\n", "# img_crop = img[img_top:img_top+ch, img_left:img_left+cw]", "\n", "sample", "[", "key", "]", "=", "prev_pred", "\n", "", "elif", "'segmentation'", "==", "key", ":", "\n", "\t\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg", "=", "np", ".", "flip", "(", "seg", ",", "axis", "=", "1", ")", "\n", "sample", "[", "key", "]", "=", "seg", "\n", "", "elif", "'segmentation2'", "==", "key", "or", "'segmentation3'", "==", "key", "or", "'segmentationgt'", "==", "key", ":", "\n", "\t\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg", "=", "np", ".", "flip", "(", "seg", ",", "axis", "=", "1", ")", "\n", "sample", "[", "key", "]", "=", "seg", "\n", "", "elif", "'segmentation_pseudo'", "in", "key", ":", "\n", "\t\t\t\t\t", "seg_pseudo", "=", "sample", "[", "key", "]", "\n", "seg_pseudo", "=", "np", ".", "flip", "(", "seg_pseudo", ",", "axis", "=", "1", ")", "\n", "sample", "[", "key", "]", "=", "seg_pseudo", "\n", "", "", "", "sample", "[", "'flipinfo'", "]", "=", "Flip_sign", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.RandomScale.__init__": [[259, 262], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale_r", ",", "is_continuous", "=", "False", ")", ":", "\n", "\t\t", "self", ".", "scale_r", "=", "scale_r", "\n", "self", ".", "seg_interpolation", "=", "cv2", ".", "INTER_CUBIC", "if", "is_continuous", "else", "cv2", ".", "INTER_NEAREST", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.RandomScale.__call__": [[263, 296], ["sample.keys", "random.random", "cv2.resize", "torch.interpolate", "torch.interpolate", "cv2.resize", "cv2.resize", "cv2.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "row", ",", "col", ",", "_", "=", "sample", "[", "'image'", "]", ".", "shape", "\n", "rand_scale", "=", "random", ".", "random", "(", ")", "*", "(", "self", ".", "scale_r", "[", "1", "]", "-", "self", ".", "scale_r", "[", "0", "]", ")", "+", "self", ".", "scale_r", "[", "0", "]", "\n", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "img", "=", "sample", "[", "key", "]", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "None", ",", "fx", "=", "rand_scale", ",", "fy", "=", "rand_scale", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "sample", "[", "key", "]", "=", "img", "\n", "", "elif", "'prev_prediction'", "in", "key", ":", "\n", "\t\t\t\t", "prev_pred", "=", "sample", "[", "key", "]", "# 1,c,h,w", "\n", "# prev_pred = F.interpolate(prev_pred, scale_factor=rand_scale, mode='nearest',", "\n", "#                              recompute_scale_factor=True)", "\n", "prev_pred", "=", "F", ".", "interpolate", "(", "prev_pred", ",", "scale_factor", "=", "rand_scale", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ",", "\n", "recompute_scale_factor", "=", "False", ")", "\n", "\n", "# print(prev_pred.size())", "\n", "sample", "[", "key", "]", "=", "prev_pred", "\n", "", "elif", "'segmentation'", "==", "key", ":", "\n", "\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg", "=", "cv2", ".", "resize", "(", "seg", ",", "None", ",", "fx", "=", "rand_scale", ",", "fy", "=", "rand_scale", ",", "interpolation", "=", "self", ".", "seg_interpolation", ")", "\n", "sample", "[", "key", "]", "=", "seg", "\n", "", "elif", "'segmentation2'", "==", "key", "or", "'segmentation3'", "==", "key", "or", "'segmentationgt'", "==", "key", ":", "\n", "\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg", "=", "cv2", ".", "resize", "(", "seg", ",", "None", ",", "fx", "=", "rand_scale", ",", "fy", "=", "rand_scale", ",", "interpolation", "=", "self", ".", "seg_interpolation", ")", "\n", "sample", "[", "key", "]", "=", "seg", "\n", "", "elif", "'segmentation_pseudo'", "in", "key", ":", "\n", "\t\t\t\t", "seg_pseudo", "=", "sample", "[", "key", "]", "\n", "seg_pseudo", "=", "cv2", ".", "resize", "(", "seg_pseudo", ",", "None", ",", "fx", "=", "rand_scale", ",", "fy", "=", "rand_scale", ",", "interpolation", "=", "self", ".", "seg_interpolation", ")", "\n", "sample", "[", "key", "]", "=", "seg_pseudo", "\n", "", "", "sample", "[", "'scaleinfo'", "]", "=", "rand_scale", "\n", "# sample['scaleszie'] = np.array([img.shape[0],img.shape[1]])", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.RandomBlur.__init__": [[298, 300], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "scale", "=", "3.3", ")", ":", "\n", "\t\t", "self", ".", "scale", "=", "scale", "\n", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.RandomBlur.__call__": [[300, 313], ["random.random", "int", "sample.keys", "cv2.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "sigma", "=", "random", ".", "random", "(", ")", "\n", "ksize", "=", "int", "(", "3.3", "*", "sigma", ")", "\n", "ksize", "=", "ksize", "+", "1", "if", "ksize", "%", "2", "==", "0", "else", "ksize", "\n", "\n", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "img", "=", "sample", "[", "key", "]", "\n", "img", "=", "cv2", ".", "GaussianBlur", "(", "img", ",", "(", "ksize", ",", "ksize", ")", ",", "sigmaX", "=", "sigma", ",", "sigmaY", "=", "sigma", ",", "borderType", "=", "cv2", ".", "BORDER_REFLECT_101", ")", "\n", "sample", "[", "key", "]", "=", "img", "\n", "# sample['scaleszie'] = np.array([img.shape[0],img.shape[1]])", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.ImageNorm.__init__": [[320, 323], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", "=", "None", ",", "std", "=", "None", ")", ":", "\n", "\t\t", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.ImageNorm.__call__": [[323, 336], ["sample.keys", "sample[].astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "image", "=", "sample", "[", "key", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "self", ".", "mean", "is", "not", "None", "and", "self", ".", "std", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "image", "[", "...", ",", "0", "]", "=", "(", "image", "[", "...", ",", "0", "]", "/", "255", "-", "self", ".", "mean", "[", "0", "]", ")", "/", "self", ".", "std", "[", "0", "]", "\n", "image", "[", "...", ",", "1", "]", "=", "(", "image", "[", "...", ",", "1", "]", "/", "255", "-", "self", ".", "mean", "[", "1", "]", ")", "/", "self", ".", "std", "[", "1", "]", "\n", "image", "[", "...", ",", "2", "]", "=", "(", "image", "[", "...", ",", "2", "]", "/", "255", "-", "self", ".", "mean", "[", "2", "]", ")", "/", "self", ".", "std", "[", "2", "]", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "image", "/=", "255.0", "\n", "", "sample", "[", "key", "]", "=", "image", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.Multiscale.__init__": [[338, 340], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "rate_list", ")", ":", "\n", "\t\t", "self", ".", "rate_list", "=", "rate_list", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.Multiscale.__call__": [[341, 349], ["cv2.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "image", "=", "sample", "[", "'image'", "]", "\n", "row", ",", "col", ",", "_", "=", "image", ".", "shape", "\n", "image_multiscale", "=", "[", "]", "\n", "for", "rate", "in", "self", ".", "rate_list", ":", "\n", "\t\t\t", "rescaled_image", "=", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "rate", ",", "fy", "=", "rate", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "sample", "[", "'image_%f'", "%", "rate", "]", "=", "rescaled_image", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.ToTensor.__call__": [[354, 399], ["sample.keys", "sample[].astype", "image.transpose.transpose.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "edge.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "segmentation.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "segmentation.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "segmentation_pseudo.astype", "sample[].transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "sample[].transpose.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "sample[].astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mask.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "feature.astype"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "image", "=", "sample", "[", "key", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# swap color axis because", "\n", "# numpy image: H x W x C", "\n", "# torch image: C X H X W", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "sample", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "image", ")", "\n", "#sample[key] = torch.from_numpy(image.astype(np.float32)/128.0-1.0)", "\n", "", "elif", "'prev_prediction'", "in", "key", ":", "\n", "\t\t\t\t", "prev_pred", "=", "sample", "[", "key", "]", "# 1,c,h,w", "\n", "sample", "[", "key", "]", "=", "torch", ".", "squeeze", "(", "prev_pred", ",", "0", ")", "#c,h,w", "\n", "\n", "\n", "", "elif", "'edge'", "==", "key", ":", "\n", "\t\t\t\t", "edge", "=", "sample", "[", "'edge'", "]", "\n", "sample", "[", "'edge'", "]", "=", "torch", ".", "from_numpy", "(", "edge", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "sample", "[", "'edge'", "]", "=", "torch", ".", "unsqueeze", "(", "sample", "[", "'edge'", "]", ",", "0", ")", "\n", "", "elif", "'segmentation'", "==", "key", ":", "\n", "\t\t\t\t", "segmentation", "=", "sample", "[", "'segmentation'", "]", "\n", "sample", "[", "'segmentation'", "]", "=", "torch", ".", "from_numpy", "(", "segmentation", ".", "astype", "(", "np", ".", "long", ")", ")", "\n", "\n", "", "elif", "'segmentation2'", "==", "key", "or", "'segmentation3'", "==", "key", "or", "'segmentationgt'", "==", "key", ":", "\n", "# segmentation = sample['segmentation2']", "\n", "# sample['segmentation2'] = torch.from_numpy(segmentation.astype(np.long))", "\n", "\t\t\t\t", "segmentation", "=", "sample", "[", "key", "]", "\n", "sample", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "segmentation", ".", "astype", "(", "np", ".", "long", ")", ")", "\n", "\n", "", "elif", "'segmentation_pseudo'", "in", "key", ":", "\n", "\t\t\t\t", "segmentation_pseudo", "=", "sample", "[", "key", "]", "\n", "sample", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "segmentation_pseudo", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "elif", "'segmentation_onehot'", "==", "key", ":", "\n", "\t\t\t\t", "onehot", "=", "sample", "[", "'segmentation_onehot'", "]", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "sample", "[", "'segmentation_onehot'", "]", "=", "torch", ".", "from_numpy", "(", "onehot", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "elif", "'category'", "in", "key", ":", "\n", "\t\t\t\t", "sample", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "sample", "[", "key", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "elif", "'mask'", "==", "key", ":", "\n", "\t\t\t\t", "mask", "=", "sample", "[", "'mask'", "]", "\n", "sample", "[", "'mask'", "]", "=", "torch", ".", "from_numpy", "(", "mask", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "elif", "'feature'", "==", "key", ":", "\n", "\t\t\t\t", "feature", "=", "sample", "[", "'feature'", "]", "\n", "sample", "[", "'feature'", "]", "=", "torch", ".", "from_numpy", "(", "feature", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.AdjustBrightness.__init__": [[403, 405], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "bf", ")", ":", "\n", "\t\t", "self", ".", "bf", "=", "bf", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.AdjustBrightness.__call__": [[406, 414], ["sample.keys", "torchvision.adjust_brightness", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "\t\t", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "img", "=", "sample", "[", "key", "]", "\n", "img", "=", "tf", ".", "adjust_brightness", "(", "img", ",", "random", ".", "uniform", "(", "1", "-", "self", ".", "bf", ",", "1", "+", "self", ".", "bf", ")", ")", "\n", "sample", "[", "key", "]", "=", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.AdjustContrast.__init__": [[417, 419], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "cf", ")", ":", "\n", "\t\t", "self", ".", "cf", "=", "cf", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.AdjustContrast.__call__": [[420, 428], ["sample.keys", "torchvision.adjust_contrast", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "\t\t", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "img", "=", "sample", "[", "key", "]", "\n", "img", "=", "tf", ".", "adjust_contrast", "(", "img", ",", "random", ".", "uniform", "(", "1", "-", "self", ".", "cf", ",", "1", "+", "self", ".", "cf", ")", ")", "\n", "sample", "[", "key", "]", "=", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.AdjustSaturation.__init__": [[431, 433], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "saturation", ")", ":", "\n", "\t\t", "self", ".", "saturation", "=", "saturation", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.AdjustSaturation.__call__": [[435, 443], ["sample.keys", "torchvision.adjust_saturation", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "\t\t", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "img", "=", "sample", "[", "key", "]", "\n", "img", "=", "tf", ".", "adjust_saturation", "(", "img", ",", "random", ".", "uniform", "(", "1", "-", "self", ".", "saturation", ",", "1", "+", "self", ".", "saturation", ")", ")", "\n", "sample", "[", "key", "]", "=", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.AdjustHue.__init__": [[448, 450], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "hue", ")", ":", "\n", "\t\t", "self", ".", "hue", "=", "hue", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.AdjustHue.__call__": [[451, 459], ["sample.keys", "torchvision.adjust_hue", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "\t\t", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "img", "=", "sample", "[", "key", "]", "\n", "img", "=", "tf", ".", "adjust_hue", "(", "img", ",", "random", ".", "uniform", "(", "-", "self", ".", "hue", ",", "self", ".", "hue", ")", ")", "\n", "sample", "[", "key", "]", "=", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.AdjustGamma.__init__": [[463, 465], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "gamma", ")", ":", "\n", "\t\t", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transformmultiGTauginfo.AdjustGamma.__call__": [[467, 475], ["sample.keys", "torchvision.adjust_gamma", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "\t\t", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "img", "=", "sample", "[", "key", "]", "\n", "img", "=", "tf", ".", "adjust_gamma", "(", "img", ",", "random", ".", "uniform", "(", "1", ",", "1", "+", "self", ".", "gamma", ")", ")", "\n", "sample", "[", "key", "]", "=", "img", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transform.RandomCrop.__init__": [[16, 23], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "\t\t", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "\t\t\t", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "\t\t\t", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transform.RandomCrop.__call__": [[24, 71], ["min", "min", "sample.keys", "random.randrange", "random.randrange", "random.randrange", "random.randrange", "numpy.zeros", "numpy.ones", "numpy.ones"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "\t\t", "h", ",", "w", "=", "sample", "[", "'image'", "]", ".", "shape", "[", ":", "2", "]", "\n", "ch", "=", "min", "(", "h", ",", "self", ".", "output_size", "[", "0", "]", ")", "\n", "cw", "=", "min", "(", "w", ",", "self", ".", "output_size", "[", "1", "]", ")", "\n", "\n", "h_space", "=", "h", "-", "self", ".", "output_size", "[", "0", "]", "\n", "w_space", "=", "w", "-", "self", ".", "output_size", "[", "1", "]", "\n", "\n", "if", "w_space", ">", "0", ":", "\n", "\t\t\t", "cont_left", "=", "0", "\n", "img_left", "=", "random", ".", "randrange", "(", "w_space", "+", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "cont_left", "=", "random", ".", "randrange", "(", "-", "w_space", "+", "1", ")", "\n", "img_left", "=", "0", "\n", "\n", "", "if", "h_space", ">", "0", ":", "\n", "\t\t\t", "cont_top", "=", "0", "\n", "img_top", "=", "random", ".", "randrange", "(", "h_space", "+", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "cont_top", "=", "random", ".", "randrange", "(", "-", "h_space", "+", "1", ")", "\n", "img_top", "=", "0", "\n", "\n", "", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "img", "=", "sample", "[", "key", "]", "\n", "img_crop", "=", "np", ".", "zeros", "(", "(", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "img_crop", "[", "cont_top", ":", "cont_top", "+", "ch", ",", "cont_left", ":", "cont_left", "+", "cw", "]", "=", "img", "[", "img_top", ":", "img_top", "+", "ch", ",", "img_left", ":", "img_left", "+", "cw", "]", "\n", "#img_crop = img[img_top:img_top+ch, img_left:img_left+cw]", "\n", "sample", "[", "key", "]", "=", "img_crop", "\n", "", "elif", "'segmentation'", "==", "key", ":", "\n", "\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg_crop", "=", "np", ".", "ones", "(", "(", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", ",", "np", ".", "float32", ")", "*", "255", "\n", "seg_crop", "[", "cont_top", ":", "cont_top", "+", "ch", ",", "cont_left", ":", "cont_left", "+", "cw", "]", "=", "seg", "[", "img_top", ":", "img_top", "+", "ch", ",", "img_left", ":", "img_left", "+", "cw", "]", "\n", "#seg_crop = seg[img_top:img_top+ch, img_left:img_left+cw]", "\n", "sample", "[", "key", "]", "=", "seg_crop", "\n", "", "elif", "'segmentation_pseudo'", "in", "key", ":", "\n", "\t\t\t\t", "seg_pseudo", "=", "sample", "[", "key", "]", "\n", "seg_crop", "=", "np", ".", "ones", "(", "(", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", ",", "np", ".", "float32", ")", "*", "255", "\n", "seg_crop", "[", "cont_top", ":", "cont_top", "+", "ch", ",", "cont_left", ":", "cont_left", "+", "cw", "]", "=", "seg_pseudo", "[", "img_top", ":", "img_top", "+", "ch", ",", "img_left", ":", "img_left", "+", "cw", "]", "\n", "#seg_crop = seg_pseudo[img_top:img_top+ch, img_left:img_left+cw]", "\n", "sample", "[", "key", "]", "=", "seg_crop", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transform.RandomHSV.__init__": [[74, 78], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "h_r", ",", "s_r", ",", "v_r", ")", ":", "\n", "\t\t", "self", ".", "h_r", "=", "h_r", "\n", "self", ".", "s_r", "=", "s_r", "\n", "self", ".", "v_r", "=", "v_r", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transform.RandomHSV.__call__": [[79, 99], ["cv2.cvtColor", "hsv[].astype", "hsv[].astype", "hsv[].astype", "random.randint", "random.randint", "random.randint", "numpy.stack().astype", "cv2.cvtColor().astype", "numpy.stack", "cv2.cvtColor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "image", "=", "sample", "[", "'image'", "]", "\n", "hsv", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_RGB2HSV", ")", "\n", "h", "=", "hsv", "[", ":", ",", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "s", "=", "hsv", "[", ":", ",", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "v", "=", "hsv", "[", ":", ",", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "delta_h", "=", "random", ".", "randint", "(", "-", "self", ".", "h_r", ",", "self", ".", "h_r", ")", "\n", "delta_s", "=", "random", ".", "randint", "(", "-", "self", ".", "s_r", ",", "self", ".", "s_r", ")", "\n", "delta_v", "=", "random", ".", "randint", "(", "-", "self", ".", "v_r", ",", "self", ".", "v_r", ")", "\n", "h", "=", "(", "h", "+", "delta_h", ")", "%", "180", "\n", "s", "=", "s", "+", "delta_s", "\n", "s", "[", "s", ">", "255", "]", "=", "255", "\n", "s", "[", "s", "<", "0", "]", "=", "0", "\n", "v", "=", "v", "+", "delta_v", "\n", "v", "[", "v", ">", "255", "]", "=", "255", "\n", "v", "[", "v", "<", "0", "]", "=", "0", "\n", "hsv", "=", "np", ".", "stack", "(", "[", "h", ",", "s", ",", "v", "]", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "hsv", ",", "cv2", ".", "COLOR_HSV2RGB", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "sample", "[", "'image'", "]", "=", "image", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transform.RandomFlip.__init__": [[102, 104], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "threshold", ")", ":", "\n", "\t\t", "self", ".", "flip_t", "=", "threshold", "\n", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transform.RandomFlip.__call__": [[104, 121], ["random.random", "sample.keys", "numpy.flip", "numpy.flip", "numpy.flip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "if", "random", ".", "random", "(", ")", "<", "self", ".", "flip_t", ":", "\n", "\t\t\t", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t\t", "img", "=", "sample", "[", "key", "]", "\n", "img", "=", "np", ".", "flip", "(", "img", ",", "axis", "=", "1", ")", "\n", "sample", "[", "key", "]", "=", "img", "\n", "", "elif", "'segmentation'", "==", "key", ":", "\n", "\t\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg", "=", "np", ".", "flip", "(", "seg", ",", "axis", "=", "1", ")", "\n", "sample", "[", "key", "]", "=", "seg", "\n", "", "elif", "'segmentation_pseudo'", "in", "key", ":", "\n", "\t\t\t\t\t", "seg_pseudo", "=", "sample", "[", "key", "]", "\n", "seg_pseudo", "=", "np", ".", "flip", "(", "seg_pseudo", ",", "axis", "=", "1", ")", "\n", "sample", "[", "key", "]", "=", "seg_pseudo", "\n", "", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transform.RandomScale.__init__": [[124, 127], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale_r", ",", "is_continuous", "=", "False", ")", ":", "\n", "\t\t", "self", ".", "scale_r", "=", "scale_r", "\n", "self", ".", "seg_interpolation", "=", "cv2", ".", "INTER_CUBIC", "if", "is_continuous", "else", "cv2", ".", "INTER_NEAREST", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transform.RandomScale.__call__": [[128, 146], ["sample.keys", "random.random", "cv2.resize", "cv2.resize", "cv2.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "row", ",", "col", ",", "_", "=", "sample", "[", "'image'", "]", ".", "shape", "\n", "rand_scale", "=", "random", ".", "random", "(", ")", "*", "(", "self", ".", "scale_r", "[", "1", "]", "-", "self", ".", "scale_r", "[", "0", "]", ")", "+", "self", ".", "scale_r", "[", "0", "]", "\n", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "img", "=", "sample", "[", "key", "]", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "None", ",", "fx", "=", "rand_scale", ",", "fy", "=", "rand_scale", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "sample", "[", "key", "]", "=", "img", "\n", "", "elif", "'segmentation'", "==", "key", ":", "\n", "\t\t\t\t", "seg", "=", "sample", "[", "key", "]", "\n", "seg", "=", "cv2", ".", "resize", "(", "seg", ",", "None", ",", "fx", "=", "rand_scale", ",", "fy", "=", "rand_scale", ",", "interpolation", "=", "self", ".", "seg_interpolation", ")", "\n", "sample", "[", "key", "]", "=", "seg", "\n", "", "elif", "'segmentation_pseudo'", "in", "key", ":", "\n", "\t\t\t\t", "seg_pseudo", "=", "sample", "[", "key", "]", "\n", "seg_pseudo", "=", "cv2", ".", "resize", "(", "seg_pseudo", ",", "None", ",", "fx", "=", "rand_scale", ",", "fy", "=", "rand_scale", ",", "interpolation", "=", "self", ".", "seg_interpolation", ")", "\n", "sample", "[", "key", "]", "=", "seg_pseudo", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transform.ImageNorm.__init__": [[149, 152], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", "=", "None", ",", "std", "=", "None", ")", ":", "\n", "\t\t", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transform.ImageNorm.__call__": [[152, 165], ["sample.keys", "sample[].astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "image", "=", "sample", "[", "key", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "self", ".", "mean", "is", "not", "None", "and", "self", ".", "std", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "image", "[", "...", ",", "0", "]", "=", "(", "image", "[", "...", ",", "0", "]", "/", "255", "-", "self", ".", "mean", "[", "0", "]", ")", "/", "self", ".", "std", "[", "0", "]", "\n", "image", "[", "...", ",", "1", "]", "=", "(", "image", "[", "...", ",", "1", "]", "/", "255", "-", "self", ".", "mean", "[", "1", "]", ")", "/", "self", ".", "std", "[", "1", "]", "\n", "image", "[", "...", ",", "2", "]", "=", "(", "image", "[", "...", ",", "2", "]", "/", "255", "-", "self", ".", "mean", "[", "2", "]", ")", "/", "self", ".", "std", "[", "2", "]", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "image", "/=", "255.0", "\n", "", "sample", "[", "key", "]", "=", "image", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transform.Multiscale.__init__": [[167, 169], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "rate_list", ")", ":", "\n", "\t\t", "self", ".", "rate_list", "=", "rate_list", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transform.Multiscale.__call__": [[170, 178], ["cv2.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "image", "=", "sample", "[", "'image'", "]", "\n", "row", ",", "col", ",", "_", "=", "image", ".", "shape", "\n", "image_multiscale", "=", "[", "]", "\n", "for", "rate", "in", "self", ".", "rate_list", ":", "\n", "\t\t\t", "rescaled_image", "=", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "rate", ",", "fy", "=", "rate", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "sample", "[", "'image_%f'", "%", "rate", "]", "=", "rescaled_image", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.transform.ToTensor.__call__": [[183, 216], ["sample.keys", "sample[].astype", "image.transpose.transpose.transpose", "torch.from_numpy", "torch.from_numpy", "torch.unsqueeze", "edge.astype", "torch.from_numpy", "segmentation.astype", "torch.from_numpy", "segmentation_pseudo.astype", "sample[].transpose", "torch.from_numpy", "sample[].transpose.astype", "torch.from_numpy", "sample[].astype", "torch.from_numpy", "mask.astype", "torch.from_numpy", "feature.astype"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\t\t", "key_list", "=", "sample", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "\t\t\t", "if", "'image'", "in", "key", ":", "\n", "\t\t\t\t", "image", "=", "sample", "[", "key", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# swap color axis because", "\n", "# numpy image: H x W x C", "\n", "# torch image: C X H X W", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "sample", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "image", ")", "\n", "#sample[key] = torch.from_numpy(image.astype(np.float32)/128.0-1.0)", "\n", "", "elif", "'edge'", "==", "key", ":", "\n", "\t\t\t\t", "edge", "=", "sample", "[", "'edge'", "]", "\n", "sample", "[", "'edge'", "]", "=", "torch", ".", "from_numpy", "(", "edge", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "sample", "[", "'edge'", "]", "=", "torch", ".", "unsqueeze", "(", "sample", "[", "'edge'", "]", ",", "0", ")", "\n", "", "elif", "'segmentation'", "==", "key", ":", "\n", "\t\t\t\t", "segmentation", "=", "sample", "[", "'segmentation'", "]", "\n", "sample", "[", "'segmentation'", "]", "=", "torch", ".", "from_numpy", "(", "segmentation", ".", "astype", "(", "np", ".", "long", ")", ")", "\n", "", "elif", "'segmentation_pseudo'", "in", "key", ":", "\n", "\t\t\t\t", "segmentation_pseudo", "=", "sample", "[", "key", "]", "\n", "sample", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "segmentation_pseudo", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "elif", "'segmentation_onehot'", "==", "key", ":", "\n", "\t\t\t\t", "onehot", "=", "sample", "[", "'segmentation_onehot'", "]", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "sample", "[", "'segmentation_onehot'", "]", "=", "torch", ".", "from_numpy", "(", "onehot", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "elif", "'category'", "in", "key", ":", "\n", "\t\t\t\t", "sample", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "sample", "[", "key", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "elif", "'mask'", "==", "key", ":", "\n", "\t\t\t\t", "mask", "=", "sample", "[", "'mask'", "]", "\n", "sample", "[", "'mask'", "]", "=", "torch", ".", "from_numpy", "(", "mask", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "elif", "'feature'", "==", "key", ":", "\n", "\t\t\t\t", "feature", "=", "sample", "[", "'feature'", "]", "\n", "sample", "[", "'feature'", "]", "=", "torch", ".", "from_numpy", "(", "feature", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.__init__": [[7, 13], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "self", ".", "val", "=", "None", "\n", "self", ".", "avg", "=", "None", "\n", "self", ".", "sum", "=", "None", "\n", "self", ".", "count", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.initialize": [[14, 20], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "val", ",", "weight", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "avg", "=", "val", "\n", "self", ".", "sum", "=", "val", "*", "weight", "\n", "self", ".", "count", "=", "weight", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.update": [[21, 26], ["metric.AverageMeter.initialize", "metric.AverageMeter.add"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.initialize", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.add"], ["", "def", "update", "(", "self", ",", "val", ",", "weight", "=", "1", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", "val", ",", "weight", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add", "(", "val", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.add": [[27, 32], ["None"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "val", ",", "weight", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "weight", "\n", "self", ".", "count", "+=", "weight", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.value": [[33, 35], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.average": [[36, 38], ["None"], "methods", ["None"], ["", "def", "average", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.unique": [[40, 81], ["numpy.asanyarray().flatten", "numpy.concatenate", "np.asanyarray().flatten.argsort", "np.asanyarray().flatten.sort", "numpy.asanyarray", "numpy.empty", "numpy.concatenate", "numpy.cumsum", "numpy.diff", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.nonzero"], "function", ["None"], ["", "", "def", "unique", "(", "ar", ",", "return_index", "=", "False", ",", "return_inverse", "=", "False", ",", "return_counts", "=", "False", ")", ":", "\n", "    ", "ar", "=", "np", ".", "asanyarray", "(", "ar", ")", ".", "flatten", "(", ")", "\n", "\n", "optional_indices", "=", "return_index", "or", "return_inverse", "\n", "optional_returns", "=", "optional_indices", "or", "return_counts", "\n", "\n", "if", "ar", ".", "size", "==", "0", ":", "\n", "        ", "if", "not", "optional_returns", ":", "\n", "            ", "ret", "=", "ar", "\n", "", "else", ":", "\n", "            ", "ret", "=", "(", "ar", ",", ")", "\n", "if", "return_index", ":", "\n", "                ", "ret", "+=", "(", "np", ".", "empty", "(", "0", ",", "np", ".", "bool", ")", ",", ")", "\n", "", "if", "return_inverse", ":", "\n", "                ", "ret", "+=", "(", "np", ".", "empty", "(", "0", ",", "np", ".", "bool", ")", ",", ")", "\n", "", "if", "return_counts", ":", "\n", "                ", "ret", "+=", "(", "np", ".", "empty", "(", "0", ",", "np", ".", "intp", ")", ",", ")", "\n", "", "", "return", "ret", "\n", "", "if", "optional_indices", ":", "\n", "        ", "perm", "=", "ar", ".", "argsort", "(", "kind", "=", "'mergesort'", "if", "return_index", "else", "'quicksort'", ")", "\n", "aux", "=", "ar", "[", "perm", "]", "\n", "", "else", ":", "\n", "        ", "ar", ".", "sort", "(", ")", "\n", "aux", "=", "ar", "\n", "", "flag", "=", "np", ".", "concatenate", "(", "(", "[", "True", "]", ",", "aux", "[", "1", ":", "]", "!=", "aux", "[", ":", "-", "1", "]", ")", ")", "\n", "\n", "if", "not", "optional_returns", ":", "\n", "        ", "ret", "=", "aux", "[", "flag", "]", "\n", "", "else", ":", "\n", "        ", "ret", "=", "(", "aux", "[", "flag", "]", ",", ")", "\n", "if", "return_index", ":", "\n", "            ", "ret", "+=", "(", "perm", "[", "flag", "]", ",", ")", "\n", "", "if", "return_inverse", ":", "\n", "            ", "iflag", "=", "np", ".", "cumsum", "(", "flag", ")", "-", "1", "\n", "inv_idx", "=", "np", ".", "empty", "(", "ar", ".", "shape", ",", "dtype", "=", "np", ".", "intp", ")", "\n", "inv_idx", "[", "perm", "]", "=", "iflag", "\n", "ret", "+=", "(", "inv_idx", ",", ")", "\n", "", "if", "return_counts", ":", "\n", "            ", "idx", "=", "np", ".", "concatenate", "(", "np", ".", "nonzero", "(", "flag", ")", "+", "(", "[", "ar", ".", "size", "]", ",", ")", ")", "\n", "ret", "+=", "(", "np", ".", "diff", "(", "idx", ")", ",", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.colorEncode": [[83, 98], ["labelmap.astype.astype", "numpy.zeros", "metric.unique", "numpy.tile"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.unique"], ["", "def", "colorEncode", "(", "labelmap", ",", "colors", ",", "mode", "=", "'BGR'", ")", ":", "\n", "    ", "labelmap", "=", "labelmap", ".", "astype", "(", "'int'", ")", "\n", "labelmap_rgb", "=", "np", ".", "zeros", "(", "(", "labelmap", ".", "shape", "[", "0", "]", ",", "labelmap", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "label", "in", "unique", "(", "labelmap", ")", ":", "\n", "        ", "if", "label", "<", "0", ":", "\n", "            ", "continue", "\n", "", "labelmap_rgb", "+=", "(", "labelmap", "==", "label", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "np", ".", "tile", "(", "colors", "[", "label", "]", ",", "\n", "(", "labelmap", ".", "shape", "[", "0", "]", ",", "labelmap", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "\n", "", "if", "mode", "==", "'BGR'", ":", "\n", "        ", "return", "labelmap_rgb", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "return", "labelmap_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.accuracy": [[100, 106], ["valid.sum", "float"], "function", ["None"], ["", "", "def", "accuracy", "(", "preds", ",", "label", ")", ":", "\n", "    ", "valid", "=", "(", "label", ">=", "0", ")", "\n", "acc_sum", "=", "(", "valid", "*", "(", "preds", "==", "label", ")", ")", ".", "sum", "(", ")", "\n", "valid_sum", "=", "valid", ".", "sum", "(", ")", "\n", "acc", "=", "float", "(", "acc_sum", ")", "/", "(", "valid_sum", "+", "1e-10", ")", "\n", "return", "acc", ",", "valid_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.intersectionAndUnion": [[108, 129], ["numpy.asarray().copy", "numpy.asarray().copy", "numpy.histogram", "numpy.histogram", "numpy.histogram", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "intersectionAndUnion", "(", "imPred", ",", "imLab", ",", "numClass", ")", ":", "\n", "    ", "imPred", "=", "np", ".", "asarray", "(", "imPred", ")", ".", "copy", "(", ")", "\n", "imLab", "=", "np", ".", "asarray", "(", "imLab", ")", ".", "copy", "(", ")", "\n", "\n", "imPred", "+=", "1", "\n", "imLab", "+=", "1", "\n", "# Remove classes from unlabeled pixels in gt image.", "\n", "# We should not penalize detections in unlabeled portions of the image.", "\n", "imPred", "=", "imPred", "*", "(", "imLab", ">", "0", ")", "\n", "\n", "# Compute area intersection:", "\n", "intersection", "=", "imPred", "*", "(", "imPred", "==", "imLab", ")", "\n", "(", "area_intersection", ",", "_", ")", "=", "np", ".", "histogram", "(", "\n", "intersection", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", ")", ")", "\n", "\n", "# Compute area union:", "\n", "(", "area_pred", ",", "_", ")", "=", "np", ".", "histogram", "(", "imPred", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", ")", ")", "\n", "(", "area_lab", ",", "_", ")", "=", "np", ".", "histogram", "(", "imLab", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", ")", ")", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_intersection", "\n", "\n", "return", "(", "area_intersection", ",", "area_union", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.process_range": [[135, 140], ["map", "map", "range"], "function", ["None"], ["", "def", "process_range", "(", "xpu", ",", "inp", ")", ":", "\n", "    ", "start", ",", "end", "=", "map", "(", "int", ",", "inp", ")", "\n", "if", "start", ">", "end", ":", "\n", "        ", "end", ",", "start", "=", "start", ",", "end", "\n", "", "return", "map", "(", "lambda", "x", ":", "'{}{}'", ".", "format", "(", "xpu", ",", "x", ")", ",", "range", "(", "start", ",", "end", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.parse_devices": [[152, 173], ["input_devices.split", "regex.match", "metric.NotSupportedCliException", "d.lower().strip", "func", "regex.match.groups", "d.lower", "ret.append"], "function", ["None"], ["def", "parse_devices", "(", "input_devices", ")", ":", "\n", "\n", "    ", "\"\"\"Parse user's devices input str to standard format.\n    e.g. [gpu0, gpu1, ...]\n\n    \"\"\"", "\n", "ret", "=", "[", "]", "\n", "for", "d", "in", "input_devices", ".", "split", "(", "','", ")", ":", "\n", "        ", "for", "regex", ",", "func", "in", "REGEX", ":", "\n", "            ", "m", "=", "regex", ".", "match", "(", "d", ".", "lower", "(", ")", ".", "strip", "(", ")", ")", "\n", "if", "m", ":", "\n", "                ", "tmp", "=", "func", "(", "m", ".", "groups", "(", ")", ")", "\n", "# prevent duplicate", "\n", "for", "x", "in", "tmp", ":", "\n", "                    ", "if", "x", "not", "in", "ret", ":", "\n", "                        ", "ret", ".", "append", "(", "x", ")", "\n", "", "", "break", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotSupportedCliException", "(", "\n", "'Can not recognize device: \"%s\"'", "%", "d", ")", "\n", "", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.net.deeplabv1_wo_interp.deeplabv1_wo_interp.__init__": [[15, 31], ["torch.Module.__init__", "net.backbone.build_backbone", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "batchnorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "batchnorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "deeplabv1_wo_interp.deeplabv1_wo_interp.__initial__"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__", "home.repos.pwc.inspect_result.kangningthu_adele.backbone.builder.build_backbone", "home.repos.pwc.inspect_result.kangningthu_adele.net.deeplabv1_wo_interp.deeplabv1_wo_interp.__initial__"], ["\t", "def", "__init__", "(", "self", ",", "cfg", ",", "batchnorm", "=", "nn", ".", "BatchNorm2d", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", "deeplabv1_wo_interp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "batchnorm", "=", "batchnorm", "\n", "#self.backbone = build_backbone(self.cfg.MODEL_BACKBONE, os=self.cfg.MODEL_OUTPUT_STRIDE)", "\n", "self", ".", "backbone", "=", "build_backbone", "(", "self", ".", "cfg", ".", "MODEL_BACKBONE", ",", "pretrained", "=", "cfg", ".", "MODEL_BACKBONE_PRETRAIN", ",", "norm_layer", "=", "self", ".", "batchnorm", ",", "**", "kwargs", ")", "\n", "self", ".", "conv_fov", "=", "nn", ".", "Conv2d", "(", "self", ".", "backbone", ".", "OUTPUT_DIM", ",", "512", ",", "3", ",", "1", ",", "padding", "=", "12", ",", "dilation", "=", "12", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_fov", "=", "batchnorm", "(", "512", ",", "momentum", "=", "cfg", ".", "TRAIN_BN_MOM", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv_fov2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "1", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_fov2", "=", "batchnorm", "(", "512", ",", "momentum", "=", "cfg", ".", "TRAIN_BN_MOM", ",", "affine", "=", "True", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "cls_conv", "=", "nn", ".", "Conv2d", "(", "512", ",", "cfg", ".", "MODEL_NUM_CLASSES", ",", "1", ",", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "__initial__", "(", ")", "\n", "self", ".", "not_training", "=", "[", "]", "#[self.backbone.conv1a, self.backbone.b2, self.backbone.b2_1, self.backbone.b2_2]", "\n", "#self.from_scratch_layers = [self.cls_conv]", "\n", "self", ".", "from_scratch_layers", "=", "[", "self", ".", "conv_fov", ",", "self", ".", "conv_fov2", ",", "self", ".", "cls_conv", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.net.deeplabv1_wo_interp.deeplabv1_wo_interp.__initial__": [[32, 40], ["deeplabv1_wo_interp.deeplabv1_wo_interp.modules", "deeplabv1_wo_interp.deeplabv1_wo_interp.backbone.modules", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "__initial__", "(", "self", ")", ":", "\n", "\t\t", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\t\t\t", "if", "m", "not", "in", "self", ".", "backbone", ".", "modules", "(", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", ":", "\n", "\t\t\t\t\t", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "self", ".", "batchnorm", ")", ":", "\n", "\t\t\t\t\t", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "#self.backbone = build_backbone(self.cfg.MODEL_BACKBONE, pretrained=self.cfg.MODEL_BACKBONE_PRETRAIN)", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.net.deeplabv1_wo_interp.deeplabv1_wo_interp.forward": [[42, 55], ["x.size", "deeplabv1_wo_interp.deeplabv1_wo_interp.conv_fov", "deeplabv1_wo_interp.deeplabv1_wo_interp.bn_fov", "torch.relu", "torch.relu", "torch.relu", "deeplabv1_wo_interp.deeplabv1_wo_interp.conv_fov2", "deeplabv1_wo_interp.deeplabv1_wo_interp.bn_fov2", "torch.relu", "torch.relu", "torch.relu", "deeplabv1_wo_interp.deeplabv1_wo_interp.dropout1", "deeplabv1_wo_interp.deeplabv1_wo_interp.cls_conv", "deeplabv1_wo_interp.deeplabv1_wo_interp.backbone"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x_bottom", "=", "self", ".", "backbone", "(", "x", ")", "[", "-", "1", "]", "\n", "feature", "=", "self", ".", "conv_fov", "(", "x_bottom", ")", "\n", "feature", "=", "self", ".", "bn_fov", "(", "feature", ")", "\n", "feature", "=", "F", ".", "relu", "(", "feature", ",", "inplace", "=", "True", ")", "\n", "feature", "=", "self", ".", "conv_fov2", "(", "feature", ")", "\n", "feature", "=", "self", ".", "bn_fov2", "(", "feature", ")", "\n", "feature", "=", "F", ".", "relu", "(", "feature", ",", "inplace", "=", "True", ")", "\n", "feature", "=", "self", ".", "dropout1", "(", "feature", ")", "\n", "result", "=", "self", ".", "cls_conv", "(", "feature", ")", "\n", "# result = F.interpolate(result,(h,w),mode='bilinear', align_corners=True)", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.net.deeplabv1_wo_interp.deeplabv1_wo_interp.get_parameter_groups": [[56, 73], ["deeplabv1_wo_interp.deeplabv1_wo_interp.modules", "isinstance", "groups[].append", "groups[].append", "groups[].append", "groups[].append"], "methods", ["None"], ["", "def", "get_parameter_groups", "(", "self", ")", ":", "\n", "\t\t", "groups", "=", "(", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\t\t\t\t", "if", "m", ".", "weight", ".", "requires_grad", ":", "\n", "\t\t\t\t\t", "if", "m", "in", "self", ".", "from_scratch_layers", ":", "\n", "\t\t\t\t\t\t", "groups", "[", "2", "]", ".", "append", "(", "m", ".", "weight", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "groups", "[", "0", "]", ".", "append", "(", "m", ".", "weight", ")", "\n", "\n", "", "", "if", "m", ".", "bias", "is", "not", "None", "and", "m", ".", "bias", ".", "requires_grad", ":", "\n", "\n", "\t\t\t\t\t", "if", "m", "in", "self", ".", "from_scratch_layers", ":", "\n", "\t\t\t\t\t\t", "groups", "[", "3", "]", ".", "append", "(", "m", ".", "bias", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "groups", "[", "1", "]", ".", "append", "(", "m", ".", "bias", ")", "\n", "", "", "", "", "return", "groups", "", "", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.net.generateNet.generate_net": [[14, 17], ["utils.registry.NETS.get"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.FutureResult.get"], ["def", "generate_net", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "\t", "net", "=", "NETS", ".", "get", "(", "cfg", ".", "MODEL_NAME", ")", "(", "cfg", ",", "**", "kwargs", ")", "\n", "return", "net", "\n", "#def generate_net(cfg):", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.operators.ASPP.ASPP.__init__": [[13, 61], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "batchnorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "batchnorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "batchnorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "batchnorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "batchnorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "batchnorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "batchnorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "batchnorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "rate", "=", "[", "1", ",", "6", ",", "12", ",", "18", "]", ",", "bn_mom", "=", "0.1", ",", "has_global", "=", "True", ",", "batchnorm", "=", "SynchronizedBatchNorm2d", ")", ":", "\n", "\t\t", "super", "(", "ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_in", "=", "dim_in", "\n", "self", ".", "dim_out", "=", "dim_out", "\n", "self", ".", "has_global", "=", "has_global", "\n", "if", "rate", "[", "0", "]", "==", "0", ":", "\n", "\t\t\t", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "1", ",", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "batchnorm", "(", "dim_out", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "3", ",", "1", ",", "padding", "=", "rate", "[", "0", "]", ",", "dilation", "=", "rate", "[", "0", "]", ",", "bias", "=", "False", ")", ",", "\n", "batchnorm", "(", "dim_out", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "3", ",", "1", ",", "padding", "=", "rate", "[", "1", "]", ",", "dilation", "=", "rate", "[", "1", "]", ",", "bias", "=", "False", ")", ",", "\n", "batchnorm", "(", "dim_out", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "branch3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "3", ",", "1", ",", "padding", "=", "rate", "[", "2", "]", ",", "dilation", "=", "rate", "[", "2", "]", ",", "bias", "=", "False", ")", ",", "\n", "batchnorm", "(", "dim_out", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "branch4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "3", ",", "1", ",", "padding", "=", "rate", "[", "3", "]", ",", "dilation", "=", "rate", "[", "3", "]", ",", "bias", "=", "False", ")", ",", "\n", "batchnorm", "(", "dim_out", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "if", "self", ".", "has_global", ":", "\n", "\t\t\t", "self", ".", "branch5_conv", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "branch5_bn", "=", "batchnorm", "(", "dim_out", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", "\n", "self", ".", "branch5_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv_cat", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "dim_out", "*", "5", ",", "dim_out", ",", "1", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "batchnorm", "(", "dim_out", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", "\n", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv_cat", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "dim_out", "*", "4", ",", "dim_out", ",", "1", ",", "1", ",", "padding", "=", "0", ")", ",", "\n", "batchnorm", "(", "dim_out", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.operators.ASPP.ASPP.forward": [[62, 82], ["x.size", "ASPP.ASPP.branch1", "ASPP.ASPP.branch2", "ASPP.ASPP.branch3", "ASPP.ASPP.branch4", "ASPP.ASPP.conv_cat", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "ASPP.ASPP.branch5_conv", "ASPP.ASPP.branch5_bn", "ASPP.ASPP.branch5_relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "result", "=", "None", "\n", "[", "b", ",", "c", ",", "row", ",", "col", "]", "=", "x", ".", "size", "(", ")", "\n", "conv1x1", "=", "self", ".", "branch1", "(", "x", ")", "\n", "conv3x3_1", "=", "self", ".", "branch2", "(", "x", ")", "\n", "conv3x3_2", "=", "self", ".", "branch3", "(", "x", ")", "\n", "conv3x3_3", "=", "self", ".", "branch4", "(", "x", ")", "\n", "if", "self", ".", "has_global", ":", "\n", "\t\t\t", "global_feature", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "global_feature", "=", "self", ".", "branch5_conv", "(", "global_feature", ")", "\n", "global_feature", "=", "self", ".", "branch5_bn", "(", "global_feature", ")", "\n", "global_feature", "=", "self", ".", "branch5_relu", "(", "global_feature", ")", "\n", "global_feature", "=", "F", ".", "interpolate", "(", "global_feature", ",", "(", "row", ",", "col", ")", ",", "None", ",", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "feature_cat", "=", "torch", ".", "cat", "(", "[", "conv1x1", ",", "conv3x3_1", ",", "conv3x3_2", ",", "conv3x3_3", ",", "global_feature", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "feature_cat", "=", "torch", ".", "cat", "(", "[", "conv1x1", ",", "conv3x3_1", ",", "conv3x3_2", ",", "conv3x3_3", "]", ",", "dim", "=", "1", ")", "\n", "", "result", "=", "self", ".", "conv_cat", "(", "feature_cat", ")", "\n", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.operators.PPM.PPM.__init__": [[10, 20], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "PPM.PPM._make_stage", "len"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__", "home.repos.pwc.inspect_result.kangningthu_adele.operators.PPM.PPM._make_stage"], ["def", "__init__", "(", "self", ",", "features", ",", "out_features", "=", "512", ",", "sizes", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t", "super", "(", "PPM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "stages", "=", "[", "]", "\n", "self", ".", "stages", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_stage", "(", "features", ",", "out_features", ",", "size", ",", "norm_layer", ")", "for", "size", "in", "sizes", "]", ")", "\n", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "features", "+", "len", "(", "sizes", ")", "*", "out_features", ",", "out_features", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_features", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.operators.PPM.PPM._make_stage": [[22, 27], ["torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["None"], ["", "def", "_make_stage", "(", "self", ",", "features", ",", "out_features", ",", "size", ",", "norm_layer", ")", ":", "\n", "\t\t", "prior", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "size", ",", "size", ")", ")", "\n", "conv", "=", "nn", ".", "Conv2d", "(", "features", ",", "out_features", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "bn", "=", "norm_layer", "(", "out_features", ")", "\n", "return", "nn", ".", "Sequential", "(", "prior", ",", "conv", ",", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.operators.PPM.PPM.forward": [[28, 33], ["PPM.PPM.bottleneck", "feats.size", "feats.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.upsample", "torch.upsample", "torch.upsample", "stage"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "\t\t", "h", ",", "w", "=", "feats", ".", "size", "(", "2", ")", ",", "feats", ".", "size", "(", "3", ")", "\n", "priors", "=", "[", "F", ".", "upsample", "(", "input", "=", "stage", "(", "feats", ")", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "for", "stage", "in", "self", ".", "stages", "]", "+", "[", "feats", "]", "\n", "bottle", "=", "self", ".", "bottleneck", "(", "torch", ".", "cat", "(", "priors", ",", "1", ")", ")", "\n", "return", "bottle", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[64, 68], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 48], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.replicate.patch_replication_callback": [[70, 95], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "\n", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.SyncMaster.__init__": [[67, 77], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.SyncMaster.register_slave": [[84, 101], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n", "", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.SyncMaster.run_master": [[102, 134], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.FutureResult.get"], ["\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n", "", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.SyncMaster.nr_slaves": [[135, 138], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[16, 29], ["float", "unittest.TorchTestCase.assertTrue", "float", "torch.allclose"], "methods", ["None"], ["\n", "def", "as_numpy", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "Variable", ")", ":", "\n", "        ", "v", "=", "v", ".", "data", "\n", "", "return", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "", "class", "TorchTestCase", "(", "unittest", ".", "TestCase", ")", ":", "\n", "    ", "def", "assertTensorClose", "(", "self", ",", "a", ",", "b", ",", "atol", "=", "1e-3", ",", "rtol", "=", "1e-3", ")", ":", "\n", "        ", "npa", ",", "npb", "=", "as_numpy", "(", "a", ")", ",", "as_numpy", "(", "b", ")", "\n", "self", ".", "assertTrue", "(", "\n", "np", ".", "allclose", "(", "npa", ",", "npb", ",", "atol", "=", "atol", ")", ",", "\n", "'Tensor close check failed\\n{}\\n{}\\nadiff={}, rdiff={}'", ".", "format", "(", "a", ",", "b", ",", "np", ".", "abs", "(", "npa", "-", "npb", ")", ".", "max", "(", ")", ",", "np", ".", "abs", "(", "(", "npa", "-", "npb", ")", "/", "np", ".", "fmax", "(", "npa", ",", "1e-5", ")", ")", ".", "max", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.unittest.as_numpy": [[17, 21], ["isinstance", "v.cpu().numpy", "v.cpu"], "function", ["None"], ["def", "as_numpy", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "Variable", ")", ":", "\n", "        ", "v", "=", "v", ".", "data", "\n", "", "return", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[39, 47], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "comm.SyncMaster"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.001", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ")", "\n", "\n", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[48, 79], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._unsqueeze_ft"], ["# customed batch norm statistics", "\n", "self", ".", "_moving_average_fraction", "=", "1.", "-", "momentum", "\n", "self", ".", "register_buffer", "(", "'_tmp_running_mean'", ",", "torch", ".", "zeros", "(", "self", ".", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'_tmp_running_var'", ",", "torch", ".", "ones", "(", "self", ".", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'_running_iter'", ",", "torch", ".", "ones", "(", "1", ")", ")", "\n", "self", ".", "_tmp_running_mean", "=", "self", ".", "running_mean", ".", "clone", "(", ")", "*", "self", ".", "_running_iter", "\n", "self", ".", "_tmp_running_var", "=", "self", ".", "running_var", ".", "clone", "(", ")", "*", "self", ".", "_running_iter", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[80, 89], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.SyncMaster.register_slave"], ["# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n", "", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[90, 112], ["sorted", "sum", "torch.nn.parallel._functions.ReduceAddCoalesced.apply", "torch.nn.parallel._functions.ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "torch.nn.parallel._functions.Broadcast.apply", "torch.nn.parallel._functions.Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n", "", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._SynchronizedBatchNorm._add_weighted": [[119, 122], ["None"], "methods", ["None"], ["", "def", "_add_weighted", "(", "self", ",", "dest", ",", "delta", ",", "alpha", "=", "1", ",", "beta", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "        ", "\"\"\"return *dest* by `dest := dest*alpha + delta*beta + bias`\"\"\"", "\n", "return", "dest", "*", "alpha", "+", "delta", "*", "beta", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[113, 126], ["bias_var.clamp"], "methods", ["None"], ["outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n", "", "def", "_add_weighted", "(", "self", ",", "dest", ",", "delta", ",", "alpha", "=", "1", ",", "beta", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "        ", "\"\"\"return *dest* by `dest := dest*alpha + delta*beta + bias`\"\"\"", "\n", "return", "dest", "*", "alpha", "+", "delta", "*", "beta", "+", "bias", "\n", "\n", "", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[184, 189], ["super()._check_input_dim", "ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], []], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[247, 252], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], []], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[311, 316], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], []], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._sum_ft": [[24, 27], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm._unsqueeze_ft": [[29, 32], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dementions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.SyncMaster.__getstate__": [[78, 80], ["None"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.SyncMaster.__setstate__": [[81, 83], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], []], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__": [[27, 38], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats": [[39, 42], ["batchnorm_reimpl.BatchNorm2dReimpl.running_mean.zero_", "batchnorm_reimpl.BatchNorm2dReimpl.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters": [[43, 47], ["batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_running_stats", "(", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "weight", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.forward": [[48, 74], ["input_.permute().contiguous().view.permute().contiguous().view.size", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "input_.permute().contiguous().view.permute().contiguous().view.sum", "input_.permute().contiguous().view.permute().contiguous().view.pow().sum", "output.view().permute().contiguous", "batchnorm_reimpl.BatchNorm2dReimpl.bias.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "input_.permute().contiguous().view.permute().contiguous().view.pow", "mean.detach", "unbias_var.detach", "batchnorm_reimpl.BatchNorm2dReimpl.weight.unsqueeze", "output.view().permute", "inv_std.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute", "mean.unsqueeze", "output.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "batchsize", ",", "channels", ",", "height", ",", "width", "=", "input_", ".", "size", "(", ")", "\n", "numel", "=", "batchsize", "*", "height", "*", "width", "\n", "input_", "=", "input_", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "channels", ",", "numel", ")", "\n", "sum_", "=", "input_", ".", "sum", "(", "1", ")", "\n", "sum_of_square", "=", "input_", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "mean", "=", "sum_", "/", "numel", "\n", "sumvar", "=", "sum_of_square", "-", "sum_", "*", "mean", "\n", "\n", "self", ".", "running_mean", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "\n", "+", "self", ".", "momentum", "*", "mean", ".", "detach", "(", ")", "\n", ")", "\n", "unbias_var", "=", "sumvar", "/", "(", "numel", "-", "1", ")", "\n", "self", ".", "running_var", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "\n", "+", "self", ".", "momentum", "*", "unbias_var", ".", "detach", "(", ")", "\n", ")", "\n", "\n", "bias_var", "=", "sumvar", "/", "numel", "\n", "inv_std", "=", "1", "/", "(", "bias_var", "+", "self", ".", "eps", ")", ".", "pow", "(", "0.5", ")", "\n", "output", "=", "(", "\n", "(", "input_", "-", "mean", ".", "unsqueeze", "(", "1", ")", ")", "*", "inv_std", ".", "unsqueeze", "(", "1", ")", "*", "\n", "self", ".", "weight", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "bias", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "return", "output", ".", "view", "(", "channels", ",", "batchsize", ",", "height", ",", "width", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm.SyncTestCase._syncParameters": [[37, 43], ["bn1.reset_parameters", "bn2.reset_parameters", "bn2.weight.data.copy_", "bn2.bias.data.copy_"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["    ", "def", "_syncParameters", "(", "self", ",", "bn1", ",", "bn2", ")", ":", "\n", "        ", "bn1", ".", "reset_parameters", "(", ")", "\n", "bn2", ".", "reset_parameters", "(", ")", "\n", "if", "bn1", ".", "affine", "and", "bn2", ".", "affine", ":", "\n", "            ", "bn2", ".", "weight", ".", "data", ".", "copy_", "(", "bn1", ".", "weight", ".", "data", ")", "\n", "bn2", ".", "bias", ".", "data", ".", "copy_", "(", "bn1", ".", "bias", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult": [[44, 66], ["bn1.train", "bn2.train", "test_sync_batchnorm.SyncTestCase._syncParameters", "torch.autograd.Variable", "torch.autograd.Variable", "bn1", "bn1.sum().backward", "torch.autograd.Variable", "torch.autograd.Variable", "bn2", "bn2.sum().backward", "test_sync_batchnorm.SyncTestCase.assertTensorClose", "test_sync_batchnorm.SyncTestCase.assertTensorClose", "test_sync_batchnorm.SyncTestCase.assertTensorClose", "test_sync_batchnorm.SyncTestCase.assertTensorClose", "test_sync_batchnorm.SyncTestCase.assertTensorClose", "input.cuda.cuda.cuda", "test_sync_batchnorm._find_bn", "test_sync_batchnorm._find_bn", "bn1.sum", "bn2.sum", "test_sync_batchnorm._find_bn", "test_sync_batchnorm._find_bn", "test_sync_batchnorm._find_bn", "test_sync_batchnorm._find_bn"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.Net.train", "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.Net.train", "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm.SyncTestCase._syncParameters", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm._find_bn", "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm._find_bn", "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm._find_bn", "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm._find_bn", "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm._find_bn", "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm._find_bn"], ["", "", "def", "_checkBatchNormResult", "(", "self", ",", "bn1", ",", "bn2", ",", "input", ",", "is_train", ",", "cuda", "=", "False", ")", ":", "\n", "        ", "\"\"\"Check the forward and backward for the customized batch normalization.\"\"\"", "\n", "bn1", ".", "train", "(", "mode", "=", "is_train", ")", "\n", "bn2", ".", "train", "(", "mode", "=", "is_train", ")", "\n", "\n", "if", "cuda", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "_syncParameters", "(", "_find_bn", "(", "bn1", ")", ",", "_find_bn", "(", "bn2", ")", ")", "\n", "\n", "input1", "=", "Variable", "(", "input", ",", "requires_grad", "=", "True", ")", "\n", "output1", "=", "bn1", "(", "input1", ")", "\n", "output1", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "input2", "=", "Variable", "(", "input", ",", "requires_grad", "=", "True", ")", "\n", "output2", "=", "bn2", "(", "input2", ")", "\n", "output2", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "\n", "self", ".", "assertTensorClose", "(", "input1", ".", "data", ",", "input2", ".", "data", ")", "\n", "self", ".", "assertTensorClose", "(", "output1", ".", "data", ",", "output2", ".", "data", ")", "\n", "self", ".", "assertTensorClose", "(", "input1", ".", "grad", ",", "input2", ".", "grad", ")", "\n", "self", ".", "assertTensorClose", "(", "_find_bn", "(", "bn1", ")", ".", "running_mean", ",", "_find_bn", "(", "bn2", ")", ".", "running_mean", ")", "\n", "self", ".", "assertTensorClose", "(", "_find_bn", "(", "bn1", ")", ".", "running_var", ",", "_find_bn", "(", "bn2", ")", ".", "running_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm.SyncTestCase.testSyncBatchNormNormalTrain": [[67, 72], ["torch.BatchNorm1d", "torch.BatchNorm1d", "sync_batchnorm.SynchronizedBatchNorm1d", "test_sync_batchnorm.SyncTestCase._checkBatchNormResult", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult"], ["", "def", "testSyncBatchNormNormalTrain", "(", "self", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "10", ")", "\n", "sync_bn", "=", "SynchronizedBatchNorm1d", "(", "10", ")", "\n", "\n", "self", ".", "_checkBatchNormResult", "(", "bn", ",", "sync_bn", ",", "torch", ".", "rand", "(", "16", ",", "10", ")", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm.SyncTestCase.testSyncBatchNormNormalEval": [[73, 78], ["torch.BatchNorm1d", "torch.BatchNorm1d", "sync_batchnorm.SynchronizedBatchNorm1d", "test_sync_batchnorm.SyncTestCase._checkBatchNormResult", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult"], ["", "def", "testSyncBatchNormNormalEval", "(", "self", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "10", ")", "\n", "sync_bn", "=", "SynchronizedBatchNorm1d", "(", "10", ")", "\n", "\n", "self", ".", "_checkBatchNormResult", "(", "bn", ",", "sync_bn", ",", "torch", ".", "rand", "(", "16", ",", "10", ")", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm.SyncTestCase.testSyncBatchNormSyncTrain": [[79, 88], ["torch.BatchNorm1d", "torch.BatchNorm1d", "sync_batchnorm.SynchronizedBatchNorm1d", "sync_batchnorm.DataParallelWithCallback", "torch.BatchNorm1d.cuda", "sync_batchnorm.DataParallelWithCallback.cuda", "test_sync_batchnorm.SyncTestCase._checkBatchNormResult", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult"], ["", "def", "testSyncBatchNormSyncTrain", "(", "self", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "10", ",", "eps", "=", "1e-5", ",", "affine", "=", "False", ")", "\n", "sync_bn", "=", "SynchronizedBatchNorm1d", "(", "10", ",", "eps", "=", "1e-5", ",", "affine", "=", "False", ")", "\n", "sync_bn", "=", "DataParallelWithCallback", "(", "sync_bn", ",", "device_ids", "=", "[", "0", ",", "1", "]", ")", "\n", "\n", "bn", ".", "cuda", "(", ")", "\n", "sync_bn", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "_checkBatchNormResult", "(", "bn", ",", "sync_bn", ",", "torch", ".", "rand", "(", "16", ",", "10", ")", ",", "True", ",", "cuda", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm.SyncTestCase.testSyncBatchNormSyncEval": [[89, 98], ["torch.BatchNorm1d", "torch.BatchNorm1d", "sync_batchnorm.SynchronizedBatchNorm1d", "sync_batchnorm.DataParallelWithCallback", "torch.BatchNorm1d.cuda", "sync_batchnorm.DataParallelWithCallback.cuda", "test_sync_batchnorm.SyncTestCase._checkBatchNormResult", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult"], ["", "def", "testSyncBatchNormSyncEval", "(", "self", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "10", ",", "eps", "=", "1e-5", ",", "affine", "=", "False", ")", "\n", "sync_bn", "=", "SynchronizedBatchNorm1d", "(", "10", ",", "eps", "=", "1e-5", ",", "affine", "=", "False", ")", "\n", "sync_bn", "=", "DataParallelWithCallback", "(", "sync_bn", ",", "device_ids", "=", "[", "0", ",", "1", "]", ")", "\n", "\n", "bn", ".", "cuda", "(", ")", "\n", "sync_bn", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "_checkBatchNormResult", "(", "bn", ",", "sync_bn", ",", "torch", ".", "rand", "(", "16", ",", "10", ")", ",", "False", ",", "cuda", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm.SyncTestCase.testSyncBatchNorm2DSyncTrain": [[99, 108], ["torch.BatchNorm2d", "torch.BatchNorm2d", "sync_batchnorm.SynchronizedBatchNorm2d", "sync_batchnorm.DataParallelWithCallback", "torch.BatchNorm2d.cuda", "sync_batchnorm.DataParallelWithCallback.cuda", "test_sync_batchnorm.SyncTestCase._checkBatchNormResult", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult"], ["", "def", "testSyncBatchNorm2DSyncTrain", "(", "self", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm2d", "(", "10", ")", "\n", "sync_bn", "=", "SynchronizedBatchNorm2d", "(", "10", ")", "\n", "sync_bn", "=", "DataParallelWithCallback", "(", "sync_bn", ",", "device_ids", "=", "[", "0", ",", "1", "]", ")", "\n", "\n", "bn", ".", "cuda", "(", ")", "\n", "sync_bn", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "_checkBatchNormResult", "(", "bn", ",", "sync_bn", ",", "torch", ".", "rand", "(", "16", ",", "10", ",", "16", ",", "16", ")", ",", "True", ",", "cuda", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm.handy_var": [[19, 28], ["a.size", "a.sum"], "function", ["None"], ["def", "handy_var", "(", "a", ",", "unbias", "=", "True", ")", ":", "\n", "    ", "n", "=", "a", ".", "size", "(", "0", ")", "\n", "asum", "=", "a", ".", "sum", "(", "dim", "=", "0", ")", "\n", "as_sum", "=", "(", "a", "**", "2", ")", ".", "sum", "(", "dim", "=", "0", ")", "# a square sum", "\n", "sumvar", "=", "as_sum", "-", "asum", "*", "asum", "/", "n", "\n", "if", "unbias", ":", "\n", "        ", "return", "sumvar", "/", "(", "n", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "sumvar", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_sync_batchnorm._find_bn": [[30, 34], ["module.modules", "isinstance"], "function", ["None"], ["", "", "def", "_find_bn", "(", "module", ")", ":", "\n", "    ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "SynchronizedBatchNorm1d", ",", "SynchronizedBatchNorm2d", ")", ")", ":", "\n", "            ", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_numeric_batchnorm.NumericTestCase.testNumericBatchNorm": [[30, 53], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d.train", "torch.autograd.Variable", "torch.autograd.Variable", "torch.BatchNorm2d.", "nn.BatchNorm2d.sum", "bn.sum.backward", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.mean", "torch.autograd.Variable.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "b_var2.sum", "b_var2.sum.backward", "test_numeric_batchnorm.NumericTestCase.assertTensorClose", "test_numeric_batchnorm.NumericTestCase.assertTensorClose", "test_numeric_batchnorm.NumericTestCase.assertTensorClose", "test_numeric_batchnorm.NumericTestCase.assertTensorClose", "test_numeric_batchnorm.NumericTestCase.assertTensorClose", "handy_var().clamp", "torch.rand.mean", "torch.rand.mean", "test_numeric_batchnorm.handy_var", "test_numeric_batchnorm.handy_var"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.Net.train", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_numeric_batchnorm.handy_var", "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_numeric_batchnorm.handy_var"], ["    ", "def", "testNumericBatchNorm", "(", "self", ")", ":", "\n", "        ", "a", "=", "torch", ".", "rand", "(", "16", ",", "10", ")", "\n", "bn", "=", "nn", ".", "BatchNorm2d", "(", "10", ",", "momentum", "=", "1", ",", "eps", "=", "1e-5", ",", "affine", "=", "False", ")", "\n", "bn", ".", "train", "(", ")", "\n", "\n", "a_var1", "=", "Variable", "(", "a", ",", "requires_grad", "=", "True", ")", "\n", "b_var1", "=", "bn", "(", "a_var1", ")", "\n", "loss1", "=", "b_var1", ".", "sum", "(", ")", "\n", "loss1", ".", "backward", "(", ")", "\n", "\n", "a_var2", "=", "Variable", "(", "a", ",", "requires_grad", "=", "True", ")", "\n", "a_mean2", "=", "a_var2", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "a_std2", "=", "torch", ".", "sqrt", "(", "handy_var", "(", "a_var2", ",", "unbias", "=", "False", ")", ".", "clamp", "(", "min", "=", "1e-5", ")", ")", "\n", "# a_std2 = torch.sqrt(a_var2.var(dim=0, keepdim=True, unbiased=False) + 1e-5)", "\n", "b_var2", "=", "(", "a_var2", "-", "a_mean2", ")", "/", "a_std2", "\n", "loss2", "=", "b_var2", ".", "sum", "(", ")", "\n", "loss2", ".", "backward", "(", ")", "\n", "\n", "self", ".", "assertTensorClose", "(", "bn", ".", "running_mean", ",", "a", ".", "mean", "(", "dim", "=", "0", ")", ")", "\n", "self", ".", "assertTensorClose", "(", "bn", ".", "running_var", ",", "handy_var", "(", "a", ")", ")", "\n", "self", ".", "assertTensorClose", "(", "a_var1", ".", "data", ",", "a_var2", ".", "data", ")", "\n", "self", ".", "assertTensorClose", "(", "b_var1", ".", "data", ",", "b_var2", ".", "data", ")", "\n", "self", ".", "assertTensorClose", "(", "a_var1", ".", "grad", ",", "a_var2", ".", "grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.tests.test_numeric_batchnorm.handy_var": [[18, 27], ["a.size", "a.sum"], "function", ["None"], ["def", "handy_var", "(", "a", ",", "unbias", "=", "True", ")", ":", "\n", "    ", "n", "=", "a", ".", "size", "(", "0", ")", "\n", "asum", "=", "a", ".", "sum", "(", "dim", "=", "0", ")", "\n", "as_sum", "=", "(", "a", "**", "2", ")", ".", "sum", "(", "dim", "=", "0", ")", "# a square sum", "\n", "sumvar", "=", "as_sum", "-", "asum", "*", "asum", "/", "n", "\n", "if", "unbias", ":", "\n", "        ", "return", "sumvar", "/", "(", "n", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "sumvar", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.BasicBlock.__init__": [[35, 47], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "previous_dilation", "=", "1", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "previous_dilation", ",", "dilation", "=", "previous_dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.BasicBlock.forward": [[48, 65], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.Bottleneck.__init__": [[72, 88], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "previous_dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "4", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.Bottleneck._sum_each": [[89, 95], ["range", "len", "len", "len", "z.append"], "methods", ["None"], ["", "def", "_sum_each", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "assert", "(", "len", "(", "x", ")", "==", "len", "(", "y", ")", ")", "\n", "z", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", ":", "\n", "            ", "z", ".", "append", "(", "x", "[", "i", "]", "+", "y", "[", "i", "]", ")", "\n", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.Bottleneck.forward": [[96, 117], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.ResNet.__init__": [[144, 191], ["torch.Module.__init__", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet.modules", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__", "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.ResNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "dilated", "=", "True", ",", "multi_grid", "=", "False", ",", "\n", "deep_base", "=", "True", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "128", "if", "deep_base", "else", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "deep_base", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "64", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "64", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "if", "dilated", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "if", "multi_grid", ":", "\n", "                ", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "4", ",", "norm_layer", "=", "norm_layer", ",", "\n", "multi_grid", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "4", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "", "self", ".", "OUTPUT_DIM", "=", "2048", "\n", "self", ".", "MIDDLE_DIM", "=", "256", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "norm_layer", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.ResNet._make_layer": [[192, 226], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "block", "layers.append", "layers.append", "layers.append", "block", "layers.append", "RuntimeError", "block", "block", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "multi_grid", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "#multi_dilations = [4, 8, 16]", "\n", "multi_dilations", "=", "[", "3", ",", "4", ",", "5", "]", "\n", "if", "multi_grid", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "multi_dilations", "[", "0", "]", ",", "\n", "downsample", "=", "downsample", ",", "previous_dilation", "=", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "elif", "dilation", "==", "1", "or", "dilation", "==", "2", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "1", ",", "\n", "downsample", "=", "downsample", ",", "previous_dilation", "=", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "elif", "dilation", "==", "4", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "2", ",", "\n", "downsample", "=", "downsample", ",", "previous_dilation", "=", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"=> unknown dilation size: {}\"", ".", "format", "(", "dilation", ")", ")", "\n", "\n", "", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "if", "multi_grid", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "multi_dilations", "[", "i", "]", ",", "\n", "previous_dilation", "=", "dilation", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ",", "previous_dilation", "=", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.ResNet.forward": [[227, 238], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "l1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "l2", "=", "self", ".", "layer2", "(", "l1", ")", "\n", "l3", "=", "self", ".", "layer3", "(", "l2", ")", "\n", "l4", "=", "self", ".", "layer4", "(", "l3", ")", "\n", "return", "[", "l1", ",", "l2", ",", "l3", ",", "l4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.conv3x3": [[25, 29], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.resnet18": [[239, 250], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "@", "BACKBONES", ".", "register_module", "\n", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.resnet34": [[252, 263], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "@", "BACKBONES", ".", "register_module", "\n", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.resnet50": [[265, 281], ["resnet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict", "print", "model_zoo.load_url.items"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.update"], ["", "@", "BACKBONES", ".", "register_module", "\n", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "old_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "old_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "old_dict", ".", "items", "(", ")", "if", "(", "k", "in", "model_dict", ")", "}", "\n", "model_dict", ".", "update", "(", "old_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "'%s loaded.'", "%", "model_urls", "[", "'resnet50'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.resnet101": [[283, 299], ["resnet.ResNet", "torch.load", "torch.load", "torch.load", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict", "print", "torch.load.items"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.update"], ["", "@", "BACKBONES", ".", "register_module", "\n", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "old_dict", "=", "torch", ".", "load", "(", "model_urls", "[", "'resnet101'", "]", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "old_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "old_dict", ".", "items", "(", ")", "if", "(", "k", "in", "model_dict", ")", "}", "\n", "model_dict", ".", "update", "(", "old_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "'%s loaded.'", "%", "model_urls", "[", "'resnet101'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet.resnet152": [[301, 317], ["resnet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict", "print", "model_zoo.load_url.items"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.update"], ["", "@", "BACKBONES", ".", "register_module", "\n", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "old_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "old_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "old_dict", ".", "items", "(", ")", "if", "(", "k", "in", "model_dict", ")", "}", "\n", "model_dict", ".", "update", "(", "old_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "'%s loaded.'", "%", "model_urls", "[", "'resnet152'", "]", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.builder.build_backbone": [[7, 10], ["utils.registry.BACKBONES.get"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.sync_batchnorm.comm.FutureResult.get"], ["def", "build_backbone", "(", "backbone_name", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "\t", "net", "=", "BACKBONES", ".", "get", "(", "backbone_name", ")", "(", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.xception.SeparableConv2d.__init__": [[33, 44], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "xception.SeparableConv2d.norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "xception.SeparableConv2d.norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ",", "activate_first", "=", "True", ",", "inplace", "=", "True", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_layer", "=", "norm_layer", "\n", "self", ".", "relu0", "=", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", "self", ".", "depthwise", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", "=", "in_channels", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn1", "=", "self", ".", "norm_layer", "(", "in_channels", ",", "momentum", "=", "bn_mom", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn2", "=", "self", ".", "norm_layer", "(", "out_channels", ",", "momentum", "=", "bn_mom", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "activate_first", "=", "activate_first", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.xception.SeparableConv2d.forward": [[44, 56], ["xception.SeparableConv2d.depthwise", "xception.SeparableConv2d.bn1", "xception.SeparableConv2d.pointwise", "xception.SeparableConv2d.bn2", "xception.SeparableConv2d.relu0", "xception.SeparableConv2d.relu1", "xception.SeparableConv2d.relu2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "if", "self", ".", "activate_first", ":", "\n", "\t\t\t", "x", "=", "self", ".", "relu0", "(", "x", ")", "\n", "", "x", "=", "self", ".", "depthwise", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "if", "not", "self", ".", "activate_first", ":", "\n", "\t\t\t", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "pointwise", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "if", "not", "self", ".", "activate_first", ":", "\n", "\t\t\t", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.xception.Block.__init__": [[59, 84], ["torch.Module.__init__", "xception.SeparableConv2d", "xception.SeparableConv2d", "xception.SeparableConv2d", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "xception.Block.norm_layer"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_filters", ",", "out_filters", ",", "strides", "=", "1", ",", "atrous", "=", "None", ",", "grow_first", "=", "True", ",", "activate_first", "=", "True", ",", "inplace", "=", "True", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_layer", "=", "norm_layer", "\n", "if", "atrous", "==", "None", ":", "\n", "\t\t\t", "atrous", "=", "[", "1", "]", "*", "3", "\n", "", "elif", "isinstance", "(", "atrous", ",", "int", ")", ":", "\n", "\t\t\t", "atrous_list", "=", "[", "atrous", "]", "*", "3", "\n", "atrous", "=", "atrous_list", "\n", "", "idx", "=", "0", "\n", "self", ".", "head_relu", "=", "True", "\n", "if", "out_filters", "!=", "in_filters", "or", "strides", "!=", "1", ":", "\n", "\t\t\t", "self", ".", "skip", "=", "nn", ".", "Conv2d", "(", "in_filters", ",", "out_filters", ",", "1", ",", "stride", "=", "strides", ",", "bias", "=", "False", ")", "\n", "self", ".", "skipbn", "=", "self", ".", "norm_layer", "(", "out_filters", ",", "momentum", "=", "bn_mom", ")", "\n", "self", ".", "head_relu", "=", "False", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "skip", "=", "None", "\n", "\n", "", "self", ".", "hook_layer", "=", "None", "\n", "if", "grow_first", ":", "\n", "\t\t\t", "filters", "=", "out_filters", "\n", "", "else", ":", "\n", "\t\t\t", "filters", "=", "in_filters", "\n", "", "self", ".", "sepconv1", "=", "SeparableConv2d", "(", "in_filters", ",", "filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", "*", "atrous", "[", "0", "]", ",", "dilation", "=", "atrous", "[", "0", "]", ",", "bias", "=", "False", ",", "activate_first", "=", "activate_first", ",", "inplace", "=", "self", ".", "head_relu", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "sepconv2", "=", "SeparableConv2d", "(", "filters", ",", "out_filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", "*", "atrous", "[", "1", "]", ",", "dilation", "=", "atrous", "[", "1", "]", ",", "bias", "=", "False", ",", "activate_first", "=", "activate_first", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "sepconv3", "=", "SeparableConv2d", "(", "out_filters", ",", "out_filters", ",", "3", ",", "stride", "=", "strides", ",", "padding", "=", "1", "*", "atrous", "[", "2", "]", ",", "dilation", "=", "atrous", "[", "2", "]", ",", "bias", "=", "False", ",", "activate_first", "=", "activate_first", ",", "inplace", "=", "inplace", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.xception.Block.forward": [[85, 100], ["xception.Block.sepconv1", "xception.Block.sepconv2", "xception.Block.sepconv3", "xception.Block.skip", "xception.Block.skipbn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "\n", "\t\t", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "\t\t\t", "skip", "=", "self", ".", "skip", "(", "inp", ")", "\n", "skip", "=", "self", ".", "skipbn", "(", "skip", ")", "\n", "", "else", ":", "\n", "\t\t\t", "skip", "=", "inp", "\n", "\n", "", "x", "=", "self", ".", "sepconv1", "(", "inp", ")", "\n", "x", "=", "self", ".", "sepconv2", "(", "x", ")", "\n", "self", ".", "hook_layer", "=", "x", "\n", "x", "=", "self", ".", "sepconv3", "(", "x", ")", "\n", "\n", "x", "+=", "skip", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.xception.Xception.__init__": [[107, 178], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "xception.Xception.norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "xception.Xception.norm_layer", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.SeparableConv2d", "xception.SeparableConv2d", "xception.SeparableConv2d", "xception.Xception.modules", "isinstance", "ValueError", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["def", "__init__", "(", "self", ",", "os", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t", "\"\"\" Constructor\n\t\tArgs:\n\t\t\tnum_classes: number of classes\n\t\t\"\"\"", "\n", "super", "(", "Xception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_layer", "=", "norm_layer", "\n", "\n", "stride_list", "=", "None", "\n", "if", "os", "==", "8", ":", "\n", "\t\t\t", "stride_list", "=", "[", "2", ",", "1", ",", "1", "]", "\n", "", "elif", "os", "==", "16", ":", "\n", "\t\t\t", "stride_list", "=", "[", "2", ",", "2", ",", "1", "]", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'xception.py: output stride=%d is not supported.'", "%", "os", ")", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "self", ".", "norm_layer", "(", "32", ",", "momentum", "=", "bn_mom", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "self", ".", "norm_layer", "(", "64", ",", "momentum", "=", "bn_mom", ")", "\n", "#do relu here", "\n", "\n", "self", ".", "block1", "=", "Block", "(", "64", ",", "128", ",", "2", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "block2", "=", "Block", "(", "128", ",", "256", ",", "stride_list", "[", "0", "]", ",", "inplace", "=", "False", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "block3", "=", "Block", "(", "256", ",", "728", ",", "stride_list", "[", "1", "]", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "\n", "rate", "=", "16", "//", "os", "\n", "self", ".", "block4", "=", "Block", "(", "728", ",", "728", ",", "1", ",", "atrous", "=", "rate", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "block5", "=", "Block", "(", "728", ",", "728", ",", "1", ",", "atrous", "=", "rate", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "block6", "=", "Block", "(", "728", ",", "728", ",", "1", ",", "atrous", "=", "rate", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "block7", "=", "Block", "(", "728", ",", "728", ",", "1", ",", "atrous", "=", "rate", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "\n", "self", ".", "block8", "=", "Block", "(", "728", ",", "728", ",", "1", ",", "atrous", "=", "rate", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "block9", "=", "Block", "(", "728", ",", "728", ",", "1", ",", "atrous", "=", "rate", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "block10", "=", "Block", "(", "728", ",", "728", ",", "1", ",", "atrous", "=", "rate", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "block11", "=", "Block", "(", "728", ",", "728", ",", "1", ",", "atrous", "=", "rate", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "\n", "self", ".", "block12", "=", "Block", "(", "728", ",", "728", ",", "1", ",", "atrous", "=", "rate", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "block13", "=", "Block", "(", "728", ",", "728", ",", "1", ",", "atrous", "=", "rate", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "block14", "=", "Block", "(", "728", ",", "728", ",", "1", ",", "atrous", "=", "rate", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "block15", "=", "Block", "(", "728", ",", "728", ",", "1", ",", "atrous", "=", "rate", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "\n", "self", ".", "block16", "=", "Block", "(", "728", ",", "728", ",", "1", ",", "atrous", "=", "[", "1", "*", "rate", ",", "1", "*", "rate", ",", "1", "*", "rate", "]", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "block17", "=", "Block", "(", "728", ",", "728", ",", "1", ",", "atrous", "=", "[", "1", "*", "rate", ",", "1", "*", "rate", ",", "1", "*", "rate", "]", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "block18", "=", "Block", "(", "728", ",", "728", ",", "1", ",", "atrous", "=", "[", "1", "*", "rate", ",", "1", "*", "rate", ",", "1", "*", "rate", "]", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "block19", "=", "Block", "(", "728", ",", "728", ",", "1", ",", "atrous", "=", "[", "1", "*", "rate", ",", "1", "*", "rate", ",", "1", "*", "rate", "]", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "\n", "self", ".", "block20", "=", "Block", "(", "728", ",", "1024", ",", "stride_list", "[", "2", "]", ",", "atrous", "=", "rate", ",", "grow_first", "=", "False", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "#self.block12=Block(728,1024,2,2,start_with_relu=True,grow_first=False)", "\n", "\n", "self", ".", "conv3", "=", "SeparableConv2d", "(", "1024", ",", "1536", ",", "3", ",", "1", ",", "1", "*", "rate", ",", "dilation", "=", "rate", ",", "activate_first", "=", "False", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "# self.bn3 = SynchronizedBatchNorm2d(1536, momentum=bn_mom)", "\n", "\n", "self", ".", "conv4", "=", "SeparableConv2d", "(", "1536", ",", "1536", ",", "3", ",", "1", ",", "1", "*", "rate", ",", "dilation", "=", "rate", ",", "activate_first", "=", "False", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "# self.bn4 = SynchronizedBatchNorm2d(1536, momentum=bn_mom)", "\n", "\n", "#do relu here", "\n", "self", ".", "conv5", "=", "SeparableConv2d", "(", "1536", ",", "2048", ",", "3", ",", "1", ",", "1", "*", "rate", ",", "dilation", "=", "rate", ",", "activate_first", "=", "False", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "# self.bn5 = SynchronizedBatchNorm2d(2048, momentum=bn_mom)", "\n", "self", ".", "OUTPUT_DIM", "=", "2048", "\n", "self", ".", "MIDDLE_DIM", "=", "256", "\n", "\n", "#------- init weights --------", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\t\t\t\t", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "self", ".", "norm_layer", ")", ":", "\n", "\t\t\t\t", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#-----------------------------", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.xception.Xception.forward": [[180, 228], ["xception.Xception.conv1", "xception.Xception.bn1", "xception.Xception.relu", "xception.Xception.conv2", "xception.Xception.bn2", "xception.Xception.relu", "xception.Xception.block1", "xception.Xception.block2", "xception.Xception.block3", "xception.Xception.block4", "xception.Xception.block5", "xception.Xception.block6", "xception.Xception.block7", "xception.Xception.block8", "xception.Xception.block9", "xception.Xception.block10", "xception.Xception.block11", "xception.Xception.block12", "xception.Xception.block13", "xception.Xception.block14", "xception.Xception.block15", "xception.Xception.block16", "xception.Xception.block17", "xception.Xception.block18", "xception.Xception.block19", "xception.Xception.block20", "xception.Xception.conv3", "xception.Xception.conv4", "xception.Xception.conv5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\t\t", "layers", "=", "[", "]", "\n", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "#self.layers.append(x)", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "l1", "=", "self", ".", "block2", ".", "hook_layer", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "l2", "=", "self", ".", "block3", ".", "hook_layer", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "x", "=", "self", ".", "block12", "(", "x", ")", "\n", "x", "=", "self", ".", "block13", "(", "x", ")", "\n", "x", "=", "self", ".", "block14", "(", "x", ")", "\n", "x", "=", "self", ".", "block15", "(", "x", ")", "\n", "x", "=", "self", ".", "block16", "(", "x", ")", "\n", "x", "=", "self", ".", "block17", "(", "x", ")", "\n", "x", "=", "self", ".", "block18", "(", "x", ")", "\n", "x", "=", "self", ".", "block19", "(", "x", ")", "\n", "x", "=", "self", ".", "block20", "(", "x", ")", "\n", "l3", "=", "self", ".", "block20", ".", "hook_layer", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "# x = self.bn3(x)", "\n", "# x = self.relu(x)", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "# x = self.bn4(x)", "\n", "# x = self.relu(x)", "\n", "\n", "l4", "=", "self", ".", "conv5", "(", "x", ")", "\n", "# x = self.bn5(x)", "\n", "# x = self.relu(x)", "\n", "\n", "#return layers", "\n", "return", "[", "l1", ",", "l2", ",", "l3", ",", "l4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.xception.xception": [[229, 245], ["xception.Xception", "torch.load", "torch.load", "torch.load", "torch.load", "Xception.state_dict", "model.state_dict.update", "Xception.load_state_dict", "torch.load.items"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.AverageMeter.update"], ["", "", "@", "BACKBONES", ".", "register_module", "\n", "def", "xception", "(", "pretrained", "=", "True", ",", "os", "=", "8", ",", "**", "kwargs", ")", ":", "\n", "\t", "model", "=", "Xception", "(", "os", "=", "os", ")", "\n", "if", "pretrained", ":", "\n", "\t\t", "old_dict", "=", "torch", ".", "load", "(", "model_urls", "[", "'xception'", "]", ")", "\n", "# old_dict = model_zoo.load_url(model_urls['xception'])", "\n", "# for name, weights in old_dict.items():", "\n", "#\t if 'pointwise' in name:", "\n", "#\t\t old_dict[name] = weights.unsqueeze(-1).unsqueeze(-1)", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "old_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "old_dict", ".", "items", "(", ")", "if", "(", "'itr'", "not", "in", "k", "and", "'tmp'", "not", "in", "k", "and", "'track'", "not", "in", "k", ")", "}", "\n", "model_dict", ".", "update", "(", "old_dict", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.ResBlock.__init__": [[11, 30], ["torch.nn.Module.__init__", "resnet38d.ResBlock.norm_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "resnet38d.ResBlock.norm_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "mid_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "first_dilation", "=", "None", ",", "dilation", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "same_shape", "=", "(", "in_channels", "==", "out_channels", "and", "stride", "==", "1", ")", "\n", "\n", "if", "first_dilation", "==", "None", ":", "first_dilation", "=", "dilation", "\n", "\n", "self", ".", "bn_branch2a", "=", "self", ".", "norm_layer", "(", "in_channels", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", "\n", "\n", "self", ".", "conv_branch2a", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "3", ",", "stride", ",", "\n", "padding", "=", "first_dilation", ",", "dilation", "=", "first_dilation", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn_branch2b1", "=", "self", ".", "norm_layer", "(", "mid_channels", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", "\n", "\n", "self", ".", "conv_branch2b1", "=", "nn", ".", "Conv2d", "(", "mid_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "same_shape", ":", "\n", "            ", "self", ".", "conv_branch1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.ResBlock.forward": [[31, 54], ["resnet38d.ResBlock.bn_branch2a", "torch.relu", "torch.relu", "resnet38d.ResBlock.conv_branch2a", "resnet38d.ResBlock.bn_branch2b1", "torch.relu", "torch.relu", "resnet38d.ResBlock.conv_branch2b1", "resnet38d.ResBlock.conv_branch1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "get_x_bn_relu", "=", "False", ")", ":", "\n", "\n", "        ", "branch2", "=", "self", ".", "bn_branch2a", "(", "x", ")", "\n", "branch2", "=", "F", ".", "relu", "(", "branch2", ")", "\n", "\n", "x_bn_relu", "=", "branch2", "\n", "\n", "if", "not", "self", ".", "same_shape", ":", "\n", "            ", "branch1", "=", "self", ".", "conv_branch1", "(", "branch2", ")", "\n", "", "else", ":", "\n", "            ", "branch1", "=", "x", "\n", "\n", "", "branch2", "=", "self", ".", "conv_branch2a", "(", "branch2", ")", "\n", "branch2", "=", "self", ".", "bn_branch2b1", "(", "branch2", ")", "\n", "branch2", "=", "F", ".", "relu", "(", "branch2", ")", "\n", "branch2", "=", "self", ".", "conv_branch2b1", "(", "branch2", ")", "\n", "\n", "x", "=", "branch1", "+", "branch2", "\n", "\n", "if", "get_x_bn_relu", ":", "\n", "            ", "return", "x", ",", "x_bn_relu", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.ResBlock.__call__": [[55, 57], ["resnet38d.ResBlock.forward"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.forward"], ["", "def", "__call__", "(", "self", ",", "x", ",", "get_x_bn_relu", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "x", ",", "get_x_bn_relu", "=", "get_x_bn_relu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.ResBlock_bot.__init__": [[59, 78], ["torch.nn.Module.__init__", "resnet38d.ResBlock_bot.norm_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "resnet38d.ResBlock_bot.norm_layer", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "resnet38d.ResBlock_bot.norm_layer", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "dropout", "=", "0.", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "ResBlock_bot", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "same_shape", "=", "(", "in_channels", "==", "out_channels", "and", "stride", "==", "1", ")", "\n", "\n", "self", ".", "bn_branch2a", "=", "self", ".", "norm_layer", "(", "in_channels", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv_branch2a", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", "//", "4", ",", "1", ",", "stride", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn_branch2b1", "=", "self", ".", "norm_layer", "(", "out_channels", "//", "4", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", "\n", "self", ".", "dropout_2b1", "=", "torch", ".", "nn", ".", "Dropout2d", "(", "dropout", ")", "\n", "self", ".", "conv_branch2b1", "=", "nn", ".", "Conv2d", "(", "out_channels", "//", "4", ",", "out_channels", "//", "2", ",", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn_branch2b2", "=", "self", ".", "norm_layer", "(", "out_channels", "//", "2", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", "\n", "self", ".", "dropout_2b2", "=", "torch", ".", "nn", ".", "Dropout2d", "(", "dropout", ")", "\n", "self", ".", "conv_branch2b2", "=", "nn", ".", "Conv2d", "(", "out_channels", "//", "2", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "same_shape", ":", "\n", "            ", "self", ".", "conv_branch1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.ResBlock_bot.forward": [[79, 105], ["resnet38d.ResBlock_bot.bn_branch2a", "torch.relu", "torch.relu", "resnet38d.ResBlock_bot.conv_branch1", "resnet38d.ResBlock_bot.conv_branch2a", "resnet38d.ResBlock_bot.bn_branch2b1", "torch.relu", "torch.relu", "resnet38d.ResBlock_bot.dropout_2b1", "resnet38d.ResBlock_bot.conv_branch2b1", "resnet38d.ResBlock_bot.bn_branch2b2", "torch.relu", "torch.relu", "resnet38d.ResBlock_bot.dropout_2b2", "resnet38d.ResBlock_bot.conv_branch2b2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "get_x_bn_relu", "=", "False", ")", ":", "\n", "\n", "        ", "branch2", "=", "self", ".", "bn_branch2a", "(", "x", ")", "\n", "branch2", "=", "F", ".", "relu", "(", "branch2", ")", "\n", "x_bn_relu", "=", "branch2", "\n", "\n", "branch1", "=", "self", ".", "conv_branch1", "(", "branch2", ")", "\n", "\n", "branch2", "=", "self", ".", "conv_branch2a", "(", "branch2", ")", "\n", "\n", "branch2", "=", "self", ".", "bn_branch2b1", "(", "branch2", ")", "\n", "branch2", "=", "F", ".", "relu", "(", "branch2", ")", "\n", "branch2", "=", "self", ".", "dropout_2b1", "(", "branch2", ")", "\n", "branch2", "=", "self", ".", "conv_branch2b1", "(", "branch2", ")", "\n", "\n", "branch2", "=", "self", ".", "bn_branch2b2", "(", "branch2", ")", "\n", "branch2", "=", "F", ".", "relu", "(", "branch2", ")", "\n", "branch2", "=", "self", ".", "dropout_2b2", "(", "branch2", ")", "\n", "branch2", "=", "self", ".", "conv_branch2b2", "(", "branch2", ")", "\n", "\n", "x", "=", "branch1", "+", "branch2", "\n", "\n", "if", "get_x_bn_relu", ":", "\n", "            ", "return", "x", ",", "x_bn_relu", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.ResBlock_bot.__call__": [[106, 108], ["resnet38d.ResBlock_bot.forward"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.forward"], ["", "def", "__call__", "(", "self", ",", "x", ",", "get_x_bn_relu", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "x", ",", "get_x_bn_relu", "=", "get_x_bn_relu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.Normalize.__init__": [[110, 114], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.Normalize.__call__": [[115, 124], ["numpy.asarray", "numpy.empty_like"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "imgarr", "=", "np", ".", "asarray", "(", "img", ")", "\n", "proc_img", "=", "np", ".", "empty_like", "(", "imgarr", ",", "np", ".", "float32", ")", "\n", "\n", "proc_img", "[", "...", ",", "0", "]", "=", "(", "imgarr", "[", "...", ",", "0", "]", "/", "255.", "-", "self", ".", "mean", "[", "0", "]", ")", "/", "self", ".", "std", "[", "0", "]", "\n", "proc_img", "[", "...", ",", "1", "]", "=", "(", "imgarr", "[", "...", ",", "1", "]", "/", "255.", "-", "self", ".", "mean", "[", "1", "]", ")", "/", "self", ".", "std", "[", "1", "]", "\n", "proc_img", "[", "...", ",", "2", "]", "=", "(", "imgarr", "[", "...", ",", "2", "]", "/", "255.", "-", "self", ".", "mean", "[", "2", "]", ")", "/", "self", ".", "std", "[", "2", "]", "\n", "\n", "return", "proc_img", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.Net.__init__": [[126, 161], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock", "resnet38d.ResBlock_bot", "resnet38d.ResBlock_bot", "resnet38d.Net.norm_layer", "resnet38d.Normalize"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "conv1a", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "b2", "=", "ResBlock", "(", "64", ",", "128", ",", "128", ",", "stride", "=", "2", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "b2_1", "=", "ResBlock", "(", "128", ",", "128", ",", "128", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "b2_2", "=", "ResBlock", "(", "128", ",", "128", ",", "128", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "\n", "self", ".", "b3", "=", "ResBlock", "(", "128", ",", "256", ",", "256", ",", "stride", "=", "2", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "b3_1", "=", "ResBlock", "(", "256", ",", "256", ",", "256", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "b3_2", "=", "ResBlock", "(", "256", ",", "256", ",", "256", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "\n", "self", ".", "b4", "=", "ResBlock", "(", "256", ",", "512", ",", "512", ",", "stride", "=", "2", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "b4_1", "=", "ResBlock", "(", "512", ",", "512", ",", "512", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "b4_2", "=", "ResBlock", "(", "512", ",", "512", ",", "512", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "b4_3", "=", "ResBlock", "(", "512", ",", "512", ",", "512", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "b4_4", "=", "ResBlock", "(", "512", ",", "512", ",", "512", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "b4_5", "=", "ResBlock", "(", "512", ",", "512", ",", "512", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "\n", "self", ".", "b5", "=", "ResBlock", "(", "512", ",", "512", ",", "1024", ",", "stride", "=", "1", ",", "first_dilation", "=", "1", ",", "dilation", "=", "2", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "b5_1", "=", "ResBlock", "(", "1024", ",", "512", ",", "1024", ",", "dilation", "=", "2", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "self", ".", "b5_2", "=", "ResBlock", "(", "1024", ",", "512", ",", "1024", ",", "dilation", "=", "2", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "\n", "self", ".", "b6", "=", "ResBlock_bot", "(", "1024", ",", "2048", ",", "stride", "=", "1", ",", "dilation", "=", "4", ",", "dropout", "=", "0.3", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "\n", "self", ".", "b7", "=", "ResBlock_bot", "(", "2048", ",", "4096", ",", "dilation", "=", "4", ",", "dropout", "=", "0.5", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "\n", "self", ".", "bn7", "=", "self", ".", "norm_layer", "(", "4096", ",", "momentum", "=", "bn_mom", ",", "affine", "=", "True", ")", "\n", "\n", "self", ".", "not_training", "=", "[", "self", ".", "conv1a", "]", "\n", "\n", "self", ".", "normalize", "=", "Normalize", "(", ")", "\n", "self", ".", "OUTPUT_DIM", "=", "4096", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.Net.forward": [[162, 191], ["resnet38d.Net.conv1a", "resnet38d.Net.b2", "resnet38d.Net.b2_1", "resnet38d.Net.b2_2", "resnet38d.Net.b3", "resnet38d.Net.b3_1", "resnet38d.Net.b3_2", "resnet38d.Net.b4", "resnet38d.Net.b4_1", "resnet38d.Net.b4_2", "resnet38d.Net.b4_3", "resnet38d.Net.b4_4", "resnet38d.Net.b4_5", "resnet38d.Net.b5", "resnet38d.Net.b5_1", "resnet38d.Net.b5_2", "resnet38d.Net.b6", "resnet38d.Net.b7", "torch.relu", "torch.relu", "resnet38d.Net.bn7"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv1a", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "b2", "(", "x", ")", "\n", "x", "=", "self", ".", "b2_1", "(", "x", ")", "\n", "x", "=", "self", ".", "b2_2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "b3", "(", "x", ")", "\n", "x", "=", "self", ".", "b3_1", "(", "x", ")", "\n", "x", "=", "self", ".", "b3_2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "b4", "(", "x", ")", "\n", "x", "=", "self", ".", "b4_1", "(", "x", ")", "\n", "x", "=", "self", ".", "b4_2", "(", "x", ")", "\n", "x", "=", "self", ".", "b4_3", "(", "x", ")", "\n", "x", "=", "self", ".", "b4_4", "(", "x", ")", "\n", "x", "=", "self", ".", "b4_5", "(", "x", ")", "\n", "\n", "x", ",", "conv4", "=", "self", ".", "b5", "(", "x", ",", "get_x_bn_relu", "=", "True", ")", "\n", "x", "=", "self", ".", "b5_1", "(", "x", ")", "\n", "x", "=", "self", ".", "b5_2", "(", "x", ")", "\n", "\n", "x", ",", "conv5", "=", "self", ".", "b6", "(", "x", ",", "get_x_bn_relu", "=", "True", ")", "\n", "\n", "x", "=", "self", ".", "b7", "(", "x", ")", "\n", "conv6", "=", "F", ".", "relu", "(", "self", ".", "bn7", "(", "x", ")", ")", "\n", "\n", "return", "[", "conv4", ",", "conv5", ",", "conv6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.Net.train": [[192, 215], ["super().train", "resnet38d.Net.modules", "isinstance", "isinstance", "isinstance", "layer.eval", "layer.children"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.Net.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "\n", "for", "layer", "in", "self", ".", "not_training", ":", "\n", "\n", "            ", "if", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                ", "for", "c", "in", "layer", ".", "children", "(", ")", ":", "\n", "                    ", "c", ".", "weight", ".", "requires_grad", "=", "False", "\n", "if", "c", ".", "bias", "is", "not", "None", ":", "\n", "                        ", "c", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "", "for", "layer", "in", "self", ".", "modules", "(", ")", ":", "\n", "\n", "            ", "if", "isinstance", "(", "layer", ",", "self", ".", "norm_layer", ")", ":", "\n", "                ", "layer", ".", "eval", "(", ")", "\n", "layer", ".", "bias", ".", "requires_grad", "=", "False", "\n", "layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.convert_mxnet_to_torch": [[216, 265], ["mxnet.nd.load", "dict", "mxnet.nd.load.items", "torch.from_numpy", "torch.from_numpy", "k.split", "torch.from_numpy.asnumpy", "pt_name.append", "pt_name.append", "pt_name.append", "pt_name.append"], "function", ["None"], ["", "", "def", "convert_mxnet_to_torch", "(", "filename", ")", ":", "\n", "    ", "import", "mxnet", "\n", "\n", "save_dict", "=", "mxnet", ".", "nd", ".", "load", "(", "filename", ")", "\n", "\n", "renamed_dict", "=", "dict", "(", ")", "\n", "\n", "bn_param_mx_pt", "=", "{", "'beta'", ":", "'bias'", ",", "'gamma'", ":", "'weight'", ",", "'mean'", ":", "'running_mean'", ",", "'var'", ":", "'running_var'", "}", "\n", "\n", "for", "k", ",", "v", "in", "save_dict", ".", "items", "(", ")", ":", "\n", "\n", "        ", "v", "=", "torch", ".", "from_numpy", "(", "v", ".", "asnumpy", "(", ")", ")", "\n", "toks", "=", "k", ".", "split", "(", "'_'", ")", "\n", "\n", "if", "'conv1a'", "in", "toks", "[", "0", "]", ":", "\n", "            ", "renamed_dict", "[", "'conv1a.weight'", "]", "=", "v", "\n", "\n", "", "elif", "'linear1000'", "in", "toks", "[", "0", "]", ":", "\n", "            ", "pass", "\n", "\n", "", "elif", "'branch'", "in", "toks", "[", "1", "]", ":", "\n", "\n", "            ", "pt_name", "=", "[", "]", "\n", "\n", "if", "toks", "[", "0", "]", "[", "-", "1", "]", "!=", "'a'", ":", "\n", "                ", "pt_name", ".", "append", "(", "'b'", "+", "toks", "[", "0", "]", "[", "-", "3", "]", "+", "'_'", "+", "toks", "[", "0", "]", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "pt_name", ".", "append", "(", "'b'", "+", "toks", "[", "0", "]", "[", "-", "2", "]", ")", "\n", "\n", "", "if", "'res'", "in", "toks", "[", "0", "]", ":", "\n", "                ", "layer_type", "=", "'conv'", "\n", "last_name", "=", "'weight'", "\n", "\n", "", "else", ":", "# 'bn' in toks[0]:", "\n", "                ", "layer_type", "=", "'bn'", "\n", "last_name", "=", "bn_param_mx_pt", "[", "toks", "[", "-", "1", "]", "]", "\n", "\n", "", "pt_name", ".", "append", "(", "layer_type", "+", "'_'", "+", "toks", "[", "1", "]", ")", "\n", "\n", "pt_name", ".", "append", "(", "last_name", ")", "\n", "\n", "torch_name", "=", "'.'", ".", "join", "(", "pt_name", ")", "\n", "renamed_dict", "[", "torch_name", "]", "=", "v", "\n", "\n", "", "else", ":", "\n", "            ", "last_name", "=", "bn_param_mx_pt", "[", "toks", "[", "-", "1", "]", "]", "\n", "renamed_dict", "[", "'bn7.'", "+", "last_name", "]", "=", "v", "\n", "\n", "", "", "return", "renamed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.resnet38": [[266, 273], ["resnet38d.Net", "resnet38d.convert_mxnet_to_torch", "Net.load_state_dict"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.convert_mxnet_to_torch"], ["", "@", "BACKBONES", ".", "register_module", "\n", "def", "resnet38", "(", "pretrained", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "Net", "(", "norm_layer", ")", "\n", "if", "pretrained", ":", "\n", "        ", "weight_dict", "=", "convert_mxnet_to_torch", "(", "model_url", ")", "\n", "model", ".", "load_state_dict", "(", "weight_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_parts.DoubleConv.__init__": [[11, 22], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mid_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "mid_channels", ":", "\n", "            ", "mid_channels", "=", "out_channels", "\n", "", "self", ".", "double_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mid_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_parts.DoubleConv.forward": [[24, 26], ["unet_parts.DoubleConv.double_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "double_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_parts.Down.__init__": [[31, 36], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "unet_parts.DoubleConv"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maxpool_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_parts.Down.forward": [[38, 40], ["unet_parts.Down.maxpool_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "maxpool_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_parts.Up.__init__": [[45, 55], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "unet_parts.DoubleConv", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "unet_parts.DoubleConv"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# if bilinear, use the normal convolutions to reduce the number of channels", "\n", "if", "bilinear", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ",", "in_channels", "//", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "in_channels", "//", "2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_parts.Up.forward": [[57, 70], ["unet_parts.Up.up", "torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_parts.Up.conv", "x2.size", "torch.pad.size", "x2.size", "torch.pad.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "# input is CHW", "\n", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "[", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "\n", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", "]", ")", "\n", "# if you have padding issues, see", "\n", "# https://github.com/HaiyongJiang/U-Net-Pytorch-Unstructured-Buggy/commit/0e854509c2cea854e247a9c615f175f76fbb2e3a", "\n", "# https://github.com/xiaopeng-liao/Pytorch-UNet/commit/8ebac70e633bac59fc22bb5195e513d5832fb3bd", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_parts.OutConv.__init__": [[73, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "OutConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_parts.OutConv.forward": [[77, 79], ["unet_parts.OutConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.__init__": [[11, 18], ["dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "columns", ")", ":", "\n", "        ", "self", ".", "data_dict", "=", "dict", "(", "[", "(", "col", ",", "[", "]", ")", "for", "col", "in", "columns", "]", ")", "\n", "# skip case level pred and labels since they has 1/2 length", "\n", "self", ".", "skip_key", "=", "[", "\"case_pred\"", ",", "\"case_label\"", ",", "\"left_case_pred\"", ",", "\n", "\"right_case_pred\"", ",", "\"fusion_case_pred\"", ",", "\"left_right_case_pred\"", "]", "\n", "# accumulator for localization", "\n", "self", ".", "localization_accumulator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.update_accumulator": [[19, 31], ["None"], "methods", ["None"], ["", "def", "update_accumulator", "(", "self", ",", "delta", ")", ":", "\n", "        ", "\"\"\"\n        Method that accumulates localization pixel-wise values for metrics such as mIOU\n        :param delta:\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "localization_accumulator", "is", "None", ":", "\n", "            ", "self", ".", "localization_accumulator", "=", "delta", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "localization_accumulator", ".", "shape", "==", "delta", ".", "shape", ",", "\"self.localization_accumulator.shape {0} != delta.shape {1}\"", ".", "format", "(", "self", ".", "localization_accumulator", ".", "shape", ",", "delta", ".", "shape", ")", "\n", "self", ".", "localization_accumulator", "+=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values": [[32, 41], ["brat_util.DocumentUnit.data_dict[].append", "process_method"], "methods", ["None"], ["", "", "def", "add_values", "(", "self", ",", "column", ",", "values", ",", "process_method", "=", "lambda", "x", ":", "x", ")", ":", "\n", "        ", "\"\"\"\n        Method that add values into the document unit\n        :param column:\n        :param values:\n        :return:\n        \"\"\"", "\n", "for", "val", "in", "values", ":", "\n", "            ", "self", ".", "data_dict", "[", "column", "]", ".", "append", "(", "process_method", "(", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.form_df": [[42, 53], ["pandas.DataFrame().reset_index", "pandas.DataFrame", "len"], "methods", ["None"], ["", "", "def", "form_df", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Method that creates a dataframe out of stored data\n        :return:\n        \"\"\"", "\n", "to_be_save_dict", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "data_dict", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "skip_key", "and", "len", "(", "self", ".", "data_dict", "[", "key", "]", ")", "!=", "0", ":", "\n", "                ", "to_be_save_dict", "[", "key", "]", "=", "self", ".", "data_dict", "[", "key", "]", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "to_be_save_dict", ")", ".", "reset_index", "(", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.get_latest_results": [[54, 64], ["len"], "methods", ["None"], ["", "def", "get_latest_results", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Method that retrieves the latest results from the stored data\n        :return:\n        \"\"\"", "\n", "to_be_save_dict", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "data_dict", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "skip_key", "and", "len", "(", "self", ".", "data_dict", "[", "key", "]", ")", "!=", "0", ":", "\n", "                ", "to_be_save_dict", "[", "key", "]", "=", "self", ".", "data_dict", "[", "key", "]", "[", "-", "1", "]", "\n", "", "", "return", "to_be_save_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.to_csv": [[65, 73], ["brat_util.DocumentUnit.form_df", "brat_util.DocumentUnit.to_csv"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.form_df", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.to_csv"], ["", "def", "to_csv", "(", "self", ",", "dir", ")", ":", "\n", "        ", "\"\"\"\n        Export to csv\n        :param dir:\n        :return:\n        \"\"\"", "\n", "df", "=", "self", ".", "form_df", "(", ")", "\n", "df", ".", "to_csv", "(", "dir", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.RuntimeProfiler.__init__": [[80, 83], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "elpased_time_dict", "=", "{", "}", "\n", "self", ".", "current_time_point", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.RuntimeProfiler.tik": [[84, 102], ["time.time", "brat_util.RuntimeProfiler.elpased_time_dict[].append"], "methods", ["None"], ["", "def", "tik", "(", "self", ",", "time_category", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Take a time point\n        :param time_category:\n        :return:\n        \"\"\"", "\n", "new_time", "=", "time", ".", "time", "(", ")", "\n", "return_time", "=", "False", "\n", "if", "self", ".", "current_time_point", "is", "not", "None", ":", "\n", "            ", "return_time", "=", "True", "\n", "elapsed_time", "=", "new_time", "-", "self", ".", "current_time_point", "\n", "if", "time_category", "is", "not", "None", ":", "\n", "                ", "if", "time_category", "not", "in", "self", ".", "elpased_time_dict", ":", "\n", "                    ", "self", ".", "elpased_time_dict", "[", "time_category", "]", "=", "[", "]", "\n", "", "self", ".", "elpased_time_dict", "[", "time_category", "]", ".", "append", "(", "elapsed_time", ")", "\n", "", "", "self", ".", "current_time_point", "=", "new_time", "\n", "if", "return_time", ":", "\n", "            ", "return", "elapsed_time", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.RuntimeProfiler.report_avg": [[104, 117], ["numpy.mean", "numpy.std", "numpy.min", "numpy.max", "len"], "methods", ["None"], ["", "", "def", "report_avg", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generate a format string for average run-time statistics\n        :return:\n        \"\"\"", "\n", "output_str", "=", "\"\"", "\n", "for", "time_category", "in", "self", ".", "elpased_time_dict", ":", "\n", "            ", "output_str", "+=", "\"category:{0}, avg_time:{1}, std_time:{2}, min_time:{3}, max_time:{4}, num_points:{5}\\n\"", ".", "format", "(", "\n", "time_category", ",", "np", ".", "mean", "(", "self", ".", "elpased_time_dict", "[", "time_category", "]", ")", ",", "np", ".", "std", "(", "self", ".", "elpased_time_dict", "[", "time_category", "]", ")", ",", "\n", "np", ".", "min", "(", "self", ".", "elpased_time_dict", "[", "time_category", "]", ")", ",", "np", ".", "max", "(", "self", ".", "elpased_time_dict", "[", "time_category", "]", ")", ",", "\n", "len", "(", "self", ".", "elpased_time_dict", "[", "time_category", "]", ")", "\n", ")", "\n", "", "return", "output_str", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.RuntimeProfiler.report_latest": [[118, 127], ["None"], "methods", ["None"], ["", "def", "report_latest", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generate a format string for the latest run-time statistics\n        :return:\n        \"\"\"", "\n", "output_str", "=", "\"\"", "\n", "for", "time_category", "in", "self", ".", "elpased_time_dict", ":", "\n", "            ", "output_str", "+=", "\"category:{0}, runtime:{1} \\n\"", ".", "format", "(", "time_category", ",", "self", ".", "elpased_time_dict", "[", "time_category", "]", "[", "-", "1", "]", ")", "\n", "", "return", "output_str", "", "", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.StackedRandomAffine.__call__": [[122, 130], ["loading.StackedRandomAffine.get_params", "torchvision.affine", "torchvision.affine"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.None.train.get_params"], ["    ", "def", "__call__", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "\"\"\"\n            img (PIL Image): Image to be transformed.\n        Returns:\n            PIL Image: Affine transformed image.\n        \"\"\"", "\n", "ret", "=", "self", ".", "get_params", "(", "self", ".", "degrees", ",", "self", ".", "translate", ",", "self", ".", "scale", ",", "self", ".", "shear", ",", "imgs", "[", "0", "]", ".", "size", ")", "\n", "return", "[", "F", ".", "affine", "(", "x", ",", "*", "ret", ",", "resample", "=", "self", ".", "resample", ",", "fillcolor", "=", "self", ".", "fillcolor", ")", "for", "x", "in", "imgs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.BaseDataset.__init__": [[136, 182], ["os.path.join", "os.path.join", "random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "loading.StackedRandomAffine", "transform_list.append", "torchvision.Compose", "torchvision.Compose", "int", "range", "copy.deepcopy", "transform_list.append", "torchvision.ToTensor", "torchvision.ToTensor", "open", "pickle.load", "copy.deepcopy", "round", "numpy.random.permutation", "len", "torchvision.Resize", "torchvision.Resize", "numpy.arange", "loading.BaseDataset.noise_function", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parameters", ",", "data_list", ",", "augmentation", "=", "False", ",", "noise_label", "=", "None", ",", "noise_level", "=", "None", ",", "cache_dir", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_list", "=", "data_list", "\n", "self", ".", "data_dir", "=", "parameters", "[", "\"data_dir\"", "]", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"img\"", ")", "\n", "self", ".", "seg_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"label\"", ")", "\n", "\n", "# reset seeds", "\n", "random", ".", "seed", "(", "parameters", "[", "\"seed\"", "]", ")", "\n", "torch", ".", "manual_seed", "(", "parameters", "[", "\"seed\"", "]", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "parameters", "[", "\"seed\"", "]", ")", "\n", "np", ".", "random", ".", "seed", "(", "parameters", "[", "\"seed\"", "]", ")", "\n", "\n", "# load cached images and labels if necessary", "\n", "if", "cache_dir", "is", "None", ":", "\n", "            ", "self", ".", "cache_label", "=", "None", "\n", "self", ".", "cache_img", "=", "None", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "cache_dir", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "cache_img", ",", "self", ".", "cache_label", "=", "pickle", ".", "load", "(", "f", ")", "\n", "self", ".", "cache_clean_label", "=", "copy", ".", "deepcopy", "(", "self", ".", "cache_label", ")", "\n", "\n", "# noise label functions", "\n", "", "", "self", ".", "noise_function", "=", "None", "if", "noise_label", "is", "None", "else", "NOISE_LABEL_DICT", "[", "noise_label", "]", "\n", "if", "self", ".", "noise_function", "is", "not", "None", "and", "noise_level", "is", "not", "None", ":", "\n", "            ", "noise_number", "=", "int", "(", "round", "(", "noise_level", "*", "len", "(", "self", ".", "data_list", ")", ")", ")", "\n", "self", ".", "noise_index_list", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "len", "(", "self", ".", "data_list", ")", ")", ")", "[", ":", "noise_number", "]", "\n", "# add noise to the cached labels", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "data_list", ")", ")", ":", "\n", "                ", "if", "i", "in", "self", ".", "noise_index_list", ":", "\n", "                    ", "img_name", "=", "self", ".", "data_list", "[", "i", "]", "\n", "self", ".", "cache_label", "[", "img_name", "]", "=", "self", ".", "noise_function", "(", "self", ".", "cache_label", "[", "img_name", "]", ")", "\n", "", "", "self", ".", "cache_noisy_label", "=", "copy", ".", "deepcopy", "(", "self", ".", "cache_label", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cache_noisy_label", "=", "self", ".", "cache_clean_label", "\n", "\n", "# augmentation setting", "\n", "", "self", ".", "augmentation", "=", "augmentation", "\n", "self", ".", "augmentation_function", "=", "StackedRandomAffine", "(", "degrees", "=", "(", "-", "45", ",", "45", ")", ",", "translate", "=", "(", "0.1", ",", "0.1", ")", ",", "scale", "=", "(", "0.8", ",", "1.5", ")", ")", "\n", "\n", "# transformation setting", "\n", "transform_list", "=", "[", "]", "\n", "if", "parameters", "[", "\"resize\"", "]", "is", "not", "None", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "size", "=", "(", "parameters", "[", "\"resize\"", "]", ",", "parameters", "[", "\"resize\"", "]", ")", ",", "\n", "interpolation", "=", "0", ")", ")", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.BaseDataset.__len__": [[183, 185], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.BraTSDataset.__init__": [[189, 191], ["loading.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "parameters", ",", "data_list", ",", "augmentation", "=", "False", ",", "noise_label", "=", "None", ")", ":", "\n", "        ", "super", "(", "BraTSDataset", ",", "self", ")", ".", "__init__", "(", "parameters", ",", "data_list", ",", "augmentation", ",", "noise_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.BraTSDataset.__getitem__": [[192, 223], ["os.path.join", "os.path.join", "numpy.load().astype", "numpy.load().astype", "torch.cat", "torch.cat", "loading.BraTSDataset.noise_function", "PIL.Image.fromarray", "PIL.Image.fromarray", "loading.BraTSDataset.augmentation_function", "loading.standarize", "loading.BraTSDataset.to_tensor", "torch.cat.float", "torch.cat.long", "numpy.load", "numpy.load", "img[].astype", "range", "seg[].astype", "range", "loading.BraTSDataset.to_tensor().float", "loading.BraTSDataset.to_tensor"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.standarize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_name", "=", "self", ".", "data_list", "[", "index", "]", "\n", "\n", "# put up paths", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "img_name", ")", "\n", "seg_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "seg_dir", ",", "img_name", ")", "\n", "\n", "# load images and seg", "\n", "img", "=", "np", ".", "load", "(", "img_path", ")", ".", "astype", "(", "\"int16\"", ")", "\n", "seg", "=", "np", ".", "load", "(", "seg_path", ")", ".", "astype", "(", "\"int8\"", ")", "\n", "if", "self", ".", "noise_function", "is", "not", "None", ":", "\n", "            ", "seg", "=", "self", ".", "noise_function", "(", "seg", ")", "\n", "\n", "# convert to pil image", "\n", "", "img_channel_pils", "=", "[", "Image", ".", "fromarray", "(", "img", "[", "i", ",", ":", ",", ":", "]", ".", "astype", "(", "\"int16\"", ")", ")", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", "]", "\n", "seg_channel_pils", "=", "[", "Image", ".", "fromarray", "(", "seg", "[", "i", ",", ":", ",", ":", "]", ".", "astype", "(", "\"int8\"", ")", ")", "for", "i", "in", "range", "(", "seg", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n", "# augmentation", "\n", "if", "self", ".", "augmentation", ":", "\n", "            ", "aug_res", "=", "self", ".", "augmentation_function", "(", "img_channel_pils", "+", "seg_channel_pils", ")", "\n", "img_channel_pils", "=", "aug_res", "[", ":", "4", "]", "\n", "seg_channel_pils", "=", "aug_res", "[", "4", ":", "]", "\n", "\n", "# post-process", "\n", "", "img_channel_torch", "=", "[", "standarize", "(", "self", ".", "to_tensor", "(", "x", ")", ".", "float", "(", ")", ")", "for", "x", "in", "img_channel_pils", "]", "\n", "label_channel_torch", "=", "[", "self", ".", "to_tensor", "(", "x", ")", "for", "x", "in", "seg_channel_pils", "]", "\n", "img_torch", "=", "torch", ".", "cat", "(", "img_channel_torch", ",", "dim", "=", "0", ")", "\n", "label_torch", "=", "torch", ".", "cat", "(", "label_channel_torch", ",", "dim", "=", "0", ")", "\n", "label_torch", "[", "label_torch", ">", "0", "]", "=", "1", "\n", "\n", "return", "img_torch", ".", "float", "(", ")", ",", "label_torch", ".", "long", "(", ")", ",", "img_name", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.SegTHORDataset.__init__": [[225, 227], ["loading.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "parameters", ",", "data_list", ",", "augmentation", "=", "False", ",", "noise_label", "=", "None", ",", "noise_level", "=", "None", ",", "cache_dir", "=", "None", ")", ":", "\n", "        ", "super", "(", "SegTHORDataset", ",", "self", ")", ".", "__init__", "(", "parameters", ",", "data_list", ",", "augmentation", ",", "noise_label", ",", "noise_level", ",", "cache_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.SegTHORDataset.reset_labels": [[228, 230], ["None"], "methods", ["None"], ["", "def", "reset_labels", "(", "self", ",", "new_labels", ")", ":", "\n", "        ", "self", ".", "cache_label", "=", "new_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.SegTHORDataset.__getitem__": [[231, 267], ["PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "loading.standarize", "loading.SegTHORDataset.transform", "loading.SegTHORDataset.transform", "loading.SegTHORDataset.transform", "os.path.join", "numpy.load().astype", "numpy.load().astype.min", "os.path.join", "numpy.load().astype", "loading.SegTHORDataset.augmentation_function", "loading.SegTHORDataset.transform().float", "standarize.float", "loading.SegTHORDataset.long", "loading.SegTHORDataset.long", "loading.SegTHORDataset.long", "loading.SegTHORDataset.noise_function", "numpy.load", "numpy.load", "loading.SegTHORDataset.transform"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.standarize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_name", "=", "self", ".", "data_list", "[", "index", "]", "\n", "# load image and the segmentation label", "\n", "if", "self", ".", "cache_img", "is", "None", ":", "\n", "            ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "img_name", ")", "\n", "img", "=", "np", ".", "load", "(", "img_path", ")", ".", "astype", "(", "\"int16\"", ")", "\n", "img", "-=", "img", ".", "min", "(", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "cache_img", "[", "img_name", "]", "\n", "", "if", "self", ".", "cache_label", "is", "None", ":", "\n", "            ", "seg_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "seg_dir", ",", "img_name", ")", "\n", "seg", "=", "np", ".", "load", "(", "seg_path", ")", ".", "astype", "(", "\"int8\"", ")", "\n", "# add noise to the label if needed", "\n", "if", "self", ".", "noise_function", "is", "not", "None", "and", "index", "in", "self", ".", "noise_index_list", ":", "\n", "                ", "seg", "=", "self", ".", "noise_function", "(", "seg", ")", "\n", "", "", "else", ":", "\n", "            ", "seg", "=", "self", ".", "cache_label", "[", "img_name", "]", "\n", "clean_seg", "=", "self", ".", "cache_clean_label", "[", "img_name", "]", "\n", "original_noisy_seg", "=", "self", ".", "cache_noisy_label", "[", "img_name", "]", "\n", "\n", "# convert to pil image", "\n", "", "img_pils", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "seg_pils", "=", "Image", ".", "fromarray", "(", "seg", ")", "\n", "clean_seg_pils", "=", "Image", ".", "fromarray", "(", "clean_seg", ")", "\n", "original_noisy_seg_pils", "=", "Image", ".", "fromarray", "(", "original_noisy_seg", ")", "\n", "\n", "# augmentation", "\n", "if", "self", ".", "augmentation", ":", "\n", "            ", "img_pils", ",", "seg_pils", ",", "clean_seg_pils", ",", "original_noisy_seg_pils", "=", "self", ".", "augmentation_function", "(", "[", "img_pils", ",", "seg_pils", ",", "clean_seg_pils", ",", "original_noisy_seg_pils", "]", ")", "\n", "\n", "# post-process", "\n", "", "img_torch", "=", "standarize", "(", "self", ".", "transform", "(", "img_pils", ")", ".", "float", "(", ")", ")", "\n", "label_torch", "=", "self", ".", "transform", "(", "seg_pils", ")", "\n", "clean_label_torch", "=", "self", ".", "transform", "(", "clean_seg_pils", ")", "\n", "original_noisy_torch", "=", "self", ".", "transform", "(", "original_noisy_seg_pils", ")", "\n", "return", "img_torch", ".", "float", "(", ")", ",", "label_torch", ".", "long", "(", ")", ",", "original_noisy_torch", ".", "long", "(", ")", ",", "clean_label_torch", ".", "long", "(", ")", ",", "img_name", "", "", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.final_noise_function": [[10, 14], ["numpy.random.choice", "numpy.random.choice", "loading.under_over_seg", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.under_over_seg"], ["def", "final_noise_function", "(", "mat", ")", ":", "\n", "    ", "mode", "=", "np", ".", "random", ".", "choice", "(", "[", "\"under\"", ",", "\"over\"", "]", ")", "\n", "iterations", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "2", ",", "5", ")", ")", "\n", "return", "under_over_seg", "(", "mat", ",", "iterations", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.under_over_seg": [[16, 43], ["numpy.copy", "numpy.ones", "numpy.sum", "numpy.sqrt", "int", "int", "round", "round", "cv2.resize", "cv2.erode", "cv2.resize", "numpy.where", "binary_mat.astype", "resized_img.astype", "cv2.dilate", "numpy.zeros", "numpy.where", "resized_img.astype", "numpy.ones"], "function", ["None"], ["", "def", "under_over_seg", "(", "mat", ",", "iteration", "=", "1", ",", "mode", "=", "\"under\"", ")", ":", "\n", "    ", "target_num", "=", "1000", "\n", "mat", "=", "np", ".", "copy", "(", "mat", ")", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "for", "cls", "in", "[", "1", ",", "3", ",", "4", ",", "2", "]", ":", "\n", "        ", "binary_mat", "=", "mat", "==", "cls", "\n", "foreground_num", "=", "np", ".", "sum", "(", "binary_mat", ")", "\n", "if", "foreground_num", "!=", "0", ":", "\n", "# resize the image to match the foreground pixel number", "\n", "            ", "h", ",", "w", "=", "mat", ".", "shape", "\n", "ratio", "=", "np", ".", "sqrt", "(", "target_num", "/", "foreground_num", ")", "\n", "h_new", "=", "int", "(", "round", "(", "h", "*", "ratio", ")", ")", "\n", "w_new", "=", "int", "(", "round", "(", "w", "*", "ratio", ")", ")", "\n", "resized_img", "=", "cv2", ".", "resize", "(", "binary_mat", ".", "astype", "(", "\"uint8\"", ")", ",", "(", "w_new", ",", "h_new", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", ">", "0", "\n", "# erosion or dilation", "\n", "if", "mode", "==", "\"under\"", ":", "\n", "                ", "binary_mat_processed", "=", "cv2", ".", "erode", "(", "resized_img", ".", "astype", "(", "\"uint8\"", ")", ",", "kernel", ",", "iterations", "=", "iteration", ")", "\n", "", "elif", "mode", "==", "\"over\"", ":", "\n", "                ", "binary_mat_processed", "=", "cv2", ".", "dilate", "(", "resized_img", ".", "astype", "(", "\"uint8\"", ")", ",", "kernel", ",", "iterations", "=", "iteration", ")", "\n", "# resize back to the original size", "\n", "", "binary_mat_processed_resized", "=", "cv2", ".", "resize", "(", "binary_mat_processed", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", ">", "0", "\n", "# fill in the gap", "\n", "if", "mode", "==", "\"under\"", ":", "\n", "                ", "mat", "=", "np", ".", "where", "(", "binary_mat_processed_resized", "!=", "binary_mat", ",", "np", ".", "zeros", "(", "mat", ".", "shape", ")", ",", "mat", ")", "\n", "", "elif", "mode", "==", "\"over\"", ":", "\n", "                ", "mat", "=", "np", ".", "where", "(", "binary_mat_processed_resized", "&", "(", "mat", "==", "0", ")", ",", "np", ".", "ones", "(", "mat", ".", "shape", ")", "*", "cls", ",", "mat", ")", "\n", "", "", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.under_seg": [[44, 63], ["numpy.copy", "numpy.ones", "numpy.ones", "numpy.ones", "cv2.erode", "numpy.where", "binary_mat.astype", "numpy.zeros"], "function", ["None"], ["", "def", "under_seg", "(", "mat", ")", ":", "\n", "    ", "mat", "=", "np", ".", "copy", "(", "mat", ")", "\n", "kernel_small", "=", "np", ".", "ones", "(", "(", "2", ",", "2", ")", ",", "np", ".", "uint8", ")", "\n", "kernel_medium", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "kernel_large", "=", "np", ".", "ones", "(", "(", "5", ",", "5", ")", ",", "np", ".", "uint8", ")", "\n", "for", "cls", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", ":", "\n", "        ", "binary_mat", "=", "mat", "==", "cls", "\n", "if", "cls", "in", "[", "1", ",", "3", "]", ":", "\n", "            ", "kernel_used", "=", "kernel_small", "\n", "iteration", "=", "1", "\n", "", "elif", "cls", "==", "2", ":", "\n", "            ", "kernel_used", "=", "kernel_large", "\n", "iteration", "=", "2", "\n", "", "else", ":", "\n", "            ", "kernel_used", "=", "kernel_medium", "\n", "iteration", "=", "2", "\n", "", "binary_mat_eroded", "=", "cv2", ".", "erode", "(", "binary_mat", ".", "astype", "(", "\"uint8\"", ")", ",", "kernel_used", ",", "iterations", "=", "iteration", ")", "\n", "mat", "=", "np", ".", "where", "(", "binary_mat_eroded", "!=", "binary_mat", ",", "np", ".", "zeros", "(", "mat", ".", "shape", ")", ",", "mat", ")", "\n", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.over_seg": [[64, 80], ["numpy.copy", "numpy.ones", "numpy.ones", "numpy.ones", "cv2.dilate", "numpy.where", "binary_mat.astype", "numpy.ones"], "function", ["None"], ["", "def", "over_seg", "(", "mat", ")", ":", "\n", "    ", "mat", "=", "np", ".", "copy", "(", "mat", ")", "\n", "kernel_small", "=", "np", ".", "ones", "(", "(", "2", ",", "2", ")", ",", "np", ".", "uint8", ")", "\n", "kernel_medium", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "kernel_large", "=", "np", ".", "ones", "(", "(", "5", ",", "5", ")", ",", "np", ".", "uint8", ")", "\n", "for", "cls", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", ":", "\n", "        ", "if", "cls", "in", "[", "1", ",", "3", "]", ":", "\n", "            ", "kernel_used", "=", "kernel_small", "\n", "", "elif", "cls", "==", "3", ":", "\n", "            ", "kernel_used", "=", "kernel_large", "\n", "", "else", ":", "\n", "            ", "kernel_used", "=", "kernel_medium", "\n", "", "binary_mat", "=", "mat", "==", "cls", "\n", "binary_mat_dilated", "=", "cv2", ".", "dilate", "(", "binary_mat", ".", "astype", "(", "\"uint8\"", ")", ",", "kernel_used", ",", "iterations", "=", "2", ")", "\n", "mat", "=", "np", ".", "where", "(", "binary_mat_dilated", ",", "np", ".", "ones", "(", "mat", ".", "shape", ")", "*", "cls", ",", "mat", ")", "\n", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.wrong_seg": [[81, 90], ["numpy.copy", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice"], "function", ["None"], ["", "def", "wrong_seg", "(", "mat", ")", ":", "\n", "    ", "mat_cp", "=", "np", ".", "copy", "(", "mat", ")", "\n", "channel_0", "=", "np", ".", "random", ".", "choice", "(", "[", "1", ",", "2", "]", ")", "\n", "channel_1", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "2", "]", ")", "\n", "channel_2", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ")", "\n", "mat_cp", "[", "0", ",", ":", ",", ":", "]", "=", "mat", "[", "channel_0", ",", ":", ",", ":", "]", "\n", "mat_cp", "[", "1", ",", ":", ",", ":", "]", "=", "mat", "[", "channel_1", ",", ":", ",", ":", "]", "\n", "mat_cp", "[", "2", ",", ":", ",", ":", "]", "=", "mat", "[", "channel_2", ",", ":", ",", ":", "]", "\n", "return", "mat_cp", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.noise_seg": [[91, 107], ["numpy.copy", "numpy.random.uniform", "numpy.random.choice", "numpy.where", "numpy.where", "numpy.zeros"], "function", ["None"], ["", "def", "noise_seg", "(", "mat", ",", "noise_level", "=", "0.05", ")", ":", "\n", "    ", "\"\"\"\n    P(out=0 | in=0) = 1-noise_level\n    P(out=1234 | in=0) = noise_level/4\n    P(out=0 | in=1234) = noise_level\n    P(out=1234 | in=1234) = 1-noise_level\n    \"\"\"", "\n", "mat", "=", "np", ".", "copy", "(", "mat", ")", "\n", "fate", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "0", ",", "high", "=", "1", ",", "size", "=", "mat", ".", "shape", ")", "\n", "# deal with 0", "\n", "is_zero_indicator", "=", "mat", "==", "0", "\n", "background_flip_to", "=", "np", ".", "random", ".", "choice", "(", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "size", "=", "mat", ".", "shape", ")", "\n", "mat", "=", "np", ".", "where", "(", "(", "fate", "<=", "noise_level", ")", "&", "is_zero_indicator", ",", "background_flip_to", ",", "mat", ")", "\n", "# deal with 1,2,3,4", "\n", "mat", "=", "np", ".", "where", "(", "(", "fate", "<=", "noise_level", ")", "&", "(", "~", "is_zero_indicator", ")", ",", "np", ".", "zeros", "(", "mat", ".", "shape", ")", ",", "mat", ")", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.mixed_seg": [[108, 116], ["numpy.random.uniform", "loading.under_seg", "loading.over_seg", "loading.noise_seg"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.under_seg", "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.over_seg", "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.noise_seg"], ["", "def", "mixed_seg", "(", "mat", ")", ":", "\n", "    ", "fate", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "fate", "<", "0.33", ":", "\n", "        ", "return", "under_seg", "(", "mat", ")", "\n", "", "elif", "fate", "<", "0.67", ":", "\n", "        ", "return", "over_seg", "(", "mat", ")", "\n", "", "else", ":", "\n", "        ", "return", "noise_seg", "(", "mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.standarize": [[132, 134], ["img.std", "img.mean"], "function", ["None"], ["", "", "def", "standarize", "(", "img", ")", ":", "\n", "    ", "return", "(", "img", "-", "img", ".", "mean", "(", ")", ")", "/", "img", ".", "std", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__": [[9, 26], ["nn.Module.__init__", "unet_parts.DoubleConv", "unet_parts.Down", "unet_parts.Down", "unet_parts.Down", "unet_parts.Down", "unet_parts.Up", "unet_parts.Up", "unet_parts.Up", "unet_parts.Up", "unet_parts.OutConv"], "methods", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "n_classes", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "bilinear", "=", "bilinear", "\n", "\n", "self", ".", "inc", "=", "DoubleConv", "(", "n_channels", ",", "64", ")", "\n", "self", ".", "down1", "=", "Down", "(", "64", ",", "128", ")", "\n", "self", ".", "down2", "=", "Down", "(", "128", ",", "256", ")", "\n", "self", ".", "down3", "=", "Down", "(", "256", ",", "512", ")", "\n", "factor", "=", "2", "if", "bilinear", "else", "1", "\n", "self", ".", "down4", "=", "Down", "(", "512", ",", "1024", "//", "factor", ")", "\n", "self", ".", "up1", "=", "Up", "(", "1024", ",", "512", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up2", "=", "Up", "(", "512", ",", "256", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up3", "=", "Up", "(", "256", ",", "128", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up4", "=", "Up", "(", "128", ",", "64", ",", "bilinear", ")", "\n", "self", ".", "outc", "=", "OutConv", "(", "64", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.unet_model.UNet.forward": [[27, 39], ["unet_model.UNet.inc", "unet_model.UNet.down1", "unet_model.UNet.down2", "unet_model.UNet.down3", "unet_model.UNet.down4", "unet_model.UNet.up1", "unet_model.UNet.up2", "unet_model.UNet.up3", "unet_model.UNet.up4", "unet_model.UNet.outc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "inc", "(", "x", ")", "\n", "x2", "=", "self", ".", "down1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "down2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "down3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "down4", "(", "x4", ")", "\n", "x", "=", "self", ".", "up1", "(", "x5", ",", "x4", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "x3", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "x2", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "x1", ")", "\n", "logits", "=", "self", ".", "outc", "(", "x", ")", "\n", "return", "logits", "", "", "", ""]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.curve_func": [[4, 6], ["numpy.exp"], "function", ["None"], ["def", "curve_func", "(", "x", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "return", "a", "*", "(", "1", "-", "np", ".", "exp", "(", "-", "1", "/", "c", "*", "x", "**", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.fit": [[8, 11], ["scipy.optimize.curve_fit", "tuple", "numpy.geomspace", "len", "label_correction.curve_func"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.curve_func"], ["", "def", "fit", "(", "func", ",", "x", ",", "y", ")", ":", "\n", "    ", "popt", ",", "pcov", "=", "curve_fit", "(", "func", ",", "x", ",", "y", ",", "p0", "=", "(", "1", ",", "1", ",", "1", ")", ",", "method", "=", "'trf'", ",", "sigma", "=", "np", ".", "geomspace", "(", "1", ",", ".1", ",", "len", "(", "y", ")", ")", ",", "absolute_sigma", "=", "True", ",", "bounds", "=", "(", "[", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "1", ",", "np", ".", "inf", "]", ")", ")", "\n", "return", "tuple", "(", "popt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.derivation": [[13, 16], ["numpy.exp"], "function", ["None"], ["", "def", "derivation", "(", "x", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "x", "=", "x", "+", "1e-6", "# numerical robustness", "\n", "return", "a", "*", "b", "*", "1", "/", "c", "*", "np", ".", "exp", "(", "-", "1", "/", "c", "*", "x", "**", "b", ")", "*", "(", "x", "**", "(", "b", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.label_update_epoch": [[18, 27], ["numpy.linspace", "label_correction.fit", "numpy.arange", "label_correction.curve_func", "len", "abs", "abs", "numpy.sum", "label_correction.derivation", "len", "abs", "abs", "label_correction.derivation", "label_correction.derivation"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.fit", "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.curve_func", "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.derivation", "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.derivation", "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.derivation"], ["", "def", "label_update_epoch", "(", "ydata_fit", ",", "n_epoch", "=", "16", ",", "threshold", "=", "0.9", ",", "eval_interval", "=", "100", ",", "num_iter_per_epoch", "=", "10581", "/", "10", ")", ":", "\n", "    ", "xdata_fit", "=", "np", ".", "linspace", "(", "0", ",", "len", "(", "ydata_fit", ")", "*", "eval_interval", "/", "num_iter_per_epoch", ",", "len", "(", "ydata_fit", ")", ")", "\n", "a", ",", "b", ",", "c", "=", "fit", "(", "curve_func", ",", "xdata_fit", ",", "ydata_fit", ")", "\n", "epoch", "=", "np", ".", "arange", "(", "1", ",", "n_epoch", ")", "\n", "y_hat", "=", "curve_func", "(", "epoch", ",", "a", ",", "b", ",", "c", ")", "\n", "relative_change", "=", "abs", "(", "abs", "(", "derivation", "(", "epoch", ",", "a", ",", "b", ",", "c", ")", ")", "-", "abs", "(", "derivation", "(", "1", ",", "a", ",", "b", ",", "c", ")", ")", ")", "/", "abs", "(", "derivation", "(", "1", ",", "a", ",", "b", ",", "c", ")", ")", "\n", "relative_change", "[", "relative_change", ">", "1", "]", "=", "0", "\n", "update_epoch", "=", "np", ".", "sum", "(", "relative_change", "<=", "threshold", ")", "+", "1", "\n", "return", "update_epoch", "#, a, b, c", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.if_update": [[28, 44], ["print", "range", "label_correction.label_update_epoch", "len", "len", "max"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.label_update_epoch"], ["", "def", "if_update", "(", "iou_value", ",", "current_epoch", ",", "n_epoch", "=", "16", ",", "threshold", "=", "0.90", ",", "eval_interval", "=", "1", ",", "num_iter_per_epoch", "=", "1", ")", ":", "\n", "# check iou_value", "\n", "    ", "start_iter", "=", "0", "\n", "print", "(", "\"len(iou_value)=\"", ",", "len", "(", "iou_value", ")", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "iou_value", ")", "-", "1", ")", ":", "\n", "        ", "if", "iou_value", "[", "k", "+", "1", "]", "-", "iou_value", "[", "k", "]", "<", "0.1", ":", "\n", "            ", "start_iter", "=", "max", "(", "start_iter", ",", "k", "+", "1", ")", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "shifted_epoch", "=", "start_iter", "*", "eval_interval", "/", "num_iter_per_epoch", "\n", "#cut out the first few entries", "\n", "iou_value", "=", "iou_value", "[", "start_iter", ":", "]", "\n", "update_epoch", "=", "label_update_epoch", "(", "iou_value", ",", "n_epoch", "=", "n_epoch", ",", "threshold", "=", "threshold", ",", "eval_interval", "=", "eval_interval", ",", "num_iter_per_epoch", "=", "num_iter_per_epoch", ")", "\n", "# Shift back", "\n", "update_epoch", "=", "shifted_epoch", "+", "update_epoch", "\n", "return", "current_epoch", ">=", "update_epoch", "#, update_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.merge_labels_with_skip": [[46, 120], ["numpy.argmax", "set().isdisjoint", "numpy.where().astype", "update_list.append", "set", "numpy.unique", "numpy.where().astype", "set", "numpy.max", "numpy.where", "numpy.unique", "numpy.where", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.unique", "home.repos.pwc.inspect_result.kangningthu_adele.datasets.metric.unique"], ["", "def", "merge_labels_with_skip", "(", "original_labels", ",", "model_predictions", ",", "need_label_correction_dict", ",", "conf_threshold", "=", "0.8", ",", "logic_255", "=", "False", ",", "class_constraint", "=", "True", ",", "conf_threshold_bg", "=", "0.95", ")", ":", "\n", "\n", "\n", "    ", "new_label_dict", "=", "{", "}", "\n", "update_list", "=", "[", "]", "\n", "for", "c", "in", "need_label_correction_dict", ":", "\n", "        ", "if", "need_label_correction_dict", "[", "c", "]", ":", "\n", "            ", "update_list", ".", "append", "(", "c", ")", "\n", "\n", "\n", "", "", "for", "pid", "in", "model_predictions", ":", "\n", "        ", "pred_prob", "=", "model_predictions", "[", "pid", "]", "\n", "pred", "=", "np", ".", "argmax", "(", "pred_prob", ",", "axis", "=", "0", ")", "\n", "label", "=", "original_labels", "[", "pid", "]", "\n", "\n", "# print(np.unique(label))", "\n", "# print(update_list)", "\n", "# does not belong to the class that need to be updated, then we do not need the following updating process", "\n", "if", "set", "(", "np", ".", "unique", "(", "label", ")", ")", ".", "isdisjoint", "(", "set", "(", "update_list", ")", ")", ":", "\n", "            ", "new_label_dict", "[", "pid", "]", "=", "label", "\n", "continue", "\n", "\n", "\n", "# if the prediction is confident", "\n", "# confident = np.max(pred_prob, axis=0) > conf_threshold", "\n", "\n", "# if the prediction is confident", "\n", "# code support different threshold for foreground and background,", "\n", "# during the experiment, we always set them to be the same for simplicity", "\n", "", "confident", "=", "(", "np", ".", "max", "(", "pred_prob", "[", "1", ":", "]", ",", "axis", "=", "0", ")", ">", "conf_threshold", ")", "|", "(", "pred_prob", "[", "0", "]", ">", "conf_threshold_bg", ")", "\n", "\n", "# before update: only class that need correction will be replaced", "\n", "belong_to_correction_class", "=", "label", "==", "0", "\n", "for", "c", "in", "need_label_correction_dict", ":", "\n", "            ", "if", "need_label_correction_dict", "[", "c", "]", ":", "\n", "                ", "belong_to_correction_class", "|=", "(", "label", "==", "c", ")", "\n", "\n", "# after update: only pixels that will be flipped to the allowed classes will be updated", "\n", "", "", "after_belong", "=", "pred", "==", "0", "\n", "for", "c", "in", "need_label_correction_dict", ":", "\n", "            ", "if", "need_label_correction_dict", "[", "c", "]", ":", "\n", "                ", "after_belong", "|=", "(", "pred", "==", "c", ")", "\n", "\n", "# combine all three masks together", "\n", "", "", "replace_flag", "=", "confident", "&", "belong_to_correction_class", "&", "after_belong", "\n", "\n", "\n", "# the class constraint", "\n", "if", "class_constraint", ":", "\n", "            ", "unique_class", "=", "np", ".", "unique", "(", "label", ")", "\n", "# print(unique_class)", "\n", "# indx = torch.zeros((h, w), dtype=torch.long)", "\n", "class_constraint_indx", "=", "(", "pred", "==", "0", ")", "\n", "for", "element", "in", "unique_class", ":", "\n", "                ", "class_constraint_indx", "=", "class_constraint_indx", "|", "(", "pred", "==", "element", ")", "\n", "\n", "\n", "", "replace_flag", "=", "replace_flag", "&", "(", "class_constraint_indx", "!=", "0", ")", "\n", "\n", "\n", "# replace with the new label", "\n", "", "next_label", "=", "np", ".", "where", "(", "replace_flag", ",", "pred", ",", "label", ")", ".", "astype", "(", "\"int32\"", ")", "\n", "\n", "# logic 255:", "\n", "# - rule# 1: if label[i,j] != 0, and pred[i,j] = 0, then next_label[i,j] = 255", "\n", "# - rule# 2: if label[i,j] = 255 and pred[i,j] != 0 and confident, then next_label[i,j] = pred[i,j]", "\n", "# rule 2 is already enforced above, don't need additional code", "\n", "if", "logic_255", ":", "\n", "            ", "rule_1_flag", "=", "(", "label", "!=", "0", ")", "&", "(", "pred", "==", "0", ")", "\n", "next_label", "=", "np", ".", "where", "(", "rule_1_flag", ",", "np", ".", "ones", "(", "next_label", ".", "shape", ")", "*", "255", ",", "next_label", ")", ".", "astype", "(", "\"int32\"", ")", "\n", "\n", "", "new_label_dict", "[", "pid", "]", "=", "next_label", "\n", "\n", "", "return", "new_label_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.dice_coefficient": [[11, 26], ["torch.where", "torch.where", "torch.where", "label.sum().sum", "pred.pow().sum().sum", "label.pow().sum().sum", "torch.ones().to", "torch.ones().to", "torch.ones().to", "float", "label.sum", "pred.pow().sum", "label.pow().sum", "torch.ones", "torch.ones", "torch.ones", "dice_val.size", "pred.pow", "label.pow"], "function", ["None"], ["def", "dice_coefficient", "(", "pred", ",", "label", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"\n    Function that calculates the dice coefficient\n    :param pred: N,C,H,W\n    :param label: N,C,H,W\n    :param epsilon:\n    :return: N,C\n    \"\"\"", "\n", "# populate the output holder", "\n", "numerator", "=", "(", "pred", "*", "label", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "*", "2", "\n", "denominator", "=", "pred", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "+", "label", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "+", "epsilon", "\n", "dice_val", "=", "numerator", "/", "denominator", "\n", "# return NaN for example where a class is not present", "\n", "no_show_indicator", "=", "label", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "==", "0", "\n", "return", "torch", ".", "where", "(", "no_show_indicator", ",", "torch", ".", "ones", "(", "dice_val", ".", "size", "(", ")", ")", ".", "to", "(", "dice_val", ".", "device", ")", "*", "float", "(", "'nan'", ")", ",", "dice_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.avg_masked_dice": [[28, 36], ["train_segthor.dice_coefficient", "torch.where", "torch.where", "torch.where", "dice_imputed_avg.mean", "torch.isnan", "torch.isnan", "torch.isnan", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.where.sum", "torch.zeros", "torch.zeros", "torch.zeros", "one_minus_dice.size", "torch.isnan().float", "torch.isnan().float", "torch.isnan().float", "torch.isnan", "torch.isnan", "torch.isnan"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.dice_coefficient"], ["", "def", "avg_masked_dice", "(", "pred_prob", ",", "dice_label", ")", ":", "\n", "# loss = 1 - dice", "\n", "    ", "dice", "=", "dice_coefficient", "(", "pred_prob", ",", "dice_label", ")", "\n", "one_minus_dice", "=", "1.0", "-", "dice", "\n", "# impute NaN to 0 and then calculate average that ignore NaN", "\n", "dice_imputed", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "one_minus_dice", ")", ",", "torch", ".", "zeros", "(", "one_minus_dice", ".", "size", "(", ")", ")", ".", "to", "(", "one_minus_dice", ".", "device", ")", ",", "one_minus_dice", ")", "\n", "dice_imputed_avg", "=", "dice_imputed", ".", "sum", "(", "dim", "=", "1", ")", "/", "(", "1.0", "-", "torch", ".", "isnan", "(", "dice", ")", ".", "float", "(", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "dice_imputed_avg", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.dice_loss": [[38, 59], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "train_segthor.avg_masked_dice", "train_segthor.avg_masked_dice", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.avg_masked_dice", "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.avg_masked_dice"], ["", "def", "dice_loss", "(", "pred", ",", "label", ",", "ignore_background", "=", "False", ")", ":", "\n", "# prepare label and probability", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dice_label", "=", "torch", ".", "cat", "(", "[", "(", "label", "==", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "(", "label", "==", "1", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "(", "label", "==", "2", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "(", "label", "==", "3", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "(", "label", "==", "4", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "]", ",", "\n", "dim", "=", "1", ")", "\n", "if", "ignore_background", ":", "\n", "            ", "dice_label", "=", "torch", ".", "cat", "(", "[", "(", "label", "==", "1", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "(", "label", "==", "2", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "(", "label", "==", "3", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "(", "label", "==", "4", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "]", ",", "\n", "dim", "=", "1", ")", "\n", "", "", "if", "ignore_background", ":", "\n", "        ", "pred_prob", "=", "F", ".", "softmax", "(", "pred", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "pred_prob", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "# dice loss = avg_masked_dice(prob, dice) + avg_masked_dice(1.0-prob, 1.0-dice)", "\n", "", "return", "avg_masked_dice", "(", "pred_prob", ",", "dice_label", ")", "+", "avg_masked_dice", "(", "1.0", "-", "pred_prob", ",", "1.0", "-", "dice_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.eval_model_at_scale": [[61, 85], ["model", "img.size", "torch.interpolate", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.interpolate"], "function", ["None"], ["", "def", "eval_model_at_scale", "(", "img", ",", "scale_factor", ",", "model", ",", "flip", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Evaluate the model on a different scale, make a prediction, and then transform the scale back.\n    \"\"\"", "\n", "# interpolate image", "\n", "if", "scale_factor", "!=", "1.0", ":", "\n", "        ", "input", "=", "F", ".", "interpolate", "(", "img", ",", "scale_factor", "=", "scale_factor", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ",", "\n", "recompute_scale_factor", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "input", "=", "img", "\n", "# flip the image if necessary", "\n", "", "if", "flip", ":", "\n", "        ", "input", "=", "torch", ".", "flip", "(", "input", ",", "dims", "=", "[", "-", "1", "]", ")", "\n", "# make prediction", "\n", "", "pred", "=", "model", "(", "input", ")", "\n", "# interpolate back to the original resolution", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "img", ".", "size", "(", ")", "\n", "# flip back", "\n", "if", "flip", ":", "\n", "        ", "pred", "=", "torch", ".", "flip", "(", "pred", ",", "dims", "=", "[", "-", "1", "]", ")", "\n", "# interpolate back", "\n", "", "if", "scale_factor", "!=", "1.0", ":", "\n", "        ", "pred", "=", "F", ".", "interpolate", "(", "pred", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.eval_model_multiple_scales": [[87, 99], ["torch.softmax", "F.softmax.mean", "all_pred_list.append", "torch.cat", "torch.cat", "torch.cat", "eval_model_at_scale().unsqueeze", "all_pred_list.append", "eval_model_at_scale().unsqueeze", "train_segthor.eval_model_at_scale", "train_segthor.eval_model_at_scale"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.eval_model_at_scale", "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.eval_model_at_scale"], ["", "def", "eval_model_multiple_scales", "(", "img", ",", "model", ",", "scales", ",", "flip", ")", ":", "\n", "# make a prediction at every scale", "\n", "    ", "all_pred_list", "=", "[", "]", "\n", "for", "scale", "in", "scales", ":", "\n", "        ", "all_pred_list", ".", "append", "(", "eval_model_at_scale", "(", "img", ",", "scale", ",", "model", ",", "False", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "if", "flip", ":", "\n", "            ", "all_pred_list", ".", "append", "(", "eval_model_at_scale", "(", "img", ",", "scale", ",", "model", ",", "True", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "# turn into probability", "\n", "", "", "prob", "=", "F", ".", "softmax", "(", "torch", ".", "cat", "(", "all_pred_list", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "# average across scales", "\n", "avg_across_scales_prob", "=", "prob", ".", "mean", "(", "-", "1", ")", "\n", "return", "avg_across_scales_prob", "\n", "", "def", "worker_init_fn", "(", "worker_id", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.worker_init_fn": [[99, 101], ["numpy.random.seed"], "function", ["None"], ["", "def", "worker_init_fn", "(", "worker_id", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "1", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.run_experiment": [[102, 247], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "logging.info", "logging.info", "logging.getLogger", "brat.brat_util.DocumentUnit", "brat.unet_model.UNet", "torch.device", "torch.device", "torch.device", "torch.DataParallel", "model.to.to", "brat.loading.SegTHORDataset", "brat.loading.SegTHORDataset", "brat.loading.SegTHORDataset", "brat.loading.SegTHORDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "os.path.join", "logging.basicConfig", "logging.getLogger().addHandler", "logging.basicConfig", "open", "pickle.load", "os.path.join", "os.path.join", "os.path.join", "model.to.parameters", "os.path.exists", "os.path.exists", "os.makedirs", "logging.StreamHandler", "range", "torch.CrossEntropyLoss", "train_segthor.epoch", "train_segthor.epoch", "train_segthor.epoch", "os.path.join", "logging.getLogger", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "train_segthor.dice_loss", "brat_util.DocumentUnit.form_df", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "need_label_correction_dict.values", "logging.info", "brat.label_correction.merge_labels_with_skip", "os.path.join", "torch.utils.data.DataLoader.dataset.reset_labels", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "brat.label_correction.if_update", "os.path.exists", "os.mkdir", "open", "pickle.dump", "open", "pickle.dump", "torch.Tensor", "torch.Tensor", "torch.Tensor", "os.path.join", "os.path.join", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.epoch", "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.epoch", "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.epoch", "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.dice_loss", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.form_df", "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.merge_labels_with_skip", "home.repos.pwc.inspect_result.kangningthu_adele.brat.loading.SegTHORDataset.reset_labels", "home.repos.pwc.inspect_result.kangningthu_adele.brat.label_correction.if_update"], ["", "def", "run_experiment", "(", "parameters", ")", ":", "\n", "# create model dir", "\n", "    ", "if", "parameters", "[", "'save_dir'", "]", "is", "not", "None", ":", "\n", "        ", "model_dir", "=", "os", ".", "path", ".", "join", "(", "parameters", "[", "'save_dir'", "]", ",", "parameters", "[", "'model_name'", "]", ")", "\n", "assert", "not", "os", ".", "path", ".", "exists", "(", "model_dir", ")", ",", "\"This model directory already exists\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "model_dir", ")", "\n", "", "", "else", ":", "\n", "        ", "model_dir", "=", "None", "\n", "\n", "# set random seed", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "random", ".", "seed", "(", "parameters", "[", "\"seed\"", "]", ")", "\n", "torch", ".", "manual_seed", "(", "parameters", "[", "\"seed\"", "]", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "parameters", "[", "\"seed\"", "]", ")", "\n", "np", ".", "random", ".", "seed", "(", "parameters", "[", "\"seed\"", "]", ")", "\n", "\n", "# create logger", "\n", "if", "model_dir", "is", "not", "None", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"log\"", ")", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "stream", "=", "sys", ".", "stdout", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "", "logging", ".", "info", "(", "\"model_dir = {0}\"", ".", "format", "(", "model_dir", ")", ")", "\n", "logging", ".", "info", "(", "\"parameters = {0}\"", ".", "format", "(", "parameters", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "global_doc", "=", "brat_util", ".", "DocumentUnit", "(", "[", "\"epoch\"", ",", "\"phase\"", ",", "\"time\"", ",", "\n", "\"dice_1_avg\"", ",", "\"dice_2_avg\"", ",", "\"dice_3_avg\"", ",", "\"dice_4_avg\"", ",", "\n", "\"dice_1_std\"", ",", "\"dice_2_std\"", ",", "\"dice_3_std\"", ",", "\"dice_4_std\"", ",", "\n", "\"iou_0\"", ",", "\"iou_1\"", ",", "\"iou_2\"", ",", "\"iou_3\"", ",", "\"iou_4\"", ",", "\n", "\"iou_noise_0\"", ",", "\"iou_noise_1\"", ",", "\"iou_noise_2\"", ",", "\"iou_noise_3\"", ",", "\"iou_noise_4\"", ",", "\n", "\"iou_clean_0\"", ",", "\"iou_clean_1\"", ",", "\"iou_clean_2\"", ",", "\"iou_clean_3\"", ",", "\"iou_clean_4\"", ",", "\n", "\"iou_update_0\"", ",", "\"iou_update_1\"", ",", "\"iou_update_2\"", ",", "\"iou_update_3\"", ",", "\"iou_update_4\"", ",", "\n", "\"iou_agree_0\"", ",", "\"iou_agree_1\"", ",", "\"iou_agree_2\"", ",", "\"iou_agree_3\"", ",", "\"iou_agree_4\"", "]", ")", "\n", "\n", "# create model", "\n", "model", "=", "unet_model", ".", "UNet", "(", "n_channels", "=", "1", ",", "n_classes", "=", "5", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "# data loader", "\n", "with", "open", "(", "parameters", "[", "\"data_list\"", "]", ",", "\"rb\"", ")", "as", "f", ":", "\n", "# tr_dl, val_dl, ts_dl = pickle.load(f)", "\n", "        ", "tr_dl", ",", "ts_dl", ",", "val_dl", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "tr_cache_dir", "=", "None", "if", "parameters", "[", "\"cache_dir\"", "]", "is", "None", "else", "os", ".", "path", ".", "join", "(", "parameters", "[", "\"cache_dir\"", "]", ",", "\"tr.pkl\"", ")", "\n", "val_cache_dir", "=", "None", "if", "parameters", "[", "\"cache_dir\"", "]", "is", "None", "else", "os", ".", "path", ".", "join", "(", "parameters", "[", "\"cache_dir\"", "]", ",", "\"val.pkl\"", ")", "\n", "ts_cache_dir", "=", "None", "if", "parameters", "[", "\"cache_dir\"", "]", "is", "None", "else", "os", ".", "path", ".", "join", "(", "parameters", "[", "\"cache_dir\"", "]", ",", "\"ts.pkl\"", ")", "\n", "\n", "need_aug", "=", "not", "parameters", "[", "\"no_augmentation\"", "]", "\n", "tr_ds", "=", "loading", ".", "SegTHORDataset", "(", "parameters", ",", "tr_dl", ",", "augmentation", "=", "need_aug", ",", "noise_label", "=", "parameters", "[", "\"noise_label\"", "]", ",", "\n", "cache_dir", "=", "tr_cache_dir", ",", "noise_level", "=", "parameters", "[", "\"noise_level\"", "]", ")", "\n", "val_ds", "=", "loading", ".", "SegTHORDataset", "(", "parameters", ",", "val_dl", ",", "augmentation", "=", "False", ",", "cache_dir", "=", "val_cache_dir", ")", "\n", "ts_ds", "=", "loading", ".", "SegTHORDataset", "(", "parameters", ",", "ts_dl", ",", "augmentation", "=", "False", ",", "cache_dir", "=", "ts_cache_dir", ")", "\n", "eval_ds", "=", "loading", ".", "SegTHORDataset", "(", "parameters", ",", "tr_dl", ",", "augmentation", "=", "False", ",", "cache_dir", "=", "tr_cache_dir", ")", "\n", "\n", "\n", "\n", "tr_loader", "=", "DataLoader", "(", "dataset", "=", "tr_ds", ",", "batch_size", "=", "parameters", "[", "\"batch_size\"", "]", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "17", ",", "pin_memory", "=", "True", ",", "worker_init_fn", "=", "worker_init_fn", ")", "\n", "val_loader", "=", "DataLoader", "(", "dataset", "=", "val_ds", ",", "batch_size", "=", "parameters", "[", "\"batch_size\"", "]", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "17", ",", "pin_memory", "=", "True", ",", "worker_init_fn", "=", "worker_init_fn", ")", "\n", "ts_loader", "=", "DataLoader", "(", "dataset", "=", "ts_ds", ",", "batch_size", "=", "parameters", "[", "\"batch_size\"", "]", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "17", ",", "pin_memory", "=", "True", ",", "worker_init_fn", "=", "worker_init_fn", ")", "\n", "eval_loader", "=", "DataLoader", "(", "dataset", "=", "eval_ds", ",", "batch_size", "=", "parameters", "[", "\"batch_size\"", "]", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "17", ",", "pin_memory", "=", "True", ",", "worker_init_fn", "=", "worker_init_fn", ")", "\n", "\n", "# optimizer and loss functions", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "parameters", "[", "\"lr\"", "]", ",", "momentum", "=", "0.99", ")", "\n", "# multi-label dice loss", "\n", "if", "parameters", "[", "\"loss\"", "]", "==", "\"ce\"", ":", "\n", "        ", "if", "parameters", "[", "\"background_weight\"", "]", "is", "not", "None", ":", "\n", "            ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "torch", ".", "Tensor", "(", "[", "parameters", "[", "\"background_weight\"", "]", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "", "elif", "parameters", "[", "\"balance\"", "]", ":", "\n", "            ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "torch", ".", "Tensor", "(", "[", "1.01729696", ",", "1441.98067", ",", "79.3493525", ",", "1792.17319", ",", "317.571485", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ")", "\n", "", "", "elif", "parameters", "[", "\"loss\"", "]", "==", "\"dice\"", ":", "\n", "        ", "criterion", "=", "lambda", "x", ",", "y", ":", "dice_loss", "(", "x", ",", "y", ",", "parameters", "[", "\"ignore_background\"", "]", ")", "\n", "\n", "# start experiments", "\n", "", "need_label_correction_dict", "=", "{", "1", ":", "False", ",", "2", ":", "False", ",", "3", ":", "False", ",", "4", ":", "False", "}", "\n", "already_label_correction_dict", "=", "{", "1", ":", "False", ",", "2", ":", "False", ",", "3", ":", "False", ",", "4", ":", "False", "}", "\n", "for", "epoch_number", "in", "range", "(", "1", ",", "parameters", "[", "\"number_epochs\"", "]", "+", "1", ")", ":", "\n", "        ", "if", "parameters", "[", "\"phase\"", "]", "[", "\"training\"", "]", ":", "\n", "            ", "tr_pred", "=", "epoch", "(", "model", ",", "tr_loader", ",", "criterion", ",", "optimizer", ",", "\n", "parameters", ",", "device", ",", "\"training\"", ",", "epoch_number", ",", "model_dir", ",", "global_doc", ",", "save_res", "=", "True", ")", "\n", "\n", "# if label correction is required for next epoch", "\n", "if", "parameters", "[", "\"label_correction\"", "]", ":", "\n", "# decide if the labels need to be corrected for the next epoch", "\n", "# once the label correction is on for this class, it will always be on", "\n", "                ", "performance_df", "=", "global_doc", ".", "form_df", "(", ")", "\n", "tr_df", "=", "performance_df", "[", "performance_df", "[", "\"phase\"", "]", "==", "\"training\"", "]", "\n", "for", "c", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", ":", "\n", "                    ", "if", "not", "need_label_correction_dict", "[", "c", "]", ":", "\n", "                        ", "need_label_correction_dict", "[", "c", "]", "=", "label_correction", ".", "if_update", "(", "tr_df", "[", "\"iou_{}\"", ".", "format", "(", "c", ")", "]", ".", "values", ",", "epoch_number", "-", "1", ",", "n_epoch", "=", "parameters", "[", "\"number_epochs\"", "]", ",", "\n", "threshold", "=", "parameters", "[", "\"r\"", "]", ")", "\n", "#need_label_correction_dict[c] = label_correction.if_update_test(c, epoch_number)", "\n", "\n", "# reset already_label_correction_dict", "\n", "# correct_freq is None = correct every epoch", "\n", "# correct_freq < 0: only correct once", "\n", "# correct_freq = 5: correct every 5 epoch", "\n", "", "", "if", "parameters", "[", "\"correct_freq\"", "]", "is", "not", "None", "and", "parameters", "[", "\"correct_freq\"", "]", ">", "0", "and", "epoch_number", "%", "parameters", "[", "\"correct_freq\"", "]", "==", "0", ":", "\n", "                    ", "already_label_correction_dict", "=", "{", "1", ":", "False", ",", "2", ":", "False", ",", "3", ":", "False", ",", "4", ":", "False", "}", "\n", "\n", "# if correct_once, prevent the model from correction if already corrected", "\n", "", "if", "parameters", "[", "\"correct_freq\"", "]", "is", "not", "None", ":", "\n", "                    ", "for", "c", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", ":", "\n", "                        ", "if", "already_label_correction_dict", "[", "c", "]", ":", "\n", "                            ", "need_label_correction_dict", "[", "c", "]", "=", "False", "\n", "\n", "# if any class needs to be corrected, recompute labels for all training examples", "\n", "", "", "", "if", "True", "in", "need_label_correction_dict", ".", "values", "(", ")", ":", "\n", "                    ", "logging", ".", "info", "(", "\"start label correction\"", ")", "\n", "# recompute model outputs using multiple scales", "\n", "# merge labels", "\n", "new_labels", "=", "label_correction", ".", "merge_labels_with_skip", "(", "tr_loader", ".", "dataset", ".", "cache_label", ",", "tr_pred", ",", "\n", "need_label_correction_dict", ",", "conf_threshold", "=", "parameters", "[", "\"conf_threshold\"", "]", ",", "\n", "logic_255", "=", "parameters", "[", "\"logic_255\"", "]", ",", "conf_threshold_bg", "=", "parameters", "[", "\"conf_threshold_bg\"", "]", ")", "\n", "temp_dir", "=", "parameters", "[", "\"save_dir\"", "]", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "parameters", "[", "\"model_name\"", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"new_labels_epoch_{}.pkl\"", ".", "format", "(", "epoch_number", ")", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                        ", "pickle", ".", "dump", "(", "new_labels", ",", "f", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"tr_pred_epoch_{}.pkl\"", ".", "format", "(", "epoch_number", ")", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                        ", "pickle", ".", "dump", "(", "tr_pred", ",", "f", ")", "\n", "# reset labels for next iterations", "\n", "", "tr_loader", ".", "dataset", ".", "reset_labels", "(", "new_labels", ")", "\n", "\n", "# update already_label_correction_dict", "\n", "", "for", "c", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", ":", "\n", "                    ", "if", "not", "already_label_correction_dict", "[", "c", "]", ":", "\n", "                        ", "already_label_correction_dict", "[", "c", "]", "=", "need_label_correction_dict", "[", "c", "]", "\n", "\n", "", "", "", "", "if", "parameters", "[", "\"phase\"", "]", "[", "\"validation\"", "]", ":", "\n", "            ", "epoch", "(", "model", ",", "val_loader", ",", "criterion", ",", "optimizer", ",", "\n", "parameters", ",", "device", ",", "\"validation\"", ",", "epoch_number", ",", "model_dir", ",", "global_doc", ",", "save_res", "=", "True", ")", "\n", "", "if", "parameters", "[", "\"phase\"", "]", "[", "\"test\"", "]", ":", "\n", "            ", "epoch", "(", "model", ",", "ts_loader", ",", "criterion", ",", "optimizer", ",", "\n", "parameters", ",", "device", ",", "\"test\"", ",", "epoch_number", ",", "model_dir", ",", "global_doc", ",", "save_res", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.epoch": [[249, 461], ["time.time", "logging.info", "brat.brat_util.DocumentUnit", "brat.brat_util.RuntimeProfiler", "enumerate", "lib.utils.iou_computation.compute_iou", "lib.utils.iou_computation.compute_iou", "lib.utils.iou_computation.compute_iou", "lib.utils.iou_computation.compute_iou", "lib.utils.iou_computation.compute_iou", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "global_document_unit.add_values", "logging.info", "logging.info", "os.path.join", "model.train", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torch.autograd.Variable().float", "torch.autograd.Variable().long().squeeze", "brat_util.RuntimeProfiler.tik", "lib.utils.iou_computation.update_iou_stat", "brat_util.RuntimeProfiler.tik", "brat_util.RuntimeProfiler.tik", "brat_util.DocumentUnit.add_values", "F.softmax.data.cpu().numpy", "torch.cat", "torch.cat", "torch.cat", "dice_coefficient().data.cpu().numpy", "brat_util.DocumentUnit.add_values", "brat_util.DocumentUnit.add_values", "brat_util.DocumentUnit.add_values", "brat_util.DocumentUnit.add_values", "torch.argmax().data.cpu().numpy", "torch.argmax().data.cpu().numpy", "torch.argmax().data.cpu().numpy", "lib.utils.iou_computation.update_iou_stat", "diff_pixel_set.data.cpu().numpy.data.cpu().numpy", "range", "range", "logging.info", "brat_util.RuntimeProfiler.tik", "os.path.join", "brat_util.DocumentUnit.to_csv", "global_document_unit.to_csv", "brat_util.RuntimeProfiler.report_avg", "os.path.exists", "os.mkdir", "model.eval", "Variable().long().squeeze.data.cpu().numpy", "model", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "torch.softmax", "range", "list", "list", "list", "list", "Variable().long().squeeze.data.cpu().numpy", "len", "numpy.copy", "lib.utils.iou_computation.update_iou_stat", "Variable().float.size", "numpy.nanmean", "numpy.nanstd", "numpy.nanmean", "numpy.nanstd", "numpy.nanmean", "numpy.nanstd", "numpy.nanmean", "numpy.nanstd", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "logging.info", "torch.autograd.Variable", "torch.autograd.Variable().long", "clean_labels.cpu().numpy", "train_segthor.eval_model_at_scale", "train_segthor.eval_model_at_scale", "torch.Parameter().to", "nn.Parameter().to.data.fill_", "lib.utils.JSD_loss.calc_jsd_multiscale", "criterion", "F.softmax.data.cpu", "len", "dice_coefficient().data.cpu", "torch.argmax().data.cpu", "torch.argmax().data.cpu", "torch.argmax().data.cpu", "diff_pixel_set.data.cpu().numpy.data.cpu", "numpy.copy", "lib.utils.iou_computation.update_iou_stat", "numpy.copy", "lib.utils.iou_computation.update_iou_stat", "len", "time.time", "model.module.state_dict", "optimizer.state_dict", "time.time", "imgs.to", "Variable().long().squeeze.data.cpu", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Variable().long().squeeze.data.cpu", "torch.autograd.Variable", "clean_labels.cpu", "train_segthor.eval_model_multiple_scales", "model", "torch.Parameter", "labels.to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "train_segthor.dice_coefficient", "torch.argmax", "torch.argmax", "torch.argmax", "diff_pixel_set.data.cpu().numpy.sum().sum().sum", "diff_pixel_set.data.cpu().numpy.sum().sum", "diff_pixel_set.data.cpu().numpy.sum"], "function", ["home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.compute_iou", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.backbone.resnet38d.Net.train", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.RuntimeProfiler.tik", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.RuntimeProfiler.tik", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.RuntimeProfiler.tik", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.add_values", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.RuntimeProfiler.tik", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.to_csv", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.DocumentUnit.to_csv", "home.repos.pwc.inspect_result.kangningthu_adele.brat.brat_util.RuntimeProfiler.report_avg", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.eval_model_at_scale", "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.eval_model_at_scale", "home.repos.pwc.inspect_result.kangningthu_adele.utils.JSD_loss.calc_jsd_multiscale", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.utils.iou_computation.update_iou_stat", "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.eval_model_multiple_scales", "home.repos.pwc.inspect_result.kangningthu_adele.brat.train_segthor.dice_coefficient"], ["", "", "", "def", "epoch", "(", "model", ",", "data_loader", ",", "criterion", ",", "optimizer", ",", "\n", "parameters", ",", "device", ",", "phase", ",", "epoch_number", ",", "\n", "model_dir", ",", "global_document_unit", ",", "save_res", "=", "False", ",", "multiscale", "=", "False", ")", ":", "\n", "\n", "    ", "start_epoch_time", "=", "time", ".", "time", "(", ")", "\n", "logging", ".", "info", "(", "\"Start {0} epoch {1}\"", ".", "format", "(", "phase", ",", "epoch_number", ")", ")", "\n", "# create folder for this epoch", "\n", "if", "model_dir", "is", "not", "None", ":", "\n", "        ", "epoch_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"epoch_{0}\"", ".", "format", "(", "epoch_number", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "epoch_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "epoch_dir", ")", "\n", "\n", "# create epoch document unit", "\n", "", "", "document_columns", "=", "[", "\"img\"", ",", "\"dice_1\"", ",", "\"dice_2\"", ",", "\"dice_3\"", ",", "\"dice_4\"", "]", "\n", "epoch_document_unit", "=", "brat_util", ".", "DocumentUnit", "(", "document_columns", ")", "\n", "if", "save_res", ":", "\n", "        ", "save_pred", "=", "{", "}", "\n", "\n", "# run-time statistics", "\n", "", "runtime_profiler", "=", "brat_util", ".", "RuntimeProfiler", "(", ")", "\n", "total_imgs", "=", "0", "\n", "\n", "# update model phase", "\n", "if", "phase", "==", "\"training\"", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "", "elif", "phase", "in", "[", "\"validation\"", ",", "\"test\"", ",", "\"eval\"", "]", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "\n", "# start the epoch", "\n", "", "iou_whole_img", "=", "[", "np", ".", "zeros", "(", "5", ")", ",", "np", ".", "zeros", "(", "5", ")", ",", "np", ".", "zeros", "(", "5", ")", "]", "\n", "iou_clean", "=", "[", "np", ".", "zeros", "(", "5", ")", ",", "np", ".", "zeros", "(", "5", ")", ",", "np", ".", "zeros", "(", "5", ")", "]", "\n", "iou_noise", "=", "[", "np", ".", "zeros", "(", "5", ")", ",", "np", ".", "zeros", "(", "5", ")", ",", "np", ".", "zeros", "(", "5", ")", "]", "\n", "iou_agree_clean", "=", "[", "np", ".", "zeros", "(", "5", ")", ",", "np", ".", "zeros", "(", "5", ")", ",", "np", ".", "zeros", "(", "5", ")", "]", "\n", "iou_updated_label", "=", "[", "np", ".", "zeros", "(", "5", ")", ",", "np", ".", "zeros", "(", "5", ")", ",", "np", ".", "zeros", "(", "5", ")", "]", "\n", "\n", "for", "i", ",", "(", "imgs", ",", "labels", ",", "original_noisy_labels", ",", "clean_labels", ",", "filenames", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "\n", "\n", "# load data", "\n", "        ", "input_img_variable", "=", "Variable", "(", "imgs", ".", "to", "(", "device", ")", ")", ".", "float", "(", ")", "\n", "input_label_variable", "=", "Variable", "(", "labels", ".", "to", "(", "device", ")", ")", ".", "long", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "runtime_profiler", ".", "tik", "(", "\"data_loading\"", ")", "\n", "iou_computation", ".", "update_iou_stat", "(", "input_label_variable", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "clean_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "\n", "iou_updated_label", "[", "0", "]", ",", "iou_updated_label", "[", "1", "]", ",", "iou_updated_label", "[", "2", "]", ",", "5", ")", "\n", "# forward propagation", "\n", "if", "phase", "==", "\"training\"", ":", "\n", "            ", "pred_is_prob", "=", "False", "\n", "pred", "=", "model", "(", "input_img_variable", ")", "\n", "", "elif", "phase", "in", "[", "\"validation\"", ",", "\"test\"", ",", "\"eval\"", "]", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "multiscale", ":", "\n", "                    ", "pred_is_prob", "=", "True", "\n", "pred", "=", "eval_model_multiple_scales", "(", "input_img_variable", ",", "model", ",", "scales", "=", "[", "0.7", ",", "1.0", ",", "1.5", "]", ",", "flip", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "pred_is_prob", "=", "False", "\n", "pred", "=", "model", "(", "input_img_variable", ")", "\n", "", "", "", "runtime_profiler", ".", "tik", "(", "\"forward\"", ")", "\n", "\n", "# calculate loss", "\n", "if", "phase", "==", "\"training\"", ":", "\n", "            ", "if", "parameters", "[", "\"jsd_lambda\"", "]", "!=", "0", ":", "\n", "# create image+ and image-", "\n", "                ", "pred_small_rescale", "=", "eval_model_at_scale", "(", "input_img_variable", ",", "0.7", ",", "model", ")", "\n", "pred_large_rescale", "=", "eval_model_at_scale", "(", "input_img_variable", ",", "1.5", ",", "model", ")", "\n", "# weight is set to all 1", "\n", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "3", ")", ")", ".", "to", "(", "device", ")", "\n", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "# calculate jsd loss", "\n", "loss_ce", ",", "consistency", ",", "variance", ",", "mixture_label", "=", "JSD_loss", ".", "calc_jsd_multiscale", "(", "weight", ",", "input_label_variable", ",", "\n", "pred_small_rescale", ",", "pred", ",", "pred_large_rescale", ",", "threshold", "=", "parameters", "[", "\"rho\"", "]", ")", "\n", "loss", "=", "(", "parameters", "[", "\"jsd_lambda\"", "]", "*", "consistency", "+", "loss_ce", ")", "/", "3", "\n", "# logging.info(\"jsd_loss = {0}\".format(consistency))", "\n", "", "else", ":", "\n", "                ", "loss", "=", "criterion", "(", "pred", ",", "input_label_variable", ")", "\n", "# logging.info(\"loss = {0}\".format(loss))", "\n", "# backward propagation", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "runtime_profiler", ".", "tik", "(", "\"backward\"", ")", "\n", "\n", "# log model behaviours", "\n", "epoch_document_unit", ".", "add_values", "(", "\"img\"", ",", "filenames", ")", "\n", "if", "pred_is_prob", ":", "\n", "            ", "pred_prob", "=", "pred", "\n", "", "else", ":", "\n", "            ", "pred_prob", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "", "pred_np", "=", "pred_prob", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "save_res", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "filenames", ")", ")", ":", "\n", "                ", "save_pred", "[", "filenames", "[", "i", "]", "]", "=", "pred_np", "[", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "# dice", "\n", "", "", "dice_label", "=", "torch", ".", "cat", "(", "[", "(", "input_label_variable", "==", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "(", "input_label_variable", "==", "1", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "(", "input_label_variable", "==", "2", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "(", "input_label_variable", "==", "3", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "(", "input_label_variable", "==", "4", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "]", ",", "\n", "dim", "=", "1", ")", "\n", "dice", "=", "dice_coefficient", "(", "pred_prob", ",", "dice_label", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "epoch_document_unit", ".", "add_values", "(", "\"dice_1\"", ",", "list", "(", "dice", "[", ":", ",", "1", "]", ")", ")", "\n", "epoch_document_unit", ".", "add_values", "(", "\"dice_2\"", ",", "list", "(", "dice", "[", ":", ",", "2", "]", ")", ")", "\n", "epoch_document_unit", ".", "add_values", "(", "\"dice_3\"", ",", "list", "(", "dice", "[", ":", ",", "3", "]", ")", ")", "\n", "epoch_document_unit", ".", "add_values", "(", "\"dice_4\"", ",", "list", "(", "dice", "[", ":", ",", "4", "]", ")", ")", "\n", "\n", "# update IOU", "\n", "pred_np_discrete", "=", "torch", ".", "argmax", "(", "pred", ",", "dim", "=", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "iou_computation", ".", "update_iou_stat", "(", "pred_np_discrete", ",", "\n", "input_label_variable", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "iou_whole_img", "[", "0", "]", ",", "iou_whole_img", "[", "1", "]", ",", "iou_whole_img", "[", "2", "]", ",", "5", ")", "\n", "# clean IOU: IOU(pred_prob, clean_labels[diff_pixel_set])", "\n", "# noisy IOU: IOU(pred_prob, noisy_labels[diff_pixel_set])", "\n", "# diff_pixel_set = a mask where noisy labels != clean labels", "\n", "diff_pixel_set", "=", "original_noisy_labels", "!=", "clean_labels", "\n", "is_diff_flag", "=", "(", "diff_pixel_set", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ">", "0", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "diff_pixel_set", "=", "diff_pixel_set", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "is_diff_flag", ")", ")", ":", "\n", "            ", "if", "is_diff_flag", "[", "j", "]", ":", "\n", "                ", "mask", "=", "diff_pixel_set", "[", "j", ",", "0", ",", ":", ",", ":", "]", "\n", "# calculate clean IOU: green curve", "\n", "masked_clean_label", "=", "np", ".", "copy", "(", "clean_labels", "[", "j", ",", "0", ",", ":", ",", ":", "]", ")", "\n", "masked_clean_label", "[", "~", "mask", "]", "=", "255", "\n", "iou_computation", ".", "update_iou_stat", "(", "pred_np_discrete", "[", "j", ",", ":", ",", ":", "]", ",", "masked_clean_label", ",", "\n", "iou_clean", "[", "0", "]", ",", "iou_clean", "[", "1", "]", ",", "iou_clean", "[", "2", "]", ",", "5", ")", "\n", "\n", "# calculate clean IOU: red curve", "\n", "masked_noisy_label", "=", "np", ".", "copy", "(", "original_noisy_labels", "[", "j", ",", "0", ",", ":", ",", ":", "]", ")", "\n", "masked_noisy_label", "[", "~", "mask", "]", "=", "255", "\n", "iou_computation", ".", "update_iou_stat", "(", "pred_np_discrete", "[", "j", ",", ":", ",", ":", "]", ",", "masked_noisy_label", ",", "\n", "iou_noise", "[", "0", "]", ",", "iou_noise", "[", "1", "]", ",", "iou_noise", "[", "2", "]", ",", "5", ")", "\n", "# iou_agree_clean: IOU(pred_prob, clean_labels[agree_pixel_set])", "\n", "", "", "agree_pixel_set", "=", "(", "original_noisy_labels", "==", "clean_labels", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "j", "in", "range", "(", "agree_pixel_set", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "mask", "=", "agree_pixel_set", "[", "j", ",", "0", ",", ":", ",", ":", "]", "\n", "masked_clean_label", "=", "np", ".", "copy", "(", "clean_labels", "[", "j", ",", "0", ",", ":", ",", ":", "]", ")", "\n", "masked_clean_label", "[", "~", "mask", "]", "=", "255", "\n", "iou_computation", ".", "update_iou_stat", "(", "pred_np_discrete", "[", "j", ",", ":", ",", ":", "]", ",", "masked_clean_label", ",", "\n", "iou_agree_clean", "[", "0", "]", ",", "iou_agree_clean", "[", "1", "]", ",", "iou_agree_clean", "[", "2", "]", ",", "5", ")", "\n", "\n", "# compute time", "\n", "", "total_imgs", "+=", "input_img_variable", ".", "size", "(", ")", "[", "0", "]", "\n", "logging", ".", "info", "(", "\"minibatch_number = {0}, {1}/{2} done\"", ".", "format", "(", "i", ",", "total_imgs", ",", "len", "(", "data_loader", ".", "dataset", ")", ")", ")", "\n", "runtime_profiler", ".", "tik", "(", "\"report\"", ")", "\n", "\n", "# report performance", "\n", "", "epoch_iou", "=", "iou_computation", ".", "compute_iou", "(", "iou_whole_img", "[", "0", "]", ",", "iou_whole_img", "[", "1", "]", ",", "iou_whole_img", "[", "2", "]", ",", "5", ")", "\n", "epoch_iou_clean", "=", "iou_computation", ".", "compute_iou", "(", "iou_clean", "[", "0", "]", ",", "iou_clean", "[", "1", "]", ",", "iou_clean", "[", "2", "]", ",", "5", ")", "\n", "epoch_iou_noise", "=", "iou_computation", ".", "compute_iou", "(", "iou_noise", "[", "0", "]", ",", "iou_noise", "[", "1", "]", ",", "iou_noise", "[", "2", "]", ",", "5", ")", "\n", "epoch_iou_update", "=", "iou_computation", ".", "compute_iou", "(", "iou_updated_label", "[", "0", "]", ",", "iou_updated_label", "[", "1", "]", ",", "iou_updated_label", "[", "2", "]", ",", "5", ")", "\n", "epoch_iou_agree", "=", "iou_computation", ".", "compute_iou", "(", "iou_agree_clean", "[", "0", "]", ",", "iou_agree_clean", "[", "1", "]", ",", "iou_agree_clean", "[", "2", "]", ",", "5", ")", "\n", "\n", "global_document_unit", ".", "add_values", "(", "\"epoch\"", ",", "[", "epoch_number", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"phase\"", ",", "[", "phase", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"dice_1_avg\"", ",", "[", "np", ".", "nanmean", "(", "epoch_document_unit", ".", "data_dict", "[", "\"dice_1\"", "]", ")", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"dice_1_std\"", ",", "[", "np", ".", "nanstd", "(", "epoch_document_unit", ".", "data_dict", "[", "\"dice_1\"", "]", ")", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"dice_2_avg\"", ",", "[", "np", ".", "nanmean", "(", "epoch_document_unit", ".", "data_dict", "[", "\"dice_2\"", "]", ")", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"dice_2_std\"", ",", "[", "np", ".", "nanstd", "(", "epoch_document_unit", ".", "data_dict", "[", "\"dice_2\"", "]", ")", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"dice_3_avg\"", ",", "[", "np", ".", "nanmean", "(", "epoch_document_unit", ".", "data_dict", "[", "\"dice_3\"", "]", ")", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"dice_3_std\"", ",", "[", "np", ".", "nanstd", "(", "epoch_document_unit", ".", "data_dict", "[", "\"dice_3\"", "]", ")", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"dice_4_avg\"", ",", "[", "np", ".", "nanmean", "(", "epoch_document_unit", ".", "data_dict", "[", "\"dice_4\"", "]", ")", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"dice_4_std\"", ",", "[", "np", ".", "nanstd", "(", "epoch_document_unit", ".", "data_dict", "[", "\"dice_4\"", "]", ")", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_0\"", ",", "[", "epoch_iou", "[", "0", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_1\"", ",", "[", "epoch_iou", "[", "1", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_2\"", ",", "[", "epoch_iou", "[", "2", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_3\"", ",", "[", "epoch_iou", "[", "3", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_4\"", ",", "[", "epoch_iou", "[", "4", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_clean_0\"", ",", "[", "epoch_iou_clean", "[", "0", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_clean_1\"", ",", "[", "epoch_iou_clean", "[", "1", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_clean_2\"", ",", "[", "epoch_iou_clean", "[", "2", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_clean_3\"", ",", "[", "epoch_iou_clean", "[", "3", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_clean_4\"", ",", "[", "epoch_iou_clean", "[", "4", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_noise_0\"", ",", "[", "epoch_iou_noise", "[", "0", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_noise_1\"", ",", "[", "epoch_iou_noise", "[", "1", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_noise_2\"", ",", "[", "epoch_iou_noise", "[", "2", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_noise_3\"", ",", "[", "epoch_iou_noise", "[", "3", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_noise_4\"", ",", "[", "epoch_iou_noise", "[", "4", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_update_0\"", ",", "[", "epoch_iou_update", "[", "0", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_update_1\"", ",", "[", "epoch_iou_update", "[", "1", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_update_2\"", ",", "[", "epoch_iou_update", "[", "2", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_update_3\"", ",", "[", "epoch_iou_update", "[", "3", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_update_4\"", ",", "[", "epoch_iou_update", "[", "4", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_agree_0\"", ",", "[", "epoch_iou_agree", "[", "0", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_agree_1\"", ",", "[", "epoch_iou_agree", "[", "1", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_agree_2\"", ",", "[", "epoch_iou_agree", "[", "2", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_agree_3\"", ",", "[", "epoch_iou_agree", "[", "3", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"iou_agree_4\"", ",", "[", "epoch_iou_agree", "[", "4", "]", "]", ")", "\n", "global_document_unit", ".", "add_values", "(", "\"time\"", ",", "[", "time", ".", "time", "(", ")", "-", "start_epoch_time", "]", ")", "\n", "\n", "# save epoch document unit and update the global document unit", "\n", "if", "model_dir", "is", "not", "None", ":", "\n", "        ", "epoch_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"epoch_{}\"", ".", "format", "(", "epoch_number", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "epoch_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "epoch_dir", ")", "\n", "# if save_res:", "\n", "#     with open(os.path.join(epoch_dir, \"{}_pred.pkl\".format(phase)), \"wb\") as f:", "\n", "#         pickle.dump(save_pred, f)", "\n", "", "epoch_document_unit", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "epoch_dir", ",", "\"{0}.csv\"", ".", "format", "(", "phase", ")", ")", ")", "\n", "global_document_unit", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"performance.csv\"", ".", "format", "(", "phase", ")", ")", ")", "\n", "# save the model at every epoch", "\n", "if", "phase", "==", "\"training\"", ":", "\n", "            ", "model_file_name", "=", "os", ".", "path", ".", "join", "(", "epoch_dir", ",", "'model.ckpt'", ")", "\n", "optimizer_file_name", "=", "os", ".", "path", ".", "join", "(", "epoch_dir", ",", "'optimizer.ckpt'", ")", "\n", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "model_file_name", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "optimizer_file_name", ")", "\n", "logging", ".", "info", "(", "\"model saved to {0}\"", ".", "format", "(", "model_file_name", ")", ")", "\n", "\n", "# epoch logging", "\n", "", "", "logging", ".", "info", "(", "\"{0} epoch {1} finished takes {2} seconds\"", ".", "format", "(", "phase", ",", "epoch_number", ",", "time", ".", "time", "(", ")", "-", "start_epoch_time", ")", ")", "\n", "logging", ".", "info", "(", "runtime_profiler", ".", "report_avg", "(", ")", ")", "\n", "\n", "if", "save_res", ":", "\n", "        ", "return", "save_pred", "\n", "\n"]]}