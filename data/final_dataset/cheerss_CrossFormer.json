{"home.repos.pwc.inspect_result.cheerss_CrossFormer.None.config._update_config_from_file": [[167, 180], ["config.defrost", "yaml.load.setdefault", "print", "config.merge_from_file", "config.freeze", "open", "yaml.load", "config._update_config_from_file", "os.path.join", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.None.config._update_config_from_file"], ["def", "_update_config_from_file", "(", "config", ",", "cfg_file", ")", ":", "\n", "    ", "config", ".", "defrost", "(", ")", "\n", "with", "open", "(", "cfg_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "yaml_cfg", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "\n", "", "for", "cfg", "in", "yaml_cfg", ".", "setdefault", "(", "'BASE'", ",", "[", "''", "]", ")", ":", "\n", "        ", "if", "cfg", ":", "\n", "            ", "_update_config_from_file", "(", "\n", "config", ",", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "cfg_file", ")", ",", "cfg", ")", "\n", ")", "\n", "", "", "print", "(", "'=> merge config from {}'", ".", "format", "(", "cfg_file", ")", ")", "\n", "config", ".", "merge_from_file", "(", "cfg_file", ")", "\n", "config", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.config.update_config": [[182, 230], ["config._update_config_from_file", "config.defrost", "os.path.join", "config.freeze", "config.merge_from_list"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.None.config._update_config_from_file"], ["", "def", "update_config", "(", "config", ",", "args", ")", ":", "\n", "    ", "_update_config_from_file", "(", "config", ",", "args", ".", "cfg", ")", "\n", "\n", "config", ".", "defrost", "(", ")", "\n", "if", "args", ".", "opts", ":", "\n", "        ", "config", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "\n", "# merge from specific arguments", "\n", "", "if", "args", ".", "batch_size", ":", "\n", "        ", "config", ".", "DATA", ".", "BATCH_SIZE", "=", "args", ".", "batch_size", "\n", "", "if", "args", ".", "data_path", ":", "\n", "        ", "config", ".", "DATA", ".", "DATA_PATH", "=", "args", ".", "data_path", "\n", "", "if", "args", ".", "zip", ":", "\n", "        ", "config", ".", "DATA", ".", "ZIP_MODE", "=", "True", "\n", "", "if", "args", ".", "cache_mode", ":", "\n", "        ", "config", ".", "DATA", ".", "CACHE_MODE", "=", "args", ".", "cache_mode", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "config", ".", "MODEL", ".", "RESUME", "=", "args", ".", "resume", "\n", "", "if", "args", ".", "accumulation_steps", ":", "\n", "        ", "config", ".", "TRAIN", ".", "ACCUMULATION_STEPS", "=", "args", ".", "accumulation_steps", "\n", "", "if", "args", ".", "use_checkpoint", ":", "\n", "        ", "config", ".", "TRAIN", ".", "USE_CHECKPOINT", "=", "True", "\n", "", "if", "args", ".", "amp_opt_level", ":", "\n", "        ", "config", ".", "AMP_OPT_LEVEL", "=", "args", ".", "amp_opt_level", "\n", "", "if", "args", ".", "output", ":", "\n", "        ", "config", ".", "OUTPUT", "=", "args", ".", "output", "\n", "", "if", "args", ".", "tag", ":", "\n", "        ", "config", ".", "TAG", "=", "args", ".", "tag", "\n", "", "if", "args", ".", "eval", ":", "\n", "        ", "config", ".", "EVAL_MODE", "=", "True", "\n", "", "if", "args", ".", "num_workers", ">=", "0", ":", "\n", "        ", "config", ".", "DATA", ".", "NUM_WORKERS", "=", "args", ".", "num_workers", "\n", "", "if", "args", ".", "throughput", ":", "\n", "        ", "config", ".", "THROUGHPUT_MODE", "=", "True", "\n", "\n", "# if args.patch_size:", "\n", "#     config.MODEL.CROS.PATCH_SIZE = args.patch_size", "\n", "\n", "", "config", ".", "MODEL", ".", "CROS", ".", "MLP_RATIO", "=", "args", ".", "mlp_ratio", "\n", "# config.MODEL.MERGE_SIZE_AFTER = [args.merge_size_after1, args.merge_size_after2, args.merge_size_after3, []]", "\n", "config", ".", "DATA", ".", "DATASET", "=", "args", ".", "data_set", "\n", "config", ".", "TRAIN", ".", "WARMUP_EPOCHS", "=", "args", ".", "warmup_epochs", "\n", "# set local rank for distributed training", "\n", "config", ".", "LOCAL_RANK", "=", "args", ".", "local_rank", "\n", "# output folder", "\n", "config", ".", "OUTPUT", "=", "os", ".", "path", ".", "join", "(", "config", ".", "OUTPUT", ",", "config", ".", "MODEL", ".", "NAME", ",", "config", ".", "TAG", ")", "\n", "\n", "config", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.config.get_config": [[232, 240], ["_C.clone", "config.update_config"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.None.config.update_config"], ["", "def", "get_config", "(", "args", ")", ":", "\n", "    ", "\"\"\"Get a yacs CfgNode object with default values.\"\"\"", "\n", "# Return a clone so that the defaults will not be altered", "\n", "# This is for the \"local variable\" use pattern", "\n", "config", "=", "_C", ".", "clone", "(", ")", "\n", "update_config", "(", "config", ",", "args", ")", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.main.parse_option": [[29, 69], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "config.get_config"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.None.config.get_config"], ["", "def", "parse_option", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'CrossFormer training and evaluation script'", ",", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "metavar", "=", "\"FILE\"", ",", "help", "=", "'path to config file'", ",", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--opts\"", ",", "\n", "help", "=", "\"Modify config options by adding 'KEY VALUE' pairs. \"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "'+'", ",", "\n", ")", "\n", "\n", "# easy config modification", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "help", "=", "\"batch size for single GPU\"", ")", "\n", "parser", ".", "add_argument", "(", "'--data-set'", ",", "type", "=", "str", ",", "default", "=", "'imagenet'", ",", "help", "=", "'dataset to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-path'", ",", "type", "=", "str", ",", "help", "=", "'path to dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--zip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use zipped dataset instead of folder dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--cache-mode'", ",", "type", "=", "str", ",", "default", "=", "'part'", ",", "choices", "=", "[", "'no'", ",", "'full'", ",", "'part'", "]", ",", "\n", "help", "=", "'no: no cache, '", "\n", "'full: cache all data, '", "\n", "'part: sharding the dataset into nonoverlapping pieces and only cache one piece'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "help", "=", "'resume from checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--accumulation-steps'", ",", "type", "=", "int", ",", "help", "=", "\"gradient accumulation steps\"", ")", "\n", "parser", ".", "add_argument", "(", "'--use-checkpoint'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"whether to use gradient checkpointing to save memory\"", ")", "\n", "parser", ".", "add_argument", "(", "'--amp-opt-level'", ",", "type", "=", "str", ",", "default", "=", "'native'", ",", "choices", "=", "[", "'native'", ",", "'O0'", ",", "'O1'", ",", "'O2'", "]", ",", "\n", "help", "=", "'mixed precision opt level, if O0, no amp is used'", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "default", "=", "'output'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'root of output folder, the full path is <output>/<model_name>/<tag> (default: output)'", ")", "\n", "parser", ".", "add_argument", "(", "'--tag'", ",", "help", "=", "'tag of experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Perform evaluation only'", ")", "\n", "parser", ".", "add_argument", "(", "'--throughput'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Test throughput only'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--mlp_ratio'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "\"#epoches for warm up\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "required", "=", "True", ",", "help", "=", "'local rank for DistributedDataParallel'", ")", "\n", "\n", "args", ",", "unparsed", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "config", "=", "get_config", "(", "args", ")", "\n", "\n", "return", "args", ",", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.main.main": [[71, 152], ["data.build_loader", "logger.info", "models.build_model", "torch.nn.parallel.DistributedDataParallel.cuda", "logger.info", "optimizer.build_optimizer", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "timm.utils.NativeScaler", "sum", "logger.info", "hasattr", "lr_scheduler.build_scheduler", "logger.info", "time.time", "range", "str", "logger.info", "str", "amp.initialize", "model_without_ddp.flops", "logger.info", "len", "timm.loss.SoftTargetCrossEntropy", "utils.auto_resume_helper", "utils.load_checkpoint", "main.validate", "logger.info", "main.throughput", "config.defrost", "config.freeze", "utils.load_checkpoint", "data_loader_train.sampler.set_epoch", "main.train_one_epoch", "main.validate", "logger.info", "max", "logger.info", "time.time", "datetime.timedelta", "p.numel", "timm.loss.LabelSmoothingCrossEntropy", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "config.defrost", "config.freeze", "logger.info", "logger.info", "utils.save_checkpoint", "utils.save_checkpoint", "torch.nn.parallel.DistributedDataParallel.parameters", "logger.warning", "torch.get_rank", "torch.get_rank", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.build.build_loader", "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.build.build_model", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.optimizer.build_optimizer", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.lr_scheduler.build_scheduler", "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.flops", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.auto_resume_helper", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.load_checkpoint", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.main.validate", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.main.throughput", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.load_checkpoint", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.samplers.SubsetRandomSampler.set_epoch", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.main.train_one_epoch", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.main.validate", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.save_checkpoint", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.save_checkpoint"], ["", "def", "main", "(", "args", ",", "config", ")", ":", "\n", "    ", "dataset_train", ",", "dataset_val", ",", "data_loader_train", ",", "data_loader_val", ",", "mixup_fn", "=", "build_loader", "(", "config", ")", "\n", "\n", "logger", ".", "info", "(", "f\"Creating model:{config.MODEL.TYPE}/{config.MODEL.NAME}\"", ")", "\n", "model", "=", "build_model", "(", "config", ",", "args", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "logger", ".", "info", "(", "str", "(", "model", ")", ")", "\n", "\n", "optimizer", "=", "build_optimizer", "(", "config", ",", "model", ")", "\n", "if", "config", ".", "AMP_OPT_LEVEL", "!=", "\"O0\"", "and", "config", ".", "AMP_OPT_LEVEL", "!=", "\"native\"", ":", "\n", "        ", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "config", ".", "AMP_OPT_LEVEL", ")", "\n", "", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "config", ".", "LOCAL_RANK", "]", ",", "broadcast_buffers", "=", "False", ")", "\n", "model_without_ddp", "=", "model", ".", "module", "\n", "loss_scaler", "=", "NativeScaler", "(", ")", "\n", "\n", "n_parameters", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "logger", ".", "info", "(", "f\"number of params: {n_parameters}\"", ")", "\n", "if", "hasattr", "(", "model_without_ddp", ",", "'flops'", ")", ":", "\n", "        ", "flops", "=", "model_without_ddp", ".", "flops", "(", ")", "\n", "logger", ".", "info", "(", "f\"number of GFLOPs: {flops / 1e9}\"", ")", "\n", "\n", "", "lr_scheduler", "=", "build_scheduler", "(", "config", ",", "optimizer", ",", "len", "(", "data_loader_train", ")", ")", "\n", "\n", "if", "config", ".", "AUG", ".", "MIXUP", ">", "0.", ":", "\n", "# smoothing is handled with mixup label transform", "\n", "        ", "criterion", "=", "SoftTargetCrossEntropy", "(", ")", "\n", "", "elif", "config", ".", "MODEL", ".", "LABEL_SMOOTHING", ">", "0.", ":", "\n", "        ", "criterion", "=", "LabelSmoothingCrossEntropy", "(", "smoothing", "=", "config", ".", "MODEL", ".", "LABEL_SMOOTHING", ")", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "max_accuracy", "=", "0.0", "\n", "\n", "if", "config", ".", "TRAIN", ".", "AUTO_RESUME", ":", "\n", "        ", "resume_file", "=", "auto_resume_helper", "(", "config", ".", "OUTPUT", ")", "\n", "if", "resume_file", ":", "\n", "            ", "if", "config", ".", "MODEL", ".", "RESUME", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"auto-resume changing resume file from {config.MODEL.RESUME} to {resume_file}\"", ")", "\n", "", "config", ".", "defrost", "(", ")", "\n", "config", ".", "MODEL", ".", "RESUME", "=", "resume_file", "\n", "config", ".", "freeze", "(", ")", "\n", "logger", ".", "info", "(", "f'auto resuming from {resume_file}'", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "f'no checkpoint found in {config.OUTPUT}, ignoring auto resume'", ")", "\n", "\n", "", "", "if", "config", ".", "MODEL", ".", "RESUME", ":", "\n", "        ", "max_accuracy", "=", "load_checkpoint", "(", "config", ",", "model_without_ddp", ",", "optimizer", ",", "lr_scheduler", ",", "logger", ")", "\n", "acc1", ",", "acc5", ",", "loss", "=", "validate", "(", "config", ",", "data_loader_val", ",", "model", ")", "\n", "logger", ".", "info", "(", "f\"Accuracy of the network on the {len(dataset_val)} test images: {acc1:.1f}%\"", ")", "\n", "if", "config", ".", "EVAL_MODE", ":", "\n", "            ", "return", "\n", "\n", "", "", "if", "config", ".", "THROUGHPUT_MODE", ":", "\n", "        ", "throughput", "(", "data_loader_val", ",", "model", ",", "logger", ")", "\n", "return", "\n", "\n", "", "if", "config", ".", "MODEL", ".", "FROM_PRETRAIN", ":", "\n", "        ", "config", ".", "defrost", "(", ")", "\n", "config", ".", "MODEL", ".", "RESUME", "=", "config", ".", "MODEL", ".", "FROM_PRETRAIN", "\n", "config", ".", "freeze", "(", ")", "\n", "load_checkpoint", "(", "config", ",", "model_without_ddp", ",", "optimizer", ",", "lr_scheduler", ",", "logger", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Start training\"", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "config", ".", "TRAIN", ".", "START_EPOCH", ",", "config", ".", "TRAIN", ".", "EPOCHS", ")", ":", "\n", "        ", "data_loader_train", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "train_one_epoch", "(", "config", ",", "model", ",", "criterion", ",", "data_loader_train", ",", "optimizer", ",", "epoch", ",", "mixup_fn", ",", "lr_scheduler", ",", "loss_scaler", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "epoch", "==", "config", ".", "TRAIN", ".", "EPOCHS", "-", "1", ":", "\n", "            ", "save_checkpoint", "(", "config", ",", "epoch", ",", "model_without_ddp", ",", "max_accuracy", ",", "optimizer", ",", "lr_scheduler", ",", "logger", ")", "\n", "\n", "", "acc1", ",", "acc5", ",", "loss", "=", "validate", "(", "config", ",", "data_loader_val", ",", "model", ")", "\n", "logger", ".", "info", "(", "f\"Accuracy of the network on the {len(dataset_val)} test images: {acc1:.1f}%\"", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "acc1", ">=", "max_accuracy", ":", "## save best", "\n", "            ", "save_checkpoint", "(", "config", ",", "epoch", ",", "model_without_ddp", ",", "max_accuracy", ",", "optimizer", ",", "lr_scheduler", ",", "logger", ",", "best", "=", "True", ")", "\n", "", "max_accuracy", "=", "max", "(", "max_accuracy", ",", "acc1", ")", "\n", "logger", ".", "info", "(", "f'Max accuracy: {max_accuracy:.2f}%'", ")", "\n", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.main.train_one_epoch": [[154, 237], ["model.train", "optimizer.zero_grad", "len", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "time.time", "time.time", "enumerate", "logger.info", "samples.cuda.cuda", "targets.cuda.cuda", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "timm.utils.AverageMeter.update", "timm.utils.AverageMeter.update", "timm.utils.AverageMeter.update", "time.time", "time.time", "mixup_fn", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "criterion.item", "targets.cuda.size", "logger.info", "criterion", "criterion", "optimizer.zero_grad", "lr_scheduler.step_update", "time.time", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "datetime.timedelta", "criterion.backward", "optimizer.step", "optimizer.zero_grad", "lr_scheduler.step_update", "optimizer.step", "amp.scale_loss", "scaled_loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "utils.get_grad_norm", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "utils.get_grad_norm", "amp.scale_loss", "scaled_loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "utils.get_grad_norm", "loss_scaler", "utils.get_grad_norm", "criterion.backward", "utils.get_grad_norm", "optimizer.step", "datetime.timedelta", "int", "amp.master_params", "amp.master_params", "model.parameters", "model.parameters", "amp.master_params", "amp.master_params", "model.parameters", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "model.parameters", "model.parameters", "model.parameters", "int"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.get_grad_norm", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.get_grad_norm", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.get_grad_norm", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.get_grad_norm", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.get_grad_norm"], ["", "def", "train_one_epoch", "(", "config", ",", "model", ",", "criterion", ",", "data_loader", ",", "optimizer", ",", "epoch", ",", "mixup_fn", ",", "lr_scheduler", ",", "loss_scaler", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "num_steps", "=", "len", "(", "data_loader", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "norm_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "(", "samples", ",", "targets", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "samples", "=", "samples", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "if", "mixup_fn", "is", "not", "None", ":", "\n", "            ", "samples", ",", "targets", "=", "mixup_fn", "(", "samples", ",", "targets", ")", "\n", "\n", "", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "(", "config", ".", "AMP_OPT_LEVEL", "==", "\"native\"", ")", ")", ":", "\n", "            ", "outputs", "=", "model", "(", "samples", ")", "\n", "\n", "if", "config", ".", "TRAIN", ".", "ACCUMULATION_STEPS", ">", "1", ":", "\n", "                ", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", "=", "loss", "/", "config", ".", "TRAIN", ".", "ACCUMULATION_STEPS", "\n", "if", "config", ".", "AMP_OPT_LEVEL", "!=", "\"O0\"", "and", "config", ".", "AMP_OPT_LEVEL", "!=", "\"native\"", ":", "\n", "                    ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                        ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "if", "config", ".", "TRAIN", ".", "CLIP_GRAD", ":", "\n", "                        ", "grad_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "config", ".", "TRAIN", ".", "CLIP_GRAD", ")", "\n", "", "else", ":", "\n", "                        ", "grad_norm", "=", "get_grad_norm", "(", "amp", ".", "master_params", "(", "optimizer", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "if", "config", ".", "TRAIN", ".", "CLIP_GRAD", ":", "\n", "                        ", "grad_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "config", ".", "TRAIN", ".", "CLIP_GRAD", ")", "\n", "", "else", ":", "\n", "                        ", "grad_norm", "=", "get_grad_norm", "(", "model", ".", "parameters", "(", ")", ")", "\n", "", "", "if", "(", "idx", "+", "1", ")", "%", "config", ".", "TRAIN", ".", "ACCUMULATION_STEPS", "==", "0", ":", "\n", "                    ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "lr_scheduler", ".", "step_update", "(", "epoch", "*", "num_steps", "+", "idx", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "config", ".", "AMP_OPT_LEVEL", "!=", "\"O0\"", "and", "config", ".", "AMP_OPT_LEVEL", "!=", "\"native\"", ":", "\n", "                    ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                        ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "if", "config", ".", "TRAIN", ".", "CLIP_GRAD", ":", "\n", "                        ", "grad_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "config", ".", "TRAIN", ".", "CLIP_GRAD", ")", "\n", "", "else", ":", "\n", "                        ", "grad_norm", "=", "get_grad_norm", "(", "amp", ".", "master_params", "(", "optimizer", ")", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "", "elif", "config", ".", "AMP_OPT_LEVEL", "==", "\"native\"", ":", "\n", "                    ", "loss_scaler", "(", "loss", ",", "optimizer", ",", "clip_grad", "=", "config", ".", "TRAIN", ".", "CLIP_GRAD", ",", "parameters", "=", "model", ".", "parameters", "(", ")", ")", "\n", "grad_norm", "=", "get_grad_norm", "(", "model", ".", "parameters", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "if", "config", ".", "TRAIN", ".", "CLIP_GRAD", ":", "\n", "                        ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "config", ".", "TRAIN", ".", "CLIP_GRAD", ")", "\n", "", "grad_norm", "=", "get_grad_norm", "(", "model", ".", "parameters", "(", ")", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "lr_scheduler", ".", "step_update", "(", "epoch", "*", "num_steps", "+", "idx", ")", "\n", "\n", "", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "loss_meter", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "targets", ".", "size", "(", "0", ")", ")", "\n", "norm_meter", ".", "update", "(", "grad_norm", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "idx", "%", "config", ".", "PRINT_FREQ", "==", "0", ":", "\n", "            ", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "memory_used", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "(", "1024.0", "*", "1024.0", ")", "\n", "etas", "=", "batch_time", ".", "avg", "*", "(", "num_steps", "-", "idx", ")", "\n", "logger", ".", "info", "(", "\n", "f'Train: [{epoch}/{config.TRAIN.EPOCHS}][{idx}/{num_steps}], '", "\n", "f'eta {datetime.timedelta(seconds=int(etas))} lr {lr:.6f}, '", "\n", "f'time {batch_time.val:.4f} ({batch_time.avg:.4f}), '", "\n", "f'loss {loss_meter.val:.4f} ({loss_meter.avg:.4f}), '", "\n", "f'grad_norm {norm_meter.val:.4f} ({norm_meter.avg:.4f}), '", "\n", "f'mem {memory_used:.0f}MB'", ")", "\n", "", "", "epoch_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "logger", ".", "info", "(", "f\"EPOCH {epoch} training takes {datetime.timedelta(seconds=int(epoch_time))}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.main.validate": [[239, 285], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "model.eval", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "time.time", "enumerate", "logger.info", "images.cuda.cuda", "target.cuda.cuda", "timm.utils.accuracy", "utils.reduce_tensor", "utils.reduce_tensor", "utils.reduce_tensor", "timm.utils.AverageMeter.update", "timm.utils.AverageMeter.update", "timm.utils.AverageMeter.update", "timm.utils.AverageMeter.update", "time.time", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "torch.nn.CrossEntropyLoss.", "criterion.item", "target.cuda.size", "utils.reduce_tensor.item", "target.cuda.size", "utils.reduce_tensor.item", "target.cuda.size", "logger.info", "time.time", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "len"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.reduce_tensor", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.reduce_tensor", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.reduce_tensor"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate", "(", "config", ",", "data_loader", ",", "model", ")", ":", "\n", "    ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "acc1_meter", "=", "AverageMeter", "(", ")", "\n", "acc5_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "images", "=", "images", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "(", "config", ".", "AMP_OPT_LEVEL", "==", "\"native\"", ")", ")", ":", "\n", "            ", "output", "=", "model", "(", "images", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "acc1", "=", "reduce_tensor", "(", "acc1", ")", "\n", "acc5", "=", "reduce_tensor", "(", "acc5", ")", "\n", "loss", "=", "reduce_tensor", "(", "loss", ")", "\n", "\n", "loss_meter", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "acc1_meter", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "acc5_meter", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "idx", "%", "config", ".", "PRINT_FREQ", "==", "0", ":", "\n", "            ", "memory_used", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "(", "1024.0", "*", "1024.0", ")", "\n", "logger", ".", "info", "(", "\n", "f'Test: [{idx}/{len(data_loader)}]\\t'", "\n", "f'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "f'Loss {loss_meter.val:.4f} ({loss_meter.avg:.4f})\\t'", "\n", "f'Acc@1 {acc1_meter.val:.3f} ({acc1_meter.avg:.3f})\\t'", "\n", "f'Acc@5 {acc5_meter.val:.3f} ({acc5_meter.avg:.3f})\\t'", "\n", "f'Mem {memory_used:.0f}MB'", ")", "\n", "", "", "logger", ".", "info", "(", "f' * Acc@1 {acc1_meter.avg:.3f} Acc@5 {acc5_meter.avg:.3f}'", ")", "\n", "return", "acc1_meter", ".", "avg", ",", "acc5_meter", ".", "avg", ",", "loss_meter", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.main.throughput": [[287, 305], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "enumerate", "images.cuda.cuda", "range", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "logger.info", "time.time", "range", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "logger.info", "model", "model"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "throughput", "(", "data_loader", ",", "model", ",", "logger", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "for", "idx", ",", "(", "images", ",", "_", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "images", "=", "images", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "batch_size", "=", "images", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "            ", "model", "(", "images", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "logger", ".", "info", "(", "f\"throughput averaged with 30 times\"", ")", "\n", "tic1", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "30", ")", ":", "\n", "            ", "model", "(", "images", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "tic2", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "f\"batch_size {batch_size} throughput {30 * batch_size / (tic2 - tic1)}\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.logger.create_logger": [[8, 34], ["functools.lru_cache", "logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join", "logging.Formatter", "logging.Formatter"], "function", ["None"], ["@", "functools", ".", "lru_cache", "(", ")", "\n", "def", "create_logger", "(", "output_dir", ",", "dist_rank", "=", "0", ",", "name", "=", "''", ")", ":", "\n", "# create logger", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "\n", "# create formatter", "\n", "fmt", "=", "'[%(asctime)s %(name)s] (%(filename)s %(lineno)d): %(levelname)s %(message)s'", "\n", "color_fmt", "=", "'[%(asctime)s]'", "+", "': %(levelname)s %(message)s'", "\n", "\n", "# create console handlers for master process", "\n", "if", "dist_rank", "==", "0", ":", "\n", "        ", "console_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "console_handler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "console_handler", ".", "setFormatter", "(", "\n", "logging", ".", "Formatter", "(", "fmt", "=", "color_fmt", ",", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ")", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "\n", "# create file handlers", "\n", "", "file_handler", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "f'log_rank{dist_rank}.txt'", ")", ",", "mode", "=", "'a'", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "file_handler", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "fmt", "=", "fmt", ",", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ")", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.lr_scheduler.LinearLRScheduler.__init__": [[47, 75], ["timm.scheduler.scheduler.Scheduler.__init__", "super().update_groups"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "t_initial", ":", "int", ",", "\n", "lr_min_rate", ":", "float", ",", "\n", "warmup_t", "=", "0", ",", "\n", "warmup_lr_init", "=", "0.", ",", "\n", "t_in_epochs", "=", "True", ",", "\n", "noise_range_t", "=", "None", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.0", ",", "\n", "noise_seed", "=", "42", ",", "\n", "initialize", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "optimizer", ",", "param_group_field", "=", "\"lr\"", ",", "\n", "noise_range_t", "=", "noise_range_t", ",", "noise_pct", "=", "noise_pct", ",", "noise_std", "=", "noise_std", ",", "noise_seed", "=", "noise_seed", ",", "\n", "initialize", "=", "initialize", ")", "\n", "\n", "self", ".", "t_initial", "=", "t_initial", "\n", "self", ".", "lr_min_rate", "=", "lr_min_rate", "\n", "self", ".", "warmup_t", "=", "warmup_t", "\n", "self", ".", "warmup_lr_init", "=", "warmup_lr_init", "\n", "self", ".", "t_in_epochs", "=", "t_in_epochs", "\n", "if", "self", ".", "warmup_t", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "(", "v", "-", "warmup_lr_init", ")", "/", "self", ".", "warmup_t", "for", "v", "in", "self", ".", "base_values", "]", "\n", "super", "(", ")", ".", "update_groups", "(", "self", ".", "warmup_lr_init", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "1", "for", "_", "in", "self", ".", "base_values", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.lr_scheduler.LinearLRScheduler._get_lr": [[76, 84], ["None"], "methods", ["None"], ["", "", "def", "_get_lr", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "t", "<", "self", ".", "warmup_t", ":", "\n", "            ", "lrs", "=", "[", "self", ".", "warmup_lr_init", "+", "t", "*", "s", "for", "s", "in", "self", ".", "warmup_steps", "]", "\n", "", "else", ":", "\n", "            ", "t", "=", "t", "-", "self", ".", "warmup_t", "\n", "total_t", "=", "self", ".", "t_initial", "-", "self", ".", "warmup_t", "\n", "lrs", "=", "[", "v", "-", "(", "(", "v", "-", "v", "*", "self", ".", "lr_min_rate", ")", "*", "(", "t", "/", "total_t", ")", ")", "for", "v", "in", "self", ".", "base_values", "]", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.lr_scheduler.LinearLRScheduler.get_epoch_values": [[85, 90], ["lr_scheduler.LinearLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.None.lr_scheduler.LinearLRScheduler._get_lr"], ["", "def", "get_epoch_values", "(", "self", ",", "epoch", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.lr_scheduler.LinearLRScheduler.get_update_values": [[91, 96], ["lr_scheduler.LinearLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.None.lr_scheduler.LinearLRScheduler._get_lr"], ["", "", "def", "get_update_values", "(", "self", ",", "num_updates", ":", "int", ")", ":", "\n", "        ", "if", "not", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "num_updates", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.lr_scheduler.build_scheduler": [[7, 44], ["int", "int", "int", "timm.scheduler.cosine_lr.CosineLRScheduler", "lr_scheduler.LinearLRScheduler", "timm.scheduler.step_lr.StepLRScheduler"], "function", ["None"], ["def", "build_scheduler", "(", "config", ",", "optimizer", ",", "n_iter_per_epoch", ")", ":", "\n", "    ", "num_steps", "=", "int", "(", "config", ".", "TRAIN", ".", "EPOCHS", "*", "n_iter_per_epoch", ")", "\n", "warmup_steps", "=", "int", "(", "config", ".", "TRAIN", ".", "WARMUP_EPOCHS", "*", "n_iter_per_epoch", ")", "\n", "decay_steps", "=", "int", "(", "config", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "DECAY_EPOCHS", "*", "n_iter_per_epoch", ")", "\n", "\n", "lr_scheduler", "=", "None", "\n", "if", "config", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "NAME", "==", "'cosine'", ":", "\n", "        ", "lr_scheduler", "=", "CosineLRScheduler", "(", "\n", "optimizer", ",", "\n", "t_initial", "=", "num_steps", ",", "\n", "t_mul", "=", "1.", ",", "\n", "lr_min", "=", "config", ".", "TRAIN", ".", "MIN_LR", ",", "\n", "warmup_lr_init", "=", "config", ".", "TRAIN", ".", "WARMUP_LR", ",", "\n", "warmup_t", "=", "warmup_steps", ",", "\n", "cycle_limit", "=", "1", ",", "\n", "t_in_epochs", "=", "False", ",", "\n", ")", "\n", "", "elif", "config", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "NAME", "==", "'linear'", ":", "\n", "        ", "lr_scheduler", "=", "LinearLRScheduler", "(", "\n", "optimizer", ",", "\n", "t_initial", "=", "num_steps", ",", "\n", "lr_min_rate", "=", "0.01", ",", "\n", "warmup_lr_init", "=", "config", ".", "TRAIN", ".", "WARMUP_LR", ",", "\n", "warmup_t", "=", "warmup_steps", ",", "\n", "t_in_epochs", "=", "False", ",", "\n", ")", "\n", "", "elif", "config", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "NAME", "==", "'step'", ":", "\n", "        ", "lr_scheduler", "=", "StepLRScheduler", "(", "\n", "optimizer", ",", "\n", "decay_t", "=", "decay_steps", ",", "\n", "decay_rate", "=", "config", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "DECAY_RATE", ",", "\n", "warmup_lr_init", "=", "config", ".", "TRAIN", ".", "WARMUP_LR", ",", "\n", "warmup_t", "=", "warmup_steps", ",", "\n", "t_in_epochs", "=", "False", ",", "\n", ")", "\n", "\n", "", "return", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.optimizer.build_optimizer": [[4, 26], ["hasattr", "hasattr", "optimizer.set_weight_decay", "config.TRAIN.OPTIMIZER.NAME.lower", "model.no_weight_decay", "model.no_weight_decay_keywords", "torch.optim.SGD", "torch.optim.AdamW"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.None.optimizer.set_weight_decay", "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.no_weight_decay", "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.no_weight_decay_keywords"], ["def", "build_optimizer", "(", "config", ",", "model", ")", ":", "\n", "    ", "\"\"\"\n    Build optimizer, set weight decay of normalization to 0 by default.\n    \"\"\"", "\n", "skip", "=", "{", "}", "\n", "skip_keywords", "=", "{", "}", "\n", "if", "hasattr", "(", "model", ",", "'no_weight_decay'", ")", ":", "\n", "        ", "skip", "=", "model", ".", "no_weight_decay", "(", ")", "\n", "", "if", "hasattr", "(", "model", ",", "'no_weight_decay_keywords'", ")", ":", "\n", "        ", "skip_keywords", "=", "model", ".", "no_weight_decay_keywords", "(", ")", "\n", "", "parameters", "=", "set_weight_decay", "(", "model", ",", "skip", ",", "skip_keywords", ")", "\n", "\n", "opt_lower", "=", "config", ".", "TRAIN", ".", "OPTIMIZER", ".", "NAME", ".", "lower", "(", ")", "\n", "optimizer", "=", "None", "\n", "if", "opt_lower", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "parameters", ",", "momentum", "=", "config", ".", "TRAIN", ".", "OPTIMIZER", ".", "MOMENTUM", ",", "nesterov", "=", "True", ",", "\n", "lr", "=", "config", ".", "TRAIN", ".", "BASE_LR", ",", "weight_decay", "=", "config", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "", "elif", "opt_lower", "==", "'adamw'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "AdamW", "(", "parameters", ",", "eps", "=", "config", ".", "TRAIN", ".", "OPTIMIZER", ".", "EPS", ",", "betas", "=", "config", ".", "TRAIN", ".", "OPTIMIZER", ".", "BETAS", ",", "\n", "lr", "=", "config", ".", "TRAIN", ".", "BASE_LR", ",", "weight_decay", "=", "config", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.optimizer.set_weight_decay": [[28, 43], ["model.named_parameters", "name.endswith", "optimizer.check_keywords_in_name", "no_decay.append", "has_decay.append", "len"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.None.optimizer.check_keywords_in_name"], ["", "def", "set_weight_decay", "(", "model", ",", "skip_list", "=", "(", ")", ",", "skip_keywords", "=", "(", ")", ")", ":", "\n", "    ", "has_decay", "=", "[", "]", "\n", "no_decay", "=", "[", "]", "\n", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "# frozen weights", "\n", "", "if", "len", "(", "param", ".", "shape", ")", "==", "1", "or", "name", ".", "endswith", "(", "\".bias\"", ")", "or", "(", "name", "in", "skip_list", ")", "or", "check_keywords_in_name", "(", "name", ",", "skip_keywords", ")", ":", "\n", "            ", "no_decay", ".", "append", "(", "param", ")", "\n", "# print(f\"{name} has no weight decay\")", "\n", "", "else", ":", "\n", "            ", "has_decay", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "{", "'params'", ":", "has_decay", "}", ",", "\n", "{", "'params'", ":", "no_decay", ",", "'weight_decay'", ":", "0.", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.optimizer.check_keywords_in_name": [[45, 51], ["None"], "function", ["None"], ["", "def", "check_keywords_in_name", "(", "name", ",", "keywords", "=", "(", ")", ")", ":", "\n", "    ", "isin", "=", "False", "\n", "for", "keyword", "in", "keywords", ":", "\n", "        ", "if", "keyword", "in", "name", ":", "\n", "            ", "isin", "=", "True", "\n", "", "", "return", "isin", "\n", "", ""]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.load_checkpoint": [[13, 40], ["logger.info", "config.MODEL.RESUME.startswith", "model.load_state_dict", "logger.info", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.load", "torch.load", "optimizer.load_state_dict", "lr_scheduler.load_state_dict", "config.defrost", "config.freeze", "logger.info", "amp.load_state_dict"], "function", ["None"], ["", "def", "load_checkpoint", "(", "config", ",", "model", ",", "optimizer", ",", "lr_scheduler", ",", "logger", ")", ":", "\n", "    ", "logger", ".", "info", "(", "f\"==============> Resuming form {config.MODEL.RESUME}....................\"", ")", "\n", "if", "config", ".", "MODEL", ".", "RESUME", ".", "startswith", "(", "'https'", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "config", ".", "MODEL", ".", "RESUME", ",", "map_location", "=", "'cpu'", ",", "check_hash", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "config", ".", "MODEL", ".", "RESUME", ",", "map_location", "=", "'cpu'", ")", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ",", "strict", "=", "False", ")", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "max_accuracy", "=", "0.0", "\n", "if", "not", "config", ".", "EVAL_MODE", "and", "'optimizer'", "in", "checkpoint", "and", "'lr_scheduler'", "in", "checkpoint", "and", "'epoch'", "in", "checkpoint", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "lr_scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'lr_scheduler'", "]", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TRAIN", ".", "START_EPOCH", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "config", ".", "freeze", "(", ")", "\n", "if", "'amp'", "in", "checkpoint", "and", "config", ".", "AMP_OPT_LEVEL", "!=", "\"O0\"", "and", "config", ".", "AMP_OPT_LEVEL", "!=", "\"native\"", "and", "checkpoint", "[", "'config'", "]", ".", "AMP_OPT_LEVEL", "!=", "\"O0\"", ":", "\n", "            ", "amp", ".", "load_state_dict", "(", "checkpoint", "[", "'amp'", "]", ")", "\n", "", "logger", ".", "info", "(", "f\"=> loaded successfully '{config.MODEL.RESUME}' (epoch {checkpoint['epoch']})\"", ")", "\n", "if", "'max_accuracy'", "in", "checkpoint", ":", "\n", "            ", "max_accuracy", "=", "checkpoint", "[", "'max_accuracy'", "]", "\n", "\n", "", "", "del", "checkpoint", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "max_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.save_checkpoint": [[42, 58], ["os.path.join", "logger.info", "torch.save", "torch.save", "logger.info", "model.state_dict", "optimizer.state_dict", "lr_scheduler.state_dict", "amp.state_dict", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "config", ",", "epoch", ",", "model", ",", "max_accuracy", ",", "optimizer", ",", "lr_scheduler", ",", "logger", ",", "best", "=", "False", ")", ":", "\n", "    ", "save_state", "=", "{", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'lr_scheduler'", ":", "lr_scheduler", ".", "state_dict", "(", ")", ",", "\n", "'max_accuracy'", ":", "max_accuracy", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'config'", ":", "config", "}", "\n", "if", "config", ".", "AMP_OPT_LEVEL", "!=", "\"O0\"", "and", "config", ".", "AMP_OPT_LEVEL", "!=", "\"native\"", ":", "\n", "        ", "save_state", "[", "'amp'", "]", "=", "amp", ".", "state_dict", "(", ")", "\n", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "OUTPUT", ",", "f'ckpt_epoch_{epoch}.pth'", ")", "\n", "if", "best", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "OUTPUT", ",", "'best.pth'", ")", "\n", "", "logger", ".", "info", "(", "f\"{save_path} saving......\"", ")", "\n", "torch", ".", "save", "(", "save_state", ",", "save_path", ")", "\n", "logger", ".", "info", "(", "f\"{save_path} saved !!!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.get_grad_norm": [[60, 71], ["isinstance", "list", "float", "filter", "p.grad.data.norm", "p.grad.data.norm.item"], "function", ["None"], ["", "def", "get_grad_norm", "(", "parameters", ",", "norm_type", "=", "2", ")", ":", "\n", "    ", "if", "isinstance", "(", "parameters", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "parameters", "=", "[", "parameters", "]", "\n", "", "parameters", "=", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "grad", "is", "not", "None", ",", "parameters", ")", ")", "\n", "norm_type", "=", "float", "(", "norm_type", ")", "\n", "total_norm", "=", "0", "\n", "for", "p", "in", "parameters", ":", "\n", "        ", "param_norm", "=", "p", ".", "grad", ".", "data", ".", "norm", "(", "norm_type", ")", "\n", "total_norm", "+=", "param_norm", ".", "item", "(", ")", "**", "norm_type", "\n", "", "total_norm", "=", "total_norm", "**", "(", "1.", "/", "norm_type", ")", "\n", "return", "total_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.auto_resume_helper": [[73, 84], ["os.listdir", "print", "len", "max", "print", "ckpt.endswith", "os.path.join"], "function", ["None"], ["", "def", "auto_resume_helper", "(", "output_dir", ")", ":", "\n", "    ", "checkpoints", "=", "os", ".", "listdir", "(", "output_dir", ")", "\n", "checkpoints", "=", "[", "ckpt", "for", "ckpt", "in", "checkpoints", "if", "ckpt", ".", "endswith", "(", "'pth'", ")", "]", "\n", "print", "(", "f\"All checkpoints founded in {output_dir}: {checkpoints}\"", ")", "\n", "if", "len", "(", "checkpoints", ")", ">", "0", ":", "\n", "        ", "latest_checkpoint", "=", "max", "(", "[", "os", ".", "path", ".", "join", "(", "output_dir", ",", "d", ")", "for", "d", "in", "checkpoints", "]", ",", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "print", "(", "f\"The latest checkpoint founded: {latest_checkpoint}\"", ")", "\n", "resume_file", "=", "latest_checkpoint", "\n", "", "else", ":", "\n", "        ", "resume_file", "=", "None", "\n", "", "return", "resume_file", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.reduce_tensor": [[86, 91], ["tensor.clone", "torch.all_reduce", "torch.get_world_size"], "function", ["None"], ["", "def", "reduce_tensor", "(", "tensor", ")", ":", "\n", "    ", "rt", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "rt", "/=", "dist", ".", "get_world_size", "(", ")", "\n", "return", "rt", "\n", "", ""]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.get_flops.parse_args": [[16, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--shape'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "1024", ",", "1024", "]", ",", "\n", "help", "=", "'input image size'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.get_flops.get_flops": [[39, 51], ["mmcv.cnn.utils.flops_counter.get_model_complexity_info", "backbone.flops", "mmcv.cnn.utils.flops_counter.flops_to_string", "mmcv.cnn.utils.flops_counter.params_to_string"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.flops"], ["", "def", "get_flops", "(", "model", ",", "input_shape", ")", ":", "\n", "    ", "flops", ",", "params", "=", "get_model_complexity_info", "(", "model", ",", "input_shape", ",", "as_strings", "=", "False", ")", "\n", "\n", "backbone", "=", "model", ".", "backbone", "\n", "backbone_total_flops", ",", "excluded_flops", "=", "backbone", ".", "flops", "(", ")", "\n", "# print('---------')", "\n", "# print('backbone total GFLOPs calculated by us: ', backbone_total_flops / 1e9)", "\n", "# print('excluded GFLOPs by mmcv: ', excluded_flops / 1e9)", "\n", "# print('---------')", "\n", "flops", "+=", "excluded_flops", "\n", "\n", "return", "flops_to_string", "(", "flops", ")", ",", "params_to_string", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.get_flops.main": [[53, 92], ["get_flops.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "mmseg.models.build_segmentor", "torch.cuda.is_available", "mmseg.models.build_segmentor.eval", "hasattr", "get_flops.get_flops", "print", "print", "len", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "mmseg.models.build_segmentor.cuda", "NotImplementedError", "len", "ValueError", "Config.fromfile.get", "Config.fromfile.get", "tuple"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.test.parse_args", "home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.get_flops.get_flops"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "if", "len", "(", "args", ".", "shape", ")", "==", "1", ":", "\n", "        ", "input_shape", "=", "(", "3", ",", "args", ".", "shape", "[", "0", "]", ",", "args", ".", "shape", "[", "0", "]", ")", "\n", "", "elif", "len", "(", "args", ".", "shape", ")", "==", "2", ":", "\n", "        ", "input_shape", "=", "(", "3", ",", ")", "+", "tuple", "(", "args", ".", "shape", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid input shape'", ")", "\n", "\n", "", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "\n", "", "model", "=", "build_segmentor", "(", "\n", "cfg", ".", "model", ",", "\n", "train_cfg", "=", "cfg", ".", "get", "(", "'train_cfg'", ")", ",", "\n", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'forward_dummy'", ")", ":", "\n", "        ", "model", ".", "forward", "=", "model", ".", "forward_dummy", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'FLOPs counter is currently not currently supported with {}'", ".", "\n", "format", "(", "model", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "", "flops", ",", "params", "=", "get_flops", "(", "model", ",", "input_shape", ")", "\n", "\n", "split_line", "=", "'='", "*", "30", "\n", "print", "(", "f'{split_line}\\nInput shape: {input_shape}\\n'", "\n", "f'Flops: {flops}\\nParams: {params}\\n{split_line}'", ")", "\n", "print", "(", "'!!!Please be cautious if you use the results in papers. '", "\n", "'You may need to check if all ops are supported and verify that the '", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.train.parse_args": [[21, 63], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a segmentor'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--work-dir'", ",", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--load-from'", ",", "help", "=", "'the checkpoint file to load weights from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume-from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no-validate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether not to evaluate the checkpoint during training'", ")", "\n", "group_gpus", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpu-ids'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'ids of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "nargs", "=", "'+'", ",", "action", "=", "DictAction", ",", "help", "=", "'custom options'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.train.main": [[65, 162], ["train.parse_args", "mmcv.utils.Config.fromfile", "Config.fromfile.get", "mmcv.mkdir_or_exist", "Config.fromfile.dump", "time.strftime", "os.join", "mmseg.utils.get_root_logger", "dict", "mmseg.utils.collect_env", "mmseg.utils.get_root_logger.info", "mmseg.utils.get_root_logger.info", "mmseg.utils.get_root_logger.info", "os.basename", "mmseg.models.build_segmentor", "mmseg.utils.get_root_logger.info", "mmseg.apis.train_segmentor", "Config.fromfile.merge_from_dict", "mmcv.runner.init_dist", "os.abspath", "os.join", "time.localtime", "mmseg.utils.get_root_logger.info", "mmseg.apis.set_random_seed", "mmseg.datasets.build_dataset", "len", "copy.deepcopy", "datasets.append", "dict", "Config.fromfile.get", "os.join", "range", "range", "os.basename", "Config.fromfile.get", "Config.fromfile.get", "mmseg.datasets.build_dataset", "mmseg.utils.collect_env.items", "os.splitext", "os.basename", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.test.parse_args", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.build.build_dataset", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.build.build_dataset"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# work_dir is determined in this priority: CLI > segment in file > filename", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "# update configs according to CLI args if args.work_dir is not None", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "elif", "cfg", ".", "get", "(", "'work_dir'", ",", "None", ")", "is", "None", ":", "\n", "# use config filename as default work_dir if cfg.work_dir is None", "\n", "        ", "cfg", ".", "work_dir", "=", "osp", ".", "join", "(", "'./work_dirs'", ",", "\n", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", "[", "0", "]", ")", "\n", "", "if", "args", ".", "load_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "load_from", "=", "args", ".", "load_from", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "if", "args", ".", "gpu_ids", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "args", ".", "gpu_ids", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "range", "(", "1", ")", "if", "args", ".", "gpus", "is", "None", "else", "range", "(", "args", ".", "gpus", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# create work_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# dump config", "\n", "cfg", ".", "dump", "(", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "f'{timestamp}.log'", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "f'{k}: {v}'", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "f'Distributed training: {distributed}'", ")", "\n", "logger", ".", "info", "(", "f'Config:\\n{cfg.pretty_text}'", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "f'Set random seed to {args.seed}, deterministic: '", "\n", "f'{args.deterministic}'", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "", "cfg", ".", "seed", "=", "args", ".", "seed", "\n", "meta", "[", "'seed'", "]", "=", "args", ".", "seed", "\n", "meta", "[", "'exp_name'", "]", "=", "osp", ".", "basename", "(", "args", ".", "config", ")", "\n", "\n", "model", "=", "build_segmentor", "(", "\n", "cfg", ".", "model", ",", "\n", "train_cfg", "=", "cfg", ".", "get", "(", "'train_cfg'", ")", ",", "\n", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "\n", "logger", ".", "info", "(", "model", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "if", "len", "(", "cfg", ".", "workflow", ")", "==", "2", ":", "\n", "        ", "val_dataset", "=", "copy", ".", "deepcopy", "(", "cfg", ".", "data", ".", "val", ")", "\n", "val_dataset", ".", "pipeline", "=", "cfg", ".", "data", ".", "train", ".", "pipeline", "\n", "datasets", ".", "append", "(", "build_dataset", "(", "val_dataset", ")", ")", "\n", "", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save mmseg version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "mmseg_version", "=", "f'{__version__}+{get_git_hash()[:7]}'", ",", "\n", "config", "=", "cfg", ".", "pretty_text", ",", "\n", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", ",", "\n", "PALETTE", "=", "datasets", "[", "0", "]", ".", "PALETTE", ")", "\n", "# add an attribute for visualization convenience", "\n", "", "model", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "train_segmentor", "(", "\n", "model", ",", "\n", "datasets", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "validate", "=", "(", "not", "args", ".", "no_validate", ")", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "meta", "=", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize.__init__": [[13, 40], ["isinstance", "mmcv.is_list_of", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "img_scale", "=", "None", ",", "\n", "multiscale_mode", "=", "'range'", ",", "\n", "ratio_range", "=", "None", ",", "\n", "keep_ratio", "=", "True", ",", "\n", "size_divisor", "=", "32", ")", ":", "\n", "        ", "if", "img_scale", "is", "None", ":", "\n", "            ", "self", ".", "img_scale", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "img_scale", ",", "list", ")", ":", "\n", "                ", "self", ".", "img_scale", "=", "img_scale", "\n", "", "else", ":", "\n", "                ", "self", ".", "img_scale", "=", "[", "img_scale", "]", "\n", "", "assert", "mmcv", ".", "is_list_of", "(", "self", ".", "img_scale", ",", "tuple", ")", "\n", "\n", "", "if", "ratio_range", "is", "not", "None", ":", "\n", "# mode 1: given img_scale=None and a range of image ratio", "\n", "# mode 2: given a scale and a range of image ratio", "\n", "            ", "assert", "self", ".", "img_scale", "is", "None", "or", "len", "(", "self", ".", "img_scale", ")", "==", "1", "\n", "", "else", ":", "\n", "# mode 3 and 4: given multiple scales or a range of scales", "\n", "            ", "assert", "multiscale_mode", "in", "[", "'value'", ",", "'range'", "]", "\n", "\n", "", "self", ".", "multiscale_mode", "=", "multiscale_mode", "\n", "self", ".", "ratio_range", "=", "ratio_range", "\n", "self", ".", "keep_ratio", "=", "keep_ratio", "\n", "self", ".", "size_divisor", "=", "size_divisor", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize.random_select": [[41, 58], ["mmcv.is_list_of", "numpy.random.randint", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "random_select", "(", "img_scales", ")", ":", "\n", "        ", "\"\"\"Randomly select an img_scale from given candidates.\n\n        Args:\n            img_scales (list[tuple]): Images scales for selection.\n\n        Returns:\n            (tuple, int): Returns a tuple ``(img_scale, scale_dix)``,\n                where ``img_scale`` is the selected image scale and\n                ``scale_idx`` is the selected index in the given candidates.\n        \"\"\"", "\n", "\n", "assert", "mmcv", ".", "is_list_of", "(", "img_scales", ",", "tuple", ")", "\n", "scale_idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "img_scales", ")", ")", "\n", "img_scale", "=", "img_scales", "[", "scale_idx", "]", "\n", "return", "img_scale", ",", "scale_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize.random_sample": [[59, 85], ["numpy.random.randint", "numpy.random.randint", "mmcv.is_list_of", "max", "min", "min", "min", "len", "max", "max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "random_sample", "(", "img_scales", ")", ":", "\n", "        ", "\"\"\"Randomly sample an img_scale when ``multiscale_mode=='range'``.\n\n        Args:\n            img_scales (list[tuple]): Images scale range for sampling.\n                There must be two tuples in img_scales, which specify the lower\n                and uper bound of image scales.\n\n        Returns:\n            (tuple, None): Returns a tuple ``(img_scale, None)``, where\n                ``img_scale`` is sampled scale and None is just a placeholder\n                to be consistent with :func:`random_select`.\n        \"\"\"", "\n", "\n", "assert", "mmcv", ".", "is_list_of", "(", "img_scales", ",", "tuple", ")", "and", "len", "(", "img_scales", ")", "==", "2", "\n", "img_scale_long", "=", "[", "max", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "img_scale_short", "=", "[", "min", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "long_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_long", ")", ",", "\n", "max", "(", "img_scale_long", ")", "+", "1", ")", "\n", "short_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_short", ")", ",", "\n", "max", "(", "img_scale_short", ")", "+", "1", ")", "\n", "img_scale", "=", "(", "long_edge", ",", "short_edge", ")", "\n", "return", "img_scale", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize.random_sample_ratio": [[86, 112], ["isinstance", "int", "int", "len", "numpy.random.random_sample"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize.random_sample"], ["", "@", "staticmethod", "\n", "def", "random_sample_ratio", "(", "img_scale", ",", "ratio_range", ")", ":", "\n", "        ", "\"\"\"Randomly sample an img_scale when ``ratio_range`` is specified.\n\n        A ratio will be randomly sampled from the range specified by\n        ``ratio_range``. Then it would be multiplied with ``img_scale`` to\n        generate sampled scale.\n\n        Args:\n            img_scale (tuple): Images scale base to multiply with ratio.\n            ratio_range (tuple[float]): The minimum and maximum ratio to scale\n                the ``img_scale``.\n\n        Returns:\n            (tuple, None): Returns a tuple ``(scale, None)``, where\n                ``scale`` is sampled ratio multiplied with ``img_scale`` and\n                None is just a placeholder to be consistent with\n                :func:`random_select`.\n        \"\"\"", "\n", "\n", "assert", "isinstance", "(", "img_scale", ",", "tuple", ")", "and", "len", "(", "img_scale", ")", "==", "2", "\n", "min_ratio", ",", "max_ratio", "=", "ratio_range", "\n", "assert", "min_ratio", "<=", "max_ratio", "\n", "ratio", "=", "np", ".", "random", ".", "random_sample", "(", ")", "*", "(", "max_ratio", "-", "min_ratio", ")", "+", "min_ratio", "\n", "scale", "=", "int", "(", "img_scale", "[", "0", "]", "*", "ratio", ")", ",", "int", "(", "img_scale", "[", "1", "]", "*", "ratio", ")", "\n", "return", "scale", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize._random_scale": [[113, 150], ["align_resize.AlignResize.random_sample_ratio", "align_resize.AlignResize.random_sample_ratio", "len", "align_resize.AlignResize.random_sample", "align_resize.AlignResize.random_select"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize.random_sample_ratio", "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize.random_sample_ratio", "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize.random_sample", "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize.random_select"], ["", "def", "_random_scale", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Randomly sample an img_scale according to ``ratio_range`` and\n        ``multiscale_mode``.\n\n        If ``ratio_range`` is specified, a ratio will be sampled and be\n        multiplied with ``img_scale``.\n        If multiple scales are specified by ``img_scale``, a scale will be\n        sampled according to ``multiscale_mode``.\n        Otherwise, single scale will be used.\n\n        Args:\n            results (dict): Result dict from :obj:`dataset`.\n\n        Returns:\n            dict: Two new keys 'scale` and 'scale_idx` are added into\n                ``results``, which would be used by subsequent pipelines.\n        \"\"\"", "\n", "\n", "if", "self", ".", "ratio_range", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "img_scale", "is", "None", ":", "\n", "                ", "h", ",", "w", "=", "results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "\n", "scale", ",", "scale_idx", "=", "self", ".", "random_sample_ratio", "(", "(", "w", ",", "h", ")", ",", "\n", "self", ".", "ratio_range", ")", "\n", "", "else", ":", "\n", "                ", "scale", ",", "scale_idx", "=", "self", ".", "random_sample_ratio", "(", "\n", "self", ".", "img_scale", "[", "0", "]", ",", "self", ".", "ratio_range", ")", "\n", "", "", "elif", "len", "(", "self", ".", "img_scale", ")", "==", "1", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "img_scale", "[", "0", "]", ",", "0", "\n", "", "elif", "self", ".", "multiscale_mode", "==", "'range'", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "random_sample", "(", "self", ".", "img_scale", ")", "\n", "", "elif", "self", ".", "multiscale_mode", "==", "'value'", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "random_select", "(", "self", ".", "img_scale", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "results", "[", "'scale'", "]", "=", "scale", "\n", "results", "[", "'scale_idx'", "]", "=", "scale_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize._align": [[151, 159], ["int", "int", "mmcv.imresize", "mmcv.imresize", "numpy.ceil", "numpy.ceil"], "methods", ["None"], ["", "def", "_align", "(", "self", ",", "img", ",", "size_divisor", ",", "interpolation", "=", "None", ")", ":", "\n", "        ", "align_h", "=", "int", "(", "np", ".", "ceil", "(", "img", ".", "shape", "[", "0", "]", "/", "size_divisor", ")", ")", "*", "size_divisor", "\n", "align_w", "=", "int", "(", "np", ".", "ceil", "(", "img", ".", "shape", "[", "1", "]", "/", "size_divisor", ")", ")", "*", "size_divisor", "\n", "if", "interpolation", "==", "None", ":", "\n", "            ", "img", "=", "mmcv", ".", "imresize", "(", "img", ",", "(", "align_w", ",", "align_h", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "mmcv", ".", "imresize", "(", "img", ",", "(", "align_w", ",", "align_h", ")", ",", "interpolation", "=", "interpolation", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize._resize_img": [[160, 188], ["numpy.array", "mmcv.imrescale", "align_resize.AlignResize._align", "mmcv.imresize", "int", "int", "numpy.ceil", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize._align"], ["", "def", "_resize_img", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Resize images with ``results['scale']``.\"\"\"", "\n", "if", "self", ".", "keep_ratio", ":", "\n", "            ", "img", ",", "scale_factor", "=", "mmcv", ".", "imrescale", "(", "\n", "results", "[", "'img'", "]", ",", "results", "[", "'scale'", "]", ",", "return_scale", "=", "True", ")", "\n", "#### align ####", "\n", "img", "=", "self", ".", "_align", "(", "img", ",", "self", ".", "size_divisor", ")", "\n", "# the w_scale and h_scale has minor difference", "\n", "# a real fix should be done in the mmcv.imrescale in the future", "\n", "new_h", ",", "new_w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "h", ",", "w", "=", "results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "\n", "w_scale", "=", "new_w", "/", "w", "\n", "h_scale", "=", "new_h", "/", "h", "\n", "", "else", ":", "\n", "            ", "img", ",", "w_scale", ",", "h_scale", "=", "mmcv", ".", "imresize", "(", "\n", "results", "[", "'img'", "]", ",", "results", "[", "'scale'", "]", ",", "return_scale", "=", "True", ")", "\n", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "assert", "int", "(", "np", ".", "ceil", "(", "h", "/", "self", ".", "size_divisor", ")", ")", "*", "self", ".", "size_divisor", "==", "h", "and", "int", "(", "np", ".", "ceil", "(", "w", "/", "self", ".", "size_divisor", ")", ")", "*", "self", ".", "size_divisor", "==", "w", ",", "\"img size not align. h:{} w:{}\"", ".", "format", "(", "h", ",", "w", ")", "\n", "", "scale_factor", "=", "np", ".", "array", "(", "[", "w_scale", ",", "h_scale", ",", "w_scale", ",", "h_scale", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "# in case that there is no padding", "\n", "results", "[", "'scale_factor'", "]", "=", "scale_factor", "\n", "results", "[", "'keep_ratio'", "]", "=", "self", ".", "keep_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize._resize_seg": [[189, 204], ["results.get", "mmcv.imrescale", "align_resize.AlignResize._align", "mmcv.imresize", "int", "int", "numpy.ceil", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize._align"], ["", "def", "_resize_seg", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Resize semantic segmentation map with ``results['scale']``.\"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "if", "self", ".", "keep_ratio", ":", "\n", "                ", "gt_seg", "=", "mmcv", ".", "imrescale", "(", "\n", "results", "[", "key", "]", ",", "results", "[", "'scale'", "]", ",", "interpolation", "=", "'nearest'", ")", "\n", "gt_seg", "=", "self", ".", "_align", "(", "gt_seg", ",", "self", ".", "size_divisor", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "                ", "gt_seg", "=", "mmcv", ".", "imresize", "(", "\n", "results", "[", "key", "]", ",", "results", "[", "'scale'", "]", ",", "interpolation", "=", "'nearest'", ")", "\n", "h", ",", "w", "=", "gt_seg", ".", "shape", "[", ":", "2", "]", "\n", "assert", "int", "(", "np", ".", "ceil", "(", "h", "/", "self", ".", "size_divisor", ")", ")", "*", "self", ".", "size_divisor", "==", "h", "and", "int", "(", "np", ".", "ceil", "(", "w", "/", "self", ".", "size_divisor", ")", ")", "*", "self", ".", "size_divisor", "==", "w", ",", "\"gt_seg size not align. h:{} w:{}\"", ".", "format", "(", "h", ",", "w", ")", "\n", "", "results", "[", "key", "]", "=", "gt_seg", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize.__call__": [[205, 222], ["align_resize.AlignResize._resize_img", "align_resize.AlignResize._resize_seg", "align_resize.AlignResize._random_scale"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize._resize_img", "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize._resize_seg", "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize._random_scale"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to resize images, bounding boxes, masks, semantic\n        segmentation map.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Resized results, 'img_shape', 'pad_shape', 'scale_factor',\n                'keep_ratio' keys are added into result dict.\n        \"\"\"", "\n", "\n", "if", "'scale'", "not", "in", "results", ":", "\n", "            ", "self", ".", "_random_scale", "(", "results", ")", "\n", "", "self", ".", "_resize_img", "(", "results", ")", "\n", "self", ".", "_resize_seg", "(", "results", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.align_resize.AlignResize.__repr__": [[223, 230], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "(", "f'(img_scale={self.img_scale}, '", "\n", "f'multiscale_mode={self.multiscale_mode}, '", "\n", "f'ratio_range={self.ratio_range}, '", "\n", "f'keep_ratio={self.keep_ratio})'", ")", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.crossformer_factory.CrossFormer_S.__init__": [[16, 35], ["models.crossformer_backbone.CrossFormer.__init__"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CrossFormer_S", ",", "self", ")", ".", "__init__", "(", "\n", "img_size", "=", "[", "1024", ",", "1024", "]", ",", "# This is only used to compute the FLOPs under the give image size", "\n", "patch_size", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ",", "\n", "in_chans", "=", "3", ",", "\n", "num_classes", "=", "1000", ",", "\n", "embed_dim", "=", "96", ",", "\n", "depths", "=", "[", "2", ",", "2", ",", "6", ",", "2", "]", ",", "\n", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "\n", "group_size", "=", "kwargs", "[", "\"group_size\"", "]", ",", "\n", "crs_interval", "=", "kwargs", "[", "\"crs_interval\"", "]", ",", "\n", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "drop_path_rate", "=", "0.2", ",", "\n", "patch_norm", "=", "True", ",", "\n", "use_checkpoint", "=", "False", ",", "\n", "merge_size", "=", "[", "[", "2", ",", "4", "]", ",", "[", "2", ",", "4", "]", ",", "[", "2", ",", "4", "]", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.crossformer_factory.CrossFormer_B.__init__": [[39, 58], ["models.crossformer_backbone.CrossFormer.__init__"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CrossFormer_B", ",", "self", ")", ".", "__init__", "(", "\n", "img_size", "=", "[", "1024", ",", "1024", "]", ",", "\n", "patch_size", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ",", "\n", "in_chans", "=", "3", ",", "\n", "num_classes", "=", "1000", ",", "\n", "embed_dim", "=", "96", ",", "\n", "depths", "=", "[", "2", ",", "2", ",", "18", ",", "2", "]", ",", "\n", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "\n", "group_size", "=", "kwargs", "[", "\"group_size\"", "]", ",", "\n", "crs_interval", "=", "kwargs", "[", "\"crs_interval\"", "]", ",", "\n", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "drop_path_rate", "=", "0.3", ",", "\n", "patch_norm", "=", "True", ",", "\n", "use_checkpoint", "=", "False", ",", "\n", "merge_size", "=", "[", "[", "2", ",", "4", "]", ",", "[", "2", ",", "4", "]", ",", "[", "2", ",", "4", "]", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.crossformer_factory.CrossFormer_L.__init__": [[62, 81], ["models.crossformer_backbone.CrossFormer.__init__"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CrossFormer_L", ",", "self", ")", ".", "__init__", "(", "\n", "img_size", "=", "[", "1024", ",", "1024", "]", ",", "\n", "patch_size", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ",", "\n", "in_chans", "=", "3", ",", "\n", "num_classes", "=", "1000", ",", "\n", "embed_dim", "=", "128", ",", "\n", "depths", "=", "[", "2", ",", "2", ",", "18", ",", "2", "]", ",", "\n", "num_heads", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ",", "\n", "group_size", "=", "kwargs", "[", "\"group_size\"", "]", ",", "\n", "crs_interval", "=", "kwargs", "[", "\"crs_interval\"", "]", ",", "\n", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "drop_path_rate", "=", "0.5", ",", "\n", "patch_norm", "=", "True", ",", "\n", "use_checkpoint", "=", "False", ",", "\n", "merge_size", "=", "[", "[", "2", ",", "4", "]", ",", "[", "2", ",", "4", "]", ",", "[", "2", ",", "4", "]", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.test.parse_args": [[18, 71], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'mmseg test (and eval) a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--aug-test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use Flip and Multi scale aug'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file in pickle format'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--format-only'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Format the output results without perform evaluation. It is'", "\n", "'useful when you want to format the result to a specific format and '", "\n", "'submit it to the test server'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'evaluation metrics, which depends on the dataset, e.g., \"mIoU\"'", "\n", "' for generic datasets, and \"cityscapes\" for Cityscapes'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-dir'", ",", "help", "=", "'directory where painted images will be saved'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpu-collect'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to use gpu to collect results.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--tmpdir'", ",", "\n", "help", "=", "'tmp directory used for collecting results from multiple '", "\n", "'workers, available when gpu_collect is not specified'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--options'", ",", "nargs", "=", "'+'", ",", "action", "=", "DictAction", ",", "help", "=", "'custom options'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--opacity'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ",", "\n", "help", "=", "'Opacity of painted segmentation map. In (0, 1] range.'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.segmentation.test.main": [[73, 156], ["test.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmseg.datasets.build_dataset", "mmseg.datasets.build_dataloader", "mmseg.models.build_segmentor", "mmcv.Config.fromfile.get", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "ValueError", "ValueError", "mmcv.Config.fromfile.merge_from_dict", "mmcv.runner.init_dist", "mmcv.runner.wrap_fp16_model", "parse_args.eval_options.get", "mmcv.parallel.MMDataParallel", "mmseg.apis.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "mmseg.apis.multi_gpu_test", "parse_args.out.endswith", "mmcv.Config.fromfile.get", "mmcv.parallel.MMDistributedDataParallel.cuda", "print", "mmcv.dump", "mmseg.datasets.build_dataset.format_results", "mmseg.datasets.build_dataset.evaluate", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.test.parse_args", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.build.build_dataset", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.load_checkpoint"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "eval", "or", "args", ".", "format_only", "or", "args", ".", "show", "or", "args", ".", "show_dir", ",", "(", "'Please specify at least one operation (save/eval/format/show the '", "\n", "'results / save the results) with the argument \"--out\", \"--eval\"'", "\n", "', \"--format-only\", \"--show\" or \"--show-dir\"'", ")", "\n", "\n", "if", "args", ".", "eval", "and", "args", ".", "format_only", ":", "\n", "        ", "raise", "ValueError", "(", "'--eval and --format_only cannot be both specified'", ")", "\n", "\n", "", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "options", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "if", "args", ".", "aug_test", ":", "\n", "# hard code index", "\n", "        ", "cfg", ".", "data", ".", "test", ".", "pipeline", "[", "1", "]", ".", "img_ratios", "=", "[", "\n", "0.5", ",", "0.75", ",", "1.0", ",", "1.25", ",", "1.5", ",", "1.75", "\n", "]", "\n", "cfg", ".", "data", ".", "test", ".", "pipeline", "[", "1", "]", ".", "flip", "=", "True", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# build the dataloader", "\n", "# TODO: support multiple images per gpu (only minor changes are needed)", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "cfg", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_segmentor", "(", "cfg", ".", "model", ",", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "model", ".", "PALETTE", "=", "checkpoint", "[", "'meta'", "]", "[", "'PALETTE'", "]", "\n", "\n", "efficient_test", "=", "False", "\n", "if", "args", ".", "eval_options", "is", "not", "None", ":", "\n", "        ", "efficient_test", "=", "args", ".", "eval_options", ".", "get", "(", "'efficient_test'", ",", "False", ")", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "show", ",", "args", ".", "show_dir", ",", "\n", "efficient_test", ",", "args", ".", "opacity", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ",", "\n", "args", ".", "gpu_collect", ",", "efficient_test", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "if", "args", ".", "out", ":", "\n", "            ", "print", "(", "f'\\nwriting results to {args.out}'", ")", "\n", "mmcv", ".", "dump", "(", "outputs", ",", "args", ".", "out", ")", "\n", "", "kwargs", "=", "{", "}", "if", "args", ".", "eval_options", "is", "None", "else", "args", ".", "eval_options", "\n", "if", "args", ".", "format_only", ":", "\n", "            ", "dataset", ".", "format_results", "(", "outputs", ",", "**", "kwargs", ")", "\n", "", "if", "args", ".", "eval", ":", "\n", "            ", "dataset", ".", "evaluate", "(", "outputs", ",", "args", ".", "eval", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.build.build_model": [[4, 28], ["crossformer.CrossFormer", "NotImplementedError"], "function", ["None"], ["def", "build_model", "(", "config", ",", "args", ")", ":", "\n", "    ", "model_type", "=", "config", ".", "MODEL", ".", "TYPE", "\n", "if", "model_type", "==", "'cross-scale'", ":", "\n", "        ", "model", "=", "CrossFormer", "(", "img_size", "=", "config", ".", "DATA", ".", "IMG_SIZE", ",", "\n", "patch_size", "=", "config", ".", "MODEL", ".", "CROS", ".", "PATCH_SIZE", ",", "\n", "in_chans", "=", "config", ".", "MODEL", ".", "CROS", ".", "IN_CHANS", ",", "\n", "num_classes", "=", "config", ".", "MODEL", ".", "NUM_CLASSES", ",", "\n", "embed_dim", "=", "config", ".", "MODEL", ".", "CROS", ".", "EMBED_DIM", ",", "\n", "depths", "=", "config", ".", "MODEL", ".", "CROS", ".", "DEPTHS", ",", "\n", "num_heads", "=", "config", ".", "MODEL", ".", "CROS", ".", "NUM_HEADS", ",", "\n", "group_size", "=", "config", ".", "MODEL", ".", "CROS", ".", "GROUP_SIZE", ",", "\n", "mlp_ratio", "=", "config", ".", "MODEL", ".", "CROS", ".", "MLP_RATIO", ",", "\n", "qkv_bias", "=", "config", ".", "MODEL", ".", "CROS", ".", "QKV_BIAS", ",", "\n", "qk_scale", "=", "config", ".", "MODEL", ".", "CROS", ".", "QK_SCALE", ",", "\n", "drop_rate", "=", "config", ".", "MODEL", ".", "DROP_RATE", ",", "\n", "drop_path_rate", "=", "config", ".", "MODEL", ".", "DROP_PATH_RATE", ",", "\n", "ape", "=", "config", ".", "MODEL", ".", "CROS", ".", "APE", ",", "\n", "patch_norm", "=", "config", ".", "MODEL", ".", "CROS", ".", "PATCH_NORM", ",", "\n", "use_checkpoint", "=", "config", ".", "TRAIN", ".", "USE_CHECKPOINT", ",", "\n", "merge_size", "=", "config", ".", "MODEL", ".", "CROS", ".", "MERGE_SIZE", ",", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Unkown model: {model_type}\"", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.Mlp.__init__": [[13, 21], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.Mlp.forward": [[22, 29], ["crossformer_backbone.Mlp.fc1", "crossformer_backbone.Mlp.act", "crossformer_backbone.Mlp.drop", "crossformer_backbone.Mlp.fc2", "crossformer_backbone.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.DynamicPosBias.__init__": [[32, 52], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "residual", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "pos_dim", "=", "dim", "//", "4", "\n", "self", ".", "pos_proj", "=", "nn", ".", "Linear", "(", "2", ",", "self", ".", "pos_dim", ")", "\n", "self", ".", "pos1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LayerNorm", "(", "self", ".", "pos_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "pos_dim", ",", "self", ".", "pos_dim", ")", ",", "\n", ")", "\n", "self", ".", "pos2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LayerNorm", "(", "self", ".", "pos_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "pos_dim", ",", "self", ".", "pos_dim", ")", "\n", ")", "\n", "self", ".", "pos3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LayerNorm", "(", "self", ".", "pos_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "pos_dim", ",", "self", ".", "num_heads", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.DynamicPosBias.forward": [[53, 62], ["crossformer_backbone.DynamicPosBias.pos_proj", "crossformer_backbone.DynamicPosBias.pos3", "crossformer_backbone.DynamicPosBias.pos3", "crossformer_backbone.DynamicPosBias.pos1", "crossformer_backbone.DynamicPosBias.pos2", "crossformer_backbone.DynamicPosBias.pos2", "crossformer_backbone.DynamicPosBias.pos1", "crossformer_backbone.DynamicPosBias.pos_proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "biases", ")", ":", "\n", "        ", "if", "self", ".", "residual", ":", "\n", "            ", "pos", "=", "self", ".", "pos_proj", "(", "biases", ")", "# 2Gh-1 * 2Gw-1, heads", "\n", "pos", "=", "pos", "+", "self", ".", "pos1", "(", "pos", ")", "\n", "pos", "=", "pos", "+", "self", ".", "pos2", "(", "pos", ")", "\n", "pos", "=", "self", ".", "pos3", "(", "pos", ")", "\n", "", "else", ":", "\n", "            ", "pos", "=", "self", ".", "pos3", "(", "self", ".", "pos2", "(", "self", ".", "pos1", "(", "self", ".", "pos_proj", "(", "biases", ")", ")", ")", ")", "\n", "", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.DynamicPosBias.flops": [[63, 69], ["None"], "methods", ["None"], ["", "def", "flops", "(", "self", ",", "N", ")", ":", "\n", "        ", "flops", "=", "N", "*", "2", "*", "self", ".", "pos_dim", "\n", "flops", "+=", "N", "*", "self", ".", "pos_dim", "*", "self", ".", "pos_dim", "\n", "flops", "+=", "N", "*", "self", ".", "pos_dim", "*", "self", ".", "pos_dim", "\n", "flops", "+=", "N", "*", "self", ".", "pos_dim", "*", "self", ".", "num_heads", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.Attention.__init__": [[82, 100], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "crossformer_backbone.DynamicPosBias"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "\n", "position_bias", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "self", ".", "position_bias", "=", "position_bias", "\n", "if", "self", ".", "position_bias", ":", "\n", "            ", "self", ".", "pos", "=", "DynamicPosBias", "(", "self", ".", "dim", "//", "4", ",", "self", ".", "num_heads", ",", "residual", "=", "False", ")", "\n", "\n", "", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.Attention.forward": [[101, 156], ["crossformer_backbone.Attention.qkv().reshape().permute().contiguous", "crossformer_backbone.Attention.attn_drop", "crossformer_backbone.Attention.proj", "crossformer_backbone.Attention.proj_drop", "k.transpose", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "biases.flatten().transpose().contiguous().float.flatten().transpose().contiguous().float.flatten().transpose().contiguous().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "crossformer_backbone.Attention.pos", "pos[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "crossformer_backbone.Attention.view", "crossformer_backbone.Attention.softmax", "crossformer_backbone.Attention.softmax", "crossformer_backbone.Attention.qkv().reshape().permute", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "crossformer_backbone.Attention.view", "mask.unsqueeze().unsqueeze", "biases.flatten().transpose().contiguous().float.flatten().transpose().contiguous().float.flatten().transpose().contiguous", "relative_coords.permute().contiguous.permute().contiguous.permute", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "crossformer_backbone.Attention.qkv().reshape", "mask.unsqueeze", "biases.flatten().transpose().contiguous().float.flatten().transpose().contiguous().float.flatten().transpose", "relative_coords.permute().contiguous.sum.view", "crossformer_backbone.Attention.qkv", "biases.flatten().transpose().contiguous().float.flatten().transpose().contiguous().float.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: input features with shape of (num_windows*B, N, C)\n            mask: (0/-inf) mask with shape of (num_windows, Gh*Gw, Gh*Gw) or None\n        \"\"\"", "\n", "group_size", "=", "(", "H", ",", "W", ")", "\n", "B_", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "assert", "H", "*", "W", "==", "N", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B_", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "q", "=", "q", "*", "self", ".", "scale", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "# (B, self.num_heads, N, N), N = H*W", "\n", "\n", "if", "self", ".", "position_bias", ":", "\n", "# generate mother-set", "\n", "            ", "position_bias_h", "=", "torch", ".", "arange", "(", "1", "-", "group_size", "[", "0", "]", ",", "group_size", "[", "0", "]", ",", "device", "=", "attn", ".", "device", ")", "\n", "position_bias_w", "=", "torch", ".", "arange", "(", "1", "-", "group_size", "[", "1", "]", ",", "group_size", "[", "1", "]", ",", "device", "=", "attn", ".", "device", ")", "\n", "biases", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "position_bias_h", ",", "position_bias_w", "]", ")", ")", "# 2, 2Gh-1, 2W2-1", "\n", "biases", "=", "biases", ".", "flatten", "(", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "float", "(", ")", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "group_size", "[", "0", "]", ",", "device", "=", "attn", ".", "device", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "group_size", "[", "1", "]", ",", "device", "=", "attn", ".", "device", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Gh, Gw", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Gh*Gw", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Gh*Gw, Gh*Gw", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Gh*Gw, Gh*Gw, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "group_size", "[", "0", "]", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "group_size", "[", "1", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "group_size", "[", "1", "]", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Gh*Gw, Gh*Gw", "\n", "\n", "pos", "=", "self", ".", "pos", "(", "biases", ")", "# 2Gh-1 * 2Gw-1, heads", "\n", "# select position bias", "\n", "relative_position_bias", "=", "pos", "[", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "group_size", "[", "0", "]", "*", "group_size", "[", "1", "]", ",", "group_size", "[", "0", "]", "*", "group_size", "[", "1", "]", ",", "-", "1", ")", "# Gh*Gw,Gh*Gw,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Gh*Gw, Gh*Gw", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "            ", "nG", "=", "mask", ".", "shape", "[", "0", "]", "\n", "attn", "=", "attn", ".", "view", "(", "B_", "//", "nG", ",", "nG", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "+", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "0", ")", "# (B, nG, nHead, N, N)", "\n", "attn", "=", "attn", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "\n", "", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B_", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.Attention.extra_repr": [[157, 159], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f'dim={self.dim}, num_heads={self.num_heads}'", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.Attention.flops": [[160, 177], ["crossformer_backbone.Attention.pos.flops"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.flops"], ["", "def", "flops", "(", "self", ",", "N", ")", ":", "\n", "# calculate flops for 1 window with token length of N", "\n", "        ", "flops", "=", "0", "\n", "excluded_flops", "=", "0", "\n", "# qkv = self.qkv(x)", "\n", "flops", "+=", "N", "*", "self", ".", "dim", "*", "3", "*", "self", ".", "dim", "\n", "# attn = (q @ k.transpose(-2, -1))", "\n", "flops", "+=", "self", ".", "num_heads", "*", "N", "*", "(", "self", ".", "dim", "//", "self", ".", "num_heads", ")", "*", "N", "\n", "excluded_flops", "+=", "self", ".", "num_heads", "*", "N", "*", "(", "self", ".", "dim", "//", "self", ".", "num_heads", ")", "*", "N", "\n", "#  x = (attn @ v)", "\n", "flops", "+=", "self", ".", "num_heads", "*", "N", "*", "N", "*", "(", "self", ".", "dim", "//", "self", ".", "num_heads", ")", "\n", "excluded_flops", "+=", "self", ".", "num_heads", "*", "N", "*", "N", "*", "(", "self", ".", "dim", "//", "self", ".", "num_heads", ")", "\n", "# x = self.proj(x)", "\n", "flops", "+=", "N", "*", "self", ".", "dim", "*", "self", ".", "dim", "\n", "if", "self", ".", "position_bias", ":", "\n", "            ", "flops", "+=", "self", ".", "pos", ".", "flops", "(", "N", ")", "\n", "", "return", "flops", ",", "excluded_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.CrossFormerBlock.__init__": [[198, 222], ["torch.Module.__init__", "norm_layer", "crossformer_backbone.Attention", "norm_layer", "int", "crossformer_backbone.Mlp", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "input_resolution", ",", "num_heads", ",", "group_size", "=", "7", ",", "interval", "=", "8", ",", "lsda_flag", "=", "0", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "num_patch_size", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "lsda_flag", "=", "lsda_flag", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "self", ".", "num_patch_size", "=", "num_patch_size", "\n", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "\n", "position_bias", "=", "True", ")", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.CrossFormerBlock.forward": [[223, 298], ["crossformer_backbone.CrossFormerBlock.norm1", "x[].contiguous.view", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "crossformer_backbone.CrossFormerBlock.attn", "x[].contiguous.reshape", "x[].contiguous.view", "min", "min", "x[].contiguous.reshape().permute().contiguous", "x[].contiguous.reshape", "x[].contiguous.reshape().permute().contiguous", "x[].contiguous.reshape", "x[].contiguous.reshape().permute().contiguous", "x[].contiguous.reshape().permute().contiguous", "x[].contiguous", "crossformer_backbone.CrossFormerBlock.drop_path", "crossformer_backbone.CrossFormerBlock.drop_path", "mask.reshape.reshape.reshape().permute().contiguous", "mask.reshape.reshape.reshape", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "attn_mask.masked_fill.masked_fill.masked_fill", "mask.reshape.reshape.reshape().permute().contiguous", "mask.reshape.reshape.reshape", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "attn_mask.masked_fill.masked_fill.masked_fill", "crossformer_backbone.CrossFormerBlock.mlp", "x[].contiguous.reshape().permute", "x[].contiguous.reshape().permute", "x[].contiguous.reshape().permute", "x[].contiguous.reshape().permute", "crossformer_backbone.CrossFormerBlock.norm2", "mask.reshape.reshape.reshape().permute", "mask.reshape.reshape.reshape().permute", "x[].contiguous.reshape", "x[].contiguous.reshape", "x[].contiguous.reshape", "x[].contiguous.reshape", "mask.reshape.reshape.reshape", "mask.reshape.reshape.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size %d, %d, %d\"", "%", "(", "L", ",", "H", ",", "W", ")", "\n", "\n", "if", "min", "(", "H", ",", "W", ")", "<=", "self", ".", "group_size", ":", "\n", "# if window size is larger than input resolution, we don't partition windows", "\n", "            ", "self", ".", "lsda_flag", "=", "0", "\n", "self", ".", "group_size", "=", "min", "(", "H", ",", "W", ")", "\n", "\n", "", "shortcut", "=", "x", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "# padding", "\n", "size_div", "=", "self", ".", "interval", "if", "self", ".", "lsda_flag", "==", "1", "else", "self", ".", "group_size", "\n", "pad_l", "=", "pad_t", "=", "0", "\n", "pad_r", "=", "(", "size_div", "-", "W", "%", "size_div", ")", "%", "size_div", "\n", "pad_b", "=", "(", "size_div", "-", "H", "%", "size_div", ")", "%", "size_div", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "pad_l", ",", "pad_r", ",", "pad_t", ",", "pad_b", ")", ")", "\n", "_", ",", "Hp", ",", "Wp", ",", "_", "=", "x", ".", "shape", "\n", "\n", "mask", "=", "torch", ".", "zeros", "(", "(", "1", ",", "Hp", ",", "Wp", ",", "1", ")", ",", "device", "=", "x", ".", "device", ")", "\n", "if", "pad_b", ">", "0", ":", "\n", "            ", "mask", "[", ":", ",", "-", "pad_b", ":", ",", ":", ",", ":", "]", "=", "-", "1", "\n", "", "if", "pad_r", ">", "0", ":", "\n", "            ", "mask", "[", ":", ",", ":", ",", "-", "pad_r", ":", ",", ":", "]", "=", "-", "1", "\n", "\n", "# group embeddings and generate attn_mask", "\n", "", "if", "self", ".", "lsda_flag", "==", "0", ":", "# SDA", "\n", "            ", "G", "=", "Gh", "=", "Gw", "=", "self", ".", "group_size", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "Hp", "//", "G", ",", "G", ",", "Wp", "//", "G", ",", "G", ",", "C", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "reshape", "(", "B", "*", "Hp", "*", "Wp", "//", "G", "**", "2", ",", "G", "**", "2", ",", "C", ")", "\n", "nG", "=", "Hp", "*", "Wp", "//", "G", "**", "2", "\n", "# attn_mask", "\n", "if", "pad_r", ">", "0", "or", "pad_b", ">", "0", ":", "\n", "                ", "mask", "=", "mask", ".", "reshape", "(", "1", ",", "Hp", "//", "G", ",", "G", ",", "Wp", "//", "G", ",", "G", ",", "1", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "nG", ",", "1", ",", "G", "*", "G", ")", "\n", "attn_mask", "=", "torch", ".", "zeros", "(", "(", "nG", ",", "G", "*", "G", ",", "G", "*", "G", ")", ",", "device", "=", "x", ".", "device", ")", "\n", "attn_mask", "=", "attn_mask", ".", "masked_fill", "(", "mask", "<", "0", ",", "NEG_INF", ")", "\n", "", "else", ":", "\n", "                ", "attn_mask", "=", "None", "\n", "", "", "else", ":", "# LDA", "\n", "            ", "I", ",", "Gh", ",", "Gw", "=", "self", ".", "interval", ",", "Hp", "//", "self", ".", "interval", ",", "Wp", "//", "self", ".", "interval", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "Gh", ",", "I", ",", "Gw", ",", "I", ",", "C", ")", ".", "permute", "(", "0", ",", "2", ",", "4", ",", "1", ",", "3", ",", "5", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "reshape", "(", "B", "*", "I", "*", "I", ",", "Gh", "*", "Gw", ",", "C", ")", "\n", "nG", "=", "I", "**", "2", "\n", "# attn_mask", "\n", "if", "pad_r", ">", "0", "or", "pad_b", ">", "0", ":", "\n", "                ", "mask", "=", "mask", ".", "reshape", "(", "1", ",", "Gh", ",", "I", ",", "Gw", ",", "I", ",", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "4", ",", "1", ",", "3", ",", "5", ")", ".", "contiguous", "(", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "nG", ",", "1", ",", "Gh", "*", "Gw", ")", "\n", "attn_mask", "=", "torch", ".", "zeros", "(", "(", "nG", ",", "Gh", "*", "Gw", ",", "Gh", "*", "Gw", ")", ",", "device", "=", "x", ".", "device", ")", "\n", "attn_mask", "=", "attn_mask", ".", "masked_fill", "(", "mask", "<", "0", ",", "NEG_INF", ")", "\n", "", "else", ":", "\n", "                ", "attn_mask", "=", "None", "\n", "\n", "# multi-head self-attention", "\n", "", "", "x", "=", "self", ".", "attn", "(", "x", ",", "Gh", ",", "Gw", ",", "mask", "=", "attn_mask", ")", "# nG*B, G*G, C", "\n", "\n", "# ungroup embeddings", "\n", "if", "self", ".", "lsda_flag", "==", "0", ":", "\n", "            ", "x", "=", "x", ".", "reshape", "(", "B", ",", "Hp", "//", "G", ",", "Wp", "//", "G", ",", "G", ",", "G", ",", "C", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", "# B, Hp//G, G, Wp//G, G, C", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "reshape", "(", "B", ",", "I", ",", "I", ",", "Gh", ",", "Gw", ",", "C", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "4", ",", "2", ",", "5", ")", ".", "contiguous", "(", ")", "# B, Gh, I, Gw, I, C", "\n", "", "x", "=", "x", ".", "reshape", "(", "B", ",", "Hp", ",", "Wp", ",", "C", ")", "\n", "\n", "# remove padding", "\n", "if", "pad_r", ">", "0", "or", "pad_b", ">", "0", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", "H", ",", ":", "W", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "", "x", "=", "x", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "# FFN", "\n", "x", "=", "shortcut", "+", "self", ".", "drop_path", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.CrossFormerBlock.extra_repr": [[299, 301], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"dim={self.dim}, input_resolution={self.input_resolution}, num_heads={self.num_heads}, \"", "f\"group_size={self.group_size}, lsda_flag={self.lsda_flag}, mlp_ratio={self.mlp_ratio}\"", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.CrossFormerBlock.flops": [[303, 323], ["crossformer_backbone.CrossFormerBlock.attn.flops", "math.ceil", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.flops"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "# norm1", "\n", "flops", "+=", "self", ".", "dim", "*", "H", "*", "W", "\n", "# Attention", "\n", "size_div", "=", "self", ".", "interval", "if", "self", ".", "lsda_flag", "==", "1", "else", "self", ".", "group_size", "\n", "Hp", "=", "math", ".", "ceil", "(", "H", "/", "size_div", ")", "*", "size_div", "\n", "Wp", "=", "math", ".", "ceil", "(", "W", "/", "size_div", ")", "*", "size_div", "\n", "Gh", "=", "Hp", "/", "size_div", "if", "self", ".", "lsda_flag", "==", "1", "else", "self", ".", "group_size", "\n", "Gw", "=", "Wp", "/", "size_div", "if", "self", ".", "lsda_flag", "==", "1", "else", "self", ".", "group_size", "\n", "nG", "=", "Hp", "*", "Wp", "/", "Gh", "/", "Gw", "\n", "attn_flops", ",", "attn_excluded_flops", "=", "self", ".", "attn", ".", "flops", "(", "Gh", "*", "Gw", ")", "\n", "flops", "+=", "nG", "*", "attn_flops", "\n", "excluded_flops", "=", "nG", "*", "attn_excluded_flops", "\n", "# mlp", "\n", "flops", "+=", "2", "*", "H", "*", "W", "*", "self", ".", "dim", "*", "self", ".", "dim", "*", "self", ".", "mlp_ratio", "\n", "# norm2", "\n", "flops", "+=", "self", ".", "dim", "*", "H", "*", "W", "\n", "return", "flops", ",", "excluded_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.PatchMerging.__init__": [[333, 350], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "enumerate", "crossformer_backbone.PatchMerging.reductions.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "len"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["def", "__init__", "(", "self", ",", "input_resolution", ",", "dim", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "patch_size", "=", "[", "2", "]", ",", "num_input_patch_size", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "reductions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "norm", "=", "norm_layer", "(", "dim", ")", "\n", "\n", "for", "i", ",", "ps", "in", "enumerate", "(", "patch_size", ")", ":", "\n", "            ", "if", "i", "==", "len", "(", "patch_size", ")", "-", "1", ":", "\n", "                ", "out_dim", "=", "2", "*", "dim", "//", "2", "**", "i", "\n", "", "else", ":", "\n", "                ", "out_dim", "=", "2", "*", "dim", "//", "2", "**", "(", "i", "+", "1", ")", "\n", "", "stride", "=", "2", "\n", "padding", "=", "(", "ps", "-", "stride", ")", "//", "2", "\n", "self", ".", "reductions", ".", "append", "(", "nn", ".", "Conv2d", "(", "dim", ",", "out_dim", ",", "kernel_size", "=", "ps", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.PatchMerging.forward": [[351, 368], ["crossformer_backbone.PatchMerging.norm", "torch.cat.view().permute().contiguous", "torch.cat.view().permute().contiguous", "torch.cat.view().permute().contiguous", "torch.cat.view().permute().contiguous", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "xs.append", "torch.cat.view().permute", "torch.cat.view().permute", "torch.cat.view().permute", "torch.cat.view().permute", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "\"\"\"\n        x: B, H*W, C\n        \"\"\"", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "assert", "H", "%", "2", "==", "0", "and", "W", "%", "2", "==", "0", ",", "f\"x size ({H}*{W}) are not even.\"", "\n", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "xs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "reductions", ")", ")", ":", "\n", "            ", "tmp_x", "=", "self", ".", "reductions", "[", "i", "]", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "xs", ".", "append", "(", "tmp_x", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.PatchMerging.extra_repr": [[369, 371], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"input_resolution={self.input_resolution}, dim={self.dim}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.PatchMerging.flops": [[372, 382], ["enumerate", "len"], "methods", ["None"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "flops", "=", "H", "*", "W", "*", "self", ".", "dim", "\n", "for", "i", ",", "ps", "in", "enumerate", "(", "self", ".", "patch_size", ")", ":", "\n", "            ", "if", "i", "==", "len", "(", "self", ".", "patch_size", ")", "-", "1", ":", "\n", "                ", "out_dim", "=", "2", "*", "self", ".", "dim", "//", "2", "**", "i", "\n", "", "else", ":", "\n", "                ", "out_dim", "=", "2", "*", "self", ".", "dim", "//", "2", "**", "(", "i", "+", "1", ")", "\n", "", "flops", "+=", "(", "H", "//", "2", ")", "*", "(", "W", "//", "2", ")", "*", "ps", "*", "ps", "*", "out_dim", "*", "self", ".", "dim", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.Stage.__init__": [[404, 434], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "crossformer_backbone.Stage.blocks.append", "downsample", "crossformer_backbone.CrossFormerBlock", "isinstance"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "input_resolution", ",", "depth", ",", "num_heads", ",", "group_size", ",", "interval", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "downsample", "=", "None", ",", "use_checkpoint", "=", "False", ",", "\n", "patch_size_end", "=", "[", "4", "]", ",", "num_patch_size", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "\n", "# build blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "lsda_flag", "=", "0", "if", "(", "i", "%", "2", "==", "0", ")", "else", "1", "\n", "self", ".", "blocks", ".", "append", "(", "CrossFormerBlock", "(", "dim", "=", "dim", ",", "input_resolution", "=", "input_resolution", ",", "\n", "num_heads", "=", "num_heads", ",", "group_size", "=", "group_size", ",", "interval", "=", "interval", ",", "\n", "lsda_flag", "=", "lsda_flag", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", "[", "i", "]", "if", "isinstance", "(", "drop_path", ",", "list", ")", "else", "drop_path", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "num_patch_size", "=", "num_patch_size", ")", ")", "\n", "\n", "# patch merging layer", "\n", "", "if", "downsample", "is", "not", "None", ":", "\n", "            ", "self", ".", "downsample", "=", "downsample", "(", "input_resolution", ",", "dim", "=", "dim", ",", "norm_layer", "=", "norm_layer", ",", "\n", "patch_size", "=", "patch_size_end", ",", "num_input_patch_size", "=", "num_patch_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.Stage.forward": [[435, 447], ["blk.view().permute().contiguous", "crossformer_backbone.Stage.downsample", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "blk", "blk.view().permute", "blk.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "if", "self", ".", "use_checkpoint", ":", "\n", "                ", "x", "=", "checkpoint", ".", "checkpoint", "(", "blk", ",", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "blk", "(", "x", ",", "H", ",", "W", ")", "\n", "\n", "", "", "B", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "feat", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ",", "H", ",", "W", ")", "\n", "", "return", "feat", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.Stage.extra_repr": [[448, 450], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"dim={self.dim}, depth={self.depth}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.Stage.flops": [[451, 461], ["blk.flops", "crossformer_backbone.Stage.downsample.flops"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.flops", "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.flops"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "excluded_flops", "=", "0", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "blk_flops", ",", "blk_excluded_flops", "=", "blk", ".", "flops", "(", ")", "\n", "flops", "+=", "blk_flops", "\n", "excluded_flops", "+=", "blk_excluded_flops", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "flops", "+=", "self", ".", "downsample", ".", "flops", "(", ")", "\n", "", "return", "flops", ",", "excluded_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.PatchEmbed.__init__": [[474, 499], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "crossformer_backbone.PatchEmbed.projs.append", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "len"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "[", "4", "]", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "96", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "# patch_size = to_2tuple(patch_size)", "\n", "patches_resolution", "=", "[", "img_size", "[", "0", "]", "//", "4", ",", "img_size", "[", "1", "]", "//", "4", "]", "# only for flops calculation", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "patches_resolution", "=", "patches_resolution", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "projs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "ps", "in", "enumerate", "(", "patch_size", ")", ":", "\n", "            ", "if", "i", "==", "len", "(", "patch_size", ")", "-", "1", ":", "\n", "                ", "dim", "=", "embed_dim", "//", "2", "**", "i", "\n", "", "else", ":", "\n", "                ", "dim", "=", "embed_dim", "//", "2", "**", "(", "i", "+", "1", ")", "\n", "", "stride", "=", "4", "\n", "padding", "=", "(", "ps", "-", "4", ")", "//", "2", "\n", "self", ".", "projs", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_chans", ",", "dim", ",", "kernel_size", "=", "ps", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", ")", "\n", "", "if", "norm_layer", "is", "not", "None", ":", "\n", "            ", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.PatchEmbed.forward": [[500, 510], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "xs.append", "crossformer_backbone.PatchEmbed.norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "xs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "projs", ")", ")", ":", "\n", "            ", "tx", "=", "self", ".", "projs", "[", "i", "]", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "xs", ".", "append", "(", "tx", ")", "# B Ph*Pw C", "\n", "", "x", "=", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "2", ")", "\n", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.PatchEmbed.flops": [[511, 523], ["enumerate", "len"], "methods", ["None"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "Ho", ",", "Wo", "=", "self", ".", "patches_resolution", "\n", "flops", "=", "0", "\n", "for", "i", ",", "ps", "in", "enumerate", "(", "self", ".", "patch_size", ")", ":", "\n", "            ", "if", "i", "==", "len", "(", "self", ".", "patch_size", ")", "-", "1", ":", "\n", "                ", "dim", "=", "self", ".", "embed_dim", "//", "2", "**", "i", "\n", "", "else", ":", "\n", "                ", "dim", "=", "self", ".", "embed_dim", "//", "2", "**", "(", "i", "+", "1", ")", "\n", "", "flops", "+=", "Ho", "*", "Wo", "*", "dim", "*", "self", ".", "in_chans", "*", "(", "self", ".", "patch_size", "[", "i", "]", "*", "self", ".", "patch_size", "[", "i", "]", ")", "\n", "", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "flops", "+=", "Ho", "*", "Wo", "*", "self", ".", "embed_dim", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.CrossFormer.__init__": [[550, 608], ["torch.Module.__init__", "len", "int", "crossformer_backbone.PatchEmbed", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "crossformer_backbone.CrossFormer.apply", "x.item", "crossformer_backbone.Stage", "crossformer_backbone.CrossFormer.layers.append", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "len", "len", "sum", "int", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "[", "4", "]", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "\n", "embed_dim", "=", "96", ",", "depths", "=", "[", "2", ",", "2", ",", "6", ",", "2", "]", ",", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "\n", "group_size", "=", "7", ",", "crs_interval", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.1", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "patch_norm", "=", "True", ",", "\n", "use_checkpoint", "=", "False", ",", "merge_size", "=", "[", "[", "2", "]", ",", "[", "2", "]", ",", "[", "2", "]", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_layers", "=", "len", "(", "depths", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "patch_norm", "=", "patch_norm", "\n", "self", ".", "num_features", "=", "int", "(", "embed_dim", "*", "2", "**", "(", "self", ".", "num_layers", "-", "1", ")", ")", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "\n", "# split image into non-overlapping patches", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ",", "\n", "norm_layer", "=", "norm_layer", "if", "self", ".", "patch_norm", "else", "None", ")", "\n", "patches_resolution", "=", "self", ".", "patch_embed", ".", "patches_resolution", "\n", "self", ".", "patches_resolution", "=", "patches_resolution", "# [H//4, W//4] of original image size", "\n", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "# stochastic depth", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "# stochastic depth decay rule", "\n", "\n", "# build layers", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "num_patch_sizes", "=", "[", "len", "(", "patch_size", ")", "]", "+", "[", "len", "(", "m", ")", "for", "m", "in", "merge_size", "]", "\n", "for", "i_layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "patch_size_end", "=", "merge_size", "[", "i_layer", "]", "if", "i_layer", "<", "self", ".", "num_layers", "-", "1", "else", "None", "\n", "num_patch_size", "=", "num_patch_sizes", "[", "i_layer", "]", "\n", "layer", "=", "Stage", "(", "dim", "=", "int", "(", "embed_dim", "*", "2", "**", "i_layer", ")", ",", "\n", "input_resolution", "=", "(", "patches_resolution", "[", "0", "]", "//", "(", "2", "**", "i_layer", ")", ",", "\n", "patches_resolution", "[", "1", "]", "//", "(", "2", "**", "i_layer", ")", ")", ",", "\n", "depth", "=", "depths", "[", "i_layer", "]", ",", "\n", "num_heads", "=", "num_heads", "[", "i_layer", "]", ",", "\n", "group_size", "=", "group_size", "[", "i_layer", "]", ",", "\n", "interval", "=", "crs_interval", "[", "i_layer", "]", ",", "\n", "mlp_ratio", "=", "self", ".", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "dpr", "[", "sum", "(", "depths", "[", ":", "i_layer", "]", ")", ":", "sum", "(", "depths", "[", ":", "i_layer", "+", "1", "]", ")", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "downsample", "=", "PatchMerging", "if", "(", "i_layer", "<", "self", ".", "num_layers", "-", "1", ")", "else", "None", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "patch_size_end", "=", "patch_size_end", ",", "\n", "num_patch_size", "=", "num_patch_size", ")", "\n", "self", ".", "layers", ".", "append", "(", "layer", ")", "\n", "\n", "#  # classification", "\n", "# self.norm = norm_layer(self.num_features)", "\n", "# self.avgpool = nn.AdaptiveAvgPool1d(1)", "\n", "# self.head = nn.Linear(self.num_features, num_classes) if num_classes > 0 else nn.Identity()", "\n", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.CrossFormer.init_weights": [[609, 613], ["isinstance", "mmdet.utils.get_root_logger", "mmcv.runner.load_checkpoint"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.load_checkpoint"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "map_location", "=", "'cpu'", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.CrossFormer._init_weights": [[614, 622], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.CrossFormer.no_weight_decay": [[623, 626], ["None"], "methods", ["None"], ["", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'absolute_pos_embed'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.CrossFormer.no_weight_decay_keywords": [[627, 630], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay_keywords", "(", "self", ")", ":", "\n", "        ", "return", "{", "'relative_position_bias_table'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.CrossFormer.forward": [[631, 648], ["crossformer_backbone.CrossFormer.patch_embed", "crossformer_backbone.CrossFormer.pos_drop", "enumerate", "layer", "outs.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "H", ",", "W", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "feat", ",", "x", "=", "layer", "(", "x", ",", "H", "//", "4", "//", "(", "2", "**", "i", ")", ",", "W", "//", "4", "//", "(", "2", "**", "i", ")", ")", "\n", "outs", ".", "append", "(", "feat", ")", "\n", "\n", "# # classification", "\n", "# x = self.norm(x)  # B L C", "\n", "# x = self.avgpool(x.transpose(1, 2))  # B C 1", "\n", "# x = torch.flatten(x, 1)", "\n", "# x = self.head(x)", "\n", "# return x", "\n", "\n", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer_backbone.CrossFormer.flops": [[649, 660], ["crossformer_backbone.CrossFormer.patch_embed.flops", "enumerate", "layer.flops"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.flops", "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.flops"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "excluded_flops", "=", "0", "\n", "flops", "+=", "self", ".", "patch_embed", ".", "flops", "(", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "layer_flops", ",", "layer_excluded_flops", "=", "layer", ".", "flops", "(", ")", "\n", "flops", "+=", "layer_flops", "\n", "excluded_flops", "+=", "layer_excluded_flops", "\n", "# flops += self.num_features * self.patches_resolution[0] * self.patches_resolution[1] // (2 ** self.num_layers)", "\n", "# flops += self.num_features * self.num_classes", "\n", "", "return", "flops", ",", "excluded_flops", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.Mlp.__init__": [[8, 16], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.Mlp.forward": [[17, 24], ["crossformer.Mlp.fc1", "crossformer.Mlp.act", "crossformer.Mlp.drop", "crossformer.Mlp.fc2", "crossformer.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.DynamicPosBias.__init__": [[26, 46], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "residual", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "pos_dim", "=", "dim", "//", "4", "\n", "self", ".", "pos_proj", "=", "nn", ".", "Linear", "(", "2", ",", "self", ".", "pos_dim", ")", "\n", "self", ".", "pos1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LayerNorm", "(", "self", ".", "pos_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "pos_dim", ",", "self", ".", "pos_dim", ")", ",", "\n", ")", "\n", "self", ".", "pos2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LayerNorm", "(", "self", ".", "pos_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "pos_dim", ",", "self", ".", "pos_dim", ")", "\n", ")", "\n", "self", ".", "pos3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LayerNorm", "(", "self", ".", "pos_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "pos_dim", ",", "self", ".", "num_heads", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.DynamicPosBias.forward": [[47, 56], ["crossformer.DynamicPosBias.pos_proj", "crossformer.DynamicPosBias.pos3", "crossformer.DynamicPosBias.pos3", "crossformer.DynamicPosBias.pos1", "crossformer.DynamicPosBias.pos2", "crossformer.DynamicPosBias.pos2", "crossformer.DynamicPosBias.pos1", "crossformer.DynamicPosBias.pos_proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "biases", ")", ":", "\n", "        ", "if", "self", ".", "residual", ":", "\n", "            ", "pos", "=", "self", ".", "pos_proj", "(", "biases", ")", "# 2Wh-1 * 2Ww-1, heads", "\n", "pos", "=", "pos", "+", "self", ".", "pos1", "(", "pos", ")", "\n", "pos", "=", "pos", "+", "self", ".", "pos2", "(", "pos", ")", "\n", "pos", "=", "self", ".", "pos3", "(", "pos", ")", "\n", "", "else", ":", "\n", "            ", "pos", "=", "self", ".", "pos3", "(", "self", ".", "pos2", "(", "self", ".", "pos1", "(", "self", ".", "pos_proj", "(", "biases", ")", ")", ")", ")", "\n", "", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.DynamicPosBias.flops": [[57, 63], ["None"], "methods", ["None"], ["", "def", "flops", "(", "self", ",", "N", ")", ":", "\n", "        ", "flops", "=", "N", "*", "2", "*", "self", ".", "pos_dim", "\n", "flops", "+=", "N", "*", "self", ".", "pos_dim", "*", "self", ".", "pos_dim", "\n", "flops", "+=", "N", "*", "self", ".", "pos_dim", "*", "self", ".", "pos_dim", "\n", "flops", "+=", "N", "*", "self", ".", "pos_dim", "*", "self", ".", "num_heads", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.Attention.__init__": [[77, 117], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax", "crossformer.DynamicPosBias", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "biases.flatten().transpose().float.flatten().transpose().float.flatten().transpose().float", "crossformer.Attention.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "crossformer.Attention.register_buffer", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "biases.flatten().transpose().float.flatten().transpose().float.flatten().transpose", "relative_coords.permute().contiguous.permute().contiguous.permute", "biases.flatten().transpose().float.flatten().transpose().float.flatten"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "group_size", ",", "num_heads", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "\n", "position_bias", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "group_size", "=", "group_size", "# Wh, Ww", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "self", ".", "position_bias", "=", "position_bias", "\n", "\n", "if", "position_bias", ":", "\n", "            ", "self", ".", "pos", "=", "DynamicPosBias", "(", "self", ".", "dim", "//", "4", ",", "self", ".", "num_heads", ",", "residual", "=", "False", ")", "\n", "\n", "# generate mother-set", "\n", "position_bias_h", "=", "torch", ".", "arange", "(", "1", "-", "self", ".", "group_size", "[", "0", "]", ",", "self", ".", "group_size", "[", "0", "]", ")", "\n", "position_bias_w", "=", "torch", ".", "arange", "(", "1", "-", "self", ".", "group_size", "[", "1", "]", ",", "self", ".", "group_size", "[", "1", "]", ")", "\n", "biases", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "position_bias_h", ",", "position_bias_w", "]", ")", ")", "# 2, 2Wh-1, 2W2-1", "\n", "biases", "=", "biases", ".", "flatten", "(", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"biases\"", ",", "biases", ")", "\n", "\n", "# get pair-wise relative position index for each token inside the group", "\n", "coords_h", "=", "torch", ".", "arange", "(", "self", ".", "group_size", "[", "0", "]", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "self", ".", "group_size", "[", "1", "]", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "self", ".", "group_size", "[", "0", "]", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "self", ".", "group_size", "[", "1", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "self", ".", "group_size", "[", "1", "]", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.Attention.forward": [[118, 153], ["crossformer.Attention.qkv().reshape().permute", "crossformer.Attention.attn_drop", "crossformer.Attention.proj", "crossformer.Attention.proj_drop", "k.transpose", "crossformer.Attention.pos", "pos[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "crossformer.Attention.view", "crossformer.Attention.softmax", "crossformer.Attention.softmax", "crossformer.Attention.qkv().reshape", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "crossformer.Attention.view", "mask.unsqueeze().unsqueeze", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "crossformer.Attention.qkv", "mask.unsqueeze", "crossformer.Attention.relative_position_index.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: input features with shape of (num_groups*B, N, C)\n            mask: (0/-inf) mask with shape of (num_groups, Wh*Ww, Wh*Ww) or None\n        \"\"\"", "\n", "B_", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B_", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "q", "=", "q", "*", "self", ".", "scale", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "if", "self", ".", "position_bias", ":", "\n", "            ", "pos", "=", "self", ".", "pos", "(", "self", ".", "biases", ")", "# 2Wh-1 * 2Ww-1, heads", "\n", "# select position bias", "\n", "relative_position_bias", "=", "pos", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "group_size", "[", "0", "]", "*", "self", ".", "group_size", "[", "1", "]", ",", "self", ".", "group_size", "[", "0", "]", "*", "self", ".", "group_size", "[", "1", "]", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "            ", "nW", "=", "mask", ".", "shape", "[", "0", "]", "\n", "attn", "=", "attn", ".", "view", "(", "B_", "//", "nW", ",", "nW", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "+", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "attn", "=", "attn", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "\n", "", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B_", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.Attention.extra_repr": [[154, 156], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f'dim={self.dim}, group_size={self.group_size}, num_heads={self.num_heads}'", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.Attention.flops": [[157, 171], ["crossformer.Attention.pos.flops"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.flops"], ["", "def", "flops", "(", "self", ",", "N", ")", ":", "\n", "# calculate flops for 1 group with token length of N", "\n", "        ", "flops", "=", "0", "\n", "# qkv = self.qkv(x)", "\n", "flops", "+=", "N", "*", "self", ".", "dim", "*", "3", "*", "self", ".", "dim", "\n", "# attn = (q @ k.transpose(-2, -1))", "\n", "flops", "+=", "self", ".", "num_heads", "*", "N", "*", "(", "self", ".", "dim", "//", "self", ".", "num_heads", ")", "*", "N", "\n", "#  x = (attn @ v)", "\n", "flops", "+=", "self", ".", "num_heads", "*", "N", "*", "N", "*", "(", "self", ".", "dim", "//", "self", ".", "num_heads", ")", "\n", "# x = self.proj(x)", "\n", "flops", "+=", "N", "*", "self", ".", "dim", "*", "self", ".", "dim", "\n", "if", "self", ".", "position_bias", ":", "\n", "            ", "flops", "+=", "self", ".", "pos", ".", "flops", "(", "N", ")", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormerBlock.__init__": [[192, 222], ["torch.Module.__init__", "norm_layer", "crossformer.Attention", "norm_layer", "int", "crossformer.Mlp", "crossformer.CrossFormerBlock.register_buffer", "min", "min", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "timm.models.layers.to_2tuple"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "input_resolution", ",", "num_heads", ",", "group_size", "=", "7", ",", "lsda_flag", "=", "0", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "num_patch_size", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "lsda_flag", "=", "lsda_flag", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "self", ".", "num_patch_size", "=", "num_patch_size", "\n", "if", "min", "(", "self", ".", "input_resolution", ")", "<=", "self", ".", "group_size", ":", "\n", "# if group size is larger than input resolution, we don't partition groups", "\n", "            ", "self", ".", "lsda_flag", "=", "0", "\n", "self", ".", "group_size", "=", "min", "(", "self", ".", "input_resolution", ")", "\n", "\n", "", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "group_size", "=", "to_2tuple", "(", "self", ".", "group_size", ")", ",", "num_heads", "=", "num_heads", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "\n", "position_bias", "=", "True", ")", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n", "attn_mask", "=", "None", "\n", "self", ".", "register_buffer", "(", "\"attn_mask\"", ",", "attn_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormerBlock.forward": [[223, 256], ["crossformer.CrossFormerBlock.norm1", "x.permute().reshape.permute().reshape.view", "x.permute().reshape.permute().reshape.reshape", "crossformer.CrossFormerBlock.attn", "x.permute().reshape.permute().reshape.reshape", "x.permute().reshape.permute().reshape.view", "x.permute().reshape.permute().reshape.reshape().permute", "x.permute().reshape.permute().reshape.reshape().permute", "x.permute().reshape.permute().reshape.permute().reshape", "x.permute().reshape.permute().reshape.permute().reshape", "crossformer.CrossFormerBlock.drop_path", "crossformer.CrossFormerBlock.drop_path", "crossformer.CrossFormerBlock.mlp", "x.permute().reshape.permute().reshape.reshape", "x.permute().reshape.permute().reshape.reshape", "x.permute().reshape.permute().reshape.permute", "x.permute().reshape.permute().reshape.permute", "crossformer.CrossFormerBlock.norm2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size %d, %d, %d\"", "%", "(", "L", ",", "H", ",", "W", ")", "\n", "\n", "shortcut", "=", "x", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "# group embeddings", "\n", "G", "=", "self", ".", "group_size", "\n", "if", "self", ".", "lsda_flag", "==", "0", ":", "# 0 for SDA", "\n", "            ", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", "//", "G", ",", "G", ",", "W", "//", "G", ",", "G", ",", "C", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", "\n", "", "else", ":", "# 1 for LDA", "\n", "            ", "x", "=", "x", ".", "reshape", "(", "B", ",", "G", ",", "H", "//", "G", ",", "G", ",", "W", "//", "G", ",", "C", ")", ".", "permute", "(", "0", ",", "2", ",", "4", ",", "1", ",", "3", ",", "5", ")", "\n", "", "x", "=", "x", ".", "reshape", "(", "B", "*", "H", "*", "W", "//", "G", "**", "2", ",", "G", "**", "2", ",", "C", ")", "\n", "\n", "# multi-head self-attention", "\n", "x", "=", "self", ".", "attn", "(", "x", ",", "mask", "=", "self", ".", "attn_mask", ")", "# nW*B, G*G, C", "\n", "\n", "# ungroup embeddings", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", "//", "G", ",", "W", "//", "G", ",", "G", ",", "G", ",", "C", ")", "\n", "if", "self", ".", "lsda_flag", "==", "0", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "4", ",", "2", ",", "5", ")", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "", "x", "=", "x", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "# FFN", "\n", "x", "=", "shortcut", "+", "self", ".", "drop_path", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormerBlock.extra_repr": [[257, 259], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"dim={self.dim}, input_resolution={self.input_resolution}, num_heads={self.num_heads}, \"", "f\"group_size={self.group_size}, lsda_flag={self.lsda_flag}, mlp_ratio={self.mlp_ratio}\"", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormerBlock.flops": [[261, 274], ["crossformer.CrossFormerBlock.attn.flops"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.flops"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "# norm1", "\n", "flops", "+=", "self", ".", "dim", "*", "H", "*", "W", "\n", "# LSDA", "\n", "nW", "=", "H", "*", "W", "/", "self", ".", "group_size", "/", "self", ".", "group_size", "\n", "flops", "+=", "nW", "*", "self", ".", "attn", ".", "flops", "(", "self", ".", "group_size", "*", "self", ".", "group_size", ")", "\n", "# mlp", "\n", "flops", "+=", "2", "*", "H", "*", "W", "*", "self", ".", "dim", "*", "self", ".", "dim", "*", "self", ".", "mlp_ratio", "\n", "# norm2", "\n", "flops", "+=", "self", ".", "dim", "*", "H", "*", "W", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.PatchMerging.__init__": [[284, 301], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "enumerate", "crossformer.PatchMerging.reductions.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "len"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["def", "__init__", "(", "self", ",", "input_resolution", ",", "dim", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "patch_size", "=", "[", "2", "]", ",", "num_input_patch_size", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "reductions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "norm", "=", "norm_layer", "(", "dim", ")", "\n", "\n", "for", "i", ",", "ps", "in", "enumerate", "(", "patch_size", ")", ":", "\n", "            ", "if", "i", "==", "len", "(", "patch_size", ")", "-", "1", ":", "\n", "                ", "out_dim", "=", "2", "*", "dim", "//", "2", "**", "i", "\n", "", "else", ":", "\n", "                ", "out_dim", "=", "2", "*", "dim", "//", "2", "**", "(", "i", "+", "1", ")", "\n", "", "stride", "=", "2", "\n", "padding", "=", "(", "ps", "-", "stride", ")", "//", "2", "\n", "self", ".", "reductions", ".", "append", "(", "nn", ".", "Conv2d", "(", "dim", ",", "out_dim", ",", "kernel_size", "=", "ps", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.PatchMerging.forward": [[302, 320], ["crossformer.PatchMerging.norm", "torch.cat.view().permute", "torch.cat.view().permute", "torch.cat.view().permute", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "xs.append", "torch.cat.view", "torch.cat.view", "torch.cat.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        x: B, H*W, C\n        \"\"\"", "\n", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "assert", "H", "%", "2", "==", "0", "and", "W", "%", "2", "==", "0", ",", "f\"x size ({H}*{W}) are not even.\"", "\n", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "xs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "reductions", ")", ")", ":", "\n", "            ", "tmp_x", "=", "self", ".", "reductions", "[", "i", "]", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "xs", ".", "append", "(", "tmp_x", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.PatchMerging.extra_repr": [[321, 323], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"input_resolution={self.input_resolution}, dim={self.dim}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.PatchMerging.flops": [[324, 334], ["enumerate", "len"], "methods", ["None"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "flops", "=", "H", "*", "W", "*", "self", ".", "dim", "\n", "for", "i", ",", "ps", "in", "enumerate", "(", "self", ".", "patch_size", ")", ":", "\n", "            ", "if", "i", "==", "len", "(", "self", ".", "patch_size", ")", "-", "1", ":", "\n", "                ", "out_dim", "=", "2", "*", "self", ".", "dim", "//", "2", "**", "i", "\n", "", "else", ":", "\n", "                ", "out_dim", "=", "2", "*", "self", ".", "dim", "//", "2", "**", "(", "i", "+", "1", ")", "\n", "", "flops", "+=", "(", "H", "//", "2", ")", "*", "(", "W", "//", "2", ")", "*", "ps", "*", "ps", "*", "out_dim", "*", "self", ".", "dim", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.Stage.__init__": [[356, 387], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "crossformer.Stage.blocks.append", "downsample", "crossformer.CrossFormerBlock", "isinstance"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "input_resolution", ",", "depth", ",", "num_heads", ",", "group_size", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "downsample", "=", "None", ",", "use_checkpoint", "=", "False", ",", "\n", "patch_size_end", "=", "[", "4", "]", ",", "num_patch_size", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "\n", "# build blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "lsda_flag", "=", "0", "if", "(", "i", "%", "2", "==", "0", ")", "else", "1", "\n", "self", ".", "blocks", ".", "append", "(", "CrossFormerBlock", "(", "dim", "=", "dim", ",", "input_resolution", "=", "input_resolution", ",", "\n", "num_heads", "=", "num_heads", ",", "group_size", "=", "group_size", ",", "\n", "lsda_flag", "=", "lsda_flag", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", "[", "i", "]", "if", "isinstance", "(", "drop_path", ",", "list", ")", "else", "drop_path", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "num_patch_size", "=", "num_patch_size", ")", ")", "\n", "\n", "# patch merging layer", "\n", "", "if", "downsample", "is", "not", "None", ":", "\n", "            ", "self", ".", "downsample", "=", "downsample", "(", "input_resolution", ",", "dim", "=", "dim", ",", "norm_layer", "=", "norm_layer", ",", "\n", "patch_size", "=", "patch_size_end", ",", "num_input_patch_size", "=", "num_patch_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.Stage.forward": [[388, 397], ["crossformer.Stage.downsample", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "blk"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "if", "self", ".", "use_checkpoint", ":", "\n", "                ", "x", "=", "checkpoint", ".", "checkpoint", "(", "blk", ",", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.Stage.extra_repr": [[398, 400], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"dim={self.dim}, input_resolution={self.input_resolution}, depth={self.depth}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.Stage.flops": [[401, 408], ["blk.flops", "crossformer.Stage.downsample.flops"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.flops", "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.flops"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "flops", "+=", "blk", ".", "flops", "(", ")", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "flops", "+=", "self", ".", "downsample", ".", "flops", "(", ")", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.PatchEmbed.__init__": [[421, 447], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "crossformer.PatchEmbed.projs.append", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "len"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "[", "4", "]", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "96", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "# patch_size = to_2tuple(patch_size)", "\n", "patches_resolution", "=", "[", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", "]", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "patches_resolution", "=", "patches_resolution", "\n", "self", ".", "num_patches", "=", "patches_resolution", "[", "0", "]", "*", "patches_resolution", "[", "1", "]", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "projs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "ps", "in", "enumerate", "(", "patch_size", ")", ":", "\n", "            ", "if", "i", "==", "len", "(", "patch_size", ")", "-", "1", ":", "\n", "                ", "dim", "=", "embed_dim", "//", "2", "**", "i", "\n", "", "else", ":", "\n", "                ", "dim", "=", "embed_dim", "//", "2", "**", "(", "i", "+", "1", ")", "\n", "", "stride", "=", "patch_size", "[", "0", "]", "\n", "padding", "=", "(", "ps", "-", "patch_size", "[", "0", "]", ")", "//", "2", "\n", "self", ".", "projs", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_chans", ",", "dim", ",", "kernel_size", "=", "ps", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", ")", "\n", "", "if", "norm_layer", "is", "not", "None", ":", "\n", "            ", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.PatchEmbed.forward": [[448, 461], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "xs.append", "crossformer.PatchEmbed.norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "# FIXME look at relaxing size constraints", "\n", "assert", "H", "==", "self", ".", "img_size", "[", "0", "]", "and", "W", "==", "self", ".", "img_size", "[", "1", "]", ",", "f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\"", "\n", "xs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "projs", ")", ")", ":", "\n", "            ", "tx", "=", "self", ".", "projs", "[", "i", "]", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "xs", ".", "append", "(", "tx", ")", "# B Ph*Pw C", "\n", "", "x", "=", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "2", ")", "\n", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.PatchEmbed.flops": [[462, 474], ["enumerate", "len"], "methods", ["None"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "Ho", ",", "Wo", "=", "self", ".", "patches_resolution", "\n", "flops", "=", "0", "\n", "for", "i", ",", "ps", "in", "enumerate", "(", "self", ".", "patch_size", ")", ":", "\n", "            ", "if", "i", "==", "len", "(", "self", ".", "patch_size", ")", "-", "1", ":", "\n", "                ", "dim", "=", "self", ".", "embed_dim", "//", "2", "**", "i", "\n", "", "else", ":", "\n", "                ", "dim", "=", "self", ".", "embed_dim", "//", "2", "**", "(", "i", "+", "1", ")", "\n", "", "flops", "+=", "Ho", "*", "Wo", "*", "dim", "*", "self", ".", "in_chans", "*", "(", "self", ".", "patch_size", "[", "i", "]", "*", "self", ".", "patch_size", "[", "i", "]", ")", "\n", "", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "flops", "+=", "Ho", "*", "Wo", "*", "self", ".", "embed_dim", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.__init__": [[501, 564], ["torch.Module.__init__", "len", "int", "crossformer.PatchEmbed", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "norm_layer", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "crossformer.CrossFormer.apply", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.trunc_normal_", "x.item", "crossformer.Stage", "crossformer.CrossFormer.layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "len", "len", "sum", "int", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "[", "4", "]", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "\n", "embed_dim", "=", "96", ",", "depths", "=", "[", "2", ",", "2", ",", "6", ",", "2", "]", ",", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "\n", "group_size", "=", "7", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.1", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "ape", "=", "False", ",", "patch_norm", "=", "True", ",", "\n", "use_checkpoint", "=", "False", ",", "merge_size", "=", "[", "[", "2", "]", ",", "[", "2", "]", ",", "[", "2", "]", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_layers", "=", "len", "(", "depths", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "ape", "=", "ape", "\n", "self", ".", "patch_norm", "=", "patch_norm", "\n", "self", ".", "num_features", "=", "int", "(", "embed_dim", "*", "2", "**", "(", "self", ".", "num_layers", "-", "1", ")", ")", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "\n", "# split image into non-overlapping patches", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ",", "\n", "norm_layer", "=", "norm_layer", "if", "self", ".", "patch_norm", "else", "None", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "patches_resolution", "=", "self", ".", "patch_embed", ".", "patches_resolution", "\n", "self", ".", "patches_resolution", "=", "patches_resolution", "\n", "\n", "# absolute position embedding", "\n", "if", "self", ".", "ape", ":", "\n", "            ", "self", ".", "absolute_pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", ",", "embed_dim", ")", ")", "\n", "trunc_normal_", "(", "self", ".", "absolute_pos_embed", ",", "std", "=", ".02", ")", "\n", "\n", "", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "# stochastic depth", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "# stochastic depth decay rule", "\n", "\n", "# build layers", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "num_patch_sizes", "=", "[", "len", "(", "patch_size", ")", "]", "+", "[", "len", "(", "m", ")", "for", "m", "in", "merge_size", "]", "\n", "for", "i_layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "patch_size_end", "=", "merge_size", "[", "i_layer", "]", "if", "i_layer", "<", "self", ".", "num_layers", "-", "1", "else", "None", "\n", "num_patch_size", "=", "num_patch_sizes", "[", "i_layer", "]", "\n", "layer", "=", "Stage", "(", "dim", "=", "int", "(", "embed_dim", "*", "2", "**", "i_layer", ")", ",", "\n", "input_resolution", "=", "(", "patches_resolution", "[", "0", "]", "//", "(", "2", "**", "i_layer", ")", ",", "\n", "patches_resolution", "[", "1", "]", "//", "(", "2", "**", "i_layer", ")", ")", ",", "\n", "depth", "=", "depths", "[", "i_layer", "]", ",", "\n", "num_heads", "=", "num_heads", "[", "i_layer", "]", ",", "\n", "group_size", "=", "group_size", "[", "i_layer", "]", ",", "\n", "mlp_ratio", "=", "self", ".", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "dpr", "[", "sum", "(", "depths", "[", ":", "i_layer", "]", ")", ":", "sum", "(", "depths", "[", ":", "i_layer", "+", "1", "]", ")", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "downsample", "=", "PatchMerging", "if", "(", "i_layer", "<", "self", ".", "num_layers", "-", "1", ")", "else", "None", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ",", "\n", "patch_size_end", "=", "patch_size_end", ",", "\n", "num_patch_size", "=", "num_patch_size", ")", "\n", "self", ".", "layers", ".", "append", "(", "layer", ")", "\n", "\n", "", "self", ".", "norm", "=", "norm_layer", "(", "self", ".", "num_features", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer._init_weights": [[565, 573], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.no_weight_decay": [[574, 577], ["None"], "methods", ["None"], ["", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'absolute_pos_embed'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.no_weight_decay_keywords": [[578, 581], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay_keywords", "(", "self", ")", ":", "\n", "        ", "return", "{", "'relative_position_bias_table'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.forward_features": [[582, 595], ["crossformer.CrossFormer.patch_embed", "crossformer.CrossFormer.pos_drop", "crossformer.CrossFormer.norm", "crossformer.CrossFormer.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "layer", "layer.transpose"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "if", "self", ".", "ape", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "absolute_pos_embed", "\n", "", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "# B L C", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ".", "transpose", "(", "1", ",", "2", ")", ")", "# B C 1", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.forward": [[596, 600], ["crossformer.CrossFormer.forward_features", "crossformer.CrossFormer.head"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.flops": [[601, 609], ["crossformer.CrossFormer.patch_embed.flops", "enumerate", "layer.flops"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.flops", "home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.flops"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "flops", "+=", "self", ".", "patch_embed", ".", "flops", "(", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "flops", "+=", "layer", ".", "flops", "(", ")", "\n", "", "flops", "+=", "self", ".", "num_features", "*", "self", ".", "patches_resolution", "[", "0", "]", "*", "self", ".", "patches_resolution", "[", "1", "]", "//", "(", "2", "**", "self", ".", "num_layers", ")", "\n", "flops", "+=", "self", ".", "num_features", "*", "self", ".", "num_classes", "\n", "return", "flops", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.get_flops.parse_args": [[16, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--shape'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "1024", ",", "1024", "]", ",", "\n", "help", "=", "'input image size'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.get_flops.get_flops": [[39, 51], ["mmcv.cnn.utils.flops_counter.get_model_complexity_info", "backbone.flops", "mmcv.cnn.utils.flops_counter.flops_to_string", "mmcv.cnn.utils.flops_counter.params_to_string"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.models.crossformer.CrossFormer.flops"], ["", "def", "get_flops", "(", "model", ",", "input_shape", ")", ":", "\n", "    ", "flops", ",", "params", "=", "get_model_complexity_info", "(", "model", ",", "input_shape", ",", "as_strings", "=", "False", ")", "\n", "\n", "backbone", "=", "model", ".", "backbone", "\n", "backbone_total_flops", ",", "excluded_flops", "=", "backbone", ".", "flops", "(", ")", "\n", "# print('---------')", "\n", "# print('backbone total GFLOPs calculated by us: ', backbone_total_flops / 1e9)", "\n", "# print('excluded GFLOPs by mmcv: ', excluded_flops / 1e9)", "\n", "# print('---------')", "\n", "flops", "+=", "excluded_flops", "\n", "\n", "return", "flops_to_string", "(", "flops", ")", ",", "params_to_string", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.get_flops.main": [[53, 92], ["get_flops.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "mmdet.models.build_detector", "torch.cuda.is_available", "mmdet.models.build_detector.eval", "hasattr", "get_flops.get_flops", "print", "print", "len", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "mmdet.models.build_detector.cuda", "NotImplementedError", "len", "ValueError", "Config.fromfile.get", "Config.fromfile.get", "tuple"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.test.parse_args", "home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.get_flops.get_flops"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "if", "len", "(", "args", ".", "shape", ")", "==", "1", ":", "\n", "        ", "input_shape", "=", "(", "3", ",", "args", ".", "shape", "[", "0", "]", ",", "args", ".", "shape", "[", "0", "]", ")", "\n", "", "elif", "len", "(", "args", ".", "shape", ")", "==", "2", ":", "\n", "        ", "input_shape", "=", "(", "3", ",", ")", "+", "tuple", "(", "args", ".", "shape", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid input shape'", ")", "\n", "\n", "", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "\n", "", "model", "=", "build_segmentor", "(", "\n", "cfg", ".", "model", ",", "\n", "train_cfg", "=", "cfg", ".", "get", "(", "'train_cfg'", ")", ",", "\n", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'forward_dummy'", ")", ":", "\n", "        ", "model", ".", "forward", "=", "model", ".", "forward_dummy", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'FLOPs counter is currently not currently supported with {}'", ".", "\n", "format", "(", "model", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "", "flops", ",", "params", "=", "get_flops", "(", "model", ",", "input_shape", ")", "\n", "\n", "split_line", "=", "'='", "*", "30", "\n", "print", "(", "f'{split_line}\\nInput shape: {input_shape}\\n'", "\n", "f'Flops: {flops}\\nParams: {params}\\n{split_line}'", ")", "\n", "print", "(", "'!!!Please be cautious if you use the results in papers. '", "\n", "'You may need to check if all ops are supported and verify that the '", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.train.parse_args": [[22, 85], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "ValueError", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.test.parse_args"], ["    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a segmentor'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--work-dir'", ",", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--load-from'", ",", "help", "=", "'the checkpoint file to load weights from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume-from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no-validate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether not to evaluate the checkpoint during training'", ")", "\n", "group_gpus", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpu-ids'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'ids of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "nargs", "=", "'+'", ",", "action", "=", "DictAction", ",", "help", "=", "'custom options'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# work_dir is determined in this priority: CLI > segment in file > filename", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "# update configs according to CLI args if args.work_dir is not None", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "elif", "cfg", ".", "get", "(", "'work_dir'", ",", "None", ")", "is", "None", ":", "\n", "# use config filename as default work_dir if cfg.work_dir is None", "\n", "        ", "cfg", ".", "work_dir", "=", "osp", ".", "join", "(", "'./work_dirs'", ",", "\n", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", "[", "0", "]", ")", "\n", "", "if", "args", ".", "load_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "load_from", "=", "args", ".", "load_from", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.train.main": [[87, 183], ["train.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "mmcv.mkdir_or_exist", "Config.fromfile.dump", "time.strftime", "os.join", "mmdet.utils.get_root_logger", "dict", "mmdet.utils.collect_env", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "os.basename", "mmdet.models.build_detector", "mmdet.apis.train_detector", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "mmcv.runner.init_dist", "mmcv.runner.get_dist_info", "range", "os.abspath", "os.join", "time.localtime", "mmdet.utils.get_root_logger.info", "mmdet.apis.set_random_seed", "mmdet.datasets.build_dataset", "len", "copy.deepcopy", "datasets.append", "dict", "Config.fromfile.get", "os.join", "range", "range", "os.basename", "mmdet.datasets.build_dataset", "mmdet.utils.collect_env.items", "os.splitext", "os.basename", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.test.parse_args", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.build.build_dataset", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.build.build_dataset"], ["", "if", "args", ".", "gpu_ids", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "args", ".", "gpu_ids", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "range", "(", "1", ")", "if", "args", ".", "gpus", "is", "None", "else", "range", "(", "args", ".", "gpus", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# create work_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# dump config", "\n", "cfg", ".", "dump", "(", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "f'{timestamp}.log'", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "f'{k}: {v}'", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "f'Distributed training: {distributed}'", ")", "\n", "logger", ".", "info", "(", "f'Config:\\n{cfg.pretty_text}'", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "f'Set random seed to {args.seed}, deterministic: '", "\n", "f'{args.deterministic}'", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "", "cfg", ".", "seed", "=", "args", ".", "seed", "\n", "meta", "[", "'seed'", "]", "=", "args", ".", "seed", "\n", "meta", "[", "'exp_name'", "]", "=", "osp", ".", "basename", "(", "args", ".", "config", ")", "\n", "\n", "model", "=", "build_segmentor", "(", "\n", "cfg", ".", "model", ",", "\n", "train_cfg", "=", "cfg", ".", "get", "(", "'train_cfg'", ")", ",", "\n", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "\n", "logger", ".", "info", "(", "model", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "if", "len", "(", "cfg", ".", "workflow", ")", "==", "2", ":", "\n", "        ", "val_dataset", "=", "copy", ".", "deepcopy", "(", "cfg", ".", "data", ".", "val", ")", "\n", "val_dataset", ".", "pipeline", "=", "cfg", ".", "data", ".", "train", ".", "pipeline", "\n", "datasets", ".", "append", "(", "build_dataset", "(", "val_dataset", ")", ")", "\n", "", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save mmseg version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "mmseg_version", "=", "f'{__version__}+{get_git_hash()[:7]}'", ",", "\n", "config", "=", "cfg", ".", "pretty_text", ",", "\n", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", ",", "\n", "PALETTE", "=", "datasets", "[", "0", "]", ".", "PALETTE", ")", "\n", "# add an attribute for visualization convenience", "\n", "", "model", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "train_segmentor", "(", "\n", "model", ",", "\n", "datasets", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "validate", "=", "(", "not", "args", ".", "no_validate", ")", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "meta", "=", "meta", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.crossformer_factory.CrossFormer_S.__init__": [[16, 35], ["models.crossformer_backbone.CrossFormer.__init__"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CrossFormer_S", ",", "self", ")", ".", "__init__", "(", "\n", "img_size", "=", "[", "1024", ",", "1024", "]", ",", "# This is only used to compute the FLOPs under the give image size", "\n", "patch_size", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ",", "\n", "in_chans", "=", "3", ",", "\n", "num_classes", "=", "1000", ",", "\n", "embed_dim", "=", "96", ",", "\n", "depths", "=", "[", "2", ",", "2", ",", "6", ",", "2", "]", ",", "\n", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "\n", "group_size", "=", "kwargs", "[", "\"group_size\"", "]", ",", "\n", "crs_interval", "=", "kwargs", "[", "\"crs_interval\"", "]", ",", "\n", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "drop_path_rate", "=", "0.2", ",", "\n", "patch_norm", "=", "True", ",", "\n", "use_checkpoint", "=", "False", ",", "\n", "merge_size", "=", "[", "[", "2", ",", "4", "]", ",", "[", "2", ",", "4", "]", ",", "[", "2", ",", "4", "]", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.crossformer_factory.CrossFormer_B.__init__": [[39, 58], ["models.crossformer_backbone.CrossFormer.__init__"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CrossFormer_B", ",", "self", ")", ".", "__init__", "(", "\n", "img_size", "=", "[", "1024", ",", "1024", "]", ",", "\n", "patch_size", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ",", "\n", "in_chans", "=", "3", ",", "\n", "num_classes", "=", "1000", ",", "\n", "embed_dim", "=", "96", ",", "\n", "depths", "=", "[", "2", ",", "2", ",", "18", ",", "2", "]", ",", "\n", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "\n", "group_size", "=", "kwargs", "[", "\"group_size\"", "]", ",", "\n", "crs_interval", "=", "kwargs", "[", "\"crs_interval\"", "]", ",", "\n", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "drop_path_rate", "=", "0.3", ",", "\n", "patch_norm", "=", "True", ",", "\n", "use_checkpoint", "=", "False", ",", "\n", "merge_size", "=", "[", "[", "2", ",", "4", "]", ",", "[", "2", ",", "4", "]", ",", "[", "2", ",", "4", "]", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.test.parse_args": [[20, 100], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "ValueError", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.test.parse_args"], ["description", "=", "'mmseg test (and eval) a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--aug-test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use Flip and Multi scale aug'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file in pickle format'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--format-only'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Format the output results without perform evaluation. It is'", "\n", "'useful when you want to format the result to a specific format and '", "\n", "'submit it to the test server'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'evaluation metrics, which depends on the dataset, e.g., \"mIoU\"'", "\n", "' for generic datasets, and \"cityscapes\" for Cityscapes'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-dir'", ",", "help", "=", "'directory where painted images will be saved'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpu-collect'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to use gpu to collect results.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--tmpdir'", ",", "\n", "help", "=", "'tmp directory used for collecting results from multiple '", "\n", "'workers, available when gpu_collect is not specified'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--options'", ",", "nargs", "=", "'+'", ",", "action", "=", "DictAction", ",", "help", "=", "'custom options'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--opacity'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ",", "\n", "help", "=", "'Opacity of painted segmentation map. In (0, 1] range.'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "eval", "or", "args", ".", "format_only", "or", "args", ".", "show", "or", "args", ".", "show_dir", ",", "(", "'Please specify at least one operation (save/eval/format/show the '", "\n", "'results / save the results) with the argument \"--out\", \"--eval\"'", "\n", "', \"--format-only\", \"--show\" or \"--show-dir\"'", ")", "\n", "\n", "if", "args", ".", "eval", "and", "args", ".", "format_only", ":", "\n", "        ", "raise", "ValueError", "(", "'--eval and --format_only cannot be both specified'", ")", "\n", "\n", "", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "options", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "if", "args", ".", "aug_test", ":", "\n", "# hard code index", "\n", "        ", "cfg", ".", "data", ".", "test", ".", "pipeline", "[", "1", "]", ".", "img_ratios", "=", "[", "\n", "0.5", ",", "0.75", ",", "1.0", ",", "1.25", ",", "1.5", ",", "1.75", "\n", "]", "\n", "cfg", ".", "data", ".", "test", ".", "pipeline", "[", "1", "]", ".", "flip", "=", "True", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.test.main": [[102, 210], ["test.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "Config.fromfile.model.get", "isinstance", "Config.fromfile.data.test.pop", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "Config.fromfile.get", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "ValueError", "ValueError", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "isinstance", "isinstance", "mmcv.runner.init_dist", "mmdet.datasets.replace_ImageToTensor", "mmcv.runner.wrap_fp16_model", "mmcv.cnn.fuse_conv_bn", "mmcv.parallel.MMDataParallel", "mmdet.apis.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "mmdet.apis.multi_gpu_test", "parse_args.out.endswith", "Config.fromfile.model.neck.get", "mmcv.parallel.MMDistributedDataParallel.cuda", "print", "mmcv.dump", "mmdet.datasets.build_dataset.format_results", "Config.fromfile.get().copy", "cfg.get().copy.update", "print", "neck_cfg.get", "Config.fromfile.model.neck.rfp_backbone.get", "cfg.get().copy.pop", "dict", "mmdet.datasets.build_dataset.evaluate", "neck_cfg.rfp_backbone.get", "torch.cuda.current_device", "Config.fromfile.get"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.detection.test.parse_args", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.build.build_dataset", "home.repos.pwc.inspect_result.cheerss_CrossFormer.None.utils.load_checkpoint"], ["\n", "# init distributed env first, since logger depends on the dist info.", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# build the dataloader", "\n", "# TODO: support multiple images per gpu (only minor changes are needed)", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "cfg", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_segmentor", "(", "cfg", ".", "model", ",", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "model", ".", "PALETTE", "=", "checkpoint", "[", "'meta'", "]", "[", "'PALETTE'", "]", "\n", "\n", "efficient_test", "=", "False", "\n", "if", "args", ".", "eval_options", "is", "not", "None", ":", "\n", "        ", "efficient_test", "=", "args", ".", "eval_options", ".", "get", "(", "'efficient_test'", ",", "False", ")", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "show", ",", "args", ".", "show_dir", ",", "\n", "efficient_test", ",", "args", ".", "opacity", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ",", "\n", "args", ".", "gpu_collect", ",", "efficient_test", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "if", "args", ".", "out", ":", "\n", "            ", "print", "(", "f'\\nwriting results to {args.out}'", ")", "\n", "mmcv", ".", "dump", "(", "outputs", ",", "args", ".", "out", ")", "\n", "", "kwargs", "=", "{", "}", "if", "args", ".", "eval_options", "is", "None", "else", "args", ".", "eval_options", "\n", "if", "args", ".", "format_only", ":", "\n", "            ", "dataset", ".", "format_results", "(", "outputs", ",", "**", "kwargs", ")", "\n", "", "if", "args", ".", "eval", ":", "\n", "            ", "dataset", ".", "evaluate", "(", "outputs", ",", "args", ".", "eval", ",", "**", "kwargs", ")", "\n", "\n", "\n", "", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.samplers.SubsetRandomSampler.__init__": [[11, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "0", "\n", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.samplers.SubsetRandomSampler.__iter__": [[15, 17], ["torch.randperm", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "indices", "[", "i", "]", "for", "i", "in", "torch", ".", "randperm", "(", "len", "(", "self", ".", "indices", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.samplers.SubsetRandomSampler.__len__": [[18, 20], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.samplers.SubsetRandomSampler.set_epoch": [[21, 23], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.build.build_loader": [[16, 64], ["config.defrost", "build.build_dataset", "config.freeze", "print", "build.build_dataset", "print", "torch.get_world_size", "torch.get_rank", "numpy.arange", "samplers.SubsetRandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "numpy.arange", "samplers.SubsetRandomSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.get_rank", "len", "torch.get_world_size", "timm.data.Mixup", "torch.get_rank", "len", "torch.get_world_size", "torch.get_rank", "torch.get_rank"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.build.build_dataset", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.build.build_dataset"], ["qkv_bias", "=", "config", ".", "MODEL", ".", "CROS", ".", "QKV_BIAS", ",", "\n", "qk_scale", "=", "config", ".", "MODEL", ".", "CROS", ".", "QK_SCALE", ",", "\n", "drop_rate", "=", "config", ".", "MODEL", ".", "DROP_RATE", ",", "\n", "drop_path_rate", "=", "config", ".", "MODEL", ".", "DROP_PATH_RATE", ",", "\n", "ape", "=", "config", ".", "MODEL", ".", "CROS", ".", "APE", ",", "\n", "patch_norm", "=", "config", ".", "MODEL", ".", "CROS", ".", "PATCH_NORM", ",", "\n", "use_checkpoint", "=", "config", ".", "TRAIN", ".", "USE_CHECKPOINT", ",", "\n", "merge_size", "=", "config", ".", "MODEL", ".", "CROS", ".", "MERGE_SIZE", ",", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Unkown model: {model_type}\"", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.build.build_dataset": [[66, 95], ["build.build_transform", "cached_image_folder.CachedImageFolder", "os.path.join", "torchvision.datasets.ImageFolder", "tfrecord_torch_loader.ImageTFRecordDataSet", "tfrecord_torch_loader.ImageTFRecordDataSet", "NotImplementedError", "os.path.join", "os.path.join", "os.path.join", "os.listdir"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.build.build_transform"], []], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.build.build_transform": [[97, 135], ["t.append", "t.append", "torchvision.transforms.Compose", "timm.data.create_transform", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomCrop", "int", "t.append", "t.append", "t.append", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.Resize", "timm.data.transforms._pil_interp", "timm.data.transforms._pil_interp"], "function", ["None"], []], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.DatasetFolder.__init__": [[85, 115], ["list", "cached_image_folder.find_classes", "cached_image_folder.make_dataset", "cached_image_folder.make_dataset_with_ann", "len", "RuntimeError", "set", "cached_image_folder.DatasetFolder.init_cache", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.find_classes", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.make_dataset", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.make_dataset_with_ann", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.DatasetFolder.init_cache"], ["def", "__init__", "(", "self", ",", "root", ",", "loader", ",", "extensions", ",", "ann_file", "=", "''", ",", "img_prefix", "=", "''", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "cache_mode", "=", "\"no\"", ")", ":", "\n", "# image folder mode", "\n", "        ", "if", "ann_file", "==", "''", ":", "\n", "            ", "_", ",", "class_to_idx", "=", "find_classes", "(", "root", ")", "\n", "samples", "=", "make_dataset", "(", "root", ",", "class_to_idx", ",", "extensions", ")", "\n", "# zip mode", "\n", "", "else", ":", "\n", "            ", "samples", "=", "make_dataset_with_ann", "(", "os", ".", "path", ".", "join", "(", "root", ",", "ann_file", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "img_prefix", ")", ",", "\n", "extensions", ")", "\n", "\n", "", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 files in subfolders of: \"", "+", "root", "+", "\"\\n\"", "+", "\n", "\"Supported extensions are: \"", "+", "\",\"", ".", "join", "(", "extensions", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "extensions", "=", "extensions", "\n", "\n", "self", ".", "samples", "=", "samples", "\n", "self", ".", "labels", "=", "[", "y_1k", "for", "_", ",", "y_1k", "in", "samples", "]", "\n", "self", ".", "classes", "=", "list", "(", "set", "(", "self", ".", "labels", ")", ")", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "self", ".", "cache_mode", "=", "cache_mode", "\n", "if", "self", ".", "cache_mode", "!=", "\"no\"", ":", "\n", "            ", "self", ".", "init_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.DatasetFolder.init_cache": [[116, 137], ["len", "torch.get_rank", "torch.get_rank", "torch.get_world_size", "torch.get_world_size", "time.time", "range", "range", "print", "time.time", "time.time", "zipreader.ZipReader.read", "zipreader.ZipReader.read", "torch.get_rank", "torch.get_rank"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.read", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.read"], ["", "", "def", "init_cache", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "cache_mode", "in", "[", "\"part\"", ",", "\"full\"", "]", "\n", "n_sample", "=", "len", "(", "self", ".", "samples", ")", "\n", "global_rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "samples_bytes", "=", "[", "None", "for", "_", "in", "range", "(", "n_sample", ")", "]", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "index", "in", "range", "(", "n_sample", ")", ":", "\n", "            ", "if", "index", "%", "(", "n_sample", "//", "10", ")", "==", "0", ":", "\n", "                ", "t", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "f'global_rank {dist.get_rank()} cached {index}/{n_sample} takes {t:.2f}s per block'", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "if", "self", ".", "cache_mode", "==", "\"full\"", ":", "\n", "                ", "samples_bytes", "[", "index", "]", "=", "(", "ZipReader", ".", "read", "(", "path", ")", ",", "target", ")", "\n", "", "elif", "self", ".", "cache_mode", "==", "\"part\"", "and", "index", "%", "world_size", "==", "global_rank", ":", "\n", "                ", "samples_bytes", "[", "index", "]", "=", "(", "ZipReader", ".", "read", "(", "path", ")", ",", "target", ")", "\n", "", "else", ":", "\n", "                ", "samples_bytes", "[", "index", "]", "=", "(", "path", ",", "target", ")", "\n", "", "", "self", ".", "samples", "=", "samples_bytes", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.DatasetFolder.__getitem__": [[138, 153], ["cached_image_folder.DatasetFolder.loader", "cached_image_folder.DatasetFolder.transform", "cached_image_folder.DatasetFolder.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (sample, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.DatasetFolder.__len__": [[154, 156], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.DatasetFolder.__repr__": [[157, 166], ["cached_image_folder.DatasetFolder.__len__", "cached_image_folder.DatasetFolder.transform.__repr__().replace", "cached_image_folder.DatasetFolder.target_transform.__repr__().replace", "cached_image_folder.DatasetFolder.transform.__repr__", "cached_image_folder.DatasetFolder.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.TFRecordDataSet.__len__", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.DatasetFolder.__repr__", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.DatasetFolder.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.CachedImageFolder.__init__": [[220, 227], ["cached_image_folder.DatasetFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "ann_file", "=", "''", ",", "img_prefix", "=", "''", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "loader", "=", "default_img_loader", ",", "cache_mode", "=", "\"no\"", ")", ":", "\n", "        ", "super", "(", "CachedImageFolder", ",", "self", ")", ".", "__init__", "(", "root", ",", "loader", ",", "IMG_EXTENSIONS", ",", "\n", "ann_file", "=", "ann_file", ",", "img_prefix", "=", "img_prefix", ",", "\n", "transform", "=", "transform", ",", "target_transform", "=", "target_transform", ",", "\n", "cache_mode", "=", "cache_mode", ")", "\n", "self", ".", "imgs", "=", "self", ".", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.CachedImageFolder.__getitem__": [[228, 245], ["cached_image_folder.CachedImageFolder.loader", "cached_image_folder.CachedImageFolder.transform", "cached_image_folder.CachedImageFolder.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "image", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "image", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.has_file_allowed_extension": [[11, 20], ["filename.lower", "any", "filename.lower.endswith"], "function", ["None"], ["def", "has_file_allowed_extension", "(", "filename", ",", "extensions", ")", ":", "\n", "    ", "\"\"\"Checks if a file is an allowed extension.\n    Args:\n        filename (string): path to a file\n    Returns:\n        bool: True if the filename ends with a known image extension\n    \"\"\"", "\n", "filename_lower", "=", "filename", ".", "lower", "(", ")", "\n", "return", "any", "(", "filename_lower", ".", "endswith", "(", "ext", ")", "for", "ext", "in", "extensions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.find_classes": [[22, 27], ["classes.sort", "os.listdir", "os.path.isdir", "range", "os.path.join", "len"], "function", ["None"], ["", "def", "find_classes", "(", "dir", ")", ":", "\n", "    ", "classes", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "dir", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "d", ")", ")", "]", "\n", "classes", ".", "sort", "(", ")", "\n", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "return", "classes", ",", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.make_dataset": [[29, 45], ["os.path.expanduser", "sorted", "os.listdir", "os.path.join", "sorted", "os.path.isdir", "os.walk", "sorted", "cached_image_folder.has_file_allowed_extension", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.has_file_allowed_extension"], ["", "def", "make_dataset", "(", "dir", ",", "class_to_idx", ",", "extensions", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "dir", "=", "os", ".", "path", ".", "expanduser", "(", "dir", ")", "\n", "for", "target", "in", "sorted", "(", "os", ".", "listdir", "(", "dir", ")", ")", ":", "\n", "        ", "d", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "target", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "d", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "d", ")", ")", ":", "\n", "            ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "                ", "if", "has_file_allowed_extension", "(", "fname", ",", "extensions", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "item", "=", "(", "path", ",", "class_to_idx", "[", "target", "]", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.make_dataset_with_ann": [[47, 62], ["open", "f.readlines", "int", "images.append", "str.lower", "os.path.join", "line_str.split", "os.path.splitext"], "function", ["None"], ["", "def", "make_dataset_with_ann", "(", "ann_file", ",", "img_prefix", ",", "extensions", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "with", "open", "(", "ann_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "contents", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line_str", "in", "contents", ":", "\n", "            ", "path_contents", "=", "[", "c", "for", "c", "in", "line_str", ".", "split", "(", "'\\t'", ")", "]", "\n", "im_file_name", "=", "path_contents", "[", "0", "]", "\n", "class_index", "=", "int", "(", "path_contents", "[", "1", "]", ")", "\n", "\n", "assert", "str", ".", "lower", "(", "os", ".", "path", ".", "splitext", "(", "im_file_name", ")", "[", "-", "1", "]", ")", "in", "extensions", "\n", "item", "=", "(", "os", ".", "path", ".", "join", "(", "img_prefix", ",", "im_file_name", ")", ",", "class_index", ")", "\n", "\n", "images", ".", "append", "(", "item", ")", "\n", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.pil_loader": [[171, 182], ["isinstance", "Image.open.convert", "PIL.Image.open", "zipreader.is_zip_path", "io.BytesIO", "zipreader.ZipReader.read", "PIL.Image.open", "io.BytesIO", "open", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.is_zip_path", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.read"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "if", "isinstance", "(", "path", ",", "bytes", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "io", ".", "BytesIO", "(", "path", ")", ")", "\n", "", "elif", "is_zip_path", "(", "path", ")", ":", "\n", "        ", "data", "=", "ZipReader", ".", "read", "(", "path", ")", "\n", "img", "=", "Image", ".", "open", "(", "io", ".", "BytesIO", "(", "data", ")", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "", "", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.accimage_loader": [[184, 191], ["accimage.Image", "cached_image_folder.pil_loader"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.pil_loader"], ["", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "import", "accimage", "\n", "try", ":", "\n", "        ", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.default_img_loader": [[193, 199], ["get_image_backend", "cached_image_folder.accimage_loader", "cached_image_folder.pil_loader"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.accimage_loader", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.cached_image_folder.pil_loader"], ["", "", "def", "default_img_loader", "(", "path", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.__init__": [[20, 22], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ZipReader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.get_zipfile": [[23, 30], ["zipfile.ZipFile"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_zipfile", "(", "path", ")", ":", "\n", "        ", "zip_bank", "=", "ZipReader", ".", "zip_bank", "\n", "if", "path", "not", "in", "zip_bank", ":", "\n", "            ", "zfile", "=", "zipfile", ".", "ZipFile", "(", "path", ",", "'r'", ")", "\n", "zip_bank", "[", "path", "]", "=", "zfile", "\n", "", "return", "zip_bank", "[", "path", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.split_zip_style_path": [[31, 40], ["path.index", "str.strip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "split_zip_style_path", "(", "path", ")", ":", "\n", "        ", "pos_at", "=", "path", ".", "index", "(", "'@'", ")", "\n", "assert", "pos_at", "!=", "-", "1", ",", "\"character '@' is not found from the given path '%s'\"", "%", "path", "\n", "\n", "zip_path", "=", "path", "[", "0", ":", "pos_at", "]", "\n", "folder_path", "=", "path", "[", "pos_at", "+", "1", ":", "]", "\n", "folder_path", "=", "str", ".", "strip", "(", "folder_path", ",", "'/'", ")", "\n", "return", "zip_path", ",", "folder_path", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.list_folder": [[41, 58], ["zipreader.ZipReader.split_zip_style_path", "zipreader.ZipReader.get_zipfile", "zipreader.ZipReader.get_zipfile", "str.strip", "str.strip.startswith", "len", "len", "folder_list.append", "folder_list.append", "os.path.splitext", "len"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.split_zip_style_path", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.get_zipfile", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.get_zipfile"], ["", "@", "staticmethod", "\n", "def", "list_folder", "(", "path", ")", ":", "\n", "        ", "zip_path", ",", "folder_path", "=", "ZipReader", ".", "split_zip_style_path", "(", "path", ")", "\n", "\n", "zfile", "=", "ZipReader", ".", "get_zipfile", "(", "zip_path", ")", "\n", "folder_list", "=", "[", "]", "\n", "for", "file_foler_name", "in", "zfile", ".", "namelist", "(", ")", ":", "\n", "            ", "file_foler_name", "=", "str", ".", "strip", "(", "file_foler_name", ",", "'/'", ")", "\n", "if", "file_foler_name", ".", "startswith", "(", "folder_path", ")", "and", "len", "(", "os", ".", "path", ".", "splitext", "(", "file_foler_name", ")", "[", "-", "1", "]", ")", "==", "0", "and", "file_foler_name", "!=", "folder_path", ":", "\n", "                ", "if", "len", "(", "folder_path", ")", "==", "0", ":", "\n", "                    ", "folder_list", ".", "append", "(", "file_foler_name", ")", "\n", "", "else", ":", "\n", "                    ", "folder_list", ".", "append", "(", "file_foler_name", "[", "len", "(", "folder_path", ")", "+", "1", ":", "]", ")", "\n", "\n", "", "", "", "return", "folder_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.list_files": [[59, 77], ["zipreader.ZipReader.split_zip_style_path", "zipreader.ZipReader.get_zipfile", "zipreader.ZipReader.get_zipfile", "str.strip", "str.strip.startswith", "str.lower", "len", "file_lists.append", "file_lists.append", "os.path.splitext", "len"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.split_zip_style_path", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.get_zipfile", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.get_zipfile"], ["", "@", "staticmethod", "\n", "def", "list_files", "(", "path", ",", "extension", "=", "None", ")", ":", "\n", "        ", "if", "extension", "is", "None", ":", "\n", "            ", "extension", "=", "[", "'.*'", "]", "\n", "", "zip_path", ",", "folder_path", "=", "ZipReader", ".", "split_zip_style_path", "(", "path", ")", "\n", "\n", "zfile", "=", "ZipReader", ".", "get_zipfile", "(", "zip_path", ")", "\n", "file_lists", "=", "[", "]", "\n", "for", "file_foler_name", "in", "zfile", ".", "namelist", "(", ")", ":", "\n", "            ", "file_foler_name", "=", "str", ".", "strip", "(", "file_foler_name", ",", "'/'", ")", "\n", "if", "file_foler_name", ".", "startswith", "(", "folder_path", ")", "and", "str", ".", "lower", "(", "os", ".", "path", ".", "splitext", "(", "file_foler_name", ")", "[", "-", "1", "]", ")", "in", "extension", ":", "\n", "                ", "if", "len", "(", "folder_path", ")", "==", "0", ":", "\n", "                    ", "file_lists", ".", "append", "(", "file_foler_name", ")", "\n", "", "else", ":", "\n", "                    ", "file_lists", ".", "append", "(", "file_foler_name", "[", "len", "(", "folder_path", ")", "+", "1", ":", "]", ")", "\n", "\n", "", "", "", "return", "file_lists", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.read": [[78, 84], ["zipreader.ZipReader.split_zip_style_path", "zipreader.ZipReader.get_zipfile", "zipreader.ZipReader.get_zipfile"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.split_zip_style_path", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.get_zipfile", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.get_zipfile"], ["", "@", "staticmethod", "\n", "def", "read", "(", "path", ")", ":", "\n", "        ", "zip_path", ",", "path_img", "=", "ZipReader", ".", "split_zip_style_path", "(", "path", ")", "\n", "zfile", "=", "ZipReader", ".", "get_zipfile", "(", "zip_path", ")", "\n", "data", "=", "zfile", ".", "read", "(", "path_img", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.imread": [[85, 97], ["zipreader.ZipReader.split_zip_style_path", "zipreader.ZipReader.get_zipfile", "zipreader.ZipReader.get_zipfile", "PIL.Image.open", "io.BytesIO", "print", "PIL.Image.fromarray", "numpy.random.rand", "numpy.uint8"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.split_zip_style_path", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.get_zipfile", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.get_zipfile"], ["", "@", "staticmethod", "\n", "def", "imread", "(", "path", ")", ":", "\n", "        ", "zip_path", ",", "path_img", "=", "ZipReader", ".", "split_zip_style_path", "(", "path", ")", "\n", "zfile", "=", "ZipReader", ".", "get_zipfile", "(", "zip_path", ")", "\n", "data", "=", "zfile", ".", "read", "(", "path_img", ")", "\n", "try", ":", "\n", "            ", "im", "=", "Image", ".", "open", "(", "io", ".", "BytesIO", "(", "data", ")", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"ERROR IMG LOADED: \"", ",", "path_img", ")", "\n", "random_img", "=", "np", ".", "random", ".", "rand", "(", "224", ",", "224", ",", "3", ")", "*", "255", "\n", "im", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "random_img", ")", ")", "\n", "", "return", "im", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.is_zip_path": [[11, 14], ["None"], "function", ["None"], ["def", "is_zip_path", "(", "img_or_path", ")", ":", "\n", "    ", "\"\"\"judge if this is a zip path\"\"\"", "\n", "return", "'.zip@'", "in", "img_or_path", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.TFRecordDataSet.__init__": [[64, 80], ["threading.local", "zip", "tfrecord_torch_loader.tfrecord2idx", "len", "print", "tfrecord_torch_loader.TFRecordDataSet.idxs.append", "f.replace", "open", "line.split", "idx.append", "len"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.tfrecord2idx"], ["    ", "def", "__init__", "(", "self", ",", "tfrecords", ")", ":", "\n", "\n", "        ", "tfindexs", "=", "[", "tfrecord2idx", "(", "f", ",", "f", ".", "replace", "(", "'.tfrecord'", ",", "'.idx'", ")", ")", "for", "f", "in", "tfrecords", "]", "\n", "self", ".", "idxs", "=", "[", "]", "\n", "self", ".", "thread_local", "=", "local", "(", ")", "\n", "self", ".", "thread_local", ".", "cache", "=", "{", "}", "\n", "self", ".", "samples", "=", "0", "\n", "for", "index", ",", "tffile", "in", "zip", "(", "tfindexs", ",", "tfrecords", ")", ":", "\n", "            ", "idx", "=", "[", "]", "\n", "with", "open", "(", "index", ")", "as", "idxf", ":", "\n", "                ", "for", "line", "in", "idxf", ":", "\n", "                    ", "offset", ",", "_", "=", "line", ".", "split", "(", "' '", ")", "\n", "idx", ".", "append", "(", "offset", ")", "\n", "", "", "self", ".", "samples", "+=", "len", "(", "idx", ")", "\n", "print", "(", "\"load %s, samples:%s\"", "%", "(", "tffile", ",", "len", "(", "idx", ")", ")", ")", "\n", "self", ".", "idxs", ".", "append", "(", "(", "idx", ",", "tffile", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.TFRecordDataSet.__len__": [[81, 83], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.TFRecordDataSet.parser": [[84, 86], ["NotImplementedError"], "methods", ["None"], ["", "def", "parser", "(", "self", ",", "feature_list", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Must Implement parser\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.TFRecordDataSet.get_record": [[87, 107], ["f.seek", "f.read", "f.read", "yt_example_pb2.Example", "yt_example_pb2.Example.ParseFromString", "sorted", "tfrecord_torch_loader.TFRecordDataSet.parser", "struct.unpack", "len", "print", "yt_example_pb2.Example.features.feature.items", "len"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.read", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.read", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.parser"], ["", "def", "get_record", "(", "self", ",", "f", ",", "offset", ",", "name_only", "=", "False", ")", ":", "\n", "        ", "f", ".", "seek", "(", "offset", ")", "\n", "\n", "# length,crc", "\n", "byte_len_crc", "=", "f", ".", "read", "(", "12", ")", "\n", "proto_len", "=", "struct", ".", "unpack", "(", "'Q'", ",", "byte_len_crc", "[", ":", "8", "]", ")", "[", "0", "]", "\n", "# proto,crc", "\n", "pb_data", "=", "f", ".", "read", "(", "proto_len", ")", "\n", "if", "len", "(", "pb_data", ")", "<", "proto_len", ":", "\n", "            ", "print", "(", "\"read pb_data err,proto_len:%s pb_data len:%s\"", "%", "(", "proto_len", ",", "len", "(", "pb_data", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "example", "=", "yt_example_pb2", ".", "Example", "(", ")", "\n", "example", ".", "ParseFromString", "(", "pb_data", ")", "\n", "#keep key value in order", "\n", "feature", "=", "sorted", "(", "example", ".", "features", ".", "feature", ".", "items", "(", ")", ")", "\n", "\n", "record", "=", "self", ".", "parser", "(", "feature", ")", "\n", "#print(record)", "\n", "return", "record", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.TFRecordDataSet.__getitem__": [[108, 128], ["print", "tfrecord_torch_loader.TFRecordDataSet.thread_local.cache.get", "int", "tfrecord_torch_loader.TFRecordDataSet.get_record", "len", "len", "open", "print", "random.randint"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.TFRecordDataSet.get_record"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "for", "idx", ",", "tffile", "in", "self", ".", "idxs", ":", "\n", "            ", "if", "index", ">=", "len", "(", "idx", ")", ":", "\n", "                ", "index", "-=", "len", "(", "idx", ")", "\n", "continue", "\n", "# every thread keep a f instace ", "\n", "", "f", "=", "self", ".", "thread_local", ".", "cache", ".", "get", "(", "tffile", ",", "None", ")", "\n", "if", "f", "is", "None", ":", "\n", "                ", "f", "=", "open", "(", "tffile", ",", "'rb'", ")", "\n", "self", ".", "thread_local", ".", "cache", "[", "tffile", "]", "=", "f", "\n", "\n", "", "offset", "=", "int", "(", "idx", "[", "index", "]", ")", "\n", "record", "=", "self", ".", "get_record", "(", "f", ",", "offset", ")", "\n", "if", "record", ":", "\n", "                ", "return", "record", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"bad data index %d\"", "%", "index", ")", "\n", "return", "self", "[", "random", ".", "randint", "(", "0", ",", "self", ".", "samples", "-", "1", ")", "]", "\n", "\n", "", "", "print", "(", "\"bad index,\"", ",", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__": [[131, 134], ["tfrecord_torch_loader.TFRecordDataSet.__init__"], "methods", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tfrecords", ",", "transforms", ")", ":", "\n", "        ", "super", "(", "ImageTFRecordDataSet", ",", "self", ")", ".", "__init__", "(", "tfrecords", ")", "\n", "self", ".", "transforms", "=", "transforms", "\n", "", "def", "parser", "(", "self", ",", "feature_list", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.ImageTFRecordDataSet.parser": [[134, 154], ["PIL.Image.open", "tfrecord_torch_loader.ImageTFRecordDataSet.convert", "tfrecord_torch_loader.ImageTFRecordDataSet.transforms", "io.BytesIO", "torchvision.io.BytesIO"], "methods", ["None"], ["", "def", "parser", "(", "self", ",", "feature_list", ")", ":", "\n", "        ", "'''\n        feature_list = [(key, feature), (key, feature)]\n        key is your label.txt col name\n        feature is oneof bytes_list, int64_list, float_list\n        '''", "\n", "for", "key", ",", "feature", "in", "feature_list", ":", "\n", "            ", "try", ":", "\n", "#for image file col", "\n", "                ", "if", "key", "==", "'image'", ":", "\n", "                    ", "image_raw", "=", "feature", ".", "bytes_list", ".", "value", "[", "0", "]", "\n", "image", "=", "Image", ".", "open", "(", "BytesIO", "(", "image_raw", ")", ")", "\n", "image", "=", "image", ".", "convert", "(", "'RGB'", ")", "\n", "image", "=", "self", ".", "transforms", "(", "image", ")", "\n", "#for int col", "\n", "", "elif", "key", "==", "'label'", ":", "\n", "                    ", "label", "=", "feature", ".", "int64_list", ".", "value", "[", "0", "]", "-", "1", "## imagenet classes are from 1 ~ 1000", "\n", "", "", "except", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.tfrecord_torch_loader.tfrecord2idx": [[24, 62], ["logging.info", "os.stat", "open", "logging.error", "os.remove", "open", "f.tell", "f.read", "f.read", "idx.write", "len", "len", "logging.error", "struct.unpack", "len", "logging.error", "str", "f.tell", "len", "f.tell", "str", "f.tell"], "function", ["home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.read", "home.repos.pwc.inspect_result.cheerss_CrossFormer.data.zipreader.ZipReader.read"], ["def", "tfrecord2idx", "(", "tfrecord", ",", "idxfile", ")", ":", "\n", "    ", "'''\n    refer :  https://github.com/NVIDIA/DALI/blob/master/tools/tfrecord2idx\n    '''", "\n", "try", ":", "\n", "#check idxfile exist and size large than 0", "\n", "        ", "st", "=", "os", ".", "stat", "(", "idxfile", ")", "\n", "if", "st", ".", "st_size", ">", "0", ":", "\n", "            ", "return", "idxfile", "\n", "", "", "except", ":", "\n", "# no found or size is zero regenerate", "\n", "        ", "pass", "\n", "\n", "", "samples", "=", "0", "\n", "with", "open", "(", "tfrecord", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "open", "(", "idxfile", ",", "'w'", ")", "as", "idx", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "current", "=", "f", ".", "tell", "(", ")", "\n", "byte_len_crc", "=", "f", ".", "read", "(", "12", ")", "\n", "# eof ", "\n", "if", "len", "(", "byte_len_crc", ")", "==", "0", ":", "\n", "                    ", "break", "\n", "", "if", "len", "(", "byte_len_crc", ")", "!=", "12", ":", "\n", "                    ", "logging", ".", "error", "(", "\"read byte_len_crc failed, file:%s, num:%d pos:%s byte_len_crc:%s\"", "%", "(", "tfrecord", ",", "samples", ",", "f", ".", "tell", "(", ")", ",", "len", "(", "byte_len_crc", ")", ")", ")", "\n", "break", "\n", "", "proto_len", "=", "struct", ".", "unpack", "(", "'L'", ",", "byte_len_crc", "[", ":", "8", "]", ")", "[", "0", "]", "\n", "buffer", "=", "f", ".", "read", "(", "proto_len", "+", "4", ")", "\n", "if", "len", "(", "buffer", ")", "!=", "proto_len", "+", "4", ":", "\n", "                    ", "logging", ".", "error", "(", "\"read proto_len failed, file:%s, num:%d pos:%s proto_len:%s\"", "%", "(", "tfrecord", ",", "samples", ",", "f", ".", "tell", "(", ")", ",", "proto_len", ")", ")", "\n", "break", "\n", "", "idx", ".", "write", "(", "str", "(", "current", ")", "+", "' '", "+", "str", "(", "f", ".", "tell", "(", ")", "-", "current", ")", "+", "'\\n'", ")", "\n", "samples", "+=", "1", "\n", "", "", "", "if", "samples", "==", "0", ":", "\n", "        ", "logging", ".", "error", "(", "\"no idx found,  file:%s\"", "%", "tfrecord", ")", "\n", "os", ".", "remove", "(", "idxfile", ")", "\n", "return", "None", "\n", "", "logging", ".", "info", "(", "\"idx generate done, samples:%s file:%s\"", "%", "(", "samples", ",", "idxfile", ")", ")", "\n", "return", "idxfile", "\n", "\n"]]}