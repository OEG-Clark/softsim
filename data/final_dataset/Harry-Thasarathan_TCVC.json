{"home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.None.train.train": [[111, 184], ["enumerate", "real_a.data.resize_().copy_", "real_b.data.resize_().copy_", "prev_b.data.resize_().copy_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "netG", "optimizerD.zero_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "netD.forward", "criterionGAN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "netD.forward", "criterionGAN", "loss_d.backward", "optimizerG.zero_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "netD.forward", "criterionGAN", "loss_g.backward", "optimizerG.step", "print", "torch.cat.detach", "optimizerD.step", "criterionL1", "criterionSTYLE", "criterionCONTENT", "train.log_train_data", "train.sample", "real_a.data.resize_", "real_b.data.resize_", "prev_b.data.resize_", "len", "real_a_cpu.size", "real_b_cpu.size", "prev_b_cpu.size", "loss_g.item", "loss_d.item", "criterionGAN.item", "loss_g_l1.item", "loss_g_style.item", "loss_g_content.item", "criterionGAN.item", "criterionGAN.item"], "function", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.VGG19.forward", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.VGG19.forward", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.VGG19.forward", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.None.train.log_train_data", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.None.train.sample"], ["def", "train", "(", "epoch", ")", ":", "\n", "\n", "    ", "for", "iteration", ",", "batch", "in", "enumerate", "(", "training_data_loader", ",", "1", ")", ":", "\n", "# forward", "\n", "        ", "real_a_cpu", ",", "real_b_cpu", ",", "prev_b_cpu", "=", "batch", "[", "0", "]", ",", "batch", "[", "1", "]", ",", "batch", "[", "2", "]", "\n", "real_a", ".", "data", ".", "resize_", "(", "real_a_cpu", ".", "size", "(", ")", ")", ".", "copy_", "(", "real_a_cpu", ")", "\n", "real_b", ".", "data", ".", "resize_", "(", "real_b_cpu", ".", "size", "(", ")", ")", ".", "copy_", "(", "real_b_cpu", ")", "\n", "prev_b", ".", "data", ".", "resize_", "(", "prev_b_cpu", ".", "size", "(", ")", ")", ".", "copy_", "(", "prev_b_cpu", ")", "\n", "\n", "input_joined", "=", "torch", ".", "cat", "(", "(", "real_a", ",", "prev_b", ")", ",", "1", ")", "\n", "\n", "fake_b", "=", "netG", "(", "input_joined", ")", "\n", "\n", "############################", "\n", "# (1) Update D network: maximize log(D(x,y)) + log(1 - D(x,G(x)))", "\n", "###########################", "\n", "\n", "optimizerD", ".", "zero_grad", "(", ")", "\n", "\n", "# train with fake", "\n", "fake_ab", "=", "torch", ".", "cat", "(", "(", "real_a", ",", "prev_b", ",", "fake_b", ")", ",", "1", ")", "\n", "pred_fake", "=", "netD", ".", "forward", "(", "fake_ab", ".", "detach", "(", ")", ")", "\n", "loss_d_fake", "=", "criterionGAN", "(", "pred_fake", ",", "False", ",", "True", ")", "\n", "\n", "# train with real", "\n", "real_ab", "=", "torch", ".", "cat", "(", "(", "real_a", ",", "prev_b", ",", "real_b", ")", ",", "1", ")", "\n", "pred_real", "=", "netD", ".", "forward", "(", "real_ab", ")", "\n", "loss_d_real", "=", "criterionGAN", "(", "pred_real", ",", "True", ",", "True", ")", "\n", "\n", "\n", "# Combined loss", "\n", "loss_d", "=", "(", "loss_d_fake", "+", "loss_d_real", ")", "*", "0.5", "\n", "\n", "loss_d", ".", "backward", "(", ")", "\n", "\n", "#Discriminator parameters update every 12 iterations ", "\n", "if", "(", "iteration", "==", "1", "or", "iteration", "%", "12", "==", "0", ")", ":", "\n", "            ", "optimizerD", ".", "step", "(", ")", "\n", "\n", "############################", "\n", "# (2) Update G network: maximize log(D(x,G(x))) + L1(y,G(x))", "\n", "##########################", "\n", "", "optimizerG", ".", "zero_grad", "(", ")", "\n", "\n", "# First, G(A) should fake the discriminator", "\n", "fake_ab", "=", "torch", ".", "cat", "(", "(", "real_a", ",", "prev_b", ",", "fake_b", ")", ",", "1", ")", "\n", "pred_fake", "=", "netD", ".", "forward", "(", "fake_ab", ")", "\n", "loss_g_gan", "=", "criterionGAN", "(", "pred_fake", ",", "True", ",", "False", ")", "\n", "\n", "# Second, G(A) = B", "\n", "loss_g_l1", "=", "criterionL1", "(", "fake_b", ",", "real_b", ")", "*", "opt", ".", "L1lamb", "\n", "loss_g", "=", "loss_g_gan", "+", "loss_g_l1", "\n", "\n", "loss_g_style", "=", "criterionSTYLE", "(", "fake_b", ",", "real_b", ")", "*", "opt", ".", "Stylelamb", "\n", "loss_g", "=", "loss_g", "+", "loss_g_style", "\n", "\n", "loss_g_content", "=", "criterionCONTENT", "(", "fake_b", ",", "real_b", ")", "*", "opt", ".", "Contentlamb", "\n", "loss_g", "=", "loss_g", "+", "loss_g_content", "\n", "\n", "loss_g", ".", "backward", "(", ")", "\n", "\n", "optimizerG", ".", "step", "(", ")", "\n", "\n", "if", "(", "iteration", "%", "25", "==", "0", ")", ":", "\n", "            ", "logs", "=", "[", "(", "\"epoc\"", ",", "epoch", ")", ",", "(", "\"iter\"", ",", "iteration", ")", ",", "(", "\"Loss_G\"", ",", "loss_g", ".", "item", "(", ")", ")", ",", "(", "\"Loss_D\"", ",", "loss_d", ".", "item", "(", ")", ")", ",", "(", "\"Loss_G_adv\"", ",", "loss_g_gan", ".", "item", "(", ")", ")", ",", "(", "\"Loss_G_L1\"", ",", "loss_g_l1", ".", "item", "(", ")", ")", ",", "(", "\"Loss_G_style\"", ",", "loss_g_style", ".", "item", "(", ")", ")", ",", "(", "\"Loss_G_content\"", ",", "loss_g_content", ".", "item", "(", ")", ")", ",", "(", "\"Loss_D_Real\"", ",", "loss_d_real", ".", "item", "(", ")", ")", ",", "(", "\"Loss_D_Fake\"", ",", "loss_d_fake", ".", "item", "(", ")", ")", "]", "\n", "log_train_data", "(", "logs", ")", "\n", "\n", "", "if", "(", "iteration", "%", "250", "==", "0", ")", ":", "\n", "            ", "sample", "(", "iteration", ")", "\n", "\n", "\n", "", "print", "(", "\"===> Epoch[{}]({}/{}): Loss_D: {:.4f} Loss_G: {:.4f} LossD_Fake: {:.4f} LossD_Real: {:.4f}  LossG_Adv: {:.4f} LossG_L1: {:.4f} LossG_Style {:.4f} LossG_Content {:.4f}\"", ".", "format", "(", "\n", "epoch", ",", "iteration", ",", "len", "(", "training_data_loader", ")", ",", "loss_d", ",", "loss_g", ",", "loss_d_fake", ",", "loss_d_real", ",", "loss_g_gan", ",", "loss_g_l1", ",", "loss_g_style", ",", "loss_g_content", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.None.train.sample": [[185, 210], ["src.util.stitch_images", "print", "src.util.stitch_images.save", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "next", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "netG", "src.util.postprocess", "src.util.postprocess", "src.util.postprocess", "os.path.exists", "os.makedirs", "os.path.join", "input.cuda.cuda", "target.cuda.cuda", "prev_frame.cuda.cuda", "str().zfill", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.stitch_images", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.postprocess", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.postprocess", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.postprocess"], ["", "", "def", "sample", "(", "iteration", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "input", ",", "target", ",", "prev_frame", "=", "next", "(", "sample_iterator", ")", "\n", "\n", "if", "opt", ".", "cuda", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "prev_frame", "=", "prev_frame", ".", "cuda", "(", ")", "\n", "\n", "", "pred_input", "=", "torch", ".", "cat", "(", "(", "input", ",", "prev_frame", ")", ",", "1", ")", "\n", "prediction", "=", "netG", "(", "pred_input", ")", "\n", "prediction", "=", "postprocess", "(", "prediction", ")", "\n", "input", "=", "postprocess", "(", "input", ")", "\n", "target", "=", "postprocess", "(", "target", ")", "\n", "\n", "", "img", "=", "stitch_images", "(", "input", ",", "target", ",", "prediction", ")", "\n", "samples_dir", "=", "root_path", "+", "\"/samples\"", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "samples_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "samples_dir", ")", "\n", "\n", "", "sample", "=", "opt", ".", "dataset", "+", "\"_\"", "+", "str", "(", "epoch", ")", "+", "\"_\"", "+", "str", "(", "iteration", ")", ".", "zfill", "(", "5", ")", "+", "\".png\"", "\n", "print", "(", "'\\nsaving sample '", "+", "sample", "+", "' - learning rate: '", "+", "str", "(", "opt", ".", "lr", ")", ")", "\n", "img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "samples_dir", ",", "sample", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.None.train.log_train_data": [[211, 218], ["os.path.exists", "os.makedirs", "open", "f.write", "str"], "function", ["None"], ["", "def", "log_train_data", "(", "loginfo", ")", ":", "\n", "    ", "log_dir", "=", "root_path", "+", "\"/logs\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "log_file", "=", "log_dir", "+", "\"/\"", "+", "opt", ".", "logfile", "\n", "with", "open", "(", "log_file", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'%s\\n'", "%", "' '", ".", "join", "(", "[", "str", "(", "item", "[", "1", "]", ")", "for", "item", "in", "loginfo", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.None.train.checkpoint": [[220, 232], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "netG.state_dict", "netD.state_dict"], "function", ["None"], ["", "", "def", "checkpoint", "(", "epoch", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "\"checkpoint\"", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "\"checkpoint\"", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "\"checkpoint\"", ",", "opt", ".", "dataset", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "\"checkpoint\"", ",", "opt", ".", "dataset", ")", ")", "\n", "", "net_g_model_out_path", "=", "\"checkpoint/{}/netG_weights_epoch_{}.pth\"", ".", "format", "(", "opt", ".", "dataset", ",", "epoch", ")", "\n", "net_d_model_out_path", "=", "\"checkpoint/{}/netD_weights_epoch_{}.pth\"", ".", "format", "(", "opt", ".", "dataset", ",", "epoch", ")", "\n", "\n", "torch", ".", "save", "(", "{", "'generator'", ":", "netG", ".", "state_dict", "(", ")", "}", ",", "net_g_model_out_path", ")", "\n", "torch", ".", "save", "(", "{", "'discriminator'", ":", "netD", ".", "state_dict", "(", ")", "}", ",", "net_d_model_out_path", ")", "\n", "\n", "print", "(", "\"Checkpoint saved to {}\"", ".", "format", "(", "\"checkpoint\"", "+", "opt", ".", "dataset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.None.train.run": [[238, 241], ["torch.multiprocessing.freeze_support", "torch.multiprocessing.freeze_support", "torch.multiprocessing.freeze_support", "torch.multiprocessing.freeze_support", "print"], "function", ["None"], ["", "def", "run", "(", ")", ":", "\n", "    ", "torch", ".", "multiprocessing", ".", "freeze_support", "(", ")", "\n", "print", "(", "'loop'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.BaseNetwork.__init__": [[8, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.Progbar.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.BaseNetwork.init_weights": [[11, 38], ["models.BaseNetwork.apply", "hasattr", "torch.init.normal_", "torch.init.normal_", "hasattr", "torch.init.constant_", "torch.init.constant_", "classname.find", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "classname.find", "classname.find", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.orthogonal_", "torch.init.orthogonal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "        ", "'''\n        initialize network's weights\n        init_type: normal | xavier | kaiming | orthogonal\n        https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix/blob/9451e70673400885567d08a9e97ade2524c700d0/models/networks.py#L39\n        '''", "\n", "\n", "def", "init_func", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "                ", "if", "init_type", "==", "'normal'", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                    ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "self", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.InpaintGenerator.__init__": [[41, 81], ["models.BaseNetwork.__init__", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "models.ResnetBlock", "blocks.append", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "models.InpaintGenerator.init_weights"], "methods", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.Progbar.__init__", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.BaseNetwork.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "residual_blocks", "=", "8", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "InpaintGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "4", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "256", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "blocks", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "residual_blocks", ")", ":", "\n", "            ", "block", "=", "ResnetBlock", "(", "256", ",", "2", ")", "\n", "blocks", ".", "append", "(", "block", ")", "\n", "\n", "", "self", ".", "middle", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.InpaintGenerator.forward": [[82, 89], ["models.InpaintGenerator.encoder", "models.InpaintGenerator.middle", "models.InpaintGenerator.decoder", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encoder", "(", "x", ")", "\n", "x", "=", "self", ".", "middle", "(", "x", ")", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "\n", "x", "=", "(", "torch", ".", "tanh", "(", "x", ")", "+", "1", ")", "/", "2", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.EdgeGenerator.__init__": [[92, 132], ["models.BaseNetwork.__init__", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "models.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "models.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "models.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "models.ResnetBlock", "blocks.append", "models.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "models.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "models.EdgeGenerator.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.Progbar.__init__", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.spectral_norm", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.spectral_norm", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.spectral_norm", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.spectral_norm", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.spectral_norm", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.BaseNetwork.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "residual_blocks", "=", "8", ",", "use_spectral_norm", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "EdgeGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "256", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "blocks", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "residual_blocks", ")", ":", "\n", "            ", "block", "=", "ResnetBlock", "(", "256", ",", "2", ",", "use_spectral_norm", "=", "use_spectral_norm", ")", "\n", "blocks", ".", "append", "(", "block", ")", "\n", "\n", "", "self", ".", "middle", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "spectral_norm", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.EdgeGenerator.forward": [[133, 139], ["models.EdgeGenerator.encoder", "models.EdgeGenerator.middle", "models.EdgeGenerator.decoder", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encoder", "(", "x", ")", "\n", "x", "=", "self", ".", "middle", "(", "x", ")", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.Discriminator.__init__": [[142, 173], ["models.BaseNetwork.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "models.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "models.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "models.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "models.spectral_norm", "models.Discriminator.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.Progbar.__init__", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.spectral_norm", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.spectral_norm", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.spectral_norm", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.spectral_norm", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.spectral_norm", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.BaseNetwork.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "use_sigmoid", "=", "True", ",", "use_spectral_norm", "=", "True", ",", "init_weights", "=", "True", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "self", ".", "conv1", "=", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.Discriminator.forward": [[174, 190], ["models.Discriminator.conv1", "models.Discriminator.conv2", "models.Discriminator.conv3", "models.Discriminator.conv4", "models.Discriminator.conv5", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "conv2", "=", "self", ".", "conv2", "(", "conv1", ")", "\n", "conv3", "=", "self", ".", "conv3", "(", "conv2", ")", "\n", "conv4", "=", "self", ".", "conv4", "(", "conv3", ")", "\n", "conv5", "=", "self", ".", "conv5", "(", "conv4", ")", "\n", "\n", "outputs", "=", "conv5", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "outputs", "=", "torch", ".", "sigmoid", "(", "conv5", ")", "\n", "\n", "#if len(self.gpu_ids)  and isinstance(x.data, torch.cuda.FloatTensor):", "\n", "#    return nn.parallel.data_parallel(outputs, x, self.gpu_ids)", "\n", "#else:", "\n", "#    return outputs", "\n", "", "return", "outputs", "\n", "#, [conv1, conv2, conv3, conv4, conv5]", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.ResnetBlock.__init__": [[194, 205], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "models.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "models.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.Progbar.__init__", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.spectral_norm", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.spectral_norm"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "dilation", "=", "1", ",", "use_spectral_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "dilation", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "dim", ",", "out_channels", "=", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "dim", ",", "out_channels", "=", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim", ",", "track_running_stats", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.ResnetBlock.forward": [[207, 210], ["models.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.spectral_norm": [[212, 217], ["torch.utils.spectral_norm"], "function", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.spectral_norm"], ["", "", "def", "spectral_norm", "(", "module", ",", "mode", "=", "True", ")", ":", "\n", "    ", "if", "mode", ":", "\n", "        ", "return", "nn", ".", "utils", ".", "spectral_norm", "(", "module", ")", "\n", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.define_G": [[218, 233], ["models.InpaintGenerator", "len", "torch.cuda.is_available", "torch.cuda.is_available", "len", "InpaintGenerator.cuda"], "function", ["None"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "use_dropout", "=", "True", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "netG", "=", "None", "\n", "use_gpu", "=", "len", "(", "gpu_ids", ")", ">", "0", "\n", "#norm_layer = get_norm_layer(norm_type=norm)", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "\n", "#netG = ResnetGenerator(input_nc, output_nc, ngf, norm_layer=norm_layer, use_dropout=use_dropout, n_blocks=9, gpu_ids=gpu_ids)", "\n", "", "netG", "=", "InpaintGenerator", "(", ")", "\n", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "#netG.apply(weights_init)", "\n", "", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.define_D": [[235, 246], ["models.Discriminator", "len", "torch.cuda.is_available", "torch.cuda.is_available", "Discriminator.cuda"], "function", ["None"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "use_sigmoid", "=", "True", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "netD", "=", "None", "\n", "use_gpu", "=", "len", "(", "gpu_ids", ")", ">", "0", "\n", "if", "use_gpu", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "\n", "", "netD", "=", "Discriminator", "(", "in_channels", "=", "7", ",", "use_sigmoid", "=", "True", ")", "\n", "if", "use_gpu", ":", "\n", "        ", "netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.models.print_network": [[248, 254], ["net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "", "", ""]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.dataset.DatasetFromFolder.__init__": [[15, 21], ["torch.Dataset.__init__", "torchvision.Compose", "torchvision.ToTensor", "os.listdir", "skimage.util.is_image_file"], "methods", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.Progbar.__init__", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.is_image_file"], ["    ", "def", "__init__", "(", "self", ",", "image_dir", ")", ":", "\n", "        ", "super", "(", "DatasetFromFolder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "photo_path", "=", "image_dir", "\n", "self", ".", "image_filenames", "=", "[", "x", "for", "x", "in", "listdir", "(", "self", ".", "photo_path", ")", "if", "is_image_file", "(", "x", ")", "]", "\n", "transform_list", "=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.dataset.DatasetFromFolder.__getitem__": [[22, 47], ["os.path.join", "dataset.DatasetFromFolder.get_prev", "skimage.util.load_img", "skimage.color.rgb2gray", "PIL.Image.fromarray", "dataset.DatasetFromFolder.transform", "dataset.DatasetFromFolder.transform", "dataset.DatasetFromFolder.transform", "os.path.join.split", "int", "print", "frame_num.split", "str"], "methods", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.dataset.DatasetFromFolder.get_prev", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.load_img"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# Load Image", "\n", "        ", "try", ":", "\n", "            ", "target_path", "=", "join", "(", "self", ".", "photo_path", ",", "self", ".", "image_filenames", "[", "index", "]", ")", "\n", "frame_num", "=", "target_path", ".", "split", "(", "\"e\"", ")", "[", "-", "1", "]", "\n", "frame_num", "=", "int", "(", "frame_num", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "-", "1", "\n", "#will be either black or colored", "\n", "frame_prev", "=", "self", ".", "get_prev", "(", "frame_num", ")", "\n", "target", "=", "load_img", "(", "target_path", ")", "\n", "input", "=", "color", ".", "rgb2gray", "(", "target", ")", "\n", "'''\n            #Lineart\n            input = feature.canny(input,sigma = 1)\n            input = util.invert(input)\n            input = Image.fromarray(np.uint8(input)*255)\n            '''", "\n", "input", "=", "Image", ".", "fromarray", "(", "input", ")", "\n", "frame_prev", "=", "self", ".", "transform", "(", "frame_prev", ")", "\n", "target", "=", "self", ".", "transform", "(", "target", ")", "\n", "input", "=", "self", ".", "transform", "(", "input", ")", "\n", "\n", "return", "input", ",", "target", ",", "frame_prev", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"Something went wrong frame:\"", "+", "str", "(", "frame_num", ")", ")", "\n", "return", "self", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.dataset.DatasetFromFolder.__len__": [[48, 50], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.dataset.DatasetFromFolder.get_prev": [[51, 64], ["os.path.exists", "PIL.Image.new", "numpy.random.uniform", "os.path.join", "skimage.util.load_img", "PIL.Image.new", "os.path.join", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.load_img"], ["", "def", "get_prev", "(", "self", ",", "num", ")", ":", "\n", "        ", "if", "not", "exists", "(", "join", "(", "self", ".", "photo_path", ",", "\"frame\"", "+", "str", "(", "num", ")", "+", "\".jpg\"", ")", ")", ":", "\n", "            ", "initial_prev_frame", "=", "Image", ".", "new", "(", "\"RGB\"", ",", "[", "256", ",", "256", "]", ")", "\n", "return", "initial_prev_frame", "\n", "", "else", ":", "\n", "#define rnd num generator and if statement <0.5 take black or color", "\n", "            ", "rnd", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "rnd", "<=", "0.5", ":", "\n", "                ", "prev", "=", "load_img", "(", "join", "(", "self", ".", "photo_path", ",", "\"frame\"", "+", "str", "(", "num", ")", "+", "\".jpg\"", ")", ")", "\n", "", "else", ":", "\n", "                ", "prev", "=", "Image", ".", "new", "(", "\"RGB\"", ",", "[", "256", ",", "256", "]", ")", "\n", "\n", "", "return", "prev", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.data.get_training_set": [[6, 10], ["os.path.join", "dataset.DatasetFromFolder"], "function", ["None"], ["def", "get_training_set", "(", "root_dir", ")", ":", "\n", "    ", "train_dir", "=", "join", "(", "root_dir", ",", "\"Train\"", ")", "\n", "\n", "return", "DatasetFromFolder", "(", "train_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.data.get_test_set": [[12, 16], ["os.path.join", "dataset.DatasetFromFolder"], "function", ["None"], ["", "def", "get_test_set", "(", "root_dir", ")", ":", "\n", "    ", "test_dir", "=", "join", "(", "root_dir", ",", "\"Test\"", ")", "\n", "\n", "return", "DatasetFromFolder", "(", "test_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.data.get_val_set": [[17, 21], ["os.path.join", "dataset.DatasetFromFolder"], "function", ["None"], ["", "def", "get_val_set", "(", "root_dir", ")", ":", "\n", "    ", "val_dir", "=", "join", "(", "root_dir", ",", "\"Val\"", ")", "\n", "\n", "return", "DatasetFromFolder", "(", "val_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.data.create_iterator": [[22, 32], ["torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "create_iterator", "(", "sample_size", ",", "sample_dataset", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "sample_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "sample_dataset", ",", "\n", "batch_size", "=", "sample_size", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "\n", "for", "item", "in", "sample_loader", ":", "\n", "            ", "yield", "item", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.AdversarialLoss.__init__": [[13, 33], ["torch.Module.__init__", "loss.AdversarialLoss.register_buffer", "loss.AdversarialLoss.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.BCELoss", "torch.BCELoss", "torch.MSELoss", "torch.MSELoss", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.Progbar.__init__"], ["def", "__init__", "(", "self", ",", "type", "=", "'nsgan'", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ")", ":", "\n", "        ", "r\"\"\"\n        type = nsgan | lsgan | hinge\n        \"\"\"", "\n", "super", "(", "AdversarialLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "register_buffer", "(", "'real_label'", ",", "torch", ".", "tensor", "(", "target_real_label", ")", ")", "\n", "self", ".", "register_buffer", "(", "'fake_label'", ",", "torch", ".", "tensor", "(", "target_fake_label", ")", ")", "\n", "\n", "if", "type", "==", "'nsgan'", ":", "\n", "            ", "self", ".", "criterion", "=", "nn", ".", "BCELoss", "(", ")", "\n", "#change to BCELoss + 1e-10", "\n", "\n", "\n", "", "elif", "type", "==", "'lsgan'", ":", "\n", "            ", "self", ".", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "", "elif", "type", "==", "'hinge'", ":", "\n", "            ", "self", ".", "criterion", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.AdversarialLoss.__call__": [[34, 47], ["loss.AdversarialLoss.AdversarialLoss.criterion", "loss.AdversarialLoss.AdversarialLoss.criterion().mean", "loss.AdversarialLoss.AdversarialLoss.criterion"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "outputs", ",", "is_real", ",", "is_disc", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "type", "==", "'hinge'", ":", "\n", "            ", "if", "is_disc", ":", "\n", "                ", "if", "is_real", ":", "\n", "                    ", "outputs", "=", "-", "outputs", "\n", "", "return", "self", ".", "criterion", "(", "1", "+", "outputs", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "-", "outputs", ")", ".", "mean", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "labels", "=", "(", "self", ".", "real_label", "if", "is_real", "else", "self", ".", "fake_label", ")", ".", "expand_as", "(", "outputs", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "outputs", ",", "labels", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.StyleLoss.__init__": [[56, 60], ["torch.Module.__init__", "loss.StyleLoss.add_module", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "loss.VGG19"], "methods", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.Progbar.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "StyleLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'vgg'", ",", "VGG19", "(", ")", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.StyleLoss.compute_gram": [[61, 68], ["x.size", "x.view", "x.view.transpose", "x.view.bmm"], "methods", ["None"], ["", "def", "compute_gram", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "ch", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "f", "=", "x", ".", "view", "(", "b", ",", "ch", ",", "w", "*", "h", ")", "\n", "f_T", "=", "f", ".", "transpose", "(", "1", ",", "2", ")", "\n", "G", "=", "f", ".", "bmm", "(", "f_T", ")", "/", "(", "h", "*", "w", "*", "ch", ")", "\n", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.StyleLoss.__call__": [[69, 81], ["loss.StyleLoss.criterion", "loss.StyleLoss.criterion", "loss.StyleLoss.criterion", "loss.StyleLoss.criterion", "loss.StyleLoss.vgg", "loss.StyleLoss.vgg", "loss.StyleLoss.compute_gram", "loss.StyleLoss.compute_gram", "loss.StyleLoss.compute_gram", "loss.StyleLoss.compute_gram", "loss.StyleLoss.compute_gram", "loss.StyleLoss.compute_gram", "loss.StyleLoss.compute_gram", "loss.StyleLoss.compute_gram"], "methods", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.StyleLoss.compute_gram", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.StyleLoss.compute_gram"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# Compute features", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "\n", "# Compute loss", "\n", "style_loss", "=", "0.0", "\n", "style_loss", "+=", "self", ".", "criterion", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "'relu2_2'", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "'relu2_2'", "]", ")", ")", "\n", "style_loss", "+=", "self", ".", "criterion", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "'relu3_4'", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "'relu3_4'", "]", ")", ")", "\n", "style_loss", "+=", "self", ".", "criterion", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "'relu4_4'", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "'relu4_4'", "]", ")", ")", "\n", "style_loss", "+=", "self", ".", "criterion", "(", "self", ".", "compute_gram", "(", "x_vgg", "[", "'relu5_2'", "]", ")", ",", "self", ".", "compute_gram", "(", "y_vgg", "[", "'relu5_2'", "]", ")", ")", "\n", "\n", "return", "style_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.PerceptualLoss.__init__": [[91, 96], ["torch.Module.__init__", "loss.PerceptualLoss.add_module", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "loss.VGG19"], "methods", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.Progbar.__init__"], ["def", "__init__", "(", "self", ",", "weights", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ")", ":", "\n", "        ", "super", "(", "PerceptualLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'vgg'", ",", "VGG19", "(", ")", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.PerceptualLoss.__call__": [[97, 110], ["loss.PerceptualLoss.vgg", "loss.PerceptualLoss.vgg", "loss.PerceptualLoss.criterion", "loss.PerceptualLoss.criterion", "loss.PerceptualLoss.criterion", "loss.PerceptualLoss.criterion", "loss.PerceptualLoss.criterion"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# Compute features", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "\n", "content_loss", "=", "0.0", "\n", "content_loss", "+=", "self", ".", "weights", "[", "0", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu1_1'", "]", ",", "y_vgg", "[", "'relu1_1'", "]", ")", "\n", "content_loss", "+=", "self", ".", "weights", "[", "1", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu2_1'", "]", ",", "y_vgg", "[", "'relu2_1'", "]", ")", "\n", "content_loss", "+=", "self", ".", "weights", "[", "2", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu3_1'", "]", ",", "y_vgg", "[", "'relu3_1'", "]", ")", "\n", "content_loss", "+=", "self", ".", "weights", "[", "3", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu4_1'", "]", ",", "y_vgg", "[", "'relu4_1'", "]", ")", "\n", "content_loss", "+=", "self", ".", "weights", "[", "4", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "'relu5_1'", "]", ",", "y_vgg", "[", "'relu5_1'", "]", ")", "\n", "\n", "\n", "return", "content_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.VGG19.__init__": [[114, 189], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "loss.VGG19.parameters", "torchvision.vgg19", "loss.VGG19.relu1_1.add_module", "loss.VGG19.relu1_2.add_module", "loss.VGG19.relu2_1.add_module", "loss.VGG19.relu2_2.add_module", "loss.VGG19.relu3_1.add_module", "loss.VGG19.relu3_2.add_module", "loss.VGG19.relu3_2.add_module", "loss.VGG19.relu3_4.add_module", "loss.VGG19.relu4_1.add_module", "loss.VGG19.relu4_2.add_module", "loss.VGG19.relu4_3.add_module", "loss.VGG19.relu4_4.add_module", "loss.VGG19.relu5_1.add_module", "loss.VGG19.relu5_2.add_module", "loss.VGG19.relu5_3.add_module", "loss.VGG19.relu5_4.add_module", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.Progbar.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "relu1_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu1_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu2_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu2_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu3_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu3_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu3_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu3_4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu4_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu4_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu4_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu4_4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu5_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu5_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu5_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu5_4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "relu1_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "2", ",", "4", ")", ":", "\n", "            ", "self", ".", "relu1_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "4", ",", "7", ")", ":", "\n", "            ", "self", ".", "relu2_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "7", ",", "9", ")", ":", "\n", "            ", "self", ".", "relu2_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "9", ",", "12", ")", ":", "\n", "            ", "self", ".", "relu3_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "12", ",", "14", ")", ":", "\n", "            ", "self", ".", "relu3_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "14", ",", "16", ")", ":", "\n", "            ", "self", ".", "relu3_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "16", ",", "18", ")", ":", "\n", "            ", "self", ".", "relu3_4", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "18", ",", "21", ")", ":", "\n", "            ", "self", ".", "relu4_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "21", ",", "23", ")", ":", "\n", "            ", "self", ".", "relu4_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "23", ",", "25", ")", ":", "\n", "            ", "self", ".", "relu4_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "25", ",", "27", ")", ":", "\n", "            ", "self", ".", "relu4_4", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "27", ",", "30", ")", ":", "\n", "            ", "self", ".", "relu5_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "30", ",", "32", ")", ":", "\n", "            ", "self", ".", "relu5_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "32", ",", "34", ")", ":", "\n", "            ", "self", ".", "relu5_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "34", ",", "36", ")", ":", "\n", "            ", "self", ".", "relu5_4", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "# don't need the gradients, just want the features", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.loss.VGG19.forward": [[190, 235], ["loss.VGG19.relu1_1", "loss.VGG19.relu1_2", "loss.VGG19.relu2_1", "loss.VGG19.relu2_2", "loss.VGG19.relu3_1", "loss.VGG19.relu3_2", "loss.VGG19.relu3_3", "loss.VGG19.relu3_4", "loss.VGG19.relu4_1", "loss.VGG19.relu4_2", "loss.VGG19.relu4_3", "loss.VGG19.relu4_4", "loss.VGG19.relu5_1", "loss.VGG19.relu5_2", "loss.VGG19.relu5_3", "loss.VGG19.relu5_4"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "relu1_1", "=", "self", ".", "relu1_1", "(", "x", ")", "\n", "relu1_2", "=", "self", ".", "relu1_2", "(", "relu1_1", ")", "\n", "\n", "relu2_1", "=", "self", ".", "relu2_1", "(", "relu1_2", ")", "\n", "relu2_2", "=", "self", ".", "relu2_2", "(", "relu2_1", ")", "\n", "\n", "relu3_1", "=", "self", ".", "relu3_1", "(", "relu2_2", ")", "\n", "relu3_2", "=", "self", ".", "relu3_2", "(", "relu3_1", ")", "\n", "relu3_3", "=", "self", ".", "relu3_3", "(", "relu3_2", ")", "\n", "relu3_4", "=", "self", ".", "relu3_4", "(", "relu3_3", ")", "\n", "\n", "relu4_1", "=", "self", ".", "relu4_1", "(", "relu3_4", ")", "\n", "relu4_2", "=", "self", ".", "relu4_2", "(", "relu4_1", ")", "\n", "relu4_3", "=", "self", ".", "relu4_3", "(", "relu4_2", ")", "\n", "relu4_4", "=", "self", ".", "relu4_4", "(", "relu4_3", ")", "\n", "\n", "relu5_1", "=", "self", ".", "relu5_1", "(", "relu4_4", ")", "\n", "relu5_2", "=", "self", ".", "relu5_2", "(", "relu5_1", ")", "\n", "relu5_3", "=", "self", ".", "relu5_3", "(", "relu5_2", ")", "\n", "relu5_4", "=", "self", ".", "relu5_4", "(", "relu5_3", ")", "\n", "\n", "out", "=", "{", "\n", "'relu1_1'", ":", "relu1_1", ",", "\n", "'relu1_2'", ":", "relu1_2", ",", "\n", "\n", "'relu2_1'", ":", "relu2_1", ",", "\n", "'relu2_2'", ":", "relu2_2", ",", "\n", "\n", "'relu3_1'", ":", "relu3_1", ",", "\n", "'relu3_2'", ":", "relu3_2", ",", "\n", "'relu3_3'", ":", "relu3_3", ",", "\n", "'relu3_4'", ":", "relu3_4", ",", "\n", "\n", "'relu4_1'", ":", "relu4_1", ",", "\n", "'relu4_2'", ":", "relu4_2", ",", "\n", "'relu4_3'", ":", "relu4_3", ",", "\n", "'relu4_4'", ":", "relu4_4", ",", "\n", "\n", "'relu5_1'", ":", "relu5_1", ",", "\n", "'relu5_2'", ":", "relu5_2", ",", "\n", "'relu5_3'", ":", "relu5_3", ",", "\n", "'relu5_4'", ":", "relu5_4", ",", "\n", "}", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.Progbar.__init__": [[64, 87], ["time.time", "set", "set", "hasattr", "sys.stdout.isatty"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "target", ",", "width", "=", "25", ",", "verbose", "=", "1", ",", "interval", "=", "0.05", ",", "\n", "stateful_metrics", "=", "None", ")", ":", "\n", "        ", "self", ".", "target", "=", "target", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "interval", "=", "interval", "\n", "if", "stateful_metrics", ":", "\n", "            ", "self", ".", "stateful_metrics", "=", "set", "(", "stateful_metrics", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "stateful_metrics", "=", "set", "(", ")", "\n", "\n", "", "self", ".", "_dynamic_display", "=", "(", "(", "hasattr", "(", "sys", ".", "stdout", ",", "'isatty'", ")", "and", "\n", "sys", ".", "stdout", ".", "isatty", "(", ")", ")", "or", "\n", "'ipykernel'", "in", "sys", ".", "modules", "or", "\n", "'posix'", "in", "sys", ".", "modules", ")", "\n", "self", ".", "_total_width", "=", "0", "\n", "self", ".", "_seen_so_far", "=", "0", "\n", "# We use a dict + list to avoid garbage collection", "\n", "# issues found in OrderedDict", "\n", "self", ".", "_values", "=", "{", "}", "\n", "self", ".", "_values_order", "=", "[", "]", "\n", "self", ".", "_start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_last_update", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.Progbar.update": [[88, 207], ["time.time", "len", "sys.stdout.write", "len", "sys.stdout.write", "sys.stdout.flush", "util.Progbar._values_order.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "int", "isinstance", "int", "float", "numpy.mean", "sys.stdout.write", "sys.stdout.flush", "numpy.floor", "abs", "numpy.mean", "numpy.log10", "max", "max"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "current", ",", "values", "=", "None", ")", ":", "\n", "        ", "\"\"\"Updates the progress bar.\n        Arguments:\n            current: Index of current step.\n            values: List of tuples:\n                `(name, value_for_last_step)`.\n                If `name` is in `stateful_metrics`,\n                `value_for_last_step` will be displayed as-is.\n                Else, an average of the metric over time will be displayed.\n        \"\"\"", "\n", "values", "=", "values", "or", "[", "]", "\n", "for", "k", ",", "v", "in", "values", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "_values_order", ":", "\n", "                ", "self", ".", "_values_order", ".", "append", "(", "k", ")", "\n", "", "if", "k", "not", "in", "self", ".", "stateful_metrics", ":", "\n", "                ", "if", "k", "not", "in", "self", ".", "_values", ":", "\n", "                    ", "self", ".", "_values", "[", "k", "]", "=", "[", "v", "*", "(", "current", "-", "self", ".", "_seen_so_far", ")", ",", "\n", "current", "-", "self", ".", "_seen_so_far", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_values", "[", "k", "]", "[", "0", "]", "+=", "v", "*", "(", "current", "-", "self", ".", "_seen_so_far", ")", "\n", "self", ".", "_values", "[", "k", "]", "[", "1", "]", "+=", "(", "current", "-", "self", ".", "_seen_so_far", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "_values", "[", "k", "]", "=", "v", "\n", "", "", "self", ".", "_seen_so_far", "=", "current", "\n", "\n", "now", "=", "time", ".", "time", "(", ")", "\n", "info", "=", "' - %.0fs'", "%", "(", "now", "-", "self", ".", "_start", ")", "\n", "if", "self", ".", "verbose", "==", "1", ":", "\n", "            ", "if", "(", "now", "-", "self", ".", "_last_update", "<", "self", ".", "interval", "and", "\n", "self", ".", "target", "is", "not", "None", "and", "current", "<", "self", ".", "target", ")", ":", "\n", "                ", "return", "\n", "\n", "", "prev_total_width", "=", "self", ".", "_total_width", "\n", "if", "self", ".", "_dynamic_display", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", "*", "prev_total_width", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "if", "self", ".", "target", "is", "not", "None", ":", "\n", "                ", "numdigits", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "log10", "(", "self", ".", "target", ")", ")", ")", "+", "1", "\n", "barstr", "=", "'%%%dd/%d ['", "%", "(", "numdigits", ",", "self", ".", "target", ")", "\n", "bar", "=", "barstr", "%", "current", "\n", "prog", "=", "float", "(", "current", ")", "/", "self", ".", "target", "\n", "prog_width", "=", "int", "(", "self", ".", "width", "*", "prog", ")", "\n", "if", "prog_width", ">", "0", ":", "\n", "                    ", "bar", "+=", "(", "'='", "*", "(", "prog_width", "-", "1", ")", ")", "\n", "if", "current", "<", "self", ".", "target", ":", "\n", "                        ", "bar", "+=", "'>'", "\n", "", "else", ":", "\n", "                        ", "bar", "+=", "'='", "\n", "", "", "bar", "+=", "(", "'.'", "*", "(", "self", ".", "width", "-", "prog_width", ")", ")", "\n", "bar", "+=", "']'", "\n", "", "else", ":", "\n", "                ", "bar", "=", "'%7d/Unknown'", "%", "current", "\n", "\n", "", "self", ".", "_total_width", "=", "len", "(", "bar", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "bar", ")", "\n", "\n", "if", "current", ":", "\n", "                ", "time_per_unit", "=", "(", "now", "-", "self", ".", "_start", ")", "/", "current", "\n", "", "else", ":", "\n", "                ", "time_per_unit", "=", "0", "\n", "", "if", "self", ".", "target", "is", "not", "None", "and", "current", "<", "self", ".", "target", ":", "\n", "                ", "eta", "=", "time_per_unit", "*", "(", "self", ".", "target", "-", "current", ")", "\n", "if", "eta", ">", "3600", ":", "\n", "                    ", "eta_format", "=", "'%d:%02d:%02d'", "%", "(", "eta", "//", "3600", ",", "\n", "(", "eta", "%", "3600", ")", "//", "60", ",", "\n", "eta", "%", "60", ")", "\n", "", "elif", "eta", ">", "60", ":", "\n", "                    ", "eta_format", "=", "'%d:%02d'", "%", "(", "eta", "//", "60", ",", "eta", "%", "60", ")", "\n", "", "else", ":", "\n", "                    ", "eta_format", "=", "'%ds'", "%", "eta", "\n", "\n", "", "info", "=", "' - ETA: %s'", "%", "eta_format", "\n", "", "else", ":", "\n", "                ", "if", "time_per_unit", ">=", "1", ":", "\n", "                    ", "info", "+=", "' %.0fs/step'", "%", "time_per_unit", "\n", "", "elif", "time_per_unit", ">=", "1e-3", ":", "\n", "                    ", "info", "+=", "' %.0fms/step'", "%", "(", "time_per_unit", "*", "1e3", ")", "\n", "", "else", ":", "\n", "                    ", "info", "+=", "' %.0fus/step'", "%", "(", "time_per_unit", "*", "1e6", ")", "\n", "\n", "", "", "for", "k", "in", "self", ".", "_values_order", ":", "\n", "                ", "info", "+=", "' - %s:'", "%", "k", "\n", "if", "isinstance", "(", "self", ".", "_values", "[", "k", "]", ",", "list", ")", ":", "\n", "                    ", "avg", "=", "np", ".", "mean", "(", "self", ".", "_values", "[", "k", "]", "[", "0", "]", "/", "max", "(", "1", ",", "self", ".", "_values", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "if", "abs", "(", "avg", ")", ">", "1e-3", ":", "\n", "                        ", "info", "+=", "' %.4f'", "%", "avg", "\n", "", "else", ":", "\n", "                        ", "info", "+=", "' %.4e'", "%", "avg", "\n", "", "", "else", ":", "\n", "                    ", "info", "+=", "' %s'", "%", "self", ".", "_values", "[", "k", "]", "\n", "\n", "", "", "self", ".", "_total_width", "+=", "len", "(", "info", ")", "\n", "if", "prev_total_width", ">", "self", ".", "_total_width", ":", "\n", "                ", "info", "+=", "(", "' '", "*", "(", "prev_total_width", "-", "self", ".", "_total_width", ")", ")", "\n", "\n", "", "if", "self", ".", "target", "is", "not", "None", "and", "current", ">=", "self", ".", "target", ":", "\n", "                ", "info", "+=", "'\\n'", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "info", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "elif", "self", ".", "verbose", "==", "2", ":", "\n", "            ", "if", "self", ".", "target", "is", "None", "or", "current", ">=", "self", ".", "target", ":", "\n", "                ", "for", "k", "in", "self", ".", "_values_order", ":", "\n", "                    ", "info", "+=", "' - %s:'", "%", "k", "\n", "avg", "=", "np", ".", "mean", "(", "self", ".", "_values", "[", "k", "]", "[", "0", "]", "/", "max", "(", "1", ",", "self", ".", "_values", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "if", "avg", ">", "1e-3", ":", "\n", "                        ", "info", "+=", "' %.4f'", "%", "avg", "\n", "", "else", ":", "\n", "                        ", "info", "+=", "' %.4e'", "%", "avg", "\n", "", "", "info", "+=", "'\\n'", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "info", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "self", ".", "_last_update", "=", "now", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.Progbar.add": [[208, 210], ["util.Progbar.update"], "methods", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.Progbar.update"], ["", "def", "add", "(", "self", ",", "n", ",", "values", "=", "None", ")", ":", "\n", "        ", "self", ".", "update", "(", "self", ".", "_seen_so_far", "+", "n", ",", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.is_image_file": [[8, 10], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "\".png\"", ",", "\".jpg\"", ",", "\".jpeg\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.load_img": [[12, 16], ["scipy.misc.imread", "scipy.misc.imresize"], "function", ["None"], ["", "def", "load_img", "(", "filepath", ")", ":", "\n", "    ", "img", "=", "imread", "(", "filepath", ")", "\n", "img", "=", "imresize", "(", "img", ",", "(", "256", ",", "256", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.save_img": [[18, 25], ["image_tensor.float().numpy", "image_numpy.astype.astype", "PIL.Image.fromarray", "Image.fromarray.save", "print", "image_tensor.float", "numpy.transpose"], "function", ["None"], ["", "def", "save_img", "(", "image_tensor", ",", "filename", ")", ":", "\n", "    ", "image_numpy", "=", "image_tensor", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "image_numpy", "=", "image_numpy", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "filename", ")", "\n", "print", "(", "\"Image saved as {}\"", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.postprocess": [[26, 31], ["img.permute.permute", "img.permute.int"], "function", ["None"], ["", "def", "postprocess", "(", "img", ")", ":", "\n", "# [0, 1] => [0, 255]", "\n", "    ", "img", "=", "img", "*", "255.0", "\n", "img", "=", "img", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "return", "img", ".", "int", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.stitch_images": [[32, 50], ["PIL.Image.new", "range", "len", "len", "range", "int", "len", "numpy.array().astype().squeeze", "PIL.Image.fromarray", "Image.new.paste", "int", "int", "int", "numpy.array().astype", "len", "numpy.array", "[].cpu"], "function", ["None"], ["", "def", "stitch_images", "(", "inputs", ",", "*", "outputs", ",", "img_per_row", "=", "2", ")", ":", "\n", "    ", "gap", "=", "5", "\n", "columns", "=", "len", "(", "outputs", ")", "+", "1", "\n", "\n", "width", ",", "height", "=", "inputs", "[", "0", "]", "[", ":", ",", ":", ",", "0", "]", ".", "shape", "\n", "img", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "width", "*", "img_per_row", "*", "columns", "+", "gap", "*", "(", "img_per_row", "-", "1", ")", ",", "height", "*", "int", "(", "len", "(", "inputs", ")", "/", "img_per_row", ")", ")", ")", "\n", "images", "=", "[", "inputs", ",", "*", "outputs", "]", "\n", "\n", "for", "ix", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "        ", "xoffset", "=", "int", "(", "ix", "%", "img_per_row", ")", "*", "width", "*", "columns", "+", "int", "(", "ix", "%", "img_per_row", ")", "*", "gap", "\n", "yoffset", "=", "int", "(", "ix", "/", "img_per_row", ")", "*", "height", "\n", "\n", "for", "cat", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "            ", "im", "=", "np", ".", "array", "(", "(", "images", "[", "cat", "]", "[", "ix", "]", ")", ".", "cpu", "(", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", ".", "squeeze", "(", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "im", ")", "\n", "img", ".", "paste", "(", "im", ",", "(", "xoffset", "+", "cat", "*", "width", ",", "yoffset", ")", ")", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.load": [[211, 217], ["torch.load", "torch.load", "netG.load_state_dict", "netD.load_state_dict"], "function", ["home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.load", "home.repos.pwc.inspect_result.Harry-Thasarathan_TCVC.src.util.load"], ["", "", "def", "load", "(", "checkpoint_path_G", ",", "checkpoint_path_D", ",", "netG", ",", "netD", ")", ":", "\n", "    ", "checkpoint_G", "=", "torch", ".", "load", "(", "checkpoint_path_G", ")", "\n", "checkpoint_D", "=", "torch", ".", "load", "(", "checkpoint_path_D", ")", "\n", "netG", ".", "load_state_dict", "(", "checkpoint_G", "[", "'generator'", "]", ")", "\n", "netD", ".", "load_state_dict", "(", "checkpoint_D", "[", "'discriminator'", "]", ")", "\n", "return", "netG", ",", "netD", ",", "optimizerG", ",", "optimizerD", "", "", ""]]}