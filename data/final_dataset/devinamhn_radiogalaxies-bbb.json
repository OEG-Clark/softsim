{"home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.uncertainty.entropy_MI": [[8, 23], ["numpy.sum", "numpy.log", "numpy.log", "numpy.sum", "numpy.log", "numpy.log", "numpy.sum", "numpy.sum", "numpy.log", "numpy.sum", "numpy.sum", "numpy.log"], "function", ["None"], ["def", "entropy_MI", "(", "softmax", ",", "samples_iter", ")", ":", "\n", "\n", "    ", "class_0", "=", "softmax", "[", ":", ",", "0", "]", "\n", "class_1", "=", "softmax", "[", ":", ",", "1", "]", "\n", "#biased estimator of predictive entropy, bias will reduce as samples_iter is increased", "\n", "entropy", "=", "-", "(", "(", "np", ".", "sum", "(", "class_0", ")", "/", "samples_iter", ")", "*", "np", ".", "log", "(", "np", ".", "sum", "(", "class_0", ")", "/", "samples_iter", ")", "+", "(", "np", ".", "sum", "(", "class_1", ")", "/", "samples_iter", ")", "*", "np", ".", "log", "(", "np", ".", "sum", "(", "class_1", ")", "/", "samples_iter", ")", ")", "\n", "\n", "mutual_info", "=", "entropy", "+", "np", ".", "sum", "(", "class_0", "*", "np", ".", "log", "(", "class_0", ")", ")", "/", "samples_iter", "+", "np", ".", "sum", "(", "class_1", "*", "np", ".", "log", "(", "class_1", ")", ")", "/", "samples_iter", "\n", "\n", "#entropy of a single pass", "\n", "class0", "=", "softmax", "[", ":", ",", "0", "]", "[", "0", "]", "\n", "class1", "=", "softmax", "[", ":", ",", "1", "]", "[", "0", "]", "\n", "entropy_singlepass", "=", "-", "(", "class0", "*", "np", ".", "log", "(", "class0", ")", "+", "class1", "*", "np", ".", "log", "(", "class1", ")", ")", "\n", "#print(\"Entropy of a single pass:\", entropy_singlepass)", "\n", "return", "entropy", ",", "mutual_info", ",", "entropy_singlepass", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.uncertainty.overlapping": [[24, 60], ["numpy.linspace", "len", "numpy.zeros", "range", "len", "numpy.zeros", "range", "numpy.zeros", "numpy.minimum", "range", "range", "numpy.sum", "numpy.sqrt", "numpy.exp", "numpy.exp"], "function", ["None"], ["", "def", "overlapping", "(", "x", ",", "y", ",", "beta", "=", "0.1", ")", ":", "\n", "\n", "    ", "n_z", "=", "100", "#100", "\n", "z", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "n_z", ")", "\n", "dz", "=", "1.", "/", "n_z", "\n", "\n", "norm", "=", "1.", "/", "(", "beta", "*", "np", ".", "sqrt", "(", "2", "*", "np", ".", "pi", ")", ")", "\n", "\n", "n_x", "=", "len", "(", "x", ")", "\n", "f_x", "=", "np", ".", "zeros", "(", "n_z", ")", "\n", "for", "i", "in", "range", "(", "n_z", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n_x", ")", ":", "\n", "            ", "f_x", "[", "i", "]", "+=", "norm", "*", "np", ".", "exp", "(", "-", "0.5", "*", "(", "z", "[", "i", "]", "-", "x", "[", "j", "]", ")", "**", "2", "/", "beta", "**", "2", ")", "\n", "", "f_x", "[", "i", "]", "/=", "n_x", "\n", "\n", "\n", "", "n_y", "=", "len", "(", "y", ")", "\n", "f_y", "=", "np", ".", "zeros", "(", "n_z", ")", "\n", "for", "i", "in", "range", "(", "n_z", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n_y", ")", ":", "\n", "            ", "f_y", "[", "i", "]", "+=", "norm", "*", "np", ".", "exp", "(", "-", "0.5", "*", "(", "z", "[", "i", "]", "-", "y", "[", "j", "]", ")", "**", "2", "/", "beta", "**", "2", ")", "\n", "\n", "", "f_y", "[", "i", "]", "/=", "n_y", "\n", "\n", "\n", "", "eta_z", "=", "np", ".", "zeros", "(", "n_z", ")", "\n", "eta_z", "=", "np", ".", "minimum", "(", "f_x", ",", "f_y", ")", "\n", "\n", "#pl.subplot(111)", "\n", "#pl.plot(z, f_x, label=r\"$f_x$\")", "\n", "#pl.plot(z, f_y, label=r\"$f_y$\")", "\n", "#pl.plot(z, eta_z, label=r\"$\\eta_z$\")", "\n", "#pl.legend()", "\n", "#pl.show()", "\n", "\n", "return", "np", ".", "sum", "(", "eta_z", ")", "*", "dz", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.uncertainty.GMM_logits": [[61, 107], ["sklearn.mixture.GaussianMixture", "uncertainty.GMM_logits.plot_gmm"], "function", ["None"], ["", "def", "GMM_logits", "(", "y_logits", ",", "n_components", ")", ":", "\n", "\n", "    ", "def", "draw_ellipse", "(", "position", ",", "covariance", ",", "ax", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Draw an ellipse with a given position and covariance\"\"\"", "\n", "ax", "=", "ax", "or", "plt", ".", "gca", "(", ")", "\n", "\n", "# Convert covariance to principal axes", "\n", "if", "covariance", ".", "shape", "==", "(", "2", ",", "2", ")", ":", "\n", "            ", "U", ",", "s", ",", "Vt", "=", "np", ".", "linalg", ".", "svd", "(", "covariance", ")", "\n", "angle", "=", "np", ".", "degrees", "(", "np", ".", "arctan2", "(", "U", "[", "1", ",", "0", "]", ",", "U", "[", "0", ",", "0", "]", ")", ")", "\n", "width", ",", "height", "=", "2", "*", "np", ".", "sqrt", "(", "s", ")", "\n", "", "else", ":", "\n", "            ", "angle", "=", "0", "\n", "width", ",", "height", "=", "2", "*", "np", ".", "sqrt", "(", "covariance", ")", "\n", "\n", "# Draw the Ellipse", "\n", "", "for", "nsig", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "            ", "ax", ".", "add_patch", "(", "Ellipse", "(", "position", ",", "nsig", "*", "width", ",", "nsig", "*", "height", ",", "\n", "angle", ",", "**", "kwargs", ")", ")", "\n", "\n", "", "", "def", "plot_gmm", "(", "gmm", ",", "X", ",", "label", "=", "True", ",", "ax", "=", "None", ")", ":", "\n", "        ", "ax", "=", "ax", "or", "plt", ".", "gca", "(", ")", "\n", "labels", "=", "gmm", ".", "fit_predict", "(", "X", ")", "\n", "if", "label", ":", "\n", "#ax.set_facecolor('white')", "\n", "\n", "            ", "ax", ".", "scatter", "(", "X", "[", ":", ",", "0", "]", ",", "X", "[", ":", ",", "1", "]", ",", "c", "=", "labels", ",", "s", "=", "10", ",", "cmap", "=", "'viridis'", ",", "zorder", "=", "2", ")", "\n", "ax", ".", "set_xlabel", "(", "\"class0 (FR I) logits\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"class1 (FR II) logits\"", ")", "\n", "#ax.set_title(\"Uncertain Classification\")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "scatter", "(", "X", "[", ":", ",", "0", "]", ",", "X", "[", ":", ",", "1", "]", ",", "s", "=", "10", ",", "zorder", "=", "2", ")", "\n", "\n", "", "ax", ".", "axis", "(", "'equal'", ")", "\n", "#print(\"Means:\", gmm.means_)", "\n", "print", "(", "\"Covariances:\"", ",", "gmm", ".", "covariances_", ")", "\n", "covs", "=", "gmm", ".", "covariances_", "\n", "w_factor", "=", "0.2", "/", "gmm", ".", "weights_", ".", "max", "(", ")", "\n", "for", "pos", ",", "covar", ",", "w", "in", "zip", "(", "gmm", ".", "means_", ",", "gmm", ".", "covariances_", ",", "gmm", ".", "weights_", ")", ":", "\n", "            ", "draw_ellipse", "(", "pos", ",", "covar", ",", "alpha", "=", "w", "*", "w_factor", ")", "\n", "\n", "", "return", "covs", "\n", "#BayesianGaussianMixture?", "\n", "", "gmm", "=", "GaussianMixture", "(", "n_components", ",", "covariance_type", "=", "'full'", ",", "random_state", "=", "None", ")", "\n", "covs", "=", "plot_gmm", "(", "gmm", ",", "y_logits", ")", "\n", "return", "covs", "", "", ""]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_BBB.__init__": [[11, 18], ["torch.Module.__init__", "layers.Linear_BBB", "layers.Linear_BBB", "layers.Linear_BBB"], "methods", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "hidden_dim", ",", "out_dim", ",", "prior_var", ",", "prior_type", ",", "imsize", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "h1", "=", "Linear_BBB", "(", "in_dim", ",", "hidden_dim", ",", "prior_var", ",", "prior_type", "=", "prior_type", ")", "\n", "self", ".", "h2", "=", "Linear_BBB", "(", "hidden_dim", ",", "hidden_dim", ",", "prior_var", ",", "prior_type", "=", "prior_type", ")", "\n", "self", ".", "out", "=", "Linear_BBB", "(", "hidden_dim", ",", "out_dim", ",", "prior_var", ",", "prior_type", "=", "prior_type", ")", "\n", "self", ".", "imsize", "=", "imsize", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_BBB.forward": [[19, 39], ["torch.log_softmax.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.Classifier_BBB.out", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "models.Classifier_BBB.h1", "models.Classifier_BBB.h2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "logit", "=", "False", ")", ":", "\n", "        ", "'''\n        #MNIST\n        x = x.view(-1, 28*28) #flatten\n        \n        #Mirabest\n        #x = x.view(-1, 150*150)\n        '''", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "imsize", "*", "self", ".", "imsize", ")", "\n", "x", "=", "torch", ".", "relu", "(", "self", ".", "h1", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "relu", "(", "self", ".", "h2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "out", "(", "x", ")", "\n", "logits", "=", "x", "\n", "x", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "if", "(", "logit", "==", "True", ")", ":", "\n", "            ", "return", "x", ",", "logits", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_BBB.log_prior": [[40, 42], ["None"], "methods", ["None"], ["", "def", "log_prior", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "h1", ".", "log_prior", "+", "self", ".", "h2", ".", "log_prior", "+", "self", ".", "out", ".", "log_prior", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_BBB.log_post": [[43, 45], ["None"], "methods", ["None"], ["", "def", "log_post", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "h1", ".", "log_post", "+", "self", ".", "h2", ".", "log_post", "+", "self", ".", "out", ".", "log_post", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_BBB.log_like": [[46, 49], ["torch.nll_loss", "torch.nll_loss", "torch.nll_loss"], "methods", ["None"], ["", "def", "log_like", "(", "self", ",", "outputs", ",", "target", ",", "reduction", ")", ":", "\n", "#log P(D|w)", "\n", "        ", "return", "F", ".", "nll_loss", "(", "outputs", ",", "target", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_BBB.sample_elbo": [[51, 98], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "models.Classifier_BBB.log_prior", "models.Classifier_BBB.log_post", "models.Classifier_BBB.log_like", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models.Classifier_BBB.", "models.Classifier_BBB."], "methods", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_ConvBBB.log_prior", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_ConvBBB.log_post", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_ConvBBB.log_like"], ["", "def", "sample_elbo", "(", "self", ",", "input", ",", "target", ",", "samples", ",", "batch", ",", "num_batches", ",", "samples_batch", ",", "T", "=", "1.0", ",", "burnin", "=", "None", ",", "reduction", "=", "\"sum\"", ",", "logit", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "outputs", "=", "torch", ".", "zeros", "(", "samples", ",", "target", ".", "shape", "[", "0", "]", ",", "self", ".", "out_dim", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "log_priors", "=", "torch", ".", "zeros", "(", "samples", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "log_posts", "=", "torch", ".", "zeros", "(", "samples", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "log_likes", "=", "torch", ".", "zeros", "(", "samples", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "for", "i", "in", "range", "(", "samples", ")", ":", "\n", "\n", "            ", "if", "(", "logit", "==", "True", ")", ":", "\n", "                ", "outputs", "[", "i", "]", ",", "logits", "=", "self", "(", "input", ",", "logit", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "                ", "outputs", "[", "i", "]", "=", "self", "(", "input", ",", "logit", "=", "False", ")", "\n", "\n", "\n", "", "log_priors", "[", "i", "]", "=", "self", ".", "log_prior", "(", ")", "\n", "log_posts", "[", "i", "]", "=", "self", ".", "log_post", "(", ")", "\n", "log_likes", "[", "i", "]", "=", "self", ".", "log_like", "(", "outputs", "[", "i", ",", ":", ",", ":", "]", ",", "target", ",", "reduction", ")", "\n", "\n", "# the mean of a sum is the sum of the means:", "\n", "", "log_prior", "=", "log_priors", ".", "mean", "(", ")", "\n", "log_post", "=", "log_posts", ".", "mean", "(", ")", "\n", "log_like", "=", "log_likes", ".", "mean", "(", ")", "\n", "\n", "if", "burnin", "==", "\"blundell\"", ":", "\n", "            ", "frac", "=", "2", "**", "(", "num_batches", "-", "(", "batch", "+", "1", ")", ")", "/", "2", "**", "(", "num_batches", "-", "1", ")", "\n", "", "elif", "burnin", "==", "None", ":", "\n", "            ", "if", "reduction", "==", "\"sum\"", ":", "\n", "                ", "frac", "=", "T", "/", "(", "num_batches", ")", "# 1./num_batches #", "\n", "", "elif", "reduction", "==", "\"mean\"", ":", "\n", "                ", "frac", "=", "T", "/", "(", "num_batches", "*", "samples_batch", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "\n", "\n", "", "", "complexity_cost", "=", "frac", "*", "(", "log_post", "-", "log_prior", ")", "\n", "loss", "=", "complexity_cost", "+", "log_like", "#or likelihood_cost", "\n", "\n", "if", "(", "logit", "==", "True", ")", ":", "\n", "            ", "return", "loss", ",", "outputs", ",", "complexity_cost", ",", "log_like", ",", "logits", "\n", "", "else", ":", "\n", "            ", "return", "loss", ",", "outputs", ",", "complexity_cost", ",", "log_like", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_ConvBBB.__init__": [[103, 118], ["torch.Module.__init__", "int", "layers.Conv_BBB", "layers.Conv_BBB", "layers.Conv_BBB", "layers.Conv_BBB", "layers.Linear_BBB", "layers.Linear_BBB", "layers.Linear_BBB"], "methods", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "kernel_size", ",", "prior_var", ",", "prior_type", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "z", "=", "0.5", "*", "(", "150", "+", "1", "-", "2", ")", "\n", "z", "=", "int", "(", "0.5", "*", "(", "z", "-", "2", ")", ")", "\n", "\n", "\n", "self", ".", "conv1", "=", "Conv_BBB", "(", "in_ch", ",", "6", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "prior_var", "=", "prior_var", ",", "prior_type", "=", "prior_type", ")", "\n", "self", ".", "conv2", "=", "Conv_BBB", "(", "6", ",", "16", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "prior_var", "=", "prior_var", ",", "prior_type", "=", "prior_type", ")", "\n", "self", ".", "conv3", "=", "Conv_BBB", "(", "16", ",", "26", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "prior_var", "=", "prior_var", ",", "prior_type", "=", "prior_type", ")", "\n", "self", ".", "conv4", "=", "Conv_BBB", "(", "26", ",", "32", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "prior_var", "=", "prior_var", ",", "prior_type", "=", "prior_type", ")", "\n", "self", ".", "h1", "=", "Linear_BBB", "(", "7", "*", "7", "*", "32", ",", "120", ",", "prior_var", ",", "prior_type", ")", "# --", "\n", "self", ".", "h2", "=", "Linear_BBB", "(", "120", ",", "84", ",", "prior_var", ",", "prior_type", ")", "\n", "self", ".", "out", "=", "Linear_BBB", "(", "84", ",", "out_ch", ",", "prior_var", ",", "prior_type", ")", "\n", "self", ".", "out_dim", "=", "out_ch", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_ConvBBB.forward": [[120, 147], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.log_softmax.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.Classifier_ConvBBB.out", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "models.Classifier_ConvBBB.conv1", "models.Classifier_ConvBBB.conv2", "models.Classifier_ConvBBB.conv3", "models.Classifier_ConvBBB.conv4", "models.Classifier_ConvBBB.h1", "models.Classifier_ConvBBB.h2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "logit", "=", "False", ")", ":", "\n", "\n", "\n", "        ", "x", "=", "torch", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "x", "=", "torch", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "\n", "x", "=", "torch", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "\n", "x", "=", "torch", ".", "relu", "(", "self", ".", "conv4", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "\n", "#print(x.shape)", "\n", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "7", "*", "7", "*", "32", ")", "\n", "x", "=", "torch", ".", "relu", "(", "self", ".", "h1", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "relu", "(", "self", ".", "h2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "out", "(", "x", ")", "\n", "logits", "=", "x", "\n", "x", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n", "if", "(", "logit", "==", "True", ")", ":", "\n", "            ", "return", "x", ",", "logits", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_ConvBBB.log_prior": [[148, 152], ["None"], "methods", ["None"], ["", "", "def", "log_prior", "(", "self", ")", ":", "\n", "        ", "conv_layers", "=", "self", ".", "conv1", ".", "log_prior", "+", "self", ".", "conv2", ".", "log_prior", "+", "self", ".", "conv3", ".", "log_prior", "+", "self", ".", "conv4", ".", "log_prior", "\n", "linear_layers", "=", "self", ".", "h1", ".", "log_prior", "+", "self", ".", "h2", ".", "log_prior", "+", "self", ".", "out", ".", "log_prior", "\n", "return", "conv_layers", ",", "linear_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_ConvBBB.log_post": [[153, 157], ["None"], "methods", ["None"], ["", "def", "log_post", "(", "self", ")", ":", "\n", "        ", "conv_layers", "=", "self", ".", "conv1", ".", "log_post", "+", "self", ".", "conv2", ".", "log_post", "+", "self", ".", "conv3", ".", "log_post", "+", "self", ".", "conv4", ".", "log_post", "\n", "linear_layers", "=", "self", ".", "h1", ".", "log_post", "+", "self", ".", "h2", ".", "log_post", "+", "self", ".", "out", ".", "log_post", "\n", "return", "conv_layers", ",", "linear_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_ConvBBB.log_like": [[158, 161], ["torch.nll_loss", "torch.nll_loss", "torch.nll_loss"], "methods", ["None"], ["", "def", "log_like", "(", "self", ",", "outputs", ",", "target", ",", "reduction", ")", ":", "\n", "#log P(D|w)", "\n", "        ", "return", "F", ".", "nll_loss", "(", "outputs", ",", "target", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_ConvBBB.sample_elbo": [[163, 273], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "torch.zeros().to.mean", "models.Classifier_ConvBBB.log_prior", "models.Classifier_ConvBBB.log_post", "models.Classifier_ConvBBB.log_like", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models.Classifier_ConvBBB.", "models.Classifier_ConvBBB."], "methods", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_ConvBBB.log_prior", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_ConvBBB.log_post", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_ConvBBB.log_like"], ["", "def", "sample_elbo", "(", "self", ",", "input", ",", "target", ",", "samples", ",", "batch", ",", "num_batches", ",", "samples_batch", ",", "T", "=", "1.0", ",", "burnin", "=", "None", ",", "reduction", "=", "\"sum\"", ",", "logit", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "outputs", "=", "torch", ".", "zeros", "(", "samples", ",", "target", ".", "shape", "[", "0", "]", ",", "self", ".", "out_dim", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "#pac", "\n", "#outputs1 = torch.zeros(samples, target.shape[0], self.out_dim).to(self.device)", "\n", "\n", "log_priors_conv", "=", "torch", ".", "zeros", "(", "samples", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "log_priors_linear", "=", "torch", ".", "zeros", "(", "samples", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "log_priors", "=", "torch", ".", "zeros", "(", "samples", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "log_posts_conv", "=", "torch", ".", "zeros", "(", "samples", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "log_posts_linear", "=", "torch", ".", "zeros", "(", "samples", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "log_posts", "=", "torch", ".", "zeros", "(", "samples", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "log_likes", "=", "torch", ".", "zeros", "(", "samples", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "#pac", "\n", "#log_likes_1 = torch.zeros(samples).to(self.device)", "\n", "\n", "for", "i", "in", "range", "(", "samples", ")", ":", "\n", "\n", "            ", "if", "(", "logit", "==", "True", ")", ":", "\n", "                ", "outputs", "[", "i", "]", ",", "logits", "=", "self", "(", "input", ",", "logit", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "                ", "outputs", "[", "i", "]", "=", "self", "(", "input", ",", "logit", "=", "False", ")", "\n", "#pac", "\n", "#outputs1[i] = self(input, logit=False) ", "\n", "\n", "", "log_priors_conv", "[", "i", "]", ",", "log_priors_linear", "[", "i", "]", "=", "self", ".", "log_prior", "(", ")", "\n", "log_priors", "[", "i", "]", "=", "log_priors_conv", "[", "i", "]", "+", "log_priors_linear", "[", "i", "]", "\n", "\n", "log_posts_conv", "[", "i", "]", ",", "log_posts_linear", "[", "i", "]", "=", "self", ".", "log_post", "(", ")", "\n", "log_posts", "[", "i", "]", "=", "log_posts_conv", "[", "i", "]", "+", "log_posts_linear", "[", "i", "]", "\n", "log_likes", "[", "i", "]", "=", "self", ".", "log_like", "(", "outputs", "[", "i", ",", ":", ",", ":", "]", ",", "target", ",", "reduction", ")", "\n", "\n", "#pac", "\n", "#log_likes_1[i] = self.log_like(outputs1[i,:,:], target, reduction)", "\n", "\n", "\n", "# the mean of a sum is the sum of the means:", "\n", "", "log_prior", "=", "log_priors", ".", "mean", "(", ")", "\n", "log_post", "=", "log_posts", ".", "mean", "(", ")", "\n", "log_like", "=", "log_likes", ".", "mean", "(", ")", "\n", "\n", "#pac", "\n", "#log_like_1 = log_likes_1.mean()", "\n", "\n", "log_prior_conv", "=", "log_priors_conv", ".", "mean", "(", ")", "\n", "log_prior_linear", "=", "log_priors_linear", ".", "mean", "(", ")", "\n", "log_post_conv", "=", "log_posts_conv", ".", "mean", "(", ")", "\n", "log_post_linear", "=", "log_posts_linear", ".", "mean", "(", ")", "\n", "\n", "\n", "if", "burnin", "==", "\"blundell\"", ":", "\n", "            ", "frac", "=", "2", "**", "(", "num_batches", "-", "(", "batch", "+", "1", ")", ")", "/", "(", "2", "**", "(", "num_batches", ")", "-", "1", ")", "\n", "", "elif", "burnin", "==", "None", ":", "\n", "            ", "if", "reduction", "==", "\"sum\"", ":", "\n", "                ", "frac", "=", "T", "/", "num_batches", "\n", "", "elif", "reduction", "==", "\"mean\"", ":", "\n", "                ", "frac", "=", "T", "/", "(", "num_batches", "*", "samples_batch", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "\n", "", "", "loss", "=", "frac", "*", "(", "log_post", "-", "log_prior", ")", "+", "log_like", "\n", "\n", "#print(\"loss before variance term\", loss)", "\n", "\n", "complexity_cost", "=", "frac", "*", "(", "log_post", "-", "log_prior", ")", "\n", "likelihood_cost", "=", "log_like", "\n", "\n", "#uncomment for pac", "\n", "'''\n        if(self.training == True):\n            #print(\"training\")\n            variance=[]\n            #replacing all tensors with np arrays\n            for i in range(len(target)):\n                prob = -F.nll_loss(outputs[0,:,:][i].reshape(1,2), target[i].reshape(1), reduction=reduction).detach().numpy()\n                #print(prob)\n                prob1 = -F.nll_loss(outputs1[0,:,:][i].reshape(1,2), target[i].reshape(1), reduction=reduction).detach().numpy()\n                max_prob = np.maximum(prob, prob1)\n                #alpha = np.log(np.exp(prob - max_prob) +np.exp(prob1 - max_prob)) - np.log(2)\n                #h_alpha = alpha/(1-np.exp(alpha))**2 + 1/(np.exp(alpha)*(1-np.exp(alpha)))\n                var = np.exp(2*prob - 2*max_prob) - np.exp(prob + prob1 - 2*max_prob)\n                \n                #print(var)\n                #print(\"halpha*var\", (h_alpha*var))\n                variance = np.append(variance, var)\n      \n            loss = complexity_cost + log_like - np.sum((variance))\n            #loss = complexity_cost + log_like -  np.sum(h_alpha*variance)\n\n            #print(\"loss after var term\", loss)\n        \n        else:\n            pass\n           \n            \n        '''", "\n", "\n", "complexity_conv", "=", "frac", "*", "(", "log_post_conv", "-", "log_prior_conv", ")", "\n", "complexity_linear", "=", "frac", "*", "(", "log_post_linear", "-", "log_prior_linear", ")", "\n", "\n", "if", "(", "logit", "==", "True", ")", ":", "\n", "            ", "return", "loss", ",", "outputs", ",", "complexity_cost", ",", "likelihood_cost", ",", "complexity_conv", ",", "complexity_linear", ",", "logits", "\n", "", "else", ":", "\n", "            ", "return", "loss", ",", "outputs", ",", "complexity_cost", ",", "likelihood_cost", ",", "complexity_conv", ",", "complexity_linear", "", "", "", "", ""]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.torchsummary.summary": [[9, 15], ["torch.device", "torch.device", "torchsummary.summary_string", "print"], "function", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.torchsummary.summary_string"], ["def", "summary", "(", "model", ",", "input_size", ",", "batch_size", "=", "-", "1", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ",", "dtypes", "=", "None", ")", ":", "\n", "    ", "result", ",", "params_info", "=", "summary_string", "(", "\n", "model", ",", "input_size", ",", "batch_size", ",", "device", ",", "dtypes", ")", "\n", "print", "(", "result", ")", "\n", "\n", "return", "params_info", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.torchsummary.summary_string": [[17, 133], ["torch.device", "torch.device", "isinstance", "collections.OrderedDict", "model.apply", "model", "abs", "abs", "abs", "torch.rand().type().to", "torch.rand().type().to", "h.remove", "numpy.prod", "len", "len", "collections.OrderedDict", "list", "isinstance", "hooks.append", "zip", "str", "[].split", "input[].size", "list", "hasattr", "hasattr", "torch.prod", "torch.prod", "hasattr", "hasattr", "torch.prod", "torch.prod", "hasattr", "hasattr", "torch.prod", "torch.prod", "hasattr", "hasattr", "torch.prod", "torch.prod", "hasattr", "hasattr", "torch.prod", "torch.prod", "hasattr", "hasattr", "torch.prod", "torch.prod", "isinstance", "isinstance", "module.register_forward_hook", "torch.rand().type", "torch.rand().type", "output.size", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.prod", "list", "list", "list", "list", "list", "list", "torch.rand", "torch.rand", "sum", "str().split", "list", "module.weight.size", "module.bias.size", "module.w_mu.size", "module.w_rho.size", "module.b_mu.size", "module.b_rho.size", "o.size", "str"], "function", ["None"], ["", "def", "summary_string", "(", "model", ",", "input_size", ",", "batch_size", "=", "-", "1", ",", "device", "=", "torch", ".", "device", "(", "'cpu:0'", ")", ",", "dtypes", "=", "None", ")", ":", "\n", "    ", "if", "dtypes", "==", "None", ":", "\n", "        ", "dtypes", "=", "[", "torch", ".", "FloatTensor", "]", "*", "len", "(", "input_size", ")", "\n", "\n", "", "summary_str", "=", "''", "\n", "\n", "def", "register_hook", "(", "module", ")", ":", "\n", "        ", "def", "hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "class_name", "=", "str", "(", "module", ".", "__class__", ")", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"'\"", ")", "[", "0", "]", "\n", "module_idx", "=", "len", "(", "summary", ")", "\n", "\n", "m_key", "=", "\"%s-%i\"", "%", "(", "class_name", ",", "module_idx", "+", "1", ")", "\n", "summary", "[", "m_key", "]", "=", "OrderedDict", "(", ")", "\n", "summary", "[", "m_key", "]", "[", "\"input_shape\"", "]", "=", "list", "(", "input", "[", "0", "]", ".", "size", "(", ")", ")", "\n", "summary", "[", "m_key", "]", "[", "\"input_shape\"", "]", "[", "0", "]", "=", "batch_size", "\n", "if", "isinstance", "(", "output", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "summary", "[", "m_key", "]", "[", "\"output_shape\"", "]", "=", "[", "\n", "[", "-", "1", "]", "+", "list", "(", "o", ".", "size", "(", ")", ")", "[", "1", ":", "]", "for", "o", "in", "output", "\n", "]", "\n", "", "else", ":", "\n", "                ", "summary", "[", "m_key", "]", "[", "\"output_shape\"", "]", "=", "list", "(", "output", ".", "size", "(", ")", ")", "\n", "summary", "[", "m_key", "]", "[", "\"output_shape\"", "]", "[", "0", "]", "=", "batch_size", "\n", "\n", "", "params", "=", "0", "\n", "if", "hasattr", "(", "module", ",", "\"weight\"", ")", "and", "hasattr", "(", "module", ".", "weight", ",", "\"size\"", ")", ":", "\n", "                ", "params", "+=", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "list", "(", "module", ".", "weight", ".", "size", "(", ")", ")", ")", ")", "\n", "summary", "[", "m_key", "]", "[", "\"trainable\"", "]", "=", "module", ".", "weight", ".", "requires_grad", "\n", "", "if", "hasattr", "(", "module", ",", "\"bias\"", ")", "and", "hasattr", "(", "module", ".", "bias", ",", "\"size\"", ")", ":", "\n", "                ", "params", "+=", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "list", "(", "module", ".", "bias", ".", "size", "(", ")", ")", ")", ")", "\n", "", "if", "hasattr", "(", "module", ",", "\"w_mu\"", ")", "and", "hasattr", "(", "module", ".", "w_mu", ",", "\"size\"", ")", ":", "\n", "                ", "params", "+=", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "list", "(", "module", ".", "w_mu", ".", "size", "(", ")", ")", ")", ")", "\n", "summary", "[", "m_key", "]", "[", "\"trainable\"", "]", "=", "module", ".", "w_mu", ".", "requires_grad", "\n", "", "if", "hasattr", "(", "module", ",", "\"w_rho\"", ")", "and", "hasattr", "(", "module", ".", "w_rho", ",", "\"size\"", ")", ":", "\n", "                ", "params", "+=", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "list", "(", "module", ".", "w_rho", ".", "size", "(", ")", ")", ")", ")", "\n", "summary", "[", "m_key", "]", "[", "\"trainable\"", "]", "=", "module", ".", "w_rho", ".", "requires_grad", "\n", "", "if", "hasattr", "(", "module", ",", "\"b_mu\"", ")", "and", "hasattr", "(", "module", ".", "b_mu", ",", "\"size\"", ")", ":", "\n", "                ", "params", "+=", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "list", "(", "module", ".", "b_mu", ".", "size", "(", ")", ")", ")", ")", "\n", "summary", "[", "m_key", "]", "[", "\"trainable\"", "]", "=", "module", ".", "b_mu", ".", "requires_grad", "\n", "", "if", "hasattr", "(", "module", ",", "\"b_rho\"", ")", "and", "hasattr", "(", "module", ".", "b_rho", ",", "\"size\"", ")", ":", "\n", "                ", "params", "+=", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "list", "(", "module", ".", "b_rho", ".", "size", "(", ")", ")", ")", ")", "\n", "summary", "[", "m_key", "]", "[", "\"trainable\"", "]", "=", "module", ".", "b_rho", ".", "requires_grad", "\n", "", "summary", "[", "m_key", "]", "[", "\"nb_params\"", "]", "=", "params", "\n", "\n", "", "if", "(", "\n", "not", "isinstance", "(", "module", ",", "nn", ".", "Sequential", ")", "\n", "and", "not", "isinstance", "(", "module", ",", "nn", ".", "ModuleList", ")", "\n", ")", ":", "\n", "            ", "hooks", ".", "append", "(", "module", ".", "register_forward_hook", "(", "hook", ")", ")", "\n", "\n", "# multiple inputs to the network", "\n", "", "", "if", "isinstance", "(", "input_size", ",", "tuple", ")", ":", "\n", "        ", "input_size", "=", "[", "input_size", "]", "\n", "\n", "# batch_size of 2 for batchnorm", "\n", "", "x", "=", "[", "torch", ".", "rand", "(", "2", ",", "*", "in_size", ")", ".", "type", "(", "dtype", ")", ".", "to", "(", "device", "=", "device", ")", "\n", "for", "in_size", ",", "dtype", "in", "zip", "(", "input_size", ",", "dtypes", ")", "]", "\n", "\n", "# create properties", "\n", "summary", "=", "OrderedDict", "(", ")", "\n", "hooks", "=", "[", "]", "\n", "\n", "# register hook", "\n", "model", ".", "apply", "(", "register_hook", ")", "\n", "\n", "# make a forward pass", "\n", "# print(x.shape)", "\n", "model", "(", "*", "x", ")", "\n", "\n", "# remove these hooks", "\n", "for", "h", "in", "hooks", ":", "\n", "        ", "h", ".", "remove", "(", ")", "\n", "\n", "", "summary_str", "+=", "\"----------------------------------------------------------------\"", "+", "\"\\n\"", "\n", "line_new", "=", "\"{:>20}  {:>25} {:>15}\"", ".", "format", "(", "\n", "\"Layer (type)\"", ",", "\"Output Shape\"", ",", "\"Param #\"", ")", "\n", "summary_str", "+=", "line_new", "+", "\"\\n\"", "\n", "summary_str", "+=", "\"================================================================\"", "+", "\"\\n\"", "\n", "total_params", "=", "0", "\n", "total_output", "=", "0", "\n", "trainable_params", "=", "0", "\n", "for", "layer", "in", "summary", ":", "\n", "# input_shape, output_shape, trainable, nb_params", "\n", "        ", "line_new", "=", "\"{:>20}  {:>25} {:>15}\"", ".", "format", "(", "\n", "layer", ",", "\n", "str", "(", "summary", "[", "layer", "]", "[", "\"output_shape\"", "]", ")", ",", "\n", "\"{0:,}\"", ".", "format", "(", "summary", "[", "layer", "]", "[", "\"nb_params\"", "]", ")", ",", "\n", ")", "\n", "total_params", "+=", "summary", "[", "layer", "]", "[", "\"nb_params\"", "]", "\n", "\n", "total_output", "+=", "np", ".", "prod", "(", "summary", "[", "layer", "]", "[", "\"output_shape\"", "]", ")", "\n", "if", "\"trainable\"", "in", "summary", "[", "layer", "]", ":", "\n", "            ", "if", "summary", "[", "layer", "]", "[", "\"trainable\"", "]", "==", "True", ":", "\n", "                ", "trainable_params", "+=", "summary", "[", "layer", "]", "[", "\"nb_params\"", "]", "\n", "", "", "summary_str", "+=", "line_new", "+", "\"\\n\"", "\n", "\n", "# assume 4 bytes/number (float on cuda).", "\n", "", "total_input_size", "=", "abs", "(", "np", ".", "prod", "(", "sum", "(", "input_size", ",", "(", ")", ")", ")", "\n", "*", "batch_size", "*", "4.", "/", "(", "1024", "**", "2.", ")", ")", "\n", "total_output_size", "=", "abs", "(", "2.", "*", "total_output", "*", "4.", "/", "\n", "(", "1024", "**", "2.", ")", ")", "# x2 for gradients", "\n", "total_params_size", "=", "abs", "(", "total_params", "*", "4.", "/", "(", "1024", "**", "2.", ")", ")", "\n", "total_size", "=", "total_params_size", "+", "total_output_size", "+", "total_input_size", "\n", "\n", "summary_str", "+=", "\"================================================================\"", "+", "\"\\n\"", "\n", "summary_str", "+=", "\"Total params: {0:,}\"", ".", "format", "(", "total_params", ")", "+", "\"\\n\"", "\n", "summary_str", "+=", "\"Trainable params: {0:,}\"", ".", "format", "(", "trainable_params", ")", "+", "\"\\n\"", "\n", "summary_str", "+=", "\"Non-trainable params: {0:,}\"", ".", "format", "(", "total_params", "-", "\n", "trainable_params", ")", "+", "\"\\n\"", "\n", "summary_str", "+=", "\"----------------------------------------------------------------\"", "+", "\"\\n\"", "\n", "summary_str", "+=", "\"Input size (MB): %0.2f\"", "%", "total_input_size", "+", "\"\\n\"", "\n", "summary_str", "+=", "\"Forward/backward pass size (MB): %0.2f\"", "%", "total_output_size", "+", "\"\\n\"", "\n", "summary_str", "+=", "\"Params size (MB): %0.2f\"", "%", "total_params_size", "+", "\"\\n\"", "\n", "summary_str", "+=", "\"Estimated Total Size (MB): %0.2f\"", "%", "total_size", "+", "\"\\n\"", "\n", "summary_str", "+=", "\"----------------------------------------------------------------\"", "+", "\"\\n\"", "\n", "# return summary", "\n", "return", "summary_str", ",", "(", "total_params", ",", "trainable_params", ")", "", "", ""]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.pruning.snrPruningMethod.__init__": [[148, 151], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "threshold", ")", ":", "\n", "\n", "        ", "self", ".", "threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.pruning.snrPruningMethod.compute_mask": [[153, 165], ["utils.density_snr_conv", "numpy.sort", "default_mask.clone", "print", "default_mask.clone.view", "default_mask.clone.view", "int", "numpy.where", "len", "list", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.utils.density_snr_conv"], ["", "def", "compute_mask", "(", "self", ",", "t", ",", "default_mask", ")", ":", "\n", "\n", "        ", "density", ",", "db_SNR", "=", "density_snr_conv", "(", "model", ")", "\n", "sorted_SNR", "=", "np", ".", "sort", "(", "db_SNR", ")", "#[::-1]", "\n", "threshold_percent", "=", "self", ".", "threshold", "\n", "threshold_snr", "=", "sorted_SNR", "[", "int", "(", "len", "(", "sorted_SNR", ")", "*", "threshold_percent", ")", "]", "\n", "mask", "=", "default_mask", ".", "clone", "(", ")", "\n", "print", "(", "threshold_percent", ",", "threshold_snr", ")", "\n", "mask", ".", "view", "(", "-", "1", ")", "[", "np", ".", "where", "(", "db_SNR", "<=", "threshold_snr", ")", "]", "=", "0", "\n", "\n", "mask", ".", "view", "(", "-", "1", ")", "[", "(", "(", "list", "(", "np", ".", "where", "(", "db_SNR", "<", "threshold_snr", ")", ")", "[", "0", "]", "+", "198408", ")", ",", ")", "]", "=", "18", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.pruning.FisherPruningMethod.__init__": [[173, 177], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "threshold", ",", "r", ")", ":", "\n", "\n", "        ", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "r", "=", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.pruning.FisherPruningMethod.compute_mask": [[178, 245], ["sum", "print", "numpy.append", "numpy.append", "numpy.sort", "abs", "numpy.sort", "set().difference", "default_mask.clone", "model.h1.w_mu.detach().numpy().flatten", "model.h2.w_mu.detach().numpy().flatten", "model.out.w_mu.detach().numpy().flatten", "abs", "numpy.where", "numpy.where", "numpy.where", "list", "list", "numpy.append", "list", "list", "list", "default_mask.clone.view", "default_mask.clone.view", "p.numel", "len", "len", "int", "[].detach().numpy().flatten", "int", "numpy.where", "set", "model.parameters", "model.h1.w_mu.detach().numpy", "model.h2.w_mu.detach().numpy", "model.out.w_mu.detach().numpy", "numpy.array", "[].detach().numpy", "model.h1.w_mu.detach", "model.h2.w_mu.detach", "model.out.w_mu.detach", "[].detach", "optimizer.state_dict"], "methods", ["None"], ["", "def", "compute_mask", "(", "self", ",", "t", ",", "default_mask", ")", ":", "\n", "#---------------------------------------------------------------------------------------------------------", "\n", "\n", "#remove params based on FIM and mag", "\n", "\n", "        ", "pytorch_total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "#print(\"total params\", pytorch_total_params)", "\n", "\n", "#total_fc_learnable = 120*1568*2 + 120+120 +84*120*2 + 84+ 84+ 84*2*2 + 2 + 2", "\n", "#print(\"total params in fully connected layers\", total_fc_learnable)", "\n", "#total_w_mus =  120*1568 + 84*120 + 84*2", "\n", "#print(\"total w_mus\",total_w_mus)", "\n", "\n", "param", "=", "[", "]", "\n", "threshold_values", "=", "self", ".", "threshold", "\n", "\n", "#r = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]", "\n", "#r = 0.3 #tunable b/w (0, 1)", "\n", "print", "(", "\"r=\"", ",", "self", ".", "r", ")", "\n", "mu_post_w", "=", "np", ".", "append", "(", "model", ".", "h1", ".", "w_mu", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "model", ".", "h2", ".", "w_mu", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "mu_post_w", "=", "np", ".", "append", "(", "mu_post_w", ",", "model", ".", "out", ".", "w_mu", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "\n", "#params to remove based on magnitude and FIM", "\n", "params_to_remove_mag", "=", "threshold_values", "*", "len", "(", "mu_post_w", ")", "*", "(", "1", "-", "self", ".", "r", ")", "\n", "params_to_remove_FIM", "=", "threshold_values", "*", "len", "(", "mu_post_w", ")", "*", "(", "self", ".", "r", ")", "\n", "#print(\"params_to_remove based on mag\", params_to_remove_mag)", "\n", "#print(\"params_to_remove based on mag\", params_to_remove_FIM)", "\n", "\n", "sorted_mus", "=", "np", ".", "sort", "(", "abs", "(", "mu_post_w", ")", ")", "\n", "threshold_mag", "=", "sorted_mus", "[", "int", "(", "params_to_remove_mag", ")", "]", "\n", "#print(\"threshold_mag\", threshold_mag)", "\n", "threshold_mag", "=", "abs", "(", "threshold_mag", ")", "\n", "\n", "indices_mag", "=", "np", ".", "where", "(", "(", "mu_post_w", "<=", "threshold_mag", ")", "&", "(", "mu_post_w", ">=", "-", "threshold_mag", ")", ")", "[", "0", "]", "\n", "\n", "#print(\"total params to remove based on mag\", len(indices_mag))", "\n", "\n", "indices_FIM1", "=", "np", ".", "where", "(", "(", "mu_post_w", ">", "threshold_mag", ")", ")", "[", "0", "]", "\n", "indices_FIM2", "=", "np", ".", "where", "(", "(", "mu_post_w", "<", "-", "threshold_mag", ")", ")", "[", "0", "]", "\n", "indices_FIM", "=", "list", "(", "indices_FIM1", ")", "+", "list", "(", "indices_FIM2", ")", "\n", "#print(\"remianing params \", len(indices_FIM))", "\n", "\n", "for", "i", "in", "(", "[", "16", ",", "20", ",", "24", "]", ")", ":", "#w_mus only    ", "\n", "            ", "param", "=", "np", ".", "append", "(", "param", ",", "optimizer", ".", "state_dict", "(", ")", "[", "'state'", "]", "[", "i", "]", "[", "'exp_avg_sq'", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "", "sorted_param", "=", "np", ".", "sort", "(", "param", "[", "indices_FIM", "]", ")", "\n", "\n", "\n", "threshold_FI", "=", "sorted_param", "[", "int", "(", "params_to_remove_FIM", ")", "]", "\n", "\n", "FIM_indices", "=", "list", "(", "np", ".", "where", "(", "param", "<=", "threshold_FI", ")", ")", "[", "0", "]", "\n", "indices_FIM_remove", "=", "set", "(", "FIM_indices", ")", ".", "difference", "(", "indices_mag", ")", "\n", "\n", "#print(\"threshold_FI_1\", threshold_FI_1)", "\n", "#print(\"total params to remove based on mag\", (indices_mag))", "\n", "#print(\"total params to remove based on FIM\", (indices_FIM_remove))", "\n", "\n", "\n", "mask", "=", "default_mask", ".", "clone", "(", ")", "\n", "\n", "ind", "=", "list", "(", "indices_mag", ")", "+", "list", "(", "indices_FIM_remove", ")", "\n", "#print(ind)", "\n", "mask", ".", "view", "(", "-", "1", ")", "[", "ind", "]", "=", "0", "\n", "mask", ".", "view", "(", "-", "1", ")", "[", "np", ".", "array", "(", "ind", ")", "+", "198408", "]", "=", "18", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.pruning.density_snr_conv": [[117, 142], ["model.to.to", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.exp", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "model.to.to", "model.to.h1.w_mu.detach().numpy().flatten", "model.to.h2.w_mu.detach().numpy().flatten", "model.to.out.w_mu.detach().numpy().flatten", "model.to.h1.w_rho.detach().numpy().flatten", "model.to.h2.w_rho.detach().numpy().flatten", "model.to.out.w_rho.detach().numpy().flatten", "abs", "numpy.log10", "numpy.sort", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "model.to.h1.w_mu.detach().numpy", "model.to.h2.w_mu.detach().numpy", "model.to.out.w_mu.detach().numpy", "model.to.h1.w_rho.detach().numpy", "model.to.h2.w_rho.detach().numpy", "model.to.out.w_rho.detach().numpy", "model.to.h1.w_mu.detach", "model.to.h2.w_mu.detach", "model.to.out.w_mu.detach", "model.to.h1.w_rho.detach", "model.to.h2.w_rho.detach", "model.to.out.w_rho.detach"], "function", ["None"], ["def", "density_snr_conv", "(", "model", ")", ":", "\n", "    ", "device", "=", "\"cpu\"", "\n", "model", "=", "model", ".", "to", "(", "device", "=", "\"cpu\"", ")", "\n", "\n", "\n", "#get trained posterior on weights for the fully-connected layers", "\n", "mu_post_w", "=", "np", ".", "append", "(", "model", ".", "h1", ".", "w_mu", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "model", ".", "h2", ".", "w_mu", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "mu_post_w", "=", "np", ".", "append", "(", "mu_post_w", ",", "model", ".", "out", ".", "w_mu", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "rho_post_w", "=", "np", ".", "append", "(", "model", ".", "h1", ".", "w_rho", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "model", ".", "h2", ".", "w_rho", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "rho_post_w", "=", "np", ".", "append", "(", "rho_post_w", ",", "model", ".", "out", ".", "w_rho", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "#convert rho to sigma", "\n", "sigma_post_w", "=", "np", ".", "exp", "(", "rho_post_w", ")", "\n", "\n", "#calculate SNR = |mu_weight|/sigma_weight", "\n", "SNR", "=", "abs", "(", "mu_post_w", ")", "/", "sigma_post_w", "\n", "db_SNR", "=", "10", "*", "np", ".", "log10", "(", "SNR", ")", "\n", "\n", "#order the weights by SNR", "\n", "sorted_SNR", "=", "np", ".", "sort", "(", "db_SNR", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "return", "mu_post_w", ",", "db_SNR", "\n", "#%%", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.pruning.pruning": [[247, 318], ["models.Classifier_ConvBBB().to", "Classifier_ConvBBB().to.load_state_dict", "utils.test", "range", "mean_arr.append", "stdev_arr.append", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.global_unstructured", "utils.test", "err_arr.append", "numpy.mean", "numpy.std", "utils.uncert", "models.Classifier_ConvBBB", "torch.global_unstructured", "print", "open", "csv.writer", "csv.writer.writerow", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.utils.test", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.utils.test", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.utils.uncert"], ["", "", "def", "pruning", "(", "model", ",", "filename_pruning", ",", "threshold", ",", "niter", ",", "method", ",", "r", "=", "0", ",", "uncert", "=", "False", ")", ":", "\n", "\n", "    ", "mean_arr", "=", "[", "]", "\n", "stdev_arr", "=", "[", "]", "\n", "\n", "for", "i", "in", "threshold", ":", "\n", "\n", "        ", "model", "=", "Classifier_ConvBBB", "(", "input_ch", ",", "out_ch", ",", "kernel_size", ",", "prior_var", ",", "prior", ")", ".", "to", "(", "device", ")", "\n", "#model = Classifier_BBB(input_size, hidden_size, output_size).to(device)", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"model.pt\"", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ")", "\n", "\n", "test_err", "=", "test", "(", "model", ",", "test_loader", ",", "device", ",", "T", ",", "burnin", ",", "reduction", ")", "\n", "\n", "parameters_to_prune", "=", "(", "\n", "(", "model", ".", "h1", ",", "'w_mu'", ")", ",", "\n", "(", "model", ".", "h2", ",", "'w_mu'", ")", ",", "\n", "(", "model", ".", "out", ",", "'w_mu'", ")", ",", "\n", "\n", "\n", "(", "model", ".", "h1", ",", "'w_rho'", ")", ",", "\n", "(", "model", ".", "h2", ",", "'w_rho'", ")", ",", "\n", "(", "model", ".", "out", ",", "'w_rho'", ")", "\n", ")", "\n", "\n", "if", "(", "method", "==", "'SNR'", ")", ":", "\n", "            ", "prune", ".", "global_unstructured", "(", "\n", "parameters_to_prune", ",", "\n", "pruning_method", "=", "snrPruningMethod", ",", "\n", "threshold", "=", "i", "\n", ")", "\n", "\n", "\n", "", "elif", "(", "method", "==", "'Fisher'", ")", ":", "\n", "            ", "prune", ".", "global_unstructured", "(", "\n", "parameters_to_prune", ",", "\n", "pruning_method", "=", "FisherPruningMethod", ",", "\n", "threshold", "=", "i", ",", "\n", "r", "=", "r", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Pruning method misspecified.\"", ")", "\n", "\n", "", "err_arr", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "niter", ")", ":", "\n", "            ", "test_err", "=", "test", "(", "model", ",", "test_loader", ",", "device", ",", "T", ",", "burnin", ",", "reduction", ")", "\n", "err_arr", ".", "append", "(", "test_err", ")", "\n", "\n", "", "mean_arr", ".", "append", "(", "np", ".", "mean", "(", "err_arr", ")", ")", "\n", "stdev_arr", ".", "append", "(", "np", ".", "std", "(", "err_arr", ")", ")", "\n", "\n", "#print(\"mean_arr\", mean_arr, stdev_arr)", "\n", "\n", "if", "(", "uncert", "==", "True", ")", ":", "\n", "\n", "#uncertainty quantification", "\n", "\n", "#test_data_uncert = 'MBHybrid'       #{'MBFRConfident', 'MBFRUncertain', 'MBHybrid'} ", "\n", "            ", "csvfile", "=", "filename_pruning", "\n", "rows", "=", "[", "'index'", ",", "'target'", ",", "'entropy'", ",", "'entropy_singlepass'", ",", "'mutual info'", ",", "'var_logits_0'", ",", "'var_logits_1'", ",", "'softmax_eta'", ",", "'logits_eta'", ",", "'cov0_00'", ",", "'cov0_01'", ",", "'cov0_11'", ",", "'cov1_00'", ",", "'cov1_01'", ",", "'cov1_11'", ",", "'data type'", ",", "'label'", ",", "'pruning'", "]", "\n", "\n", "with", "open", "(", "csvfile", ",", "'w+'", ",", "newline", "=", "\"\"", ")", "as", "f_out", ":", "\n", "                    ", "writer", "=", "csv", ".", "writer", "(", "f_out", ",", "delimiter", "=", "','", ")", "\n", "writer", ".", "writerow", "(", "rows", ")", "\n", "\n", "", "uncert", "(", "model", ",", "test_data_uncert", ",", "device", ",", "T", ",", "burnin", ",", "reduction", ",", "csvfile", ",", "pruning_", ",", "path", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "\n", "", "", "return", "mean_arr", ",", "stdev_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.layers.Linear_BBB.__init__": [[16, 57], ["torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "priors.GaussianPrior", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "priors.GMMPrior", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "priors.LaplacePrior", "priors.LaplaceMixture", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "priors.CauchyPrior", "print"], "methods", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.__init__"], ["def", "__init__", "(", "self", ",", "input_features", ",", "output_features", ",", "prior_var", ",", "prior_type", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "#set dim", "\n", "self", ".", "input_features", "=", "input_features", "\n", "self", ".", "output_features", "=", "output_features", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "# initialize weight params", "\n", "self", ".", "w_mu", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "output_features", ",", "input_features", ")", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "w_rho", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "output_features", ",", "input_features", ")", ".", "uniform_", "(", "-", "5", ",", "-", "4", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n", "#initialize bias params", "\n", "self", ".", "b_mu", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "output_features", ")", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "b_rho", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "output_features", ")", ".", "uniform_", "(", "-", "5", ",", "-", "4", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "'''\n        #normal distrib\n        # initialize weight params\n        self.w_mu = nn.Parameter(torch.zeros(output_features, input_features).normal_(0, 0.1).to(self.device))\n        self.w_rho = nn.Parameter(torch.zeros(output_features, input_features).normal_(-5, 0.1).to(self.device)) \n        \n        #initialize bias params\n        self.b_mu =  nn.Parameter(torch.zeros(output_features).normal_(0, 0.1).to(self.device))\n        self.b_rho = nn.Parameter(torch.zeros(output_features).normal_(-5, 0.1).to(self.device))\n        '''", "\n", "\n", "# initialize prior distribution", "\n", "if", "(", "prior_type", "==", "'Gaussian'", ")", ":", "\n", "            ", "self", ".", "prior", "=", "GaussianPrior", "(", "prior_var", ")", "#1e-1", "\n", "", "elif", "(", "prior_type", "==", "'GaussianMixture'", ")", ":", "\n", "            ", "self", ".", "prior", "=", "GMMPrior", "(", "prior_var", ")", "\n", "", "elif", "(", "prior_type", "==", "'Laplacian'", ")", ":", "\n", "            ", "self", ".", "prior", "=", "LaplacePrior", "(", "prior_var", ")", "\n", "", "elif", "(", "prior_type", "==", "'LaplaceMixture'", ")", ":", "\n", "            ", "self", ".", "prior", "=", "LaplaceMixture", "(", "prior_var", ")", "\n", "", "elif", "(", "prior_type", "==", "'Cauchy'", ")", ":", "\n", "            ", "pass", "\n", "self", ".", "prior", "=", "CauchyPrior", "(", "prior_var", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Unspecified prior\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.layers.Linear_BBB.forward": [[59, 83], ["torch.distributions.Normal().sample().to", "torch.distributions.Normal().sample().to", "torch.distributions.Normal().sample().to", "torch.distributions.Normal().sample().to", "torch.distributions.Normal().sample().to", "torch.distributions.Normal().sample().to", "layers.Linear_BBB.prior.log_prob", "layers.Linear_BBB.prior.log_prob", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.linear", "torch.linear", "torch.linear", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "layers.Linear_BBB.w_post.log_prob().sum", "layers.Linear_BBB.b_post.log_prob().sum", "torch.distributions.Normal().sample", "torch.distributions.Normal().sample", "torch.distributions.Normal().sample", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.distributions.Normal().sample", "torch.distributions.Normal().sample", "torch.distributions.Normal().sample", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "layers.Linear_BBB.w_post.log_prob", "layers.Linear_BBB.b_post.log_prob", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal"], "methods", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.log_prob", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.log_prob", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.log_prob", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.log_prob"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n          Optimization process\n        \"\"\"", "\n", "#sample weights", "\n", "w_epsilon", "=", "Normal", "(", "0", ",", "1", ")", ".", "sample", "(", "self", ".", "w_mu", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "w", "=", "self", ".", "w_mu", "+", "torch", ".", "exp", "(", "self", ".", "w_rho", ")", "*", "w_epsilon", "\n", "\n", "#sample bias", "\n", "b_epsilon", "=", "Normal", "(", "0", ",", "1", ")", ".", "sample", "(", "self", ".", "b_mu", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "b", "=", "self", ".", "b_mu", "+", "torch", ".", "exp", "(", "self", ".", "b_rho", ")", "*", "b_epsilon", "\n", "\n", "#record prior", "\n", "w_log_prior", "=", "self", ".", "prior", ".", "log_prob", "(", "self", ".", "w", ")", "\n", "b_log_prior", "=", "self", ".", "prior", ".", "log_prob", "(", "self", ".", "b", ")", "\n", "self", ".", "log_prior", "=", "torch", ".", "sum", "(", "w_log_prior", ")", "+", "torch", ".", "sum", "(", "b_log_prior", ")", "\n", "\n", "#record variational_posterior - log q(w|theta)", "\n", "self", ".", "w_post", "=", "Normal", "(", "self", ".", "w_mu", ".", "data", ",", "torch", ".", "exp", "(", "self", ".", "w_rho", ")", ")", "\n", "self", ".", "b_post", "=", "Normal", "(", "self", ".", "b_mu", ".", "data", ",", "torch", ".", "exp", "(", "self", ".", "b_rho", ")", ")", "\n", "self", ".", "log_post", "=", "self", ".", "w_post", ".", "log_prob", "(", "self", ".", "w", ")", ".", "sum", "(", ")", "+", "self", ".", "b_post", ".", "log_prob", "(", "self", ".", "b", ")", ".", "sum", "(", ")", "\n", "\n", "\n", "return", "F", ".", "linear", "(", "input", ",", "self", ".", "w", ",", "self", ".", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.layers.Conv_BBB.__init__": [[90, 135], ["torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "isinstance", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "torch.zeros().uniform_().to", "priors.GaussianPrior", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "priors.GMMPrior", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "torch.zeros().uniform_", "priors.LaplacePrior", "priors.LaplaceMixture", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "priors.CauchyPrior", "print"], "methods", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "True", ",", "prior_var", "=", "[", "torch", ".", "tensor", "(", "1", "/", "2", ")", ",", "torch", ".", "tensor", "(", "1e-1", ")", ",", "torch", ".", "tensor", "(", "1e-3", ")", "]", ",", "prior_type", "=", "'Gaussian Mixture'", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "if", "isinstance", "(", "kernel_size", ",", "tuple", ")", "else", "(", "kernel_size", ",", "kernel_size", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "groups", "=", "1", "\n", "#self.use_bias = bias", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "self", ".", "w_mu", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ",", "in_channels", ",", "*", "self", ".", "kernel_size", ")", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "w_rho", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ",", "in_channels", ",", "*", "self", ".", "kernel_size", ")", ".", "uniform_", "(", "-", "5", ",", "-", "4", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n", "self", ".", "b_mu", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "b_rho", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ".", "uniform_", "(", "-", "5", ",", "-", "4", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n", "'''\n        #normal distrib\n        # initialize weight params\n        self.w_mu = nn.Parameter(torch.zeros(out_channels, in_channels, *self.kernel_size).normal_(0, 0.1).to(self.device))\n        self.w_rho = nn.Parameter(torch.zeros(out_channels, in_channels, *self.kernel_size).normal_(-5, 1).to(self.device)) \n        \n        #initialize bias params\n        self.b_mu =  nn.Parameter(torch.zeros(out_channels).normal_(0, 0.1).to(self.device))\n        self.b_rho = nn.Parameter(torch.zeros(out_channels).normal_(-5, 1).to(self.device))\n        '''", "\n", "\n", "# initialize prior distribution", "\n", "if", "(", "prior_type", "==", "'Gaussian'", ")", ":", "\n", "            ", "self", ".", "prior", "=", "GaussianPrior", "(", "prior_var", ")", "#1e-1", "\n", "", "elif", "(", "prior_type", "==", "'GaussianMixture'", ")", ":", "\n", "            ", "self", ".", "prior", "=", "GMMPrior", "(", "prior_var", ")", "\n", "", "elif", "(", "prior_type", "==", "'Laplacian'", ")", ":", "\n", "            ", "self", ".", "prior", "=", "LaplacePrior", "(", "prior_var", ")", "\n", "", "elif", "(", "prior_type", "==", "'LaplaceMixture'", ")", ":", "\n", "            ", "self", ".", "prior", "=", "LaplaceMixture", "(", "prior_var", ")", "\n", "", "elif", "(", "prior_type", "==", "'Cauchy'", ")", ":", "\n", "            ", "pass", "\n", "self", ".", "prior", "=", "CauchyPrior", "(", "prior_var", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Unspecified prior\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.layers.Conv_BBB.forward": [[137, 160], ["torch.distributions.Normal().sample().to", "torch.distributions.Normal().sample().to", "torch.distributions.Normal().sample().to", "torch.distributions.Normal().sample().to", "torch.distributions.Normal().sample().to", "torch.distributions.Normal().sample().to", "layers.Conv_BBB.prior.log_prob", "layers.Conv_BBB.prior.log_prob", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "layers.Conv_BBB.w_post.log_prob().sum", "layers.Conv_BBB.b_post.log_prob().sum", "torch.distributions.Normal().sample", "torch.distributions.Normal().sample", "torch.distributions.Normal().sample", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.distributions.Normal().sample", "torch.distributions.Normal().sample", "torch.distributions.Normal().sample", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "layers.Conv_BBB.w_post.log_prob", "layers.Conv_BBB.b_post.log_prob", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal"], "methods", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.log_prob", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.log_prob", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.log_prob", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.log_prob"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "#sample weights", "\n", "        ", "w_epsilon", "=", "Normal", "(", "0", ",", "1", ")", ".", "sample", "(", "self", ".", "w_mu", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "w", "=", "self", ".", "w_mu", "+", "torch", ".", "exp", "(", "self", ".", "w_rho", ")", "*", "w_epsilon", "\n", "\n", "#sample bias", "\n", "b_epsilon", "=", "Normal", "(", "0", ",", "1", ")", ".", "sample", "(", "self", ".", "b_mu", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "b", "=", "self", ".", "b_mu", "+", "torch", ".", "exp", "(", "self", ".", "b_rho", ")", "*", "b_epsilon", "\n", "\n", "#record prior", "\n", "w_log_prior", "=", "self", ".", "prior", ".", "log_prob", "(", "self", ".", "w", ")", "\n", "b_log_prior", "=", "self", ".", "prior", ".", "log_prob", "(", "self", ".", "b", ")", "\n", "self", ".", "log_prior", "=", "torch", ".", "sum", "(", "w_log_prior", ")", "+", "torch", ".", "sum", "(", "b_log_prior", ")", "\n", "\n", "#record variational_posterior - log q(w|theta)", "\n", "self", ".", "w_post", "=", "Normal", "(", "self", ".", "w_mu", ".", "data", ",", "torch", ".", "exp", "(", "self", ".", "w_rho", ")", ")", "\n", "self", ".", "b_post", "=", "Normal", "(", "self", ".", "b_mu", ".", "data", ",", "torch", ".", "exp", "(", "self", ".", "b_rho", ")", ")", "\n", "self", ".", "log_post", "=", "self", ".", "w_post", ".", "log_prob", "(", "self", ".", "w", ")", ".", "sum", "(", ")", "+", "self", ".", "b_post", ".", "log_prob", "(", "self", ".", "b", ")", ".", "sum", "(", ")", "\n", "\n", "\n", "\n", "return", "F", ".", "conv2d", "(", "input", ",", "self", ".", "w", ",", "self", ".", "b", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MiraBest_full.__init__": [[64, 108], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "numpy.vstack().reshape", "mirabest.MiraBest_full.data.transpose", "mirabest.MiraBest_full._load_meta", "mirabest.MiraBest_full.download", "mirabest.MiraBest_full._check_integrity", "RuntimeError", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "mirabest.MiraBest_full.data.append", "numpy.vstack", "pickle.load", "pickle.load", "mirabest.MiraBest_full.targets.extend", "mirabest.MiraBest_full.targets.extend"], "methods", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MiraBest_full._load_meta", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MiraBest_full.download", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MiraBest_full._check_integrity"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "train_list", "\n", "", "else", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "test_list", "\n", "\n", "", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "# now load the picked numpy arrays", "\n", "for", "file_name", ",", "checksum", "in", "downloaded_list", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "file_name", ")", "\n", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "", "self", ".", "data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'labels'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'fine_labels'", "]", ")", "\n", "\n", "", "", "", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "150", ",", "150", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n", "self", ".", "_load_meta", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MiraBest_full._load_meta": [[109, 121], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.datasets.utils.check_integrity", "RuntimeError", "open", "pickle.load", "pickle.load", "enumerate"], "methods", ["None"], ["", "def", "_load_meta", "(", "self", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "meta", "[", "'filename'", "]", ")", "\n", "if", "not", "check_integrity", "(", "path", ",", "self", ".", "meta", "[", "'md5'", "]", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset metadata file not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "", "with", "open", "(", "path", ",", "'rb'", ")", "as", "infile", ":", "\n", "            ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "classes", "=", "data", "[", "self", ".", "meta", "[", "'key'", "]", "]", "\n", "", "self", ".", "class_to_idx", "=", "{", "_class", ":", "i", "for", "i", ",", "_class", "in", "enumerate", "(", "self", ".", "classes", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MiraBest_full.__getitem__": [[122, 143], ["numpy.reshape", "PIL.Image.fromarray", "mirabest.MiraBest_full.transform", "mirabest.MiraBest_full.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "np", ".", "reshape", "(", "img", ",", "(", "150", ",", "150", ")", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "'L'", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MiraBest_full.__len__": [[144, 146], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MiraBest_full._check_integrity": [[147, 155], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.datasets.utils.check_integrity"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "test_list", ")", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MiraBest_full.download": [[156, 168], ["mirabest.MiraBest_full._check_integrity", "torchvision.datasets.utils.download_url", "print", "tarfile.open", "tar.extractall", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MiraBest_full._check_integrity"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "tarfile", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "'Files already downloaded and verified'", ")", "\n", "return", "\n", "\n", "", "download_url", "(", "self", ".", "url", ",", "self", ".", "root", ",", "self", ".", "filename", ",", "self", ".", "tgz_md5", ")", "\n", "\n", "# extract file", "\n", "with", "tarfile", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", ",", "\"r:gz\"", ")", "as", "tar", ":", "\n", "            ", "tar", ".", "extractall", "(", "path", "=", "self", ".", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MiraBest_full.__repr__": [[169, 180], ["mirabest.MiraBest_full.__len__", "mirabest.MiraBest_full.transform.__repr__().replace", "mirabest.MiraBest_full.target_transform.__repr__().replace", "mirabest.MiraBest_full.transform.__repr__", "mirabest.MiraBest_full.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MiraBest_full.__len__", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MiraBest_full.__repr__", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MiraBest_full.__repr__"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "tmp", "=", "'train'", "if", "self", ".", "train", "is", "True", "else", "'test'", "\n", "fmt_str", "+=", "'    Split: {}\\n'", ".", "format", "(", "tmp", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MBFRConfident.__init__": [[189, 222], ["mirabest.MiraBest_full.__init__", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "targets[].tolist", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "targets[].tolist", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape"], "methods", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MBFRConfident", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "fr1_list", "=", "[", "0", ",", "1", ",", "2", "]", "\n", "fr2_list", "=", "[", "5", ",", "6", "]", "\n", "exclude_list", "=", "[", "3", ",", "4", ",", "7", ",", "8", ",", "9", "]", "\n", "\n", "if", "exclude_list", "==", "[", "]", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "exclude", "=", "np", ".", "array", "(", "exclude_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "exclude_mask", "=", "~", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "exclude", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr1", "=", "np", ".", "array", "(", "fr1_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr2", "=", "np", ".", "array", "(", "fr2_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr1_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr1", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr2_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr2", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "targets", "[", "fr1_mask", "]", "=", "0", "# set all FRI to Class~0", "\n", "targets", "[", "fr2_mask", "]", "=", "1", "# set all FRII to Class~1", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "exclude_mask", "]", "\n", "self", ".", "targets", "=", "targets", "[", "exclude_mask", "]", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "exclude", "=", "np", ".", "array", "(", "exclude_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "exclude_mask", "=", "~", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "exclude", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr1", "=", "np", ".", "array", "(", "fr1_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr2", "=", "np", ".", "array", "(", "fr2_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr1_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr1", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr2_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr2", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "targets", "[", "fr1_mask", "]", "=", "0", "# set all FRI to Class~0", "\n", "targets", "[", "fr2_mask", "]", "=", "1", "# set all FRII to Class~1", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "exclude_mask", "]", "\n", "self", ".", "targets", "=", "targets", "[", "exclude_mask", "]", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MBFRUncertain.__init__": [[230, 263], ["mirabest.MiraBest_full.__init__", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "targets[].tolist", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "targets[].tolist", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape"], "methods", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MBFRUncertain", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "fr1_list", "=", "[", "3", ",", "4", "]", "\n", "fr2_list", "=", "[", "7", "]", "\n", "exclude_list", "=", "[", "0", ",", "1", ",", "2", ",", "5", ",", "6", ",", "8", ",", "9", "]", "\n", "\n", "if", "exclude_list", "==", "[", "]", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "exclude", "=", "np", ".", "array", "(", "exclude_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "exclude_mask", "=", "~", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "exclude", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr1", "=", "np", ".", "array", "(", "fr1_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr2", "=", "np", ".", "array", "(", "fr2_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr1_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr1", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr2_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr2", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "targets", "[", "fr1_mask", "]", "=", "0", "# set all FRI to Class~0", "\n", "targets", "[", "fr2_mask", "]", "=", "1", "# set all FRII to Class~1", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "exclude_mask", "]", "\n", "self", ".", "targets", "=", "targets", "[", "exclude_mask", "]", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "exclude", "=", "np", ".", "array", "(", "exclude_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "exclude_mask", "=", "~", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "exclude", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr1", "=", "np", ".", "array", "(", "fr1_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr2", "=", "np", ".", "array", "(", "fr2_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "fr1_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr1", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "fr2_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "fr2", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "targets", "[", "fr1_mask", "]", "=", "0", "# set all FRI to Class~0", "\n", "targets", "[", "fr2_mask", "]", "=", "1", "# set all FRII to Class~1", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "exclude_mask", "]", "\n", "self", ".", "targets", "=", "targets", "[", "exclude_mask", "]", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.mirabest.MBHybrid.__init__": [[271, 304], ["mirabest.MiraBest_full.__init__", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "targets[].tolist", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "targets[].tolist", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape", "numpy.array.reshape"], "methods", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MBHybrid", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "h1_list", "=", "[", "8", "]", "\n", "h2_list", "=", "[", "9", "]", "\n", "exclude_list", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", "\n", "\n", "if", "exclude_list", "==", "[", "]", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "exclude", "=", "np", ".", "array", "(", "exclude_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "exclude_mask", "=", "~", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "exclude", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "h1", "=", "np", ".", "array", "(", "h1_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "h2", "=", "np", ".", "array", "(", "h2_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "h1_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "h1", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "h2_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "h2", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "targets", "[", "h1_mask", "]", "=", "0", "# set all FRI to Class~0", "\n", "targets", "[", "h2_mask", "]", "=", "1", "# set all FRII to Class~1", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "exclude_mask", "]", "\n", "self", ".", "targets", "=", "targets", "[", "exclude_mask", "]", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "exclude", "=", "np", ".", "array", "(", "exclude_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "exclude_mask", "=", "~", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "exclude", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "h1", "=", "np", ".", "array", "(", "h1_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "h2", "=", "np", ".", "array", "(", "h2_list", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "h1_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "h1", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "h2_mask", "=", "(", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", "==", "h2", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "targets", "[", "h1_mask", "]", "=", "0", "# set all FRI to Class~0", "\n", "targets", "[", "h2_mask", "]", "=", "1", "# set all FRII to Class~1", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "exclude_mask", "]", "\n", "self", ".", "targets", "=", "targets", "[", "exclude_mask", "]", ".", "tolist", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.GaussianPrior.__init__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.GaussianPrior.log_prob": [[10, 15], ["torch.distributions.Normal().log_prob", "torch.distributions.Normal"], "methods", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "lnP", "=", "torch", ".", "distributions", ".", "Normal", "(", "0", ",", "self", ".", "var", ")", ".", "log_prob", "(", "x", ")", "\n", "\n", "return", "lnP", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.GMMPrior.__init__": [[20, 26], ["len", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parms", ")", ":", "\n", "\n", "        ", "if", "len", "(", "parms", ")", "!=", "3", ":", "\n", "            ", "print", "(", "\"Incorrect dimensions for prior parameters\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pi", ",", "self", ".", "stddev1", ",", "self", ".", "stddev2", "=", "parms", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.GMMPrior.log_prob": [[27, 37], ["torch.pow", "torch.pow", "torch.log", "torch.exp", "torch.exp", "numpy.sqrt", "numpy.sqrt", "torch.pow", "torch.pow"], "methods", ["None"], ["", "", "def", "log_prob", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "var1", "=", "torch", ".", "pow", "(", "self", ".", "stddev1", ",", "2", ")", "\n", "var2", "=", "torch", ".", "pow", "(", "self", ".", "stddev2", ",", "2", ")", "\n", "prob", "=", "(", "torch", ".", "exp", "(", "-", "torch", ".", "pow", "(", "(", "x", "-", "0", ")", ",", "2", ")", "/", "(", "2", "*", "var1", ")", ")", "/", "(", "self", ".", "stddev1", "*", "np", ".", "sqrt", "(", "2", "*", "np", ".", "pi", ")", ")", ")", "*", "self", ".", "pi", "\n", "prob", "+=", "(", "torch", ".", "exp", "(", "-", "torch", ".", "pow", "(", "(", "x", "-", "0", ")", ",", "2", ")", "/", "(", "2", "*", "var2", ")", ")", "/", "(", "self", ".", "stddev2", "*", "np", ".", "sqrt", "(", "2", "*", "np", ".", "pi", ")", ")", ")", "*", "(", "1", "-", "self", ".", "pi", ")", "\n", "\n", "logprob", "=", "torch", ".", "log", "(", "prob", ")", "\n", "\n", "return", "logprob", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplacePrior.__init__": [[42, 45], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parms", ")", ":", "\n", "\n", "        ", "self", ".", "mu", ",", "self", ".", "b", "=", "parms", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplacePrior.log_prob": [[46, 51], ["numpy.log", "abs"], "methods", ["None"], ["", "def", "log_prob", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "logprob", "=", "np", ".", "log", "(", "1", "/", "(", "2", "*", "self", ".", "b", ")", ")", "-", "abs", "(", "x", "-", "self", ".", "mu", ")", "/", "self", ".", "b", "\n", "\n", "return", "logprob", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.__init__": [[54, 57], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parms", ")", ":", "\n", "\n", "        ", "self", ".", "pi", ",", "self", ".", "b1", ",", "self", ".", "b2", "=", "parms", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.priors.LaplaceMixture.log_prob": [[58, 65], ["torch.log", "torch.exp", "torch.exp", "abs", "abs"], "methods", ["None"], ["", "def", "log_prob", "(", "self", ",", "x", ")", ":", "\n", "        ", "mu", "=", "0", "\n", "prob", "=", "self", ".", "pi", "*", "(", "1", "/", "(", "2", "*", "self", ".", "b1", ")", "*", "torch", ".", "exp", "(", "-", "abs", "(", "x", "-", "mu", ")", "/", "self", ".", "b1", ")", ")", "\n", "prob", "+=", "(", "1", "-", "self", ".", "pi", ")", "*", "(", "1", "/", "(", "2", "*", "self", ".", "b2", ")", "*", "torch", ".", "exp", "(", "-", "abs", "(", "x", "-", "mu", ")", "/", "self", ".", "b2", ")", ")", "\n", "logprob", "=", "torch", ".", "log", "(", "prob", ")", "\n", "\n", "return", "logprob", "\n", "#------------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.utils.density_snr": [[15, 40], ["model.to.to", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.exp", "torch.device", "torch.device", "model.to.to", "model.to.h1.w.to().detach().numpy().flatten", "model.to.h2.w.to().detach().numpy().flatten", "model.to.out.w.to().detach().numpy().flatten", "model.to.h1.w_mu.detach().numpy().flatten", "model.to.h2.w_mu.detach().numpy().flatten", "model.to.out.w_mu.detach().numpy().flatten", "model.to.h1.w_rho.detach().numpy().flatten", "model.to.h2.w_rho.detach().numpy().flatten", "model.to.out.w_rho.detach().numpy().flatten", "abs", "numpy.log10", "numpy.sort", "torch.cuda.is_available", "torch.cuda.is_available", "model.to.h1.w.to().detach().numpy", "model.to.h2.w.to().detach().numpy", "model.to.out.w.to().detach().numpy", "model.to.h1.w_mu.detach().numpy", "model.to.h2.w_mu.detach().numpy", "model.to.out.w_mu.detach().numpy", "model.to.h1.w_rho.detach().numpy", "model.to.h2.w_rho.detach().numpy", "model.to.out.w_rho.detach().numpy", "model.to.h1.w.to().detach", "model.to.h2.w.to().detach", "model.to.out.w.to().detach", "model.to.h1.w_mu.detach", "model.to.h2.w_mu.detach", "model.to.out.w_mu.detach", "model.to.h1.w_rho.detach", "model.to.h2.w_rho.detach", "model.to.out.w_rho.detach", "model.to.h1.w.to", "model.to.h2.w.to", "model.to.out.w.to", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["None"], ["def", "density_snr", "(", "model", ")", ":", "\n", "    ", "device", "=", "\"cpu\"", "\n", "model", "=", "model", ".", "to", "(", "device", "=", "\"cpu\"", ")", "\n", "\n", "weights", "=", "np", ".", "append", "(", "model", ".", "h1", ".", "w", ".", "to", "(", "device", "=", "torch", ".", "device", "(", "device", ")", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "model", ".", "h2", ".", "w", ".", "to", "(", "device", "=", "torch", ".", "device", "(", "device", ")", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "weights", "=", "np", ".", "append", "(", "weights", ",", "model", ".", "out", ".", "w", ".", "to", "(", "device", "=", "torch", ".", "device", "(", "device", ")", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "#get trained posterior on weights for the 2 hidden layers", "\n", "mu_post_w", "=", "np", ".", "append", "(", "model", ".", "h1", ".", "w_mu", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "model", ".", "h2", ".", "w_mu", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "mu_post_w", "=", "np", ".", "append", "(", "mu_post_w", ",", "model", ".", "out", ".", "w_mu", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "rho_post_w", "=", "np", ".", "append", "(", "model", ".", "h1", ".", "w_rho", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "model", ".", "h2", ".", "w_rho", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "rho_post_w", "=", "np", ".", "append", "(", "rho_post_w", ",", "model", ".", "out", ".", "w_rho", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "#convert rho to sigma", "\n", "#sigma_post_w = np.log(1+np.exp(rho_post_w))", "\n", "sigma_post_w", "=", "np", ".", "exp", "(", "rho_post_w", ")", "\n", "#calculate SNR = |mu_weight|/sigma_weight", "\n", "SNR", "=", "abs", "(", "mu_post_w", ")", "/", "sigma_post_w", "\n", "db_SNR", "=", "10", "*", "np", ".", "log10", "(", "SNR", ")", "\n", "#order the weights by SNR", "\n", "sorted_SNR", "=", "np", ".", "sort", "(", "db_SNR", ")", "[", ":", ":", "-", "1", "]", "\n", "#remove x% of weights with lowest SNR", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "return", "weights", ",", "db_SNR", "\n", "#%%", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.utils.density_snr_conv": [[41, 79], ["model.to.to", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.exp", "torch.device", "torch.device", "model.to.to", "model.to.h1.w_mu.detach().numpy().flatten", "model.to.h2.w_mu.detach().numpy().flatten", "model.to.out.w_mu.detach().numpy().flatten", "model.to.conv1.w_mu.detach().numpy().flatten", "model.to.conv2.w_mu.detach().numpy().flatten", "model.to.conv3.w_mu.detach().numpy().flatten", "model.to.conv4.w_mu.detach().numpy().flatten", "model.to.h1.w_rho.detach().numpy().flatten", "model.to.h2.w_rho.detach().numpy().flatten", "model.to.out.w_rho.detach().numpy().flatten", "model.to.conv1.w_rho.detach().numpy().flatten", "model.to.conv2.w_rho.detach().numpy().flatten", "model.to.conv3.w_rho.detach().numpy().flatten", "model.to.conv4.w_rho.detach().numpy().flatten", "abs", "numpy.log10", "numpy.sort", "torch.cuda.is_available", "torch.cuda.is_available", "model.to.h1.w_mu.detach().numpy", "model.to.h2.w_mu.detach().numpy", "model.to.out.w_mu.detach().numpy", "model.to.conv1.w_mu.detach().numpy", "model.to.conv2.w_mu.detach().numpy", "model.to.conv3.w_mu.detach().numpy", "model.to.conv4.w_mu.detach().numpy", "model.to.h1.w_rho.detach().numpy", "model.to.h2.w_rho.detach().numpy", "model.to.out.w_rho.detach().numpy", "model.to.conv1.w_rho.detach().numpy", "model.to.conv2.w_rho.detach().numpy", "model.to.conv3.w_rho.detach().numpy", "model.to.conv4.w_rho.detach().numpy", "model.to.h1.w_mu.detach", "model.to.h2.w_mu.detach", "model.to.out.w_mu.detach", "model.to.conv1.w_mu.detach", "model.to.conv2.w_mu.detach", "model.to.conv3.w_mu.detach", "model.to.conv4.w_mu.detach", "model.to.h1.w_rho.detach", "model.to.h2.w_rho.detach", "model.to.out.w_rho.detach", "model.to.conv1.w_rho.detach", "model.to.conv2.w_rho.detach", "model.to.conv3.w_rho.detach", "model.to.conv4.w_rho.detach"], "function", ["None"], ["", "def", "density_snr_conv", "(", "model", ")", ":", "\n", "    ", "device", "=", "\"cpu\"", "\n", "model", "=", "model", ".", "to", "(", "device", "=", "\"cpu\"", ")", "\n", "'''\n    weights =  np.append(model.conv1.w.to(device=torch.device(device)).detach().numpy().flatten(), model.conv2.w.to(device=torch.device(device)).detach().numpy().flatten())\n    weights = np.append(weights, model.conv3.w.to(device=torch.device(device)).detach().numpy().flatten())\n    weights = np.append(weights, model.conv4.w.to(device=torch.device(device)).detach().numpy().flatten())\n    weights = np.append(weights,model.h1.w.to(device=torch.device(device)).detach().numpy().flatten() )\n    weights =  np.append(weights, model.h2.w.to(device=torch.device(device)).detach().numpy().flatten())\n    weights = np.append(weights, model.out.w.to(device=torch.device(device)).detach().numpy().flatten())\n\n    '''", "\n", "#get trained posterior on weights for the 2 hidden layers", "\n", "mu_post_w", "=", "np", ".", "append", "(", "model", ".", "h1", ".", "w_mu", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "model", ".", "h2", ".", "w_mu", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "mu_post_w", "=", "np", ".", "append", "(", "mu_post_w", ",", "model", ".", "out", ".", "w_mu", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "mu_post_w", "=", "np", ".", "append", "(", "mu_post_w", ",", "model", ".", "conv1", ".", "w_mu", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "mu_post_w", "=", "np", ".", "append", "(", "mu_post_w", ",", "model", ".", "conv2", ".", "w_mu", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "mu_post_w", "=", "np", ".", "append", "(", "mu_post_w", ",", "model", ".", "conv3", ".", "w_mu", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "mu_post_w", "=", "np", ".", "append", "(", "mu_post_w", ",", "model", ".", "conv4", ".", "w_mu", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "rho_post_w", "=", "np", ".", "append", "(", "model", ".", "h1", ".", "w_rho", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "model", ".", "h2", ".", "w_rho", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "rho_post_w", "=", "np", ".", "append", "(", "rho_post_w", ",", "model", ".", "out", ".", "w_rho", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "rho_post_w", "=", "np", ".", "append", "(", "rho_post_w", ",", "model", ".", "conv1", ".", "w_rho", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "rho_post_w", "=", "np", ".", "append", "(", "rho_post_w", ",", "model", ".", "conv2", ".", "w_rho", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "rho_post_w", "=", "np", ".", "append", "(", "rho_post_w", ",", "model", ".", "conv3", ".", "w_rho", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "rho_post_w", "=", "np", ".", "append", "(", "rho_post_w", ",", "model", ".", "conv4", ".", "w_rho", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "#convert rho to sigma", "\n", "#sigma_post_w = np.log(1+np.exp(rho_post_w))", "\n", "sigma_post_w", "=", "np", ".", "exp", "(", "rho_post_w", ")", "\n", "#calculate SNR = |mu_weight|/sigma_weight", "\n", "SNR", "=", "abs", "(", "mu_post_w", ")", "/", "sigma_post_w", "\n", "db_SNR", "=", "10", "*", "np", ".", "log10", "(", "SNR", ")", "\n", "#order the weights by SNR", "\n", "sorted_SNR", "=", "np", ".", "sort", "(", "db_SNR", ")", "[", ":", ":", "-", "1", "]", "\n", "#remove x% of weights with lowest SNR", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "return", "mu_post_w", ",", "db_SNR", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.utils.train": [[80, 116], ["len", "enumerate", "model.train", "model.zero_grad", "model.sample_elbo", "train_loss.append", "train_loss_c.append", "train_loss_l.append", "trainloss_c_conv.append", "trainloss_c_linear.append", "train_accs.append", "loss.backward", "optimizer.step", "x_train.to", "y_train.to", "len", "loss.item", "len", "complexity_cost.item", "len", "likelihood_cost.item", "len", "conv_complexity.item", "len", "linear_complexity.item", "len", "acc.mean().item", "len", "acc.mean", "pred.argmax"], "function", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.utils.train", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_ConvBBB.sample_elbo"], ["", "def", "train", "(", "model", ",", "train_loader", ",", "optimizer", ",", "device", ",", "T", ",", "burnin", ",", "reduction", ")", ":", "\n", "\n", "    ", "train_loss", ",", "train_accs", "=", "[", "]", ",", "[", "]", ";", "acc", "=", "0", "\n", "train_loss_c", ",", "train_loss_l", "=", "[", "]", ",", "[", "]", "\n", "\n", "trainloss_c_conv", ",", "trainloss_c_linear", "=", "[", "]", ",", "[", "]", "\n", "\n", "num_batches_train", "=", "len", "(", "train_loader", ")", "\n", "for", "batch", ",", "(", "x_train", ",", "y_train", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "x_train", ",", "y_train", "=", "x_train", ".", "to", "(", "device", ")", ",", "y_train", ".", "to", "(", "device", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "#conv", "\n", "loss", ",", "pred", ",", "complexity_cost", ",", "likelihood_cost", ",", "conv_complexity", ",", "linear_complexity", "=", "model", ".", "sample_elbo", "(", "x_train", ",", "y_train", ",", "1", ",", "batch", ",", "num_batches_train", ",", "samples_batch", "=", "len", "(", "y_train", ")", ",", "T", "=", "T", ",", "burnin", "=", "burnin", ",", "reduction", "=", "reduction", ")", "\n", "#mlp", "\n", "#loss, pred, complexity_cost, likelihood_cost = model.sample_elbo(x_train, y_train, 1, batch, num_batches_train, samples_batch=len(y_train), T=T, burnin=burnin, reduction=reduction)", "\n", "\n", "train_loss", ".", "append", "(", "loss", ".", "item", "(", ")", "*", "len", "(", "y_train", ")", ")", "\n", "\n", "#mlp and conv", "\n", "train_loss_c", ".", "append", "(", "complexity_cost", ".", "item", "(", ")", "*", "len", "(", "y_train", ")", ")", "\n", "train_loss_l", ".", "append", "(", "likelihood_cost", ".", "item", "(", ")", "*", "len", "(", "y_train", ")", ")", "\n", "\n", "#conv", "\n", "trainloss_c_conv", ".", "append", "(", "conv_complexity", ".", "item", "(", ")", "*", "len", "(", "y_train", ")", ")", "\n", "trainloss_c_linear", ".", "append", "(", "linear_complexity", ".", "item", "(", ")", "*", "len", "(", "y_train", ")", ")", "\n", "\n", "acc", "=", "(", "pred", ".", "argmax", "(", "dim", "=", "-", "1", ")", "==", "y_train", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "mean", "(", ")", "\n", "train_accs", ".", "append", "(", "acc", ".", "mean", "(", ")", ".", "item", "(", ")", "*", "len", "(", "y_train", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "return", "train_loss", ",", "train_loss_c", ",", "train_loss_l", ",", "train_accs", ",", "trainloss_c_conv", ",", "trainloss_c_linear", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.utils.validate": [[117, 169], ["len", "models.Classifier_ConvBBB().to", "Classifier_ConvBBB().to.load_state_dict", "torch.no_grad", "torch.no_grad", "enumerate", "torch.load", "torch.load", "Classifier_ConvBBB().to.eval", "Classifier_ConvBBB().to.sample_elbo", "test_loss.append", "test_loss_c.append", "test_loss_l.append", "testloss_c_conv.append", "testloss_c_linear.append", "test_accs.append", "models.Classifier_ConvBBB", "x_test.to", "y_test.to", "len", "loss.item", "len", "complexity_cost.item", "len", "likelihood_cost.item", "len", "conv_complexity.item", "len", "linear_complexity.item", "len", "acc.mean().item", "len", "acc.mean", "pred.mean().argmax", "pred.mean"], "function", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_ConvBBB.sample_elbo"], ["", "def", "validate", "(", "model", ",", "validation_loader", ",", "device", ",", "T", ",", "burnin", ",", "reduction", ",", "epoch", ",", "prior", ",", "prior_var", ")", ":", "\n", "#conv", "\n", "    ", "num_batches_valid", "=", "len", "(", "validation_loader", ")", "\n", "input_ch", "=", "1", "\n", "out_ch", "=", "2", "\n", "kernel_size", "=", "5", "\n", "\n", "'''\n    #mlp\n    input_size = 150*150\n    hidden_size = 200#800\n    output_size = 2\n    imsize=150\n    '''", "\n", "if", "(", "epoch", "==", "0", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "#mlp", "\n", "#model = Classifier_BBB(input_size, hidden_size, output_size, prior_var, prior, imsize).to(device)", "\n", "#conv", "\n", "        ", "model", "=", "Classifier_ConvBBB", "(", "input_ch", ",", "out_ch", ",", "kernel_size", ",", "prior_var", ",", "prior", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"model.pt\"", ")", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "test_loss", ",", "test_accs", "=", "[", "]", ",", "[", "]", ";", "acc", "=", "0", "\n", "test_loss_c", ",", "test_loss_l", "=", "[", "]", ",", "[", "]", "\n", "\n", "testloss_c_conv", ",", "testloss_c_linear", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "(", "x_test", ",", "y_test", ")", "in", "enumerate", "(", "validation_loader", ")", ":", "\n", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "x_test", ",", "y_test", "=", "x_test", ".", "to", "(", "device", ")", ",", "y_test", ".", "to", "(", "device", ")", "\n", "#conv", "\n", "loss", ",", "pred", ",", "complexity_cost", ",", "likelihood_cost", ",", "conv_complexity", ",", "linear_complexity", "=", "model", ".", "sample_elbo", "(", "x_test", ",", "y_test", ",", "1", ",", "i", ",", "num_batches_valid", ",", "samples_batch", "=", "len", "(", "y_test", ")", ",", "T", "=", "T", ",", "burnin", "=", "burnin", ",", "reduction", "=", "reduction", ")", "\n", "#mlp", "\n", "#loss, pred, complexity_cost, likelihood_cost = model.sample_elbo(x_test, y_test, 1, i, num_batches_valid, samples_batch=len(y_test), T=T, burnin=burnin, reduction=reduction)", "\n", "\n", "acc", "=", "(", "pred", ".", "mean", "(", "dim", "=", "0", ")", ".", "argmax", "(", "dim", "=", "-", "1", ")", "==", "y_test", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "mean", "(", ")", "\n", "\n", "test_loss", ".", "append", "(", "loss", ".", "item", "(", ")", "*", "len", "(", "y_test", ")", ")", "\n", "test_loss_c", ".", "append", "(", "complexity_cost", ".", "item", "(", ")", "*", "len", "(", "y_test", ")", ")", "\n", "test_loss_l", ".", "append", "(", "likelihood_cost", ".", "item", "(", ")", "*", "len", "(", "y_test", ")", ")", "\n", "\n", "#conv only", "\n", "testloss_c_conv", ".", "append", "(", "conv_complexity", ".", "item", "(", ")", "*", "len", "(", "y_test", ")", ")", "\n", "testloss_c_linear", ".", "append", "(", "linear_complexity", ".", "item", "(", ")", "*", "len", "(", "y_test", ")", ")", "\n", "\n", "test_accs", ".", "append", "(", "acc", ".", "mean", "(", ")", ".", "item", "(", ")", "*", "len", "(", "y_test", ")", ")", "\n", "\n", "\n", "", "return", "test_loss", ",", "test_loss_c", ",", "test_loss_l", ",", "test_accs", ",", "testloss_c_conv", ",", "testloss_c_linear", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.utils.test": [[170, 207], ["len", "torch.no_grad", "torch.no_grad", "model.eval", "enumerate", "numpy.sum", "numpy.sum", "model.sample_elbo", "test_loss.append", "test_loss_c.append", "test_loss_l.append", "testloss_c_conv.append", "testloss_c_linear.append", "test_accs.append", "x_test.to", "y_test.to", "len", "numpy.sum", "len", "loss.item", "len", "complexity_cost.item", "len", "likelihood_cost.item", "len", "conv_complexity.item", "len", "linear_complexity.item", "len", "acc.mean().item", "len", "acc.mean", "pred.mean().argmax", "pred.mean"], "function", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_ConvBBB.sample_elbo"], ["", "", "def", "test", "(", "model", ",", "test_loader", ",", "device", ",", "T", ",", "burnin", ",", "reduction", ")", ":", "\n", "\n", "\n", "    ", "num_batches_test", "=", "len", "(", "test_loader", ")", "\n", "test_sampler", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "test_loss", ",", "test_accs", "=", "[", "]", ",", "[", "]", ";", "acc", "=", "0", "\n", "test_loss_c", ",", "test_loss_l", "=", "[", "]", ",", "[", "]", "\n", "testloss_c_conv", ",", "testloss_c_linear", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "(", "x_test", ",", "y_test", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "\n", "            ", "x_test", ",", "y_test", "=", "x_test", ".", "to", "(", "device", ")", ",", "y_test", ".", "to", "(", "device", ")", "\n", "#samples = 5?", "\n", "#conv", "\n", "loss", ",", "pred", ",", "complexity_cost", ",", "likelihood_cost", ",", "conv_complexity", ",", "linear_complexity", "=", "model", ".", "sample_elbo", "(", "x_test", ",", "y_test", ",", "1", ",", "i", ",", "num_batches_test", ",", "samples_batch", "=", "len", "(", "y_test", ")", ",", "T", "=", "T", ",", "burnin", "=", "burnin", ",", "reduction", "=", "reduction", ")", "\n", "#mlp", "\n", "#loss, pred, complexity_cost, likelihood_cost = model.sample_elbo(x_test, y_test, 1, i, num_batches_test,samples_batch=len(y_test), T=T, burnin=burnin, reduction=reduction)", "\n", "\n", "acc", "=", "(", "pred", ".", "mean", "(", "dim", "=", "0", ")", ".", "argmax", "(", "dim", "=", "-", "1", ")", "==", "y_test", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "mean", "(", ")", "\n", "test_loss", ".", "append", "(", "loss", ".", "item", "(", ")", "*", "len", "(", "y_test", ")", ")", "\n", "test_loss_c", ".", "append", "(", "complexity_cost", ".", "item", "(", ")", "*", "len", "(", "y_test", ")", ")", "\n", "test_loss_l", ".", "append", "(", "likelihood_cost", ".", "item", "(", ")", "*", "len", "(", "y_test", ")", ")", "\n", "\n", "#conv ", "\n", "testloss_c_conv", ".", "append", "(", "conv_complexity", ".", "item", "(", ")", "*", "len", "(", "y_test", ")", ")", "\n", "testloss_c_linear", ".", "append", "(", "linear_complexity", ".", "item", "(", ")", "*", "len", "(", "y_test", ")", ")", "\n", "\n", "test_accs", ".", "append", "(", "acc", ".", "mean", "(", ")", ".", "item", "(", ")", "*", "len", "(", "y_test", ")", ")", "\n", "test_sampler", "=", "test_sampler", "+", "len", "(", "y_test", ")", "\n", "\n", "\n", "\n", "", "", "testaccs", "=", "np", ".", "sum", "(", "test_accs", ")", "/", "test_sampler", "\n", "testerr", "=", "(", "100.", "*", "(", "1", "-", "np", ".", "sum", "(", "test_accs", ")", "/", "test_sampler", ")", ")", "\n", "testloss", "=", "np", ".", "sum", "(", "test_loss", ")", "/", "test_sampler", "\n", "return", "testerr", "\n", "#%%", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.utils.parse_args": [[208, 218], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "vars"], "function", ["None"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n        Parse the command line arguments\n        \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-C'", ",", "'--config'", ",", "default", "=", "\"config_bbb.txt\"", ",", "required", "=", "True", ",", "help", "=", "'Name of the input config file'", ")", "\n", "\n", "args", ",", "__", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "return", "vars", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.utils.parse_config": [[221, 244], ["configparser.ConfigParser", "ConfigParser.ConfigParser.read", "dict", "ConfigParser.ConfigParser.sections", "ConfigParser.ConfigParser.options", "dict", "ast.literal_eval", "ConfigParser.ConfigParser.get", "ValueError", "ConfigParser.ConfigParser.get"], "function", ["None"], ["", "def", "parse_config", "(", "filename", ")", ":", "\n", "\n", "    ", "config", "=", "ConfigParser", ".", "ConfigParser", "(", "allow_no_value", "=", "True", ")", "\n", "config", ".", "read", "(", "filename", ")", "\n", "\n", "# Build a nested dictionary with tasknames at the top level", "\n", "# and parameter values one level down.", "\n", "taskvals", "=", "dict", "(", ")", "\n", "for", "section", "in", "config", ".", "sections", "(", ")", ":", "\n", "\n", "        ", "if", "section", "not", "in", "taskvals", ":", "\n", "            ", "taskvals", "[", "section", "]", "=", "dict", "(", ")", "\n", "\n", "", "for", "option", "in", "config", ".", "options", "(", "section", ")", ":", "\n", "# Evaluate to the right type()", "\n", "            ", "try", ":", "\n", "                ", "taskvals", "[", "section", "]", "[", "option", "]", "=", "ast", ".", "literal_eval", "(", "config", ".", "get", "(", "section", ",", "option", ")", ")", "\n", "", "except", "(", "ValueError", ",", "SyntaxError", ")", ":", "\n", "                ", "err", "=", "\"Cannot format field '{0}' in config file '{1}'\"", ".", "format", "(", "option", ",", "filename", ")", "\n", "err", "+=", "\", which is currently set to {0}. Ensure strings are in 'quotes'.\"", ".", "format", "(", "config", ".", "get", "(", "section", ",", "option", ")", ")", "\n", "raise", "ValueError", "(", "err", ")", "\n", "\n", "", "", "", "return", "taskvals", ",", "config", "\n", "#%%", "\n"]], "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.utils.uncert": [[249, 388], ["torchvision.Compose", "numpy.arange", "mirabest.MBFRConfident", "mirabest.MBFRConfident", "len", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "range", "numpy.tile", "matplotlib.figure", "matplotlib.subplot", "matplotlib.scatter", "matplotlib.title", "matplotlib.xticks", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.show", "numpy.array", "numpy.array", "numpy.mean", "numpy.std", "print", "print", "uncertainty.entropy_MI", "print", "print", "print", "uncertainty.overlapping", "print", "uncertainty.overlapping", "print", "uncertainty.GMM_logits", "matplotlib.figure", "matplotlib.axes().set_facecolor", "matplotlib.scatter", "matplotlib.xticks", "torchvision.ToTensor", "torchvision.Normalize", "mirabest.MBFRUncertain", "mirabest.MBFRUncertain", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.unsqueeze.detach().numpy().flatten", "torch.no_grad", "torch.no_grad", "model.eval", "range", "numpy.exp", "np.array.append", "logit_arr.append", "numpy.arange", "numpy.arange", "open", "csv.writer", "csv.writer.writerow", "mirabest.MBHybrid", "mirabest.MBHybrid", "print", "model.sample_elbo", "output_.append", "logits_.append", "numpy.array", "numpy.array", "matplotlib.axes", "torch.unsqueeze.detach().numpy", "np.tile.to", "torch.unsqueeze.to", "len", "str", "torch.unsqueeze.detach"], "function", ["home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.uncertainty.entropy_MI", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.uncertainty.overlapping", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.uncertainty.overlapping", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.uncertainty.GMM_logits", "home.repos.pwc.inspect_result.devinamhn_radiogalaxies-bbb.None.models.Classifier_ConvBBB.sample_elbo"], ["def", "uncert", "(", "model", ",", "test_data_uncert", ",", "device", ",", "T", ",", "burnin", ",", "reduction", ",", "csvfile", ",", "pruning_", ",", "path", ")", ":", "\n", "    ", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "(", "0.0031", ",", ")", ",", "(", "0.0350", ",", ")", ")", "]", ")", "\n", "\n", "\n", "#options for test_data and test_data1", "\n", "if", "(", "test_data_uncert", "==", "'MBFRConfident'", ")", ":", "\n", "# confident", "\n", "        ", "test_data", "=", "mirabest", ".", "MBFRConfident", "(", "path", ",", "train", "=", "False", ",", "\n", "transform", "=", "transform", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ")", "\n", "\n", "test_data1", "=", "mirabest", ".", "MBFRConfident", "(", "path", ",", "train", "=", "False", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ")", "\n", "data_type", "=", "'Conf'", "\n", "", "elif", "(", "test_data_uncert", "==", "'MBFRUncertain'", ")", ":", "\n", "# uncertain", "\n", "\n", "        ", "test_data", "=", "mirabest", ".", "MBFRUncertain", "(", "path", ",", "train", "=", "False", ",", "\n", "transform", "=", "transform", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ")", "\n", "\n", "test_data1", "=", "mirabest", ".", "MBFRUncertain", "(", "path", ",", "train", "=", "False", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ")", "\n", "data_type", "=", "'Uncert'", "\n", "", "elif", "(", "test_data_uncert", "==", "'MBHybrid'", ")", ":", "\n", "#hybrid", "\n", "        ", "test_data", "=", "mirabest", ".", "MBHybrid", "(", "path", ",", "train", "=", "True", ",", "\n", "transform", "=", "transform", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ")", "\n", "test_data1", "=", "mirabest", ".", "MBHybrid", "(", "path", ",", "train", "=", "True", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ")", "\n", "data_type", "=", "'Hybrid'", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Test data for uncertainty quantification misspecified\"", ")", "\n", "\n", "", "logit", "=", "True", "\n", "indices", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "test_data", ")", ",", "1", ")", "\n", "num_batches_test", "=", "1", "\n", "for", "index", "in", "(", "indices", ")", ":", "\n", "\n", "        ", "x", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "tensor", "(", "test_data", "[", "index", "]", "[", "0", "]", ")", ",", "0", ")", "\n", "y", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "tensor", "(", "test_data", "[", "index", "]", "[", "1", "]", ")", ",", "0", ")", "\n", "#print(\"target is\",y)", "\n", "target", "=", "y", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "[", "0", "]", "\n", "samples_iter", "=", "200", "\n", "#for a single datapoint", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output_", "=", "[", "]", "\n", "logits_", "=", "[", "]", "\n", "#accs_ =[]", "\n", "i", "=", "1", "\n", "model", ".", "eval", "(", ")", "\n", "for", "j", "in", "range", "(", "samples_iter", ")", ":", "\n", "                ", "x_test", ",", "y_test", "=", "x", ".", "to", "(", "device", ")", ",", "y", ".", "to", "(", "device", ")", "\n", "loss", ",", "pred", ",", "complexity_cost", ",", "likelihood_cost", ",", "conv_complexity", ",", "linear_complexity", ",", "logits", "=", "model", ".", "sample_elbo", "(", "x_test", ",", "y_test", ",", "1", ",", "i", ",", "num_batches_test", ",", "samples_batch", "=", "len", "(", "y_test", ")", ",", "T", "=", "T", ",", "burnin", "=", "burnin", ",", "reduction", "=", "reduction", ",", "logit", "=", "logit", ")", "\n", "#acc = (pred.mean(dim=0).argmax(dim=-1) == y_test).to(torch.float32)", "\n", "\n", "output_", ".", "append", "(", "pred", ")", "\n", "logits_", ".", "append", "(", "logits", ")", "\n", "#accs_.append(acc)", "\n", "\n", "", "", "softmax", "=", "[", "]", "\n", "logit_arr", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "samples_iter", ")", ":", "\n", "            ", "a", "=", "np", ".", "exp", "(", "np", ".", "array", "(", "output_", "[", "i", "]", "[", "0", "]", ")", ")", "\n", "softmax", ".", "append", "(", "a", "[", "0", "]", ")", "\n", "logit_arr", ".", "append", "(", "np", ".", "array", "(", "logits_", "[", "i", "]", "[", "0", "]", ")", ")", "\n", "\n", "", "x", "=", "[", "0", ",", "1", "]", "\n", "y", "=", "softmax", "[", "0", "]", "\n", "x", "=", "np", ".", "tile", "(", "x", ",", "(", "samples_iter", ",", "1", ")", ")", "\n", "\n", "if", "(", "target", "==", "0", ")", ":", "\n", "#label = 'FRI'", "\n", "            ", "label", "=", "'Conf'", "\n", "", "elif", "(", "target", "==", "1", ")", ":", "\n", "#label = 'FRII'", "\n", "            ", "label", "=", "'Uncert'", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "#plt.title(\"softmax probabilities\")", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "(", "2.6", ",", "4.8", ")", ",", "dpi", "=", "300", ")", "\n", "plt", ".", "rcParams", "[", "\"axes.grid\"", "]", "=", "False", "\n", "plt", ".", "subplot", "(", "(", "211", ")", ")", "\n", "plt", ".", "scatter", "(", "x", ",", "softmax", ",", "marker", "=", "'_'", ",", "linewidth", "=", "1", ",", "color", "=", "'b'", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "title", "(", "\"softmax outputs\"", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "0", ",", "2", ",", "1.0", ")", ")", "\n", "\n", "plt", ".", "subplot", "(", "(", "212", ")", ")", "\n", "plt", ".", "imshow", "(", "test_data1", "[", "index", "]", "[", "0", "]", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "#label = 'target = ' + str(test_data1[index][1])", "\n", "plt", ".", "title", "(", "'class'", "+", "str", "(", "target", ")", "+", "': '", "+", "label", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "softmax", "=", "np", ".", "array", "(", "softmax", ")", "\n", "y_logits", "=", "np", ".", "array", "(", "logit_arr", ")", "\n", "\n", "mean_logits", "=", "np", ".", "mean", "(", "y_logits", ",", "axis", "=", "0", ")", "\n", "var_logits", "=", "np", ".", "std", "(", "y_logits", ",", "axis", "=", "0", ")", "\n", "print", "(", "\"Mean of Logits\"", ",", "mean_logits", ")", "\n", "print", "(", "\"Stdev pf Logits\"", ",", "var_logits", ")", "\n", "\n", "entropy", ",", "mutual_info", ",", "entropy_singlepass", "=", "entropy_MI", "(", "softmax", ",", "samples_iter", ")", "\n", "\n", "print", "(", "\"Entropy:\"", ",", "entropy", ")", "\n", "print", "(", "\"Mutual Information:\"", ",", "mutual_info", ")", "\n", "print", "(", "\"Entropy of a single pass:\"", ",", "entropy_singlepass", ")", "\n", "\n", "softmax_eta", "=", "overlapping", "(", "softmax", "[", ":", ",", "0", "]", ",", "softmax", "[", ":", ",", "1", "]", ")", "\n", "print", "(", "\"Softmax Overlap Index\"", ",", "softmax_eta", ")", "\n", "\n", "logits_eta", "=", "overlapping", "(", "y_logits", "[", ":", ",", "0", "]", ",", "y_logits", "[", ":", ",", "1", "]", ")", "\n", "print", "(", "\"Logit-Space Overlap Index\"", ",", "logits_eta", ")", "\n", "\n", "covs", "=", "GMM_logits", "(", "y_logits", ",", "2", ")", "\n", "\n", "plt", ".", "figure", "(", "dpi", "=", "200", ")", "\n", "plt", ".", "rcParams", "[", "\"axes.grid\"", "]", "=", "False", "\n", "plt", ".", "axes", "(", ")", ".", "set_facecolor", "(", "'white'", ")", "\n", "plt", ".", "scatter", "(", "x", ",", "y_logits", ",", "marker", "=", "'_'", ",", "linewidth", "=", "1", ",", "color", "=", "'b'", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "\n", "\n", "\n", "pruning_", "=", "'Fisher'", "#'Fisher' #SNR#40%'", "\n", "data_type", "=", "'MBHybrid'", "\n", "# create output row:", "\n", "[", "'index'", ",", "'target'", ",", "'entropy'", ",", "'entropy_singlepass '", ",", "'mutual info'", ",", "'var_logits_0'", ",", "'var_logits_1'", ",", "'softmax_eta'", ",", "'logits_eta'", ",", "'GMM_covs'", ",", "'data type'", ",", "'label'", ",", "'pruning'", "]", "\n", "_results", "=", "[", "index", ",", "target", ",", "entropy", ",", "entropy_singlepass", ",", "mutual_info", ",", "var_logits", "[", "0", "]", ",", "var_logits", "[", "1", "]", ",", "softmax_eta", ",", "logits_eta", ",", "covs", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "covs", "[", "0", "]", "[", "0", "]", "[", "1", "]", ",", "covs", "[", "0", "]", "[", "1", "]", "[", "1", "]", ",", "covs", "[", "1", "]", "[", "0", "]", "[", "0", "]", ",", "covs", "[", "1", "]", "[", "0", "]", "[", "1", "]", ",", "covs", "[", "1", "]", "[", "1", "]", "[", "1", "]", ",", "data_type", ",", "label", ",", "pruning_", "]", "\n", "\n", "with", "open", "(", "csvfile", ",", "'a'", ",", "newline", "=", "\"\"", ")", "as", "f_out", ":", "\n", "            ", "writer", "=", "csv", ".", "writer", "(", "f_out", ",", "delimiter", "=", "','", ")", "\n", "writer", ".", "writerow", "(", "_results", ")", "\n", "\n"]]}