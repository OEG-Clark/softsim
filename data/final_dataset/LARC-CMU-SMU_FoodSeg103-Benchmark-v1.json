{"home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.None.setup.readme": [[3, 7], ["open", "f.read"], "function", ["None"], ["def", "readme", "(", ")", ":", "\n", "    ", "with", "open", "(", "'README.md'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "read", "(", ")", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.None.setup.get_version": [[12, 16], ["open", "exec", "locals", "compile", "f.read"], "function", ["None"], ["def", "get_version", "(", ")", ":", "\n", "    ", "with", "open", "(", "version_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "exec", "(", "compile", "(", "f", ".", "read", "(", ")", ",", "version_file", ",", "'exec'", ")", ")", "\n", "", "return", "locals", "(", ")", "[", "'__version__'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.None.setup.parse_requirements": [[18, 92], ["list", "line.strip.startswith", "exists", "setup.parse_requirements.gen_packages_items"], "function", ["None"], ["", "def", "parse_requirements", "(", "fname", "=", "'requirements.txt'", ",", "with_version", "=", "True", ")", ":", "\n", "    ", "\"\"\"Parse the package dependencies listed in a requirements file but strips\n    specific versioning information.\n\n    Args:\n        fname (str): path to requirements file\n        with_version (bool, default=False): if True include version specs\n\n    Returns:\n        List[str]: list of requirements items\n\n    CommandLine:\n        python -c \"import setup; print(setup.parse_requirements())\"\n    \"\"\"", "\n", "import", "sys", "\n", "from", "os", ".", "path", "import", "exists", "\n", "import", "re", "\n", "require_fpath", "=", "fname", "\n", "\n", "def", "parse_line", "(", "line", ")", ":", "\n", "        ", "\"\"\"Parse information from a line in a requirements text file.\"\"\"", "\n", "if", "line", ".", "startswith", "(", "'-r '", ")", ":", "\n", "# Allow specifying requirements in other files", "\n", "            ", "target", "=", "line", ".", "split", "(", "' '", ")", "[", "1", "]", "\n", "for", "info", "in", "parse_require_file", "(", "target", ")", ":", "\n", "                ", "yield", "info", "\n", "", "", "else", ":", "\n", "            ", "info", "=", "{", "'line'", ":", "line", "}", "\n", "if", "line", ".", "startswith", "(", "'-e '", ")", ":", "\n", "                ", "info", "[", "'package'", "]", "=", "line", ".", "split", "(", "'#egg='", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "# Remove versioning from the package", "\n", "                ", "pat", "=", "'('", "+", "'|'", ".", "join", "(", "[", "'>='", ",", "'=='", ",", "'>'", "]", ")", "+", "')'", "\n", "parts", "=", "re", ".", "split", "(", "pat", ",", "line", ",", "maxsplit", "=", "1", ")", "\n", "parts", "=", "[", "p", ".", "strip", "(", ")", "for", "p", "in", "parts", "]", "\n", "\n", "info", "[", "'package'", "]", "=", "parts", "[", "0", "]", "\n", "if", "len", "(", "parts", ")", ">", "1", ":", "\n", "                    ", "op", ",", "rest", "=", "parts", "[", "1", ":", "]", "\n", "if", "';'", "in", "rest", ":", "\n", "# Handle platform specific dependencies", "\n", "# http://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-platform-specific-dependencies", "\n", "                        ", "version", ",", "platform_deps", "=", "map", "(", "str", ".", "strip", ",", "\n", "rest", ".", "split", "(", "';'", ")", ")", "\n", "info", "[", "'platform_deps'", "]", "=", "platform_deps", "\n", "", "else", ":", "\n", "                        ", "version", "=", "rest", "# NOQA", "\n", "", "info", "[", "'version'", "]", "=", "(", "op", ",", "version", ")", "\n", "", "", "yield", "info", "\n", "\n", "", "", "def", "parse_require_file", "(", "fpath", ")", ":", "\n", "        ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "and", "not", "line", ".", "startswith", "(", "'#'", ")", ":", "\n", "                    ", "for", "info", "in", "parse_line", "(", "line", ")", ":", "\n", "                        ", "yield", "info", "\n", "\n", "", "", "", "", "", "def", "gen_packages_items", "(", ")", ":", "\n", "        ", "if", "exists", "(", "require_fpath", ")", ":", "\n", "            ", "for", "info", "in", "parse_require_file", "(", "require_fpath", ")", ":", "\n", "                ", "parts", "=", "[", "info", "[", "'package'", "]", "]", "\n", "if", "with_version", "and", "'version'", "in", "info", ":", "\n", "                    ", "parts", ".", "extend", "(", "info", "[", "'version'", "]", ")", "\n", "", "if", "not", "sys", ".", "version", ".", "startswith", "(", "'3.4'", ")", ":", "\n", "# apparently package_deps are broken in 3.4", "\n", "                    ", "platform_deps", "=", "info", ".", "get", "(", "'platform_deps'", ")", "\n", "if", "platform_deps", "is", "not", "None", ":", "\n", "                        ", "parts", ".", "append", "(", "';'", "+", "platform_deps", ")", "\n", "", "", "item", "=", "''", ".", "join", "(", "parts", ")", "\n", "yield", "item", "\n", "\n", "", "", "", "packages", "=", "list", "(", "gen_packages_items", "(", ")", ")", "\n", "return", "packages", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.mmseg.__init__.digit_version": [[9, 19], ["version_str.split", "x.isdigit", "digit_version.append", "int", "x.find", "x.split", "digit_version.append", "digit_version.append", "int", "int", "mmcv.__version__"], "function", ["None"], ["def", "digit_version", "(", "version_str", ")", ":", "\n", "    ", "digit_version", "=", "[", "]", "\n", "for", "x", "in", "version_str", ".", "split", "(", "'.'", ")", ":", "\n", "        ", "if", "x", ".", "isdigit", "(", ")", ":", "\n", "            ", "digit_version", ".", "append", "(", "int", "(", "x", ")", ")", "\n", "", "elif", "x", ".", "find", "(", "'rc'", ")", "!=", "-", "1", ":", "\n", "            ", "patch_version", "=", "x", ".", "split", "(", "'rc'", ")", "\n", "digit_version", ".", "append", "(", "int", "(", "patch_version", "[", "0", "]", ")", "-", "1", ")", "\n", "digit_version", ".", "append", "(", "int", "(", "patch_version", "[", "1", "]", ")", ")", "\n", "", "", "return", "digit_version", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.mmseg.version.parse_version_info": [[6, 16], ["version_str.split", "tuple", "x.isdigit", "version_info.append", "int", "x.find", "x.split", "version_info.append", "version_info.append", "int"], "function", ["None"], ["def", "parse_version_info", "(", "version_str", ")", ":", "\n", "    ", "version_info", "=", "[", "]", "\n", "for", "x", "in", "version_str", ".", "split", "(", "'.'", ")", ":", "\n", "        ", "if", "x", ".", "isdigit", "(", ")", ":", "\n", "            ", "version_info", ".", "append", "(", "int", "(", "x", ")", ")", "\n", "", "elif", "x", ".", "find", "(", "'rc'", ")", "!=", "-", "1", ":", "\n", "            ", "patch_version", "=", "x", ".", "split", "(", "'rc'", ")", "\n", "version_info", ".", "append", "(", "int", "(", "patch_version", "[", "0", "]", ")", ")", "\n", "version_info", ".", "append", "(", "f'rc{patch_version[1]}'", ")", "\n", "", "", "return", "tuple", "(", "version_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.logger.get_root_logger": [[6, 28], ["mmcv.utils.get_logger"], "function", ["None"], ["def", "get_root_logger", "(", "log_file", "=", "None", ",", "log_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"Get the root logger.\n\n    The logger will be initialized if it has not been initialized. By default a\n    StreamHandler will be added. If `log_file` is specified, a FileHandler will\n    also be added. The name of the root logger is the top-level package name,\n    e.g., \"mmseg\".\n\n    Args:\n        log_file (str | None): The log filename. If specified, a FileHandler\n            will be added to the root logger.\n        log_level (int): The root logger level. Note that only the process of\n            rank 0 is affected, while other processes will set the level to\n            \"Error\" and be silent most of the time.\n\n    Returns:\n        logging.Logger: The root logger.\n    \"\"\"", "\n", "\n", "logger", "=", "get_logger", "(", "name", "=", "'mmseg'", ",", "log_file", "=", "log_file", ",", "log_level", "=", "log_level", ")", "\n", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.collect_env.collect_env": [[7, 13], ["mmcv.utils.collect_env", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.collect_env.collect_env"], ["def", "collect_env", "(", ")", ":", "\n", "    ", "\"\"\"Collect the information of the running environments.\"\"\"", "\n", "env_info", "=", "collect_base_env", "(", ")", "\n", "env_info", "[", "'MMSegmentation'", "]", "=", "f'{mmseg.__version__}+{get_git_hash()[:7]}'", "\n", "\n", "return", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.inverted_residual.InvertedResidual.__init__": [[31, 80], ["dict", "dict", "torch.nn.Module.__init__", "int", "layers.extend", "torch.nn.Sequential", "round", "layers.append", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", ",", "\n", "expand_ratio", ",", "\n", "dilation", "=", "1", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU6'", ")", ",", "\n", "with_cp", "=", "False", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", ",", "f'stride must in [1, 2]. '", "f'But received {stride}.'", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "in_channels", "==", "out_channels", "\n", "hidden_dim", "=", "int", "(", "round", "(", "in_channels", "*", "expand_ratio", ")", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "if", "expand_ratio", "!=", "1", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "ConvModule", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "hidden_dim", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ")", "\n", "", "layers", ".", "extend", "(", "[", "\n", "ConvModule", "(", "\n", "in_channels", "=", "hidden_dim", ",", "\n", "out_channels", "=", "hidden_dim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "hidden_dim", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ",", "\n", "ConvModule", "(", "\n", "in_channels", "=", "hidden_dim", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "]", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.inverted_residual.InvertedResidual.forward": [[81, 95], ["torch.utils.checkpoint.checkpoint", "inverted_residual.InvertedResidual.forward._inner_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "if", "self", ".", "use_res_connect", ":", "\n", "                ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n", "", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.inverted_residual.InvertedResidualV3.__init__": [[124, 182], ["dict", "dict", "torch.nn.Module.__init__", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "isinstance", "mmcv.cnn.ConvModule", "se_layer.SELayer", "dict"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "mid_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "se_cfg", "=", "None", ",", "\n", "with_expand_conv", "=", "True", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "with_cp", "=", "False", ")", ":", "\n", "        ", "super", "(", "InvertedResidualV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_res_shortcut", "=", "(", "stride", "==", "1", "and", "in_channels", "==", "out_channels", ")", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "with_se", "=", "se_cfg", "is", "not", "None", "\n", "self", ".", "with_expand_conv", "=", "with_expand_conv", "\n", "\n", "if", "self", ".", "with_se", ":", "\n", "            ", "assert", "isinstance", "(", "se_cfg", ",", "dict", ")", "\n", "", "if", "not", "self", ".", "with_expand_conv", ":", "\n", "            ", "assert", "mid_channels", "==", "in_channels", "\n", "\n", "", "if", "self", ".", "with_expand_conv", ":", "\n", "            ", "self", ".", "expand_conv", "=", "ConvModule", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "", "self", ".", "depthwise_conv", "=", "ConvModule", "(", "\n", "in_channels", "=", "mid_channels", ",", "\n", "out_channels", "=", "mid_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "kernel_size", "//", "2", ",", "\n", "groups", "=", "mid_channels", ",", "\n", "conv_cfg", "=", "dict", "(", "\n", "type", "=", "'Conv2dAdaptivePadding'", ")", "if", "stride", "==", "2", "else", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "\n", "if", "self", ".", "with_se", ":", "\n", "            ", "self", ".", "se", "=", "SELayer", "(", "**", "se_cfg", ")", "\n", "\n", "", "self", ".", "linear_conv", "=", "ConvModule", "(", "\n", "in_channels", "=", "mid_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.inverted_residual.InvertedResidualV3.forward": [[183, 209], ["inverted_residual.InvertedResidualV3.depthwise_conv", "inverted_residual.InvertedResidualV3.linear_conv", "torch.utils.checkpoint.checkpoint", "inverted_residual.InvertedResidualV3.forward._inner_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "out", "=", "x", "\n", "\n", "if", "self", ".", "with_expand_conv", ":", "\n", "                ", "out", "=", "self", ".", "expand_conv", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "depthwise_conv", "(", "out", ")", "\n", "\n", "if", "self", ".", "with_se", ":", "\n", "                ", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "linear_conv", "(", "out", ")", "\n", "\n", "if", "self", ".", "with_res_shortcut", ":", "\n", "                ", "return", "x", "+", "out", "\n", "", "else", ":", "\n", "                ", "return", "out", "\n", "\n", "", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.make_divisible.make_divisible": [[1, 28], ["max", "int"], "function", ["None"], ["def", "make_divisible", "(", "value", ",", "divisor", ",", "min_value", "=", "None", ",", "min_ratio", "=", "0.9", ")", ":", "\n", "    ", "\"\"\"Make divisible function.\n\n    This function rounds the channel number to the nearest value that can be\n    divisible by the divisor. It is taken from the original tf repo. It ensures\n    that all layers have a channel number that is divisible by divisor. It can\n    be seen here: https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet.py  # noqa\n\n    Args:\n        value (int): The original channel number.\n        divisor (int): The divisor to fully divide the channel number.\n        min_value (int): The minimum value of the output channel.\n            Default: None, means that the minimum value equal to the divisor.\n        min_ratio (float): The minimum ratio of the rounded channel number to\n            the original channel number. Default: 0.9.\n\n    Returns:\n        int: The modified output channel number.\n    \"\"\"", "\n", "\n", "if", "min_value", "is", "None", ":", "\n", "        ", "min_value", "=", "divisor", "\n", "", "new_value", "=", "max", "(", "min_value", ",", "int", "(", "value", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than (1-min_ratio).", "\n", "if", "new_value", "<", "min_ratio", "*", "value", ":", "\n", "        ", "new_value", "+=", "divisor", "\n", "", "return", "new_value", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.se_layer.SELayer.__init__": [[26, 52], ["torch.Module.__init__", "isinstance", "mmcv.is_tuple_of", "torch.AdaptiveAvgPool2d", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "dict", "dict", "len", "make_divisible.make_divisible.make_divisible", "make_divisible.make_divisible.make_divisible"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.make_divisible.make_divisible", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.make_divisible.make_divisible"], ["def", "__init__", "(", "self", ",", "\n", "channels", ",", "\n", "ratio", "=", "16", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "act_cfg", "=", "(", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "dict", "(", "type", "=", "'HSigmoid'", ",", "bias", "=", "3.0", ",", "divisor", "=", "6.0", ")", ")", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "act_cfg", ",", "dict", ")", ":", "\n", "            ", "act_cfg", "=", "(", "act_cfg", ",", "act_cfg", ")", "\n", "", "assert", "len", "(", "act_cfg", ")", "==", "2", "\n", "assert", "mmcv", ".", "is_tuple_of", "(", "act_cfg", ",", "dict", ")", "\n", "self", ".", "global_avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "conv1", "=", "ConvModule", "(", "\n", "in_channels", "=", "channels", ",", "\n", "out_channels", "=", "make_divisible", "(", "channels", "//", "ratio", ",", "8", ")", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "act_cfg", "=", "act_cfg", "[", "0", "]", ")", "\n", "self", ".", "conv2", "=", "ConvModule", "(", "\n", "in_channels", "=", "make_divisible", "(", "channels", "//", "ratio", ",", "8", ")", ",", "\n", "out_channels", "=", "channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "act_cfg", "=", "act_cfg", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.se_layer.SELayer.forward": [[53, 58], ["se_layer.SELayer.global_avgpool", "se_layer.SELayer.conv1", "se_layer.SELayer.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "global_avgpool", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "x", "*", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.up_conv_block.UpConvBlock.__init__": [[44, 93], ["dict", "dict", "dict", "torch.Module.__init__", "conv_block", "mmcv.cnn.build_upsample_layer", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "conv_block", ",", "\n", "in_channels", ",", "\n", "skip_channels", ",", "\n", "out_channels", ",", "\n", "num_convs", "=", "2", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "upsample_cfg", "=", "dict", "(", "type", "=", "'InterpConv'", ")", ",", "\n", "dcn", "=", "None", ",", "\n", "plugins", "=", "None", ")", ":", "\n", "        ", "super", "(", "UpConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "dcn", "is", "None", ",", "'Not implemented yet.'", "\n", "assert", "plugins", "is", "None", ",", "'Not implemented yet.'", "\n", "\n", "self", ".", "conv_block", "=", "conv_block", "(", "\n", "in_channels", "=", "2", "*", "skip_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "num_convs", "=", "num_convs", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "dcn", "=", "None", ",", "\n", "plugins", "=", "None", ")", "\n", "if", "upsample_cfg", "is", "not", "None", ":", "\n", "            ", "self", ".", "upsample", "=", "build_upsample_layer", "(", "\n", "cfg", "=", "upsample_cfg", ",", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "skip_channels", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "upsample", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "skip_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.up_conv_block.UpConvBlock.forward": [[94, 102], ["up_conv_block.UpConvBlock.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "up_conv_block.UpConvBlock.conv_block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "skip", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "skip", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "conv_block", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.res_layer.ResLayer.__init__": [[26, 95], ["dict", "layers.append", "range", "torch.nn.Sequential.__init__", "torch.nn.Sequential.extend", "torch.nn.Sequential", "block", "layers.append", "torch.nn.Sequential.append", "block", "torch.nn.AvgPool2d", "mmcv.cnn.build_conv_layer", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "avg_down", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "multi_grid", "=", "None", ",", "\n", "contract_dilation", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "block", "=", "block", "\n", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "[", "]", "\n", "conv_stride", "=", "stride", "\n", "if", "avg_down", ":", "\n", "                ", "conv_stride", "=", "1", "\n", "downsample", ".", "append", "(", "\n", "nn", ".", "AvgPool2d", "(", "\n", "kernel_size", "=", "stride", ",", "\n", "stride", "=", "stride", ",", "\n", "ceil_mode", "=", "True", ",", "\n", "count_include_pad", "=", "False", ")", ")", "\n", "", "downsample", ".", "extend", "(", "[", "\n", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "conv_stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "planes", "*", "block", ".", "expansion", ")", "[", "1", "]", "\n", "]", ")", "\n", "downsample", "=", "nn", ".", "Sequential", "(", "*", "downsample", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "multi_grid", "is", "None", ":", "\n", "            ", "if", "dilation", ">", "1", "and", "contract_dilation", ":", "\n", "                ", "first_dilation", "=", "dilation", "//", "2", "\n", "", "else", ":", "\n", "                ", "first_dilation", "=", "dilation", "\n", "", "", "else", ":", "\n", "            ", "first_dilation", "=", "multi_grid", "[", "0", "]", "\n", "", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "first_dilation", ",", "\n", "downsample", "=", "downsample", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "**", "kwargs", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "dilation", "if", "multi_grid", "is", "None", "else", "multi_grid", "[", "i", "]", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "**", "kwargs", ")", ")", "\n", "", "super", "(", "ResLayer", ",", "self", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.self_attention_block.SelfAttentionBlock.__init__": [[32, 92], ["torch.nn.Module.__init__", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.build_project", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.build_project", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.init_weights", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.build_project", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.build_project"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.self_attention_block.SelfAttentionBlock.build_project", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.self_attention_block.SelfAttentionBlock.build_project", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.self_attention_block.SelfAttentionBlock.build_project", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.self_attention_block.SelfAttentionBlock.build_project"], ["def", "__init__", "(", "self", ",", "key_in_channels", ",", "query_in_channels", ",", "channels", ",", "\n", "out_channels", ",", "share_key_query", ",", "query_downsample", ",", "\n", "key_downsample", ",", "key_query_num_convs", ",", "value_out_num_convs", ",", "\n", "key_query_norm", ",", "value_out_norm", ",", "matmul_norm", ",", "with_out", ",", "\n", "conv_cfg", ",", "norm_cfg", ",", "act_cfg", ")", ":", "\n", "        ", "super", "(", "SelfAttentionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "share_key_query", ":", "\n", "            ", "assert", "key_in_channels", "==", "query_in_channels", "\n", "", "self", ".", "key_in_channels", "=", "key_in_channels", "\n", "self", ".", "query_in_channels", "=", "query_in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "share_key_query", "=", "share_key_query", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "key_project", "=", "self", ".", "build_project", "(", "\n", "key_in_channels", ",", "\n", "channels", ",", "\n", "num_convs", "=", "key_query_num_convs", ",", "\n", "use_conv_module", "=", "key_query_norm", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "if", "share_key_query", ":", "\n", "            ", "self", ".", "query_project", "=", "self", ".", "key_project", "\n", "", "else", ":", "\n", "            ", "self", ".", "query_project", "=", "self", ".", "build_project", "(", "\n", "query_in_channels", ",", "\n", "channels", ",", "\n", "num_convs", "=", "key_query_num_convs", ",", "\n", "use_conv_module", "=", "key_query_norm", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "", "self", ".", "value_project", "=", "self", ".", "build_project", "(", "\n", "key_in_channels", ",", "\n", "channels", "if", "with_out", "else", "out_channels", ",", "\n", "num_convs", "=", "value_out_num_convs", ",", "\n", "use_conv_module", "=", "value_out_norm", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "if", "with_out", ":", "\n", "            ", "self", ".", "out_project", "=", "self", ".", "build_project", "(", "\n", "channels", ",", "\n", "out_channels", ",", "\n", "num_convs", "=", "value_out_num_convs", ",", "\n", "use_conv_module", "=", "value_out_norm", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "out_project", "=", "None", "\n", "\n", "", "self", ".", "query_downsample", "=", "query_downsample", "\n", "self", ".", "key_downsample", "=", "key_downsample", "\n", "self", ".", "matmul_norm", "=", "matmul_norm", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.self_attention_block.SelfAttentionBlock.init_weights": [[93, 98], ["isinstance", "mmcv.cnn.constant_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize weight of later layer.\"\"\"", "\n", "if", "self", ".", "out_project", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "self", ".", "out_project", ",", "ConvModule", ")", ":", "\n", "                ", "constant_init", "(", "self", ".", "out_project", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.self_attention_block.SelfAttentionBlock.build_project": [[99, 130], ["range", "range", "len", "torch.nn.Sequential", "mmcv.cnn.ConvModule", "torch.nn.Sequential.append", "torch.nn.Conv2d", "torch.nn.Sequential.append", "mmcv.cnn.ConvModule", "torch.nn.Conv2d"], "methods", ["None"], ["", "", "", "def", "build_project", "(", "self", ",", "in_channels", ",", "channels", ",", "num_convs", ",", "use_conv_module", ",", "\n", "conv_cfg", ",", "norm_cfg", ",", "act_cfg", ")", ":", "\n", "        ", "\"\"\"Build projection layer for key/query/value/out.\"\"\"", "\n", "if", "use_conv_module", ":", "\n", "            ", "convs", "=", "[", "\n", "ConvModule", "(", "\n", "in_channels", ",", "\n", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "]", "\n", "for", "_", "in", "range", "(", "num_convs", "-", "1", ")", ":", "\n", "                ", "convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "channels", ",", "\n", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "convs", "=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "channels", ",", "1", ")", "]", "\n", "for", "_", "in", "range", "(", "num_convs", "-", "1", ")", ":", "\n", "                ", "convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "1", ")", ")", "\n", "", "", "if", "len", "(", "convs", ")", ">", "1", ":", "\n", "            ", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "", "else", ":", "\n", "            ", "convs", "=", "convs", "[", "0", "]", "\n", "", "return", "convs", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.self_attention_block.SelfAttentionBlock.forward": [[131, 160], ["query_feats.size", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.query_project", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.reshape", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.permute().contiguous", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.key_project", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.value_project", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.reshape", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.reshape", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.permute().contiguous", "torch.matmul", "torch.nn.functional.softmax", "torch.matmul", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.permute().contiguous", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.reshape", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.query_downsample", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.key_downsample", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.key_downsample", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.out_project", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.permute", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.permute", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query_feats", ",", "key_feats", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "batch_size", "=", "query_feats", ".", "size", "(", "0", ")", "\n", "query", "=", "self", ".", "query_project", "(", "query_feats", ")", "\n", "if", "self", ".", "query_downsample", "is", "not", "None", ":", "\n", "            ", "query", "=", "self", ".", "query_downsample", "(", "query", ")", "\n", "", "query", "=", "query", ".", "reshape", "(", "*", "query", ".", "shape", "[", ":", "2", "]", ",", "-", "1", ")", "\n", "query", "=", "query", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "key", "=", "self", ".", "key_project", "(", "key_feats", ")", "\n", "value", "=", "self", ".", "value_project", "(", "key_feats", ")", "\n", "if", "self", ".", "key_downsample", "is", "not", "None", ":", "\n", "            ", "key", "=", "self", ".", "key_downsample", "(", "key", ")", "\n", "value", "=", "self", ".", "key_downsample", "(", "value", ")", "\n", "", "key", "=", "key", ".", "reshape", "(", "*", "key", ".", "shape", "[", ":", "2", "]", ",", "-", "1", ")", "\n", "value", "=", "value", ".", "reshape", "(", "*", "value", ".", "shape", "[", ":", "2", "]", ",", "-", "1", ")", "\n", "value", "=", "value", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "sim_map", "=", "torch", ".", "matmul", "(", "query", ",", "key", ")", "\n", "if", "self", ".", "matmul_norm", ":", "\n", "            ", "sim_map", "=", "(", "self", ".", "channels", "**", "-", ".5", ")", "*", "sim_map", "\n", "", "sim_map", "=", "F", ".", "softmax", "(", "sim_map", ",", "dim", "=", "-", "1", ")", "\n", "\n", "context", "=", "torch", ".", "matmul", "(", "sim_map", ",", "value", ")", "\n", "context", "=", "context", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "context", "=", "context", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "*", "query_feats", ".", "shape", "[", "2", ":", "]", ")", "\n", "if", "self", ".", "out_project", "is", "not", "None", ":", "\n", "            ", "context", "=", "self", ".", "out_project", "(", "context", ")", "\n", "", "return", "context", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.misc.add_prefix": [[1, 18], ["dict", "inputs.items"], "function", ["None"], ["def", "add_prefix", "(", "inputs", ",", "prefix", ")", ":", "\n", "    ", "\"\"\"Add prefix for dict.\n\n    Args:\n        inputs (dict): The input dict with str keys.\n        prefix (str): The prefix to add.\n\n    Returns:\n\n        dict: The dict with keys updated with ``prefix``.\n    \"\"\"", "\n", "\n", "outputs", "=", "dict", "(", ")", "\n", "for", "name", ",", "value", "in", "inputs", ".", "items", "(", ")", ":", "\n", "        ", "outputs", "[", "f'{prefix}.{name}'", "]", "=", "value", "\n", "\n", "", "return", "outputs", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.chase_db1.ChaseDB1Dataset.__init__": [[21, 28], ["custom.CustomDataset.__init__", "os.exists"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ChaseDB1Dataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.png'", ",", "\n", "seg_map_suffix", "=", "'_1stHO.png'", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.__init__": [[111, 151], ["pipelines.Compose", "custom.CustomDataset.get_classes_and_palette", "custom.CustomDataset.load_annotations", "os.isabs", "os.isabs", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.isabs", "os.isabs", "os.isabs", "os.isabs"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.get_classes_and_palette", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.load_annotations"], ["def", "__init__", "(", "self", ",", "\n", "pipeline", ",", "\n", "img_dir", ",", "\n", "img_suffix", "=", "'.jpg'", ",", "\n", "ann_dir", "=", "None", ",", "\n", "seg_map_suffix", "=", "'.png'", ",", "\n", "split", "=", "None", ",", "\n", "data_root", "=", "None", ",", "\n", "test_mode", "=", "False", ",", "\n", "ignore_index", "=", "255", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "classes", "=", "None", ",", "\n", "palette", "=", "None", ")", ":", "\n", "        ", "self", ".", "pipeline", "=", "Compose", "(", "pipeline", ")", "\n", "self", ".", "img_dir", "=", "img_dir", "\n", "self", ".", "img_suffix", "=", "img_suffix", "\n", "self", ".", "ann_dir", "=", "ann_dir", "\n", "self", ".", "seg_map_suffix", "=", "seg_map_suffix", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "reduce_zero_label", "=", "reduce_zero_label", "\n", "self", ".", "label_map", "=", "None", "\n", "self", ".", "CLASSES", ",", "self", ".", "PALETTE", "=", "self", ".", "get_classes_and_palette", "(", "\n", "classes", ",", "palette", ")", "\n", "\n", "# join paths if data_root is specified", "\n", "if", "self", ".", "data_root", "is", "not", "None", ":", "\n", "            ", "if", "not", "osp", ".", "isabs", "(", "self", ".", "img_dir", ")", ":", "\n", "                ", "self", ".", "img_dir", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "img_dir", ")", "\n", "", "if", "not", "(", "self", ".", "ann_dir", "is", "None", "or", "osp", ".", "isabs", "(", "self", ".", "ann_dir", ")", ")", ":", "\n", "                ", "self", ".", "ann_dir", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "ann_dir", ")", "\n", "", "if", "not", "(", "self", ".", "split", "is", "None", "or", "osp", ".", "isabs", "(", "self", ".", "split", ")", ")", ":", "\n", "                ", "self", ".", "split", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "split", ")", "\n", "\n", "# load annotations", "\n", "", "", "self", ".", "img_infos", "=", "self", ".", "load_annotations", "(", "self", ".", "img_dir", ",", "self", ".", "img_suffix", ",", "\n", "self", ".", "ann_dir", ",", "\n", "self", ".", "seg_map_suffix", ",", "self", ".", "split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.__len__": [[152, 155], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Total number of samples of data.\"\"\"", "\n", "return", "len", "(", "self", ".", "img_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.load_annotations": [[156, 193], ["mmcv.utils.print_log", "mmcv.scandir", "open", "dict", "img_infos.append", "mmseg.utils.get_root_logger", "line.strip", "dict", "img_infos.append", "img.replace", "dict", "len", "dict"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.logger.get_root_logger"], ["", "def", "load_annotations", "(", "self", ",", "img_dir", ",", "img_suffix", ",", "ann_dir", ",", "seg_map_suffix", ",", "\n", "split", ")", ":", "\n", "        ", "\"\"\"Load annotation from directory.\n\n        Args:\n            img_dir (str): Path to image directory\n            img_suffix (str): Suffix of images.\n            ann_dir (str|None): Path to annotation directory.\n            seg_map_suffix (str|None): Suffix of segmentation maps.\n            split (str|None): Split txt file. If split is specified, only file\n                with suffix in the splits will be loaded. Otherwise, all images\n                in img_dir/ann_dir will be loaded. Default: None\n\n        Returns:\n            list[dict]: All image info of dataset.\n        \"\"\"", "\n", "\n", "img_infos", "=", "[", "]", "\n", "if", "split", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "split", ")", "as", "f", ":", "\n", "                ", "for", "line", "in", "f", ":", "\n", "                    ", "img_name", "=", "line", ".", "strip", "(", ")", "\n", "img_info", "=", "dict", "(", "filename", "=", "img_name", "+", "img_suffix", ")", "\n", "if", "ann_dir", "is", "not", "None", ":", "\n", "                        ", "seg_map", "=", "img_name", "+", "seg_map_suffix", "\n", "img_info", "[", "'ann'", "]", "=", "dict", "(", "seg_map", "=", "seg_map", ")", "\n", "", "img_infos", ".", "append", "(", "img_info", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "img", "in", "mmcv", ".", "scandir", "(", "img_dir", ",", "img_suffix", ",", "recursive", "=", "True", ")", ":", "\n", "                ", "img_info", "=", "dict", "(", "filename", "=", "img", ")", "\n", "if", "ann_dir", "is", "not", "None", ":", "\n", "                    ", "seg_map", "=", "img", ".", "replace", "(", "img_suffix", ",", "seg_map_suffix", ")", "\n", "img_info", "[", "'ann'", "]", "=", "dict", "(", "seg_map", "=", "seg_map", ")", "\n", "", "img_infos", ".", "append", "(", "img_info", ")", "\n", "\n", "", "", "print_log", "(", "f'Loaded {len(img_infos)} images'", ",", "logger", "=", "get_root_logger", "(", ")", ")", "\n", "return", "img_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.get_ann_info": [[194, 205], ["None"], "methods", ["None"], ["", "def", "get_ann_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get annotation by index.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            dict: Annotation info of specified index.\n        \"\"\"", "\n", "\n", "return", "self", ".", "img_infos", "[", "idx", "]", "[", "'ann'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.pre_pipeline": [[206, 213], ["None"], "methods", ["None"], ["", "def", "pre_pipeline", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Prepare results dict for pipeline.\"\"\"", "\n", "results", "[", "'seg_fields'", "]", "=", "[", "]", "\n", "results", "[", "'img_prefix'", "]", "=", "self", ".", "img_dir", "\n", "results", "[", "'seg_prefix'", "]", "=", "self", ".", "ann_dir", "\n", "if", "self", ".", "custom_classes", ":", "\n", "            ", "results", "[", "'label_map'", "]", "=", "self", ".", "label_map", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.__getitem__": [[214, 229], ["custom.CustomDataset.prepare_test_img", "custom.CustomDataset.prepare_train_img"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.prepare_test_img", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.prepare_train_img"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get training/test data after pipeline.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            dict: Training/test data (with annotation if `test_mode` is set\n                False).\n        \"\"\"", "\n", "\n", "if", "self", ".", "test_mode", ":", "\n", "            ", "return", "self", ".", "prepare_test_img", "(", "idx", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "prepare_train_img", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.prepare_train_img": [[230, 246], ["custom.CustomDataset.get_ann_info", "dict", "custom.CustomDataset.pre_pipeline", "custom.CustomDataset.pipeline"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.get_ann_info", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.pre_pipeline"], ["", "", "def", "prepare_train_img", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get training data and annotations after pipeline.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            dict: Training data and annotation after pipeline with new keys\n                introduced by pipeline.\n        \"\"\"", "\n", "\n", "img_info", "=", "self", ".", "img_infos", "[", "idx", "]", "\n", "ann_info", "=", "self", ".", "get_ann_info", "(", "idx", ")", "\n", "results", "=", "dict", "(", "img_info", "=", "img_info", ",", "ann_info", "=", "ann_info", ")", "\n", "self", ".", "pre_pipeline", "(", "results", ")", "\n", "return", "self", ".", "pipeline", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.prepare_test_img": [[247, 262], ["dict", "custom.CustomDataset.pre_pipeline", "custom.CustomDataset.pipeline"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.pre_pipeline"], ["", "def", "prepare_test_img", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get testing data after pipeline.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            dict: Testing data after pipeline with new keys intorduced by\n                piepline.\n        \"\"\"", "\n", "\n", "img_info", "=", "self", ".", "img_infos", "[", "idx", "]", "\n", "results", "=", "dict", "(", "img_info", "=", "img_info", ")", "\n", "self", ".", "pre_pipeline", "(", "results", ")", "\n", "return", "self", ".", "pipeline", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.format_results": [[263, 266], ["None"], "methods", ["None"], ["", "def", "format_results", "(", "self", ",", "results", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Place holder to format result to dataset specific output.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.get_gt_seg_maps": [[267, 279], ["os.join", "os.join", "gt_seg_maps.append", "mmcv.imread"], "methods", ["None"], ["", "def", "get_gt_seg_maps", "(", "self", ",", "efficient_test", "=", "False", ")", ":", "\n", "        ", "\"\"\"Get ground truth segmentation maps for evaluation.\"\"\"", "\n", "gt_seg_maps", "=", "[", "]", "\n", "for", "img_info", "in", "self", ".", "img_infos", ":", "\n", "            ", "seg_map", "=", "osp", ".", "join", "(", "self", ".", "ann_dir", ",", "img_info", "[", "'ann'", "]", "[", "'seg_map'", "]", ")", "\n", "if", "efficient_test", ":", "\n", "                ", "gt_seg_map", "=", "seg_map", "\n", "", "else", ":", "\n", "                ", "gt_seg_map", "=", "mmcv", ".", "imread", "(", "\n", "seg_map", ",", "flag", "=", "'unchanged'", ",", "backend", "=", "'pillow'", ")", "\n", "", "gt_seg_maps", ".", "append", "(", "gt_seg_map", ")", "\n", "", "return", "gt_seg_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.get_classes_and_palette": [[280, 323], ["isinstance", "custom.CustomDataset.get_palette_for_custom_classes", "mmcv.list_from_file", "isinstance", "enumerate", "ValueError", "set().issubset", "ValueError", "classes.index", "set", "type"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.get_palette_for_custom_classes"], ["", "def", "get_classes_and_palette", "(", "self", ",", "classes", "=", "None", ",", "palette", "=", "None", ")", ":", "\n", "        ", "\"\"\"Get class names of current dataset.\n\n        Args:\n            classes (Sequence[str] | str | None): If classes is None, use\n                default CLASSES defined by builtin dataset. If classes is a\n                string, take it as a file name. The file contains the name of\n                classes where each line contains one class name. If classes is\n                a tuple or list, override the CLASSES defined by the dataset.\n            palette (Sequence[Sequence[int]]] | np.ndarray | None):\n                The palette of segmentation map. If None is given, random\n                palette will be generated. Default: None\n        \"\"\"", "\n", "if", "classes", "is", "None", ":", "\n", "            ", "self", ".", "custom_classes", "=", "False", "\n", "return", "self", ".", "CLASSES", ",", "self", ".", "PALETTE", "\n", "\n", "", "self", ".", "custom_classes", "=", "True", "\n", "if", "isinstance", "(", "classes", ",", "str", ")", ":", "\n", "# take it as a file path", "\n", "            ", "class_names", "=", "mmcv", ".", "list_from_file", "(", "classes", ")", "\n", "", "elif", "isinstance", "(", "classes", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "class_names", "=", "classes", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unsupported type {type(classes)} of classes.'", ")", "\n", "\n", "", "if", "self", ".", "CLASSES", ":", "\n", "            ", "if", "not", "set", "(", "classes", ")", ".", "issubset", "(", "self", ".", "CLASSES", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'classes is not a subset of CLASSES.'", ")", "\n", "\n", "# dictionary, its keys are the old label ids and its values", "\n", "# are the new label ids.", "\n", "# used for changing pixel labels in load_annotations.", "\n", "", "self", ".", "label_map", "=", "{", "}", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "CLASSES", ")", ":", "\n", "                ", "if", "c", "not", "in", "class_names", ":", "\n", "                    ", "self", ".", "label_map", "[", "i", "]", "=", "-", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "label_map", "[", "i", "]", "=", "classes", ".", "index", "(", "c", ")", "\n", "\n", "", "", "", "palette", "=", "self", ".", "get_palette_for_custom_classes", "(", "class_names", ",", "palette", ")", "\n", "\n", "return", "class_names", ",", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.get_palette_for_custom_classes": [[324, 342], ["sorted", "custom.CustomDataset.label_map.items", "type", "numpy.random.randint.append", "numpy.random.randint", "len"], "methods", ["None"], ["", "def", "get_palette_for_custom_classes", "(", "self", ",", "class_names", ",", "palette", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "label_map", "is", "not", "None", ":", "\n", "# return subset of palette", "\n", "            ", "palette", "=", "[", "]", "\n", "for", "old_id", ",", "new_id", "in", "sorted", "(", "\n", "self", ".", "label_map", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", ":", "\n", "                ", "if", "new_id", "!=", "-", "1", ":", "\n", "                    ", "palette", ".", "append", "(", "self", ".", "PALETTE", "[", "old_id", "]", ")", "\n", "", "", "palette", "=", "type", "(", "self", ".", "PALETTE", ")", "(", "palette", ")", "\n", "\n", "", "elif", "palette", "is", "None", ":", "\n", "            ", "if", "self", ".", "PALETTE", "is", "None", ":", "\n", "                ", "palette", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "size", "=", "(", "len", "(", "class_names", ")", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "                ", "palette", "=", "self", ".", "PALETTE", "\n", "\n", "", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.evaluate": [[343, 418], ["isinstance", "custom.CustomDataset.get_gt_seg_maps", "mmseg.core.eval_metrics", "range", "summary_table_data.append", "mmcv.utils.print_log", "terminaltables.AsciiTable", "mmcv.utils.print_log", "mmcv.utils.print_log", "terminaltables.AsciiTable", "mmcv.utils.print_log", "range", "mmcv.is_list_of", "set().issubset", "KeyError", "len", "len", "tuple", "numpy.round", "class_table_data.append", "numpy.round", "len", "set", "functools.reduce", "range", "os.remove", "os.remove", "os.remove", "os.remove", "set", "numpy.nanmean", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.get_gt_seg_maps", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.eval_metrics"], ["", "def", "evaluate", "(", "self", ",", "\n", "results", ",", "\n", "metric", "=", "'mIoU'", ",", "\n", "logger", "=", "None", ",", "\n", "efficient_test", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Evaluate the dataset.\n\n        Args:\n            results (list): Testing results of the dataset.\n            metric (str | list[str]): Metrics to be evaluated. 'mIoU' and\n                'mDice' are supported.\n            logger (logging.Logger | None | str): Logger used for printing\n                related information during evaluation. Default: None.\n\n        Returns:\n            dict[str, float]: Default metrics.\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "metric", ",", "str", ")", ":", "\n", "            ", "metric", "=", "[", "metric", "]", "\n", "", "allowed_metrics", "=", "[", "'mIoU'", ",", "'mDice'", "]", "\n", "if", "not", "set", "(", "metric", ")", ".", "issubset", "(", "set", "(", "allowed_metrics", ")", ")", ":", "\n", "            ", "raise", "KeyError", "(", "'metric {} is not supported'", ".", "format", "(", "metric", ")", ")", "\n", "", "eval_results", "=", "{", "}", "\n", "gt_seg_maps", "=", "self", ".", "get_gt_seg_maps", "(", "efficient_test", ")", "\n", "if", "self", ".", "CLASSES", "is", "None", ":", "\n", "            ", "num_classes", "=", "len", "(", "\n", "reduce", "(", "np", ".", "union1d", ",", "[", "np", ".", "unique", "(", "_", ")", "for", "_", "in", "gt_seg_maps", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "num_classes", "=", "len", "(", "self", ".", "CLASSES", ")", "\n", "", "ret_metrics", "=", "eval_metrics", "(", "\n", "results", ",", "\n", "gt_seg_maps", ",", "\n", "num_classes", ",", "\n", "self", ".", "ignore_index", ",", "\n", "metric", ",", "\n", "label_map", "=", "self", ".", "label_map", ",", "\n", "reduce_zero_label", "=", "self", ".", "reduce_zero_label", ")", "\n", "class_table_data", "=", "[", "[", "'Class'", "]", "+", "[", "m", "[", "1", ":", "]", "for", "m", "in", "metric", "]", "+", "[", "'Acc'", "]", "]", "\n", "if", "self", ".", "CLASSES", "is", "None", ":", "\n", "            ", "class_names", "=", "tuple", "(", "range", "(", "num_classes", ")", ")", "\n", "", "else", ":", "\n", "            ", "class_names", "=", "self", ".", "CLASSES", "\n", "", "ret_metrics_round", "=", "[", "\n", "np", ".", "round", "(", "ret_metric", "*", "100", ",", "2", ")", "for", "ret_metric", "in", "ret_metrics", "\n", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "class_table_data", ".", "append", "(", "[", "class_names", "[", "i", "]", "]", "+", "\n", "[", "m", "[", "i", "]", "for", "m", "in", "ret_metrics_round", "[", "2", ":", "]", "]", "+", "\n", "[", "ret_metrics_round", "[", "1", "]", "[", "i", "]", "]", ")", "\n", "", "summary_table_data", "=", "[", "[", "'Scope'", "]", "+", "\n", "[", "'m'", "+", "head", "\n", "for", "head", "in", "class_table_data", "[", "0", "]", "[", "1", ":", "]", "]", "+", "[", "'aAcc'", "]", "]", "\n", "ret_metrics_mean", "=", "[", "\n", "np", ".", "round", "(", "np", ".", "nanmean", "(", "ret_metric", ")", "*", "100", ",", "2", ")", "\n", "for", "ret_metric", "in", "ret_metrics", "\n", "]", "\n", "summary_table_data", ".", "append", "(", "[", "'global'", "]", "+", "ret_metrics_mean", "[", "2", ":", "]", "+", "\n", "[", "ret_metrics_mean", "[", "1", "]", "]", "+", "\n", "[", "ret_metrics_mean", "[", "0", "]", "]", ")", "\n", "print_log", "(", "'per class results:'", ",", "logger", ")", "\n", "table", "=", "AsciiTable", "(", "class_table_data", ")", "\n", "print_log", "(", "'\\n'", "+", "table", ".", "table", ",", "logger", "=", "logger", ")", "\n", "print_log", "(", "'Summary:'", ",", "logger", ")", "\n", "table", "=", "AsciiTable", "(", "summary_table_data", ")", "\n", "print_log", "(", "'\\n'", "+", "table", ".", "table", ",", "logger", "=", "logger", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "summary_table_data", "[", "0", "]", ")", ")", ":", "\n", "            ", "eval_results", "[", "summary_table_data", "[", "0", "]", "\n", "[", "i", "]", "]", "=", "summary_table_data", "[", "1", "]", "[", "i", "]", "/", "100.0", "\n", "", "if", "mmcv", ".", "is_list_of", "(", "results", ",", "str", ")", ":", "\n", "            ", "for", "file_name", "in", "results", ":", "\n", "                ", "os", ".", "remove", "(", "file_name", ")", "\n", "", "", "return", "eval_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.ade.ADE20KDataset.__init__": [[79, 85], ["custom.CustomDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ADE20KDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.jpg'", ",", "\n", "seg_map_suffix", "=", "'.png'", ",", "\n", "reduce_zero_label", "=", "True", ",", "\n", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.drive.DRIVEDataset.__init__": [[21, 28], ["custom.CustomDataset.__init__", "os.exists"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DRIVEDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.png'", ",", "\n", "seg_map_suffix", "=", "'_manual1.png'", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.cityscapes.CityscapesDataset.__init__": [[32, 37], ["custom.CustomDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CityscapesDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'_leftImg8bit.png'", ",", "\n", "seg_map_suffix", "=", "'_gtFine_labelTrainIds.png'", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.cityscapes.CityscapesDataset._convert_to_label_id": [[38, 49], ["isinstance", "numpy.load.copy", "CSLabels.trainId2label.items", "numpy.load"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_convert_to_label_id", "(", "result", ")", ":", "\n", "        ", "\"\"\"Convert trainId to id for cityscapes.\"\"\"", "\n", "if", "isinstance", "(", "result", ",", "str", ")", ":", "\n", "            ", "result", "=", "np", ".", "load", "(", "result", ")", "\n", "", "import", "cityscapesscripts", ".", "helpers", ".", "labels", "as", "CSLabels", "\n", "result_copy", "=", "result", ".", "copy", "(", ")", "\n", "for", "trainId", ",", "label", "in", "CSLabels", ".", "trainId2label", ".", "items", "(", ")", ":", "\n", "            ", "result_copy", "[", "result", "==", "trainId", "]", "=", "label", ".", "id", "\n", "\n", "", "return", "result_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.cityscapes.CityscapesDataset.results2img": [[50, 90], ["mmcv.mkdir_or_exist", "mmcv.ProgressBar", "range", "len", "len", "os.join", "PIL.Image.fromarray().convert", "numpy.zeros", "CSLabels.id2label.items", "PIL.Image.fromarray().convert.putpalette", "PIL.Image.fromarray().convert.save", "result_files.append", "mmcv.ProgressBar.update", "cityscapes.CityscapesDataset._convert_to_label_id", "os.splitext", "os.basename", "PIL.Image.fromarray", "len", "cityscapes.CityscapesDataset.astype"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.convert", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.cityscapes.CityscapesDataset._convert_to_label_id"], ["", "def", "results2img", "(", "self", ",", "results", ",", "imgfile_prefix", ",", "to_label_id", ")", ":", "\n", "        ", "\"\"\"Write the segmentation results to images.\n\n        Args:\n            results (list[list | tuple | ndarray]): Testing results of the\n                dataset.\n            imgfile_prefix (str): The filename prefix of the png files.\n                If the prefix is \"somepath/xxx\",\n                the png files will be named \"somepath/xxx.png\".\n            to_label_id (bool): whether convert output to label_id for\n                submission\n\n        Returns:\n            list[str: str]: result txt files which contains corresponding\n            semantic segmentation images.\n        \"\"\"", "\n", "mmcv", ".", "mkdir_or_exist", "(", "imgfile_prefix", ")", "\n", "result_files", "=", "[", "]", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "self", ")", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "result", "=", "results", "[", "idx", "]", "\n", "if", "to_label_id", ":", "\n", "                ", "result", "=", "self", ".", "_convert_to_label_id", "(", "result", ")", "\n", "", "filename", "=", "self", ".", "img_infos", "[", "idx", "]", "[", "'filename'", "]", "\n", "basename", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "filename", ")", ")", "[", "0", "]", "\n", "\n", "png_filename", "=", "osp", ".", "join", "(", "imgfile_prefix", ",", "f'{basename}.png'", ")", "\n", "\n", "output", "=", "Image", ".", "fromarray", "(", "result", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "import", "cityscapesscripts", ".", "helpers", ".", "labels", "as", "CSLabels", "\n", "palette", "=", "np", ".", "zeros", "(", "(", "len", "(", "CSLabels", ".", "id2label", ")", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "label_id", ",", "label", "in", "CSLabels", ".", "id2label", ".", "items", "(", ")", ":", "\n", "                ", "palette", "[", "label_id", "]", "=", "label", ".", "color", "\n", "\n", "", "output", ".", "putpalette", "(", "palette", ")", "\n", "output", ".", "save", "(", "png_filename", ")", "\n", "result_files", ".", "append", "(", "png_filename", ")", "\n", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "return", "result_files", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.cityscapes.CityscapesDataset.format_results": [[91, 123], ["isinstance", "cityscapes.CityscapesDataset.results2img", "len", "len", "tempfile.TemporaryDirectory", "len", "len"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.cityscapes.CityscapesDataset.results2img"], ["", "def", "format_results", "(", "self", ",", "results", ",", "imgfile_prefix", "=", "None", ",", "to_label_id", "=", "True", ")", ":", "\n", "        ", "\"\"\"Format the results into dir (standard format for Cityscapes\n        evaluation).\n\n        Args:\n            results (list): Testing results of the dataset.\n            imgfile_prefix (str | None): The prefix of images files. It\n                includes the file path and the prefix of filename, e.g.,\n                \"a/b/prefix\". If not specified, a temp file will be created.\n                Default: None.\n            to_label_id (bool): whether convert output to label_id for\n                submission. Default: False\n\n        Returns:\n            tuple: (result_files, tmp_dir), result_files is a list containing\n                the image paths, tmp_dir is the temporal directory created\n                for saving json/png files when img_prefix is not specified.\n        \"\"\"", "\n", "\n", "assert", "isinstance", "(", "results", ",", "list", ")", ",", "'results must be a list'", "\n", "assert", "len", "(", "results", ")", "==", "len", "(", "self", ")", ",", "(", "\n", "'The length of results is not equal to the dataset len: '", "\n", "f'{len(results)} != {len(self)}'", ")", "\n", "\n", "if", "imgfile_prefix", "is", "None", ":", "\n", "            ", "tmp_dir", "=", "tempfile", ".", "TemporaryDirectory", "(", ")", "\n", "imgfile_prefix", "=", "tmp_dir", ".", "name", "\n", "", "else", ":", "\n", "            ", "tmp_dir", "=", "None", "\n", "", "result_files", "=", "self", ".", "results2img", "(", "results", ",", "imgfile_prefix", ",", "to_label_id", ")", "\n", "\n", "return", "result_files", ",", "tmp_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.cityscapes.CityscapesDataset.evaluate": [[124, 163], ["dict", "isinstance", "metric.copy", "dict.update", "metrics.remove", "len", "dict.update", "cityscapes.CityscapesDataset._evaluate_cityscapes", "super().evaluate"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.cityscapes.CityscapesDataset._evaluate_cityscapes", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.evaluate"], ["", "def", "evaluate", "(", "self", ",", "\n", "results", ",", "\n", "metric", "=", "'mIoU'", ",", "\n", "logger", "=", "None", ",", "\n", "imgfile_prefix", "=", "None", ",", "\n", "efficient_test", "=", "False", ")", ":", "\n", "        ", "\"\"\"Evaluation in Cityscapes/default protocol.\n\n        Args:\n            results (list): Testing results of the dataset.\n            metric (str | list[str]): Metrics to be evaluated.\n            logger (logging.Logger | None | str): Logger used for printing\n                related information during evaluation. Default: None.\n            imgfile_prefix (str | None): The prefix of output image file,\n                for cityscapes evaluation only. It includes the file path and\n                the prefix of filename, e.g., \"a/b/prefix\".\n                If results are evaluated with cityscapes protocol, it would be\n                the prefix of output png files. The output files would be\n                png images under folder \"a/b/prefix/xxx.png\", where \"xxx\" is\n                the image name of cityscapes. If not specified, a temp file\n                will be created for evaluation.\n                Default: None.\n\n        Returns:\n            dict[str, float]: Cityscapes/default metrics.\n        \"\"\"", "\n", "\n", "eval_results", "=", "dict", "(", ")", "\n", "metrics", "=", "metric", ".", "copy", "(", ")", "if", "isinstance", "(", "metric", ",", "list", ")", "else", "[", "metric", "]", "\n", "if", "'cityscapes'", "in", "metrics", ":", "\n", "            ", "eval_results", ".", "update", "(", "\n", "self", ".", "_evaluate_cityscapes", "(", "results", ",", "logger", ",", "imgfile_prefix", ")", ")", "\n", "metrics", ".", "remove", "(", "'cityscapes'", ")", "\n", "", "if", "len", "(", "metrics", ")", ">", "0", ":", "\n", "            ", "eval_results", ".", "update", "(", "\n", "super", "(", "CityscapesDataset", ",", "\n", "self", ")", ".", "evaluate", "(", "results", ",", "metrics", ",", "logger", ",", "efficient_test", ")", ")", "\n", "\n", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.cityscapes.CityscapesDataset._evaluate_cityscapes": [[164, 218], ["mmcv.utils.print_log", "cityscapes.CityscapesDataset.format_results", "dict", "mmcv.utils.print_log", "os.abspath", "mmcv.scandir", "dict.update", "seg_map_list.append", "pred_list.append", "CSEval.evaluateImgLists", "tmp_dir.cleanup", "ImportError", "os.join", "CSEval.getPrediction"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.cityscapes.CityscapesDataset.format_results"], ["", "def", "_evaluate_cityscapes", "(", "self", ",", "results", ",", "logger", ",", "imgfile_prefix", ")", ":", "\n", "        ", "\"\"\"Evaluation in Cityscapes protocol.\n\n        Args:\n            results (list): Testing results of the dataset.\n            logger (logging.Logger | str | None): Logger used for printing\n                related information during evaluation. Default: None.\n            imgfile_prefix (str | None): The prefix of output image file\n\n        Returns:\n            dict[str: float]: Cityscapes evaluation results.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "import", "cityscapesscripts", ".", "evaluation", ".", "evalPixelLevelSemanticLabeling", "as", "CSEval", "# noqa", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please run \"pip install cityscapesscripts\" to '", "\n", "'install cityscapesscripts first.'", ")", "\n", "", "msg", "=", "'Evaluating in Cityscapes style'", "\n", "if", "logger", "is", "None", ":", "\n", "            ", "msg", "=", "'\\n'", "+", "msg", "\n", "", "print_log", "(", "msg", ",", "logger", "=", "logger", ")", "\n", "\n", "result_files", ",", "tmp_dir", "=", "self", ".", "format_results", "(", "results", ",", "imgfile_prefix", ")", "\n", "\n", "if", "tmp_dir", "is", "None", ":", "\n", "            ", "result_dir", "=", "imgfile_prefix", "\n", "", "else", ":", "\n", "            ", "result_dir", "=", "tmp_dir", ".", "name", "\n", "\n", "", "eval_results", "=", "dict", "(", ")", "\n", "print_log", "(", "f'Evaluating results under {result_dir} ...'", ",", "logger", "=", "logger", ")", "\n", "\n", "CSEval", ".", "args", ".", "evalInstLevelScore", "=", "True", "\n", "CSEval", ".", "args", ".", "predictionPath", "=", "osp", ".", "abspath", "(", "result_dir", ")", "\n", "CSEval", ".", "args", ".", "evalPixelAccuracy", "=", "True", "\n", "CSEval", ".", "args", ".", "JSONOutput", "=", "False", "\n", "\n", "seg_map_list", "=", "[", "]", "\n", "pred_list", "=", "[", "]", "\n", "\n", "# when evaluating with official cityscapesscripts,", "\n", "# **_gtFine_labelIds.png is used", "\n", "for", "seg_map", "in", "mmcv", ".", "scandir", "(", "\n", "self", ".", "ann_dir", ",", "'gtFine_labelIds.png'", ",", "recursive", "=", "True", ")", ":", "\n", "            ", "seg_map_list", ".", "append", "(", "osp", ".", "join", "(", "self", ".", "ann_dir", ",", "seg_map", ")", ")", "\n", "pred_list", ".", "append", "(", "CSEval", ".", "getPrediction", "(", "CSEval", ".", "args", ",", "seg_map", ")", ")", "\n", "\n", "", "eval_results", ".", "update", "(", "\n", "CSEval", ".", "evaluateImgLists", "(", "pred_list", ",", "seg_map_list", ",", "CSEval", ".", "args", ")", ")", "\n", "\n", "if", "tmp_dir", "is", "not", "None", ":", "\n", "            ", "tmp_dir", ".", "cleanup", "(", ")", "\n", "\n", "", "return", "eval_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder._concat_dataset": [[25, 59], ["cfg.get", "cfg.get", "max", "range", "ConcatDataset", "isinstance", "len", "copy.deepcopy", "isinstance", "isinstance", "isinstance", "datasets.append", "isinstance", "len", "isinstance", "len", "builder.build_dataset"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset"], ["def", "_concat_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build :obj:`ConcatDataset by.\"\"\"", "\n", "from", ".", "dataset_wrappers", "import", "ConcatDataset", "\n", "img_dir", "=", "cfg", "[", "'img_dir'", "]", "\n", "ann_dir", "=", "cfg", ".", "get", "(", "'ann_dir'", ",", "None", ")", "\n", "split", "=", "cfg", ".", "get", "(", "'split'", ",", "None", ")", "\n", "num_img_dir", "=", "len", "(", "img_dir", ")", "if", "isinstance", "(", "img_dir", ",", "(", "list", ",", "tuple", ")", ")", "else", "1", "\n", "if", "ann_dir", "is", "not", "None", ":", "\n", "        ", "num_ann_dir", "=", "len", "(", "ann_dir", ")", "if", "isinstance", "(", "ann_dir", ",", "(", "list", ",", "tuple", ")", ")", "else", "1", "\n", "", "else", ":", "\n", "        ", "num_ann_dir", "=", "0", "\n", "", "if", "split", "is", "not", "None", ":", "\n", "        ", "num_split", "=", "len", "(", "split", ")", "if", "isinstance", "(", "split", ",", "(", "list", ",", "tuple", ")", ")", "else", "1", "\n", "", "else", ":", "\n", "        ", "num_split", "=", "0", "\n", "", "if", "num_img_dir", ">", "1", ":", "\n", "        ", "assert", "num_img_dir", "==", "num_ann_dir", "or", "num_ann_dir", "==", "0", "\n", "assert", "num_img_dir", "==", "num_split", "or", "num_split", "==", "0", "\n", "", "else", ":", "\n", "        ", "assert", "num_split", "==", "num_ann_dir", "or", "num_ann_dir", "<=", "1", "\n", "", "num_dset", "=", "max", "(", "num_split", ",", "num_img_dir", ")", "\n", "\n", "datasets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_dset", ")", ":", "\n", "        ", "data_cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "if", "isinstance", "(", "img_dir", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'img_dir'", "]", "=", "img_dir", "[", "i", "]", "\n", "", "if", "isinstance", "(", "ann_dir", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'ann_dir'", "]", "=", "ann_dir", "[", "i", "]", "\n", "", "if", "isinstance", "(", "split", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'split'", "]", "=", "split", "[", "i", "]", "\n", "", "datasets", ".", "append", "(", "build_dataset", "(", "data_cfg", ",", "default_args", ")", ")", "\n", "\n", "", "return", "ConcatDataset", "(", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset": [[61, 76], ["isinstance", "ConcatDataset", "RepeatDataset", "builder.build_dataset", "builder.build_dataset", "isinstance", "isinstance", "builder._concat_dataset", "mmcv.utils.build_from_cfg", "cfg.get", "cfg.get"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder._concat_dataset"], ["", "def", "build_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build datasets.\"\"\"", "\n", "from", ".", "dataset_wrappers", "import", "ConcatDataset", ",", "RepeatDataset", "\n", "if", "isinstance", "(", "cfg", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "dataset", "=", "ConcatDataset", "(", "[", "build_dataset", "(", "c", ",", "default_args", ")", "for", "c", "in", "cfg", "]", ")", "\n", "", "elif", "cfg", "[", "'type'", "]", "==", "'RepeatDataset'", ":", "\n", "        ", "dataset", "=", "RepeatDataset", "(", "\n", "build_dataset", "(", "cfg", "[", "'dataset'", "]", ",", "default_args", ")", ",", "cfg", "[", "'times'", "]", ")", "\n", "", "elif", "isinstance", "(", "cfg", ".", "get", "(", "'img_dir'", ")", ",", "(", "list", ",", "tuple", ")", ")", "or", "isinstance", "(", "\n", "cfg", ".", "get", "(", "'split'", ",", "None", ")", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "dataset", "=", "_concat_dataset", "(", "cfg", ",", "default_args", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "build_from_cfg", "(", "cfg", ",", "DATASETS", ",", "default_args", ")", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataloader": [[78, 153], ["mmcv.runner.get_dist_info", "dataloader", "torch.utils.data.DistributedSampler", "functools.partial", "functools.partial"], "function", ["None"], ["", "def", "build_dataloader", "(", "dataset", ",", "\n", "samples_per_gpu", ",", "\n", "workers_per_gpu", ",", "\n", "num_gpus", "=", "1", ",", "\n", "dist", "=", "True", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "None", ",", "\n", "drop_last", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "dataloader_type", "=", "'PoolDataLoader'", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Build PyTorch DataLoader.\n\n    In distributed training, each GPU/process has a dataloader.\n    In non-distributed training, there is only one dataloader for all GPUs.\n\n    Args:\n        dataset (Dataset): A PyTorch dataset.\n        samples_per_gpu (int): Number of training samples on each GPU, i.e.,\n            batch size of each GPU.\n        workers_per_gpu (int): How many subprocesses to use for data loading\n            for each GPU.\n        num_gpus (int): Number of GPUs. Only used in non-distributed training.\n        dist (bool): Distributed training/test or not. Default: True.\n        shuffle (bool): Whether to shuffle the data at every epoch.\n            Default: True.\n        seed (int | None): Seed to be used. Default: None.\n        drop_last (bool): Whether to drop the last incomplete batch in epoch.\n            Default: False\n        pin_memory (bool): Whether to use pin_memory in DataLoader.\n            Default: True\n        dataloader_type (str): Type of dataloader. Default: 'PoolDataLoader'\n        kwargs: any keyword argument to be used to initialize DataLoader\n\n    Returns:\n        DataLoader: A PyTorch dataloader.\n    \"\"\"", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "dist", ":", "\n", "        ", "sampler", "=", "DistributedSampler", "(", "\n", "dataset", ",", "world_size", ",", "rank", ",", "shuffle", "=", "shuffle", ")", "\n", "shuffle", "=", "False", "\n", "batch_size", "=", "samples_per_gpu", "\n", "num_workers", "=", "workers_per_gpu", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "None", "\n", "batch_size", "=", "num_gpus", "*", "samples_per_gpu", "\n", "num_workers", "=", "num_gpus", "*", "workers_per_gpu", "\n", "\n", "", "init_fn", "=", "partial", "(", "\n", "worker_init_fn", ",", "num_workers", "=", "num_workers", ",", "rank", "=", "rank", ",", "\n", "seed", "=", "seed", ")", "if", "seed", "is", "not", "None", "else", "None", "\n", "\n", "assert", "dataloader_type", "in", "(", "\n", "'DataLoader'", ",", "\n", "'PoolDataLoader'", ")", ",", "f'unsupported dataloader {dataloader_type}'", "\n", "\n", "if", "dataloader_type", "==", "'PoolDataLoader'", ":", "\n", "        ", "dataloader", "=", "PoolDataLoader", "\n", "", "elif", "dataloader_type", "==", "'DataLoader'", ":", "\n", "        ", "dataloader", "=", "DataLoader", "\n", "\n", "", "data_loader", "=", "dataloader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "partial", "(", "collate", ",", "samples_per_gpu", "=", "samples_per_gpu", ")", ",", "\n", "pin_memory", "=", "pin_memory", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "worker_init_fn", "=", "init_fn", ",", "\n", "drop_last", "=", "drop_last", ",", "\n", "**", "kwargs", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.worker_init_fn": [[155, 170], ["numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "worker_init_fn", "(", "worker_id", ",", "num_workers", ",", "rank", ",", "seed", ")", ":", "\n", "    ", "\"\"\"Worker init func for dataloader.\n\n    The seed of each worker equals to num_worker * rank + worker_id + user_seed\n\n    Args:\n        worker_id (int): Worker id.\n        num_workers (int): Number of workers.\n        rank (int): The rank of current process.\n        seed (int): The random seed to use.\n    \"\"\"", "\n", "\n", "worker_seed", "=", "num_workers", "*", "rank", "+", "worker_id", "+", "seed", "\n", "np", ".", "random", ".", "seed", "(", "worker_seed", ")", "\n", "random", ".", "seed", "(", "worker_seed", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.dataset_wrappers.ConcatDataset.__init__": [[17, 21], ["torch.utils.data.dataset.ConcatDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", "datasets", ")", "\n", "self", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "self", ".", "PALETTE", "=", "datasets", "[", "0", "]", ".", "PALETTE", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.dataset_wrappers.RepeatDataset.__init__": [[37, 43], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "times", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "times", "=", "times", "\n", "self", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "self", ".", "PALETTE", "=", "dataset", ".", "PALETTE", "\n", "self", ".", "_ori_len", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.dataset_wrappers.RepeatDataset.__getitem__": [[44, 47], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get item from original dataset.\"\"\"", "\n", "return", "self", ".", "dataset", "[", "idx", "%", "self", ".", "_ori_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.dataset_wrappers.RepeatDataset.__len__": [[48, 51], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"The length is multiplied by ``times``\"\"\"", "\n", "return", "self", ".", "times", "*", "self", ".", "_ori_len", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.pascal_context.PascalContextDataset.__init__": [[47, 55], ["custom.CustomDataset.__init__", "os.exists"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "split", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PascalContextDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.jpg'", ",", "\n", "seg_map_suffix", "=", "'.png'", ",", "\n", "split", "=", "split", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "and", "self", ".", "split", "is", "not", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.hrf.HRFDataset.__init__": [[21, 28], ["custom.CustomDataset.__init__", "os.exists"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "HRFDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.png'", ",", "\n", "seg_map_suffix", "=", "'.png'", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.stare.STAREDataset.__init__": [[21, 28], ["custom.CustomDataset.__init__", "os.exists"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "STAREDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.png'", ",", "\n", "seg_map_suffix", "=", "'.ah.png'", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.voc.PascalVOCDataset.__init__": [[26, 30], ["custom.CustomDataset.__init__", "os.exists"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "split", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PascalVOCDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.jpg'", ",", "seg_map_suffix", "=", "'.png'", ",", "split", "=", "split", ",", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "and", "self", ".", "split", "is", "not", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize.__init__": [[41, 66], ["isinstance", "mmcv.is_list_of", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "img_scale", "=", "None", ",", "\n", "multiscale_mode", "=", "'range'", ",", "\n", "ratio_range", "=", "None", ",", "\n", "keep_ratio", "=", "True", ")", ":", "\n", "        ", "if", "img_scale", "is", "None", ":", "\n", "            ", "self", ".", "img_scale", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "img_scale", ",", "list", ")", ":", "\n", "                ", "self", ".", "img_scale", "=", "img_scale", "\n", "", "else", ":", "\n", "                ", "self", ".", "img_scale", "=", "[", "img_scale", "]", "\n", "", "assert", "mmcv", ".", "is_list_of", "(", "self", ".", "img_scale", ",", "tuple", ")", "\n", "\n", "", "if", "ratio_range", "is", "not", "None", ":", "\n", "# mode 1: given img_scale=None and a range of image ratio", "\n", "# mode 2: given a scale and a range of image ratio", "\n", "            ", "assert", "self", ".", "img_scale", "is", "None", "or", "len", "(", "self", ".", "img_scale", ")", "==", "1", "\n", "", "else", ":", "\n", "# mode 3 and 4: given multiple scales or a range of scales", "\n", "            ", "assert", "multiscale_mode", "in", "[", "'value'", ",", "'range'", "]", "\n", "\n", "", "self", ".", "multiscale_mode", "=", "multiscale_mode", "\n", "self", ".", "ratio_range", "=", "ratio_range", "\n", "self", ".", "keep_ratio", "=", "keep_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize.random_select": [[67, 84], ["mmcv.is_list_of", "numpy.random.randint", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "random_select", "(", "img_scales", ")", ":", "\n", "        ", "\"\"\"Randomly select an img_scale from given candidates.\n\n        Args:\n            img_scales (list[tuple]): Images scales for selection.\n\n        Returns:\n            (tuple, int): Returns a tuple ``(img_scale, scale_dix)``,\n                where ``img_scale`` is the selected image scale and\n                ``scale_idx`` is the selected index in the given candidates.\n        \"\"\"", "\n", "\n", "assert", "mmcv", ".", "is_list_of", "(", "img_scales", ",", "tuple", ")", "\n", "scale_idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "img_scales", ")", ")", "\n", "img_scale", "=", "img_scales", "[", "scale_idx", "]", "\n", "return", "img_scale", ",", "scale_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize.random_sample": [[85, 111], ["numpy.random.randint", "numpy.random.randint", "mmcv.is_list_of", "max", "min", "min", "min", "len", "max", "max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "random_sample", "(", "img_scales", ")", ":", "\n", "        ", "\"\"\"Randomly sample an img_scale when ``multiscale_mode=='range'``.\n\n        Args:\n            img_scales (list[tuple]): Images scale range for sampling.\n                There must be two tuples in img_scales, which specify the lower\n                and uper bound of image scales.\n\n        Returns:\n            (tuple, None): Returns a tuple ``(img_scale, None)``, where\n                ``img_scale`` is sampled scale and None is just a placeholder\n                to be consistent with :func:`random_select`.\n        \"\"\"", "\n", "\n", "assert", "mmcv", ".", "is_list_of", "(", "img_scales", ",", "tuple", ")", "and", "len", "(", "img_scales", ")", "==", "2", "\n", "img_scale_long", "=", "[", "max", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "img_scale_short", "=", "[", "min", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "long_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_long", ")", ",", "\n", "max", "(", "img_scale_long", ")", "+", "1", ")", "\n", "short_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_short", ")", ",", "\n", "max", "(", "img_scale_short", ")", "+", "1", ")", "\n", "img_scale", "=", "(", "long_edge", ",", "short_edge", ")", "\n", "return", "img_scale", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize.random_sample_ratio": [[112, 138], ["isinstance", "int", "int", "len", "numpy.random.random_sample"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize.random_sample"], ["", "@", "staticmethod", "\n", "def", "random_sample_ratio", "(", "img_scale", ",", "ratio_range", ")", ":", "\n", "        ", "\"\"\"Randomly sample an img_scale when ``ratio_range`` is specified.\n\n        A ratio will be randomly sampled from the range specified by\n        ``ratio_range``. Then it would be multiplied with ``img_scale`` to\n        generate sampled scale.\n\n        Args:\n            img_scale (tuple): Images scale base to multiply with ratio.\n            ratio_range (tuple[float]): The minimum and maximum ratio to scale\n                the ``img_scale``.\n\n        Returns:\n            (tuple, None): Returns a tuple ``(scale, None)``, where\n                ``scale`` is sampled ratio multiplied with ``img_scale`` and\n                None is just a placeholder to be consistent with\n                :func:`random_select`.\n        \"\"\"", "\n", "\n", "assert", "isinstance", "(", "img_scale", ",", "tuple", ")", "and", "len", "(", "img_scale", ")", "==", "2", "\n", "min_ratio", ",", "max_ratio", "=", "ratio_range", "\n", "assert", "min_ratio", "<=", "max_ratio", "\n", "ratio", "=", "np", ".", "random", ".", "random_sample", "(", ")", "*", "(", "max_ratio", "-", "min_ratio", ")", "+", "min_ratio", "\n", "scale", "=", "int", "(", "img_scale", "[", "0", "]", "*", "ratio", ")", ",", "int", "(", "img_scale", "[", "1", "]", "*", "ratio", ")", "\n", "return", "scale", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize._random_scale": [[139, 176], ["transforms.Resize.random_sample_ratio", "transforms.Resize.random_sample_ratio", "len", "transforms.Resize.random_sample", "transforms.Resize.random_select"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize.random_sample_ratio", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize.random_sample_ratio", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize.random_sample", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize.random_select"], ["", "def", "_random_scale", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Randomly sample an img_scale according to ``ratio_range`` and\n        ``multiscale_mode``.\n\n        If ``ratio_range`` is specified, a ratio will be sampled and be\n        multiplied with ``img_scale``.\n        If multiple scales are specified by ``img_scale``, a scale will be\n        sampled according to ``multiscale_mode``.\n        Otherwise, single scale will be used.\n\n        Args:\n            results (dict): Result dict from :obj:`dataset`.\n\n        Returns:\n            dict: Two new keys 'scale` and 'scale_idx` are added into\n                ``results``, which would be used by subsequent pipelines.\n        \"\"\"", "\n", "\n", "if", "self", ".", "ratio_range", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "img_scale", "is", "None", ":", "\n", "                ", "h", ",", "w", "=", "results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "\n", "scale", ",", "scale_idx", "=", "self", ".", "random_sample_ratio", "(", "(", "w", ",", "h", ")", ",", "\n", "self", ".", "ratio_range", ")", "\n", "", "else", ":", "\n", "                ", "scale", ",", "scale_idx", "=", "self", ".", "random_sample_ratio", "(", "\n", "self", ".", "img_scale", "[", "0", "]", ",", "self", ".", "ratio_range", ")", "\n", "", "", "elif", "len", "(", "self", ".", "img_scale", ")", "==", "1", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "img_scale", "[", "0", "]", ",", "0", "\n", "", "elif", "self", ".", "multiscale_mode", "==", "'range'", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "random_sample", "(", "self", ".", "img_scale", ")", "\n", "", "elif", "self", ".", "multiscale_mode", "==", "'value'", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "random_select", "(", "self", ".", "img_scale", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "results", "[", "'scale'", "]", "=", "scale", "\n", "results", "[", "'scale_idx'", "]", "=", "scale_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize._resize_img": [[177, 198], ["numpy.array", "mmcv.imrescale", "mmcv.imresize"], "methods", ["None"], ["", "def", "_resize_img", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Resize images with ``results['scale']``.\"\"\"", "\n", "if", "self", ".", "keep_ratio", ":", "\n", "            ", "img", ",", "scale_factor", "=", "mmcv", ".", "imrescale", "(", "\n", "results", "[", "'img'", "]", ",", "results", "[", "'scale'", "]", ",", "return_scale", "=", "True", ")", "\n", "# the w_scale and h_scale has minor difference", "\n", "# a real fix should be done in the mmcv.imrescale in the future", "\n", "new_h", ",", "new_w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "h", ",", "w", "=", "results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "\n", "w_scale", "=", "new_w", "/", "w", "\n", "h_scale", "=", "new_h", "/", "h", "\n", "", "else", ":", "\n", "            ", "img", ",", "w_scale", ",", "h_scale", "=", "mmcv", ".", "imresize", "(", "\n", "results", "[", "'img'", "]", ",", "results", "[", "'scale'", "]", ",", "return_scale", "=", "True", ")", "\n", "", "scale_factor", "=", "np", ".", "array", "(", "[", "w_scale", ",", "h_scale", ",", "w_scale", ",", "h_scale", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "# in case that there is no padding", "\n", "results", "[", "'scale_factor'", "]", "=", "scale_factor", "\n", "results", "[", "'keep_ratio'", "]", "=", "self", ".", "keep_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize._resize_seg": [[199, 209], ["results.get", "mmcv.imrescale", "mmcv.imresize"], "methods", ["None"], ["", "def", "_resize_seg", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Resize semantic segmentation map with ``results['scale']``.\"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "if", "self", ".", "keep_ratio", ":", "\n", "                ", "gt_seg", "=", "mmcv", ".", "imrescale", "(", "\n", "results", "[", "key", "]", ",", "results", "[", "'scale'", "]", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "                ", "gt_seg", "=", "mmcv", ".", "imresize", "(", "\n", "results", "[", "key", "]", ",", "results", "[", "'scale'", "]", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "results", "[", "key", "]", "=", "gt_seg", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize.__call__": [[210, 227], ["transforms.Resize._resize_img", "transforms.Resize._resize_seg", "transforms.Resize._random_scale"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize._resize_img", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize._resize_seg", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize._random_scale"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to resize images, bounding boxes, masks, semantic\n        segmentation map.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Resized results, 'img_shape', 'pad_shape', 'scale_factor',\n                'keep_ratio' keys are added into result dict.\n        \"\"\"", "\n", "\n", "if", "'scale'", "not", "in", "results", ":", "\n", "            ", "self", ".", "_random_scale", "(", "results", ")", "\n", "", "self", ".", "_resize_img", "(", "results", ")", "\n", "self", ".", "_resize_seg", "(", "results", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Resize.__repr__": [[228, 235], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "(", "f'(img_scale={self.img_scale}, '", "\n", "f'multiscale_mode={self.multiscale_mode}, '", "\n", "f'ratio_range={self.ratio_range}, '", "\n", "f'keep_ratio={self.keep_ratio})'", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RandomFlip.__init__": [[251, 258], ["mmcv.utils.deprecated_api_warning"], "methods", ["None"], ["@", "deprecated_api_warning", "(", "{", "'flip_ratio'", ":", "'prob'", "}", ",", "cls_name", "=", "'RandomFlip'", ")", "\n", "def", "__init__", "(", "self", ",", "prob", "=", "None", ",", "direction", "=", "'horizontal'", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "direction", "=", "direction", "\n", "if", "prob", "is", "not", "None", ":", "\n", "            ", "assert", "prob", ">=", "0", "and", "prob", "<=", "1", "\n", "", "assert", "direction", "in", "[", "'horizontal'", ",", "'vertical'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RandomFlip.__call__": [[259, 287], ["mmcv.imflip", "results.get", "mmcv.imflip().copy", "numpy.random.rand", "mmcv.imflip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to flip bounding boxes, masks, semantic segmentation\n        maps.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Flipped results, 'flip', 'flip_direction' keys are added into\n                result dict.\n        \"\"\"", "\n", "\n", "if", "'flip'", "not", "in", "results", ":", "\n", "            ", "flip", "=", "True", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "prob", "else", "False", "\n", "results", "[", "'flip'", "]", "=", "flip", "\n", "", "if", "'flip_direction'", "not", "in", "results", ":", "\n", "            ", "results", "[", "'flip_direction'", "]", "=", "self", ".", "direction", "\n", "", "if", "results", "[", "'flip'", "]", ":", "\n", "# flip image", "\n", "            ", "results", "[", "'img'", "]", "=", "mmcv", ".", "imflip", "(", "\n", "results", "[", "'img'", "]", ",", "direction", "=", "results", "[", "'flip_direction'", "]", ")", "\n", "\n", "# flip segs", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "# use copy() to make numpy stride positive", "\n", "                ", "results", "[", "key", "]", "=", "mmcv", ".", "imflip", "(", "\n", "results", "[", "key", "]", ",", "direction", "=", "results", "[", "'flip_direction'", "]", ")", ".", "copy", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RandomFlip.__repr__": [[288, 290], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(prob={self.prob})'", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Pad.__init__": [[308, 320], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "size", "=", "None", ",", "\n", "size_divisor", "=", "None", ",", "\n", "pad_val", "=", "0", ",", "\n", "seg_pad_val", "=", "255", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "size_divisor", "=", "size_divisor", "\n", "self", ".", "pad_val", "=", "pad_val", "\n", "self", ".", "seg_pad_val", "=", "seg_pad_val", "\n", "# only one of size and size_divisor should be valid", "\n", "assert", "size", "is", "not", "None", "or", "size_divisor", "is", "not", "None", "\n", "assert", "size", "is", "None", "or", "size_divisor", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Pad._pad_img": [[321, 333], ["mmcv.impad", "mmcv.impad_to_multiple"], "methods", ["None"], ["", "def", "_pad_img", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Pad images according to ``self.size``.\"\"\"", "\n", "if", "self", ".", "size", "is", "not", "None", ":", "\n", "            ", "padded_img", "=", "mmcv", ".", "impad", "(", "\n", "results", "[", "'img'", "]", ",", "shape", "=", "self", ".", "size", ",", "pad_val", "=", "self", ".", "pad_val", ")", "\n", "", "elif", "self", ".", "size_divisor", "is", "not", "None", ":", "\n", "            ", "padded_img", "=", "mmcv", ".", "impad_to_multiple", "(", "\n", "results", "[", "'img'", "]", ",", "self", ".", "size_divisor", ",", "pad_val", "=", "self", ".", "pad_val", ")", "\n", "", "results", "[", "'img'", "]", "=", "padded_img", "\n", "results", "[", "'pad_shape'", "]", "=", "padded_img", ".", "shape", "\n", "results", "[", "'pad_fixed_size'", "]", "=", "self", ".", "size", "\n", "results", "[", "'pad_size_divisor'", "]", "=", "self", ".", "size_divisor", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Pad._pad_seg": [[334, 341], ["results.get", "mmcv.impad"], "methods", ["None"], ["", "def", "_pad_seg", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Pad masks according to ``results['pad_shape']``.\"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "results", "[", "key", "]", "=", "mmcv", ".", "impad", "(", "\n", "results", "[", "key", "]", ",", "\n", "shape", "=", "results", "[", "'pad_shape'", "]", "[", ":", "2", "]", ",", "\n", "pad_val", "=", "self", ".", "seg_pad_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Pad.__call__": [[342, 355], ["transforms.Pad._pad_img", "transforms.Pad._pad_seg"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Pad._pad_img", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Pad._pad_seg"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to pad images, masks, semantic segmentation maps.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Updated result dict.\n        \"\"\"", "\n", "\n", "self", ".", "_pad_img", "(", "results", ")", "\n", "self", ".", "_pad_seg", "(", "results", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Pad.__repr__": [[356, 361], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(size={self.size}, size_divisor={self.size_divisor}, '", "f'pad_val={self.pad_val})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Normalize.__init__": [[376, 380], ["numpy.array", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "to_rgb", "=", "True", ")", ":", "\n", "        ", "self", ".", "mean", "=", "np", ".", "array", "(", "mean", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "std", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "to_rgb", "=", "to_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Normalize.__call__": [[381, 397], ["mmcv.imnormalize", "dict"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to normalize images.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Normalized results, 'img_norm_cfg' key is added into\n                result dict.\n        \"\"\"", "\n", "\n", "results", "[", "'img'", "]", "=", "mmcv", ".", "imnormalize", "(", "results", "[", "'img'", "]", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "\n", "self", ".", "to_rgb", ")", "\n", "results", "[", "'img_norm_cfg'", "]", "=", "dict", "(", "\n", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ",", "to_rgb", "=", "self", ".", "to_rgb", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Normalize.__repr__": [[398, 403], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(mean={self.mean}, std={self.std}, to_rgb='", "f'{self.to_rgb})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Rerange.__init__": [[416, 422], ["isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "min_value", "=", "0", ",", "max_value", "=", "255", ")", ":", "\n", "        ", "assert", "isinstance", "(", "min_value", ",", "float", ")", "or", "isinstance", "(", "min_value", ",", "int", ")", "\n", "assert", "isinstance", "(", "max_value", ",", "float", ")", "or", "isinstance", "(", "max_value", ",", "int", ")", "\n", "assert", "min_value", "<", "max_value", "\n", "self", ".", "min_value", "=", "min_value", "\n", "self", ".", "max_value", "=", "max_value", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Rerange.__call__": [[423, 444], ["numpy.min", "numpy.max"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to rerange images.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n        Returns:\n            dict: Reranged results.\n        \"\"\"", "\n", "\n", "img", "=", "results", "[", "'img'", "]", "\n", "img_min_value", "=", "np", ".", "min", "(", "img", ")", "\n", "img_max_value", "=", "np", ".", "max", "(", "img", ")", "\n", "\n", "assert", "img_min_value", "<", "img_max_value", "\n", "# rerange to [0, 1]", "\n", "img", "=", "(", "img", "-", "img_min_value", ")", "/", "(", "img_max_value", "-", "img_min_value", ")", "\n", "# rerange to [min_value, max_value]", "\n", "img", "=", "img", "*", "(", "self", ".", "max_value", "-", "self", ".", "min_value", ")", "+", "self", ".", "min_value", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.Rerange.__repr__": [[445, 449], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(min_value={self.min_value}, max_value={self.max_value})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.CLAHE.__init__": [[465, 471], ["isinstance", "mmcv.utils.is_tuple_of", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "clip_limit", "=", "40.0", ",", "tile_grid_size", "=", "(", "8", ",", "8", ")", ")", ":", "\n", "        ", "assert", "isinstance", "(", "clip_limit", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "clip_limit", "=", "clip_limit", "\n", "assert", "is_tuple_of", "(", "tile_grid_size", ",", "int", ")", "\n", "assert", "len", "(", "tile_grid_size", ")", "==", "2", "\n", "self", ".", "tile_grid_size", "=", "tile_grid_size", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.CLAHE.__call__": [[472, 488], ["range", "mmcv.clahe", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to Use CLAHE method process images.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Processed results.\n        \"\"\"", "\n", "\n", "for", "i", "in", "range", "(", "results", "[", "'img'", "]", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "results", "[", "'img'", "]", "[", ":", ",", ":", ",", "i", "]", "=", "mmcv", ".", "clahe", "(", "\n", "np", ".", "array", "(", "results", "[", "'img'", "]", "[", ":", ",", ":", ",", "i", "]", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "\n", "self", ".", "clip_limit", ",", "self", ".", "tile_grid_size", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.CLAHE.__repr__": [[489, 494], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(clip_limit={self.clip_limit}, '", "f'tile_grid_size={self.tile_grid_size})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RandomCrop.__init__": [[506, 511], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "crop_size", ",", "cat_max_ratio", "=", "1.", ",", "ignore_index", "=", "255", ")", ":", "\n", "        ", "assert", "crop_size", "[", "0", "]", ">", "0", "and", "crop_size", "[", "1", "]", ">", "0", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "cat_max_ratio", "=", "cat_max_ratio", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RandomCrop.get_crop_bbox": [[512, 522], ["max", "max", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "def", "get_crop_bbox", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Randomly get a crop bounding box.\"\"\"", "\n", "margin_h", "=", "max", "(", "img", ".", "shape", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", ",", "0", ")", "\n", "margin_w", "=", "max", "(", "img", ".", "shape", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", ",", "0", ")", "\n", "offset_h", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "margin_h", "+", "1", ")", "\n", "offset_w", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "margin_w", "+", "1", ")", "\n", "crop_y1", ",", "crop_y2", "=", "offset_h", ",", "offset_h", "+", "self", ".", "crop_size", "[", "0", "]", "\n", "crop_x1", ",", "crop_x2", "=", "offset_w", ",", "offset_w", "+", "self", ".", "crop_size", "[", "1", "]", "\n", "\n", "return", "crop_y1", ",", "crop_y2", ",", "crop_x1", ",", "crop_x2", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RandomCrop.crop": [[523, 528], ["None"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "img", ",", "crop_bbox", ")", ":", "\n", "        ", "\"\"\"Crop from ``img``\"\"\"", "\n", "crop_y1", ",", "crop_y2", ",", "crop_x1", ",", "crop_x2", "=", "crop_bbox", "\n", "img", "=", "img", "[", "crop_y1", ":", "crop_y2", ",", "crop_x1", ":", "crop_x2", ",", "...", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RandomCrop.__call__": [[529, 564], ["transforms.RandomCrop.get_crop_bbox", "transforms.RandomCrop.crop", "results.get", "range", "transforms.RandomCrop.crop", "transforms.RandomCrop.crop", "numpy.unique", "transforms.RandomCrop.get_crop_bbox", "len", "numpy.max", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RandomCrop.get_crop_bbox", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RandomCrop.crop", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RandomCrop.crop", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RandomCrop.crop", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RandomCrop.get_crop_bbox"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to randomly crop images, semantic segmentation maps.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Randomly cropped results, 'img_shape' key in result dict is\n                updated according to crop size.\n        \"\"\"", "\n", "\n", "img", "=", "results", "[", "'img'", "]", "\n", "crop_bbox", "=", "self", ".", "get_crop_bbox", "(", "img", ")", "\n", "if", "self", ".", "cat_max_ratio", "<", "1.", ":", "\n", "# Repeat 10 times", "\n", "            ", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "                ", "seg_temp", "=", "self", ".", "crop", "(", "results", "[", "'gt_semantic_seg'", "]", ",", "crop_bbox", ")", "\n", "labels", ",", "cnt", "=", "np", ".", "unique", "(", "seg_temp", ",", "return_counts", "=", "True", ")", "\n", "cnt", "=", "cnt", "[", "labels", "!=", "self", ".", "ignore_index", "]", "\n", "if", "len", "(", "cnt", ")", ">", "1", "and", "np", ".", "max", "(", "cnt", ")", "/", "np", ".", "sum", "(", "\n", "cnt", ")", "<", "self", ".", "cat_max_ratio", ":", "\n", "                    ", "break", "\n", "", "crop_bbox", "=", "self", ".", "get_crop_bbox", "(", "img", ")", "\n", "\n", "# crop the image", "\n", "", "", "img", "=", "self", ".", "crop", "(", "img", ",", "crop_bbox", ")", "\n", "img_shape", "=", "img", ".", "shape", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img_shape", "\n", "\n", "# crop semantic seg", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "results", "[", "key", "]", "=", "self", ".", "crop", "(", "results", "[", "key", "]", ",", "crop_bbox", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RandomCrop.__repr__": [[565, 567], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(crop_size={self.crop_size})'", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RandomRotate.__init__": [[588, 608], ["isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "prob", ",", "\n", "degree", ",", "\n", "pad_val", "=", "0", ",", "\n", "seg_pad_val", "=", "255", ",", "\n", "center", "=", "None", ",", "\n", "auto_bound", "=", "False", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "assert", "prob", ">=", "0", "and", "prob", "<=", "1", "\n", "if", "isinstance", "(", "degree", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "            ", "assert", "degree", ">", "0", ",", "f'degree {degree} should be positive'", "\n", "self", ".", "degree", "=", "(", "-", "degree", ",", "degree", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "degree", "=", "degree", "\n", "", "assert", "len", "(", "self", ".", "degree", ")", "==", "2", ",", "f'degree {self.degree} should be a '", "f'tuple of (min, max)'", "\n", "self", ".", "pal_val", "=", "pad_val", "\n", "self", ".", "seg_pad_val", "=", "seg_pad_val", "\n", "self", ".", "center", "=", "center", "\n", "self", ".", "auto_bound", "=", "auto_bound", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RandomRotate.__call__": [[609, 640], ["numpy.random.uniform", "min", "max", "mmcv.imrotate", "results.get", "numpy.random.rand", "mmcv.imrotate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to rotate image, semantic segmentation maps.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Rotated results.\n        \"\"\"", "\n", "\n", "rotate", "=", "True", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "prob", "else", "False", "\n", "degree", "=", "np", ".", "random", ".", "uniform", "(", "min", "(", "*", "self", ".", "degree", ")", ",", "max", "(", "*", "self", ".", "degree", ")", ")", "\n", "if", "rotate", ":", "\n", "# rotate image", "\n", "            ", "results", "[", "'img'", "]", "=", "mmcv", ".", "imrotate", "(", "\n", "results", "[", "'img'", "]", ",", "\n", "angle", "=", "degree", ",", "\n", "border_value", "=", "self", ".", "pal_val", ",", "\n", "center", "=", "self", ".", "center", ",", "\n", "auto_bound", "=", "self", ".", "auto_bound", ")", "\n", "\n", "# rotate segs", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "                ", "results", "[", "key", "]", "=", "mmcv", ".", "imrotate", "(", "\n", "results", "[", "key", "]", ",", "\n", "angle", "=", "degree", ",", "\n", "border_value", "=", "self", ".", "seg_pad_val", ",", "\n", "center", "=", "self", ".", "center", ",", "\n", "auto_bound", "=", "self", ".", "auto_bound", ",", "\n", "interpolation", "=", "'nearest'", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RandomRotate.__repr__": [[641, 650], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(prob={self.prob}, '", "f'degree={self.degree}, '", "f'pad_val={self.pal_val}, '", "f'seg_pad_val={self.seg_pad_val}, '", "f'center={self.center}, '", "f'auto_bound={self.auto_bound})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RGB2Gray.__init__": [[668, 675], ["isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "out_channels", "=", "None", ",", "weights", "=", "(", "0.299", ",", "0.587", ",", "0.114", ")", ")", ":", "\n", "        ", "assert", "out_channels", "is", "None", "or", "out_channels", ">", "0", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "assert", "isinstance", "(", "weights", ",", "tuple", ")", "\n", "for", "item", "in", "weights", ":", "\n", "            ", "assert", "isinstance", "(", "item", ",", "(", "float", ",", "int", ")", ")", "\n", "", "self", ".", "weights", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RGB2Gray.__call__": [[676, 699], ["numpy.array().reshape", "len", "len", "img.repeat.repeat.repeat", "img.repeat.repeat.repeat", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to convert RGB image to grayscale image.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Result dict with grayscale image.\n        \"\"\"", "\n", "img", "=", "results", "[", "'img'", "]", "\n", "assert", "len", "(", "img", ".", "shape", ")", "==", "3", "\n", "assert", "img", ".", "shape", "[", "2", "]", "==", "len", "(", "self", ".", "weights", ")", "\n", "weights", "=", "np", ".", "array", "(", "self", ".", "weights", ")", ".", "reshape", "(", "(", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "img", "=", "(", "img", "*", "weights", ")", ".", "sum", "(", "2", ",", "keepdims", "=", "True", ")", "\n", "if", "self", ".", "out_channels", "is", "None", ":", "\n", "            ", "img", "=", "img", ".", "repeat", "(", "weights", ".", "shape", "[", "2", "]", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "img", ".", "repeat", "(", "self", ".", "out_channels", ",", "axis", "=", "2", ")", "\n", "\n", "", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.RGB2Gray.__repr__": [[700, 705], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(out_channels={self.out_channels}, '", "f'weights={self.weights})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.AdjustGamma.__init__": [[716, 723], ["numpy.array().astype", "isinstance", "isinstance", "numpy.array", "numpy.arange"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "gamma", "=", "1.0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "gamma", ",", "float", ")", "or", "isinstance", "(", "gamma", ",", "int", ")", "\n", "assert", "gamma", ">", "0", "\n", "self", ".", "gamma", "=", "gamma", "\n", "inv_gamma", "=", "1.0", "/", "gamma", "\n", "self", ".", "table", "=", "np", ".", "array", "(", "[", "(", "i", "/", "255.0", ")", "**", "inv_gamma", "*", "255", "\n", "for", "i", "in", "np", ".", "arange", "(", "256", ")", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.AdjustGamma.__call__": [[724, 738], ["mmcv.lut_transform", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to process the image with gamma correction.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Processed results.\n        \"\"\"", "\n", "\n", "results", "[", "'img'", "]", "=", "mmcv", ".", "lut_transform", "(", "\n", "np", ".", "array", "(", "results", "[", "'img'", "]", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "self", ".", "table", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.AdjustGamma.__repr__": [[739, 741], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(gamma={self.gamma})'", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.SegRescale.__init__": [[751, 753], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale_factor", "=", "1", ")", ":", "\n", "        ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.SegRescale.__call__": [[754, 768], ["results.get", "mmcv.imrescale"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to scale the semantic segmentation map.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Result dict with semantic segmentation map scaled.\n        \"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "if", "self", ".", "scale_factor", "!=", "1", ":", "\n", "                ", "results", "[", "key", "]", "=", "mmcv", ".", "imrescale", "(", "\n", "results", "[", "key", "]", ",", "self", ".", "scale_factor", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.SegRescale.__repr__": [[769, 771], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(scale_factor={self.scale_factor})'", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.__init__": [[795, 804], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "brightness_delta", "=", "32", ",", "\n", "contrast_range", "=", "(", "0.5", ",", "1.5", ")", ",", "\n", "saturation_range", "=", "(", "0.5", ",", "1.5", ")", ",", "\n", "hue_delta", "=", "18", ")", ":", "\n", "        ", "self", ".", "brightness_delta", "=", "brightness_delta", "\n", "self", ".", "contrast_lower", ",", "self", ".", "contrast_upper", "=", "contrast_range", "\n", "self", ".", "saturation_lower", ",", "self", ".", "saturation_upper", "=", "saturation_range", "\n", "self", ".", "hue_delta", "=", "hue_delta", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.convert": [[805, 810], ["numpy.clip", "numpy.clip.astype", "numpy.clip.astype"], "methods", ["None"], ["", "def", "convert", "(", "self", ",", "img", ",", "alpha", "=", "1", ",", "beta", "=", "0", ")", ":", "\n", "        ", "\"\"\"Multiple with alpha and add beat with clip.\"\"\"", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "*", "alpha", "+", "beta", "\n", "img", "=", "np", ".", "clip", "(", "img", ",", "0", ",", "255", ")", "\n", "return", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.brightness": [[811, 819], ["numpy.random.randint", "transforms.PhotoMetricDistortion.convert", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.convert"], ["", "def", "brightness", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Brightness distortion.\"\"\"", "\n", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "return", "self", ".", "convert", "(", "\n", "img", ",", "\n", "beta", "=", "random", ".", "uniform", "(", "-", "self", ".", "brightness_delta", ",", "\n", "self", ".", "brightness_delta", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.contrast": [[820, 827], ["numpy.random.randint", "transforms.PhotoMetricDistortion.convert", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.convert"], ["", "def", "contrast", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Contrast distortion.\"\"\"", "\n", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "return", "self", ".", "convert", "(", "\n", "img", ",", "\n", "alpha", "=", "random", ".", "uniform", "(", "self", ".", "contrast_lower", ",", "self", ".", "contrast_upper", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.saturation": [[828, 838], ["numpy.random.randint", "mmcv.bgr2hsv", "transforms.PhotoMetricDistortion.convert", "mmcv.hsv2bgr", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.convert"], ["", "def", "saturation", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Saturation distortion.\"\"\"", "\n", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "img", "=", "mmcv", ".", "bgr2hsv", "(", "img", ")", "\n", "img", "[", ":", ",", ":", ",", "1", "]", "=", "self", ".", "convert", "(", "\n", "img", "[", ":", ",", ":", ",", "1", "]", ",", "\n", "alpha", "=", "random", ".", "uniform", "(", "self", ".", "saturation_lower", ",", "\n", "self", ".", "saturation_upper", ")", ")", "\n", "img", "=", "mmcv", ".", "hsv2bgr", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.hue": [[839, 848], ["numpy.random.randint", "mmcv.bgr2hsv", "mmcv.hsv2bgr", "img[].astype", "numpy.random.randint"], "methods", ["None"], ["", "def", "hue", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Hue distortion.\"\"\"", "\n", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "img", "=", "mmcv", ".", "bgr2hsv", "(", "img", ")", "\n", "img", "[", ":", ",", ":", ",", "\n", "0", "]", "=", "(", "img", "[", ":", ",", ":", ",", "0", "]", ".", "astype", "(", "int", ")", "+", "\n", "random", ".", "randint", "(", "-", "self", ".", "hue_delta", ",", "self", ".", "hue_delta", ")", ")", "%", "180", "\n", "img", "=", "mmcv", ".", "hsv2bgr", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.__call__": [[849, 881], ["transforms.PhotoMetricDistortion.brightness", "numpy.random.randint", "transforms.PhotoMetricDistortion.saturation", "transforms.PhotoMetricDistortion.hue", "transforms.PhotoMetricDistortion.contrast", "transforms.PhotoMetricDistortion.contrast"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.brightness", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.saturation", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.hue", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.contrast", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.contrast"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to perform photometric distortion on images.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Result dict with images distorted.\n        \"\"\"", "\n", "\n", "img", "=", "results", "[", "'img'", "]", "\n", "# random brightness", "\n", "img", "=", "self", ".", "brightness", "(", "img", ")", "\n", "\n", "# mode == 0 --> do random contrast first", "\n", "# mode == 1 --> do random contrast last", "\n", "mode", "=", "random", ".", "randint", "(", "2", ")", "\n", "if", "mode", "==", "1", ":", "\n", "            ", "img", "=", "self", ".", "contrast", "(", "img", ")", "\n", "\n", "# random saturation", "\n", "", "img", "=", "self", ".", "saturation", "(", "img", ")", "\n", "\n", "# random hue", "\n", "img", "=", "self", ".", "hue", "(", "img", ")", "\n", "\n", "# random contrast", "\n", "if", "mode", "==", "0", ":", "\n", "            ", "img", "=", "self", ".", "contrast", "(", "img", ")", "\n", "\n", "", "results", "[", "'img'", "]", "=", "img", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.transforms.PhotoMetricDistortion.__repr__": [[882, 891], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "(", "f'(brightness_delta={self.brightness_delta}, '", "\n", "f'contrast_range=({self.contrast_lower}, '", "\n", "f'{self.contrast_upper}), '", "\n", "f'saturation_range=({self.saturation_lower}, '", "\n", "f'{self.saturation_upper}), '", "\n", "f'hue_delta={self.hue_delta})'", ")", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.test_time_aug.MultiScaleFlipAug.__init__": [[53, 92], ["compose.Compose", "mmcv.is_list_of", "mmcv.is_list_of", "mmcv.is_list_of", "mmcv.is_list_of", "isinstance", "warnings.warn", "warnings.warn", "isinstance", "isinstance", "mmcv.is_list_of", "any", "len", "isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "transforms", ",", "\n", "img_scale", ",", "\n", "img_ratios", "=", "None", ",", "\n", "flip", "=", "False", ",", "\n", "flip_direction", "=", "'horizontal'", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "Compose", "(", "transforms", ")", "\n", "if", "img_ratios", "is", "not", "None", ":", "\n", "            ", "img_ratios", "=", "img_ratios", "if", "isinstance", "(", "img_ratios", ",", "\n", "list", ")", "else", "[", "img_ratios", "]", "\n", "assert", "mmcv", ".", "is_list_of", "(", "img_ratios", ",", "float", ")", "\n", "", "if", "img_scale", "is", "None", ":", "\n", "# mode 1: given img_scale=None and a range of image ratio", "\n", "            ", "self", ".", "img_scale", "=", "None", "\n", "assert", "mmcv", ".", "is_list_of", "(", "img_ratios", ",", "float", ")", "\n", "", "elif", "isinstance", "(", "img_scale", ",", "tuple", ")", "and", "mmcv", ".", "is_list_of", "(", "\n", "img_ratios", ",", "float", ")", ":", "\n", "            ", "assert", "len", "(", "img_scale", ")", "==", "2", "\n", "# mode 2: given a scale and a range of image ratio", "\n", "self", ".", "img_scale", "=", "[", "(", "int", "(", "img_scale", "[", "0", "]", "*", "ratio", ")", ",", "\n", "int", "(", "img_scale", "[", "1", "]", "*", "ratio", ")", ")", "\n", "for", "ratio", "in", "img_ratios", "]", "\n", "", "else", ":", "\n", "# mode 3: given multiple scales", "\n", "            ", "self", ".", "img_scale", "=", "img_scale", "if", "isinstance", "(", "img_scale", ",", "\n", "list", ")", "else", "[", "img_scale", "]", "\n", "", "assert", "mmcv", ".", "is_list_of", "(", "self", ".", "img_scale", ",", "tuple", ")", "or", "self", ".", "img_scale", "is", "None", "\n", "self", ".", "flip", "=", "flip", "\n", "self", ".", "img_ratios", "=", "img_ratios", "\n", "self", ".", "flip_direction", "=", "flip_direction", "if", "isinstance", "(", "\n", "flip_direction", ",", "list", ")", "else", "[", "flip_direction", "]", "\n", "assert", "mmcv", ".", "is_list_of", "(", "self", ".", "flip_direction", ",", "str", ")", "\n", "if", "not", "self", ".", "flip", "and", "self", ".", "flip_direction", "!=", "[", "'horizontal'", "]", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'flip_direction has no effect when flip is set to False'", ")", "\n", "", "if", "(", "self", ".", "flip", "\n", "and", "not", "any", "(", "[", "t", "[", "'type'", "]", "==", "'RandomFlip'", "for", "t", "in", "transforms", "]", ")", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'flip has no effect when RandomFlip is not in transforms'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.test_time_aug.MultiScaleFlipAug.__call__": [[93, 127], ["mmcv.is_list_of", "test_time_aug.MultiScaleFlipAug.items", "aug_data_dict[].append", "int", "int", "results.copy", "test_time_aug.MultiScaleFlipAug.transforms", "aug_data.append"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to apply test time augment transforms on results.\n\n        Args:\n            results (dict): Result dict contains the data to transform.\n\n        Returns:\n           dict[str: list]: The augmented data, where each value is wrapped\n               into a list.\n        \"\"\"", "\n", "\n", "aug_data", "=", "[", "]", "\n", "if", "self", ".", "img_scale", "is", "None", "and", "mmcv", ".", "is_list_of", "(", "self", ".", "img_ratios", ",", "float", ")", ":", "\n", "            ", "h", ",", "w", "=", "results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "\n", "img_scale", "=", "[", "(", "int", "(", "w", "*", "ratio", ")", ",", "int", "(", "h", "*", "ratio", ")", ")", "\n", "for", "ratio", "in", "self", ".", "img_ratios", "]", "\n", "", "else", ":", "\n", "            ", "img_scale", "=", "self", ".", "img_scale", "\n", "", "flip_aug", "=", "[", "False", ",", "True", "]", "if", "self", ".", "flip", "else", "[", "False", "]", "\n", "for", "scale", "in", "img_scale", ":", "\n", "            ", "for", "flip", "in", "flip_aug", ":", "\n", "                ", "for", "direction", "in", "self", ".", "flip_direction", ":", "\n", "                    ", "_results", "=", "results", ".", "copy", "(", ")", "\n", "_results", "[", "'scale'", "]", "=", "scale", "\n", "_results", "[", "'flip'", "]", "=", "flip", "\n", "_results", "[", "'flip_direction'", "]", "=", "direction", "\n", "data", "=", "self", ".", "transforms", "(", "_results", ")", "\n", "aug_data", ".", "append", "(", "data", ")", "\n", "# list of dict to dict of list", "\n", "", "", "", "aug_data_dict", "=", "{", "key", ":", "[", "]", "for", "key", "in", "aug_data", "[", "0", "]", "}", "\n", "for", "data", "in", "aug_data", ":", "\n", "            ", "for", "key", ",", "val", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "aug_data_dict", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "", "", "return", "aug_data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.test_time_aug.MultiScaleFlipAug.__repr__": [[128, 134], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(transforms={self.transforms}, '", "\n", "repr_str", "+=", "f'img_scale={self.img_scale}, flip={self.flip})'", "\n", "repr_str", "+=", "f'flip_direction={self.flip_direction}'", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.loading.LoadImageFromFile.__init__": [[31, 41], ["dict", "file_client_args.copy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "to_float32", "=", "False", ",", "\n", "color_type", "=", "'color'", ",", "\n", "file_client_args", "=", "dict", "(", "backend", "=", "'disk'", ")", ",", "\n", "imdecode_backend", "=", "'cv2'", ")", ":", "\n", "        ", "self", ".", "to_float32", "=", "to_float32", "\n", "self", ".", "color_type", "=", "color_type", "\n", "self", ".", "file_client_args", "=", "file_client_args", ".", "copy", "(", ")", "\n", "self", ".", "file_client", "=", "None", "\n", "self", ".", "imdecode_backend", "=", "imdecode_backend", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.loading.LoadImageFromFile.__call__": [[42, 80], ["loading.LoadImageFromFile.file_client.get", "mmcv.imfrombytes", "dict", "mmcv.FileClient", "results.get", "os.join", "img.astype.astype.astype", "len", "numpy.zeros", "numpy.ones"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call functions to load image and get image meta information.\n\n        Args:\n            results (dict): Result dict from :obj:`mmseg.CustomDataset`.\n\n        Returns:\n            dict: The dict contains loaded image and meta information.\n        \"\"\"", "\n", "\n", "if", "self", ".", "file_client", "is", "None", ":", "\n", "            ", "self", ".", "file_client", "=", "mmcv", ".", "FileClient", "(", "**", "self", ".", "file_client_args", ")", "\n", "\n", "", "if", "results", ".", "get", "(", "'img_prefix'", ")", "is", "not", "None", ":", "\n", "            ", "filename", "=", "osp", ".", "join", "(", "results", "[", "'img_prefix'", "]", ",", "\n", "results", "[", "'img_info'", "]", "[", "'filename'", "]", ")", "\n", "", "else", ":", "\n", "            ", "filename", "=", "results", "[", "'img_info'", "]", "[", "'filename'", "]", "\n", "", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "filename", ")", "\n", "img", "=", "mmcv", ".", "imfrombytes", "(", "\n", "img_bytes", ",", "flag", "=", "self", ".", "color_type", ",", "backend", "=", "self", ".", "imdecode_backend", ")", "\n", "if", "self", ".", "to_float32", ":", "\n", "            ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "results", "[", "'filename'", "]", "=", "filename", "\n", "results", "[", "'ori_filename'", "]", "=", "results", "[", "'img_info'", "]", "[", "'filename'", "]", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "num_channels", "=", "1", "if", "len", "(", "img", ".", "shape", ")", "<", "3", "else", "img", ".", "shape", "[", "2", "]", "\n", "results", "[", "'img_norm_cfg'", "]", "=", "dict", "(", "\n", "mean", "=", "np", ".", "zeros", "(", "num_channels", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "std", "=", "np", ".", "ones", "(", "num_channels", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "to_rgb", "=", "False", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.loading.LoadImageFromFile.__repr__": [[81, 87], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(to_float32={self.to_float32},'", "\n", "repr_str", "+=", "f\"color_type='{self.color_type}',\"", "\n", "repr_str", "+=", "f\"imdecode_backend='{self.imdecode_backend}')\"", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.loading.LoadAnnotations.__init__": [[104, 112], ["dict", "file_client_args.copy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "file_client_args", "=", "dict", "(", "backend", "=", "'disk'", ")", ",", "\n", "imdecode_backend", "=", "'pillow'", ")", ":", "\n", "        ", "self", ".", "reduce_zero_label", "=", "reduce_zero_label", "\n", "self", ".", "file_client_args", "=", "file_client_args", ".", "copy", "(", ")", "\n", "self", ".", "file_client", "=", "None", "\n", "self", ".", "imdecode_backend", "=", "imdecode_backend", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.loading.LoadAnnotations.__call__": [[113, 148], ["loading.LoadAnnotations.file_client.get", "mmcv.imfrombytes().squeeze().astype", "results[].append", "mmcv.FileClient", "results.get", "os.join", "results.get", "results[].items", "mmcv.imfrombytes().squeeze", "mmcv.imfrombytes"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to load multiple types annotations.\n\n        Args:\n            results (dict): Result dict from :obj:`mmseg.CustomDataset`.\n\n        Returns:\n            dict: The dict contains loaded semantic segmentation annotations.\n        \"\"\"", "\n", "\n", "if", "self", ".", "file_client", "is", "None", ":", "\n", "            ", "self", ".", "file_client", "=", "mmcv", ".", "FileClient", "(", "**", "self", ".", "file_client_args", ")", "\n", "\n", "", "if", "results", ".", "get", "(", "'seg_prefix'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "filename", "=", "osp", ".", "join", "(", "results", "[", "'seg_prefix'", "]", ",", "\n", "results", "[", "'ann_info'", "]", "[", "'seg_map'", "]", ")", "\n", "", "else", ":", "\n", "            ", "filename", "=", "results", "[", "'ann_info'", "]", "[", "'seg_map'", "]", "\n", "", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "filename", ")", "\n", "gt_semantic_seg", "=", "mmcv", ".", "imfrombytes", "(", "\n", "img_bytes", ",", "flag", "=", "'unchanged'", ",", "\n", "backend", "=", "self", ".", "imdecode_backend", ")", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# modify if custom classes", "\n", "if", "results", ".", "get", "(", "'label_map'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "for", "old_id", ",", "new_id", "in", "results", "[", "'label_map'", "]", ".", "items", "(", ")", ":", "\n", "                ", "gt_semantic_seg", "[", "gt_semantic_seg", "==", "old_id", "]", "=", "new_id", "\n", "# reduce zero_label", "\n", "", "", "if", "self", ".", "reduce_zero_label", ":", "\n", "# avoid using underflow conversion", "\n", "            ", "gt_semantic_seg", "[", "gt_semantic_seg", "==", "0", "]", "=", "255", "\n", "gt_semantic_seg", "=", "gt_semantic_seg", "-", "1", "\n", "gt_semantic_seg", "[", "gt_semantic_seg", "==", "254", "]", "=", "255", "\n", "", "results", "[", "'gt_semantic_seg'", "]", "=", "gt_semantic_seg", "\n", "results", "[", "'seg_fields'", "]", ".", "append", "(", "'gt_semantic_seg'", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.loading.LoadAnnotations.__repr__": [[149, 154], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(reduce_zero_label={self.reduce_zero_label},'", "\n", "repr_str", "+=", "f\"imdecode_backend='{self.imdecode_backend}')\"", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.ToTensor.__init__": [[44, 46], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "keys", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.ToTensor.__call__": [[47, 61], ["formating.to_tensor"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.to_tensor"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to convert data in results to :obj:`torch.Tensor`.\n\n        Args:\n            results (dict): Result dict contains the data to convert.\n\n        Returns:\n            dict: The result dict contains the data converted\n                to :obj:`torch.Tensor`.\n        \"\"\"", "\n", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "results", "[", "key", "]", "=", "to_tensor", "(", "results", "[", "key", "]", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.ToTensor.__repr__": [[62, 64], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(keys={self.keys})'", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.ImageToTensor.__init__": [[78, 80], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "keys", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.ImageToTensor.__call__": [[81, 99], ["formating.to_tensor", "len", "numpy.expand_dims", "numpy.expand_dims.transpose"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.to_tensor"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to convert image in results to :obj:`torch.Tensor` and\n        transpose the channel order.\n\n        Args:\n            results (dict): Result dict contains the image data to convert.\n\n        Returns:\n            dict: The result dict contains the image converted\n                to :obj:`torch.Tensor` and transposed to (C, H, W) order.\n        \"\"\"", "\n", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "img", "=", "results", "[", "key", "]", "\n", "if", "len", "(", "img", ".", "shape", ")", "<", "3", ":", "\n", "                ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "-", "1", ")", "\n", "", "results", "[", "key", "]", "=", "to_tensor", "(", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.ImageToTensor.__repr__": [[100, 102], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(keys={self.keys})'", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.Transpose.__init__": [[113, 116], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "keys", ",", "order", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "self", ".", "order", "=", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.Transpose.__call__": [[117, 132], ["results[].transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to convert image in results to :obj:`torch.Tensor` and\n        transpose the channel order.\n\n        Args:\n            results (dict): Result dict contains the image data to convert.\n\n        Returns:\n            dict: The result dict contains the image converted\n                to :obj:`torch.Tensor` and transposed to (C, H, W) order.\n        \"\"\"", "\n", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "results", "[", "key", "]", "=", "results", "[", "key", "]", ".", "transpose", "(", "self", ".", "order", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.Transpose.__repr__": [[133, 136], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(keys={self.keys}, order={self.order})'", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.ToDataContainer.__init__": [[150, 154], ["dict", "dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "fields", "=", "(", "dict", "(", "key", "=", "'img'", ",", "\n", "stack", "=", "True", ")", ",", "dict", "(", "key", "=", "'gt_semantic_seg'", ")", ")", ")", ":", "\n", "        ", "self", ".", "fields", "=", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.ToDataContainer.__call__": [[155, 172], ["field.copy.copy.copy", "field.copy.copy.pop", "mmcv.parallel.DataContainer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to convert data in results to\n        :obj:`mmcv.DataContainer`.\n\n        Args:\n            results (dict): Result dict contains the data to convert.\n\n        Returns:\n            dict: The result dict contains the data converted to\n                :obj:`mmcv.DataContainer`.\n        \"\"\"", "\n", "\n", "for", "field", "in", "self", ".", "fields", ":", "\n", "            ", "field", "=", "field", ".", "copy", "(", ")", "\n", "key", "=", "field", ".", "pop", "(", "'key'", ")", "\n", "results", "[", "key", "]", "=", "DC", "(", "results", "[", "key", "]", ",", "**", "field", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.ToDataContainer.__repr__": [[173, 175], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(fields={self.fields})'", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.DefaultFormatBundle.__call__": [[189, 213], ["numpy.ascontiguousarray", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "len", "numpy.expand_dims", "numpy.expand_dims.transpose", "formating.to_tensor", "formating.to_tensor", "[].astype"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.to_tensor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.to_tensor"], ["def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to transform and format common fields in results.\n\n        Args:\n            results (dict): Result dict contains the data to convert.\n\n        Returns:\n            dict: The result dict contains the data that is formatted with\n                default bundle.\n        \"\"\"", "\n", "\n", "if", "'img'", "in", "results", ":", "\n", "            ", "img", "=", "results", "[", "'img'", "]", "\n", "if", "len", "(", "img", ".", "shape", ")", "<", "3", ":", "\n", "                ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "-", "1", ")", "\n", "", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "results", "[", "'img'", "]", "=", "DC", "(", "to_tensor", "(", "img", ")", ",", "stack", "=", "True", ")", "\n", "", "if", "'gt_semantic_seg'", "in", "results", ":", "\n", "# convert to long", "\n", "            ", "results", "[", "'gt_semantic_seg'", "]", "=", "DC", "(", "\n", "to_tensor", "(", "results", "[", "'gt_semantic_seg'", "]", "[", "None", ",", "\n", "...", "]", ".", "astype", "(", "np", ".", "int64", ")", ")", ",", "\n", "stack", "=", "True", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.DefaultFormatBundle.__repr__": [[214, 216], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.Collect.__init__": [[256, 263], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "keys", ",", "\n", "meta_keys", "=", "(", "'filename'", ",", "'ori_filename'", ",", "'ori_shape'", ",", "\n", "'img_shape'", ",", "'pad_shape'", ",", "'scale_factor'", ",", "'flip'", ",", "\n", "'flip_direction'", ",", "'img_norm_cfg'", ")", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "self", ".", "meta_keys", "=", "meta_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.Collect.__call__": [[264, 285], ["mmcv.parallel.DataContainer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to collect keys in results. The keys in ``meta_keys``\n        will be converted to :obj:mmcv.DataContainer.\n\n        Args:\n            results (dict): Result dict contains the data to collect.\n\n        Returns:\n            dict: The result dict contains the following keys\n                - keys in``self.keys``\n                - ``img_metas``\n        \"\"\"", "\n", "\n", "data", "=", "{", "}", "\n", "img_meta", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "meta_keys", ":", "\n", "            ", "img_meta", "[", "key", "]", "=", "results", "[", "key", "]", "\n", "", "data", "[", "'img_metas'", "]", "=", "DC", "(", "img_meta", ",", "cpu_only", "=", "True", ")", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "data", "[", "key", "]", "=", "results", "[", "key", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.Collect.__repr__": [[286, 289], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(keys={self.keys}, meta_keys={self.meta_keys})'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.formating.to_tensor": [[11, 34], ["isinstance", "isinstance", "torch.from_numpy", "isinstance", "torch.tensor", "isinstance", "mmcv.is_str", "torch.LongTensor", "isinstance", "torch.FloatTensor", "TypeError", "type"], "function", ["None"], ["def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "\"\"\"Convert objects of various python types to :obj:`torch.Tensor`.\n\n    Supported types are: :class:`numpy.ndarray`, :class:`torch.Tensor`,\n    :class:`Sequence`, :class:`int` and :class:`float`.\n\n    Args:\n        data (torch.Tensor | numpy.ndarray | Sequence | int | float): Data to\n            be converted.\n    \"\"\"", "\n", "\n", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "Sequence", ")", "and", "not", "mmcv", ".", "is_str", "(", "data", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "data", "]", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "[", "data", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "f'type {type(data)} cannot be converted to tensor.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.compose.Compose.__init__": [[17, 28], ["isinstance", "isinstance", "mmcv.utils.build_from_cfg", "compose.Compose.transforms.append", "callable", "compose.Compose.transforms.append", "TypeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "assert", "isinstance", "(", "transforms", ",", "collections", ".", "abc", ".", "Sequence", ")", "\n", "self", ".", "transforms", "=", "[", "]", "\n", "for", "transform", "in", "transforms", ":", "\n", "            ", "if", "isinstance", "(", "transform", ",", "dict", ")", ":", "\n", "                ", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "self", ".", "transforms", ".", "append", "(", "transform", ")", "\n", "", "elif", "callable", "(", "transform", ")", ":", "\n", "                ", "self", ".", "transforms", ".", "append", "(", "transform", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "'transform must be callable or a dict'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.compose.Compose.__call__": [[29, 44], ["t"], "methods", ["None"], ["", "", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Call function to apply transforms sequentially.\n\n        Args:\n            data (dict): A result dict contains the data to transform.\n\n        Returns:\n           dict: Transformed data.\n        \"\"\"", "\n", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "data", "=", "t", "(", "data", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "return", "None", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.pipelines.compose.Compose.__repr__": [[45, 52], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "'\\n'", "\n", "format_string", "+=", "f'    {t}'", "\n", "", "format_string", "+=", "'\\n)'", "\n", "return", "format_string", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.inference.LoadImage.__call__": [[45, 67], ["isinstance", "mmcv.imread"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to load images into results.\n\n        Args:\n            results (dict): A result dict contains the file name\n                of the image to be read.\n\n        Returns:\n            dict: ``results`` will be returned containing loaded image.\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "results", "[", "'img'", "]", ",", "str", ")", ":", "\n", "            ", "results", "[", "'filename'", "]", "=", "results", "[", "'img'", "]", "\n", "results", "[", "'ori_filename'", "]", "=", "results", "[", "'img'", "]", "\n", "", "else", ":", "\n", "            ", "results", "[", "'filename'", "]", "=", "None", "\n", "results", "[", "'ori_filename'", "]", "=", "None", "\n", "", "img", "=", "mmcv", ".", "imread", "(", "results", "[", "'img'", "]", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.inference.init_segmentor": [[11, 40], ["isinstance", "mmseg.models.build_segmentor", "mmseg.models.build_segmentor.to", "mmseg.models.build_segmentor.eval", "mmcv.Config.fromfile", "mmcv.runner.load_checkpoint", "isinstance", "TypeError", "mmcv.Config.fromfile.get", "type"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_segmentor"], ["def", "init_segmentor", "(", "config", ",", "checkpoint", "=", "None", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "    ", "\"\"\"Initialize a segmentor from config file.\n\n    Args:\n        config (str or :obj:`mmcv.Config`): Config file path or the config\n            object.\n        checkpoint (str, optional): Checkpoint path. If left as None, the model\n            will not load any weights.\n        device (str, optional) CPU/CUDA device option. Default 'cuda:0'.\n            Use 'cpu' for loading model on CPU.\n    Returns:\n        nn.Module: The constructed segmentor.\n    \"\"\"", "\n", "if", "isinstance", "(", "config", ",", "str", ")", ":", "\n", "        ", "config", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "config", ")", "\n", "", "elif", "not", "isinstance", "(", "config", ",", "mmcv", ".", "Config", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'config must be a filename or Config object, '", "\n", "'but got {}'", ".", "format", "(", "type", "(", "config", ")", ")", ")", "\n", "", "config", ".", "model", ".", "pretrained", "=", "None", "\n", "config", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_segmentor", "(", "config", ".", "model", ",", "test_cfg", "=", "config", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "if", "checkpoint", "is", "not", "None", ":", "\n", "        ", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "model", ".", "PALETTE", "=", "checkpoint", "[", "'meta'", "]", "[", "'PALETTE'", "]", "\n", "", "model", ".", "cfg", "=", "config", "# save the config in the model for convenience", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.inference.inference_segmentor": [[69, 99], ["mmseg.datasets.pipelines.Compose", "dict", "mmseg.datasets.pipelines.Compose.", "mmcv.parallel.collate", "next", "next", "torch.no_grad", "model", "model.parameters", "inference.LoadImage", "model.parameters", "mmcv.parallel.scatter"], "function", ["None"], ["", "", "def", "inference_segmentor", "(", "model", ",", "img", ")", ":", "\n", "    ", "\"\"\"Inference image(s) with the segmentor.\n\n    Args:\n        model (nn.Module): The loaded segmentor.\n        imgs (str/ndarray or list[str/ndarray]): Either image files or loaded\n            images.\n\n    Returns:\n        (list[Tensor]): The segmentation result.\n    \"\"\"", "\n", "cfg", "=", "model", ".", "cfg", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "# model device", "\n", "# build the data pipeline", "\n", "test_pipeline", "=", "[", "LoadImage", "(", ")", "]", "+", "cfg", ".", "data", ".", "test", ".", "pipeline", "[", "1", ":", "]", "\n", "test_pipeline", "=", "Compose", "(", "test_pipeline", ")", "\n", "# prepare data", "\n", "data", "=", "dict", "(", "img", "=", "img", ")", "\n", "data", "=", "test_pipeline", "(", "data", ")", "\n", "data", "=", "collate", "(", "[", "data", "]", ",", "samples_per_gpu", "=", "1", ")", "\n", "if", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "\n", "# scatter to specified GPU", "\n", "        ", "data", "=", "scatter", "(", "data", ",", "[", "device", "]", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "data", "[", "'img_metas'", "]", "=", "[", "i", ".", "data", "[", "0", "]", "for", "i", "in", "data", "[", "'img_metas'", "]", "]", "\n", "\n", "# forward the model", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.inference.show_result_pyplot": [[101, 119], ["hasattr", "model.show_result", "matplotlib.figure", "matplotlib.imshow", "matplotlib.show", "mmcv.bgr2rgb"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.show_result"], ["", "def", "show_result_pyplot", "(", "model", ",", "img", ",", "result", ",", "palette", "=", "None", ",", "fig_size", "=", "(", "15", ",", "10", ")", ")", ":", "\n", "    ", "\"\"\"Visualize the segmentation results on the image.\n\n    Args:\n        model (nn.Module): The loaded segmentor.\n        img (str or np.ndarray): Image filename or loaded image.\n        result (list): The segmentation result.\n        palette (list[list[int]]] | None): The palette of segmentation\n            map. If None is given, random palette will be generated.\n            Default: None\n        fig_size (tuple): Figure size of the pyplot figure.\n    \"\"\"", "\n", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "img", "=", "model", ".", "show_result", "(", "img", ",", "result", ",", "palette", "=", "palette", ",", "show", "=", "False", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "fig_size", ")", "\n", "plt", ".", "imshow", "(", "mmcv", ".", "bgr2rgb", "(", "img", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.train.set_random_seed": [[14, 31], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "set_random_seed", "(", "seed", ",", "deterministic", "=", "False", ")", ":", "\n", "    ", "\"\"\"Set random seed.\n\n    Args:\n        seed (int): Seed to be used.\n        deterministic (bool): Whether to set the deterministic option for\n            CUDNN backend, i.e., set `torch.backends.cudnn.deterministic`\n            to True and `torch.backends.cudnn.benchmark` to False.\n            Default: False.\n    \"\"\"", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "if", "deterministic", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.train.train_segmentor": [[33, 117], ["mmseg.utils.get_root_logger", "mmcv.runner.build_optimizer", "mmcv.runner.build_runner", "mmcv.runner.build_runner.register_training_hooks", "mmcv.runner.build_runner.run", "isinstance", "mmseg.datasets.build_dataloader", "cfg.get", "mmcv.parallel.MMDistributedDataParallel", "mmcv.parallel.MMDataParallel", "cfg.get", "warnings.warn", "cfg.get", "mmseg.datasets.build_dataset", "mmseg.datasets.build_dataloader", "cfg.get", "mmcv.runner.build_runner.register_hook", "mmcv.runner.build_runner.resume", "len", "mmcv.parallel.MMDataParallel.cuda", "mmcv.parallel.MMDataParallel.cuda", "dict", "dict", "eval_hook", "mmcv.runner.build_runner.load_checkpoint", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataloader"], ["", "", "def", "train_segmentor", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "distributed", "=", "False", ",", "\n", "validate", "=", "False", ",", "\n", "timestamp", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "    ", "\"\"\"Launch segmentor training.\"\"\"", "\n", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# prepare data loaders", "\n", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "\n", "cfg", ".", "data", ".", "samples_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "# cfg.gpus will be ignored if distributed", "\n", "len", "(", "cfg", ".", "gpu_ids", ")", ",", "\n", "dist", "=", "distributed", ",", "\n", "seed", "=", "cfg", ".", "seed", ",", "\n", "drop_last", "=", "True", ")", "for", "ds", "in", "dataset", "\n", "]", "\n", "\n", "# put model on gpus", "\n", "if", "distributed", ":", "\n", "        ", "find_unused_parameters", "=", "cfg", ".", "get", "(", "'find_unused_parameters'", ",", "False", ")", "\n", "# Sets the `find_unused_parameters` parameter in", "\n", "# torch.nn.parallel.DistributedDataParallel", "\n", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "\n", "model", ".", "cuda", "(", "cfg", ".", "gpu_ids", "[", "0", "]", ")", ",", "device_ids", "=", "cfg", ".", "gpu_ids", ")", "\n", "\n", "# build runner", "\n", "", "optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "\n", "if", "cfg", ".", "get", "(", "'runner'", ")", "is", "None", ":", "\n", "        ", "cfg", ".", "runner", "=", "{", "'type'", ":", "'IterBasedRunner'", ",", "'max_iters'", ":", "cfg", ".", "total_iters", "}", "\n", "warnings", ".", "warn", "(", "\n", "'config is now expected to have a `runner` section, '", "\n", "'please set `runner` in your config.'", ",", "UserWarning", ")", "\n", "\n", "", "runner", "=", "build_runner", "(", "\n", "cfg", ".", "runner", ",", "\n", "default_args", "=", "dict", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "cfg", ".", "work_dir", ",", "\n", "logger", "=", "logger", ",", "\n", "meta", "=", "meta", ")", ")", "\n", "\n", "# register hooks", "\n", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "cfg", ".", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ",", "\n", "cfg", ".", "get", "(", "'momentum_config'", ",", "None", ")", ")", "\n", "\n", "# an ugly walkaround to make the .log and .log.json filenames the same", "\n", "runner", ".", "timestamp", "=", "timestamp", "\n", "\n", "# register eval hooks", "\n", "if", "validate", ":", "\n", "        ", "val_dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "val", ",", "dict", "(", "test_mode", "=", "True", ")", ")", "\n", "val_dataloader", "=", "build_dataloader", "(", "\n", "val_dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "eval_cfg", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", "\n", "eval_cfg", "[", "'by_epoch'", "]", "=", "cfg", ".", "runner", "[", "'type'", "]", "!=", "'IterBasedRunner'", "\n", "eval_hook", "=", "DistEvalHook", "if", "distributed", "else", "EvalHook", "\n", "runner", ".", "register_hook", "(", "eval_hook", "(", "val_dataloader", ",", "**", "eval_cfg", ")", ")", "\n", "\n", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.test.np2tmp": [[14, 32], ["numpy.save", "tempfile.NamedTemporaryFile"], "function", ["None"], ["def", "np2tmp", "(", "array", ",", "temp_file_name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Save ndarray to local numpy file.\n\n    Args:\n        array (ndarray): Ndarray to save.\n        temp_file_name (str): Numpy file name. If 'temp_file_name=None', this\n            function will generate a file name with tempfile.NamedTemporaryFile\n            to save ndarray. Default: None.\n\n    Returns:\n        str: The numpy file name.\n    \"\"\"", "\n", "\n", "if", "temp_file_name", "is", "None", ":", "\n", "        ", "temp_file_name", "=", "tempfile", ".", "NamedTemporaryFile", "(", "\n", "suffix", "=", "'.npy'", ",", "delete", "=", "False", ")", ".", "name", "\n", "", "np", ".", "save", "(", "temp_file_name", ",", "array", ")", "\n", "return", "temp_file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.test.single_gpu_test": [[34, 100], ["model.eval", "mmcv.ProgressBar", "enumerate", "len", "isinstance", "[].size", "range", "torch.no_grad", "torch.no_grad", "model", "mmcv.image.tensor2imgs", "zip", "results.extend", "results.append", "mmcv.ProgressBar.update", "len", "len", "mmcv.imresize", "model.module.show_result", "test.np2tmp", "os.join", "test.np2tmp"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.show_result", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.test.np2tmp", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.test.np2tmp"], ["", "def", "single_gpu_test", "(", "model", ",", "\n", "data_loader", ",", "\n", "show", "=", "False", ",", "\n", "out_dir", "=", "None", ",", "\n", "efficient_test", "=", "False", ")", ":", "\n", "    ", "\"\"\"Test with single GPU.\n\n    Args:\n        model (nn.Module): Model to be tested.\n        data_loader (utils.data.Dataloader): Pytorch data loader.\n        show (bool): Whether show results during infernece. Default: False.\n        out_dir (str, optional): If specified, the results will be dumped into\n            the directory to save output results.\n        efficient_test (bool): Whether save the results as local numpy files to\n            save CPU memory during evaluation. Default: False.\n\n    Returns:\n        list: The prediction results.\n    \"\"\"", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "**", "data", ")", "\n", "\n", "", "if", "show", "or", "out_dir", ":", "\n", "            ", "img_tensor", "=", "data", "[", "'img'", "]", "[", "0", "]", "\n", "img_metas", "=", "data", "[", "'img_metas'", "]", "[", "0", "]", ".", "data", "[", "0", "]", "\n", "imgs", "=", "tensor2imgs", "(", "img_tensor", ",", "**", "img_metas", "[", "0", "]", "[", "'img_norm_cfg'", "]", ")", "\n", "assert", "len", "(", "imgs", ")", "==", "len", "(", "img_metas", ")", "\n", "\n", "for", "img", ",", "img_meta", "in", "zip", "(", "imgs", ",", "img_metas", ")", ":", "\n", "                ", "h", ",", "w", ",", "_", "=", "img_meta", "[", "'img_shape'", "]", "\n", "img_show", "=", "img", "[", ":", "h", ",", ":", "w", ",", ":", "]", "\n", "\n", "ori_h", ",", "ori_w", "=", "img_meta", "[", "'ori_shape'", "]", "[", ":", "-", "1", "]", "\n", "img_show", "=", "mmcv", ".", "imresize", "(", "img_show", ",", "(", "ori_w", ",", "ori_h", ")", ")", "\n", "\n", "if", "out_dir", ":", "\n", "                    ", "out_file", "=", "osp", ".", "join", "(", "out_dir", ",", "img_meta", "[", "'ori_filename'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "out_file", "=", "None", "\n", "\n", "", "model", ".", "module", ".", "show_result", "(", "\n", "img_show", ",", "\n", "result", ",", "\n", "palette", "=", "dataset", ".", "PALETTE", ",", "\n", "show", "=", "show", ",", "\n", "out_file", "=", "out_file", ")", "\n", "\n", "", "", "if", "isinstance", "(", "result", ",", "list", ")", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "[", "np2tmp", "(", "_", ")", "for", "_", "in", "result", "]", "\n", "", "results", ".", "extend", "(", "result", ")", "\n", "", "else", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "np2tmp", "(", "result", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.test.multi_gpu_test": [[102, 158], ["model.eval", "mmcv.runner.get_dist_info", "enumerate", "mmcv.ProgressBar", "isinstance", "test.collect_results_gpu", "test.collect_results_cpu", "len", "torch.no_grad", "torch.no_grad", "model", "collect_results_cpu.extend", "collect_results_cpu.append", "[].size", "range", "len", "len", "test.np2tmp", "mmcv.ProgressBar.update", "test.np2tmp"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.test.collect_results_gpu", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.test.collect_results_cpu", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.test.np2tmp", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.test.np2tmp"], ["", "def", "multi_gpu_test", "(", "model", ",", "\n", "data_loader", ",", "\n", "tmpdir", "=", "None", ",", "\n", "gpu_collect", "=", "False", ",", "\n", "efficient_test", "=", "False", ")", ":", "\n", "    ", "\"\"\"Test model with multiple gpus.\n\n    This method tests model with multiple gpus and collects the results\n    under two different modes: gpu and cpu modes. By setting 'gpu_collect=True'\n    it encodes results to gpu tensors and use gpu communication for results\n    collection. On cpu mode it saves the results on different gpus to 'tmpdir'\n    and collects them by the rank 0 worker.\n\n    Args:\n        model (nn.Module): Model to be tested.\n        data_loader (utils.data.Dataloader): Pytorch data loader.\n        tmpdir (str): Path of directory to save the temporary results from\n            different gpus under cpu mode.\n        gpu_collect (bool): Option to use either gpu or cpu to collect results.\n        efficient_test (bool): Whether save the results as local numpy files to\n            save CPU memory during evaluation. Default: False.\n\n    Returns:\n        list: The prediction results.\n    \"\"\"", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "\n", "", "if", "isinstance", "(", "result", ",", "list", ")", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "[", "np2tmp", "(", "_", ")", "for", "_", "in", "result", "]", "\n", "", "results", ".", "extend", "(", "result", ")", "\n", "", "else", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "np2tmp", "(", "result", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "if", "gpu_collect", ":", "\n", "        ", "results", "=", "collect_results_gpu", "(", "results", ",", "len", "(", "dataset", ")", ")", "\n", "", "else", ":", "\n", "        ", "results", "=", "collect_results_cpu", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.test.collect_results_cpu": [[160, 201], ["mmcv.runner.get_dist_info", "mmcv.dump", "torch.barrier", "torch.full", "torch.full", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "mmcv.mkdir_or_exist", "os.join", "range", "zip", "shutil.rmtree", "tempfile.mkdtemp", "torch.tensor", "torch.tensor", "os.join", "part_list.append", "ordered_results.extend", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "mmcv.load", "list", "torch.tensor.encode", "len", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["None"], ["", "def", "collect_results_cpu", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "\"\"\"Collect results with CPU.\"\"\"", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "# dump the part result to the dir", "\n", "", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.test.collect_results_gpu": [[203, 235], ["mmcv.runner.get_dist_info", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.all_gather", "torch.tensor().max", "torch.tensor().max", "torch.zeros", "torch.zeros", "torch.all_gather", "bytearray", "torch.tensor.clone", "torch.tensor.new_zeros", "zip", "zip", "pickle.dumps", "range", "torch.tensor", "torch.tensor", "range", "part_list.append", "ordered_results.extend", "pickle.loads", "list", "recv[].cpu().numpy().tobytes", "recv[].cpu().numpy", "recv[].cpu"], "function", ["None"], ["", "", "def", "collect_results_gpu", "(", "result_part", ",", "size", ")", ":", "\n", "    ", "\"\"\"Collect results with GPU.\"\"\"", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# dump result part to tensor with pickle", "\n", "part_tensor", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "pickle", ".", "dumps", "(", "result_part", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "# gather all result part tensor shape", "\n", "shape_tensor", "=", "torch", ".", "tensor", "(", "part_tensor", ".", "shape", ",", "device", "=", "'cuda'", ")", "\n", "shape_list", "=", "[", "shape_tensor", ".", "clone", "(", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "shape_list", ",", "shape_tensor", ")", "\n", "# padding result part tensor to max length", "\n", "shape_max", "=", "torch", ".", "tensor", "(", "shape_list", ")", ".", "max", "(", ")", "\n", "part_send", "=", "torch", ".", "zeros", "(", "shape_max", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "part_send", "[", ":", "shape_tensor", "[", "0", "]", "]", "=", "part_tensor", "\n", "part_recv_list", "=", "[", "\n", "part_tensor", ".", "new_zeros", "(", "shape_max", ")", "for", "_", "in", "range", "(", "world_size", ")", "\n", "]", "\n", "# gather all result part", "\n", "dist", ".", "all_gather", "(", "part_recv_list", ",", "part_send", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "recv", ",", "shape", "in", "zip", "(", "part_recv_list", ",", "shape_list", ")", ":", "\n", "            ", "part_list", ".", "append", "(", "\n", "pickle", ".", "loads", "(", "recv", "[", ":", "shape", "[", "0", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "return", "ordered_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.Upsample.__init__": [[34, 47], ["torch.Module.__init__", "isinstance", "tuple", "float", "float"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "size", "=", "None", ",", "\n", "scale_factor", "=", "None", ",", "\n", "mode", "=", "'nearest'", ",", "\n", "align_corners", "=", "None", ")", ":", "\n", "        ", "super", "(", "Upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size", "=", "size", "\n", "if", "isinstance", "(", "scale_factor", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "scale_factor", "=", "tuple", "(", "float", "(", "factor", ")", "for", "factor", "in", "scale_factor", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_factor", "=", "float", "(", "scale_factor", ")", "if", "scale_factor", "else", "None", "\n", "", "self", ".", "mode", "=", "mode", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.Upsample.forward": [[48, 54], ["wrappers.resize", "int"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "size", ":", "\n", "            ", "size", "=", "[", "int", "(", "t", "*", "self", ".", "scale_factor", ")", "for", "t", "in", "x", ".", "shape", "[", "-", "2", ":", "]", "]", "\n", "", "else", ":", "\n", "            ", "size", "=", "self", ".", "size", "\n", "", "return", "resize", "(", "x", ",", "size", ",", "None", ",", "self", ".", "mode", ",", "self", ".", "align_corners", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize": [[8, 30], ["isinstance", "torch.interpolate", "tuple", "tuple", "tuple", "int", "int", "int", "warnings.warn"], "function", ["None"], ["def", "resize", "(", "input", ",", "\n", "size", "=", "None", ",", "\n", "scale_factor", "=", "None", ",", "\n", "mode", "=", "'nearest'", ",", "\n", "align_corners", "=", "None", ",", "\n", "warning", "=", "True", ")", ":", "\n", "    ", "if", "warning", ":", "\n", "        ", "if", "size", "is", "not", "None", "and", "align_corners", ":", "\n", "            ", "input_h", ",", "input_w", "=", "tuple", "(", "int", "(", "x", ")", "for", "x", "in", "input", ".", "shape", "[", "2", ":", "]", ")", "\n", "output_h", ",", "output_w", "=", "tuple", "(", "int", "(", "x", ")", "for", "x", "in", "size", ")", "\n", "if", "output_h", ">", "input_h", "or", "output_w", ">", "output_h", ":", "\n", "                ", "if", "(", "(", "output_h", ">", "1", "and", "output_w", ">", "1", "and", "input_h", ">", "1", "\n", "and", "input_w", ">", "1", ")", "and", "(", "output_h", "-", "1", ")", "%", "(", "input_h", "-", "1", ")", "\n", "and", "(", "output_w", "-", "1", ")", "%", "(", "input_w", "-", "1", ")", ")", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\n", "f'When align_corners={align_corners}, '", "\n", "'the output would more aligned if '", "\n", "f'input size {(input_h, input_w)} is `x+1` and '", "\n", "f'out size {(output_h, output_w)} is `nx+1`'", ")", "\n", "", "", "", "", "if", "isinstance", "(", "size", ",", "torch", ".", "Size", ")", ":", "\n", "        ", "size", "=", "tuple", "(", "int", "(", "x", ")", "for", "x", "in", "size", ")", "\n", "", "return", "F", ".", "interpolate", "(", "input", ",", "size", ",", "scale_factor", ",", "mode", ",", "align_corners", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.encoding.Encoding.__init__": [[17, 31], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "num_codes", ")", ":", "\n", "        ", "super", "(", "Encoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# init codewords and smoothing factor", "\n", "self", ".", "channels", ",", "self", ".", "num_codes", "=", "channels", ",", "num_codes", "\n", "std", "=", "1.", "/", "(", "(", "num_codes", "*", "channels", ")", "**", "0.5", ")", "\n", "# [num_codes, channels]", "\n", "self", ".", "codewords", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "empty", "(", "num_codes", ",", "channels", ",", "\n", "dtype", "=", "torch", ".", "float", ")", ".", "uniform_", "(", "-", "std", ",", "std", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "# [num_codes]", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "empty", "(", "num_codes", ",", "dtype", "=", "torch", ".", "float", ")", ".", "uniform_", "(", "-", "1", ",", "0", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.encoding.Encoding.scaled_l2": [[32, 44], ["codewords.size", "x.size", "scale.view", "x.unsqueeze().expand", "codewords.view", "x.unsqueeze", "x.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "scaled_l2", "(", "x", ",", "codewords", ",", "scale", ")", ":", "\n", "        ", "num_codes", ",", "channels", "=", "codewords", ".", "size", "(", ")", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "reshaped_scale", "=", "scale", ".", "view", "(", "(", "1", ",", "1", ",", "num_codes", ")", ")", "\n", "expanded_x", "=", "x", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "\n", "(", "batch_size", ",", "x", ".", "size", "(", "1", ")", ",", "num_codes", ",", "channels", ")", ")", "\n", "reshaped_codewords", "=", "codewords", ".", "view", "(", "(", "1", ",", "1", ",", "num_codes", ",", "channels", ")", ")", "\n", "\n", "scaled_l2_norm", "=", "reshaped_scale", "*", "(", "\n", "expanded_x", "-", "reshaped_codewords", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "3", ")", "\n", "return", "scaled_l2_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.encoding.Encoding.aggregate": [[45, 56], ["codewords.size", "codewords.view", "x.size", "x.unsqueeze().expand", "x.unsqueeze", "x.size", "assigment_weights.unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "aggregate", "(", "assigment_weights", ",", "x", ",", "codewords", ")", ":", "\n", "        ", "num_codes", ",", "channels", "=", "codewords", ".", "size", "(", ")", "\n", "reshaped_codewords", "=", "codewords", ".", "view", "(", "(", "1", ",", "1", ",", "num_codes", ",", "channels", ")", ")", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "expanded_x", "=", "x", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "\n", "(", "batch_size", ",", "x", ".", "size", "(", "1", ")", ",", "num_codes", ",", "channels", ")", ")", "\n", "encoded_feat", "=", "(", "assigment_weights", ".", "unsqueeze", "(", "3", ")", "*", "\n", "(", "expanded_x", "-", "reshaped_codewords", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "encoded_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.encoding.Encoding.forward": [[57, 69], ["x.view().transpose().contiguous.view().transpose().contiguous.size", "x.view().transpose().contiguous.view().transpose().contiguous.view().transpose().contiguous", "torch.nn.functional.softmax", "encoding.Encoding.aggregate", "encoding.Encoding.scaled_l2", "x.view().transpose().contiguous.view().transpose().contiguous.dim", "x.view().transpose().contiguous.view().transpose().contiguous.size", "x.view().transpose().contiguous.view().transpose().contiguous.view().transpose", "x.view().transpose().contiguous.view().transpose().contiguous.view"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.encoding.Encoding.aggregate", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.encoding.Encoding.scaled_l2"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "4", "and", "x", ".", "size", "(", "1", ")", "==", "self", ".", "channels", "\n", "# [batch_size, channels, height, width]", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "# [batch_size, height x width, channels]", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "self", ".", "channels", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "# assignment_weights: [batch_size, channels, num_codes]", "\n", "assigment_weights", "=", "F", ".", "softmax", "(", "\n", "self", ".", "scaled_l2", "(", "x", ",", "self", ".", "codewords", ",", "self", ".", "scale", ")", ",", "dim", "=", "2", ")", "\n", "# aggregate", "\n", "encoded_feat", "=", "self", ".", "aggregate", "(", "assigment_weights", ",", "x", ",", "self", ".", "codewords", ")", "\n", "return", "encoded_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.encoding.Encoding.__repr__": [[70, 75], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(Nx{self.channels}xHxW =>Nx{self.num_codes}'", "f'x{self.channels})'", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build": [[13, 34], ["isinstance", "torch.nn.Sequential", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg"], "function", ["None"], ["if", "platform", ".", "system", "(", ")", "!=", "'Windows'", ":", "\n", "# https://github.com/pytorch/pytorch/issues/973", "\n", "    ", "import", "resource", "\n", "rlimit", "=", "resource", ".", "getrlimit", "(", "resource", ".", "RLIMIT_NOFILE", ")", "\n", "hard_limit", "=", "rlimit", "[", "1", "]", "\n", "soft_limit", "=", "min", "(", "4096", ",", "hard_limit", ")", "\n", "resource", ".", "setrlimit", "(", "resource", ".", "RLIMIT_NOFILE", ",", "(", "soft_limit", ",", "hard_limit", ")", ")", "\n", "\n", "", "DATASETS", "=", "Registry", "(", "'dataset'", ")", "\n", "PIPELINES", "=", "Registry", "(", "'pipeline'", ")", "\n", "\n", "\n", "def", "_concat_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build :obj:`ConcatDataset by.\"\"\"", "\n", "from", ".", "dataset_wrappers", "import", "ConcatDataset", "\n", "img_dir", "=", "cfg", "[", "'img_dir'", "]", "\n", "ann_dir", "=", "cfg", ".", "get", "(", "'ann_dir'", ",", "None", ")", "\n", "split", "=", "cfg", ".", "get", "(", "'split'", ",", "None", ")", "\n", "num_img_dir", "=", "len", "(", "img_dir", ")", "if", "isinstance", "(", "img_dir", ",", "(", "list", ",", "tuple", ")", ")", "else", "1", "\n", "if", "ann_dir", "is", "not", "None", ":", "\n", "        ", "num_ann_dir", "=", "len", "(", "ann_dir", ")", "if", "isinstance", "(", "ann_dir", ",", "(", "list", ",", "tuple", ")", ")", "else", "1", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_backbone": [[36, 39], ["builder.build"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build"], ["", "if", "split", "is", "not", "None", ":", "\n", "        ", "num_split", "=", "len", "(", "split", ")", "if", "isinstance", "(", "split", ",", "(", "list", ",", "tuple", ")", ")", "else", "1", "\n", "", "else", ":", "\n", "        ", "num_split", "=", "0", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_neck": [[41, 44], ["builder.build"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build"], ["        ", "assert", "num_img_dir", "==", "num_ann_dir", "or", "num_ann_dir", "==", "0", "\n", "assert", "num_img_dir", "==", "num_split", "or", "num_split", "==", "0", "\n", "", "else", ":", "\n", "        ", "assert", "num_split", "==", "num_ann_dir", "or", "num_ann_dir", "<=", "1", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_head": [[46, 49], ["builder.build"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build"], ["\n", "datasets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_dset", ")", ":", "\n", "        ", "data_cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_loss": [[51, 54], ["builder.build"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build"], ["            ", "data_cfg", "[", "'img_dir'", "]", "=", "img_dir", "[", "i", "]", "\n", "", "if", "isinstance", "(", "ann_dir", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'ann_dir'", "]", "=", "ann_dir", "[", "i", "]", "\n", "", "if", "isinstance", "(", "split", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_segmentor": [[56, 67], ["builder.build", "warnings.warn", "dict", "cfg.get", "cfg.get"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build"], ["", "datasets", ".", "append", "(", "build_dataset", "(", "data_cfg", ",", "default_args", ")", ")", "\n", "\n", "", "return", "ConcatDataset", "(", "datasets", ")", "\n", "\n", "\n", "", "def", "build_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build datasets.\"\"\"", "\n", "from", ".", "dataset_wrappers", "import", "ConcatDataset", ",", "RepeatDataset", "\n", "if", "isinstance", "(", "cfg", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "dataset", "=", "ConcatDataset", "(", "[", "build_dataset", "(", "c", ",", "default_args", ")", "for", "c", "in", "cfg", "]", ")", "\n", "", "elif", "cfg", "[", "'type'", "]", "==", "'RepeatDataset'", ":", "\n", "        ", "dataset", "=", "RepeatDataset", "(", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.necks.fpn.FPN.__init__": [[63, 155], ["dict", "torch.Module.__init__", "isinstance", "len", "upsample_cfg.copy", "isinstance", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "fpn.FPN.lateral_convs.append", "fpn.FPN.fpn_convs.append", "range", "len", "mmcv.cnn.ConvModule", "fpn.FPN.fpn_convs.append"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "num_outs", ",", "\n", "start_level", "=", "0", ",", "\n", "end_level", "=", "-", "1", ",", "\n", "add_extra_convs", "=", "False", ",", "\n", "extra_convs_on_inputs", "=", "False", ",", "\n", "relu_before_extra_convs", "=", "False", ",", "\n", "no_norm_on_lateral", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "None", ",", "\n", "upsample_cfg", "=", "dict", "(", "mode", "=", "'nearest'", ")", ")", ":", "\n", "        ", "super", "(", "FPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "in_channels", ",", "list", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_ins", "=", "len", "(", "in_channels", ")", "\n", "self", ".", "num_outs", "=", "num_outs", "\n", "self", ".", "relu_before_extra_convs", "=", "relu_before_extra_convs", "\n", "self", ".", "no_norm_on_lateral", "=", "no_norm_on_lateral", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "self", ".", "upsample_cfg", "=", "upsample_cfg", ".", "copy", "(", ")", "\n", "\n", "if", "end_level", "==", "-", "1", ":", "\n", "            ", "self", ".", "backbone_end_level", "=", "self", ".", "num_ins", "\n", "assert", "num_outs", ">=", "self", ".", "num_ins", "-", "start_level", "\n", "", "else", ":", "\n", "# if end_level < inputs, no extra level is allowed", "\n", "            ", "self", ".", "backbone_end_level", "=", "end_level", "\n", "assert", "end_level", "<=", "len", "(", "in_channels", ")", "\n", "assert", "num_outs", "==", "end_level", "-", "start_level", "\n", "", "self", ".", "start_level", "=", "start_level", "\n", "self", ".", "end_level", "=", "end_level", "\n", "self", ".", "add_extra_convs", "=", "add_extra_convs", "\n", "assert", "isinstance", "(", "add_extra_convs", ",", "(", "str", ",", "bool", ")", ")", "\n", "if", "isinstance", "(", "add_extra_convs", ",", "str", ")", ":", "\n", "# Extra_convs_source choices: 'on_input', 'on_lateral', 'on_output'", "\n", "            ", "assert", "add_extra_convs", "in", "(", "'on_input'", ",", "'on_lateral'", ",", "'on_output'", ")", "\n", "", "elif", "add_extra_convs", ":", "# True", "\n", "            ", "if", "extra_convs_on_inputs", ":", "\n", "# For compatibility with previous release", "\n", "# TODO: deprecate `extra_convs_on_inputs`", "\n", "                ", "self", ".", "add_extra_convs", "=", "'on_input'", "\n", "", "else", ":", "\n", "                ", "self", ".", "add_extra_convs", "=", "'on_output'", "\n", "\n", "", "", "self", ".", "lateral_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "fpn_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "start_level", ",", "self", ".", "backbone_end_level", ")", ":", "\n", "            ", "l_conv", "=", "ConvModule", "(", "\n", "in_channels", "[", "i", "]", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", "if", "not", "self", ".", "no_norm_on_lateral", "else", "None", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "inplace", "=", "False", ")", "\n", "fpn_conv", "=", "ConvModule", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "lateral_convs", ".", "append", "(", "l_conv", ")", "\n", "self", ".", "fpn_convs", ".", "append", "(", "fpn_conv", ")", "\n", "\n", "# add extra conv layers (e.g., RetinaNet)", "\n", "", "extra_levels", "=", "num_outs", "-", "self", ".", "backbone_end_level", "+", "self", ".", "start_level", "\n", "if", "self", ".", "add_extra_convs", "and", "extra_levels", ">=", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "extra_levels", ")", ":", "\n", "                ", "if", "i", "==", "0", "and", "self", ".", "add_extra_convs", "==", "'on_input'", ":", "\n", "                    ", "in_channels", "=", "self", ".", "in_channels", "[", "self", ".", "backbone_end_level", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "in_channels", "=", "out_channels", "\n", "", "extra_fpn_conv", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "inplace", "=", "False", ")", "\n", "self", ".", "fpn_convs", ".", "append", "(", "extra_fpn_conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.necks.fpn.FPN.init_weights": [[157, 161], ["fpn.FPN.modules", "isinstance", "mmcv.cnn.xavier_init"], "methods", ["None"], ["", "", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "'uniform'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.necks.fpn.FPN.forward": [[162, 213], ["len", "range", "tuple", "len", "len", "lateral_conv", "len", "enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "range", "range", "outs.append", "range", "outs.append", "torch.max_pool2d", "torch.max_pool2d", "outs.append", "outs.append", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "assert", "len", "(", "inputs", ")", "==", "len", "(", "self", ".", "in_channels", ")", "\n", "\n", "# build laterals", "\n", "laterals", "=", "[", "\n", "lateral_conv", "(", "inputs", "[", "i", "+", "self", ".", "start_level", "]", ")", "\n", "for", "i", ",", "lateral_conv", "in", "enumerate", "(", "self", ".", "lateral_convs", ")", "\n", "]", "\n", "\n", "# build top-down path", "\n", "used_backbone_levels", "=", "len", "(", "laterals", ")", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "# In some cases, fixing `scale factor` (e.g. 2) is preferred, but", "\n", "#  it cannot co-exist with `size` in `F.interpolate`.", "\n", "            ", "if", "'scale_factor'", "in", "self", ".", "upsample_cfg", ":", "\n", "                ", "laterals", "[", "i", "-", "1", "]", "+=", "F", ".", "interpolate", "(", "laterals", "[", "i", "]", ",", "\n", "**", "self", ".", "upsample_cfg", ")", "\n", "", "else", ":", "\n", "                ", "prev_shape", "=", "laterals", "[", "i", "-", "1", "]", ".", "shape", "[", "2", ":", "]", "\n", "laterals", "[", "i", "-", "1", "]", "+=", "F", ".", "interpolate", "(", "\n", "laterals", "[", "i", "]", ",", "size", "=", "prev_shape", ",", "**", "self", ".", "upsample_cfg", ")", "\n", "\n", "# build outputs", "\n", "# part 1: from original levels", "\n", "", "", "outs", "=", "[", "\n", "self", ".", "fpn_convs", "[", "i", "]", "(", "laterals", "[", "i", "]", ")", "for", "i", "in", "range", "(", "used_backbone_levels", ")", "\n", "]", "\n", "# part 2: add extra levels", "\n", "if", "self", ".", "num_outs", ">", "len", "(", "outs", ")", ":", "\n", "# use max pool to get more levels on top of outputs", "\n", "# (e.g., Faster R-CNN, Mask R-CNN)", "\n", "            ", "if", "not", "self", ".", "add_extra_convs", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "num_outs", "-", "used_backbone_levels", ")", ":", "\n", "                    ", "outs", ".", "append", "(", "F", ".", "max_pool2d", "(", "outs", "[", "-", "1", "]", ",", "1", ",", "stride", "=", "2", ")", ")", "\n", "# add conv layers on top of original feature maps (RetinaNet)", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "add_extra_convs", "==", "'on_input'", ":", "\n", "                    ", "extra_source", "=", "inputs", "[", "self", ".", "backbone_end_level", "-", "1", "]", "\n", "", "elif", "self", ".", "add_extra_convs", "==", "'on_lateral'", ":", "\n", "                    ", "extra_source", "=", "laterals", "[", "-", "1", "]", "\n", "", "elif", "self", ".", "add_extra_convs", "==", "'on_output'", ":", "\n", "                    ", "extra_source", "=", "outs", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "outs", ".", "append", "(", "self", ".", "fpn_convs", "[", "used_backbone_levels", "]", "(", "extra_source", ")", ")", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "+", "1", ",", "self", ".", "num_outs", ")", ":", "\n", "                    ", "if", "self", ".", "relu_before_extra_convs", ":", "\n", "                        ", "outs", ".", "append", "(", "self", ".", "fpn_convs", "[", "i", "]", "(", "F", ".", "relu", "(", "outs", "[", "-", "1", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "outs", ".", "append", "(", "self", ".", "fpn_convs", "[", "i", "]", "(", "outs", "[", "-", "1", "]", ")", ")", "\n", "", "", "", "", "return", "tuple", "(", "outs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.Mlp.__init__": [[15, 23], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.Mlp.forward": [[24, 31], ["pvt.Mlp.fc1", "pvt.Mlp.act", "pvt.Mlp.drop", "pvt.Mlp.fc2", "pvt.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.Attention.__init__": [[34, 53], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "sr_ratio", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "dim", "%", "num_heads", "==", "0", ",", "f\"dim {dim} should be divided by num_heads {num_heads}.\"", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "kv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "2", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "self", ".", "sr_ratio", "=", "sr_ratio", "\n", "if", "sr_ratio", ">", "1", ":", "\n", "            ", "self", ".", "sr", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "sr_ratio", ",", "stride", "=", "sr_ratio", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.Attention.forward": [[54, 76], ["pvt.Attention.q().reshape().permute", "pvt.Attention.softmax", "pvt.Attention.attn_drop", "pvt.Attention.proj", "pvt.Attention.proj_drop", "pvt.Attention.permute().reshape", "pvt.Attention.sr().reshape().permute", "pvt.Attention.norm", "pvt.Attention.kv().reshape().permute", "pvt.Attention.kv().reshape().permute", "pvt.Attention.q().reshape", "k.transpose", "pvt.Attention.permute", "pvt.Attention.sr().reshape", "pvt.Attention.kv().reshape", "pvt.Attention.kv().reshape", "pvt.Attention.q", "pvt.Attention.sr", "pvt.Attention.kv", "pvt.Attention.kv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "if", "self", ".", "sr_ratio", ">", "1", ":", "\n", "            ", "x_", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "x_", "=", "self", ".", "sr", "(", "x_", ")", ".", "reshape", "(", "B", ",", "C", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_", "=", "self", ".", "norm", "(", "x_", ")", "\n", "kv", "=", "self", ".", "kv", "(", "x_", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "2", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "kv", "=", "self", ".", "kv", "(", "x", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "2", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "", "k", ",", "v", "=", "kv", "[", "0", "]", ",", "kv", "[", "1", "]", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.Block.__init__": [[80, 93], ["torch.Module.__init__", "norm_layer", "pvt.Attention", "norm_layer", "int", "pvt.Mlp", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "sr_ratio", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "sr_ratio", "=", "sr_ratio", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.Block.forward": [[94, 99], ["pvt.Block.drop_path", "pvt.Block.drop_path", "pvt.Block.attn", "pvt.Block.mlp", "pvt.Block.norm1", "pvt.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.drop.drop_path", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.drop.drop_path", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.norm2"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ",", "H", ",", "W", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.PatchEmbed.__init__": [[105, 118], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "assert", "img_size", "[", "0", "]", "%", "patch_size", "[", "0", "]", "==", "0", "and", "img_size", "[", "1", "]", "%", "patch_size", "[", "1", "]", "==", "0", ",", "f\"img_size {img_size} should be divided by patch_size {patch_size}.\"", "\n", "self", ".", "H", ",", "self", ".", "W", "=", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", "\n", "self", ".", "num_patches", "=", "self", ".", "H", "*", "self", ".", "W", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.PatchEmbed.forward": [[119, 127], ["pvt.PatchEmbed.proj().flatten().transpose", "pvt.PatchEmbed.norm", "pvt.PatchEmbed.proj().flatten", "pvt.PatchEmbed.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "H", ",", "W", "=", "H", "//", "self", ".", "patch_size", "[", "0", "]", ",", "W", "//", "self", ".", "patch_size", "[", "1", "]", "\n", "\n", "return", "x", ",", "(", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.PyramidVisionTransformer.__init__": [[130, 195], ["torch.Module.__init__", "pvt.PatchEmbed", "pvt.PatchEmbed", "pvt.PatchEmbed", "pvt.PatchEmbed", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "timm.models.layers.trunc_normal_", "timm.models.layers.trunc_normal_", "timm.models.layers.trunc_normal_", "timm.models.layers.trunc_normal_", "pvt.PyramidVisionTransformer.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "pvt.Block", "pvt.Block", "pvt.Block", "pvt.Block", "sum", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.weight_init.trunc_normal_", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.weight_init.trunc_normal_", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.weight_init.trunc_normal_", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.weight_init.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "\n", "num_heads", "=", "[", "1", ",", "2", ",", "4", ",", "8", "]", ",", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "\n", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "\n", "depths", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ",", "F4", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "depths", "=", "depths", "\n", "self", ".", "F4", "=", "F4", "\n", "\n", "# patch_embed", "\n", "self", ".", "patch_embed1", "=", "PatchEmbed", "(", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "\n", "embed_dim", "=", "embed_dims", "[", "0", "]", ")", "\n", "self", ".", "patch_embed2", "=", "PatchEmbed", "(", "img_size", "=", "img_size", "//", "4", ",", "patch_size", "=", "2", ",", "in_chans", "=", "embed_dims", "[", "0", "]", ",", "\n", "embed_dim", "=", "embed_dims", "[", "1", "]", ")", "\n", "self", ".", "patch_embed3", "=", "PatchEmbed", "(", "img_size", "=", "img_size", "//", "8", ",", "patch_size", "=", "2", ",", "in_chans", "=", "embed_dims", "[", "1", "]", ",", "\n", "embed_dim", "=", "embed_dims", "[", "2", "]", ")", "\n", "self", ".", "patch_embed4", "=", "PatchEmbed", "(", "img_size", "=", "img_size", "//", "16", ",", "patch_size", "=", "2", ",", "in_chans", "=", "embed_dims", "[", "2", "]", ",", "\n", "embed_dim", "=", "embed_dims", "[", "3", "]", ")", "\n", "\n", "# pos_embed", "\n", "self", ".", "pos_embed1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "patch_embed1", ".", "num_patches", ",", "embed_dims", "[", "0", "]", ")", ")", "\n", "self", ".", "pos_drop1", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "self", ".", "pos_embed2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "patch_embed2", ".", "num_patches", ",", "embed_dims", "[", "1", "]", ")", ")", "\n", "self", ".", "pos_drop2", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "self", ".", "pos_embed3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "patch_embed3", ".", "num_patches", ",", "embed_dims", "[", "2", "]", ")", ")", "\n", "self", ".", "pos_drop3", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "self", ".", "pos_embed4", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "patch_embed4", ".", "num_patches", "+", "1", ",", "embed_dims", "[", "3", "]", ")", ")", "\n", "self", ".", "pos_drop4", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "# transformer encoder", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "# stochastic depth decay rule", "\n", "cur", "=", "0", "\n", "self", ".", "block1", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "0", "]", ",", "num_heads", "=", "num_heads", "[", "0", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "0", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "0", "]", ")", "]", ")", "\n", "\n", "cur", "+=", "depths", "[", "0", "]", "\n", "self", ".", "block2", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "1", "]", ",", "num_heads", "=", "num_heads", "[", "1", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "1", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "1", "]", ")", "]", ")", "\n", "\n", "cur", "+=", "depths", "[", "1", "]", "\n", "self", ".", "block3", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "2", "]", ",", "num_heads", "=", "num_heads", "[", "2", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "2", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "2", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "2", "]", ")", "]", ")", "\n", "\n", "cur", "+=", "depths", "[", "2", "]", "\n", "self", ".", "block4", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "3", "]", ",", "num_heads", "=", "num_heads", "[", "3", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "3", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "3", "]", ")", "]", ")", "\n", "\n", "# init weights", "\n", "trunc_normal_", "(", "self", ".", "pos_embed1", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed2", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed3", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed4", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.PyramidVisionTransformer.init_weights": [[196, 200], ["isinstance", "mmseg.utils.get_root_logger", "mmcv.runner.load_checkpoint"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.logger.get_root_logger"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "map_location", "=", "'cpu'", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.PyramidVisionTransformer.reset_drop_path": [[201, 218], ["range", "range", "range", "range", "x.item", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "sum"], "methods", ["None"], ["", "", "def", "reset_drop_path", "(", "self", ",", "drop_path_rate", ")", ":", "\n", "        ", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "self", ".", "depths", ")", ")", "]", "\n", "cur", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "depths", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "block1", "[", "i", "]", ".", "drop_path", ".", "drop_prob", "=", "dpr", "[", "cur", "+", "i", "]", "\n", "\n", "", "cur", "+=", "self", ".", "depths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depths", "[", "1", "]", ")", ":", "\n", "            ", "self", ".", "block2", "[", "i", "]", ".", "drop_path", ".", "drop_prob", "=", "dpr", "[", "cur", "+", "i", "]", "\n", "\n", "", "cur", "+=", "self", ".", "depths", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depths", "[", "2", "]", ")", ":", "\n", "            ", "self", ".", "block3", "[", "i", "]", ".", "drop_path", ".", "drop_prob", "=", "dpr", "[", "cur", "+", "i", "]", "\n", "\n", "", "cur", "+=", "self", ".", "depths", "[", "2", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depths", "[", "3", "]", ")", ":", "\n", "            ", "self", ".", "block4", "[", "i", "]", ".", "drop_path", ".", "drop_prob", "=", "dpr", "[", "cur", "+", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.PyramidVisionTransformer._init_weights": [[219, 227], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.weight_init.trunc_normal_"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.PyramidVisionTransformer._get_pos_embed": [[228, 235], ["torch.interpolate().reshape().permute", "torch.interpolate().reshape().permute", "torch.interpolate().reshape().permute", "torch.interpolate().reshape", "torch.interpolate().reshape", "torch.interpolate().reshape", "torch.interpolate", "torch.interpolate", "torch.interpolate", "pos_embed.reshape().permute", "pos_embed.reshape"], "methods", ["None"], ["", "", "def", "_get_pos_embed", "(", "self", ",", "pos_embed", ",", "patch_embed", ",", "H", ",", "W", ")", ":", "\n", "        ", "if", "H", "*", "W", "==", "self", ".", "patch_embed1", ".", "num_patches", ":", "\n", "            ", "return", "pos_embed", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "interpolate", "(", "\n", "pos_embed", ".", "reshape", "(", "1", ",", "patch_embed", ".", "H", ",", "patch_embed", ".", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ",", "\n", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "\"bilinear\"", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "H", "*", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.PyramidVisionTransformer.forward_features": [[236, 282], ["pvt.PyramidVisionTransformer.patch_embed1", "pvt.PyramidVisionTransformer._get_pos_embed", "pvt.PyramidVisionTransformer.pos_drop1", "blk.reshape().permute().contiguous", "outs.append", "pvt.PyramidVisionTransformer.patch_embed2", "pvt.PyramidVisionTransformer._get_pos_embed", "pvt.PyramidVisionTransformer.pos_drop2", "blk.reshape().permute().contiguous", "outs.append", "pvt.PyramidVisionTransformer.patch_embed3", "pvt.PyramidVisionTransformer._get_pos_embed", "pvt.PyramidVisionTransformer.pos_drop3", "blk.reshape().permute().contiguous", "outs.append", "pvt.PyramidVisionTransformer.patch_embed4", "pvt.PyramidVisionTransformer._get_pos_embed", "pvt.PyramidVisionTransformer.pos_drop4", "blk.reshape().permute().contiguous", "outs.append", "blk", "blk", "blk", "blk", "blk.reshape().permute", "blk.reshape().permute", "blk.reshape().permute", "blk.reshape().permute", "blk.reshape", "blk.reshape", "blk.reshape", "blk.reshape"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.PyramidVisionTransformer._get_pos_embed", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.PyramidVisionTransformer._get_pos_embed", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.PyramidVisionTransformer._get_pos_embed", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.PyramidVisionTransformer._get_pos_embed"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "# stage 1", "\n", "x", ",", "(", "H", ",", "W", ")", "=", "self", ".", "patch_embed1", "(", "x", ")", "\n", "pos_embed1", "=", "self", ".", "_get_pos_embed", "(", "self", ".", "pos_embed1", ",", "self", ".", "patch_embed1", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "pos_embed1", "\n", "x", "=", "self", ".", "pos_drop1", "(", "x", ")", "\n", "for", "blk", "in", "self", ".", "block1", ":", "\n", "            ", "x", "=", "blk", "(", "x", ",", "H", ",", "W", ")", "\n", "", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "\n", "# stage 2", "\n", "x", ",", "(", "H", ",", "W", ")", "=", "self", ".", "patch_embed2", "(", "x", ")", "\n", "pos_embed2", "=", "self", ".", "_get_pos_embed", "(", "self", ".", "pos_embed2", ",", "self", ".", "patch_embed2", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "pos_embed2", "\n", "x", "=", "self", ".", "pos_drop2", "(", "x", ")", "\n", "for", "blk", "in", "self", ".", "block2", ":", "\n", "            ", "x", "=", "blk", "(", "x", ",", "H", ",", "W", ")", "\n", "", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "\n", "# stage 3", "\n", "x", ",", "(", "H", ",", "W", ")", "=", "self", ".", "patch_embed3", "(", "x", ")", "\n", "pos_embed3", "=", "self", ".", "_get_pos_embed", "(", "self", ".", "pos_embed3", ",", "self", ".", "patch_embed3", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "pos_embed3", "\n", "x", "=", "self", ".", "pos_drop3", "(", "x", ")", "\n", "for", "blk", "in", "self", ".", "block3", ":", "\n", "            ", "x", "=", "blk", "(", "x", ",", "H", ",", "W", ")", "\n", "", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "\n", "# stage 4", "\n", "x", ",", "(", "H", ",", "W", ")", "=", "self", ".", "patch_embed4", "(", "x", ")", "\n", "pos_embed4", "=", "self", ".", "_get_pos_embed", "(", "self", ".", "pos_embed4", "[", ":", ",", "1", ":", "]", ",", "self", ".", "patch_embed4", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "pos_embed4", "\n", "x", "=", "self", ".", "pos_drop4", "(", "x", ")", "\n", "for", "blk", "in", "self", ".", "block4", ":", "\n", "            ", "x", "=", "blk", "(", "x", ",", "H", ",", "W", ")", "\n", "", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.PyramidVisionTransformer.forward": [[283, 290], ["pvt.PyramidVisionTransformer.forward_features"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.PyramidVisionTransformer.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "\n", "if", "self", ".", "F4", ":", "\n", "            ", "x", "=", "x", "[", "3", ":", "4", "]", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.pvt_tiny.__init__": [[305, 310], ["pvt.PyramidVisionTransformer.__init__", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "pvt_tiny", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "8", ",", "8", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ",", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.pvt_small.__init__": [[314, 319], ["pvt.PyramidVisionTransformer.__init__", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "pvt_small", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "8", ",", "8", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ",", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.pvt_small_f4.__init__": [[323, 328], ["pvt.PyramidVisionTransformer.__init__", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "pvt_small_f4", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "8", ",", "8", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ",", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.2", ",", "F4", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt.pvt_large.__init__": [[332, 337], ["pvt.PyramidVisionTransformer.__init__", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "pvt_large", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "8", ",", "8", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "3", ",", "8", ",", "27", ",", "3", "]", ",", "\n", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ",", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.pvt._conv_filter": [[292, 301], ["state_dict.items", "v.reshape.reshape"], "function", ["None"], ["", "", "def", "_conv_filter", "(", "state_dict", ",", "patch_size", "=", "16", ")", ":", "\n", "    ", "\"\"\" convert patch embedding weight from manual patchify + linear proj to conv\"\"\"", "\n", "out_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'patch_embed.proj.weight'", "in", "k", ":", "\n", "            ", "v", "=", "v", ".", "reshape", "(", "(", "v", ".", "shape", "[", "0", "]", ",", "3", ",", "patch_size", ",", "patch_size", ")", ")", "\n", "", "out_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.Mlp.__init__": [[69, 77], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.Mlp.forward": [[78, 85], ["vit_mla.Mlp.fc1", "vit_mla.Mlp.act", "vit_mla.Mlp.drop", "vit_mla.Mlp.fc2", "vit_mla.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.Attention.__init__": [[88, 99], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.Attention.forward": [[100, 112], ["vit_mla.Attention.qkv().reshape().permute", "vit_mla.Attention.softmax", "vit_mla.Attention.attn_drop", "vit_mla.Attention.proj", "vit_mla.Attention.proj_drop", "vit_mla.Attention.qkv().reshape", "k.transpose", "vit_mla.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "q", ",", "k", ",", "v", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.Block.__init__": [[116, 127], ["torch.Module.__init__", "norm_layer", "vit_mla.Attention", "norm_layer", "int", "vit_mla.Mlp", "layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.Block.forward": [[128, 132], ["vit_mla.Block.drop_path", "vit_mla.Block.drop_path", "vit_mla.Block.attn", "vit_mla.Block.mlp", "vit_mla.Block.norm1", "vit_mla.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.drop.drop_path", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.drop.drop_path", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.norm2"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.PatchEmbed.__init__": [[137, 147], ["torch.Module.__init__", "layers.to_2tuple", "layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "num_patches", "=", "(", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", ")", "*", "(", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.PatchEmbed.forward": [[148, 157], ["vit_mla.PatchEmbed.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "# FIXME look at relaxing size constraints", "\n", "assert", "H", "==", "self", ".", "img_size", "[", "0", "]", "and", "W", "==", "self", ".", "img_size", "[", "1", "]", ",", "f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\"", "\n", "\n", "# x = F.interpolate(x, size=2*x.shape[-1], mode='bilinear', align_corners=True)", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.HybridEmbed.__init__": [[163, 186], ["torch.Module.__init__", "isinstance", "layers.to_2tuple", "torch.Linear", "torch.Linear", "torch.Linear", "layers.to_2tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "backbone.train", "vit_mla.HybridEmbed.backbone.feature_info.channels", "backbone.eval", "vit_mla.HybridEmbed.backbone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train"], ["def", "__init__", "(", "self", ",", "backbone", ",", "img_size", "=", "224", ",", "feature_size", "=", "None", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "backbone", ",", "nn", ".", "Module", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "backbone", "=", "backbone", "\n", "if", "feature_size", "is", "None", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# FIXME this is hacky, but most reliable way of determining the exact dim of the output feature", "\n", "# map for all networks, the feature metadata has reliable channel and stride info, but using", "\n", "# stride to calc feature dim requires info about padding of each stage that isn't captured.", "\n", "                ", "training", "=", "backbone", ".", "training", "\n", "if", "training", ":", "\n", "                    ", "backbone", ".", "eval", "(", ")", "\n", "", "o", "=", "self", ".", "backbone", "(", "torch", ".", "zeros", "(", "1", ",", "in_chans", ",", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", ")", ")", "[", "-", "1", "]", "\n", "feature_size", "=", "o", ".", "shape", "[", "-", "2", ":", "]", "\n", "feature_dim", "=", "o", ".", "shape", "[", "1", "]", "\n", "backbone", ".", "train", "(", "training", ")", "\n", "", "", "else", ":", "\n", "            ", "feature_size", "=", "to_2tuple", "(", "feature_size", ")", "\n", "feature_dim", "=", "self", ".", "backbone", ".", "feature_info", ".", "channels", "(", ")", "[", "-", "1", "]", "\n", "", "self", ".", "num_patches", "=", "feature_size", "[", "0", "]", "*", "feature_size", "[", "1", "]", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "feature_dim", ",", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.HybridEmbed.forward": [[187, 192], ["vit_mla.HybridEmbed.flatten().transpose", "vit_mla.HybridEmbed.proj", "vit_mla.HybridEmbed.backbone", "vit_mla.HybridEmbed.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", "[", "-", "1", "]", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.Conv_MLA.__init__": [[195, 205], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "1024", ",", "mla_channels", "=", "256", ",", "norm_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "Conv_MLA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mla_p2_1x1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "mla_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "build_norm_layer", "(", "norm_cfg", ",", "mla_channels", ")", "[", "1", "]", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "mla_p3_1x1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "mla_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "build_norm_layer", "(", "norm_cfg", ",", "mla_channels", ")", "[", "1", "]", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "mla_p4_1x1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "mla_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "build_norm_layer", "(", "norm_cfg", ",", "mla_channels", ")", "[", "1", "]", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "mla_p5_1x1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "mla_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "build_norm_layer", "(", "norm_cfg", ",", "mla_channels", ")", "[", "1", "]", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "mla_p2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "mla_channels", ",", "mla_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "build_norm_layer", "(", "norm_cfg", ",", "mla_channels", ")", "[", "1", "]", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "mla_p3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "mla_channels", ",", "mla_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "build_norm_layer", "(", "norm_cfg", ",", "mla_channels", ")", "[", "1", "]", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "mla_p4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "mla_channels", ",", "mla_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "build_norm_layer", "(", "norm_cfg", ",", "mla_channels", ")", "[", "1", "]", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "mla_p5", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "mla_channels", ",", "mla_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "build_norm_layer", "(", "norm_cfg", ",", "mla_channels", ")", "[", "1", "]", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.Conv_MLA.to_2D": [[206, 211], ["int", "x.transpose().reshape.transpose().reshape.transpose().reshape", "math.sqrt", "x.transpose().reshape.transpose().reshape.transpose"], "methods", ["None"], ["", "def", "to_2D", "(", "self", ",", "x", ")", ":", "\n", "        ", "n", ",", "hw", ",", "c", "=", "x", ".", "shape", "\n", "h", "=", "w", "=", "int", "(", "math", ".", "sqrt", "(", "hw", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "n", ",", "c", ",", "h", ",", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.Conv_MLA.forward": [[212, 234], ["vit_mla.Conv_MLA.to_2D", "vit_mla.Conv_MLA.to_2D", "vit_mla.Conv_MLA.to_2D", "vit_mla.Conv_MLA.to_2D", "vit_mla.Conv_MLA.mla_p5_1x1", "vit_mla.Conv_MLA.mla_p4_1x1", "vit_mla.Conv_MLA.mla_p3_1x1", "vit_mla.Conv_MLA.mla_p2_1x1", "vit_mla.Conv_MLA.mla_p5", "vit_mla.Conv_MLA.mla_p4", "vit_mla.Conv_MLA.mla_p3", "vit_mla.Conv_MLA.mla_p2"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.vit_mla_auxi_head.VIT_MLA_AUXIHead.to_2D", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.vit_mla_auxi_head.VIT_MLA_AUXIHead.to_2D", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.vit_mla_auxi_head.VIT_MLA_AUXIHead.to_2D", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.vit_mla_auxi_head.VIT_MLA_AUXIHead.to_2D"], ["", "def", "forward", "(", "self", ",", "res2", ",", "res3", ",", "res4", ",", "res5", ")", ":", "\n", "\n", "        ", "res2", "=", "self", ".", "to_2D", "(", "res2", ")", "\n", "res3", "=", "self", ".", "to_2D", "(", "res3", ")", "\n", "res4", "=", "self", ".", "to_2D", "(", "res4", ")", "\n", "res5", "=", "self", ".", "to_2D", "(", "res5", ")", "\n", "\n", "mla_p5_1x1", "=", "self", ".", "mla_p5_1x1", "(", "res5", ")", "\n", "mla_p4_1x1", "=", "self", ".", "mla_p4_1x1", "(", "res4", ")", "\n", "mla_p3_1x1", "=", "self", ".", "mla_p3_1x1", "(", "res3", ")", "\n", "mla_p2_1x1", "=", "self", ".", "mla_p2_1x1", "(", "res2", ")", "\n", "\n", "mla_p4_plus", "=", "mla_p5_1x1", "+", "mla_p4_1x1", "\n", "mla_p3_plus", "=", "mla_p4_plus", "+", "mla_p3_1x1", "\n", "mla_p2_plus", "=", "mla_p3_plus", "+", "mla_p2_1x1", "\n", "\n", "mla_p5", "=", "self", ".", "mla_p5", "(", "mla_p5_1x1", ")", "\n", "mla_p4", "=", "self", ".", "mla_p4", "(", "mla_p4_plus", ")", "\n", "mla_p3", "=", "self", ".", "mla_p3", "(", "mla_p3_plus", ")", "\n", "mla_p2", "=", "self", ".", "mla_p2", "(", "mla_p2_plus", ")", "\n", "\n", "return", "mla_p2", ",", "mla_p3", ",", "mla_p4", ",", "mla_p5", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.VIT_MLA.__init__": [[240, 305], ["functools.partial", "torch.Module.__init__", "tuple", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "vit_mla.Conv_MLA", "norm_layer", "norm_layer", "norm_layer", "norm_layer", "layers.trunc_normal_", "layers.trunc_normal_", "range", "vit_mla.HybridEmbed", "vit_mla.PatchEmbed", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "vit_mla.Block", "range"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.weight_init.trunc_normal_", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.weight_init.trunc_normal_"], ["def", "__init__", "(", "self", ",", "model_name", "=", "'vit_large_patch16_384'", ",", "img_size", "=", "384", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "1024", ",", "depth", "=", "24", ",", "\n", "num_heads", "=", "16", ",", "num_classes", "=", "19", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.1", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "norm_cfg", "=", "None", ",", "\n", "pos_embed_interp", "=", "False", ",", "random_init", "=", "False", ",", "align_corners", "=", "False", ",", "mla_channels", "=", "256", ",", "\n", "mla_index", "=", "(", "5", ",", "11", ",", "17", ",", "23", ")", ",", "pretrain_weights", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VIT_MLA", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "self", ".", "qkv_bias", "=", "qkv_bias", "\n", "self", ".", "qk_scale", "=", "qk_scale", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "attn_drop_rate", "=", "attn_drop_rate", "\n", "self", ".", "drop_path_rate", "=", "drop_path_rate", "\n", "self", ".", "hybrid_backbone", "=", "hybrid_backbone", "\n", "self", ".", "norm_layer", "=", "norm_layer", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "pos_embed_interp", "=", "pos_embed_interp", "\n", "self", ".", "random_init", "=", "random_init", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "self", ".", "mla_channels", "=", "mla_channels", "\n", "self", ".", "mla_index", "=", "mla_index", "\n", "self", ".", "pretrain_weights", "=", "pretrain_weights", "\n", "\n", "self", ".", "num_stages", "=", "self", ".", "depth", "\n", "self", ".", "out_indices", "=", "tuple", "(", "range", "(", "self", ".", "num_stages", ")", ")", "\n", "\n", "if", "self", ".", "hybrid_backbone", "is", "not", "None", ":", "\n", "            ", "self", ".", "patch_embed", "=", "HybridEmbed", "(", "\n", "self", ".", "hybrid_backbone", ",", "img_size", "=", "self", ".", "img_size", ",", "in_chans", "=", "self", ".", "in_chans", ",", "embed_dim", "=", "self", ".", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "img_size", "=", "self", ".", "img_size", ",", "patch_size", "=", "self", ".", "patch_size", ",", "in_chans", "=", "self", ".", "in_chans", ",", "embed_dim", "=", "self", ".", "embed_dim", ")", "\n", "", "self", ".", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "self", ".", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "num_patches", "+", "1", ",", "self", ".", "embed_dim", ")", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "self", ".", "drop_path_rate", ",", "self", ".", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "self", ".", "embed_dim", ",", "num_heads", "=", "self", ".", "num_heads", ",", "mlp_ratio", "=", "self", ".", "mlp_ratio", ",", "qkv_bias", "=", "self", ".", "qkv_bias", ",", "qk_scale", "=", "self", ".", "qk_scale", ",", "\n", "drop", "=", "self", ".", "drop_rate", ",", "attn_drop", "=", "self", ".", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", "]", ")", "\n", "\n", "self", ".", "mla", "=", "Conv_MLA", "(", "in_channels", "=", "self", ".", "embed_dim", ",", "mla_channels", "=", "self", ".", "mla_channels", ",", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "\n", "self", ".", "norm_0", "=", "norm_layer", "(", "self", ".", "embed_dim", ")", "\n", "self", ".", "norm_1", "=", "norm_layer", "(", "self", ".", "embed_dim", ")", "\n", "self", ".", "norm_2", "=", "norm_layer", "(", "self", ".", "embed_dim", ")", "\n", "self", ".", "norm_3", "=", "norm_layer", "(", "self", ".", "embed_dim", ")", "\n", "\n", "# NOTE as per official impl, we could have a pre-logits representation dense layer + tanh here", "\n", "#self.repr = nn.Linear(embed_dim, representation_size)", "\n", "#self.repr_act = nn.Tanh()", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "# self.apply(self._init_weights)", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.VIT_MLA.init_weights": [[307, 332], ["vit_mla.VIT_MLA.modules", "isinstance", "print", "layers.trunc_normal_", "isinstance", "helpers.load_pretrained", "helpers.load_pretrained", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.weight_init.trunc_normal_", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.helpers.load_pretrained", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.helpers.load_pretrained"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "# nn.init.normal_(self.pos_embed, std=0.02)", "\n", "# nn.init.zeros_(self.cls_token)", "\n", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n", "", "", "if", "self", ".", "random_init", "==", "False", ":", "\n", "            ", "self", ".", "default_cfg", "=", "default_cfgs", "[", "self", ".", "model_name", "]", "\n", "\n", "if", "not", "self", ".", "pretrain_weights", "==", "None", ":", "\n", "                ", "self", ".", "default_cfg", "[", "'pretrained_finetune'", "]", "=", "self", ".", "pretrain_weights", "\n", "\n", "", "if", "self", ".", "model_name", "in", "[", "'vit_small_patch16_224'", ",", "'vit_base_patch16_224'", "]", ":", "\n", "                ", "load_pretrained", "(", "self", ",", "num_classes", "=", "self", ".", "num_classes", ",", "in_chans", "=", "self", ".", "in_chans", ",", "pos_embed_interp", "=", "self", ".", "pos_embed_interp", ",", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", ",", "align_corners", "=", "self", ".", "align_corners", ",", "filter_fn", "=", "self", ".", "_conv_filter", ")", "\n", "", "else", ":", "\n", "                ", "load_pretrained", "(", "self", ",", "num_classes", "=", "self", ".", "num_classes", ",", "in_chans", "=", "self", ".", "in_chans", ",", "pos_embed_interp", "=", "self", ".", "pos_embed_interp", ",", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Initialize weight randomly'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.VIT_MLA.no_weight_decay": [[333, 336], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'pos_embed'", ",", "'cls_token'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.VIT_MLA._conv_filter": [[337, 345], ["state_dict.items", "v.reshape.reshape.reshape"], "methods", ["None"], ["", "def", "_conv_filter", "(", "self", ",", "state_dict", ",", "patch_size", "=", "16", ")", ":", "\n", "        ", "\"\"\" convert patch embedding weight from manual patchify + linear proj to conv\"\"\"", "\n", "out_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'patch_embed.proj.weight'", "in", "k", ":", "\n", "                ", "v", "=", "v", ".", "reshape", "(", "(", "v", ".", "shape", "[", "0", "]", ",", "3", ",", "patch_size", ",", "patch_size", ")", ")", "\n", "", "out_dict", "[", "k", "]", "=", "v", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla.VIT_MLA.forward": [[346, 371], ["vit_mla.VIT_MLA.patch_embed", "blk.flatten().transpose", "vit_mla.VIT_MLA.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vit_mla.VIT_MLA.pos_drop", "enumerate", "vit_mla.VIT_MLA.norm_0", "vit_mla.VIT_MLA.norm_1", "vit_mla.VIT_MLA.norm_2", "vit_mla.VIT_MLA.norm_3", "vit_mla.VIT_MLA.mla", "blk", "blk.flatten", "outs.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "\n", "x", "=", "x", "[", ":", ",", "1", ":", "]", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "\n", "", "", "c6", "=", "self", ".", "norm_0", "(", "outs", "[", "self", ".", "mla_index", "[", "0", "]", "]", ")", "\n", "c12", "=", "self", ".", "norm_1", "(", "outs", "[", "self", ".", "mla_index", "[", "1", "]", "]", ")", "\n", "c18", "=", "self", ".", "norm_2", "(", "outs", "[", "self", ".", "mla_index", "[", "2", "]", "]", ")", "\n", "c24", "=", "self", ".", "norm_3", "(", "outs", "[", "self", ".", "mla_index", "[", "3", "]", "]", ")", "\n", "\n", "p6", ",", "p12", ",", "p18", ",", "p24", "=", "self", ".", "mla", "(", "c6", ",", "c12", ",", "c18", ",", "c24", ")", "\n", "\n", "return", "(", "p6", ",", "p12", ",", "p18", ",", "p24", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit_mla._cfg": [[15, 23], ["None"], "function", ["None"], ["def", "_cfg", "(", "url", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "'url'", ":", "url", ",", "\n", "'num_classes'", ":", "1000", ",", "'input_size'", ":", "(", "3", ",", "224", ",", "224", ")", ",", "'pool_size'", ":", "None", ",", "\n", "'crop_pct'", ":", ".9", ",", "'interpolation'", ":", "'bicubic'", ",", "\n", "'mean'", ":", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "'std'", ":", "(", "0.229", ",", "0.224", ",", "0.225", ")", ",", "\n", "'first_conv'", ":", "''", ",", "'classifier'", ":", "'head'", ",", "\n", "**", "kwargs", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.unet.BasicConvBlock.__init__": [[43, 75], ["dict", "dict", "torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "convs.append", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "num_convs", "=", "2", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "dcn", "=", "None", ",", "\n", "plugins", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "dcn", "is", "None", ",", "'Not implemented yet.'", "\n", "assert", "plugins", "is", "None", ",", "'Not implemented yet.'", "\n", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "convs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_convs", ")", ":", "\n", "            ", "convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "in_channels", "=", "in_channels", "if", "i", "==", "0", "else", "out_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", "if", "i", "==", "0", "else", "1", ",", "\n", "dilation", "=", "1", "if", "i", "==", "0", "else", "dilation", ",", "\n", "padding", "=", "1", "if", "i", "==", "0", "else", "dilation", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ")", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.unet.BasicConvBlock.forward": [[76, 84], ["torch.checkpoint", "torch.checkpoint", "unet.BasicConvBlock.convs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "\n", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "self", ".", "convs", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.unet.DeconvModule.__init__": [[105, 136], ["dict", "dict", "torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_activation_layer", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "with_cp", "=", "False", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "*", ",", "\n", "kernel_size", "=", "4", ",", "\n", "scale_factor", "=", "2", ")", ":", "\n", "        ", "super", "(", "DeconvModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "(", "kernel_size", "-", "scale_factor", ">=", "0", ")", "and", "(", "kernel_size", "-", "scale_factor", ")", "%", "2", "==", "0", ",", "f'kernel_size should be greater than or equal to scale_factor '", "f'and (kernel_size - scale_factor) should be even numbers, '", "f'while the kernel size is {kernel_size} and scale_factor is '", "f'{scale_factor}.'", "\n", "\n", "stride", "=", "scale_factor", "\n", "padding", "=", "(", "kernel_size", "-", "scale_factor", ")", "//", "2", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "deconv", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ")", "\n", "\n", "norm_name", ",", "norm", "=", "build_norm_layer", "(", "norm_cfg", ",", "out_channels", ")", "\n", "activate", "=", "build_activation_layer", "(", "act_cfg", ")", "\n", "self", ".", "deconv_upsamping", "=", "nn", ".", "Sequential", "(", "deconv", ",", "norm", ",", "activate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.unet.DeconvModule.forward": [[137, 145], ["torch.checkpoint", "torch.checkpoint", "unet.DeconvModule.deconv_upsamping"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "\n", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "self", ".", "deconv_upsamping", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "deconv_upsamping", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.unet.InterpConv.__init__": [[179, 210], ["dict", "dict", "dict", "torch.Module.__init__", "mmcv.cnn.ConvModule", "torch.Upsample", "torch.Upsample", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "with_cp", "=", "False", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "*", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "conv_first", "=", "False", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "upsampe_cfg", "=", "dict", "(", "\n", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ")", ":", "\n", "        ", "super", "(", "InterpConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "conv", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "upsample", "=", "nn", ".", "Upsample", "(", "**", "upsampe_cfg", ")", "\n", "if", "conv_first", ":", "\n", "            ", "self", ".", "interp_upsample", "=", "nn", ".", "Sequential", "(", "conv", ",", "upsample", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "interp_upsample", "=", "nn", ".", "Sequential", "(", "upsample", ",", "conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.unet.InterpConv.forward": [[211, 219], ["torch.checkpoint", "torch.checkpoint", "unet.InterpConv.interp_upsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "\n", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "self", ".", "interp_upsample", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "interp_upsample", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.unet.UNet.__init__": [[277, 374], ["dict", "dict", "dict", "torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "len", "len", "len", "len", "len", "enc_conv_block.append", "unet.UNet.encoder.append", "len", "len", "len", "len", "len", "len", "unet.UNet.decoder.append", "unet.BasicConvBlock", "torch.Sequential", "torch.Sequential", "enc_conv_block.append", "utils.UpConvBlock", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "True", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "upsample_cfg", "=", "dict", "(", "type", "=", "'InterpConv'", ")", ",", "\n", "norm_eval", "=", "False", ",", "\n", "dcn", "=", "None", ",", "\n", "plugins", "=", "None", ")", ":", "\n", "        ", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "dcn", "is", "None", ",", "'Not implemented yet.'", "\n", "assert", "plugins", "is", "None", ",", "'Not implemented yet.'", "\n", "assert", "len", "(", "strides", ")", "==", "num_stages", ",", "'The length of strides should be equal to num_stages, '", "f'while the strides is {strides}, the length of '", "f'strides is {len(strides)}, and the num_stages is '", "f'{num_stages}.'", "\n", "assert", "len", "(", "enc_num_convs", ")", "==", "num_stages", ",", "'The length of enc_num_convs should be equal to num_stages, '", "f'while the enc_num_convs is {enc_num_convs}, the length of '", "f'enc_num_convs is {len(enc_num_convs)}, and the num_stages is '", "f'{num_stages}.'", "\n", "assert", "len", "(", "dec_num_convs", ")", "==", "(", "num_stages", "-", "1", ")", ",", "'The length of dec_num_convs should be equal to (num_stages-1), '", "f'while the dec_num_convs is {dec_num_convs}, the length of '", "f'dec_num_convs is {len(dec_num_convs)}, and the num_stages is '", "f'{num_stages}.'", "\n", "assert", "len", "(", "downsamples", ")", "==", "(", "num_stages", "-", "1", ")", ",", "'The length of downsamples should be equal to (num_stages-1), '", "f'while the downsamples is {downsamples}, the length of '", "f'downsamples is {len(downsamples)}, and the num_stages is '", "f'{num_stages}.'", "\n", "assert", "len", "(", "enc_dilations", ")", "==", "num_stages", ",", "'The length of enc_dilations should be equal to num_stages, '", "f'while the enc_dilations is {enc_dilations}, the length of '", "f'enc_dilations is {len(enc_dilations)}, and the num_stages is '", "f'{num_stages}.'", "\n", "assert", "len", "(", "dec_dilations", ")", "==", "(", "num_stages", "-", "1", ")", ",", "'The length of dec_dilations should be equal to (num_stages-1), '", "f'while the dec_dilations is {dec_dilations}, the length of '", "f'dec_dilations is {len(dec_dilations)}, and the num_stages is '", "f'{num_stages}.'", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "downsamples", "=", "downsamples", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_stages", ")", ":", "\n", "            ", "enc_conv_block", "=", "[", "]", "\n", "if", "i", "!=", "0", ":", "\n", "                ", "if", "strides", "[", "i", "]", "==", "1", "and", "downsamples", "[", "i", "-", "1", "]", ":", "\n", "                    ", "enc_conv_block", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", ")", "\n", "", "upsample", "=", "(", "strides", "[", "i", "]", "!=", "1", "or", "downsamples", "[", "i", "-", "1", "]", ")", "\n", "self", ".", "decoder", ".", "append", "(", "\n", "UpConvBlock", "(", "\n", "conv_block", "=", "BasicConvBlock", ",", "\n", "in_channels", "=", "base_channels", "*", "2", "**", "i", ",", "\n", "skip_channels", "=", "base_channels", "*", "2", "**", "(", "i", "-", "1", ")", ",", "\n", "out_channels", "=", "base_channels", "*", "2", "**", "(", "i", "-", "1", ")", ",", "\n", "num_convs", "=", "dec_num_convs", "[", "i", "-", "1", "]", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "dec_dilations", "[", "i", "-", "1", "]", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "upsample_cfg", "=", "upsample_cfg", "if", "upsample", "else", "None", ",", "\n", "dcn", "=", "None", ",", "\n", "plugins", "=", "None", ")", ")", "\n", "\n", "", "enc_conv_block", ".", "append", "(", "\n", "BasicConvBlock", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "base_channels", "*", "2", "**", "i", ",", "\n", "num_convs", "=", "enc_num_convs", "[", "i", "]", ",", "\n", "stride", "=", "strides", "[", "i", "]", ",", "\n", "dilation", "=", "enc_dilations", "[", "i", "]", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "dcn", "=", "None", ",", "\n", "plugins", "=", "None", ")", ")", "\n", "self", ".", "encoder", ".", "append", "(", "(", "nn", ".", "Sequential", "(", "*", "enc_conv_block", ")", ")", ")", "\n", "in_channels", "=", "base_channels", "*", "2", "**", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.unet.UNet.forward": [[375, 387], ["unet.UNet._check_input_devisible", "reversed", "enc", "enc_outs.append", "range", "dec_outs.append", "len"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.unet.UNet._check_input_devisible"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "_check_input_devisible", "(", "x", ")", "\n", "enc_outs", "=", "[", "]", "\n", "for", "enc", "in", "self", ".", "encoder", ":", "\n", "            ", "x", "=", "enc", "(", "x", ")", "\n", "enc_outs", ".", "append", "(", "x", ")", "\n", "", "dec_outs", "=", "[", "x", "]", "\n", "for", "i", "in", "reversed", "(", "range", "(", "len", "(", "self", ".", "decoder", ")", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "decoder", "[", "i", "]", "(", "enc_outs", "[", "i", "]", ",", "x", ")", "\n", "dec_outs", ".", "append", "(", "x", ")", "\n", "\n", "", "return", "dec_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.unet.UNet.train": [[388, 397], ["super().train", "unet.UNet.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Convert the model into training mode while keep normalization layer\n        freezed.\"\"\"", "\n", "super", "(", "UNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.unet.UNet._check_input_devisible": [[398, 407], ["range"], "methods", ["None"], ["", "", "", "", "def", "_check_input_devisible", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", ",", "w", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "whole_downsample_rate", "=", "1", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_stages", ")", ":", "\n", "            ", "if", "self", ".", "strides", "[", "i", "]", "==", "2", "or", "self", ".", "downsamples", "[", "i", "-", "1", "]", ":", "\n", "                ", "whole_downsample_rate", "*=", "2", "\n", "", "", "assert", "(", "h", "%", "whole_downsample_rate", "==", "0", ")", "and", "(", "w", "%", "whole_downsample_rate", "==", "0", ")", ",", "f'The input image size {(h, w)} should be devisible by the whole '", "f'downsample rate {whole_downsample_rate}, when num_stages is '"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.unet.UNet.init_weights": [[411, 429], ["isinstance", "mmseg.utils.get_root_logger", "mmcv.runner.load_checkpoint", "unet.UNet.modules", "TypeError", "isinstance", "mmcv.cnn.kaiming_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.logger.get_root_logger"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize the weights in backbone.\n\n        Args:\n            pretrained (str, optional): Path to pre-trained weights.\n                Defaults to None.\n        \"\"\"", "\n", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.mobilenet_v3.MobileNetV3.__init__": [[70, 103], ["dict", "torch.Module.__init__", "mmcv.is_tuple_of", "mobilenet_v3.MobileNetV3._make_layer", "isinstance", "range", "ValueError", "range", "ValueError", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.fast_scnn.GlobalFeatureExtractor._make_layer"], ["def", "__init__", "(", "self", ",", "\n", "arch", "=", "'small'", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "out_indices", "=", "(", "0", ",", "1", ",", "12", ")", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "reduction_factor", "=", "1", ",", "\n", "norm_eval", "=", "False", ",", "\n", "with_cp", "=", "False", ")", ":", "\n", "        ", "super", "(", "MobileNetV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "arch", "in", "self", ".", "arch_settings", "\n", "assert", "isinstance", "(", "reduction_factor", ",", "int", ")", "and", "reduction_factor", ">", "0", "\n", "assert", "mmcv", ".", "is_tuple_of", "(", "out_indices", ",", "int", ")", "\n", "for", "index", "in", "out_indices", ":", "\n", "            ", "if", "index", "not", "in", "range", "(", "0", ",", "len", "(", "self", ".", "arch_settings", "[", "arch", "]", ")", "+", "2", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'the item in out_indices must in '", "\n", "f'range(0, {len(self.arch_settings[arch])+2}). '", "\n", "f'But received {index}'", ")", "\n", "\n", "", "", "if", "frozen_stages", "not", "in", "range", "(", "-", "1", ",", "len", "(", "self", ".", "arch_settings", "[", "arch", "]", ")", "+", "2", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'frozen_stages must be in range(-1, '", "\n", "f'{len(self.arch_settings[arch])+2}). '", "\n", "f'But received {frozen_stages}'", ")", "\n", "", "self", ".", "arch", "=", "arch", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "reduction_factor", "=", "reduction_factor", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "layers", "=", "self", ".", "_make_layer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.mobilenet_v3.MobileNetV3._make_layer": [[104, 219], ["mmcv.cnn.ConvModule", "mobilenet_v3.MobileNetV3.add_module", "layers.append", "enumerate", "mmcv.cnn.ConvModule", "mobilenet_v3.MobileNetV3.add_module", "layers.append", "utils.InvertedResidualV3", "mobilenet_v3.MobileNetV3.add_module", "layers.append", "range", "range", "dict", "dict", "dict", "dict", "len", "len", "getattr", "isinstance", "len", "getattr", "isinstance", "dict", "isinstance", "isinstance", "dict", "dict"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "\n", "# build the first layer (layer0)", "\n", "in_channels", "=", "16", "\n", "layer", "=", "ConvModule", "(", "\n", "in_channels", "=", "3", ",", "\n", "out_channels", "=", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv2dAdaptivePadding'", ")", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'HSwish'", ")", ")", "\n", "self", ".", "add_module", "(", "'layer0'", ",", "layer", ")", "\n", "layers", ".", "append", "(", "'layer0'", ")", "\n", "\n", "layer_setting", "=", "self", ".", "arch_settings", "[", "self", ".", "arch", "]", "\n", "for", "i", ",", "params", "in", "enumerate", "(", "layer_setting", ")", ":", "\n", "            ", "(", "kernel_size", ",", "mid_channels", ",", "out_channels", ",", "with_se", ",", "act", ",", "\n", "stride", ")", "=", "params", "\n", "\n", "if", "self", ".", "arch", "==", "'large'", "and", "i", ">=", "12", "or", "self", ".", "arch", "==", "'small'", "and", "i", ">=", "8", ":", "\n", "                ", "mid_channels", "=", "mid_channels", "//", "self", ".", "reduction_factor", "\n", "out_channels", "=", "out_channels", "//", "self", ".", "reduction_factor", "\n", "\n", "", "if", "with_se", ":", "\n", "                ", "se_cfg", "=", "dict", "(", "\n", "channels", "=", "mid_channels", ",", "\n", "ratio", "=", "4", ",", "\n", "act_cfg", "=", "(", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "dict", "(", "type", "=", "'HSigmoid'", ",", "bias", "=", "3.0", ",", "divisor", "=", "6.0", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "se_cfg", "=", "None", "\n", "\n", "", "layer", "=", "InvertedResidual", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "mid_channels", "=", "mid_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "se_cfg", "=", "se_cfg", ",", "\n", "with_expand_conv", "=", "(", "in_channels", "!=", "mid_channels", ")", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "act", ")", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ")", "\n", "in_channels", "=", "out_channels", "\n", "layer_name", "=", "'layer{}'", ".", "format", "(", "i", "+", "1", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "layer", ")", "\n", "layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "# build the last layer", "\n", "# block5 layer12 os=32 for small model", "\n", "# block6 layer16 os=32 for large model", "\n", "", "layer", "=", "ConvModule", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "576", "if", "self", ".", "arch", "==", "'small'", "else", "960", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "4", ",", "\n", "padding", "=", "0", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'HSwish'", ")", ")", "\n", "layer_name", "=", "'layer{}'", ".", "format", "(", "len", "(", "layer_setting", ")", "+", "1", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "layer", ")", "\n", "layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "# next, convert backbone MobileNetV3 to a semantic segmentation version", "\n", "if", "self", ".", "arch", "==", "'small'", ":", "\n", "            ", "self", ".", "layer4", ".", "depthwise_conv", ".", "conv", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "self", ".", "layer9", ".", "depthwise_conv", ".", "conv", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "4", ",", "len", "(", "layers", ")", ")", ":", "\n", "                ", "layer", "=", "getattr", "(", "self", ",", "layers", "[", "i", "]", ")", "\n", "if", "isinstance", "(", "layer", ",", "InvertedResidual", ")", ":", "\n", "                    ", "modified_module", "=", "layer", ".", "depthwise_conv", ".", "conv", "\n", "", "else", ":", "\n", "                    ", "modified_module", "=", "layer", ".", "conv", "\n", "\n", "", "if", "i", "<", "9", ":", "\n", "                    ", "modified_module", ".", "dilation", "=", "(", "2", ",", "2", ")", "\n", "pad", "=", "2", "\n", "", "else", ":", "\n", "                    ", "modified_module", ".", "dilation", "=", "(", "4", ",", "4", ")", "\n", "pad", "=", "4", "\n", "\n", "", "if", "not", "isinstance", "(", "modified_module", ",", "Conv2dAdaptivePadding", ")", ":", "\n", "# Adjust padding", "\n", "                    ", "pad", "*=", "(", "modified_module", ".", "kernel_size", "[", "0", "]", "-", "1", ")", "//", "2", "\n", "modified_module", ".", "padding", "=", "(", "pad", ",", "pad", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "layer7", ".", "depthwise_conv", ".", "conv", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "self", ".", "layer13", ".", "depthwise_conv", ".", "conv", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "7", ",", "len", "(", "layers", ")", ")", ":", "\n", "                ", "layer", "=", "getattr", "(", "self", ",", "layers", "[", "i", "]", ")", "\n", "if", "isinstance", "(", "layer", ",", "InvertedResidual", ")", ":", "\n", "                    ", "modified_module", "=", "layer", ".", "depthwise_conv", ".", "conv", "\n", "", "else", ":", "\n", "                    ", "modified_module", "=", "layer", ".", "conv", "\n", "\n", "", "if", "i", "<", "13", ":", "\n", "                    ", "modified_module", ".", "dilation", "=", "(", "2", ",", "2", ")", "\n", "pad", "=", "2", "\n", "", "else", ":", "\n", "                    ", "modified_module", ".", "dilation", "=", "(", "4", ",", "4", ")", "\n", "pad", "=", "4", "\n", "\n", "", "if", "not", "isinstance", "(", "modified_module", ",", "Conv2dAdaptivePadding", ")", ":", "\n", "# Adjust padding", "\n", "                    ", "pad", "*=", "(", "modified_module", ".", "kernel_size", "[", "0", "]", "-", "1", ")", "//", "2", "\n", "modified_module", ".", "padding", "=", "(", "pad", ",", "pad", ")", "\n", "\n", "", "", "", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.mobilenet_v3.MobileNetV3.init_weights": [[220, 232], ["isinstance", "logging.getLogger", "mmcv.runner.load_checkpoint", "mobilenet_v3.MobileNetV3.modules", "TypeError", "isinstance", "mmcv.cnn.kaiming_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.mobilenet_v3.MobileNetV3.forward": [[233, 241], ["enumerate", "getattr", "getattr.", "outs.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "for", "i", ",", "layer_name", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "layer", "=", "getattr", "(", "self", ",", "layer_name", ")", "\n", "x", "=", "layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.mobilenet_v3.MobileNetV3._freeze_stages": [[242, 248], ["range", "getattr", "getattr.eval", "getattr.parameters"], "methods", ["None"], ["", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "            ", "layer", "=", "getattr", "(", "self", ",", "f'layer{i}'", ")", "\n", "layer", ".", "eval", "(", ")", "\n", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.mobilenet_v3.MobileNetV3.train": [[249, 256], ["super().train", "mobilenet_v3.MobileNetV3._freeze_stages", "mobilenet_v3.MobileNetV3.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet._freeze_stages"], ["", "", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "MobileNetV3", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnest.RSoftmax.__init__": [[23, 27], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "radix", ",", "groups", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnest.RSoftmax.forward": [[28, 37], ["torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.view().transpose", "torch.sigmoid.view().transpose", "torch.sigmoid.view().transpose", "torch.sigmoid.view().transpose", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sigmoid.reshape", "torch.sigmoid.reshape", "torch.sigmoid.reshape", "torch.sigmoid.reshape", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "batch", ",", "self", ".", "groups", ",", "self", ".", "radix", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", ".", "reshape", "(", "batch", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnest.SplitAttentionConv2d.__init__": [[58, 106], ["dict", "torch.Module.__init__", "max", "mmcv.cnn.build_conv_layer", "mmcv.cnn.build_norm_layer", "resnest.SplitAttentionConv2d.add_module", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mmcv.cnn.build_conv_layer", "mmcv.cnn.build_norm_layer", "resnest.SplitAttentionConv2d.add_module", "mmcv.cnn.build_conv_layer", "resnest.RSoftmax", "resnest.SplitAttentionConv2d.dcn.pop"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "radix", "=", "2", ",", "\n", "reduction_factor", "=", "4", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "dcn", "=", "None", ")", ":", "\n", "        ", "super", "(", "SplitAttentionConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inter_channels", "=", "max", "(", "in_channels", "*", "radix", "//", "reduction_factor", ",", "32", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "with_dcn", "=", "dcn", "is", "not", "None", "\n", "self", ".", "dcn", "=", "dcn", "\n", "fallback_on_stride", "=", "False", "\n", "if", "self", ".", "with_dcn", ":", "\n", "            ", "fallback_on_stride", "=", "self", ".", "dcn", ".", "pop", "(", "'fallback_on_stride'", ",", "False", ")", "\n", "", "if", "self", ".", "with_dcn", "and", "not", "fallback_on_stride", ":", "\n", "            ", "assert", "conv_cfg", "is", "None", ",", "'conv_cfg must be None for DCN'", "\n", "conv_cfg", "=", "dcn", "\n", "", "self", ".", "conv", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "channels", "*", "radix", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "norm0_name", ",", "norm0", "=", "build_norm_layer", "(", "\n", "norm_cfg", ",", "channels", "*", "radix", ",", "postfix", "=", "0", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm0_name", ",", "norm0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc1", "=", "build_conv_layer", "(", "\n", "None", ",", "channels", ",", "inter_channels", ",", "1", ",", "groups", "=", "self", ".", "groups", ")", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "\n", "norm_cfg", ",", "inter_channels", ",", "postfix", "=", "1", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "fc2", "=", "build_conv_layer", "(", "\n", "None", ",", "inter_channels", ",", "channels", "*", "radix", ",", "1", ",", "groups", "=", "self", ".", "groups", ")", "\n", "self", ".", "rsoftmax", "=", "RSoftmax", "(", "radix", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnest.SplitAttentionConv2d.norm0": [[107, 111], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm0", "(", "self", ")", ":", "\n", "        ", "\"\"\"nn.Module: the normalization layer named \"norm0\" \"\"\"", "\n", "return", "getattr", "(", "self", ",", "self", ".", "norm0_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnest.SplitAttentionConv2d.norm1": [[112, 116], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "\"\"\"nn.Module: the normalization layer named \"norm1\" \"\"\"", "\n", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnest.SplitAttentionConv2d.forward": [[117, 144], ["resnest.SplitAttentionConv2d.conv", "resnest.SplitAttentionConv2d.norm0", "resnest.SplitAttentionConv2d.relu", "resnest.SplitAttentionConv2d.size", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "resnest.SplitAttentionConv2d.fc1", "resnest.SplitAttentionConv2d.norm1", "resnest.SplitAttentionConv2d.relu", "resnest.SplitAttentionConv2d.fc2", "resnest.SplitAttentionConv2d.rsoftmax().view", "torch.sum.contiguous", "torch.sum.contiguous", "torch.sum.contiguous", "torch.sum.contiguous", "resnest.SplitAttentionConv2d.view", "resnest.SplitAttentionConv2d.view.sum", "resnest.SplitAttentionConv2d.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "resnest.SplitAttentionConv2d.rsoftmax"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnest.SplitAttentionConv2d.norm0", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.norm1"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "norm0", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "batch", ",", "rchannel", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "splits", "=", "x", ".", "view", "(", "batch", ",", "self", ".", "radix", ",", "-", "1", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "gap", "=", "splits", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "gap", "=", "x", "\n", "", "gap", "=", "F", ".", "adaptive_avg_pool2d", "(", "gap", ",", "1", ")", "\n", "gap", "=", "self", ".", "fc1", "(", "gap", ")", "\n", "\n", "gap", "=", "self", ".", "norm1", "(", "gap", ")", "\n", "gap", "=", "self", ".", "relu", "(", "gap", ")", "\n", "\n", "atten", "=", "self", ".", "fc2", "(", "gap", ")", "\n", "atten", "=", "self", ".", "rsoftmax", "(", "atten", ")", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "attens", "=", "atten", ".", "view", "(", "batch", ",", "self", ".", "radix", ",", "-", "1", ",", "*", "atten", ".", "shape", "[", "2", ":", "]", ")", "\n", "out", "=", "torch", ".", "sum", "(", "attens", "*", "splits", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "atten", "*", "x", "\n", "", "return", "out", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnest.Bottleneck.__init__": [[165, 225], ["resnet.Bottleneck.__init__", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_conv_layer", "resnest.Bottleneck.add_module", "resnest.SplitAttentionConv2d", "delattr", "mmcv.cnn.build_conv_layer", "resnest.Bottleneck.add_module", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "math.floor"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "4", ",", "\n", "base_channels", "=", "64", ",", "\n", "radix", "=", "2", ",", "\n", "reduction_factor", "=", "4", ",", "\n", "avg_down_stride", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Bottleneck block for ResNeSt.\"\"\"", "\n", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", "inplanes", ",", "planes", ",", "**", "kwargs", ")", "\n", "\n", "if", "groups", "==", "1", ":", "\n", "            ", "width", "=", "self", ".", "planes", "\n", "", "else", ":", "\n", "            ", "width", "=", "math", ".", "floor", "(", "self", ".", "planes", "*", "\n", "(", "base_width", "/", "base_channels", ")", ")", "*", "groups", "\n", "\n", "", "self", ".", "avg_down_stride", "=", "avg_down_stride", "and", "self", ".", "conv2_stride", ">", "1", "\n", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "width", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm3_name", ",", "norm3", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "self", ".", "planes", "*", "self", ".", "expansion", ",", "postfix", "=", "3", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "self", ".", "inplanes", ",", "\n", "width", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "self", ".", "conv1_stride", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "with_modulated_dcn", "=", "False", "\n", "self", ".", "conv2", "=", "SplitAttentionConv2d", "(", "\n", "width", ",", "\n", "width", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", "if", "self", ".", "avg_down_stride", "else", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "self", ".", "dilation", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "radix", "=", "radix", ",", "\n", "reduction_factor", "=", "reduction_factor", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "dcn", "=", "self", ".", "dcn", ")", "\n", "delattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n", "if", "self", ".", "avg_down_stride", ":", "\n", "            ", "self", ".", "avd_layer", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "self", ".", "conv2_stride", ",", "padding", "=", "1", ")", "\n", "\n", "", "self", ".", "conv3", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "width", ",", "\n", "self", ".", "planes", "*", "self", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm3_name", ",", "norm3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnest.Bottleneck.forward": [[226, 267], ["resnest.Bottleneck.relu", "resnest.Bottleneck.conv1", "resnest.Bottleneck.norm1", "resnest.Bottleneck.relu", "resnest.Bottleneck.conv2", "resnest.Bottleneck.conv3", "resnest.Bottleneck.norm3", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "resnest.Bottleneck.forward._inner_forward"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.norm3"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "with_plugins", ":", "\n", "                ", "out", "=", "self", ".", "forward_plugin", "(", "out", ",", "self", ".", "after_conv1_plugin_names", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "avg_down_stride", ":", "\n", "                ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "with_plugins", ":", "\n", "                ", "out", "=", "self", ".", "forward_plugin", "(", "out", ",", "self", ".", "after_conv2_plugin_names", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "norm3", "(", "out", ")", "\n", "\n", "if", "self", ".", "with_plugins", ":", "\n", "                ", "out", "=", "self", ".", "forward_plugin", "(", "out", ",", "self", ".", "after_conv3_plugin_names", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "\n", "return", "out", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnest.ResNeSt.__init__": [[291, 304], ["resnet.ResNetV1d.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "4", ",", "\n", "radix", "=", "2", ",", "\n", "reduction_factor", "=", "4", ",", "\n", "avg_down_stride", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "base_width", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "reduction_factor", "=", "reduction_factor", "\n", "self", ".", "avg_down_stride", "=", "avg_down_stride", "\n", "super", "(", "ResNeSt", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnest.ResNeSt.make_res_layer": [[305, 315], ["utils.ResLayer"], "methods", ["None"], ["", "def", "make_res_layer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Pack all blocks in a stage into a ``ResLayer``.\"\"\"", "\n", "return", "ResLayer", "(", "\n", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "base_channels", "=", "self", ".", "base_channels", ",", "\n", "radix", "=", "self", ".", "radix", ",", "\n", "reduction_factor", "=", "self", ".", "reduction_factor", ",", "\n", "avg_down_stride", "=", "self", ".", "avg_down_stride", ",", "\n", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRModule.__init__": [[20, 45], ["dict", "torch.Module.__init__", "hrnet.HRModule._check_branches", "hrnet.HRModule._make_branches", "hrnet.HRModule._make_fuse_layers", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRModule._check_branches", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRModule._make_branches", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRModule._make_fuse_layers"], ["def", "__init__", "(", "self", ",", "\n", "num_branches", ",", "\n", "blocks", ",", "\n", "num_blocks", ",", "\n", "in_channels", ",", "\n", "num_channels", ",", "\n", "multiscale_output", "=", "True", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ")", ":", "\n", "        ", "super", "(", "HRModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "num_branches", ",", "num_blocks", ",", "in_channels", ",", "\n", "num_channels", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multiscale_output", "=", "multiscale_output", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRModule._check_branches": [[46, 63], ["len", "ValueError", "len", "ValueError", "len", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "num_blocks", ",", "in_channels", ",", "\n", "num_channels", ")", ":", "\n", "        ", "\"\"\"Check branches configuration.\"\"\"", "\n", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "f'NUM_BRANCHES({num_branches}) <> NUM_BLOCKS('", "f'{len(num_blocks)})'", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "f'NUM_BRANCHES({num_branches}) <> NUM_CHANNELS('", "f'{len(num_channels)})'", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "in_channels", ")", ":", "\n", "            ", "error_msg", "=", "f'NUM_BRANCHES({num_branches}) <> NUM_INCHANNELS('", "f'{len(in_channels)})'", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRModule._make_one_branch": [[64, 108], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "mmcv.cnn.build_conv_layer", "block", "mmcv.cnn.build_norm_layer"], "methods", ["None"], ["", "", "def", "_make_one_branch", "(", "self", ",", "\n", "branch_index", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "\"\"\"Build one branch.\"\"\"", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "in_channels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "self", ".", "in_channels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "num_channels", "[", "branch_index", "]", "*", "\n", "block", ".", "expansion", ")", "[", "1", "]", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_channels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "\n", "stride", ",", "\n", "downsample", "=", "downsample", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ")", ")", "\n", "self", ".", "in_channels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_channels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRModule._make_branches": [[109, 118], ["range", "torch.ModuleList", "branches.append", "hrnet.HRModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "\"\"\"Build multiple branch.\"\"\"", "\n", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRModule._make_fuse_layers": [[119, 184], ["range", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "mmcv.cnn.build_conv_layer", "mmseg.ops.Upsample", "torch.Sequential", "mmcv.cnn.build_norm_layer", "conv_downsamples.append", "conv_downsamples.append", "torch.Sequential", "torch.Sequential", "mmcv.cnn.build_conv_layer", "mmcv.cnn.build_conv_layer", "torch.ReLU", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "\"\"\"Build fuse layer.\"\"\"", "\n", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "in_channels", "=", "self", ".", "in_channels", "\n", "fuse_layers", "=", "[", "]", "\n", "num_out_branches", "=", "num_branches", "if", "self", ".", "multiscale_output", "else", "1", "\n", "for", "i", "in", "range", "(", "num_out_branches", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", "[", "j", "]", ",", "\n", "in_channels", "[", "i", "]", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "in_channels", "[", "i", "]", ")", "[", "1", "]", ",", "\n", "# we set align_corners=False for HRNet", "\n", "Upsample", "(", "\n", "scale_factor", "=", "2", "**", "(", "j", "-", "i", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv_downsamples", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "conv_downsamples", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", "[", "j", "]", ",", "\n", "in_channels", "[", "i", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "\n", "in_channels", "[", "i", "]", ")", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                            ", "conv_downsamples", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", "[", "j", "]", ",", "\n", "in_channels", "[", "j", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "\n", "in_channels", "[", "j", "]", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv_downsamples", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRModule.forward": [[185, 209], ["range", "range", "len", "range", "x_fuse.append", "hrnet.HRModule.relu", "mmseg.ops.resize"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "0", "\n", "for", "j", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "+=", "x", "[", "j", "]", "\n", "", "elif", "j", ">", "i", ":", "\n", "                    ", "y", "=", "y", "+", "resize", "(", "\n", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", ",", "\n", "size", "=", "x", "[", "i", "]", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "y", "+=", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRNet.__init__": [[273, 360], ["dict", "torch.Module.__init__", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_conv_layer", "hrnet.HRNet.add_module", "mmcv.cnn.build_conv_layer", "hrnet.HRNet.add_module", "torch.ReLU", "hrnet.HRNet._make_layer", "hrnet.HRNet._make_transition_layer", "hrnet.HRNet._make_stage", "hrnet.HRNet._make_transition_layer", "hrnet.HRNet._make_stage", "hrnet.HRNet._make_transition_layer", "hrnet.HRNet._make_stage"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.fast_scnn.GlobalFeatureExtractor._make_layer", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRNet._make_transition_layer", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRNet._make_stage", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRNet._make_transition_layer", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRNet._make_stage", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRNet._make_transition_layer", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRNet._make_stage"], ["def", "__init__", "(", "self", ",", "\n", "extra", ",", "\n", "in_channels", "=", "3", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "norm_eval", "=", "False", ",", "\n", "with_cp", "=", "False", ",", "\n", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "HRNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "extra", "=", "extra", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "zero_init_residual", "=", "zero_init_residual", "\n", "\n", "# stem net", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "64", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "64", ",", "postfix", "=", "2", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "64", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "64", ",", "\n", "64", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# stage 1", "\n", "self", ".", "stage1_cfg", "=", "self", ".", "extra", "[", "'stage1'", "]", "\n", "num_channels", "=", "self", ".", "stage1_cfg", "[", "'num_channels'", "]", "[", "0", "]", "\n", "block_type", "=", "self", ".", "stage1_cfg", "[", "'block'", "]", "\n", "num_blocks", "=", "self", ".", "stage1_cfg", "[", "'num_blocks'", "]", "[", "0", "]", "\n", "\n", "block", "=", "self", ".", "blocks_dict", "[", "block_type", "]", "\n", "stage1_out_channels", "=", "num_channels", "*", "block", ".", "expansion", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_channels", ",", "num_blocks", ")", "\n", "\n", "# stage 2", "\n", "self", ".", "stage2_cfg", "=", "self", ".", "extra", "[", "'stage2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'num_channels'", "]", "\n", "block_type", "=", "self", ".", "stage2_cfg", "[", "'block'", "]", "\n", "\n", "block", "=", "self", ".", "blocks_dict", "[", "block_type", "]", "\n", "num_channels", "=", "[", "channel", "*", "block", ".", "expansion", "for", "channel", "in", "num_channels", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "[", "stage1_out_channels", "]", ",", "\n", "num_channels", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "# stage 3", "\n", "self", ".", "stage3_cfg", "=", "self", ".", "extra", "[", "'stage3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'num_channels'", "]", "\n", "block_type", "=", "self", ".", "stage3_cfg", "[", "'block'", "]", "\n", "\n", "block", "=", "self", ".", "blocks_dict", "[", "block_type", "]", "\n", "num_channels", "=", "[", "channel", "*", "block", ".", "expansion", "for", "channel", "in", "num_channels", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "pre_stage_channels", ",", "\n", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "# stage 4", "\n", "self", ".", "stage4_cfg", "=", "self", ".", "extra", "[", "'stage4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'num_channels'", "]", "\n", "block_type", "=", "self", ".", "stage4_cfg", "[", "'block'", "]", "\n", "\n", "block", "=", "self", ".", "blocks_dict", "[", "block_type", "]", "\n", "num_channels", "=", "[", "channel", "*", "block", ".", "expansion", "for", "channel", "in", "num_channels", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "pre_stage_channels", ",", "\n", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRNet.norm1": [[361, 365], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "\"\"\"nn.Module: the normalization layer named \"norm1\" \"\"\"", "\n", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRNet.norm2": [[366, 370], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "\"\"\"nn.Module: the normalization layer named \"norm2\" \"\"\"", "\n", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRNet._make_transition_layer": [[371, 417], ["len", "len", "range", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv_downsamples.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mmcv.cnn.build_conv_layer", "torch.ReLU", "mmcv.cnn.build_conv_layer", "torch.ReLU", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer"], "methods", ["None"], ["", "def", "_make_transition_layer", "(", "self", ",", "num_channels_pre_layer", ",", "\n", "num_channels_cur_layer", ")", ":", "\n", "        ", "\"\"\"Make transition layer.\"\"\"", "\n", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv_downsamples", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "in_channels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "out_channels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "in_channels", "\n", "conv_downsamples", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "out_channels", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv_downsamples", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRNet._make_layer": [[418, 453], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "mmcv.cnn.build_conv_layer", "block", "mmcv.cnn.build_norm_layer"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "\"\"\"Make each layer.\"\"\"", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "planes", "*", "block", ".", "expansion", ")", "[", "1", "]", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "downsample", "=", "downsample", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRNet._make_stage": [[454, 483], ["range", "hr_modules.append", "torch.Sequential", "hrnet.HRModule"], "methods", ["None"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "in_channels", ",", "multiscale_output", "=", "True", ")", ":", "\n", "        ", "\"\"\"Make each stage.\"\"\"", "\n", "num_modules", "=", "layer_config", "[", "'num_modules'", "]", "\n", "num_branches", "=", "layer_config", "[", "'num_branches'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'num_blocks'", "]", "\n", "num_channels", "=", "layer_config", "[", "'num_channels'", "]", "\n", "block", "=", "self", ".", "blocks_dict", "[", "layer_config", "[", "'block'", "]", "]", "\n", "\n", "hr_modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used for the last module", "\n", "            ", "if", "not", "multiscale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multiscale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multiscale_output", "=", "True", "\n", "\n", "", "hr_modules", ".", "append", "(", "\n", "HRModule", "(", "\n", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "in_channels", ",", "\n", "num_channels", ",", "\n", "reset_multiscale_output", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "hr_modules", ")", ",", "in_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRNet.init_weights": [[484, 509], ["isinstance", "mmseg.utils.get_root_logger", "mmcv.runner.load_checkpoint", "hrnet.HRNet.modules", "TypeError", "isinstance", "hrnet.HRNet.modules", "mmcv.cnn.kaiming_init", "isinstance", "isinstance", "mmcv.cnn.constant_init", "mmcv.cnn.constant_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.logger.get_root_logger"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize the weights in backbone.\n\n        Args:\n            pretrained (str, optional): Path to pre-trained weights.\n                Defaults to None.\n        \"\"\"", "\n", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "\n", "", "", "if", "self", ".", "zero_init_residual", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "norm3", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "norm2", ",", "0", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRNet.forward": [[510, 546], ["hrnet.HRNet.conv1", "hrnet.HRNet.norm1", "hrnet.HRNet.relu", "hrnet.HRNet.conv2", "hrnet.HRNet.norm2", "hrnet.HRNet.relu", "hrnet.HRNet.layer1", "range", "hrnet.HRNet.stage2", "range", "hrnet.HRNet.stage3", "range", "hrnet.HRNet.stage4", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.norm2"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'num_branches'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'num_branches'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'num_branches'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "return", "y_list", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.hrnet.HRNet.train": [[547, 556], ["super().train", "hrnet.HRNet.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Convert the model into training mode whill keeping the normalization\n        layer freezed.\"\"\"", "\n", "super", "(", "HRNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.mobilenet_v2.MobileNetV2.__init__": [[45, 106], ["dict", "dict", "torch.Module.__init__", "utils.make_divisible", "mmcv.cnn.ConvModule", "enumerate", "len", "len", "len", "range", "ValueError", "utils.make_divisible", "mobilenet_v2.MobileNetV2.make_layer", "mobilenet_v2.MobileNetV2.add_module", "mobilenet_v2.MobileNetV2.layers.append", "range", "ValueError"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.make_divisible.make_divisible", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.make_divisible.make_divisible", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.mobilenet_v2.MobileNetV2.make_layer"], ["def", "__init__", "(", "self", ",", "\n", "widen_factor", "=", "1.", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ",", "1", ",", "2", ",", "1", ")", ",", "\n", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "out_indices", "=", "(", "1", ",", "2", ",", "4", ",", "6", ")", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU6'", ")", ",", "\n", "norm_eval", "=", "False", ",", "\n", "with_cp", "=", "False", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "widen_factor", "=", "widen_factor", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "dilations", "=", "dilations", "\n", "assert", "len", "(", "strides", ")", "==", "len", "(", "dilations", ")", "==", "len", "(", "self", ".", "arch_settings", ")", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "for", "index", "in", "out_indices", ":", "\n", "            ", "if", "index", "not", "in", "range", "(", "0", ",", "7", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'the item in out_indices must in '", "\n", "f'range(0, 8). But received {index}'", ")", "\n", "\n", "", "", "if", "frozen_stages", "not", "in", "range", "(", "-", "1", ",", "7", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'frozen_stages must be in range(-1, 7). '", "\n", "f'But received {frozen_stages}'", ")", "\n", "", "self", ".", "out_indices", "=", "out_indices", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "\n", "self", ".", "in_channels", "=", "make_divisible", "(", "32", "*", "widen_factor", ",", "8", ")", "\n", "\n", "self", ".", "conv1", "=", "ConvModule", "(", "\n", "in_channels", "=", "3", ",", "\n", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n", "self", ".", "layers", "=", "[", "]", "\n", "\n", "for", "i", ",", "layer_cfg", "in", "enumerate", "(", "self", ".", "arch_settings", ")", ":", "\n", "            ", "expand_ratio", ",", "channel", ",", "num_blocks", "=", "layer_cfg", "\n", "stride", "=", "self", ".", "strides", "[", "i", "]", "\n", "dilation", "=", "self", ".", "dilations", "[", "i", "]", "\n", "out_channels", "=", "make_divisible", "(", "channel", "*", "widen_factor", ",", "8", ")", "\n", "inverted_res_layer", "=", "self", ".", "make_layer", "(", "\n", "out_channels", "=", "out_channels", ",", "\n", "num_blocks", "=", "num_blocks", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "expand_ratio", "=", "expand_ratio", ")", "\n", "layer_name", "=", "f'layer{i + 1}'", "\n", "self", ".", "add_module", "(", "layer_name", ",", "inverted_res_layer", ")", "\n", "self", ".", "layers", ".", "append", "(", "layer_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.mobilenet_v2.MobileNetV2.make_layer": [[107, 135], ["range", "torch.Sequential", "layers.append", "utils.InvertedResidual"], "methods", ["None"], ["", "", "def", "make_layer", "(", "self", ",", "out_channels", ",", "num_blocks", ",", "stride", ",", "dilation", ",", "\n", "expand_ratio", ")", ":", "\n", "        ", "\"\"\"Stack InvertedResidual blocks to build a layer for MobileNetV2.\n\n        Args:\n            out_channels (int): out_channels of block.\n            num_blocks (int): Number of blocks.\n            stride (int): Stride of the first block.\n            dilation (int): Dilation of the first block.\n            expand_ratio (int): Expand the number of channels of the\n                hidden layer in InvertedResidual by this ratio.\n        \"\"\"", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "InvertedResidual", "(", "\n", "self", ".", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "if", "i", "==", "0", "else", "1", ",", "\n", "expand_ratio", "=", "expand_ratio", ",", "\n", "dilation", "=", "dilation", "if", "i", "==", "0", "else", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ")", ")", "\n", "self", ".", "in_channels", "=", "out_channels", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.mobilenet_v2.MobileNetV2.init_weights": [[136, 148], ["isinstance", "logging.getLogger", "mmcv.runner.load_checkpoint", "mobilenet_v2.MobileNetV2.modules", "TypeError", "isinstance", "mmcv.cnn.kaiming_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.mobilenet_v2.MobileNetV2.forward": [[149, 163], ["mobilenet_v2.MobileNetV2.conv1", "enumerate", "getattr", "getattr.", "len", "tuple", "outs.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "layer_name", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "layer", "=", "getattr", "(", "self", ",", "layer_name", ")", "\n", "x", "=", "layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "\n", "", "", "if", "len", "(", "outs", ")", "==", "1", ":", "\n", "            ", "return", "outs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.mobilenet_v2.MobileNetV2._freeze_stages": [[164, 173], ["range", "mobilenet_v2.MobileNetV2.conv1.parameters", "getattr", "getattr.eval", "getattr.parameters"], "methods", ["None"], ["", "", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "for", "param", "in", "self", ".", "conv1", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "            ", "layer", "=", "getattr", "(", "self", ",", "f'layer{i}'", ")", "\n", "layer", ".", "eval", "(", ")", "\n", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.mobilenet_v2.MobileNetV2.train": [[174, 181], ["super().train", "mobilenet_v2.MobileNetV2._freeze_stages", "mobilenet_v2.MobileNetV2.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet._freeze_stages"], ["", "", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.Mlp.__init__": [[65, 73], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.Mlp.forward": [[74, 81], ["vit.Mlp.fc1", "vit.Mlp.act", "vit.Mlp.drop", "vit.Mlp.fc2", "vit.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.Attention.__init__": [[84, 95], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.Attention.forward": [[96, 108], ["vit.Attention.qkv().reshape().permute", "vit.Attention.softmax", "vit.Attention.attn_drop", "vit.Attention.proj", "vit.Attention.proj_drop", "vit.Attention.qkv().reshape", "k.transpose", "vit.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "q", ",", "k", ",", "v", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.Block.__init__": [[112, 123], ["torch.Module.__init__", "norm_layer", "vit.Attention", "norm_layer", "int", "vit.Mlp", "layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.Block.forward": [[124, 128], ["vit.Block.drop_path", "vit.Block.drop_path", "vit.Block.attn", "vit.Block.mlp", "vit.Block.norm1", "vit.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.drop.drop_path", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.drop.drop_path", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.norm2"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.PatchEmbed.__init__": [[133, 143], ["torch.Module.__init__", "layers.to_2tuple", "layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "num_patches", "=", "(", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", ")", "*", "(", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.PatchEmbed.forward": [[144, 153], ["vit.PatchEmbed.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "# FIXME look at relaxing size constraints", "\n", "assert", "H", "==", "self", ".", "img_size", "[", "0", "]", "and", "W", "==", "self", ".", "img_size", "[", "1", "]", ",", "f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\"", "\n", "\n", "# x = F.interpolate(x, size=2*x.shape[-1], mode='bilinear', align_corners=True)", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.HybridEmbed.__init__": [[159, 182], ["torch.Module.__init__", "isinstance", "layers.to_2tuple", "torch.Linear", "torch.Linear", "torch.Linear", "layers.to_2tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "backbone.train", "vit.HybridEmbed.backbone.feature_info.channels", "backbone.eval", "vit.HybridEmbed.backbone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train"], ["def", "__init__", "(", "self", ",", "backbone", ",", "img_size", "=", "224", ",", "feature_size", "=", "None", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "backbone", ",", "nn", ".", "Module", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "backbone", "=", "backbone", "\n", "if", "feature_size", "is", "None", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# FIXME this is hacky, but most reliable way of determining the exact dim of the output feature", "\n", "# map for all networks, the feature metadata has reliable channel and stride info, but using", "\n", "# stride to calc feature dim requires info about padding of each stage that isn't captured.", "\n", "                ", "training", "=", "backbone", ".", "training", "\n", "if", "training", ":", "\n", "                    ", "backbone", ".", "eval", "(", ")", "\n", "", "o", "=", "self", ".", "backbone", "(", "torch", ".", "zeros", "(", "1", ",", "in_chans", ",", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", ")", ")", "[", "-", "1", "]", "\n", "feature_size", "=", "o", ".", "shape", "[", "-", "2", ":", "]", "\n", "feature_dim", "=", "o", ".", "shape", "[", "1", "]", "\n", "backbone", ".", "train", "(", "training", ")", "\n", "", "", "else", ":", "\n", "            ", "feature_size", "=", "to_2tuple", "(", "feature_size", ")", "\n", "feature_dim", "=", "self", ".", "backbone", ".", "feature_info", ".", "channels", "(", ")", "[", "-", "1", "]", "\n", "", "self", ".", "num_patches", "=", "feature_size", "[", "0", "]", "*", "feature_size", "[", "1", "]", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "feature_dim", ",", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.HybridEmbed.forward": [[183, 188], ["vit.HybridEmbed.flatten().transpose", "vit.HybridEmbed.proj", "vit.HybridEmbed.backbone", "vit.HybridEmbed.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", "[", "-", "1", "]", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.VisionTransformer.__init__": [[194, 249], ["functools.partial", "torch.Module.__init__", "tuple", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "layers.trunc_normal_", "layers.trunc_normal_", "range", "vit.HybridEmbed", "vit.PatchEmbed", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "vit.Block", "range"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.weight_init.trunc_normal_", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.weight_init.trunc_normal_"], ["def", "__init__", "(", "self", ",", "model_name", "=", "'vit_large_patch16_384'", ",", "img_size", "=", "384", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "1024", ",", "depth", "=", "24", ",", "\n", "num_heads", "=", "16", ",", "num_classes", "=", "19", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.1", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "norm_cfg", "=", "None", ",", "\n", "pos_embed_interp", "=", "False", ",", "random_init", "=", "False", ",", "align_corners", "=", "False", ",", "pretrain_weights", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VisionTransformer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "self", ".", "qkv_bias", "=", "qkv_bias", "\n", "self", ".", "qk_scale", "=", "qk_scale", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "attn_drop_rate", "=", "attn_drop_rate", "\n", "self", ".", "drop_path_rate", "=", "drop_path_rate", "\n", "self", ".", "hybrid_backbone", "=", "hybrid_backbone", "\n", "self", ".", "norm_layer", "=", "norm_layer", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "pos_embed_interp", "=", "pos_embed_interp", "\n", "self", ".", "random_init", "=", "random_init", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "self", ".", "pretrain_weights", "=", "pretrain_weights", "\n", "\n", "self", ".", "num_stages", "=", "self", ".", "depth", "\n", "self", ".", "out_indices", "=", "tuple", "(", "range", "(", "self", ".", "num_stages", ")", ")", "\n", "\n", "if", "self", ".", "hybrid_backbone", "is", "not", "None", ":", "\n", "            ", "self", ".", "patch_embed", "=", "HybridEmbed", "(", "\n", "self", ".", "hybrid_backbone", ",", "img_size", "=", "self", ".", "img_size", ",", "in_chans", "=", "self", ".", "in_chans", ",", "embed_dim", "=", "self", ".", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "img_size", "=", "self", ".", "img_size", ",", "patch_size", "=", "self", ".", "patch_size", ",", "in_chans", "=", "self", ".", "in_chans", ",", "embed_dim", "=", "self", ".", "embed_dim", ")", "\n", "", "self", ".", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "self", ".", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "num_patches", "+", "1", ",", "self", ".", "embed_dim", ")", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "self", ".", "drop_path_rate", ",", "self", ".", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "self", ".", "embed_dim", ",", "num_heads", "=", "self", ".", "num_heads", ",", "mlp_ratio", "=", "self", ".", "mlp_ratio", ",", "qkv_bias", "=", "self", ".", "qkv_bias", ",", "qk_scale", "=", "self", ".", "qk_scale", ",", "\n", "drop", "=", "self", ".", "drop_rate", ",", "attn_drop", "=", "self", ".", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "self", ".", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", "]", ")", "\n", "\n", "# NOTE as per official impl, we could have a pre-logits representation dense layer + tanh here", "\n", "#self.repr = nn.Linear(embed_dim, representation_size)", "\n", "#self.repr_act = nn.Tanh()", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "# self.apply(self._init_weights)", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.VisionTransformer.init_weights": [[251, 276], ["vit.VisionTransformer.modules", "isinstance", "print", "layers.trunc_normal_", "isinstance", "helpers.load_pretrained", "helpers.load_pretrained", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.weight_init.trunc_normal_", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.helpers.load_pretrained", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.helpers.load_pretrained"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "# nn.init.normal_(self.pos_embed, std=0.02)", "\n", "# nn.init.zeros_(self.cls_token)", "\n", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n", "", "", "if", "self", ".", "random_init", "==", "False", ":", "\n", "            ", "self", ".", "default_cfg", "=", "default_cfgs", "[", "self", ".", "model_name", "]", "\n", "\n", "if", "not", "self", ".", "pretrain_weights", "==", "None", ":", "\n", "                ", "self", ".", "default_cfg", "[", "'pretrained_finetune'", "]", "=", "self", ".", "pretrain_weights", "\n", "\n", "", "if", "self", ".", "model_name", "in", "[", "'vit_small_patch16_224'", ",", "'vit_base_patch16_224'", "]", ":", "\n", "                ", "load_pretrained", "(", "self", ",", "num_classes", "=", "self", ".", "num_classes", ",", "in_chans", "=", "self", ".", "in_chans", ",", "pos_embed_interp", "=", "self", ".", "pos_embed_interp", ",", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", ",", "align_corners", "=", "self", ".", "align_corners", ",", "filter_fn", "=", "self", ".", "_conv_filter", ")", "\n", "", "else", ":", "\n", "                ", "load_pretrained", "(", "self", ",", "num_classes", "=", "self", ".", "num_classes", ",", "in_chans", "=", "self", ".", "in_chans", ",", "pos_embed_interp", "=", "self", ".", "pos_embed_interp", ",", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Initialize weight randomly'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.VisionTransformer.no_weight_decay": [[277, 280], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'pos_embed'", ",", "'cls_token'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.VisionTransformer._conv_filter": [[281, 289], ["state_dict.items", "v.reshape.reshape.reshape"], "methods", ["None"], ["", "def", "_conv_filter", "(", "self", ",", "state_dict", ",", "patch_size", "=", "16", ")", ":", "\n", "        ", "\"\"\" convert patch embedding weight from manual patchify + linear proj to conv\"\"\"", "\n", "out_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'patch_embed.proj.weight'", "in", "k", ":", "\n", "                ", "v", "=", "v", ".", "reshape", "(", "(", "v", ".", "shape", "[", "0", "]", ",", "3", ",", "patch_size", ",", "patch_size", ")", ")", "\n", "", "out_dict", "[", "k", "]", "=", "v", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.VisionTransformer.to_2D": [[290, 295], ["int", "x.transpose().reshape.transpose().reshape.transpose().reshape", "math.sqrt", "x.transpose().reshape.transpose().reshape.transpose"], "methods", ["None"], ["", "def", "to_2D", "(", "self", ",", "x", ")", ":", "\n", "        ", "n", ",", "hw", ",", "c", "=", "x", ".", "shape", "\n", "h", "=", "w", "=", "int", "(", "math", ".", "sqrt", "(", "hw", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "n", ",", "c", ",", "h", ",", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.VisionTransformer.to_1D": [[296, 300], ["x.reshape().transpose.reshape().transpose.reshape().transpose", "x.reshape().transpose.reshape().transpose.reshape"], "methods", ["None"], ["", "def", "to_1D", "(", "self", ",", "x", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "n", ",", "c", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit.VisionTransformer.forward": [[301, 318], ["vit.VisionTransformer.patch_embed", "blk.flatten().transpose", "vit.VisionTransformer.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vit.VisionTransformer.pos_drop", "enumerate", "tuple", "blk", "blk.flatten", "outs.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.vit._cfg": [[15, 23], ["None"], "function", ["None"], ["def", "_cfg", "(", "url", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "'url'", ":", "url", ",", "\n", "'num_classes'", ":", "1000", ",", "'input_size'", ":", "(", "3", ",", "224", ",", "224", ")", ",", "'pool_size'", ":", "None", ",", "\n", "'crop_pct'", ":", ".9", ",", "'interpolation'", ":", "'bicubic'", ",", "\n", "'mean'", ":", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "'std'", ":", "(", "0.229", ",", "0.224", ",", "0.225", ")", ",", "\n", "'first_conv'", ":", "''", ",", "'classifier'", ":", "'head'", ",", "\n", "**", "kwargs", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.BasicBlock.__init__": [[18, 56], ["dict", "torch.Module.__init__", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_conv_layer", "resnet.BasicBlock.add_module", "mmcv.cnn.build_conv_layer", "resnet.BasicBlock.add_module", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "dcn", "=", "None", ",", "\n", "plugins", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "dcn", "is", "None", ",", "'Not implemented yet.'", "\n", "assert", "plugins", "is", "None", ",", "'Not implemented yet.'", "\n", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "2", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "planes", ",", "planes", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.BasicBlock.norm1": [[57, 61], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "\"\"\"nn.Module: normalization layer after the first convolution layer\"\"\"", "\n", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.BasicBlock.norm2": [[62, 66], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "\"\"\"nn.Module: normalization layer after the second convolution layer\"\"\"", "\n", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.BasicBlock.forward": [[67, 95], ["resnet.BasicBlock.relu", "resnet.BasicBlock.conv1", "resnet.BasicBlock.norm1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.norm2", "torch.checkpoint", "torch.checkpoint", "resnet.BasicBlock.forward._inner_forward"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.norm2"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "\n", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "\n", "return", "out", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.__init__": [[106, 218], ["dict", "torch.Module.__init__", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_conv_layer", "resnet.Bottleneck.add_module", "resnet.Bottleneck.add_module", "mmcv.cnn.build_conv_layer", "resnet.Bottleneck.add_module", "torch.ReLU", "torch.ReLU", "isinstance", "isinstance", "all", "dcn.pop", "mmcv.cnn.build_conv_layer", "mmcv.cnn.build_conv_layer", "resnet.Bottleneck.make_block_plugins", "resnet.Bottleneck.make_block_plugins", "resnet.Bottleneck.make_block_plugins"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.make_block_plugins", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.make_block_plugins", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.make_block_plugins"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "dcn", "=", "None", ",", "\n", "plugins", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "style", "in", "[", "'pytorch'", ",", "'caffe'", "]", "\n", "assert", "dcn", "is", "None", "or", "isinstance", "(", "dcn", ",", "dict", ")", "\n", "assert", "plugins", "is", "None", "or", "isinstance", "(", "plugins", ",", "list", ")", "\n", "if", "plugins", "is", "not", "None", ":", "\n", "            ", "allowed_position", "=", "[", "'after_conv1'", ",", "'after_conv2'", ",", "'after_conv3'", "]", "\n", "assert", "all", "(", "p", "[", "'position'", "]", "in", "allowed_position", "for", "p", "in", "plugins", ")", "\n", "\n", "", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "dcn", "=", "dcn", "\n", "self", ".", "with_dcn", "=", "dcn", "is", "not", "None", "\n", "self", ".", "plugins", "=", "plugins", "\n", "self", ".", "with_plugins", "=", "plugins", "is", "not", "None", "\n", "\n", "if", "self", ".", "with_plugins", ":", "\n", "# collect plugins for conv1/conv2/conv3", "\n", "            ", "self", ".", "after_conv1_plugins", "=", "[", "\n", "plugin", "[", "'cfg'", "]", "for", "plugin", "in", "plugins", "\n", "if", "plugin", "[", "'position'", "]", "==", "'after_conv1'", "\n", "]", "\n", "self", ".", "after_conv2_plugins", "=", "[", "\n", "plugin", "[", "'cfg'", "]", "for", "plugin", "in", "plugins", "\n", "if", "plugin", "[", "'position'", "]", "==", "'after_conv2'", "\n", "]", "\n", "self", ".", "after_conv3_plugins", "=", "[", "\n", "plugin", "[", "'cfg'", "]", "for", "plugin", "in", "plugins", "\n", "if", "plugin", "[", "'position'", "]", "==", "'after_conv3'", "\n", "]", "\n", "\n", "", "if", "self", ".", "style", "==", "'pytorch'", ":", "\n", "            ", "self", ".", "conv1_stride", "=", "1", "\n", "self", ".", "conv2_stride", "=", "stride", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1_stride", "=", "stride", "\n", "self", ".", "conv2_stride", "=", "1", "\n", "\n", "", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "2", ")", "\n", "self", ".", "norm3_name", ",", "norm3", "=", "build_norm_layer", "(", "\n", "norm_cfg", ",", "planes", "*", "self", ".", "expansion", ",", "postfix", "=", "3", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "self", ".", "conv1_stride", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "fallback_on_stride", "=", "False", "\n", "if", "self", ".", "with_dcn", ":", "\n", "            ", "fallback_on_stride", "=", "dcn", ".", "pop", "(", "'fallback_on_stride'", ",", "False", ")", "\n", "", "if", "not", "self", ".", "with_dcn", "or", "fallback_on_stride", ":", "\n", "            ", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "conv_cfg", "is", "None", ",", "'conv_cfg must be None for DCN'", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "dcn", ",", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "self", ".", "conv3", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "planes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm3_name", ",", "norm3", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "self", ".", "with_plugins", ":", "\n", "            ", "self", ".", "after_conv1_plugin_names", "=", "self", ".", "make_block_plugins", "(", "\n", "planes", ",", "self", ".", "after_conv1_plugins", ")", "\n", "self", ".", "after_conv2_plugin_names", "=", "self", ".", "make_block_plugins", "(", "\n", "planes", ",", "self", ".", "after_conv2_plugins", ")", "\n", "self", ".", "after_conv3_plugin_names", "=", "self", ".", "make_block_plugins", "(", "\n", "planes", "*", "self", ".", "expansion", ",", "self", ".", "after_conv3_plugins", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.make_block_plugins": [[219, 241], ["isinstance", "plugin.copy.copy.copy", "mmcv.cnn.build_plugin_layer", "resnet.Bottleneck.add_module", "plugin_names.append", "hasattr", "plugin.copy.copy.pop"], "methods", ["None"], ["", "", "def", "make_block_plugins", "(", "self", ",", "in_channels", ",", "plugins", ")", ":", "\n", "        ", "\"\"\"make plugins for block.\n\n        Args:\n            in_channels (int): Input channels of plugin.\n            plugins (list[dict]): List of plugins cfg to build.\n\n        Returns:\n            list[str]: List of the names of plugin.\n        \"\"\"", "\n", "assert", "isinstance", "(", "plugins", ",", "list", ")", "\n", "plugin_names", "=", "[", "]", "\n", "for", "plugin", "in", "plugins", ":", "\n", "            ", "plugin", "=", "plugin", ".", "copy", "(", ")", "\n", "name", ",", "layer", "=", "build_plugin_layer", "(", "\n", "plugin", ",", "\n", "in_channels", "=", "in_channels", ",", "\n", "postfix", "=", "plugin", ".", "pop", "(", "'postfix'", ",", "''", ")", ")", "\n", "assert", "not", "hasattr", "(", "self", ",", "name", ")", ",", "f'duplicate plugin {name}'", "\n", "self", ".", "add_module", "(", "name", ",", "layer", ")", "\n", "plugin_names", ".", "append", "(", "name", ")", "\n", "", "return", "plugin_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.forward_plugin": [[242, 248], ["getattr"], "methods", ["None"], ["", "def", "forward_plugin", "(", "self", ",", "x", ",", "plugin_names", ")", ":", "\n", "        ", "\"\"\"Forward function for plugins.\"\"\"", "\n", "out", "=", "x", "\n", "for", "name", "in", "plugin_names", ":", "\n", "            ", "out", "=", "getattr", "(", "self", ",", "name", ")", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.norm1": [[249, 253], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "\"\"\"nn.Module: normalization layer after the first convolution layer\"\"\"", "\n", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.norm2": [[254, 258], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "\"\"\"nn.Module: normalization layer after the second convolution layer\"\"\"", "\n", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.norm3": [[259, 263], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm3", "(", "self", ")", ":", "\n", "        ", "\"\"\"nn.Module: normalization layer after the third convolution layer\"\"\"", "\n", "return", "getattr", "(", "self", ",", "self", ".", "norm3_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.forward": [[264, 305], ["resnet.Bottleneck.relu", "resnet.Bottleneck.conv1", "resnet.Bottleneck.norm1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.norm2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.norm3", "torch.checkpoint", "torch.checkpoint", "resnet.Bottleneck.forward._inner_forward"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.norm2", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.Bottleneck.norm3"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "\n", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "with_plugins", ":", "\n", "                ", "out", "=", "self", ".", "forward_plugin", "(", "out", ",", "self", ".", "after_conv1_plugin_names", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "with_plugins", ":", "\n", "                ", "out", "=", "self", ".", "forward_plugin", "(", "out", ",", "self", ".", "after_conv2_plugin_names", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "norm3", "(", "out", ")", "\n", "\n", "if", "self", ".", "with_plugins", ":", "\n", "                ", "out", "=", "self", ".", "forward_plugin", "(", "out", ",", "self", ".", "after_conv3_plugin_names", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "\n", "return", "out", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.__init__": [[373, 469], ["dict", "torch.Module.__init__", "resnet.ResNet._make_stem_layer", "enumerate", "resnet.ResNet._freeze_stages", "KeyError", "len", "len", "max", "resnet.ResNet.make_res_layer", "resnet.ResNet.add_module", "resnet.ResNet.res_layers.append", "len", "resnet.ResNet.make_stage_plugins", "len", "len"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet._make_stem_layer", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet._freeze_stages", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnext.ResNeXt.make_res_layer", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.make_stage_plugins"], ["def", "__init__", "(", "self", ",", "\n", "depth", ",", "\n", "in_channels", "=", "3", ",", "\n", "stem_channels", "=", "64", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "4", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "deep_stem", "=", "False", ",", "\n", "avg_down", "=", "False", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "norm_eval", "=", "False", ",", "\n", "dcn", "=", "None", ",", "\n", "stage_with_dcn", "=", "(", "False", ",", "False", ",", "False", ",", "False", ")", ",", "\n", "plugins", "=", "None", ",", "\n", "multi_grid", "=", "None", ",", "\n", "contract_dilation", "=", "False", ",", "\n", "with_cp", "=", "False", ",", "\n", "zero_init_residual", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "not", "in", "self", ".", "arch_settings", ":", "\n", "            ", "raise", "KeyError", "(", "f'invalid depth {depth} for resnet'", ")", "\n", "", "self", ".", "depth", "=", "depth", "\n", "self", ".", "stem_channels", "=", "stem_channels", "\n", "self", ".", "base_channels", "=", "base_channels", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "assert", "num_stages", ">=", "1", "and", "num_stages", "<=", "4", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "dilations", "=", "dilations", "\n", "assert", "len", "(", "strides", ")", "==", "len", "(", "dilations", ")", "==", "num_stages", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "assert", "max", "(", "out_indices", ")", "<", "num_stages", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "deep_stem", "=", "deep_stem", "\n", "self", ".", "avg_down", "=", "avg_down", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "dcn", "=", "dcn", "\n", "self", ".", "stage_with_dcn", "=", "stage_with_dcn", "\n", "if", "dcn", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "stage_with_dcn", ")", "==", "num_stages", "\n", "", "self", ".", "plugins", "=", "plugins", "\n", "self", ".", "multi_grid", "=", "multi_grid", "\n", "self", ".", "contract_dilation", "=", "contract_dilation", "\n", "self", ".", "zero_init_residual", "=", "zero_init_residual", "\n", "self", ".", "block", ",", "stage_blocks", "=", "self", ".", "arch_settings", "[", "depth", "]", "\n", "self", ".", "stage_blocks", "=", "stage_blocks", "[", ":", "num_stages", "]", "\n", "self", ".", "inplanes", "=", "stem_channels", "\n", "\n", "self", ".", "_make_stem_layer", "(", "in_channels", ",", "stem_channels", ")", "\n", "\n", "self", ".", "res_layers", "=", "[", "]", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "stride", "=", "strides", "[", "i", "]", "\n", "dilation", "=", "dilations", "[", "i", "]", "\n", "dcn", "=", "self", ".", "dcn", "if", "self", ".", "stage_with_dcn", "[", "i", "]", "else", "None", "\n", "if", "plugins", "is", "not", "None", ":", "\n", "                ", "stage_plugins", "=", "self", ".", "make_stage_plugins", "(", "plugins", ",", "i", ")", "\n", "", "else", ":", "\n", "                ", "stage_plugins", "=", "None", "\n", "# multi grid is applied to last layer only", "\n", "", "stage_multi_grid", "=", "multi_grid", "if", "i", "==", "len", "(", "\n", "self", ".", "stage_blocks", ")", "-", "1", "else", "None", "\n", "planes", "=", "base_channels", "*", "2", "**", "i", "\n", "res_layer", "=", "self", ".", "make_res_layer", "(", "\n", "block", "=", "self", ".", "block", ",", "\n", "inplanes", "=", "self", ".", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "num_blocks", "=", "num_blocks", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "style", "=", "self", ".", "style", ",", "\n", "avg_down", "=", "self", ".", "avg_down", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ",", "\n", "plugins", "=", "stage_plugins", ",", "\n", "multi_grid", "=", "stage_multi_grid", ",", "\n", "contract_dilation", "=", "contract_dilation", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "self", ".", "block", ".", "expansion", "\n", "layer_name", "=", "f'layer{i+1}'", "\n", "self", ".", "add_module", "(", "layer_name", ",", "res_layer", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "", "self", ".", "_freeze_stages", "(", ")", "\n", "\n", "self", ".", "feat_dim", "=", "self", ".", "block", ".", "expansion", "*", "base_channels", "*", "2", "**", "(", "\n", "len", "(", "self", ".", "stage_blocks", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.make_stage_plugins": [[470, 522], ["plugin.copy.copy.copy", "plugin.copy.copy.pop", "stage_plugins.append", "len"], "methods", ["None"], ["", "def", "make_stage_plugins", "(", "self", ",", "plugins", ",", "stage_idx", ")", ":", "\n", "        ", "\"\"\"make plugins for ResNet 'stage_idx'th stage .\n\n        Currently we support to insert 'context_block',\n        'empirical_attention_block', 'nonlocal_block' into the backbone like\n        ResNet/ResNeXt. They could be inserted after conv1/conv2/conv3 of\n        Bottleneck.\n\n        An example of plugins format could be :\n        >>> plugins=[\n        ...     dict(cfg=dict(type='xxx', arg1='xxx'),\n        ...          stages=(False, True, True, True),\n        ...          position='after_conv2'),\n        ...     dict(cfg=dict(type='yyy'),\n        ...          stages=(True, True, True, True),\n        ...          position='after_conv3'),\n        ...     dict(cfg=dict(type='zzz', postfix='1'),\n        ...          stages=(True, True, True, True),\n        ...          position='after_conv3'),\n        ...     dict(cfg=dict(type='zzz', postfix='2'),\n        ...          stages=(True, True, True, True),\n        ...          position='after_conv3')\n        ... ]\n        >>> self = ResNet(depth=18)\n        >>> stage_plugins = self.make_stage_plugins(plugins, 0)\n        >>> assert len(stage_plugins) == 3\n\n        Suppose 'stage_idx=0', the structure of blocks in the stage would be:\n            conv1-> conv2->conv3->yyy->zzz1->zzz2\n        Suppose 'stage_idx=1', the structure of blocks in the stage would be:\n            conv1-> conv2->xxx->conv3->yyy->zzz1->zzz2\n\n        If stages is missing, the plugin would be applied to all stages.\n\n        Args:\n            plugins (list[dict]): List of plugins cfg to build. The postfix is\n                required if multiple same type plugins are inserted.\n            stage_idx (int): Index of stage to build\n\n        Returns:\n            list[dict]: Plugins for current stage\n        \"\"\"", "\n", "stage_plugins", "=", "[", "]", "\n", "for", "plugin", "in", "plugins", ":", "\n", "            ", "plugin", "=", "plugin", ".", "copy", "(", ")", "\n", "stages", "=", "plugin", ".", "pop", "(", "'stages'", ",", "None", ")", "\n", "assert", "stages", "is", "None", "or", "len", "(", "stages", ")", "==", "self", ".", "num_stages", "\n", "# whether to insert plugin into current stage", "\n", "if", "stages", "is", "None", "or", "stages", "[", "stage_idx", "]", ":", "\n", "                ", "stage_plugins", ".", "append", "(", "plugin", ")", "\n", "\n", "", "", "return", "stage_plugins", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.make_res_layer": [[523, 526], ["utils.ResLayer"], "methods", ["None"], ["", "def", "make_res_layer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Pack all blocks in a stage into a ``ResLayer``.\"\"\"", "\n", "return", "ResLayer", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.norm1": [[527, 531], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "\"\"\"nn.Module: the normalization layer named \"norm1\" \"\"\"", "\n", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet._make_stem_layer": [[532, 580], ["torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "mmcv.cnn.build_conv_layer", "mmcv.cnn.build_norm_layer", "resnet.ResNet.add_module", "torch.ReLU", "torch.ReLU", "mmcv.cnn.build_conv_layer", "torch.ReLU", "torch.ReLU", "mmcv.cnn.build_conv_layer", "torch.ReLU", "torch.ReLU", "mmcv.cnn.build_conv_layer", "torch.ReLU", "torch.ReLU", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer"], "methods", ["None"], ["", "def", "_make_stem_layer", "(", "self", ",", "in_channels", ",", "stem_channels", ")", ":", "\n", "        ", "\"\"\"Make stem layer for ResNet.\"\"\"", "\n", "if", "self", ".", "deep_stem", ":", "\n", "            ", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "stem_channels", "//", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "stem_channels", "//", "2", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "stem_channels", "//", "2", ",", "\n", "stem_channels", "//", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "stem_channels", "//", "2", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "stem_channels", "//", "2", ",", "\n", "stem_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "stem_channels", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "stem_channels", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "stem_channels", ",", "postfix", "=", "1", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet._freeze_stages": [[581, 599], ["range", "getattr", "getattr.eval", "getattr.parameters", "resnet.ResNet.stem.eval", "resnet.ResNet.stem.parameters", "resnet.ResNet.norm1.eval", "getattr.parameters"], "methods", ["None"], ["", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "\"\"\"Freeze stages param and norm stats.\"\"\"", "\n", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "if", "self", ".", "deep_stem", ":", "\n", "                ", "self", ".", "stem", ".", "eval", "(", ")", "\n", "for", "param", "in", "self", ".", "stem", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "norm1", ".", "eval", "(", ")", "\n", "for", "m", "in", "[", "self", ".", "conv1", ",", "self", ".", "norm1", "]", ":", "\n", "                    ", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                        ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "            ", "m", "=", "getattr", "(", "self", ",", "f'layer{i}'", ")", "\n", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.init_weights": [[600, 631], ["isinstance", "mmseg.utils.get_root_logger", "mmcv.runner.load_checkpoint", "resnet.ResNet.modules", "TypeError", "isinstance", "resnet.ResNet.modules", "resnet.ResNet.modules", "mmcv.cnn.kaiming_init", "isinstance", "isinstance", "mmcv.cnn.constant_init", "isinstance", "hasattr", "mmcv.cnn.constant_init", "mmcv.cnn.constant_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.logger.get_root_logger"], ["", "", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize the weights in backbone.\n\n        Args:\n            pretrained (str, optional): Path to pre-trained weights.\n                Defaults to None.\n        \"\"\"", "\n", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "\n", "", "", "if", "self", ".", "dcn", "is", "not", "None", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", "and", "hasattr", "(", "\n", "m", ",", "'conv2_offset'", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "conv2_offset", ",", "0", ")", "\n", "\n", "", "", "", "if", "self", ".", "zero_init_residual", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "norm3", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "norm2", ",", "0", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.forward": [[632, 648], ["resnet.ResNet.maxpool", "enumerate", "tuple", "resnet.ResNet.stem", "resnet.ResNet.conv1", "resnet.ResNet.norm1", "resnet.ResNet.relu", "getattr", "getattr.", "outs.append"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.norm1"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "if", "self", ".", "deep_stem", ":", "\n", "            ", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "layer_name", "in", "enumerate", "(", "self", ".", "res_layers", ")", ":", "\n", "            ", "res_layer", "=", "getattr", "(", "self", ",", "layer_name", ")", "\n", "x", "=", "res_layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet.train": [[649, 659], ["super().train", "resnet.ResNet._freeze_stages", "resnet.ResNet.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNet._freeze_stages"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Convert the model into training mode while keep normalization layer\n        freezed.\"\"\"", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNetV1c.__init__": [[672, 675], ["resnet.ResNet.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNetV1c", ",", "self", ")", ".", "__init__", "(", "\n", "deep_stem", "=", "True", ",", "avg_down", "=", "False", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnet.ResNetV1d.__init__": [[686, 689], ["resnet.ResNet.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNetV1d", ",", "self", ")", ".", "__init__", "(", "\n", "deep_stem", "=", "True", ",", "avg_down", "=", "True", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.GlobalContextExtractor.__init__": [[26, 36], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ",", "with_cp", "=", "False", ")", ":", "\n", "        ", "super", "(", "GlobalContextExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channel", "=", "channel", "\n", "self", ".", "reduction", "=", "reduction", "\n", "assert", "reduction", ">=", "1", "and", "channel", ">=", "reduction", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.GlobalContextExtractor.forward": [[37, 51], ["cgnet.GlobalContextExtractor.avg_pool().view", "cgnet.GlobalContextExtractor.fc().view", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "cgnet.GlobalContextExtractor.forward._inner_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "num_batch", ",", "num_channel", "=", "x", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "num_batch", ",", "num_channel", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "num_batch", ",", "num_channel", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.ContextGuidedBlock.__init__": [[78, 141], ["dict", "dict", "torch.Module.__init__", "mmcv.cnn.ConvModule", "mmcv.cnn.build_conv_layer", "mmcv.cnn.build_conv_layer", "torch.PReLU", "torch.PReLU", "torch.PReLU", "cgnet.GlobalContextExtractor", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_conv_layer"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "dilation", "=", "2", ",", "\n", "reduction", "=", "16", ",", "\n", "skip_connect", "=", "True", ",", "\n", "downsample", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'PReLU'", ")", ",", "\n", "with_cp", "=", "False", ")", ":", "\n", "        ", "super", "(", "ContextGuidedBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "channels", "=", "out_channels", "if", "downsample", "else", "out_channels", "//", "2", "\n", "if", "'type'", "in", "act_cfg", "and", "act_cfg", "[", "'type'", "]", "==", "'PReLU'", ":", "\n", "            ", "act_cfg", "[", "'num_parameters'", "]", "=", "channels", "\n", "", "kernel_size", "=", "3", "if", "downsample", "else", "1", "\n", "stride", "=", "2", "if", "downsample", "else", "1", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "\n", "self", ".", "conv1x1", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "\n", "self", ".", "f_loc", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "channels", ",", "\n", "channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "channels", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "f_sur", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "channels", ",", "\n", "channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "dilation", ",", "\n", "groups", "=", "channels", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn", "=", "build_norm_layer", "(", "norm_cfg", ",", "2", "*", "channels", ")", "[", "1", "]", "\n", "self", ".", "activate", "=", "nn", ".", "PReLU", "(", "2", "*", "channels", ")", "\n", "\n", "if", "downsample", ":", "\n", "            ", "self", ".", "bottleneck", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "2", "*", "channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "skip_connect", "=", "skip_connect", "and", "not", "downsample", "\n", "self", ".", "f_glo", "=", "GlobalContextExtractor", "(", "out_channels", ",", "reduction", ",", "with_cp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.ContextGuidedBlock.forward": [[142, 168], ["cgnet.ContextGuidedBlock.conv1x1", "cgnet.ContextGuidedBlock.f_loc", "cgnet.ContextGuidedBlock.f_sur", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cgnet.ContextGuidedBlock.bn", "cgnet.ContextGuidedBlock.activate", "cgnet.ContextGuidedBlock.f_glo", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "cgnet.ContextGuidedBlock.forward._inner_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "out", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "loc", "=", "self", ".", "f_loc", "(", "out", ")", "\n", "sur", "=", "self", ".", "f_sur", "(", "out", ")", "\n", "\n", "joi_feat", "=", "torch", ".", "cat", "(", "[", "loc", ",", "sur", "]", ",", "1", ")", "# the joint feature", "\n", "joi_feat", "=", "self", ".", "bn", "(", "joi_feat", ")", "\n", "joi_feat", "=", "self", ".", "activate", "(", "joi_feat", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "                ", "joi_feat", "=", "self", ".", "bottleneck", "(", "joi_feat", ")", "# channel = out_channels", "\n", "# f_glo is employed to refine the joint feature", "\n", "", "out", "=", "self", ".", "f_glo", "(", "joi_feat", ")", "\n", "\n", "if", "self", ".", "skip_connect", ":", "\n", "                ", "return", "x", "+", "out", "\n", "", "else", ":", "\n", "                ", "return", "out", "\n", "\n", "", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.InputInjection.__init__": [[173, 178], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "cgnet.InputInjection.pool.append", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "num_downsampling", ")", ":", "\n", "        ", "super", "(", "InputInjection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_downsampling", ")", ":", "\n", "            ", "self", ".", "pool", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.InputInjection.forward": [[179, 183], ["pool"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "pool", "in", "self", ".", "pool", ":", "\n", "            ", "x", "=", "pool", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.__init__": [[215, 308], ["dict", "dict", "torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "cgnet.InputInjection", "cgnet.InputInjection", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "isinstance", "isinstance", "isinstance", "isinstance", "cgnet.CGNet.stem.append", "torch.PReLU", "torch.PReLU", "torch.PReLU", "cgnet.CGNet.level1.append", "torch.PReLU", "torch.PReLU", "torch.PReLU", "cgnet.CGNet.level2.append", "torch.PReLU", "torch.PReLU", "torch.PReLU", "len", "len", "len", "len", "mmcv.cnn.ConvModule", "mmcv.cnn.build_norm_layer", "cgnet.ContextGuidedBlock", "mmcv.cnn.build_norm_layer", "cgnet.ContextGuidedBlock", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", "=", "3", ",", "\n", "num_channels", "=", "(", "32", ",", "64", ",", "128", ")", ",", "\n", "num_blocks", "=", "(", "3", ",", "21", ")", ",", "\n", "dilations", "=", "(", "2", ",", "4", ")", ",", "\n", "reductions", "=", "(", "8", ",", "16", ")", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'PReLU'", ")", ",", "\n", "norm_eval", "=", "False", ",", "\n", "with_cp", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "CGNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "assert", "isinstance", "(", "self", ".", "num_channels", ",", "tuple", ")", "and", "len", "(", "\n", "self", ".", "num_channels", ")", "==", "3", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "assert", "isinstance", "(", "self", ".", "num_blocks", ",", "tuple", ")", "and", "len", "(", "self", ".", "num_blocks", ")", "==", "2", "\n", "self", ".", "dilations", "=", "dilations", "\n", "assert", "isinstance", "(", "self", ".", "dilations", ",", "tuple", ")", "and", "len", "(", "self", ".", "dilations", ")", "==", "2", "\n", "self", ".", "reductions", "=", "reductions", "\n", "assert", "isinstance", "(", "self", ".", "reductions", ",", "tuple", ")", "and", "len", "(", "self", ".", "reductions", ")", "==", "2", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "if", "'type'", "in", "self", ".", "act_cfg", "and", "self", ".", "act_cfg", "[", "'type'", "]", "==", "'PReLU'", ":", "\n", "            ", "self", ".", "act_cfg", "[", "'num_parameters'", "]", "=", "num_channels", "[", "0", "]", "\n", "", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "\n", "cur_channels", "=", "in_channels", "\n", "self", ".", "stem", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "self", ".", "stem", ".", "append", "(", "\n", "ConvModule", "(", "\n", "cur_channels", ",", "\n", "num_channels", "[", "0", "]", ",", "\n", "3", ",", "\n", "2", "if", "i", "==", "0", "else", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ")", "\n", "cur_channels", "=", "num_channels", "[", "0", "]", "\n", "\n", "", "self", ".", "inject_2x", "=", "InputInjection", "(", "1", ")", "# down-sample for Input, factor=2", "\n", "self", ".", "inject_4x", "=", "InputInjection", "(", "2", ")", "# down-sample for Input, factor=4", "\n", "\n", "cur_channels", "+=", "in_channels", "\n", "self", ".", "norm_prelu_0", "=", "nn", ".", "Sequential", "(", "\n", "build_norm_layer", "(", "norm_cfg", ",", "cur_channels", ")", "[", "1", "]", ",", "\n", "nn", ".", "PReLU", "(", "cur_channels", ")", ")", "\n", "\n", "# stage 1", "\n", "self", ".", "level1", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_blocks", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "level1", ".", "append", "(", "\n", "ContextGuidedBlock", "(", "\n", "cur_channels", "if", "i", "==", "0", "else", "num_channels", "[", "1", "]", ",", "\n", "num_channels", "[", "1", "]", ",", "\n", "dilations", "[", "0", "]", ",", "\n", "reductions", "[", "0", "]", ",", "\n", "downsample", "=", "(", "i", "==", "0", ")", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "with_cp", "=", "with_cp", ")", ")", "# CG block", "\n", "\n", "", "cur_channels", "=", "2", "*", "num_channels", "[", "1", "]", "+", "in_channels", "\n", "self", ".", "norm_prelu_1", "=", "nn", ".", "Sequential", "(", "\n", "build_norm_layer", "(", "norm_cfg", ",", "cur_channels", ")", "[", "1", "]", ",", "\n", "nn", ".", "PReLU", "(", "cur_channels", ")", ")", "\n", "\n", "# stage 2", "\n", "self", ".", "level2", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_blocks", "[", "1", "]", ")", ":", "\n", "            ", "self", ".", "level2", ".", "append", "(", "\n", "ContextGuidedBlock", "(", "\n", "cur_channels", "if", "i", "==", "0", "else", "num_channels", "[", "2", "]", ",", "\n", "num_channels", "[", "2", "]", ",", "\n", "dilations", "[", "1", "]", ",", "\n", "reductions", "[", "1", "]", ",", "\n", "downsample", "=", "(", "i", "==", "0", ")", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "with_cp", "=", "with_cp", ")", ")", "# CG block", "\n", "\n", "", "cur_channels", "=", "2", "*", "num_channels", "[", "2", "]", "\n", "self", ".", "norm_prelu_2", "=", "nn", ".", "Sequential", "(", "\n", "build_norm_layer", "(", "norm_cfg", ",", "cur_channels", ")", "[", "1", "]", ",", "\n", "nn", ".", "PReLU", "(", "cur_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.forward": [[309, 337], ["cgnet.CGNet.inject_2x", "cgnet.CGNet.inject_4x", "cgnet.CGNet.norm_prelu_0", "output.append", "enumerate", "cgnet.CGNet.norm_prelu_1", "output.append", "enumerate", "cgnet.CGNet.norm_prelu_2", "output.append", "layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "[", "]", "\n", "\n", "# stage 0", "\n", "inp_2x", "=", "self", ".", "inject_2x", "(", "x", ")", "\n", "inp_4x", "=", "self", ".", "inject_4x", "(", "x", ")", "\n", "for", "layer", "in", "self", ".", "stem", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "x", "=", "self", ".", "norm_prelu_0", "(", "torch", ".", "cat", "(", "[", "x", ",", "inp_2x", "]", ",", "1", ")", ")", "\n", "output", ".", "append", "(", "x", ")", "\n", "\n", "# stage 1", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "level1", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "down1", "=", "x", "\n", "", "", "x", "=", "self", ".", "norm_prelu_1", "(", "torch", ".", "cat", "(", "[", "x", ",", "down1", ",", "inp_4x", "]", ",", "1", ")", ")", "\n", "output", ".", "append", "(", "x", ")", "\n", "\n", "# stage 2", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "level2", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "down2", "=", "x", "\n", "", "", "x", "=", "self", ".", "norm_prelu_2", "(", "torch", ".", "cat", "(", "[", "down2", ",", "x", "]", ",", "1", ")", ")", "\n", "output", ".", "append", "(", "x", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.init_weights": [[338, 358], ["isinstance", "mmseg.utils.get_root_logger", "mmcv.runner.load_checkpoint", "cgnet.CGNet.modules", "TypeError", "isinstance", "mmcv.cnn.kaiming_init", "isinstance", "mmcv.cnn.constant_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.logger.get_root_logger"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize the weights in backbone.\n\n        Args:\n            pretrained (str, optional): Path to pre-trained weights.\n                Defaults to None.\n        \"\"\"", "\n", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "PReLU", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "0", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train": [[359, 368], ["super().train", "cgnet.CGNet.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Convert the model into training mode whill keeping the normalization\n        layer freezed.\"\"\"", "\n", "super", "(", "CGNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.helpers.load_state_dict_from_url": [[19, 50], ["os.getenv", "urllib.parse.urlparse", "os.path.basename", "os.path.join", "zipfile.is_zipfile", "warnings.warn", "torch.hub.get_dir", "torch.hub.get_dir", "torch.hub.get_dir", "torch.hub.get_dir", "os.path.join", "os.path.exists", "sys.stderr.write", "torch.hub.download_url_to_file", "torch.hub.download_url_to_file", "torch.hub.download_url_to_file", "torch.hub.download_url_to_file", "torch.load", "torch.load", "torch.load", "torch.load", "os.makedirs", "HASH_REGEX.search().group", "torch.load", "torch.load", "torch.load", "torch.load", "HASH_REGEX.search"], "function", ["None"], ["def", "load_state_dict_from_url", "(", "url", ",", "model_dir", "=", "None", ",", "file_name", "=", "None", ",", "check_hash", "=", "False", ",", "progress", "=", "True", ",", "map_location", "=", "None", ")", ":", "\n", "# Issue warning to move data if old env is set", "\n", "    ", "if", "os", ".", "getenv", "(", "'TORCH_MODEL_ZOO'", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "'TORCH_MODEL_ZOO is deprecated, please use env TORCH_HOME instead'", ")", "\n", "\n", "", "if", "model_dir", "is", "None", ":", "\n", "        ", "hub_dir", "=", "torch", ".", "hub", ".", "get_dir", "(", ")", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "hub_dir", ",", "'checkpoints'", ")", "\n", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "model_dir", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "==", "errno", ".", "EEXIST", ":", "\n", "# Directory already exists, ignore.", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "# Unexpected OSError, re-raise.", "\n", "                ", "raise", "\n", "", "", "", "parts", "=", "urlparse", "(", "url", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "parts", ".", "path", ")", "\n", "if", "file_name", "is", "not", "None", ":", "\n", "        ", "filename", "=", "file_name", "\n", "", "cached_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cached_file", ")", ":", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "'Downloading: \"{}\" to {}\\n'", ".", "format", "(", "url", ",", "cached_file", ")", ")", "\n", "hash_prefix", "=", "HASH_REGEX", ".", "search", "(", "filename", ")", ".", "group", "(", "1", ")", "if", "check_hash", "else", "None", "\n", "torch", ".", "hub", ".", "download_url_to_file", "(", "url", ",", "cached_file", ",", "hash_prefix", ",", "progress", "=", "progress", ")", "\n", "", "if", "zipfile", ".", "is_zipfile", "(", "cached_file", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "cached_file", ",", "map_location", "=", "map_location", ")", "[", "'model'", "]", "\n", "", "else", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "cached_file", ",", "map_location", "=", "map_location", ")", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.helpers.load_pretrained": [[52, 138], ["model.load_state_dict", "getattr", "_logger.warning", "torch.load", "torch.load", "torch.load", "torch.load", "print", "helpers.load_state_dict_from_url", "print", "filter_fn", "_logger.info", "conv1_weight.to.float", "conv1_weight.to.to", "int", "pos_embed_weight.view().transpose.transpose", "int", "pos_embed_weight.view().transpose.view", "torch.interpolate", "pos_embed_weight.view().transpose.view().transpose", "[].unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv1_weight.to.reshape", "conv1_weight.to.sum", "conv1_weight.to.sum", "conv1_weight.to.float", "state_dict[].transpose", "math.sqrt", "math.sqrt", "_logger.warning", "_logger.info", "int", "conv1_weight.to.to", "int", "pos_embed_weight.view().transpose.view", "math.ceil", "conv1_weight.to.repeat", "float", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.helpers.load_state_dict_from_url"], ["", "def", "load_pretrained", "(", "model", ",", "cfg", "=", "None", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "filter_fn", "=", "None", ",", "strict", "=", "True", ",", "pos_embed_interp", "=", "False", ",", "num_patches", "=", "576", ",", "align_corners", "=", "False", ")", ":", "\n", "    ", "if", "cfg", "is", "None", ":", "\n", "        ", "cfg", "=", "getattr", "(", "model", ",", "'default_cfg'", ")", "\n", "", "if", "cfg", "is", "None", "or", "'url'", "not", "in", "cfg", "or", "not", "cfg", "[", "'url'", "]", ":", "\n", "        ", "_logger", ".", "warning", "(", "\"Pretrained model URL is invalid, using random initialization.\"", ")", "\n", "return", "\n", "\n", "", "if", "'pretrained_finetune'", "in", "cfg", "and", "cfg", "[", "'pretrained_finetune'", "]", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "cfg", "[", "'pretrained_finetune'", "]", ")", "\n", "print", "(", "'load pre-trained weight from '", "+", "cfg", "[", "'pretrained_finetune'", "]", ")", "\n", "", "else", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "cfg", "[", "'url'", "]", ",", "progress", "=", "False", ",", "map_location", "=", "'cpu'", ")", "\n", "print", "(", "'load pre-trained weight from imagenet21k'", ")", "\n", "\n", "\n", "", "if", "filter_fn", "is", "not", "None", ":", "\n", "        ", "state_dict", "=", "filter_fn", "(", "state_dict", ")", "\n", "\n", "", "if", "in_chans", "==", "1", ":", "\n", "        ", "conv1_name", "=", "cfg", "[", "'first_conv'", "]", "\n", "_logger", ".", "info", "(", "'Converting first conv (%s) pretrained weights from 3 to 1 channel'", "%", "conv1_name", ")", "\n", "conv1_weight", "=", "state_dict", "[", "conv1_name", "+", "'.weight'", "]", "\n", "# Some weights are in torch.half, ensure it's float for sum on CPU", "\n", "conv1_type", "=", "conv1_weight", ".", "dtype", "\n", "conv1_weight", "=", "conv1_weight", ".", "float", "(", ")", "\n", "O", ",", "I", ",", "J", ",", "K", "=", "conv1_weight", ".", "shape", "\n", "if", "I", ">", "3", ":", "\n", "            ", "assert", "conv1_weight", ".", "shape", "[", "1", "]", "%", "3", "==", "0", "\n", "# For models with space2depth stems", "\n", "conv1_weight", "=", "conv1_weight", ".", "reshape", "(", "O", ",", "I", "//", "3", ",", "3", ",", "J", ",", "K", ")", "\n", "conv1_weight", "=", "conv1_weight", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "conv1_weight", "=", "conv1_weight", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "conv1_weight", "=", "conv1_weight", ".", "to", "(", "conv1_type", ")", "\n", "state_dict", "[", "conv1_name", "+", "'.weight'", "]", "=", "conv1_weight", "\n", "", "elif", "in_chans", "!=", "3", ":", "\n", "        ", "conv1_name", "=", "cfg", "[", "'first_conv'", "]", "\n", "conv1_weight", "=", "state_dict", "[", "conv1_name", "+", "'.weight'", "]", "\n", "conv1_type", "=", "conv1_weight", ".", "dtype", "\n", "conv1_weight", "=", "conv1_weight", ".", "float", "(", ")", "\n", "O", ",", "I", ",", "J", ",", "K", "=", "conv1_weight", ".", "shape", "\n", "if", "I", "==", "3", ":", "\n", "            ", "_logger", ".", "warning", "(", "'Deleting first conv (%s) from pretrained weights.'", "%", "conv1_name", ")", "\n", "del", "state_dict", "[", "conv1_name", "+", "'.weight'", "]", "\n", "strict", "=", "False", "\n", "", "else", ":", "\n", "# NOTE this strategy should be better than random init, but there could be other combinations of", "\n", "# the original RGB input layer weights that'd work better for specific cases.", "\n", "            ", "_logger", ".", "info", "(", "'Repeating first conv (%s) weights in channel dim.'", "%", "conv1_name", ")", "\n", "repeat", "=", "int", "(", "math", ".", "ceil", "(", "in_chans", "/", "3", ")", ")", "\n", "conv1_weight", "=", "conv1_weight", ".", "repeat", "(", "1", ",", "repeat", ",", "1", ",", "1", ")", "[", ":", ",", ":", "in_chans", ",", ":", ",", ":", "]", "\n", "conv1_weight", "*=", "(", "3", "/", "float", "(", "in_chans", ")", ")", "\n", "conv1_weight", "=", "conv1_weight", ".", "to", "(", "conv1_type", ")", "\n", "state_dict", "[", "conv1_name", "+", "'.weight'", "]", "=", "conv1_weight", "\n", "\n", "", "", "classifier_name", "=", "cfg", "[", "'classifier'", "]", "\n", "if", "num_classes", "==", "1000", "and", "cfg", "[", "'num_classes'", "]", "==", "1001", ":", "\n", "# special case for imagenet trained models with extra background class in pretrained weights", "\n", "        ", "classifier_weight", "=", "state_dict", "[", "classifier_name", "+", "'.weight'", "]", "\n", "state_dict", "[", "classifier_name", "+", "'.weight'", "]", "=", "classifier_weight", "[", "1", ":", "]", "\n", "classifier_bias", "=", "state_dict", "[", "classifier_name", "+", "'.bias'", "]", "\n", "state_dict", "[", "classifier_name", "+", "'.bias'", "]", "=", "classifier_bias", "[", "1", ":", "]", "\n", "", "elif", "num_classes", "!=", "cfg", "[", "'num_classes'", "]", ":", "\n", "# completely discard fully connected for all other differences between pretrained and created model", "\n", "        ", "del", "state_dict", "[", "classifier_name", "+", "'.weight'", "]", "\n", "del", "state_dict", "[", "classifier_name", "+", "'.bias'", "]", "\n", "strict", "=", "False", "\n", "\n", "\n", "", "if", "pos_embed_interp", ":", "\n", "        ", "n", ",", "c", ",", "hw", "=", "state_dict", "[", "'pos_embed'", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "shape", "\n", "h", "=", "w", "=", "int", "(", "math", ".", "sqrt", "(", "hw", ")", ")", "\n", "pos_embed_weight", "=", "state_dict", "[", "'pos_embed'", "]", "[", ":", ",", "(", "-", "h", "*", "w", ")", ":", "]", "\n", "pos_embed_weight", "=", "pos_embed_weight", ".", "transpose", "(", "1", ",", "2", ")", "\n", "n", ",", "c", ",", "hw", "=", "pos_embed_weight", ".", "shape", "\n", "h", "=", "w", "=", "int", "(", "math", ".", "sqrt", "(", "hw", ")", ")", "\n", "pos_embed_weight", "=", "pos_embed_weight", ".", "view", "(", "n", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "pos_embed_weight", "=", "F", ".", "interpolate", "(", "pos_embed_weight", ",", "size", "=", "int", "(", "math", ".", "sqrt", "(", "num_patches", ")", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "align_corners", ")", "\n", "pos_embed_weight", "=", "pos_embed_weight", ".", "view", "(", "n", ",", "c", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "cls_token_weight", "=", "state_dict", "[", "'pos_embed'", "]", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "state_dict", "[", "'pos_embed'", "]", "=", "torch", ".", "cat", "(", "(", "cls_token_weight", ",", "pos_embed_weight", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "strict", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.fast_scnn.LearningToDownsample.__init__": [[29, 65], ["dict", "dict", "torch.Module.__init__", "mmcv.cnn.ConvModule", "mmcv.cnn.DepthwiseSeparableConvModule", "mmcv.cnn.DepthwiseSeparableConvModule"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "dw_channels", ",", "\n", "out_channels", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ")", ":", "\n", "        ", "super", "(", "LearningToDownsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "dw_channels1", "=", "dw_channels", "[", "0", "]", "\n", "dw_channels2", "=", "dw_channels", "[", "1", "]", "\n", "\n", "self", ".", "conv", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "dw_channels1", ",", "\n", "3", ",", "\n", "stride", "=", "2", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "dsconv1", "=", "DepthwiseSeparableConvModule", "(", "\n", "dw_channels1", ",", "\n", "dw_channels2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "self", ".", "dsconv2", "=", "DepthwiseSeparableConvModule", "(", "\n", "dw_channels2", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.fast_scnn.LearningToDownsample.forward": [[66, 71], ["fast_scnn.LearningToDownsample.conv", "fast_scnn.LearningToDownsample.dsconv1", "fast_scnn.LearningToDownsample.dsconv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "dsconv1", "(", "x", ")", "\n", "x", "=", "self", ".", "dsconv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.fast_scnn.GlobalFeatureExtractor.__init__": [[106, 147], ["dict", "dict", "torch.Module.__init__", "fast_scnn.GlobalFeatureExtractor._make_layer", "fast_scnn.GlobalFeatureExtractor._make_layer", "fast_scnn.GlobalFeatureExtractor._make_layer", "mmseg.models.decode_heads.psp_head.PPM", "mmcv.cnn.ConvModule", "len", "len"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.fast_scnn.GlobalFeatureExtractor._make_layer", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.fast_scnn.GlobalFeatureExtractor._make_layer", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.fast_scnn.GlobalFeatureExtractor._make_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", "=", "64", ",", "\n", "block_channels", "=", "(", "64", ",", "96", ",", "128", ")", ",", "\n", "out_channels", "=", "128", ",", "\n", "expand_ratio", "=", "6", ",", "\n", "num_blocks", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "strides", "=", "(", "2", ",", "2", ",", "1", ")", ",", "\n", "pool_scales", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "align_corners", "=", "False", ")", ":", "\n", "        ", "super", "(", "GlobalFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "assert", "len", "(", "block_channels", ")", "==", "len", "(", "num_blocks", ")", "==", "3", "\n", "self", ".", "bottleneck1", "=", "self", ".", "_make_layer", "(", "in_channels", ",", "block_channels", "[", "0", "]", ",", "\n", "num_blocks", "[", "0", "]", ",", "strides", "[", "0", "]", ",", "\n", "expand_ratio", ")", "\n", "self", ".", "bottleneck2", "=", "self", ".", "_make_layer", "(", "block_channels", "[", "0", "]", ",", "\n", "block_channels", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "\n", "strides", "[", "1", "]", ",", "expand_ratio", ")", "\n", "self", ".", "bottleneck3", "=", "self", ".", "_make_layer", "(", "block_channels", "[", "1", "]", ",", "\n", "block_channels", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "\n", "strides", "[", "2", "]", ",", "expand_ratio", ")", "\n", "self", ".", "ppm", "=", "PPM", "(", "\n", "pool_scales", ",", "\n", "block_channels", "[", "2", "]", ",", "\n", "block_channels", "[", "2", "]", "//", "4", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "align_corners", "=", "align_corners", ")", "\n", "self", ".", "out", "=", "ConvModule", "(", "\n", "block_channels", "[", "2", "]", "*", "2", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.fast_scnn.GlobalFeatureExtractor._make_layer": [[148, 171], ["range", "torch.Sequential", "torch.Sequential", "utils.inverted_residual.InvertedResidual", "layers.append", "utils.inverted_residual.InvertedResidual"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "blocks", ",", "\n", "stride", "=", "1", ",", "\n", "expand_ratio", "=", "6", ")", ":", "\n", "        ", "layers", "=", "[", "\n", "InvertedResidual", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", ",", "\n", "expand_ratio", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "InvertedResidual", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "expand_ratio", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.fast_scnn.GlobalFeatureExtractor.forward": [[172, 179], ["fast_scnn.GlobalFeatureExtractor.bottleneck1", "fast_scnn.GlobalFeatureExtractor.bottleneck2", "fast_scnn.GlobalFeatureExtractor.bottleneck3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fast_scnn.GlobalFeatureExtractor.out", "fast_scnn.GlobalFeatureExtractor.ppm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bottleneck1", "(", "x", ")", "\n", "x", "=", "self", ".", "bottleneck2", "(", "x", ")", "\n", "x", "=", "self", ".", "bottleneck3", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "*", "self", ".", "ppm", "(", "x", ")", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "out", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.fast_scnn.FeatureFusionModule.__init__": [[199, 234], ["dict", "dict", "torch.Module.__init__", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "higher_in_channels", ",", "\n", "lower_in_channels", ",", "\n", "out_channels", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "align_corners", "=", "False", ")", ":", "\n", "        ", "super", "(", "FeatureFusionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "self", ".", "dwconv", "=", "ConvModule", "(", "\n", "lower_in_channels", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "conv_lower_res", "=", "ConvModule", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "self", ".", "conv_higher_res", "=", "ConvModule", "(", "\n", "higher_in_channels", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.fast_scnn.FeatureFusionModule.forward": [[235, 247], ["mmseg.ops.resize", "fast_scnn.FeatureFusionModule.dwconv", "fast_scnn.FeatureFusionModule.conv_lower_res", "fast_scnn.FeatureFusionModule.conv_higher_res", "fast_scnn.FeatureFusionModule.relu", "fast_scnn.FeatureFusionModule.size"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "higher_res_feature", ",", "lower_res_feature", ")", ":", "\n", "        ", "lower_res_feature", "=", "resize", "(", "\n", "lower_res_feature", ",", "\n", "size", "=", "higher_res_feature", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "lower_res_feature", "=", "self", ".", "dwconv", "(", "lower_res_feature", ")", "\n", "lower_res_feature", "=", "self", ".", "conv_lower_res", "(", "lower_res_feature", ")", "\n", "\n", "higher_res_feature", "=", "self", ".", "conv_higher_res", "(", "higher_res_feature", ")", "\n", "out", "=", "higher_res_feature", "+", "lower_res_feature", "\n", "return", "self", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.fast_scnn.FastSCNN.__init__": [[296, 359], ["dict", "dict", "torch.Module.__init__", "fast_scnn.LearningToDownsample", "fast_scnn.GlobalFeatureExtractor", "fast_scnn.FeatureFusionModule", "AssertionError", "AssertionError"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", "=", "3", ",", "\n", "downsample_dw_channels", "=", "(", "32", ",", "48", ")", ",", "\n", "global_in_channels", "=", "64", ",", "\n", "global_block_channels", "=", "(", "64", ",", "96", ",", "128", ")", ",", "\n", "global_block_strides", "=", "(", "2", ",", "2", ",", "1", ")", ",", "\n", "global_out_channels", "=", "128", ",", "\n", "higher_in_channels", "=", "64", ",", "\n", "lower_in_channels", "=", "128", ",", "\n", "fusion_out_channels", "=", "128", ",", "\n", "out_indices", "=", "(", "0", ",", "1", ",", "2", ")", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "align_corners", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "FastSCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "global_in_channels", "!=", "higher_in_channels", ":", "\n", "            ", "raise", "AssertionError", "(", "'Global Input Channels must be the same \\\n                                 with Higher Input Channels!'", ")", "\n", "", "elif", "global_out_channels", "!=", "lower_in_channels", ":", "\n", "            ", "raise", "AssertionError", "(", "'Global Output Channels must be the same \\\n                                with Lower Input Channels!'", ")", "\n", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "downsample_dw_channels1", "=", "downsample_dw_channels", "[", "0", "]", "\n", "self", ".", "downsample_dw_channels2", "=", "downsample_dw_channels", "[", "1", "]", "\n", "self", ".", "global_in_channels", "=", "global_in_channels", "\n", "self", ".", "global_block_channels", "=", "global_block_channels", "\n", "self", ".", "global_block_strides", "=", "global_block_strides", "\n", "self", ".", "global_out_channels", "=", "global_out_channels", "\n", "self", ".", "higher_in_channels", "=", "higher_in_channels", "\n", "self", ".", "lower_in_channels", "=", "lower_in_channels", "\n", "self", ".", "fusion_out_channels", "=", "fusion_out_channels", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "self", ".", "learning_to_downsample", "=", "LearningToDownsample", "(", "\n", "in_channels", ",", "\n", "downsample_dw_channels", ",", "\n", "global_in_channels", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "global_feature_extractor", "=", "GlobalFeatureExtractor", "(", "\n", "global_in_channels", ",", "\n", "global_block_channels", ",", "\n", "global_out_channels", ",", "\n", "strides", "=", "self", ".", "global_block_strides", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "self", ".", "feature_fusion", "=", "FeatureFusionModule", "(", "\n", "higher_in_channels", ",", "\n", "lower_in_channels", ",", "\n", "fusion_out_channels", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.fast_scnn.FastSCNN.init_weights": [[360, 366], ["fast_scnn.FastSCNN.modules", "isinstance", "mmcv.cnn.kaiming_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "constant_init", "(", "m", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.fast_scnn.FastSCNN.forward": [[367, 376], ["fast_scnn.FastSCNN.learning_to_downsample", "fast_scnn.FastSCNN.global_feature_extractor", "fast_scnn.FastSCNN.feature_fusion", "tuple"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "higher_res_features", "=", "self", ".", "learning_to_downsample", "(", "x", ")", "\n", "lower_res_features", "=", "self", ".", "global_feature_extractor", "(", "higher_res_features", ")", "\n", "fusion_output", "=", "self", ".", "feature_fusion", "(", "higher_res_features", ",", "\n", "lower_res_features", ")", "\n", "\n", "outs", "=", "[", "higher_res_features", ",", "lower_res_features", ",", "fusion_output", "]", "\n", "outs", "=", "[", "outs", "[", "i", "]", "for", "i", "in", "self", ".", "out_indices", "]", "\n", "return", "tuple", "(", "outs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnext.Bottleneck.__init__": [[18, 84], ["resnet.Bottleneck.__init__", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_conv_layer", "resnext.Bottleneck.add_module", "resnext.Bottleneck.add_module", "mmcv.cnn.build_conv_layer", "resnext.Bottleneck.add_module", "resnext.Bottleneck.dcn.pop", "mmcv.cnn.build_conv_layer", "mmcv.cnn.build_conv_layer", "math.floor"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "4", ",", "\n", "base_channels", "=", "64", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", "inplanes", ",", "planes", ",", "**", "kwargs", ")", "\n", "\n", "if", "groups", "==", "1", ":", "\n", "            ", "width", "=", "self", ".", "planes", "\n", "", "else", ":", "\n", "            ", "width", "=", "math", ".", "floor", "(", "self", ".", "planes", "*", "\n", "(", "base_width", "/", "base_channels", ")", ")", "*", "groups", "\n", "\n", "", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "width", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "width", ",", "postfix", "=", "2", ")", "\n", "self", ".", "norm3_name", ",", "norm3", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "self", ".", "planes", "*", "self", ".", "expansion", ",", "postfix", "=", "3", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "self", ".", "inplanes", ",", "\n", "width", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "self", ".", "conv1_stride", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "fallback_on_stride", "=", "False", "\n", "self", ".", "with_modulated_dcn", "=", "False", "\n", "if", "self", ".", "with_dcn", ":", "\n", "            ", "fallback_on_stride", "=", "self", ".", "dcn", ".", "pop", "(", "'fallback_on_stride'", ",", "False", ")", "\n", "", "if", "not", "self", ".", "with_dcn", "or", "fallback_on_stride", ":", "\n", "            ", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "width", ",", "\n", "width", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "self", ".", "dilation", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "conv_cfg", "is", "None", ",", "'conv_cfg must be None for DCN'", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "self", ".", "dcn", ",", "\n", "width", ",", "\n", "width", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "self", ".", "dilation", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "self", ".", "conv3", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "width", ",", "\n", "self", ".", "planes", "*", "self", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm3_name", ",", "norm3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnext.ResNeXt.__init__": [[134, 138], ["resnet.ResNet.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "groups", "=", "1", ",", "base_width", "=", "4", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "base_width", "\n", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.resnext.ResNeXt.make_res_layer": [[139, 146], ["utils.ResLayer"], "methods", ["None"], ["", "def", "make_res_layer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Pack all blocks in a stage into a ``ResLayer``\"\"\"", "\n", "return", "ResLayer", "(", "\n", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "base_channels", "=", "self", ".", "base_channels", ",", "\n", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.drop.DropBlock2d.__init__": [[112, 128], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drop_prob", "=", "0.1", ",", "\n", "block_size", "=", "7", ",", "\n", "gamma_scale", "=", "1.0", ",", "\n", "with_noise", "=", "False", ",", "\n", "inplace", "=", "False", ",", "\n", "batchwise", "=", "False", ",", "\n", "fast", "=", "True", ")", ":", "\n", "        ", "super", "(", "DropBlock2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "self", ".", "gamma_scale", "=", "gamma_scale", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "with_noise", "=", "with_noise", "\n", "self", ".", "inplace", "=", "inplace", "\n", "self", ".", "batchwise", "=", "batchwise", "\n", "self", ".", "fast", "=", "fast", "# FIXME finish comparisons of fast vs not", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.drop.DropBlock2d.forward": [[129, 138], ["drop.drop_block_fast_2d", "drop.drop_block_2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.drop.drop_block_fast_2d", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.drop.drop_block_2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", "or", "not", "self", ".", "drop_prob", ":", "\n", "            ", "return", "x", "\n", "", "if", "self", ".", "fast", ":", "\n", "            ", "return", "drop_block_fast_2d", "(", "\n", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "block_size", ",", "self", ".", "gamma_scale", ",", "self", ".", "with_noise", ",", "self", ".", "inplace", ",", "self", ".", "batchwise", ")", "\n", "", "else", ":", "\n", "            ", "return", "drop_block_2d", "(", "\n", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "block_size", ",", "self", ".", "gamma_scale", ",", "self", ".", "with_noise", ",", "self", ".", "inplace", ",", "self", ".", "batchwise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.drop.DropPath.__init__": [[163, 166], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.drop.DropPath.forward": [[167, 169], ["drop.drop_path"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.drop.drop_block_2d": [[22, 68], ["min", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.reshape().to", "torch.reshape().to", "torch.reshape().to", "min", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.rand", "torch.rand", "torch.rand", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.max_pool2d", "torch.reshape", "torch.reshape", "torch.reshape", "torch.randn", "torch.randn", "torch.randn", "torch.randn_like", "torch.randn_like", "torch.randn_like", "x.mul_().add_", "x.mul_", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.mul_", "block_mask.numel", "block_mask.to().sum().add", "block_mask.to().sum", "block_mask.to"], "function", ["None"], ["def", "drop_block_2d", "(", "\n", "x", ",", "drop_prob", ":", "float", "=", "0.1", ",", "block_size", ":", "int", "=", "7", ",", "gamma_scale", ":", "float", "=", "1.0", ",", "\n", "with_noise", ":", "bool", "=", "False", ",", "inplace", ":", "bool", "=", "False", ",", "batchwise", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\" DropBlock. See https://arxiv.org/pdf/1810.12890.pdf\n\n    DropBlock with an experimental gaussian noise option. This layer has been tested on a few training\n    runs with success, but needs further validation and possibly optimization for lower runtime impact.\n    \"\"\"", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "total_size", "=", "W", "*", "H", "\n", "clipped_block_size", "=", "min", "(", "block_size", ",", "min", "(", "W", ",", "H", ")", ")", "\n", "# seed_drop_rate, the gamma parameter", "\n", "gamma", "=", "gamma_scale", "*", "drop_prob", "*", "total_size", "/", "clipped_block_size", "**", "2", "/", "(", "\n", "(", "W", "-", "block_size", "+", "1", ")", "*", "(", "H", "-", "block_size", "+", "1", ")", ")", "\n", "\n", "# Forces the block to be inside the feature map.", "\n", "w_i", ",", "h_i", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "W", ")", ".", "to", "(", "x", ".", "device", ")", ",", "torch", ".", "arange", "(", "H", ")", ".", "to", "(", "x", ".", "device", ")", ")", "\n", "valid_block", "=", "(", "(", "w_i", ">=", "clipped_block_size", "//", "2", ")", "&", "(", "w_i", "<", "W", "-", "(", "clipped_block_size", "-", "1", ")", "//", "2", ")", ")", "&", "(", "(", "h_i", ">=", "clipped_block_size", "//", "2", ")", "&", "(", "h_i", "<", "H", "-", "(", "clipped_block_size", "-", "1", ")", "//", "2", ")", ")", "\n", "valid_block", "=", "torch", ".", "reshape", "(", "valid_block", ",", "(", "1", ",", "1", ",", "H", ",", "W", ")", ")", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "if", "batchwise", ":", "\n", "# one mask for whole batch, quite a bit faster", "\n", "        ", "uniform_noise", "=", "torch", ".", "rand", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "uniform_noise", "=", "torch", ".", "rand_like", "(", "x", ")", "\n", "", "block_mask", "=", "(", "(", "2", "-", "gamma", "-", "valid_block", "+", "uniform_noise", ")", ">=", "1", ")", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ")", "\n", "block_mask", "=", "-", "F", ".", "max_pool2d", "(", "\n", "-", "block_mask", ",", "\n", "kernel_size", "=", "clipped_block_size", ",", "# block_size,", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "clipped_block_size", "//", "2", ")", "\n", "\n", "if", "with_noise", ":", "\n", "        ", "normal_noise", "=", "torch", ".", "randn", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "if", "batchwise", "else", "torch", ".", "randn_like", "(", "x", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "block_mask", ")", ".", "add_", "(", "normal_noise", "*", "(", "1", "-", "block_mask", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "block_mask", "+", "normal_noise", "*", "(", "1", "-", "block_mask", ")", "\n", "", "", "else", ":", "\n", "        ", "normalize_scale", "=", "(", "block_mask", ".", "numel", "(", ")", "/", "block_mask", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "sum", "(", ")", ".", "add", "(", "1e-7", ")", ")", ".", "to", "(", "x", ".", "dtype", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "block_mask", "*", "normalize_scale", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "block_mask", "*", "normalize_scale", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.drop.drop_block_fast_2d": [[70, 107], ["min", "torch.max_pool2d", "min", "F.max_pool2d.to", "torch.rand", "torch.rand", "torch.rand", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.randn", "torch.randn", "torch.randn", "torch.randn_like", "torch.randn_like", "torch.randn_like", "x.mul_().add_", "x.mul_", "x.mul_", "F.max_pool2d.numel", "F.max_pool2d.to().sum().add", "F.max_pool2d.to().sum", "F.max_pool2d.to"], "function", ["None"], ["", "def", "drop_block_fast_2d", "(", "\n", "x", ":", "torch", ".", "Tensor", ",", "drop_prob", ":", "float", "=", "0.1", ",", "block_size", ":", "int", "=", "7", ",", "\n", "gamma_scale", ":", "float", "=", "1.0", ",", "with_noise", ":", "bool", "=", "False", ",", "inplace", ":", "bool", "=", "False", ",", "batchwise", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\" DropBlock. See https://arxiv.org/pdf/1810.12890.pdf\n\n    DropBlock with an experimental gaussian noise option. Simplied from above without concern for valid\n    block mask at edges.\n    \"\"\"", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "total_size", "=", "W", "*", "H", "\n", "clipped_block_size", "=", "min", "(", "block_size", ",", "min", "(", "W", ",", "H", ")", ")", "\n", "gamma", "=", "gamma_scale", "*", "drop_prob", "*", "total_size", "/", "clipped_block_size", "**", "2", "/", "(", "\n", "(", "W", "-", "block_size", "+", "1", ")", "*", "(", "H", "-", "block_size", "+", "1", ")", ")", "\n", "\n", "if", "batchwise", ":", "\n", "# one mask for whole batch, quite a bit faster", "\n", "        ", "block_mask", "=", "torch", ".", "rand", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "<", "gamma", "\n", "", "else", ":", "\n", "# mask per batch element", "\n", "        ", "block_mask", "=", "torch", ".", "rand_like", "(", "x", ")", "<", "gamma", "\n", "", "block_mask", "=", "F", ".", "max_pool2d", "(", "\n", "block_mask", ".", "to", "(", "x", ".", "dtype", ")", ",", "kernel_size", "=", "clipped_block_size", ",", "stride", "=", "1", ",", "padding", "=", "clipped_block_size", "//", "2", ")", "\n", "\n", "if", "with_noise", ":", "\n", "        ", "normal_noise", "=", "torch", ".", "randn", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "if", "batchwise", "else", "torch", ".", "randn_like", "(", "x", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "1.", "-", "block_mask", ")", ".", "add_", "(", "normal_noise", "*", "block_mask", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "(", "1.", "-", "block_mask", ")", "+", "normal_noise", "*", "block_mask", "\n", "", "", "else", ":", "\n", "        ", "block_mask", "=", "1", "-", "block_mask", "\n", "normalize_scale", "=", "(", "block_mask", ".", "numel", "(", ")", "/", "block_mask", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "sum", "(", ")", ".", "add", "(", "1e-7", ")", ")", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "block_mask", "*", "normalize_scale", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "block_mask", "*", "normalize_scale", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.drop.drop_path": [[140, 158], ["random_tensor.floor_", "torch.rand", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["", "", "", "def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).\n\n    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,\n    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...\n    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for\n    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use\n    'survival rate' as the argument.\n\n    \"\"\"", "\n", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.helpers._ntuple": [[10, 16], ["isinstance", "tuple", "itertools.repeat"], "function", ["None"], ["import", "sys", "\n", "import", "re", "\n", "import", "zipfile", "\n", "from", "urllib", ".", "parse", "import", "urlparse", "# noqa: F401", "\n", "\n", "HASH_REGEX", "=", "re", ".", "compile", "(", "r'-([a-f0-9]*)\\.'", ")", "\n", "_logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.weight_init._no_grad_trunc_normal_": [[6, 40], ["warnings.warn", "torch.no_grad", "weight_init._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", "\n", "stacklevel", "=", "2", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.weight_init.trunc_normal_": [[42, 61], ["weight_init._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.weight_init._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "r\"\"\"Fills the input Tensor with values drawn from a truncated\n    normal distribution. The values are effectively drawn from the\n    normal distribution :math:`\\mathcal{N}(\\text{mean}, \\text{std}^2)`\n    with values outside :math:`[a, b]` redrawn until they are within\n    the bounds. The method used for generating the random values works\n    best when :math:`a \\leq \\text{mean} \\leq b`.\n    Args:\n        tensor: an n-dimensional `torch.Tensor`\n        mean: the mean of the normal distribution\n        std: the standard deviation of the normal distribution\n        a: the minimum cutoff value\n        b: the maximum cutoff value\n    Examples:\n        >>> w = torch.empty(3, 5)\n        >>> nn.init.trunc_normal_(w)\n    \"\"\"", "\n", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.__init__": [[19, 22], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseSegmentor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.with_neck": [[23, 27], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_neck", "(", "self", ")", ":", "\n", "        ", "\"\"\"bool: whether the segmentor has neck\"\"\"", "\n", "return", "hasattr", "(", "self", ",", "'neck'", ")", "and", "self", ".", "neck", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.with_auxiliary_head": [[28, 33], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_auxiliary_head", "(", "self", ")", ":", "\n", "        ", "\"\"\"bool: whether the segmentor has auxiliary head\"\"\"", "\n", "return", "hasattr", "(", "self", ",", "\n", "'auxiliary_head'", ")", "and", "self", ".", "auxiliary_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.with_decode_head": [[34, 38], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_decode_head", "(", "self", ")", ":", "\n", "        ", "\"\"\"bool: whether the segmentor has decode head\"\"\"", "\n", "return", "hasattr", "(", "self", ",", "'decode_head'", ")", "and", "self", ".", "decode_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.extract_feat": [[39, 43], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "extract_feat", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "\"\"\"Placeholder for extract features from images.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.encode_decode": [[44, 49], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "encode_decode", "(", "self", ",", "img", ",", "img_metas", ")", ":", "\n", "        ", "\"\"\"Placeholder for encode images with backbone and decode into a\n        semantic segmentation map of the same size as input.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.forward_train": [[50, 54], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "forward_train", "(", "self", ",", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Placeholder for Forward function for training.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.simple_test": [[55, 59], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "simple_test", "(", "self", ",", "img", ",", "img_meta", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Placeholder for single image test.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.aug_test": [[60, 64], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Placeholder for augmentation test.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.init_weights": [[65, 75], ["logging.getLogger", "logging.getLogger.info"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize the weights in segmentor.\n\n        Args:\n            pretrained (str, optional): Path to pre-trained weights.\n                Defaults to None.\n        \"\"\"", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "info", "(", "f'load model from: {pretrained}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.forward_test": [[76, 109], ["len", "len", "ValueError", "all", "all", "all", "base.BaseSegmentor.simple_test", "base.BaseSegmentor.aug_test", "isinstance", "TypeError", "len", "len", "type"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.simple_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.aug_test"], ["", "", "def", "forward_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            imgs (List[Tensor]): the outer list indicates test-time\n                augmentations and inner Tensor should have a shape NxCxHxW,\n                which contains all images in the batch.\n            img_metas (List[List[dict]]): the outer list indicates test-time\n                augs (multiscale, flip, etc.) and the inner list indicates\n                images in a batch.\n        \"\"\"", "\n", "for", "var", ",", "name", "in", "[", "(", "imgs", ",", "'imgs'", ")", ",", "(", "img_metas", ",", "'img_metas'", ")", "]", ":", "\n", "            ", "if", "not", "isinstance", "(", "var", ",", "list", ")", ":", "\n", "                ", "raise", "TypeError", "(", "f'{name} must be a list, but got '", "\n", "f'{type(var)}'", ")", "\n", "\n", "", "", "num_augs", "=", "len", "(", "imgs", ")", "\n", "if", "num_augs", "!=", "len", "(", "img_metas", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f'num of augmentations ({len(imgs)}) != '", "\n", "f'num of image meta ({len(img_metas)})'", ")", "\n", "# all images in the same aug batch all of the same ori_shape and pad", "\n", "# shape", "\n", "", "for", "img_meta", "in", "img_metas", ":", "\n", "            ", "ori_shapes", "=", "[", "_", "[", "'ori_shape'", "]", "for", "_", "in", "img_meta", "]", "\n", "assert", "all", "(", "shape", "==", "ori_shapes", "[", "0", "]", "for", "shape", "in", "ori_shapes", ")", "\n", "img_shapes", "=", "[", "_", "[", "'img_shape'", "]", "for", "_", "in", "img_meta", "]", "\n", "assert", "all", "(", "shape", "==", "img_shapes", "[", "0", "]", "for", "shape", "in", "img_shapes", ")", "\n", "pad_shapes", "=", "[", "_", "[", "'pad_shape'", "]", "for", "_", "in", "img_meta", "]", "\n", "assert", "all", "(", "shape", "==", "pad_shapes", "[", "0", "]", "for", "shape", "in", "pad_shapes", ")", "\n", "\n", "", "if", "num_augs", "==", "1", ":", "\n", "            ", "return", "self", ".", "simple_test", "(", "imgs", "[", "0", "]", ",", "img_metas", "[", "0", "]", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "aug_test", "(", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.forward": [[110, 125], ["mmcv.runner.auto_fp16", "base.BaseSegmentor.forward_train", "base.BaseSegmentor.forward_test"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward_train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward_test"], ["", "", "@", "auto_fp16", "(", "apply_to", "=", "(", "'img'", ",", ")", ")", "\n", "def", "forward", "(", "self", ",", "img", ",", "img_metas", ",", "return_loss", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calls either :func:`forward_train` or :func:`forward_test` depending\n        on whether ``return_loss`` is ``True``.\n\n        Note this setting will change the expected inputs. When\n        ``return_loss=True``, img and img_meta are single-nested (i.e. Tensor\n        and List[dict]), and when ``resturn_loss=False``, img and img_meta\n        should be double nested (i.e.  List[Tensor], List[List[dict]]), with\n        the outer list indicating test time augmentations.\n        \"\"\"", "\n", "if", "return_loss", ":", "\n", "            ", "return", "self", ".", "forward_train", "(", "img", ",", "img_metas", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "forward_test", "(", "img", ",", "img_metas", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.train_step": [[126, 161], ["base.BaseSegmentor.", "base.BaseSegmentor._parse_losses", "dict", "len"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor._parse_losses"], ["", "", "def", "train_step", "(", "self", ",", "data_batch", ",", "optimizer", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"The iteration step during training.\n\n        This method defines an iteration step during training, except for the\n        back propagation and optimizer updating, which are done in an optimizer\n        hook. Note that in some complicated cases or models, the whole process\n        including back propagation and optimizer updating is also defined in\n        this method, such as GAN.\n\n        Args:\n            data (dict): The output of dataloader.\n            optimizer (:obj:`torch.optim.Optimizer` | dict): The optimizer of\n                runner is passed to ``train_step()``. This argument is unused\n                and reserved.\n\n        Returns:\n            dict: It should contain at least 3 keys: ``loss``, ``log_vars``,\n                ``num_samples``.\n                ``loss`` is a tensor for back propagation, which can be a\n                weighted sum of multiple losses.\n                ``log_vars`` contains all the variables to be sent to the\n                logger.\n                ``num_samples`` indicates the batch size (when the model is\n                DDP, it means the batch size on each GPU), which is used for\n                averaging the logs.\n        \"\"\"", "\n", "losses", "=", "self", "(", "**", "data_batch", ")", "\n", "loss", ",", "log_vars", "=", "self", ".", "_parse_losses", "(", "losses", ")", "\n", "\n", "outputs", "=", "dict", "(", "\n", "loss", "=", "loss", ",", "\n", "log_vars", "=", "log_vars", ",", "\n", "num_samples", "=", "len", "(", "data_batch", "[", "'img'", "]", ".", "data", ")", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.val_step": [[162, 171], ["base.BaseSegmentor."], "methods", ["None"], ["", "def", "val_step", "(", "self", ",", "data_batch", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"The iteration step during validation.\n\n        This method shares the same signature as :func:`train_step`, but used\n        during val epochs. Note that the evaluation after training epochs is\n        not implemented with this method, but an evaluation hook.\n        \"\"\"", "\n", "output", "=", "self", "(", "**", "data_batch", ",", "**", "kwargs", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor._parse_losses": [[172, 207], ["collections.OrderedDict", "losses.items", "sum", "collections.OrderedDict.items", "isinstance", "loss_value.data.clone.data.clone.item", "loss_value.data.clone.data.clone.mean", "isinstance", "torch.is_available", "torch.is_available", "torch.is_available", "torch.is_initialized", "torch.is_initialized", "torch.is_initialized", "loss_value.data.clone.data.clone.data.clone", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "sum", "TypeError", "collections.OrderedDict.items", "loss_value.data.clone.data.clone.div_", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "_loss.mean"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.get_world_size", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.get_world_size", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.get_world_size"], ["", "@", "staticmethod", "\n", "def", "_parse_losses", "(", "losses", ")", ":", "\n", "        ", "\"\"\"Parse the raw outputs (losses) of the network.\n\n        Args:\n            losses (dict): Raw output of the network, which usually contain\n                losses and other necessary information.\n\n        Returns:\n            tuple[Tensor, dict]: (loss, log_vars), loss is the loss tensor\n                which may be a weighted sum of all losses, log_vars contains\n                all the variables to be sent to the logger.\n        \"\"\"", "\n", "log_vars", "=", "OrderedDict", "(", ")", "\n", "for", "loss_name", ",", "loss_value", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "loss_value", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "log_vars", "[", "loss_name", "]", "=", "loss_value", ".", "mean", "(", ")", "\n", "", "elif", "isinstance", "(", "loss_value", ",", "list", ")", ":", "\n", "                ", "log_vars", "[", "loss_name", "]", "=", "sum", "(", "_loss", ".", "mean", "(", ")", "for", "_loss", "in", "loss_value", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "f'{loss_name} is not a tensor or list of tensors'", ")", "\n", "\n", "", "", "loss", "=", "sum", "(", "_value", "for", "_key", ",", "_value", "in", "log_vars", ".", "items", "(", ")", "\n", "if", "'loss'", "in", "_key", ")", "\n", "\n", "log_vars", "[", "'loss'", "]", "=", "loss", "\n", "for", "loss_name", ",", "loss_value", "in", "log_vars", ".", "items", "(", ")", ":", "\n", "# reduce loss when distributed training", "\n", "            ", "if", "dist", ".", "is_available", "(", ")", "and", "dist", ".", "is_initialized", "(", ")", ":", "\n", "                ", "loss_value", "=", "loss_value", ".", "data", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "loss_value", ".", "div_", "(", "dist", ".", "get_world_size", "(", ")", ")", ")", "\n", "", "log_vars", "[", "loss_name", "]", "=", "loss_value", ".", "item", "(", ")", "\n", "\n", "", "return", "loss", ",", "log_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.base.BaseSegmentor.show_result": [[208, 270], ["mmcv.imread", "img.astype.astype.copy", "numpy.array", "numpy.zeros", "enumerate", "img.astype.astype.astype", "len", "len", "mmcv.imshow", "mmcv.imwrite", "warnings.warn", "numpy.random.randint", "len"], "methods", ["None"], ["", "def", "show_result", "(", "self", ",", "\n", "img", ",", "\n", "result", ",", "\n", "palette", "=", "None", ",", "\n", "win_name", "=", "''", ",", "\n", "show", "=", "False", ",", "\n", "wait_time", "=", "0", ",", "\n", "out_file", "=", "None", ")", ":", "\n", "        ", "\"\"\"Draw `result` over `img`.\n\n        Args:\n            img (str or Tensor): The image to be displayed.\n            result (Tensor): The semantic segmentation results to draw over\n                `img`.\n            palette (list[list[int]]] | np.ndarray | None): The palette of\n                segmentation map. If None is given, random palette will be\n                generated. Default: None\n            win_name (str): The window name.\n            wait_time (int): Value of waitKey param.\n                Default: 0.\n            show (bool): Whether to show the image.\n                Default: False.\n            out_file (str or None): The filename to write the image.\n                Default: None.\n\n        Returns:\n            img (Tensor): Only if not `show` or `out_file`\n        \"\"\"", "\n", "img", "=", "mmcv", ".", "imread", "(", "img", ")", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "seg", "=", "result", "[", "0", "]", "\n", "if", "palette", "is", "None", ":", "\n", "            ", "if", "self", ".", "PALETTE", "is", "None", ":", "\n", "                ", "palette", "=", "np", ".", "random", ".", "randint", "(", "\n", "0", ",", "255", ",", "size", "=", "(", "len", "(", "self", ".", "CLASSES", ")", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "                ", "palette", "=", "self", ".", "PALETTE", "\n", "", "", "palette", "=", "np", ".", "array", "(", "palette", ")", "\n", "assert", "palette", ".", "shape", "[", "0", "]", "==", "len", "(", "self", ".", "CLASSES", ")", "\n", "assert", "palette", ".", "shape", "[", "1", "]", "==", "3", "\n", "assert", "len", "(", "palette", ".", "shape", ")", "==", "2", "\n", "color_seg", "=", "np", ".", "zeros", "(", "(", "seg", ".", "shape", "[", "0", "]", ",", "seg", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "label", ",", "color", "in", "enumerate", "(", "palette", ")", ":", "\n", "            ", "color_seg", "[", "seg", "==", "label", ",", ":", "]", "=", "color", "\n", "# convert to BGR", "\n", "", "color_seg", "=", "color_seg", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "\n", "img", "=", "img", "*", "0.5", "+", "color_seg", "*", "0.5", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# if out_file specified, do not show image in window", "\n", "if", "out_file", "is", "not", "None", ":", "\n", "            ", "show", "=", "False", "\n", "\n", "", "if", "show", ":", "\n", "            ", "mmcv", ".", "imshow", "(", "img", ",", "win_name", ",", "wait_time", ")", "\n", "", "if", "out_file", "is", "not", "None", ":", "\n", "            ", "mmcv", ".", "imwrite", "(", "img", ",", "out_file", ")", "\n", "\n", "", "if", "not", "(", "show", "or", "out_file", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "'show==False and out_file is not specified, only '", "\n", "'result image will be returned'", ")", "\n", "return", "img", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.cascade_encoder_decoder.CascadeEncoderDecoder.__init__": [[19, 37], ["encoder_decoder.EncoderDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_stages", ",", "\n", "backbone", ",", "\n", "decode_head", ",", "\n", "neck", "=", "None", ",", "\n", "auxiliary_head", "=", "None", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_stages", "=", "num_stages", "\n", "super", "(", "CascadeEncoderDecoder", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", "=", "backbone", ",", "\n", "decode_head", "=", "decode_head", ",", "\n", "neck", "=", "neck", ",", "\n", "auxiliary_head", "=", "auxiliary_head", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "test_cfg", "=", "test_cfg", ",", "\n", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.cascade_encoder_decoder.CascadeEncoderDecoder._init_decode_head": [[38, 47], ["isinstance", "torch.nn.ModuleList", "range", "len", "cascade_encoder_decoder.CascadeEncoderDecoder.decode_head.append", "builder.build_head"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_head"], ["", "def", "_init_decode_head", "(", "self", ",", "decode_head", ")", ":", "\n", "        ", "\"\"\"Initialize ``decode_head``\"\"\"", "\n", "assert", "isinstance", "(", "decode_head", ",", "list", ")", "\n", "assert", "len", "(", "decode_head", ")", "==", "self", ".", "num_stages", "\n", "self", ".", "decode_head", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "self", ".", "decode_head", ".", "append", "(", "builder", ".", "build_head", "(", "decode_head", "[", "i", "]", ")", ")", "\n", "", "self", ".", "align_corners", "=", "self", ".", "decode_head", "[", "-", "1", "]", ".", "align_corners", "\n", "self", ".", "num_classes", "=", "self", ".", "decode_head", "[", "-", "1", "]", ".", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.cascade_encoder_decoder.CascadeEncoderDecoder.init_weights": [[48, 64], ["cascade_encoder_decoder.CascadeEncoderDecoder.backbone.init_weights", "range", "cascade_encoder_decoder.CascadeEncoderDecoder.decode_head[].init_weights", "isinstance", "cascade_encoder_decoder.CascadeEncoderDecoder.auxiliary_head.init_weights", "aux_head.init_weights"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize the weights in backbone and heads.\n\n        Args:\n            pretrained (str, optional): Path to pre-trained weights.\n                Defaults to None.\n        \"\"\"", "\n", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "self", ".", "decode_head", "[", "i", "]", ".", "init_weights", "(", ")", "\n", "", "if", "self", ".", "with_auxiliary_head", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "auxiliary_head", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "for", "aux_head", "in", "self", ".", "auxiliary_head", ":", "\n", "                    ", "aux_head", ".", "init_weights", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "auxiliary_head", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.cascade_encoder_decoder.CascadeEncoderDecoder.encode_decode": [[65, 79], ["cascade_encoder_decoder.CascadeEncoderDecoder.extract_feat", "cascade_encoder_decoder.CascadeEncoderDecoder.decode_head[].forward_test", "range", "mmseg.ops.resize", "cascade_encoder_decoder.CascadeEncoderDecoder.decode_head[].forward_test"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.extract_feat", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward_test"], ["", "", "", "def", "encode_decode", "(", "self", ",", "img", ",", "img_metas", ")", ":", "\n", "        ", "\"\"\"Encode images with backbone and decode into a semantic segmentation\n        map of the same size as input.\"\"\"", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "out", "=", "self", ".", "decode_head", "[", "0", "]", ".", "forward_test", "(", "x", ",", "img_metas", ",", "self", ".", "test_cfg", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_stages", ")", ":", "\n", "            ", "out", "=", "self", ".", "decode_head", "[", "i", "]", ".", "forward_test", "(", "x", ",", "out", ",", "img_metas", ",", "\n", "self", ".", "test_cfg", ")", "\n", "", "out", "=", "resize", "(", "\n", "input", "=", "out", ",", "\n", "size", "=", "img", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.cascade_encoder_decoder.CascadeEncoderDecoder._decode_head_forward_train": [[80, 99], ["dict", "cascade_encoder_decoder.CascadeEncoderDecoder.decode_head[].forward_train", "dict.update", "range", "mmseg.core.add_prefix", "cascade_encoder_decoder.CascadeEncoderDecoder.decode_head[].forward_test", "cascade_encoder_decoder.CascadeEncoderDecoder.decode_head[].forward_train", "dict.update", "mmseg.core.add_prefix"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward_train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.misc.add_prefix", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward_train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.misc.add_prefix"], ["", "def", "_decode_head_forward_train", "(", "self", ",", "x", ",", "img_metas", ",", "gt_semantic_seg", ")", ":", "\n", "        ", "\"\"\"Run forward function and calculate loss for decode head in\n        training.\"\"\"", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "loss_decode", "=", "self", ".", "decode_head", "[", "0", "]", ".", "forward_train", "(", "\n", "x", ",", "img_metas", ",", "gt_semantic_seg", ",", "self", ".", "train_cfg", ")", "\n", "\n", "losses", ".", "update", "(", "add_prefix", "(", "loss_decode", ",", "'decode_0'", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_stages", ")", ":", "\n", "# forward test again, maybe unnecessary for most methods.", "\n", "            ", "prev_outputs", "=", "self", ".", "decode_head", "[", "i", "-", "1", "]", ".", "forward_test", "(", "\n", "x", ",", "img_metas", ",", "self", ".", "test_cfg", ")", "\n", "loss_decode", "=", "self", ".", "decode_head", "[", "i", "]", ".", "forward_train", "(", "\n", "x", ",", "prev_outputs", ",", "img_metas", ",", "gt_semantic_seg", ",", "self", ".", "train_cfg", ")", "\n", "losses", ".", "update", "(", "add_prefix", "(", "loss_decode", ",", "f'decode_{i}'", ")", ")", "\n", "\n", "", "return", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.__init__": [[21, 42], ["base.BaseSegmentor.__init__", "builder.build_backbone", "encoder_decoder.EncoderDecoder._init_decode_head", "encoder_decoder.EncoderDecoder._init_auxiliary_head", "encoder_decoder.EncoderDecoder.init_weights", "builder.build_neck"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_backbone", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder._init_decode_head", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder._init_auxiliary_head", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_neck"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "decode_head", ",", "\n", "neck", "=", "None", ",", "\n", "auxiliary_head", "=", "None", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "EncoderDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "if", "neck", "is", "not", "None", ":", "\n", "            ", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "\n", "", "self", ".", "_init_decode_head", "(", "decode_head", ")", "\n", "self", ".", "_init_auxiliary_head", "(", "auxiliary_head", ")", "\n", "\n", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "\n", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "assert", "self", ".", "with_decode_head", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder._init_decode_head": [[43, 48], ["builder.build_head"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_head"], ["", "def", "_init_decode_head", "(", "self", ",", "decode_head", ")", ":", "\n", "        ", "\"\"\"Initialize ``decode_head``\"\"\"", "\n", "self", ".", "decode_head", "=", "builder", ".", "build_head", "(", "decode_head", ")", "\n", "self", ".", "align_corners", "=", "self", ".", "decode_head", ".", "align_corners", "\n", "self", ".", "num_classes", "=", "self", ".", "decode_head", ".", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder._init_auxiliary_head": [[49, 58], ["isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "builder.build_head", "encoder_decoder.EncoderDecoder.auxiliary_head.append", "builder.build_head"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_head", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_head"], ["", "def", "_init_auxiliary_head", "(", "self", ",", "auxiliary_head", ")", ":", "\n", "        ", "\"\"\"Initialize ``auxiliary_head``\"\"\"", "\n", "if", "auxiliary_head", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "auxiliary_head", ",", "list", ")", ":", "\n", "                ", "self", ".", "auxiliary_head", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "head_cfg", "in", "auxiliary_head", ":", "\n", "                    ", "self", ".", "auxiliary_head", ".", "append", "(", "builder", ".", "build_head", "(", "head_cfg", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "auxiliary_head", "=", "builder", ".", "build_head", "(", "auxiliary_head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.init_weights": [[59, 76], ["super().init_weights", "encoder_decoder.EncoderDecoder.backbone.init_weights", "encoder_decoder.EncoderDecoder.decode_head.init_weights", "isinstance", "encoder_decoder.EncoderDecoder.auxiliary_head.init_weights", "aux_head.init_weights"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights"], ["", "", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize the weights in backbone and heads.\n\n        Args:\n            pretrained (str, optional): Path to pre-trained weights.\n                Defaults to None.\n        \"\"\"", "\n", "\n", "super", "(", "EncoderDecoder", ",", "self", ")", ".", "init_weights", "(", "pretrained", ")", "\n", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "decode_head", ".", "init_weights", "(", ")", "\n", "if", "self", ".", "with_auxiliary_head", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "auxiliary_head", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "for", "aux_head", "in", "self", ".", "auxiliary_head", ":", "\n", "                    ", "aux_head", ".", "init_weights", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "auxiliary_head", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.extract_feat": [[77, 83], ["encoder_decoder.EncoderDecoder.backbone", "encoder_decoder.EncoderDecoder.neck"], "methods", ["None"], ["", "", "", "def", "extract_feat", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Extract features from images.\"\"\"", "\n", "x", "=", "self", ".", "backbone", "(", "img", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.encode_decode": [[84, 95], ["encoder_decoder.EncoderDecoder.extract_feat", "encoder_decoder.EncoderDecoder._decode_head_forward_test", "mmseg.ops.resize"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.extract_feat", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder._decode_head_forward_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize"], ["", "def", "encode_decode", "(", "self", ",", "img", ",", "img_metas", ")", ":", "\n", "        ", "\"\"\"Encode images with backbone and decode into a semantic segmentation\n        map of the same size as input.\"\"\"", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "out", "=", "self", ".", "_decode_head_forward_test", "(", "x", ",", "img_metas", ")", "\n", "out", "=", "resize", "(", "\n", "input", "=", "out", ",", "\n", "size", "=", "img", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder._decode_head_forward_train": [[96, 106], ["dict", "encoder_decoder.EncoderDecoder.decode_head.forward_train", "dict.update", "mmseg.core.add_prefix"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward_train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.misc.add_prefix"], ["", "def", "_decode_head_forward_train", "(", "self", ",", "x", ",", "img_metas", ",", "gt_semantic_seg", ")", ":", "\n", "        ", "\"\"\"Run forward function and calculate loss for decode head in\n        training.\"\"\"", "\n", "losses", "=", "dict", "(", ")", "\n", "loss_decode", "=", "self", ".", "decode_head", ".", "forward_train", "(", "x", ",", "img_metas", ",", "\n", "gt_semantic_seg", ",", "\n", "self", ".", "train_cfg", ")", "\n", "\n", "losses", ".", "update", "(", "add_prefix", "(", "loss_decode", ",", "'decode'", ")", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder._decode_head_forward_test": [[107, 112], ["encoder_decoder.EncoderDecoder.decode_head.forward_test"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward_test"], ["", "def", "_decode_head_forward_test", "(", "self", ",", "x", ",", "img_metas", ")", ":", "\n", "        ", "\"\"\"Run forward function and calculate loss for decode head in\n        inference.\"\"\"", "\n", "seg_logits", "=", "self", ".", "decode_head", ".", "forward_test", "(", "x", ",", "img_metas", ",", "self", ".", "test_cfg", ")", "\n", "return", "seg_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder._auxiliary_head_forward_train": [[113, 129], ["dict", "isinstance", "enumerate", "encoder_decoder.EncoderDecoder.auxiliary_head.forward_train", "dict.update", "aux_head.forward_train", "dict.update", "mmseg.core.add_prefix", "mmseg.core.add_prefix"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward_train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward_train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.misc.add_prefix", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.misc.add_prefix"], ["", "def", "_auxiliary_head_forward_train", "(", "self", ",", "x", ",", "img_metas", ",", "gt_semantic_seg", ")", ":", "\n", "        ", "\"\"\"Run forward function and calculate loss for auxiliary head in\n        training.\"\"\"", "\n", "losses", "=", "dict", "(", ")", "\n", "if", "isinstance", "(", "self", ".", "auxiliary_head", ",", "nn", ".", "ModuleList", ")", ":", "\n", "            ", "for", "idx", ",", "aux_head", "in", "enumerate", "(", "self", ".", "auxiliary_head", ")", ":", "\n", "                ", "loss_aux", "=", "aux_head", ".", "forward_train", "(", "x", ",", "img_metas", ",", "\n", "gt_semantic_seg", ",", "\n", "self", ".", "train_cfg", ")", "\n", "losses", ".", "update", "(", "add_prefix", "(", "loss_aux", ",", "f'aux_{idx}'", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "loss_aux", "=", "self", ".", "auxiliary_head", ".", "forward_train", "(", "\n", "x", ",", "img_metas", ",", "gt_semantic_seg", ",", "self", ".", "train_cfg", ")", "\n", "losses", ".", "update", "(", "add_prefix", "(", "loss_aux", ",", "'aux'", ")", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.forward_dummy": [[130, 135], ["encoder_decoder.EncoderDecoder.encode_decode"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.encode_decode"], ["", "def", "forward_dummy", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Dummy forward function.\"\"\"", "\n", "seg_logit", "=", "self", ".", "encode_decode", "(", "img", ",", "None", ")", "\n", "\n", "return", "seg_logit", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.forward_train": [[136, 167], ["encoder_decoder.EncoderDecoder.extract_feat", "dict", "encoder_decoder.EncoderDecoder._decode_head_forward_train", "dict.update", "encoder_decoder.EncoderDecoder._auxiliary_head_forward_train", "dict.update"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.extract_feat", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder._decode_head_forward_train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder._auxiliary_head_forward_train"], ["", "def", "forward_train", "(", "self", ",", "img", ",", "img_metas", ",", "gt_semantic_seg", ")", ":", "\n", "        ", "\"\"\"Forward function for training.\n\n        Args:\n            img (Tensor): Input images.\n            img_metas (list[dict]): List of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmseg/datasets/pipelines/formatting.py:Collect`.\n            gt_semantic_seg (Tensor): Semantic segmentation masks\n                used if the architecture supports semantic segmentation task.\n\n        Returns:\n            dict[str, Tensor]: a dictionary of loss components\n        \"\"\"", "\n", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "loss_decode", "=", "self", ".", "_decode_head_forward_train", "(", "x", ",", "img_metas", ",", "\n", "gt_semantic_seg", ")", "\n", "losses", ".", "update", "(", "loss_decode", ")", "\n", "\n", "if", "self", ".", "with_auxiliary_head", ":", "\n", "            ", "loss_aux", "=", "self", ".", "_auxiliary_head_forward_train", "(", "\n", "x", ",", "img_metas", ",", "gt_semantic_seg", ")", "\n", "losses", ".", "update", "(", "loss_aux", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.slide_inference": [[169, 214], ["img.size", "img.new_zeros", "img.new_zeros", "range", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "range", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "mmseg.ops.resize", "max", "max", "min", "min", "max", "max", "encoder_decoder.EncoderDecoder.encode_decode", "torch.pad", "torch.pad", "torch.pad", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "int", "int", "int", "int", "torch.from_numpy().to.cpu().detach().numpy", "torch.from_numpy().to.cpu().detach().numpy", "torch.from_numpy().to.cpu().detach().numpy", "torch.from_numpy().to.cpu().detach", "torch.from_numpy().to.cpu().detach", "torch.from_numpy().to.cpu().detach", "torch.from_numpy().to.cpu", "torch.from_numpy().to.cpu", "torch.from_numpy().to.cpu"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.encode_decode"], ["", "def", "slide_inference", "(", "self", ",", "img", ",", "img_meta", ",", "rescale", ")", ":", "\n", "        ", "\"\"\"Inference by sliding-window with overlap.\n\n        If h_crop > h_img or w_crop > w_img, the small patch will be used to\n        decode without padding.\n        \"\"\"", "\n", "\n", "h_stride", ",", "w_stride", "=", "self", ".", "test_cfg", ".", "stride", "\n", "h_crop", ",", "w_crop", "=", "self", ".", "test_cfg", ".", "crop_size", "\n", "batch_size", ",", "_", ",", "h_img", ",", "w_img", "=", "img", ".", "size", "(", ")", "\n", "#print(img.size())", "\n", "num_classes", "=", "self", ".", "num_classes", "\n", "h_grids", "=", "max", "(", "h_img", "-", "h_crop", "+", "h_stride", "-", "1", ",", "0", ")", "//", "h_stride", "+", "1", "\n", "w_grids", "=", "max", "(", "w_img", "-", "w_crop", "+", "w_stride", "-", "1", ",", "0", ")", "//", "w_stride", "+", "1", "\n", "preds", "=", "img", ".", "new_zeros", "(", "(", "batch_size", ",", "num_classes", ",", "h_img", ",", "w_img", ")", ")", "\n", "count_mat", "=", "img", ".", "new_zeros", "(", "(", "batch_size", ",", "1", ",", "h_img", ",", "w_img", ")", ")", "\n", "for", "h_idx", "in", "range", "(", "h_grids", ")", ":", "\n", "            ", "for", "w_idx", "in", "range", "(", "w_grids", ")", ":", "\n", "                ", "y1", "=", "h_idx", "*", "h_stride", "\n", "x1", "=", "w_idx", "*", "w_stride", "\n", "y2", "=", "min", "(", "y1", "+", "h_crop", ",", "h_img", ")", "\n", "x2", "=", "min", "(", "x1", "+", "w_crop", ",", "w_img", ")", "\n", "y1", "=", "max", "(", "y2", "-", "h_crop", ",", "0", ")", "\n", "x1", "=", "max", "(", "x2", "-", "w_crop", ",", "0", ")", "\n", "crop_img", "=", "img", "[", ":", ",", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "\n", "crop_seg_logit", "=", "self", ".", "encode_decode", "(", "crop_img", ",", "img_meta", ")", "\n", "preds", "+=", "F", ".", "pad", "(", "crop_seg_logit", ",", "\n", "(", "int", "(", "x1", ")", ",", "int", "(", "preds", ".", "shape", "[", "3", "]", "-", "x2", ")", ",", "int", "(", "y1", ")", ",", "\n", "int", "(", "preds", ".", "shape", "[", "2", "]", "-", "y2", ")", ")", ")", "\n", "\n", "count_mat", "[", ":", ",", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "+=", "1", "\n", "", "", "assert", "(", "count_mat", "==", "0", ")", ".", "sum", "(", ")", "==", "0", "\n", "if", "torch", ".", "onnx", ".", "is_in_onnx_export", "(", ")", ":", "\n", "# cast count_mat to constant while exporting to ONNX", "\n", "            ", "count_mat", "=", "torch", ".", "from_numpy", "(", "\n", "count_mat", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ".", "to", "(", "device", "=", "img", ".", "device", ")", "\n", "", "preds", "=", "preds", "/", "count_mat", "\n", "if", "rescale", ":", "\n", "            ", "preds", "=", "resize", "(", "\n", "preds", ",", "\n", "size", "=", "img_meta", "[", "0", "]", "[", "'ori_shape'", "]", "[", ":", "2", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ",", "\n", "warning", "=", "False", ")", "\n", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.whole_inference": [[215, 228], ["encoder_decoder.EncoderDecoder.encode_decode", "mmseg.ops.resize"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.encode_decode", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize"], ["", "def", "whole_inference", "(", "self", ",", "img", ",", "img_meta", ",", "rescale", ")", ":", "\n", "        ", "\"\"\"Inference with full image.\"\"\"", "\n", "\n", "seg_logit", "=", "self", ".", "encode_decode", "(", "img", ",", "img_meta", ")", "\n", "if", "rescale", ":", "\n", "            ", "seg_logit", "=", "resize", "(", "\n", "seg_logit", ",", "\n", "size", "=", "img_meta", "[", "0", "]", "[", "'ori_shape'", "]", "[", ":", "2", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ",", "\n", "warning", "=", "False", ")", "\n", "\n", "", "return", "seg_logit", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.inference": [[229, 263], ["all", "torch.softmax", "torch.softmax", "torch.softmax", "encoder_decoder.EncoderDecoder.slide_inference", "encoder_decoder.EncoderDecoder.whole_inference", "output.flip.flip.flip", "output.flip.flip.flip"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.slide_inference", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.whole_inference"], ["", "def", "inference", "(", "self", ",", "img", ",", "img_meta", ",", "rescale", ")", ":", "\n", "        ", "\"\"\"Inference with slide/whole style.\n\n        Args:\n            img (Tensor): The input image of shape (N, 3, H, W).\n            img_meta (dict): Image info dict where each dict has: 'img_shape',\n                'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmseg/datasets/pipelines/formatting.py:Collect`.\n            rescale (bool): Whether rescale back to original shape.\n\n        Returns:\n            Tensor: The output segmentation map.\n        \"\"\"", "\n", "\n", "assert", "self", ".", "test_cfg", ".", "mode", "in", "[", "'slide'", ",", "'whole'", "]", "\n", "ori_shape", "=", "img_meta", "[", "0", "]", "[", "'ori_shape'", "]", "\n", "assert", "all", "(", "_", "[", "'ori_shape'", "]", "==", "ori_shape", "for", "_", "in", "img_meta", ")", "\n", "if", "self", ".", "test_cfg", ".", "mode", "==", "'slide'", ":", "\n", "            ", "seg_logit", "=", "self", ".", "slide_inference", "(", "img", ",", "img_meta", ",", "rescale", ")", "\n", "", "else", ":", "\n", "            ", "seg_logit", "=", "self", ".", "whole_inference", "(", "img", ",", "img_meta", ",", "rescale", ")", "\n", "", "output", "=", "F", ".", "softmax", "(", "seg_logit", ",", "dim", "=", "1", ")", "\n", "flip", "=", "img_meta", "[", "0", "]", "[", "'flip'", "]", "\n", "if", "flip", ":", "\n", "            ", "flip_direction", "=", "img_meta", "[", "0", "]", "[", "'flip_direction'", "]", "\n", "assert", "flip_direction", "in", "[", "'horizontal'", ",", "'vertical'", "]", "\n", "if", "flip_direction", "==", "'horizontal'", ":", "\n", "                ", "output", "=", "output", ".", "flip", "(", "dims", "=", "(", "3", ",", ")", ")", "\n", "", "elif", "flip_direction", "==", "'vertical'", ":", "\n", "                ", "output", "=", "output", ".", "flip", "(", "dims", "=", "(", "2", ",", ")", ")", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.simple_test": [[264, 276], ["encoder_decoder.EncoderDecoder.inference", "encoder_decoder.EncoderDecoder.argmax", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "seg_pred.unsqueeze.unsqueeze.cpu().numpy", "list", "seg_pred.unsqueeze.unsqueeze.unsqueeze", "seg_pred.unsqueeze.unsqueeze.cpu"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.inference"], ["", "def", "simple_test", "(", "self", ",", "img", ",", "img_meta", ",", "rescale", "=", "True", ")", ":", "\n", "        ", "\"\"\"Simple test with single image.\"\"\"", "\n", "seg_logit", "=", "self", ".", "inference", "(", "img", ",", "img_meta", ",", "rescale", ")", "\n", "seg_pred", "=", "seg_logit", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "if", "torch", ".", "onnx", ".", "is_in_onnx_export", "(", ")", ":", "\n", "# our inference backend only support 4D output", "\n", "            ", "seg_pred", "=", "seg_pred", ".", "unsqueeze", "(", "0", ")", "\n", "return", "seg_pred", "\n", "", "seg_pred", "=", "seg_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# unravel batch dim", "\n", "seg_pred", "=", "list", "(", "seg_pred", ")", "\n", "return", "seg_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.aug_test": [[277, 295], ["encoder_decoder.EncoderDecoder.inference", "range", "len", "encoder_decoder.EncoderDecoder.argmax", "list.cpu().numpy", "list", "len", "encoder_decoder.EncoderDecoder.inference", "list.cpu"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.inference", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.segmentors.encoder_decoder.EncoderDecoder.inference"], ["", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "rescale", "=", "True", ")", ":", "\n", "        ", "\"\"\"Test with augmentations.\n\n        Only rescale=True is supported.\n        \"\"\"", "\n", "# aug_test rescale all imgs back to ori_shape for now", "\n", "assert", "rescale", "\n", "# to save memory, we get augmented seg logit inplace", "\n", "seg_logit", "=", "self", ".", "inference", "(", "imgs", "[", "0", "]", ",", "img_metas", "[", "0", "]", ",", "rescale", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "imgs", ")", ")", ":", "\n", "            ", "cur_seg_logit", "=", "self", ".", "inference", "(", "imgs", "[", "i", "]", ",", "img_metas", "[", "i", "]", ",", "rescale", ")", "\n", "seg_logit", "+=", "cur_seg_logit", "\n", "", "seg_logit", "/=", "len", "(", "imgs", ")", "\n", "seg_pred", "=", "seg_logit", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "seg_pred", "=", "seg_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# unravel batch dim", "\n", "seg_pred", "=", "list", "(", "seg_pred", ")", "\n", "return", "seg_pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.vit_up_head.VisionTransformerUpHead.__init__": [[21, 50], ["functools.partial", "decode_head.BaseDecodeHead.__init__", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.build_norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "768", ",", "embed_dim", "=", "1024", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "norm_cfg", "=", "None", ",", "\n", "num_conv", "=", "1", ",", "upsampling_method", "=", "'bilinear'", ",", "num_upsampe_layer", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VisionTransformerUpHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "num_conv", "=", "num_conv", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "self", ".", "upsampling_method", "=", "upsampling_method", "\n", "self", ".", "num_upsampe_layer", "=", "num_upsampe_layer", "\n", "\n", "out_channel", "=", "self", ".", "num_classes", "\n", "\n", "if", "self", ".", "num_conv", "==", "2", ":", "\n", "            ", "self", ".", "conv_0", "=", "nn", ".", "Conv2d", "(", "embed_dim", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "out_channel", ",", "1", ",", "1", ")", "\n", "_", ",", "self", ".", "syncbn_fc_0", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "256", ")", "\n", "\n", "", "elif", "self", ".", "num_conv", "==", "4", ":", "\n", "            ", "self", ".", "conv_0", "=", "nn", ".", "Conv2d", "(", "embed_dim", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_4", "=", "nn", ".", "Conv2d", "(", "256", ",", "out_channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n", "_", ",", "self", ".", "syncbn_fc_0", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "256", ")", "\n", "_", ",", "self", ".", "syncbn_fc_1", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "256", ")", "\n", "_", ",", "self", ".", "syncbn_fc_2", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "256", ")", "\n", "_", ",", "self", ".", "syncbn_fc_3", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.vit_up_head.VisionTransformerUpHead.init_weights": [[53, 62], ["vit_up_head.VisionTransformerUpHead.modules", "isinstance", "layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.layers.weight_init.trunc_normal_"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.vit_up_head.VisionTransformerUpHead.forward": [[63, 111], ["vit_up_head.VisionTransformerUpHead._transform_inputs", "torch.interpolate.dim", "vit_up_head.VisionTransformerUpHead.norm", "torch.interpolate.dim", "int", "torch.interpolate.transpose().reshape", "math.sqrt", "vit_up_head.VisionTransformerUpHead.conv_0", "vit_up_head.VisionTransformerUpHead.syncbn_fc_0", "torch.relu", "torch.relu", "torch.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "vit_up_head.VisionTransformerUpHead.conv_1", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate.transpose", "vit_up_head.VisionTransformerUpHead.conv_0", "vit_up_head.VisionTransformerUpHead.syncbn_fc_0", "torch.relu", "torch.relu", "torch.relu", "vit_up_head.VisionTransformerUpHead.conv_1", "torch.interpolate", "torch.interpolate", "torch.interpolate", "vit_up_head.VisionTransformerUpHead.conv_0", "vit_up_head.VisionTransformerUpHead.syncbn_fc_0", "torch.relu", "torch.relu", "torch.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "vit_up_head.VisionTransformerUpHead.conv_1", "vit_up_head.VisionTransformerUpHead.syncbn_fc_1", "torch.relu", "torch.relu", "torch.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "vit_up_head.VisionTransformerUpHead.conv_2", "vit_up_head.VisionTransformerUpHead.syncbn_fc_2", "torch.relu", "torch.relu", "torch.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "vit_up_head.VisionTransformerUpHead.conv_3", "vit_up_head.VisionTransformerUpHead.syncbn_fc_3", "torch.relu", "torch.relu", "torch.relu", "vit_up_head.VisionTransformerUpHead.conv_4", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "_transform_inputs", "(", "x", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "if", "x", ".", "shape", "[", "1", "]", "%", "48", "!=", "0", ":", "\n", "                ", "x", "=", "x", "[", ":", ",", "1", ":", "]", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "upsampling_method", "==", "'bilinear'", ":", "\n", "            ", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "n", ",", "hw", ",", "c", "=", "x", ".", "shape", "\n", "h", "=", "w", "=", "int", "(", "math", ".", "sqrt", "(", "hw", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "n", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "", "if", "self", ".", "num_conv", "==", "2", ":", "\n", "                ", "if", "self", ".", "num_upsampe_layer", "==", "2", ":", "\n", "                    ", "x", "=", "self", ".", "conv_0", "(", "x", ")", "\n", "x", "=", "self", ".", "syncbn_fc_0", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "x", ".", "shape", "[", "-", "1", "]", "*", "4", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "x", "=", "self", ".", "conv_1", "(", "x", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "self", ".", "img_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "", "elif", "self", ".", "num_upsampe_layer", "==", "1", ":", "\n", "                    ", "x", "=", "self", ".", "conv_0", "(", "x", ")", "\n", "x", "=", "self", ".", "syncbn_fc_0", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "conv_1", "(", "x", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "self", ".", "img_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "", "", "elif", "self", ".", "num_conv", "==", "4", ":", "\n", "                ", "if", "self", ".", "num_upsampe_layer", "==", "4", ":", "\n", "                    ", "x", "=", "self", ".", "conv_0", "(", "x", ")", "\n", "x", "=", "self", ".", "syncbn_fc_0", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "x", ".", "shape", "[", "-", "1", "]", "*", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "x", "=", "self", ".", "conv_1", "(", "x", ")", "\n", "x", "=", "self", ".", "syncbn_fc_1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "x", ".", "shape", "[", "-", "1", "]", "*", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "x", "=", "self", ".", "conv_2", "(", "x", ")", "\n", "x", "=", "self", ".", "syncbn_fc_2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "x", ".", "shape", "[", "-", "1", "]", "*", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "x", "=", "self", ".", "conv_3", "(", "x", ")", "\n", "x", "=", "self", ".", "syncbn_fc_3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "conv_4", "(", "x", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "x", ".", "shape", "[", "-", "1", "]", "*", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "\n", "", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.fpn_head.FPNHead.__init__": [[23, 53], ["decode_head.BaseDecodeHead.__init__", "torch.ModuleList", "range", "len", "len", "min", "len", "max", "range", "fpn_head.FPNHead.scale_heads.append", "int", "scale_head.append", "torch.Sequential", "mmcv.cnn.ConvModule", "scale_head.append", "numpy.log2", "numpy.log2", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "feature_strides", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FPNHead", ",", "self", ")", ".", "__init__", "(", "\n", "input_transform", "=", "'multiple_select'", ",", "**", "kwargs", ")", "\n", "assert", "len", "(", "feature_strides", ")", "==", "len", "(", "self", ".", "in_channels", ")", "\n", "assert", "min", "(", "feature_strides", ")", "==", "feature_strides", "[", "0", "]", "\n", "self", ".", "feature_strides", "=", "feature_strides", "\n", "\n", "self", ".", "scale_heads", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "feature_strides", ")", ")", ":", "\n", "            ", "head_length", "=", "max", "(", "\n", "1", ",", "\n", "int", "(", "np", ".", "log2", "(", "feature_strides", "[", "i", "]", ")", "-", "np", ".", "log2", "(", "feature_strides", "[", "0", "]", ")", ")", ")", "\n", "scale_head", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "head_length", ")", ":", "\n", "                ", "scale_head", ".", "append", "(", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", "[", "i", "]", "if", "k", "==", "0", "else", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "if", "feature_strides", "[", "i", "]", "!=", "feature_strides", "[", "0", "]", ":", "\n", "                    ", "scale_head", ".", "append", "(", "\n", "nn", ".", "Upsample", "(", "\n", "scale_factor", "=", "2", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", ")", "\n", "", "", "self", ".", "scale_heads", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "scale_head", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.fpn_head.FPNHead.forward": [[54, 69], ["fpn_head.FPNHead._transform_inputs", "range", "fpn_head.FPNHead.cls_seg", "len", "mmseg.ops.resize"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "\n", "output", "=", "self", ".", "scale_heads", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "feature_strides", ")", ")", ":", "\n", "# non inplace", "\n", "            ", "output", "=", "output", "+", "resize", "(", "\n", "self", ".", "scale_heads", "[", "i", "]", "(", "x", "[", "i", "]", ")", ",", "\n", "size", "=", "output", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "\n", "", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ema_head.EMAModule.__init__": [[31, 43], ["torch.Module.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.normalize.normal_", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "ema_head.EMAModule.register_buffer", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "num_bases", ",", "num_stages", ",", "momentum", ")", ":", "\n", "        ", "super", "(", "EMAModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "num_stages", ">=", "1", ",", "'num_stages must be at least 1!'", "\n", "self", ".", "num_bases", "=", "num_bases", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n", "bases", "=", "torch", ".", "zeros", "(", "1", ",", "channels", ",", "self", ".", "num_bases", ")", "\n", "bases", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "self", ".", "num_bases", ")", ")", "\n", "# [1, channels, num_bases]", "\n", "bases", "=", "F", ".", "normalize", "(", "bases", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "self", ".", "register_buffer", "(", "'bases'", ",", "bases", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ema_head.EMAModule.forward": [[44, 76], ["feats.view.view.size", "feats.view.view.view", "ema_head.EMAModule.bases.repeat", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "feats_recon.view.view.view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.normalize.mean", "ema_head.reduce_mean", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ema_head.reduce_mean"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "feats", ".", "size", "(", ")", "\n", "# [batch_size, channels, height*width]", "\n", "feats", "=", "feats", ".", "view", "(", "batch_size", ",", "channels", ",", "height", "*", "width", ")", "\n", "# [batch_size, channels, num_bases]", "\n", "bases", "=", "self", ".", "bases", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "# [batch_size, height*width, num_bases]", "\n", "                ", "attention", "=", "torch", ".", "einsum", "(", "'bcn,bck->bnk'", ",", "feats", ",", "bases", ")", "\n", "attention", "=", "F", ".", "softmax", "(", "attention", ",", "dim", "=", "2", ")", "\n", "# l1 norm", "\n", "attention_normed", "=", "F", ".", "normalize", "(", "attention", ",", "dim", "=", "1", ",", "p", "=", "1", ")", "\n", "# [batch_size, channels, num_bases]", "\n", "bases", "=", "torch", ".", "einsum", "(", "'bcn,bnk->bck'", ",", "feats", ",", "attention_normed", ")", "\n", "# l2 norm", "\n", "bases", "=", "F", ".", "normalize", "(", "bases", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "\n", "", "", "feats_recon", "=", "torch", ".", "einsum", "(", "'bck,bnk->bcn'", ",", "bases", ",", "attention", ")", "\n", "feats_recon", "=", "feats_recon", ".", "view", "(", "batch_size", ",", "channels", ",", "height", ",", "width", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "bases", "=", "bases", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "bases", "=", "reduce_mean", "(", "bases", ")", "\n", "# l2 norm", "\n", "bases", "=", "F", ".", "normalize", "(", "bases", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "self", ".", "bases", "=", "(", "1", "-", "\n", "self", ".", "momentum", ")", "*", "self", ".", "bases", "+", "self", ".", "momentum", "*", "bases", "\n", "\n", "", "return", "feats_recon", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ema_head.EMAHead.__init__": [[94, 153], ["decode_head.BaseDecodeHead.__init__", "ema_head.EMAModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "ema_head.EMAHead.ema_mid_conv.parameters", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "ema_channels", ",", "\n", "num_bases", ",", "\n", "num_stages", ",", "\n", "concat_input", "=", "True", ",", "\n", "momentum", "=", "0.1", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EMAHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "ema_channels", "=", "ema_channels", "\n", "self", ".", "num_bases", "=", "num_bases", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "self", ".", "concat_input", "=", "concat_input", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "ema_module", "=", "EMAModule", "(", "self", ".", "ema_channels", ",", "self", ".", "num_bases", ",", "\n", "self", ".", "num_stages", ",", "self", ".", "momentum", ")", "\n", "\n", "self", ".", "ema_in_conv", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "ema_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "# project (0, inf) -> (-inf, inf)", "\n", "self", ".", "ema_mid_conv", "=", "ConvModule", "(", "\n", "self", ".", "ema_channels", ",", "\n", "self", ".", "ema_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "None", ")", "\n", "for", "param", "in", "self", ".", "ema_mid_conv", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "ema_out_conv", "=", "ConvModule", "(", "\n", "self", ".", "ema_channels", ",", "\n", "self", ".", "ema_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "self", ".", "ema_channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "if", "self", ".", "concat_input", ":", "\n", "            ", "self", ".", "conv_cat", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "+", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ema_head.EMAHead.forward": [[154, 169], ["ema_head.EMAHead._transform_inputs", "ema_head.EMAHead.ema_in_conv", "ema_head.EMAHead.ema_mid_conv", "ema_head.EMAHead.ema_module", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "ema_head.EMAHead.ema_out_conv", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "ema_head.EMAHead.bottleneck", "ema_head.EMAHead.cls_seg", "ema_head.EMAHead.conv_cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "feats", "=", "self", ".", "ema_in_conv", "(", "x", ")", "\n", "identity", "=", "feats", "\n", "feats", "=", "self", ".", "ema_mid_conv", "(", "feats", ")", "\n", "recon", "=", "self", ".", "ema_module", "(", "feats", ")", "\n", "recon", "=", "F", ".", "relu", "(", "recon", ",", "inplace", "=", "True", ")", "\n", "recon", "=", "self", ".", "ema_out_conv", "(", "recon", ")", "\n", "output", "=", "F", ".", "relu", "(", "identity", "+", "recon", ",", "inplace", "=", "True", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "output", ")", "\n", "if", "self", ".", "concat_input", ":", "\n", "            ", "output", "=", "self", ".", "conv_cat", "(", "torch", ".", "cat", "(", "[", "x", ",", "output", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ema_head.reduce_mean": [[13, 20], ["tensor.clone.clone", "torch.all_reduce", "tensor.clone.div_", "torch.is_available", "torch.is_initialized", "torch.get_world_size"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.get_world_size"], ["def", "reduce_mean", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"Reduce mean when distributed training.\"\"\"", "\n", "if", "not", "(", "dist", ".", "is_available", "(", ")", "and", "dist", ".", "is_initialized", "(", ")", ")", ":", "\n", "        ", "return", "tensor", "\n", "", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "tensor", ".", "div_", "(", "dist", ".", "get_world_size", "(", ")", ")", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.aspp_head.ASPPModule.__init__": [[22, 42], ["torch.ModuleList.__init__", "aspp_head.ASPPModule.append", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "dilations", ",", "in_channels", ",", "channels", ",", "conv_cfg", ",", "norm_cfg", ",", "\n", "act_cfg", ")", ":", "\n", "        ", "super", "(", "ASPPModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dilations", "=", "dilations", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "for", "dilation", "in", "dilations", ":", "\n", "            ", "self", ".", "append", "(", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", "if", "dilation", "==", "1", "else", "3", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "0", "if", "dilation", "==", "1", "else", "dilation", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.aspp_head.ASPPModule.forward": [[43, 50], ["aspp_outs.append", "aspp_module"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "aspp_outs", "=", "[", "]", "\n", "for", "aspp_module", "in", "self", ":", "\n", "            ", "aspp_outs", ".", "append", "(", "aspp_module", "(", "x", ")", ")", "\n", "\n", "", "return", "aspp_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.aspp_head.ASPPHead.__init__": [[64, 92], ["decode_head.BaseDecodeHead.__init__", "isinstance", "torch.Sequential", "torch.Sequential", "aspp_head.ASPPModule", "mmcv.cnn.ConvModule", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "mmcv.cnn.ConvModule", "len"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "dilations", "=", "(", "1", ",", "6", ",", "12", ",", "18", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ASPPHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "isinstance", "(", "dilations", ",", "(", "list", ",", "tuple", ")", ")", "\n", "self", ".", "dilations", "=", "dilations", "\n", "self", ".", "image_pool", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "self", ".", "aspp_modules", "=", "ASPPModule", "(", "\n", "dilations", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "(", "len", "(", "dilations", ")", "+", "1", ")", "*", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.aspp_head.ASPPHead.forward": [[93, 108], ["aspp_head.ASPPHead._transform_inputs", "torch.cat.extend", "torch.cat.extend", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "aspp_head.ASPPHead.bottleneck", "aspp_head.ASPPHead.cls_seg", "mmseg.ops.resize", "aspp_head.ASPPHead.aspp_modules", "aspp_head.ASPPHead.image_pool", "aspp_head.ASPPHead.size"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "aspp_outs", "=", "[", "\n", "resize", "(", "\n", "self", ".", "image_pool", "(", "x", ")", ",", "\n", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "]", "\n", "aspp_outs", ".", "extend", "(", "self", ".", "aspp_modules", "(", "x", ")", ")", "\n", "aspp_outs", "=", "torch", ".", "cat", "(", "aspp_outs", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "aspp_outs", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.dm_head.DCM.__init__": [[24, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.ConvModule", "mmcv.cnn.build_activation_layer", "mmcv.cnn.ConvModule", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "filter_size", ",", "fusion", ",", "in_channels", ",", "channels", ",", "conv_cfg", ",", "\n", "norm_cfg", ",", "act_cfg", ")", ":", "\n", "        ", "super", "(", "DCM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "filter_size", "=", "filter_size", "\n", "self", ".", "fusion", "=", "fusion", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "filter_gen_conv", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "channels", ",", "1", ",", "1", ",", "\n", "0", ")", "\n", "\n", "self", ".", "input_redu_conv", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n", "if", "self", ".", "norm_cfg", "is", "not", "None", ":", "\n", "            ", "self", ".", "norm", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "self", ".", "channels", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "", "self", ".", "activate", "=", "build_activation_layer", "(", "self", ".", "act_cfg", ")", "\n", "\n", "if", "self", ".", "fusion", ":", "\n", "            ", "self", ".", "fusion_conv", "=", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.dm_head.DCM.forward": [[60, 89], ["dm_head.DCM.filter_gen_conv", "dm_head.DCM.input_redu_conv", "torch.pad.view", "generted_filter.view.view.view", "torch.pad", "torch.pad", "torch.pad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "dm_head.DCM.view", "dm_head.DCM.activate", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "dm_head.DCM.norm", "dm_head.DCM.fusion_conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "generted_filter", "=", "self", ".", "filter_gen_conv", "(", "\n", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "self", ".", "filter_size", ")", ")", "\n", "x", "=", "self", ".", "input_redu_conv", "(", "x", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "# [1, b * c, h, w], c = self.channels", "\n", "x", "=", "x", ".", "view", "(", "1", ",", "b", "*", "c", ",", "h", ",", "w", ")", "\n", "# [b * c, 1, filter_size, filter_size]", "\n", "generted_filter", "=", "generted_filter", ".", "view", "(", "b", "*", "c", ",", "1", ",", "self", ".", "filter_size", ",", "\n", "self", ".", "filter_size", ")", "\n", "pad", "=", "(", "self", ".", "filter_size", "-", "1", ")", "//", "2", "\n", "if", "(", "self", ".", "filter_size", "-", "1", ")", "%", "2", "==", "0", ":", "\n", "            ", "p2d", "=", "(", "pad", ",", "pad", ",", "pad", ",", "pad", ")", "\n", "", "else", ":", "\n", "            ", "p2d", "=", "(", "pad", "+", "1", ",", "pad", ",", "pad", "+", "1", ",", "pad", ")", "\n", "", "x", "=", "F", ".", "pad", "(", "input", "=", "x", ",", "pad", "=", "p2d", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "# [1, b * c, h, w]", "\n", "output", "=", "F", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "generted_filter", ",", "groups", "=", "b", "*", "c", ")", "\n", "# [b, c, h, w]", "\n", "output", "=", "output", ".", "view", "(", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "", "output", "=", "self", ".", "activate", "(", "output", ")", "\n", "\n", "if", "self", ".", "fusion", ":", "\n", "            ", "output", "=", "self", ".", "fusion_conv", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.dm_head.DMHead.__init__": [[106, 130], ["decode_head.BaseDecodeHead.__init__", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mmcv.cnn.ConvModule", "dcm_modules.append", "dm_head.DCM", "len"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "filter_sizes", "=", "(", "1", ",", "3", ",", "5", ",", "7", ")", ",", "fusion", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DMHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "isinstance", "(", "filter_sizes", ",", "(", "list", ",", "tuple", ")", ")", "\n", "self", ".", "filter_sizes", "=", "filter_sizes", "\n", "self", ".", "fusion", "=", "fusion", "\n", "dcm_modules", "=", "[", "]", "\n", "for", "filter_size", "in", "self", ".", "filter_sizes", ":", "\n", "            ", "dcm_modules", ".", "append", "(", "\n", "DCM", "(", "filter_size", ",", "\n", "self", ".", "fusion", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "", "self", ".", "dcm_modules", "=", "nn", ".", "ModuleList", "(", "dcm_modules", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "+", "len", "(", "filter_sizes", ")", "*", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.dm_head.DMHead.forward": [[131, 141], ["dm_head.DMHead._transform_inputs", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dm_head.DMHead.bottleneck", "dm_head.DMHead.cls_seg", "torch.cat.append", "torch.cat.append", "torch.cat.append", "dcm_module"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "dcm_outs", "=", "[", "x", "]", "\n", "for", "dcm_module", "in", "self", ".", "dcm_modules", ":", "\n", "            ", "dcm_outs", ".", "append", "(", "dcm_module", "(", "x", ")", ")", "\n", "", "dcm_outs", "=", "torch", ".", "cat", "(", "dcm_outs", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "dcm_outs", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.psa_head.PSAHead.__init__": [[35, 112], ["decode_head.BaseDecodeHead.__init__", "mmcv.cnn.ConvModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "RuntimeError", "mmcv.cnn.ConvModule", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.ConvModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "PSAMask", "PSAMask", "PSAMask", "mmcv.cnn.ConvModule", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "mask_size", ",", "\n", "psa_type", "=", "'bi-direction'", ",", "\n", "compact", "=", "False", ",", "\n", "shrink_factor", "=", "2", ",", "\n", "normalization_factor", "=", "1.0", ",", "\n", "psa_softmax", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "PSAMask", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Please install mmcv-full for PSAMask ops'", ")", "\n", "", "super", "(", "PSAHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "psa_type", "in", "[", "'collect'", ",", "'distribute'", ",", "'bi-direction'", "]", "\n", "self", ".", "psa_type", "=", "psa_type", "\n", "self", ".", "compact", "=", "compact", "\n", "self", ".", "shrink_factor", "=", "shrink_factor", "\n", "self", ".", "mask_size", "=", "mask_size", "\n", "mask_h", ",", "mask_w", "=", "mask_size", "\n", "self", ".", "psa_softmax", "=", "psa_softmax", "\n", "if", "normalization_factor", "is", "None", ":", "\n", "            ", "normalization_factor", "=", "mask_h", "*", "mask_w", "\n", "", "self", ".", "normalization_factor", "=", "normalization_factor", "\n", "\n", "self", ".", "reduce", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "attention", "=", "nn", ".", "Sequential", "(", "\n", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "channels", ",", "mask_h", "*", "mask_w", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "if", "psa_type", "==", "'bi-direction'", ":", "\n", "            ", "self", ".", "reduce_p", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "attention_p", "=", "nn", ".", "Sequential", "(", "\n", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "channels", ",", "mask_h", "*", "mask_w", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "psamask_collect", "=", "PSAMask", "(", "'collect'", ",", "mask_size", ")", "\n", "self", ".", "psamask_distribute", "=", "PSAMask", "(", "'distribute'", ",", "mask_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "psamask", "=", "PSAMask", "(", "psa_type", ",", "mask_size", ")", "\n", "", "self", ".", "proj", "=", "ConvModule", "(", "\n", "self", ".", "channels", "*", "(", "2", "if", "psa_type", "==", "'bi-direction'", "else", "1", ")", ",", "\n", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "*", "2", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.psa_head.PSAHead.forward": [[113, 197], ["psa_head.PSAHead._transform_inputs", "psa_head.PSAHead.proj", "mmseg.ops.resize", "psa_head.PSAHead.bottleneck", "psa_head.PSAHead.cls_seg", "psa_head.PSAHead.reduce", "mmseg.ops.resize.size", "psa_head.PSAHead.attention", "psa_head.PSAHead.reduce", "psa_head.PSAHead.reduce_p", "mmseg.ops.resize.size", "psa_head.PSAHead.attention", "psa_head.PSAHead.attention_p", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmseg.ops.resize", "psa_head.PSAHead.psamask", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "mmseg.ops.resize", "mmseg.ops.resize", "torch.softmax.view().transpose().view", "psa_head.PSAHead.psamask_collect", "psa_head.PSAHead.psamask_distribute", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "y.view().transpose().view.view().transpose().view.view().transpose().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax.view().transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "y.view().transpose().view.view().transpose().view.view().transpose", "mmseg.ops.resize.view", "y.view().transpose().view.view().transpose().view.view", "mmseg.ops.resize.view", "torch.softmax.view", "mmseg.ops.resize.view", "torch.softmax.view", "torch.softmax.view", "y.view().transpose().view.view().transpose().view.view"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "identity", "=", "x", "\n", "align_corners", "=", "self", ".", "align_corners", "\n", "if", "self", ".", "psa_type", "in", "[", "'collect'", ",", "'distribute'", "]", ":", "\n", "            ", "out", "=", "self", ".", "reduce", "(", "x", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "out", ".", "size", "(", ")", "\n", "if", "self", ".", "shrink_factor", "!=", "1", ":", "\n", "                ", "if", "h", "%", "self", ".", "shrink_factor", "and", "w", "%", "self", ".", "shrink_factor", ":", "\n", "                    ", "h", "=", "(", "h", "-", "1", ")", "//", "self", ".", "shrink_factor", "+", "1", "\n", "w", "=", "(", "w", "-", "1", ")", "//", "self", ".", "shrink_factor", "+", "1", "\n", "align_corners", "=", "True", "\n", "", "else", ":", "\n", "                    ", "h", "=", "h", "//", "self", ".", "shrink_factor", "\n", "w", "=", "w", "//", "self", ".", "shrink_factor", "\n", "align_corners", "=", "False", "\n", "", "out", "=", "resize", "(", "\n", "out", ",", "\n", "size", "=", "(", "h", ",", "w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "align_corners", ")", "\n", "", "y", "=", "self", ".", "attention", "(", "out", ")", "\n", "if", "self", ".", "compact", ":", "\n", "                ", "if", "self", ".", "psa_type", "==", "'collect'", ":", "\n", "                    ", "y", "=", "y", ".", "view", "(", "n", ",", "h", "*", "w", ",", "\n", "h", "*", "w", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "view", "(", "n", ",", "h", "*", "w", ",", "h", ",", "w", ")", "\n", "", "", "else", ":", "\n", "                ", "y", "=", "self", ".", "psamask", "(", "y", ")", "\n", "", "if", "self", ".", "psa_softmax", ":", "\n", "                ", "y", "=", "F", ".", "softmax", "(", "y", ",", "dim", "=", "1", ")", "\n", "", "out", "=", "torch", ".", "bmm", "(", "\n", "out", ".", "view", "(", "n", ",", "c", ",", "h", "*", "w", ")", ",", "y", ".", "view", "(", "n", ",", "h", "*", "w", ",", "h", "*", "w", ")", ")", ".", "view", "(", "\n", "n", ",", "c", ",", "h", ",", "w", ")", "*", "(", "1.0", "/", "self", ".", "normalization_factor", ")", "\n", "", "else", ":", "\n", "            ", "x_col", "=", "self", ".", "reduce", "(", "x", ")", "\n", "x_dis", "=", "self", ".", "reduce_p", "(", "x", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "x_col", ".", "size", "(", ")", "\n", "if", "self", ".", "shrink_factor", "!=", "1", ":", "\n", "                ", "if", "h", "%", "self", ".", "shrink_factor", "and", "w", "%", "self", ".", "shrink_factor", ":", "\n", "                    ", "h", "=", "(", "h", "-", "1", ")", "//", "self", ".", "shrink_factor", "+", "1", "\n", "w", "=", "(", "w", "-", "1", ")", "//", "self", ".", "shrink_factor", "+", "1", "\n", "align_corners", "=", "True", "\n", "", "else", ":", "\n", "                    ", "h", "=", "h", "//", "self", ".", "shrink_factor", "\n", "w", "=", "w", "//", "self", ".", "shrink_factor", "\n", "align_corners", "=", "False", "\n", "", "x_col", "=", "resize", "(", "\n", "x_col", ",", "\n", "size", "=", "(", "h", ",", "w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "align_corners", ")", "\n", "x_dis", "=", "resize", "(", "\n", "x_dis", ",", "\n", "size", "=", "(", "h", ",", "w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "align_corners", ")", "\n", "", "y_col", "=", "self", ".", "attention", "(", "x_col", ")", "\n", "y_dis", "=", "self", ".", "attention_p", "(", "x_dis", ")", "\n", "if", "self", ".", "compact", ":", "\n", "                ", "y_dis", "=", "y_dis", ".", "view", "(", "n", ",", "h", "*", "w", ",", "\n", "h", "*", "w", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "view", "(", "n", ",", "h", "*", "w", ",", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "                ", "y_col", "=", "self", ".", "psamask_collect", "(", "y_col", ")", "\n", "y_dis", "=", "self", ".", "psamask_distribute", "(", "y_dis", ")", "\n", "", "if", "self", ".", "psa_softmax", ":", "\n", "                ", "y_col", "=", "F", ".", "softmax", "(", "y_col", ",", "dim", "=", "1", ")", "\n", "y_dis", "=", "F", ".", "softmax", "(", "y_dis", ",", "dim", "=", "1", ")", "\n", "", "x_col", "=", "torch", ".", "bmm", "(", "\n", "x_col", ".", "view", "(", "n", ",", "c", ",", "h", "*", "w", ")", ",", "y_col", ".", "view", "(", "n", ",", "h", "*", "w", ",", "h", "*", "w", ")", ")", ".", "view", "(", "\n", "n", ",", "c", ",", "h", ",", "w", ")", "*", "(", "1.0", "/", "self", ".", "normalization_factor", ")", "\n", "x_dis", "=", "torch", ".", "bmm", "(", "\n", "x_dis", ".", "view", "(", "n", ",", "c", ",", "h", "*", "w", ")", ",", "y_dis", ".", "view", "(", "n", ",", "h", "*", "w", ",", "h", "*", "w", ")", ")", ".", "view", "(", "\n", "n", ",", "c", ",", "h", ",", "w", ")", "*", "(", "1.0", "/", "self", ".", "normalization_factor", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x_col", ",", "x_dis", "]", ",", "1", ")", "\n", "", "out", "=", "self", ".", "proj", "(", "out", ")", "\n", "out", "=", "resize", "(", "\n", "out", ",", "\n", "size", "=", "identity", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "align_corners", ")", "\n", "out", "=", "self", ".", "bottleneck", "(", "torch", ".", "cat", "(", "(", "identity", ",", "out", ")", ",", "dim", "=", "1", ")", ")", "\n", "out", "=", "self", ".", "cls_seg", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.enc_head.EncModule.__init__": [[22, 49], ["torch.Module.__init__", "mmcv.cnn.ConvModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "norm_cfg.copy", "dict", "mmseg.ops.Encoding", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "encoding_norm_cfg[].replace", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "num_codes", ",", "conv_cfg", ",", "norm_cfg", ",", "act_cfg", ")", ":", "\n", "        ", "super", "(", "EncModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoding_project", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "# TODO: resolve this hack", "\n", "# change to 1d", "\n", "if", "norm_cfg", "is", "not", "None", ":", "\n", "            ", "encoding_norm_cfg", "=", "norm_cfg", ".", "copy", "(", ")", "\n", "if", "encoding_norm_cfg", "[", "'type'", "]", "in", "[", "'BN'", ",", "'IN'", "]", ":", "\n", "                ", "encoding_norm_cfg", "[", "'type'", "]", "+=", "'1d'", "\n", "", "else", ":", "\n", "                ", "encoding_norm_cfg", "[", "'type'", "]", "=", "encoding_norm_cfg", "[", "'type'", "]", ".", "replace", "(", "\n", "'2d'", ",", "'1d'", ")", "\n", "", "", "else", ":", "\n", "# fallback to BN1d", "\n", "            ", "encoding_norm_cfg", "=", "dict", "(", "type", "=", "'BN1d'", ")", "\n", "", "self", ".", "encoding", "=", "nn", ".", "Sequential", "(", "\n", "Encoding", "(", "channels", "=", "in_channels", ",", "num_codes", "=", "num_codes", ")", ",", "\n", "build_norm_layer", "(", "encoding_norm_cfg", ",", "num_codes", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_channels", ",", "in_channels", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.enc_head.EncModule.forward": [[50, 59], ["enc_head.EncModule.encoding_project", "enc_head.EncModule.encoding().mean", "x.size", "enc_head.EncModule.fc", "enc_head.EncModule.view", "torch.relu_", "torch.relu_", "torch.relu_", "enc_head.EncModule.encoding"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "encoding_projection", "=", "self", ".", "encoding_project", "(", "x", ")", "\n", "encoding_feat", "=", "self", ".", "encoding", "(", "encoding_projection", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "batch_size", ",", "channels", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "gamma", "=", "self", ".", "fc", "(", "encoding_feat", ")", "\n", "y", "=", "gamma", ".", "view", "(", "batch_size", ",", "channels", ",", "1", ",", "1", ")", "\n", "output", "=", "F", ".", "relu_", "(", "x", "+", "x", "*", "y", ")", "\n", "return", "encoding_feat", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.enc_head.EncHead.__init__": [[78, 128], ["dict", "decode_head.BaseDecodeHead.__init__", "mmcv.cnn.ConvModule", "enc_head.EncModule", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mmcv.cnn.ConvModule", "builder.build_loss", "torch.Linear", "torch.Linear", "torch.Linear", "enc_head.EncHead.lateral_convs.append", "mmcv.cnn.ConvModule", "len"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_loss"], ["def", "__init__", "(", "self", ",", "\n", "num_codes", "=", "32", ",", "\n", "use_se_loss", "=", "True", ",", "\n", "add_lateral", "=", "False", ",", "\n", "loss_se_decode", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "loss_weight", "=", "0.2", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EncHead", ",", "self", ")", ".", "__init__", "(", "\n", "input_transform", "=", "'multiple_select'", ",", "**", "kwargs", ")", "\n", "self", ".", "use_se_loss", "=", "use_se_loss", "\n", "self", ".", "add_lateral", "=", "add_lateral", "\n", "self", ".", "num_codes", "=", "num_codes", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "[", "-", "1", "]", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "if", "add_lateral", ":", "\n", "            ", "self", ".", "lateral_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "in_channels", "in", "self", ".", "in_channels", "[", ":", "-", "1", "]", ":", "# skip the last one", "\n", "                ", "self", ".", "lateral_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "", "self", ".", "fusion", "=", "ConvModule", "(", "\n", "len", "(", "self", ".", "in_channels", ")", "*", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "", "self", ".", "enc_module", "=", "EncModule", "(", "\n", "self", ".", "channels", ",", "\n", "num_codes", "=", "num_codes", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "if", "self", ".", "use_se_loss", ":", "\n", "            ", "self", ".", "loss_se_decode", "=", "build_loss", "(", "loss_se_decode", ")", "\n", "self", ".", "se_layer", "=", "nn", ".", "Linear", "(", "self", ".", "channels", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.enc_head.EncHead.forward": [[129, 150], ["enc_head.EncHead._transform_inputs", "enc_head.EncHead.bottleneck", "enc_head.EncHead.enc_module", "enc_head.EncHead.cls_seg", "enc_head.EncHead.fusion", "enc_head.EncHead.se_layer", "mmseg.ops.resize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lateral_conv", "enumerate"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "inputs", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "feat", "=", "self", ".", "bottleneck", "(", "inputs", "[", "-", "1", "]", ")", "\n", "if", "self", ".", "add_lateral", ":", "\n", "            ", "laterals", "=", "[", "\n", "resize", "(", "\n", "lateral_conv", "(", "inputs", "[", "i", "]", ")", ",", "\n", "size", "=", "feat", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "for", "i", ",", "lateral_conv", "in", "enumerate", "(", "self", ".", "lateral_convs", ")", "\n", "]", "\n", "feat", "=", "self", ".", "fusion", "(", "torch", ".", "cat", "(", "[", "feat", ",", "*", "laterals", "]", ",", "1", ")", ")", "\n", "", "encode_feat", ",", "output", "=", "self", ".", "enc_module", "(", "feat", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "if", "self", ".", "use_se_loss", ":", "\n", "            ", "se_output", "=", "self", ".", "se_layer", "(", "encode_feat", ")", "\n", "return", "output", ",", "se_output", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.enc_head.EncHead.forward_test": [[151, 157], ["enc_head.EncHead.forward", "enc_head.EncHead.forward"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward"], ["", "", "def", "forward_test", "(", "self", ",", "inputs", ",", "img_metas", ",", "test_cfg", ")", ":", "\n", "        ", "\"\"\"Forward function for testing, ignore se_loss.\"\"\"", "\n", "if", "self", ".", "use_se_loss", ":", "\n", "            ", "return", "self", ".", "forward", "(", "inputs", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "forward", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.enc_head.EncHead._convert_to_onehot_labels": [[158, 177], ["seg_label.size", "seg_label.new_zeros", "range", "seg_label[].float().histc", "seg_label[].float"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_convert_to_onehot_labels", "(", "seg_label", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"Convert segmentation label to onehot.\n\n        Args:\n            seg_label (Tensor): Segmentation label of shape (N, H, W).\n            num_classes (int): Number of classes.\n\n        Returns:\n            Tensor: Onehot labels of shape (N, num_classes).\n        \"\"\"", "\n", "\n", "batch_size", "=", "seg_label", ".", "size", "(", "0", ")", "\n", "onehot_labels", "=", "seg_label", ".", "new_zeros", "(", "(", "batch_size", ",", "num_classes", ")", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "hist", "=", "seg_label", "[", "i", "]", ".", "float", "(", ")", ".", "histc", "(", "\n", "bins", "=", "num_classes", ",", "min", "=", "0", ",", "max", "=", "num_classes", "-", "1", ")", "\n", "onehot_labels", "[", "i", "]", "=", "hist", ">", "0", "\n", "", "return", "onehot_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.enc_head.EncHead.losses": [[178, 188], ["dict", "dict.update", "enc_head.EncHead.loss_se_decode", "super().losses", "enc_head.EncHead._convert_to_onehot_labels"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.losses", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.enc_head.EncHead._convert_to_onehot_labels"], ["", "def", "losses", "(", "self", ",", "seg_logit", ",", "seg_label", ")", ":", "\n", "        ", "\"\"\"Compute segmentation and semantic encoding loss.\"\"\"", "\n", "seg_logit", ",", "se_seg_logit", "=", "seg_logit", "\n", "loss", "=", "dict", "(", ")", "\n", "loss", ".", "update", "(", "super", "(", "EncHead", ",", "self", ")", ".", "losses", "(", "seg_logit", ",", "seg_label", ")", ")", "\n", "se_loss", "=", "self", ".", "loss_se_decode", "(", "\n", "se_seg_logit", ",", "\n", "self", ".", "_convert_to_onehot_labels", "(", "seg_label", ",", "self", ".", "num_classes", ")", ")", "\n", "loss", "[", "'loss_se'", "]", "=", "se_loss", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.vit_mla_auxi_head.VIT_MLA_AUXIHead.__init__": [[21, 29], ["decode_head.BaseDecodeHead.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "768", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VIT_MLA_AUXIHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "if", "self", ".", "in_channels", "==", "1024", ":", "\n", "            ", "self", ".", "aux_0", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "256", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "aux_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "in_channels", "==", "256", ":", "\n", "            ", "self", ".", "aux", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.vit_mla_auxi_head.VIT_MLA_AUXIHead.to_2D": [[30, 35], ["int", "x.transpose().reshape.transpose().reshape.transpose().reshape", "math.sqrt", "x.transpose().reshape.transpose().reshape.transpose"], "methods", ["None"], ["", "", "def", "to_2D", "(", "self", ",", "x", ")", ":", "\n", "        ", "n", ",", "hw", ",", "c", "=", "x", ".", "shape", "\n", "h", "=", "w", "=", "int", "(", "math", ".", "sqrt", "(", "hw", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "n", ",", "c", ",", "h", ",", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.vit_mla_auxi_head.VIT_MLA_AUXIHead.forward": [[36, 49], ["vit_mla_auxi_head.VIT_MLA_AUXIHead._transform_inputs", "torch.interpolate", "torch.interpolate", "torch.interpolate", "vit_mla_auxi_head.VIT_MLA_AUXIHead.dim", "vit_mla_auxi_head.VIT_MLA_AUXIHead.to_2D", "vit_mla_auxi_head.VIT_MLA_AUXIHead.aux_0", "vit_mla_auxi_head.VIT_MLA_AUXIHead.aux_1", "vit_mla_auxi_head.VIT_MLA_AUXIHead.aux"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.vit_mla_auxi_head.VIT_MLA_AUXIHead.to_2D"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "_transform_inputs", "(", "x", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", "1", ":", "]", "\n", "x", "=", "self", ".", "to_2D", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "in_channels", "==", "1024", ":", "\n", "            ", "x", "=", "self", ".", "aux_0", "(", "x", ")", "\n", "x", "=", "self", ".", "aux_1", "(", "x", ")", "\n", "", "elif", "self", ".", "in_channels", "==", "256", ":", "\n", "            ", "x", "=", "self", ".", "aux", "(", "x", ")", "\n", "", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "self", ".", "img_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.apc_head.ACM.__init__": [[25, 77], ["torch.Module.__init__", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "pool_scale", ",", "fusion", ",", "in_channels", ",", "channels", ",", "conv_cfg", ",", "\n", "norm_cfg", ",", "act_cfg", ")", ":", "\n", "        ", "super", "(", "ACM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool_scale", "=", "pool_scale", "\n", "self", ".", "fusion", "=", "fusion", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "pooled_redu_conv", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n", "self", ".", "input_redu_conv", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n", "self", ".", "global_info", "=", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n", "self", ".", "gla", "=", "nn", ".", "Conv2d", "(", "self", ".", "channels", ",", "self", ".", "pool_scale", "**", "2", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "self", ".", "residual_conv", "=", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n", "if", "self", ".", "fusion", ":", "\n", "            ", "self", ".", "fusion_conv", "=", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.apc_head.ACM.forward": [[78, 107], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "apc_head.ACM.input_redu_conv", "apc_head.ACM.pooled_redu_conv", "apc_head.ACM.size", "pooled_x.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "apc_head.ACM.gla().permute().reshape", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "apc_head.ACM.permute().contiguous", "apc_head.ACM.view", "apc_head.ACM.residual_conv", "torch.relu", "torch.relu", "torch.relu", "apc_head.ACM.size", "apc_head.ACM.size", "apc_head.ACM.fusion_conv", "pooled_x.view().permute().contiguous.view().permute().contiguous.view().permute", "apc_head.ACM.gla().permute", "apc_head.ACM.permute", "pooled_x.view().permute().contiguous.view().permute().contiguous.view", "apc_head.ACM.gla", "mmseg.ops.resize", "apc_head.ACM.global_info", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "pooled_x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "self", ".", "pool_scale", ")", "\n", "# [batch_size, channels, h, w]", "\n", "x", "=", "self", ".", "input_redu_conv", "(", "x", ")", "\n", "# [batch_size, channels, pool_scale, pool_scale]", "\n", "pooled_x", "=", "self", ".", "pooled_redu_conv", "(", "pooled_x", ")", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "# [batch_size, pool_scale * pool_scale, channels]", "\n", "pooled_x", "=", "pooled_x", ".", "view", "(", "batch_size", ",", "self", ".", "channels", ",", "\n", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "# [batch_size, h * w, pool_scale * pool_scale]", "\n", "affinity_matrix", "=", "self", ".", "gla", "(", "x", "+", "resize", "(", "\n", "self", ".", "global_info", "(", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "1", ")", ")", ",", "size", "=", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "\n", "batch_size", ",", "-", "1", ",", "self", ".", "pool_scale", "**", "2", ")", "\n", "affinity_matrix", "=", "F", ".", "sigmoid", "(", "affinity_matrix", ")", "\n", "# [batch_size, h * w, channels]", "\n", "z_out", "=", "torch", ".", "matmul", "(", "affinity_matrix", ",", "pooled_x", ")", "\n", "# [batch_size, channels, h * w]", "\n", "z_out", "=", "z_out", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "# [batch_size, channels, h, w]", "\n", "z_out", "=", "z_out", ".", "view", "(", "batch_size", ",", "self", ".", "channels", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "z_out", "=", "self", ".", "residual_conv", "(", "z_out", ")", "\n", "z_out", "=", "F", ".", "relu", "(", "z_out", "+", "x", ")", "\n", "if", "self", ".", "fusion", ":", "\n", "            ", "z_out", "=", "self", ".", "fusion_conv", "(", "z_out", ")", "\n", "\n", "", "return", "z_out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.apc_head.APCHead.__init__": [[124, 148], ["decode_head.BaseDecodeHead.__init__", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mmcv.cnn.ConvModule", "acm_modules.append", "apc_head.ACM", "len"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "pool_scales", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ",", "fusion", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "APCHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "isinstance", "(", "pool_scales", ",", "(", "list", ",", "tuple", ")", ")", "\n", "self", ".", "pool_scales", "=", "pool_scales", "\n", "self", ".", "fusion", "=", "fusion", "\n", "acm_modules", "=", "[", "]", "\n", "for", "pool_scale", "in", "self", ".", "pool_scales", ":", "\n", "            ", "acm_modules", ".", "append", "(", "\n", "ACM", "(", "pool_scale", ",", "\n", "self", ".", "fusion", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "", "self", ".", "acm_modules", "=", "nn", ".", "ModuleList", "(", "acm_modules", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "+", "len", "(", "pool_scales", ")", "*", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.apc_head.APCHead.forward": [[149, 159], ["apc_head.APCHead._transform_inputs", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "apc_head.APCHead.bottleneck", "apc_head.APCHead.cls_seg", "torch.cat.append", "torch.cat.append", "torch.cat.append", "acm_module"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "acm_outs", "=", "[", "x", "]", "\n", "for", "acm_module", "in", "self", ".", "acm_modules", ":", "\n", "            ", "acm_outs", ".", "append", "(", "acm_module", "(", "x", ")", ")", "\n", "", "acm_outs", "=", "torch", ".", "cat", "(", "acm_outs", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "acm_outs", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.gc_head.GCHead.__init__": [[23, 37], ["fcn_head.FCNHead.__init__", "mmcv.cnn.ContextBlock"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "ratio", "=", "1", "/", "4.", ",", "\n", "pooling_type", "=", "'att'", ",", "\n", "fusion_types", "=", "(", "'channel_add'", ",", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GCHead", ",", "self", ")", ".", "__init__", "(", "num_convs", "=", "2", ",", "**", "kwargs", ")", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "pooling_type", "=", "pooling_type", "\n", "self", ".", "fusion_types", "=", "fusion_types", "\n", "self", ".", "gc_block", "=", "ContextBlock", "(", "\n", "in_channels", "=", "self", ".", "channels", ",", "\n", "ratio", "=", "self", ".", "ratio", ",", "\n", "pooling_type", "=", "self", ".", "pooling_type", ",", "\n", "fusion_types", "=", "self", ".", "fusion_types", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.gc_head.GCHead.forward": [[38, 48], ["gc_head.GCHead._transform_inputs", "gc_head.GCHead.gc_block", "gc_head.GCHead.cls_seg", "gc_head.GCHead.conv_cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "output", "=", "self", ".", "convs", "[", "0", "]", "(", "x", ")", "\n", "output", "=", "self", ".", "gc_block", "(", "output", ")", "\n", "output", "=", "self", ".", "convs", "[", "1", "]", "(", "output", ")", "\n", "if", "self", ".", "concat_input", ":", "\n", "            ", "output", "=", "self", ".", "conv_cat", "(", "torch", ".", "cat", "(", "[", "x", ",", "output", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ocr_head.SpatialGatherModule.__init__": [[19, 22], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "scale", ")", ":", "\n", "        ", "super", "(", "SpatialGatherModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ocr_head.SpatialGatherModule.forward": [[23, 37], ["torch.softmax.size", "feats.permute.permute.size", "torch.softmax.view", "feats.permute.permute.view", "feats.permute.permute.permute", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "ocr_context.permute().contiguous().unsqueeze.permute().contiguous().unsqueeze.permute().contiguous().unsqueeze", "ocr_context.permute().contiguous().unsqueeze.permute().contiguous().unsqueeze.permute().contiguous", "ocr_context.permute().contiguous().unsqueeze.permute().contiguous().unsqueeze.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ",", "probs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "batch_size", ",", "num_classes", ",", "height", ",", "width", "=", "probs", ".", "size", "(", ")", "\n", "channels", "=", "feats", ".", "size", "(", "1", ")", "\n", "probs", "=", "probs", ".", "view", "(", "batch_size", ",", "num_classes", ",", "-", "1", ")", "\n", "feats", "=", "feats", ".", "view", "(", "batch_size", ",", "channels", ",", "-", "1", ")", "\n", "# [batch_size, height*width, num_classes]", "\n", "feats", "=", "feats", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# [batch_size, channels, height*width]", "\n", "probs", "=", "F", ".", "softmax", "(", "self", ".", "scale", "*", "probs", ",", "dim", "=", "2", ")", "\n", "# [batch_size, channels, num_classes]", "\n", "ocr_context", "=", "torch", ".", "matmul", "(", "probs", ",", "feats", ")", "\n", "ocr_context", "=", "ocr_context", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "unsqueeze", "(", "3", ")", "\n", "return", "ocr_context", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ocr_head.ObjectAttentionBlock.__init__": [[42, 72], ["utils.SelfAttentionBlock.__init__", "mmcv.cnn.ConvModule", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "scale", ",", "conv_cfg", ",", "norm_cfg", ",", "\n", "act_cfg", ")", ":", "\n", "        ", "if", "scale", ">", "1", ":", "\n", "            ", "query_downsample", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "scale", ")", "\n", "", "else", ":", "\n", "            ", "query_downsample", "=", "None", "\n", "", "super", "(", "ObjectAttentionBlock", ",", "self", ")", ".", "__init__", "(", "\n", "key_in_channels", "=", "in_channels", ",", "\n", "query_in_channels", "=", "in_channels", ",", "\n", "channels", "=", "channels", ",", "\n", "out_channels", "=", "in_channels", ",", "\n", "share_key_query", "=", "False", ",", "\n", "query_downsample", "=", "query_downsample", ",", "\n", "key_downsample", "=", "None", ",", "\n", "key_query_num_convs", "=", "2", ",", "\n", "key_query_norm", "=", "True", ",", "\n", "value_out_num_convs", "=", "1", ",", "\n", "value_out_norm", "=", "True", ",", "\n", "matmul_norm", "=", "True", ",", "\n", "with_out", "=", "True", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "in_channels", "*", "2", ",", "\n", "in_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ocr_head.ObjectAttentionBlock.forward": [[73, 82], ["super().forward", "ocr_head.ObjectAttentionBlock.bottleneck", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmseg.ops.resize"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "query_feats", ",", "key_feats", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "context", "=", "super", "(", "ObjectAttentionBlock", ",", "\n", "self", ")", ".", "forward", "(", "query_feats", ",", "key_feats", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "torch", ".", "cat", "(", "[", "context", ",", "query_feats", "]", ",", "dim", "=", "1", ")", ")", "\n", "if", "self", ".", "query_downsample", "is", "not", "None", ":", "\n", "            ", "output", "=", "resize", "(", "query_feats", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ocr_head.OCRHead.__init__": [[97, 118], ["cascade_decode_head.BaseCascadeDecodeHead.__init__", "ocr_head.ObjectAttentionBlock", "ocr_head.SpatialGatherModule", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "ocr_channels", ",", "scale", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OCRHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "ocr_channels", "=", "ocr_channels", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "object_context_block", "=", "ObjectAttentionBlock", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "ocr_channels", ",", "\n", "self", ".", "scale", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "spatial_gather_module", "=", "SpatialGatherModule", "(", "self", ".", "scale", ")", "\n", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ocr_head.OCRHead.forward": [[119, 128], ["ocr_head.OCRHead._transform_inputs", "ocr_head.OCRHead.bottleneck", "ocr_head.OCRHead.spatial_gather_module", "ocr_head.OCRHead.object_context_block", "ocr_head.OCRHead.cls_seg"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "prev_output", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "feats", "=", "self", ".", "bottleneck", "(", "x", ")", "\n", "context", "=", "self", ".", "spatial_gather_module", "(", "feats", ",", "prev_output", ")", "\n", "object_context", "=", "self", ".", "object_context_block", "(", "feats", ",", "context", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "object_context", ")", "\n", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.cascade_decode_head.BaseCascadeDecodeHead.__init__": [[10, 12], ["decode_head.BaseDecodeHead.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BaseCascadeDecodeHead", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.cascade_decode_head.BaseCascadeDecodeHead.forward": [[13, 17], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "inputs", ",", "prev_output", ")", ":", "\n", "        ", "\"\"\"Placeholder of forward function.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.cascade_decode_head.BaseCascadeDecodeHead.forward_train": [[18, 40], ["cascade_decode_head.BaseCascadeDecodeHead.forward", "cascade_decode_head.BaseCascadeDecodeHead.losses"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.losses"], ["", "def", "forward_train", "(", "self", ",", "inputs", ",", "prev_output", ",", "img_metas", ",", "gt_semantic_seg", ",", "\n", "train_cfg", ")", ":", "\n", "        ", "\"\"\"Forward function for training.\n        Args:\n            inputs (list[Tensor]): List of multi-level img features.\n            prev_output (Tensor): The output of previous decode head.\n            img_metas (list[dict]): List of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmseg/datasets/pipelines/formatting.py:Collect`.\n            gt_semantic_seg (Tensor): Semantic segmentation masks\n                used if the architecture supports semantic segmentation task.\n            train_cfg (dict): The training config.\n\n        Returns:\n            dict[str, Tensor]: a dictionary of loss components\n        \"\"\"", "\n", "seg_logits", "=", "self", ".", "forward", "(", "inputs", ",", "prev_output", ")", "\n", "losses", "=", "self", ".", "losses", "(", "seg_logits", ",", "gt_semantic_seg", ")", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.cascade_decode_head.BaseCascadeDecodeHead.forward_test": [[41, 58], ["cascade_decode_head.BaseCascadeDecodeHead.forward"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward"], ["", "def", "forward_test", "(", "self", ",", "inputs", ",", "prev_output", ",", "img_metas", ",", "test_cfg", ")", ":", "\n", "        ", "\"\"\"Forward function for testing.\n\n        Args:\n            inputs (list[Tensor]): List of multi-level img features.\n            prev_output (Tensor): The output of previous decode head.\n            img_metas (list[dict]): List of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmseg/datasets/pipelines/formatting.py:Collect`.\n            test_cfg (dict): The testing config.\n\n        Returns:\n            Tensor: Output segmentation map.\n        \"\"\"", "\n", "return", "self", ".", "forward", "(", "inputs", ",", "prev_output", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.dnl_head.DisentangledNonLocal2d.__init__": [[16, 20], ["mmcv.cnn.NonLocal2d.__init__", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "*", "arg", ",", "temperature", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "arg", ",", "**", "kwargs", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "conv_mask", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.dnl_head.DisentangledNonLocal2d.embedded_gaussian": [[21, 32], ["torch.matmul", "pairwise_weight.softmax.softmax.softmax"], "methods", ["None"], ["", "def", "embedded_gaussian", "(", "self", ",", "theta_x", ",", "phi_x", ")", ":", "\n", "        ", "\"\"\"Embedded gaussian with temperature.\"\"\"", "\n", "\n", "# NonLocal2d pairwise_weight: [N, HxW, HxW]", "\n", "pairwise_weight", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "if", "self", ".", "use_scale", ":", "\n", "# theta_x.shape[-1] is `self.inter_channels`", "\n", "            ", "pairwise_weight", "/=", "theta_x", ".", "shape", "[", "-", "1", "]", "**", "0.5", "\n", "", "pairwise_weight", "/=", "self", ".", "temperature", "\n", "pairwise_weight", "=", "pairwise_weight", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "return", "pairwise_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.dnl_head.DisentangledNonLocal2d.forward": [[33, 84], ["x.size", "dnl_head.DisentangledNonLocal2d.g().view", "g_x.permute.permute.permute", "theta_x.permute.permute.mean", "dnl_head.DisentangledNonLocal2d.mean", "getattr", "getattr.", "torch.matmul", "y.permute().contiguous().reshape.permute().contiguous().reshape.permute().contiguous().reshape", "dnl_head.DisentangledNonLocal2d.conv_mask", "unary_mask.softmax.softmax.view", "unary_mask.softmax.softmax.softmax", "torch.matmul", "unary_x.permute().contiguous().reshape.permute().contiguous().reshape.permute().contiguous().reshape", "x.view", "theta_x.permute.permute.permute", "dnl_head.DisentangledNonLocal2d.conv_out", "dnl_head.DisentangledNonLocal2d.g", "dnl_head.DisentangledNonLocal2d.phi().view", "x.view", "dnl_head.DisentangledNonLocal2d.theta().view", "dnl_head.DisentangledNonLocal2d.phi().view", "dnl_head.DisentangledNonLocal2d.theta().view", "theta_x.permute.permute.permute", "dnl_head.DisentangledNonLocal2d.phi().view", "y.permute().contiguous().reshape.permute().contiguous().reshape.permute().contiguous", "unary_x.permute().contiguous().reshape.permute().contiguous().reshape.permute().contiguous", "x.size", "dnl_head.DisentangledNonLocal2d.phi", "dnl_head.DisentangledNonLocal2d.theta", "dnl_head.DisentangledNonLocal2d.phi", "dnl_head.DisentangledNonLocal2d.theta", "dnl_head.DisentangledNonLocal2d.phi", "y.permute().contiguous().reshape.permute().contiguous().reshape.permute", "unary_x.permute().contiguous().reshape.permute().contiguous().reshape.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: [N, C, H, W]", "\n", "        ", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "# g_x: [N, HxW, C]", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# theta_x: [N, HxW, C], phi_x: [N, C, HxW]", "\n", "if", "self", ".", "mode", "==", "'gaussian'", ":", "\n", "            ", "theta_x", "=", "x", ".", "view", "(", "n", ",", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "if", "self", ".", "sub_sample", ":", "\n", "                ", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "phi_x", "=", "x", ".", "view", "(", "n", ",", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "", "", "elif", "self", ".", "mode", "==", "'concatenation'", ":", "\n", "            ", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "\n", "# subtract mean", "\n", "", "theta_x", "-=", "theta_x", ".", "mean", "(", "dim", "=", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "phi_x", "-=", "phi_x", ".", "mean", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "pairwise_func", "=", "getattr", "(", "self", ",", "self", ".", "mode", ")", "\n", "# pairwise_weight: [N, HxW, HxW]", "\n", "pairwise_weight", "=", "pairwise_func", "(", "theta_x", ",", "phi_x", ")", "\n", "\n", "# y: [N, HxW, C]", "\n", "y", "=", "torch", ".", "matmul", "(", "pairwise_weight", ",", "g_x", ")", "\n", "# y: [N, C, H, W]", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "reshape", "(", "n", ",", "self", ".", "inter_channels", ",", "\n", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "# unary_mask: [N, 1, HxW]", "\n", "unary_mask", "=", "self", ".", "conv_mask", "(", "x", ")", "\n", "unary_mask", "=", "unary_mask", ".", "view", "(", "n", ",", "1", ",", "-", "1", ")", "\n", "unary_mask", "=", "unary_mask", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "# unary_x: [N, 1, C]", "\n", "unary_x", "=", "torch", ".", "matmul", "(", "unary_mask", ",", "g_x", ")", "\n", "# unary_x: [N, C, 1, 1]", "\n", "unary_x", "=", "unary_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "reshape", "(", "\n", "n", ",", "self", ".", "inter_channels", ",", "1", ",", "1", ")", "\n", "\n", "output", "=", "x", "+", "self", ".", "conv_out", "(", "y", "+", "unary_x", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.dnl_head.DNLHead.__init__": [[102, 121], ["fcn_head.FCNHead.__init__", "dnl_head.DisentangledNonLocal2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "reduction", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "mode", "=", "'embedded_gaussian'", ",", "\n", "temperature", "=", "0.05", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DNLHead", ",", "self", ")", ".", "__init__", "(", "num_convs", "=", "2", ",", "**", "kwargs", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "use_scale", "=", "use_scale", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dnl_block", "=", "DisentangledNonLocal2d", "(", "\n", "in_channels", "=", "self", ".", "channels", ",", "\n", "reduction", "=", "self", ".", "reduction", ",", "\n", "use_scale", "=", "self", ".", "use_scale", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "temperature", "=", "self", ".", "temperature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.dnl_head.DNLHead.forward": [[122, 132], ["dnl_head.DNLHead._transform_inputs", "dnl_head.DNLHead.dnl_block", "dnl_head.DNLHead.cls_seg", "dnl_head.DNLHead.conv_cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "output", "=", "self", ".", "convs", "[", "0", "]", "(", "x", ")", "\n", "output", "=", "self", ".", "dnl_block", "(", "output", ")", "\n", "output", "=", "self", ".", "convs", "[", "1", "]", "(", "output", ")", "\n", "if", "self", ".", "concat_input", ":", "\n", "            ", "output", "=", "self", ".", "conv_cat", "(", "torch", ".", "cat", "(", "[", "x", ",", "output", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.da_head.PAM.__init__": [[20, 40], ["utils.SelfAttentionBlock.__init__", "mmcv.cnn.Scale"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ")", ":", "\n", "        ", "super", "(", "PAM", ",", "self", ")", ".", "__init__", "(", "\n", "key_in_channels", "=", "in_channels", ",", "\n", "query_in_channels", "=", "in_channels", ",", "\n", "channels", "=", "channels", ",", "\n", "out_channels", "=", "in_channels", ",", "\n", "share_key_query", "=", "False", ",", "\n", "query_downsample", "=", "None", ",", "\n", "key_downsample", "=", "None", ",", "\n", "key_query_num_convs", "=", "1", ",", "\n", "key_query_norm", "=", "False", ",", "\n", "value_out_num_convs", "=", "1", ",", "\n", "value_out_norm", "=", "False", ",", "\n", "matmul_norm", "=", "False", ",", "\n", "with_out", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "self", ".", "gamma", "=", "Scale", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.da_head.PAM.forward": [[41, 47], ["super().forward", "da_head.PAM.gamma"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "out", "=", "super", "(", "PAM", ",", "self", ")", ".", "forward", "(", "x", ",", "x", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "(", "out", ")", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.da_head.CAM.__init__": [[52, 55], ["torch.nn.Module.__init__", "mmcv.cnn.Scale"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "Scale", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.da_head.CAM.forward": [[56, 72], ["x.size", "x.view", "x.view().permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "x.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "[].expand_as", "da_head.CAM.gamma", "x.view", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "x", ".", "view", "(", "batch_size", ",", "channels", ",", "-", "1", ")", "\n", "proj_key", "=", "x", ".", "view", "(", "batch_size", ",", "channels", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "\n", "energy_new", "=", "torch", ".", "max", "(", "\n", "energy", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "expand_as", "(", "energy", ")", "-", "energy", "\n", "attention", "=", "F", ".", "softmax", "(", "energy_new", ",", "dim", "=", "-", "1", ")", "\n", "proj_value", "=", "x", ".", "view", "(", "batch_size", ",", "channels", ",", "-", "1", ")", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "attention", ",", "proj_value", ")", "\n", "out", "=", "out", ".", "view", "(", "batch_size", ",", "channels", ",", "height", ",", "width", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "(", "out", ")", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.da_head.DAHead.__init__": [[85, 127], ["decode_head.BaseDecodeHead.__init__", "mmcv.cnn.ConvModule", "da_head.PAM", "mmcv.cnn.ConvModule", "torch.nn.Conv2d", "torch.nn.Conv2d", "mmcv.cnn.ConvModule", "da_head.CAM", "mmcv.cnn.ConvModule", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "pam_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DAHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "pam_channels", "=", "pam_channels", "\n", "self", ".", "pam_in_conv", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "pam", "=", "PAM", "(", "self", ".", "channels", ",", "pam_channels", ")", "\n", "self", ".", "pam_out_conv", "=", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "pam_conv_seg", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "channels", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "cam_in_conv", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "cam", "=", "CAM", "(", ")", "\n", "self", ".", "cam_out_conv", "=", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "cam_conv_seg", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "channels", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.da_head.DAHead.pam_cls_seg": [[128, 134], ["da_head.DAHead.pam_conv_seg", "da_head.DAHead.dropout"], "methods", ["None"], ["", "def", "pam_cls_seg", "(", "self", ",", "feat", ")", ":", "\n", "        ", "\"\"\"PAM feature classification.\"\"\"", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "feat", "=", "self", ".", "dropout", "(", "feat", ")", "\n", "", "output", "=", "self", ".", "pam_conv_seg", "(", "feat", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.da_head.DAHead.cam_cls_seg": [[135, 141], ["da_head.DAHead.cam_conv_seg", "da_head.DAHead.dropout"], "methods", ["None"], ["", "def", "cam_cls_seg", "(", "self", ",", "feat", ")", ":", "\n", "        ", "\"\"\"CAM feature classification.\"\"\"", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "feat", "=", "self", ".", "dropout", "(", "feat", ")", "\n", "", "output", "=", "self", ".", "cam_conv_seg", "(", "feat", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.da_head.DAHead.forward": [[142, 159], ["da_head.DAHead._transform_inputs", "da_head.DAHead.pam_in_conv", "da_head.DAHead.pam", "da_head.DAHead.pam_out_conv", "da_head.DAHead.pam_cls_seg", "da_head.DAHead.cam_in_conv", "da_head.DAHead.cam", "da_head.DAHead.cam_out_conv", "da_head.DAHead.cam_cls_seg", "da_head.DAHead.cls_seg"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.da_head.DAHead.pam_cls_seg", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.da_head.DAHead.cam_cls_seg", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "pam_feat", "=", "self", ".", "pam_in_conv", "(", "x", ")", "\n", "pam_feat", "=", "self", ".", "pam", "(", "pam_feat", ")", "\n", "pam_feat", "=", "self", ".", "pam_out_conv", "(", "pam_feat", ")", "\n", "pam_out", "=", "self", ".", "pam_cls_seg", "(", "pam_feat", ")", "\n", "\n", "cam_feat", "=", "self", ".", "cam_in_conv", "(", "x", ")", "\n", "cam_feat", "=", "self", ".", "cam", "(", "cam_feat", ")", "\n", "cam_feat", "=", "self", ".", "cam_out_conv", "(", "cam_feat", ")", "\n", "cam_out", "=", "self", ".", "cam_cls_seg", "(", "cam_feat", ")", "\n", "\n", "feat_sum", "=", "pam_feat", "+", "cam_feat", "\n", "pam_cam_out", "=", "self", ".", "cls_seg", "(", "feat_sum", ")", "\n", "\n", "return", "pam_cam_out", ",", "pam_out", ",", "cam_out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.da_head.DAHead.forward_test": [[160, 163], ["da_head.DAHead.forward"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward"], ["", "def", "forward_test", "(", "self", ",", "inputs", ",", "img_metas", ",", "test_cfg", ")", ":", "\n", "        ", "\"\"\"Forward function for testing, only ``pam_cam`` is used.\"\"\"", "\n", "return", "self", ".", "forward", "(", "inputs", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.da_head.DAHead.losses": [[164, 179], ["dict", "dict.update", "dict.update", "dict.update", "mmseg.core.add_prefix", "mmseg.core.add_prefix", "mmseg.core.add_prefix", "super().losses", "super().losses", "super().losses"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.misc.add_prefix", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.misc.add_prefix", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.misc.add_prefix", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.losses", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.losses", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.losses"], ["", "def", "losses", "(", "self", ",", "seg_logit", ",", "seg_label", ")", ":", "\n", "        ", "\"\"\"Compute ``pam_cam``, ``pam``, ``cam`` loss.\"\"\"", "\n", "pam_cam_seg_logit", ",", "pam_seg_logit", ",", "cam_seg_logit", "=", "seg_logit", "\n", "loss", "=", "dict", "(", ")", "\n", "loss", ".", "update", "(", "\n", "add_prefix", "(", "\n", "super", "(", "DAHead", ",", "self", ")", ".", "losses", "(", "pam_cam_seg_logit", ",", "seg_label", ")", ",", "\n", "'pam_cam'", ")", ")", "\n", "loss", ".", "update", "(", "\n", "add_prefix", "(", "\n", "super", "(", "DAHead", ",", "self", ")", ".", "losses", "(", "pam_seg_logit", ",", "seg_label", ")", ",", "'pam'", ")", ")", "\n", "loss", ".", "update", "(", "\n", "add_prefix", "(", "\n", "super", "(", "DAHead", ",", "self", ")", ".", "losses", "(", "cam_seg_logit", ",", "seg_label", ")", ",", "'cam'", ")", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.lraspp_head.LRASPPHead.__init__": [[23, 67], ["decode_head.BaseDecodeHead.__init__", "mmcv.is_tuple_of", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.ConvModule", "torch.Sequential", "torch.Sequential", "ValueError", "len", "len", "lraspp_head.LRASPPHead.convs.add_module", "lraspp_head.LRASPPHead.conv_ups.add_module", "torch.AvgPool2d", "torch.AvgPool2d", "mmcv.cnn.ConvModule", "len", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.ConvModule", "dict"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "branch_channels", "=", "(", "32", ",", "64", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LRASPPHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "self", ".", "input_transform", "!=", "'multiple_select'", ":", "\n", "            ", "raise", "ValueError", "(", "'in Lite R-ASPP (LRASPP) head, input_transform '", "\n", "f'must be \\'multiple_select\\'. But received '", "\n", "f'\\'{self.input_transform}\\''", ")", "\n", "", "assert", "is_tuple_of", "(", "branch_channels", ",", "int", ")", "\n", "assert", "len", "(", "branch_channels", ")", "==", "len", "(", "self", ".", "in_channels", ")", "-", "1", "\n", "self", ".", "branch_channels", "=", "branch_channels", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "conv_ups", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "branch_channels", ")", ")", ":", "\n", "            ", "self", ".", "convs", ".", "add_module", "(", "\n", "f'conv{i}'", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", "[", "i", "]", ",", "branch_channels", "[", "i", "]", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv_ups", ".", "add_module", "(", "\n", "f'conv_up{i}'", ",", "\n", "ConvModule", "(", "\n", "self", ".", "channels", "+", "branch_channels", "[", "i", "]", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "bias", "=", "False", ")", ")", "\n", "\n", "", "self", ".", "conv_up_input", "=", "nn", ".", "Conv2d", "(", "self", ".", "channels", ",", "self", ".", "channels", ",", "1", ")", "\n", "\n", "self", ".", "aspp_conv", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "[", "-", "1", "]", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "image_pool", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "49", ",", "stride", "=", "(", "16", ",", "20", ")", ")", ",", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", "[", "2", "]", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'Sigmoid'", ")", ",", "\n", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.lraspp_head.LRASPPHead.forward": [[68, 91], ["lraspp_head.LRASPPHead._transform_inputs", "lraspp_head.LRASPPHead.conv_up_input", "range", "lraspp_head.LRASPPHead.cls_seg", "lraspp_head.LRASPPHead.aspp_conv", "mmseg.ops.resize", "mmseg.ops.resize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lraspp_head.LRASPPHead.image_pool", "len", "torch.cat.size", "torch.cat.size", "inputs[].size"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "inputs", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "\n", "x", "=", "inputs", "[", "-", "1", "]", "\n", "\n", "x", "=", "self", ".", "aspp_conv", "(", "x", ")", "*", "resize", "(", "\n", "self", ".", "image_pool", "(", "x", ")", ",", "\n", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "x", "=", "self", ".", "conv_up_input", "(", "x", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "branch_channels", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "x", "=", "resize", "(", "\n", "x", ",", "\n", "size", "=", "inputs", "[", "i", "]", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "convs", "[", "i", "]", "(", "inputs", "[", "i", "]", ")", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_ups", "[", "i", "]", "(", "x", ")", "\n", "\n", "", "return", "self", ".", "cls_seg", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.vit_mla_head.MLAHead.__init__": [[18, 36], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mla_channels", "=", "256", ",", "mlahead_channels", "=", "128", ",", "norm_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "MLAHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "head2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "mla_channels", ",", "mlahead_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "mlahead_channels", ")", "[", "1", "]", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mlahead_channels", ",", "mlahead_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "mlahead_channels", ")", "[", "1", "]", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "head3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "mla_channels", ",", "mlahead_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "mlahead_channels", ")", "[", "1", "]", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mlahead_channels", ",", "mlahead_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "mlahead_channels", ")", "[", "1", "]", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "head4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "mla_channels", ",", "mlahead_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "mlahead_channels", ")", "[", "1", "]", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mlahead_channels", ",", "mlahead_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "mlahead_channels", ")", "[", "1", "]", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "head5", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "mla_channels", ",", "mlahead_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "mlahead_channels", ")", "[", "1", "]", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mlahead_channels", ",", "mlahead_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "mlahead_channels", ")", "[", "1", "]", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.vit_mla_head.MLAHead.forward": [[37, 44], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vit_mla_head.MLAHead.head2", "vit_mla_head.MLAHead.head3", "vit_mla_head.MLAHead.head4", "vit_mla_head.MLAHead.head5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mla_p2", ",", "mla_p3", ",", "mla_p4", ",", "mla_p5", ")", ":", "\n", "# head2 = self.head2(mla_p2)", "\n", "        ", "head2", "=", "F", ".", "interpolate", "(", "self", ".", "head2", "(", "mla_p2", ")", ",", "4", "*", "mla_p2", ".", "shape", "[", "-", "1", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "head3", "=", "F", ".", "interpolate", "(", "self", ".", "head3", "(", "mla_p3", ")", ",", "4", "*", "mla_p3", ".", "shape", "[", "-", "1", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "head4", "=", "F", ".", "interpolate", "(", "self", ".", "head4", "(", "mla_p4", ")", ",", "4", "*", "mla_p4", ".", "shape", "[", "-", "1", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "head5", "=", "F", ".", "interpolate", "(", "self", ".", "head5", "(", "mla_p5", ")", ",", "4", "*", "mla_p5", ".", "shape", "[", "-", "1", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "torch", ".", "cat", "(", "[", "head2", ",", "head3", ",", "head4", ",", "head5", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.vit_mla_head.VIT_MLAHead.__init__": [[51, 62], ["decode_head.BaseDecodeHead.__init__", "vit_mla_head.MLAHead", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "768", ",", "mla_channels", "=", "256", ",", "mlahead_channels", "=", "128", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "norm_cfg", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VIT_MLAHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "mla_channels", "=", "mla_channels", "\n", "self", ".", "BatchNorm", "=", "norm_layer", "\n", "self", ".", "mlahead_channels", "=", "mlahead_channels", "\n", "\n", "self", ".", "mlahead", "=", "MLAHead", "(", "mla_channels", "=", "self", ".", "mla_channels", ",", "mlahead_channels", "=", "self", ".", "mlahead_channels", ",", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "self", ".", "cls", "=", "nn", ".", "Conv2d", "(", "4", "*", "self", ".", "mlahead_channels", ",", "self", ".", "num_classes", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.vit_mla_head.VIT_MLAHead.forward": [[63, 68], ["vit_mla_head.VIT_MLAHead.mlahead", "vit_mla_head.VIT_MLAHead.cls", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "self", ".", "mlahead", "(", "inputs", "[", "0", "]", ",", "inputs", "[", "1", "]", ",", "inputs", "[", "2", "]", ",", "inputs", "[", "3", "]", ")", "\n", "x", "=", "self", ".", "cls", "(", "x", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "self", ".", "img_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.psp_head.PPM.__init__": [[24, 45], ["torch.ModuleList.__init__", "psp_head.PPM.append", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "pool_scales", ",", "in_channels", ",", "channels", ",", "conv_cfg", ",", "norm_cfg", ",", "\n", "act_cfg", ",", "align_corners", ")", ":", "\n", "        ", "super", "(", "PPM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool_scales", "=", "pool_scales", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "for", "pool_scale", "in", "pool_scales", ":", "\n", "            ", "self", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "pool_scale", ")", ",", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.psp_head.PPM.forward": [[46, 58], ["ppm", "mmseg.ops.resize", "ppm_outs.append", "x.size"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "ppm_outs", "=", "[", "]", "\n", "for", "ppm", "in", "self", ":", "\n", "            ", "ppm_out", "=", "ppm", "(", "x", ")", "\n", "upsampled_ppm_out", "=", "resize", "(", "\n", "ppm_out", ",", "\n", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "ppm_outs", ".", "append", "(", "upsampled_ppm_out", ")", "\n", "", "return", "ppm_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.psp_head.PSPHead.__init__": [[72, 92], ["decode_head.BaseDecodeHead.__init__", "isinstance", "psp_head.PPM", "mmcv.cnn.ConvModule", "len"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "pool_scales", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PSPHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "isinstance", "(", "pool_scales", ",", "(", "list", ",", "tuple", ")", ")", "\n", "self", ".", "pool_scales", "=", "pool_scales", "\n", "self", ".", "psp_modules", "=", "PPM", "(", "\n", "self", ".", "pool_scales", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "+", "len", "(", "pool_scales", ")", "*", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.psp_head.PSPHead.forward": [[93, 102], ["psp_head.PSPHead._transform_inputs", "torch.cat.extend", "torch.cat.extend", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "psp_head.PSPHead.bottleneck", "psp_head.PSPHead.cls_seg", "psp_head.PSPHead.psp_modules"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "psp_outs", "=", "[", "x", "]", "\n", "psp_outs", ".", "extend", "(", "self", ".", "psp_modules", "(", "x", ")", ")", "\n", "psp_outs", "=", "torch", ".", "cat", "(", "psp_outs", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "psp_outs", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.helpers.load_pretrained": [[10, 94], ["model.load_state_dict", "getattr", "_logger.warning", "torch.load", "torch.load", "torch.load", "torch.load", "print", "torch.load_url", "print", "filter_fn", "_logger.info", "conv1_weight.to.float", "conv1_weight.to.to", "pos_embed_weight.view().transpose.transpose", "int", "pos_embed_weight.view().transpose.view", "torch.interpolate", "pos_embed_weight.view().transpose.view().transpose", "[].unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv1_weight.to.reshape", "conv1_weight.to.sum", "conv1_weight.to.sum", "conv1_weight.to.float", "math.sqrt", "_logger.warning", "_logger.info", "int", "conv1_weight.to.to", "int", "pos_embed_weight.view().transpose.view", "math.ceil", "conv1_weight.to.repeat", "float", "math.sqrt"], "function", ["None"], ["import", "sys", "\n", "import", "re", "\n", "import", "zipfile", "\n", "from", "urllib", ".", "parse", "import", "urlparse", "# noqa: F401", "\n", "\n", "HASH_REGEX", "=", "re", ".", "compile", "(", "r'-([a-f0-9]*)\\.'", ")", "\n", "_logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "def", "load_state_dict_from_url", "(", "url", ",", "model_dir", "=", "None", ",", "file_name", "=", "None", ",", "check_hash", "=", "False", ",", "progress", "=", "True", ",", "map_location", "=", "None", ")", ":", "\n", "# Issue warning to move data if old env is set", "\n", "    ", "if", "os", ".", "getenv", "(", "'TORCH_MODEL_ZOO'", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "'TORCH_MODEL_ZOO is deprecated, please use env TORCH_HOME instead'", ")", "\n", "\n", "", "if", "model_dir", "is", "None", ":", "\n", "        ", "hub_dir", "=", "torch", ".", "hub", ".", "get_dir", "(", ")", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "hub_dir", ",", "'checkpoints'", ")", "\n", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "model_dir", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "==", "errno", ".", "EEXIST", ":", "\n", "# Directory already exists, ignore.", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "# Unexpected OSError, re-raise.", "\n", "                ", "raise", "\n", "", "", "", "parts", "=", "urlparse", "(", "url", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "parts", ".", "path", ")", "\n", "if", "file_name", "is", "not", "None", ":", "\n", "        ", "filename", "=", "file_name", "\n", "", "cached_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cached_file", ")", ":", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "'Downloading: \"{}\" to {}\\n'", ".", "format", "(", "url", ",", "cached_file", ")", ")", "\n", "hash_prefix", "=", "HASH_REGEX", ".", "search", "(", "filename", ")", ".", "group", "(", "1", ")", "if", "check_hash", "else", "None", "\n", "torch", ".", "hub", ".", "download_url_to_file", "(", "url", ",", "cached_file", ",", "hash_prefix", ",", "progress", "=", "progress", ")", "\n", "", "if", "zipfile", ".", "is_zipfile", "(", "cached_file", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "cached_file", ",", "map_location", "=", "map_location", ")", "[", "'model'", "]", "\n", "", "else", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "cached_file", ",", "map_location", "=", "map_location", ")", "\n", "", "return", "state_dict", "\n", "\n", "\n", "", "def", "load_pretrained", "(", "model", ",", "cfg", "=", "None", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "filter_fn", "=", "None", ",", "strict", "=", "True", ",", "pos_embed_interp", "=", "False", ",", "num_patches", "=", "576", ",", "align_corners", "=", "False", ")", ":", "\n", "    ", "if", "cfg", "is", "None", ":", "\n", "        ", "cfg", "=", "getattr", "(", "model", ",", "'default_cfg'", ")", "\n", "", "if", "cfg", "is", "None", "or", "'url'", "not", "in", "cfg", "or", "not", "cfg", "[", "'url'", "]", ":", "\n", "        ", "_logger", ".", "warning", "(", "\"Pretrained model URL is invalid, using random initialization.\"", ")", "\n", "return", "\n", "\n", "", "if", "'pretrained_finetune'", "in", "cfg", "and", "cfg", "[", "'pretrained_finetune'", "]", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "cfg", "[", "'pretrained_finetune'", "]", ")", "\n", "print", "(", "'load pre-trained weight from '", "+", "cfg", "[", "'pretrained_finetune'", "]", ")", "\n", "", "else", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "cfg", "[", "'url'", "]", ",", "progress", "=", "False", ",", "map_location", "=", "'cpu'", ")", "\n", "print", "(", "'load pre-trained weight from imagenet21k'", ")", "\n", "\n", "\n", "", "if", "filter_fn", "is", "not", "None", ":", "\n", "        ", "state_dict", "=", "filter_fn", "(", "state_dict", ")", "\n", "\n", "", "if", "in_chans", "==", "1", ":", "\n", "        ", "conv1_name", "=", "cfg", "[", "'first_conv'", "]", "\n", "_logger", ".", "info", "(", "'Converting first conv (%s) pretrained weights from 3 to 1 channel'", "%", "conv1_name", ")", "\n", "conv1_weight", "=", "state_dict", "[", "conv1_name", "+", "'.weight'", "]", "\n", "# Some weights are in torch.half, ensure it's float for sum on CPU", "\n", "conv1_type", "=", "conv1_weight", ".", "dtype", "\n", "conv1_weight", "=", "conv1_weight", ".", "float", "(", ")", "\n", "O", ",", "I", ",", "J", ",", "K", "=", "conv1_weight", ".", "shape", "\n", "if", "I", ">", "3", ":", "\n", "            ", "assert", "conv1_weight", ".", "shape", "[", "1", "]", "%", "3", "==", "0", "\n", "# For models with space2depth stems", "\n", "conv1_weight", "=", "conv1_weight", ".", "reshape", "(", "O", ",", "I", "//", "3", ",", "3", ",", "J", ",", "K", ")", "\n", "conv1_weight", "=", "conv1_weight", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "conv1_weight", "=", "conv1_weight", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "conv1_weight", "=", "conv1_weight", ".", "to", "(", "conv1_type", ")", "\n", "state_dict", "[", "conv1_name", "+", "'.weight'", "]", "=", "conv1_weight", "\n", "", "elif", "in_chans", "!=", "3", ":", "\n", "        ", "conv1_name", "=", "cfg", "[", "'first_conv'", "]", "\n", "conv1_weight", "=", "state_dict", "[", "conv1_name", "+", "'.weight'", "]", "\n", "conv1_type", "=", "conv1_weight", ".", "dtype", "\n", "conv1_weight", "=", "conv1_weight", ".", "float", "(", ")", "\n", "O", ",", "I", ",", "J", ",", "K", "=", "conv1_weight", ".", "shape", "\n", "if", "I", "==", "3", ":", "\n", "            ", "_logger", ".", "warning", "(", "'Deleting first conv (%s) from pretrained weights.'", "%", "conv1_name", ")", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.nl_head.NLHead.__init__": [[23, 39], ["fcn_head.FCNHead.__init__", "mmcv.cnn.NonLocal2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "reduction", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "mode", "=", "'embedded_gaussian'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "NLHead", ",", "self", ")", ".", "__init__", "(", "num_convs", "=", "2", ",", "**", "kwargs", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "use_scale", "=", "use_scale", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "nl_block", "=", "NonLocal2d", "(", "\n", "in_channels", "=", "self", ".", "channels", ",", "\n", "reduction", "=", "self", ".", "reduction", ",", "\n", "use_scale", "=", "self", ".", "use_scale", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "mode", "=", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.nl_head.NLHead.forward": [[40, 50], ["nl_head.NLHead._transform_inputs", "nl_head.NLHead.nl_block", "nl_head.NLHead.cls_seg", "nl_head.NLHead.conv_cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "output", "=", "self", ".", "convs", "[", "0", "]", "(", "x", ")", "\n", "output", "=", "self", ".", "nl_block", "(", "output", ")", "\n", "output", "=", "self", ".", "convs", "[", "1", "]", "(", "output", ")", "\n", "if", "self", ".", "concat_input", ":", "\n", "            ", "output", "=", "self", ".", "conv_cat", "(", "torch", ".", "cat", "(", "[", "x", ",", "output", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.cc_head.CCHead.__init__": [[24, 31], ["fcn_head.FCNHead.__init__", "CrissCrossAttention", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "recurrence", "=", "2", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "CrissCrossAttention", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Please install mmcv-full for '", "\n", "'CrissCrossAttention ops'", ")", "\n", "", "super", "(", "CCHead", ",", "self", ")", ".", "__init__", "(", "num_convs", "=", "2", ",", "**", "kwargs", ")", "\n", "self", ".", "recurrence", "=", "recurrence", "\n", "self", ".", "cca", "=", "CrissCrossAttention", "(", "self", ".", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.cc_head.CCHead.forward": [[32, 43], ["cc_head.CCHead._transform_inputs", "range", "cc_head.CCHead.cls_seg", "cc_head.CCHead.cca", "cc_head.CCHead.conv_cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "output", "=", "self", ".", "convs", "[", "0", "]", "(", "x", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "recurrence", ")", ":", "\n", "            ", "output", "=", "self", ".", "cca", "(", "output", ")", "\n", "", "output", "=", "self", ".", "convs", "[", "1", "]", "(", "output", ")", "\n", "if", "self", ".", "concat_input", ":", "\n", "            ", "output", "=", "self", ".", "conv_cat", "(", "torch", ".", "cat", "(", "[", "x", ",", "output", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.sep_aspp_head.DepthwiseSeparableASPPModule.__init__": [[14, 26], ["aspp_head.ASPPModule.__init__", "enumerate", "mmcv.cnn.DepthwiseSeparableConvModule"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DepthwiseSeparableASPPModule", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "for", "i", ",", "dilation", "in", "enumerate", "(", "self", ".", "dilations", ")", ":", "\n", "            ", "if", "dilation", ">", "1", ":", "\n", "                ", "self", "[", "i", "]", "=", "DepthwiseSeparableConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "dilation", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.sep_aspp_head.DepthwiseSeparableASPPHead.__init__": [[42, 77], ["aspp_head.ASPPHead.__init__", "sep_aspp_head.DepthwiseSeparableASPPModule", "torch.Sequential", "torch.Sequential", "mmcv.cnn.ConvModule", "mmcv.cnn.DepthwiseSeparableConvModule", "mmcv.cnn.DepthwiseSeparableConvModule"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "c1_in_channels", ",", "c1_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DepthwiseSeparableASPPHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "c1_in_channels", ">=", "0", "\n", "self", ".", "aspp_modules", "=", "DepthwiseSeparableASPPModule", "(", "\n", "dilations", "=", "self", ".", "dilations", ",", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "channels", "=", "self", ".", "channels", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "if", "c1_in_channels", ">", "0", ":", "\n", "            ", "self", ".", "c1_bottleneck", "=", "ConvModule", "(", "\n", "c1_in_channels", ",", "\n", "c1_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "c1_bottleneck", "=", "None", "\n", "", "self", ".", "sep_bottleneck", "=", "nn", ".", "Sequential", "(", "\n", "DepthwiseSeparableConvModule", "(", "\n", "self", ".", "channels", "+", "c1_channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ",", "\n", "DepthwiseSeparableConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.sep_aspp_head.DepthwiseSeparableASPPHead.forward": [[78, 102], ["sep_aspp_head.DepthwiseSeparableASPPHead._transform_inputs", "torch.cat.extend", "torch.cat.extend", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sep_aspp_head.DepthwiseSeparableASPPHead.bottleneck", "sep_aspp_head.DepthwiseSeparableASPPHead.sep_bottleneck", "sep_aspp_head.DepthwiseSeparableASPPHead.cls_seg", "mmseg.ops.resize", "sep_aspp_head.DepthwiseSeparableASPPHead.aspp_modules", "sep_aspp_head.DepthwiseSeparableASPPHead.c1_bottleneck", "mmseg.ops.resize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sep_aspp_head.DepthwiseSeparableASPPHead.image_pool", "sep_aspp_head.DepthwiseSeparableASPPHead.size"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "aspp_outs", "=", "[", "\n", "resize", "(", "\n", "self", ".", "image_pool", "(", "x", ")", ",", "\n", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "]", "\n", "aspp_outs", ".", "extend", "(", "self", ".", "aspp_modules", "(", "x", ")", ")", "\n", "aspp_outs", "=", "torch", ".", "cat", "(", "aspp_outs", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "aspp_outs", ")", "\n", "if", "self", ".", "c1_bottleneck", "is", "not", "None", ":", "\n", "            ", "c1_output", "=", "self", ".", "c1_bottleneck", "(", "inputs", "[", "0", "]", ")", "\n", "output", "=", "resize", "(", "\n", "input", "=", "output", ",", "\n", "size", "=", "c1_output", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "c1_output", "]", ",", "dim", "=", "1", ")", "\n", "", "output", "=", "self", ".", "sep_bottleneck", "(", "output", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.sep_fcn_head.DepthwiseSeparableFCNHead.__init__": [[29, 52], ["fcn_head.FCNHead.__init__", "mmcv.cnn.DepthwiseSeparableConvModule", "range", "mmcv.cnn.DepthwiseSeparableConvModule", "mmcv.cnn.DepthwiseSeparableConvModule"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DepthwiseSeparableFCNHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "convs", "[", "0", "]", "=", "DepthwiseSeparableConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "kernel_size", "//", "2", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_convs", ")", ":", "\n", "            ", "self", ".", "convs", "[", "i", "]", "=", "DepthwiseSeparableConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "kernel_size", "//", "2", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "\n", "", "if", "self", ".", "concat_input", ":", "\n", "            ", "self", ".", "conv_cat", "=", "DepthwiseSeparableConvModule", "(", "\n", "self", ".", "in_channels", "+", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "kernel_size", "//", "2", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ann_head.PPMConcat.__init__": [[18, 21], ["torch.ModuleList.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "pool_scales", "=", "(", "1", ",", "3", ",", "6", ",", "8", ")", ")", ":", "\n", "        ", "super", "(", "PPMConcat", ",", "self", ")", ".", "__init__", "(", "\n", "[", "nn", ".", "AdaptiveAvgPool2d", "(", "pool_scale", ")", "for", "pool_scale", "in", "pool_scales", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ann_head.PPMConcat.forward": [[22, 30], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "ppm", "ppm_outs.append", "ppm.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "ppm_outs", "=", "[", "]", "\n", "for", "ppm", "in", "self", ":", "\n", "            ", "ppm_out", "=", "ppm", "(", "feats", ")", "\n", "ppm_outs", ".", "append", "(", "ppm_out", ".", "view", "(", "*", "feats", ".", "shape", "[", ":", "2", "]", ",", "-", "1", ")", ")", "\n", "", "concat_outs", "=", "torch", ".", "cat", "(", "ppm_outs", ",", "dim", "=", "2", ")", "\n", "return", "concat_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ann_head.SelfAttentionBlock.__init__": [[52, 77], ["ann_head.PPMConcat", "utils.SelfAttentionBlock.__init__", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "low_in_channels", ",", "high_in_channels", ",", "channels", ",", "\n", "out_channels", ",", "share_key_query", ",", "query_scale", ",", "key_pool_scales", ",", "\n", "conv_cfg", ",", "norm_cfg", ",", "act_cfg", ")", ":", "\n", "        ", "key_psp", "=", "PPMConcat", "(", "key_pool_scales", ")", "\n", "if", "query_scale", ">", "1", ":", "\n", "            ", "query_downsample", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "query_scale", ")", "\n", "", "else", ":", "\n", "            ", "query_downsample", "=", "None", "\n", "", "super", "(", "SelfAttentionBlock", ",", "self", ")", ".", "__init__", "(", "\n", "key_in_channels", "=", "low_in_channels", ",", "\n", "query_in_channels", "=", "high_in_channels", ",", "\n", "channels", "=", "channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "share_key_query", "=", "share_key_query", ",", "\n", "query_downsample", "=", "query_downsample", ",", "\n", "key_downsample", "=", "key_psp", ",", "\n", "key_query_num_convs", "=", "1", ",", "\n", "key_query_norm", "=", "True", ",", "\n", "value_out_num_convs", "=", "1", ",", "\n", "value_out_norm", "=", "False", ",", "\n", "matmul_norm", "=", "True", ",", "\n", "with_out", "=", "True", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ann_head.AFNB.__init__": [[99, 124], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "mmcv.cnn.ConvModule", "ann_head.AFNB.stages.append", "ann_head.SelfAttentionBlock"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "low_in_channels", ",", "high_in_channels", ",", "channels", ",", "\n", "out_channels", ",", "query_scales", ",", "key_pool_scales", ",", "conv_cfg", ",", "\n", "norm_cfg", ",", "act_cfg", ")", ":", "\n", "        ", "super", "(", "AFNB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stages", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "query_scale", "in", "query_scales", ":", "\n", "            ", "self", ".", "stages", ".", "append", "(", "\n", "SelfAttentionBlock", "(", "\n", "low_in_channels", "=", "low_in_channels", ",", "\n", "high_in_channels", "=", "high_in_channels", ",", "\n", "channels", "=", "channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "share_key_query", "=", "False", ",", "\n", "query_scale", "=", "query_scale", ",", "\n", "key_pool_scales", "=", "key_pool_scales", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ")", "\n", "", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "out_channels", "+", "high_in_channels", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ann_head.AFNB.forward": [[125, 131], ["torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "ann_head.AFNB.bottleneck", "stage", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "low_feats", ",", "high_feats", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "priors", "=", "[", "stage", "(", "high_feats", ",", "low_feats", ")", "for", "stage", "in", "self", ".", "stages", "]", "\n", "context", "=", "torch", ".", "stack", "(", "priors", ",", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "torch", ".", "cat", "(", "[", "context", ",", "high_feats", "]", ",", "1", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ann_head.APNB.__init__": [[150, 174], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "mmcv.cnn.ConvModule", "ann_head.APNB.stages.append", "ann_head.SelfAttentionBlock"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "out_channels", ",", "query_scales", ",", "\n", "key_pool_scales", ",", "conv_cfg", ",", "norm_cfg", ",", "act_cfg", ")", ":", "\n", "        ", "super", "(", "APNB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stages", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "query_scale", "in", "query_scales", ":", "\n", "            ", "self", ".", "stages", ".", "append", "(", "\n", "SelfAttentionBlock", "(", "\n", "low_in_channels", "=", "in_channels", ",", "\n", "high_in_channels", "=", "in_channels", ",", "\n", "channels", "=", "channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "share_key_query", "=", "True", ",", "\n", "query_scale", "=", "query_scale", ",", "\n", "key_pool_scales", "=", "key_pool_scales", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ")", "\n", "", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "2", "*", "in_channels", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ann_head.APNB.forward": [[175, 181], ["torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "ann_head.APNB.bottleneck", "stage", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "priors", "=", "[", "stage", "(", "feats", ",", "feats", ")", "for", "stage", "in", "self", ".", "stages", "]", "\n", "context", "=", "torch", ".", "stack", "(", "priors", ",", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "torch", ".", "cat", "(", "[", "context", ",", "feats", "]", ",", "1", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ann_head.ANNHead.__init__": [[198, 235], ["decode_head.BaseDecodeHead.__init__", "ann_head.AFNB", "mmcv.cnn.ConvModule", "ann_head.APNB", "len"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "project_channels", ",", "\n", "query_scales", "=", "(", "1", ",", ")", ",", "\n", "key_pool_scales", "=", "(", "1", ",", "3", ",", "6", ",", "8", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ANNHead", ",", "self", ")", ".", "__init__", "(", "\n", "input_transform", "=", "'multiple_select'", ",", "**", "kwargs", ")", "\n", "assert", "len", "(", "self", ".", "in_channels", ")", "==", "2", "\n", "low_in_channels", ",", "high_in_channels", "=", "self", ".", "in_channels", "\n", "self", ".", "project_channels", "=", "project_channels", "\n", "self", ".", "fusion", "=", "AFNB", "(", "\n", "low_in_channels", "=", "low_in_channels", ",", "\n", "high_in_channels", "=", "high_in_channels", ",", "\n", "out_channels", "=", "high_in_channels", ",", "\n", "channels", "=", "project_channels", ",", "\n", "query_scales", "=", "query_scales", ",", "\n", "key_pool_scales", "=", "key_pool_scales", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "high_in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "context", "=", "APNB", "(", "\n", "in_channels", "=", "self", ".", "channels", ",", "\n", "out_channels", "=", "self", ".", "channels", ",", "\n", "channels", "=", "project_channels", ",", "\n", "query_scales", "=", "query_scales", ",", "\n", "key_pool_scales", "=", "key_pool_scales", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.ann_head.ANNHead.forward": [[236, 246], ["ann_head.ANNHead._transform_inputs", "ann_head.ANNHead.fusion", "ann_head.ANNHead.dropout", "ann_head.ANNHead.bottleneck", "ann_head.ANNHead.context", "ann_head.ANNHead.cls_seg"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "low_feats", ",", "high_feats", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "output", "=", "self", ".", "fusion", "(", "low_feats", ",", "high_feats", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "output", ")", "\n", "output", "=", "self", ".", "context", "(", "output", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead.__init__": [[60, 103], ["dict", "dict", "cascade_decode_head.BaseCascadeDecodeHead.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv1d", "torch.Conv1d", "delattr", "sum", "mmcv.cnn.ConvModule", "point_head.PointHead.fcs.append", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_fcs", "=", "3", ",", "\n", "coarse_pred_each_layer", "=", "True", ",", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv1d'", ")", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ",", "inplace", "=", "False", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PointHead", ",", "self", ")", ".", "__init__", "(", "\n", "input_transform", "=", "'multiple_select'", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "**", "kwargs", ")", "\n", "\n", "self", ".", "num_fcs", "=", "num_fcs", "\n", "self", ".", "coarse_pred_each_layer", "=", "coarse_pred_each_layer", "\n", "\n", "fc_in_channels", "=", "sum", "(", "self", ".", "in_channels", ")", "+", "self", ".", "num_classes", "\n", "fc_channels", "=", "self", ".", "channels", "\n", "self", ".", "fcs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "k", "in", "range", "(", "num_fcs", ")", ":", "\n", "            ", "fc", "=", "ConvModule", "(", "\n", "fc_in_channels", ",", "\n", "fc_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "self", ".", "fcs", ".", "append", "(", "fc", ")", "\n", "fc_in_channels", "=", "fc_channels", "\n", "fc_in_channels", "+=", "self", ".", "num_classes", "if", "self", ".", "coarse_pred_each_layer", "else", "0", "\n", "", "self", ".", "fc_seg", "=", "nn", ".", "Conv1d", "(", "\n", "fc_in_channels", ",", "\n", "self", ".", "num_classes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "if", "self", ".", "dropout_ratio", ">", "0", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_ratio", ")", "\n", "", "delattr", "(", "self", ",", "'conv_seg'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead.init_weights": [[104, 107], ["mmcv.cnn.normal_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize weights of classification layer.\"\"\"", "\n", "normal_init", "(", "self", ".", "fc_seg", ",", "std", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead.cls_seg": [[108, 114], ["point_head.PointHead.fc_seg", "point_head.PointHead.dropout"], "methods", ["None"], ["", "def", "cls_seg", "(", "self", ",", "feat", ")", ":", "\n", "        ", "\"\"\"Classify each pixel with fc.\"\"\"", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "feat", "=", "self", ".", "dropout", "(", "feat", ")", "\n", "", "output", "=", "self", ".", "fc_seg", "(", "feat", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead.forward": [[115, 122], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "point_head.PointHead.cls_seg", "fc", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "fine_grained_point_feats", ",", "coarse_point_feats", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "fine_grained_point_feats", ",", "coarse_point_feats", "]", ",", "dim", "=", "1", ")", "\n", "for", "fc", "in", "self", ".", "fcs", ":", "\n", "            ", "x", "=", "fc", "(", "x", ")", "\n", "if", "self", ".", "coarse_pred_each_layer", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "coarse_point_feats", ")", ",", "dim", "=", "1", ")", "\n", "", "", "return", "self", ".", "cls_seg", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead._get_fine_grained_point_feats": [[123, 146], ["mmcv.ops.point_sample", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_get_fine_grained_point_feats", "(", "self", ",", "x", ",", "points", ")", ":", "\n", "        ", "\"\"\"Sample from fine grained features.\n\n        Args:\n            x (list[Tensor]): Feature pyramid from by neck or backbone.\n            points (Tensor): Point coordinates, shape (batch_size,\n                num_points, 2).\n\n        Returns:\n            fine_grained_feats (Tensor): Sampled fine grained feature,\n                shape (batch_size, sum(channels of x), num_points).\n        \"\"\"", "\n", "\n", "fine_grained_feats_list", "=", "[", "\n", "point_sample", "(", "_", ",", "points", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "for", "_", "in", "x", "\n", "]", "\n", "if", "len", "(", "fine_grained_feats_list", ")", ">", "1", ":", "\n", "            ", "fine_grained_feats", "=", "torch", ".", "cat", "(", "fine_grained_feats_list", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "fine_grained_feats", "=", "fine_grained_feats_list", "[", "0", "]", "\n", "\n", "", "return", "fine_grained_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead._get_coarse_point_feats": [[147, 164], ["mmcv.ops.point_sample"], "methods", ["None"], ["", "def", "_get_coarse_point_feats", "(", "self", ",", "prev_output", ",", "points", ")", ":", "\n", "        ", "\"\"\"Sample from fine grained features.\n\n        Args:\n            prev_output (list[Tensor]): Prediction of previous decode head.\n            points (Tensor): Point coordinates, shape (batch_size,\n                num_points, 2).\n\n        Returns:\n            coarse_feats (Tensor): Sampled coarse feature, shape (batch_size,\n                num_classes, num_points).\n        \"\"\"", "\n", "\n", "coarse_feats", "=", "point_sample", "(", "\n", "prev_output", ",", "points", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "\n", "return", "coarse_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead.forward_train": [[165, 202], ["point_head.PointHead._transform_inputs", "point_head.PointHead._get_fine_grained_point_feats", "point_head.PointHead._get_coarse_point_feats", "point_head.PointHead.forward", "mmcv.ops.point_sample", "point_label.squeeze().long.squeeze().long.squeeze().long", "point_head.PointHead.losses", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "point_head.PointHead.get_points_train", "gt_semantic_seg.float", "point_label.squeeze().long.squeeze().long.squeeze"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead._get_fine_grained_point_feats", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead._get_coarse_point_feats", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.losses", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead.get_points_train"], ["", "def", "forward_train", "(", "self", ",", "inputs", ",", "prev_output", ",", "img_metas", ",", "gt_semantic_seg", ",", "\n", "train_cfg", ")", ":", "\n", "        ", "\"\"\"Forward function for training.\n        Args:\n            inputs (list[Tensor]): List of multi-level img features.\n            prev_output (Tensor): The output of previous decode head.\n            img_metas (list[dict]): List of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmseg/datasets/pipelines/formatting.py:Collect`.\n            gt_semantic_seg (Tensor): Semantic segmentation masks\n                used if the architecture supports semantic segmentation task.\n            train_cfg (dict): The training config.\n\n        Returns:\n            dict[str, Tensor]: a dictionary of loss components\n        \"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "points", "=", "self", ".", "get_points_train", "(", "\n", "prev_output", ",", "calculate_uncertainty", ",", "cfg", "=", "train_cfg", ")", "\n", "", "fine_grained_point_feats", "=", "self", ".", "_get_fine_grained_point_feats", "(", "\n", "x", ",", "points", ")", "\n", "coarse_point_feats", "=", "self", ".", "_get_coarse_point_feats", "(", "prev_output", ",", "points", ")", "\n", "point_logits", "=", "self", ".", "forward", "(", "fine_grained_point_feats", ",", "\n", "coarse_point_feats", ")", "\n", "point_label", "=", "point_sample", "(", "\n", "gt_semantic_seg", ".", "float", "(", ")", ",", "\n", "points", ",", "\n", "mode", "=", "'nearest'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "point_label", "=", "point_label", ".", "squeeze", "(", "1", ")", ".", "long", "(", ")", "\n", "\n", "losses", "=", "self", ".", "losses", "(", "point_logits", ",", "point_label", ")", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead.forward_test": [[203, 247], ["point_head.PointHead._transform_inputs", "prev_output.clone", "range", "mmseg.ops.resize", "point_head.PointHead.get_points_test", "point_head.PointHead._get_fine_grained_point_feats", "point_head.PointHead._get_coarse_point_feats", "point_head.PointHead.forward", "point_indices.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "refined_seg_logits.view.view.reshape", "refined_seg_logits.view.view.scatter_", "refined_seg_logits.view.view.view", "point_indices.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead.get_points_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead._get_fine_grained_point_feats", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead._get_coarse_point_feats", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward"], ["", "def", "forward_test", "(", "self", ",", "inputs", ",", "prev_output", ",", "img_metas", ",", "test_cfg", ")", ":", "\n", "        ", "\"\"\"Forward function for testing.\n\n        Args:\n            inputs (list[Tensor]): List of multi-level img features.\n            prev_output (Tensor): The output of previous decode head.\n            img_metas (list[dict]): List of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmseg/datasets/pipelines/formatting.py:Collect`.\n            test_cfg (dict): The testing config.\n\n        Returns:\n            Tensor: Output segmentation map.\n        \"\"\"", "\n", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "refined_seg_logits", "=", "prev_output", ".", "clone", "(", ")", "\n", "for", "_", "in", "range", "(", "test_cfg", ".", "subdivision_steps", ")", ":", "\n", "            ", "refined_seg_logits", "=", "resize", "(", "\n", "refined_seg_logits", ",", "\n", "scale_factor", "=", "test_cfg", ".", "scale_factor", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "refined_seg_logits", ".", "shape", "\n", "point_indices", ",", "points", "=", "self", ".", "get_points_test", "(", "\n", "refined_seg_logits", ",", "calculate_uncertainty", ",", "cfg", "=", "test_cfg", ")", "\n", "fine_grained_point_feats", "=", "self", ".", "_get_fine_grained_point_feats", "(", "\n", "x", ",", "points", ")", "\n", "coarse_point_feats", "=", "self", ".", "_get_coarse_point_feats", "(", "\n", "prev_output", ",", "points", ")", "\n", "point_logits", "=", "self", ".", "forward", "(", "fine_grained_point_feats", ",", "\n", "coarse_point_feats", ")", "\n", "\n", "point_indices", "=", "point_indices", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "channels", ",", "-", "1", ")", "\n", "refined_seg_logits", "=", "refined_seg_logits", ".", "reshape", "(", "\n", "batch_size", ",", "channels", ",", "height", "*", "width", ")", "\n", "refined_seg_logits", "=", "refined_seg_logits", ".", "scatter_", "(", "\n", "2", ",", "point_indices", ",", "point_logits", ")", "\n", "refined_seg_logits", "=", "refined_seg_logits", ".", "view", "(", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", ")", "\n", "\n", "", "return", "refined_seg_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead.losses": [[248, 255], ["dict", "point_head.PointHead.loss_decode", "losses.accuracy"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.accuracy.accuracy"], ["", "def", "losses", "(", "self", ",", "point_logits", ",", "point_label", ")", ":", "\n", "        ", "\"\"\"Compute segmentation loss.\"\"\"", "\n", "loss", "=", "dict", "(", ")", "\n", "loss", "[", "'loss_point'", "]", "=", "self", ".", "loss_decode", "(", "\n", "point_logits", ",", "point_label", ",", "ignore_index", "=", "self", ".", "ignore_index", ")", "\n", "loss", "[", "'acc_point'", "]", "=", "accuracy", "(", "point_logits", ",", "point_label", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead.get_points_train": [[256, 309], ["int", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "mmcv.ops.point_sample", "uncertainty_func", "int", "[].view", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "idx.view"], "methods", ["None"], ["", "def", "get_points_train", "(", "self", ",", "seg_logits", ",", "uncertainty_func", ",", "cfg", ")", ":", "\n", "        ", "\"\"\"Sample points for training.\n\n        Sample points in [0, 1] x [0, 1] coordinate space based on their\n        uncertainty. The uncertainties are calculated for each point using\n        'uncertainty_func' function that takes point's logit prediction as\n        input.\n\n        Args:\n            seg_logits (Tensor): Semantic segmentation logits, shape (\n                batch_size, num_classes, height, width).\n            uncertainty_func (func): uncertainty calculation function.\n            cfg (dict): Training config of point head.\n\n        Returns:\n            point_coords (Tensor): A tensor of shape (batch_size, num_points,\n                2) that contains the coordinates of ``num_points`` sampled\n                points.\n        \"\"\"", "\n", "num_points", "=", "cfg", ".", "num_points", "\n", "oversample_ratio", "=", "cfg", ".", "oversample_ratio", "\n", "importance_sample_ratio", "=", "cfg", ".", "importance_sample_ratio", "\n", "assert", "oversample_ratio", ">=", "1", "\n", "assert", "0", "<=", "importance_sample_ratio", "<=", "1", "\n", "batch_size", "=", "seg_logits", ".", "shape", "[", "0", "]", "\n", "num_sampled", "=", "int", "(", "num_points", "*", "oversample_ratio", ")", "\n", "point_coords", "=", "torch", ".", "rand", "(", "\n", "batch_size", ",", "num_sampled", ",", "2", ",", "device", "=", "seg_logits", ".", "device", ")", "\n", "point_logits", "=", "point_sample", "(", "seg_logits", ",", "point_coords", ")", "\n", "# It is crucial to calculate uncertainty based on the sampled", "\n", "# prediction value for the points. Calculating uncertainties of the", "\n", "# coarse predictions first and sampling them for points leads to", "\n", "# incorrect results.  To illustrate this: assume uncertainty func(", "\n", "# logits)=-abs(logits), a sampled point between two coarse", "\n", "# predictions with -1 and 1 logits has 0 logits, and therefore 0", "\n", "# uncertainty value. However, if we calculate uncertainties for the", "\n", "# coarse predictions first, both will have -1 uncertainty,", "\n", "# and sampled point will get -1 uncertainty.", "\n", "point_uncertainties", "=", "uncertainty_func", "(", "point_logits", ")", "\n", "num_uncertain_points", "=", "int", "(", "importance_sample_ratio", "*", "num_points", ")", "\n", "num_random_points", "=", "num_points", "-", "num_uncertain_points", "\n", "idx", "=", "torch", ".", "topk", "(", "\n", "point_uncertainties", "[", ":", ",", "0", ",", ":", "]", ",", "k", "=", "num_uncertain_points", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "shift", "=", "num_sampled", "*", "torch", ".", "arange", "(", "\n", "batch_size", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "seg_logits", ".", "device", ")", "\n", "idx", "+=", "shift", "[", ":", ",", "None", "]", "\n", "point_coords", "=", "point_coords", ".", "view", "(", "-", "1", ",", "2", ")", "[", "idx", ".", "view", "(", "-", "1", ")", ",", ":", "]", ".", "view", "(", "\n", "batch_size", ",", "num_uncertain_points", ",", "2", ")", "\n", "if", "num_random_points", ">", "0", ":", "\n", "            ", "rand_point_coords", "=", "torch", ".", "rand", "(", "\n", "batch_size", ",", "num_random_points", ",", "2", ",", "device", "=", "seg_logits", ".", "device", ")", "\n", "point_coords", "=", "torch", ".", "cat", "(", "(", "point_coords", ",", "rand_point_coords", ")", ",", "dim", "=", "1", ")", "\n", "", "return", "point_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.PointHead.get_points_test": [[310, 350], ["uncertainty_func", "uncertainty_map.view.view.view", "min", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "uncertainty_map.view.view.topk"], "methods", ["None"], ["", "def", "get_points_test", "(", "self", ",", "seg_logits", ",", "uncertainty_func", ",", "cfg", ")", ":", "\n", "        ", "\"\"\"Sample points for testing.\n\n        Find ``num_points`` most uncertain points from ``uncertainty_map``.\n\n        Args:\n            seg_logits (Tensor): A tensor of shape (batch_size, num_classes,\n                height, width) for class-specific or class-agnostic prediction.\n            uncertainty_func (func): uncertainty calculation function.\n            cfg (dict): Testing config of point head.\n\n        Returns:\n            point_indices (Tensor): A tensor of shape (batch_size, num_points)\n                that contains indices from [0, height x width) of the most\n                uncertain points.\n            point_coords (Tensor): A tensor of shape (batch_size, num_points,\n                2) that contains [0, 1] x [0, 1] normalized coordinates of the\n                most uncertain points from the ``height x width`` grid .\n        \"\"\"", "\n", "\n", "num_points", "=", "cfg", ".", "subdivision_num_points", "\n", "uncertainty_map", "=", "uncertainty_func", "(", "seg_logits", ")", "\n", "batch_size", ",", "_", ",", "height", ",", "width", "=", "uncertainty_map", ".", "shape", "\n", "h_step", "=", "1.0", "/", "height", "\n", "w_step", "=", "1.0", "/", "width", "\n", "\n", "uncertainty_map", "=", "uncertainty_map", ".", "view", "(", "batch_size", ",", "height", "*", "width", ")", "\n", "num_points", "=", "min", "(", "height", "*", "width", ",", "num_points", ")", "\n", "point_indices", "=", "uncertainty_map", ".", "topk", "(", "num_points", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "point_coords", "=", "torch", ".", "zeros", "(", "\n", "batch_size", ",", "\n", "num_points", ",", "\n", "2", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "seg_logits", ".", "device", ")", "\n", "point_coords", "[", ":", ",", ":", ",", "0", "]", "=", "w_step", "/", "2.0", "+", "(", "point_indices", "%", "\n", "width", ")", ".", "float", "(", ")", "*", "w_step", "\n", "point_coords", "[", ":", ",", ":", ",", "1", "]", "=", "h_step", "/", "2.0", "+", "(", "point_indices", "//", "\n", "width", ")", ".", "float", "(", ")", "*", "h_step", "\n", "return", "point_indices", ",", "point_coords", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.point_head.calculate_uncertainty": [[14, 32], ["torch.topk", "torch.topk"], "function", ["None"], ["def", "calculate_uncertainty", "(", "seg_logits", ")", ":", "\n", "    ", "\"\"\"Estimate uncertainty based on seg logits.\n\n    For each location of the prediction ``seg_logits`` we estimate\n    uncertainty as the difference between top first and top second\n    predicted logits.\n\n    Args:\n        seg_logits (Tensor): Semantic segmentation logits,\n            shape (batch_size, num_classes, height, width).\n\n    Returns:\n        scores (Tensor): T uncertainty scores with the most uncertain\n            locations having the highest uncertainty score, shape (\n            batch_size, 1, height, width)\n    \"\"\"", "\n", "top2_scores", "=", "torch", ".", "topk", "(", "seg_logits", ",", "k", "=", "2", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "return", "(", "top2_scores", "[", ":", ",", "1", "]", "-", "top2_scores", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.__init__": [[46, 87], ["dict", "dict", "torch.Module.__init__", "decode_head.BaseDecodeHead._init_inputs", "builder.build_loss", "torch.Conv2d", "torch.Conv2d", "mmseg.core.build_pixel_sampler", "torch.Dropout2d", "torch.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._init_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.seg.builder.build_pixel_sampler"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "channels", ",", "\n", "*", ",", "\n", "num_classes", ",", "\n", "dropout_ratio", "=", "0.1", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "in_index", "=", "-", "1", ",", "\n", "input_transform", "=", "None", ",", "\n", "loss_decode", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "\n", "use_sigmoid", "=", "False", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "ignore_index", "=", "255", ",", "\n", "sampler", "=", "None", ",", "\n", "align_corners", "=", "False", ")", ":", "\n", "        ", "super", "(", "BaseDecodeHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_init_inputs", "(", "in_channels", ",", "in_index", ",", "input_transform", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "dropout_ratio", "=", "dropout_ratio", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "in_index", "=", "in_index", "\n", "self", ".", "loss_decode", "=", "build_loss", "(", "loss_decode", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "if", "sampler", "is", "not", "None", ":", "\n", "            ", "self", ".", "sampler", "=", "build_pixel_sampler", "(", "sampler", ",", "context", "=", "self", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sampler", "=", "None", "\n", "\n", "", "self", ".", "conv_seg", "=", "nn", ".", "Conv2d", "(", "channels", ",", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "if", "dropout_ratio", ">", "0", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "dropout_ratio", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "None", "\n", "", "self", ".", "fp16_enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.extra_repr": [[88, 94], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Extra repr.\"\"\"", "\n", "s", "=", "f'input_transform={self.input_transform}, '", "f'ignore_index={self.ignore_index}, '", "f'align_corners={self.align_corners}'", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._init_inputs": [[95, 132], ["isinstance", "isinstance", "isinstance", "isinstance", "len", "len", "sum"], "methods", ["None"], ["", "def", "_init_inputs", "(", "self", ",", "in_channels", ",", "in_index", ",", "input_transform", ")", ":", "\n", "        ", "\"\"\"Check and initialize input transforms.\n\n        The in_channels, in_index and input_transform must match.\n        Specifically, when input_transform is None, only single feature map\n        will be selected. So in_channels and in_index must be of type int.\n        When input_transform\n\n        Args:\n            in_channels (int|Sequence[int]): Input channels.\n            in_index (int|Sequence[int]): Input feature index.\n            input_transform (str|None): Transformation type of input features.\n                Options: 'resize_concat', 'multiple_select', None.\n                'resize_concat': Multiple feature maps will be resize to the\n                    same size as first one and than concat together.\n                    Usually used in FCN head of HRNet.\n                'multiple_select': Multiple feature maps will be bundle into\n                    a list and passed into decode head.\n                None: Only one select feature map is allowed.\n        \"\"\"", "\n", "\n", "if", "input_transform", "is", "not", "None", ":", "\n", "            ", "assert", "input_transform", "in", "[", "'resize_concat'", ",", "'multiple_select'", "]", "\n", "", "self", ".", "input_transform", "=", "input_transform", "\n", "self", ".", "in_index", "=", "in_index", "\n", "if", "input_transform", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "in_channels", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "isinstance", "(", "in_index", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "len", "(", "in_channels", ")", "==", "len", "(", "in_index", ")", "\n", "if", "input_transform", "==", "'resize_concat'", ":", "\n", "                ", "self", ".", "in_channels", "=", "sum", "(", "in_channels", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "in_channels", "=", "in_channels", "\n", "", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "in_channels", ",", "int", ")", "\n", "assert", "isinstance", "(", "in_index", ",", "int", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.init_weights": [[133, 136], ["mmcv.cnn.normal_init"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize weights of classification layer.\"\"\"", "\n", "normal_init", "(", "self", ".", "conv_seg", ",", "mean", "=", "0", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs": [[137, 163], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmseg.ops.resize"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize"], ["", "def", "_transform_inputs", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Transform inputs for decoder.\n\n        Args:\n            inputs (list[Tensor]): List of multi-level img features.\n\n        Returns:\n            Tensor: The transformed inputs\n        \"\"\"", "\n", "\n", "if", "self", ".", "input_transform", "==", "'resize_concat'", ":", "\n", "            ", "inputs", "=", "[", "inputs", "[", "i", "]", "for", "i", "in", "self", ".", "in_index", "]", "\n", "upsampled_inputs", "=", "[", "\n", "resize", "(", "\n", "input", "=", "x", ",", "\n", "size", "=", "inputs", "[", "0", "]", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "for", "x", "in", "inputs", "\n", "]", "\n", "inputs", "=", "torch", ".", "cat", "(", "upsampled_inputs", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "input_transform", "==", "'multiple_select'", ":", "\n", "            ", "inputs", "=", "[", "inputs", "[", "i", "]", "for", "i", "in", "self", ".", "in_index", "]", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "inputs", "[", "self", ".", "in_index", "]", "\n", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward": [[164, 169], ["mmcv.runner.auto_fp16"], "methods", ["None"], ["", "@", "auto_fp16", "(", ")", "\n", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Placeholder of forward function.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward_train": [[170, 189], ["decode_head.BaseDecodeHead.forward", "decode_head.BaseDecodeHead.losses"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.losses"], ["", "def", "forward_train", "(", "self", ",", "inputs", ",", "img_metas", ",", "gt_semantic_seg", ",", "train_cfg", ")", ":", "\n", "        ", "\"\"\"Forward function for training.\n        Args:\n            inputs (list[Tensor]): List of multi-level img features.\n            img_metas (list[dict]): List of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmseg/datasets/pipelines/formatting.py:Collect`.\n            gt_semantic_seg (Tensor): Semantic segmentation masks\n                used if the architecture supports semantic segmentation task.\n            train_cfg (dict): The training config.\n\n        Returns:\n            dict[str, Tensor]: a dictionary of loss components\n        \"\"\"", "\n", "seg_logits", "=", "self", ".", "forward", "(", "inputs", ")", "\n", "losses", "=", "self", ".", "losses", "(", "seg_logits", ",", "gt_semantic_seg", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward_test": [[190, 206], ["decode_head.BaseDecodeHead.forward"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward"], ["", "def", "forward_test", "(", "self", ",", "inputs", ",", "img_metas", ",", "test_cfg", ")", ":", "\n", "        ", "\"\"\"Forward function for testing.\n\n        Args:\n            inputs (list[Tensor]): List of multi-level img features.\n            img_metas (list[dict]): List of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmseg/datasets/pipelines/formatting.py:Collect`.\n            test_cfg (dict): The testing config.\n\n        Returns:\n            Tensor: Output segmentation map.\n        \"\"\"", "\n", "return", "self", ".", "forward", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg": [[207, 213], ["decode_head.BaseDecodeHead.conv_seg", "decode_head.BaseDecodeHead.dropout"], "methods", ["None"], ["", "def", "cls_seg", "(", "self", ",", "feat", ")", ":", "\n", "        ", "\"\"\"Classify each pixel.\"\"\"", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "feat", "=", "self", ".", "dropout", "(", "feat", ")", "\n", "", "output", "=", "self", ".", "conv_seg", "(", "feat", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.losses": [[214, 235], ["mmcv.runner.force_fp32", "dict", "mmseg.ops.resize", "seg_label.squeeze.squeeze.squeeze", "decode_head.BaseDecodeHead.loss_decode", "losses.accuracy", "decode_head.BaseDecodeHead.sampler.sample"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.accuracy.accuracy", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.sampler.base_pixel_sampler.BasePixelSampler.sample"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'seg_logit'", ",", ")", ")", "\n", "def", "losses", "(", "self", ",", "seg_logit", ",", "seg_label", ")", ":", "\n", "        ", "\"\"\"Compute segmentation loss.\"\"\"", "\n", "loss", "=", "dict", "(", ")", "\n", "seg_logit", "=", "resize", "(", "\n", "input", "=", "seg_logit", ",", "\n", "size", "=", "seg_label", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "if", "self", ".", "sampler", "is", "not", "None", ":", "\n", "            ", "seg_weight", "=", "self", ".", "sampler", ".", "sample", "(", "seg_logit", ",", "seg_label", ")", "\n", "", "else", ":", "\n", "            ", "seg_weight", "=", "None", "\n", "", "seg_label", "=", "seg_label", ".", "squeeze", "(", "1", ")", "\n", "loss", "[", "'loss_seg'", "]", "=", "self", ".", "loss_decode", "(", "\n", "seg_logit", ",", "\n", "seg_label", ",", "\n", "weight", "=", "seg_weight", ",", "\n", "ignore_index", "=", "self", ".", "ignore_index", ")", "\n", "loss", "[", "'acc_seg'", "]", "=", "accuracy", "(", "seg_logit", ",", "seg_label", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.uper_head.UPerHead.__init__": [[23, 75], ["decode_head.BaseDecodeHead.__init__", "psp_head.PPM", "mmcv.cnn.ConvModule", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "uper_head.UPerHead.lateral_convs.append", "uper_head.UPerHead.fpn_convs.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "pool_scales", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UPerHead", ",", "self", ")", ".", "__init__", "(", "\n", "input_transform", "=", "'multiple_select'", ",", "**", "kwargs", ")", "\n", "# PSP Module", "\n", "self", ".", "psp_modules", "=", "PPM", "(", "\n", "pool_scales", ",", "\n", "self", ".", "in_channels", "[", "-", "1", "]", ",", "\n", "self", ".", "channels", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "[", "-", "1", "]", "+", "len", "(", "pool_scales", ")", "*", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "# FPN Module", "\n", "self", ".", "lateral_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "fpn_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "in_channels", "in", "self", ".", "in_channels", "[", ":", "-", "1", "]", ":", "# skip the top layer", "\n", "            ", "l_conv", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "inplace", "=", "False", ")", "\n", "fpn_conv", "=", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "inplace", "=", "False", ")", "\n", "self", ".", "lateral_convs", ".", "append", "(", "l_conv", ")", "\n", "self", ".", "fpn_convs", ".", "append", "(", "fpn_conv", ")", "\n", "\n", "", "self", ".", "fpn_bottleneck", "=", "ConvModule", "(", "\n", "len", "(", "self", ".", "in_channels", ")", "*", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.uper_head.UPerHead.psp_forward": [[76, 85], ["torch.cat.extend", "torch.cat.extend", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "uper_head.UPerHead.bottleneck", "uper_head.UPerHead.psp_modules"], "methods", ["None"], ["", "def", "psp_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function of PSP module.\"\"\"", "\n", "x", "=", "inputs", "[", "-", "1", "]", "\n", "psp_outs", "=", "[", "x", "]", "\n", "psp_outs", ".", "extend", "(", "self", ".", "psp_modules", "(", "x", ")", ")", "\n", "psp_outs", "=", "torch", ".", "cat", "(", "psp_outs", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "psp_outs", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.uper_head.UPerHead.forward": [[86, 127], ["uper_head.UPerHead._transform_inputs", "laterals.append", "len", "range", "torch.cat.append", "torch.cat.append", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "uper_head.UPerHead.fpn_bottleneck", "uper_head.UPerHead.cls_seg", "lateral_conv", "uper_head.UPerHead.psp_forward", "mmseg.ops.resize", "mmseg.ops.resize", "enumerate", "range"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.uper_head.UPerHead.psp_forward", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "\n", "inputs", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "\n", "# build laterals", "\n", "laterals", "=", "[", "\n", "lateral_conv", "(", "inputs", "[", "i", "]", ")", "\n", "for", "i", ",", "lateral_conv", "in", "enumerate", "(", "self", ".", "lateral_convs", ")", "\n", "]", "\n", "\n", "laterals", ".", "append", "(", "self", ".", "psp_forward", "(", "inputs", ")", ")", "\n", "\n", "# build top-down path", "\n", "used_backbone_levels", "=", "len", "(", "laterals", ")", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "prev_shape", "=", "laterals", "[", "i", "-", "1", "]", ".", "shape", "[", "2", ":", "]", "\n", "laterals", "[", "i", "-", "1", "]", "+=", "resize", "(", "\n", "laterals", "[", "i", "]", ",", "\n", "size", "=", "prev_shape", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "\n", "# build outputs", "\n", "", "fpn_outs", "=", "[", "\n", "self", ".", "fpn_convs", "[", "i", "]", "(", "laterals", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "-", "1", ")", "\n", "]", "\n", "# append psp feature", "\n", "fpn_outs", ".", "append", "(", "laterals", "[", "-", "1", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "fpn_outs", "[", "i", "]", "=", "resize", "(", "\n", "fpn_outs", "[", "i", "]", ",", "\n", "size", "=", "fpn_outs", "[", "0", "]", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "", "fpn_outs", "=", "torch", ".", "cat", "(", "fpn_outs", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "fpn_bottleneck", "(", "fpn_outs", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.fcn_head.FCNHead.__init__": [[22, 68], ["decode_head.BaseDecodeHead.__init__", "convs.append", "range", "mmcv.cnn.ConvModule", "convs.append", "torch.Identity", "torch.Identity", "torch.Sequential", "torch.Sequential", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_convs", "=", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "concat_input", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "num_convs", ">=", "0", "\n", "self", ".", "num_convs", "=", "num_convs", "\n", "self", ".", "concat_input", "=", "concat_input", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "super", "(", "FCNHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "num_convs", "==", "0", ":", "\n", "            ", "assert", "self", ".", "in_channels", "==", "self", ".", "channels", "\n", "\n", "", "convs", "=", "[", "]", "\n", "convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "kernel_size", "//", "2", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "for", "i", "in", "range", "(", "num_convs", "-", "1", ")", ":", "\n", "            ", "convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "kernel_size", "//", "2", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "", "if", "num_convs", "==", "0", ":", "\n", "            ", "self", ".", "convs", "=", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "", "if", "self", ".", "concat_input", ":", "\n", "            ", "self", ".", "conv_cat", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "+", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "kernel_size", "//", "2", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.fcn_head.FCNHead.forward": [[69, 77], ["fcn_head.FCNHead._transform_inputs", "fcn_head.FCNHead.convs", "fcn_head.FCNHead.cls_seg", "fcn_head.FCNHead.conv_cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "output", "=", "self", ".", "convs", "(", "x", ")", "\n", "if", "self", ".", "concat_input", ":", "\n", "            ", "output", "=", "self", ".", "conv_cat", "(", "torch", ".", "cat", "(", "[", "x", ",", "output", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.LovaszLoss.__init__": [[248, 273], ["torch.Module.__init__", "mmcv.is_list_of"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "loss_type", "=", "'multi_class'", ",", "\n", "classes", "=", "'present'", ",", "\n", "per_image", "=", "False", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "class_weight", "=", "None", ",", "\n", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "LovaszLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "loss_type", "in", "(", "'binary'", ",", "'multi_class'", ")", ",", "\"loss_type should be \\\n                                                    'binary' or 'multi_class'.\"", "\n", "\n", "if", "loss_type", "==", "'binary'", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "lovasz_hinge", "\n", "", "else", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "lovasz_softmax", "\n", "", "assert", "classes", "in", "(", "'all'", ",", "'present'", ")", "or", "mmcv", ".", "is_list_of", "(", "classes", ",", "int", ")", "\n", "if", "not", "per_image", ":", "\n", "            ", "assert", "reduction", "==", "'none'", ",", "\"reduction should be 'none' when \\\n                                                        per_image is False.\"", "\n", "\n", "", "self", ".", "classes", "=", "classes", "\n", "self", ".", "per_image", "=", "per_image", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "class_weight", "=", "class_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.LovaszLoss.forward": [[274, 304], ["torch.softmax.new_tensor", "torch.softmax", "torch.softmax", "torch.softmax", "lovasz_loss.LovaszLoss.cls_criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "cls_score", ",", "\n", "label", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "if", "self", ".", "class_weight", "is", "not", "None", ":", "\n", "            ", "class_weight", "=", "cls_score", ".", "new_tensor", "(", "self", ".", "class_weight", ")", "\n", "", "else", ":", "\n", "            ", "class_weight", "=", "None", "\n", "\n", "# if multi-class loss, transform logits to probs", "\n", "", "if", "self", ".", "cls_criterion", "==", "lovasz_softmax", ":", "\n", "            ", "cls_score", "=", "F", ".", "softmax", "(", "cls_score", ",", "dim", "=", "1", ")", "\n", "\n", "", "loss_cls", "=", "self", ".", "loss_weight", "*", "self", ".", "cls_criterion", "(", "\n", "cls_score", ",", "\n", "label", ",", "\n", "self", ".", "classes", ",", "\n", "self", ".", "per_image", ",", "\n", "class_weight", "=", "class_weight", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss_cls", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.lovasz_grad": [[14, 27], ["len", "gt_sorted.sum", "gt_sorted.float().cumsum", "gt_sorted.float"], "function", ["None"], ["def", "lovasz_grad", "(", "gt_sorted", ")", ":", "\n", "    ", "\"\"\"Computes gradient of the Lovasz extension w.r.t sorted errors.\n\n    See Alg. 1 in paper.\n    \"\"\"", "\n", "p", "=", "len", "(", "gt_sorted", ")", "\n", "gts", "=", "gt_sorted", ".", "sum", "(", ")", "\n", "intersection", "=", "gts", "-", "gt_sorted", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "union", "=", "gts", "+", "(", "1", "-", "gt_sorted", ")", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "jaccard", "=", "1.", "-", "intersection", "/", "union", "\n", "if", "p", ">", "1", ":", "# cover 1-pixel case", "\n", "        ", "jaccard", "[", "1", ":", "p", "]", "=", "jaccard", "[", "1", ":", "p", "]", "-", "jaccard", "[", "0", ":", "-", "1", "]", "\n", "", "return", "jaccard", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.flatten_binary_logits": [[29, 40], ["logits.view.view", "labels.view.view"], "function", ["None"], ["", "def", "flatten_binary_logits", "(", "logits", ",", "labels", ",", "ignore_index", "=", "None", ")", ":", "\n", "    ", "\"\"\"Flattens predictions in the batch (binary case) Remove labels equal to\n    'ignore_index'.\"\"\"", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ")", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore_index", "is", "None", ":", "\n", "        ", "return", "logits", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore_index", ")", "\n", "vlogits", "=", "logits", "[", "valid", "]", "\n", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vlogits", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.flatten_probs": [[42, 57], ["probs.view.size", "probs.view.permute().contiguous().view", "labels.view.view", "probs.view.dim", "probs.view.size", "probs.view.view", "probs.view.permute().contiguous", "valid.nonzero().squeeze", "probs.view.permute", "valid.nonzero"], "function", ["None"], ["", "def", "flatten_probs", "(", "probs", ",", "labels", ",", "ignore_index", "=", "None", ")", ":", "\n", "    ", "\"\"\"Flattens predictions in the batch.\"\"\"", "\n", "if", "probs", ".", "dim", "(", ")", "==", "3", ":", "\n", "# assumes output of a sigmoid layer", "\n", "        ", "B", ",", "H", ",", "W", "=", "probs", ".", "size", "(", ")", "\n", "probs", "=", "probs", ".", "view", "(", "B", ",", "1", ",", "H", ",", "W", ")", "\n", "", "B", ",", "C", ",", "H", ",", "W", "=", "probs", ".", "size", "(", ")", "\n", "probs", "=", "probs", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "C", ")", "# B*H*W, C=P,C", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore_index", "is", "None", ":", "\n", "        ", "return", "probs", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore_index", ")", "\n", "vprobs", "=", "probs", "[", "valid", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "\n", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vprobs", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.lovasz_hinge_flat": [[59, 81], ["torch.sort", "torch.sort", "torch.sort", "lovasz_loss.lovasz_grad", "torch.dot", "torch.dot", "torch.dot", "len", "torch.relu", "logits.sum", "labels.float"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.lovasz_grad"], ["", "def", "lovasz_hinge_flat", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "\"\"\"Binary Lovasz hinge loss.\n\n    Args:\n        logits (torch.Tensor): [P], logits at each prediction\n            (between -infty and +infty).\n        labels (torch.Tensor): [P], binary ground truth labels (0 or 1).\n\n    Returns:\n        torch.Tensor: The calculated loss.\n    \"\"\"", "\n", "if", "len", "(", "labels", ")", "==", "0", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "logits", ".", "sum", "(", ")", "*", "0.", "\n", "", "signs", "=", "2.", "*", "labels", ".", "float", "(", ")", "-", "1.", "\n", "errors", "=", "(", "1.", "-", "logits", "*", "signs", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "gt_sorted", "=", "labels", "[", "perm", "]", "\n", "grad", "=", "lovasz_grad", "(", "gt_sorted", ")", "\n", "loss", "=", "torch", ".", "dot", "(", "F", ".", "relu", "(", "errors_sorted", ")", ",", "grad", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.lovasz_hinge": [[83, 126], ["utils.weight_reduce_loss", "lovasz_loss.lovasz_hinge_flat", "lovasz_loss.lovasz_hinge_flat", "torch.stack", "torch.stack", "torch.stack", "zip", "lovasz_loss.flatten_binary_logits", "lovasz_loss.flatten_binary_logits", "logit.unsqueeze", "label.unsqueeze"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.weight_reduce_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.lovasz_hinge_flat", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.lovasz_hinge_flat", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.flatten_binary_logits", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.flatten_binary_logits"], ["", "def", "lovasz_hinge", "(", "logits", ",", "\n", "labels", ",", "\n", "classes", "=", "'present'", ",", "\n", "per_image", "=", "False", ",", "\n", "class_weight", "=", "None", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ",", "\n", "ignore_index", "=", "255", ")", ":", "\n", "    ", "\"\"\"Binary Lovasz hinge loss.\n\n    Args:\n        logits (torch.Tensor): [B, H, W], logits at each pixel\n            (between -infty and +infty).\n        labels (torch.Tensor): [B, H, W], binary ground truth masks (0 or 1).\n        classes (str | list[int], optional): Placeholder, to be consistent with\n            other loss. Default: None.\n        per_image (bool, optional): If per_image is True, compute the loss per\n            image instead of per batch. Default: False.\n        class_weight (list[float], optional): Placeholder, to be consistent\n            with other loss. Default: None.\n        reduction (str, optional): The method used to reduce the loss. Options\n            are \"none\", \"mean\" and \"sum\". This parameter only works when\n            per_image is True. Default: 'mean'.\n        avg_factor (int, optional): Average factor that is used to average\n            the loss. This parameter only works when per_image is True.\n            Default: None.\n        ignore_index (int | None): The label index to be ignored. Default: 255.\n\n    Returns:\n        torch.Tensor: The calculated loss.\n    \"\"\"", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "[", "\n", "lovasz_hinge_flat", "(", "*", "flatten_binary_logits", "(", "\n", "logit", ".", "unsqueeze", "(", "0", ")", ",", "label", ".", "unsqueeze", "(", "0", ")", ",", "ignore_index", ")", ")", "\n", "for", "logit", ",", "label", "in", "zip", "(", "logits", ",", "labels", ")", "\n", "]", "\n", "loss", "=", "weight_reduce_loss", "(", "\n", "torch", ".", "stack", "(", "loss", ")", ",", "None", ",", "reduction", ",", "avg_factor", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_hinge_flat", "(", "\n", "*", "flatten_binary_logits", "(", "logits", ",", "labels", ",", "ignore_index", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.lovasz_softmax_flat": [[128, 169], ["probs.size", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "probs.numel", "list", "torch.sort", "torch.sort", "torch.sort", "torch.dot", "torch.dot", "torch.dot", "losses.append", "range", "lovasz_loss.lovasz_grad", "torch.stack", "torch.stack", "torch.stack", "fg.sum", "len", "ValueError"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.lovasz_grad"], ["", "def", "lovasz_softmax_flat", "(", "probs", ",", "labels", ",", "classes", "=", "'present'", ",", "class_weight", "=", "None", ")", ":", "\n", "    ", "\"\"\"Multi-class Lovasz-Softmax loss.\n\n    Args:\n        probs (torch.Tensor): [P, C], class probabilities at each prediction\n            (between 0 and 1).\n        labels (torch.Tensor): [P], ground truth labels (between 0 and C - 1).\n        classes (str | list[int], optional): Classes choosed to calculate loss.\n            'all' for all classes, 'present' for classes present in labels, or\n            a list of classes to average. Default: 'present'.\n        class_weight (list[float], optional): The weight for each class.\n            Default: None.\n\n    Returns:\n        torch.Tensor: The calculated loss.\n    \"\"\"", "\n", "if", "probs", ".", "numel", "(", ")", "==", "0", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "probs", "*", "0.", "\n", "", "C", "=", "probs", ".", "size", "(", "1", ")", "\n", "losses", "=", "[", "]", "\n", "class_to_sum", "=", "list", "(", "range", "(", "C", ")", ")", "if", "classes", "in", "[", "'all'", ",", "'present'", "]", "else", "classes", "\n", "for", "c", "in", "class_to_sum", ":", "\n", "        ", "fg", "=", "(", "labels", "==", "c", ")", ".", "float", "(", ")", "# foreground for class c", "\n", "if", "(", "classes", "==", "'present'", "and", "fg", ".", "sum", "(", ")", "==", "0", ")", ":", "\n", "            ", "continue", "\n", "", "if", "C", "==", "1", ":", "\n", "            ", "if", "len", "(", "classes", ")", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "'Sigmoid output possible only with 1 class'", ")", "\n", "", "class_pred", "=", "probs", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "class_pred", "=", "probs", "[", ":", ",", "c", "]", "\n", "", "errors", "=", "(", "fg", "-", "class_pred", ")", ".", "abs", "(", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "fg_sorted", "=", "fg", "[", "perm", "]", "\n", "loss", "=", "torch", ".", "dot", "(", "errors_sorted", ",", "lovasz_grad", "(", "fg_sorted", ")", ")", "\n", "if", "class_weight", "is", "not", "None", ":", "\n", "            ", "loss", "*=", "class_weight", "[", "c", "]", "\n", "", "losses", ".", "append", "(", "loss", ")", "\n", "", "return", "torch", ".", "stack", "(", "losses", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.lovasz_softmax": [[171, 222], ["utils.weight_reduce_loss", "lovasz_loss.lovasz_softmax_flat", "lovasz_loss.lovasz_softmax_flat", "torch.stack", "torch.stack", "torch.stack", "zip", "lovasz_loss.flatten_probs", "lovasz_loss.flatten_probs", "prob.unsqueeze", "label.unsqueeze"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.weight_reduce_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.lovasz_softmax_flat", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.lovasz_softmax_flat", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.flatten_probs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.lovasz_loss.flatten_probs"], ["", "def", "lovasz_softmax", "(", "probs", ",", "\n", "labels", ",", "\n", "classes", "=", "'present'", ",", "\n", "per_image", "=", "False", ",", "\n", "class_weight", "=", "None", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ",", "\n", "ignore_index", "=", "255", ")", ":", "\n", "    ", "\"\"\"Multi-class Lovasz-Softmax loss.\n\n    Args:\n        probs (torch.Tensor): [B, C, H, W], class probabilities at each\n            prediction (between 0 and 1).\n        labels (torch.Tensor): [B, H, W], ground truth labels (between 0 and\n            C - 1).\n        classes (str | list[int], optional): Classes choosed to calculate loss.\n            'all' for all classes, 'present' for classes present in labels, or\n            a list of classes to average. Default: 'present'.\n        per_image (bool, optional): If per_image is True, compute the loss per\n            image instead of per batch. Default: False.\n        class_weight (list[float], optional): The weight for each class.\n            Default: None.\n        reduction (str, optional): The method used to reduce the loss. Options\n            are \"none\", \"mean\" and \"sum\". This parameter only works when\n            per_image is True. Default: 'mean'.\n        avg_factor (int, optional): Average factor that is used to average\n            the loss. This parameter only works when per_image is True.\n            Default: None.\n        ignore_index (int | None): The label index to be ignored. Default: 255.\n\n    Returns:\n        torch.Tensor: The calculated loss.\n    \"\"\"", "\n", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "[", "\n", "lovasz_softmax_flat", "(", "\n", "*", "flatten_probs", "(", "\n", "prob", ".", "unsqueeze", "(", "0", ")", ",", "label", ".", "unsqueeze", "(", "0", ")", ",", "ignore_index", ")", ",", "\n", "classes", "=", "classes", ",", "\n", "class_weight", "=", "class_weight", ")", "\n", "for", "prob", ",", "label", "in", "zip", "(", "probs", ",", "labels", ")", "\n", "]", "\n", "loss", "=", "weight_reduce_loss", "(", "\n", "torch", ".", "stack", "(", "loss", ")", ",", "None", ",", "reduction", ",", "avg_factor", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_softmax_flat", "(", "\n", "*", "flatten_probs", "(", "probs", ",", "labels", ",", "ignore_index", ")", ",", "\n", "classes", "=", "classes", ",", "\n", "class_weight", "=", "class_weight", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.accuracy.Accuracy.__init__": [[55, 67], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "topk", "=", "(", "1", ",", ")", ",", "thresh", "=", "None", ")", ":", "\n", "        ", "\"\"\"Module to calculate the accuracy.\n\n        Args:\n            topk (tuple, optional): The criterion used to calculate the\n                accuracy. Defaults to (1,).\n            thresh (float, optional): If not None, predictions with scores\n                under this threshold are considered incorrect. Default to None.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "topk", "=", "topk", "\n", "self", ".", "thresh", "=", "thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.accuracy.Accuracy.forward": [[68, 79], ["accuracy.accuracy"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.accuracy.accuracy"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "\"\"\"Forward function to calculate accuracy.\n\n        Args:\n            pred (torch.Tensor): Prediction of models.\n            target (torch.Tensor): Target for each prediction.\n\n        Returns:\n            tuple[float]: The accuracies under different topk criterions.\n        \"\"\"", "\n", "return", "accuracy", "(", "pred", ",", "target", ",", "self", ".", "topk", ",", "self", ".", "thresh", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.accuracy.accuracy": [[4, 50], ["isinstance", "isinstance", "max", "pred.topk", "pred_label.transpose.transpose", "pred_label.transpose.eq", "pred.size", "pred.size", "target.size", "pred.size", "target.unsqueeze().expand_as", "correct[].view().float().sum", "res.append", "pred.new_tensor", "pred.size", "correct[].view().float().sum.mul_", "range", "target.unsqueeze", "correct[].view().float", "len", "target.numel", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "pred", ",", "target", ",", "topk", "=", "1", ",", "thresh", "=", "None", ")", ":", "\n", "    ", "\"\"\"Calculate accuracy according to the prediction and target.\n\n    Args:\n        pred (torch.Tensor): The model prediction, shape (N, num_class, ...)\n        target (torch.Tensor): The target of each prediction, shape (N, , ...)\n        topk (int | tuple[int], optional): If the predictions in ``topk``\n            matches the target, the predictions will be regarded as\n            correct ones. Defaults to 1.\n        thresh (float, optional): If not None, predictions with scores under\n            this threshold are considered incorrect. Default to None.\n\n    Returns:\n        float | tuple[float]: If the input ``topk`` is a single integer,\n            the function will return a single float as accuracy. If\n            ``topk`` is a tuple containing multiple integers, the\n            function will return a tuple containing accuracies of\n            each ``topk`` number.\n    \"\"\"", "\n", "assert", "isinstance", "(", "topk", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "topk", ",", "int", ")", ":", "\n", "        ", "topk", "=", "(", "topk", ",", ")", "\n", "return_single", "=", "True", "\n", "", "else", ":", "\n", "        ", "return_single", "=", "False", "\n", "\n", "", "maxk", "=", "max", "(", "topk", ")", "\n", "if", "pred", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "        ", "accu", "=", "[", "pred", ".", "new_tensor", "(", "0.", ")", "for", "i", "in", "range", "(", "len", "(", "topk", ")", ")", "]", "\n", "return", "accu", "[", "0", "]", "if", "return_single", "else", "accu", "\n", "", "assert", "pred", ".", "ndim", "==", "target", ".", "ndim", "+", "1", "\n", "assert", "pred", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", "\n", "assert", "maxk", "<=", "pred", ".", "size", "(", "1", ")", ",", "f'maxk {maxk} exceeds pred dimension {pred.size(1)}'", "\n", "pred_value", ",", "pred_label", "=", "pred", ".", "topk", "(", "maxk", ",", "dim", "=", "1", ")", "\n", "# transpose to shape (maxk, N, ...)", "\n", "pred_label", "=", "pred_label", ".", "transpose", "(", "0", ",", "1", ")", "\n", "correct", "=", "pred_label", ".", "eq", "(", "target", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "pred_label", ")", ")", "\n", "if", "thresh", "is", "not", "None", ":", "\n", "# Only prediction values larger than thresh are counted as correct", "\n", "        ", "correct", "=", "correct", "&", "(", "pred_value", ">", "thresh", ")", ".", "t", "(", ")", "\n", "", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "target", ".", "numel", "(", ")", ")", ")", "\n", "", "return", "res", "[", "0", "]", "if", "return_single", "else", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.reduce_loss": [[6, 24], ["torch._Reduction.get_enum", "loss.mean", "loss.sum"], "function", ["None"], ["def", "reduce_loss", "(", "loss", ",", "reduction", ")", ":", "\n", "    ", "\"\"\"Reduce loss as specified.\n\n    Args:\n        loss (Tensor): Elementwise loss tensor.\n        reduction (str): Options are \"none\", \"mean\" and \"sum\".\n\n    Return:\n        Tensor: Reduced loss tensor.\n    \"\"\"", "\n", "reduction_enum", "=", "F", ".", "_Reduction", ".", "get_enum", "(", "reduction", ")", "\n", "# none: 0, elementwise_mean:1, sum: 2", "\n", "if", "reduction_enum", "==", "0", ":", "\n", "        ", "return", "loss", "\n", "", "elif", "reduction_enum", "==", "1", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "reduction_enum", "==", "2", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.weight_reduce_loss": [[26, 56], ["utils.reduce_loss", "weight.dim", "reduce_loss.dim", "weight.dim", "reduce_loss.sum", "ValueError", "weight.size", "weight.size", "reduce_loss.size"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.reduce_loss"], ["", "", "def", "weight_reduce_loss", "(", "loss", ",", "weight", "=", "None", ",", "reduction", "=", "'mean'", ",", "avg_factor", "=", "None", ")", ":", "\n", "    ", "\"\"\"Apply element-wise weight and reduce loss.\n\n    Args:\n        loss (Tensor): Element-wise loss.\n        weight (Tensor): Element-wise weights.\n        reduction (str): Same as built-in losses of PyTorch.\n        avg_factor (float): Avarage factor when computing the mean of losses.\n\n    Returns:\n        Tensor: Processed loss values.\n    \"\"\"", "\n", "# if weight is specified, apply element-wise weight", "\n", "if", "weight", "is", "not", "None", ":", "\n", "        ", "assert", "weight", ".", "dim", "(", ")", "==", "loss", ".", "dim", "(", ")", "\n", "if", "weight", ".", "dim", "(", ")", ">", "1", ":", "\n", "            ", "assert", "weight", ".", "size", "(", "1", ")", "==", "1", "or", "weight", ".", "size", "(", "1", ")", "==", "loss", ".", "size", "(", "1", ")", "\n", "", "loss", "=", "loss", "*", "weight", "\n", "\n", "# if avg_factor is not specified, just reduce the loss", "\n", "", "if", "avg_factor", "is", "None", ":", "\n", "        ", "loss", "=", "reduce_loss", "(", "loss", ",", "reduction", ")", "\n", "", "else", ":", "\n", "# if reduction is mean, then average the loss by avg_factor", "\n", "        ", "if", "reduction", "==", "'mean'", ":", "\n", "            ", "loss", "=", "loss", ".", "sum", "(", ")", "/", "avg_factor", "\n", "# if reduction is 'none', then do nothing, otherwise raise an error", "\n", "", "elif", "reduction", "!=", "'none'", ":", "\n", "            ", "raise", "ValueError", "(", "'avg_factor can not be used with reduction=\"sum\"'", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.weighted_loss": [[58, 102], ["functools.wraps", "loss_func", "utils.weight_reduce_loss"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.weight_reduce_loss"], ["", "def", "weighted_loss", "(", "loss_func", ")", ":", "\n", "    ", "\"\"\"Create a weighted version of a given loss function.\n\n    To use this decorator, the loss function must have the signature like\n    `loss_func(pred, target, **kwargs)`. The function only needs to compute\n    element-wise loss without any reduction. This decorator will add weight\n    and reduction arguments to the function. The decorated function will have\n    the signature like `loss_func(pred, target, weight=None, reduction='mean',\n    avg_factor=None, **kwargs)`.\n\n    :Example:\n\n    >>> import torch\n    >>> @weighted_loss\n    >>> def l1_loss(pred, target):\n    >>>     return (pred - target).abs()\n\n    >>> pred = torch.Tensor([0, 2, 3])\n    >>> target = torch.Tensor([1, 1, 1])\n    >>> weight = torch.Tensor([1, 0, 1])\n\n    >>> l1_loss(pred, target)\n    tensor(1.3333)\n    >>> l1_loss(pred, target, weight)\n    tensor(1.)\n    >>> l1_loss(pred, target, reduction='none')\n    tensor([1., 1., 2.])\n    >>> l1_loss(pred, target, weight, avg_factor=2)\n    tensor(1.5000)\n    \"\"\"", "\n", "\n", "@", "functools", ".", "wraps", "(", "loss_func", ")", "\n", "def", "wrapper", "(", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "# get element-wise loss", "\n", "        ", "loss", "=", "loss_func", "(", "pred", ",", "target", ",", "**", "kwargs", ")", "\n", "loss", "=", "weight_reduce_loss", "(", "loss", ",", "weight", ",", "reduction", ",", "avg_factor", ")", "\n", "return", "loss", "\n", "\n", "", "return", "wrapper", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.cross_entropy_loss.CrossEntropyLoss.__init__": [[154, 174], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "use_sigmoid", "=", "False", ",", "\n", "use_mask", "=", "False", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "class_weight", "=", "None", ",", "\n", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "use_sigmoid", "is", "False", ")", "or", "(", "use_mask", "is", "False", ")", "\n", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "self", ".", "use_mask", "=", "use_mask", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "class_weight", "=", "class_weight", "\n", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "binary_cross_entropy", "\n", "", "elif", "self", ".", "use_mask", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "mask_cross_entropy", "\n", "", "else", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "cross_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.cross_entropy_loss.CrossEntropyLoss.forward": [[175, 199], ["cls_score.new_tensor", "cross_entropy_loss.CrossEntropyLoss.cls_criterion"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "\n", "cls_score", ",", "\n", "label", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "if", "self", ".", "class_weight", "is", "not", "None", ":", "\n", "            ", "class_weight", "=", "cls_score", ".", "new_tensor", "(", "self", ".", "class_weight", ")", "\n", "", "else", ":", "\n", "            ", "class_weight", "=", "None", "\n", "", "loss_cls", "=", "self", ".", "loss_weight", "*", "self", ".", "cls_criterion", "(", "\n", "cls_score", ",", "\n", "label", ",", "\n", "weight", ",", "\n", "class_weight", "=", "class_weight", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss_cls", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.cross_entropy_loss.cross_entropy": [[9, 33], ["torch.cross_entropy", "utils.weight_reduce_loss", "weight.float.float"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.cross_entropy_loss.cross_entropy", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.weight_reduce_loss"], ["def", "cross_entropy", "(", "pred", ",", "\n", "label", ",", "\n", "weight", "=", "None", ",", "\n", "class_weight", "=", "None", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ",", "\n", "ignore_index", "=", "-", "100", ")", ":", "\n", "    ", "\"\"\"The wrapper function for :func:`F.cross_entropy`\"\"\"", "\n", "# class_weight is a manual rescaling weight given to each class.", "\n", "# If given, has to be a Tensor of size C element-wise losses", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "\n", "pred", ",", "\n", "label", ",", "\n", "weight", "=", "class_weight", ",", "\n", "reduction", "=", "'none'", ",", "\n", "ignore_index", "=", "ignore_index", ")", "\n", "\n", "# apply weights and do the reduction", "\n", "if", "weight", "is", "not", "None", ":", "\n", "        ", "weight", "=", "weight", ".", "float", "(", ")", "\n", "", "loss", "=", "weight_reduce_loss", "(", "\n", "loss", ",", "weight", "=", "weight", ",", "reduction", "=", "reduction", ",", "avg_factor", "=", "avg_factor", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.cross_entropy_loss._expand_onehot_labels": [[35, 55], ["labels.new_zeros", "torch.nonzero", "torch.nonzero", "torch.nonzero", "valid_mask.unsqueeze().expand().float.unsqueeze().expand().float", "inds[].numel", "label_weights.unsqueeze().expand", "labels.dim", "valid_mask.unsqueeze().expand().float.unsqueeze().expand", "label_weights.unsqueeze", "valid_mask.unsqueeze().expand().float.unsqueeze"], "function", ["None"], ["", "def", "_expand_onehot_labels", "(", "labels", ",", "label_weights", ",", "target_shape", ",", "ignore_index", ")", ":", "\n", "    ", "\"\"\"Expand onehot labels to match the size of prediction.\"\"\"", "\n", "bin_labels", "=", "labels", ".", "new_zeros", "(", "target_shape", ")", "\n", "valid_mask", "=", "(", "labels", ">=", "0", ")", "&", "(", "labels", "!=", "ignore_index", ")", "\n", "inds", "=", "torch", ".", "nonzero", "(", "valid_mask", ",", "as_tuple", "=", "True", ")", "\n", "\n", "if", "inds", "[", "0", "]", ".", "numel", "(", ")", ">", "0", ":", "\n", "        ", "if", "labels", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "bin_labels", "[", "inds", "[", "0", "]", ",", "labels", "[", "valid_mask", "]", ",", "inds", "[", "1", "]", ",", "inds", "[", "2", "]", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "bin_labels", "[", "inds", "[", "0", "]", ",", "labels", "[", "valid_mask", "]", "]", "=", "1", "\n", "\n", "", "", "valid_mask", "=", "valid_mask", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "target_shape", ")", ".", "float", "(", ")", "\n", "if", "label_weights", "is", "None", ":", "\n", "        ", "bin_label_weights", "=", "valid_mask", "\n", "", "else", ":", "\n", "        ", "bin_label_weights", "=", "label_weights", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "target_shape", ")", "\n", "bin_label_weights", "*=", "valid_mask", "\n", "\n", "", "return", "bin_labels", ",", "bin_label_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.cross_entropy_loss.binary_cross_entropy": [[57, 98], ["torch.binary_cross_entropy_with_logits", "utils.weight_reduce_loss", "pred.dim", "label.dim", "cross_entropy_loss._expand_onehot_labels", "weight.float.float", "label.float", "pred.dim", "label.dim", "pred.dim", "label.dim"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.weight_reduce_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.cross_entropy_loss._expand_onehot_labels"], ["", "def", "binary_cross_entropy", "(", "pred", ",", "\n", "label", ",", "\n", "weight", "=", "None", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ",", "\n", "class_weight", "=", "None", ",", "\n", "ignore_index", "=", "255", ")", ":", "\n", "    ", "\"\"\"Calculate the binary CrossEntropy loss.\n\n    Args:\n        pred (torch.Tensor): The prediction with shape (N, 1).\n        label (torch.Tensor): The learning label of the prediction.\n        weight (torch.Tensor, optional): Sample-wise loss weight.\n        reduction (str, optional): The method used to reduce the loss.\n            Options are \"none\", \"mean\" and \"sum\".\n        avg_factor (int, optional): Average factor that is used to average\n            the loss. Defaults to None.\n        class_weight (list[float], optional): The weight for each class.\n        ignore_index (int | None): The label index to be ignored. Default: 255\n\n    Returns:\n        torch.Tensor: The calculated loss\n    \"\"\"", "\n", "if", "pred", ".", "dim", "(", ")", "!=", "label", ".", "dim", "(", ")", ":", "\n", "        ", "assert", "(", "pred", ".", "dim", "(", ")", "==", "2", "and", "label", ".", "dim", "(", ")", "==", "1", ")", "or", "(", "\n", "pred", ".", "dim", "(", ")", "==", "4", "and", "label", ".", "dim", "(", ")", "==", "3", ")", ",", "'Only pred shape [N, C], label shape [N] or pred shape [N, C, '", "'H, W], label shape [N, H, W] are supported'", "\n", "label", ",", "weight", "=", "_expand_onehot_labels", "(", "label", ",", "weight", ",", "pred", ".", "shape", ",", "\n", "ignore_index", ")", "\n", "\n", "# weighted element-wise losses", "\n", "", "if", "weight", "is", "not", "None", ":", "\n", "        ", "weight", "=", "weight", ".", "float", "(", ")", "\n", "", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred", ",", "label", ".", "float", "(", ")", ",", "pos_weight", "=", "class_weight", ",", "reduction", "=", "'none'", ")", "\n", "# do the reduction for the weighted loss", "\n", "loss", "=", "weight_reduce_loss", "(", "\n", "loss", ",", "weight", ",", "reduction", "=", "reduction", ",", "avg_factor", "=", "avg_factor", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.cross_entropy_loss.mask_cross_entropy": [[100, 136], ["torch.arange", "torch.arange", "torch.arange", "pred[].squeeze", "pred.size", "torch.binary_cross_entropy_with_logits"], "function", ["None"], ["", "def", "mask_cross_entropy", "(", "pred", ",", "\n", "target", ",", "\n", "label", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ",", "\n", "class_weight", "=", "None", ",", "\n", "ignore_index", "=", "None", ")", ":", "\n", "    ", "\"\"\"Calculate the CrossEntropy loss for masks.\n\n    Args:\n        pred (torch.Tensor): The prediction with shape (N, C), C is the number\n            of classes.\n        target (torch.Tensor): The learning label of the prediction.\n        label (torch.Tensor): ``label`` indicates the class label of the mask'\n            corresponding object. This will be used to select the mask in the\n            of the class which the object belongs to when the mask prediction\n            if not class-agnostic.\n        reduction (str, optional): The method used to reduce the loss.\n            Options are \"none\", \"mean\" and \"sum\".\n        avg_factor (int, optional): Average factor that is used to average\n            the loss. Defaults to None.\n        class_weight (list[float], optional): The weight for each class.\n        ignore_index (None): Placeholder, to be consistent with other loss.\n            Default: None.\n\n    Returns:\n        torch.Tensor: The calculated loss\n    \"\"\"", "\n", "assert", "ignore_index", "is", "None", ",", "'BCE loss does not support ignore_index'", "\n", "# TODO: handle these two reserved arguments", "\n", "assert", "reduction", "==", "'mean'", "and", "avg_factor", "is", "None", "\n", "num_rois", "=", "pred", ".", "size", "(", ")", "[", "0", "]", "\n", "inds", "=", "torch", ".", "arange", "(", "0", ",", "num_rois", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "pred", ".", "device", ")", "\n", "pred_slice", "=", "pred", "[", "inds", ",", "label", "]", ".", "squeeze", "(", "1", ")", "\n", "return", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred_slice", ",", "target", ",", "weight", "=", "class_weight", ",", "reduction", "=", "'mean'", ")", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.seg.builder.build_pixel_sampler": [[6, 9], ["mmcv.utils.build_from_cfg"], "function", ["None"], ["import", "numpy", "as", "np", "\n", "from", "mmcv", ".", "parallel", "import", "collate", "\n", "from", "mmcv", ".", "runner", "import", "get_dist_info", "\n", "from", "mmcv", ".", "utils", "import", "Registry", ",", "build_from_cfg", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.sampler.ohem_pixel_sampler.OHEMPixelSampler.__init__": [[23, 29], ["base_pixel_sampler.BasePixelSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["def", "__init__", "(", "self", ",", "context", ",", "thresh", "=", "None", ",", "min_kept", "=", "100000", ")", ":", "\n", "        ", "super", "(", "OHEMPixelSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "context", "=", "context", "\n", "assert", "min_kept", ">", "1", "\n", "self", ".", "thresh", "=", "thresh", "\n", "self", ".", "min_kept", "=", "min_kept", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.sampler.ohem_pixel_sampler.OHEMPixelSampler.sample": [[30, 77], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "seg_label.squeeze().long.squeeze().long.squeeze().long", "seg_logit.new_zeros", "seg_label.squeeze().long.squeeze().long.size", "torch.softmax", "torch.softmax", "seg_label.squeeze().long.squeeze().long.clone().unsqueeze", "seg_prob.gather().squeeze.gather().squeeze.gather().squeeze", "seg_prob[].sort", "max", "ohem_pixel_sampler.OHEMPixelSampler.context.loss_decode", "losses[].sort", "seg_label.squeeze().long.squeeze().long.squeeze", "seg_label.squeeze().long.squeeze().long.size", "sort_prob.numel", "seg_label.squeeze().long.squeeze().long.clone", "seg_prob.gather().squeeze.gather().squeeze.gather", "min", "sort_prob.numel"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "seg_logit", ",", "seg_label", ")", ":", "\n", "        ", "\"\"\"Sample pixels that have high loss or with low prediction confidence.\n\n        Args:\n            seg_logit (torch.Tensor): segmentation logits, shape (N, C, H, W)\n            seg_label (torch.Tensor): segmentation label, shape (N, 1, H, W)\n\n        Returns:\n            torch.Tensor: segmentation weight, shape (N, H, W)\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "assert", "seg_logit", ".", "shape", "[", "2", ":", "]", "==", "seg_label", ".", "shape", "[", "2", ":", "]", "\n", "assert", "seg_label", ".", "shape", "[", "1", "]", "==", "1", "\n", "seg_label", "=", "seg_label", ".", "squeeze", "(", "1", ")", ".", "long", "(", ")", "\n", "batch_kept", "=", "self", ".", "min_kept", "*", "seg_label", ".", "size", "(", "0", ")", "\n", "valid_mask", "=", "seg_label", "!=", "self", ".", "context", ".", "ignore_index", "\n", "seg_weight", "=", "seg_logit", ".", "new_zeros", "(", "size", "=", "seg_label", ".", "size", "(", ")", ")", "\n", "valid_seg_weight", "=", "seg_weight", "[", "valid_mask", "]", "\n", "if", "self", ".", "thresh", "is", "not", "None", ":", "\n", "                ", "seg_prob", "=", "F", ".", "softmax", "(", "seg_logit", ",", "dim", "=", "1", ")", "\n", "\n", "tmp_seg_label", "=", "seg_label", ".", "clone", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "tmp_seg_label", "[", "tmp_seg_label", "==", "self", ".", "context", ".", "ignore_index", "]", "=", "0", "\n", "seg_prob", "=", "seg_prob", ".", "gather", "(", "1", ",", "tmp_seg_label", ")", ".", "squeeze", "(", "1", ")", "\n", "sort_prob", ",", "sort_indices", "=", "seg_prob", "[", "valid_mask", "]", ".", "sort", "(", ")", "\n", "\n", "if", "sort_prob", ".", "numel", "(", ")", ">", "0", ":", "\n", "                    ", "min_threshold", "=", "sort_prob", "[", "min", "(", "batch_kept", ",", "\n", "sort_prob", ".", "numel", "(", ")", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "                    ", "min_threshold", "=", "0.0", "\n", "", "threshold", "=", "max", "(", "min_threshold", ",", "self", ".", "thresh", ")", "\n", "valid_seg_weight", "[", "seg_prob", "[", "valid_mask", "]", "<", "threshold", "]", "=", "1.", "\n", "", "else", ":", "\n", "                ", "losses", "=", "self", ".", "context", ".", "loss_decode", "(", "\n", "seg_logit", ",", "\n", "seg_label", ",", "\n", "weight", "=", "None", ",", "\n", "ignore_index", "=", "self", ".", "context", ".", "ignore_index", ",", "\n", "reduction_override", "=", "'none'", ")", "\n", "# faster than topk according to https://github.com/pytorch/pytorch/issues/22812  # noqa", "\n", "_", ",", "sort_indices", "=", "losses", "[", "valid_mask", "]", ".", "sort", "(", "descending", "=", "True", ")", "\n", "valid_seg_weight", "[", "sort_indices", "[", ":", "batch_kept", "]", "]", "=", "1.", "\n", "\n", "", "seg_weight", "[", "valid_mask", "]", "=", "valid_seg_weight", "\n", "\n", "return", "seg_weight", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.sampler.base_pixel_sampler.BasePixelSampler.__init__": [[7, 9], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.sampler.base_pixel_sampler.BasePixelSampler.sample": [[10, 14], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "sample", "(", "self", ",", "seg_logit", ",", "seg_label", ")", ":", "\n", "        ", "\"\"\"Placeholder for sample function.\"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.intersect_and_union": [[5, 60], ["dict", "isinstance", "isinstance", "numpy.histogram", "numpy.histogram", "numpy.histogram", "numpy.load", "mmcv.imread", "label_map.items", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["def", "intersect_and_union", "(", "pred_label", ",", "\n", "label", ",", "\n", "num_classes", ",", "\n", "ignore_index", ",", "\n", "label_map", "=", "dict", "(", ")", ",", "\n", "reduce_zero_label", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate intersection and Union.\n\n    Args:\n        pred_label (ndarray): Prediction segmentation map.\n        label (ndarray): Ground truth segmentation map.\n        num_classes (int): Number of categories.\n        ignore_index (int): Index that will be ignored in evaluation.\n        label_map (dict): Mapping old labels to new labels. The parameter will\n            work only when label is str. Default: dict().\n        reduce_zero_label (bool): Wether ignore zero label. The parameter will\n            work only when label is str. Default: False.\n\n     Returns:\n         ndarray: The intersection of prediction and ground truth histogram\n             on all classes.\n         ndarray: The union of prediction and ground truth histogram on all\n             classes.\n         ndarray: The prediction histogram on all classes.\n         ndarray: The ground truth histogram on all classes.\n    \"\"\"", "\n", "\n", "if", "isinstance", "(", "pred_label", ",", "str", ")", ":", "\n", "        ", "pred_label", "=", "np", ".", "load", "(", "pred_label", ")", "\n", "\n", "", "if", "isinstance", "(", "label", ",", "str", ")", ":", "\n", "        ", "label", "=", "mmcv", ".", "imread", "(", "label", ",", "flag", "=", "'unchanged'", ",", "backend", "=", "'pillow'", ")", "\n", "# modify if custom classes", "\n", "", "if", "label_map", "is", "not", "None", ":", "\n", "        ", "for", "old_id", ",", "new_id", "in", "label_map", ".", "items", "(", ")", ":", "\n", "            ", "label", "[", "label", "==", "old_id", "]", "=", "new_id", "\n", "", "", "if", "reduce_zero_label", ":", "\n", "# avoid using underflow conversion", "\n", "        ", "label", "[", "label", "==", "0", "]", "=", "255", "\n", "label", "=", "label", "-", "1", "\n", "label", "[", "label", "==", "254", "]", "=", "255", "\n", "\n", "", "mask", "=", "(", "label", "!=", "ignore_index", ")", "\n", "pred_label", "=", "pred_label", "[", "mask", "]", "\n", "label", "=", "label", "[", "mask", "]", "\n", "\n", "intersect", "=", "pred_label", "[", "pred_label", "==", "label", "]", "\n", "area_intersect", ",", "_", "=", "np", ".", "histogram", "(", "\n", "intersect", ",", "bins", "=", "np", ".", "arange", "(", "num_classes", "+", "1", ")", ")", "\n", "area_pred_label", ",", "_", "=", "np", ".", "histogram", "(", "\n", "pred_label", ",", "bins", "=", "np", ".", "arange", "(", "num_classes", "+", "1", ")", ")", "\n", "area_label", ",", "_", "=", "np", ".", "histogram", "(", "label", ",", "bins", "=", "np", ".", "arange", "(", "num_classes", "+", "1", ")", ")", "\n", "area_union", "=", "area_pred_label", "+", "area_label", "-", "area_intersect", "\n", "\n", "return", "area_intersect", ",", "area_union", ",", "area_pred_label", ",", "area_label", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.total_intersect_and_union": [[62, 103], ["dict", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "len", "metrics.intersect_and_union"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.intersect_and_union"], ["", "def", "total_intersect_and_union", "(", "results", ",", "\n", "gt_seg_maps", ",", "\n", "num_classes", ",", "\n", "ignore_index", ",", "\n", "label_map", "=", "dict", "(", ")", ",", "\n", "reduce_zero_label", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate Total Intersection and Union.\n\n    Args:\n        results (list[ndarray]): List of prediction segmentation maps.\n        gt_seg_maps (list[ndarray]): list of ground truth segmentation maps.\n        num_classes (int): Number of categories.\n        ignore_index (int): Index that will be ignored in evaluation.\n        label_map (dict): Mapping old labels to new labels. Default: dict().\n        reduce_zero_label (bool): Wether ignore zero label. Default: False.\n\n     Returns:\n         ndarray: The intersection of prediction and ground truth histogram\n             on all classes.\n         ndarray: The union of prediction and ground truth histogram on all\n             classes.\n         ndarray: The prediction histogram on all classes.\n         ndarray: The ground truth histogram on all classes.\n    \"\"\"", "\n", "\n", "num_imgs", "=", "len", "(", "results", ")", "\n", "assert", "len", "(", "gt_seg_maps", ")", "==", "num_imgs", "\n", "total_area_intersect", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "total_area_union", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "total_area_pred_label", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "total_area_label", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "area_intersect", ",", "area_union", ",", "area_pred_label", ",", "area_label", "=", "intersect_and_union", "(", "results", "[", "i", "]", ",", "gt_seg_maps", "[", "i", "]", ",", "num_classes", ",", "\n", "ignore_index", ",", "label_map", ",", "reduce_zero_label", ")", "\n", "total_area_intersect", "+=", "area_intersect", "\n", "total_area_union", "+=", "area_union", "\n", "total_area_pred_label", "+=", "area_pred_label", "\n", "total_area_label", "+=", "area_label", "\n", "", "return", "total_area_intersect", ",", "total_area_union", ",", "total_area_pred_label", ",", "total_area_label", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.mean_iou": [[105, 140], ["dict", "metrics.eval_metrics"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.eval_metrics"], ["", "def", "mean_iou", "(", "results", ",", "\n", "gt_seg_maps", ",", "\n", "num_classes", ",", "\n", "ignore_index", ",", "\n", "nan_to_num", "=", "None", ",", "\n", "label_map", "=", "dict", "(", ")", ",", "\n", "reduce_zero_label", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate Mean Intersection and Union (mIoU)\n\n    Args:\n        results (list[ndarray]): List of prediction segmentation maps.\n        gt_seg_maps (list[ndarray]): list of ground truth segmentation maps.\n        num_classes (int): Number of categories.\n        ignore_index (int): Index that will be ignored in evaluation.\n        nan_to_num (int, optional): If specified, NaN values will be replaced\n            by the numbers defined by the user. Default: None.\n        label_map (dict): Mapping old labels to new labels. Default: dict().\n        reduce_zero_label (bool): Wether ignore zero label. Default: False.\n\n     Returns:\n         float: Overall accuracy on all images.\n         ndarray: Per category accuracy, shape (num_classes, ).\n         ndarray: Per category IoU, shape (num_classes, ).\n    \"\"\"", "\n", "\n", "all_acc", ",", "acc", ",", "iou", "=", "eval_metrics", "(", "\n", "results", "=", "results", ",", "\n", "gt_seg_maps", "=", "gt_seg_maps", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "ignore_index", "=", "ignore_index", ",", "\n", "metrics", "=", "[", "'mIoU'", "]", ",", "\n", "nan_to_num", "=", "nan_to_num", ",", "\n", "label_map", "=", "label_map", ",", "\n", "reduce_zero_label", "=", "reduce_zero_label", ")", "\n", "return", "all_acc", ",", "acc", ",", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.mean_dice": [[142, 177], ["dict", "metrics.eval_metrics"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.eval_metrics"], ["", "def", "mean_dice", "(", "results", ",", "\n", "gt_seg_maps", ",", "\n", "num_classes", ",", "\n", "ignore_index", ",", "\n", "nan_to_num", "=", "None", ",", "\n", "label_map", "=", "dict", "(", ")", ",", "\n", "reduce_zero_label", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate Mean Dice (mDice)\n\n    Args:\n        results (list[ndarray]): List of prediction segmentation maps.\n        gt_seg_maps (list[ndarray]): list of ground truth segmentation maps.\n        num_classes (int): Number of categories.\n        ignore_index (int): Index that will be ignored in evaluation.\n        nan_to_num (int, optional): If specified, NaN values will be replaced\n            by the numbers defined by the user. Default: None.\n        label_map (dict): Mapping old labels to new labels. Default: dict().\n        reduce_zero_label (bool): Wether ignore zero label. Default: False.\n\n     Returns:\n         float: Overall accuracy on all images.\n         ndarray: Per category accuracy, shape (num_classes, ).\n         ndarray: Per category dice, shape (num_classes, ).\n    \"\"\"", "\n", "\n", "all_acc", ",", "acc", ",", "dice", "=", "eval_metrics", "(", "\n", "results", "=", "results", ",", "\n", "gt_seg_maps", "=", "gt_seg_maps", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "ignore_index", "=", "ignore_index", ",", "\n", "metrics", "=", "[", "'mDice'", "]", ",", "\n", "nan_to_num", "=", "nan_to_num", ",", "\n", "label_map", "=", "label_map", ",", "\n", "reduce_zero_label", "=", "reduce_zero_label", ")", "\n", "return", "all_acc", ",", "acc", ",", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.eval_metrics": [[179, 230], ["dict", "isinstance", "metrics.total_intersect_and_union", "set().issubset", "KeyError", "total_area_intersect.sum", "total_area_label.sum", "set", "ret_metrics.append", "numpy.nan_to_num", "set", "ret_metrics.append"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.total_intersect_and_union"], ["", "def", "eval_metrics", "(", "results", ",", "\n", "gt_seg_maps", ",", "\n", "num_classes", ",", "\n", "ignore_index", ",", "\n", "metrics", "=", "[", "'mIoU'", "]", ",", "\n", "nan_to_num", "=", "None", ",", "\n", "label_map", "=", "dict", "(", ")", ",", "\n", "reduce_zero_label", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate evaluation metrics\n    Args:\n        results (list[ndarray]): List of prediction segmentation maps.\n        gt_seg_maps (list[ndarray]): list of ground truth segmentation maps.\n        num_classes (int): Number of categories.\n        ignore_index (int): Index that will be ignored in evaluation.\n        metrics (list[str] | str): Metrics to be evaluated, 'mIoU' and 'mDice'.\n        nan_to_num (int, optional): If specified, NaN values will be replaced\n            by the numbers defined by the user. Default: None.\n        label_map (dict): Mapping old labels to new labels. Default: dict().\n        reduce_zero_label (bool): Wether ignore zero label. Default: False.\n     Returns:\n         float: Overall accuracy on all images.\n         ndarray: Per category accuracy, shape (num_classes, ).\n         ndarray: Per category evalution metrics, shape (num_classes, ).\n    \"\"\"", "\n", "\n", "if", "isinstance", "(", "metrics", ",", "str", ")", ":", "\n", "        ", "metrics", "=", "[", "metrics", "]", "\n", "", "allowed_metrics", "=", "[", "'mIoU'", ",", "'mDice'", "]", "\n", "if", "not", "set", "(", "metrics", ")", ".", "issubset", "(", "set", "(", "allowed_metrics", ")", ")", ":", "\n", "        ", "raise", "KeyError", "(", "'metrics {} is not supported'", ".", "format", "(", "metrics", ")", ")", "\n", "", "total_area_intersect", ",", "total_area_union", ",", "total_area_pred_label", ",", "total_area_label", "=", "total_intersect_and_union", "(", "results", ",", "gt_seg_maps", ",", "\n", "num_classes", ",", "ignore_index", ",", "\n", "label_map", ",", "\n", "reduce_zero_label", ")", "\n", "all_acc", "=", "total_area_intersect", ".", "sum", "(", ")", "/", "total_area_label", ".", "sum", "(", ")", "\n", "acc", "=", "total_area_intersect", "/", "total_area_label", "\n", "ret_metrics", "=", "[", "all_acc", ",", "acc", "]", "\n", "for", "metric", "in", "metrics", ":", "\n", "        ", "if", "metric", "==", "'mIoU'", ":", "\n", "            ", "iou", "=", "total_area_intersect", "/", "total_area_union", "\n", "ret_metrics", ".", "append", "(", "iou", ")", "\n", "", "elif", "metric", "==", "'mDice'", ":", "\n", "            ", "dice", "=", "2", "*", "total_area_intersect", "/", "(", "\n", "total_area_pred_label", "+", "total_area_label", ")", "\n", "ret_metrics", ".", "append", "(", "dice", ")", "\n", "", "", "if", "nan_to_num", "is", "not", "None", ":", "\n", "        ", "ret_metrics", "=", "[", "\n", "np", ".", "nan_to_num", "(", "metric", ",", "nan", "=", "nan_to_num", ")", "for", "metric", "in", "ret_metrics", "\n", "]", "\n", "", "return", "ret_metrics", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.cityscapes_classes": [[4, 11], ["None"], "function", ["None"], ["def", "cityscapes_classes", "(", ")", ":", "\n", "    ", "\"\"\"Cityscapes class names for external use.\"\"\"", "\n", "return", "[", "\n", "'road'", ",", "'sidewalk'", ",", "'building'", ",", "'wall'", ",", "'fence'", ",", "'pole'", ",", "\n", "'traffic light'", ",", "'traffic sign'", ",", "'vegetation'", ",", "'terrain'", ",", "'sky'", ",", "\n", "'person'", ",", "'rider'", ",", "'car'", ",", "'truck'", ",", "'bus'", ",", "'train'", ",", "'motorcycle'", ",", "\n", "'bicycle'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.ade_classes": [[14, 41], ["None"], "function", ["None"], ["", "def", "ade_classes", "(", ")", ":", "\n", "    ", "\"\"\"ADE20K class names for external use.\"\"\"", "\n", "return", "[", "\n", "'wall'", ",", "'building'", ",", "'sky'", ",", "'floor'", ",", "'tree'", ",", "'ceiling'", ",", "'road'", ",", "'bed '", ",", "\n", "'windowpane'", ",", "'grass'", ",", "'cabinet'", ",", "'sidewalk'", ",", "'person'", ",", "'earth'", ",", "\n", "'door'", ",", "'table'", ",", "'mountain'", ",", "'plant'", ",", "'curtain'", ",", "'chair'", ",", "'car'", ",", "\n", "'water'", ",", "'painting'", ",", "'sofa'", ",", "'shelf'", ",", "'house'", ",", "'sea'", ",", "'mirror'", ",", "'rug'", ",", "\n", "'field'", ",", "'armchair'", ",", "'seat'", ",", "'fence'", ",", "'desk'", ",", "'rock'", ",", "'wardrobe'", ",", "\n", "'lamp'", ",", "'bathtub'", ",", "'railing'", ",", "'cushion'", ",", "'base'", ",", "'box'", ",", "'column'", ",", "\n", "'signboard'", ",", "'chest of drawers'", ",", "'counter'", ",", "'sand'", ",", "'sink'", ",", "\n", "'skyscraper'", ",", "'fireplace'", ",", "'refrigerator'", ",", "'grandstand'", ",", "'path'", ",", "\n", "'stairs'", ",", "'runway'", ",", "'case'", ",", "'pool table'", ",", "'pillow'", ",", "'screen door'", ",", "\n", "'stairway'", ",", "'river'", ",", "'bridge'", ",", "'bookcase'", ",", "'blind'", ",", "'coffee table'", ",", "\n", "'toilet'", ",", "'flower'", ",", "'book'", ",", "'hill'", ",", "'bench'", ",", "'countertop'", ",", "'stove'", ",", "\n", "'palm'", ",", "'kitchen island'", ",", "'computer'", ",", "'swivel chair'", ",", "'boat'", ",", "'bar'", ",", "\n", "'arcade machine'", ",", "'hovel'", ",", "'bus'", ",", "'towel'", ",", "'light'", ",", "'truck'", ",", "'tower'", ",", "\n", "'chandelier'", ",", "'awning'", ",", "'streetlight'", ",", "'booth'", ",", "'television receiver'", ",", "\n", "'airplane'", ",", "'dirt track'", ",", "'apparel'", ",", "'pole'", ",", "'land'", ",", "'bannister'", ",", "\n", "'escalator'", ",", "'ottoman'", ",", "'bottle'", ",", "'buffet'", ",", "'poster'", ",", "'stage'", ",", "'van'", ",", "\n", "'ship'", ",", "'fountain'", ",", "'conveyer belt'", ",", "'canopy'", ",", "'washer'", ",", "'plaything'", ",", "\n", "'swimming pool'", ",", "'stool'", ",", "'barrel'", ",", "'basket'", ",", "'waterfall'", ",", "'tent'", ",", "\n", "'bag'", ",", "'minibike'", ",", "'cradle'", ",", "'oven'", ",", "'ball'", ",", "'food'", ",", "'step'", ",", "'tank'", ",", "\n", "'trade name'", ",", "'microwave'", ",", "'pot'", ",", "'animal'", ",", "'bicycle'", ",", "'lake'", ",", "\n", "'dishwasher'", ",", "'screen'", ",", "'blanket'", ",", "'sculpture'", ",", "'hood'", ",", "'sconce'", ",", "\n", "'vase'", ",", "'traffic light'", ",", "'tray'", ",", "'ashcan'", ",", "'fan'", ",", "'pier'", ",", "'crt screen'", ",", "\n", "'plate'", ",", "'monitor'", ",", "'bulletin board'", ",", "'shower'", ",", "'radiator'", ",", "'glass'", ",", "\n", "'clock'", ",", "'flag'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.voc_classes": [[44, 51], ["None"], "function", ["None"], ["", "def", "voc_classes", "(", ")", ":", "\n", "    ", "\"\"\"Pascal VOC class names for external use.\"\"\"", "\n", "return", "[", "\n", "'background'", ",", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "\n", "'car'", ",", "'cat'", ",", "'chair'", ",", "'cow'", ",", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "\n", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "\n", "'tvmonitor'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.cityscapes_palette": [[54, 61], ["None"], "function", ["None"], ["", "def", "cityscapes_palette", "(", ")", ":", "\n", "    ", "\"\"\"Cityscapes palette for external use.\"\"\"", "\n", "return", "[", "[", "128", ",", "64", ",", "128", "]", ",", "[", "244", ",", "35", ",", "232", "]", ",", "[", "70", ",", "70", ",", "70", "]", ",", "[", "102", ",", "102", ",", "156", "]", ",", "\n", "[", "190", ",", "153", ",", "153", "]", ",", "[", "153", ",", "153", ",", "153", "]", ",", "[", "250", ",", "170", ",", "30", "]", ",", "[", "220", ",", "220", ",", "0", "]", ",", "\n", "[", "107", ",", "142", ",", "35", "]", ",", "[", "152", ",", "251", ",", "152", "]", ",", "[", "70", ",", "130", ",", "180", "]", ",", "[", "220", ",", "20", ",", "60", "]", ",", "\n", "[", "255", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "142", "]", ",", "[", "0", ",", "0", ",", "70", "]", ",", "[", "0", ",", "60", ",", "100", "]", ",", "[", "0", ",", "80", ",", "100", "]", ",", "\n", "[", "0", ",", "0", ",", "230", "]", ",", "[", "119", ",", "11", ",", "32", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.ade_palette": [[63, 103], ["None"], "function", ["None"], ["", "def", "ade_palette", "(", ")", ":", "\n", "    ", "\"\"\"ADE20K palette for external use.\"\"\"", "\n", "return", "[", "[", "120", ",", "120", ",", "120", "]", ",", "[", "180", ",", "120", ",", "120", "]", ",", "[", "6", ",", "230", ",", "230", "]", ",", "[", "80", ",", "50", ",", "50", "]", ",", "\n", "[", "4", ",", "200", ",", "3", "]", ",", "[", "120", ",", "120", ",", "80", "]", ",", "[", "140", ",", "140", ",", "140", "]", ",", "[", "204", ",", "5", ",", "255", "]", ",", "\n", "[", "230", ",", "230", ",", "230", "]", ",", "[", "4", ",", "250", ",", "7", "]", ",", "[", "224", ",", "5", ",", "255", "]", ",", "[", "235", ",", "255", ",", "7", "]", ",", "\n", "[", "150", ",", "5", ",", "61", "]", ",", "[", "120", ",", "120", ",", "70", "]", ",", "[", "8", ",", "255", ",", "51", "]", ",", "[", "255", ",", "6", ",", "82", "]", ",", "\n", "[", "143", ",", "255", ",", "140", "]", ",", "[", "204", ",", "255", ",", "4", "]", ",", "[", "255", ",", "51", ",", "7", "]", ",", "[", "204", ",", "70", ",", "3", "]", ",", "\n", "[", "0", ",", "102", ",", "200", "]", ",", "[", "61", ",", "230", ",", "250", "]", ",", "[", "255", ",", "6", ",", "51", "]", ",", "[", "11", ",", "102", ",", "255", "]", ",", "\n", "[", "255", ",", "7", ",", "71", "]", ",", "[", "255", ",", "9", ",", "224", "]", ",", "[", "9", ",", "7", ",", "230", "]", ",", "[", "220", ",", "220", ",", "220", "]", ",", "\n", "[", "255", ",", "9", ",", "92", "]", ",", "[", "112", ",", "9", ",", "255", "]", ",", "[", "8", ",", "255", ",", "214", "]", ",", "[", "7", ",", "255", ",", "224", "]", ",", "\n", "[", "255", ",", "184", ",", "6", "]", ",", "[", "10", ",", "255", ",", "71", "]", ",", "[", "255", ",", "41", ",", "10", "]", ",", "[", "7", ",", "255", ",", "255", "]", ",", "\n", "[", "224", ",", "255", ",", "8", "]", ",", "[", "102", ",", "8", ",", "255", "]", ",", "[", "255", ",", "61", ",", "6", "]", ",", "[", "255", ",", "194", ",", "7", "]", ",", "\n", "[", "255", ",", "122", ",", "8", "]", ",", "[", "0", ",", "255", ",", "20", "]", ",", "[", "255", ",", "8", ",", "41", "]", ",", "[", "255", ",", "5", ",", "153", "]", ",", "\n", "[", "6", ",", "51", ",", "255", "]", ",", "[", "235", ",", "12", ",", "255", "]", ",", "[", "160", ",", "150", ",", "20", "]", ",", "[", "0", ",", "163", ",", "255", "]", ",", "\n", "[", "140", ",", "140", ",", "140", "]", ",", "[", "250", ",", "10", ",", "15", "]", ",", "[", "20", ",", "255", ",", "0", "]", ",", "[", "31", ",", "255", ",", "0", "]", ",", "\n", "[", "255", ",", "31", ",", "0", "]", ",", "[", "255", ",", "224", ",", "0", "]", ",", "[", "153", ",", "255", ",", "0", "]", ",", "[", "0", ",", "0", ",", "255", "]", ",", "\n", "[", "255", ",", "71", ",", "0", "]", ",", "[", "0", ",", "235", ",", "255", "]", ",", "[", "0", ",", "173", ",", "255", "]", ",", "[", "31", ",", "0", ",", "255", "]", ",", "\n", "[", "11", ",", "200", ",", "200", "]", ",", "[", "255", ",", "82", ",", "0", "]", ",", "[", "0", ",", "255", ",", "245", "]", ",", "[", "0", ",", "61", ",", "255", "]", ",", "\n", "[", "0", ",", "255", ",", "112", "]", ",", "[", "0", ",", "255", ",", "133", "]", ",", "[", "255", ",", "0", ",", "0", "]", ",", "[", "255", ",", "163", ",", "0", "]", ",", "\n", "[", "255", ",", "102", ",", "0", "]", ",", "[", "194", ",", "255", ",", "0", "]", ",", "[", "0", ",", "143", ",", "255", "]", ",", "[", "51", ",", "255", ",", "0", "]", ",", "\n", "[", "0", ",", "82", ",", "255", "]", ",", "[", "0", ",", "255", ",", "41", "]", ",", "[", "0", ",", "255", ",", "173", "]", ",", "[", "10", ",", "0", ",", "255", "]", ",", "\n", "[", "173", ",", "255", ",", "0", "]", ",", "[", "0", ",", "255", ",", "153", "]", ",", "[", "255", ",", "92", ",", "0", "]", ",", "[", "255", ",", "0", ",", "255", "]", ",", "\n", "[", "255", ",", "0", ",", "245", "]", ",", "[", "255", ",", "0", ",", "102", "]", ",", "[", "255", ",", "173", ",", "0", "]", ",", "[", "255", ",", "0", ",", "20", "]", ",", "\n", "[", "255", ",", "184", ",", "184", "]", ",", "[", "0", ",", "31", ",", "255", "]", ",", "[", "0", ",", "255", ",", "61", "]", ",", "[", "0", ",", "71", ",", "255", "]", ",", "\n", "[", "255", ",", "0", ",", "204", "]", ",", "[", "0", ",", "255", ",", "194", "]", ",", "[", "0", ",", "255", ",", "82", "]", ",", "[", "0", ",", "10", ",", "255", "]", ",", "\n", "[", "0", ",", "112", ",", "255", "]", ",", "[", "51", ",", "0", ",", "255", "]", ",", "[", "0", ",", "194", ",", "255", "]", ",", "[", "0", ",", "122", ",", "255", "]", ",", "\n", "[", "0", ",", "255", ",", "163", "]", ",", "[", "255", ",", "153", ",", "0", "]", ",", "[", "0", ",", "255", ",", "10", "]", ",", "[", "255", ",", "112", ",", "0", "]", ",", "\n", "[", "143", ",", "255", ",", "0", "]", ",", "[", "82", ",", "0", ",", "255", "]", ",", "[", "163", ",", "255", ",", "0", "]", ",", "[", "255", ",", "235", ",", "0", "]", ",", "\n", "[", "8", ",", "184", ",", "170", "]", ",", "[", "133", ",", "0", ",", "255", "]", ",", "[", "0", ",", "255", ",", "92", "]", ",", "[", "184", ",", "0", ",", "255", "]", ",", "\n", "[", "255", ",", "0", ",", "31", "]", ",", "[", "0", ",", "184", ",", "255", "]", ",", "[", "0", ",", "214", ",", "255", "]", ",", "[", "255", ",", "0", ",", "112", "]", ",", "\n", "[", "92", ",", "255", ",", "0", "]", ",", "[", "0", ",", "224", ",", "255", "]", ",", "[", "112", ",", "224", ",", "255", "]", ",", "[", "70", ",", "184", ",", "160", "]", ",", "\n", "[", "163", ",", "0", ",", "255", "]", ",", "[", "153", ",", "0", ",", "255", "]", ",", "[", "71", ",", "255", ",", "0", "]", ",", "[", "255", ",", "0", ",", "163", "]", ",", "\n", "[", "255", ",", "204", ",", "0", "]", ",", "[", "255", ",", "0", ",", "143", "]", ",", "[", "0", ",", "255", ",", "235", "]", ",", "[", "133", ",", "255", ",", "0", "]", ",", "\n", "[", "255", ",", "0", ",", "235", "]", ",", "[", "245", ",", "0", ",", "255", "]", ",", "[", "255", ",", "0", ",", "122", "]", ",", "[", "255", ",", "245", ",", "0", "]", ",", "\n", "[", "10", ",", "190", ",", "212", "]", ",", "[", "214", ",", "255", ",", "0", "]", ",", "[", "0", ",", "204", ",", "255", "]", ",", "[", "20", ",", "0", ",", "255", "]", ",", "\n", "[", "255", ",", "255", ",", "0", "]", ",", "[", "0", ",", "153", ",", "255", "]", ",", "[", "0", ",", "41", ",", "255", "]", ",", "[", "0", ",", "255", ",", "204", "]", ",", "\n", "[", "41", ",", "0", ",", "255", "]", ",", "[", "41", ",", "255", ",", "0", "]", ",", "[", "173", ",", "0", ",", "255", "]", ",", "[", "0", ",", "245", ",", "255", "]", ",", "\n", "[", "71", ",", "0", ",", "255", "]", ",", "[", "122", ",", "0", ",", "255", "]", ",", "[", "0", ",", "255", ",", "184", "]", ",", "[", "0", ",", "92", ",", "255", "]", ",", "\n", "[", "184", ",", "255", ",", "0", "]", ",", "[", "0", ",", "133", ",", "255", "]", ",", "[", "255", ",", "214", ",", "0", "]", ",", "[", "25", ",", "194", ",", "194", "]", ",", "\n", "[", "102", ",", "255", ",", "0", "]", ",", "[", "92", ",", "0", ",", "255", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.voc_palette": [[105, 112], ["None"], "function", ["None"], ["", "def", "voc_palette", "(", ")", ":", "\n", "    ", "\"\"\"Pascal VOC palette for external use.\"\"\"", "\n", "return", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "128", ",", "0", ",", "0", "]", ",", "[", "0", ",", "128", ",", "0", "]", ",", "[", "128", ",", "128", ",", "0", "]", ",", "[", "0", ",", "0", ",", "128", "]", ",", "\n", "[", "128", ",", "0", ",", "128", "]", ",", "[", "0", ",", "128", ",", "128", "]", ",", "[", "128", ",", "128", ",", "128", "]", ",", "[", "64", ",", "0", ",", "0", "]", ",", "\n", "[", "192", ",", "0", ",", "0", "]", ",", "[", "64", ",", "128", ",", "0", "]", ",", "[", "192", ",", "128", ",", "0", "]", ",", "[", "64", ",", "0", ",", "128", "]", ",", "\n", "[", "192", ",", "0", ",", "128", "]", ",", "[", "64", ",", "128", ",", "128", "]", ",", "[", "192", ",", "128", ",", "128", "]", ",", "[", "0", ",", "64", ",", "0", "]", ",", "\n", "[", "128", ",", "64", ",", "0", "]", ",", "[", "0", ",", "192", ",", "0", "]", ",", "[", "128", ",", "192", ",", "0", "]", ",", "[", "0", ",", "64", ",", "128", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.get_classes": [[121, 136], ["dataset_aliases.items", "mmcv.is_str", "TypeError", "eval", "ValueError", "type"], "function", ["None"], ["def", "get_classes", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Get class names of a dataset.\"\"\"", "\n", "alias2name", "=", "{", "}", "\n", "for", "name", ",", "aliases", "in", "dataset_aliases", ".", "items", "(", ")", ":", "\n", "        ", "for", "alias", "in", "aliases", ":", "\n", "            ", "alias2name", "[", "alias", "]", "=", "name", "\n", "\n", "", "", "if", "mmcv", ".", "is_str", "(", "dataset", ")", ":", "\n", "        ", "if", "dataset", "in", "alias2name", ":", "\n", "            ", "labels", "=", "eval", "(", "alias2name", "[", "dataset", "]", "+", "'_classes()'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unrecognized dataset: {dataset}'", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "f'dataset must a str, but got {type(dataset)}'", ")", "\n", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.get_palette": [[138, 153], ["dataset_aliases.items", "mmcv.is_str", "TypeError", "eval", "ValueError", "type"], "function", ["None"], ["", "def", "get_palette", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Get class palette (RGB) of a dataset.\"\"\"", "\n", "alias2name", "=", "{", "}", "\n", "for", "name", ",", "aliases", "in", "dataset_aliases", ".", "items", "(", ")", ":", "\n", "        ", "for", "alias", "in", "aliases", ":", "\n", "            ", "alias2name", "[", "alias", "]", "=", "name", "\n", "\n", "", "", "if", "mmcv", ".", "is_str", "(", "dataset", ")", ":", "\n", "        ", "if", "dataset", "in", "alias2name", ":", "\n", "            ", "labels", "=", "eval", "(", "alias2name", "[", "dataset", "]", "+", "'_palette()'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unrecognized dataset: {dataset}'", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "f'dataset must a str, but got {type(dataset)}'", ")", "\n", "", "return", "labels", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.__init__": [[15, 23], ["isinstance", "TypeError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataloader", ",", "interval", "=", "1", ",", "by_epoch", "=", "False", ",", "**", "eval_kwargs", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "dataloader", ",", "DataLoader", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'dataloader must be a pytorch DataLoader, but got '", "\n", "f'{type(dataloader)}'", ")", "\n", "", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "by_epoch", "=", "by_epoch", "\n", "self", ".", "eval_kwargs", "=", "eval_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.after_train_iter": [[24, 32], ["runner.log_buffer.clear", "single_gpu_test", "eval_hooks.EvalHook.evaluate", "eval_hooks.EvalHook.every_n_iters"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.test.single_gpu_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.evaluate"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"After train epoch hook.\"\"\"", "\n", "if", "self", ".", "by_epoch", "or", "not", "self", ".", "every_n_iters", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "from", "mmseg", ".", "apis", "import", "single_gpu_test", "\n", "runner", ".", "log_buffer", ".", "clear", "(", ")", "\n", "results", "=", "single_gpu_test", "(", "runner", ".", "model", ",", "self", ".", "dataloader", ",", "show", "=", "False", ")", "\n", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.after_train_epoch": [[33, 41], ["runner.log_buffer.clear", "single_gpu_test", "eval_hooks.EvalHook.evaluate", "eval_hooks.EvalHook.every_n_epochs"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.test.single_gpu_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.evaluate"], ["", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"After train epoch hook.\"\"\"", "\n", "if", "not", "self", ".", "by_epoch", "or", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "from", "mmseg", ".", "apis", "import", "single_gpu_test", "\n", "runner", ".", "log_buffer", ".", "clear", "(", ")", "\n", "results", "=", "single_gpu_test", "(", "runner", ".", "model", ",", "self", ".", "dataloader", ",", "show", "=", "False", ")", "\n", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.evaluate": [[42, 49], ["eval_hooks.EvalHook.dataloader.dataset.evaluate", "eval_hooks.EvalHook.items"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.evaluate"], ["", "def", "evaluate", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call evaluate function of dataset.\"\"\"", "\n", "eval_res", "=", "self", ".", "dataloader", ".", "dataset", ".", "evaluate", "(", "\n", "results", ",", "logger", "=", "runner", ".", "logger", ",", "**", "self", ".", "eval_kwargs", ")", "\n", "for", "name", ",", "val", "in", "eval_res", ".", "items", "(", ")", ":", "\n", "            ", "runner", ".", "log_buffer", ".", "output", "[", "name", "]", "=", "val", "\n", "", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.DistEvalHook.__init__": [[63, 78], ["isinstance", "TypeError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "dataloader", ",", "\n", "interval", "=", "1", ",", "\n", "gpu_collect", "=", "False", ",", "\n", "by_epoch", "=", "False", ",", "\n", "**", "eval_kwargs", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "dataloader", ",", "DataLoader", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'dataloader must be a pytorch DataLoader, but got {}'", ".", "format", "(", "\n", "type", "(", "dataloader", ")", ")", ")", "\n", "", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "gpu_collect", "=", "gpu_collect", "\n", "self", ".", "by_epoch", "=", "by_epoch", "\n", "self", ".", "eval_kwargs", "=", "eval_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.DistEvalHook.after_train_iter": [[79, 93], ["runner.log_buffer.clear", "multi_gpu_test", "print", "eval_hooks.DistEvalHook.evaluate", "eval_hooks.DistEvalHook.every_n_iters", "os.join"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_eval_hook.multi_gpu_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.evaluate"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"After train epoch hook.\"\"\"", "\n", "if", "self", ".", "by_epoch", "or", "not", "self", ".", "every_n_iters", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "from", "mmseg", ".", "apis", "import", "multi_gpu_test", "\n", "runner", ".", "log_buffer", ".", "clear", "(", ")", "\n", "results", "=", "multi_gpu_test", "(", "\n", "runner", ".", "model", ",", "\n", "self", ".", "dataloader", ",", "\n", "tmpdir", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'.eval_hook'", ")", ",", "\n", "gpu_collect", "=", "self", ".", "gpu_collect", ")", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'\\n'", ")", "\n", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.DistEvalHook.after_train_epoch": [[94, 108], ["runner.log_buffer.clear", "multi_gpu_test", "print", "eval_hooks.DistEvalHook.evaluate", "eval_hooks.DistEvalHook.every_n_epochs", "os.join"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_eval_hook.multi_gpu_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.evaluate"], ["", "", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"After train epoch hook.\"\"\"", "\n", "if", "not", "self", ".", "by_epoch", "or", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "from", "mmseg", ".", "apis", "import", "multi_gpu_test", "\n", "runner", ".", "log_buffer", ".", "clear", "(", ")", "\n", "results", "=", "multi_gpu_test", "(", "\n", "runner", ".", "model", ",", "\n", "self", ".", "dataloader", ",", "\n", "tmpdir", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'.eval_hook'", ")", ",", "\n", "gpu_collect", "=", "self", ".", "gpu_collect", ")", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'\\n'", ")", "\n", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.demo.image_demo.main": [[7, 26], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "mmseg.apis.init_segmentor", "mmseg.apis.inference_segmentor", "mmseg.apis.show_result_pyplot", "mmseg.core.evaluation.get_palette"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.inference.init_segmentor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.inference.inference_segmentor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.inference.show_result_pyplot", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.get_palette"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'img'", ",", "help", "=", "'Image file'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'Config file'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'Checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--device'", ",", "default", "=", "'cuda:0'", ",", "help", "=", "'Device used for inference'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--palette'", ",", "\n", "default", "=", "'cityscapes'", ",", "\n", "help", "=", "'Color palette used for segmentation map'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# build the model from a config file and a checkpoint file", "\n", "model", "=", "init_segmentor", "(", "args", ".", "config", ",", "args", ".", "checkpoint", ",", "device", "=", "args", ".", "device", ")", "\n", "# test a single image", "\n", "result", "=", "inference_segmentor", "(", "model", ",", "args", ".", "img", ")", "\n", "# show the results", "\n", "show_result_pyplot", "(", "model", ",", "args", ".", "img", ",", "result", ",", "get_palette", "(", "args", ".", "palette", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.pytorch2onnx._convert_batchnorm": [[19, 38], ["isinstance", "module.named_children", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d.add_module", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "pytorch2onnx._convert_batchnorm", "module.weight.data.clone", "module.bias.data.clone"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._convert_batchnorm"], ["def", "_convert_batchnorm", "(", "module", ")", ":", "\n", "    ", "module_output", "=", "module", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "SyncBatchNorm", ")", ":", "\n", "        ", "module_output", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "module", ".", "num_features", ",", "module", ".", "eps", ",", "\n", "module", ".", "momentum", ",", "module", ".", "affine", ",", "\n", "module", ".", "track_running_stats", ")", "\n", "if", "module", ".", "affine", ":", "\n", "            ", "module_output", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "module_output", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "# keep requires_grad unchanged", "\n", "module_output", ".", "weight", ".", "requires_grad", "=", "module", ".", "weight", ".", "requires_grad", "\n", "module_output", ".", "bias", ".", "requires_grad", "=", "module", ".", "bias", ".", "requires_grad", "\n", "", "module_output", ".", "running_mean", "=", "module", ".", "running_mean", "\n", "module_output", ".", "running_var", "=", "module", ".", "running_var", "\n", "module_output", ".", "num_batches_tracked", "=", "module", ".", "num_batches_tracked", "\n", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "module_output", ".", "add_module", "(", "name", ",", "_convert_batchnorm", "(", "child", ")", ")", "\n", "", "del", "module", "\n", "return", "module_output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.pytorch2onnx._demo_mm_inputs": [[40, 68], ["numpy.random.RandomState", "np.random.RandomState.rand", "np.random.RandomState.randint().astype", "torch.FloatTensor().requires_grad_", "torch.FloatTensor().requires_grad_", "torch.FloatTensor().requires_grad_", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "np.random.RandomState.randint", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "_demo_mm_inputs", "(", "input_shape", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"Create a superset of inputs needed to run test or train batches.\n\n    Args:\n        input_shape (tuple):\n            input batch dimensions\n        num_classes (int):\n            number of semantic classes\n    \"\"\"", "\n", "(", "N", ",", "C", ",", "H", ",", "W", ")", "=", "input_shape", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "0", ")", "\n", "imgs", "=", "rng", ".", "rand", "(", "*", "input_shape", ")", "\n", "segs", "=", "rng", ".", "randint", "(", "\n", "low", "=", "0", ",", "high", "=", "num_classes", "-", "1", ",", "size", "=", "(", "N", ",", "1", ",", "H", ",", "W", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'ori_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'pad_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'filename'", ":", "'<demo>.png'", ",", "\n", "'scale_factor'", ":", "1.0", ",", "\n", "'flip'", ":", "False", ",", "\n", "}", "for", "_", "in", "range", "(", "N", ")", "]", "\n", "mm_inputs", "=", "{", "\n", "'imgs'", ":", "torch", ".", "FloatTensor", "(", "imgs", ")", ".", "requires_grad_", "(", "True", ")", ",", "\n", "'img_metas'", ":", "img_metas", ",", "\n", "'gt_semantic_seg'", ":", "torch", ".", "LongTensor", "(", "segs", ")", "\n", "}", "\n", "return", "mm_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.pytorch2onnx.pytorch2onnx": [[70, 146], ["model.cpu().eval", "isinstance", "pytorch2onnx._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "functools.partial", "mmcv.onnx.register_extra_symbolics", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.onnx.export", "torch.onnx.export", "torch.onnx.export", "print", "onnx.load", "onnx.checker.check_model", "list", "onnxruntime.InferenceSession", "print", "model.cpu", "model", "len", "rt.InferenceSession.run", "numpy.allclose", "ValueError", "set", "set", "img_list[].detach().numpy", "img_list[].detach"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._demo_mm_inputs"], ["", "def", "pytorch2onnx", "(", "model", ",", "\n", "input_shape", ",", "\n", "opset_version", "=", "11", ",", "\n", "show", "=", "False", ",", "\n", "output_file", "=", "'tmp.onnx'", ",", "\n", "verify", "=", "False", ")", ":", "\n", "    ", "\"\"\"Export Pytorch model to ONNX model and verify the outputs are same\n    between Pytorch and ONNX.\n\n    Args:\n        model (nn.Module): Pytorch model we want to export.\n        input_shape (tuple): Use this input shape to construct\n            the corresponding dummy input and execute the model.\n        opset_version (int): The onnx op version. Default: 11.\n        show (bool): Whether print the computation graph. Default: False.\n        output_file (string): The path to where we store the output ONNX model.\n            Default: `tmp.onnx`.\n        verify (bool): Whether compare the outputs between Pytorch and ONNX.\n            Default: False.\n    \"\"\"", "\n", "model", ".", "cpu", "(", ")", ".", "eval", "(", ")", "\n", "\n", "if", "isinstance", "(", "model", ".", "decode_head", ",", "nn", ".", "ModuleList", ")", ":", "\n", "        ", "num_classes", "=", "model", ".", "decode_head", "[", "-", "1", "]", ".", "num_classes", "\n", "", "else", ":", "\n", "        ", "num_classes", "=", "model", ".", "decode_head", ".", "num_classes", "\n", "\n", "", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ",", "num_classes", ")", "\n", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "\n", "img_list", "=", "[", "img", "[", "None", ",", ":", "]", "for", "img", "in", "imgs", "]", "\n", "img_meta_list", "=", "[", "[", "img_meta", "]", "for", "img_meta", "in", "img_metas", "]", "\n", "\n", "# replace original forward function", "\n", "origin_forward", "=", "model", ".", "forward", "\n", "model", ".", "forward", "=", "partial", "(", "\n", "model", ".", "forward", ",", "img_metas", "=", "img_meta_list", ",", "return_loss", "=", "False", ")", "\n", "\n", "register_extra_symbolics", "(", "opset_version", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "torch", ".", "onnx", ".", "export", "(", "\n", "model", ",", "(", "img_list", ",", ")", ",", "\n", "output_file", ",", "\n", "export_params", "=", "True", ",", "\n", "keep_initializers_as_inputs", "=", "True", ",", "\n", "verbose", "=", "show", ",", "\n", "opset_version", "=", "opset_version", ")", "\n", "print", "(", "f'Successfully exported ONNX model: {output_file}'", ")", "\n", "", "model", ".", "forward", "=", "origin_forward", "\n", "\n", "if", "verify", ":", "\n", "# check by onnx", "\n", "        ", "import", "onnx", "\n", "onnx_model", "=", "onnx", ".", "load", "(", "output_file", ")", "\n", "onnx", ".", "checker", ".", "check_model", "(", "onnx_model", ")", "\n", "\n", "# check the numerical value", "\n", "# get pytorch output", "\n", "pytorch_result", "=", "model", "(", "img_list", ",", "img_meta_list", ",", "return_loss", "=", "False", ")", "[", "0", "]", "\n", "\n", "# get onnx output", "\n", "input_all", "=", "[", "node", ".", "name", "for", "node", "in", "onnx_model", ".", "graph", ".", "input", "]", "\n", "input_initializer", "=", "[", "\n", "node", ".", "name", "for", "node", "in", "onnx_model", ".", "graph", ".", "initializer", "\n", "]", "\n", "net_feed_input", "=", "list", "(", "set", "(", "input_all", ")", "-", "set", "(", "input_initializer", ")", ")", "\n", "assert", "(", "len", "(", "net_feed_input", ")", "==", "1", ")", "\n", "sess", "=", "rt", ".", "InferenceSession", "(", "output_file", ")", "\n", "onnx_result", "=", "sess", ".", "run", "(", "\n", "None", ",", "{", "net_feed_input", "[", "0", "]", ":", "img_list", "[", "0", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", "}", ")", "[", "0", "]", "\n", "if", "not", "np", ".", "allclose", "(", "pytorch_result", ",", "onnx_result", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'The outputs are different between Pytorch and ONNX'", ")", "\n", "", "print", "(", "'The outputs are same between Pytorch and ONNX'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.pytorch2onnx.parse_args": [[148, 165], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Convert MMSeg to ONNX'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "help", "=", "'checkpoint file'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show onnx graph'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--verify'", ",", "action", "=", "'store_true'", ",", "help", "=", "'verify the onnx model'", ")", "\n", "parser", ".", "add_argument", "(", "'--output-file'", ",", "type", "=", "str", ",", "default", "=", "'tmp.onnx'", ")", "\n", "parser", ".", "add_argument", "(", "'--opset-version'", ",", "type", "=", "int", ",", "default", "=", "11", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--shape'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "256", ",", "256", "]", ",", "\n", "help", "=", "'input image size'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.publish_model.parse_args": [[7, 14], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Process a checkpoint to be published'", ")", "\n", "parser", ".", "add_argument", "(", "'in_file'", ",", "help", "=", "'input checkpoint filename'", ")", "\n", "parser", ".", "add_argument", "(", "'out_file'", ",", "help", "=", "'output checkpoint filename'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.publish_model.process_checkpoint": [[16, 27], ["torch.load", "torch.save", "subprocess.check_output().decode", "subprocess.Popen", "out_file.rstrip", "subprocess.check_output"], "function", ["None"], ["", "def", "process_checkpoint", "(", "in_file", ",", "out_file", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "in_file", ",", "map_location", "=", "'cpu'", ")", "\n", "# remove optimizer for smaller file size", "\n", "if", "'optimizer'", "in", "checkpoint", ":", "\n", "        ", "del", "checkpoint", "[", "'optimizer'", "]", "\n", "# if it is necessary to remove some sensitive data in checkpoint['meta'],", "\n", "# add the code here.", "\n", "", "torch", ".", "save", "(", "checkpoint", ",", "out_file", ")", "\n", "sha", "=", "subprocess", ".", "check_output", "(", "[", "'sha256sum'", ",", "out_file", "]", ")", ".", "decode", "(", ")", "\n", "final_file", "=", "out_file", ".", "rstrip", "(", "'.pth'", ")", "+", "'-{}.pth'", ".", "format", "(", "sha", "[", ":", "8", "]", ")", "\n", "subprocess", ".", "Popen", "(", "[", "'mv'", ",", "out_file", ",", "final_file", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.publish_model.main": [[29, 32], ["publish_model.parse_args", "publish_model.process_checkpoint"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.publish_model.process_checkpoint"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "process_checkpoint", "(", "args", ".", "in_file", ",", "args", ".", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.print_config.parse_args": [[6, 14], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Print the whole config'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--options'", ",", "nargs", "=", "'+'", ",", "action", "=", "DictAction", ",", "help", "=", "'arguments in dict'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.print_config.main": [[16, 25], ["print_config.parse_args", "mmcv.Config.fromfile", "print", "Config.fromfile.dump", "Config.fromfile.merge_from_dict"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "options", ")", "\n", "", "print", "(", "f'Config:\\n{cfg.pretty_text}'", ")", "\n", "# dump config", "\n", "cfg", ".", "dump", "(", "'example.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.get_flops.parse_args": [[9, 20], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a segmentor'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--shape'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "2048", ",", "1024", "]", ",", "\n", "help", "=", "'input image size'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.get_flops.main": [[22, 53], ["get_flops.parse_args", "mmcv.Config.fromfile", "mmseg.models.build_segmentor().cuda", "build_segmentor().cuda.eval", "hasattr", "mmcv.cnn.get_model_complexity_info", "print", "print", "len", "NotImplementedError", "len", "ValueError", "mmseg.models.build_segmentor", "tuple", "Config.fromfile.get", "Config.fromfile.get"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_segmentor"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "if", "len", "(", "args", ".", "shape", ")", "==", "1", ":", "\n", "        ", "input_shape", "=", "(", "3", ",", "args", ".", "shape", "[", "0", "]", ",", "args", ".", "shape", "[", "0", "]", ")", "\n", "", "elif", "len", "(", "args", ".", "shape", ")", "==", "2", ":", "\n", "        ", "input_shape", "=", "(", "3", ",", ")", "+", "tuple", "(", "args", ".", "shape", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid input shape'", ")", "\n", "\n", "", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "model", "=", "build_segmentor", "(", "\n", "cfg", ".", "model", ",", "\n", "train_cfg", "=", "cfg", ".", "get", "(", "'train_cfg'", ")", ",", "\n", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'forward_dummy'", ")", ":", "\n", "        ", "model", ".", "forward", "=", "model", ".", "forward_dummy", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'FLOPs counter is currently not currently supported with {}'", ".", "\n", "format", "(", "model", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "", "flops", ",", "params", "=", "get_model_complexity_info", "(", "model", ",", "input_shape", ")", "\n", "split_line", "=", "'='", "*", "30", "\n", "print", "(", "'{0}\\nInput shape: {1}\\nFlops: {2}\\nParams: {3}\\n{0}'", ".", "format", "(", "\n", "split_line", ",", "input_shape", ",", "flops", ",", "params", ")", ")", "\n", "print", "(", "'!!!Please be cautious if you use the results in papers. '", "\n", "'You may need to check if all ops are supported and verify that the '", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.train.parse_args": [[22, 64], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "if", "deterministic", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "\n", "", "", "def", "train_segmentor", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "distributed", "=", "False", ",", "\n", "validate", "=", "False", ",", "\n", "timestamp", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "    ", "\"\"\"Launch segmentor training.\"\"\"", "\n", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# prepare data loaders", "\n", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "\n", "cfg", ".", "data", ".", "samples_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "# cfg.gpus will be ignored if distributed", "\n", "len", "(", "cfg", ".", "gpu_ids", ")", ",", "\n", "dist", "=", "distributed", ",", "\n", "seed", "=", "cfg", ".", "seed", ",", "\n", "drop_last", "=", "True", ")", "for", "ds", "in", "dataset", "\n", "]", "\n", "\n", "# put model on gpus", "\n", "if", "distributed", ":", "\n", "        ", "find_unused_parameters", "=", "cfg", ".", "get", "(", "'find_unused_parameters'", ",", "False", ")", "\n", "# Sets the `find_unused_parameters` parameter in", "\n", "# torch.nn.parallel.DistributedDataParallel", "\n", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.train.main": [[66, 164], ["train.parse_args", "mmcv.utils.Config.fromfile", "Config.fromfile.get", "mmcv.mkdir_or_exist", "Config.fromfile.dump", "time.strftime", "os.join", "mmseg.utils.get_root_logger", "dict", "mmseg.utils.collect_env", "mmseg.utils.get_root_logger.info", "mmseg.utils.get_root_logger.info", "mmseg.utils.get_root_logger.info", "os.basename", "mmseg.models.build_segmentor", "mmseg.utils.get_root_logger.info", "mmseg.apis.train_segmentor", "Config.fromfile.merge_from_dict", "mmcv.runner.init_dist", "os.abspath", "os.join", "time.localtime", "mmseg.utils.get_root_logger.info", "mmseg.apis.set_random_seed", "mmseg.datasets.build_dataset", "len", "copy.deepcopy", "datasets.append", "dict", "Config.fromfile.get", "os.join", "range", "range", "os.basename", "Config.fromfile.get", "Config.fromfile.get", "mmseg.datasets.build_dataset", "mmseg.utils.collect_env.items", "os.splitext", "os.basename", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.collect_env.collect_env", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_segmentor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.train.train_segmentor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.train.set_random_seed", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset"], ["find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "\n", "model", ".", "cuda", "(", "cfg", ".", "gpu_ids", "[", "0", "]", ")", ",", "device_ids", "=", "cfg", ".", "gpu_ids", ")", "\n", "\n", "# build runner", "\n", "", "optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "\n", "if", "cfg", ".", "get", "(", "'runner'", ")", "is", "None", ":", "\n", "        ", "cfg", ".", "runner", "=", "{", "'type'", ":", "'IterBasedRunner'", ",", "'max_iters'", ":", "cfg", ".", "total_iters", "}", "\n", "warnings", ".", "warn", "(", "\n", "'config is now expected to have a `runner` section, '", "\n", "'please set `runner` in your config.'", ",", "UserWarning", ")", "\n", "\n", "", "runner", "=", "build_runner", "(", "\n", "cfg", ".", "runner", ",", "\n", "default_args", "=", "dict", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "cfg", ".", "work_dir", ",", "\n", "logger", "=", "logger", ",", "\n", "meta", "=", "meta", ")", ")", "\n", "\n", "# register hooks", "\n", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "cfg", ".", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ",", "\n", "cfg", ".", "get", "(", "'momentum_config'", ",", "None", ")", ")", "\n", "\n", "# an ugly walkaround to make the .log and .log.json filenames the same", "\n", "runner", ".", "timestamp", "=", "timestamp", "\n", "\n", "# register eval hooks", "\n", "if", "validate", ":", "\n", "        ", "val_dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "val", ",", "dict", "(", "test_mode", "=", "True", ")", ")", "\n", "val_dataloader", "=", "build_dataloader", "(", "\n", "val_dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "eval_cfg", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", "\n", "eval_cfg", "[", "'by_epoch'", "]", "=", "cfg", ".", "runner", "[", "'type'", "]", "!=", "'IterBasedRunner'", "\n", "eval_hook", "=", "DistEvalHook", "if", "distributed", "else", "EvalHook", "\n", "runner", ".", "register_hook", "(", "eval_hook", "(", "val_dataloader", ",", "**", "eval_cfg", ")", ")", "\n", "\n", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.benchmark.parse_args": [[13, 21], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MMSeg benchmark a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'interval of logging'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.benchmark.main": [[23, 79], ["benchmark.parse_args", "mmcv.Config.fromfile", "mmseg.datasets.build_dataset", "mmseg.datasets.build_dataloader", "mmseg.models.build_segmentor", "mmcv.runner.load_checkpoint", "mmcv.parallel.MMDataParallel", "mmcv.parallel.MMDataParallel.eval", "enumerate", "torch.cuda.synchronize", "time.perf_counter", "torch.cuda.synchronize", "Config.fromfile.get", "torch.no_grad", "mmcv.parallel.MMDataParallel.", "time.perf_counter", "print", "print"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_segmentor"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "\n", "# build the dataloader", "\n", "# TODO: support multiple images per gpu (only minor changes are needed)", "\n", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "False", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "cfg", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_segmentor", "(", "cfg", ".", "model", ",", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# the first several iterations may be very slow so skip them", "\n", "num_warmup", "=", "5", "\n", "pure_inf_time", "=", "0", "\n", "total_iters", "=", "200", "\n", "\n", "# benchmark with 200 image and take the average", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "\n", "        ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "elapsed", "=", "time", ".", "perf_counter", "(", ")", "-", "start_time", "\n", "\n", "if", "i", ">=", "num_warmup", ":", "\n", "            ", "pure_inf_time", "+=", "elapsed", "\n", "if", "(", "i", "+", "1", ")", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "                ", "fps", "=", "(", "i", "+", "1", "-", "num_warmup", ")", "/", "pure_inf_time", "\n", "print", "(", "f'Done image [{i + 1:<3}/ {total_iters}], '", "\n", "f'fps: {fps:.2f} img / s'", ")", "\n", "\n", "", "", "if", "(", "i", "+", "1", ")", "==", "total_iters", ":", "\n", "            ", "fps", "=", "(", "i", "+", "1", "-", "num_warmup", ")", "/", "pure_inf_time", "\n", "print", "(", "f'Overall fps: {fps:.2f} img / s'", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.test.parse_args": [[15, 63], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["    ", "\"\"\"Save ndarray to local numpy file.\n\n    Args:\n        array (ndarray): Ndarray to save.\n        temp_file_name (str): Numpy file name. If 'temp_file_name=None', this\n            function will generate a file name with tempfile.NamedTemporaryFile\n            to save ndarray. Default: None.\n\n    Returns:\n        str: The numpy file name.\n    \"\"\"", "\n", "\n", "if", "temp_file_name", "is", "None", ":", "\n", "        ", "temp_file_name", "=", "tempfile", ".", "NamedTemporaryFile", "(", "\n", "suffix", "=", "'.npy'", ",", "delete", "=", "False", ")", ".", "name", "\n", "", "np", ".", "save", "(", "temp_file_name", ",", "array", ")", "\n", "return", "temp_file_name", "\n", "\n", "\n", "", "def", "single_gpu_test", "(", "model", ",", "\n", "data_loader", ",", "\n", "show", "=", "False", ",", "\n", "out_dir", "=", "None", ",", "\n", "efficient_test", "=", "False", ")", ":", "\n", "    ", "\"\"\"Test with single GPU.\n\n    Args:\n        model (nn.Module): Model to be tested.\n        data_loader (utils.data.Dataloader): Pytorch data loader.\n        show (bool): Whether show results during infernece. Default: False.\n        out_dir (str, optional): If specified, the results will be dumped into\n            the directory to save output results.\n        efficient_test (bool): Whether save the results as local numpy files to\n            save CPU memory during evaluation. Default: False.\n\n    Returns:\n        list: The prediction results.\n    \"\"\"", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "**", "data", ")", "\n", "\n", "", "if", "show", "or", "out_dir", ":", "\n", "            ", "img_tensor", "=", "data", "[", "'img'", "]", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tools.test.main": [[65, 145], ["test.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmseg.datasets.build_dataset", "mmseg.datasets.build_dataloader", "mmseg.models.build_segmentor", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "ValueError", "ValueError", "mmcv.Config.fromfile.merge_from_dict", "mmcv.runner.init_dist", "parse_args.eval_options.get", "mmcv.parallel.MMDataParallel", "mmseg.apis.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "mmseg.apis.multi_gpu_test", "parse_args.out.endswith", "mmcv.Config.fromfile.get", "mmcv.parallel.MMDistributedDataParallel.cuda", "print", "mmcv.dump", "mmseg.datasets.build_dataset.format_results", "mmseg.datasets.build_dataset.evaluate", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_segmentor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.test.single_gpu_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_eval_hook.multi_gpu_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.cityscapes.CityscapesDataset.format_results", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.evaluate"], ["imgs", "=", "tensor2imgs", "(", "img_tensor", ",", "**", "img_metas", "[", "0", "]", "[", "'img_norm_cfg'", "]", ")", "\n", "assert", "len", "(", "imgs", ")", "==", "len", "(", "img_metas", ")", "\n", "\n", "for", "img", ",", "img_meta", "in", "zip", "(", "imgs", ",", "img_metas", ")", ":", "\n", "                ", "h", ",", "w", ",", "_", "=", "img_meta", "[", "'img_shape'", "]", "\n", "img_show", "=", "img", "[", ":", "h", ",", ":", "w", ",", ":", "]", "\n", "\n", "ori_h", ",", "ori_w", "=", "img_meta", "[", "'ori_shape'", "]", "[", ":", "-", "1", "]", "\n", "img_show", "=", "mmcv", ".", "imresize", "(", "img_show", ",", "(", "ori_w", ",", "ori_h", ")", ")", "\n", "\n", "if", "out_dir", ":", "\n", "                    ", "out_file", "=", "osp", ".", "join", "(", "out_dir", ",", "img_meta", "[", "'ori_filename'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "out_file", "=", "None", "\n", "\n", "", "model", ".", "module", ".", "show_result", "(", "\n", "img_show", ",", "\n", "result", ",", "\n", "palette", "=", "dataset", ".", "PALETTE", ",", "\n", "show", "=", "show", ",", "\n", "out_file", "=", "out_file", ")", "\n", "\n", "", "", "if", "isinstance", "(", "result", ",", "list", ")", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "[", "np2tmp", "(", "_", ")", "for", "_", "in", "result", "]", "\n", "", "results", ".", "extend", "(", "result", ")", "\n", "", "else", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "np2tmp", "(", "result", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n", "\n", "", "def", "multi_gpu_test", "(", "model", ",", "\n", "data_loader", ",", "\n", "tmpdir", "=", "None", ",", "\n", "gpu_collect", "=", "False", ",", "\n", "efficient_test", "=", "False", ")", ":", "\n", "    ", "\"\"\"Test model with multiple gpus.\n\n    This method tests model with multiple gpus and collects the results\n    under two different modes: gpu and cpu modes. By setting 'gpu_collect=True'\n    it encodes results to gpu tensors and use gpu communication for results\n    collection. On cpu mode it saves the results on different gpus to 'tmpdir'\n    and collects them by the rank 0 worker.\n\n    Args:\n        model (nn.Module): Model to be tested.\n        data_loader (utils.data.Dataloader): Pytorch data loader.\n        tmpdir (str): Path of directory to save the temporary results from\n            different gpus under cpu mode.\n        gpu_collect (bool): Option to use either gpu or cpu to collect results.\n        efficient_test (bool): Whether save the results as local numpy files to\n            save CPU memory during evaluation. Default: False.\n\n    Returns:\n        list: The prediction results.\n    \"\"\"", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "\n", "", "if", "isinstance", "(", "result", ",", "list", ")", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "[", "np2tmp", "(", "_", ")", "for", "_", "in", "result", "]", "\n", "", "results", ".", "extend", "(", "result", ")", "\n", "", "else", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "np2tmp", "(", "result", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.chase_db1.parse_args": [[13, 21], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["\n", "\n", "CLASSES", "=", "(", "'background'", ",", "'vessel'", ")", "\n", "\n", "PALETTE", "=", "[", "[", "120", ",", "120", ",", "120", "]", ",", "[", "6", ",", "230", ",", "230", "]", "]", "\n", "\n", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.chase_db1.main": [[23, 84], ["chase_db1.parse_args", "print", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "print", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "tempfile.TemporaryDirectory", "print", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "print", "print", "len", "sorted", "mmcv.imread", "sorted", "mmcv.imread", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "mmcv.imwrite", "mmcv.imwrite", "os.listdir", "os.listdir", "os.join", "mmcv.imwrite", "mmcv.imwrite", "os.splitext", "os.join", "os.join", "os.splitext", "os.join", "os.join", "os.splitext", "os.splitext", "os.splitext", "os.splitext"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["img_suffix", "=", "'.png'", ",", "\n", "seg_map_suffix", "=", "'_1stHO.png'", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.drive.parse_args": [[11, 22], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["\n", "\n", "CLASSES", "=", "(", "'background'", ",", "'vessel'", ")", "\n", "\n", "PALETTE", "=", "[", "[", "120", ",", "120", ",", "120", "]", ",", "[", "6", ",", "230", ",", "230", "]", "]", "\n", "\n", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DRIVEDataset", ",", "self", ")", ".", "__init__", "(", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.drive.main": [[24, 109], ["drive.parse_args", "print", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "print", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "tempfile.TemporaryDirectory", "print", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "print", "os.join", "os.listdir", "os.listdir", "os.join", "os.listdir", "os.listdir", "print", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "print", "os.join", "os.listdir", "os.listdir", "os.join", "os.exists", "os.join", "os.exists", "print", "mmcv.imread", "mmcv.imwrite", "cv2.VideoCapture", "cv2.VideoCapture.read", "mmcv.imwrite", "mmcv.imread", "mmcv.imwrite", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "cv2.VideoCapture", "cv2.VideoCapture.read", "mmcv.imwrite", "cv2.VideoCapture", "cv2.VideoCapture.read", "mmcv.imwrite", "os.join", "os.join", "os.join", "os.join", "[].replace", "[].replace", "os.splitext", "os.splitext", "os.splitext", "os.splitext", "os.splitext"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["seg_map_suffix", "=", "'_manual1.png'", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.cityscapes.convert_json_to_label": [[8, 11], ["json_file.replace", "cityscapesscripts.preparation.json2labelImg.json2labelImg"], "function", ["None"], ["\n", "from", ".", "builder", "import", "DATASETS", "\n", "from", ".", "custom", "import", "CustomDataset", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.cityscapes.parse_args": [[13, 23], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["@", "DATASETS", ".", "register_module", "(", ")", "\n", "class", "CityscapesDataset", "(", "CustomDataset", ")", ":", "\n", "    ", "\"\"\"Cityscapes dataset.\n\n    The ``img_suffix`` is fixed to '_leftImg8bit.png' and ``seg_map_suffix`` is\n    fixed to '_gtFine_labelTrainIds.png' for Cityscapes dataset.\n    \"\"\"", "\n", "\n", "CLASSES", "=", "(", "'road'", ",", "'sidewalk'", ",", "'building'", ",", "'wall'", ",", "'fence'", ",", "'pole'", ",", "\n", "'traffic light'", ",", "'traffic sign'", ",", "'vegetation'", ",", "'terrain'", ",", "'sky'", ",", "\n", "'person'", ",", "'rider'", ",", "'car'", ",", "'truck'", ",", "'bus'", ",", "'train'", ",", "'motorcycle'", ",", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.cityscapes.main": [[25, 52], ["cityscapes.parse_args", "mmcv.mkdir_or_exist", "os.join", "mmcv.scandir", "os.join", "poly_files.append", "mmcv.track_parallel_progress", "mmcv.track_progress", "mmcv.scandir", "os.join", "filenames.append", "open", "f.writelines", "poly.replace", "os.join"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["\n", "PALETTE", "=", "[", "[", "128", ",", "64", ",", "128", "]", ",", "[", "244", ",", "35", ",", "232", "]", ",", "[", "70", ",", "70", ",", "70", "]", ",", "[", "102", ",", "102", ",", "156", "]", ",", "\n", "[", "190", ",", "153", ",", "153", "]", ",", "[", "153", ",", "153", ",", "153", "]", ",", "[", "250", ",", "170", ",", "30", "]", ",", "[", "220", ",", "220", ",", "0", "]", ",", "\n", "[", "107", ",", "142", ",", "35", "]", ",", "[", "152", ",", "251", ",", "152", "]", ",", "[", "70", ",", "130", ",", "180", "]", ",", "[", "220", ",", "20", ",", "60", "]", ",", "\n", "[", "255", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "142", "]", ",", "[", "0", ",", "0", ",", "70", "]", ",", "[", "0", ",", "60", ",", "100", "]", ",", "\n", "[", "0", ",", "80", ",", "100", "]", ",", "[", "0", ",", "0", ",", "230", "]", ",", "[", "119", ",", "11", ",", "32", "]", "]", "\n", "\n", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CityscapesDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'_leftImg8bit.png'", ",", "\n", "seg_map_suffix", "=", "'_gtFine_labelTrainIds.png'", ",", "\n", "**", "kwargs", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_convert_to_label_id", "(", "result", ")", ":", "\n", "        ", "\"\"\"Convert trainId to id for cityscapes.\"\"\"", "\n", "if", "isinstance", "(", "result", ",", "str", ")", ":", "\n", "            ", "result", "=", "np", ".", "load", "(", "result", ")", "\n", "", "import", "cityscapesscripts", ".", "helpers", ".", "labels", "as", "CSLabels", "\n", "result_copy", "=", "result", ".", "copy", "(", ")", "\n", "for", "trainId", ",", "label", "in", "CSLabels", ".", "trainId2label", ".", "items", "(", ")", ":", "\n", "            ", "result_copy", "[", "result", "==", "trainId", "]", "=", "label", ".", "id", "\n", "\n", "", "return", "result_copy", "\n", "\n", "", "def", "results2img", "(", "self", ",", "results", ",", "imgfile_prefix", ",", "to_label_id", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.voc_aug.convert_mat": [[13, 18], ["scipy.io.loadmat", "[].astype", "os.join", "PIL.Image.fromarray().save", "os.join", "mat_file.replace", "PIL.Image.fromarray"], "function", ["None"], ["def", "convert_mat", "(", "mat_file", ",", "in_dir", ",", "out_dir", ")", ":", "\n", "    ", "data", "=", "loadmat", "(", "osp", ".", "join", "(", "in_dir", ",", "mat_file", ")", ")", "\n", "mask", "=", "data", "[", "'GTcls'", "]", "[", "0", "]", "[", "'Segmentation'", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "seg_filename", "=", "osp", ".", "join", "(", "out_dir", ",", "mat_file", ".", "replace", "(", "'.mat'", ",", "'.png'", ")", ")", "\n", "Image", ".", "fromarray", "(", "mask", ")", ".", "save", "(", "seg_filename", ",", "'PNG'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.voc_aug.generate_aug_list": [[20, 22], ["list", "set", "set"], "function", ["None"], ["", "def", "generate_aug_list", "(", "merged_list", ",", "excluded_list", ")", ":", "\n", "    ", "return", "list", "(", "set", "(", "merged_list", ")", "-", "set", "(", "excluded_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.voc_aug.parse_args": [[24, 34], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Convert PASCAL VOC annotations to mmsegmentation format'", ")", "\n", "parser", ".", "add_argument", "(", "'devkit_path'", ",", "help", "=", "'pascal voc devkit path'", ")", "\n", "parser", ".", "add_argument", "(", "'aug_path'", ",", "help", "=", "'pascal voc aug path'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--out_dir'", ",", "help", "=", "'output path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--nproc'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of process'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.voc_aug.main": [[36, 88], ["voc_aug.parse_args", "mmcv.mkdir_or_exist", "os.join", "mmcv.track_parallel_progress", "voc_aug.generate_aug_list", "voc_aug.generate_aug_list", "print", "os.join", "functools.partial", "list", "open", "open", "open", "open", "len", "open", "f.writelines", "len", "open", "f.writelines", "mmcv.scandir", "os.join", "line.strip", "os.join", "line.strip", "os.join", "line.strip", "os.join", "line.strip", "os.join", "len", "len", "os.join"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.voc_aug.generate_aug_list", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.voc_aug.generate_aug_list"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "devkit_path", "=", "args", ".", "devkit_path", "\n", "aug_path", "=", "args", ".", "aug_path", "\n", "nproc", "=", "args", ".", "nproc", "\n", "if", "args", ".", "out_dir", "is", "None", ":", "\n", "        ", "out_dir", "=", "osp", ".", "join", "(", "devkit_path", ",", "'VOC2012'", ",", "'SegmentationClassAug'", ")", "\n", "", "else", ":", "\n", "        ", "out_dir", "=", "args", ".", "out_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "out_dir", ")", "\n", "in_dir", "=", "osp", ".", "join", "(", "aug_path", ",", "'dataset'", ",", "'cls'", ")", "\n", "\n", "mmcv", ".", "track_parallel_progress", "(", "\n", "partial", "(", "convert_mat", ",", "in_dir", "=", "in_dir", ",", "out_dir", "=", "out_dir", ")", ",", "\n", "list", "(", "mmcv", ".", "scandir", "(", "in_dir", ",", "suffix", "=", "'.mat'", ")", ")", ",", "\n", "nproc", "=", "nproc", ")", "\n", "\n", "full_aug_list", "=", "[", "]", "\n", "with", "open", "(", "osp", ".", "join", "(", "aug_path", ",", "'dataset'", ",", "'train.txt'", ")", ")", "as", "f", ":", "\n", "        ", "full_aug_list", "+=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "f", "]", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "aug_path", ",", "'dataset'", ",", "'val.txt'", ")", ")", "as", "f", ":", "\n", "        ", "full_aug_list", "+=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "f", "]", "\n", "\n", "", "with", "open", "(", "\n", "osp", ".", "join", "(", "devkit_path", ",", "'VOC2012/ImageSets/Segmentation'", ",", "\n", "'train.txt'", ")", ")", "as", "f", ":", "\n", "        ", "ori_train_list", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "f", "]", "\n", "", "with", "open", "(", "\n", "osp", ".", "join", "(", "devkit_path", ",", "'VOC2012/ImageSets/Segmentation'", ",", "\n", "'val.txt'", ")", ")", "as", "f", ":", "\n", "        ", "val_list", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "f", "]", "\n", "\n", "", "aug_train_list", "=", "generate_aug_list", "(", "ori_train_list", "+", "full_aug_list", ",", "\n", "val_list", ")", "\n", "assert", "len", "(", "aug_train_list", ")", "==", "AUG_LEN", ",", "'len(aug_train_list) != {}'", ".", "format", "(", "\n", "AUG_LEN", ")", "\n", "\n", "with", "open", "(", "\n", "osp", ".", "join", "(", "devkit_path", ",", "'VOC2012/ImageSets/Segmentation'", ",", "\n", "'trainaug.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "writelines", "(", "line", "+", "'\\n'", "for", "line", "in", "aug_train_list", ")", "\n", "\n", "", "aug_list", "=", "generate_aug_list", "(", "full_aug_list", ",", "ori_train_list", "+", "val_list", ")", "\n", "assert", "len", "(", "aug_list", ")", "==", "AUG_LEN", "-", "len", "(", "\n", "ori_train_list", ")", ",", "'len(aug_list) != {}'", ".", "format", "(", "AUG_LEN", "-", "\n", "len", "(", "ori_train_list", ")", ")", "\n", "with", "open", "(", "\n", "osp", ".", "join", "(", "devkit_path", ",", "'VOC2012/ImageSets/Segmentation'", ",", "'aug.txt'", ")", ",", "\n", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "writelines", "(", "line", "+", "'\\n'", "for", "line", "in", "aug_list", ")", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.pascal_context.generate_labels": [[20, 35], ["PIL.Image.fromarray", "Image.fromarray.save", "numpy.unique", "range", "numpy.digitize", "_key[].reshape", "pascal_context.generate_labels._class_to_index"], "function", ["None"], ["CLASSES", "=", "(", "'background'", ",", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "\n", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "'cow'", ",", "'table'", ",", "'dog'", ",", "'horse'", ",", "\n", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "\n", "'tvmonitor'", ",", "'bag'", ",", "'bed'", ",", "'bench'", ",", "'book'", ",", "'building'", ",", "\n", "'cabinet'", ",", "'ceiling'", ",", "'cloth'", ",", "'computer'", ",", "'cup'", ",", "'door'", ",", "\n", "'fence'", ",", "'floor'", ",", "'flower'", ",", "'food'", ",", "'grass'", ",", "'ground'", ",", "\n", "'keyboard'", ",", "'light'", ",", "'mountain'", ",", "'mouse'", ",", "'curtain'", ",", "'platform'", ",", "\n", "'sign'", ",", "'plate'", ",", "'road'", ",", "'rock'", ",", "'shelves'", ",", "'sidewalk'", ",", "'sky'", ",", "\n", "'snow'", ",", "'bedclothes'", ",", "'track'", ",", "'tree'", ",", "'truck'", ",", "'wall'", ",", "'water'", ",", "\n", "'window'", ",", "'wood'", ")", "\n", "\n", "PALETTE", "=", "[", "[", "120", ",", "120", ",", "120", "]", ",", "[", "180", ",", "120", ",", "120", "]", ",", "[", "6", ",", "230", ",", "230", "]", ",", "[", "80", ",", "50", ",", "50", "]", ",", "\n", "[", "4", ",", "200", ",", "3", "]", ",", "[", "120", ",", "120", ",", "80", "]", ",", "[", "140", ",", "140", ",", "140", "]", ",", "[", "204", ",", "5", ",", "255", "]", ",", "\n", "[", "230", ",", "230", ",", "230", "]", ",", "[", "4", ",", "250", ",", "7", "]", ",", "[", "224", ",", "5", ",", "255", "]", ",", "[", "235", ",", "255", ",", "7", "]", ",", "\n", "[", "150", ",", "5", ",", "61", "]", ",", "[", "120", ",", "120", ",", "70", "]", ",", "[", "8", ",", "255", ",", "51", "]", ",", "[", "255", ",", "6", ",", "82", "]", ",", "\n", "[", "143", ",", "255", ",", "140", "]", ",", "[", "204", ",", "255", ",", "4", "]", ",", "[", "255", ",", "51", ",", "7", "]", ",", "[", "204", ",", "70", ",", "3", "]", ",", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.pascal_context.parse_args": [[37, 45], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["[", "255", ",", "7", ",", "71", "]", ",", "[", "255", ",", "9", ",", "224", "]", ",", "[", "9", ",", "7", ",", "230", "]", ",", "[", "220", ",", "220", ",", "220", "]", ",", "\n", "[", "255", ",", "9", ",", "92", "]", ",", "[", "112", ",", "9", ",", "255", "]", ",", "[", "8", ",", "255", ",", "214", "]", ",", "[", "7", ",", "255", ",", "224", "]", ",", "\n", "[", "255", ",", "184", ",", "6", "]", ",", "[", "10", ",", "255", ",", "71", "]", ",", "[", "255", ",", "41", ",", "10", "]", ",", "[", "7", ",", "255", ",", "255", "]", ",", "\n", "[", "224", ",", "255", ",", "8", "]", ",", "[", "102", ",", "8", ",", "255", "]", ",", "[", "255", ",", "61", ",", "6", "]", ",", "[", "255", ",", "194", ",", "7", "]", ",", "\n", "[", "255", ",", "122", ",", "8", "]", ",", "[", "0", ",", "255", ",", "20", "]", ",", "[", "255", ",", "8", ",", "41", "]", ",", "[", "255", ",", "5", ",", "153", "]", ",", "\n", "[", "6", ",", "51", ",", "255", "]", ",", "[", "235", ",", "12", ",", "255", "]", ",", "[", "160", ",", "150", ",", "20", "]", ",", "[", "0", ",", "163", ",", "255", "]", ",", "\n", "[", "140", ",", "140", ",", "140", "]", ",", "[", "250", ",", "10", ",", "15", "]", ",", "[", "20", ",", "255", ",", "0", "]", ",", "[", "31", ",", "255", ",", "0", "]", ",", "\n", "[", "255", ",", "31", ",", "0", "]", ",", "[", "255", ",", "224", ",", "0", "]", ",", "[", "153", ",", "255", ",", "0", "]", ",", "[", "0", ",", "0", ",", "255", "]", ",", "\n", "[", "255", ",", "71", ",", "0", "]", ",", "[", "0", ",", "235", ",", "255", "]", ",", "[", "0", ",", "173", ",", "255", "]", ",", "[", "31", ",", "0", ",", "255", "]", "]", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.pascal_context.main": [[47, 83], ["pascal_context.parse_args", "mmcv.mkdir_or_exist", "os.join", "detail.Detail", "detail.Detail.getImgs", "detail.Detail", "detail.Detail.getImgs", "mmcv.mkdir_or_exist", "mmcv.track_progress", "mmcv.track_progress", "print", "os.join", "os.join", "functools.partial", "open", "f.writelines", "functools.partial", "open", "f.writelines", "os.join", "os.join", "sorted", "sorted"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["def", "__init__", "(", "self", ",", "split", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PascalContextDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.jpg'", ",", "\n", "seg_map_suffix", "=", "'.png'", ",", "\n", "split", "=", "split", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "and", "self", ".", "split", "is", "not", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.hrf.parse_args": [[13, 32], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["\n", "\n", "CLASSES", "=", "(", "'background'", ",", "'vessel'", ")", "\n", "\n", "PALETTE", "=", "[", "[", "120", ",", "120", ",", "120", "]", ",", "[", "6", ",", "230", ",", "230", "]", "]", "\n", "\n", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "HRFDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.png'", ",", "\n", "seg_map_suffix", "=", "'.png'", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.hrf.main": [[34, 107], ["hrf.parse_args", "print", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "print", "print", "print", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "tempfile.TemporaryDirectory", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "tempfile.TemporaryDirectory", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "len", "sorted", "mmcv.imread", "mmcv.imwrite", "sorted", "mmcv.imread", "mmcv.imwrite", "len", "sorted", "mmcv.imread", "mmcv.imwrite", "sorted", "mmcv.imread", "mmcv.imwrite", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "os.listdir", "os.listdir", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "os.listdir", "os.listdir", "os.join", "os.join", "os.splitext", "os.splitext", "os.splitext", "os.splitext"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], []], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.un_gz": [[14, 19], ["gzip.GzipFile", "gzip.GzipFile.close", "open", "f.write", "gzip.GzipFile.read"], "function", ["None"], ["\n", "\n", "CLASSES", "=", "(", "'background'", ",", "'vessel'", ")", "\n", "\n", "PALETTE", "=", "[", "[", "120", ",", "120", ",", "120", "]", ",", "[", "6", ",", "230", ",", "230", "]", "]", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args": [[21, 31], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "STAREDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.png'", ",", "\n", "seg_map_suffix", "=", "'.ah.png'", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.main": [[33, 162], ["stare.parse_args", "print", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "print", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "tempfile.TemporaryDirectory", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "print", "os.listdir", "os.listdir", "os.join", "print", "tempfile.TemporaryDirectory", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "print", "os.listdir", "os.listdir", "os.join", "print", "tempfile.TemporaryDirectory", "mmcv.mkdir_or_exist", "mmcv.mkdir_or_exist", "print", "os.listdir", "os.listdir", "os.join", "print", "os.join", "os.join", "tarfile.open", "f.extractall", "os.join", "stare.un_gz", "len", "sorted", "mmcv.imread", "mmcv.imwrite", "sorted", "mmcv.imread", "mmcv.imwrite", "os.join", "os.join", "tarfile.open", "f.extractall", "os.join", "stare.un_gz", "len", "sorted", "mmcv.imread", "mmcv.imwrite", "sorted", "mmcv.imread", "mmcv.imwrite", "os.join", "os.join", "tarfile.open", "f.extractall", "os.join", "stare.un_gz", "len", "sorted", "mmcv.imread", "mmcv.imwrite", "sorted", "mmcv.imread", "mmcv.imwrite", "os.join", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "os.listdir", "os.listdir", "os.join", "os.join", "os.join", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "os.listdir", "os.listdir", "os.join", "os.join", "os.join", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "os.listdir", "os.listdir", "os.join", "os.join", "os.splitext", "os.splitext", "os.splitext", "os.splitext", "os.splitext", "os.splitext", "os.splitext", "os.splitext", "os.splitext"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.parse_args", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.un_gz", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.un_gz", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.convert_datasets.stare.un_gz"], []], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.docs.conf.get_version": [[27, 31], ["open", "exec", "locals", "compile", "f.read"], "function", ["None"], ["def", "get_version", "(", ")", ":", "\n", "    ", "with", "open", "(", "version_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "exec", "(", "compile", "(", "f", ".", "read", "(", ")", ",", "version_file", ",", "'exec'", ")", ")", "\n", "", "return", "locals", "(", ")", "[", "'__version__'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.docs.conf.builder_inited_handler": [[83, 85], ["subprocess.run"], "function", ["None"], ["def", "builder_inited_handler", "(", "app", ")", ":", "\n", "    ", "subprocess", ".", "run", "(", "[", "'./stat.py'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.docs.conf.setup": [[87, 89], ["app.connect"], "function", ["None"], ["", "def", "setup", "(", "app", ")", ":", "\n", "    ", "app", ".", "connect", "(", "'builder-inited'", ",", "builder_inited_handler", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_eval_hook.ExampleDataset.__getitem__": [[18, 21], ["dict", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "dict"], "methods", ["None"], ["    ", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "results", "=", "dict", "(", "img", "=", "torch", ".", "tensor", "(", "[", "1", "]", ")", ",", "img_metas", "=", "dict", "(", ")", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_eval_hook.ExampleDataset.__len__": [[22, 24], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_eval_hook.ExampleModel.__init__": [[28, 32], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ExampleModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "test_cfg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_eval_hook.ExampleModel.forward": [[33, 35], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "img_metas", ",", "test_mode", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_eval_hook.ExampleModel.train_step": [[36, 39], ["test_eval_hook.ExampleModel.forward", "dict"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward"], ["", "def", "train_step", "(", "self", ",", "data_batch", ",", "optimizer", ")", ":", "\n", "        ", "loss", "=", "self", ".", "forward", "(", "**", "data_batch", ")", "\n", "return", "dict", "(", "loss", "=", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_eval_hook.test_iter_eval_hook": [[41, 76], ["test_eval_hook.ExampleDataset", "unittest.mock.MagicMock", "torch.utils.data.DataLoader", "test_eval_hook.ExampleModel", "torch.utils.data.DataLoader", "dict", "mmcv.runner.obj_from_dict", "pytest.raises", "test_eval_hook.ExampleModel", "mmseg.core.EvalHook", "dict", "tempfile.TemporaryDirectory", "mmseg.core.EvalHook", "mmcv.runner.IterBasedRunner", "mmcv.runner.IterBasedRunner.register_hook", "mmcv.runner.IterBasedRunner.run", "ExampleModel.evaluate.assert_called_with", "torch.utils.data.DataLoader", "dict", "ExampleModel.parameters", "logging.getLogger", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "", "def", "test_iter_eval_hook", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "        ", "test_dataset", "=", "ExampleModel", "(", ")", "\n", "data_loader", "=", "[", "\n", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "sampler", "=", "None", ",", "\n", "num_worker", "=", "0", ",", "\n", "shuffle", "=", "False", ")", "\n", "]", "\n", "EvalHook", "(", "data_loader", ")", "\n", "\n", "", "test_dataset", "=", "ExampleDataset", "(", ")", "\n", "test_dataset", ".", "evaluate", "=", "MagicMock", "(", "return_value", "=", "dict", "(", "test", "=", "'success'", ")", ")", "\n", "loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ")", "\n", "model", "=", "ExampleModel", "(", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "1", ",", "sampler", "=", "None", ",", "num_workers", "=", "0", ",", "shuffle", "=", "False", ")", "\n", "optim_cfg", "=", "dict", "(", "type", "=", "'SGD'", ",", "lr", "=", "0.01", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.0005", ")", "\n", "optimizer", "=", "obj_from_dict", "(", "optim_cfg", ",", "torch", ".", "optim", ",", "\n", "dict", "(", "params", "=", "model", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "# test EvalHook", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmpdir", ":", "\n", "        ", "eval_hook", "=", "EvalHook", "(", "data_loader", ")", "\n", "runner", "=", "mmcv", ".", "runner", ".", "IterBasedRunner", "(", "\n", "model", "=", "model", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "tmpdir", ",", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", ")", "\n", "runner", ".", "register_hook", "(", "eval_hook", ")", "\n", "runner", ".", "run", "(", "[", "loader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "1", ")", "\n", "test_dataset", ".", "evaluate", ".", "assert_called_with", "(", "[", "torch", ".", "tensor", "(", "[", "1", "]", ")", "]", ",", "\n", "logger", "=", "runner", ".", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_eval_hook.test_epoch_eval_hook": [[78, 113], ["test_eval_hook.ExampleDataset", "unittest.mock.MagicMock", "torch.utils.data.DataLoader", "test_eval_hook.ExampleModel", "torch.utils.data.DataLoader", "dict", "mmcv.runner.obj_from_dict", "pytest.raises", "test_eval_hook.ExampleModel", "mmseg.core.EvalHook", "dict", "tempfile.TemporaryDirectory", "mmseg.core.EvalHook", "mmcv.runner.EpochBasedRunner", "mmcv.runner.EpochBasedRunner.register_hook", "mmcv.runner.EpochBasedRunner.run", "ExampleModel.evaluate.assert_called_once_with", "torch.utils.data.DataLoader", "dict", "ExampleModel.parameters", "logging.getLogger", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "", "def", "test_epoch_eval_hook", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "        ", "test_dataset", "=", "ExampleModel", "(", ")", "\n", "data_loader", "=", "[", "\n", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "sampler", "=", "None", ",", "\n", "num_worker", "=", "0", ",", "\n", "shuffle", "=", "False", ")", "\n", "]", "\n", "EvalHook", "(", "data_loader", ",", "by_epoch", "=", "True", ")", "\n", "\n", "", "test_dataset", "=", "ExampleDataset", "(", ")", "\n", "test_dataset", ".", "evaluate", "=", "MagicMock", "(", "return_value", "=", "dict", "(", "test", "=", "'success'", ")", ")", "\n", "loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ")", "\n", "model", "=", "ExampleModel", "(", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "1", ",", "sampler", "=", "None", ",", "num_workers", "=", "0", ",", "shuffle", "=", "False", ")", "\n", "optim_cfg", "=", "dict", "(", "type", "=", "'SGD'", ",", "lr", "=", "0.01", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.0005", ")", "\n", "optimizer", "=", "obj_from_dict", "(", "optim_cfg", ",", "torch", ".", "optim", ",", "\n", "dict", "(", "params", "=", "model", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "# test EvalHook with interval", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmpdir", ":", "\n", "        ", "eval_hook", "=", "EvalHook", "(", "data_loader", ",", "by_epoch", "=", "True", ",", "interval", "=", "2", ")", "\n", "runner", "=", "mmcv", ".", "runner", ".", "EpochBasedRunner", "(", "\n", "model", "=", "model", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "tmpdir", ",", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", ")", "\n", "runner", ".", "register_hook", "(", "eval_hook", ")", "\n", "runner", ".", "run", "(", "[", "loader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "2", ")", "\n", "test_dataset", ".", "evaluate", ".", "assert_called_once_with", "(", "[", "torch", ".", "tensor", "(", "[", "1", "]", ")", "]", ",", "\n", "logger", "=", "runner", ".", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_eval_hook.multi_gpu_test": [[115, 118], ["mmseg.apis.single_gpu_test"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.test.single_gpu_test"], ["", "", "def", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "tmpdir", "=", "None", ",", "gpu_collect", "=", "False", ")", ":", "\n", "    ", "results", "=", "single_gpu_test", "(", "model", ",", "data_loader", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_eval_hook.test_dist_eval_hook": [[120, 156], ["unittest.mock.patch", "test_eval_hook.ExampleDataset", "unittest.mock.MagicMock", "torch.utils.data.DataLoader", "test_eval_hook.ExampleModel", "torch.utils.data.DataLoader", "dict", "mmcv.runner.obj_from_dict", "pytest.raises", "test_eval_hook.ExampleModel", "mmseg.core.DistEvalHook", "dict", "tempfile.TemporaryDirectory", "mmseg.core.DistEvalHook", "mmcv.runner.IterBasedRunner", "mmcv.runner.IterBasedRunner.register_hook", "mmcv.runner.IterBasedRunner.run", "ExampleModel.evaluate.assert_called_with", "torch.utils.data.DataLoader", "dict", "ExampleModel.parameters", "logging.getLogger", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "@", "patch", "(", "'mmseg.apis.multi_gpu_test'", ",", "multi_gpu_test", ")", "\n", "def", "test_dist_eval_hook", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "        ", "test_dataset", "=", "ExampleModel", "(", ")", "\n", "data_loader", "=", "[", "\n", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "sampler", "=", "None", ",", "\n", "num_worker", "=", "0", ",", "\n", "shuffle", "=", "False", ")", "\n", "]", "\n", "DistEvalHook", "(", "data_loader", ")", "\n", "\n", "", "test_dataset", "=", "ExampleDataset", "(", ")", "\n", "test_dataset", ".", "evaluate", "=", "MagicMock", "(", "return_value", "=", "dict", "(", "test", "=", "'success'", ")", ")", "\n", "loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ")", "\n", "model", "=", "ExampleModel", "(", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "1", ",", "sampler", "=", "None", ",", "num_workers", "=", "0", ",", "shuffle", "=", "False", ")", "\n", "optim_cfg", "=", "dict", "(", "type", "=", "'SGD'", ",", "lr", "=", "0.01", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.0005", ")", "\n", "optimizer", "=", "obj_from_dict", "(", "optim_cfg", ",", "torch", ".", "optim", ",", "\n", "dict", "(", "params", "=", "model", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "# test DistEvalHook", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmpdir", ":", "\n", "        ", "eval_hook", "=", "DistEvalHook", "(", "data_loader", ")", "\n", "runner", "=", "mmcv", ".", "runner", ".", "IterBasedRunner", "(", "\n", "model", "=", "model", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "tmpdir", ",", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", ")", "\n", "runner", ".", "register_hook", "(", "eval_hook", ")", "\n", "runner", ".", "run", "(", "[", "loader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "1", ")", "\n", "test_dataset", ".", "evaluate", ".", "assert_called_with", "(", "[", "torch", ".", "tensor", "(", "[", "1", "]", ")", "]", ",", "\n", "logger", "=", "runner", ".", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_eval_hook.test_dist_eval_hook_epoch": [[158, 194], ["unittest.mock.patch", "test_eval_hook.ExampleDataset", "unittest.mock.MagicMock", "torch.utils.data.DataLoader", "test_eval_hook.ExampleModel", "torch.utils.data.DataLoader", "dict", "mmcv.runner.obj_from_dict", "pytest.raises", "test_eval_hook.ExampleModel", "mmseg.core.DistEvalHook", "dict", "tempfile.TemporaryDirectory", "mmseg.core.DistEvalHook", "mmcv.runner.EpochBasedRunner", "mmcv.runner.EpochBasedRunner.register_hook", "mmcv.runner.EpochBasedRunner.run", "ExampleModel.evaluate.assert_called_with", "torch.utils.data.DataLoader", "dict", "ExampleModel.parameters", "logging.getLogger", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "", "@", "patch", "(", "'mmseg.apis.multi_gpu_test'", ",", "multi_gpu_test", ")", "\n", "def", "test_dist_eval_hook_epoch", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "        ", "test_dataset", "=", "ExampleModel", "(", ")", "\n", "data_loader", "=", "[", "\n", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "sampler", "=", "None", ",", "\n", "num_worker", "=", "0", ",", "\n", "shuffle", "=", "False", ")", "\n", "]", "\n", "DistEvalHook", "(", "data_loader", ")", "\n", "\n", "", "test_dataset", "=", "ExampleDataset", "(", ")", "\n", "test_dataset", ".", "evaluate", "=", "MagicMock", "(", "return_value", "=", "dict", "(", "test", "=", "'success'", ")", ")", "\n", "loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ")", "\n", "model", "=", "ExampleModel", "(", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "1", ",", "sampler", "=", "None", ",", "num_workers", "=", "0", ",", "shuffle", "=", "False", ")", "\n", "optim_cfg", "=", "dict", "(", "type", "=", "'SGD'", ",", "lr", "=", "0.01", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.0005", ")", "\n", "optimizer", "=", "obj_from_dict", "(", "optim_cfg", ",", "torch", ".", "optim", ",", "\n", "dict", "(", "params", "=", "model", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "# test DistEvalHook", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmpdir", ":", "\n", "        ", "eval_hook", "=", "DistEvalHook", "(", "data_loader", ",", "by_epoch", "=", "True", ",", "interval", "=", "2", ")", "\n", "runner", "=", "mmcv", ".", "runner", ".", "EpochBasedRunner", "(", "\n", "model", "=", "model", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "tmpdir", ",", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", ")", "\n", "runner", ".", "register_hook", "(", "eval_hook", ")", "\n", "runner", ".", "run", "(", "[", "loader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "2", ")", "\n", "test_dataset", ".", "evaluate", ".", "assert_called_with", "(", "[", "torch", ".", "tensor", "(", "[", "1", "]", ")", "]", ",", "\n", "logger", "=", "runner", ".", "logger", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_sampler._context_for_ohem": [[8, 10], ["mmseg.models.decode_heads.FCNHead"], "function", ["None"], ["def", "_context_for_ohem", "(", ")", ":", "\n", "    ", "return", "FCNHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_sampler.test_ohem_sampler": [[12, 39], ["mmseg.core.OHEMPixelSampler", "torch.randn", "torch.randint", "mmseg.core.OHEMPixelSampler.sample", "mmseg.core.OHEMPixelSampler", "torch.randn", "torch.randint", "mmseg.core.OHEMPixelSampler.sample", "pytest.raises", "mmseg.core.OHEMPixelSampler", "torch.randn", "torch.randint", "mmseg.core.OHEMPixelSampler.sample", "sampler.sample.sum", "sampler.sample.sum", "test_sampler._context_for_ohem", "test_sampler._context_for_ohem", "test_sampler._context_for_ohem"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.sampler.base_pixel_sampler.BasePixelSampler.sample", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.sampler.base_pixel_sampler.BasePixelSampler.sample", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.sampler.base_pixel_sampler.BasePixelSampler.sample", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_sampler._context_for_ohem", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_sampler._context_for_ohem", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_sampler._context_for_ohem"], ["", "def", "test_ohem_sampler", "(", ")", ":", "\n", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# seg_logit and seg_label must be of the same size", "\n", "        ", "sampler", "=", "OHEMPixelSampler", "(", "context", "=", "_context_for_ohem", "(", ")", ")", "\n", "seg_logit", "=", "torch", ".", "randn", "(", "1", ",", "19", ",", "45", ",", "45", ")", "\n", "seg_label", "=", "torch", ".", "randint", "(", "0", ",", "19", ",", "size", "=", "(", "1", ",", "1", ",", "89", ",", "89", ")", ")", "\n", "sampler", ".", "sample", "(", "seg_logit", ",", "seg_label", ")", "\n", "\n", "# test with thresh", "\n", "", "sampler", "=", "OHEMPixelSampler", "(", "\n", "context", "=", "_context_for_ohem", "(", ")", ",", "thresh", "=", "0.7", ",", "min_kept", "=", "200", ")", "\n", "seg_logit", "=", "torch", ".", "randn", "(", "1", ",", "19", ",", "45", ",", "45", ")", "\n", "seg_label", "=", "torch", ".", "randint", "(", "0", ",", "19", ",", "size", "=", "(", "1", ",", "1", ",", "45", ",", "45", ")", ")", "\n", "seg_weight", "=", "sampler", ".", "sample", "(", "seg_logit", ",", "seg_label", ")", "\n", "assert", "seg_weight", ".", "shape", "[", "0", "]", "==", "seg_logit", ".", "shape", "[", "0", "]", "\n", "assert", "seg_weight", ".", "shape", "[", "1", ":", "]", "==", "seg_logit", ".", "shape", "[", "2", ":", "]", "\n", "assert", "seg_weight", ".", "sum", "(", ")", ">", "200", "\n", "\n", "# test w.o thresh", "\n", "sampler", "=", "OHEMPixelSampler", "(", "context", "=", "_context_for_ohem", "(", ")", ",", "min_kept", "=", "200", ")", "\n", "seg_logit", "=", "torch", ".", "randn", "(", "1", ",", "19", ",", "45", ",", "45", ")", "\n", "seg_label", "=", "torch", ".", "randint", "(", "0", ",", "19", ",", "size", "=", "(", "1", ",", "1", ",", "45", ",", "45", ")", ")", "\n", "seg_weight", "=", "sampler", ".", "sample", "(", "seg_logit", ",", "seg_label", ")", "\n", "assert", "seg_weight", ".", "shape", "[", "0", "]", "==", "seg_logit", ".", "shape", "[", "0", "]", "\n", "assert", "seg_weight", ".", "shape", "[", "1", ":", "]", "==", "seg_logit", ".", "shape", "[", "2", ":", "]", "\n", "assert", "seg_weight", ".", "sum", "(", ")", "==", "200", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_config._get_config_directory": [[11, 24], ["os.path.join", "os.path.dirname", "os.path.exists", "Exception", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["def", "_get_config_directory", "(", ")", ":", "\n", "    ", "\"\"\"Find the predefined segmentor config directory.\"\"\"", "\n", "try", ":", "\n", "# Assume we are running in the source mmsegmentation repo", "\n", "        ", "repo_dpath", "=", "dirname", "(", "dirname", "(", "__file__", ")", ")", "\n", "", "except", "NameError", ":", "\n", "# For IPython development when this __file__ is not defined", "\n", "        ", "import", "mmseg", "\n", "repo_dpath", "=", "dirname", "(", "dirname", "(", "mmseg", ".", "__file__", ")", ")", "\n", "", "config_dpath", "=", "join", "(", "repo_dpath", ",", "'configs'", ")", "\n", "if", "not", "exists", "(", "config_dpath", ")", ":", "\n", "        ", "raise", "Exception", "(", "'Cannot find config path'", ")", "\n", "", "return", "config_dpath", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_config.test_config_build_segmentor": [[26, 60], ["test_config._get_config_directory", "print", "os.listdir", "print", "os.path.isdir", "os.path.relpath", "os.path.join", "mmcv.Config.fromfile", "print", "print", "mmseg.models.build_segmentor", "test_config._check_decode_head", "config_fpaths.append", "len", "p.find", "list", "glob.glob", "os.path.join"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._get_config_directory", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_segmentor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_config._check_decode_head"], ["", "def", "test_config_build_segmentor", "(", ")", ":", "\n", "    ", "\"\"\"Test that all segmentation models defined in the configs can be\n    initialized.\"\"\"", "\n", "config_dpath", "=", "_get_config_directory", "(", ")", "\n", "print", "(", "'Found config_dpath = {!r}'", ".", "format", "(", "config_dpath", ")", ")", "\n", "\n", "config_fpaths", "=", "[", "]", "\n", "# one config each sub folder", "\n", "for", "sub_folder", "in", "os", ".", "listdir", "(", "config_dpath", ")", ":", "\n", "        ", "if", "isdir", "(", "sub_folder", ")", ":", "\n", "            ", "config_fpaths", ".", "append", "(", "\n", "list", "(", "glob", ".", "glob", "(", "join", "(", "config_dpath", ",", "sub_folder", ",", "'*.py'", ")", ")", ")", "[", "0", "]", ")", "\n", "", "", "config_fpaths", "=", "[", "p", "for", "p", "in", "config_fpaths", "if", "p", ".", "find", "(", "'_base_'", ")", "==", "-", "1", "]", "\n", "config_names", "=", "[", "relpath", "(", "p", ",", "config_dpath", ")", "for", "p", "in", "config_fpaths", "]", "\n", "\n", "print", "(", "'Using {} config files'", ".", "format", "(", "len", "(", "config_names", ")", ")", ")", "\n", "\n", "for", "config_fname", "in", "config_names", ":", "\n", "        ", "config_fpath", "=", "join", "(", "config_dpath", ",", "config_fname", ")", "\n", "config_mod", "=", "Config", ".", "fromfile", "(", "config_fpath", ")", "\n", "\n", "config_mod", ".", "model", "\n", "print", "(", "'Building segmentor, config_fpath = {!r}'", ".", "format", "(", "config_fpath", ")", ")", "\n", "\n", "# Remove pretrained keys to allow for testing in an offline environment", "\n", "if", "'pretrained'", "in", "config_mod", ".", "model", ":", "\n", "            ", "config_mod", ".", "model", "[", "'pretrained'", "]", "=", "None", "\n", "\n", "", "print", "(", "'building {}'", ".", "format", "(", "config_fname", ")", ")", "\n", "segmentor", "=", "build_segmentor", "(", "config_mod", ".", "model", ")", "\n", "assert", "segmentor", "is", "not", "None", "\n", "\n", "head_config", "=", "config_mod", ".", "model", "[", "'decode_head'", "]", "\n", "_check_decode_head", "(", "head_config", ",", "segmentor", ".", "decode_head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_config.test_config_data_pipeline": [[62, 125], ["test_config._get_config_directory", "print", "list", "print", "glob.glob", "os.path.relpath", "os.path.join", "print", "mmcv.Config.fromfile", "Config.fromfile.train_pipeline.pop", "config_mod.train_pipeline.pop.get", "Config.fromfile.train_pipeline.pop", "Config.fromfile.test_pipeline.pop", "Compose", "Compose", "np.random.randint", "np.random.randint", "dict", "print", "Compose.", "dict", "print", "Compose.", "os.path.join", "len", "img.astype.astype", "p.find"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._get_config_directory"], ["", "", "def", "test_config_data_pipeline", "(", ")", ":", "\n", "    ", "\"\"\"Test whether the data pipeline is valid and can process corner cases.\n\n    CommandLine:\n        xdoctest -m tests/test_config.py test_config_build_data_pipeline\n    \"\"\"", "\n", "from", "mmcv", "import", "Config", "\n", "from", "mmseg", ".", "datasets", ".", "pipelines", "import", "Compose", "\n", "import", "numpy", "as", "np", "\n", "\n", "config_dpath", "=", "_get_config_directory", "(", ")", "\n", "print", "(", "'Found config_dpath = {!r}'", ".", "format", "(", "config_dpath", ")", ")", "\n", "\n", "import", "glob", "\n", "config_fpaths", "=", "list", "(", "glob", ".", "glob", "(", "join", "(", "config_dpath", ",", "'**'", ",", "'*.py'", ")", ")", ")", "\n", "config_fpaths", "=", "[", "p", "for", "p", "in", "config_fpaths", "if", "p", ".", "find", "(", "'_base_'", ")", "==", "-", "1", "]", "\n", "config_names", "=", "[", "relpath", "(", "p", ",", "config_dpath", ")", "for", "p", "in", "config_fpaths", "]", "\n", "\n", "print", "(", "'Using {} config files'", ".", "format", "(", "len", "(", "config_names", ")", ")", ")", "\n", "\n", "for", "config_fname", "in", "config_names", ":", "\n", "        ", "config_fpath", "=", "join", "(", "config_dpath", ",", "config_fname", ")", "\n", "print", "(", "\n", "'Building data pipeline, config_fpath = {!r}'", ".", "format", "(", "config_fpath", ")", ")", "\n", "config_mod", "=", "Config", ".", "fromfile", "(", "config_fpath", ")", "\n", "\n", "# remove loading pipeline", "\n", "load_img_pipeline", "=", "config_mod", ".", "train_pipeline", ".", "pop", "(", "0", ")", "\n", "to_float32", "=", "load_img_pipeline", ".", "get", "(", "'to_float32'", ",", "False", ")", "\n", "config_mod", ".", "train_pipeline", ".", "pop", "(", "0", ")", "\n", "config_mod", ".", "test_pipeline", ".", "pop", "(", "0", ")", "\n", "\n", "train_pipeline", "=", "Compose", "(", "config_mod", ".", "train_pipeline", ")", "\n", "test_pipeline", "=", "Compose", "(", "config_mod", ".", "test_pipeline", ")", "\n", "\n", "img", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "size", "=", "(", "1024", ",", "2048", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "to_float32", ":", "\n", "            ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "seg", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "size", "=", "(", "1024", ",", "2048", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "results", "=", "dict", "(", "\n", "filename", "=", "'test_img.png'", ",", "\n", "ori_filename", "=", "'test_img.png'", ",", "\n", "img", "=", "img", ",", "\n", "img_shape", "=", "img", ".", "shape", ",", "\n", "ori_shape", "=", "img", ".", "shape", ",", "\n", "gt_semantic_seg", "=", "seg", ")", "\n", "results", "[", "'seg_fields'", "]", "=", "[", "'gt_semantic_seg'", "]", "\n", "\n", "print", "(", "'Test training data pipeline: \\n{!r}'", ".", "format", "(", "train_pipeline", ")", ")", "\n", "output_results", "=", "train_pipeline", "(", "results", ")", "\n", "assert", "output_results", "is", "not", "None", "\n", "\n", "results", "=", "dict", "(", "\n", "filename", "=", "'test_img.png'", ",", "\n", "ori_filename", "=", "'test_img.png'", ",", "\n", "img", "=", "img", ",", "\n", "img_shape", "=", "img", ".", "shape", ",", "\n", "ori_shape", "=", "img", ".", "shape", ",", "\n", ")", "\n", "print", "(", "'Test testing data pipeline: \\n{!r}'", ".", "format", "(", "test_pipeline", ")", ")", "\n", "output_results", "=", "test_pipeline", "(", "results", ")", "\n", "assert", "output_results", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_config._check_decode_head": [[127, 161], ["isinstance", "isinstance", "len", "range", "isinstance", "isinstance", "len", "len", "test_config._check_decode_head", "len", "len", "isinstance", "isinstance", "sum"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_config._check_decode_head"], ["", "", "def", "_check_decode_head", "(", "decode_head_cfg", ",", "decode_head", ")", ":", "\n", "    ", "if", "isinstance", "(", "decode_head_cfg", ",", "list", ")", ":", "\n", "        ", "assert", "isinstance", "(", "decode_head", ",", "nn", ".", "ModuleList", ")", "\n", "assert", "len", "(", "decode_head_cfg", ")", "==", "len", "(", "decode_head", ")", "\n", "num_heads", "=", "len", "(", "decode_head", ")", "\n", "for", "i", "in", "range", "(", "num_heads", ")", ":", "\n", "            ", "_check_decode_head", "(", "decode_head_cfg", "[", "i", "]", ",", "decode_head", "[", "i", "]", ")", "\n", "", "return", "\n", "# check consistency between head_config and roi_head", "\n", "", "assert", "decode_head_cfg", "[", "'type'", "]", "==", "decode_head", ".", "__class__", ".", "__name__", "\n", "\n", "assert", "decode_head_cfg", "[", "'type'", "]", "==", "decode_head", ".", "__class__", ".", "__name__", "\n", "\n", "in_channels", "=", "decode_head_cfg", ".", "in_channels", "\n", "input_transform", "=", "decode_head", ".", "input_transform", "\n", "assert", "input_transform", "in", "[", "'resize_concat'", ",", "'multiple_select'", ",", "None", "]", "\n", "if", "input_transform", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "in_channels", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "isinstance", "(", "decode_head", ".", "in_index", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "len", "(", "in_channels", ")", "==", "len", "(", "decode_head", ".", "in_index", ")", "\n", "", "elif", "input_transform", "==", "'resize_concat'", ":", "\n", "        ", "assert", "sum", "(", "in_channels", ")", "==", "decode_head", ".", "in_channels", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "in_channels", ",", "int", ")", "\n", "assert", "in_channels", "==", "decode_head", ".", "in_channels", "\n", "assert", "isinstance", "(", "decode_head", ".", "in_index", ",", "int", ")", "\n", "\n", "", "if", "decode_head_cfg", "[", "'type'", "]", "==", "'PointHead'", ":", "\n", "        ", "assert", "decode_head_cfg", ".", "channels", "+", "decode_head_cfg", ".", "num_classes", "==", "decode_head", ".", "fc_seg", ".", "in_channels", "\n", "assert", "decode_head", ".", "fc_seg", ".", "out_channels", "==", "decode_head_cfg", ".", "num_classes", "\n", "", "else", ":", "\n", "        ", "assert", "decode_head_cfg", ".", "channels", "==", "decode_head", ".", "conv_seg", ".", "in_channels", "\n", "assert", "decode_head", ".", "conv_seg", ".", "out_channels", "==", "decode_head_cfg", ".", "num_classes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_inference.test_test_time_augmentation_on_cpu": [[8, 30], ["mmcv.Config.fromfile", "dict", "mmseg.apis.init_segmentor", "mmcv.imread", "mmseg.apis.inference_segmentor", "os.join", "os.dirname"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.inference.init_segmentor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.apis.inference.inference_segmentor"], ["def", "test_test_time_augmentation_on_cpu", "(", ")", ":", "\n", "    ", "config_file", "=", "'configs/pspnet/pspnet_r50-d8_512x1024_40k_cityscapes.py'", "\n", "config", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "config_file", ")", "\n", "\n", "# Remove pretrain model download for testing", "\n", "config", ".", "model", ".", "pretrained", "=", "None", "\n", "# Replace SyncBN with BN to inference on CPU", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", "\n", "config", ".", "model", ".", "backbone", ".", "norm_cfg", "=", "norm_cfg", "\n", "config", ".", "model", ".", "decode_head", ".", "norm_cfg", "=", "norm_cfg", "\n", "config", ".", "model", ".", "auxiliary_head", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n", "# Enable test time augmentation", "\n", "config", ".", "data", ".", "test", ".", "pipeline", "[", "1", "]", ".", "flip", "=", "True", "\n", "\n", "checkpoint_file", "=", "None", "\n", "model", "=", "init_segmentor", "(", "config", ",", "checkpoint_file", ",", "device", "=", "'cpu'", ")", "\n", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'data/color.jpg'", ")", ",", "'color'", ")", "\n", "result", "=", "inference_segmentor", "(", "model", ",", "img", ")", "\n", "assert", "result", "[", "0", "]", ".", "shape", "==", "(", "288", ",", "512", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_metrics.get_confusion_matrix": [[6, 25], ["numpy.bincount().reshape", "numpy.bincount"], "function", ["None"], ["def", "get_confusion_matrix", "(", "pred_label", ",", "label", ",", "num_classes", ",", "ignore_index", ")", ":", "\n", "    ", "\"\"\"Intersection over Union\n       Args:\n           pred_label (np.ndarray): 2D predict map\n           label (np.ndarray): label 2D label map\n           num_classes (int): number of categories\n           ignore_index (int): index ignore in evaluation\n       \"\"\"", "\n", "\n", "mask", "=", "(", "label", "!=", "ignore_index", ")", "\n", "pred_label", "=", "pred_label", "[", "mask", "]", "\n", "label", "=", "label", "[", "mask", "]", "\n", "\n", "n", "=", "num_classes", "\n", "inds", "=", "n", "*", "label", "+", "pred_label", "\n", "\n", "mat", "=", "np", ".", "bincount", "(", "inds", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_metrics.legacy_mean_iou": [[28, 42], ["len", "numpy.zeros", "range", "len", "test_metrics.get_confusion_matrix", "numpy.diag().sum", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "numpy.diag", "numpy.diag", "numpy.diag", "np.zeros.sum", "np.zeros.sum"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_metrics.get_confusion_matrix"], ["", "def", "legacy_mean_iou", "(", "results", ",", "gt_seg_maps", ",", "num_classes", ",", "ignore_index", ")", ":", "\n", "    ", "num_imgs", "=", "len", "(", "results", ")", "\n", "assert", "len", "(", "gt_seg_maps", ")", "==", "num_imgs", "\n", "total_mat", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "mat", "=", "get_confusion_matrix", "(", "\n", "results", "[", "i", "]", ",", "gt_seg_maps", "[", "i", "]", ",", "num_classes", ",", "ignore_index", "=", "ignore_index", ")", "\n", "total_mat", "+=", "mat", "\n", "", "all_acc", "=", "np", ".", "diag", "(", "total_mat", ")", ".", "sum", "(", ")", "/", "total_mat", ".", "sum", "(", ")", "\n", "acc", "=", "np", ".", "diag", "(", "total_mat", ")", "/", "total_mat", ".", "sum", "(", "axis", "=", "1", ")", "\n", "iou", "=", "np", ".", "diag", "(", "total_mat", ")", "/", "(", "\n", "total_mat", ".", "sum", "(", "axis", "=", "1", ")", "+", "total_mat", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "total_mat", ")", ")", "\n", "\n", "return", "all_acc", ",", "acc", ",", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_metrics.legacy_mean_dice": [[45, 59], ["len", "numpy.zeros", "range", "len", "test_metrics.get_confusion_matrix", "numpy.diag().sum", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "np.zeros.sum", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_metrics.get_confusion_matrix"], ["", "def", "legacy_mean_dice", "(", "results", ",", "gt_seg_maps", ",", "num_classes", ",", "ignore_index", ")", ":", "\n", "    ", "num_imgs", "=", "len", "(", "results", ")", "\n", "assert", "len", "(", "gt_seg_maps", ")", "==", "num_imgs", "\n", "total_mat", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "mat", "=", "get_confusion_matrix", "(", "\n", "results", "[", "i", "]", ",", "gt_seg_maps", "[", "i", "]", ",", "num_classes", ",", "ignore_index", "=", "ignore_index", ")", "\n", "total_mat", "+=", "mat", "\n", "", "all_acc", "=", "np", ".", "diag", "(", "total_mat", ")", ".", "sum", "(", ")", "/", "total_mat", ".", "sum", "(", ")", "\n", "acc", "=", "np", ".", "diag", "(", "total_mat", ")", "/", "total_mat", ".", "sum", "(", "axis", "=", "1", ")", "\n", "dice", "=", "2", "*", "np", ".", "diag", "(", "total_mat", ")", "/", "(", "\n", "total_mat", ".", "sum", "(", "axis", "=", "1", ")", "+", "total_mat", ".", "sum", "(", "axis", "=", "0", ")", ")", "\n", "\n", "return", "all_acc", ",", "acc", ",", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_metrics.test_metrics": [[61, 123], ["numpy.random.randint", "numpy.random.randint", "mmseg.core.evaluation.eval_metrics", "test_metrics.legacy_mean_iou", "numpy.allclose", "numpy.allclose", "mmseg.core.evaluation.eval_metrics", "test_metrics.legacy_mean_dice", "numpy.allclose", "numpy.allclose", "mmseg.core.evaluation.eval_metrics", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.random.randint", "numpy.random.randint", "mmseg.core.evaluation.eval_metrics", "mmseg.core.evaluation.eval_metrics", "mmseg.core.evaluation.eval_metrics"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.eval_metrics", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_metrics.legacy_mean_iou", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.eval_metrics", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_metrics.legacy_mean_dice", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.eval_metrics", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.eval_metrics", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.eval_metrics", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.eval_metrics"], ["", "def", "test_metrics", "(", ")", ":", "\n", "    ", "pred_size", "=", "(", "10", ",", "30", ",", "30", ")", "\n", "num_classes", "=", "19", "\n", "ignore_index", "=", "255", "\n", "results", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_classes", ",", "size", "=", "pred_size", ")", "\n", "label", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_classes", ",", "size", "=", "pred_size", ")", "\n", "label", "[", ":", ",", "2", ",", "5", ":", "10", "]", "=", "ignore_index", "\n", "all_acc", ",", "acc", ",", "iou", "=", "eval_metrics", "(", "\n", "results", ",", "label", ",", "num_classes", ",", "ignore_index", ",", "metrics", "=", "'mIoU'", ")", "\n", "all_acc_l", ",", "acc_l", ",", "iou_l", "=", "legacy_mean_iou", "(", "results", ",", "label", ",", "num_classes", ",", "\n", "ignore_index", ")", "\n", "assert", "all_acc", "==", "all_acc_l", "\n", "assert", "np", ".", "allclose", "(", "acc", ",", "acc_l", ")", "\n", "assert", "np", ".", "allclose", "(", "iou", ",", "iou_l", ")", "\n", "\n", "all_acc", ",", "acc", ",", "dice", "=", "eval_metrics", "(", "\n", "results", ",", "label", ",", "num_classes", ",", "ignore_index", ",", "metrics", "=", "'mDice'", ")", "\n", "all_acc_l", ",", "acc_l", ",", "dice_l", "=", "legacy_mean_dice", "(", "results", ",", "label", ",", "num_classes", ",", "\n", "ignore_index", ")", "\n", "assert", "all_acc", "==", "all_acc_l", "\n", "assert", "np", ".", "allclose", "(", "acc", ",", "acc_l", ")", "\n", "assert", "np", ".", "allclose", "(", "dice", ",", "dice_l", ")", "\n", "\n", "all_acc", ",", "acc", ",", "iou", ",", "dice", "=", "eval_metrics", "(", "\n", "results", ",", "label", ",", "num_classes", ",", "ignore_index", ",", "metrics", "=", "[", "'mIoU'", ",", "'mDice'", "]", ")", "\n", "assert", "all_acc", "==", "all_acc_l", "\n", "assert", "np", ".", "allclose", "(", "acc", ",", "acc_l", ")", "\n", "assert", "np", ".", "allclose", "(", "iou", ",", "iou_l", ")", "\n", "assert", "np", ".", "allclose", "(", "dice", ",", "dice_l", ")", "\n", "\n", "results", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "5", ",", "size", "=", "pred_size", ")", "\n", "label", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "4", ",", "size", "=", "pred_size", ")", "\n", "all_acc", ",", "acc", ",", "iou", "=", "eval_metrics", "(", "\n", "results", ",", "\n", "label", ",", "\n", "num_classes", ",", "\n", "ignore_index", "=", "255", ",", "\n", "metrics", "=", "'mIoU'", ",", "\n", "nan_to_num", "=", "-", "1", ")", "\n", "assert", "acc", "[", "-", "1", "]", "==", "-", "1", "\n", "assert", "iou", "[", "-", "1", "]", "==", "-", "1", "\n", "\n", "all_acc", ",", "acc", ",", "dice", "=", "eval_metrics", "(", "\n", "results", ",", "\n", "label", ",", "\n", "num_classes", ",", "\n", "ignore_index", "=", "255", ",", "\n", "metrics", "=", "'mDice'", ",", "\n", "nan_to_num", "=", "-", "1", ")", "\n", "assert", "acc", "[", "-", "1", "]", "==", "-", "1", "\n", "assert", "dice", "[", "-", "1", "]", "==", "-", "1", "\n", "\n", "all_acc", ",", "acc", ",", "dice", ",", "iou", "=", "eval_metrics", "(", "\n", "results", ",", "\n", "label", ",", "\n", "num_classes", ",", "\n", "ignore_index", "=", "255", ",", "\n", "metrics", "=", "[", "'mDice'", ",", "'mIoU'", "]", ",", "\n", "nan_to_num", "=", "-", "1", ")", "\n", "assert", "acc", "[", "-", "1", "]", "==", "-", "1", "\n", "assert", "dice", "[", "-", "1", "]", "==", "-", "1", "\n", "assert", "iou", "[", "-", "1", "]", "==", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_metrics.test_mean_iou": [[125, 145], ["numpy.random.randint", "numpy.random.randint", "mmseg.core.evaluation.mean_iou", "test_metrics.legacy_mean_iou", "numpy.allclose", "numpy.allclose", "numpy.random.randint", "numpy.random.randint", "mmseg.core.evaluation.mean_iou"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.mean_iou", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_metrics.legacy_mean_iou", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.mean_iou"], ["", "def", "test_mean_iou", "(", ")", ":", "\n", "    ", "pred_size", "=", "(", "10", ",", "30", ",", "30", ")", "\n", "num_classes", "=", "19", "\n", "ignore_index", "=", "255", "\n", "results", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_classes", ",", "size", "=", "pred_size", ")", "\n", "label", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_classes", ",", "size", "=", "pred_size", ")", "\n", "label", "[", ":", ",", "2", ",", "5", ":", "10", "]", "=", "ignore_index", "\n", "all_acc", ",", "acc", ",", "iou", "=", "mean_iou", "(", "results", ",", "label", ",", "num_classes", ",", "ignore_index", ")", "\n", "all_acc_l", ",", "acc_l", ",", "iou_l", "=", "legacy_mean_iou", "(", "results", ",", "label", ",", "num_classes", ",", "\n", "ignore_index", ")", "\n", "assert", "all_acc", "==", "all_acc_l", "\n", "assert", "np", ".", "allclose", "(", "acc", ",", "acc_l", ")", "\n", "assert", "np", ".", "allclose", "(", "iou", ",", "iou_l", ")", "\n", "\n", "results", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "5", ",", "size", "=", "pred_size", ")", "\n", "label", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "4", ",", "size", "=", "pred_size", ")", "\n", "all_acc", ",", "acc", ",", "iou", "=", "mean_iou", "(", "\n", "results", ",", "label", ",", "num_classes", ",", "ignore_index", "=", "255", ",", "nan_to_num", "=", "-", "1", ")", "\n", "assert", "acc", "[", "-", "1", "]", "==", "-", "1", "\n", "assert", "iou", "[", "-", "1", "]", "==", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_metrics.test_mean_dice": [[147, 167], ["numpy.random.randint", "numpy.random.randint", "mmseg.core.evaluation.mean_dice", "test_metrics.legacy_mean_dice", "numpy.allclose", "numpy.allclose", "numpy.random.randint", "numpy.random.randint", "mmseg.core.evaluation.mean_dice"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.mean_dice", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.tests.test_metrics.legacy_mean_dice", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.metrics.mean_dice"], ["", "def", "test_mean_dice", "(", ")", ":", "\n", "    ", "pred_size", "=", "(", "10", ",", "30", ",", "30", ")", "\n", "num_classes", "=", "19", "\n", "ignore_index", "=", "255", "\n", "results", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_classes", ",", "size", "=", "pred_size", ")", "\n", "label", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_classes", ",", "size", "=", "pred_size", ")", "\n", "label", "[", ":", ",", "2", ",", "5", ":", "10", "]", "=", "ignore_index", "\n", "all_acc", ",", "acc", ",", "iou", "=", "mean_dice", "(", "results", ",", "label", ",", "num_classes", ",", "ignore_index", ")", "\n", "all_acc_l", ",", "acc_l", ",", "iou_l", "=", "legacy_mean_dice", "(", "results", ",", "label", ",", "num_classes", ",", "\n", "ignore_index", ")", "\n", "assert", "all_acc", "==", "all_acc_l", "\n", "assert", "np", ".", "allclose", "(", "acc", ",", "acc_l", ")", "\n", "assert", "np", ".", "allclose", "(", "iou", ",", "iou_l", ")", "\n", "\n", "results", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "5", ",", "size", "=", "pred_size", ")", "\n", "label", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "4", ",", "size", "=", "pred_size", ")", "\n", "all_acc", ",", "acc", ",", "iou", "=", "mean_dice", "(", "\n", "results", ",", "label", ",", "num_classes", ",", "ignore_index", "=", "255", ",", "nan_to_num", "=", "-", "1", ")", "\n", "assert", "acc", "[", "-", "1", "]", "==", "-", "1", "\n", "assert", "iou", "[", "-", "1", "]", "==", "-", "1", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_unet.check_norm_state": [[11, 18], ["isinstance"], "function", ["None"], ["def", "check_norm_state", "(", "modules", ",", "train_state", ")", ":", "\n", "    ", "\"\"\"Check if norm layer is in correct train state.\"\"\"", "\n", "for", "mod", "in", "modules", ":", "\n", "        ", "if", "isinstance", "(", "mod", ",", "_BatchNorm", ")", ":", "\n", "            ", "if", "mod", ".", "training", "!=", "train_state", ":", "\n", "                ", "return", "False", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_unet.test_unet_basic_conv_block": [[20, 87], ["mmseg.models.backbones.unet.BasicConvBlock", "torch.randn", "mmseg.models.backbones.unet.BasicConvBlock.", "mmseg.models.backbones.unet.BasicConvBlock", "torch.randn", "mmseg.models.backbones.unet.BasicConvBlock.", "mmseg.models.backbones.unet.BasicConvBlock", "torch.randn", "mmseg.models.backbones.unet.BasicConvBlock.", "mmseg.models.backbones.unet.BasicConvBlock", "pytest.raises", "dict", "mmseg.models.backbones.unet.BasicConvBlock", "pytest.raises", "mmseg.models.backbones.unet.BasicConvBlock", "pytest.raises", "mmseg.models.backbones.unet.BasicConvBlock", "torch.Size", "torch.Size", "torch.Size", "dict", "dict", "dict", "dict"], "function", ["None"], ["", "def", "test_unet_basic_conv_block", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet.", "\n", "        ", "dcn", "=", "dict", "(", "type", "=", "'DCN'", ",", "deform_groups", "=", "1", ",", "fallback_on_stride", "=", "False", ")", "\n", "BasicConvBlock", "(", "64", ",", "64", ",", "dcn", "=", "dcn", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet.", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "BasicConvBlock", "(", "64", ",", "64", ",", "plugins", "=", "plugins", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'GeneralizedAttention'", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "8", ",", "\n", "attention_type", "=", "'0010'", ",", "\n", "kv_stride", "=", "2", ")", ",", "\n", "position", "=", "'after_conv2'", ")", "\n", "]", "\n", "BasicConvBlock", "(", "64", ",", "64", ",", "plugins", "=", "plugins", ")", "\n", "\n", "# test BasicConvBlock with checkpoint forward", "\n", "", "block", "=", "BasicConvBlock", "(", "16", ",", "16", ",", "with_cp", "=", "True", ")", "\n", "assert", "block", ".", "with_cp", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "16", ",", "64", ",", "64", ",", "requires_grad", "=", "True", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "16", ",", "64", ",", "64", "]", ")", "\n", "\n", "block", "=", "BasicConvBlock", "(", "16", ",", "16", ",", "with_cp", "=", "False", ")", "\n", "assert", "not", "block", ".", "with_cp", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "16", ",", "64", ",", "64", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "16", ",", "64", ",", "64", "]", ")", "\n", "\n", "# test BasicConvBlock with stride convolution to downsample", "\n", "block", "=", "BasicConvBlock", "(", "16", ",", "16", ",", "stride", "=", "2", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "16", ",", "64", ",", "64", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "16", ",", "32", ",", "32", "]", ")", "\n", "\n", "# test BasicConvBlock structure and forward", "\n", "block", "=", "BasicConvBlock", "(", "16", ",", "64", ",", "num_convs", "=", "3", ",", "dilation", "=", "3", ")", "\n", "assert", "block", ".", "convs", "[", "0", "]", ".", "conv", ".", "in_channels", "==", "16", "\n", "assert", "block", ".", "convs", "[", "0", "]", ".", "conv", ".", "out_channels", "==", "64", "\n", "assert", "block", ".", "convs", "[", "0", "]", ".", "conv", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "convs", "[", "0", "]", ".", "conv", ".", "dilation", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "convs", "[", "0", "]", ".", "conv", ".", "padding", "==", "(", "1", ",", "1", ")", "\n", "\n", "assert", "block", ".", "convs", "[", "1", "]", ".", "conv", ".", "in_channels", "==", "64", "\n", "assert", "block", ".", "convs", "[", "1", "]", ".", "conv", ".", "out_channels", "==", "64", "\n", "assert", "block", ".", "convs", "[", "1", "]", ".", "conv", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "convs", "[", "1", "]", ".", "conv", ".", "dilation", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "convs", "[", "1", "]", ".", "conv", ".", "padding", "==", "(", "3", ",", "3", ")", "\n", "\n", "assert", "block", ".", "convs", "[", "2", "]", ".", "conv", ".", "in_channels", "==", "64", "\n", "assert", "block", ".", "convs", "[", "2", "]", ".", "conv", ".", "out_channels", "==", "64", "\n", "assert", "block", ".", "convs", "[", "2", "]", ".", "conv", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "convs", "[", "2", "]", ".", "conv", ".", "dilation", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "convs", "[", "2", "]", ".", "conv", ".", "padding", "==", "(", "3", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_unet.test_deconv_module": [[89, 137], ["mmseg.models.backbones.unet.DeconvModule", "torch.randn", "mmseg.models.backbones.unet.DeconvModule.", "mmseg.models.backbones.unet.DeconvModule", "torch.randn", "mmseg.models.backbones.unet.DeconvModule.", "torch.randn", "mmseg.models.backbones.unet.DeconvModule", "mmseg.models.backbones.unet.DeconvModule.", "mmseg.models.backbones.unet.DeconvModule", "mmseg.models.backbones.unet.DeconvModule.", "torch.randn", "mmseg.models.backbones.unet.DeconvModule", "mmseg.models.backbones.unet.DeconvModule.", "mmseg.models.backbones.unet.DeconvModule", "mmseg.models.backbones.unet.DeconvModule.", "pytest.raises", "mmseg.models.backbones.unet.DeconvModule", "pytest.raises", "mmseg.models.backbones.unet.DeconvModule", "pytest.raises", "mmseg.models.backbones.unet.DeconvModule", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "function", ["None"], ["", "def", "test_deconv_module", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# kernel_size should be greater than or equal to scale_factor and", "\n", "# (kernel_size - scale_factor) should be even numbers", "\n", "        ", "DeconvModule", "(", "64", ",", "32", ",", "kernel_size", "=", "1", ",", "scale_factor", "=", "2", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# kernel_size should be greater than or equal to scale_factor and", "\n", "# (kernel_size - scale_factor) should be even numbers", "\n", "        ", "DeconvModule", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "scale_factor", "=", "2", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# kernel_size should be greater than or equal to scale_factor and", "\n", "# (kernel_size - scale_factor) should be even numbers", "\n", "        ", "DeconvModule", "(", "64", ",", "32", ",", "kernel_size", "=", "5", ",", "scale_factor", "=", "4", ")", "\n", "\n", "# test DeconvModule with checkpoint forward and upsample 2X.", "\n", "", "block", "=", "DeconvModule", "(", "64", ",", "32", ",", "with_cp", "=", "True", ")", "\n", "assert", "block", ".", "with_cp", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "128", ",", "128", ",", "requires_grad", "=", "True", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "256", ",", "256", "]", ")", "\n", "\n", "block", "=", "DeconvModule", "(", "64", ",", "32", ",", "with_cp", "=", "False", ")", "\n", "assert", "not", "block", ".", "with_cp", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "128", ",", "128", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "256", ",", "256", "]", ")", "\n", "\n", "# test DeconvModule with different kernel size for upsample 2X.", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "64", ",", "64", ")", "\n", "block", "=", "DeconvModule", "(", "64", ",", "32", ",", "kernel_size", "=", "2", ",", "scale_factor", "=", "2", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "128", ",", "128", "]", ")", "\n", "\n", "block", "=", "DeconvModule", "(", "64", ",", "32", ",", "kernel_size", "=", "6", ",", "scale_factor", "=", "2", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "128", ",", "128", "]", ")", "\n", "\n", "# test DeconvModule with different kernel size for upsample 4X.", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "64", ",", "64", ")", "\n", "block", "=", "DeconvModule", "(", "64", ",", "32", ",", "kernel_size", "=", "4", ",", "scale_factor", "=", "4", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "256", ",", "256", "]", ")", "\n", "\n", "block", "=", "DeconvModule", "(", "64", ",", "32", ",", "kernel_size", "=", "6", ",", "scale_factor", "=", "4", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "256", ",", "256", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_unet.test_interp_conv": [[139, 194], ["mmseg.models.backbones.unet.InterpConv", "torch.randn", "mmseg.models.backbones.unet.InterpConv.", "mmseg.models.backbones.unet.InterpConv", "torch.randn", "mmseg.models.backbones.unet.InterpConv.", "mmseg.models.backbones.unet.InterpConv", "torch.randn", "mmseg.models.backbones.unet.InterpConv.", "isinstance", "isinstance", "mmseg.models.backbones.unet.InterpConv", "torch.randn", "mmseg.models.backbones.unet.InterpConv.", "isinstance", "isinstance", "mmseg.models.backbones.unet.InterpConv", "torch.randn", "mmseg.models.backbones.unet.InterpConv.", "isinstance", "isinstance", "mmseg.models.backbones.unet.InterpConv", "torch.randn", "mmseg.models.backbones.unet.InterpConv.", "isinstance", "isinstance", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "dict", "dict"], "function", ["None"], ["", "def", "test_interp_conv", "(", ")", ":", "\n", "# test InterpConv with checkpoint forward and upsample 2X.", "\n", "    ", "block", "=", "InterpConv", "(", "64", ",", "32", ",", "with_cp", "=", "True", ")", "\n", "assert", "block", ".", "with_cp", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "128", ",", "128", ",", "requires_grad", "=", "True", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "256", ",", "256", "]", ")", "\n", "\n", "block", "=", "InterpConv", "(", "64", ",", "32", ",", "with_cp", "=", "False", ")", "\n", "assert", "not", "block", ".", "with_cp", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "128", ",", "128", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "256", ",", "256", "]", ")", "\n", "\n", "# test InterpConv with conv_first=False for upsample 2X.", "\n", "block", "=", "InterpConv", "(", "64", ",", "32", ",", "conv_first", "=", "False", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "128", ",", "128", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "isinstance", "(", "block", ".", "interp_upsample", "[", "0", "]", ",", "nn", ".", "Upsample", ")", "\n", "assert", "isinstance", "(", "block", ".", "interp_upsample", "[", "1", "]", ",", "ConvModule", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "256", ",", "256", "]", ")", "\n", "\n", "# test InterpConv with conv_first=True for upsample 2X.", "\n", "block", "=", "InterpConv", "(", "64", ",", "32", ",", "conv_first", "=", "True", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "128", ",", "128", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "isinstance", "(", "block", ".", "interp_upsample", "[", "0", "]", ",", "ConvModule", ")", "\n", "assert", "isinstance", "(", "block", ".", "interp_upsample", "[", "1", "]", ",", "nn", ".", "Upsample", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "256", ",", "256", "]", ")", "\n", "\n", "# test InterpConv with bilinear upsample for upsample 2X.", "\n", "block", "=", "InterpConv", "(", "\n", "64", ",", "\n", "32", ",", "\n", "conv_first", "=", "False", ",", "\n", "upsampe_cfg", "=", "dict", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "128", ",", "128", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "isinstance", "(", "block", ".", "interp_upsample", "[", "0", "]", ",", "nn", ".", "Upsample", ")", "\n", "assert", "isinstance", "(", "block", ".", "interp_upsample", "[", "1", "]", ",", "ConvModule", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "256", ",", "256", "]", ")", "\n", "assert", "block", ".", "interp_upsample", "[", "0", "]", ".", "mode", "==", "'bilinear'", "\n", "\n", "# test InterpConv with nearest upsample for upsample 2X.", "\n", "block", "=", "InterpConv", "(", "\n", "64", ",", "\n", "32", ",", "\n", "conv_first", "=", "False", ",", "\n", "upsampe_cfg", "=", "dict", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "128", ",", "128", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "isinstance", "(", "block", ".", "interp_upsample", "[", "0", "]", ",", "nn", ".", "Upsample", ")", "\n", "assert", "isinstance", "(", "block", ".", "interp_upsample", "[", "1", "]", ",", "ConvModule", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "256", ",", "256", "]", ")", "\n", "assert", "block", ".", "interp_upsample", "[", "0", "]", ".", "mode", "==", "'nearest'", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_unet.test_up_conv_block": [[196, 318], ["mmseg.models.backbones.unet.UpConvBlock", "torch.randn", "torch.randn", "mmseg.models.backbones.unet.UpConvBlock.", "mmseg.models.backbones.unet.UpConvBlock", "torch.randn", "torch.randn", "mmseg.models.backbones.unet.UpConvBlock.", "mmseg.models.backbones.unet.UpConvBlock", "torch.randn", "torch.randn", "mmseg.models.backbones.unet.UpConvBlock.", "mmseg.models.backbones.unet.UpConvBlock", "torch.randn", "torch.randn", "mmseg.models.backbones.unet.UpConvBlock.", "mmseg.models.backbones.unet.UpConvBlock", "torch.randn", "torch.randn", "mmseg.models.backbones.unet.UpConvBlock.", "mmseg.models.backbones.unet.UpConvBlock", "torch.randn", "torch.randn", "mmseg.models.backbones.unet.UpConvBlock.", "pytest.raises", "dict", "mmseg.models.backbones.unet.UpConvBlock", "pytest.raises", "mmseg.models.backbones.unet.UpConvBlock", "pytest.raises", "mmseg.models.backbones.unet.UpConvBlock", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["None"], ["", "def", "test_up_conv_block", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet.", "\n", "        ", "dcn", "=", "dict", "(", "type", "=", "'DCN'", ",", "deform_groups", "=", "1", ",", "fallback_on_stride", "=", "False", ")", "\n", "UpConvBlock", "(", "BasicConvBlock", ",", "64", ",", "32", ",", "32", ",", "dcn", "=", "dcn", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet.", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "UpConvBlock", "(", "BasicConvBlock", ",", "64", ",", "32", ",", "32", ",", "plugins", "=", "plugins", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'GeneralizedAttention'", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "8", ",", "\n", "attention_type", "=", "'0010'", ",", "\n", "kv_stride", "=", "2", ")", ",", "\n", "position", "=", "'after_conv2'", ")", "\n", "]", "\n", "UpConvBlock", "(", "BasicConvBlock", ",", "64", ",", "32", ",", "32", ",", "plugins", "=", "plugins", ")", "\n", "\n", "# test UpConvBlock with checkpoint forward and upsample 2X.", "\n", "", "block", "=", "UpConvBlock", "(", "BasicConvBlock", ",", "64", ",", "32", ",", "32", ",", "with_cp", "=", "True", ")", "\n", "skip_x", "=", "torch", ".", "randn", "(", "1", ",", "32", ",", "256", ",", "256", ",", "requires_grad", "=", "True", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "128", ",", "128", ",", "requires_grad", "=", "True", ")", "\n", "x_out", "=", "block", "(", "skip_x", ",", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "256", ",", "256", "]", ")", "\n", "\n", "# test UpConvBlock with upsample=True for upsample 2X. The spatial size of", "\n", "# skip_x is 2X larger than x.", "\n", "block", "=", "UpConvBlock", "(", "\n", "BasicConvBlock", ",", "64", ",", "32", ",", "32", ",", "upsample_cfg", "=", "dict", "(", "type", "=", "'InterpConv'", ")", ")", "\n", "skip_x", "=", "torch", ".", "randn", "(", "1", ",", "32", ",", "256", ",", "256", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "128", ",", "128", ")", "\n", "x_out", "=", "block", "(", "skip_x", ",", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "256", ",", "256", "]", ")", "\n", "\n", "# test UpConvBlock with upsample=False for upsample 2X. The spatial size of", "\n", "# skip_x is the same as that of x.", "\n", "block", "=", "UpConvBlock", "(", "BasicConvBlock", ",", "64", ",", "32", ",", "32", ",", "upsample_cfg", "=", "None", ")", "\n", "skip_x", "=", "torch", ".", "randn", "(", "1", ",", "32", ",", "256", ",", "256", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "256", ",", "256", ")", "\n", "x_out", "=", "block", "(", "skip_x", ",", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "256", ",", "256", "]", ")", "\n", "\n", "# test UpConvBlock with different upsample method for upsample 2X.", "\n", "# The upsample method is interpolation upsample (bilinear or nearest).", "\n", "block", "=", "UpConvBlock", "(", "\n", "BasicConvBlock", ",", "\n", "64", ",", "\n", "32", ",", "\n", "32", ",", "\n", "upsample_cfg", "=", "dict", "(", "\n", "type", "=", "'InterpConv'", ",", "\n", "upsampe_cfg", "=", "dict", "(", "\n", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ")", ")", "\n", "skip_x", "=", "torch", ".", "randn", "(", "1", ",", "32", ",", "256", ",", "256", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "128", ",", "128", ")", "\n", "x_out", "=", "block", "(", "skip_x", ",", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "256", ",", "256", "]", ")", "\n", "\n", "# test UpConvBlock with different upsample method for upsample 2X.", "\n", "# The upsample method is deconvolution upsample.", "\n", "block", "=", "UpConvBlock", "(", "\n", "BasicConvBlock", ",", "\n", "64", ",", "\n", "32", ",", "\n", "32", ",", "\n", "upsample_cfg", "=", "dict", "(", "type", "=", "'DeconvModule'", ",", "kernel_size", "=", "4", ",", "scale_factor", "=", "2", ")", ")", "\n", "skip_x", "=", "torch", ".", "randn", "(", "1", ",", "32", ",", "256", ",", "256", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "128", ",", "128", ")", "\n", "x_out", "=", "block", "(", "skip_x", ",", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "256", ",", "256", "]", ")", "\n", "\n", "# test BasicConvBlock structure and forward", "\n", "block", "=", "UpConvBlock", "(", "\n", "conv_block", "=", "BasicConvBlock", ",", "\n", "in_channels", "=", "64", ",", "\n", "skip_channels", "=", "32", ",", "\n", "out_channels", "=", "32", ",", "\n", "num_convs", "=", "3", ",", "\n", "dilation", "=", "3", ",", "\n", "upsample_cfg", "=", "dict", "(", "\n", "type", "=", "'InterpConv'", ",", "\n", "upsampe_cfg", "=", "dict", "(", "\n", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ")", ")", "\n", "skip_x", "=", "torch", ".", "randn", "(", "1", ",", "32", ",", "256", ",", "256", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "128", ",", "128", ")", "\n", "x_out", "=", "block", "(", "skip_x", ",", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "256", ",", "256", "]", ")", "\n", "\n", "assert", "block", ".", "conv_block", ".", "convs", "[", "0", "]", ".", "conv", ".", "in_channels", "==", "64", "\n", "assert", "block", ".", "conv_block", ".", "convs", "[", "0", "]", ".", "conv", ".", "out_channels", "==", "32", "\n", "assert", "block", ".", "conv_block", ".", "convs", "[", "0", "]", ".", "conv", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "conv_block", ".", "convs", "[", "0", "]", ".", "conv", ".", "dilation", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "conv_block", ".", "convs", "[", "0", "]", ".", "conv", ".", "padding", "==", "(", "1", ",", "1", ")", "\n", "\n", "assert", "block", ".", "conv_block", ".", "convs", "[", "1", "]", ".", "conv", ".", "in_channels", "==", "32", "\n", "assert", "block", ".", "conv_block", ".", "convs", "[", "1", "]", ".", "conv", ".", "out_channels", "==", "32", "\n", "assert", "block", ".", "conv_block", ".", "convs", "[", "1", "]", ".", "conv", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "conv_block", ".", "convs", "[", "1", "]", ".", "conv", ".", "dilation", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "conv_block", ".", "convs", "[", "1", "]", ".", "conv", ".", "padding", "==", "(", "3", ",", "3", ")", "\n", "\n", "assert", "block", ".", "conv_block", ".", "convs", "[", "2", "]", ".", "conv", ".", "in_channels", "==", "32", "\n", "assert", "block", ".", "conv_block", ".", "convs", "[", "2", "]", ".", "conv", ".", "out_channels", "==", "32", "\n", "assert", "block", ".", "conv_block", ".", "convs", "[", "2", "]", ".", "conv", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "conv_block", ".", "convs", "[", "2", "]", ".", "conv", ".", "dilation", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "conv_block", ".", "convs", "[", "2", "]", ".", "conv", ".", "padding", "==", "(", "3", ",", "3", ")", "\n", "\n", "assert", "block", ".", "upsample", ".", "interp_upsample", "[", "1", "]", ".", "conv", ".", "in_channels", "==", "64", "\n", "assert", "block", ".", "upsample", ".", "interp_upsample", "[", "1", "]", ".", "conv", ".", "out_channels", "==", "32", "\n", "assert", "block", ".", "upsample", ".", "interp_upsample", "[", "1", "]", ".", "conv", ".", "kernel_size", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "upsample", ".", "interp_upsample", "[", "1", "]", ".", "conv", ".", "dilation", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "upsample", ".", "interp_upsample", "[", "1", "]", ".", "conv", ".", "padding", "==", "(", "0", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_unet.test_unet": [[320, 834], ["mmseg.models.backbones.unet.UNet", "mmseg.models.backbones.unet.UNet.train", "test_unet.check_norm_state", "mmseg.models.backbones.unet.UNet", "mmseg.models.backbones.unet.UNet.train", "test_unet.check_norm_state", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "mmseg.models.backbones.unet.UNet", "print", "torch.randn", "mmseg.models.backbones.unet.UNet.", "mmseg.models.backbones.unet.UNet", "print", "torch.randn", "mmseg.models.backbones.unet.UNet.", "mmseg.models.backbones.unet.UNet", "print", "torch.randn", "mmseg.models.backbones.unet.UNet.", "mmseg.models.backbones.unet.UNet", "print", "torch.randn", "mmseg.models.backbones.unet.UNet.", "mmseg.models.backbones.unet.UNet", "mmseg.models.backbones.unet.UNet.init_weights", "print", "torch.randn", "mmseg.models.backbones.unet.UNet.", "pytest.raises", "dict", "mmseg.models.backbones.unet.UNet", "pytest.raises", "mmseg.models.backbones.unet.UNet", "pytest.raises", "mmseg.models.backbones.unet.UNet", "pytest.raises", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "pytest.raises", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "pytest.raises", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "pytest.raises", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "pytest.raises", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "pytest.raises", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "pytest.raises", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "pytest.raises", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "pytest.raises", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "pytest.raises", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "pytest.raises", "mmseg.models.backbones.unet.UNet", "torch.randn", "mmseg.models.backbones.unet.UNet.", "mmseg.models.backbones.unet.UNet.modules", "mmseg.models.backbones.unet.UNet.modules", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.check_norm_state", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.check_norm_state", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights"], ["", "def", "test_unet", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet.", "\n", "        ", "dcn", "=", "dict", "(", "type", "=", "'DCN'", ",", "deform_groups", "=", "1", ",", "fallback_on_stride", "=", "False", ")", "\n", "UNet", "(", "3", ",", "64", ",", "5", ",", "dcn", "=", "dcn", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet.", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "UNet", "(", "3", ",", "64", ",", "5", ",", "plugins", "=", "plugins", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'GeneralizedAttention'", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "8", ",", "\n", "attention_type", "=", "'0010'", ",", "\n", "kv_stride", "=", "2", ")", ",", "\n", "position", "=", "'after_conv2'", ")", "\n", "]", "\n", "UNet", "(", "3", ",", "64", ",", "5", ",", "plugins", "=", "plugins", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Check whether the input image size can be devisible by the whole", "\n", "# downsample rate of the encoder. The whole downsample rate of this", "\n", "# case is 8.", "\n", "        ", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "4", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "65", ",", "65", ")", "\n", "unet", "(", "x", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Check whether the input image size can be devisible by the whole", "\n", "# downsample rate of the encoder. The whole downsample rate of this", "\n", "# case is 16.", "\n", "        ", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "True", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "65", ",", "65", ")", "\n", "unet", "(", "x", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Check whether the input image size can be devisible by the whole", "\n", "# downsample rate of the encoder. The whole downsample rate of this", "\n", "# case is 8.", "\n", "        ", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "False", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "65", ",", "65", ")", "\n", "unet", "(", "x", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Check whether the input image size can be devisible by the whole", "\n", "# downsample rate of the encoder. The whole downsample rate of this", "\n", "# case is 8.", "\n", "        ", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "False", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "65", ",", "65", ")", "\n", "unet", "(", "x", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Check whether the input image size can be devisible by the whole", "\n", "# downsample rate of the encoder. The whole downsample rate of this", "\n", "# case is 32.", "\n", "        ", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "6", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "True", ",", "True", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "65", ",", "65", ")", "\n", "unet", "(", "x", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Check if num_stages matchs strides, len(strides)=num_stages", "\n", "        ", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "True", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "64", ",", "64", ")", "\n", "unet", "(", "x", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Check if num_stages matchs strides, len(enc_num_convs)=num_stages", "\n", "        ", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "True", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "64", ",", "64", ")", "\n", "unet", "(", "x", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Check if num_stages matchs strides, len(dec_num_convs)=num_stages-1", "\n", "        ", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "True", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "64", ",", "64", ")", "\n", "unet", "(", "x", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Check if num_stages matchs strides, len(downsamples)=num_stages-1", "\n", "        ", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "64", ",", "64", ")", "\n", "unet", "(", "x", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Check if num_stages matchs strides, len(enc_dilations)=num_stages", "\n", "        ", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "True", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "64", ",", "64", ")", "\n", "unet", "(", "x", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Check if num_stages matchs strides, len(dec_dilations)=num_stages-1", "\n", "        ", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "True", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "64", ",", "64", ")", "\n", "unet", "(", "x", ")", "\n", "\n", "# test UNet norm_eval=True", "\n", "", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "True", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "norm_eval", "=", "True", ")", "\n", "unet", ".", "train", "(", ")", "\n", "assert", "check_norm_state", "(", "unet", ".", "modules", "(", ")", ",", "False", ")", "\n", "\n", "# test UNet norm_eval=False", "\n", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "True", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "norm_eval", "=", "False", ")", "\n", "unet", ".", "train", "(", ")", "\n", "assert", "check_norm_state", "(", "unet", ".", "modules", "(", ")", ",", "True", ")", "\n", "\n", "# test UNet forward and outputs. The whole downsample rate is 16.", "\n", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "True", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "128", ",", "128", ")", "\n", "x_outs", "=", "unet", "(", "x", ")", "\n", "assert", "x_outs", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "1024", ",", "8", ",", "8", "]", ")", "\n", "assert", "x_outs", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "512", ",", "16", ",", "16", "]", ")", "\n", "assert", "x_outs", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "128", ",", "64", ",", "64", "]", ")", "\n", "assert", "x_outs", "[", "4", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "64", ",", "128", ",", "128", "]", ")", "\n", "\n", "# test UNet forward and outputs. The whole downsample rate is 8.", "\n", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "False", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "128", ",", "128", ")", "\n", "x_outs", "=", "unet", "(", "x", ")", "\n", "assert", "x_outs", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "1024", ",", "16", ",", "16", "]", ")", "\n", "assert", "x_outs", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "512", ",", "16", ",", "16", "]", ")", "\n", "assert", "x_outs", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "128", ",", "64", ",", "64", "]", ")", "\n", "assert", "x_outs", "[", "4", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "64", ",", "128", ",", "128", "]", ")", "\n", "\n", "# test UNet forward and outputs. The whole downsample rate is 8.", "\n", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "False", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "128", ",", "128", ")", "\n", "x_outs", "=", "unet", "(", "x", ")", "\n", "assert", "x_outs", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "1024", ",", "16", ",", "16", "]", ")", "\n", "assert", "x_outs", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "512", ",", "16", ",", "16", "]", ")", "\n", "assert", "x_outs", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "128", ",", "64", ",", "64", "]", ")", "\n", "assert", "x_outs", "[", "4", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "64", ",", "128", ",", "128", "]", ")", "\n", "\n", "# test UNet forward and outputs. The whole downsample rate is 4.", "\n", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "False", ",", "False", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "128", ",", "128", ")", "\n", "x_outs", "=", "unet", "(", "x", ")", "\n", "assert", "x_outs", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "1024", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "512", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "128", ",", "64", ",", "64", "]", ")", "\n", "assert", "x_outs", "[", "4", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "64", ",", "128", ",", "128", "]", ")", "\n", "\n", "# test UNet forward and outputs. The whole downsample rate is 4.", "\n", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "False", ",", "False", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "128", ",", "128", ")", "\n", "x_outs", "=", "unet", "(", "x", ")", "\n", "assert", "x_outs", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "1024", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "512", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "128", ",", "64", ",", "64", "]", ")", "\n", "assert", "x_outs", "[", "4", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "64", ",", "128", ",", "128", "]", ")", "\n", "\n", "# test UNet forward and outputs. The whole downsample rate is 8.", "\n", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "False", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "128", ",", "128", ")", "\n", "x_outs", "=", "unet", "(", "x", ")", "\n", "assert", "x_outs", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "1024", ",", "16", ",", "16", "]", ")", "\n", "assert", "x_outs", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "512", ",", "16", ",", "16", "]", ")", "\n", "assert", "x_outs", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "128", ",", "64", ",", "64", "]", ")", "\n", "assert", "x_outs", "[", "4", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "64", ",", "128", ",", "128", "]", ")", "\n", "\n", "# test UNet forward and outputs. The whole downsample rate is 4.", "\n", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "False", ",", "False", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "128", ",", "128", ")", "\n", "x_outs", "=", "unet", "(", "x", ")", "\n", "assert", "x_outs", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "1024", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "512", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "128", ",", "64", ",", "64", "]", ")", "\n", "assert", "x_outs", "[", "4", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "64", ",", "128", ",", "128", "]", ")", "\n", "\n", "# test UNet forward and outputs. The whole downsample rate is 2.", "\n", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "False", ",", "False", ",", "False", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "128", ",", "128", ")", "\n", "x_outs", "=", "unet", "(", "x", ")", "\n", "assert", "x_outs", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "1024", ",", "64", ",", "64", "]", ")", "\n", "assert", "x_outs", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "512", ",", "64", ",", "64", "]", ")", "\n", "assert", "x_outs", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "64", ",", "64", "]", ")", "\n", "assert", "x_outs", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "128", ",", "64", ",", "64", "]", ")", "\n", "assert", "x_outs", "[", "4", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "64", ",", "128", ",", "128", "]", ")", "\n", "\n", "# test UNet forward and outputs. The whole downsample rate is 1.", "\n", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "False", ",", "False", ",", "False", ",", "False", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "128", ",", "128", ")", "\n", "x_outs", "=", "unet", "(", "x", ")", "\n", "assert", "x_outs", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "1024", ",", "128", ",", "128", "]", ")", "\n", "assert", "x_outs", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "512", ",", "128", ",", "128", "]", ")", "\n", "assert", "x_outs", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "128", ",", "128", "]", ")", "\n", "assert", "x_outs", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "128", ",", "128", ",", "128", "]", ")", "\n", "assert", "x_outs", "[", "4", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "64", ",", "128", ",", "128", "]", ")", "\n", "\n", "# test UNet forward and outputs. The whole downsample rate is 16.", "\n", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "True", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "print", "(", "unet", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "128", ",", "128", ")", "\n", "x_outs", "=", "unet", "(", "x", ")", "\n", "assert", "x_outs", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "1024", ",", "8", ",", "8", "]", ")", "\n", "assert", "x_outs", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "512", ",", "16", ",", "16", "]", ")", "\n", "assert", "x_outs", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "128", ",", "64", ",", "64", "]", ")", "\n", "assert", "x_outs", "[", "4", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "64", ",", "128", ",", "128", "]", ")", "\n", "\n", "# test UNet forward and outputs. The whole downsample rate is 8.", "\n", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "False", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "print", "(", "unet", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "128", ",", "128", ")", "\n", "x_outs", "=", "unet", "(", "x", ")", "\n", "assert", "x_outs", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "1024", ",", "16", ",", "16", "]", ")", "\n", "assert", "x_outs", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "512", ",", "16", ",", "16", "]", ")", "\n", "assert", "x_outs", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "128", ",", "64", ",", "64", "]", ")", "\n", "assert", "x_outs", "[", "4", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "64", ",", "128", ",", "128", "]", ")", "\n", "\n", "# test UNet forward and outputs. The whole downsample rate is 8.", "\n", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "True", ",", "False", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "print", "(", "unet", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "128", ",", "128", ")", "\n", "x_outs", "=", "unet", "(", "x", ")", "\n", "assert", "x_outs", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "1024", ",", "16", ",", "16", "]", ")", "\n", "assert", "x_outs", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "512", ",", "16", ",", "16", "]", ")", "\n", "assert", "x_outs", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "128", ",", "64", ",", "64", "]", ")", "\n", "assert", "x_outs", "[", "4", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "64", ",", "128", ",", "128", "]", ")", "\n", "\n", "# test UNet forward and outputs. The whole downsample rate is 4.", "\n", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "False", ",", "False", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "print", "(", "unet", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "128", ",", "128", ")", "\n", "x_outs", "=", "unet", "(", "x", ")", "\n", "assert", "x_outs", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "1024", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "512", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "128", ",", "64", ",", "64", "]", ")", "\n", "assert", "x_outs", "[", "4", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "64", ",", "128", ",", "128", "]", ")", "\n", "\n", "# test UNet init_weights method.", "\n", "unet", "=", "UNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "5", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "1", ",", "1", ")", ",", "\n", "enc_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dec_num_convs", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "downsamples", "=", "(", "True", ",", "True", ",", "False", ",", "False", ")", ",", "\n", "enc_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dec_dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "unet", ".", "init_weights", "(", "pretrained", "=", "None", ")", "\n", "print", "(", "unet", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "128", ",", "128", ")", "\n", "x_outs", "=", "unet", "(", "x", ")", "\n", "assert", "x_outs", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "1024", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "512", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "32", ",", "32", "]", ")", "\n", "assert", "x_outs", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "128", ",", "64", ",", "64", "]", ")", "\n", "assert", "x_outs", "[", "4", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "64", ",", "128", ",", "128", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.is_block": [[17, 22], ["isinstance"], "function", ["None"], ["def", "is_block", "(", "modules", ")", ":", "\n", "    ", "\"\"\"Check if is ResNet building block.\"\"\"", "\n", "if", "isinstance", "(", "modules", ",", "(", "BasicBlock", ",", "Bottleneck", ",", "BottleneckX", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.is_norm": [[24, 29], ["isinstance"], "function", ["None"], ["", "def", "is_norm", "(", "modules", ")", ":", "\n", "    ", "\"\"\"Check if is one of the norms.\"\"\"", "\n", "if", "isinstance", "(", "modules", ",", "(", "GroupNorm", ",", "_BatchNorm", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.all_zeros": [[31, 42], ["torch.allclose", "hasattr", "torch.zeros_like", "torch.allclose", "torch.zeros_like"], "function", ["None"], ["", "def", "all_zeros", "(", "modules", ")", ":", "\n", "    ", "\"\"\"Check if the weight(and bias) is all zero.\"\"\"", "\n", "weight_zero", "=", "torch", ".", "allclose", "(", "modules", ".", "weight", ".", "data", ",", "\n", "torch", ".", "zeros_like", "(", "modules", ".", "weight", ".", "data", ")", ")", "\n", "if", "hasattr", "(", "modules", ",", "'bias'", ")", ":", "\n", "        ", "bias_zero", "=", "torch", ".", "allclose", "(", "modules", ".", "bias", ".", "data", ",", "\n", "torch", ".", "zeros_like", "(", "modules", ".", "bias", ".", "data", ")", ")", "\n", "", "else", ":", "\n", "        ", "bias_zero", "=", "True", "\n", "\n", "", "return", "weight_zero", "and", "bias_zero", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.check_norm_state": [[44, 51], ["isinstance"], "function", ["None"], ["", "def", "check_norm_state", "(", "modules", ",", "train_state", ")", ":", "\n", "    ", "\"\"\"Check if norm layer is in correct train state.\"\"\"", "\n", "for", "mod", "in", "modules", ":", "\n", "        ", "if", "isinstance", "(", "mod", ",", "_BatchNorm", ")", ":", "\n", "            ", "if", "mod", ".", "training", "!=", "train_state", ":", "\n", "                ", "return", "False", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.test_resnet_basic_block": [[53, 100], ["mmseg.models.backbones.resnet.BasicBlock", "torch.randn", "mmseg.models.backbones.resnet.BasicBlock.", "mmseg.models.backbones.resnet.BasicBlock", "torch.randn", "mmseg.models.backbones.resnet.BasicBlock.", "pytest.raises", "dict", "mmseg.models.backbones.resnet.BasicBlock", "pytest.raises", "mmseg.models.backbones.resnet.BasicBlock", "pytest.raises", "mmseg.models.backbones.resnet.BasicBlock", "torch.Size", "torch.Size", "dict", "dict", "dict", "dict"], "function", ["None"], ["", "def", "test_resnet_basic_block", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet.", "\n", "        ", "dcn", "=", "dict", "(", "type", "=", "'DCN'", ",", "deform_groups", "=", "1", ",", "fallback_on_stride", "=", "False", ")", "\n", "BasicBlock", "(", "64", ",", "64", ",", "dcn", "=", "dcn", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet.", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "BasicBlock", "(", "64", ",", "64", ",", "plugins", "=", "plugins", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'GeneralizedAttention'", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "8", ",", "\n", "attention_type", "=", "'0010'", ",", "\n", "kv_stride", "=", "2", ")", ",", "\n", "position", "=", "'after_conv2'", ")", "\n", "]", "\n", "BasicBlock", "(", "64", ",", "64", ",", "plugins", "=", "plugins", ")", "\n", "\n", "# Test BasicBlock with checkpoint forward", "\n", "", "block", "=", "BasicBlock", "(", "16", ",", "16", ",", "with_cp", "=", "True", ")", "\n", "assert", "block", ".", "with_cp", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "16", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "16", ",", "56", ",", "56", "]", ")", "\n", "\n", "# test BasicBlock structure and forward", "\n", "block", "=", "BasicBlock", "(", "64", ",", "64", ")", "\n", "assert", "block", ".", "conv1", ".", "in_channels", "==", "64", "\n", "assert", "block", ".", "conv1", ".", "out_channels", "==", "64", "\n", "assert", "block", ".", "conv1", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "conv2", ".", "in_channels", "==", "64", "\n", "assert", "block", ".", "conv2", ".", "out_channels", "==", "64", "\n", "assert", "block", ".", "conv2", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.test_resnet_bottleneck": [[102, 234], ["mmseg.models.backbones.resnest.Bottleneck", "torch.randn", "mmseg.models.backbones.resnest.Bottleneck.", "mmseg.models.backbones.resnest.Bottleneck", "mmseg.models.backbones.resnest.Bottleneck", "dict", "mmseg.models.backbones.resnest.Bottleneck", "isinstance", "mmseg.models.backbones.resnest.Bottleneck", "torch.randn", "mmseg.models.backbones.resnest.Bottleneck.", "mmseg.models.backbones.resnest.Bottleneck", "torch.randn", "mmseg.models.backbones.resnest.Bottleneck.", "mmseg.models.backbones.resnest.Bottleneck", "torch.randn", "mmseg.models.backbones.resnest.Bottleneck.", "mmseg.models.backbones.resnest.Bottleneck", "torch.randn", "mmseg.models.backbones.resnest.Bottleneck.", "mmseg.models.backbones.resnest.Bottleneck", "torch.randn", "mmseg.models.backbones.resnest.Bottleneck.", "pytest.raises", "mmseg.models.backbones.resnest.Bottleneck", "pytest.raises", "mmseg.models.backbones.resnest.Bottleneck", "pytest.raises", "mmseg.models.backbones.resnest.Bottleneck", "pytest.raises", "mmseg.models.backbones.resnest.Bottleneck", "torch.Size", "pytest.raises", "mmseg.models.backbones.resnest.Bottleneck", "torch.Size", "dict", "torch.Size", "dict", "torch.Size", "dict", "dict", "dict", "torch.Size", "dict", "dict", "dict", "torch.Size", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["None"], ["", "def", "test_resnet_bottleneck", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Style must be in ['pytorch', 'caffe']", "\n", "        ", "Bottleneck", "(", "64", ",", "64", ",", "style", "=", "'tensorflow'", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Allowed positions are 'after_conv1', 'after_conv2', 'after_conv3'", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv4'", ")", "\n", "]", "\n", "Bottleneck", "(", "64", ",", "16", ",", "plugins", "=", "plugins", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Need to specify different postfix to avoid duplicate plugin name", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", ",", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "Bottleneck", "(", "64", ",", "16", ",", "plugins", "=", "plugins", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "# Plugin type is not supported", "\n", "        ", "plugins", "=", "[", "dict", "(", "cfg", "=", "dict", "(", "type", "=", "'WrongPlugin'", ")", ",", "position", "=", "'after_conv3'", ")", "]", "\n", "Bottleneck", "(", "64", ",", "16", ",", "plugins", "=", "plugins", ")", "\n", "\n", "# Test Bottleneck with checkpoint forward", "\n", "", "block", "=", "Bottleneck", "(", "64", ",", "16", ",", "with_cp", "=", "True", ")", "\n", "assert", "block", ".", "with_cp", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test Bottleneck style", "\n", "block", "=", "Bottleneck", "(", "64", ",", "64", ",", "stride", "=", "2", ",", "style", "=", "'pytorch'", ")", "\n", "assert", "block", ".", "conv1", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "conv2", ".", "stride", "==", "(", "2", ",", "2", ")", "\n", "block", "=", "Bottleneck", "(", "64", ",", "64", ",", "stride", "=", "2", ",", "style", "=", "'caffe'", ")", "\n", "assert", "block", ".", "conv1", ".", "stride", "==", "(", "2", ",", "2", ")", "\n", "assert", "block", ".", "conv2", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "\n", "# Test Bottleneck DCN", "\n", "dcn", "=", "dict", "(", "type", "=", "'DCN'", ",", "deform_groups", "=", "1", ",", "fallback_on_stride", "=", "False", ")", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "Bottleneck", "(", "64", ",", "64", ",", "dcn", "=", "dcn", ",", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv'", ")", ")", "\n", "", "block", "=", "Bottleneck", "(", "64", ",", "64", ",", "dcn", "=", "dcn", ")", "\n", "assert", "isinstance", "(", "block", ".", "conv2", ",", "DeformConv2dPack", ")", "\n", "\n", "# Test Bottleneck forward", "\n", "block", "=", "Bottleneck", "(", "64", ",", "16", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test Bottleneck with 1 ContextBlock after conv3", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "block", "=", "Bottleneck", "(", "64", ",", "16", ",", "plugins", "=", "plugins", ")", "\n", "assert", "block", ".", "context_block", ".", "in_channels", "==", "64", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test Bottleneck with 1 GeneralizedAttention after conv2", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'GeneralizedAttention'", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "8", ",", "\n", "attention_type", "=", "'0010'", ",", "\n", "kv_stride", "=", "2", ")", ",", "\n", "position", "=", "'after_conv2'", ")", "\n", "]", "\n", "block", "=", "Bottleneck", "(", "64", ",", "16", ",", "plugins", "=", "plugins", ")", "\n", "assert", "block", ".", "gen_attention_block", ".", "in_channels", "==", "16", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test Bottleneck with 1 GeneralizedAttention after conv2, 1 NonLocal2d", "\n", "# after conv2, 1 ContextBlock after conv3", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'GeneralizedAttention'", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "8", ",", "\n", "attention_type", "=", "'0010'", ",", "\n", "kv_stride", "=", "2", ")", ",", "\n", "position", "=", "'after_conv2'", ")", ",", "\n", "dict", "(", "cfg", "=", "dict", "(", "type", "=", "'NonLocal2d'", ")", ",", "position", "=", "'after_conv2'", ")", ",", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "block", "=", "Bottleneck", "(", "64", ",", "16", ",", "plugins", "=", "plugins", ")", "\n", "assert", "block", ".", "gen_attention_block", ".", "in_channels", "==", "16", "\n", "assert", "block", ".", "nonlocal_block", ".", "in_channels", "==", "16", "\n", "assert", "block", ".", "context_block", ".", "in_channels", "==", "64", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test Bottleneck with 1 ContextBlock after conv2, 2 ContextBlock after", "\n", "# conv3", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ",", "postfix", "=", "1", ")", ",", "\n", "position", "=", "'after_conv2'", ")", ",", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ",", "postfix", "=", "2", ")", ",", "\n", "position", "=", "'after_conv3'", ")", ",", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ",", "postfix", "=", "3", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "block", "=", "Bottleneck", "(", "64", ",", "16", ",", "plugins", "=", "plugins", ")", "\n", "assert", "block", ".", "context_block1", ".", "in_channels", "==", "16", "\n", "assert", "block", ".", "context_block2", ".", "in_channels", "==", "64", "\n", "assert", "block", ".", "context_block3", ".", "in_channels", "==", "64", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.test_resnet_res_layer": [[236, 306], ["mmseg.models.utils.ResLayer", "range", "range", "torch.randn", "mmseg.models.utils.ResLayer.", "mmseg.models.utils.ResLayer", "range", "torch.randn", "mmseg.models.utils.ResLayer.", "mmseg.models.utils.ResLayer", "range", "torch.randn", "mmseg.models.utils.ResLayer.", "mmseg.models.utils.ResLayer", "isinstance", "range", "torch.randn", "mmseg.models.utils.ResLayer.", "mmseg.models.utils.ResLayer", "range", "torch.randn", "mmseg.models.utils.ResLayer.", "mmseg.models.utils.ResLayer", "range", "torch.randn", "mmseg.models.utils.ResLayer.", "mmseg.models.utils.ResLayer", "torch.randn", "mmseg.models.utils.ResLayer.", "len", "len", "len", "torch.Size", "len", "torch.Size", "len", "torch.Size", "len", "torch.Size", "len", "torch.Size", "len", "torch.Size", "torch.Size"], "function", ["None"], ["", "def", "test_resnet_res_layer", "(", ")", ":", "\n", "# Test ResLayer of 3 Bottleneck w\\o downsample", "\n", "    ", "layer", "=", "ResLayer", "(", "Bottleneck", ",", "64", ",", "16", ",", "3", ")", "\n", "assert", "len", "(", "layer", ")", "==", "3", "\n", "assert", "layer", "[", "0", "]", ".", "conv1", ".", "in_channels", "==", "64", "\n", "assert", "layer", "[", "0", "]", ".", "conv1", ".", "out_channels", "==", "16", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "layer", ")", ")", ":", "\n", "        ", "assert", "layer", "[", "i", "]", ".", "conv1", ".", "in_channels", "==", "64", "\n", "assert", "layer", "[", "i", "]", ".", "conv1", ".", "out_channels", "==", "16", "\n", "", "for", "i", "in", "range", "(", "len", "(", "layer", ")", ")", ":", "\n", "        ", "assert", "layer", "[", "i", "]", ".", "downsample", "is", "None", "\n", "", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "layer", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test ResLayer of 3 Bottleneck with downsample", "\n", "layer", "=", "ResLayer", "(", "Bottleneck", ",", "64", ",", "64", ",", "3", ")", "\n", "assert", "layer", "[", "0", "]", ".", "downsample", "[", "0", "]", ".", "out_channels", "==", "256", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "layer", ")", ")", ":", "\n", "        ", "assert", "layer", "[", "i", "]", ".", "downsample", "is", "None", "\n", "", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "layer", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test ResLayer of 3 Bottleneck with stride=2", "\n", "layer", "=", "ResLayer", "(", "Bottleneck", ",", "64", ",", "64", ",", "3", ",", "stride", "=", "2", ")", "\n", "assert", "layer", "[", "0", "]", ".", "downsample", "[", "0", "]", ".", "out_channels", "==", "256", "\n", "assert", "layer", "[", "0", "]", ".", "downsample", "[", "0", "]", ".", "stride", "==", "(", "2", ",", "2", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "layer", ")", ")", ":", "\n", "        ", "assert", "layer", "[", "i", "]", ".", "downsample", "is", "None", "\n", "", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "layer", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "28", ",", "28", "]", ")", "\n", "\n", "# Test ResLayer of 3 Bottleneck with stride=2 and average downsample", "\n", "layer", "=", "ResLayer", "(", "Bottleneck", ",", "64", ",", "64", ",", "3", ",", "stride", "=", "2", ",", "avg_down", "=", "True", ")", "\n", "assert", "isinstance", "(", "layer", "[", "0", "]", ".", "downsample", "[", "0", "]", ",", "AvgPool2d", ")", "\n", "assert", "layer", "[", "0", "]", ".", "downsample", "[", "1", "]", ".", "out_channels", "==", "256", "\n", "assert", "layer", "[", "0", "]", ".", "downsample", "[", "1", "]", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "layer", ")", ")", ":", "\n", "        ", "assert", "layer", "[", "i", "]", ".", "downsample", "is", "None", "\n", "", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "layer", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "28", ",", "28", "]", ")", "\n", "\n", "# Test ResLayer of 3 Bottleneck with dilation=2", "\n", "layer", "=", "ResLayer", "(", "Bottleneck", ",", "64", ",", "16", ",", "3", ",", "dilation", "=", "2", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "layer", ")", ")", ":", "\n", "        ", "assert", "layer", "[", "i", "]", ".", "conv2", ".", "dilation", "==", "(", "2", ",", "2", ")", "\n", "", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "layer", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test ResLayer of 3 Bottleneck with dilation=2, contract_dilation=True", "\n", "layer", "=", "ResLayer", "(", "Bottleneck", ",", "64", ",", "16", ",", "3", ",", "dilation", "=", "2", ",", "contract_dilation", "=", "True", ")", "\n", "assert", "layer", "[", "0", "]", ".", "conv2", ".", "dilation", "==", "(", "1", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "layer", ")", ")", ":", "\n", "        ", "assert", "layer", "[", "i", "]", ".", "conv2", ".", "dilation", "==", "(", "2", ",", "2", ")", "\n", "", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "layer", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test ResLayer of 3 Bottleneck with dilation=2, multi_grid", "\n", "layer", "=", "ResLayer", "(", "Bottleneck", ",", "64", ",", "16", ",", "3", ",", "dilation", "=", "2", ",", "multi_grid", "=", "(", "1", ",", "2", ",", "4", ")", ")", "\n", "assert", "layer", "[", "0", "]", ".", "conv2", ".", "dilation", "==", "(", "1", ",", "1", ")", "\n", "assert", "layer", "[", "1", "]", ".", "conv2", ".", "dilation", "==", "(", "2", ",", "2", ")", "\n", "assert", "layer", "[", "2", "]", ".", "conv2", ".", "dilation", "==", "(", "4", ",", "4", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "layer", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.test_resnet_backbone": [[308, 614], ["mmseg.models.backbones.ResNet", "mmseg.models.backbones.ResNet.init_weights", "mmseg.models.backbones.ResNet.train", "test_backbone.check_norm_state", "mmseg.models.backbones.ResNet", "mmseg.models.backbones.ResNet.init_weights", "mmseg.models.backbones.ResNet.train", "test_backbone.check_norm_state", "mmseg.models.backbones.ResNet", "mmseg.models.backbones.ResNet.init_weights", "mmseg.models.backbones.ResNet.train", "range", "mmseg.models.backbones.ResNetV1d", "mmseg.models.backbones.ResNet.init_weights", "mmseg.models.backbones.ResNet.train", "test_backbone.check_norm_state", "mmseg.models.backbones.ResNet.stem.parameters", "range", "mmseg.models.backbones.ResNet", "mmseg.models.backbones.ResNet.init_weights", "mmseg.models.backbones.ResNet.train", "torch.randn", "mmseg.models.backbones.ResNet.", "mmseg.models.backbones.ResNet", "mmseg.models.backbones.ResNet.modules", "mmseg.models.backbones.ResNet.init_weights", "mmseg.models.backbones.ResNet.train", "torch.randn", "mmseg.models.backbones.ResNet.", "mmseg.models.backbones.ResNet", "mmseg.models.backbones.ResNet.init_weights", "mmseg.models.backbones.ResNet.train", "torch.randn", "mmseg.models.backbones.ResNet.", "mmseg.models.backbones.ResNet", "mmseg.models.backbones.ResNet.modules", "mmseg.models.backbones.ResNet.init_weights", "mmseg.models.backbones.ResNet.train", "torch.randn", "mmseg.models.backbones.ResNet.", "mmseg.models.backbones.ResNet", "mmseg.models.backbones.ResNet.modules", "mmseg.models.backbones.ResNet.init_weights", "mmseg.models.backbones.ResNet.train", "torch.randn", "mmseg.models.backbones.ResNet.", "mmseg.models.backbones.ResNet", "mmseg.models.backbones.ResNet.modules", "mmseg.models.backbones.ResNet.init_weights", "mmseg.models.backbones.ResNet.train", "torch.randn", "mmseg.models.backbones.ResNet.", "mmseg.models.backbones.ResNet", "mmseg.models.backbones.ResNet.layer1.modules", "mmseg.models.backbones.ResNet.layer2.modules", "mmseg.models.backbones.ResNet.layer3.modules", "mmseg.models.backbones.ResNet.layer4.modules", "mmseg.models.backbones.ResNet.init_weights", "mmseg.models.backbones.ResNet.train", "torch.randn", "mmseg.models.backbones.ResNet.", "mmseg.models.backbones.ResNet", "mmseg.models.backbones.ResNet.layer1.modules", "mmseg.models.backbones.ResNet.layer2.modules", "mmseg.models.backbones.ResNet.layer3.modules", "mmseg.models.backbones.ResNet.layer4.modules", "mmseg.models.backbones.ResNet.init_weights", "mmseg.models.backbones.ResNet.train", "torch.randn", "mmseg.models.backbones.ResNet.", "mmseg.models.backbones.ResNet", "mmseg.models.backbones.ResNet.init_weights", "mmseg.models.backbones.ResNet.modules", "mmseg.models.backbones.ResNet.train", "torch.randn", "mmseg.models.backbones.ResNet.", "mmseg.models.backbones.ResNetV1d", "mmseg.models.backbones.ResNet.init_weights", "mmseg.models.backbones.ResNet.train", "torch.randn", "mmseg.models.backbones.ResNet.", "pytest.raises", "mmseg.models.backbones.ResNet", "pytest.raises", "mmseg.models.backbones.ResNet", "pytest.raises", "dict", "mmseg.models.backbones.ResNet", "pytest.raises", "mmseg.models.backbones.ResNet", "pytest.raises", "mmseg.models.backbones.ResNet", "pytest.raises", "mmseg.models.backbones.ResNet", "pytest.raises", "mmseg.models.backbones.ResNet", "mmseg.models.backbones.ResNet.init_weights", "pytest.raises", "mmseg.models.backbones.ResNet", "mmseg.models.backbones.ResNet.modules", "mmseg.models.backbones.ResNet.modules", "getattr.parameters", "getattr", "getattr.modules", "getattr.parameters", "len", "getattr", "getattr.modules", "getattr.parameters", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "test_backbone.is_norm", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "len", "torch.Size", "torch.Size", "torch.Size", "test_backbone.is_block", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "test_backbone.is_block", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "test_backbone.is_norm", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "dict", "dict", "dict", "test_backbone.is_block", "test_backbone.is_block", "test_backbone.is_block", "test_backbone.is_block", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "dict", "dict", "test_backbone.is_block", "test_backbone.is_block", "test_backbone.is_block", "test_backbone.is_block", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "isinstance", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "dict", "isinstance", "isinstance", "isinstance", "dict", "isinstance", "test_backbone.all_zeros", "isinstance", "dict", "dict", "dict", "hasattr", "hasattr", "hasattr", "dict", "dict", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "test_backbone.all_zeros", "dict"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.check_norm_state", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.check_norm_state", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.check_norm_state", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.is_norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.is_block", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.is_block", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.is_norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.is_block", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.is_block", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.is_block", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.is_block", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.is_block", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.is_block", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.is_block", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.is_block", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.all_zeros", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.all_zeros"], ["", "def", "test_resnet_backbone", "(", ")", ":", "\n", "    ", "\"\"\"Test resnet backbone.\"\"\"", "\n", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "# ResNet depth should be in [18, 34, 50, 101, 152]", "\n", "        ", "ResNet", "(", "20", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# In ResNet: 1 <= num_stages <= 4", "\n", "        ", "ResNet", "(", "50", ",", "num_stages", "=", "0", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# len(stage_with_dcn) == num_stages", "\n", "        ", "dcn", "=", "dict", "(", "type", "=", "'DCN'", ",", "deform_groups", "=", "1", ",", "fallback_on_stride", "=", "False", ")", "\n", "ResNet", "(", "50", ",", "dcn", "=", "dcn", ",", "stage_with_dcn", "=", "(", "True", ",", ")", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# len(stage_with_plugin) == num_stages", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "stages", "=", "(", "False", ",", "True", ",", "True", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "ResNet", "(", "50", ",", "plugins", "=", "plugins", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# In ResNet: 1 <= num_stages <= 4", "\n", "        ", "ResNet", "(", "50", ",", "num_stages", "=", "5", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# len(strides) == len(dilations) == num_stages", "\n", "        ", "ResNet", "(", "50", ",", "strides", "=", "(", "1", ",", ")", ",", "dilations", "=", "(", "1", ",", "1", ")", ",", "num_stages", "=", "3", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "# pretrained must be a string path", "\n", "        ", "model", "=", "ResNet", "(", "50", ")", "\n", "model", ".", "init_weights", "(", "pretrained", "=", "0", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Style must be in ['pytorch', 'caffe']", "\n", "        ", "ResNet", "(", "50", ",", "style", "=", "'tensorflow'", ")", "\n", "\n", "# Test ResNet50 norm_eval=True", "\n", "", "model", "=", "ResNet", "(", "50", ",", "norm_eval", "=", "True", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "assert", "check_norm_state", "(", "model", ".", "modules", "(", ")", ",", "False", ")", "\n", "\n", "# Test ResNet50 with torchvision pretrained weight", "\n", "model", "=", "ResNet", "(", "depth", "=", "50", ",", "norm_eval", "=", "True", ")", "\n", "model", ".", "init_weights", "(", "'torchvision://resnet50'", ")", "\n", "model", ".", "train", "(", ")", "\n", "assert", "check_norm_state", "(", "model", ".", "modules", "(", ")", ",", "False", ")", "\n", "\n", "# Test ResNet50 with first stage frozen", "\n", "frozen_stages", "=", "1", "\n", "model", "=", "ResNet", "(", "50", ",", "frozen_stages", "=", "frozen_stages", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "assert", "model", ".", "norm1", ".", "training", "is", "False", "\n", "for", "layer", "in", "[", "model", ".", "conv1", ",", "model", ".", "norm1", "]", ":", "\n", "        ", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "            ", "assert", "param", ".", "requires_grad", "is", "False", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "frozen_stages", "+", "1", ")", ":", "\n", "        ", "layer", "=", "getattr", "(", "model", ",", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "for", "mod", "in", "layer", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "mod", ",", "_BatchNorm", ")", ":", "\n", "                ", "assert", "mod", ".", "training", "is", "False", "\n", "", "", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "            ", "assert", "param", ".", "requires_grad", "is", "False", "\n", "\n", "# Test ResNet50V1d with first stage frozen", "\n", "", "", "model", "=", "ResNetV1d", "(", "depth", "=", "50", ",", "frozen_stages", "=", "frozen_stages", ")", "\n", "assert", "len", "(", "model", ".", "stem", ")", "==", "9", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "check_norm_state", "(", "model", ".", "stem", ",", "False", ")", "\n", "for", "param", "in", "model", ".", "stem", ".", "parameters", "(", ")", ":", "\n", "        ", "assert", "param", ".", "requires_grad", "is", "False", "\n", "", "for", "i", "in", "range", "(", "1", ",", "frozen_stages", "+", "1", ")", ":", "\n", "        ", "layer", "=", "getattr", "(", "model", ",", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "for", "mod", "in", "layer", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "mod", ",", "_BatchNorm", ")", ":", "\n", "                ", "assert", "mod", ".", "training", "is", "False", "\n", "", "", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "            ", "assert", "param", ".", "requires_grad", "is", "False", "\n", "\n", "# Test ResNet18 forward", "\n", "", "", "model", "=", "ResNet", "(", "18", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "128", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "7", ",", "7", "]", ")", "\n", "\n", "# Test ResNet50 with BatchNorm forward", "\n", "model", "=", "ResNet", "(", "50", ")", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_norm", "(", "m", ")", ":", "\n", "            ", "assert", "isinstance", "(", "m", ",", "_BatchNorm", ")", "\n", "", "", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n", "# Test ResNet50 with layers 1, 2, 3 out forward", "\n", "model", "=", "ResNet", "(", "50", ",", "out_indices", "=", "(", "0", ",", "1", ",", "2", ")", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "3", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "\n", "# Test ResNet18 with checkpoint forward", "\n", "model", "=", "ResNet", "(", "18", ",", "with_cp", "=", "True", ")", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "m", ".", "with_cp", "\n", "", "", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "128", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "7", ",", "7", "]", ")", "\n", "\n", "# Test ResNet50 with checkpoint forward", "\n", "model", "=", "ResNet", "(", "50", ",", "with_cp", "=", "True", ")", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "m", ".", "with_cp", "\n", "", "", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n", "# Test ResNet50 with GroupNorm forward", "\n", "model", "=", "ResNet", "(", "\n", "50", ",", "norm_cfg", "=", "dict", "(", "type", "=", "'GN'", ",", "num_groups", "=", "32", ",", "requires_grad", "=", "True", ")", ")", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_norm", "(", "m", ")", ":", "\n", "            ", "assert", "isinstance", "(", "m", ",", "GroupNorm", ")", "\n", "", "", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n", "# Test ResNet50 with 1 GeneralizedAttention after conv2, 1 NonLocal2d", "\n", "# after conv2, 1 ContextBlock after conv3 in layers 2, 3, 4", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'GeneralizedAttention'", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "8", ",", "\n", "attention_type", "=", "'0010'", ",", "\n", "kv_stride", "=", "2", ")", ",", "\n", "stages", "=", "(", "False", ",", "True", ",", "True", ",", "True", ")", ",", "\n", "position", "=", "'after_conv2'", ")", ",", "\n", "dict", "(", "cfg", "=", "dict", "(", "type", "=", "'NonLocal2d'", ")", ",", "position", "=", "'after_conv2'", ")", ",", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "stages", "=", "(", "False", ",", "True", ",", "True", ",", "False", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "model", "=", "ResNet", "(", "50", ",", "plugins", "=", "plugins", ")", "\n", "for", "m", "in", "model", ".", "layer1", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "not", "hasattr", "(", "m", ",", "'context_block'", ")", "\n", "assert", "not", "hasattr", "(", "m", ",", "'gen_attention_block'", ")", "\n", "assert", "m", ".", "nonlocal_block", ".", "in_channels", "==", "64", "\n", "", "", "for", "m", "in", "model", ".", "layer2", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "m", ".", "nonlocal_block", ".", "in_channels", "==", "128", "\n", "assert", "m", ".", "gen_attention_block", ".", "in_channels", "==", "128", "\n", "assert", "m", ".", "context_block", ".", "in_channels", "==", "512", "\n", "\n", "", "", "for", "m", "in", "model", ".", "layer3", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "m", ".", "nonlocal_block", ".", "in_channels", "==", "256", "\n", "assert", "m", ".", "gen_attention_block", ".", "in_channels", "==", "256", "\n", "assert", "m", ".", "context_block", ".", "in_channels", "==", "1024", "\n", "\n", "", "", "for", "m", "in", "model", ".", "layer4", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "m", ".", "nonlocal_block", ".", "in_channels", "==", "512", "\n", "assert", "m", ".", "gen_attention_block", ".", "in_channels", "==", "512", "\n", "assert", "not", "hasattr", "(", "m", ",", "'context_block'", ")", "\n", "", "", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n", "# Test ResNet50 with 1 ContextBlock after conv2, 1 ContextBlock after", "\n", "# conv3 in layers 2, 3, 4", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ",", "postfix", "=", "1", ")", ",", "\n", "stages", "=", "(", "False", ",", "True", ",", "True", ",", "False", ")", ",", "\n", "position", "=", "'after_conv3'", ")", ",", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ",", "postfix", "=", "2", ")", ",", "\n", "stages", "=", "(", "False", ",", "True", ",", "True", ",", "False", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "\n", "model", "=", "ResNet", "(", "50", ",", "plugins", "=", "plugins", ")", "\n", "for", "m", "in", "model", ".", "layer1", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "not", "hasattr", "(", "m", ",", "'context_block'", ")", "\n", "assert", "not", "hasattr", "(", "m", ",", "'context_block1'", ")", "\n", "assert", "not", "hasattr", "(", "m", ",", "'context_block2'", ")", "\n", "", "", "for", "m", "in", "model", ".", "layer2", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "not", "hasattr", "(", "m", ",", "'context_block'", ")", "\n", "assert", "m", ".", "context_block1", ".", "in_channels", "==", "512", "\n", "assert", "m", ".", "context_block2", ".", "in_channels", "==", "512", "\n", "\n", "", "", "for", "m", "in", "model", ".", "layer3", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "not", "hasattr", "(", "m", ",", "'context_block'", ")", "\n", "assert", "m", ".", "context_block1", ".", "in_channels", "==", "1024", "\n", "assert", "m", ".", "context_block2", ".", "in_channels", "==", "1024", "\n", "\n", "", "", "for", "m", "in", "model", ".", "layer4", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "not", "hasattr", "(", "m", ",", "'context_block'", ")", "\n", "assert", "not", "hasattr", "(", "m", ",", "'context_block1'", ")", "\n", "assert", "not", "hasattr", "(", "m", ",", "'context_block2'", ")", "\n", "", "", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n", "# Test ResNet50 zero initialization of residual", "\n", "model", "=", "ResNet", "(", "50", ",", "zero_init_residual", "=", "True", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "            ", "assert", "all_zeros", "(", "m", ".", "norm3", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "            ", "assert", "all_zeros", "(", "m", ".", "norm2", ")", "\n", "", "", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n", "# Test ResNetV1d forward", "\n", "model", "=", "ResNetV1d", "(", "depth", "=", "50", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.test_renext_bottleneck": [[616, 646], ["mmseg.models.backbones.resnext.Bottleneck", "dict", "mmseg.models.backbones.resnext.Bottleneck", "mmseg.models.backbones.resnext.Bottleneck", "torch.randn", "mmseg.models.backbones.resnext.Bottleneck", "pytest.raises", "mmseg.models.backbones.resnext.Bottleneck", "pytest.raises", "mmseg.models.backbones.resnext.Bottleneck", "torch.Size", "dict"], "function", ["None"], ["", "def", "test_renext_bottleneck", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Style must be in ['pytorch', 'caffe']", "\n", "        ", "BottleneckX", "(", "64", ",", "64", ",", "groups", "=", "32", ",", "base_width", "=", "4", ",", "style", "=", "'tensorflow'", ")", "\n", "\n", "# Test ResNeXt Bottleneck structure", "\n", "", "block", "=", "BottleneckX", "(", "\n", "64", ",", "64", ",", "groups", "=", "32", ",", "base_width", "=", "4", ",", "stride", "=", "2", ",", "style", "=", "'pytorch'", ")", "\n", "assert", "block", ".", "conv2", ".", "stride", "==", "(", "2", ",", "2", ")", "\n", "assert", "block", ".", "conv2", ".", "groups", "==", "32", "\n", "assert", "block", ".", "conv2", ".", "out_channels", "==", "128", "\n", "\n", "# Test ResNeXt Bottleneck with DCN", "\n", "dcn", "=", "dict", "(", "type", "=", "'DCN'", ",", "deform_groups", "=", "1", ",", "fallback_on_stride", "=", "False", ")", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# conv_cfg must be None if dcn is not None", "\n", "        ", "BottleneckX", "(", "\n", "64", ",", "\n", "64", ",", "\n", "groups", "=", "32", ",", "\n", "base_width", "=", "4", ",", "\n", "dcn", "=", "dcn", ",", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv'", ")", ")", "\n", "", "BottleneckX", "(", "64", ",", "64", ",", "dcn", "=", "dcn", ")", "\n", "\n", "# Test ResNeXt Bottleneck forward", "\n", "block", "=", "BottleneckX", "(", "64", ",", "16", ",", "groups", "=", "32", ",", "base_width", "=", "4", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.test_resnext_backbone": [[648, 669], ["mmseg.models.backbones.ResNeXt", "print", "mmseg.models.backbones.ResNeXt.modules", "mmseg.models.backbones.ResNeXt.init_weights", "mmseg.models.backbones.ResNeXt.train", "torch.randn", "mmseg.models.backbones.ResNeXt.", "pytest.raises", "mmseg.models.backbones.ResNeXt", "test_backbone.is_block", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.is_block"], ["", "def", "test_resnext_backbone", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "# ResNeXt depth should be in [50, 101, 152]", "\n", "        ", "ResNeXt", "(", "depth", "=", "18", ")", "\n", "\n", "# Test ResNeXt with group 32, base_width 4", "\n", "", "model", "=", "ResNeXt", "(", "depth", "=", "50", ",", "groups", "=", "32", ",", "base_width", "=", "4", ")", "\n", "print", "(", "model", ")", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "m", ".", "conv2", ".", "groups", "==", "32", "\n", "", "", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.test_fastscnn_backbone": [[671, 696], ["mmseg.models.backbones.FastSCNN", "mmseg.models.backbones.FastSCNN.init_weights", "mmseg.models.backbones.FastSCNN.train", "torch.randn", "mmseg.models.backbones.FastSCNN.", "pytest.raises", "mmseg.models.backbones.FastSCNN", "len", "torch.Size", "torch.Size", "torch.Size"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train"], ["", "def", "test_fastscnn_backbone", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Fast-SCNN channel constraints.", "\n", "        ", "FastSCNN", "(", "\n", "3", ",", "(", "32", ",", "48", ")", ",", "\n", "64", ",", "(", "64", ",", "96", ",", "128", ")", ",", "(", "2", ",", "2", ",", "1", ")", ",", "\n", "global_out_channels", "=", "127", ",", "\n", "higher_in_channels", "=", "64", ",", "\n", "lower_in_channels", "=", "128", ")", "\n", "\n", "# Test FastSCNN Standard Forward", "\n", "", "model", "=", "FastSCNN", "(", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "batch_size", "=", "4", "\n", "imgs", "=", "torch", ".", "randn", "(", "batch_size", ",", "3", ",", "512", ",", "1024", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "\n", "assert", "len", "(", "feat", ")", "==", "3", "\n", "# higher-res", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "batch_size", ",", "64", ",", "64", ",", "128", "]", ")", "\n", "# lower-res", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "batch_size", ",", "128", ",", "16", ",", "32", "]", ")", "\n", "# FFM output", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "batch_size", ",", "128", ",", "64", ",", "128", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.test_resnest_bottleneck": [[698, 714], ["mmseg.models.backbones.resnest.Bottleneck", "mmseg.models.backbones.resnest.Bottleneck", "torch.randn", "mmseg.models.backbones.resnest.Bottleneck", "pytest.raises", "mmseg.models.backbones.resnest.Bottleneck", "torch.Size"], "function", ["None"], ["", "def", "test_resnest_bottleneck", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Style must be in ['pytorch', 'caffe']", "\n", "        ", "BottleneckS", "(", "64", ",", "64", ",", "radix", "=", "2", ",", "reduction_factor", "=", "4", ",", "style", "=", "'tensorflow'", ")", "\n", "\n", "# Test ResNeSt Bottleneck structure", "\n", "", "block", "=", "BottleneckS", "(", "\n", "64", ",", "256", ",", "radix", "=", "2", ",", "reduction_factor", "=", "4", ",", "stride", "=", "2", ",", "style", "=", "'pytorch'", ")", "\n", "assert", "block", ".", "avd_layer", ".", "stride", "==", "2", "\n", "assert", "block", ".", "conv2", ".", "channels", "==", "256", "\n", "\n", "# Test ResNeSt Bottleneck forward", "\n", "block", "=", "BottleneckS", "(", "64", ",", "16", ",", "radix", "=", "2", ",", "reduction_factor", "=", "4", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.test_resnest_backbone": [[716, 734], ["mmseg.models.backbones.ResNeSt", "mmseg.models.backbones.ResNeSt.init_weights", "mmseg.models.backbones.ResNeSt.train", "torch.randn", "mmseg.models.backbones.ResNeSt.", "pytest.raises", "mmseg.models.backbones.ResNeSt", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train"], ["", "def", "test_resnest_backbone", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "# ResNeSt depth should be in [50, 101, 152, 200]", "\n", "        ", "ResNeSt", "(", "depth", "=", "18", ")", "\n", "\n", "# Test ResNeSt with radix 2, reduction_factor 4", "\n", "", "model", "=", "ResNeSt", "(", "\n", "depth", "=", "50", ",", "radix", "=", "2", ",", "reduction_factor", "=", "4", ",", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.test_cgnet_GlobalContextExtractor": [[736, 741], ["mmseg.models.backbones.cgnet.GlobalContextExtractor", "torch.randn", "mmseg.models.backbones.cgnet.GlobalContextExtractor.", "torch.Size"], "function", ["None"], ["", "def", "test_cgnet_GlobalContextExtractor", "(", ")", ":", "\n", "    ", "block", "=", "GlobalContextExtractor", "(", "16", ",", "16", ",", "with_cp", "=", "True", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "16", ",", "64", ",", "64", ",", "requires_grad", "=", "True", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "16", ",", "64", ",", "64", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.test_cgnet_context_guided_block": [[743, 829], ["mmseg.models.backbones.cgnet.ContextGuidedBlock", "torch.randn", "mmseg.models.backbones.cgnet.ContextGuidedBlock.", "mmseg.models.backbones.cgnet.ContextGuidedBlock", "torch.randn", "mmseg.models.backbones.cgnet.ContextGuidedBlock.", "mmseg.models.backbones.cgnet.ContextGuidedBlock", "torch.randn", "mmseg.models.backbones.cgnet.ContextGuidedBlock.", "mmseg.models.backbones.cgnet.ContextGuidedBlock", "torch.randn", "mmseg.models.backbones.cgnet.ContextGuidedBlock.", "pytest.raises", "mmseg.models.backbones.cgnet.ContextGuidedBlock", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "dict"], "function", ["None"], ["", "def", "test_cgnet_context_guided_block", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# cgnet ContextGuidedBlock GlobalContextExtractor channel and reduction", "\n", "# constraints.", "\n", "        ", "ContextGuidedBlock", "(", "8", ",", "8", ")", "\n", "\n", "# test cgnet ContextGuidedBlock with checkpoint forward", "\n", "", "block", "=", "ContextGuidedBlock", "(", "\n", "16", ",", "16", ",", "act_cfg", "=", "dict", "(", "type", "=", "'PReLU'", ")", ",", "with_cp", "=", "True", ")", "\n", "assert", "block", ".", "with_cp", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "16", ",", "64", ",", "64", ",", "requires_grad", "=", "True", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "16", ",", "64", ",", "64", "]", ")", "\n", "\n", "# test cgnet ContextGuidedBlock without checkpoint forward", "\n", "block", "=", "ContextGuidedBlock", "(", "32", ",", "32", ")", "\n", "assert", "not", "block", ".", "with_cp", "\n", "x", "=", "torch", ".", "randn", "(", "3", ",", "32", ",", "32", ",", "32", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "3", ",", "32", ",", "32", ",", "32", "]", ")", "\n", "\n", "# test cgnet ContextGuidedBlock with down sampling", "\n", "block", "=", "ContextGuidedBlock", "(", "32", ",", "32", ",", "downsample", "=", "True", ")", "\n", "assert", "block", ".", "conv1x1", ".", "conv", ".", "in_channels", "==", "32", "\n", "assert", "block", ".", "conv1x1", ".", "conv", ".", "out_channels", "==", "32", "\n", "assert", "block", ".", "conv1x1", ".", "conv", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "conv1x1", ".", "conv", ".", "stride", "==", "(", "2", ",", "2", ")", "\n", "assert", "block", ".", "conv1x1", ".", "conv", ".", "padding", "==", "(", "1", ",", "1", ")", "\n", "\n", "assert", "block", ".", "f_loc", ".", "in_channels", "==", "32", "\n", "assert", "block", ".", "f_loc", ".", "out_channels", "==", "32", "\n", "assert", "block", ".", "f_loc", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "f_loc", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "f_loc", ".", "padding", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "f_loc", ".", "groups", "==", "32", "\n", "assert", "block", ".", "f_loc", ".", "dilation", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "f_loc", ".", "bias", "is", "None", "\n", "\n", "assert", "block", ".", "f_sur", ".", "in_channels", "==", "32", "\n", "assert", "block", ".", "f_sur", ".", "out_channels", "==", "32", "\n", "assert", "block", ".", "f_sur", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "f_sur", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "f_sur", ".", "padding", "==", "(", "2", ",", "2", ")", "\n", "assert", "block", ".", "f_sur", ".", "groups", "==", "32", "\n", "assert", "block", ".", "f_sur", ".", "dilation", "==", "(", "2", ",", "2", ")", "\n", "assert", "block", ".", "f_sur", ".", "bias", "is", "None", "\n", "\n", "assert", "block", ".", "bottleneck", ".", "in_channels", "==", "64", "\n", "assert", "block", ".", "bottleneck", ".", "out_channels", "==", "32", "\n", "assert", "block", ".", "bottleneck", ".", "kernel_size", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "bottleneck", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "bottleneck", ".", "bias", "is", "None", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "32", ",", "32", ",", "32", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "16", ",", "16", "]", ")", "\n", "\n", "# test cgnet ContextGuidedBlock without down sampling", "\n", "block", "=", "ContextGuidedBlock", "(", "32", ",", "32", ",", "downsample", "=", "False", ")", "\n", "assert", "block", ".", "conv1x1", ".", "conv", ".", "in_channels", "==", "32", "\n", "assert", "block", ".", "conv1x1", ".", "conv", ".", "out_channels", "==", "16", "\n", "assert", "block", ".", "conv1x1", ".", "conv", ".", "kernel_size", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "conv1x1", ".", "conv", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "conv1x1", ".", "conv", ".", "padding", "==", "(", "0", ",", "0", ")", "\n", "\n", "assert", "block", ".", "f_loc", ".", "in_channels", "==", "16", "\n", "assert", "block", ".", "f_loc", ".", "out_channels", "==", "16", "\n", "assert", "block", ".", "f_loc", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "f_loc", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "f_loc", ".", "padding", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "f_loc", ".", "groups", "==", "16", "\n", "assert", "block", ".", "f_loc", ".", "dilation", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "f_loc", ".", "bias", "is", "None", "\n", "\n", "assert", "block", ".", "f_sur", ".", "in_channels", "==", "16", "\n", "assert", "block", ".", "f_sur", ".", "out_channels", "==", "16", "\n", "assert", "block", ".", "f_sur", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "f_sur", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "f_sur", ".", "padding", "==", "(", "2", ",", "2", ")", "\n", "assert", "block", ".", "f_sur", ".", "groups", "==", "16", "\n", "assert", "block", ".", "f_sur", ".", "dilation", "==", "(", "2", ",", "2", ")", "\n", "assert", "block", ".", "f_sur", ".", "bias", "is", "None", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "32", ",", "32", ",", "32", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "32", ",", "32", ",", "32", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.test_cgnet_backbone": [[831, 878], ["mmseg.models.backbones.CGNet", "mmseg.models.backbones.CGNet.init_weights", "mmseg.models.backbones.CGNet.train", "torch.randn", "mmseg.models.backbones.CGNet.", "mmseg.models.backbones.CGNet", "mmseg.models.backbones.CGNet.init_weights", "mmseg.models.backbones.CGNet.train", "torch.randn", "mmseg.models.backbones.CGNet.", "pytest.raises", "mmseg.models.backbones.CGNet", "pytest.raises", "mmseg.models.backbones.CGNet", "pytest.raises", "mmseg.models.backbones.CGNet", "pytest.raises", "mmseg.models.backbones.CGNet", "pytest.raises", "mmseg.models.backbones.CGNet", "len", "torch.Size", "torch.Size", "torch.Size", "pytest.raises", "mmseg.models.backbones.CGNet.init_weights", "len", "torch.Size", "torch.Size", "torch.Size"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights"], ["", "def", "test_cgnet_backbone", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# check invalid num_channels", "\n", "        ", "CGNet", "(", "num_channels", "=", "(", "32", ",", "64", ",", "128", ",", "256", ")", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# check invalid num_blocks", "\n", "        ", "CGNet", "(", "num_blocks", "=", "(", "3", ",", "21", ",", "3", ")", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# check invalid dilation", "\n", "        ", "CGNet", "(", "num_blocks", "=", "2", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# check invalid reduction", "\n", "        ", "CGNet", "(", "reductions", "=", "16", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# check invalid num_channels and reduction", "\n", "        ", "CGNet", "(", "num_channels", "=", "(", "32", ",", "64", ",", "128", ")", ",", "reductions", "=", "(", "64", ",", "129", ")", ")", "\n", "\n", "# Test CGNet with default settings", "\n", "", "model", "=", "CGNet", "(", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "3", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "35", ",", "112", ",", "112", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "131", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "28", ",", "28", "]", ")", "\n", "\n", "# Test CGNet with norm_eval True and with_cp True", "\n", "model", "=", "CGNet", "(", "norm_eval", "=", "True", ",", "with_cp", "=", "True", ")", "\n", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "# check invalid pretrained", "\n", "        ", "model", ".", "init_weights", "(", "pretrained", "=", "8", ")", "\n", "", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "3", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "35", ",", "112", ",", "112", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "131", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "28", ",", "28", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_backbone.test_mobilenet_v3": [[880, 940], ["mmseg.models.backbones.MobileNetV3", "mmseg.models.backbones.MobileNetV3.init_weights", "mmseg.models.backbones.MobileNetV3.train", "torch.randn", "mmseg.models.backbones.MobileNetV3.", "mmseg.models.backbones.MobileNetV3", "mmseg.models.backbones.MobileNetV3.init_weights", "mmseg.models.backbones.MobileNetV3.train", "torch.randn", "mmseg.models.backbones.MobileNetV3.", "mmseg.models.backbones.MobileNetV3", "mmseg.models.backbones.MobileNetV3.init_weights", "mmseg.models.backbones.MobileNetV3.train", "torch.randn", "mmseg.models.backbones.MobileNetV3.", "pytest.raises", "mmseg.models.backbones.MobileNetV3", "pytest.raises", "mmseg.models.backbones.MobileNetV3", "pytest.raises", "mmseg.models.backbones.MobileNetV3", "pytest.raises", "mmseg.models.backbones.MobileNetV3", "pytest.raises", "mmseg.models.backbones.MobileNetV3", "mmseg.models.backbones.MobileNetV3.init_weights", "len", "len", "pytest.raises", "mmseg.models.backbones.MobileNetV3.init_weights", "len"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.backbones.cgnet.CGNet.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights"], ["", "def", "test_mobilenet_v3", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# check invalid arch", "\n", "        ", "MobileNetV3", "(", "'big'", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# check invalid reduction_factor", "\n", "        ", "MobileNetV3", "(", "reduction_factor", "=", "0", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "# check invalid out_indices", "\n", "        ", "MobileNetV3", "(", "out_indices", "=", "(", "0", ",", "1", ",", "15", ")", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "# check invalid frozen_stages", "\n", "        ", "MobileNetV3", "(", "frozen_stages", "=", "15", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "# check invalid pretrained", "\n", "        ", "model", "=", "MobileNetV3", "(", ")", "\n", "model", ".", "init_weights", "(", "pretrained", "=", "8", ")", "\n", "\n", "# Test MobileNetV3 with default settings", "\n", "", "model", "=", "MobileNetV3", "(", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "3", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "(", "2", ",", "16", ",", "112", ",", "112", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "(", "2", ",", "16", ",", "56", ",", "56", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "(", "2", ",", "576", ",", "28", ",", "28", ")", "\n", "\n", "# Test MobileNetV3 with arch = 'large'", "\n", "model", "=", "MobileNetV3", "(", "arch", "=", "'large'", ",", "out_indices", "=", "(", "1", ",", "3", ",", "16", ")", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "3", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "(", "2", ",", "16", ",", "112", ",", "112", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "(", "2", ",", "24", ",", "56", ",", "56", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "(", "2", ",", "960", ",", "28", ",", "28", ")", "\n", "\n", "# Test MobileNetV3 with norm_eval True, with_cp True and frozen_stages=5", "\n", "model", "=", "MobileNetV3", "(", "norm_eval", "=", "True", ",", "with_cp", "=", "True", ",", "frozen_stages", "=", "5", ")", "\n", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "# check invalid pretrained", "\n", "        ", "model", ".", "init_weights", "(", "pretrained", "=", "8", ")", "\n", "", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "3", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "(", "2", ",", "16", ",", "112", ",", "112", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "(", "2", ",", "16", ",", "56", ",", "56", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "(", "2", ",", "576", ",", "28", ",", "28", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads._conv_has_norm": [[18, 27], ["module.modules", "isinstance", "isinstance"], "function", ["None"], ["def", "_conv_has_norm", "(", "module", ",", "sync_bn", ")", ":", "\n", "    ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "ConvModule", ")", ":", "\n", "            ", "if", "not", "m", ".", "with_norm", ":", "\n", "                ", "return", "False", "\n", "", "if", "sync_bn", ":", "\n", "                ", "if", "not", "isinstance", "(", "m", ".", "bn", ",", "SyncBatchNorm", ")", ":", "\n", "                    ", "return", "False", "\n", "", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda": [[29, 35], ["module.cuda.cuda", "isinstance", "range", "len", "data[].cuda"], "function", ["None"], ["", "def", "to_cuda", "(", "module", ",", "data", ")", ":", "\n", "    ", "module", "=", "module", ".", "cuda", "(", ")", "\n", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "            ", "data", "[", "i", "]", "=", "data", "[", "i", "]", ".", "cuda", "(", ")", "\n", "", "", "return", "module", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_decode_head": [[37, 103], ["unittest.mock.patch.multiple", "mmseg.models.decode_heads.decode_head.BaseDecodeHead", "mmseg.models.decode_heads.decode_head.BaseDecodeHead", "mmseg.models.decode_heads.decode_head.BaseDecodeHead", "torch.cuda.is_available", "mmseg.models.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "mmseg.models.decode_heads.decode_head.BaseDecodeHead", "torch.cuda.is_available", "mmseg.models.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "pytest.raises", "mmseg.models.decode_heads.decode_head.BaseDecodeHead", "pytest.raises", "mmseg.models.decode_heads.decode_head.BaseDecodeHead", "pytest.raises", "mmseg.models.decode_heads.decode_head.BaseDecodeHead", "pytest.raises", "mmseg.models.decode_heads.decode_head.BaseDecodeHead", "pytest.raises", "mmseg.models.decode_heads.decode_head.BaseDecodeHead", "pytest.raises", "mmseg.models.decode_heads.decode_head.BaseDecodeHead", "hasattr", "hasattr", "torch.randn", "test_heads.to_cuda", "torch.randn", "torch.randn", "test_heads.to_cuda", "set"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "@", "patch", ".", "multiple", "(", "BaseDecodeHead", ",", "__abstractmethods__", "=", "set", "(", ")", ")", "\n", "def", "test_decode_head", "(", ")", ":", "\n", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# default input_transform doesn't accept multiple inputs", "\n", "        ", "BaseDecodeHead", "(", "[", "32", ",", "16", "]", ",", "16", ",", "num_classes", "=", "19", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# default input_transform doesn't accept multiple inputs", "\n", "        ", "BaseDecodeHead", "(", "32", ",", "16", ",", "num_classes", "=", "19", ",", "in_index", "=", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# supported mode is resize_concat only", "\n", "        ", "BaseDecodeHead", "(", "32", ",", "16", ",", "num_classes", "=", "19", ",", "input_transform", "=", "'concat'", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# in_channels should be list|tuple", "\n", "        ", "BaseDecodeHead", "(", "32", ",", "16", ",", "num_classes", "=", "19", ",", "input_transform", "=", "'resize_concat'", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# in_index should be list|tuple", "\n", "        ", "BaseDecodeHead", "(", "[", "32", "]", ",", "\n", "16", ",", "\n", "in_index", "=", "-", "1", ",", "\n", "num_classes", "=", "19", ",", "\n", "input_transform", "=", "'resize_concat'", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# len(in_index) should equal len(in_channels)", "\n", "        ", "BaseDecodeHead", "(", "[", "32", ",", "16", "]", ",", "\n", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "in_index", "=", "[", "-", "1", "]", ",", "\n", "input_transform", "=", "'resize_concat'", ")", "\n", "\n", "# test default dropout", "\n", "", "head", "=", "BaseDecodeHead", "(", "32", ",", "16", ",", "num_classes", "=", "19", ")", "\n", "assert", "hasattr", "(", "head", ",", "'dropout'", ")", "and", "head", ".", "dropout", ".", "p", "==", "0.1", "\n", "\n", "# test set dropout", "\n", "head", "=", "BaseDecodeHead", "(", "32", ",", "16", ",", "num_classes", "=", "19", ",", "dropout_ratio", "=", "0.2", ")", "\n", "assert", "hasattr", "(", "head", ",", "'dropout'", ")", "and", "head", ".", "dropout", ".", "p", "==", "0.2", "\n", "\n", "# test no input_transform", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "head", "=", "BaseDecodeHead", "(", "32", ",", "16", ",", "num_classes", "=", "19", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "assert", "head", ".", "in_channels", "==", "32", "\n", "assert", "head", ".", "input_transform", "is", "None", "\n", "transformed_inputs", "=", "head", ".", "_transform_inputs", "(", "inputs", ")", "\n", "assert", "transformed_inputs", ".", "shape", "==", "(", "1", ",", "32", ",", "45", ",", "45", ")", "\n", "\n", "# test input_transform = resize_concat", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", ",", "torch", ".", "randn", "(", "1", ",", "16", ",", "21", ",", "21", ")", "]", "\n", "head", "=", "BaseDecodeHead", "(", "[", "32", ",", "16", "]", ",", "\n", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "in_index", "=", "[", "0", ",", "1", "]", ",", "\n", "input_transform", "=", "'resize_concat'", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "assert", "head", ".", "in_channels", "==", "48", "\n", "assert", "head", ".", "input_transform", "==", "'resize_concat'", "\n", "transformed_inputs", "=", "head", ".", "_transform_inputs", "(", "inputs", ")", "\n", "assert", "transformed_inputs", ".", "shape", "==", "(", "1", ",", "48", ",", "45", ",", "45", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_fcn_head": [[105, 194], ["mmseg.models.decode_heads.FCNHead", "mmseg.models.decode_heads.FCNHead.modules", "mmseg.models.decode_heads.FCNHead", "mmseg.models.decode_heads.FCNHead.modules", "mmseg.models.decode_heads.FCNHead", "torch.cuda.is_available", "mmseg.models.decode_heads.FCNHead.", "mmseg.models.decode_heads.FCNHead", "torch.cuda.is_available", "mmseg.models.decode_heads.FCNHead.", "mmseg.models.decode_heads.FCNHead", "torch.cuda.is_available", "range", "mmseg.models.decode_heads.FCNHead.", "mmseg.models.decode_heads.FCNHead", "torch.cuda.is_available", "range", "mmseg.models.decode_heads.FCNHead.", "mmseg.models.decode_heads.FCNHead", "torch.cuda.is_available", "mmseg.models.decode_heads.FCNHead.", "mmseg.models.decode_heads.FCNHead", "torch.cuda.is_available", "isinstance", "mmseg.models.decode_heads.FCNHead.", "pytest.raises", "mmseg.models.decode_heads.FCNHead", "isinstance", "isinstance", "torch.randn", "test_heads.to_cuda", "len", "torch.randn", "test_heads.to_cuda", "len", "torch.randn", "test_heads.to_cuda", "len", "torch.randn", "test_heads.to_cuda", "len", "torch.randn", "test_heads.to_cuda", "len", "torch.randn", "test_heads.to_cuda", "dict", "hasattr", "isinstance"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_fcn_head", "(", ")", ":", "\n", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# num_convs must be not less than 0", "\n", "        ", "FCNHead", "(", "num_classes", "=", "19", ",", "num_convs", "=", "-", "1", ")", "\n", "\n", "# test no norm_cfg", "\n", "", "head", "=", "FCNHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ")", "\n", "for", "m", "in", "head", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "ConvModule", ")", ":", "\n", "            ", "assert", "not", "m", ".", "with_norm", "\n", "\n", "# test with norm_cfg", "\n", "", "", "head", "=", "FCNHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'SyncBN'", ")", ")", "\n", "for", "m", "in", "head", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "ConvModule", ")", ":", "\n", "            ", "assert", "m", ".", "with_norm", "and", "isinstance", "(", "m", ".", "bn", ",", "SyncBatchNorm", ")", "\n", "\n", "# test concat_input=False", "\n", "", "", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "head", "=", "FCNHead", "(", "\n", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "concat_input", "=", "False", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "assert", "len", "(", "head", ".", "convs", ")", "==", "2", "\n", "assert", "not", "head", ".", "concat_input", "and", "not", "hasattr", "(", "head", ",", "'conv_cat'", ")", "\n", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n", "# test concat_input=True", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "head", "=", "FCNHead", "(", "\n", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "concat_input", "=", "True", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "assert", "len", "(", "head", ".", "convs", ")", "==", "2", "\n", "assert", "head", ".", "concat_input", "\n", "assert", "head", ".", "conv_cat", ".", "in_channels", "==", "48", "\n", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n", "# test kernel_size=3", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "head", "=", "FCNHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "head", ".", "convs", ")", ")", ":", "\n", "        ", "assert", "head", ".", "convs", "[", "i", "]", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "head", ".", "convs", "[", "i", "]", ".", "padding", "==", "1", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n", "# test kernel_size=1", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "head", "=", "FCNHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "kernel_size", "=", "1", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "head", ".", "convs", ")", ")", ":", "\n", "        ", "assert", "head", ".", "convs", "[", "i", "]", ".", "kernel_size", "==", "(", "1", ",", "1", ")", "\n", "assert", "head", ".", "convs", "[", "i", "]", ".", "padding", "==", "0", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n", "# test num_conv", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "head", "=", "FCNHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "num_convs", "=", "1", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "assert", "len", "(", "head", ".", "convs", ")", "==", "1", "\n", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n", "# test num_conv = 0", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "head", "=", "FCNHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "32", ",", "\n", "num_classes", "=", "19", ",", "\n", "num_convs", "=", "0", ",", "\n", "concat_input", "=", "False", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "assert", "isinstance", "(", "head", ".", "convs", ",", "torch", ".", "nn", ".", "Identity", ")", "\n", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_psp_head": [[196, 224], ["mmseg.models.decode_heads.PSPHead", "mmseg.models.decode_heads.PSPHead", "test_heads._conv_has_norm", "mmseg.models.decode_heads.PSPHead", "torch.cuda.is_available", "mmseg.models.decode_heads.PSPHead.", "pytest.raises", "mmseg.models.decode_heads.PSPHead", "test_heads._conv_has_norm", "torch.randn", "test_heads.to_cuda", "dict"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads._conv_has_norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads._conv_has_norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_psp_head", "(", ")", ":", "\n", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# pool_scales must be list|tuple", "\n", "        ", "PSPHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "pool_scales", "=", "1", ")", "\n", "\n", "# test no norm_cfg", "\n", "", "head", "=", "PSPHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ")", "\n", "assert", "not", "_conv_has_norm", "(", "head", ",", "sync_bn", "=", "False", ")", "\n", "\n", "# test with norm_cfg", "\n", "head", "=", "PSPHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'SyncBN'", ")", ")", "\n", "assert", "_conv_has_norm", "(", "head", ",", "sync_bn", "=", "True", ")", "\n", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "head", "=", "PSPHead", "(", "\n", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "pool_scales", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "assert", "head", ".", "psp_modules", "[", "0", "]", "[", "0", "]", ".", "output_size", "==", "1", "\n", "assert", "head", ".", "psp_modules", "[", "1", "]", "[", "0", "]", ".", "output_size", "==", "2", "\n", "assert", "head", ".", "psp_modules", "[", "2", "]", "[", "0", "]", ".", "output_size", "==", "3", "\n", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_apc_head": [[226, 277], ["mmseg.models.decode_heads.APCHead", "mmseg.models.decode_heads.APCHead", "test_heads._conv_has_norm", "mmseg.models.decode_heads.APCHead", "torch.cuda.is_available", "mmseg.models.decode_heads.APCHead.", "mmseg.models.decode_heads.APCHead", "torch.cuda.is_available", "mmseg.models.decode_heads.APCHead.", "pytest.raises", "mmseg.models.decode_heads.APCHead", "test_heads._conv_has_norm", "torch.randn", "test_heads.to_cuda", "torch.randn", "test_heads.to_cuda", "dict"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads._conv_has_norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads._conv_has_norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_apc_head", "(", ")", ":", "\n", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# pool_scales must be list|tuple", "\n", "        ", "APCHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "pool_scales", "=", "1", ")", "\n", "\n", "# test no norm_cfg", "\n", "", "head", "=", "APCHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ")", "\n", "assert", "not", "_conv_has_norm", "(", "head", ",", "sync_bn", "=", "False", ")", "\n", "\n", "# test with norm_cfg", "\n", "head", "=", "APCHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'SyncBN'", ")", ")", "\n", "assert", "_conv_has_norm", "(", "head", ",", "sync_bn", "=", "True", ")", "\n", "\n", "# fusion=True", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "head", "=", "APCHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "pool_scales", "=", "(", "1", ",", "2", ",", "3", ")", ",", "\n", "fusion", "=", "True", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "assert", "head", ".", "fusion", "is", "True", "\n", "assert", "head", ".", "acm_modules", "[", "0", "]", ".", "pool_scale", "==", "1", "\n", "assert", "head", ".", "acm_modules", "[", "1", "]", ".", "pool_scale", "==", "2", "\n", "assert", "head", ".", "acm_modules", "[", "2", "]", ".", "pool_scale", "==", "3", "\n", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n", "# fusion=False", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "head", "=", "APCHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "pool_scales", "=", "(", "1", ",", "2", ",", "3", ")", ",", "\n", "fusion", "=", "False", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "assert", "head", ".", "fusion", "is", "False", "\n", "assert", "head", ".", "acm_modules", "[", "0", "]", ".", "pool_scale", "==", "1", "\n", "assert", "head", ".", "acm_modules", "[", "1", "]", ".", "pool_scale", "==", "2", "\n", "assert", "head", ".", "acm_modules", "[", "2", "]", ".", "pool_scale", "==", "3", "\n", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_dm_head": [[279, 330], ["mmseg.models.decode_heads.DMHead", "mmseg.models.decode_heads.DMHead", "test_heads._conv_has_norm", "mmseg.models.decode_heads.DMHead", "torch.cuda.is_available", "mmseg.models.decode_heads.DMHead.", "mmseg.models.decode_heads.DMHead", "torch.cuda.is_available", "mmseg.models.decode_heads.DMHead.", "pytest.raises", "mmseg.models.decode_heads.DMHead", "test_heads._conv_has_norm", "torch.randn", "test_heads.to_cuda", "torch.randn", "test_heads.to_cuda", "dict"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads._conv_has_norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads._conv_has_norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_dm_head", "(", ")", ":", "\n", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# filter_sizes must be list|tuple", "\n", "        ", "DMHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "filter_sizes", "=", "1", ")", "\n", "\n", "# test no norm_cfg", "\n", "", "head", "=", "DMHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ")", "\n", "assert", "not", "_conv_has_norm", "(", "head", ",", "sync_bn", "=", "False", ")", "\n", "\n", "# test with norm_cfg", "\n", "head", "=", "DMHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'SyncBN'", ")", ")", "\n", "assert", "_conv_has_norm", "(", "head", ",", "sync_bn", "=", "True", ")", "\n", "\n", "# fusion=True", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "head", "=", "DMHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "filter_sizes", "=", "(", "1", ",", "3", ",", "5", ")", ",", "\n", "fusion", "=", "True", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "assert", "head", ".", "fusion", "is", "True", "\n", "assert", "head", ".", "dcm_modules", "[", "0", "]", ".", "filter_size", "==", "1", "\n", "assert", "head", ".", "dcm_modules", "[", "1", "]", ".", "filter_size", "==", "3", "\n", "assert", "head", ".", "dcm_modules", "[", "2", "]", ".", "filter_size", "==", "5", "\n", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n", "# fusion=False", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "head", "=", "DMHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "filter_sizes", "=", "(", "1", ",", "3", ",", "5", ")", ",", "\n", "fusion", "=", "False", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "assert", "head", ".", "fusion", "is", "False", "\n", "assert", "head", ".", "dcm_modules", "[", "0", "]", ".", "filter_size", "==", "1", "\n", "assert", "head", ".", "dcm_modules", "[", "1", "]", ".", "filter_size", "==", "3", "\n", "assert", "head", ".", "dcm_modules", "[", "2", "]", ".", "filter_size", "==", "5", "\n", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_aspp_head": [[332, 360], ["mmseg.models.decode_heads.ASPPHead", "mmseg.models.decode_heads.ASPPHead", "test_heads._conv_has_norm", "mmseg.models.decode_heads.ASPPHead", "torch.cuda.is_available", "mmseg.models.decode_heads.ASPPHead.", "pytest.raises", "mmseg.models.decode_heads.ASPPHead", "test_heads._conv_has_norm", "torch.randn", "test_heads.to_cuda", "dict"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads._conv_has_norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads._conv_has_norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_aspp_head", "(", ")", ":", "\n", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# pool_scales must be list|tuple", "\n", "        ", "ASPPHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "dilations", "=", "1", ")", "\n", "\n", "# test no norm_cfg", "\n", "", "head", "=", "ASPPHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ")", "\n", "assert", "not", "_conv_has_norm", "(", "head", ",", "sync_bn", "=", "False", ")", "\n", "\n", "# test with norm_cfg", "\n", "head", "=", "ASPPHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'SyncBN'", ")", ")", "\n", "assert", "_conv_has_norm", "(", "head", ",", "sync_bn", "=", "True", ")", "\n", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "head", "=", "ASPPHead", "(", "\n", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "dilations", "=", "(", "1", ",", "12", ",", "24", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "assert", "head", ".", "aspp_modules", "[", "0", "]", ".", "conv", ".", "dilation", "==", "(", "1", ",", "1", ")", "\n", "assert", "head", ".", "aspp_modules", "[", "1", "]", ".", "conv", ".", "dilation", "==", "(", "12", ",", "12", ")", "\n", "assert", "head", ".", "aspp_modules", "[", "2", "]", ".", "conv", ".", "dilation", "==", "(", "24", ",", "24", ")", "\n", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_psa_head": [[362, 476], ["mmseg.models.decode_heads.PSAHead", "mmseg.models.decode_heads.PSAHead", "test_heads._conv_has_norm", "mmseg.models.decode_heads.PSAHead", "torch.cuda.is_available", "mmseg.models.decode_heads.PSAHead.", "mmseg.models.decode_heads.PSAHead", "torch.cuda.is_available", "mmseg.models.decode_heads.PSAHead.", "mmseg.models.decode_heads.PSAHead", "torch.cuda.is_available", "mmseg.models.decode_heads.PSAHead.", "mmseg.models.decode_heads.PSAHead", "torch.cuda.is_available", "mmseg.models.decode_heads.PSAHead.", "mmseg.models.decode_heads.PSAHead", "torch.cuda.is_available", "mmseg.models.decode_heads.PSAHead.", "mmseg.models.decode_heads.PSAHead", "torch.cuda.is_available", "mmseg.models.decode_heads.PSAHead.", "mmseg.models.decode_heads.PSAHead", "torch.cuda.is_available", "mmseg.models.decode_heads.PSAHead.", "pytest.raises", "mmseg.models.decode_heads.PSAHead", "test_heads._conv_has_norm", "torch.randn", "test_heads.to_cuda", "torch.randn", "test_heads.to_cuda", "torch.randn", "test_heads.to_cuda", "torch.randn", "test_heads.to_cuda", "torch.randn", "test_heads.to_cuda", "torch.randn", "test_heads.to_cuda", "torch.randn", "test_heads.to_cuda", "dict"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads._conv_has_norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads._conv_has_norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_psa_head", "(", ")", ":", "\n", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# psa_type must be in 'bi-direction', 'collect', 'distribute'", "\n", "        ", "PSAHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "mask_size", "=", "(", "39", ",", "39", ")", ",", "\n", "psa_type", "=", "'gather'", ")", "\n", "\n", "# test no norm_cfg", "\n", "", "head", "=", "PSAHead", "(", "\n", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "mask_size", "=", "(", "39", ",", "39", ")", ")", "\n", "assert", "not", "_conv_has_norm", "(", "head", ",", "sync_bn", "=", "False", ")", "\n", "\n", "# test with norm_cfg", "\n", "head", "=", "PSAHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "mask_size", "=", "(", "39", ",", "39", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'SyncBN'", ")", ")", "\n", "assert", "_conv_has_norm", "(", "head", ",", "sync_bn", "=", "True", ")", "\n", "\n", "# test 'bi-direction' psa_type", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "39", ",", "39", ")", "]", "\n", "head", "=", "PSAHead", "(", "\n", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "mask_size", "=", "(", "39", ",", "39", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "39", ",", "39", ")", "\n", "\n", "# test 'bi-direction' psa_type, shrink_factor=1", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "39", ",", "39", ")", "]", "\n", "head", "=", "PSAHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "mask_size", "=", "(", "39", ",", "39", ")", ",", "\n", "shrink_factor", "=", "1", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "39", ",", "39", ")", "\n", "\n", "# test 'bi-direction' psa_type with soft_max", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "39", ",", "39", ")", "]", "\n", "head", "=", "PSAHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "mask_size", "=", "(", "39", ",", "39", ")", ",", "\n", "psa_softmax", "=", "True", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "39", ",", "39", ")", "\n", "\n", "# test 'collect' psa_type", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "39", ",", "39", ")", "]", "\n", "head", "=", "PSAHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "mask_size", "=", "(", "39", ",", "39", ")", ",", "\n", "psa_type", "=", "'collect'", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "39", ",", "39", ")", "\n", "\n", "# test 'collect' psa_type, shrink_factor=1", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "39", ",", "39", ")", "]", "\n", "head", "=", "PSAHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "mask_size", "=", "(", "39", ",", "39", ")", ",", "\n", "shrink_factor", "=", "1", ",", "\n", "psa_type", "=", "'collect'", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "39", ",", "39", ")", "\n", "\n", "# test 'collect' psa_type, shrink_factor=1, compact=True", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "39", ",", "39", ")", "]", "\n", "head", "=", "PSAHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "mask_size", "=", "(", "39", ",", "39", ")", ",", "\n", "psa_type", "=", "'collect'", ",", "\n", "shrink_factor", "=", "1", ",", "\n", "compact", "=", "True", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "39", ",", "39", ")", "\n", "\n", "# test 'distribute' psa_type", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "39", ",", "39", ")", "]", "\n", "head", "=", "PSAHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "mask_size", "=", "(", "39", ",", "39", ")", ",", "\n", "psa_type", "=", "'distribute'", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "39", ",", "39", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_gc_head": [[478, 487], ["mmseg.models.decode_heads.GCHead", "hasattr", "torch.cuda.is_available", "mmseg.models.decode_heads.GCHead.", "len", "torch.randn", "test_heads.to_cuda"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_gc_head", "(", ")", ":", "\n", "    ", "head", "=", "GCHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ")", "\n", "assert", "len", "(", "head", ".", "convs", ")", "==", "2", "\n", "assert", "hasattr", "(", "head", ",", "'gc_block'", ")", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_nl_head": [[489, 498], ["mmseg.models.decode_heads.NLHead", "hasattr", "torch.cuda.is_available", "mmseg.models.decode_heads.NLHead.", "len", "torch.randn", "test_heads.to_cuda"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_nl_head", "(", ")", ":", "\n", "    ", "head", "=", "NLHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ")", "\n", "assert", "len", "(", "head", ".", "convs", ")", "==", "2", "\n", "assert", "hasattr", "(", "head", ",", "'nl_block'", ")", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_cc_head": [[500, 510], ["mmseg.models.decode_heads.CCHead", "hasattr", "test_heads.to_cuda", "mmseg.models.decode_heads.CCHead.", "len", "torch.cuda.is_available", "pytest.skip", "torch.randn"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_cc_head", "(", ")", ":", "\n", "    ", "head", "=", "CCHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ")", "\n", "assert", "len", "(", "head", ".", "convs", ")", "==", "2", "\n", "assert", "hasattr", "(", "head", ",", "'cca'", ")", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "'CCHead requires CUDA'", ")", "\n", "", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_uper_head": [[512, 539], ["mmseg.models.decode_heads.UPerHead", "mmseg.models.decode_heads.UPerHead", "test_heads._conv_has_norm", "mmseg.models.decode_heads.UPerHead", "torch.cuda.is_available", "mmseg.models.decode_heads.UPerHead.", "pytest.raises", "mmseg.models.decode_heads.UPerHead", "test_heads._conv_has_norm", "torch.randn", "torch.randn", "test_heads.to_cuda", "dict"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads._conv_has_norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads._conv_has_norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_uper_head", "(", ")", ":", "\n", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# fpn_in_channels must be list|tuple", "\n", "        ", "UPerHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ")", "\n", "\n", "# test no norm_cfg", "\n", "", "head", "=", "UPerHead", "(", "\n", "in_channels", "=", "[", "32", ",", "16", "]", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "in_index", "=", "[", "-", "2", ",", "-", "1", "]", ")", "\n", "assert", "not", "_conv_has_norm", "(", "head", ",", "sync_bn", "=", "False", ")", "\n", "\n", "# test with norm_cfg", "\n", "head", "=", "UPerHead", "(", "\n", "in_channels", "=", "[", "32", ",", "16", "]", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'SyncBN'", ")", ",", "\n", "in_index", "=", "[", "-", "2", ",", "-", "1", "]", ")", "\n", "assert", "_conv_has_norm", "(", "head", ",", "sync_bn", "=", "True", ")", "\n", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", ",", "torch", ".", "randn", "(", "1", ",", "16", ",", "21", ",", "21", ")", "]", "\n", "head", "=", "UPerHead", "(", "\n", "in_channels", "=", "[", "32", ",", "16", "]", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "in_index", "=", "[", "-", "2", ",", "-", "1", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_ann_head": [[541, 554], ["mmseg.models.decode_heads.ANNHead", "torch.cuda.is_available", "mmseg.models.decode_heads.ANNHead.", "torch.randn", "torch.randn", "test_heads.to_cuda"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_ann_head", "(", ")", ":", "\n", "\n", "    ", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "16", ",", "45", ",", "45", ")", ",", "torch", ".", "randn", "(", "1", ",", "32", ",", "21", ",", "21", ")", "]", "\n", "head", "=", "ANNHead", "(", "\n", "in_channels", "=", "[", "16", ",", "32", "]", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "in_index", "=", "[", "-", "2", ",", "-", "1", "]", ",", "\n", "project_channels", "=", "8", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "21", ",", "21", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_da_head": [[556, 568], ["mmseg.models.decode_heads.DAHead", "torch.cuda.is_available", "mmseg.models.decode_heads.DAHead.", "mmseg.models.decode_heads.DAHead.forward_test", "torch.randn", "test_heads.to_cuda", "isinstance", "len"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_da_head", "(", ")", ":", "\n", "\n", "    ", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "head", "=", "DAHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "pam_channels", "=", "8", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "isinstance", "(", "outputs", ",", "tuple", ")", "and", "len", "(", "outputs", ")", "==", "3", "\n", "for", "output", "in", "outputs", ":", "\n", "        ", "assert", "output", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "", "test_output", "=", "head", ".", "forward_test", "(", "inputs", ",", "None", ",", "None", ")", "\n", "assert", "test_output", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_ocr_head": [[570, 582], ["mmseg.models.decode_heads.OCRHead", "mmseg.models.decode_heads.FCNHead", "torch.cuda.is_available", "mmseg.models.decode_heads.FCNHead.", "mmseg.models.decode_heads.OCRHead.", "torch.randn", "test_heads.to_cuda", "test_heads.to_cuda"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_ocr_head", "(", ")", ":", "\n", "\n", "    ", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "ocr_head", "=", "OCRHead", "(", "\n", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "ocr_channels", "=", "8", ")", "\n", "fcn_head", "=", "FCNHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "ocr_head", ",", "inputs", ")", "\n", "head", ",", "inputs", "=", "to_cuda", "(", "fcn_head", ",", "inputs", ")", "\n", "", "prev_output", "=", "fcn_head", "(", "inputs", ")", "\n", "output", "=", "ocr_head", "(", "inputs", ",", "prev_output", ")", "\n", "assert", "output", ".", "shape", "==", "(", "1", ",", "ocr_head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_enc_head": [[584, 625], ["mmseg.models.decode_heads.EncHead", "torch.cuda.is_available", "mmseg.models.decode_heads.EncHead.", "mmseg.models.decode_heads.EncHead", "torch.cuda.is_available", "mmseg.models.decode_heads.EncHead.", "mmseg.models.decode_heads.EncHead", "torch.cuda.is_available", "mmseg.models.decode_heads.EncHead.", "mmseg.models.decode_heads.EncHead.forward_test", "torch.randn", "test_heads.to_cuda", "isinstance", "torch.randn", "test_heads.to_cuda", "torch.randn", "torch.randn", "test_heads.to_cuda", "isinstance", "len", "len"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_enc_head", "(", ")", ":", "\n", "# with se_loss, w.o. lateral", "\n", "    ", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "21", ",", "21", ")", "]", "\n", "head", "=", "EncHead", "(", "\n", "in_channels", "=", "[", "32", "]", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "in_index", "=", "[", "-", "1", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "isinstance", "(", "outputs", ",", "tuple", ")", "and", "len", "(", "outputs", ")", "==", "2", "\n", "assert", "outputs", "[", "0", "]", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "21", ",", "21", ")", "\n", "assert", "outputs", "[", "1", "]", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ")", "\n", "\n", "# w.o se_loss, w.o. lateral", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "21", ",", "21", ")", "]", "\n", "head", "=", "EncHead", "(", "\n", "in_channels", "=", "[", "32", "]", ",", "\n", "channels", "=", "16", ",", "\n", "use_se_loss", "=", "False", ",", "\n", "num_classes", "=", "19", ",", "\n", "in_index", "=", "[", "-", "1", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "21", ",", "21", ")", "\n", "\n", "# with se_loss, with lateral", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "16", ",", "45", ",", "45", ")", ",", "torch", ".", "randn", "(", "1", ",", "32", ",", "21", ",", "21", ")", "]", "\n", "head", "=", "EncHead", "(", "\n", "in_channels", "=", "[", "16", ",", "32", "]", ",", "\n", "channels", "=", "16", ",", "\n", "add_lateral", "=", "True", ",", "\n", "num_classes", "=", "19", ",", "\n", "in_index", "=", "[", "-", "2", ",", "-", "1", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "isinstance", "(", "outputs", ",", "tuple", ")", "and", "len", "(", "outputs", ")", "==", "2", "\n", "assert", "outputs", "[", "0", "]", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "21", ",", "21", ")", "\n", "assert", "outputs", "[", "1", "]", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ")", "\n", "test_output", "=", "head", ".", "forward_test", "(", "inputs", ",", "None", ",", "None", ")", "\n", "assert", "test_output", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "21", ",", "21", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_dw_aspp_head": [[627, 665], ["mmseg.models.decode_heads.DepthwiseSeparableASPPHead", "torch.cuda.is_available", "mmseg.models.decode_heads.DepthwiseSeparableASPPHead.", "mmseg.models.decode_heads.DepthwiseSeparableASPPHead", "torch.cuda.is_available", "mmseg.models.decode_heads.DepthwiseSeparableASPPHead.", "torch.randn", "test_heads.to_cuda", "torch.randn", "torch.randn", "test_heads.to_cuda"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_dw_aspp_head", "(", ")", ":", "\n", "\n", "# test w.o. c1", "\n", "    ", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "head", "=", "DepthwiseSeparableASPPHead", "(", "\n", "c1_in_channels", "=", "0", ",", "\n", "c1_channels", "=", "0", ",", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "dilations", "=", "(", "1", ",", "12", ",", "24", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "assert", "head", ".", "c1_bottleneck", "is", "None", "\n", "assert", "head", ".", "aspp_modules", "[", "0", "]", ".", "conv", ".", "dilation", "==", "(", "1", ",", "1", ")", "\n", "assert", "head", ".", "aspp_modules", "[", "1", "]", ".", "depthwise_conv", ".", "dilation", "==", "(", "12", ",", "12", ")", "\n", "assert", "head", ".", "aspp_modules", "[", "2", "]", ".", "depthwise_conv", ".", "dilation", "==", "(", "24", ",", "24", ")", "\n", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n", "# test with c1", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "8", ",", "45", ",", "45", ")", ",", "torch", ".", "randn", "(", "1", ",", "32", ",", "21", ",", "21", ")", "]", "\n", "head", "=", "DepthwiseSeparableASPPHead", "(", "\n", "c1_in_channels", "=", "8", ",", "\n", "c1_channels", "=", "4", ",", "\n", "in_channels", "=", "32", ",", "\n", "channels", "=", "16", ",", "\n", "num_classes", "=", "19", ",", "\n", "dilations", "=", "(", "1", ",", "12", ",", "24", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "assert", "head", ".", "c1_bottleneck", ".", "in_channels", "==", "8", "\n", "assert", "head", ".", "c1_bottleneck", ".", "out_channels", "==", "4", "\n", "assert", "head", ".", "aspp_modules", "[", "0", "]", ".", "conv", ".", "dilation", "==", "(", "1", ",", "1", ")", "\n", "assert", "head", ".", "aspp_modules", "[", "1", "]", ".", "depthwise_conv", ".", "dilation", "==", "(", "12", ",", "12", ")", "\n", "assert", "head", ".", "aspp_modules", "[", "2", "]", ".", "depthwise_conv", ".", "dilation", "==", "(", "24", ",", "24", ")", "\n", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_sep_fcn_head": [[667, 697], ["mmseg.models.decode_heads.DepthwiseSeparableFCNHead", "mmseg.models.decode_heads.DepthwiseSeparableFCNHead.", "isinstance", "isinstance", "mmseg.models.decode_heads.DepthwiseSeparableFCNHead", "mmseg.models.decode_heads.DepthwiseSeparableFCNHead.", "isinstance", "isinstance", "torch.rand", "torch.rand", "dict", "dict"], "function", ["None"], ["", "def", "test_sep_fcn_head", "(", ")", ":", "\n", "# test sep_fcn_head with concat_input=False", "\n", "    ", "head", "=", "DepthwiseSeparableFCNHead", "(", "\n", "in_channels", "=", "128", ",", "\n", "channels", "=", "128", ",", "\n", "concat_input", "=", "False", ",", "\n", "num_classes", "=", "19", ",", "\n", "in_index", "=", "-", "1", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ",", "momentum", "=", "0.01", ")", ")", "\n", "x", "=", "[", "torch", ".", "rand", "(", "2", ",", "128", ",", "32", ",", "32", ")", "]", "\n", "output", "=", "head", "(", "x", ")", "\n", "assert", "output", ".", "shape", "==", "(", "2", ",", "head", ".", "num_classes", ",", "32", ",", "32", ")", "\n", "assert", "not", "head", ".", "concat_input", "\n", "assert", "isinstance", "(", "head", ".", "convs", "[", "0", "]", ",", "DepthwiseSeparableConvModule", ")", "\n", "assert", "isinstance", "(", "head", ".", "convs", "[", "1", "]", ",", "DepthwiseSeparableConvModule", ")", "\n", "assert", "head", ".", "conv_seg", ".", "kernel_size", "==", "(", "1", ",", "1", ")", "\n", "\n", "head", "=", "DepthwiseSeparableFCNHead", "(", "\n", "in_channels", "=", "64", ",", "\n", "channels", "=", "64", ",", "\n", "concat_input", "=", "True", ",", "\n", "num_classes", "=", "19", ",", "\n", "in_index", "=", "-", "1", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ",", "momentum", "=", "0.01", ")", ")", "\n", "x", "=", "[", "torch", ".", "rand", "(", "3", ",", "64", ",", "32", ",", "32", ")", "]", "\n", "output", "=", "head", "(", "x", ")", "\n", "assert", "output", ".", "shape", "==", "(", "3", ",", "head", ".", "num_classes", ",", "32", ",", "32", ")", "\n", "assert", "head", ".", "concat_input", "\n", "assert", "isinstance", "(", "head", ".", "convs", "[", "0", "]", ",", "DepthwiseSeparableConvModule", ")", "\n", "assert", "isinstance", "(", "head", ".", "convs", "[", "1", "]", ",", "DepthwiseSeparableConvModule", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_dnl_head": [[699, 737], ["mmseg.models.decode_heads.DNLHead", "hasattr", "torch.cuda.is_available", "mmseg.models.decode_heads.DNLHead.", "mmseg.models.decode_heads.DNLHead", "torch.cuda.is_available", "mmseg.models.decode_heads.DNLHead.", "mmseg.models.decode_heads.DNLHead", "torch.cuda.is_available", "mmseg.models.decode_heads.DNLHead.", "mmseg.models.decode_heads.DNLHead", "torch.cuda.is_available", "mmseg.models.decode_heads.DNLHead.", "len", "torch.randn", "test_heads.to_cuda", "torch.randn", "test_heads.to_cuda", "torch.randn", "test_heads.to_cuda", "torch.randn", "test_heads.to_cuda"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_dnl_head", "(", ")", ":", "\n", "# DNL with 'embedded_gaussian' mode", "\n", "    ", "head", "=", "DNLHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ")", "\n", "assert", "len", "(", "head", ".", "convs", ")", "==", "2", "\n", "assert", "hasattr", "(", "head", ",", "'dnl_block'", ")", "\n", "assert", "head", ".", "dnl_block", ".", "temperature", "==", "0.05", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n", "# NonLocal2d with 'dot_product' mode", "\n", "head", "=", "DNLHead", "(", "\n", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "mode", "=", "'dot_product'", ")", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n", "# NonLocal2d with 'gaussian' mode", "\n", "head", "=", "DNLHead", "(", "\n", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "mode", "=", "'gaussian'", ")", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n", "# NonLocal2d with 'concatenation' mode", "\n", "head", "=", "DNLHead", "(", "\n", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ",", "mode", "=", "'concatenation'", ")", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_emanet_head": [[739, 755], ["mmseg.models.decode_heads.EMAHead", "mmseg.models.decode_heads.EMAHead.ema_mid_conv.parameters", "hasattr", "torch.cuda.is_available", "mmseg.models.decode_heads.EMAHead.", "torch.randn", "test_heads.to_cuda"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_emanet_head", "(", ")", ":", "\n", "    ", "head", "=", "EMAHead", "(", "\n", "in_channels", "=", "32", ",", "\n", "ema_channels", "=", "24", ",", "\n", "channels", "=", "16", ",", "\n", "num_stages", "=", "3", ",", "\n", "num_bases", "=", "16", ",", "\n", "num_classes", "=", "19", ")", "\n", "for", "param", "in", "head", ".", "ema_mid_conv", ".", "parameters", "(", ")", ":", "\n", "        ", "assert", "not", "param", ".", "requires_grad", "\n", "", "assert", "hasattr", "(", "head", ",", "'ema_module'", ")", "\n", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "head", ",", "inputs", ")", "\n", "", "outputs", "=", "head", "(", "inputs", ")", "\n", "assert", "outputs", ".", "shape", "==", "(", "1", ",", "head", ".", "num_classes", ",", "45", ",", "45", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_point_head": [[757, 772], ["mmseg.models.decode_heads.PointHead", "mmseg.models.decode_heads.FCNHead", "torch.cuda.is_available", "mmseg.models.decode_heads.FCNHead.", "mmcv.utils.ConfigDict", "mmseg.models.decode_heads.PointHead.forward_test", "torch.randn", "len", "test_heads.to_cuda", "test_heads.to_cuda"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.forward_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.to_cuda"], ["", "def", "test_point_head", "(", ")", ":", "\n", "\n", "    ", "inputs", "=", "[", "torch", ".", "randn", "(", "1", ",", "32", ",", "45", ",", "45", ")", "]", "\n", "point_head", "=", "PointHead", "(", "\n", "in_channels", "=", "[", "32", "]", ",", "in_index", "=", "[", "0", "]", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ")", "\n", "assert", "len", "(", "point_head", ".", "fcs", ")", "==", "3", "\n", "fcn_head", "=", "FCNHead", "(", "in_channels", "=", "32", ",", "channels", "=", "16", ",", "num_classes", "=", "19", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ",", "inputs", "=", "to_cuda", "(", "point_head", ",", "inputs", ")", "\n", "head", ",", "inputs", "=", "to_cuda", "(", "fcn_head", ",", "inputs", ")", "\n", "", "prev_output", "=", "fcn_head", "(", "inputs", ")", "\n", "test_cfg", "=", "ConfigDict", "(", "\n", "subdivision_steps", "=", "2", ",", "subdivision_num_points", "=", "8196", ",", "scale_factor", "=", "2", ")", "\n", "output", "=", "point_head", ".", "forward_test", "(", "inputs", ",", "prev_output", ",", "None", ",", "test_cfg", ")", "\n", "assert", "output", ".", "shape", "==", "(", "1", ",", "point_head", ".", "num_classes", ",", "180", ",", "180", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_heads.test_lraspp_head": [[774, 835], ["mmseg.models.decode_heads.LRASPPHead", "mmseg.models.decode_heads.LRASPPHead.", "pytest.raises", "mmseg.models.decode_heads.LRASPPHead", "pytest.raises", "mmseg.models.decode_heads.LRASPPHead", "torch.randn", "torch.randn", "torch.randn", "pytest.raises", "mmseg.models.decode_heads.LRASPPHead.", "torch.randn", "torch.randn", "torch.randn", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["None"], ["", "def", "test_lraspp_head", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "# check invalid input_transform", "\n", "        ", "LRASPPHead", "(", "\n", "in_channels", "=", "(", "16", ",", "16", ",", "576", ")", ",", "\n", "in_index", "=", "(", "0", ",", "1", ",", "2", ")", ",", "\n", "channels", "=", "128", ",", "\n", "input_transform", "=", "'resize_concat'", ",", "\n", "dropout_ratio", "=", "0.1", ",", "\n", "num_classes", "=", "19", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "align_corners", "=", "False", ",", "\n", "loss_decode", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_sigmoid", "=", "False", ",", "loss_weight", "=", "1.0", ")", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# check invalid branch_channels", "\n", "        ", "LRASPPHead", "(", "\n", "in_channels", "=", "(", "16", ",", "16", ",", "576", ")", ",", "\n", "in_index", "=", "(", "0", ",", "1", ",", "2", ")", ",", "\n", "channels", "=", "128", ",", "\n", "branch_channels", "=", "64", ",", "\n", "input_transform", "=", "'multiple_select'", ",", "\n", "dropout_ratio", "=", "0.1", ",", "\n", "num_classes", "=", "19", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "align_corners", "=", "False", ",", "\n", "loss_decode", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_sigmoid", "=", "False", ",", "loss_weight", "=", "1.0", ")", ")", "\n", "\n", "# test with default settings", "\n", "", "lraspp_head", "=", "LRASPPHead", "(", "\n", "in_channels", "=", "(", "16", ",", "16", ",", "576", ")", ",", "\n", "in_index", "=", "(", "0", ",", "1", ",", "2", ")", ",", "\n", "channels", "=", "128", ",", "\n", "input_transform", "=", "'multiple_select'", ",", "\n", "dropout_ratio", "=", "0.1", ",", "\n", "num_classes", "=", "19", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "align_corners", "=", "False", ",", "\n", "loss_decode", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_sigmoid", "=", "False", ",", "loss_weight", "=", "1.0", ")", ")", "\n", "inputs", "=", "[", "\n", "torch", ".", "randn", "(", "2", ",", "16", ",", "45", ",", "45", ")", ",", "\n", "torch", ".", "randn", "(", "2", ",", "16", ",", "28", ",", "28", ")", ",", "\n", "torch", ".", "randn", "(", "2", ",", "576", ",", "14", ",", "14", ")", "\n", "]", "\n", "with", "pytest", ".", "raises", "(", "RuntimeError", ")", ":", "\n", "# check invalid inputs", "\n", "        ", "output", "=", "lraspp_head", "(", "inputs", ")", "\n", "\n", "", "inputs", "=", "[", "\n", "torch", ".", "randn", "(", "2", ",", "16", ",", "111", ",", "111", ")", ",", "\n", "torch", ".", "randn", "(", "2", ",", "16", ",", "77", ",", "77", ")", ",", "\n", "torch", ".", "randn", "(", "2", ",", "576", ",", "55", ",", "55", ")", "\n", "]", "\n", "output", "=", "lraspp_head", "(", "inputs", ")", "\n", "assert", "output", ".", "shape", "==", "(", "2", ",", "19", ",", "111", ",", "111", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_necks.test_fpn": [[6, 19], ["mmseg.models.FPN", "mmseg.models.FPN.", "torch.randn", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "enumerate"], "function", ["None"], ["def", "test_fpn", "(", ")", ":", "\n", "    ", "in_channels", "=", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", "\n", "inputs", "=", "[", "\n", "torch", ".", "randn", "(", "1", ",", "c", ",", "56", "//", "2", "**", "i", ",", "56", "//", "2", "**", "i", ")", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "in_channels", ")", "\n", "]", "\n", "\n", "fpn", "=", "FPN", "(", "in_channels", ",", "256", ",", "len", "(", "in_channels", ")", ")", "\n", "outputs", "=", "fpn", "(", "inputs", ")", "\n", "assert", "outputs", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "outputs", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "28", ",", "28", "]", ")", "\n", "assert", "outputs", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "14", ",", "14", "]", ")", "\n", "assert", "outputs", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "7", ",", "7", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.__init__": [[50, 53], ["torch.nn.Module.__init__", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ExampleBackbone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.init_weights": [[54, 56], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleBackbone.forward": [[57, 59], ["test_segmentor.ExampleBackbone.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "[", "self", ".", "conv", "(", "x", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleDecodeHead.__init__": [[64, 66], ["mmseg.models.decode_heads.decode_head.BaseDecodeHead.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ExampleDecodeHead", ",", "self", ")", ".", "__init__", "(", "3", ",", "3", ",", "num_classes", "=", "19", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleDecodeHead.forward": [[67, 69], ["test_segmentor.ExampleDecodeHead.cls_seg"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "cls_seg", "(", "inputs", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.__init__": [[74, 76], ["mmseg.models.decode_heads.cascade_decode_head.BaseCascadeDecodeHead.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ExampleCascadeDecodeHead", ",", "self", ")", ".", "__init__", "(", "3", ",", "3", ",", "num_classes", "=", "19", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward": [[77, 79], ["test_segmentor.ExampleCascadeDecodeHead.cls_seg"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "prev_out", ")", ":", "\n", "        ", "return", "self", ".", "cls_seg", "(", "inputs", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor._demo_mm_inputs": [[11, 45], ["numpy.random.RandomState", "np.random.RandomState.rand", "np.random.RandomState.randint().astype", "torch.FloatTensor", "torch.LongTensor", "np.random.RandomState.randint", "range"], "function", ["None"], ["def", "_demo_mm_inputs", "(", "input_shape", "=", "(", "1", ",", "3", ",", "8", ",", "16", ")", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Create a superset of inputs needed to run test or train batches.\n\n    Args:\n        input_shape (tuple):\n            input batch dimensions\n\n        num_classes (int):\n            number of semantic classes\n    \"\"\"", "\n", "(", "N", ",", "C", ",", "H", ",", "W", ")", "=", "input_shape", "\n", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "0", ")", "\n", "\n", "imgs", "=", "rng", ".", "rand", "(", "*", "input_shape", ")", "\n", "segs", "=", "rng", ".", "randint", "(", "\n", "low", "=", "0", ",", "high", "=", "num_classes", "-", "1", ",", "size", "=", "(", "N", ",", "1", ",", "H", ",", "W", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'ori_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'pad_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'filename'", ":", "'<demo>.png'", ",", "\n", "'scale_factor'", ":", "1.0", ",", "\n", "'flip'", ":", "False", ",", "\n", "'flip_direction'", ":", "'horizontal'", "\n", "}", "for", "_", "in", "range", "(", "N", ")", "]", "\n", "\n", "mm_inputs", "=", "{", "\n", "'imgs'", ":", "torch", ".", "FloatTensor", "(", "imgs", ")", ",", "\n", "'img_metas'", ":", "img_metas", ",", "\n", "'gt_semantic_seg'", ":", "torch", ".", "LongTensor", "(", "segs", ")", "\n", "}", "\n", "return", "mm_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor._segmentor_forward_train_test": [[81, 121], ["isinstance", "test_segmentor._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "torch.cuda.is_available", "segmentor.cuda.forward", "isinstance", "segmentor.cuda.cuda", "imgs.cuda.cuda", "gt_semantic_seg.cuda.cuda", "torch.no_grad", "segmentor.cuda.eval", "segmentor.cuda.forward", "torch.no_grad", "segmentor.cuda.eval", "segmentor.cuda.forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward"], ["", "", "def", "_segmentor_forward_train_test", "(", "segmentor", ")", ":", "\n", "    ", "if", "isinstance", "(", "segmentor", ".", "decode_head", ",", "nn", ".", "ModuleList", ")", ":", "\n", "        ", "num_classes", "=", "segmentor", ".", "decode_head", "[", "-", "1", "]", ".", "num_classes", "\n", "", "else", ":", "\n", "        ", "num_classes", "=", "segmentor", ".", "decode_head", ".", "num_classes", "\n", "# batch_size=2 for BatchNorm", "\n", "", "mm_inputs", "=", "_demo_mm_inputs", "(", "num_classes", "=", "num_classes", ")", "\n", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "gt_semantic_seg", "=", "mm_inputs", "[", "'gt_semantic_seg'", "]", "\n", "\n", "# convert to cuda Tensor if applicable", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "segmentor", "=", "segmentor", ".", "cuda", "(", ")", "\n", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "gt_semantic_seg", "=", "gt_semantic_seg", ".", "cuda", "(", ")", "\n", "\n", "# Test forward train", "\n", "", "losses", "=", "segmentor", ".", "forward", "(", "\n", "imgs", ",", "img_metas", ",", "gt_semantic_seg", "=", "gt_semantic_seg", ",", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "\n", "# Test forward simple test", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "segmentor", ".", "eval", "(", ")", "\n", "# pack into lists", "\n", "img_list", "=", "[", "img", "[", "None", ",", ":", "]", "for", "img", "in", "imgs", "]", "\n", "img_meta_list", "=", "[", "[", "img_meta", "]", "for", "img_meta", "in", "img_metas", "]", "\n", "segmentor", ".", "forward", "(", "img_list", ",", "img_meta_list", ",", "return_loss", "=", "False", ")", "\n", "\n", "# Test forward aug test", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "segmentor", ".", "eval", "(", ")", "\n", "# pack into lists", "\n", "img_list", "=", "[", "img", "[", "None", ",", ":", "]", "for", "img", "in", "imgs", "]", "\n", "img_list", "=", "img_list", "+", "img_list", "\n", "img_meta_list", "=", "[", "[", "img_meta", "]", "for", "img_meta", "in", "img_metas", "]", "\n", "img_meta_list", "=", "img_meta_list", "+", "img_meta_list", "\n", "segmentor", ".", "forward", "(", "img_list", ",", "img_meta_list", ",", "return_loss", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.test_encoder_decoder": [[123, 163], ["mmcv.ConfigDict", "mmseg.models.build_segmentor", "test_segmentor._segmentor_forward_train_test", "mmcv.ConfigDict", "mmseg.models.build_segmentor", "test_segmentor._segmentor_forward_train_test", "mmcv.ConfigDict", "mmcv.ConfigDict", "mmseg.models.build_segmentor", "test_segmentor._segmentor_forward_train_test", "mmcv.ConfigDict", "mmcv.ConfigDict", "mmseg.models.build_segmentor", "test_segmentor._segmentor_forward_train_test", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_segmentor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor._segmentor_forward_train_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_segmentor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor._segmentor_forward_train_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_segmentor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor._segmentor_forward_train_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_segmentor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor._segmentor_forward_train_test"], ["", "", "def", "test_encoder_decoder", "(", ")", ":", "\n", "\n", "# test 1 decode head, w.o. aux head", "\n", "\n", "    ", "cfg", "=", "ConfigDict", "(", "\n", "type", "=", "'EncoderDecoder'", ",", "\n", "backbone", "=", "dict", "(", "type", "=", "'ExampleBackbone'", ")", ",", "\n", "decode_head", "=", "dict", "(", "type", "=", "'ExampleDecodeHead'", ")", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "dict", "(", "mode", "=", "'whole'", ")", ")", "\n", "segmentor", "=", "build_segmentor", "(", "cfg", ")", "\n", "_segmentor_forward_train_test", "(", "segmentor", ")", "\n", "\n", "# test slide mode", "\n", "cfg", ".", "test_cfg", "=", "ConfigDict", "(", "mode", "=", "'slide'", ",", "crop_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", "segmentor", "=", "build_segmentor", "(", "cfg", ")", "\n", "_segmentor_forward_train_test", "(", "segmentor", ")", "\n", "\n", "# test 1 decode head, 1 aux head", "\n", "cfg", "=", "ConfigDict", "(", "\n", "type", "=", "'EncoderDecoder'", ",", "\n", "backbone", "=", "dict", "(", "type", "=", "'ExampleBackbone'", ")", ",", "\n", "decode_head", "=", "dict", "(", "type", "=", "'ExampleDecodeHead'", ")", ",", "\n", "auxiliary_head", "=", "dict", "(", "type", "=", "'ExampleDecodeHead'", ")", ")", "\n", "cfg", ".", "test_cfg", "=", "ConfigDict", "(", "mode", "=", "'whole'", ")", "\n", "segmentor", "=", "build_segmentor", "(", "cfg", ")", "\n", "_segmentor_forward_train_test", "(", "segmentor", ")", "\n", "\n", "# test 1 decode head, 2 aux head", "\n", "cfg", "=", "ConfigDict", "(", "\n", "type", "=", "'EncoderDecoder'", ",", "\n", "backbone", "=", "dict", "(", "type", "=", "'ExampleBackbone'", ")", ",", "\n", "decode_head", "=", "dict", "(", "type", "=", "'ExampleDecodeHead'", ")", ",", "\n", "auxiliary_head", "=", "[", "\n", "dict", "(", "type", "=", "'ExampleDecodeHead'", ")", ",", "\n", "dict", "(", "type", "=", "'ExampleDecodeHead'", ")", "\n", "]", ")", "\n", "cfg", ".", "test_cfg", "=", "ConfigDict", "(", "mode", "=", "'whole'", ")", "\n", "segmentor", "=", "build_segmentor", "(", "cfg", ")", "\n", "_segmentor_forward_train_test", "(", "segmentor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.test_cascade_encoder_decoder": [[165, 215], ["mmcv.ConfigDict", "mmcv.ConfigDict", "mmseg.models.build_segmentor", "test_segmentor._segmentor_forward_train_test", "mmcv.ConfigDict", "mmseg.models.build_segmentor", "test_segmentor._segmentor_forward_train_test", "mmcv.ConfigDict", "mmcv.ConfigDict", "mmseg.models.build_segmentor", "test_segmentor._segmentor_forward_train_test", "mmcv.ConfigDict", "mmcv.ConfigDict", "mmseg.models.build_segmentor", "test_segmentor._segmentor_forward_train_test", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_segmentor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor._segmentor_forward_train_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_segmentor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor._segmentor_forward_train_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_segmentor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor._segmentor_forward_train_test", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_segmentor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor._segmentor_forward_train_test"], ["", "def", "test_cascade_encoder_decoder", "(", ")", ":", "\n", "\n", "# test 1 decode head, w.o. aux head", "\n", "    ", "cfg", "=", "ConfigDict", "(", "\n", "type", "=", "'CascadeEncoderDecoder'", ",", "\n", "num_stages", "=", "2", ",", "\n", "backbone", "=", "dict", "(", "type", "=", "'ExampleBackbone'", ")", ",", "\n", "decode_head", "=", "[", "\n", "dict", "(", "type", "=", "'ExampleDecodeHead'", ")", ",", "\n", "dict", "(", "type", "=", "'ExampleCascadeDecodeHead'", ")", "\n", "]", ")", "\n", "cfg", ".", "test_cfg", "=", "ConfigDict", "(", "mode", "=", "'whole'", ")", "\n", "segmentor", "=", "build_segmentor", "(", "cfg", ")", "\n", "_segmentor_forward_train_test", "(", "segmentor", ")", "\n", "\n", "# test slide mode", "\n", "cfg", ".", "test_cfg", "=", "ConfigDict", "(", "mode", "=", "'slide'", ",", "crop_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ")", "\n", "segmentor", "=", "build_segmentor", "(", "cfg", ")", "\n", "_segmentor_forward_train_test", "(", "segmentor", ")", "\n", "\n", "# test 1 decode head, 1 aux head", "\n", "cfg", "=", "ConfigDict", "(", "\n", "type", "=", "'CascadeEncoderDecoder'", ",", "\n", "num_stages", "=", "2", ",", "\n", "backbone", "=", "dict", "(", "type", "=", "'ExampleBackbone'", ")", ",", "\n", "decode_head", "=", "[", "\n", "dict", "(", "type", "=", "'ExampleDecodeHead'", ")", ",", "\n", "dict", "(", "type", "=", "'ExampleCascadeDecodeHead'", ")", "\n", "]", ",", "\n", "auxiliary_head", "=", "dict", "(", "type", "=", "'ExampleDecodeHead'", ")", ")", "\n", "cfg", ".", "test_cfg", "=", "ConfigDict", "(", "mode", "=", "'whole'", ")", "\n", "segmentor", "=", "build_segmentor", "(", "cfg", ")", "\n", "_segmentor_forward_train_test", "(", "segmentor", ")", "\n", "\n", "# test 1 decode head, 2 aux head", "\n", "cfg", "=", "ConfigDict", "(", "\n", "type", "=", "'CascadeEncoderDecoder'", ",", "\n", "num_stages", "=", "2", ",", "\n", "backbone", "=", "dict", "(", "type", "=", "'ExampleBackbone'", ")", ",", "\n", "decode_head", "=", "[", "\n", "dict", "(", "type", "=", "'ExampleDecodeHead'", ")", ",", "\n", "dict", "(", "type", "=", "'ExampleCascadeDecodeHead'", ")", "\n", "]", ",", "\n", "auxiliary_head", "=", "[", "\n", "dict", "(", "type", "=", "'ExampleDecodeHead'", ")", ",", "\n", "dict", "(", "type", "=", "'ExampleDecodeHead'", ")", "\n", "]", ")", "\n", "cfg", ".", "test_cfg", "=", "ConfigDict", "(", "mode", "=", "'whole'", ")", "\n", "segmentor", "=", "build_segmentor", "(", "cfg", ")", "\n", "_segmentor_forward_train_test", "(", "segmentor", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._demo_mm_inputs": [[13, 47], ["numpy.random.RandomState", "np.random.RandomState.rand", "np.random.RandomState.randint().astype", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "np.random.RandomState.randint", "range"], "function", ["None"], ["def", "_demo_mm_inputs", "(", "input_shape", "=", "(", "2", ",", "3", ",", "8", ",", "16", ")", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Create a superset of inputs needed to run test or train batches.\n\n    Args:\n        input_shape (tuple):\n            input batch dimensions\n\n        num_classes (int):\n            number of semantic classes\n    \"\"\"", "\n", "(", "N", ",", "C", ",", "H", ",", "W", ")", "=", "input_shape", "\n", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "0", ")", "\n", "\n", "imgs", "=", "rng", ".", "rand", "(", "*", "input_shape", ")", "\n", "segs", "=", "rng", ".", "randint", "(", "\n", "low", "=", "0", ",", "high", "=", "num_classes", "-", "1", ",", "size", "=", "(", "N", ",", "1", ",", "H", ",", "W", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'ori_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'pad_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'filename'", ":", "'<demo>.png'", ",", "\n", "'scale_factor'", ":", "1.0", ",", "\n", "'flip'", ":", "False", ",", "\n", "'flip_direction'", ":", "'horizontal'", "\n", "}", "for", "_", "in", "range", "(", "N", ")", "]", "\n", "\n", "mm_inputs", "=", "{", "\n", "'imgs'", ":", "torch", ".", "FloatTensor", "(", "imgs", ")", ",", "\n", "'img_metas'", ":", "img_metas", ",", "\n", "'gt_semantic_seg'", ":", "torch", ".", "LongTensor", "(", "segs", ")", "\n", "}", "\n", "return", "mm_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._get_config_directory": [[49, 62], ["os.path.join", "os.path.dirname", "os.path.exists", "Exception", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["", "def", "_get_config_directory", "(", ")", ":", "\n", "    ", "\"\"\"Find the predefined segmentor config directory.\"\"\"", "\n", "try", ":", "\n", "# Assume we are running in the source mmsegmentation repo", "\n", "        ", "repo_dpath", "=", "dirname", "(", "dirname", "(", "dirname", "(", "__file__", ")", ")", ")", "\n", "", "except", "NameError", ":", "\n", "# For IPython development when this __file__ is not defined", "\n", "        ", "import", "mmseg", "\n", "repo_dpath", "=", "dirname", "(", "dirname", "(", "dirname", "(", "mmseg", ".", "__file__", ")", ")", ")", "\n", "", "config_dpath", "=", "join", "(", "repo_dpath", ",", "'configs'", ")", "\n", "if", "not", "exists", "(", "config_dpath", ")", ":", "\n", "        ", "raise", "Exception", "(", "'Cannot find config path'", ")", "\n", "", "return", "config_dpath", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._get_config_module": [[64, 71], ["test_forward._get_config_directory", "os.path.join", "Config.fromfile"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._get_config_directory"], ["", "def", "_get_config_module", "(", "fname", ")", ":", "\n", "    ", "\"\"\"Load a configuration as a python module.\"\"\"", "\n", "from", "mmcv", "import", "Config", "\n", "config_dpath", "=", "_get_config_directory", "(", ")", "\n", "config_fpath", "=", "join", "(", "config_dpath", ",", "fname", ")", "\n", "config_mod", "=", "Config", ".", "fromfile", "(", "config_fpath", ")", "\n", "return", "config_mod", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._get_segmentor_cfg": [[73, 82], ["test_forward._get_config_module", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._get_config_module"], ["", "def", "_get_segmentor_cfg", "(", "fname", ")", ":", "\n", "    ", "\"\"\"Grab configs necessary to create a segmentor.\n\n    These are deep copied to allow for safe modification of parameters without\n    influencing other tests.\n    \"\"\"", "\n", "config", "=", "_get_config_module", "(", "fname", ")", "\n", "model", "=", "copy", ".", "deepcopy", "(", "config", ".", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_pspnet_forward": [[84, 87], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_pspnet_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "\n", "'pspnet/pspnet_r50-d8_512x1024_40k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_fcn_forward": [[89, 91], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_fcn_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "'fcn/fcn_r50-d8_512x1024_40k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_deeplabv3_forward": [[93, 96], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_deeplabv3_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "\n", "'deeplabv3/deeplabv3_r50-d8_512x1024_40k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_deeplabv3plus_forward": [[98, 101], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_deeplabv3plus_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "\n", "'deeplabv3plus/deeplabv3plus_r50-d8_512x1024_40k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_gcnet_forward": [[103, 106], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_gcnet_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "\n", "'gcnet/gcnet_r50-d8_512x1024_40k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_ann_forward": [[108, 110], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_ann_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "'ann/ann_r50-d8_512x1024_40k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_ccnet_forward": [[112, 117], ["test_forward._test_encoder_decoder_forward", "torch.cuda.is_available", "torch.cuda.is_available", "pytest.skip"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_ccnet_forward", "(", ")", ":", "\n", "    ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "'CCNet requires CUDA'", ")", "\n", "", "_test_encoder_decoder_forward", "(", "\n", "'ccnet/ccnet_r50-d8_512x1024_40k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_danet_forward": [[119, 122], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_danet_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "\n", "'danet/danet_r50-d8_512x1024_40k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_nonlocal_net_forward": [[124, 127], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_nonlocal_net_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "\n", "'nonlocal_net/nonlocal_r50-d8_512x1024_40k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_upernet_forward": [[129, 132], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_upernet_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "\n", "'upernet/upernet_r50_512x1024_40k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_hrnet_forward": [[134, 136], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_hrnet_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "'hrnet/fcn_hr18s_512x1024_40k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_ocrnet_forward": [[138, 141], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_ocrnet_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "\n", "'ocrnet/ocrnet_hr18s_512x1024_40k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_psanet_forward": [[143, 146], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_psanet_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "\n", "'psanet/psanet_r50-d8_512x1024_40k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_encnet_forward": [[148, 151], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_encnet_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "\n", "'encnet/encnet_r50-d8_512x1024_40k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_sem_fpn_forward": [[153, 155], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_sem_fpn_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "'sem_fpn/fpn_r50_512x1024_80k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_point_rend_forward": [[157, 160], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_point_rend_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "\n", "'point_rend/pointrend_r50_512x1024_80k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_mobilenet_v2_forward": [[162, 165], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_mobilenet_v2_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "\n", "'mobilenet_v2/pspnet_m-v2-d8_512x1024_80k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_dnlnet_forward": [[167, 170], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_dnlnet_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "\n", "'dnlnet/dnl_r50-d8_512x1024_40k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.test_emanet_forward": [[172, 175], ["test_forward._test_encoder_decoder_forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward"], ["", "def", "test_emanet_forward", "(", ")", ":", "\n", "    ", "_test_encoder_decoder_forward", "(", "\n", "'emanet/emanet_r50-d8_512x1024_80k_cityscapes.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward.get_world_size": [[177, 180], ["None"], "function", ["None"], ["", "def", "get_world_size", "(", "process_group", ")", ":", "\n", "\n", "    ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._check_input_dim": [[182, 184], ["None"], "function", ["None"], ["", "def", "_check_input_dim", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._convert_batchnorm": [[186, 206], ["isinstance", "module.named_children", "mmcv.utils.parrots_wrapper._BatchNorm", "mmcv.utils.parrots_wrapper._BatchNorm.add_module", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "test_forward._convert_batchnorm", "module.weight.data.clone", "module.bias.data.clone"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._convert_batchnorm"], ["", "def", "_convert_batchnorm", "(", "module", ")", ":", "\n", "    ", "module_output", "=", "module", "\n", "if", "isinstance", "(", "module", ",", "SyncBatchNorm", ")", ":", "\n", "# to be consistent with SyncBN, we hack dim check function in BN", "\n", "        ", "module_output", "=", "_BatchNorm", "(", "module", ".", "num_features", ",", "module", ".", "eps", ",", "\n", "module", ".", "momentum", ",", "module", ".", "affine", ",", "\n", "module", ".", "track_running_stats", ")", "\n", "if", "module", ".", "affine", ":", "\n", "            ", "module_output", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "module_output", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "# keep requires_grad unchanged", "\n", "module_output", ".", "weight", ".", "requires_grad", "=", "module", ".", "weight", ".", "requires_grad", "\n", "module_output", ".", "bias", ".", "requires_grad", "=", "module", ".", "bias", ".", "requires_grad", "\n", "", "module_output", ".", "running_mean", "=", "module", ".", "running_mean", "\n", "module_output", ".", "running_var", "=", "module", ".", "running_var", "\n", "module_output", ".", "num_batches_tracked", "=", "module", ".", "num_batches_tracked", "\n", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "module_output", ".", "add_module", "(", "name", ",", "_convert_batchnorm", "(", "child", ")", ")", "\n", "", "del", "module", "\n", "return", "module_output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._test_encoder_decoder_forward": [[208, 251], ["unittest.mock.patch", "unittest.mock.patch", "test_forward._get_segmentor_cfg", "build_segmentor", "isinstance", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "torch.cuda.is_available", "torch.cuda.is_available", "_convert_batchnorm.forward", "isinstance", "_convert_batchnorm.cuda", "imgs.cuda.cuda", "gt_semantic_seg.cuda.cuda", "test_forward._convert_batchnorm", "torch.no_grad", "torch.no_grad", "_convert_batchnorm.eval", "_convert_batchnorm.forward"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._get_segmentor_cfg", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_segmentor", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_forward._convert_batchnorm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_segmentor.ExampleCascadeDecodeHead.forward"], ["", "@", "patch", "(", "'torch.nn.modules.batchnorm._BatchNorm._check_input_dim'", ",", "\n", "_check_input_dim", ")", "\n", "@", "patch", "(", "'torch.distributed.get_world_size'", ",", "get_world_size", ")", "\n", "def", "_test_encoder_decoder_forward", "(", "cfg_file", ")", ":", "\n", "    ", "model", "=", "_get_segmentor_cfg", "(", "cfg_file", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "model", "[", "'test_cfg'", "]", "[", "'mode'", "]", "=", "'whole'", "\n", "\n", "from", "mmseg", ".", "models", "import", "build_segmentor", "\n", "segmentor", "=", "build_segmentor", "(", "model", ")", "\n", "\n", "if", "isinstance", "(", "segmentor", ".", "decode_head", ",", "nn", ".", "ModuleList", ")", ":", "\n", "        ", "num_classes", "=", "segmentor", ".", "decode_head", "[", "-", "1", "]", ".", "num_classes", "\n", "", "else", ":", "\n", "        ", "num_classes", "=", "segmentor", ".", "decode_head", ".", "num_classes", "\n", "# batch_size=2 for BatchNorm", "\n", "", "input_shape", "=", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "gt_semantic_seg", "=", "mm_inputs", "[", "'gt_semantic_seg'", "]", "\n", "\n", "# convert to cuda Tensor if applicable", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "segmentor", "=", "segmentor", ".", "cuda", "(", ")", "\n", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "gt_semantic_seg", "=", "gt_semantic_seg", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "segmentor", "=", "_convert_batchnorm", "(", "segmentor", ")", "\n", "\n", "# Test forward train", "\n", "", "losses", "=", "segmentor", ".", "forward", "(", "\n", "imgs", ",", "img_metas", ",", "gt_semantic_seg", "=", "gt_semantic_seg", ",", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "\n", "# Test forward test", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "segmentor", ".", "eval", "(", ")", "\n", "# pack into lists", "\n", "img_list", "=", "[", "img", "[", "None", ",", ":", "]", "for", "img", "in", "imgs", "]", "\n", "img_meta_list", "=", "[", "[", "img_meta", "]", "for", "img_meta", "in", "img_metas", "]", "\n", "segmentor", ".", "forward", "(", "img_list", ",", "img_meta_list", ",", "return_loss", "=", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_losses.test_utils": [[8, 41], ["torch.rand", "torch.zeros", "mmseg.models.losses.reduce_loss", "mmseg.models.losses.reduce_loss", "numpy.testing.assert_almost_equal", "mmseg.models.losses.reduce_loss", "numpy.testing.assert_almost_equal", "mmseg.models.losses.weight_reduce_loss", "mmseg.models.losses.weight_reduce_loss", "numpy.testing.assert_almost_equal", "mmseg.models.losses.weight_reduce_loss", "numpy.testing.assert_almost_equal", "mmseg.models.losses.weight_reduce_loss.numpy", "torch.rand.mean", "mmseg.models.losses.weight_reduce_loss.numpy", "torch.rand.sum", "mmseg.models.losses.weight_reduce_loss.numpy", "mmseg.models.losses.weight_reduce_loss.numpy", "pytest.raises", "mmseg.models.losses.weight_reduce_loss", "pytest.raises", "mmseg.models.losses.weight_reduce_loss"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.reduce_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.reduce_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.reduce_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.weight_reduce_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.weight_reduce_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.weight_reduce_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.weight_reduce_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.losses.utils.weight_reduce_loss"], ["def", "test_utils", "(", ")", ":", "\n", "    ", "loss", "=", "torch", ".", "rand", "(", "1", ",", "3", ",", "4", ",", "4", ")", "\n", "weight", "=", "torch", ".", "zeros", "(", "1", ",", "3", ",", "4", ",", "4", ")", "\n", "weight", "[", ":", ",", ":", ",", ":", "2", ",", ":", "2", "]", "=", "1", "\n", "\n", "# test reduce_loss()", "\n", "reduced", "=", "reduce_loss", "(", "loss", ",", "'none'", ")", "\n", "assert", "reduced", "is", "loss", "\n", "\n", "reduced", "=", "reduce_loss", "(", "loss", ",", "'mean'", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "reduced", ".", "numpy", "(", ")", ",", "loss", ".", "mean", "(", ")", ")", "\n", "\n", "reduced", "=", "reduce_loss", "(", "loss", ",", "'sum'", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "reduced", ".", "numpy", "(", ")", ",", "loss", ".", "sum", "(", ")", ")", "\n", "\n", "# test weight_reduce_loss()", "\n", "reduced", "=", "weight_reduce_loss", "(", "loss", ",", "weight", "=", "None", ",", "reduction", "=", "'none'", ")", "\n", "assert", "reduced", "is", "loss", "\n", "\n", "reduced", "=", "weight_reduce_loss", "(", "loss", ",", "weight", "=", "weight", ",", "reduction", "=", "'mean'", ")", "\n", "target", "=", "(", "loss", "*", "weight", ")", ".", "mean", "(", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "reduced", ".", "numpy", "(", ")", ",", "target", ")", "\n", "\n", "reduced", "=", "weight_reduce_loss", "(", "loss", ",", "weight", "=", "weight", ",", "reduction", "=", "'sum'", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "reduced", ".", "numpy", "(", ")", ",", "(", "loss", "*", "weight", ")", ".", "sum", "(", ")", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "weight_wrong", "=", "weight", "[", "0", ",", "0", ",", "...", "]", "\n", "weight_reduce_loss", "(", "loss", ",", "weight", "=", "weight_wrong", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "weight_wrong", "=", "weight", "[", ":", ",", "0", ":", "2", ",", "...", "]", "\n", "weight_reduce_loss", "(", "loss", ",", "weight", "=", "weight_wrong", ",", "reduction", "=", "'mean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_losses.test_ce_loss": [[43, 85], ["dict", "build_loss", "torch.Tensor", "torch.Tensor().long", "torch.allclose", "dict", "build_loss", "torch.allclose", "dict", "build_loss", "torch.allclose", "torch.full", "torch.ones().long", "torch.allclose", "torch.allclose", "pytest.raises", "dict", "build_loss", "build_loss.", "torch.tensor", "build_loss.", "torch.tensor", "build_loss.", "torch.tensor", "build_loss.", "torch.tensor", "build_loss.", "torch.tensor", "torch.Tensor", "torch.ones"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_loss"], ["", "", "def", "test_ce_loss", "(", ")", ":", "\n", "    ", "from", "mmseg", ".", "models", "import", "build_loss", "\n", "\n", "# use_mask and use_sigmoid cannot be true at the same time", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "loss_cfg", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "\n", "use_mask", "=", "True", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "loss_weight", "=", "1.0", ")", "\n", "build_loss", "(", "loss_cfg", ")", "\n", "\n", "# test loss with class weights", "\n", "", "loss_cls_cfg", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "\n", "use_sigmoid", "=", "False", ",", "\n", "class_weight", "=", "[", "0.8", ",", "0.2", "]", ",", "\n", "loss_weight", "=", "1.0", ")", "\n", "loss_cls", "=", "build_loss", "(", "loss_cls_cfg", ")", "\n", "fake_pred", "=", "torch", ".", "Tensor", "(", "[", "[", "100", ",", "-", "100", "]", "]", ")", "\n", "fake_label", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "long", "(", ")", "\n", "assert", "torch", ".", "allclose", "(", "loss_cls", "(", "fake_pred", ",", "fake_label", ")", ",", "torch", ".", "tensor", "(", "40.", ")", ")", "\n", "\n", "loss_cls_cfg", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_sigmoid", "=", "False", ",", "loss_weight", "=", "1.0", ")", "\n", "loss_cls", "=", "build_loss", "(", "loss_cls_cfg", ")", "\n", "assert", "torch", ".", "allclose", "(", "loss_cls", "(", "fake_pred", ",", "fake_label", ")", ",", "torch", ".", "tensor", "(", "200.", ")", ")", "\n", "\n", "loss_cls_cfg", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_sigmoid", "=", "True", ",", "loss_weight", "=", "1.0", ")", "\n", "loss_cls", "=", "build_loss", "(", "loss_cls_cfg", ")", "\n", "assert", "torch", ".", "allclose", "(", "loss_cls", "(", "fake_pred", ",", "fake_label", ")", ",", "torch", ".", "tensor", "(", "100.", ")", ")", "\n", "\n", "fake_pred", "=", "torch", ".", "full", "(", "size", "=", "(", "2", ",", "21", ",", "8", ",", "8", ")", ",", "fill_value", "=", "0.5", ")", "\n", "fake_label", "=", "torch", ".", "ones", "(", "2", ",", "8", ",", "8", ")", ".", "long", "(", ")", "\n", "assert", "torch", ".", "allclose", "(", "\n", "loss_cls", "(", "fake_pred", ",", "fake_label", ")", ",", "torch", ".", "tensor", "(", "0.9503", ")", ",", "atol", "=", "1e-4", ")", "\n", "fake_label", "[", ":", ",", "0", ",", "0", "]", "=", "255", "\n", "assert", "torch", ".", "allclose", "(", "\n", "loss_cls", "(", "fake_pred", ",", "fake_label", ",", "ignore_index", "=", "255", ")", ",", "\n", "torch", ".", "tensor", "(", "0.9354", ")", ",", "\n", "atol", "=", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_losses.test_accuracy": [[89, 145], ["torch.empty", "torch.empty", "mmseg.models.losses.Accuracy", "mmseg.models.losses.Accuracy.", "torch.Tensor", "torch.Tensor().long", "mmseg.models.losses.Accuracy", "mmseg.models.losses.Accuracy.", "torch.Tensor().long", "mmseg.models.losses.Accuracy", "mmseg.models.losses.Accuracy.", "mmseg.models.losses.Accuracy", "torch.Tensor().long", "mmseg.models.losses.Accuracy.", "mmseg.models.losses.Accuracy", "torch.Tensor().long", "mmseg.models.losses.Accuracy.", "accuracy.item", "accuracy.item", "accuracy.item", "accuracy.item", "pytest.raises", "mmseg.models.losses.Accuracy", "mmseg.models.losses.Accuracy.", "pytest.raises", "mmseg.models.losses.Accuracy", "mmseg.models.losses.Accuracy.", "pytest.raises", "torch.Tensor().long", "mmseg.models.losses.Accuracy", "mmseg.models.losses.Accuracy.", "pytest.raises", "mmseg.models.losses.Accuracy", "mmseg.models.losses.Accuracy.", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "a.item", "torch.Tensor"], "function", ["None"], ["", "def", "test_accuracy", "(", ")", ":", "\n", "# test for empty pred", "\n", "    ", "pred", "=", "torch", ".", "empty", "(", "0", ",", "4", ")", "\n", "label", "=", "torch", ".", "empty", "(", "0", ")", "\n", "accuracy", "=", "Accuracy", "(", "topk", "=", "1", ")", "\n", "acc", "=", "accuracy", "(", "pred", ",", "label", ")", "\n", "assert", "acc", ".", "item", "(", ")", "==", "0", "\n", "\n", "pred", "=", "torch", ".", "Tensor", "(", "[", "[", "0.2", ",", "0.3", ",", "0.6", ",", "0.5", "]", ",", "[", "0.1", ",", "0.1", ",", "0.2", ",", "0.6", "]", ",", "\n", "[", "0.9", ",", "0.0", ",", "0.0", ",", "0.1", "]", ",", "[", "0.4", ",", "0.7", ",", "0.1", ",", "0.1", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.99", ",", "0", "]", "]", ")", "\n", "# test for top1", "\n", "true_label", "=", "torch", ".", "Tensor", "(", "[", "2", ",", "3", ",", "0", ",", "1", ",", "2", "]", ")", ".", "long", "(", ")", "\n", "accuracy", "=", "Accuracy", "(", "topk", "=", "1", ")", "\n", "acc", "=", "accuracy", "(", "pred", ",", "true_label", ")", "\n", "assert", "acc", ".", "item", "(", ")", "==", "100", "\n", "\n", "# test for top1 with score thresh=0.8", "\n", "true_label", "=", "torch", ".", "Tensor", "(", "[", "2", ",", "3", ",", "0", ",", "1", ",", "2", "]", ")", ".", "long", "(", ")", "\n", "accuracy", "=", "Accuracy", "(", "topk", "=", "1", ",", "thresh", "=", "0.8", ")", "\n", "acc", "=", "accuracy", "(", "pred", ",", "true_label", ")", "\n", "assert", "acc", ".", "item", "(", ")", "==", "40", "\n", "\n", "# test for top2", "\n", "accuracy", "=", "Accuracy", "(", "topk", "=", "2", ")", "\n", "label", "=", "torch", ".", "Tensor", "(", "[", "3", ",", "2", ",", "0", ",", "0", ",", "2", "]", ")", ".", "long", "(", ")", "\n", "acc", "=", "accuracy", "(", "pred", ",", "label", ")", "\n", "assert", "acc", ".", "item", "(", ")", "==", "100", "\n", "\n", "# test for both top1 and top2", "\n", "accuracy", "=", "Accuracy", "(", "topk", "=", "(", "1", ",", "2", ")", ")", "\n", "true_label", "=", "torch", ".", "Tensor", "(", "[", "2", ",", "3", ",", "0", ",", "1", ",", "2", "]", ")", ".", "long", "(", ")", "\n", "acc", "=", "accuracy", "(", "pred", ",", "true_label", ")", "\n", "for", "a", "in", "acc", ":", "\n", "        ", "assert", "a", ".", "item", "(", ")", "==", "100", "\n", "\n", "# topk is larger than pred class number", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "accuracy", "=", "Accuracy", "(", "topk", "=", "5", ")", "\n", "accuracy", "(", "pred", ",", "true_label", ")", "\n", "\n", "# wrong topk type", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "accuracy", "=", "Accuracy", "(", "topk", "=", "'wrong type'", ")", "\n", "accuracy", "(", "pred", ",", "true_label", ")", "\n", "\n", "# label size is larger than required", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "label", "=", "torch", ".", "Tensor", "(", "[", "2", ",", "3", ",", "0", ",", "1", ",", "2", ",", "0", "]", ")", ".", "long", "(", ")", "# size mismatch", "\n", "accuracy", "=", "Accuracy", "(", ")", "\n", "accuracy", "(", "pred", ",", "label", ")", "\n", "\n", "# wrong pred dimension", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "accuracy", "=", "Accuracy", "(", ")", "\n", "accuracy", "(", "pred", "[", ":", ",", ":", ",", "None", "]", ",", "true_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_models.test_losses.test_lovasz_loss": [[147, 205], ["dict", "build_loss", "torch.rand", "build_loss.", "dict", "build_loss", "torch.rand", "build_loss.", "dict", "build_loss", "torch.rand", "torch.rand().long", "build_loss.", "dict", "build_loss", "torch.rand", "torch.rand().long", "build_loss.", "pytest.raises", "dict", "build_loss", "pytest.raises", "dict", "build_loss", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_loss", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.models.builder.build_loss"], ["", "", "def", "test_lovasz_loss", "(", ")", ":", "\n", "    ", "from", "mmseg", ".", "models", "import", "build_loss", "\n", "\n", "# loss_type should be 'binary' or 'multi_class'", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "loss_cfg", "=", "dict", "(", "\n", "type", "=", "'LovaszLoss'", ",", "\n", "loss_type", "=", "'Binary'", ",", "\n", "reduction", "=", "'none'", ",", "\n", "loss_weight", "=", "1.0", ")", "\n", "build_loss", "(", "loss_cfg", ")", "\n", "\n", "# reduction should be 'none' when per_image is False.", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "loss_cfg", "=", "dict", "(", "type", "=", "'LovaszLoss'", ",", "loss_type", "=", "'multi_class'", ")", "\n", "build_loss", "(", "loss_cfg", ")", "\n", "\n", "# test lovasz loss with loss_type = 'multi_class' and per_image = False", "\n", "", "loss_cfg", "=", "dict", "(", "type", "=", "'LovaszLoss'", ",", "reduction", "=", "'none'", ",", "loss_weight", "=", "1.0", ")", "\n", "lovasz_loss", "=", "build_loss", "(", "loss_cfg", ")", "\n", "logits", "=", "torch", ".", "rand", "(", "1", ",", "3", ",", "4", ",", "4", ")", "\n", "labels", "=", "(", "torch", ".", "rand", "(", "1", ",", "4", ",", "4", ")", "*", "2", ")", ".", "long", "(", ")", "\n", "lovasz_loss", "(", "logits", ",", "labels", ")", "\n", "\n", "# test lovasz loss with loss_type = 'multi_class' and per_image = True", "\n", "loss_cfg", "=", "dict", "(", "\n", "type", "=", "'LovaszLoss'", ",", "\n", "per_image", "=", "True", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "class_weight", "=", "[", "1.0", ",", "2.0", ",", "3.0", "]", ",", "\n", "loss_weight", "=", "1.0", ")", "\n", "lovasz_loss", "=", "build_loss", "(", "loss_cfg", ")", "\n", "logits", "=", "torch", ".", "rand", "(", "1", ",", "3", ",", "4", ",", "4", ")", "\n", "labels", "=", "(", "torch", ".", "rand", "(", "1", ",", "4", ",", "4", ")", "*", "2", ")", ".", "long", "(", ")", "\n", "lovasz_loss", "(", "logits", ",", "labels", ",", "ignore_index", "=", "None", ")", "\n", "\n", "# test lovasz loss with loss_type = 'binary' and per_image = False", "\n", "loss_cfg", "=", "dict", "(", "\n", "type", "=", "'LovaszLoss'", ",", "\n", "loss_type", "=", "'binary'", ",", "\n", "reduction", "=", "'none'", ",", "\n", "loss_weight", "=", "1.0", ")", "\n", "lovasz_loss", "=", "build_loss", "(", "loss_cfg", ")", "\n", "logits", "=", "torch", ".", "rand", "(", "2", ",", "4", ",", "4", ")", "\n", "labels", "=", "(", "torch", ".", "rand", "(", "2", ",", "4", ",", "4", ")", ")", ".", "long", "(", ")", "\n", "lovasz_loss", "(", "logits", ",", "labels", ")", "\n", "\n", "# test lovasz loss with loss_type = 'binary' and per_image = True", "\n", "loss_cfg", "=", "dict", "(", "\n", "type", "=", "'LovaszLoss'", ",", "\n", "loss_type", "=", "'binary'", ",", "\n", "per_image", "=", "True", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "loss_weight", "=", "1.0", ")", "\n", "lovasz_loss", "=", "build_loss", "(", "loss_cfg", ")", "\n", "logits", "=", "torch", ".", "rand", "(", "2", ",", "4", ",", "4", ")", "\n", "labels", "=", "(", "torch", ".", "rand", "(", "2", ",", "4", ",", "4", ")", ")", ".", "long", "(", ")", "\n", "lovasz_loss", "(", "logits", ",", "labels", ",", "ignore_index", "=", "None", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_transform.test_resize": [[13, 104], ["dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "os.join", "dict.copy", "dict.copy", "dict.copy", "max", "min", "min", "dict.copy", "dict.copy", "max", "dict.copy", "int", "int", "os.dirname"], "function", ["None"], ["def", "test_resize", "(", ")", ":", "\n", "# test assertion if img_scale is a list", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Resize'", ",", "img_scale", "=", "[", "1333", ",", "800", "]", ",", "keep_ratio", "=", "True", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion if len(img_scale) while ratio_range is not None", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'Resize'", ",", "\n", "img_scale", "=", "[", "(", "1333", ",", "800", ")", ",", "(", "1333", ",", "600", ")", "]", ",", "\n", "ratio_range", "=", "(", "0.9", ",", "1.1", ")", ",", "\n", "keep_ratio", "=", "True", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid multiscale_mode", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'Resize'", ",", "\n", "img_scale", "=", "[", "(", "1333", ",", "800", ")", ",", "(", "1333", ",", "600", ")", "]", ",", "\n", "keep_ratio", "=", "True", ",", "\n", "multiscale_mode", "=", "'2333'", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "", "transform", "=", "dict", "(", "type", "=", "'Resize'", ",", "img_scale", "=", "(", "1333", ",", "800", ")", ",", "keep_ratio", "=", "True", ")", "\n", "resize_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "results", "=", "dict", "(", ")", "\n", "# (288, 512, 3)", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/color.jpg'", ")", ",", "'color'", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "\n", "resized_results", "=", "resize_module", "(", "results", ".", "copy", "(", ")", ")", "\n", "assert", "resized_results", "[", "'img_shape'", "]", "==", "(", "750", ",", "1333", ",", "3", ")", "\n", "\n", "# test keep_ratio=False", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Resize'", ",", "\n", "img_scale", "=", "(", "1280", ",", "800", ")", ",", "\n", "multiscale_mode", "=", "'value'", ",", "\n", "keep_ratio", "=", "False", ")", "\n", "resize_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "resized_results", "=", "resize_module", "(", "results", ".", "copy", "(", ")", ")", "\n", "assert", "resized_results", "[", "'img_shape'", "]", "==", "(", "800", ",", "1280", ",", "3", ")", "\n", "\n", "# test multiscale_mode='range'", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Resize'", ",", "\n", "img_scale", "=", "[", "(", "1333", ",", "400", ")", ",", "(", "1333", ",", "1200", ")", "]", ",", "\n", "multiscale_mode", "=", "'range'", ",", "\n", "keep_ratio", "=", "True", ")", "\n", "resize_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "resized_results", "=", "resize_module", "(", "results", ".", "copy", "(", ")", ")", "\n", "assert", "max", "(", "resized_results", "[", "'img_shape'", "]", "[", ":", "2", "]", ")", "<=", "1333", "\n", "assert", "min", "(", "resized_results", "[", "'img_shape'", "]", "[", ":", "2", "]", ")", ">=", "400", "\n", "assert", "min", "(", "resized_results", "[", "'img_shape'", "]", "[", ":", "2", "]", ")", "<=", "1200", "\n", "\n", "# test multiscale_mode='value'", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Resize'", ",", "\n", "img_scale", "=", "[", "(", "1333", ",", "800", ")", ",", "(", "1333", ",", "400", ")", "]", ",", "\n", "multiscale_mode", "=", "'value'", ",", "\n", "keep_ratio", "=", "True", ")", "\n", "resize_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "resized_results", "=", "resize_module", "(", "results", ".", "copy", "(", ")", ")", "\n", "assert", "resized_results", "[", "'img_shape'", "]", "in", "[", "(", "750", ",", "1333", ",", "3", ")", ",", "(", "400", ",", "711", ",", "3", ")", "]", "\n", "\n", "# test multiscale_mode='range'", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Resize'", ",", "\n", "img_scale", "=", "(", "1333", ",", "800", ")", ",", "\n", "ratio_range", "=", "(", "0.9", ",", "1.1", ")", ",", "\n", "keep_ratio", "=", "True", ")", "\n", "resize_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "resized_results", "=", "resize_module", "(", "results", ".", "copy", "(", ")", ")", "\n", "assert", "max", "(", "resized_results", "[", "'img_shape'", "]", "[", ":", "2", "]", ")", "<=", "1333", "*", "1.1", "\n", "\n", "# test img_scale=None and ratio_range is tuple.", "\n", "# img shape: (288, 512, 3)", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Resize'", ",", "img_scale", "=", "None", ",", "ratio_range", "=", "(", "0.5", ",", "2.0", ")", ",", "keep_ratio", "=", "True", ")", "\n", "resize_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "resized_results", "=", "resize_module", "(", "results", ".", "copy", "(", ")", ")", "\n", "assert", "int", "(", "288", "*", "0.5", ")", "<=", "resized_results", "[", "'img_shape'", "]", "[", "0", "]", "<=", "288", "*", "2.0", "\n", "assert", "int", "(", "512", "*", "0.5", ")", "<=", "resized_results", "[", "'img_shape'", "]", "[", "1", "]", "<=", "512", "*", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_transform.test_flip": [[106, 142], ["dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "copy.deepcopy", "numpy.array", "copy.deepcopy", "mmcv.utils.build_from_cfg.", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "numpy.equal().all", "numpy.equal().all", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "os.join", "PIL.Image.open", "os.dirname", "os.join", "numpy.equal", "numpy.equal", "os.dirname"], "function", ["None"], ["", "def", "test_flip", "(", ")", ":", "\n", "# test assertion for invalid prob", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'RandomFlip'", ",", "prob", "=", "1.5", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid direction", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'RandomFlip'", ",", "prob", "=", "1", ",", "direction", "=", "'horizonta'", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "", "transform", "=", "dict", "(", "type", "=", "'RandomFlip'", ",", "prob", "=", "1", ")", "\n", "flip_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/color.jpg'", ")", ",", "'color'", ")", "\n", "original_img", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "seg", "=", "np", ".", "array", "(", "\n", "Image", ".", "open", "(", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/seg.png'", ")", ")", ")", "\n", "original_seg", "=", "copy", ".", "deepcopy", "(", "seg", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'gt_semantic_seg'", "]", "=", "seg", "\n", "results", "[", "'seg_fields'", "]", "=", "[", "'gt_semantic_seg'", "]", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "\n", "results", "=", "flip_module", "(", "results", ")", "\n", "\n", "flip_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results", "=", "flip_module", "(", "results", ")", "\n", "assert", "np", ".", "equal", "(", "original_img", ",", "results", "[", "'img'", "]", ")", ".", "all", "(", ")", "\n", "assert", "np", ".", "equal", "(", "original_seg", ",", "results", "[", "'gt_semantic_seg'", "]", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_transform.test_random_crop": [[144, 171], ["dict", "mmcv.imread", "numpy.array", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "os.join", "PIL.Image.open", "os.dirname", "os.join", "os.dirname"], "function", ["None"], ["", "def", "test_random_crop", "(", ")", ":", "\n", "# test assertion for invalid random crop", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'RandomCrop'", ",", "crop_size", "=", "(", "-", "1", ",", "0", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/color.jpg'", ")", ",", "'color'", ")", "\n", "seg", "=", "np", ".", "array", "(", "\n", "Image", ".", "open", "(", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/seg.png'", ")", ")", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'gt_semantic_seg'", "]", "=", "seg", "\n", "results", "[", "'seg_fields'", "]", "=", "[", "'gt_semantic_seg'", "]", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "\n", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "transform", "=", "dict", "(", "type", "=", "'RandomCrop'", ",", "crop_size", "=", "(", "h", "-", "20", ",", "w", "-", "20", ")", ")", "\n", "crop_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results", "=", "crop_module", "(", "results", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "==", "(", "h", "-", "20", ",", "w", "-", "20", ")", "\n", "assert", "results", "[", "'img_shape'", "]", "[", ":", "2", "]", "==", "(", "h", "-", "20", ",", "w", "-", "20", ")", "\n", "assert", "results", "[", "'gt_semantic_seg'", "]", ".", "shape", "[", ":", "2", "]", "==", "(", "h", "-", "20", ",", "w", "-", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_transform.test_pad": [[173, 207], ["dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "copy.deepcopy", "dict.", "numpy.equal().all", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict.", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "os.join", "os.dirname", "numpy.equal"], "function", ["None"], ["", "def", "test_pad", "(", ")", ":", "\n", "# test assertion if both size_divisor and size is None", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Pad'", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "", "transform", "=", "dict", "(", "type", "=", "'Pad'", ",", "size_divisor", "=", "32", ")", "\n", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/color.jpg'", ")", ",", "'color'", ")", "\n", "original_img", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "\n", "results", "=", "transform", "(", "results", ")", "\n", "# original img already divisible by 32", "\n", "assert", "np", ".", "equal", "(", "results", "[", "'img'", "]", ",", "original_img", ")", ".", "all", "(", ")", "\n", "img_shape", "=", "results", "[", "'img'", "]", ".", "shape", "\n", "assert", "img_shape", "[", "0", "]", "%", "32", "==", "0", "\n", "assert", "img_shape", "[", "1", "]", "%", "32", "==", "0", "\n", "\n", "resize_transform", "=", "dict", "(", "\n", "type", "=", "'Resize'", ",", "img_scale", "=", "(", "1333", ",", "800", ")", ",", "keep_ratio", "=", "True", ")", "\n", "resize_module", "=", "build_from_cfg", "(", "resize_transform", ",", "PIPELINES", ")", "\n", "results", "=", "resize_module", "(", "results", ")", "\n", "results", "=", "transform", "(", "results", ")", "\n", "img_shape", "=", "results", "[", "'img'", "]", ".", "shape", "\n", "assert", "img_shape", "[", "0", "]", "%", "32", "==", "0", "\n", "assert", "img_shape", "[", "1", "]", "%", "32", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_transform.test_rotate": [[209, 248], ["dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "numpy.array", "dict.", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "str", "os.join", "PIL.Image.open", "os.dirname", "os.join", "os.dirname"], "function", ["None"], ["", "def", "test_rotate", "(", ")", ":", "\n", "# test assertion degree should be tuple[float] or float", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'RandomRotate'", ",", "prob", "=", "0.5", ",", "degree", "=", "-", "10", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "# test assertion degree should be tuple[float] or float", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'RandomRotate'", ",", "prob", "=", "0.5", ",", "degree", "=", "(", "10.", ",", "20.", ",", "30.", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "", "transform", "=", "dict", "(", "type", "=", "'RandomRotate'", ",", "degree", "=", "10.", ",", "prob", "=", "1.", ")", "\n", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "assert", "str", "(", "transform", ")", "==", "f'RandomRotate('", "f'prob={1.}, '", "f'degree=({-10.}, {10.}), '", "f'pad_val={0}, '", "f'seg_pad_val={255}, '", "f'center={None}, '", "f'auto_bound={False})'", "\n", "\n", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/color.jpg'", ")", ",", "'color'", ")", "\n", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "seg", "=", "np", ".", "array", "(", "\n", "Image", ".", "open", "(", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/seg.png'", ")", ")", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'gt_semantic_seg'", "]", "=", "seg", "\n", "results", "[", "'seg_fields'", "]", "=", "[", "'gt_semantic_seg'", "]", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "\n", "results", "=", "transform", "(", "results", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "==", "(", "h", ",", "w", ")", "\n", "assert", "results", "[", "'gt_semantic_seg'", "]", ".", "shape", "[", ":", "2", "]", "==", "(", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_transform.test_normalize": [[250, 274], ["dict", "dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "copy.deepcopy", "mmcv.utils.build_from_cfg.", "numpy.array", "numpy.array", "numpy.allclose", "os.join", "os.dirname"], "function", ["None"], ["", "def", "test_normalize", "(", ")", ":", "\n", "    ", "img_norm_cfg", "=", "dict", "(", "\n", "mean", "=", "[", "123.675", ",", "116.28", ",", "103.53", "]", ",", "\n", "std", "=", "[", "58.395", ",", "57.12", ",", "57.375", "]", ",", "\n", "to_rgb", "=", "True", ")", "\n", "transform", "=", "dict", "(", "type", "=", "'Normalize'", ",", "**", "img_norm_cfg", ")", "\n", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/color.jpg'", ")", ",", "'color'", ")", "\n", "original_img", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "\n", "results", "=", "transform", "(", "results", ")", "\n", "\n", "mean", "=", "np", ".", "array", "(", "img_norm_cfg", "[", "'mean'", "]", ")", "\n", "std", "=", "np", ".", "array", "(", "img_norm_cfg", "[", "'std'", "]", ")", "\n", "converted_img", "=", "(", "original_img", "[", "...", ",", ":", ":", "-", "1", "]", "-", "mean", ")", "/", "std", "\n", "assert", "np", ".", "allclose", "(", "results", "[", "'img'", "]", ",", "converted_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_transform.test_rgb2gray": [[276, 341], ["dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "numpy.array", "dict.", "dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "numpy.array", "dict.", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "str", "os.join", "PIL.Image.open", "str", "os.join", "PIL.Image.open", "os.dirname", "os.join", "os.dirname", "os.join", "os.dirname", "os.dirname"], "function", ["None"], ["", "def", "test_rgb2gray", "(", ")", ":", "\n", "# test assertion out_channels should be greater than 0", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'RGB2Gray'", ",", "out_channels", "=", "-", "1", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "# test assertion weights should be tuple[float]", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'RGB2Gray'", ",", "out_channels", "=", "1", ",", "weights", "=", "1.1", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test out_channels is None", "\n", "", "transform", "=", "dict", "(", "type", "=", "'RGB2Gray'", ")", "\n", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "assert", "str", "(", "transform", ")", "==", "f'RGB2Gray('", "f'out_channels={None}, '", "f'weights={(0.299, 0.587, 0.114)})'", "\n", "\n", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/color.jpg'", ")", ",", "'color'", ")", "\n", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "seg", "=", "np", ".", "array", "(", "\n", "Image", ".", "open", "(", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/seg.png'", ")", ")", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'gt_semantic_seg'", "]", "=", "seg", "\n", "results", "[", "'seg_fields'", "]", "=", "[", "'gt_semantic_seg'", "]", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "\n", "results", "=", "transform", "(", "results", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "shape", "==", "(", "h", ",", "w", ",", "c", ")", "\n", "assert", "results", "[", "'img_shape'", "]", "==", "(", "h", ",", "w", ",", "c", ")", "\n", "assert", "results", "[", "'ori_shape'", "]", "==", "(", "h", ",", "w", ",", "c", ")", "\n", "\n", "# test out_channels = 2", "\n", "transform", "=", "dict", "(", "type", "=", "'RGB2Gray'", ",", "out_channels", "=", "2", ")", "\n", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "assert", "str", "(", "transform", ")", "==", "f'RGB2Gray('", "f'out_channels={2}, '", "f'weights={(0.299, 0.587, 0.114)})'", "\n", "\n", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/color.jpg'", ")", ",", "'color'", ")", "\n", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "seg", "=", "np", ".", "array", "(", "\n", "Image", ".", "open", "(", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/seg.png'", ")", ")", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'gt_semantic_seg'", "]", "=", "seg", "\n", "results", "[", "'seg_fields'", "]", "=", "[", "'gt_semantic_seg'", "]", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "\n", "results", "=", "transform", "(", "results", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "shape", "==", "(", "h", ",", "w", ",", "2", ")", "\n", "assert", "results", "[", "'img_shape'", "]", "==", "(", "h", ",", "w", ",", "2", ")", "\n", "assert", "results", "[", "'ori_shape'", "]", "==", "(", "h", ",", "w", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_transform.test_adjust_gamma": [[343, 377], ["dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "copy.deepcopy", "dict.", "numpy.array().astype", "mmcv.lut_transform", "numpy.allclose", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "os.join", "numpy.array", "str", "os.dirname", "numpy.array", "numpy.arange"], "function", ["None"], ["", "def", "test_adjust_gamma", "(", ")", ":", "\n", "# test assertion if gamma <= 0", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'AdjustGamma'", ",", "gamma", "=", "0", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion if gamma is list", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'AdjustGamma'", ",", "gamma", "=", "[", "1.2", "]", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test with gamma = 1.2", "\n", "", "transform", "=", "dict", "(", "type", "=", "'AdjustGamma'", ",", "gamma", "=", "1.2", ")", "\n", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/color.jpg'", ")", ",", "'color'", ")", "\n", "original_img", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "\n", "results", "=", "transform", "(", "results", ")", "\n", "\n", "inv_gamma", "=", "1.0", "/", "1.2", "\n", "table", "=", "np", ".", "array", "(", "[", "(", "(", "i", "/", "255.0", ")", "**", "inv_gamma", ")", "*", "255", "\n", "for", "i", "in", "np", ".", "arange", "(", "0", ",", "256", ")", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "converted_img", "=", "mmcv", ".", "lut_transform", "(", "\n", "np", ".", "array", "(", "original_img", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "table", ")", "\n", "assert", "np", ".", "allclose", "(", "results", "[", "'img'", "]", ",", "converted_img", ")", "\n", "assert", "str", "(", "transform", ")", "==", "f'AdjustGamma(gamma={1.2})'", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_transform.test_rerange": [[379, 420], ["dict", "dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "copy.deepcopy", "mmcv.utils.build_from_cfg.", "numpy.min", "numpy.max", "numpy.allclose", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "dict", "numpy.array", "mmcv.utils.build_from_cfg.", "os.join", "str", "os.dirname"], "function", ["None"], ["", "def", "test_rerange", "(", ")", ":", "\n", "# test assertion if min_value or max_value is illegal", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Rerange'", ",", "min_value", "=", "[", "0", "]", ",", "max_value", "=", "[", "255", "]", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion if min_value >= max_value", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Rerange'", ",", "min_value", "=", "1", ",", "max_value", "=", "1", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion if img_min_value == img_max_value", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Rerange'", ",", "min_value", "=", "0", ",", "max_value", "=", "1", ")", "\n", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results", "=", "dict", "(", ")", "\n", "results", "[", "'img'", "]", "=", "np", ".", "array", "(", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ")", "\n", "transform", "(", "results", ")", "\n", "\n", "", "img_rerange_cfg", "=", "dict", "(", ")", "\n", "transform", "=", "dict", "(", "type", "=", "'Rerange'", ",", "**", "img_rerange_cfg", ")", "\n", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/color.jpg'", ")", ",", "'color'", ")", "\n", "original_img", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "\n", "results", "=", "transform", "(", "results", ")", "\n", "\n", "min_value", "=", "np", ".", "min", "(", "original_img", ")", "\n", "max_value", "=", "np", ".", "max", "(", "original_img", ")", "\n", "converted_img", "=", "(", "original_img", "-", "min_value", ")", "/", "(", "max_value", "-", "min_value", ")", "*", "255", "\n", "\n", "assert", "np", ".", "allclose", "(", "results", "[", "'img'", "]", ",", "converted_img", ")", "\n", "assert", "str", "(", "transform", ")", "==", "f'Rerange(min_value={0}, max_value={255})'", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_transform.test_CLAHE": [[422, 460], ["dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "copy.deepcopy", "dict.", "numpy.empty", "range", "numpy.allclose", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "os.join", "mmcv.clahe", "str", "os.dirname", "numpy.array"], "function", ["None"], ["", "def", "test_CLAHE", "(", ")", ":", "\n", "# test assertion if clip_limit is None", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'CLAHE'", ",", "clip_limit", "=", "None", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion if tile_grid_size is illegal", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'CLAHE'", ",", "tile_grid_size", "=", "(", "8.0", ",", "8.0", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion if tile_grid_size is illegal", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'CLAHE'", ",", "tile_grid_size", "=", "(", "9", ",", "9", ",", "9", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "", "transform", "=", "dict", "(", "type", "=", "'CLAHE'", ",", "clip_limit", "=", "2", ")", "\n", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/color.jpg'", ")", ",", "'color'", ")", "\n", "original_img", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "\n", "results", "=", "transform", "(", "results", ")", "\n", "\n", "converted_img", "=", "np", ".", "empty", "(", "original_img", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "original_img", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "converted_img", "[", ":", ",", ":", ",", "i", "]", "=", "mmcv", ".", "clahe", "(", "\n", "np", ".", "array", "(", "original_img", "[", ":", ",", ":", ",", "i", "]", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "2", ",", "(", "8", ",", "8", ")", ")", "\n", "\n", "", "assert", "np", ".", "allclose", "(", "results", "[", "'img'", "]", ",", "converted_img", ")", "\n", "assert", "str", "(", "transform", ")", "==", "f'CLAHE(clip_limit={2}, tile_grid_size={(8, 8)})'", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_transform.test_seg_rescale": [[462, 479], ["dict", "numpy.array", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "PIL.Image.open", "dict.copy", "dict.copy", "os.join", "os.dirname"], "function", ["None"], ["", "def", "test_seg_rescale", "(", ")", ":", "\n", "    ", "results", "=", "dict", "(", ")", "\n", "seg", "=", "np", ".", "array", "(", "\n", "Image", ".", "open", "(", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/seg.png'", ")", ")", ")", "\n", "results", "[", "'gt_semantic_seg'", "]", "=", "seg", "\n", "results", "[", "'seg_fields'", "]", "=", "[", "'gt_semantic_seg'", "]", "\n", "h", ",", "w", "=", "seg", ".", "shape", "\n", "\n", "transform", "=", "dict", "(", "type", "=", "'SegRescale'", ",", "scale_factor", "=", "1.", "/", "2", ")", "\n", "rescale_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "rescale_results", "=", "rescale_module", "(", "results", ".", "copy", "(", ")", ")", "\n", "assert", "rescale_results", "[", "'gt_semantic_seg'", "]", ".", "shape", "==", "(", "h", "//", "2", ",", "w", "//", "2", ")", "\n", "\n", "transform", "=", "dict", "(", "type", "=", "'SegRescale'", ",", "scale_factor", "=", "1", ")", "\n", "rescale_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "rescale_results", "=", "rescale_module", "(", "results", ".", "copy", "(", ")", ")", "\n", "assert", "rescale_results", "[", "'gt_semantic_seg'", "]", ".", "shape", "==", "(", "h", ",", "w", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_loading.TestLoading.setup_class": [[13, 16], ["os.join", "os.dirname"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setup_class", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "data_prefix", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_loading.TestLoading.test_load_img": [[17, 63], ["dict", "mmseg.datasets.pipelines.LoadImageFromFile", "mmseg.datasets.pipelines.LoadImageFromFile.", "numpy.testing.assert_equal", "dict", "mmseg.datasets.pipelines.LoadImageFromFile", "mmseg.datasets.pipelines.LoadImageFromFile.", "mmseg.datasets.pipelines.LoadImageFromFile", "mmseg.datasets.pipelines.LoadImageFromFile.", "dict", "mmseg.datasets.pipelines.LoadImageFromFile", "mmseg.datasets.pipelines.LoadImageFromFile.", "mmseg.datasets.pipelines.LoadImageFromFile", "mmseg.datasets.pipelines.LoadImageFromFile.", "numpy.testing.assert_equal", "copy.deepcopy", "os.join", "numpy.zeros", "repr", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "numpy.zeros", "dict", "dict", "dict"], "methods", ["None"], ["", "def", "test_load_img", "(", "self", ")", ":", "\n", "        ", "results", "=", "dict", "(", "\n", "img_prefix", "=", "self", ".", "data_prefix", ",", "img_info", "=", "dict", "(", "filename", "=", "'color.jpg'", ")", ")", "\n", "transform", "=", "LoadImageFromFile", "(", ")", "\n", "results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "results", "[", "'filename'", "]", "==", "osp", ".", "join", "(", "self", ".", "data_prefix", ",", "'color.jpg'", ")", "\n", "assert", "results", "[", "'ori_filename'", "]", "==", "'color.jpg'", "\n", "assert", "results", "[", "'img'", "]", ".", "shape", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "results", "[", "'img_shape'", "]", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "assert", "results", "[", "'ori_shape'", "]", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "assert", "results", "[", "'pad_shape'", "]", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "assert", "results", "[", "'scale_factor'", "]", "==", "1.0", "\n", "np", ".", "testing", ".", "assert_equal", "(", "results", "[", "'img_norm_cfg'", "]", "[", "'mean'", "]", ",", "\n", "np", ".", "zeros", "(", "3", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "assert", "repr", "(", "transform", ")", "==", "transform", ".", "__class__", ".", "__name__", "+", "\"(to_float32=False,color_type='color',imdecode_backend='cv2')\"", "\n", "\n", "# no img_prefix", "\n", "results", "=", "dict", "(", "\n", "img_prefix", "=", "None", ",", "img_info", "=", "dict", "(", "filename", "=", "'tests/data/color.jpg'", ")", ")", "\n", "transform", "=", "LoadImageFromFile", "(", ")", "\n", "results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "results", "[", "'filename'", "]", "==", "'tests/data/color.jpg'", "\n", "assert", "results", "[", "'ori_filename'", "]", "==", "'tests/data/color.jpg'", "\n", "assert", "results", "[", "'img'", "]", ".", "shape", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "\n", "# to_float32", "\n", "transform", "=", "LoadImageFromFile", "(", "to_float32", "=", "True", ")", "\n", "results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "dtype", "==", "np", ".", "float32", "\n", "\n", "# gray image", "\n", "results", "=", "dict", "(", "\n", "img_prefix", "=", "self", ".", "data_prefix", ",", "img_info", "=", "dict", "(", "filename", "=", "'gray.jpg'", ")", ")", "\n", "transform", "=", "LoadImageFromFile", "(", ")", "\n", "results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "shape", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "dtype", "==", "np", ".", "uint8", "\n", "\n", "transform", "=", "LoadImageFromFile", "(", "color_type", "=", "'unchanged'", ")", "\n", "results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "shape", "==", "(", "288", ",", "512", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "dtype", "==", "np", ".", "uint8", "\n", "np", ".", "testing", ".", "assert_equal", "(", "results", "[", "'img_norm_cfg'", "]", "[", "'mean'", "]", ",", "\n", "np", ".", "zeros", "(", "1", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_loading.TestLoading.test_load_seg": [[64, 103], ["dict", "mmseg.datasets.pipelines.LoadAnnotations", "mmseg.datasets.pipelines.LoadAnnotations.", "dict", "mmseg.datasets.pipelines.LoadAnnotations", "mmseg.datasets.pipelines.LoadAnnotations.", "mmseg.datasets.pipelines.LoadAnnotations", "mmseg.datasets.pipelines.LoadAnnotations.", "dict", "mmseg.datasets.pipelines.LoadAnnotations", "mmseg.datasets.pipelines.LoadAnnotations.", "copy.deepcopy", "repr", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "dict", "dict", "dict"], "methods", ["None"], ["", "def", "test_load_seg", "(", "self", ")", ":", "\n", "        ", "results", "=", "dict", "(", "\n", "seg_prefix", "=", "self", ".", "data_prefix", ",", "\n", "ann_info", "=", "dict", "(", "seg_map", "=", "'seg.png'", ")", ",", "\n", "seg_fields", "=", "[", "]", ")", "\n", "transform", "=", "LoadAnnotations", "(", ")", "\n", "results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "results", "[", "'seg_fields'", "]", "==", "[", "'gt_semantic_seg'", "]", "\n", "assert", "results", "[", "'gt_semantic_seg'", "]", ".", "shape", "==", "(", "288", ",", "512", ")", "\n", "assert", "results", "[", "'gt_semantic_seg'", "]", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "repr", "(", "transform", ")", "==", "transform", ".", "__class__", ".", "__name__", "+", "\"(reduce_zero_label=False,imdecode_backend='pillow')\"", "\n", "\n", "# no img_prefix", "\n", "results", "=", "dict", "(", "\n", "seg_prefix", "=", "None", ",", "\n", "ann_info", "=", "dict", "(", "seg_map", "=", "'tests/data/seg.png'", ")", ",", "\n", "seg_fields", "=", "[", "]", ")", "\n", "transform", "=", "LoadAnnotations", "(", ")", "\n", "results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "results", "[", "'gt_semantic_seg'", "]", ".", "shape", "==", "(", "288", ",", "512", ")", "\n", "assert", "results", "[", "'gt_semantic_seg'", "]", ".", "dtype", "==", "np", ".", "uint8", "\n", "\n", "# reduce_zero_label", "\n", "transform", "=", "LoadAnnotations", "(", "reduce_zero_label", "=", "True", ")", "\n", "results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "results", "[", "'gt_semantic_seg'", "]", ".", "shape", "==", "(", "288", ",", "512", ")", "\n", "assert", "results", "[", "'gt_semantic_seg'", "]", ".", "dtype", "==", "np", ".", "uint8", "\n", "\n", "# mmcv backend", "\n", "results", "=", "dict", "(", "\n", "seg_prefix", "=", "self", ".", "data_prefix", ",", "\n", "ann_info", "=", "dict", "(", "seg_map", "=", "'seg.png'", ")", ",", "\n", "seg_fields", "=", "[", "]", ")", "\n", "transform", "=", "LoadAnnotations", "(", "imdecode_backend", "=", "'pillow'", ")", "\n", "results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "# this image is saved by PIL", "\n", "assert", "results", "[", "'gt_semantic_seg'", "]", ".", "shape", "==", "(", "288", ",", "512", ")", "\n", "assert", "results", "[", "'gt_semantic_seg'", "]", ".", "dtype", "==", "np", ".", "uint8", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_loading.TestLoading.test_load_seg_custom_classes": [[104, 199], ["numpy.random.rand", "numpy.zeros_like", "tempfile.TemporaryDirectory", "os.join", "os.join", "mmcv.imwrite", "mmcv.imwrite", "dict", "mmseg.datasets.pipelines.LoadImageFromFile", "mmseg.datasets.pipelines.LoadImageFromFile.", "mmseg.datasets.pipelines.LoadAnnotations", "mmseg.datasets.pipelines.LoadAnnotations.", "numpy.zeros_like", "numpy.testing.assert_array_equal", "dict", "mmseg.datasets.pipelines.LoadImageFromFile", "mmseg.datasets.pipelines.LoadImageFromFile.", "mmseg.datasets.pipelines.LoadAnnotations", "mmseg.datasets.pipelines.LoadAnnotations.", "numpy.zeros_like", "numpy.testing.assert_array_equal", "dict", "mmseg.datasets.pipelines.LoadImageFromFile", "mmseg.datasets.pipelines.LoadImageFromFile.", "mmseg.datasets.pipelines.LoadAnnotations", "mmseg.datasets.pipelines.LoadAnnotations.", "numpy.testing.assert_array_equal", "tempfile.TemporaryDirectory.cleanup", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "dict", "dict", "dict", "dict", "dict", "dict"], "methods", ["None"], ["", "def", "test_load_seg_custom_classes", "(", "self", ")", ":", "\n", "\n", "        ", "test_img", "=", "np", ".", "random", ".", "rand", "(", "10", ",", "10", ")", "\n", "test_gt", "=", "np", ".", "zeros_like", "(", "test_img", ")", "\n", "test_gt", "[", "2", ":", "4", ",", "2", ":", "4", "]", "=", "1", "\n", "test_gt", "[", "2", ":", "4", ",", "6", ":", "8", "]", "=", "2", "\n", "test_gt", "[", "6", ":", "8", ",", "2", ":", "4", "]", "=", "3", "\n", "test_gt", "[", "6", ":", "8", ",", "6", ":", "8", "]", "=", "4", "\n", "\n", "tmp_dir", "=", "tempfile", ".", "TemporaryDirectory", "(", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "tmp_dir", ".", "name", ",", "'img.jpg'", ")", "\n", "gt_path", "=", "osp", ".", "join", "(", "tmp_dir", ".", "name", ",", "'gt.png'", ")", "\n", "\n", "mmcv", ".", "imwrite", "(", "test_img", ",", "img_path", ")", "\n", "mmcv", ".", "imwrite", "(", "test_gt", ",", "gt_path", ")", "\n", "\n", "# test only train with label with id 3", "\n", "results", "=", "dict", "(", "\n", "img_info", "=", "dict", "(", "filename", "=", "img_path", ")", ",", "\n", "ann_info", "=", "dict", "(", "seg_map", "=", "gt_path", ")", ",", "\n", "label_map", "=", "{", "\n", "0", ":", "0", ",", "\n", "1", ":", "0", ",", "\n", "2", ":", "0", ",", "\n", "3", ":", "1", ",", "\n", "4", ":", "0", "\n", "}", ",", "\n", "seg_fields", "=", "[", "]", ")", "\n", "\n", "load_imgs", "=", "LoadImageFromFile", "(", ")", "\n", "results", "=", "load_imgs", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "\n", "load_anns", "=", "LoadAnnotations", "(", ")", "\n", "results", "=", "load_anns", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "\n", "gt_array", "=", "results", "[", "'gt_semantic_seg'", "]", "\n", "\n", "true_mask", "=", "np", ".", "zeros_like", "(", "gt_array", ")", "\n", "true_mask", "[", "6", ":", "8", ",", "2", ":", "4", "]", "=", "1", "\n", "\n", "assert", "results", "[", "'seg_fields'", "]", "==", "[", "'gt_semantic_seg'", "]", "\n", "assert", "gt_array", ".", "shape", "==", "(", "10", ",", "10", ")", "\n", "assert", "gt_array", ".", "dtype", "==", "np", ".", "uint8", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "gt_array", ",", "true_mask", ")", "\n", "\n", "# test only train with label with id 4 and 3", "\n", "results", "=", "dict", "(", "\n", "img_info", "=", "dict", "(", "filename", "=", "img_path", ")", ",", "\n", "ann_info", "=", "dict", "(", "seg_map", "=", "gt_path", ")", ",", "\n", "label_map", "=", "{", "\n", "0", ":", "0", ",", "\n", "1", ":", "0", ",", "\n", "2", ":", "0", ",", "\n", "3", ":", "2", ",", "\n", "4", ":", "1", "\n", "}", ",", "\n", "seg_fields", "=", "[", "]", ")", "\n", "\n", "load_imgs", "=", "LoadImageFromFile", "(", ")", "\n", "results", "=", "load_imgs", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "\n", "load_anns", "=", "LoadAnnotations", "(", ")", "\n", "results", "=", "load_anns", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "\n", "gt_array", "=", "results", "[", "'gt_semantic_seg'", "]", "\n", "\n", "true_mask", "=", "np", ".", "zeros_like", "(", "gt_array", ")", "\n", "true_mask", "[", "6", ":", "8", ",", "2", ":", "4", "]", "=", "2", "\n", "true_mask", "[", "6", ":", "8", ",", "6", ":", "8", "]", "=", "1", "\n", "\n", "assert", "results", "[", "'seg_fields'", "]", "==", "[", "'gt_semantic_seg'", "]", "\n", "assert", "gt_array", ".", "shape", "==", "(", "10", ",", "10", ")", "\n", "assert", "gt_array", ".", "dtype", "==", "np", ".", "uint8", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "gt_array", ",", "true_mask", ")", "\n", "\n", "# test no custom classes", "\n", "results", "=", "dict", "(", "\n", "img_info", "=", "dict", "(", "filename", "=", "img_path", ")", ",", "\n", "ann_info", "=", "dict", "(", "seg_map", "=", "gt_path", ")", ",", "\n", "seg_fields", "=", "[", "]", ")", "\n", "\n", "load_imgs", "=", "LoadImageFromFile", "(", ")", "\n", "results", "=", "load_imgs", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "\n", "load_anns", "=", "LoadAnnotations", "(", ")", "\n", "results", "=", "load_anns", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "\n", "gt_array", "=", "results", "[", "'gt_semantic_seg'", "]", "\n", "\n", "assert", "results", "[", "'seg_fields'", "]", "==", "[", "'gt_semantic_seg'", "]", "\n", "assert", "gt_array", ".", "shape", "==", "(", "10", ",", "10", ")", "\n", "assert", "gt_array", ".", "dtype", "==", "np", ".", "uint8", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "gt_array", ",", "test_gt", ")", "\n", "\n", "tmp_dir", ".", "cleanup", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__init__": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cnt", "=", "0", ")", ":", "\n", "        ", "self", ".", "cnt", "=", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__item__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__item__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.ToyDataset.__len__": [[21, 23], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.test_build_dataset": [[25, 128], ["dict", "mmseg.datasets.build_dataset", "isinstance", "mmseg.datasets.build_dataset", "isinstance", "os.join", "dict", "mmseg.datasets.build_dataset", "isinstance", "dict", "mmseg.datasets.build_dataset", "isinstance", "dict", "mmseg.datasets.build_dataset", "isinstance", "dict", "mmseg.datasets.build_dataset", "isinstance", "dict", "mmseg.datasets.build_dataset", "isinstance", "os.dirname", "len", "len", "len", "len", "len", "pytest.raises", "dict", "mmseg.datasets.build_dataset", "pytest.raises", "dict", "mmseg.datasets.build_dataset", "pytest.raises", "dict", "mmseg.datasets.build_dataset", "dict"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataset"], ["", "", "def", "test_build_dataset", "(", ")", ":", "\n", "    ", "cfg", "=", "dict", "(", "type", "=", "'ToyDataset'", ")", "\n", "dataset", "=", "build_dataset", "(", "cfg", ")", "\n", "assert", "isinstance", "(", "dataset", ",", "ToyDataset", ")", "\n", "assert", "dataset", ".", "cnt", "==", "0", "\n", "dataset", "=", "build_dataset", "(", "cfg", ",", "default_args", "=", "dict", "(", "cnt", "=", "1", ")", ")", "\n", "assert", "isinstance", "(", "dataset", ",", "ToyDataset", ")", "\n", "assert", "dataset", ".", "cnt", "==", "1", "\n", "\n", "data_root", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/pseudo_dataset'", ")", "\n", "img_dir", "=", "'imgs/'", "\n", "ann_dir", "=", "'gts/'", "\n", "\n", "# We use same dir twice for simplicity", "\n", "# with ann_dir", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'CustomDataset'", ",", "\n", "pipeline", "=", "[", "]", ",", "\n", "data_root", "=", "data_root", ",", "\n", "img_dir", "=", "[", "img_dir", ",", "img_dir", "]", ",", "\n", "ann_dir", "=", "[", "ann_dir", ",", "ann_dir", "]", ")", "\n", "dataset", "=", "build_dataset", "(", "cfg", ")", "\n", "assert", "isinstance", "(", "dataset", ",", "ConcatDataset", ")", "\n", "assert", "len", "(", "dataset", ")", "==", "10", "\n", "\n", "# with ann_dir, split", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'CustomDataset'", ",", "\n", "pipeline", "=", "[", "]", ",", "\n", "data_root", "=", "data_root", ",", "\n", "img_dir", "=", "img_dir", ",", "\n", "ann_dir", "=", "ann_dir", ",", "\n", "split", "=", "[", "'splits/train.txt'", ",", "'splits/val.txt'", "]", ")", "\n", "dataset", "=", "build_dataset", "(", "cfg", ")", "\n", "assert", "isinstance", "(", "dataset", ",", "ConcatDataset", ")", "\n", "assert", "len", "(", "dataset", ")", "==", "5", "\n", "\n", "# with ann_dir, split", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'CustomDataset'", ",", "\n", "pipeline", "=", "[", "]", ",", "\n", "data_root", "=", "data_root", ",", "\n", "img_dir", "=", "img_dir", ",", "\n", "ann_dir", "=", "[", "ann_dir", ",", "ann_dir", "]", ",", "\n", "split", "=", "[", "'splits/train.txt'", ",", "'splits/val.txt'", "]", ")", "\n", "dataset", "=", "build_dataset", "(", "cfg", ")", "\n", "assert", "isinstance", "(", "dataset", ",", "ConcatDataset", ")", "\n", "assert", "len", "(", "dataset", ")", "==", "5", "\n", "\n", "# test mode", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'CustomDataset'", ",", "\n", "pipeline", "=", "[", "]", ",", "\n", "data_root", "=", "data_root", ",", "\n", "img_dir", "=", "[", "img_dir", ",", "img_dir", "]", ",", "\n", "test_mode", "=", "True", ")", "\n", "dataset", "=", "build_dataset", "(", "cfg", ")", "\n", "assert", "isinstance", "(", "dataset", ",", "ConcatDataset", ")", "\n", "assert", "len", "(", "dataset", ")", "==", "10", "\n", "\n", "# test mode with splits", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'CustomDataset'", ",", "\n", "pipeline", "=", "[", "]", ",", "\n", "data_root", "=", "data_root", ",", "\n", "img_dir", "=", "[", "img_dir", ",", "img_dir", "]", ",", "\n", "split", "=", "[", "'splits/val.txt'", ",", "'splits/val.txt'", "]", ",", "\n", "test_mode", "=", "True", ")", "\n", "dataset", "=", "build_dataset", "(", "cfg", ")", "\n", "assert", "isinstance", "(", "dataset", ",", "ConcatDataset", ")", "\n", "assert", "len", "(", "dataset", ")", "==", "2", "\n", "\n", "# len(ann_dir) should be zero or len(img_dir) when len(img_dir) > 1", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "cfg", "=", "dict", "(", "\n", "type", "=", "'CustomDataset'", ",", "\n", "pipeline", "=", "[", "]", ",", "\n", "data_root", "=", "data_root", ",", "\n", "img_dir", "=", "[", "img_dir", ",", "img_dir", "]", ",", "\n", "ann_dir", "=", "[", "ann_dir", ",", "ann_dir", ",", "ann_dir", "]", ")", "\n", "build_dataset", "(", "cfg", ")", "\n", "\n", "# len(splits) should be zero or len(img_dir) when len(img_dir) > 1", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "cfg", "=", "dict", "(", "\n", "type", "=", "'CustomDataset'", ",", "\n", "pipeline", "=", "[", "]", ",", "\n", "data_root", "=", "data_root", ",", "\n", "img_dir", "=", "[", "img_dir", ",", "img_dir", "]", ",", "\n", "split", "=", "[", "'splits/val.txt'", ",", "'splits/val.txt'", ",", "'splits/val.txt'", "]", ")", "\n", "build_dataset", "(", "cfg", ")", "\n", "\n", "# len(splits) == len(ann_dir) when only len(img_dir) == 1 and len(", "\n", "# ann_dir) > 1", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "cfg", "=", "dict", "(", "\n", "type", "=", "'CustomDataset'", ",", "\n", "pipeline", "=", "[", "]", ",", "\n", "data_root", "=", "data_root", ",", "\n", "img_dir", "=", "img_dir", ",", "\n", "ann_dir", "=", "[", "ann_dir", ",", "ann_dir", "]", ",", "\n", "split", "=", "[", "'splits/val.txt'", ",", "'splits/val.txt'", ",", "'splits/val.txt'", "]", ")", "\n", "build_dataset", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset_builder.test_build_dataloader": [[130, 193], ["test_dataset_builder.ToyDataset", "mmseg.datasets.build_dataloader", "isinstance", "mmseg.datasets.build_dataloader", "isinstance", "mmseg.datasets.build_dataloader", "mmseg.datasets.build_dataloader", "isinstance", "mmseg.datasets.build_dataloader", "isinstance", "mmseg.datasets.build_dataloader", "isinstance", "len", "int", "len", "int", "len", "int", "len", "int", "len", "int", "len", "int", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.builder.build_dataloader"], ["", "", "def", "test_build_dataloader", "(", ")", ":", "\n", "    ", "dataset", "=", "ToyDataset", "(", ")", "\n", "samples_per_gpu", "=", "3", "\n", "# dist=True, shuffle=True, 1GPU", "\n", "dataloader", "=", "build_dataloader", "(", "\n", "dataset", ",", "samples_per_gpu", "=", "samples_per_gpu", ",", "workers_per_gpu", "=", "2", ")", "\n", "assert", "dataloader", ".", "batch_size", "==", "samples_per_gpu", "\n", "assert", "len", "(", "dataloader", ")", "==", "int", "(", "math", ".", "ceil", "(", "len", "(", "dataset", ")", "/", "samples_per_gpu", ")", ")", "\n", "assert", "isinstance", "(", "dataloader", ".", "sampler", ",", "DistributedSampler", ")", "\n", "assert", "dataloader", ".", "sampler", ".", "shuffle", "\n", "\n", "# dist=True, shuffle=False, 1GPU", "\n", "dataloader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "samples_per_gpu", ",", "\n", "workers_per_gpu", "=", "2", ",", "\n", "shuffle", "=", "False", ")", "\n", "assert", "dataloader", ".", "batch_size", "==", "samples_per_gpu", "\n", "assert", "len", "(", "dataloader", ")", "==", "int", "(", "math", ".", "ceil", "(", "len", "(", "dataset", ")", "/", "samples_per_gpu", ")", ")", "\n", "assert", "isinstance", "(", "dataloader", ".", "sampler", ",", "DistributedSampler", ")", "\n", "assert", "not", "dataloader", ".", "sampler", ".", "shuffle", "\n", "\n", "# dist=True, shuffle=True, 8GPU", "\n", "dataloader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "samples_per_gpu", ",", "\n", "workers_per_gpu", "=", "2", ",", "\n", "num_gpus", "=", "8", ")", "\n", "assert", "dataloader", ".", "batch_size", "==", "samples_per_gpu", "\n", "assert", "len", "(", "dataloader", ")", "==", "int", "(", "math", ".", "ceil", "(", "len", "(", "dataset", ")", "/", "samples_per_gpu", ")", ")", "\n", "assert", "dataloader", ".", "num_workers", "==", "2", "\n", "\n", "# dist=False, shuffle=True, 1GPU", "\n", "dataloader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "samples_per_gpu", ",", "\n", "workers_per_gpu", "=", "2", ",", "\n", "dist", "=", "False", ")", "\n", "assert", "dataloader", ".", "batch_size", "==", "samples_per_gpu", "\n", "assert", "len", "(", "dataloader", ")", "==", "int", "(", "math", ".", "ceil", "(", "len", "(", "dataset", ")", "/", "samples_per_gpu", ")", ")", "\n", "assert", "isinstance", "(", "dataloader", ".", "sampler", ",", "RandomSampler", ")", "\n", "assert", "dataloader", ".", "num_workers", "==", "2", "\n", "\n", "# dist=False, shuffle=False, 1GPU", "\n", "dataloader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "3", ",", "\n", "workers_per_gpu", "=", "2", ",", "\n", "shuffle", "=", "False", ",", "\n", "dist", "=", "False", ")", "\n", "assert", "dataloader", ".", "batch_size", "==", "samples_per_gpu", "\n", "assert", "len", "(", "dataloader", ")", "==", "int", "(", "math", ".", "ceil", "(", "len", "(", "dataset", ")", "/", "samples_per_gpu", ")", ")", "\n", "assert", "isinstance", "(", "dataloader", ".", "sampler", ",", "SequentialSampler", ")", "\n", "assert", "dataloader", ".", "num_workers", "==", "2", "\n", "\n", "# dist=False, shuffle=True, 8GPU", "\n", "dataloader", "=", "build_dataloader", "(", "\n", "dataset", ",", "samples_per_gpu", "=", "3", ",", "workers_per_gpu", "=", "2", ",", "num_gpus", "=", "8", ",", "dist", "=", "False", ")", "\n", "assert", "dataloader", ".", "batch_size", "==", "samples_per_gpu", "*", "8", "\n", "assert", "len", "(", "dataloader", ")", "==", "int", "(", "\n", "math", ".", "ceil", "(", "len", "(", "dataset", ")", "/", "samples_per_gpu", "/", "8", ")", ")", "\n", "assert", "isinstance", "(", "dataloader", ".", "sampler", ",", "RandomSampler", ")", "\n", "assert", "dataloader", ".", "num_workers", "==", "16", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset.test_classes": [[13, 22], ["list", "mmseg.core.evaluation.get_classes", "list", "mmseg.core.evaluation.get_classes", "mmseg.core.evaluation.get_classes", "list", "mmseg.core.evaluation.get_classes", "mmseg.core.evaluation.get_classes", "pytest.raises", "mmseg.core.evaluation.get_classes"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.get_classes", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.get_classes", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.get_classes", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.get_classes", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.get_classes", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.get_classes"], ["def", "test_classes", "(", ")", ":", "\n", "    ", "assert", "list", "(", "CityscapesDataset", ".", "CLASSES", ")", "==", "get_classes", "(", "'cityscapes'", ")", "\n", "assert", "list", "(", "PascalVOCDataset", ".", "CLASSES", ")", "==", "get_classes", "(", "'voc'", ")", "==", "get_classes", "(", "\n", "'pascal_voc'", ")", "\n", "assert", "list", "(", "\n", "ADE20KDataset", ".", "CLASSES", ")", "==", "get_classes", "(", "'ade'", ")", "==", "get_classes", "(", "'ade20k'", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "get_classes", "(", "'unsupported'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset.test_palette": [[24, 32], ["mmseg.core.evaluation.get_palette", "mmseg.core.evaluation.get_palette", "mmseg.core.evaluation.get_palette", "mmseg.core.evaluation.get_palette", "mmseg.core.evaluation.get_palette", "pytest.raises", "mmseg.core.evaluation.get_palette"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.get_palette", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.get_palette", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.get_palette", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.get_palette", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.get_palette", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.class_names.get_palette"], ["", "", "def", "test_palette", "(", ")", ":", "\n", "    ", "assert", "CityscapesDataset", ".", "PALETTE", "==", "get_palette", "(", "'cityscapes'", ")", "\n", "assert", "PascalVOCDataset", ".", "PALETTE", "==", "get_palette", "(", "'voc'", ")", "==", "get_palette", "(", "\n", "'pascal_voc'", ")", "\n", "assert", "ADE20KDataset", ".", "PALETTE", "==", "get_palette", "(", "'ade'", ")", "==", "get_palette", "(", "'ade20k'", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "get_palette", "(", "'unsupported'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset.test_dataset_wrapper": [[34, 59], ["unittest.mock.patch", "unittest.mock.patch", "mmseg.datasets.CustomDataset", "unittest.mock.MagicMock", "mmseg.datasets.CustomDataset", "unittest.mock.MagicMock", "mmseg.datasets.ConcatDataset", "mmseg.datasets.RepeatDataset", "unittest.mock.MagicMock", "len", "len", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "len", "len", "len"], "function", ["None"], ["", "", "@", "patch", "(", "'mmseg.datasets.CustomDataset.load_annotations'", ",", "MagicMock", ")", "\n", "@", "patch", "(", "'mmseg.datasets.CustomDataset.__getitem__'", ",", "\n", "MagicMock", "(", "side_effect", "=", "lambda", "idx", ":", "idx", ")", ")", "\n", "def", "test_dataset_wrapper", "(", ")", ":", "\n", "# CustomDataset.load_annotations = MagicMock()", "\n", "# CustomDataset.__getitem__ = MagicMock(side_effect=lambda idx: idx)", "\n", "    ", "dataset_a", "=", "CustomDataset", "(", "img_dir", "=", "MagicMock", "(", ")", ",", "pipeline", "=", "[", "]", ")", "\n", "len_a", "=", "10", "\n", "dataset_a", ".", "img_infos", "=", "MagicMock", "(", ")", "\n", "dataset_a", ".", "img_infos", ".", "__len__", ".", "return_value", "=", "len_a", "\n", "dataset_b", "=", "CustomDataset", "(", "img_dir", "=", "MagicMock", "(", ")", ",", "pipeline", "=", "[", "]", ")", "\n", "len_b", "=", "20", "\n", "dataset_b", ".", "img_infos", "=", "MagicMock", "(", ")", "\n", "dataset_b", ".", "img_infos", ".", "__len__", ".", "return_value", "=", "len_b", "\n", "\n", "concat_dataset", "=", "ConcatDataset", "(", "[", "dataset_a", ",", "dataset_b", "]", ")", "\n", "assert", "concat_dataset", "[", "5", "]", "==", "5", "\n", "assert", "concat_dataset", "[", "25", "]", "==", "15", "\n", "assert", "len", "(", "concat_dataset", ")", "==", "len", "(", "dataset_a", ")", "+", "len", "(", "dataset_b", ")", "\n", "\n", "repeat_dataset", "=", "RepeatDataset", "(", "dataset_a", ",", "10", ")", "\n", "assert", "repeat_dataset", "[", "5", "]", "==", "5", "\n", "assert", "repeat_dataset", "[", "15", "]", "==", "5", "\n", "assert", "repeat_dataset", "[", "27", "]", "==", "7", "\n", "assert", "len", "(", "repeat_dataset", ")", "==", "10", "*", "len", "(", "dataset_a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset.test_custom_dataset": [[61, 203], ["dict", "mmseg.datasets.CustomDataset", "mmseg.datasets.CustomDataset", "mmseg.datasets.CustomDataset", "mmseg.datasets.CustomDataset", "mmseg.datasets.CustomDataset", "isinstance", "isinstance", "mmseg.datasets.CustomDataset.get_gt_seg_maps", "mmseg.datasets.CustomDataset.evaluate", "isinstance", "mmseg.datasets.CustomDataset.evaluate", "isinstance", "mmseg.datasets.CustomDataset.evaluate", "isinstance", "tuple", "mmseg.datasets.CustomDataset.evaluate", "isinstance", "mmseg.datasets.CustomDataset.evaluate", "isinstance", "mmseg.datasets.CustomDataset.evaluate", "isinstance", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "len", "len", "len", "len", "len", "len", "pseudo_results.append", "os.join", "os.join", "os.join", "os.join", "os.join", "os.abspath", "os.abspath", "os.join", "numpy.random.randint", "os.dirname", "os.dirname", "os.dirname", "os.dirname", "os.dirname", "os.join", "os.join", "os.dirname", "dict", "dict", "dict", "dict", "dict", "os.dirname", "os.dirname"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.datasets.custom.CustomDataset.get_gt_seg_maps", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.evaluate", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.evaluate", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.evaluate", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.evaluate", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.evaluate", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.evaluation.eval_hooks.EvalHook.evaluate"], ["", "def", "test_custom_dataset", "(", ")", ":", "\n", "    ", "img_norm_cfg", "=", "dict", "(", "\n", "mean", "=", "[", "123.675", ",", "116.28", ",", "103.53", "]", ",", "\n", "std", "=", "[", "58.395", ",", "57.12", ",", "57.375", "]", ",", "\n", "to_rgb", "=", "True", ")", "\n", "crop_size", "=", "(", "512", ",", "1024", ")", "\n", "train_pipeline", "=", "[", "\n", "dict", "(", "type", "=", "'LoadImageFromFile'", ")", ",", "\n", "dict", "(", "type", "=", "'LoadAnnotations'", ")", ",", "\n", "dict", "(", "type", "=", "'Resize'", ",", "img_scale", "=", "(", "128", ",", "256", ")", ",", "ratio_range", "=", "(", "0.5", ",", "2.0", ")", ")", ",", "\n", "dict", "(", "type", "=", "'RandomCrop'", ",", "crop_size", "=", "crop_size", ",", "cat_max_ratio", "=", "0.75", ")", ",", "\n", "dict", "(", "type", "=", "'RandomFlip'", ",", "prob", "=", "0.5", ")", ",", "\n", "dict", "(", "type", "=", "'PhotoMetricDistortion'", ")", ",", "\n", "dict", "(", "type", "=", "'Normalize'", ",", "**", "img_norm_cfg", ")", ",", "\n", "dict", "(", "type", "=", "'Pad'", ",", "size", "=", "crop_size", ",", "pad_val", "=", "0", ",", "seg_pad_val", "=", "255", ")", ",", "\n", "dict", "(", "type", "=", "'DefaultFormatBundle'", ")", ",", "\n", "dict", "(", "type", "=", "'Collect'", ",", "keys", "=", "[", "'img'", ",", "'gt_semantic_seg'", "]", ")", ",", "\n", "]", "\n", "test_pipeline", "=", "[", "\n", "dict", "(", "type", "=", "'LoadImageFromFile'", ")", ",", "\n", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "(", "128", ",", "256", ")", ",", "\n", "# img_ratios=[0.5, 0.75, 1.0, 1.25, 1.5, 1.75],", "\n", "flip", "=", "False", ",", "\n", "transforms", "=", "[", "\n", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "True", ")", ",", "\n", "dict", "(", "type", "=", "'RandomFlip'", ")", ",", "\n", "dict", "(", "type", "=", "'Normalize'", ",", "**", "img_norm_cfg", ")", ",", "\n", "dict", "(", "type", "=", "'ImageToTensor'", ",", "keys", "=", "[", "'img'", "]", ")", ",", "\n", "dict", "(", "type", "=", "'Collect'", ",", "keys", "=", "[", "'img'", "]", ")", ",", "\n", "]", ")", "\n", "]", "\n", "\n", "# with img_dir and ann_dir", "\n", "train_dataset", "=", "CustomDataset", "(", "\n", "train_pipeline", ",", "\n", "data_root", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/pseudo_dataset'", ")", ",", "\n", "img_dir", "=", "'imgs/'", ",", "\n", "ann_dir", "=", "'gts/'", ",", "\n", "img_suffix", "=", "'img.jpg'", ",", "\n", "seg_map_suffix", "=", "'gt.png'", ")", "\n", "assert", "len", "(", "train_dataset", ")", "==", "5", "\n", "\n", "# with img_dir, ann_dir, split", "\n", "train_dataset", "=", "CustomDataset", "(", "\n", "train_pipeline", ",", "\n", "data_root", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/pseudo_dataset'", ")", ",", "\n", "img_dir", "=", "'imgs/'", ",", "\n", "ann_dir", "=", "'gts/'", ",", "\n", "img_suffix", "=", "'img.jpg'", ",", "\n", "seg_map_suffix", "=", "'gt.png'", ",", "\n", "split", "=", "'splits/train.txt'", ")", "\n", "assert", "len", "(", "train_dataset", ")", "==", "4", "\n", "\n", "# no data_root", "\n", "train_dataset", "=", "CustomDataset", "(", "\n", "train_pipeline", ",", "\n", "img_dir", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/pseudo_dataset/imgs'", ")", ",", "\n", "ann_dir", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/pseudo_dataset/gts'", ")", ",", "\n", "img_suffix", "=", "'img.jpg'", ",", "\n", "seg_map_suffix", "=", "'gt.png'", ")", "\n", "assert", "len", "(", "train_dataset", ")", "==", "5", "\n", "\n", "# with data_root but img_dir/ann_dir are abs path", "\n", "train_dataset", "=", "CustomDataset", "(", "\n", "train_pipeline", ",", "\n", "data_root", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/pseudo_dataset'", ")", ",", "\n", "img_dir", "=", "osp", ".", "abspath", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/pseudo_dataset/imgs'", ")", ")", ",", "\n", "ann_dir", "=", "osp", ".", "abspath", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/pseudo_dataset/gts'", ")", ")", ",", "\n", "img_suffix", "=", "'img.jpg'", ",", "\n", "seg_map_suffix", "=", "'gt.png'", ")", "\n", "assert", "len", "(", "train_dataset", ")", "==", "5", "\n", "\n", "# test_mode=True", "\n", "test_dataset", "=", "CustomDataset", "(", "\n", "test_pipeline", ",", "\n", "img_dir", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/pseudo_dataset/imgs'", ")", ",", "\n", "img_suffix", "=", "'img.jpg'", ",", "\n", "test_mode", "=", "True", ")", "\n", "assert", "len", "(", "test_dataset", ")", "==", "5", "\n", "\n", "# training data get", "\n", "train_data", "=", "train_dataset", "[", "0", "]", "\n", "assert", "isinstance", "(", "train_data", ",", "dict", ")", "\n", "\n", "# test data get", "\n", "test_data", "=", "test_dataset", "[", "0", "]", "\n", "assert", "isinstance", "(", "test_data", ",", "dict", ")", "\n", "\n", "# get gt seg map", "\n", "gt_seg_maps", "=", "train_dataset", ".", "get_gt_seg_maps", "(", ")", "\n", "assert", "len", "(", "gt_seg_maps", ")", "==", "5", "\n", "\n", "# evaluation", "\n", "pseudo_results", "=", "[", "]", "\n", "for", "gt_seg_map", "in", "gt_seg_maps", ":", "\n", "        ", "h", ",", "w", "=", "gt_seg_map", ".", "shape", "\n", "pseudo_results", ".", "append", "(", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "7", ",", "size", "=", "(", "h", ",", "w", ")", ")", ")", "\n", "", "eval_results", "=", "train_dataset", ".", "evaluate", "(", "pseudo_results", ",", "metric", "=", "'mIoU'", ")", "\n", "assert", "isinstance", "(", "eval_results", ",", "dict", ")", "\n", "assert", "'mIoU'", "in", "eval_results", "\n", "assert", "'mAcc'", "in", "eval_results", "\n", "assert", "'aAcc'", "in", "eval_results", "\n", "\n", "eval_results", "=", "train_dataset", ".", "evaluate", "(", "pseudo_results", ",", "metric", "=", "'mDice'", ")", "\n", "assert", "isinstance", "(", "eval_results", ",", "dict", ")", "\n", "assert", "'mDice'", "in", "eval_results", "\n", "assert", "'mAcc'", "in", "eval_results", "\n", "assert", "'aAcc'", "in", "eval_results", "\n", "\n", "eval_results", "=", "train_dataset", ".", "evaluate", "(", "\n", "pseudo_results", ",", "metric", "=", "[", "'mDice'", ",", "'mIoU'", "]", ")", "\n", "assert", "isinstance", "(", "eval_results", ",", "dict", ")", "\n", "assert", "'mIoU'", "in", "eval_results", "\n", "assert", "'mDice'", "in", "eval_results", "\n", "assert", "'mAcc'", "in", "eval_results", "\n", "assert", "'aAcc'", "in", "eval_results", "\n", "\n", "# evaluation with CLASSES", "\n", "train_dataset", ".", "CLASSES", "=", "tuple", "(", "[", "'a'", "]", "*", "7", ")", "\n", "eval_results", "=", "train_dataset", ".", "evaluate", "(", "pseudo_results", ",", "metric", "=", "'mIoU'", ")", "\n", "assert", "isinstance", "(", "eval_results", ",", "dict", ")", "\n", "assert", "'mIoU'", "in", "eval_results", "\n", "assert", "'mAcc'", "in", "eval_results", "\n", "assert", "'aAcc'", "in", "eval_results", "\n", "\n", "eval_results", "=", "train_dataset", ".", "evaluate", "(", "pseudo_results", ",", "metric", "=", "'mDice'", ")", "\n", "assert", "isinstance", "(", "eval_results", ",", "dict", ")", "\n", "assert", "'mDice'", "in", "eval_results", "\n", "assert", "'mAcc'", "in", "eval_results", "\n", "assert", "'aAcc'", "in", "eval_results", "\n", "\n", "eval_results", "=", "train_dataset", ".", "evaluate", "(", "\n", "pseudo_results", ",", "metric", "=", "[", "'mIoU'", ",", "'mDice'", "]", ")", "\n", "assert", "isinstance", "(", "eval_results", ",", "dict", ")", "\n", "assert", "'mIoU'", "in", "eval_results", "\n", "assert", "'mDice'", "in", "eval_results", "\n", "assert", "'mAcc'", "in", "eval_results", "\n", "assert", "'aAcc'", "in", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset.test_custom_classes_override_default": [[205, 262], ["unittest.mock.patch", "unittest.mock.patch", "pytest.mark.parametrize", "mmseg.datasets.DATASETS.get", "DATASETS.get.", "DATASETS.get.", "DATASETS.get.", "DATASETS.get.", "unittest.mock.MagicMock", "list", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "list", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock"], "function", ["None"], ["", "@", "patch", "(", "'mmseg.datasets.CustomDataset.load_annotations'", ",", "MagicMock", ")", "\n", "@", "patch", "(", "'mmseg.datasets.CustomDataset.__getitem__'", ",", "\n", "MagicMock", "(", "side_effect", "=", "lambda", "idx", ":", "idx", ")", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'dataset, classes'", ",", "[", "\n", "(", "'ADE20KDataset'", ",", "(", "'wall'", ",", "'building'", ")", ")", ",", "\n", "(", "'CityscapesDataset'", ",", "(", "'road'", ",", "'sidewalk'", ")", ")", ",", "\n", "(", "'CustomDataset'", ",", "(", "'bus'", ",", "'car'", ")", ")", ",", "\n", "(", "'PascalVOCDataset'", ",", "(", "'aeroplane'", ",", "'bicycle'", ")", ")", ",", "\n", "]", ")", "\n", "def", "test_custom_classes_override_default", "(", "dataset", ",", "classes", ")", ":", "\n", "\n", "    ", "dataset_class", "=", "DATASETS", ".", "get", "(", "dataset", ")", "\n", "\n", "original_classes", "=", "dataset_class", ".", "CLASSES", "\n", "\n", "# Test setting classes as a tuple", "\n", "custom_dataset", "=", "dataset_class", "(", "\n", "pipeline", "=", "[", "]", ",", "\n", "img_dir", "=", "MagicMock", "(", ")", ",", "\n", "split", "=", "MagicMock", "(", ")", ",", "\n", "classes", "=", "classes", ",", "\n", "test_mode", "=", "True", ")", "\n", "\n", "assert", "custom_dataset", ".", "CLASSES", "!=", "original_classes", "\n", "assert", "custom_dataset", ".", "CLASSES", "==", "classes", "\n", "\n", "# Test setting classes as a list", "\n", "custom_dataset", "=", "dataset_class", "(", "\n", "pipeline", "=", "[", "]", ",", "\n", "img_dir", "=", "MagicMock", "(", ")", ",", "\n", "split", "=", "MagicMock", "(", ")", ",", "\n", "classes", "=", "list", "(", "classes", ")", ",", "\n", "test_mode", "=", "True", ")", "\n", "\n", "assert", "custom_dataset", ".", "CLASSES", "!=", "original_classes", "\n", "assert", "custom_dataset", ".", "CLASSES", "==", "list", "(", "classes", ")", "\n", "\n", "# Test overriding not a subset", "\n", "custom_dataset", "=", "dataset_class", "(", "\n", "pipeline", "=", "[", "]", ",", "\n", "img_dir", "=", "MagicMock", "(", ")", ",", "\n", "split", "=", "MagicMock", "(", ")", ",", "\n", "classes", "=", "[", "classes", "[", "0", "]", "]", ",", "\n", "test_mode", "=", "True", ")", "\n", "\n", "assert", "custom_dataset", ".", "CLASSES", "!=", "original_classes", "\n", "assert", "custom_dataset", ".", "CLASSES", "==", "[", "classes", "[", "0", "]", "]", "\n", "\n", "# Test default behavior", "\n", "custom_dataset", "=", "dataset_class", "(", "\n", "pipeline", "=", "[", "]", ",", "\n", "img_dir", "=", "MagicMock", "(", ")", ",", "\n", "split", "=", "MagicMock", "(", ")", ",", "\n", "classes", "=", "None", ",", "\n", "test_mode", "=", "True", ")", "\n", "\n", "assert", "custom_dataset", ".", "CLASSES", "==", "original_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset.test_custom_dataset_random_palette_is_generated": [[264, 278], ["unittest.mock.patch", "unittest.mock.patch", "mmseg.datasets.CustomDataset", "unittest.mock.MagicMock", "len", "all", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "len"], "function", ["None"], ["", "@", "patch", "(", "'mmseg.datasets.CustomDataset.load_annotations'", ",", "MagicMock", ")", "\n", "@", "patch", "(", "'mmseg.datasets.CustomDataset.__getitem__'", ",", "\n", "MagicMock", "(", "side_effect", "=", "lambda", "idx", ":", "idx", ")", ")", "\n", "def", "test_custom_dataset_random_palette_is_generated", "(", ")", ":", "\n", "    ", "dataset", "=", "CustomDataset", "(", "\n", "pipeline", "=", "[", "]", ",", "\n", "img_dir", "=", "MagicMock", "(", ")", ",", "\n", "split", "=", "MagicMock", "(", ")", ",", "\n", "classes", "=", "(", "'bus'", ",", "'car'", ")", ",", "\n", "test_mode", "=", "True", ")", "\n", "assert", "len", "(", "dataset", ".", "PALETTE", ")", "==", "2", "\n", "for", "class_color", "in", "dataset", ".", "PALETTE", ":", "\n", "        ", "assert", "len", "(", "class_color", ")", "==", "3", "\n", "assert", "all", "(", "x", ">=", "0", "and", "x", "<=", "255", "for", "x", "in", "class_color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_dataset.test_custom_dataset_custom_palette": [[280, 292], ["unittest.mock.patch", "unittest.mock.patch", "mmseg.datasets.CustomDataset", "unittest.mock.MagicMock", "tuple", "tuple", "unittest.mock.MagicMock", "unittest.mock.MagicMock"], "function", ["None"], ["", "", "@", "patch", "(", "'mmseg.datasets.CustomDataset.load_annotations'", ",", "MagicMock", ")", "\n", "@", "patch", "(", "'mmseg.datasets.CustomDataset.__getitem__'", ",", "\n", "MagicMock", "(", "side_effect", "=", "lambda", "idx", ":", "idx", ")", ")", "\n", "def", "test_custom_dataset_custom_palette", "(", ")", ":", "\n", "    ", "dataset", "=", "CustomDataset", "(", "\n", "pipeline", "=", "[", "]", ",", "\n", "img_dir", "=", "MagicMock", "(", ")", ",", "\n", "split", "=", "MagicMock", "(", ")", ",", "\n", "classes", "=", "(", "'bus'", ",", "'car'", ")", ",", "\n", "palette", "=", "[", "[", "100", ",", "100", ",", "100", "]", ",", "[", "200", ",", "200", ",", "200", "]", "]", ",", "\n", "test_mode", "=", "True", ")", "\n", "assert", "tuple", "(", "dataset", ".", "PALETTE", ")", "==", "tuple", "(", "[", "[", "100", ",", "100", ",", "100", "]", ",", "[", "200", ",", "200", ",", "200", "]", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_data.test_tta.test_multi_scale_flip_aug": [[10, 151], ["dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "os.join", "dict.copy", "dict.copy", "dict.copy", "dict.copy", "dict.copy", "dict.copy", "dict.copy", "dict.copy", "os.dirname", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["None"], ["def", "test_multi_scale_flip_aug", "(", ")", ":", "\n", "# test assertion if img_scale=None, img_ratios=1 (not float).", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "tta_transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "None", ",", "\n", "img_ratios", "=", "1", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "False", ")", "]", ",", "\n", ")", "\n", "build_from_cfg", "(", "tta_transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion if img_scale=None, img_ratios=None.", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "tta_transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "None", ",", "\n", "img_ratios", "=", "None", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "False", ")", "]", ",", "\n", ")", "\n", "build_from_cfg", "(", "tta_transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion if img_scale=(512, 512), img_ratios=1 (not float).", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "tta_transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "(", "512", ",", "512", ")", ",", "\n", "img_ratios", "=", "1", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "False", ")", "]", ",", "\n", ")", "\n", "build_from_cfg", "(", "tta_transform", ",", "PIPELINES", ")", "\n", "\n", "", "tta_transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "(", "512", ",", "512", ")", ",", "\n", "img_ratios", "=", "[", "0.5", ",", "1.0", ",", "2.0", "]", ",", "\n", "flip", "=", "False", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "False", ")", "]", ",", "\n", ")", "\n", "tta_module", "=", "build_from_cfg", "(", "tta_transform", ",", "PIPELINES", ")", "\n", "\n", "results", "=", "dict", "(", ")", "\n", "# (288, 512, 3)", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../data/color.jpg'", ")", ",", "'color'", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "\n", "tta_results", "=", "tta_module", "(", "results", ".", "copy", "(", ")", ")", "\n", "assert", "tta_results", "[", "'scale'", "]", "==", "[", "(", "256", ",", "256", ")", ",", "(", "512", ",", "512", ")", ",", "(", "1024", ",", "1024", ")", "]", "\n", "assert", "tta_results", "[", "'flip'", "]", "==", "[", "False", ",", "False", ",", "False", "]", "\n", "\n", "tta_transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "(", "512", ",", "512", ")", ",", "\n", "img_ratios", "=", "[", "0.5", ",", "1.0", ",", "2.0", "]", ",", "\n", "flip", "=", "True", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "False", ")", "]", ",", "\n", ")", "\n", "tta_module", "=", "build_from_cfg", "(", "tta_transform", ",", "PIPELINES", ")", "\n", "tta_results", "=", "tta_module", "(", "results", ".", "copy", "(", ")", ")", "\n", "assert", "tta_results", "[", "'scale'", "]", "==", "[", "(", "256", ",", "256", ")", ",", "(", "256", ",", "256", ")", ",", "(", "512", ",", "512", ")", ",", "\n", "(", "512", ",", "512", ")", ",", "(", "1024", ",", "1024", ")", ",", "(", "1024", ",", "1024", ")", "]", "\n", "assert", "tta_results", "[", "'flip'", "]", "==", "[", "False", ",", "True", ",", "False", ",", "True", ",", "False", ",", "True", "]", "\n", "\n", "tta_transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "(", "512", ",", "512", ")", ",", "\n", "img_ratios", "=", "1.0", ",", "\n", "flip", "=", "False", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "False", ")", "]", ",", "\n", ")", "\n", "tta_module", "=", "build_from_cfg", "(", "tta_transform", ",", "PIPELINES", ")", "\n", "tta_results", "=", "tta_module", "(", "results", ".", "copy", "(", ")", ")", "\n", "assert", "tta_results", "[", "'scale'", "]", "==", "[", "(", "512", ",", "512", ")", "]", "\n", "assert", "tta_results", "[", "'flip'", "]", "==", "[", "False", "]", "\n", "\n", "tta_transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "(", "512", ",", "512", ")", ",", "\n", "img_ratios", "=", "1.0", ",", "\n", "flip", "=", "True", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "False", ")", "]", ",", "\n", ")", "\n", "tta_module", "=", "build_from_cfg", "(", "tta_transform", ",", "PIPELINES", ")", "\n", "tta_results", "=", "tta_module", "(", "results", ".", "copy", "(", ")", ")", "\n", "assert", "tta_results", "[", "'scale'", "]", "==", "[", "(", "512", ",", "512", ")", ",", "(", "512", ",", "512", ")", "]", "\n", "assert", "tta_results", "[", "'flip'", "]", "==", "[", "False", ",", "True", "]", "\n", "\n", "tta_transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "None", ",", "\n", "img_ratios", "=", "[", "0.5", ",", "1.0", ",", "2.0", "]", ",", "\n", "flip", "=", "False", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "False", ")", "]", ",", "\n", ")", "\n", "tta_module", "=", "build_from_cfg", "(", "tta_transform", ",", "PIPELINES", ")", "\n", "tta_results", "=", "tta_module", "(", "results", ".", "copy", "(", ")", ")", "\n", "assert", "tta_results", "[", "'scale'", "]", "==", "[", "(", "256", ",", "144", ")", ",", "(", "512", ",", "288", ")", ",", "(", "1024", ",", "576", ")", "]", "\n", "assert", "tta_results", "[", "'flip'", "]", "==", "[", "False", ",", "False", ",", "False", "]", "\n", "\n", "tta_transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "None", ",", "\n", "img_ratios", "=", "[", "0.5", ",", "1.0", ",", "2.0", "]", ",", "\n", "flip", "=", "True", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "False", ")", "]", ",", "\n", ")", "\n", "tta_module", "=", "build_from_cfg", "(", "tta_transform", ",", "PIPELINES", ")", "\n", "tta_results", "=", "tta_module", "(", "results", ".", "copy", "(", ")", ")", "\n", "assert", "tta_results", "[", "'scale'", "]", "==", "[", "(", "256", ",", "144", ")", ",", "(", "256", ",", "144", ")", ",", "(", "512", ",", "288", ")", ",", "\n", "(", "512", ",", "288", ")", ",", "(", "1024", ",", "576", ")", ",", "(", "1024", ",", "576", ")", "]", "\n", "assert", "tta_results", "[", "'flip'", "]", "==", "[", "False", ",", "True", ",", "False", ",", "True", ",", "False", ",", "True", "]", "\n", "\n", "tta_transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "[", "(", "256", ",", "256", ")", ",", "(", "512", ",", "512", ")", ",", "(", "1024", ",", "1024", ")", "]", ",", "\n", "img_ratios", "=", "None", ",", "\n", "flip", "=", "False", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "False", ")", "]", ",", "\n", ")", "\n", "tta_module", "=", "build_from_cfg", "(", "tta_transform", ",", "PIPELINES", ")", "\n", "tta_results", "=", "tta_module", "(", "results", ".", "copy", "(", ")", ")", "\n", "assert", "tta_results", "[", "'scale'", "]", "==", "[", "(", "256", ",", "256", ")", ",", "(", "512", ",", "512", ")", ",", "(", "1024", ",", "1024", ")", "]", "\n", "assert", "tta_results", "[", "'flip'", "]", "==", "[", "False", ",", "False", ",", "False", "]", "\n", "\n", "tta_transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "[", "(", "256", ",", "256", ")", ",", "(", "512", ",", "512", ")", ",", "(", "1024", ",", "1024", ")", "]", ",", "\n", "img_ratios", "=", "None", ",", "\n", "flip", "=", "True", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "False", ")", "]", ",", "\n", ")", "\n", "tta_module", "=", "build_from_cfg", "(", "tta_transform", ",", "PIPELINES", ")", "\n", "tta_results", "=", "tta_module", "(", "results", ".", "copy", "(", ")", ")", "\n", "assert", "tta_results", "[", "'scale'", "]", "==", "[", "(", "256", ",", "256", ")", ",", "(", "256", ",", "256", ")", ",", "(", "512", ",", "512", ")", ",", "\n", "(", "512", ",", "512", ")", ",", "(", "1024", ",", "1024", ")", ",", "(", "1024", ",", "1024", ")", "]", "\n", "assert", "tta_results", "[", "'flip'", "]", "==", "[", "False", ",", "True", ",", "False", ",", "True", ",", "False", ",", "True", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_utils.test_inverted_residual_module.test_inv_residual": [[8, 49], ["mmseg.models.utils.InvertedResidual", "torch.rand", "mmseg.models.utils.InvertedResidual.", "mmseg.models.utils.InvertedResidual", "torch.rand", "mmseg.models.utils.InvertedResidual.", "mmseg.models.utils.InvertedResidual", "torch.rand", "mmseg.models.utils.InvertedResidual.", "mmseg.models.utils.InvertedResidual", "torch.rand", "mmseg.models.utils.InvertedResidual.", "pytest.raises", "mmseg.models.utils.InvertedResidual"], "function", ["None"], ["def", "test_inv_residual", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# test stride assertion.", "\n", "        ", "InvertedResidual", "(", "32", ",", "32", ",", "3", ",", "4", ")", "\n", "\n", "# test default config with res connection.", "\n", "# set expand_ratio = 4, stride = 1 and inp=oup.", "\n", "", "inv_module", "=", "InvertedResidual", "(", "32", ",", "32", ",", "1", ",", "4", ")", "\n", "assert", "inv_module", ".", "use_res_connect", "\n", "assert", "inv_module", ".", "conv", "[", "0", "]", ".", "kernel_size", "==", "(", "1", ",", "1", ")", "\n", "assert", "inv_module", ".", "conv", "[", "0", "]", ".", "padding", "==", "0", "\n", "assert", "inv_module", ".", "conv", "[", "1", "]", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "inv_module", ".", "conv", "[", "1", "]", ".", "padding", "==", "1", "\n", "assert", "inv_module", ".", "conv", "[", "0", "]", ".", "with_norm", "\n", "assert", "inv_module", ".", "conv", "[", "1", "]", ".", "with_norm", "\n", "x", "=", "torch", ".", "rand", "(", "1", ",", "32", ",", "64", ",", "64", ")", "\n", "output", "=", "inv_module", "(", "x", ")", "\n", "assert", "output", ".", "shape", "==", "(", "1", ",", "32", ",", "64", ",", "64", ")", "\n", "\n", "# test inv_residual module without res connection.", "\n", "# set expand_ratio = 4, stride = 2.", "\n", "inv_module", "=", "InvertedResidual", "(", "32", ",", "32", ",", "2", ",", "4", ")", "\n", "assert", "not", "inv_module", ".", "use_res_connect", "\n", "assert", "inv_module", ".", "conv", "[", "0", "]", ".", "kernel_size", "==", "(", "1", ",", "1", ")", "\n", "x", "=", "torch", ".", "rand", "(", "1", ",", "32", ",", "64", ",", "64", ")", "\n", "output", "=", "inv_module", "(", "x", ")", "\n", "assert", "output", ".", "shape", "==", "(", "1", ",", "32", ",", "32", ",", "32", ")", "\n", "\n", "# test expand_ratio == 1", "\n", "inv_module", "=", "InvertedResidual", "(", "32", ",", "32", ",", "1", ",", "1", ")", "\n", "assert", "inv_module", ".", "conv", "[", "0", "]", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "x", "=", "torch", ".", "rand", "(", "1", ",", "32", ",", "64", ",", "64", ")", "\n", "output", "=", "inv_module", "(", "x", ")", "\n", "assert", "output", ".", "shape", "==", "(", "1", ",", "32", ",", "64", ",", "64", ")", "\n", "\n", "# test with checkpoint forward", "\n", "inv_module", "=", "InvertedResidual", "(", "32", ",", "32", ",", "1", ",", "1", ",", "with_cp", "=", "True", ")", "\n", "assert", "inv_module", ".", "with_cp", "\n", "x", "=", "torch", ".", "rand", "(", "1", ",", "32", ",", "64", ",", "64", ",", "requires_grad", "=", "True", ")", "\n", "output", "=", "inv_module", "(", "x", ")", "\n", "assert", "output", ".", "shape", "==", "(", "1", ",", "32", ",", "64", ",", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_utils.test_inverted_residual_module.test_inv_residualv3": [[51, 121], ["mmseg.models.utils.InvertedResidualV3", "isinstance", "isinstance", "isinstance", "isinstance", "torch.rand", "mmseg.models.utils.InvertedResidualV3.", "dict", "dict", "mmseg.models.utils.InvertedResidualV3", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "torch.rand", "mmseg.models.utils.InvertedResidualV3.", "mmseg.models.utils.InvertedResidualV3", "torch.randn", "mmseg.models.utils.InvertedResidualV3.", "pytest.raises", "mmseg.models.utils.InvertedResidualV3", "pytest.raises", "mmseg.models.utils.InvertedResidualV3", "hasattr", "dict", "dict"], "function", ["None"], ["", "def", "test_inv_residualv3", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# test stride assertion.", "\n", "        ", "InvertedResidualV3", "(", "32", ",", "32", ",", "16", ",", "stride", "=", "3", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# test assertion.", "\n", "        ", "InvertedResidualV3", "(", "32", ",", "32", ",", "16", ",", "with_expand_conv", "=", "False", ")", "\n", "\n", "# test with se_cfg=None, with_expand_conv=False", "\n", "", "inv_module", "=", "InvertedResidualV3", "(", "32", ",", "32", ",", "32", ",", "with_expand_conv", "=", "False", ")", "\n", "\n", "assert", "inv_module", ".", "with_res_shortcut", "is", "True", "\n", "assert", "inv_module", ".", "with_se", "is", "False", "\n", "assert", "inv_module", ".", "with_expand_conv", "is", "False", "\n", "assert", "not", "hasattr", "(", "inv_module", ",", "'expand_conv'", ")", "\n", "assert", "isinstance", "(", "inv_module", ".", "depthwise_conv", ".", "conv", ",", "torch", ".", "nn", ".", "Conv2d", ")", "\n", "assert", "inv_module", ".", "depthwise_conv", ".", "conv", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "inv_module", ".", "depthwise_conv", ".", "conv", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "inv_module", ".", "depthwise_conv", ".", "conv", ".", "padding", "==", "(", "1", ",", "1", ")", "\n", "assert", "isinstance", "(", "inv_module", ".", "depthwise_conv", ".", "bn", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "\n", "assert", "isinstance", "(", "inv_module", ".", "depthwise_conv", ".", "activate", ",", "torch", ".", "nn", ".", "ReLU", ")", "\n", "assert", "inv_module", ".", "linear_conv", ".", "conv", ".", "kernel_size", "==", "(", "1", ",", "1", ")", "\n", "assert", "inv_module", ".", "linear_conv", ".", "conv", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "inv_module", ".", "linear_conv", ".", "conv", ".", "padding", "==", "(", "0", ",", "0", ")", "\n", "assert", "isinstance", "(", "inv_module", ".", "linear_conv", ".", "bn", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "\n", "\n", "x", "=", "torch", ".", "rand", "(", "1", ",", "32", ",", "64", ",", "64", ")", "\n", "output", "=", "inv_module", "(", "x", ")", "\n", "assert", "output", ".", "shape", "==", "(", "1", ",", "32", ",", "64", ",", "64", ")", "\n", "\n", "# test with se_cfg and with_expand_conv", "\n", "se_cfg", "=", "dict", "(", "\n", "channels", "=", "16", ",", "\n", "ratio", "=", "4", ",", "\n", "act_cfg", "=", "(", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "dict", "(", "type", "=", "'HSigmoid'", ",", "bias", "=", "3.0", ",", "divisor", "=", "6.0", ")", ")", ")", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'HSwish'", ")", "\n", "inv_module", "=", "InvertedResidualV3", "(", "\n", "32", ",", "40", ",", "16", ",", "3", ",", "2", ",", "se_cfg", "=", "se_cfg", ",", "act_cfg", "=", "act_cfg", ")", "\n", "assert", "inv_module", ".", "with_res_shortcut", "is", "False", "\n", "assert", "inv_module", ".", "with_se", "is", "True", "\n", "assert", "inv_module", ".", "with_expand_conv", "is", "True", "\n", "assert", "inv_module", ".", "expand_conv", ".", "conv", ".", "kernel_size", "==", "(", "1", ",", "1", ")", "\n", "assert", "inv_module", ".", "expand_conv", ".", "conv", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "inv_module", ".", "expand_conv", ".", "conv", ".", "padding", "==", "(", "0", ",", "0", ")", "\n", "assert", "isinstance", "(", "inv_module", ".", "expand_conv", ".", "activate", ",", "mmcv", ".", "cnn", ".", "HSwish", ")", "\n", "\n", "assert", "isinstance", "(", "inv_module", ".", "depthwise_conv", ".", "conv", ",", "\n", "mmcv", ".", "cnn", ".", "bricks", ".", "Conv2dAdaptivePadding", ")", "\n", "assert", "inv_module", ".", "depthwise_conv", ".", "conv", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "inv_module", ".", "depthwise_conv", ".", "conv", ".", "stride", "==", "(", "2", ",", "2", ")", "\n", "assert", "inv_module", ".", "depthwise_conv", ".", "conv", ".", "padding", "==", "(", "0", ",", "0", ")", "\n", "assert", "isinstance", "(", "inv_module", ".", "depthwise_conv", ".", "bn", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "\n", "assert", "isinstance", "(", "inv_module", ".", "depthwise_conv", ".", "activate", ",", "mmcv", ".", "cnn", ".", "HSwish", ")", "\n", "assert", "inv_module", ".", "linear_conv", ".", "conv", ".", "kernel_size", "==", "(", "1", ",", "1", ")", "\n", "assert", "inv_module", ".", "linear_conv", ".", "conv", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "inv_module", ".", "linear_conv", ".", "conv", ".", "padding", "==", "(", "0", ",", "0", ")", "\n", "assert", "isinstance", "(", "inv_module", ".", "linear_conv", ".", "bn", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "\n", "x", "=", "torch", ".", "rand", "(", "1", ",", "32", ",", "64", ",", "64", ")", "\n", "output", "=", "inv_module", "(", "x", ")", "\n", "assert", "output", ".", "shape", "==", "(", "1", ",", "40", ",", "32", ",", "32", ")", "\n", "\n", "# test with checkpoint forward", "\n", "inv_module", "=", "InvertedResidualV3", "(", "\n", "32", ",", "40", ",", "16", ",", "3", ",", "2", ",", "se_cfg", "=", "se_cfg", ",", "act_cfg", "=", "act_cfg", ",", "with_cp", "=", "True", ")", "\n", "assert", "inv_module", ".", "with_cp", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "32", ",", "64", ",", "64", ",", "requires_grad", "=", "True", ")", "\n", "output", "=", "inv_module", "(", "x", ")", "\n", "assert", "output", ".", "shape", "==", "(", "2", ",", "40", ",", "32", ",", "32", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_utils.test_make_divisible.test_make_divisible": [[4, 14], ["mmseg.models.utils.make_divisible", "mmseg.models.utils.make_divisible", "mmseg.models.utils.make_divisible", "mmseg.models.utils.make_divisible", "mmseg.models.utils.make_divisible", "mmseg.models.utils.make_divisible"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.make_divisible.make_divisible", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.make_divisible.make_divisible", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.make_divisible.make_divisible", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.make_divisible.make_divisible", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.make_divisible.make_divisible", "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.utils.make_divisible.make_divisible"], ["def", "test_make_divisible", "(", ")", ":", "\n", "# test with min_value = None", "\n", "    ", "assert", "make_divisible", "(", "10", ",", "4", ")", "==", "12", "\n", "assert", "make_divisible", "(", "9", ",", "4", ")", "==", "12", "\n", "assert", "make_divisible", "(", "1", ",", "4", ")", "==", "4", "\n", "\n", "# test with min_value = 8", "\n", "assert", "make_divisible", "(", "10", ",", "4", ",", "8", ")", "==", "12", "\n", "assert", "make_divisible", "(", "9", ",", "4", ",", "8", ")", "==", "12", "\n", "assert", "make_divisible", "(", "1", ",", "4", ",", "8", ")", "==", "8", "\n", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_FoodSeg103-Benchmark-v1.test_utils.test_se_layer.test_se_layer": [[8, 42], ["mmseg.models.utils.se_layer.SELayer", "isinstance", "isinstance", "torch.rand", "mmseg.models.utils.se_layer.SELayer.", "mmseg.models.utils.se_layer.SELayer", "isinstance", "isinstance", "torch.rand", "mmseg.models.utils.se_layer.SELayer.", "pytest.raises", "mmseg.models.utils.se_layer.SELayer", "dict", "dict"], "function", ["None"], ["def", "test_se_layer", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# test act_cfg assertion.", "\n", "        ", "SELayer", "(", "32", ",", "act_cfg", "=", "(", "dict", "(", "type", "=", "'ReLU'", ")", ",", ")", ")", "\n", "\n", "# test config with channels = 16.", "\n", "", "se_layer", "=", "SELayer", "(", "16", ")", "\n", "assert", "se_layer", ".", "conv1", ".", "conv", ".", "kernel_size", "==", "(", "1", ",", "1", ")", "\n", "assert", "se_layer", ".", "conv1", ".", "conv", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "se_layer", ".", "conv1", ".", "conv", ".", "padding", "==", "(", "0", ",", "0", ")", "\n", "assert", "isinstance", "(", "se_layer", ".", "conv1", ".", "activate", ",", "torch", ".", "nn", ".", "ReLU", ")", "\n", "assert", "se_layer", ".", "conv2", ".", "conv", ".", "kernel_size", "==", "(", "1", ",", "1", ")", "\n", "assert", "se_layer", ".", "conv2", ".", "conv", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "se_layer", ".", "conv2", ".", "conv", ".", "padding", "==", "(", "0", ",", "0", ")", "\n", "assert", "isinstance", "(", "se_layer", ".", "conv2", ".", "activate", ",", "mmcv", ".", "cnn", ".", "HSigmoid", ")", "\n", "\n", "x", "=", "torch", ".", "rand", "(", "1", ",", "16", ",", "64", ",", "64", ")", "\n", "output", "=", "se_layer", "(", "x", ")", "\n", "assert", "output", ".", "shape", "==", "(", "1", ",", "16", ",", "64", ",", "64", ")", "\n", "\n", "# test config with channels = 16, act_cfg = dict(type='ReLU').", "\n", "se_layer", "=", "SELayer", "(", "16", ",", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ")", "\n", "assert", "se_layer", ".", "conv1", ".", "conv", ".", "kernel_size", "==", "(", "1", ",", "1", ")", "\n", "assert", "se_layer", ".", "conv1", ".", "conv", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "se_layer", ".", "conv1", ".", "conv", ".", "padding", "==", "(", "0", ",", "0", ")", "\n", "assert", "isinstance", "(", "se_layer", ".", "conv1", ".", "activate", ",", "torch", ".", "nn", ".", "ReLU", ")", "\n", "assert", "se_layer", ".", "conv2", ".", "conv", ".", "kernel_size", "==", "(", "1", ",", "1", ")", "\n", "assert", "se_layer", ".", "conv2", ".", "conv", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "se_layer", ".", "conv2", ".", "conv", ".", "padding", "==", "(", "0", ",", "0", ")", "\n", "assert", "isinstance", "(", "se_layer", ".", "conv2", ".", "activate", ",", "torch", ".", "nn", ".", "ReLU", ")", "\n", "\n", "x", "=", "torch", ".", "rand", "(", "1", ",", "16", ",", "64", ",", "64", ")", "\n", "output", "=", "se_layer", "(", "x", ")", "\n", "assert", "output", ".", "shape", "==", "(", "1", ",", "16", ",", "64", ",", "64", ")", "\n", "", ""]]}