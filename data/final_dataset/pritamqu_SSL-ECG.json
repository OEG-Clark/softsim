{"home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.import_filenames": [[14, 23], ["os.walk"], "function", ["None"], ["def", "import_filenames", "(", "directory_path", ")", ":", "\n", "    ", "\"\"\" \n    import all file names of a directory \"\"\"", "\n", "filename_list", "=", "[", "]", "\n", "dir_list", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "directory_path", ",", "topdown", "=", "False", ")", ":", "\n", "        ", "filename_list", "=", "files", "\n", "dir_list", "=", "dirs", "\n", "", "return", "filename_list", ",", "dir_list", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.normalize": [[24, 29], ["None"], "function", ["None"], ["", "def", "normalize", "(", "x", ",", "x_mean", ",", "x_std", ")", ":", "\n", "    ", "\"\"\" \n    perform z-score normalization of a signal \"\"\"", "\n", "x_scaled", "=", "(", "x", "-", "x_mean", ")", "/", "x_std", "\n", "return", "x_scaled", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.make_window": [[30, 46], ["int", "numpy.zeros", "len", "segment.reshape.reshape", "numpy.append", "len"], "function", ["None"], ["", "def", "make_window", "(", "signal", ",", "fs", ",", "overlap", ",", "window_size_sec", ")", ":", "\n", "    ", "\"\"\" \n    perform cropped signals of window_size seconds for the whole signal\n    overlap input is in percentage of window_size\n    window_size is in seconds \"\"\"", "\n", "\n", "window_size", "=", "fs", "*", "window_size_sec", "\n", "overlap", "=", "int", "(", "window_size", "*", "(", "overlap", "/", "100", ")", ")", "\n", "start", "=", "0", "\n", "segmented", "=", "np", ".", "zeros", "(", "(", "1", ",", "window_size", ")", ",", "dtype", "=", "int", ")", "\n", "while", "(", "start", "+", "window_size", "<=", "len", "(", "signal", ")", ")", ":", "\n", "        ", "segment", "=", "signal", "[", "start", ":", "start", "+", "window_size", "]", "\n", "segment", "=", "segment", ".", "reshape", "(", "1", ",", "len", "(", "segment", ")", ")", "\n", "segmented", "=", "np", ".", "append", "(", "segmented", ",", "segment", ",", "axis", "=", "0", ")", "\n", "start", "=", "start", "+", "window_size", "-", "overlap", "\n", "", "return", "segmented", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.extract_swell_dataset": [[50, 152], ["print", "utils.makedirs", "data_preprocessing.import_filenames", "numpy.unique", "numpy.empty", "tqdm.tqdm", "tqdm.tqdm", "pandas.ExcelFile", "print", "tqdm.tqdm", "labels.append.drop_duplicates", "swell_labels.reset_index.reset_index", "print", "numpy.zeros", "swell_dict.keys", "tqdm.tqdm", "print", "person_name.append", "print", "numpy.sort", "numpy.std", "numpy.mean", "numpy.int", "numpy.loadtxt", "data_preprocessing.normalize", "data_preprocessing.make_window", "swell_dict.update", "range", "pd.ExcelFile.parse", "i.find", "i.rfind", "numpy.float", "numpy.repeat", "key.reshape.reshape", "pandas.concat", "numpy.asarray", "numpy.hstack", "numpy.vstack", "numpy.save", "numpy.int", "len", "labels.append.append", "numpy.where", "len", "len", "len", "numpy.loadtxt", "print", "i[].upper", "int", "len", "i.find", "numpy.vstack", "numpy.int", "numpy.int", "i.find", "j.find", "numpy.where", "numpy.where", "i[].upper", "numpy.int", "i.find", "i.find", "i.find", "i.find", "i.find"], "function", ["home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.makedirs", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.import_filenames", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.normalize", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.make_window"], ["", "def", "extract_swell_dataset", "(", "overlap_pct", ",", "window_size_sec", ",", "data_save_path", ",", "save", ")", ":", "\n", "\n", "    ", "print", "(", "\"SWELL\"", ")", "\n", "\n", "swell_path", "=", "\"set_your_path\\\\final_SWELL\\\\filtered_ecg\\\\\"", "\n", "swell_labels_path", "=", "\"set_your_path\\\\final_SWELL\\\\label\\\\behavioral-labels.xlsx\"", "\n", "utils", ".", "makedirs", "(", "data_save_path", ")", "\n", "freq", "=", "256", "\n", "window_size", "=", "window_size_sec", "*", "freq", "\n", "swell_file_names", ",", "_", "=", "import_filenames", "(", "swell_path", ")", "\n", "person_name", "=", "[", "]", "\n", "for", "i", "in", "swell_file_names", ":", "\n", "        ", "person_name", ".", "append", "(", "i", "[", ":", "i", ".", "find", "(", "'_'", ")", "]", ")", "\n", "\n", "", "person", "=", "np", ".", "unique", "(", "person_name", ")", "\n", "k", "=", "0", "\n", "swell_norm", "=", "np", ".", "empty", "(", "(", "person", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "for", "i", "in", "tqdm", "(", "person", ")", ":", "\n", "        ", "counter", "=", "0", "\n", "print", "(", "i", ")", "\n", "for", "j", "in", "swell_file_names", ":", "\n", "            ", "if", "j", "[", ":", "j", ".", "find", "(", "'_'", ")", "]", "==", "i", ":", "\n", "                ", "signal", "=", "np", ".", "loadtxt", "(", "swell_path", "+", "j", ")", "\n", "print", "(", "j", ")", "\n", "if", "counter", "==", "0", ":", "\n", "                    ", "data", "=", "signal", "\n", "", "else", ":", "\n", "                    ", "data", "=", "np", ".", "vstack", "(", "(", "data", ",", "signal", ")", ")", "\n", "counter", "=", "1", "\n", "\n", "", "", "", "data", "=", "np", ".", "sort", "(", "data", ")", "\n", "std", "=", "np", ".", "std", "(", "data", "[", "np", ".", "int", "(", "0.025", "*", "data", ".", "shape", "[", "0", "]", ")", ":", "np", ".", "int", "(", "0.975", "*", "data", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "mean", "=", "np", ".", "mean", "(", "data", ")", "\n", "swell_norm", "[", "k", ",", ":", "]", "=", "[", "np", ".", "int", "(", "i", "[", "2", ":", "]", ")", ",", "mean", ",", "std", "]", "\n", "k", "=", "k", "+", "1", "\n", "\n", "\n", "", "swell_dict", "=", "{", "}", "\n", "\n", "for", "i", "in", "tqdm", "(", "swell_file_names", ")", ":", "\n", "        ", "name", "=", "np", ".", "int", "(", "i", "[", "2", ":", "i", ".", "find", "(", "'_'", ")", "]", ")", "\n", "x_mean", "=", "swell_norm", "[", "np", ".", "where", "(", "swell_norm", "[", ":", ",", "0", "]", "==", "name", ")", "]", "[", ":", ",", "1", "]", "[", "0", "]", "\n", "x_std", "=", "swell_norm", "[", "np", ".", "where", "(", "swell_norm", "[", ":", ",", "0", "]", "==", "name", ")", "]", "[", ":", ",", "2", "]", "[", "0", "]", "\n", "data", "=", "np", ".", "loadtxt", "(", "swell_path", "+", "i", ")", "\n", "data", "=", "normalize", "(", "data", ",", "x_mean", ",", "x_std", ")", "\n", "data_windowed", "=", "make_window", "(", "data", ",", "freq", ",", "overlap_pct", ",", "window_size_sec", ")", "\n", "swell_dict", ".", "update", "(", "{", "i", ":", "data_windowed", "}", ")", "\n", "\n", "\n", "", "counter", "=", "0", ";", "\n", "label", "=", "pd", ".", "ExcelFile", "(", "swell_labels_path", ")", "\n", "label_sheet_names", "=", "label", ".", "sheet_names", "\n", "participant_labellings", "=", "pd", ".", "DataFrame", "\n", "\n", "print", "(", "'getting labels...'", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "label_sheet_names", ")", ")", ")", ":", "\n", "        ", "participant_labellings", "=", "label", ".", "parse", "(", "label_sheet_names", "[", "i", "]", ")", "\n", "if", "counter", "==", "0", ":", "\n", "            ", "labels", "=", "participant_labellings", "\n", "", "else", ":", "\n", "            ", "labels", "=", "labels", ".", "append", "(", "participant_labellings", ",", "ignore_index", "=", "True", ",", "sort", "=", "False", ")", "\n", "", "counter", "=", "counter", "+", "1", ";", "\n", "\n", "", "swell_labels", "=", "labels", ".", "drop_duplicates", "(", "subset", "=", "[", "'PP'", ",", "'Blok'", "]", ",", "keep", "=", "'last'", ")", "\n", "swell_labels", "=", "swell_labels", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "counter", "=", "0", "\n", "\n", "#adding csv names into labels", "\n", "swell_labels", "[", "'filename'", "]", "=", "'default'", "\n", "\n", "for", "i", "in", "swell_file_names", ":", "\n", "        ", "start", "=", "i", ".", "find", "(", "'_'", ")", "\n", "end", "=", "i", ".", "rfind", "(", "'c'", ")", "\n", "condition", "=", "(", "swell_labels", "[", "'PP'", "]", "==", "i", "[", ":", "start", "]", ".", "upper", "(", ")", ")", "&", "(", "swell_labels", "[", "'Blok'", "]", "==", "int", "(", "i", "[", "end", "+", "1", ":", "-", "4", "]", ")", ")", "\n", "index", "=", "np", ".", "where", "(", "condition", ")", "[", "0", "]", "\n", "if", "len", "(", "index", ")", "!=", "0", ":", "\n", "            ", "swell_labels", "[", "'filename'", "]", ".", "iloc", "[", "index", "[", "0", "]", "]", "=", "i", "\n", "\n", "\n", "", "", "print", "(", "'dict unpacking...'", ")", "\n", "\n", "final_set", "=", "np", ".", "zeros", "(", "(", "1", ",", "window_size", "+", "12", ")", ",", "dtype", "=", "int", ")", "\n", "key_list", "=", "swell_dict", ".", "keys", "(", ")", "\n", "for", "i", "in", "tqdm", "(", "key_list", ")", ":", "\n", "        ", "new_key", "=", "np", ".", "float", "(", "i", "[", "i", ".", "find", "(", "'pp'", ")", "+", "2", ":", "i", ".", "find", "(", "'_'", ")", "]", "+", "\".\"", "+", "i", "[", "i", ".", "find", "(", "'c'", ")", "+", "1", ":", "-", "4", "]", ")", "\n", "values", "=", "swell_dict", "[", "i", "]", "\n", "key", "=", "np", ".", "repeat", "(", "new_key", ",", "len", "(", "values", ")", ")", "\n", "key", "=", "key", ".", "reshape", "(", "len", "(", "key", ")", ",", "1", ")", "\n", "label_set", "=", "swell_labels", "[", "(", "swell_labels", "[", "'PP'", "]", "==", "i", "[", ":", "i", ".", "find", "(", "'_'", ")", "]", ".", "upper", "(", ")", ")", "&", "(", "swell_labels", "[", "'Blok'", "]", "==", "np", ".", "int", "(", "i", "[", "i", ".", "find", "(", "'c'", ")", "+", "1", ":", "-", "4", "]", ")", ")", "]", "\n", "label_set", "=", "label_set", "[", "[", "'Valence_rc'", ",", "'Arousal_rc'", ",", "'Dominance'", ",", "'Stress'", ",", "'MentalEffort'", ",", "'MentalDemand'", ",", "'PhysicalDemand'", ",", "'TemporalDemand'", ",", "'Effort'", ",", "'Performance_rc'", ",", "'Frustration'", "]", "]", "\n", "label_set", "=", "pd", ".", "concat", "(", "[", "label_set", "]", "*", "len", "(", "values", ")", ",", "ignore_index", "=", "True", ")", "\n", "label_set", "=", "np", ".", "asarray", "(", "label_set", ")", "\n", "signal_set", "=", "np", ".", "hstack", "(", "(", "key", ",", "label_set", ",", "values", ")", ")", "\n", "final_set", "=", "np", ".", "vstack", "(", "(", "final_set", ",", "signal_set", ")", ")", "\n", "\n", "", "final_set", "=", "final_set", "[", "1", ":", "]", "\n", "\n", "if", "save", ":", "\n", "        ", "np", ".", "save", "(", "data_save_path", "/", "'swell_dict.npy'", ",", "final_set", ")", "\n", "\n", "", "print", "(", "'swell files importing finished...'", ")", "\n", "return", "final_set", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.extract_dreamer_dataset": [[155, 270], ["print", "utils.makedirs", "data_preprocessing.import_filenames", "numpy.unique", "numpy.empty", "tqdm.tqdm", "tqdm.tqdm", "data_preprocessing.import_filenames", "dreamer_labels_dict.keys", "pandas.DataFrame", "print", "numpy.zeros", "tqdm.tqdm", "numpy.zeros", "print", "tqdm.tqdm", "numpy.hstack", "print", "person_name.append", "print", "numpy.sort", "numpy.std", "numpy.mean", "numpy.int", "numpy.loadtxt", "data_preprocessing.normalize", "data_preprocessing.make_window", "dreamer_dict.update", "pandas.read_csv", "range", "i.find", "dreamer_dict.keys", "i.find", "numpy.int", "numpy.int", "numpy.repeat", "numpy.hstack", "numpy.vstack", "range", "numpy.array", "numpy.append", "numpy.save", "numpy.int", "len", "dreamer_labels_dict.update", "numpy.array", "len", "len", "numpy.loadtxt", "print", "int", "int", "int", "i.find", "numpy.vstack", "numpy.int", "numpy.int", "i.find", "str", "j.find", "numpy.where", "numpy.where", "str", "str", "str", "str", "numpy.int", "str", "numpy.int", "str", "numpy.int", "numpy.int", "numpy.int", "numpy.int"], "function", ["home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.makedirs", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.import_filenames", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.import_filenames", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.normalize", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.make_window"], ["", "def", "extract_dreamer_dataset", "(", "overlap_pct", ",", "window_size_sec", ",", "data_save_path", ",", "save", ")", ":", "\n", "\n", "    ", "print", "(", "\"DREAMER\"", ")", "\n", "\n", "dreamer_path", "=", "\"set_your_path\\\\final_DREAMER\\\\filtered_ecg\\\\\"", "\n", "dreamer_labels_path", "=", "\"set_your_path\\\\final_DREAMER\\\\labels\\\\\"", "\n", "utils", ".", "makedirs", "(", "data_save_path", ")", "\n", "freq", "=", "256", "\n", "window_size", "=", "window_size_sec", "*", "freq", "# sampling freq is always 256", "\n", "\n", "dreamer_file_names", ",", "_", "=", "import_filenames", "(", "dreamer_path", ")", "\n", "person_name", "=", "[", "]", "\n", "for", "i", "in", "dreamer_file_names", ":", "\n", "        ", "person_name", ".", "append", "(", "i", "[", ":", "i", ".", "find", "(", "'_'", ")", "]", ")", "\n", "\n", "", "person", "=", "np", ".", "unique", "(", "person_name", ")", "\n", "k", "=", "0", "\n", "dreamer_norm", "=", "np", ".", "empty", "(", "(", "person", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "for", "i", "in", "tqdm", "(", "person", ")", ":", "\n", "        ", "counter", "=", "0", "\n", "print", "(", "i", ")", "\n", "for", "j", "in", "dreamer_file_names", ":", "\n", "            ", "if", "j", "[", ":", "j", ".", "find", "(", "'_'", ")", "]", "==", "i", ":", "\n", "                ", "signal", "=", "np", ".", "loadtxt", "(", "dreamer_path", "+", "j", ")", "\n", "print", "(", "j", ")", "\n", "if", "counter", "==", "0", ":", "\n", "                    ", "data", "=", "signal", "\n", "", "else", ":", "\n", "                    ", "data", "=", "np", ".", "vstack", "(", "(", "data", ",", "signal", ")", ")", "\n", "counter", "=", "1", "\n", "\n", "", "", "", "data", "=", "np", ".", "sort", "(", "data", ")", "\n", "std", "=", "np", ".", "std", "(", "data", "[", "np", ".", "int", "(", "0.025", "*", "data", ".", "shape", "[", "0", "]", ")", ":", "np", ".", "int", "(", "0.975", "*", "data", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "mean", "=", "np", ".", "mean", "(", "data", ")", "\n", "dreamer_norm", "[", "k", ",", ":", "]", "=", "[", "np", ".", "int", "(", "i", "[", "2", ":", "]", ")", ",", "mean", ",", "std", "]", "\n", "k", "=", "k", "+", "1", "\n", "\n", "\n", "", "dreamer_dict", "=", "{", "}", "\n", "\n", "\n", "for", "i", "in", "tqdm", "(", "dreamer_file_names", ")", ":", "\n", "\n", "        ", "name", "=", "np", ".", "int", "(", "i", "[", "2", ":", "i", ".", "find", "(", "'_'", ")", "]", ")", "\n", "x_mean", "=", "dreamer_norm", "[", "np", ".", "where", "(", "dreamer_norm", "[", ":", ",", "0", "]", "==", "name", ")", "]", "[", ":", ",", "1", "]", "[", "0", "]", "\n", "x_std", "=", "dreamer_norm", "[", "np", ".", "where", "(", "dreamer_norm", "[", ":", ",", "0", "]", "==", "name", ")", "]", "[", ":", ",", "2", "]", "[", "0", "]", "\n", "\n", "data", "=", "np", ".", "loadtxt", "(", "dreamer_path", "+", "i", ")", "\n", "data", "=", "normalize", "(", "data", ",", "x_mean", ",", "x_std", ")", "\n", "data_windowed", "=", "make_window", "(", "data", ",", "freq", ",", "overlap_pct", ",", "window_size_sec", ")", "\n", "dreamer_dict", ".", "update", "(", "{", "i", ":", "data_windowed", "}", ")", "\n", "\n", "\n", "\n", "## dreamer label information", "\n", "", "dreamer_labels_dict", "=", "{", "}", "\n", "dreamer_label_names", ",", "_", "=", "import_filenames", "(", "dreamer_labels_path", ")", "\n", "for", "i", "in", "dreamer_label_names", ":", "\n", "        ", "dreamer_label", "=", "pd", ".", "read_csv", "(", "dreamer_labels_path", "+", "i", ",", "sep", "=", "','", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "dreamer_label", ")", ")", ":", "\n", "            ", "label_key", "=", "i", "[", ":", "-", "4", "]", "+", "'_clips'", "+", "str", "(", "j", "+", "1", ")", "+", "'.txt'", "\n", "dreamer_labels_dict", ".", "update", "(", "{", "label_key", ":", "dreamer_label", ".", "loc", "[", "j", ",", ":", "]", "}", ")", "\n", "\n", "", "", "keys", "=", "dreamer_labels_dict", ".", "keys", "(", ")", "\n", "\n", "## load in a dataframe", "\n", "label_df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'filename'", ",", "'Arousal'", ",", "'Dominance'", ",", "'Valence'", "]", ")", "\n", "counter", "=", "0", "\n", "for", "i", "in", "keys", ":", "\n", "        ", "index", "=", "i", ".", "find", "(", "'_'", ")", "\n", "key", "=", "i", "[", "2", ":", "index", "]", "+", "'.'", "+", "i", "[", "index", "+", "6", ":", "-", "4", "]", "\n", "label_df", ".", "loc", "[", "counter", ",", "'filename'", "]", "=", "key", "\n", "label_df", ".", "loc", "[", "counter", ",", "'Arousal'", "]", "=", "dreamer_labels_dict", "[", "i", "]", ".", "values", "[", "0", "]", "\n", "label_df", ".", "loc", "[", "counter", ",", "'Dominance'", "]", "=", "dreamer_labels_dict", "[", "i", "]", ".", "values", "[", "1", "]", "\n", "label_df", ".", "loc", "[", "counter", ",", "'Valence'", "]", "=", "dreamer_labels_dict", "[", "i", "]", ".", "values", "[", "2", "]", "\n", "counter", "=", "counter", "+", "1", "\n", "\n", "", "print", "(", "'dict unpacking...'", ")", "\n", "\n", "## data loading with file name", "\n", "final_set", "=", "np", ".", "zeros", "(", "(", "1", ",", "window_size", "+", "2", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", "in", "tqdm", "(", "dreamer_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "values", "=", "dreamer_dict", "[", "i", "]", "\n", "index", "=", "i", ".", "find", "(", "'_'", ")", "\n", "person_id", "=", "np", ".", "int", "(", "i", "[", "2", ":", "index", "]", ")", "\n", "clip", "=", "np", ".", "int", "(", "i", "[", "index", "+", "6", ":", "-", "4", "]", ")", "\n", "key", "=", "np", ".", "repeat", "(", "np", ".", "array", "(", "[", "[", "person_id", ",", "clip", "]", "]", ")", ",", "len", "(", "values", ")", ",", "axis", "=", "0", ")", "\n", "signal_set", "=", "np", ".", "hstack", "(", "(", "key", ",", "values", ")", ")", "\n", "#    final_training_set = np.append(final_training_set, training_set, axis = 0)", "\n", "final_set", "=", "np", ".", "vstack", "(", "(", "final_set", ",", "signal_set", ")", ")", "\n", "\n", "## first column stands for labels: XX.CC == XX person id, and CC clips", "\n", "", "final_set", "=", "final_set", "[", "1", ":", "]", "\n", "\n", "file_id", "=", "final_set", "[", ":", ",", ":", "2", "]", "\n", "\n", "y", "=", "np", ".", "zeros", "(", "(", "1", ",", "4", ")", ")", "## ['person_id', 'Arousal', 'Dominance', 'Valence']", "\n", "\n", "print", "(", "'labels are getting matched with signals...'", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "final_set", ")", ")", ")", ":", "\n", "        ", "temp", "=", "[", "[", "file_id", "[", "i", ",", "0", "]", ",", "int", "(", "label_df", "[", "label_df", ".", "filename", "==", "str", "(", "np", ".", "int", "(", "file_id", "[", "i", ",", "0", "]", ")", ")", "+", "'.'", "+", "str", "(", "np", ".", "int", "(", "file_id", "[", "i", ",", "1", "]", ")", ")", "]", ".", "Arousal", ".", "values", "[", "0", "]", ")", ",", "int", "(", "label_df", "[", "label_df", ".", "filename", "==", "str", "(", "np", ".", "int", "(", "file_id", "[", "i", ",", "0", "]", ")", ")", "+", "'.'", "+", "str", "(", "np", ".", "int", "(", "file_id", "[", "i", ",", "1", "]", ")", ")", "]", ".", "Valence", ".", "values", "[", "0", "]", ")", ",", "int", "(", "label_df", "[", "label_df", ".", "filename", "==", "str", "(", "np", ".", "int", "(", "file_id", "[", "i", ",", "0", "]", ")", ")", "+", "'.'", "+", "str", "(", "np", ".", "int", "(", "file_id", "[", "i", ",", "1", "]", ")", ")", "]", ".", "Dominance", ".", "values", "[", "0", "]", ")", "]", "]", "\n", "temp", "=", "np", ".", "array", "(", "temp", ")", "\n", "y", "=", "np", ".", "append", "(", "y", ",", "temp", ",", "axis", "=", "0", ")", "\n", "\n", "", "y", "=", "y", "[", "1", ":", "]", "\n", "\n", "temp", "=", "final_set", "\n", "final_set", "=", "np", ".", "hstack", "(", "(", "y", ",", "temp", "[", ":", ",", "2", ":", "]", ")", ")", "\n", "\n", "if", "save", ":", "\n", "\n", "        ", "np", ".", "save", "(", "data_save_path", "/", "'dreamer_dict.npy'", ",", "final_set", ")", "\n", "\n", "", "print", "(", "'dreamer files importing finished'", ")", "\n", "return", "final_set", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.extract_amigos_dataset": [[271, 349], ["print", "utils.makedirs", "data_preprocessing.import_filenames", "numpy.unique", "numpy.empty", "tqdm.tqdm", "tqdm.tqdm", "pandas.read_excel", "pd.read_excel.reset_index", "numpy.zeros", "labels[].map", "numpy.zeros", "tqdm.tqdm", "print", "person_name.append", "print", "numpy.sort", "numpy.std", "numpy.mean", "numpy.int", "numpy.loadtxt", "data_preprocessing.normalize", "data_preprocessing.make_window", "amigos_dict.update", "amigos_dict.keys", "i.find", "numpy.int", "numpy.save", "numpy.int", "x.lstrip().rstrip", "numpy.repeat", "numpy.hstack", "numpy.vstack", "numpy.loadtxt", "print", "numpy.array", "len", "i.find", "numpy.vstack", "numpy.int", "numpy.int", "i.find", "x.lstrip", "j.find", "numpy.where", "numpy.where"], "function", ["home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.makedirs", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.import_filenames", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.normalize", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.make_window"], ["", "def", "extract_amigos_dataset", "(", "overlap_pct", ",", "window_size_sec", ",", "data_save_path", ",", "save", ")", ":", "\n", "    ", "print", "(", "\"AMIGOS\"", ")", "\n", "amigos_path", "=", "\"set_your_path\\\\final_AMIGOS\\\\filtered_ecg\\\\\"", "\n", "amigos_labels_path", "=", "\"set_your_path\\\\final_AMIGOS\\\\labels\\\\amigos_labels.xlsx\"", "\n", "freq", "=", "256", "\n", "utils", ".", "makedirs", "(", "data_save_path", ")", "\n", "window_size", "=", "window_size_sec", "*", "freq", "\n", "\n", "amigos_file_names", ",", "_", "=", "import_filenames", "(", "amigos_path", ")", "\n", "person_name", "=", "[", "]", "\n", "for", "i", "in", "amigos_file_names", ":", "\n", "        ", "person_name", ".", "append", "(", "i", "[", ":", "i", ".", "find", "(", "'_'", ")", "]", ")", "\n", "\n", "", "person", "=", "np", ".", "unique", "(", "person_name", ")", "\n", "k", "=", "0", "\n", "amigos_norm", "=", "np", ".", "empty", "(", "(", "person", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "for", "i", "in", "tqdm", "(", "person", ")", ":", "\n", "        ", "counter", "=", "0", "\n", "print", "(", "i", ")", "\n", "for", "j", "in", "amigos_file_names", ":", "\n", "            ", "if", "j", "[", ":", "j", ".", "find", "(", "'_'", ")", "]", "==", "i", ":", "\n", "                ", "signal", "=", "np", ".", "loadtxt", "(", "amigos_path", "+", "j", ")", "\n", "print", "(", "j", ")", "\n", "if", "counter", "==", "0", ":", "\n", "                    ", "data", "=", "signal", "\n", "", "else", ":", "\n", "                    ", "data", "=", "np", ".", "vstack", "(", "(", "data", ",", "signal", ")", ")", "\n", "counter", "=", "1", "\n", "\n", "", "", "", "data", "=", "np", ".", "sort", "(", "data", ")", "\n", "std", "=", "np", ".", "std", "(", "data", "[", "np", ".", "int", "(", "0.025", "*", "data", ".", "shape", "[", "0", "]", ")", ":", "np", ".", "int", "(", "0.975", "*", "data", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "mean", "=", "np", ".", "mean", "(", "data", ")", "\n", "amigos_norm", "[", "k", ",", ":", "]", "=", "[", "np", ".", "int", "(", "i", "[", "2", ":", "]", ")", ",", "mean", ",", "std", "]", "\n", "k", "=", "k", "+", "1", "\n", "\n", "", "amigos_dict", "=", "{", "}", "\n", "\n", "for", "i", "in", "tqdm", "(", "amigos_file_names", ")", ":", "\n", "\n", "        ", "name", "=", "np", ".", "int", "(", "i", "[", "2", ":", "i", ".", "find", "(", "'_'", ")", "]", ")", "\n", "x_mean", "=", "amigos_norm", "[", "np", ".", "where", "(", "amigos_norm", "[", ":", ",", "0", "]", "==", "name", ")", "]", "[", ":", ",", "1", "]", "[", "0", "]", "\n", "x_std", "=", "amigos_norm", "[", "np", ".", "where", "(", "amigos_norm", "[", ":", ",", "0", "]", "==", "name", ")", "]", "[", ":", ",", "2", "]", "[", "0", "]", "\n", "\n", "data", "=", "np", ".", "loadtxt", "(", "amigos_path", "+", "i", ")", "\n", "data", "=", "normalize", "(", "data", ",", "x_mean", ",", "x_std", ")", "\n", "data_windowed", "=", "make_window", "(", "data", ",", "freq", ",", "overlap_pct", ",", "window_size_sec", ")", "\n", "amigos_dict", ".", "update", "(", "{", "i", ":", "data_windowed", "}", ")", "\n", "\n", "", "labels", "=", "pd", ".", "read_excel", "(", "amigos_labels_path", ",", "index_col", "=", "0", ")", "\n", "labels", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "final_set", "=", "np", ".", "zeros", "(", "(", "1", ",", "window_size", "+", "4", ")", ",", "dtype", "=", "int", ")", "\n", "labels", "[", "'VideoID'", "]", "=", "labels", "[", "'VideoID'", "]", ".", "map", "(", "lambda", "x", ":", "x", ".", "lstrip", "(", "\"'\"", ")", ".", "rstrip", "(", "\"'\"", ")", ")", "\n", "\n", "## data loading with file name", "\n", "final_set", "=", "np", ".", "zeros", "(", "(", "1", ",", "window_size", "+", "4", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", "in", "tqdm", "(", "amigos_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "values", "=", "amigos_dict", "[", "i", "]", "\n", "index", "=", "i", ".", "find", "(", "'_'", ")", "\n", "person_id", "=", "np", ".", "int", "(", "i", "[", "1", ":", "index", "]", ")", "\n", "clip", "=", "i", "[", "index", "+", "1", ":", "-", "4", "]", "\n", "cond", "=", "labels", "[", "(", "labels", ".", "UserID", "==", "person_id", ")", "&", "(", "labels", ".", "VideoID", "==", "clip", ")", "]", "\n", "if", "not", "cond", ".", "empty", ":", "\n", "            ", "arousal", "=", "labels", "[", "(", "labels", ".", "UserID", "==", "person_id", ")", "&", "(", "labels", ".", "VideoID", "==", "clip", ")", "]", ".", "arousal", ".", "values", "[", "0", "]", "\n", "valence", "=", "labels", "[", "(", "labels", ".", "UserID", "==", "person_id", ")", "&", "(", "labels", ".", "VideoID", "==", "clip", ")", "]", ".", "valence", ".", "values", "[", "0", "]", "\n", "dominance", "=", "labels", "[", "(", "labels", ".", "UserID", "==", "person_id", ")", "&", "(", "labels", ".", "VideoID", "==", "clip", ")", "]", ".", "dominance", ".", "values", "[", "0", "]", "\n", "key", "=", "np", ".", "repeat", "(", "np", ".", "array", "(", "[", "[", "person_id", ",", "arousal", ",", "valence", ",", "dominance", "]", "]", ")", ",", "len", "(", "values", ")", ",", "axis", "=", "0", ")", "\n", "signal_set", "=", "np", ".", "hstack", "(", "(", "key", ",", "values", ")", ")", "\n", "#    final_training_set = np.append(final_training_set, training_set, axis = 0)", "\n", "final_set", "=", "np", ".", "vstack", "(", "(", "final_set", ",", "signal_set", ")", ")", "\n", "\n", "## first column stands for labels: XX.CC == XX person id, and CC clips", "\n", "", "", "final_set", "=", "final_set", "[", "1", ":", "]", "\n", "\n", "if", "save", ":", "\n", "        ", "np", ".", "save", "(", "data_save_path", "/", "'amigos_dict.npy'", ",", "final_set", ")", "\n", "\n", "", "print", "(", "'amigos files importing finished'", ")", "\n", "return", "final_set", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.extract_wesad_dataset": [[351, 407], ["print", "utils.makedirs", "data_preprocessing.import_filenames", "tqdm.tqdm", "print", "numpy.zeros", "tqdm.tqdm", "print", "numpy.loadtxt", "numpy.sort", "numpy.std", "numpy.mean", "data_preprocessing.normalize", "numpy.loadtxt", "data_preprocessing.make_window", "data_preprocessing.make_window", "wesad_dict.update", "wesad_labels.update", "wesad_dict.keys", "i.find", "numpy.repeat", "key.reshape.astype", "key.reshape.reshape", "numpy.amax", "labels_max.reshape.reshape", "numpy.hstack", "numpy.vstack", "numpy.save", "len", "len", "len", "numpy.int", "numpy.int"], "function", ["home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.makedirs", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.import_filenames", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.normalize", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.make_window", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.make_window"], ["", "def", "extract_wesad_dataset", "(", "overlap_pct", ",", "window_size_sec", ",", "data_save_path", ",", "save", ")", ":", "\n", "\n", "    ", "print", "(", "'WESAD'", ")", "\n", "\n", "wesad_path", "=", "\"set_your_path\\\\final_WESAD\\\\filtered_ecg\\\\\"", "\n", "wesad_labels_path", "=", "\"set_your_path\\\\final_WESAD\\\\labels\\\\\"", "\n", "freq", "=", "256", "\n", "utils", ".", "makedirs", "(", "data_save_path", ")", "\n", "window_size", "=", "window_size_sec", "*", "freq", "\n", "\n", "wesad_file_names", ",", "_", "=", "import_filenames", "(", "wesad_path", ")", "\n", "\n", "wesad_dict", "=", "{", "}", "\n", "wesad_labels", "=", "{", "}", "\n", "\n", "\n", "for", "i", "in", "tqdm", "(", "wesad_file_names", ")", ":", "\n", "        ", "x_mean", "=", "np", "\n", "data", "=", "np", ".", "loadtxt", "(", "wesad_path", "+", "i", ")", "\n", "sort_data", "=", "np", ".", "sort", "(", "data", ")", "\n", "x_std", "=", "np", ".", "std", "(", "sort_data", "[", "np", ".", "int", "(", "0.025", "*", "sort_data", ".", "shape", "[", "0", "]", ")", ":", "np", ".", "int", "(", "0.975", "*", "sort_data", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "x_mean", "=", "np", ".", "mean", "(", "sort_data", ")", "\n", "data", "=", "normalize", "(", "data", ",", "x_mean", ",", "x_std", ")", "\n", "labels", "=", "np", ".", "loadtxt", "(", "wesad_labels_path", "+", "i", ")", "\n", "data_windowed", "=", "make_window", "(", "data", ",", "freq", ",", "overlap_pct", ",", "window_size_sec", ")", "\n", "labels_windowed", "=", "make_window", "(", "labels", ",", "freq", ",", "overlap_pct", ",", "window_size_sec", ")", "\n", "\n", "wesad_dict", ".", "update", "(", "{", "i", ":", "data_windowed", "}", ")", "\n", "wesad_labels", ".", "update", "(", "{", "i", ":", "labels_windowed", "}", ")", "\n", "\n", "", "print", "(", "'dict unpacking...'", ")", "\n", "final_set", "=", "np", ".", "zeros", "(", "(", "1", ",", "window_size", "+", "2", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", "in", "tqdm", "(", "wesad_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "values", "=", "wesad_dict", "[", "i", "]", "\n", "labels", "=", "wesad_labels", "[", "i", "]", "\n", "index", "=", "i", ".", "find", "(", "'.'", ")", "\n", "key", "=", "i", "[", "1", ":", "index", "]", "\n", "key", "=", "np", ".", "repeat", "(", "key", ",", "len", "(", "values", ")", ")", "\n", "key", "=", "key", ".", "astype", "(", "float", ")", "\n", "key", "=", "key", ".", "reshape", "(", "len", "(", "key", ")", ",", "1", ")", "\n", "labels_max", "=", "np", ".", "amax", "(", "labels", ",", "axis", "=", "1", ")", "\n", "labels_max", "=", "labels_max", ".", "reshape", "(", "len", "(", "labels_max", ")", ",", "1", ")", "\n", "\n", "signal_set", "=", "np", ".", "hstack", "(", "(", "key", ",", "labels_max", ",", "values", ")", ")", "\n", "#    final_training_set = np.append(final_training_set, training_set, axis = 0)", "\n", "final_set", "=", "np", ".", "vstack", "(", "(", "final_set", ",", "signal_set", ")", ")", "\n", "\n", "## first column stands for labels: XX.CC == XX person id, and CC clips", "\n", "", "final_set", "=", "final_set", "[", "1", ":", "]", "\n", "\n", "\n", "if", "save", ":", "\n", "        ", "np", ".", "save", "(", "data_save_path", "/", "'wesad_dict.npy'", ",", "final_set", ")", "\n", "\n", "", "print", "(", "'wesad files importing finished'", ")", "\n", "return", "final_set", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.load_data": [[408, 411], ["numpy.load"], "function", ["None"], ["", "def", "load_data", "(", "path", ")", ":", "\n", "    ", "dataset", "=", "np", ".", "load", "(", "path", ",", "allow_pickle", "=", "True", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.swell_prepare_for_10fold": [[412, 429], ["numpy.floor", "person.reshape.reshape", "y_input_stress.reshape.reshape", "y_arousal.astype().reshape.astype().reshape", "y_valence.astype().reshape.astype().reshape", "numpy.hstack", "y_arousal.astype().reshape.astype", "y_valence.astype().reshape.astype", "numpy.round"], "function", ["None"], ["", "def", "swell_prepare_for_10fold", "(", "swell_data", ")", ":", "\n", "\n", "    ", "ecg", "=", "swell_data", "[", ":", ",", "12", ":", "]", "\n", "\n", "\"\"\" 'person.blok', 'Valence_rc', 'Arousal_rc', 'Dominance' \"\"\"", "\n", "\"\"\" 'person.blok', 'Valence_rc', 'Arousal_rc', 'Dominance', 'Stress', 'MentalEffort', 'MentalDemand', 'PhysicalDemand', 'TemporalDemand', 'Effort','Performance_rc', 'Frustration' \"\"\"", "\n", "\n", "person", "=", "np", ".", "floor", "(", "swell_data", "[", ":", ",", "0", "]", ")", "\n", "y_input_stress", "=", "(", "swell_data", "[", ":", ",", "0", "]", "*", "10", "-", "np", ".", "round", "(", "swell_data", "[", ":", ",", "0", "]", ")", "*", "10", ")", ".", "astype", "(", "int", ")", "\n", "y_arousal", "=", "swell_data", "[", ":", ",", "2", "]", "\n", "y_valence", "=", "swell_data", "[", ":", ",", "1", "]", "\n", "person", "=", "person", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y_input_stress", "=", "y_input_stress", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y_arousal", "=", "y_arousal", ".", "astype", "(", "int", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y_valence", "=", "y_valence", ".", "astype", "(", "int", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "swell_data", "=", "np", ".", "hstack", "(", "(", "person", ",", "y_input_stress", ",", "y_arousal", ",", "y_valence", ",", "ecg", ")", ")", "\n", "return", "swell_data", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.wesad_prepare_for_10fold": [[431, 445], ["person[].reshape", "y_stress.reshape.reshape", "numpy.hstack"], "function", ["None"], ["", "def", "wesad_prepare_for_10fold", "(", "wesad_data", ",", "numb_class", "=", "4", ")", ":", "\n", "\n", "    ", "person", "=", "wesad_data", "[", ":", ",", "0", "]", "\n", "y_stress", "=", "wesad_data", "[", ":", ",", "1", "]", "\n", "ecg", "=", "wesad_data", "[", ":", ",", "2", ":", "]", "\n", "\n", "ecg", "=", "ecg", "[", "(", "y_stress", "!=", "0", ")", "&", "(", "y_stress", "!=", "5", ")", "&", "(", "y_stress", "!=", "6", ")", "&", "(", "y_stress", "!=", "7", ")", "]", "\n", "person", "=", "person", "[", "(", "y_stress", "!=", "0", ")", "&", "(", "y_stress", "!=", "5", ")", "&", "(", "y_stress", "!=", "6", ")", "&", "(", "y_stress", "!=", "7", ")", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y_stress", "=", "y_stress", "[", "(", "y_stress", "!=", "0", ")", "&", "(", "y_stress", "!=", "5", ")", "&", "(", "y_stress", "!=", "6", ")", "&", "(", "y_stress", "!=", "7", ")", "]", "-", "1", "\n", "y_stress", "=", "y_stress", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "wesad_data", "=", "np", ".", "hstack", "(", "(", "person", ",", "y_stress", ",", "ecg", ")", ")", "\n", "\n", "return", "wesad_data", "# 4 class", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.dreamer_prepare_for_10fold": [[446, 460], ["person.reshape.reshape", "y_arousal.astype().reshape.astype().reshape", "y_valence.astype().reshape.astype().reshape", "numpy.hstack", "y_arousal.astype().reshape.astype", "y_valence.astype().reshape.astype"], "function", ["None"], ["", "def", "dreamer_prepare_for_10fold", "(", "dreamer_data", ")", ":", "\n", "\n", "    ", "ecg", "=", "dreamer_data", "[", ":", ",", "4", ":", "]", "\n", "\n", "\"\"\" 'person', 'Arousal', 'Dominance',  'Valence' \"\"\"", "\n", "\n", "person", "=", "dreamer_data", "[", ":", ",", "0", "]", "\n", "y_arousal", "=", "dreamer_data", "[", ":", ",", "1", "]", "\n", "y_valence", "=", "dreamer_data", "[", ":", ",", "3", "]", "\n", "person", "=", "person", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y_arousal", "=", "y_arousal", ".", "astype", "(", "int", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y_valence", "=", "y_valence", ".", "astype", "(", "int", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "dreamer_data", "=", "np", ".", "hstack", "(", "(", "person", ",", "y_arousal", ",", "y_valence", ",", "ecg", ")", ")", "\n", "return", "dreamer_data", "# binary", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.amigos_prepare_for_10fold": [[461, 476], ["numpy.round", "numpy.round", "person.reshape.reshape", "y_arousal.astype().reshape.astype().reshape", "y_valence.astype().reshape.astype().reshape", "numpy.hstack", "y_arousal.astype().reshape.astype", "y_valence.astype().reshape.astype"], "function", ["None"], ["", "def", "amigos_prepare_for_10fold", "(", "amigos_data", ")", ":", "\n", "\n", "    ", "ecg", "=", "amigos_data", "[", ":", ",", "4", ":", "]", "\n", "\n", "\"\"\" 'Arousal', 'Dominance',  'Valence' \"\"\"", "\n", "\n", "person", "=", "amigos_data", "[", ":", ",", "0", "]", "\n", "y_arousal", "=", "np", ".", "round", "(", "amigos_data", "[", ":", ",", "1", "]", ",", "0", ")", "\n", "y_valence", "=", "np", ".", "round", "(", "amigos_data", "[", ":", ",", "3", "]", ",", "0", ")", "\n", "person", "=", "person", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y_arousal", "=", "y_arousal", ".", "astype", "(", "int", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y_valence", "=", "y_valence", ".", "astype", "(", "int", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "amigos_data", "=", "np", ".", "hstack", "(", "(", "person", ",", "y_arousal", ",", "y_valence", ",", "ecg", ")", ")", "\n", "\n", "return", "amigos_data", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.data_preprocessing.save_list": [[478, 485], ["range", "len", "open", "csv.writer", "csv.writer.writerow"], "function", ["None"], ["", "def", "save_list", "(", "mylist", ",", "filename", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "mylist", ")", ")", ":", "\n", "        ", "temp", "=", "mylist", "[", "i", "]", "\n", "with", "open", "(", "filename", ",", "'a'", ",", "newline", "=", "''", ")", "as", "myfile", ":", "\n", "            ", "wr", "=", "csv", ".", "writer", "(", "myfile", ",", "quoting", "=", "csv", ".", "QUOTE_ALL", ")", "\n", "wr", ".", "writerow", "(", "temp", ")", "\n", "", "", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.signal_transformation_task.add_noise": [[13, 20], ["numpy.random.normal", "numpy.shape"], "function", ["None"], ["def", "add_noise", "(", "signal", ",", "noise_amount", ")", ":", "\n", "    ", "\"\"\" \n    adding noise\n    \"\"\"", "\n", "noise", "=", "np", ".", "random", ".", "normal", "(", "1", ",", "noise_amount", ",", "np", ".", "shape", "(", "signal", ")", "[", "0", "]", ")", "\n", "noised_signal", "=", "signal", "+", "noise", "\n", "return", "noised_signal", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.signal_transformation_task.add_noise_with_SNR": [[21, 38], ["numpy.mean", "numpy.random.normal", "numpy.log10", "numpy.sqrt", "len"], "function", ["None"], ["", "def", "add_noise_with_SNR", "(", "signal", ",", "noise_amount", ")", ":", "\n", "    ", "\"\"\" \n    adding noise\n    created using: https://stackoverflow.com/a/53688043/10700812 \n    \"\"\"", "\n", "\n", "target_snr_db", "=", "noise_amount", "#20", "\n", "x_watts", "=", "signal", "**", "2", "# Calculate signal power and convert to dB ", "\n", "sig_avg_watts", "=", "np", ".", "mean", "(", "x_watts", ")", "\n", "sig_avg_db", "=", "10", "*", "np", ".", "log10", "(", "sig_avg_watts", ")", "# Calculate noise then convert to watts", "\n", "noise_avg_db", "=", "sig_avg_db", "-", "target_snr_db", "\n", "noise_avg_watts", "=", "10", "**", "(", "noise_avg_db", "/", "10", ")", "\n", "mean_noise", "=", "0", "\n", "noise_volts", "=", "np", ".", "random", ".", "normal", "(", "mean_noise", ",", "np", ".", "sqrt", "(", "noise_avg_watts", ")", ",", "len", "(", "x_watts", ")", ")", "# Generate an sample of white noise", "\n", "noised_signal", "=", "signal", "+", "noise_volts", "# noise added signal", "\n", "\n", "return", "noised_signal", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.signal_transformation_task.scaled": [[39, 45], ["None"], "function", ["None"], ["", "def", "scaled", "(", "signal", ",", "factor", ")", ":", "\n", "    ", "\"\"\"\"\n    scale the signal\n    \"\"\"", "\n", "scaled_signal", "=", "signal", "*", "factor", "\n", "return", "scaled_signal", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.signal_transformation_task.negate": [[47, 53], ["None"], "function", ["None"], ["", "def", "negate", "(", "signal", ")", ":", "\n", "    ", "\"\"\" \n    negate the signal \n    \"\"\"", "\n", "negated_signal", "=", "signal", "*", "(", "-", "1", ")", "\n", "return", "negated_signal", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.signal_transformation_task.hor_filp": [[55, 61], ["numpy.flip"], "function", ["None"], ["", "def", "hor_filp", "(", "signal", ")", ":", "\n", "    ", "\"\"\" \n    flipped horizontally \n    \"\"\"", "\n", "hor_flipped", "=", "np", ".", "flip", "(", "signal", ")", "\n", "return", "hor_flipped", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.signal_transformation_task.permute": [[63, 79], ["int", "int", "list", "numpy.random.shuffle", "numpy.hstack", "numpy.ceil().tolist", "range", "numpy.reshape().tolist", "numpy.asarray", "numpy.ceil", "numpy.shape", "numpy.reshape", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.shape"], "function", ["None"], ["", "def", "permute", "(", "signal", ",", "pieces", ")", ":", "\n", "    ", "\"\"\" \n    signal: numpy array (batch x window)\n    pieces: number of segments along time    \n    \"\"\"", "\n", "pieces", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "shape", "(", "signal", ")", "[", "0", "]", "/", "(", "np", ".", "shape", "(", "signal", ")", "[", "0", "]", "//", "pieces", ")", ")", ".", "tolist", "(", ")", ")", "\n", "piece_length", "=", "int", "(", "np", ".", "shape", "(", "signal", ")", "[", "0", "]", "//", "pieces", ")", "\n", "\n", "sequence", "=", "list", "(", "range", "(", "0", ",", "pieces", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "sequence", ")", "\n", "\n", "permuted_signal", "=", "np", ".", "reshape", "(", "signal", "[", ":", "(", "np", ".", "shape", "(", "signal", ")", "[", "0", "]", "//", "pieces", "*", "pieces", ")", "]", ",", "(", "pieces", ",", "piece_length", ")", ")", ".", "tolist", "(", ")", "+", "[", "signal", "[", "(", "np", ".", "shape", "(", "signal", ")", "[", "0", "]", "//", "pieces", "*", "pieces", ")", ":", "]", "]", "\n", "permuted_signal", "=", "np", ".", "asarray", "(", "permuted_signal", ")", "[", "sequence", "]", "\n", "permuted_signal", "=", "np", ".", "hstack", "(", "permuted_signal", ")", "\n", "\n", "return", "permuted_signal", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.signal_transformation_task.time_warp": [[82, 117], ["list", "numpy.random.choice", "list", "range", "math.ceil", "set().difference", "orig_signal.reshape.reshape", "numpy.shape", "set", "int", "cv2.resize", "len", "set", "int", "int", "numpy.shape", "numpy.ceil", "numpy.vstack", "int", "cv2.resize", "numpy.ceil", "numpy.vstack", "numpy.floor", "numpy.floor", "numpy.shape", "numpy.shape"], "function", ["None"], ["", "def", "time_warp", "(", "signal", ",", "sampling_freq", ",", "pieces", ",", "stretch_factor", ",", "squeeze_factor", ")", ":", "\n", "    ", "\"\"\" \n    signal: numpy array (batch x window)\n    sampling freq\n    pieces: number of segments along time\n    stretch factor\n    squeeze factor\n    \"\"\"", "\n", "\n", "total_time", "=", "np", ".", "shape", "(", "signal", ")", "[", "0", "]", "//", "sampling_freq", "\n", "segment_time", "=", "total_time", "/", "pieces", "\n", "sequence", "=", "list", "(", "range", "(", "0", ",", "pieces", ")", ")", "\n", "stretch", "=", "np", ".", "random", ".", "choice", "(", "sequence", ",", "math", ".", "ceil", "(", "len", "(", "sequence", ")", "/", "2", ")", ",", "replace", "=", "False", ")", "\n", "squeeze", "=", "list", "(", "set", "(", "sequence", ")", ".", "difference", "(", "set", "(", "stretch", ")", ")", ")", "\n", "initialize", "=", "True", "\n", "for", "i", "in", "sequence", ":", "\n", "        ", "orig_signal", "=", "signal", "[", "int", "(", "i", "*", "np", ".", "floor", "(", "segment_time", "*", "sampling_freq", ")", ")", ":", "int", "(", "(", "i", "+", "1", ")", "*", "np", ".", "floor", "(", "segment_time", "*", "sampling_freq", ")", ")", "]", "\n", "orig_signal", "=", "orig_signal", ".", "reshape", "(", "np", ".", "shape", "(", "orig_signal", ")", "[", "0", "]", ",", "1", ")", "\n", "if", "i", "in", "stretch", ":", "\n", "            ", "output_shape", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "shape", "(", "orig_signal", ")", "[", "0", "]", "*", "stretch_factor", ")", ")", "\n", "new_signal", "=", "cv2", ".", "resize", "(", "orig_signal", ",", "(", "1", ",", "output_shape", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "if", "initialize", "==", "True", ":", "\n", "                ", "time_warped", "=", "new_signal", "\n", "initialize", "=", "False", "\n", "", "else", ":", "\n", "                ", "time_warped", "=", "np", ".", "vstack", "(", "(", "time_warped", ",", "new_signal", ")", ")", "\n", "", "", "elif", "i", "in", "squeeze", ":", "\n", "            ", "output_shape", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "shape", "(", "orig_signal", ")", "[", "0", "]", "*", "squeeze_factor", ")", ")", "\n", "new_signal", "=", "cv2", ".", "resize", "(", "orig_signal", ",", "(", "1", ",", "output_shape", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "if", "initialize", "==", "True", ":", "\n", "                ", "time_warped", "=", "new_signal", "\n", "initialize", "=", "False", "\n", "", "else", ":", "\n", "                ", "time_warped", "=", "np", ".", "vstack", "(", "(", "time_warped", ",", "new_signal", ")", ")", "\n", "", "", "", "return", "time_warped", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.conv_block": [[16, 27], ["tensorflow.layers.conv1d", "tensorflow.nn.leaky_relu", "tensorflow.layers.batch_normalization", "tensorflow.layers.dropout"], "function", ["None"], ["def", "conv_block", "(", "input_tensor", ",", "filter_size", ",", "kernel_size", ",", "stride", ",", "batch_norm", ",", "dropout", ",", "dropout_rate", ",", "isTraining", ",", "name", ")", ":", "\n", "\n", "    ", "reuse", "=", "tf", ".", "compat", ".", "v1", ".", "AUTO_REUSE", "\n", "conv", "=", "tf", ".", "layers", ".", "conv1d", "(", "inputs", "=", "input_tensor", ",", "filters", "=", "filter_size", ",", "kernel_size", "=", "kernel_size", ",", "strides", "=", "stride", ",", "padding", "=", "'same'", ",", "name", "=", "name", ",", "reuse", "=", "reuse", ")", "\n", "if", "batch_norm", ":", "\n", "        ", "conv", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "conv", ",", "training", "=", "isTraining", ",", "name", "=", "name", ",", "reuse", "=", "reuse", ")", "\n", "", "conv", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "conv", ",", "name", "=", "name", ")", "\n", "if", "dropout", ":", "\n", "        ", "conv", "=", "tf", ".", "layers", ".", "dropout", "(", "inputs", "=", "conv", ",", "rate", "=", "dropout_rate", ",", "training", "=", "isTraining", ",", "name", "=", "name", ")", "\n", "\n", "", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.dense_block": [[28, 36], ["tensorflow.layers.dense", "tensorflow.nn.leaky_relu", "tensorflow.layers.dropout"], "function", ["None"], ["", "def", "dense_block", "(", "input_tensor", ",", "hidden_nodes", ",", "drop_rate", ",", "isTraining", ",", "name", ")", ":", "\n", "\n", "    ", "reuse", "=", "tf", ".", "compat", ".", "v1", ".", "AUTO_REUSE", "\n", "dense", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "input_tensor", ",", "units", "=", "hidden_nodes", ",", "reuse", "=", "reuse", ",", "name", "=", "name", ")", "\n", "dense", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "dense", ")", "\n", "dense", "=", "tf", ".", "layers", ".", "dropout", "(", "inputs", "=", "dense", ",", "rate", "=", "drop_rate", ",", "training", "=", "isTraining", ",", "name", "=", "name", ")", "\n", "\n", "return", "dense", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.self_supervised_model": [[38, 102], ["model.conv_block", "model.conv_block", "tensorflow.layers.max_pooling1d", "tensorflow.layers.flatten", "tensorflow.layers.max_pooling1d", "model.conv_block", "model.conv_block", "tensorflow.layers.max_pooling1d", "tensorflow.layers.flatten", "tensorflow.layers.max_pooling1d", "model.conv_block", "model.conv_block", "tensorflow.layers.max_pooling1d", "tensorflow.layers.flatten", "tensorflow.layers.max_pooling1d", "tensorflow.layers.flatten", "model.dense_block", "model.dense_block", "tensorflow.layers.dense", "model.dense_block", "model.dense_block", "tensorflow.layers.dense", "model.dense_block", "model.dense_block", "tensorflow.layers.dense", "model.dense_block", "model.dense_block", "tensorflow.layers.dense", "model.dense_block", "model.dense_block", "tensorflow.layers.dense", "model.dense_block", "model.dense_block", "tensorflow.layers.dense", "model.dense_block", "model.dense_block", "tensorflow.layers.dense", "tf.layers.flatten.get_shape", "tf.layers.flatten.get_shape", "tf.layers.flatten.get_shape", "tf.layers.flatten.get_shape"], "function", ["home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.conv_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.conv_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.conv_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.conv_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.conv_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.conv_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.dense_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.dense_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.dense_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.dense_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.dense_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.dense_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.dense_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.dense_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.dense_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.dense_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.dense_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.dense_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.dense_block", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.dense_block"], ["", "def", "self_supervised_model", "(", "input_tensor", ",", "isTraining", ",", "drop_rate", ",", "hidden_nodes", "=", "128", ",", "stride_mp", "=", "4", ")", ":", "\n", "\n", "    ", "reuse", "=", "tf", ".", "compat", ".", "v1", ".", "AUTO_REUSE", "\n", "\n", "main_branch", "=", "conv_block", "(", "input_tensor", ",", "filter_size", "=", "32", ",", "kernel_size", "=", "32", ",", "stride", "=", "1", ",", "batch_norm", "=", "False", ",", "dropout", "=", "False", ",", "dropout_rate", "=", "drop_rate", "*", "0.5", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'conv_layer_1'", ")", "\n", "main_branch", "=", "conv_block", "(", "main_branch", ",", "filter_size", "=", "32", ",", "kernel_size", "=", "32", ",", "stride", "=", "1", ",", "batch_norm", "=", "False", ",", "dropout", "=", "False", ",", "dropout_rate", "=", "drop_rate", "*", "0.5", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'conv_layer_2'", ")", "\n", "\n", "## conv block 1", "\n", "conv1", "=", "main_branch", "\n", "conv1", "=", "tf", ".", "layers", ".", "max_pooling1d", "(", "conv1", ",", "pool_size", "=", "conv1", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", ",", "strides", "=", "stride_mp", ",", "padding", "=", "'valid'", ",", "name", "=", "'GAP1'", ")", "\n", "conv1", "=", "tf", ".", "layers", ".", "flatten", "(", "conv1", ",", "name", "=", "'flat_layer1'", ")", "\n", "\n", "main_branch", "=", "tf", ".", "layers", ".", "max_pooling1d", "(", "main_branch", ",", "pool_size", "=", "8", ",", "strides", "=", "2", ",", "padding", "=", "'valid'", ",", "name", "=", "'mp1'", ")", "\n", "main_branch", "=", "conv_block", "(", "main_branch", ",", "filter_size", "=", "64", ",", "kernel_size", "=", "16", ",", "stride", "=", "1", ",", "batch_norm", "=", "False", ",", "dropout", "=", "False", ",", "dropout_rate", "=", "drop_rate", "*", "0.5", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'conv_layer_3'", ")", "\n", "main_branch", "=", "conv_block", "(", "main_branch", ",", "filter_size", "=", "64", ",", "kernel_size", "=", "16", ",", "stride", "=", "1", ",", "batch_norm", "=", "False", ",", "dropout", "=", "False", ",", "dropout_rate", "=", "drop_rate", "*", "0.5", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'conv_layer_4'", ")", "\n", "\n", "## conv block 2", "\n", "conv2", "=", "main_branch", "\n", "conv2", "=", "tf", ".", "layers", ".", "max_pooling1d", "(", "conv2", ",", "pool_size", "=", "conv2", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", ",", "strides", "=", "stride_mp", ",", "padding", "=", "'valid'", ",", "name", "=", "'GAP2'", ")", "\n", "conv2", "=", "tf", ".", "layers", ".", "flatten", "(", "conv2", ",", "name", "=", "'flat_layer2'", ")", "\n", "\n", "main_branch", "=", "tf", ".", "layers", ".", "max_pooling1d", "(", "main_branch", ",", "pool_size", "=", "8", ",", "strides", "=", "2", ",", "padding", "=", "'valid'", ",", "name", "=", "'mp2'", ")", "\n", "main_branch", "=", "conv_block", "(", "main_branch", ",", "filter_size", "=", "128", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "batch_norm", "=", "False", ",", "dropout", "=", "False", ",", "dropout_rate", "=", "drop_rate", "*", "0.5", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'conv_layer_5'", ")", "\n", "main_branch", "=", "conv_block", "(", "main_branch", ",", "filter_size", "=", "128", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "batch_norm", "=", "False", ",", "dropout", "=", "False", ",", "dropout_rate", "=", "drop_rate", "*", "0.5", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'conv_layer_6'", ")", "\n", "\n", "## conv block 3", "\n", "conv3", "=", "main_branch", "\n", "conv3", "=", "tf", ".", "layers", ".", "max_pooling1d", "(", "conv3", ",", "pool_size", "=", "conv3", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", ",", "strides", "=", "stride_mp", ",", "padding", "=", "'valid'", ",", "name", "=", "'GAP3'", ")", "\n", "conv3", "=", "tf", ".", "layers", ".", "flatten", "(", "conv3", ",", "name", "=", "'flat_layer3'", ")", "\n", "\n", "gap_pool_size", "=", "main_branch", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "main_branch", "=", "tf", ".", "layers", ".", "max_pooling1d", "(", "main_branch", ",", "pool_size", "=", "gap_pool_size", ",", "strides", "=", "1", ",", "padding", "=", "'valid'", ",", "name", "=", "'GAP'", ")", "\n", "main_branch", "=", "tf", ".", "layers", ".", "flatten", "(", "main_branch", ",", "name", "=", "'flat_layer'", ")", "## final conv block output", "\n", "\n", "## dense layer branches", "\n", "task_0", "=", "dense_block", "(", "input_tensor", "=", "main_branch", ",", "hidden_nodes", "=", "hidden_nodes", ",", "drop_rate", "=", "drop_rate", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'task_0_dense_1'", ")", "\n", "task_0", "=", "dense_block", "(", "input_tensor", "=", "task_0", ",", "hidden_nodes", "=", "hidden_nodes", ",", "drop_rate", "=", "drop_rate", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'task_0_dense_2'", ")", "\n", "task_0", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "task_0", ",", "units", "=", "1", ",", "name", "=", "'task_0'", ",", "reuse", "=", "reuse", ")", "\n", "\n", "task_1", "=", "dense_block", "(", "input_tensor", "=", "main_branch", ",", "hidden_nodes", "=", "hidden_nodes", ",", "drop_rate", "=", "drop_rate", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'task_1_dense_1'", ")", "\n", "task_1", "=", "dense_block", "(", "input_tensor", "=", "task_1", ",", "hidden_nodes", "=", "hidden_nodes", ",", "drop_rate", "=", "drop_rate", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'task_1_dense_2'", ")", "\n", "task_1", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "task_1", ",", "units", "=", "1", ",", "name", "=", "'task_1'", ",", "reuse", "=", "reuse", ")", "\n", "\n", "task_2", "=", "dense_block", "(", "input_tensor", "=", "main_branch", ",", "hidden_nodes", "=", "hidden_nodes", ",", "drop_rate", "=", "drop_rate", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'task_2_dense_1'", ")", "\n", "task_2", "=", "dense_block", "(", "input_tensor", "=", "task_2", ",", "hidden_nodes", "=", "hidden_nodes", ",", "drop_rate", "=", "drop_rate", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'task_2_dense_2'", ")", "\n", "task_2", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "task_2", ",", "units", "=", "1", ",", "name", "=", "'task_2'", ",", "reuse", "=", "reuse", ")", "\n", "\n", "task_3", "=", "dense_block", "(", "input_tensor", "=", "main_branch", ",", "hidden_nodes", "=", "hidden_nodes", ",", "drop_rate", "=", "drop_rate", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'task_3_dense_1'", ")", "\n", "task_3", "=", "dense_block", "(", "input_tensor", "=", "task_3", ",", "hidden_nodes", "=", "hidden_nodes", ",", "drop_rate", "=", "drop_rate", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'task_3_dense_2'", ")", "\n", "task_3", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "task_3", ",", "units", "=", "1", ",", "name", "=", "'task_3'", ",", "reuse", "=", "reuse", ")", "\n", "\n", "task_4", "=", "dense_block", "(", "input_tensor", "=", "main_branch", ",", "hidden_nodes", "=", "hidden_nodes", ",", "drop_rate", "=", "drop_rate", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'task_4_dense_1'", ")", "\n", "task_4", "=", "dense_block", "(", "input_tensor", "=", "task_4", ",", "hidden_nodes", "=", "hidden_nodes", ",", "drop_rate", "=", "drop_rate", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'task_4_dense_2'", ")", "\n", "task_4", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "task_4", ",", "units", "=", "1", ",", "name", "=", "'task_4'", ",", "reuse", "=", "reuse", ")", "\n", "\n", "task_5", "=", "dense_block", "(", "input_tensor", "=", "main_branch", ",", "hidden_nodes", "=", "hidden_nodes", ",", "drop_rate", "=", "drop_rate", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'task_5_dense_1'", ")", "\n", "task_5", "=", "dense_block", "(", "input_tensor", "=", "task_5", ",", "hidden_nodes", "=", "hidden_nodes", ",", "drop_rate", "=", "drop_rate", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'task_5_dense_2'", ")", "\n", "task_5", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "task_5", ",", "units", "=", "1", ",", "name", "=", "'task_5'", ",", "reuse", "=", "reuse", ")", "\n", "\n", "task_6", "=", "dense_block", "(", "input_tensor", "=", "main_branch", ",", "hidden_nodes", "=", "hidden_nodes", ",", "drop_rate", "=", "drop_rate", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'task_6_dense_1'", ")", "\n", "task_6", "=", "dense_block", "(", "input_tensor", "=", "task_6", ",", "hidden_nodes", "=", "hidden_nodes", ",", "drop_rate", "=", "drop_rate", ",", "isTraining", "=", "isTraining", ",", "name", "=", "'task_6_dense_2'", ")", "\n", "task_6", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "task_6", ",", "units", "=", "1", ",", "name", "=", "'task_6'", ",", "reuse", "=", "reuse", ")", "\n", "\n", "return", "conv1", ",", "conv2", ",", "conv3", ",", "main_branch", ",", "task_0", ",", "task_1", ",", "task_2", ",", "task_3", ",", "task_4", ",", "task_5", ",", "task_6", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.supervised_model_swell": [[106, 157], ["os.path.join", "os.path.join", "keras.callbacks.TensorBoard", "keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.fit", "keras.models.Sequential.predict", "keras.models.Sequential.predict", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "utils.model_result_store", "utils.model_result_store", "keras.layers.Dense", "keras.layers.Dense", "keras.models.Sequential.add", "keras.optimizers.Adam", "keras.models.Sequential.compile", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.optimizers.Adam", "keras.models.Sequential.compile", "os.path.join", "os.path.join", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Activation", "str", "str", "keras.regularizers.l2", "keras.regularizers.l2"], "function", ["home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.model_result_store", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.model_result_store"], ["", "def", "supervised_model_swell", "(", "x_tr_feature", ",", "\n", "y_tr", ",", "\n", "x_te_feature", ",", "\n", "y_te", ",", "\n", "identifier", ",", "\n", "kfold", ",", "\n", "result", ",", "\n", "summaries", ",", "\n", "current_time", ",", "\n", "epoch_super", "=", "200", ",", "\n", "batch_super", "=", "128", ",", "\n", "lr_super", "=", "0.001", ",", "\n", "hidden_nodes", "=", "512", ",", "\n", "dropout", "=", "0", ",", "\n", "L2", "=", "0", ")", ":", "\n", "\n", "\n", "    ", "input_dimension", "=", "x_tr_feature", ".", "shape", "[", "1", "]", "\n", "output_dimension", "=", "y_tr", ".", "shape", "[", "1", "]", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "summaries", ",", "'ER'", ")", "\n", "result", "=", "os", ".", "path", ".", "join", "(", "result", ",", "'ER'", ")", "\n", "tb", "=", "keras", ".", "callbacks", ".", "TensorBoard", "(", "log_dir", "=", "log_dir", ")", "\n", "\n", "model", "=", "keras", ".", "models", ".", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "hidden_nodes", ",", "input_dim", "=", "input_dimension", ",", "activation", "=", "'relu'", ",", "kernel_regularizer", "=", "keras", ".", "regularizers", ".", "l2", "(", "L2", ")", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "hidden_nodes", ",", "activation", "=", "'relu'", ",", "kernel_regularizer", "=", "keras", ".", "regularizers", ".", "l2", "(", "L2", ")", ")", ")", "\n", "\n", "if", "output_dimension", "==", "2", ":", "\n", "        ", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "output_dimension", ",", "activation", "=", "'sigmoid'", ")", ")", "\n", "op", "=", "keras", ".", "optimizers", ".", "Adam", "(", "lr", "=", "lr_super", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'binary_crossentropy'", ",", "optimizer", "=", "op", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "output_dimension", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Activation", "(", "'softmax'", ")", ")", "\n", "op", "=", "keras", ".", "optimizers", ".", "Adam", "(", "lr", "=", "lr_super", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "op", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "model", ".", "fit", "(", "x_tr_feature", ",", "y_tr", ",", "epochs", "=", "epoch_super", ",", "batch_size", "=", "batch_super", ",", "callbacks", "=", "[", "tb", "]", ",", "verbose", "=", "0", ",", "validation_data", "=", "(", "x_te_feature", ",", "y_te", ")", ",", "shuffle", "=", "True", ")", "\n", "y_tr_pred", "=", "model", ".", "predict", "(", "x_tr_feature", ",", "batch_size", "=", "batch_super", ")", "\n", "y_te_pred", "=", "model", ".", "predict", "(", "x_te_feature", ",", "batch_size", "=", "batch_super", ")", "\n", "\n", "y_tr", "=", "np", ".", "argmax", "(", "y_tr", ",", "axis", "=", "1", ")", "\n", "y_te", "=", "np", ".", "argmax", "(", "y_te", ",", "axis", "=", "1", ")", "\n", "\n", "y_tr_pred", "=", "np", ".", "argmax", "(", "y_tr_pred", ",", "axis", "=", "1", ")", "\n", "y_te_pred", "=", "np", ".", "argmax", "(", "y_te_pred", ",", "axis", "=", "1", ")", "\n", "\n", "utils", ".", "model_result_store", "(", "y_tr", ",", "y_tr_pred", ",", "os", ".", "path", ".", "join", "(", "result", ",", "str", "(", "\"tr_\"", "+", "identifier", "+", "\".csv\"", ")", ")", ",", "kfold", ")", "\n", "utils", ".", "model_result_store", "(", "y_te", ",", "y_te_pred", ",", "os", ".", "path", ".", "join", "(", "result", ",", "str", "(", "\"te_\"", "+", "identifier", "+", "\".csv\"", ")", ")", ",", "kfold", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.supervised_model_wesad": [[159, 211], ["os.path.join", "os.path.join", "keras.callbacks.TensorBoard", "keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.fit", "keras.models.Sequential.predict", "keras.models.Sequential.predict", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "utils.model_result_store", "utils.model_result_store", "keras.layers.Dense", "keras.layers.Dense", "keras.models.Sequential.add", "keras.optimizers.Adam", "keras.models.Sequential.compile", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.optimizers.Adam", "keras.models.Sequential.compile", "os.path.join", "os.path.join", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Activation", "str", "str", "keras.regularizers.l2", "keras.regularizers.l2"], "function", ["home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.model_result_store", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.model_result_store"], ["", "def", "supervised_model_wesad", "(", "x_tr_feature", ",", "\n", "y_tr", ",", "\n", "x_te_feature", ",", "\n", "y_te", ",", "\n", "identifier", ",", "\n", "kfold", ",", "\n", "result", ",", "\n", "summaries", ",", "\n", "current_time", ",", "\n", "epoch_super", "=", "200", ",", "\n", "batch_super", "=", "128", ",", "\n", "lr_super", "=", "0.001", ",", "\n", "hidden_nodes", "=", "512", ",", "\n", "dropout", "=", "0.2", ",", "\n", "L2", "=", "0", ")", ":", "\n", "\n", "\n", "    ", "input_dimension", "=", "x_tr_feature", ".", "shape", "[", "1", "]", "\n", "output_dimension", "=", "y_tr", ".", "shape", "[", "1", "]", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "summaries", ",", "'ER'", ")", "\n", "result", "=", "os", ".", "path", ".", "join", "(", "result", ",", "'ER'", ")", "\n", "tb", "=", "keras", ".", "callbacks", ".", "TensorBoard", "(", "log_dir", "=", "log_dir", ")", "\n", "\n", "model", "=", "keras", ".", "models", ".", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "hidden_nodes", ",", "input_dim", "=", "input_dimension", ",", "activation", "=", "'relu'", ",", "kernel_regularizer", "=", "keras", ".", "regularizers", ".", "l2", "(", "L2", ")", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "hidden_nodes", ",", "activation", "=", "'relu'", ",", "kernel_regularizer", "=", "keras", ".", "regularizers", ".", "l2", "(", "L2", ")", ")", ")", "\n", "\n", "if", "output_dimension", "==", "2", ":", "\n", "        ", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "output_dimension", ",", "activation", "=", "'sigmoid'", ")", ")", "\n", "op", "=", "keras", ".", "optimizers", ".", "Adam", "(", "lr", "=", "lr_super", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'binary_crossentropy'", ",", "optimizer", "=", "op", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "else", ":", "\n", "        ", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "output_dimension", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Activation", "(", "'softmax'", ")", ")", "\n", "op", "=", "keras", ".", "optimizers", ".", "Adam", "(", "lr", "=", "lr_super", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "op", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "model", ".", "fit", "(", "x_tr_feature", ",", "y_tr", ",", "epochs", "=", "epoch_super", ",", "batch_size", "=", "batch_super", ",", "callbacks", "=", "[", "tb", "]", ",", "verbose", "=", "0", ",", "validation_data", "=", "(", "x_te_feature", ",", "y_te", ")", ",", "shuffle", "=", "True", ")", "\n", "y_tr_pred", "=", "model", ".", "predict", "(", "x_tr_feature", ",", "batch_size", "=", "batch_super", ")", "\n", "y_te_pred", "=", "model", ".", "predict", "(", "x_te_feature", ",", "batch_size", "=", "batch_super", ")", "\n", "\n", "y_tr", "=", "np", ".", "argmax", "(", "y_tr", ",", "axis", "=", "1", ")", "\n", "y_te", "=", "np", ".", "argmax", "(", "y_te", ",", "axis", "=", "1", ")", "\n", "\n", "y_tr_pred", "=", "np", ".", "argmax", "(", "y_tr_pred", ",", "axis", "=", "1", ")", "\n", "y_te_pred", "=", "np", ".", "argmax", "(", "y_te_pred", ",", "axis", "=", "1", ")", "\n", "\n", "utils", ".", "model_result_store", "(", "y_tr", ",", "y_tr_pred", ",", "os", ".", "path", ".", "join", "(", "result", ",", "str", "(", "\"tr_\"", "+", "identifier", "+", "\".csv\"", ")", ")", ",", "kfold", ")", "\n", "utils", ".", "model_result_store", "(", "y_te", ",", "y_te_pred", ",", "os", ".", "path", ".", "join", "(", "result", ",", "str", "(", "\"te_\"", "+", "identifier", "+", "\".csv\"", ")", ")", ",", "kfold", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.supervised_model_dreamer": [[215, 272], ["os.path.join", "os.path.join", "keras.callbacks.TensorBoard", "keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.fit", "keras.models.Sequential.predict", "keras.models.Sequential.predict", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "utils.model_result_store", "utils.model_result_store", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dropout", "keras.models.Sequential.add", "keras.optimizers.Adam", "keras.models.Sequential.compile", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.optimizers.Adam", "keras.models.Sequential.compile", "os.path.join", "os.path.join", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Activation", "str", "str", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2"], "function", ["home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.model_result_store", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.model_result_store"], ["", "def", "supervised_model_dreamer", "(", "x_tr_feature", ",", "\n", "y_tr", ",", "\n", "x_te_feature", ",", "\n", "y_te", ",", "\n", "identifier", ",", "\n", "kfold", ",", "\n", "result", ",", "\n", "summaries", ",", "\n", "current_time", ",", "\n", "epoch_super", "=", "200", ",", "\n", "batch_super", "=", "128", ",", "\n", "lr_super", "=", "0.001", ",", "\n", "hidden_nodes", "=", "512", ",", "\n", "dropout", "=", "0.2", ",", "\n", "L2", "=", "0.0001", ")", ":", "\n", "\n", "\n", "    ", "input_dimension", "=", "x_tr_feature", ".", "shape", "[", "1", "]", "\n", "output_dimension", "=", "y_tr", ".", "shape", "[", "1", "]", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "summaries", ",", "'ER'", ")", "\n", "result", "=", "os", ".", "path", ".", "join", "(", "result", ",", "'ER'", ")", "\n", "tb", "=", "keras", ".", "callbacks", ".", "TensorBoard", "(", "log_dir", "=", "log_dir", ")", "\n", "\n", "model", "=", "keras", ".", "models", ".", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "hidden_nodes", ",", "input_dim", "=", "input_dimension", ",", "activation", "=", "'relu'", ",", "kernel_regularizer", "=", "keras", ".", "regularizers", ".", "l2", "(", "L2", ")", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dropout", "(", "rate", "=", "dropout", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "hidden_nodes", ",", "activation", "=", "'relu'", ",", "kernel_regularizer", "=", "keras", ".", "regularizers", ".", "l2", "(", "L2", ")", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dropout", "(", "rate", "=", "dropout", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "hidden_nodes", ",", "activation", "=", "'relu'", ",", "kernel_regularizer", "=", "keras", ".", "regularizers", ".", "l2", "(", "L2", ")", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dropout", "(", "rate", "=", "dropout", ")", ")", "\n", "\n", "if", "output_dimension", "==", "2", ":", "\n", "        ", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "output_dimension", ",", "activation", "=", "'sigmoid'", ")", ")", "\n", "op", "=", "keras", ".", "optimizers", ".", "Adam", "(", "lr", "=", "lr_super", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'binary_crossentropy'", ",", "optimizer", "=", "op", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "else", ":", "\n", "        ", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "output_dimension", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Activation", "(", "'softmax'", ")", ")", "\n", "op", "=", "keras", ".", "optimizers", ".", "Adam", "(", "lr", "=", "lr_super", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "op", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "model", ".", "fit", "(", "x_tr_feature", ",", "y_tr", ",", "epochs", "=", "epoch_super", ",", "batch_size", "=", "batch_super", ",", "callbacks", "=", "[", "tb", "]", ",", "verbose", "=", "0", ",", "validation_data", "=", "(", "x_te_feature", ",", "y_te", ")", ",", "shuffle", "=", "True", ")", "\n", "y_tr_pred", "=", "model", ".", "predict", "(", "x_tr_feature", ",", "batch_size", "=", "batch_super", ")", "\n", "y_te_pred", "=", "model", ".", "predict", "(", "x_te_feature", ",", "batch_size", "=", "batch_super", ")", "\n", "\n", "y_tr", "=", "np", ".", "argmax", "(", "y_tr", ",", "axis", "=", "1", ")", "\n", "y_te", "=", "np", ".", "argmax", "(", "y_te", ",", "axis", "=", "1", ")", "\n", "\n", "y_tr_pred", "=", "np", ".", "argmax", "(", "y_tr_pred", ",", "axis", "=", "1", ")", "\n", "y_te_pred", "=", "np", ".", "argmax", "(", "y_te_pred", ",", "axis", "=", "1", ")", "\n", "\n", "utils", ".", "model_result_store", "(", "y_tr", ",", "y_tr_pred", ",", "os", ".", "path", ".", "join", "(", "result", ",", "str", "(", "\"tr_\"", "+", "identifier", "+", "\".csv\"", ")", ")", ",", "kfold", ")", "\n", "utils", ".", "model_result_store", "(", "y_te", ",", "y_te_pred", ",", "os", ".", "path", ".", "join", "(", "result", ",", "str", "(", "\"tr_\"", "+", "identifier", "+", "\".csv\"", ")", ")", ",", "kfold", ")", "\n", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.model.supervised_model_amigos": [[273, 331], ["os.path.join", "os.path.join", "keras.callbacks.TensorBoard", "keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.fit", "keras.models.Sequential.predict", "keras.models.Sequential.predict", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "utils.model_result_store", "utils.model_result_store", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dropout", "keras.models.Sequential.add", "keras.optimizers.Adam", "keras.models.Sequential.compile", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.optimizers.Adam", "keras.models.Sequential.compile", "os.path.join", "os.path.join", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Activation", "str", "str", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2"], "function", ["home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.model_result_store", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.model_result_store"], ["", "def", "supervised_model_amigos", "(", "x_tr_feature", ",", "\n", "y_tr", ",", "\n", "x_te_feature", ",", "\n", "y_te", ",", "\n", "identifier", ",", "\n", "kfold", ",", "\n", "result", ",", "\n", "summaries", ",", "\n", "current_time", ",", "\n", "epoch_super", "=", "200", ",", "\n", "batch_super", "=", "128", ",", "\n", "lr_super", "=", "0.001", ",", "\n", "hidden_nodes", "=", "512", ",", "\n", "dropout", "=", "0.4", ",", "\n", "L2", "=", "0", ")", ":", "\n", "\n", "\n", "    ", "input_dimension", "=", "x_tr_feature", ".", "shape", "[", "1", "]", "\n", "output_dimension", "=", "y_tr", ".", "shape", "[", "1", "]", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "summaries", ",", "'ER'", ")", "\n", "result", "=", "os", ".", "path", ".", "join", "(", "result", ",", "'ER'", ")", "\n", "tb", "=", "keras", ".", "callbacks", ".", "TensorBoard", "(", "log_dir", "=", "log_dir", ")", "\n", "\n", "model", "=", "keras", ".", "models", ".", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "hidden_nodes", ",", "input_dim", "=", "input_dimension", ",", "activation", "=", "'relu'", ",", "kernel_regularizer", "=", "keras", ".", "regularizers", ".", "l2", "(", "L2", ")", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dropout", "(", "rate", "=", "dropout", ")", ")", "\n", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "hidden_nodes", ",", "activation", "=", "'relu'", ",", "kernel_regularizer", "=", "keras", ".", "regularizers", ".", "l2", "(", "L2", ")", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dropout", "(", "rate", "=", "dropout", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "hidden_nodes", ",", "activation", "=", "'relu'", ",", "kernel_regularizer", "=", "keras", ".", "regularizers", ".", "l2", "(", "L2", ")", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dropout", "(", "rate", "=", "dropout", ")", ")", "\n", "\n", "if", "output_dimension", "==", "2", ":", "\n", "        ", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "output_dimension", ",", "activation", "=", "'sigmoid'", ")", ")", "\n", "op", "=", "keras", ".", "optimizers", ".", "Adam", "(", "lr", "=", "lr_super", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'binary_crossentropy'", ",", "optimizer", "=", "op", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "else", ":", "\n", "        ", "model", ".", "add", "(", "keras", ".", "layers", ".", "Dense", "(", "output_dimension", ")", ")", "\n", "model", ".", "add", "(", "keras", ".", "layers", ".", "Activation", "(", "'softmax'", ")", ")", "\n", "op", "=", "keras", ".", "optimizers", ".", "Adam", "(", "lr", "=", "lr_super", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "op", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "model", ".", "fit", "(", "x_tr_feature", ",", "y_tr", ",", "epochs", "=", "epoch_super", ",", "batch_size", "=", "batch_super", ",", "verbose", "=", "0", ",", "callbacks", "=", "[", "tb", "]", ",", "validation_data", "=", "(", "x_te_feature", ",", "y_te", ")", ",", "shuffle", "=", "True", ")", "\n", "\n", "y_tr_pred", "=", "model", ".", "predict", "(", "x_tr_feature", ",", "batch_size", "=", "batch_super", ")", "\n", "y_te_pred", "=", "model", ".", "predict", "(", "x_te_feature", ",", "batch_size", "=", "batch_super", ")", "\n", "\n", "y_tr", "=", "np", ".", "argmax", "(", "y_tr", ",", "axis", "=", "1", ")", "\n", "y_te", "=", "np", ".", "argmax", "(", "y_te", ",", "axis", "=", "1", ")", "\n", "\n", "y_tr_pred", "=", "np", ".", "argmax", "(", "y_tr_pred", ",", "axis", "=", "1", ")", "\n", "y_te_pred", "=", "np", ".", "argmax", "(", "y_te_pred", ",", "axis", "=", "1", ")", "\n", "\n", "utils", ".", "model_result_store", "(", "y_tr", ",", "y_tr_pred", ",", "os", ".", "path", ".", "join", "(", "result", ",", "str", "(", "\"tr_\"", "+", "identifier", "+", "\".csv\"", ")", ")", ",", "kfold", ")", "\n", "utils", ".", "model_result_store", "(", "y_te", ",", "y_te_pred", ",", "os", ".", "path", ".", "join", "(", "result", ",", "str", "(", "\"tr_\"", "+", "identifier", "+", "\".csv\"", ")", ")", ",", "kfold", ")", "\n", "\n", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.get_label": [[21, 29], ["range", "len", "tensorflow.reshape", "y_label.append"], "function", ["None"], ["def", "get_label", "(", "y", ",", "actual_batch_size", ")", ":", "\n", "    ", "\"\"\" get the label or y true \"\"\"", "\n", "\n", "y_label", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "transform_task", ")", ")", ":", "\n", "        ", "label", "=", "tf", ".", "reshape", "(", "y", "[", ":", ",", "i", "]", ",", "[", "actual_batch_size", ",", "1", "]", ")", "\n", "y_label", ".", "append", "(", "label", ")", "\n", "", "return", "y_label", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.calculate_loss": [[30, 37], ["range", "len", "tensorflow.reduce_mean", "all_loss.append", "tensorflow.compat.v1.losses.sigmoid_cross_entropy"], "function", ["None"], ["", "def", "calculate_loss", "(", "y_label", ",", "logits", ")", ":", "\n", "    ", "\"\"\" calculate loss of each transformtion task \"\"\"", "\n", "all_loss", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "transform_task", ")", ")", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "compat", ".", "v1", ".", "losses", ".", "sigmoid_cross_entropy", "(", "multi_class_labels", "=", "y_label", "[", "i", "]", ",", "logits", "=", "logits", "[", "i", "]", ")", ")", "\n", "all_loss", ".", "append", "(", "loss", ")", "\n", "", "return", "all_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.get_prediction": [[39, 46], ["range", "len", "tensorflow.greater", "y_pred.append", "tensorflow.nn.sigmoid"], "function", ["None"], ["", "def", "get_prediction", "(", "logits", ")", ":", "\n", "    ", "\"\"\" get the prediction of the model\"\"\"", "\n", "y_pred", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "transform_task", ")", ")", ":", "\n", "        ", "pred", "=", "tf", ".", "greater", "(", "tf", ".", "nn", ".", "sigmoid", "(", "logits", "[", "i", "]", ")", ",", "0.5", ")", "\n", "y_pred", ".", "append", "(", "pred", ")", "\n", "", "return", "y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.make_batch": [[47, 86], ["range", "len", "numpy.trim_zeros", "signal_transformation_task.add_noise_with_SNR", "signal_transformation_task.scaled", "signal_transformation_task.negate", "signal_transformation_task.hor_filp", "signal_transformation_task.permute", "signal_transformation_task.time_warp", "numpy.int", "numpy.int", "signal.reshape.reshape", "noised_signal.reshape.reshape", "scaled_signal.reshape.reshape", "negated_signal.reshape.reshape", "flipped_signal.reshape.reshape", "permuted_signal.reshape.reshape", "time_warped_signal.reshape.reshape", "tensorflow.keras.utils.to_categorical", "tensorflow.keras.preprocessing.sequence.pad_sequences", "len", "numpy.random.randint", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.signal_transformation_task.add_noise_with_SNR", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.signal_transformation_task.scaled", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.signal_transformation_task.negate", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.signal_transformation_task.hor_filp", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.signal_transformation_task.permute", "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.signal_transformation_task.time_warp"], ["", "def", "make_batch", "(", "signal_batch", ",", "noise_amount", ",", "scaling_factor", ",", "permutation_pieces", ",", "time_warping_pieces", ",", "time_warping_stretch_factor", ",", "time_warping_squeeze_factor", ")", ":", "\n", "    ", "\"\"\"\n    genrator to do signal transformation and then make a batch of 7, which is a batch contains all transformed signal with original signal\"\"\"", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "signal_batch", ")", ")", ":", "\n", "\n", "        ", "signal", "=", "signal_batch", "[", "i", "]", "\n", "signal", "=", "np", ".", "trim_zeros", "(", "signal", ",", "'b'", ")", "\n", "sampling_freq", "=", "len", "(", "signal", ")", "//", "10", "\n", "noised_signal", "=", "stt", ".", "add_noise_with_SNR", "(", "signal", ",", "noise_amount", "=", "noise_amount", ")", "#round(np.random.uniform(0.005,0.05),2)) # 0.005 - 0.05", "\n", "scaled_signal", "=", "stt", ".", "scaled", "(", "signal", ",", "factor", "=", "scaling_factor", ")", "#round(np.random.uniform(0.2,2),2)) # 0.2 - 2", "\n", "negated_signal", "=", "stt", ".", "negate", "(", "signal", ")", "\n", "flipped_signal", "=", "stt", ".", "hor_filp", "(", "signal", ")", "\n", "permuted_signal", "=", "stt", ".", "permute", "(", "signal", ",", "pieces", "=", "permutation_pieces", ")", "# 2-20", "\n", "time_warped_signal", "=", "stt", ".", "time_warp", "(", "signal", ",", "sampling_freq", ",", "pieces", "=", "time_warping_pieces", ",", "stretch_factor", "=", "time_warping_stretch_factor", ",", "squeeze_factor", "=", "time_warping_squeeze_factor", ")", "\n", "\n", "## making signals of same size.. ", "\n", "tw_start_index", "=", "np", ".", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "(", "len", "(", "time_warped_signal", ")", "-", "len", "(", "signal", ")", ")", ")", ")", "\n", "tw_stop_index", "=", "np", ".", "int", "(", "tw_start_index", "+", "len", "(", "signal", ")", ")", "\n", "time_warped_signal", "=", "time_warped_signal", "[", "tw_start_index", ":", "tw_stop_index", "]", "\n", "\n", "\n", "signal", "=", "signal", ".", "reshape", "(", "len", "(", "signal", ")", ",", "1", ")", "\n", "noised_signal", "=", "noised_signal", ".", "reshape", "(", "len", "(", "noised_signal", ")", ",", "1", ")", "\n", "scaled_signal", "=", "scaled_signal", ".", "reshape", "(", "len", "(", "scaled_signal", ")", ",", "1", ")", "\n", "negated_signal", "=", "negated_signal", ".", "reshape", "(", "len", "(", "negated_signal", ")", ",", "1", ")", "\n", "flipped_signal", "=", "flipped_signal", ".", "reshape", "(", "len", "(", "flipped_signal", ")", ",", "1", ")", "\n", "permuted_signal", "=", "permuted_signal", ".", "reshape", "(", "len", "(", "permuted_signal", ")", ",", "1", ")", "\n", "time_warped_signal", "=", "time_warped_signal", ".", "reshape", "(", "len", "(", "time_warped_signal", ")", ",", "1", ")", "\n", "\n", "\n", "batch", "=", "[", "signal", ",", "noised_signal", ",", "scaled_signal", ",", "negated_signal", ",", "flipped_signal", ",", "permuted_signal", ",", "time_warped_signal", "]", "\n", "labels", "=", "transform_task", "\n", "labels", "=", "tf", ".", "keras", ".", "utils", ".", "to_categorical", "(", "labels", ")", "\n", "\n", "## padding the transformed signal batch ", "\n", "batch", "=", "tf", ".", "keras", ".", "preprocessing", ".", "sequence", ".", "pad_sequences", "(", "batch", ",", "dtype", "=", "'float32'", ",", "padding", "=", "'post'", ")", "\n", "\n", "yield", "batch", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.make_total_batch": [[88, 105], ["range", "utils.make_batch", "numpy.array", "numpy.array", "numpy.mod", "numpy.vstack", "numpy.vstack", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.make_batch"], ["", "", "def", "make_total_batch", "(", "data", ",", "length", ",", "batchsize", ",", "noise_amount", ",", "scaling_factor", ",", "permutation_pieces", ",", "time_warping_pieces", ",", "time_warping_stretch_factor", ",", "time_warping_squeeze_factor", ")", ":", "\n", "    ", "\"\"\" calling make_batch from here, when batch size is more than one, like 64 or 32, it will make actual batch size = batch_size * len(transformed signal)\n    \"\"\"", "\n", "steps", "=", "length", "//", "batchsize", "+", "1", "\n", "for", "counter", "in", "range", "(", "steps", ")", ":", "\n", "\n", "        ", "signal_batch", "=", "data", "[", "np", ".", "mod", "(", "np", ".", "arange", "(", "counter", "*", "batchsize", ",", "(", "counter", "+", "1", ")", "*", "batchsize", ")", ",", "length", ")", "]", "\n", "\n", "gen_op", "=", "make_batch", "(", "signal_batch", ",", "noise_amount", ",", "scaling_factor", ",", "permutation_pieces", ",", "time_warping_pieces", ",", "time_warping_stretch_factor", ",", "time_warping_squeeze_factor", ")", "\n", "total_batch", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_labels", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "batch", ",", "labels", "in", "gen_op", ":", "\n", "\n", "            ", "total_batch", "=", "np", ".", "vstack", "(", "(", "total_batch", ",", "batch", ")", ")", "if", "total_batch", ".", "size", "else", "batch", "\n", "total_labels", "=", "np", ".", "vstack", "(", "(", "total_labels", ",", "labels", ")", ")", "if", "total_labels", ".", "size", "else", "labels", "\n", "\n", "", "yield", "total_batch", ",", "total_labels", ",", "counter", ",", "steps", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.unison_shuffled_copies": [[106, 110], ["numpy.random.permutation", "len", "len", "len"], "function", ["None"], ["", "", "def", "unison_shuffled_copies", "(", "a", ",", "b", ")", ":", "\n", "    ", "assert", "len", "(", "a", ")", "==", "len", "(", "b", ")", "\n", "p", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "a", ")", ")", "\n", "return", "a", "[", "p", "]", ",", "b", "[", "p", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.get_weighted_loss": [[112, 122], ["range", "len"], "function", ["None"], ["", "def", "get_weighted_loss", "(", "loss_coeff", ",", "all_loss", ")", ":", "\n", "    ", "\"\"\" calculate the weighted loss\n    \"\"\"", "\n", "\n", "output_loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "loss_coeff", ")", ")", ":", "\n", "        ", "temp", "=", "loss_coeff", "[", "i", "]", "*", "all_loss", "[", "i", "]", "\n", "output_loss", "=", "output_loss", "+", "temp", "\n", "\n", "", "return", "output_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.fetch_all_loss": [[123, 130], ["range", "len", "numpy.add"], "function", ["None"], ["", "def", "fetch_all_loss", "(", "all_losses", ",", "loss_task", ")", ":", "\n", "    ", "\"\"\"\n    fetch individual signal transformation losses\"\"\"", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "transform_task", ")", ")", ":", "\n", "        ", "loss_task", "[", "i", "]", "=", "np", ".", "add", "(", "loss_task", "[", "i", "]", ",", "all_losses", "[", "i", "]", ")", "\n", "", "return", "loss_task", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.fetch_pred_labels": [[131, 139], ["numpy.all", "numpy.squeeze", "numpy.vstack", "numpy.asarray"], "function", ["None"], ["", "def", "fetch_pred_labels", "(", "y_preds", ",", "pred_task", ")", ":", "\n", "    ", "y_preds", "=", "np", ".", "squeeze", "(", "np", ".", "asarray", "(", "y_preds", ",", "dtype", "=", "np", ".", "int32", ")", ")", ".", "T", "\n", "if", "np", ".", "all", "(", "pred_task", "==", "-", "1", ")", ":", "\n", "        ", "pred_task", "=", "y_preds", "\n", "", "else", ":", "\n", "        ", "pred_task", "=", "np", ".", "vstack", "(", "(", "pred_task", ",", "y_preds", ")", ")", "\n", "\n", "", "return", "pred_task", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.fetch_true_labels": [[140, 147], ["numpy.all", "numpy.vstack"], "function", ["None"], ["", "def", "fetch_true_labels", "(", "labels", ",", "true_task", ")", ":", "\n", "    ", "if", "np", ".", "all", "(", "true_task", "==", "-", "1", ")", ":", "\n", "        ", "true_task", "=", "labels", "\n", "", "else", ":", "\n", "        ", "true_task", "=", "np", ".", "vstack", "(", "(", "true_task", ",", "labels", ")", ")", "\n", "\n", "", "return", "true_task", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.get_results_ssl": [[148, 160], ["numpy.full", "numpy.full", "range", "print", "len", "numpy.round", "numpy.round", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score"], "function", ["None"], ["", "def", "get_results_ssl", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "accuracy", "=", "np", ".", "full", "(", "(", "1", ",", "7", ")", ",", "np", ".", "nan", ")", "\n", "f1_score", "=", "np", ".", "full", "(", "(", "1", ",", "7", ")", ",", "np", ".", "nan", ")", "\n", "\n", "if", "y_true", ".", "shape", "==", "y_pred", ".", "shape", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "transform_task", ")", ")", ":", "\n", "            ", "accuracy", "[", ":", ",", "i", "]", "=", "np", ".", "round", "(", "metrics", ".", "accuracy_score", "(", "y_true", "[", ":", ",", "i", "]", ",", "y_pred", "[", ":", ",", "i", "]", ")", ",", "2", ")", "\n", "f1_score", "[", ":", ",", "i", "]", "=", "np", ".", "round", "(", "metrics", ".", "f1_score", "(", "y_true", "[", ":", ",", "i", "]", ",", "y_pred", "[", ":", ",", "i", "]", ",", "labels", "=", "[", "0", ",", "1", "]", ")", ",", "2", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "\"error in self supervised result calculation\"", ")", "\n", "\n", "", "return", "accuracy", ",", "f1_score", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.write_result": [[161, 165], ["result_dict.update"], "function", ["None"], ["", "def", "write_result", "(", "accuracy", ",", "f1_score", ",", "epoch_number", ",", "result_dict", ")", ":", "\n", "    ", "result", "=", "[", "accuracy", ",", "f1_score", "]", "\n", "result_dict", ".", "update", "(", "{", "epoch_number", ":", "result", "}", ")", "\n", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.write_summary": [[167, 200], ["range", "len", "tensorflow.Summary", "summary_writer.add_summary", "summary_writer.flush", "tensorflow.Summary", "summary_writer.add_summary", "summary_writer.flush", "tensorflow.Summary", "summary_writer.add_summary", "summary_writer.flush", "tensorflow.Summary", "summary_writer.add_summary", "summary_writer.flush", "tensorflow.Summary", "summary_writer.add_summary", "summary_writer.flush", "tensorflow.Summary", "summary_writer.add_summary", "summary_writer.flush", "tensorflow.Summary.Value", "tensorflow.Summary.Value", "tensorflow.Summary.Value", "tensorflow.Summary.Value", "tensorflow.Summary.Value", "tensorflow.Summary.Value"], "function", ["None"], ["", "def", "write_summary", "(", "loss", ",", "total_loss", ",", "f1_score", ",", "epoch_counter", ",", "isTraining", ",", "summary_writer", ")", ":", "\n", "\n", "    ", "task_name", "=", "[", "'original'", ",", "'noised'", ",", "'scaled'", ",", "'negated'", ",", "'flipped'", ",", "'permuted'", ",", "'timewarp'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "task_name", ")", ")", ":", "\n", "        ", "t", "=", "task_name", "[", "i", "]", "\n", "if", "isTraining", ":", "\n", "            ", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"train loss/\"", "+", "t", ",", "simple_value", "=", "loss", "[", "i", "]", "[", "0", "]", ")", "]", ")", "\n", "summary_writer", ".", "add_summary", "(", "summary", ",", "epoch_counter", ")", "\n", "summary_writer", ".", "flush", "(", ")", "\n", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"train F1 score/\"", "+", "t", ",", "simple_value", "=", "f1_score", "[", "0", "]", "[", "i", "]", ")", "]", ")", "\n", "summary_writer", ".", "add_summary", "(", "summary", ",", "epoch_counter", ")", "\n", "summary_writer", ".", "flush", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"test loss/\"", "+", "t", ",", "simple_value", "=", "loss", "[", "i", "]", "[", "0", "]", ")", "]", ")", "\n", "summary_writer", ".", "add_summary", "(", "summary", ",", "epoch_counter", ")", "\n", "summary_writer", ".", "flush", "(", ")", "\n", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"test F1 score/\"", "+", "t", ",", "simple_value", "=", "f1_score", "[", "0", "]", "[", "i", "]", ")", "]", ")", "\n", "summary_writer", ".", "add_summary", "(", "summary", ",", "epoch_counter", ")", "\n", "summary_writer", ".", "flush", "(", ")", "\n", "\n", "", "", "if", "isTraining", ":", "\n", "        ", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"train loss/total_loss\"", ",", "simple_value", "=", "total_loss", ")", "]", ")", "\n", "summary_writer", ".", "add_summary", "(", "summary", ",", "epoch_counter", ")", "\n", "summary_writer", ".", "flush", "(", ")", "\n", "", "else", ":", "\n", "        ", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "\"test loss/total_loss\"", ",", "simple_value", "=", "total_loss", ")", "]", ")", "\n", "summary_writer", ".", "add_summary", "(", "summary", ",", "epoch_counter", ")", "\n", "summary_writer", ".", "flush", "(", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.write_result_csv": [[202, 210], ["open", "csv.DictWriter", "csv.DictWriter.writerow"], "function", ["None"], ["", "def", "write_result_csv", "(", "kfold", ",", "epoch_number", ",", "result_store", ",", "f1_score", ")", ":", "\n", "    ", "f1_score", "=", "f1_score", "[", "0", "]", "\n", "with", "open", "(", "result_store", ",", "'a'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "        ", "fieldnames", "=", "[", "'fold'", ",", "'epoch'", ",", "'org'", ",", "'noised'", ",", "'scaled'", ",", "'neg'", ",", "'flip'", ",", "'perm'", ",", "'time_warp'", "]", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writerow", "(", "{", "'fold'", ":", "kfold", ",", "'epoch'", ":", "epoch_number", ",", "'org'", ":", "f1_score", "[", "0", "]", ",", "'noised'", ":", "f1_score", "[", "1", "]", ",", "'scaled'", ":", "f1_score", "[", "2", "]", ",", "'neg'", ":", "f1_score", "[", "3", "]", ",", "'flip'", ":", "f1_score", "[", "4", "]", ",", "'perm'", ":", "f1_score", "[", "5", "]", ",", "'time_warp'", ":", "f1_score", "[", "6", "]", "}", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.model_result_store": [[211, 225], ["numpy.round", "mlxtend.evaluate.confusion_matrix", "numpy.round", "numpy.round", "numpy.round", "sklearn.metrics.accuracy_score", "numpy.mean", "numpy.mean", "open", "csv.DictWriter", "csv.DictWriter.writerow", "numpy.diag", "numpy.sum", "numpy.diag", "numpy.sum"], "function", ["None"], ["", "def", "model_result_store", "(", "y", ",", "y_pred", ",", "result_store", ",", "kfold", ")", ":", "\n", "\n", "    ", "accuracy", "=", "np", ".", "round", "(", "metrics", ".", "accuracy_score", "(", "y", ",", "y_pred", ")", ",", "4", ")", "\n", "conf_mat", "=", "confusion_matrix", "(", "y_target", "=", "y", ",", "y_predicted", "=", "y_pred", ",", "binary", "=", "False", ")", "\n", "precision", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "np", ".", "diag", "(", "conf_mat", ")", "/", "np", ".", "sum", "(", "conf_mat", ",", "axis", "=", "0", ")", ")", ",", "4", ")", "\n", "recall", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "np", ".", "diag", "(", "conf_mat", ")", "/", "np", ".", "sum", "(", "conf_mat", ",", "axis", "=", "1", ")", ")", ",", "4", ")", "\n", "f1_score", "=", "np", ".", "round", "(", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", ",", "4", ")", "\n", "\n", "with", "open", "(", "result_store", ",", "'a'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "        ", "fieldnames", "=", "[", "'fold'", ",", "'accuracy'", ",", "'precision'", ",", "'recall'", ",", "'f1_score'", "]", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writerow", "(", "{", "'fold'", ":", "kfold", ",", "'accuracy'", ":", "accuracy", ",", "'precision'", ":", "precision", ",", "'recall'", ":", "recall", ",", "'f1_score'", ":", "f1_score", "}", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.current_time": [[227, 231], ["time.strftime", "time.gmtime"], "function", ["None"], ["", "def", "current_time", "(", ")", ":", "\n", "    ", "\"\"\" taking the current system time\"\"\"", "\n", "cur_time", "=", "time", ".", "strftime", "(", "\"%Y_%m_%d_%H_%M\"", ",", "time", ".", "gmtime", "(", ")", ")", "\n", "return", "cur_time", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.one_hot_encoding": [[232, 241], ["len", "numpy.min", "tensorflow.keras.utils.to_categorical", "tensorflow.keras.utils.to_categorical", "numpy.unique"], "function", ["None"], ["", "def", "one_hot_encoding", "(", "arr", ",", "tr_index", ",", "te_index", ")", ":", "\n", "\n", "    ", "num_of_class", "=", "len", "(", "np", ".", "unique", "(", "arr", ")", ")", "\n", "min_val", "=", "np", ".", "min", "(", "arr", ")", "\n", "arr", "=", "arr", "-", "min_val", "\n", "tr_encoded_array", "=", "tf", ".", "keras", ".", "utils", ".", "to_categorical", "(", "arr", "[", "tr_index", "]", ",", "num_classes", "=", "num_of_class", ")", "\n", "te_encoded_array", "=", "tf", ".", "keras", ".", "utils", ".", "to_categorical", "(", "arr", "[", "te_index", "]", ",", "num_classes", "=", "num_of_class", ")", "\n", "\n", "return", "tr_encoded_array", ",", "te_encoded_array", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.makedirs": [[242, 248], ["os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.makedirs"], ["", "def", "makedirs", "(", "path", ")", ":", "\n", "    ", "\"\"\" \n    create directory on the \"path name\" \"\"\"", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.get_train_test_index": [[249, 257], ["kf.split", "train_index.append", "test_index.append"], "function", ["None"], ["", "", "def", "get_train_test_index", "(", "data", ",", "kf", ")", ":", "\n", "    ", "train_index", "=", "[", "]", "\n", "test_index", "=", "[", "]", "\n", "for", "train_i", ",", "test_i", "in", "kf", ".", "split", "(", "data", ")", ":", "\n", "        ", "train_index", ".", "append", "(", "train_i", ")", "\n", "test_index", ".", "append", "(", "test_i", ")", "\n", "\n", "", "return", "train_index", ",", "test_index", "\n", "\n"]], "home.repos.pwc.inspect_result.pritamqu_SSL-ECG.implementation.utils.extract_feature": [[258, 271], ["numpy.zeros", "range", "numpy.shape", "signal_batch.reshape.reshape", "sess.run", "numpy.vstack", "numpy.mod", "numpy.shape", "numpy.shape", "numpy.arange"], "function", ["None"], ["", "def", "extract_feature", "(", "x_original", ",", "featureset_size", ",", "batch_super", ",", "input_tensor", ",", "isTrain", ",", "drop_out", ",", "extract_layer", ",", "sess", ")", ":", "\n", "    ", "feature_set", "=", "np", ".", "zeros", "(", "(", "1", ",", "featureset_size", ")", ",", "dtype", "=", "int", ")", "\n", "length", "=", "np", ".", "shape", "(", "x_original", ")", "[", "0", "]", "\n", "steps", "=", "length", "//", "batch_super", "+", "1", "\n", "for", "j", "in", "range", "(", "steps", ")", ":", "\n", "        ", "signal_batch", "=", "x_original", "[", "np", ".", "mod", "(", "np", ".", "arange", "(", "j", "*", "batch_super", ",", "(", "j", "+", "1", ")", "*", "batch_super", ")", ",", "length", ")", "]", "\n", "signal_batch", "=", "signal_batch", ".", "reshape", "(", "np", ".", "shape", "(", "signal_batch", ")", "[", "0", "]", ",", "np", ".", "shape", "(", "signal_batch", ")", "[", "1", "]", ",", "1", ")", "\n", "fetched", "=", "sess", ".", "run", "(", "extract_layer", ",", "{", "input_tensor", ":", "signal_batch", ",", "isTrain", ":", "False", ",", "drop_out", ":", "0.0", "}", ")", "\n", "feature_set", "=", "np", ".", "vstack", "(", "(", "feature_set", ",", "fetched", ")", ")", "\n", "\n", "", "x_feature", "=", "feature_set", "[", "1", ":", "length", "+", "1", "]", "## resizing to the original signal", "\n", "\n", "return", "x_feature", "\n", "", ""]]}