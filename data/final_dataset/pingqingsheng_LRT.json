{"home.repos.pwc.inspect_result.pingqingsheng_LRT.None.LRTcorrect.check_folder": [[29, 33], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "check_folder", "(", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "return", "save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.None.LRTcorrect._init_fn": [[35, 37], ["numpy.random.seed"], "function", ["None"], ["", "def", "_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "77", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.None.LRTcorrect.updateA": [[39, 59], ["torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "torch.ones", "torch.ones", "torch.ones", "A.matmul().t().matmul", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "len", "torch.tensor().reshape.argmax", "len", "A.matmul().t", "A.matmul"], "function", ["None"], ["", "def", "updateA", "(", "s", ",", "h", ",", "rho", "=", "0.9", ")", ":", "\n", "    ", "'''\n    Used to calculate retroactive loss\n\n    Input\n    s : output after softlayer of NN for a specific former epoch\n    h : logrithm of output after softlayer of NN at current epoch\n\n    Output\n    result : retroactive loss L_retro\n    A : correction matrix\n    '''", "\n", "eps", "=", "1e-4", "\n", "h", "=", "torch", ".", "tensor", "(", "h", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "s", "=", "torch", ".", "tensor", "(", "s", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "A", "=", "torch", ".", "ones", "(", "len", "(", "s", ")", ",", "len", "(", "s", ")", ")", "*", "eps", "\n", "A", "[", "s", ".", "argmax", "(", "0", ")", "]", "=", "rho", "-", "eps", "/", "(", "len", "(", "s", ")", "-", "1", ")", "\n", "result", "=", "-", "(", "(", "A", ".", "matmul", "(", "s", ")", ")", ".", "t", "(", ")", ")", ".", "matmul", "(", "h", ")", "\n", "\n", "return", "result", ",", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.None.LRTcorrect.lrt_flip_scheme": [[60, 86], ["range", "clean_softlabels.scatter_", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "pred_softlabels_bar[].argmax", "torch.ones", "torch.ones", "torch.ones", "pred_softlabels_bar[].argmax", "pred_softlabels_bar[].max", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.array"], "function", ["None"], ["", "def", "lrt_flip_scheme", "(", "pred_softlabels_bar", ",", "y_tilde", ",", "delta", ")", ":", "\n", "    ", "'''\n    The LRT correction scheme.\n    pred_softlabels_bar is the prediction of the network which is compared with noisy label y_tilde.\n    If the LR is smaller than the given threshhold delta, we reject LRT and flip y_tilde to prediction of pred_softlabels_bar\n\n    Input\n    pred_softlabels_bar: rolling average of output after softlayers for past 10 epochs. Could use other rolling windows.\n    y_tilde: noisy labels at current epoch\n    delta: LRT threshholding\n\n    Output\n    y_tilde : new noisy labels after cleanning\n    clean_softlabels : softversion of y_tilde\n    '''", "\n", "ntrain", "=", "pred_softlabels_bar", ".", "shape", "[", "0", "]", "\n", "num_class", "=", "pred_softlabels_bar", ".", "shape", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "ntrain", ")", ":", "\n", "        ", "cond_1", "=", "(", "not", "pred_softlabels_bar", "[", "i", "]", ".", "argmax", "(", ")", "==", "y_tilde", "[", "i", "]", ")", "\n", "cond_2", "=", "(", "pred_softlabels_bar", "[", "i", "]", ".", "max", "(", ")", "/", "pred_softlabels_bar", "[", "i", "]", "[", "y_tilde", "[", "i", "]", "]", ">", "delta", ")", "\n", "if", "cond_1", "and", "cond_2", ":", "\n", "            ", "y_tilde", "[", "i", "]", "=", "pred_softlabels_bar", "[", "i", "]", ".", "argmax", "(", ")", "\n", "", "", "eps", "=", "1e-2", "\n", "clean_softlabels", "=", "torch", ".", "ones", "(", "ntrain", ",", "num_class", ")", "*", "eps", "/", "(", "num_class", "-", "1", ")", "\n", "clean_softlabels", ".", "scatter_", "(", "1", ",", "torch", ".", "tensor", "(", "np", ".", "array", "(", "y_tilde", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "1", "-", "eps", ")", "\n", "return", "y_tilde", ",", "clean_softlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.None.LRTcorrect.learning_rate": [[88, 100], ["math.pow"], "function", ["None"], ["", "def", "learning_rate", "(", "init", ",", "epoch", ")", ":", "\n", "    ", "optim_factor", "=", "0", "\n", "if", "(", "epoch", ">", "200", ")", ":", "\n", "        ", "optim_factor", "=", "4", "\n", "", "elif", "(", "epoch", ">", "160", ")", ":", "\n", "        ", "optim_factor", "=", "3", "\n", "", "elif", "(", "epoch", ">", "120", ")", ":", "\n", "        ", "optim_factor", "=", "2", "\n", "", "elif", "(", "epoch", ">", "60", ")", ":", "\n", "        ", "optim_factor", "=", "1", "\n", "\n", "", "return", "init", "*", "math", ".", "pow", "(", "0.5", ",", "optim_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.None.LRTcorrect.main": [[101, 620], ["int", "numpy.random.seed", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "print", "print", "print", "print", "len", "data.pc_prepare.ModelNet40.get_data_labels", "numpy.array", "LRTcorrect.check_folder", "os.path.join", "open", "open.write", "open.flush", "torch.device", "torch.device", "torch.device", "print", "network.pointnet.PointNetCls.to", "network.pointnet.PointNetCls.to", "numpy.zeros", "torch.NLLLoss", "numpy.zeros", "copy.copy", "termcolor.cprint", "range", "print", "termcolor.cprint", "network.pointnet.PointNetCls.eval", "enumerate", "print", "numpy.random.choice", "torchvision.Compose", "torchvision.Compose", "data.cifar_prepare.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data.cifar_prepare.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data.cifar_prepare.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "len", "len", "print", "print", "open.write", "open.write", "network.net.CNN9LAYER", "network.net.CNN9LAYER", "network.pointnet.PointNetCls.apply", "len", "print", "len", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.ones().float().to", "torch.ones().float().to", "torch.ones().float().to", "Utils.RAdam.radam.RAdam", "network.pointnet.PointNetCls.train", "enumerate", "print", "torch.NLLLoss", "termcolor.cprint", "range", "network.pointnet.PointNetCls.", "outputs.argmax().eq().sum().item", "range", "torchvision.Compose", "torchvision.Compose", "data.cifar_prepare.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data.cifar_prepare.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data.cifar_prepare.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Utils.noise.noisify_with_P", "data.pc_prepare.ModelNet40.update_corrupted_label", "noise_softlabel.scatter_", "data.pc_prepare.ModelNet40.update_corrupted_softlabel", "print", "data.pc_prepare.ModelNet40.update_corrupted_label", "noise_softlabel.scatter_", "data.pc_prepare.ModelNet40.update_corrupted_softlabel", "print", "len", "str", "str", "network.resnet.resnet18", "network.resnet.resnet18", "range", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "network.pointnet.PointNetCls.parameters", "tqdm.tqdm", "network.pointnet.PointNetCls.", "torch.log_softmax().float", "torch.log_softmax().float", "torch.log_softmax().float", "torch.softmax", "torch.softmax", "torch.softmax", "optim.SGD.zero_grad", "criterion_2.backward", "optim.SGD.step", "criterion_2.item", "images.size", "outputs.max", "predicted.eq().sum().item", "[].to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "predicted.eq().sum().item", "predicted.eq().sum().item", "termcolor.cprint", "data.pc_prepare.ModelNet40.get_data_softlabel", "print", "print", "data.pc_prepare.ModelNet40.get_data_labels", "np.zeros.mean", "LRTcorrect.lrt_flip_scheme", "data.pc_prepare.ModelNet40.update_corrupted_softlabel", "data.pc_prepare.ModelNet40.update_corrupted_label", "network.pointnet.PointNetCls.eval", "train_acc_record.append", "val_acc_record.append", "clean_train_acc_record.append", "noise_train_acc_record.append", "recovery_record.append", "termcolor.cprint", "termcolor.cprint", "termcolor.cprint", "open.write", "open.write", "open.write", "open.write", "open.flush", "torch.SGD", "network.pointnet.PointNetCls.train", "enumerate", "print", "images.to", "labels.to", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "data.mnist_prepare.MNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data.mnist_prepare.MNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data.mnist_prepare.MNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.tensor", "torch.tensor", "torch.tensor", "Utils.noise.noisify_cifar10_asymmetric", "torch.tensor", "torch.tensor", "torch.tensor", "datetime.datetime.now", "len", "network.resnet.resnet34", "network.resnet.resnet34", "str", "torch.ones().float", "torch.ones().float", "torch.ones().float", "max", "LRTcorrect.learning_rate", "images.size", "images.to", "labels.to", "softlabels.to", "torch.log_softmax().float.detach().cpu", "A[].to", "nn.NLLLoss.", "torch.softmax.detach().cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "clean_softlabels.argmax", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "numpy.sum", "network.pointnet.PointNetCls.parameters", "tqdm.tqdm", "network.pointnet.PointNetCls.", "torch.log_softmax().float", "torch.log_softmax().float", "torch.log_softmax().float", "nn.NLLLoss.", "optim.SGD.zero_grad", "criterion_2.backward", "optim.SGD.step", "criterion_2.item", "images.size", "outputs.max", "predicted.eq().sum().item", "network.pointnet.PointNetCls.eval", "termcolor.cprint", "termcolor.cprint", "termcolor.cprint", "outputs.argmax().eq().sum", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "data.pc_prepare.ModelNet40", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data.pc_prepare.ModelNet40", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data.pc_prepare.ModelNet40", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.ones", "torch.ones", "torch.ones", "noise_y_train.reshape", "Utils.noise.noisify_cifar100_asymmetric", "torch.ones", "torch.ones", "torch.ones", "noise_y_train.reshape", "network.preact_resnet.preact_resnet18", "network.preact_resnet.preact_resnet18", "int", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "nn.NLLLoss.", "predicted.eq().sum", "torch.tensor", "torch.tensor", "torch.tensor", "predicted.eq().sum", "predicted.eq().sum", "range", "network.pointnet.PointNetCls.", "images.size", "outputs.max", "predicted.eq().sum().item", "print", "open.write", "open.write", "open.write", "LRTcorrect.learning_rate", "images.size", "images.to", "labels.to", "softlabels.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "images.size", "outputs.max", "predicted.eq().sum().item", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "Utils.noise.noisify_mnist_asymmetric", "str", "network.preact_resnet.preact_resnet34", "network.preact_resnet.preact_resnet34", "torch.ones", "torch.ones", "torch.ones", "torch.log_softmax().float.detach", "sum", "len", "torch.softmax.detach().cpu", "torch.tensor", "torch.tensor", "torch.tensor", "LRTcorrect.updateA", "torch.tensor", "torch.tensor", "torch.tensor", "images.to", "labels.to", "data.pc_prepare.ModelNet40.get_data_labels", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "predicted.eq().sum", "network.pointnet.PointNetCls.", "print", "open.write", "open.write", "open.write", "outputs.argmax().eq", "Utils.noise.noisify_modelnet40_asymmetric", "network.preact_resnet.preact_resnet101", "network.preact_resnet.preact_resnet101", "predicted.eq", "predicted.eq", "predicted.eq", "predicted.eq().sum", "numpy.sum", "images.to", "labels.to", "predicted.eq().sum", "numpy.sum", "network.pointnet.PointNetCls", "network.pointnet.PointNetCls", "ValueError", "torch.softmax.detach", "predicted.eq", "outputs.argmax", "str", "A_batch[].matmul().t().matmul", "range", "predicted.eq", "data.pc_prepare.ModelNet40.get_data_labels", "predicted.eq", "data.pc_prepare.ModelNet40.get_data_labels", "len", "A_batch[].matmul().t", "str", "A_batch[].matmul", "softlabels[].reshape().float", "softlabels[].reshape"], "function", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.get_data_labels", "home.repos.pwc.inspect_result.pingqingsheng_LRT.None.LRTcorrect.check_folder", "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.noisify_with_P", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.update_corrupted_label", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.update_corrupted_softlabel", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.update_corrupted_label", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.update_corrupted_softlabel", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.resnet18", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.resnet18", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.get_data_softlabel", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.get_data_labels", "home.repos.pwc.inspect_result.pingqingsheng_LRT.None.LRTcorrect.lrt_flip_scheme", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.update_corrupted_softlabel", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.update_corrupted_label", "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.noisify_cifar10_asymmetric", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.resnet34", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.resnet34", "home.repos.pwc.inspect_result.pingqingsheng_LRT.None.LRTcorrect.learning_rate", "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.noisify_cifar100_asymmetric", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.preact_resnet18", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.preact_resnet18", "home.repos.pwc.inspect_result.pingqingsheng_LRT.None.LRTcorrect.learning_rate", "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.noisify_mnist_asymmetric", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.preact_resnet34", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.preact_resnet34", "home.repos.pwc.inspect_result.pingqingsheng_LRT.None.LRTcorrect.updateA", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.get_data_labels", "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.noisify_modelnet40_asymmetric", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.preact_resnet101", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.preact_resnet101", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.get_data_labels", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.get_data_labels"], ["", "def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "random_seed", "=", "int", "(", "np", ".", "random", ".", "choice", "(", "range", "(", "1000", ")", ",", "1", ")", ")", "\n", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "random", ".", "seed", "(", "random_seed", ")", "\n", "torch", ".", "manual_seed", "(", "random_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "random_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "random_seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "arg_which_net", "=", "args", ".", "network", "\n", "arg_dataset", "=", "args", ".", "dataset", "\n", "arg_epoch_start", "=", "args", ".", "epoch_start", "\n", "lr", "=", "args", ".", "lr", "\n", "arg_gpu", "=", "args", ".", "gpu", "\n", "arg_num_gpu", "=", "args", ".", "n_gpus", "\n", "arg_every_n_epoch", "=", "args", ".", "every_n_epoch", "# interval to perform the correction", "\n", "arg_epoch_update", "=", "args", ".", "epoch_update", "# the epoch to start correction (warm-up period)", "\n", "arg_epoch_interval", "=", "args", ".", "epoch_interval", "# interval between two update of A", "\n", "noise_level", "=", "args", ".", "noise_level", "\n", "noise_type", "=", "args", ".", "noise_type", "# \"uniform\", \"asymmetric\", \"none\"", "\n", "train_val_ratio", "=", "0.9", "\n", "which_net", "=", "arg_which_net", "# \"cnn\" \"resnet18\" \"resnet34\" \"preact_resnet18\" \"preact_resnet34\" \"preact_resnet101\" \"pc\"", "\n", "num_epoch", "=", "args", ".", "n_epochs", "# Total training epochs", "\n", "\n", "\n", "print", "(", "'Using {}\\nTest on {}\\nRandom Seed {}\\nevery n epoch {}\\nStart at epoch {}'", ".", "\n", "format", "(", "arg_which_net", ",", "arg_dataset", ",", "random_seed", ",", "arg_every_n_epoch", ",", "arg_epoch_start", ")", ")", "\n", "\n", "# -- training parameters", "\n", "if", "arg_dataset", "==", "'mnist'", ":", "\n", "        ", "milestone", "=", "[", "30", ",", "60", "]", "\n", "batch_size", "=", "64", "\n", "in_channels", "=", "1", "\n", "", "elif", "arg_dataset", "==", "'cifar10'", ":", "\n", "        ", "milestone", "=", "[", "60", ",", "180", "]", "\n", "batch_size", "=", "128", "\n", "in_channels", "=", "1", "\n", "", "elif", "arg_dataset", "==", "'cifar100'", ":", "\n", "        ", "milestone", "=", "[", "60", ",", "180", "]", "\n", "batch_size", "=", "128", "\n", "in_channels", "=", "1", "\n", "", "elif", "arg_dataset", "==", "'pc'", ":", "\n", "        ", "milestone", "=", "[", "30", ",", "60", "]", "\n", "batch_size", "=", "128", "\n", "\n", "", "start_epoch", "=", "0", "\n", "num_workers", "=", "1", "\n", "\n", "#gamma = 0.5", "\n", "\n", "# -- specify dataset", "\n", "# data augmentation", "\n", "if", "arg_dataset", "==", "'cifar10'", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "", "elif", "arg_dataset", "==", "'cifar100'", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.507", ",", "0.487", ",", "0.441", ")", ",", "(", "0.507", ",", "0.487", ",", "0.441", ")", ")", ",", "\n", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.507", ",", "0.487", ",", "0.441", ")", ",", "(", "0.507", ",", "0.487", ",", "0.441", ")", ")", ",", "\n", "]", ")", "\n", "", "elif", "arg_dataset", "==", "'mnist'", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", ",", "\n", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "transform_train", "=", "None", "\n", "transform_test", "=", "None", "\n", "\n", "", "if", "arg_dataset", "==", "'cifar10'", ":", "\n", "        ", "trainset", "=", "CIFAR10", "(", "root", "=", "'./data'", ",", "split", "=", "'train'", ",", "train_ratio", "=", "train_val_ratio", ",", "trust_ratio", "=", "0", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "worker_init_fn", "=", "_init_fn", ")", "\n", "valset", "=", "CIFAR10", "(", "root", "=", "'./data'", ",", "split", "=", "'val'", ",", "train_ratio", "=", "train_val_ratio", ",", "trust_ratio", "=", "0", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "valloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "testset", "=", "CIFAR10", "(", "root", "=", "'./data'", ",", "split", "=", "'test'", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "images_size", "=", "[", "3", ",", "32", ",", "32", "]", "\n", "num_class", "=", "10", "\n", "in_channel", "=", "3", "\n", "\n", "", "elif", "arg_dataset", "==", "'cifar100'", ":", "\n", "        ", "trainset", "=", "CIFAR100", "(", "root", "=", "'./data'", ",", "split", "=", "'train'", ",", "train_ratio", "=", "train_val_ratio", ",", "trust_ratio", "=", "0", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "worker_init_fn", "=", "_init_fn", ")", "\n", "valset", "=", "CIFAR100", "(", "root", "=", "'./data'", ",", "split", "=", "'val'", ",", "train_ratio", "=", "train_val_ratio", ",", "trust_ratio", "=", "0", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "valloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "testset", "=", "CIFAR100", "(", "root", "=", "'./data'", ",", "split", "=", "'test'", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "num_class", "=", "100", "\n", "in_channel", "=", "3", "\n", "\n", "", "elif", "arg_dataset", "==", "'mnist'", ":", "\n", "        ", "trainset", "=", "MNIST", "(", "root", "=", "'./data'", ",", "split", "=", "'train'", ",", "train_ratio", "=", "train_val_ratio", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "worker_init_fn", "=", "_init_fn", ")", "\n", "valset", "=", "MNIST", "(", "root", "=", "'./data'", ",", "split", "=", "'val'", ",", "train_ratio", "=", "train_val_ratio", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "valloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "testset", "=", "MNIST", "(", "root", "=", "'./data'", ",", "split", "=", "'test'", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "num_class", "=", "10", "\n", "in_channel", "=", "1", "\n", "\n", "", "elif", "arg_dataset", "==", "'pc'", ":", "\n", "        ", "trainset", "=", "ModelNet40", "(", "split", "=", "'train'", ",", "train_ratio", "=", "train_val_ratio", ",", "num_ptrs", "=", "1024", ",", "random_jitter", "=", "True", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "worker_init_fn", "=", "_init_fn", ",", "drop_last", "=", "True", ")", "\n", "valset", "=", "ModelNet40", "(", "split", "=", "'val'", ",", "train_ratio", "=", "train_val_ratio", ",", "num_ptrs", "=", "1024", ")", "\n", "valloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "testset", "=", "ModelNet40", "(", "split", "=", "'test'", ",", "num_ptrs", "=", "1024", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "num_class", "=", "40", "\n", "\n", "", "print", "(", "'train data size:'", ",", "len", "(", "trainset", ")", ")", "\n", "print", "(", "'validation data size:'", ",", "len", "(", "valset", ")", ")", "\n", "print", "(", "'test data size:'", ",", "len", "(", "testset", ")", ")", "\n", "\n", "eps", "=", "1e-6", "# This is the epsilon used to soft the label (not the epsilon in the paper)", "\n", "ntrain", "=", "len", "(", "trainset", ")", "\n", "\n", "# -- generate noise --", "\n", "# y_train is ground truth labels, we should not have any access to  this after the noisy labels are generated", "\n", "# algorithm after y_tilde is generated has nothing to do with y_train", "\n", "y_train", "=", "trainset", ".", "get_data_labels", "(", ")", "\n", "y_train", "=", "np", ".", "array", "(", "y_train", ")", "\n", "\n", "noise_y_train", "=", "None", "\n", "keep_indices", "=", "None", "\n", "p", "=", "None", "\n", "\n", "if", "(", "noise_type", "==", "'none'", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "if", "noise_type", "==", "\"uniform\"", ":", "\n", "            ", "noise_y_train", ",", "p", ",", "keep_indices", "=", "noisify_with_P", "(", "y_train", ",", "nb_classes", "=", "num_class", ",", "noise", "=", "noise_level", ",", "random_state", "=", "random_seed", ")", "\n", "trainset", ".", "update_corrupted_label", "(", "noise_y_train", ")", "\n", "noise_softlabel", "=", "torch", ".", "ones", "(", "ntrain", ",", "num_class", ")", "*", "eps", "/", "(", "num_class", "-", "1", ")", "\n", "noise_softlabel", ".", "scatter_", "(", "1", ",", "torch", ".", "tensor", "(", "noise_y_train", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ",", "1", "-", "eps", ")", "\n", "trainset", ".", "update_corrupted_softlabel", "(", "noise_softlabel", ")", "\n", "\n", "print", "(", "\"apply uniform noise\"", ")", "\n", "", "else", ":", "\n", "            ", "if", "arg_dataset", "==", "'cifar10'", ":", "\n", "                ", "noise_y_train", ",", "p", ",", "keep_indices", "=", "noisify_cifar10_asymmetric", "(", "y_train", ",", "noise", "=", "noise_level", ",", "random_state", "=", "random_seed", ")", "\n", "", "elif", "arg_dataset", "==", "'cifar100'", ":", "\n", "                ", "noise_y_train", ",", "p", ",", "keep_indices", "=", "noisify_cifar100_asymmetric", "(", "y_train", ",", "noise", "=", "noise_level", ",", "random_state", "=", "random_seed", ")", "\n", "", "elif", "arg_dataset", "==", "'mnist'", ":", "\n", "                ", "noise_y_train", ",", "p", ",", "keep_indices", "=", "noisify_mnist_asymmetric", "(", "y_train", ",", "noise", "=", "noise_level", ",", "random_state", "=", "random_seed", ")", "\n", "", "elif", "arg_dataset", "==", "'pc'", ":", "\n", "                ", "noise_y_train", ",", "p", ",", "keep_indices", "=", "noisify_modelnet40_asymmetric", "(", "y_train", ",", "noise", "=", "noise_level", ",", "\n", "random_state", "=", "random_seed", ")", "\n", "", "trainset", ".", "update_corrupted_label", "(", "noise_y_train", ")", "\n", "noise_softlabel", "=", "torch", ".", "ones", "(", "ntrain", ",", "num_class", ")", "*", "eps", "/", "(", "num_class", "-", "1", ")", "\n", "noise_softlabel", ".", "scatter_", "(", "1", ",", "torch", ".", "tensor", "(", "noise_y_train", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ",", "1", "-", "eps", ")", "\n", "trainset", ".", "update_corrupted_softlabel", "(", "noise_softlabel", ")", "\n", "\n", "print", "(", "\"apply asymmetric noise\"", ")", "\n", "", "print", "(", "\"clean data num:\"", ",", "len", "(", "keep_indices", ")", ")", "\n", "print", "(", "\"probability transition matrix:\\n{}\"", ".", "format", "(", "p", ")", ")", "\n", "\n", "# -- create log file", "\n", "", "file_name", "=", "'['", "+", "arg_dataset", "+", "'_'", "+", "which_net", "+", "']'", "+", "'type:'", "+", "noise_type", "+", "'_'", "+", "'noise:'", "+", "str", "(", "noise_level", ")", "+", "'_'", "+", "'_'", "+", "'start:'", "+", "str", "(", "arg_epoch_start", ")", "+", "'_'", "+", "'every:'", "+", "str", "(", "arg_every_n_epoch", ")", "+", "'_'", "+", "'time:'", "+", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "+", "'.txt'", "\n", "log_dir", "=", "check_folder", "(", "'new_logs/logs_txt_'", "+", "str", "(", "random_seed", ")", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "file_name", ")", "\n", "saver", "=", "open", "(", "file_name", ",", "\"w\"", ")", "\n", "\n", "saver", ".", "write", "(", "'noise type: {}\\nnoise level: {}\\nwhen_to_apply_epoch: {}\\n'", ".", "format", "(", "\n", "noise_type", ",", "noise_level", ",", "arg_epoch_start", ")", ")", "\n", "\n", "if", "noise_type", "!=", "'none'", ":", "\n", "        ", "saver", ".", "write", "(", "'total clean data num: {}\\n'", ".", "format", "(", "len", "(", "keep_indices", ")", ")", ")", "\n", "saver", ".", "write", "(", "'probability transition matrix:\\n{}\\n'", ".", "format", "(", "p", ")", ")", "\n", "", "saver", ".", "flush", "(", ")", "\n", "\n", "# -- set network, optimizer, scheduler, etc", "\n", "if", "which_net", "==", "\"cnn\"", ":", "\n", "        ", "net_trust", "=", "CNN9LAYER", "(", "input_channel", "=", "in_channel", ",", "n_outputs", "=", "num_class", ")", "\n", "net", "=", "CNN9LAYER", "(", "input_channel", "=", "in_channel", ",", "n_outputs", "=", "num_class", ")", "\n", "net", ".", "apply", "(", "weight_init", ")", "\n", "feature_size", "=", "128", "\n", "", "elif", "which_net", "==", "'resnet18'", ":", "\n", "        ", "net_trust", "=", "resnet18", "(", "in_channel", "=", "in_channel", ",", "num_classes", "=", "num_class", ")", "\n", "net", "=", "resnet18", "(", "in_channel", "=", "in_channel", ",", "num_classes", "=", "num_class", ")", "\n", "feature_size", "=", "512", "\n", "", "elif", "which_net", "==", "'resnet34'", ":", "\n", "        ", "net_trust", "=", "resnet34", "(", "in_channel", "=", "in_channel", ",", "num_classes", "=", "num_class", ")", "\n", "net", "=", "resnet34", "(", "in_channel", "=", "in_channel", ",", "num_classes", "=", "num_class", ")", "\n", "feature_size", "=", "512", "\n", "", "elif", "which_net", "==", "'preact_resnet18'", ":", "\n", "        ", "net_trust", "=", "preact_resnet18", "(", "num_classes", "=", "num_class", ",", "num_input_channels", "=", "in_channel", ")", "\n", "net", "=", "preact_resnet18", "(", "num_classes", "=", "num_class", ",", "num_input_channels", "=", "in_channel", ")", "\n", "feature_size", "=", "256", "\n", "", "elif", "which_net", "==", "'preact_resnet34'", ":", "\n", "        ", "net_trust", "=", "preact_resnet34", "(", "num_classes", "=", "num_class", ",", "num_input_channels", "=", "in_channel", ")", "\n", "net", "=", "preact_resnet34", "(", "num_classes", "=", "num_class", ",", "num_input_channels", "=", "in_channel", ")", "\n", "feature_size", "=", "256", "\n", "", "elif", "which_net", "==", "'preact_resnet101'", ":", "\n", "        ", "net_trust", "=", "preact_resnet101", "(", ")", "\n", "net", "=", "preact_resnet101", "(", ")", "\n", "feature_size", "=", "256", "\n", "", "elif", "which_net", "==", "'pc'", ":", "\n", "        ", "net_trust", "=", "PointNetCls", "(", "k", "=", "num_class", ")", "\n", "net", "=", "PointNetCls", "(", "k", "=", "num_class", ")", "\n", "feature_size", "=", "256", "\n", "", "else", ":", "\n", "        ", "ValueError", "(", "'Invalid network!'", ")", "\n", "\n", "", "opt_gpus", "=", "[", "i", "for", "i", "in", "range", "(", "arg_gpu", ",", "arg_gpu", "+", "int", "(", "arg_num_gpu", ")", ")", "]", "\n", "if", "len", "(", "opt_gpus", ")", ">", "1", ":", "\n", "        ", "print", "(", "\"Using \"", ",", "len", "(", "opt_gpus", ")", ",", "\" GPUs\"", ")", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "\",\"", ".", "join", "(", "str", "(", "x", ")", "for", "x", "in", "opt_gpus", ")", "\n", "", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "print", "(", "device", ")", "\n", "\n", "if", "len", "(", "opt_gpus", ")", ">", "1", ":", "\n", "        ", "net_trust", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net_trust", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ")", "\n", "", "net_trust", ".", "to", "(", "device", ")", "\n", "net", ".", "to", "(", "device", ")", "\n", "# net.apply(conv_init)", "\n", "\n", "# ------------------------- Initialize Setting ------------------------------", "\n", "best_acc", "=", "0", "\n", "best_epoch", "=", "0", "\n", "patience", "=", "50", "\n", "no_improve_counter", "=", "0", "\n", "\n", "A", "=", "1", "/", "num_class", "*", "torch", ".", "ones", "(", "ntrain", ",", "num_class", ",", "num_class", ",", "requires_grad", "=", "False", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "h", "=", "np", ".", "zeros", "(", "[", "ntrain", ",", "num_class", "]", ")", "\n", "\n", "criterion_1", "=", "nn", ".", "NLLLoss", "(", ")", "\n", "pred_softlabels", "=", "np", ".", "zeros", "(", "[", "ntrain", ",", "arg_every_n_epoch", ",", "num_class", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "train_acc_record", "=", "[", "]", "\n", "clean_train_acc_record", "=", "[", "]", "\n", "noise_train_acc_record", "=", "[", "]", "\n", "val_acc_record", "=", "[", "]", "\n", "recovery_record", "=", "[", "]", "\n", "noise_ytrain", "=", "copy", ".", "copy", "(", "noise_y_train", ")", "\n", "#noise_ytrain = torch.tensor(noise_ytrain).to(device)", "\n", "\n", "cprint", "(", "\"================  Clean Label...  ================\"", ",", "\"yellow\"", ")", "\n", "for", "epoch", "in", "range", "(", "num_epoch", ")", ":", "# Add some modification here", "\n", "\n", "        ", "train_correct", "=", "0", "\n", "train_loss", "=", "0", "\n", "train_total", "=", "0", "\n", "delta", "=", "1.2", "+", "0.02", "*", "max", "(", "epoch", "-", "arg_epoch_update", "+", "1", ",", "0", ")", "\n", "\n", "clean_train_correct", "=", "0", "\n", "noise_train_correct", "=", "0", "\n", "\n", "optimizer_trust", "=", "RAdam", "(", "net_trust", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "learning_rate", "(", "lr", ",", "epoch", ")", ",", "\n", "weight_decay", "=", "5e-4", ")", "\n", "#optimizer_trust = optim.SGD(net_trust.parameters(), lr=learning_rate(lr, epoch), weight_decay=5e-4,", "\n", "#                            nesterov=True, momentum=0.9)", "\n", "\n", "net_trust", ".", "train", "(", ")", "\n", "\n", "# Train with noisy data", "\n", "for", "i", ",", "(", "images", ",", "labels", ",", "softlabels", ",", "indices", ")", "in", "enumerate", "(", "tqdm", "(", "trainloader", ",", "ncols", "=", "100", ",", "ascii", "=", "True", ")", ")", ":", "\n", "            ", "if", "images", ".", "size", "(", "0", ")", "==", "1", ":", "# when batch size equals 1, skip, due to batch normalization", "\n", "                ", "continue", "\n", "\n", "", "images", ",", "labels", ",", "softlabels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", ",", "softlabels", ".", "to", "(", "device", ")", "\n", "outputs", ",", "features", "=", "net_trust", "(", "images", ")", "\n", "log_outputs", "=", "torch", ".", "log_softmax", "(", "outputs", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "# arg_epoch_start : epoch start to introduce loss retro", "\n", "# arg_epoch_interval : epochs between two updating of A", "\n", "if", "epoch", "in", "[", "arg_epoch_start", "-", "1", ",", "arg_epoch_start", "+", "arg_epoch_interval", "-", "1", "]", ":", "\n", "                ", "h", "[", "indices", "]", "=", "log_outputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "normal_outputs", "=", "torch", ".", "softmax", "(", "outputs", ",", "1", ")", "\n", "\n", "if", "epoch", ">=", "arg_epoch_start", ":", "# use loss_retro + loss_ce", "\n", "                ", "A_batch", "=", "A", "[", "indices", "]", ".", "to", "(", "device", ")", "\n", "loss", "=", "sum", "(", "[", "-", "A_batch", "[", "i", "]", ".", "matmul", "(", "softlabels", "[", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "float", "(", ")", ")", ".", "t", "(", ")", ".", "matmul", "(", "log_outputs", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "indices", ")", ")", "]", ")", "/", "len", "(", "indices", ")", "+", "criterion_1", "(", "log_outputs", ",", "labels", ")", "\n", "", "else", ":", "# use loss_ce", "\n", "                ", "loss", "=", "criterion_1", "(", "log_outputs", ",", "labels", ")", "\n", "\n", "", "optimizer_trust", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer_trust", ".", "step", "(", ")", "\n", "\n", "#arg_every_n_epoch : rolling windows to get eta_tilde", "\n", "if", "epoch", ">=", "(", "arg_epoch_update", "-", "arg_every_n_epoch", ")", ":", "\n", "                ", "pred_softlabels", "[", "indices", ",", "epoch", "%", "arg_every_n_epoch", ",", ":", "]", "=", "normal_outputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "train_total", "+=", "images", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "train_correct", "+=", "predicted", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "# For monitoring purpose, comment the following line out if you have your own dataset that doesn't have ground truth label", "\n", "train_label_clean", "=", "torch", ".", "tensor", "(", "y_train", ")", "[", "indices", "]", ".", "to", "(", "device", ")", "\n", "train_label_noise", "=", "torch", ".", "tensor", "(", "noise_ytrain", "[", "indices", "]", ")", ".", "to", "(", "device", ")", "\n", "clean_train_correct", "+=", "predicted", ".", "eq", "(", "train_label_clean", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "noise_train_correct", "+=", "predicted", ".", "eq", "(", "train_label_noise", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "# acc wrt the original noisy labels", "\n", "\n", "", "train_acc", "=", "train_correct", "/", "train_total", "*", "100", "\n", "clean_train_acc", "=", "clean_train_correct", "/", "train_total", "*", "100", "\n", "noise_train_acc", "=", "noise_train_correct", "/", "train_total", "*", "100", "\n", "print", "(", "\" Train Epoch: [{}/{}] \\t Training Acc wrt Corrected {:.3f} \\t Train Acc wrt True {:.3f} \\t Train Acc wrt Noise {:.3f}\"", ".", "\n", "format", "(", "epoch", ",", "num_epoch", ",", "train_acc", ",", "clean_train_acc", ",", "noise_train_acc", ")", ")", "\n", "\n", "# updating A", "\n", "if", "epoch", "in", "[", "arg_epoch_start", "-", "1", ",", "arg_epoch_start", "+", "40", "-", "1", "]", ":", "\n", "            ", "cprint", "(", "\"+++++++++++++++++ Updating A +++++++++++++++++++\"", ",", "\"magenta\"", ")", "\n", "unsolved", "=", "0", "\n", "infeasible", "=", "0", "\n", "y_soft", "=", "trainset", ".", "get_data_softlabel", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "i", "in", "tqdm", "(", "range", "(", "ntrain", ")", ",", "ncols", "=", "100", ",", "ascii", "=", "True", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "result", ",", "A_opt", "=", "updateA", "(", "y_soft", "[", "i", "]", ",", "h", "[", "i", "]", ",", "rho", "=", "0.9", ")", "\n", "", "except", ":", "\n", "                        ", "A", "[", "i", "]", "=", "A", "[", "i", "]", "\n", "unsolved", "+=", "1", "\n", "continue", "\n", "\n", "", "if", "(", "result", "==", "np", ".", "inf", ")", ":", "\n", "                        ", "A", "[", "i", "]", "=", "A", "[", "i", "]", "\n", "infeasible", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "A", "[", "i", "]", "=", "torch", ".", "tensor", "(", "A_opt", ")", "\n", "", "", "", "print", "(", "A", "[", "0", "]", ")", "\n", "print", "(", "\"Unsolved points: {} | Infeasible points: {}\"", ".", "format", "(", "unsolved", ",", "infeasible", ")", ")", "\n", "\n", "# applying lRT scheme", "\n", "# args_epoch_update : epoch to update labels", "\n", "", "if", "epoch", ">=", "arg_epoch_update", ":", "\n", "            ", "y_tilde", "=", "trainset", ".", "get_data_labels", "(", ")", "\n", "pred_softlabels_bar", "=", "pred_softlabels", ".", "mean", "(", "1", ")", "\n", "clean_labels", ",", "clean_softlabels", "=", "lrt_flip_scheme", "(", "pred_softlabels_bar", ",", "y_tilde", ",", "delta", ")", "\n", "trainset", ".", "update_corrupted_softlabel", "(", "clean_softlabels", ")", "\n", "trainset", ".", "update_corrupted_label", "(", "clean_softlabels", ".", "argmax", "(", "1", ")", ")", "\n", "\n", "# validation", "\n", "", "if", "not", "(", "epoch", "%", "5", ")", ":", "\n", "            ", "val_total", "=", "0", "\n", "val_correct", "=", "0", "\n", "net_trust", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "i", ",", "(", "images", ",", "labels", ",", "_", ",", "_", ")", "in", "enumerate", "(", "valloader", ")", ":", "\n", "                    ", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "\n", "outputs", ",", "_", "=", "net_trust", "(", "images", ")", "\n", "\n", "val_total", "+=", "images", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "val_correct", "+=", "predicted", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "val_acc", "=", "val_correct", "/", "val_total", "*", "100", "\n", "\n", "train_acc_record", ".", "append", "(", "train_acc", ")", "\n", "val_acc_record", ".", "append", "(", "val_acc", ")", "\n", "clean_train_acc_record", ".", "append", "(", "clean_train_acc", ")", "\n", "noise_train_acc_record", ".", "append", "(", "noise_train_acc", ")", "\n", "\n", "recovery_acc", "=", "np", ".", "sum", "(", "trainset", ".", "get_data_labels", "(", ")", "==", "y_train", ")", "/", "ntrain", "\n", "recovery_record", ".", "append", "(", "recovery_acc", ")", "\n", "\n", "if", "val_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "val_acc", "\n", "best_epoch", "=", "epoch", "\n", "no_improve_counter", "=", "0", "\n", "", "else", ":", "\n", "                ", "no_improve_counter", "+=", "1", "\n", "if", "no_improve_counter", ">=", "patience", ":", "\n", "                    ", "print", "(", "'>> No improvement for {} epochs. Stop at epoch {}'", ".", "format", "(", "patience", ",", "epoch", ")", ")", "\n", "saver", ".", "write", "(", "'>> No improvement for {} epochs. Stop at epoch {}'", ".", "format", "(", "patience", ",", "epoch", ")", ")", "\n", "saver", ".", "write", "(", "'>> val epoch: {}\\n>> current accuracy: {}%\\n'", ".", "format", "(", "epoch", ",", "val_acc", ")", ")", "\n", "saver", ".", "write", "(", "'>> best accuracy: {}\\tbest epoch: {}\\n\\n'", ".", "format", "(", "best_acc", ",", "best_epoch", ")", ")", "\n", "break", "\n", "\n", "", "", "cprint", "(", "'val accuracy: {}'", ".", "format", "(", "val_acc", ")", ",", "'cyan'", ")", "\n", "cprint", "(", "'>> best accuracy: {}\\n>> best epoch: {}\\n'", ".", "format", "(", "best_acc", ",", "best_epoch", ")", ",", "'green'", ")", "\n", "cprint", "(", "'>> final recovery rate: {}\\n'", ".", "format", "(", "recovery_acc", ")", ",", "\n", "'green'", ")", "\n", "saver", ".", "write", "(", "'>> val epoch: {}\\n>> current accuracy: {}%\\n'", ".", "format", "(", "epoch", ",", "val_acc", ")", ")", "\n", "saver", ".", "write", "(", "\"outputs: {}\\n\"", ".", "format", "(", "normal_outputs", ")", ")", "\n", "saver", ".", "write", "(", "'>> best accuracy: {}\\tbest epoch: {}\\n\\n'", ".", "format", "(", "best_acc", ",", "best_epoch", ")", ")", "\n", "saver", ".", "write", "(", "\n", "'>> final recovery rate: {}%\\n'", ".", "format", "(", "np", ".", "sum", "(", "trainset", ".", "get_data_labels", "(", ")", "==", "y_train", ")", "/", "ntrain", "*", "100", ")", ")", "\n", "saver", ".", "flush", "(", ")", "\n", "\n", "# If want to train the neural network again with corrected labels and original loss_ce again", "\n", "# set args.two_stage to True", "\n", "", "", "print", "(", "\"Use Two-Stage Model {}\"", ".", "format", "(", "args", ".", "two_stage", ")", ")", "\n", "if", "args", ".", "two_stage", "==", "True", ":", "\n", "       ", "criterion_2", "=", "nn", ".", "NLLLoss", "(", ")", "\n", "best_acc", "=", "0", "\n", "best_epoch", "=", "0", "\n", "patience", "=", "50", "\n", "no_improve_counter", "=", "0", "\n", "\n", "cprint", "(", "\"================ Normal Training  ================\"", ",", "\"yellow\"", ")", "\n", "for", "epoch", "in", "range", "(", "num_epoch", ")", ":", "# Add some modification here", "\n", "\n", "           ", "train_correct", "=", "0", "\n", "train_loss", "=", "0", "\n", "train_total", "=", "0", "\n", "\n", "optimizer_trust", "=", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ",", "\n", "lr", "=", "learning_rate", "(", "lr", ",", "epoch", ")", ",", "\n", "weight_decay", "=", "5e-4", ")", "\n", "\n", "net", ".", "train", "(", ")", "\n", "\n", "for", "i", ",", "(", "images", ",", "labels", ",", "softlabels", ",", "indices", ")", "in", "enumerate", "(", "tqdm", "(", "trainloader", ",", "ncols", "=", "100", ",", "ascii", "=", "True", ")", ")", ":", "\n", "               ", "if", "images", ".", "size", "(", "0", ")", "==", "1", ":", "# when batch size equals 1, skip, due to batch normalization", "\n", "                   ", "continue", "\n", "\n", "", "images", ",", "labels", ",", "softlabels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", ",", "softlabels", ".", "to", "(", "device", ")", "\n", "outputs", ",", "features", "=", "net", "(", "images", ")", "\n", "log_outputs", "=", "torch", ".", "log_softmax", "(", "outputs", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "loss", "=", "criterion_2", "(", "log_outputs", ",", "labels", ")", "\n", "\n", "optimizer_trust", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer_trust", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "train_total", "+=", "images", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "train_correct", "+=", "predicted", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "train_acc", "=", "train_correct", "/", "train_total", "*", "100", "\n", "print", "(", "\" Train Epoch: [{}/{}] \\t Training Accuracy {}%\"", ".", "format", "(", "epoch", ",", "num_epoch", ",", "train_acc", ")", ")", "\n", "\n", "if", "not", "(", "epoch", "%", "5", ")", ":", "\n", "\n", "               ", "val_total", "=", "0", "\n", "val_correct", "=", "0", "\n", "net_trust", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                   ", "for", "i", ",", "(", "images", ",", "labels", ",", "_", ",", "_", ")", "in", "enumerate", "(", "valloader", ")", ":", "\n", "                       ", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "outputs", ",", "_", "=", "net", "(", "images", ")", "\n", "\n", "", "val_total", "+=", "images", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "val_correct", "+=", "predicted", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "val_acc", "=", "val_correct", "/", "val_total", "*", "100", "\n", "\n", "if", "val_acc", ">", "best_acc", ":", "\n", "                   ", "best_acc", "=", "val_acc", "\n", "best_epoch", "=", "epoch", "\n", "no_improve_counter", "=", "0", "\n", "", "else", ":", "\n", "                   ", "no_improve_counter", "+=", "1", "\n", "if", "no_improve_counter", ">=", "patience", ":", "\n", "                       ", "print", "(", "'>> No improvement for {} epochs. Stop at epoch {}'", ".", "format", "(", "patience", ",", "epoch", ")", ")", "\n", "saver", ".", "write", "(", "'>> No improvement for {} epochs. Stop at epoch {}'", ".", "format", "(", "patience", ",", "epoch", ")", ")", "\n", "saver", ".", "write", "(", "'>> val epoch: {}\\n>> current accuracy: {}%\\n'", ".", "format", "(", "epoch", ",", "val_acc", ")", ")", "\n", "saver", ".", "write", "(", "'>> best accuracy: {}\\tbest epoch: {}\\n\\n'", ".", "format", "(", "best_acc", ",", "best_epoch", ")", ")", "\n", "break", "\n", "\n", "", "", "cprint", "(", "'val accuracy: {}'", ".", "format", "(", "val_acc", ")", ",", "'cyan'", ")", "\n", "cprint", "(", "'>> best accuracy: {}\\n>> best epoch: {}\\n'", ".", "format", "(", "best_acc", ",", "best_epoch", ")", ",", "'green'", ")", "\n", "cprint", "(", "'>> final recovery rate: {}\\n'", ".", "format", "(", "np", ".", "sum", "(", "trainset", ".", "get_data_labels", "(", ")", "==", "y_train", ")", "/", "ntrain", ")", ",", "'green'", ")", "\n", "\n", "", "", "", "cprint", "(", "\"================  Start Testing  ================\"", ",", "\"yellow\"", ")", "\n", "test_total", "=", "0", "\n", "test_correct", "=", "0", "\n", "\n", "net_trust", ".", "eval", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "labels", ",", "softlabels", ",", "indices", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "if", "images", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "continue", "\n", "\n", "", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "outputs", ",", "_", "=", "net_trust", "(", "images", ")", "\n", "\n", "test_total", "+=", "images", ".", "shape", "[", "0", "]", "\n", "test_correct", "+=", "outputs", ".", "argmax", "(", "1", ")", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "test_acc", "=", "test_correct", "/", "test_total", "*", "100", "\n", "print", "(", "\"Final test accuracy {} %\"", ".", "format", "(", "test_correct", "/", "test_total", "*", "100", ")", ")", "\n", "\n", "return", "test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.Net.__init__": [[8, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channel", "=", "3", ",", "n_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "n_channel", ",", "32", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "bn1_1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "bn1_2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "pool2_1", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "bn2_1", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "pool2_2", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "bn2_2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "4", "*", "4", "*", "128", ",", "64", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "64", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.Net.forward": [[27, 40], ["torch.relu", "torch.relu", "torch.relu", "net.Net.pool1", "net.Net.pool2_1", "net.Net.pool2_2", "net.Net.view", "torch.relu", "torch.relu", "torch.relu", "net.Net.fc2", "net.Net.bn1_1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "net.Net.fc1", "net.Net.conv1_1", "net.Net.bn1_2", "net.Net.bn2_1", "net.Net.bn2_2", "net.Net.conv1_2", "net.Net.conv2_1", "net.Net.conv2_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1_1", "=", "F", ".", "relu", "(", "self", ".", "bn1_1", "(", "self", ".", "conv1_1", "(", "x", ")", ")", ")", "\n", "x1_2", "=", "self", ".", "pool1", "(", "F", ".", "relu", "(", "self", ".", "bn1_2", "(", "self", ".", "conv1_2", "(", "x1_1", ")", ")", ")", ")", "\n", "\n", "x2_1", "=", "self", ".", "pool2_1", "(", "F", ".", "relu", "(", "self", ".", "bn2_1", "(", "self", ".", "conv2_1", "(", "x1_2", ")", ")", ")", ")", "\n", "x2_2", "=", "self", ".", "pool2_2", "(", "F", ".", "relu", "(", "self", ".", "bn2_2", "(", "self", ".", "conv2_2", "(", "x2_1", ")", ")", ")", ")", "\n", "x", "=", "x2_2", ".", "view", "(", "-", "1", ",", "4", "*", "4", "*", "128", ")", "\n", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "\n", "x", "=", "self", ".", "fc2", "(", "x2", ")", "\n", "\n", "return", "x", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.Autoencoder.__init__": [[53, 78], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Autoencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "16", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "8", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "64", ",", "128", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "8", ",", "16", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "16", ",", "32", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "32", ",", "3", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.Autoencoder.forward": [[80, 89], ["net.Autoencoder.encoder", "net.Autoencoder.view", "net.Autoencoder.fc1", "net.Autoencoder.fc2", "net.Autoencoder.view", "net.Autoencoder.decoder", "net.Autoencoder.size", "net.Autoencoder.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encoder", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "latent", "=", "self", ".", "fc1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "fc2", "(", "latent", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "8", ",", "4", ",", "4", ")", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "\n", "return", "x", ",", "latent", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.CNN9LAYER.__init__": [[96, 118], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channel", "=", "3", ",", "n_outputs", "=", "10", ",", "dropout_rate", "=", "0.25", ")", ":", "\n", "        ", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "super", "(", "CNN9LAYER", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c1", "=", "nn", ".", "Conv2d", "(", "input_channel", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "c2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "c3", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "c4", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "c5", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "c6", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "c7", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "c8", "=", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "c9", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "l_c1", "=", "nn", ".", "Linear", "(", "128", ",", "n_outputs", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "bn7", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "bn8", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "bn9", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.CNN9LAYER.forward": [[119, 163], ["net.CNN9LAYER.c1", "torch.relu", "torch.relu", "torch.relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "net.CNN9LAYER.c2", "torch.relu", "torch.relu", "torch.relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "net.CNN9LAYER.c3", "torch.relu", "torch.relu", "torch.relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.dropout2d", "torch.dropout2d", "torch.dropout2d", "net.CNN9LAYER.c4", "torch.relu", "torch.relu", "torch.relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "net.CNN9LAYER.c5", "torch.relu", "torch.relu", "torch.relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "net.CNN9LAYER.c6", "torch.relu", "torch.relu", "torch.relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.dropout2d", "torch.dropout2d", "torch.dropout2d", "net.CNN9LAYER.c7", "torch.relu", "torch.relu", "torch.relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "net.CNN9LAYER.c8", "torch.relu", "torch.relu", "torch.relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "net.CNN9LAYER.c9", "torch.relu", "torch.relu", "torch.relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "h.view.view.view", "net.CNN9LAYER.l_c1", "net.call_bn", "net.call_bn", "net.call_bn", "net.call_bn", "net.call_bn", "net.call_bn", "net.call_bn", "net.call_bn", "net.call_bn", "net.call_bn", "net.call_bn", "net.call_bn", "net.call_bn", "net.call_bn", "net.call_bn", "net.call_bn", "net.call_bn", "net.call_bn", "h.view.view.size", "h.view.view.size"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn"], ["", "def", "forward", "(", "self", ",", "x", ",", ")", ":", "\n", "\n", "        ", "inter_out", "=", "{", "}", "\n", "\n", "h", "=", "x", "\n", "h", "=", "self", ".", "c1", "(", "h", ")", "\n", "inter_out", "[", "'act_fc1'", "]", "=", "F", ".", "relu", "(", "call_bn", "(", "self", ".", "bn1", ",", "h", ")", ")", "\n", "h", "=", "F", ".", "leaky_relu", "(", "call_bn", "(", "self", ".", "bn1", ",", "h", ")", ",", "negative_slope", "=", "0.01", ")", "\n", "h", "=", "self", ".", "c2", "(", "h", ")", "\n", "inter_out", "[", "'act_fc2'", "]", "=", "F", ".", "relu", "(", "call_bn", "(", "self", ".", "bn2", ",", "h", ")", ")", "\n", "h", "=", "F", ".", "leaky_relu", "(", "call_bn", "(", "self", ".", "bn2", ",", "h", ")", ",", "negative_slope", "=", "0.01", ")", "\n", "h", "=", "self", ".", "c3", "(", "h", ")", "\n", "inter_out", "[", "'act_fc3'", "]", "=", "F", ".", "relu", "(", "call_bn", "(", "self", ".", "bn3", ",", "h", ")", ")", "\n", "h", "=", "F", ".", "leaky_relu", "(", "call_bn", "(", "self", ".", "bn3", ",", "h", ")", ",", "negative_slope", "=", "0.01", ")", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "h", "=", "F", ".", "dropout2d", "(", "h", ",", "p", "=", "self", ".", "dropout_rate", ")", "\n", "\n", "h", "=", "self", ".", "c4", "(", "h", ")", "\n", "inter_out", "[", "'act_fc4'", "]", "=", "F", ".", "relu", "(", "call_bn", "(", "self", ".", "bn4", ",", "h", ")", ")", "\n", "h", "=", "F", ".", "leaky_relu", "(", "call_bn", "(", "self", ".", "bn4", ",", "h", ")", ",", "negative_slope", "=", "0.01", ")", "\n", "h", "=", "self", ".", "c5", "(", "h", ")", "\n", "inter_out", "[", "'act_fc5'", "]", "=", "F", ".", "relu", "(", "call_bn", "(", "self", ".", "bn5", ",", "h", ")", ")", "\n", "h", "=", "F", ".", "leaky_relu", "(", "call_bn", "(", "self", ".", "bn5", ",", "h", ")", ",", "negative_slope", "=", "0.01", ")", "\n", "h", "=", "self", ".", "c6", "(", "h", ")", "\n", "inter_out", "[", "'act_fc6'", "]", "=", "F", ".", "relu", "(", "call_bn", "(", "self", ".", "bn6", ",", "h", ")", ")", "\n", "h", "=", "F", ".", "leaky_relu", "(", "call_bn", "(", "self", ".", "bn6", ",", "h", ")", ",", "negative_slope", "=", "0.01", ")", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "h", "=", "F", ".", "dropout2d", "(", "h", ",", "p", "=", "self", ".", "dropout_rate", ")", "\n", "\n", "h", "=", "self", ".", "c7", "(", "h", ")", "\n", "inter_out", "[", "'act_fc7'", "]", "=", "F", ".", "relu", "(", "call_bn", "(", "self", ".", "bn7", ",", "h", ")", ")", "\n", "h", "=", "F", ".", "leaky_relu", "(", "call_bn", "(", "self", ".", "bn7", ",", "h", ")", ",", "negative_slope", "=", "0.01", ")", "\n", "h", "=", "self", ".", "c8", "(", "h", ")", "\n", "inter_out", "[", "'act_fc8'", "]", "=", "F", ".", "relu", "(", "call_bn", "(", "self", ".", "bn8", ",", "h", ")", ")", "\n", "h", "=", "F", ".", "leaky_relu", "(", "call_bn", "(", "self", ".", "bn8", ",", "h", ")", ",", "negative_slope", "=", "0.01", ")", "\n", "h", "=", "self", ".", "c9", "(", "h", ")", "\n", "inter_out", "[", "'act_fc9'", "]", "=", "F", ".", "relu", "(", "call_bn", "(", "self", ".", "bn9", ",", "h", ")", ")", "\n", "h", "=", "F", ".", "leaky_relu", "(", "call_bn", "(", "self", ".", "bn9", ",", "h", ")", ",", "negative_slope", "=", "0.01", ")", "\n", "h", "=", "F", ".", "avg_pool2d", "(", "h", ",", "kernel_size", "=", "h", ".", "data", ".", "shape", "[", "2", "]", ")", "\n", "\n", "h", "=", "h", ".", "view", "(", "h", ".", "size", "(", "0", ")", ",", "h", ".", "size", "(", "1", ")", ")", "\n", "logit", "=", "self", ".", "l_c1", "(", "h", ")", "\n", "\n", "return", "logit", ",", "h", ",", "inter_out", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.LSTMTiny.__init__": [[166, 177], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ")", ":", "\n", "        ", "super", "(", "LSTMTiny", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_words", "=", "5000", "\n", "self", ".", "embed_dim", "=", "128", "\n", "self", ".", "lstm_hidden_dim", "=", "512", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "self", ".", "num_words", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "self", ".", "embed_dim", ",", "self", ".", "lstm_hidden_dim", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "lstm_hidden_dim", ",", "self", ".", "lstm_hidden_dim", "//", "2", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "lstm_hidden_dim", "//", "2", ",", "self", ".", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.LSTMTiny.forward": [[178, 191], ["net.LSTMTiny.embed", "net.LSTMTiny.lstm", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "hn.view.view.view", "net.LSTMTiny.fc1", "net.LSTMTiny.fc2", "hn.view.view.size", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "embed_x", "=", "self", ".", "embed", "(", "x", ")", "\n", "rnn_out", ",", "(", "hn", ",", "cn", ")", "=", "self", ".", "lstm", "(", "embed_x", ")", "\n", "\n", "hn", "=", "torch", ".", "transpose", "(", "hn", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "hn", "=", "hn", ".", "view", "(", "hn", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "feat", "=", "self", ".", "fc1", "(", "hn", ")", "\n", "# x = F.dropout(x)", "\n", "\n", "x", "=", "self", ".", "fc2", "(", "feat", ")", "\n", "\n", "return", "x", ",", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.weight_init": [[42, 50], ["isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_"], "function", ["None"], ["", "", "def", "weight_init", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.net.call_bn": [[91, 93], ["bn"], "function", ["None"], ["", "", "def", "call_bn", "(", "bn", ",", "x", ")", ":", "\n", "    ", "return", "bn", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.BasicBlock.__init__": [[32, 41], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__init__", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.conv3x3", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.BasicBlock.forward": [[42, 59], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.Bottleneck.__init__": [[64, 75], ["torch.Module.__init__", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__init__", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.conv1x1", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.conv3x3", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.Bottleneck.forward": [[76, 97], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.ResNet.__init__": [[101, 135], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__init__", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "in_channel", "=", "3", ",", "num_classes", "=", "100", ",", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "\n", "# self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.ResNet._make_layer": [[136, 151], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.ResNet.forward": [[152, 177], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "inter_dict", "=", "{", "}", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "# inter_dict['conv1'] = x", "\n", "# x = self.maxpool(x)", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "# inter_dict['layer1'] = x", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "# inter_dict['layer2'] = x", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "# inter_dict['layer3'] = x", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "# inter_dict['layer4'] = x", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "feats", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "feats", ")", "\n", "# inter_dict['fc'] = x", "\n", "\n", "return", "x", ",", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.conv3x3": [[18, 22], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.conv1x1": [[24, 27], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.resnet18": [[178, 188], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.resnet34": [[190, 200], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.resnet50": [[202, 212], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.resnet101": [[214, 224], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.resnet.resnet152": [[226, 236], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.pointnet.STN3d.__init__": [[22, 37], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STN3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "9", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.pointnet.STN3d.forward": [[38, 56], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.STN3d.fc3", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "x.view.view.view", "x.view.view.size", "pointnet.STN3d.bn1", "pointnet.STN3d.bn2", "pointnet.STN3d.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "pointnet.STN3d.bn4", "pointnet.STN3d.bn5", "iden.cuda.cuda.cuda", "pointnet.STN3d.conv1", "pointnet.STN3d.conv2", "pointnet.STN3d.conv3", "pointnet.STN3d.fc1", "pointnet.STN3d.fc2", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "iden", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ".", "view", "(", "1", ",", "9", ")", ".", "repeat", "(", "batchsize", ",", "1", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "iden", "=", "iden", ".", "cuda", "(", ")", "\n", "", "x", "=", "x", "+", "iden", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.pointnet.PointNetfeat.__init__": [[59, 69], ["torch.Module.__init__", "pointnet.STN3d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "global_feat", "=", "True", ")", ":", "\n", "        ", "super", "(", "PointNetfeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stn", "=", "STN3d", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "global_feat", "=", "global_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.pointnet.PointNetfeat.forward": [[70, 88], ["pointnet.PointNetfeat.stn", "x.view().repeat.view().repeat.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x.view().repeat.view().repeat.transpose", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.PointNetfeat.bn3", "x.view().repeat.view().repeat.view", "x.view().repeat.view().repeat.size", "x.view().repeat.view().repeat.size", "pointnet.PointNetfeat.bn1", "pointnet.PointNetfeat.bn2", "pointnet.PointNetfeat.conv3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.view().repeat.view().repeat.view().repeat", "pointnet.PointNetfeat.conv1", "pointnet.PointNetfeat.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().repeat.view().repeat.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "n_pts", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "trans", "=", "self", ".", "stn", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "trans", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "pointfeat", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "if", "self", ".", "global_feat", ":", "\n", "            ", "return", "x", ",", "trans", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "n_pts", ")", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "pointfeat", "]", ",", "1", ")", ",", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.pointnet.PointNetCls.__init__": [[91, 100], ["torch.Module.__init__", "pointnet.PointNetfeat", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "2", ")", ":", "\n", "        ", "super", "(", "PointNetCls", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feat", "=", "PointNetfeat", "(", "global_feat", "=", "True", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "k", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.pointnet.PointNetCls.forward": [[101, 110], ["torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "pointnet.PointNetCls.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.PointNetCls.fc3", "pointnet.PointNetCls.bn1", "pointnet.PointNetCls.bn2", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "pointnet.PointNetCls.fc1", "pointnet.PointNetCls.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "x", ",", "_", "=", "self", ".", "feat", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "feat", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "self", ".", "fc3", "(", "feat", ")", "\n", "return", "x", ",", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.BasicBlock.__init__": [[26, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.BasicBlock.forward": [[40, 46], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.BasicBlock.bn2", "preact_resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.BasicBlock.bn1", "preact_resnet.BasicBlock.conv2", "preact_resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.Bottleneck.__init__": [[51, 65], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.Bottleneck.forward": [[67, 74], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.Bottleneck.bn3", "preact_resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.Bottleneck.bn1", "preact_resnet.Bottleneck.bn2", "preact_resnet.Bottleneck.conv3", "preact_resnet.Bottleneck.conv1", "preact_resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.ResNet.__init__": [[77, 88], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "preact_resnet.ResNet._make_layer", "preact_resnet.ResNet._make_layer", "preact_resnet.ResNet._make_layer", "preact_resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__init__", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "num_input_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_input_channels", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.ResNet._make_layer": [[89, 96], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.ResNet.forward": [[97, 108], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.ResNet.layer1", "preact_resnet.ResNet.layer2", "preact_resnet.ResNet.layer3", "preact_resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "preact_resnet.ResNet.view", "preact_resnet.ResNet.linear", "preact_resnet.ResNet.bn1", "preact_resnet.ResNet.size", "preact_resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "fet", "=", "out", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ",", "fet", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.initialize_weights": [[1, 9], ["isinstance", "torch.init.kaiming_normal_", "isinstance", "module.weight.data.fill_", "module.bias.data.zero_", "isinstance", "module.bias.data.zero_"], "function", ["None"], ["def", "initialize_weights", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ".", "data", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.conv_init": [[16, 20], ["classname.find", "torch.xavier_uniform_", "numpy.sqrt"], "function", ["None"], ["def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "#init.constant(m.bias, 0)", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.preact_resnet18": [[110, 112], ["preact_resnet.ResNet"], "function", ["None"], ["", "", "def", "preact_resnet18", "(", "num_classes", "=", "10", ",", "num_input_channels", "=", "3", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", ",", "num_input_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.preact_resnet34": [[114, 116], ["preact_resnet.ResNet"], "function", ["None"], ["", "def", "preact_resnet34", "(", "num_classes", "=", "10", ",", "num_input_channels", "=", "3", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ",", "num_input_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.ResNet50": [[118, 120], ["preact_resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "num_classes", "=", "10", ",", "num_input_channels", "=", "3", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ",", "num_input_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.preact_resnet101": [[122, 124], ["preact_resnet.ResNet"], "function", ["None"], ["", "def", "preact_resnet101", "(", "num_classes", "=", "10", ",", "num_input_channels", "=", "3", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "num_input_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.ResNet152": [[126, 128], ["preact_resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "num_classes", "=", "10", ",", "num_input_channels", "=", "3", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", ",", "num_input_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.network.preact_resnet.test": [[130, 134], ["ResNet18", "ResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["None"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.shuffle_data": [[21, 32], ["numpy.arange", "numpy.random.shuffle", "len"], "function", ["None"], ["", "def", "shuffle_data", "(", "data", ",", "labels", ")", ":", "\n", "    ", "\"\"\" Shuffle data and labels.\n        Input:\n          data: B,N,... numpy array\n          label: B,... numpy array\n        Return:\n          shuffled data, label and shuffle indices\n    \"\"\"", "\n", "idx", "=", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "return", "data", "[", "idx", ",", "...", "]", ",", "labels", "[", "idx", "]", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.rotate_point_cloud": [[34, 53], ["numpy.zeros", "range", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape", "numpy.random.uniform"], "function", ["None"], ["", "def", "rotate_point_cloud", "(", "batch_data", ")", ":", "\n", "    ", "\"\"\" Randomly rotate the point clouds to augument the dataset\n        rotation is per shape based along up direction\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "rotation_angle", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.rotate_point_cloud_instance": [[55, 76], ["numpy.zeros", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape", "numpy.random.uniform"], "function", ["None"], ["", "def", "rotate_point_cloud_instance", "(", "points", ")", ":", "\n", "    ", "\"\"\"\n    Randomly rotate the individual point cloud to augment the dataset\n    Rotation is along the up direction\n    Input:\n        Nx3 array\n    Output:\n        Nx3 array, representing the rotated point cloud\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "points", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "rotation_angle", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "points", "[", ":", "]", "\n", "rotated_data", "[", ":", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "\n", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.random_rotation_about_origin_instance": [[78, 86], ["provider.random_rotation_about_origin", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.random_rotation_about_origin"], ["", "def", "random_rotation_about_origin_instance", "(", "points", ")", ":", "\n", "    ", "rotation_angle_x", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "rotation_angle_y", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "rotation_angle_z", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "\n", "rotated_data", "=", "random_rotation_about_origin", "(", "points", ",", "rotation_angle_x", ",", "rotation_angle_y", ",", "rotation_angle_z", ")", "\n", "\n", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.random_rotation_about_origin": [[88, 94], ["provider.rotate_x_dir", "provider.rotate_y_dir", "provider.rotate_z_dir"], "function", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.rotate_x_dir", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.rotate_y_dir", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.rotate_z_dir"], ["", "def", "random_rotation_about_origin", "(", "points", ",", "rotation_angle_x", ",", "rotation_angle_y", ",", "rotation_angle_z", ")", ":", "\n", "    ", "rotated_pc", "=", "rotate_x_dir", "(", "points", ",", "rotation_angle_x", ")", "\n", "rotated_pc", "=", "rotate_y_dir", "(", "rotated_pc", ",", "rotation_angle_y", ")", "\n", "rotated_pc", "=", "rotate_z_dir", "(", "rotated_pc", ",", "rotation_angle_z", ")", "\n", "\n", "return", "rotated_pc", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.rotate_y_dir": [[96, 108], ["numpy.zeros", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape"], "function", ["None"], ["", "def", "rotate_y_dir", "(", "points", ",", "rotation_angle", ")", ":", "\n", "    ", "rotated_data", "=", "np", ".", "zeros", "(", "points", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "points", "[", ":", "]", "\n", "rotated_data", "[", ":", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "\n", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.rotate_z_dir": [[110, 122], ["numpy.zeros", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape"], "function", ["None"], ["", "def", "rotate_z_dir", "(", "points", ",", "rotation_angle", ")", ":", "\n", "    ", "rotated_data", "=", "np", ".", "zeros", "(", "points", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "-", "sinval", ",", "0", "]", ",", "\n", "[", "sinval", ",", "cosval", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "shape_pc", "=", "points", "[", ":", "]", "\n", "rotated_data", "[", ":", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "\n", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.rotate_x_dir": [[124, 136], ["numpy.zeros", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape"], "function", ["None"], ["", "def", "rotate_x_dir", "(", "points", ",", "rotation_angle", ")", ":", "\n", "    ", "rotated_data", "=", "np", ".", "zeros", "(", "points", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "cosval", ",", "-", "sinval", "]", ",", "\n", "[", "0", ",", "sinval", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "points", "[", ":", "]", "\n", "rotated_data", "[", ":", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "\n", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.rotate_point_cloud_by_angle": [[138, 156], ["numpy.zeros", "range", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape"], "function", ["None"], ["", "def", "rotate_point_cloud_by_angle", "(", "batch_data", ",", "rotation_angle", ")", ":", "\n", "    ", "\"\"\" Rotate the point cloud along up direction with certain angle.\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "# rotation_angle = np.random.uniform() * 2 * np.pi", "\n", "        ", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.jitter_point_cloud": [[158, 170], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["", "def", "jitter_point_cloud", "(", "batch_data", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.05", ")", ":", "\n", "    ", "\"\"\" Randomly jitter points. jittering is per point.\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, jittered batch of point clouds\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "assert", "(", "clip", ">", "0", ")", "\n", "jittered_data", "=", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "B", ",", "N", ",", "C", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "jittered_data", "+=", "batch_data", "\n", "return", "jittered_data", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.jitter_point_cloud_instance": [[172, 178], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["", "def", "jitter_point_cloud_instance", "(", "point_data", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.05", ")", ":", "\n", "    ", "N", ",", "C", "=", "point_data", ".", "shape", "\n", "assert", "(", "clip", ">", "0", ")", "\n", "jittered_data", "=", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "N", ",", "C", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "jittered_data", "+=", "point_data", "\n", "return", "jittered_data", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.random_scale_point_cloud_instance": [[180, 193], ["numpy.random.uniform"], "function", ["None"], ["", "def", "random_scale_point_cloud_instance", "(", "batch_data", ",", "scale_low", "=", "0.8", ",", "scale_high", "=", "1.25", ")", ":", "\n", "    ", "\"\"\" Randomly scale the point cloud. Scale is per point cloud.\n        Input:\n            BxNx3 array, original batch of point clouds\n        Return:\n            BxNx3 array, scaled batch of point clouds\n    \"\"\"", "\n", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "scales", "=", "np", ".", "random", ".", "uniform", "(", "scale_low", ",", "scale_high", ",", "3", ")", "\n", "batch_data", "[", ":", ",", "0", "]", "*=", "scales", "[", "0", "]", "\n", "# batch_data[:, 1] *= scales[1]  # vertical direction", "\n", "batch_data", "[", ":", ",", "2", "]", "*=", "scales", "[", "2", "]", "\n", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.random_translation_point_cloud_instance": [[195, 201], ["numpy.random.uniform"], "function", ["None"], ["", "def", "random_translation_point_cloud_instance", "(", "batch_data", ",", "offset_low", "=", "-", "0.2", ",", "offset_high", "=", "0.2", ")", ":", "\n", "    ", "offsets", "=", "np", ".", "random", ".", "uniform", "(", "offset_low", ",", "offset_high", ",", "3", ")", "\n", "batch_data", "[", ":", ",", "0", "]", "+=", "offsets", "[", "0", "]", "\n", "batch_data", "[", ":", ",", "1", "]", "+=", "offsets", "[", "1", "]", "# vertical direction", "\n", "batch_data", "[", ":", ",", "2", "]", "+=", "offsets", "[", "2", "]", "\n", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.random_point_dropout_instance_instance": [[203, 210], ["numpy.random.random", "numpy.where", "len", "numpy.random.random"], "function", ["None"], ["", "def", "random_point_dropout_instance_instance", "(", "batch_pc", ",", "max_dropout_ratio", "=", "0.875", ")", ":", "\n", "    ", "''' batch_pc: BxNx3 '''", "\n", "dropout_ratio", "=", "np", ".", "random", ".", "random", "(", ")", "*", "max_dropout_ratio", "# 0~0.875", "\n", "drop_idx", "=", "np", ".", "where", "(", "np", ".", "random", ".", "random", "(", "(", "batch_pc", ".", "shape", "[", "1", "]", ")", ")", "<=", "dropout_ratio", ")", "[", "0", "]", "\n", "if", "len", "(", "drop_idx", ")", ">", "0", ":", "\n", "        ", "batch_pc", "[", "drop_idx", ",", ":", "]", "=", "batch_pc", "[", "0", ",", ":", "]", "# set to the first point", "\n", "", "return", "batch_pc", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.getDataFiles": [[212, 214], ["line.rstrip", "open"], "function", ["None"], ["", "def", "getDataFiles", "(", "list_filename", ")", ":", "\n", "    ", "return", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "list_filename", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.load_h5": [[216, 222], ["h5py.File", "h5py.File.close"], "function", ["None"], ["", "def", "load_h5", "(", "h5_filename", ")", ":", "\n", "    ", "f", "=", "h5py", ".", "File", "(", "h5_filename", ",", "'r'", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "return", "(", "data", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.loadDataFile": [[224, 226], ["provider.load_h5"], "function", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.load_h5"], ["", "def", "loadDataFile", "(", "filename", ")", ":", "\n", "    ", "return", "load_h5", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.load_h5_data_label_seg": [[228, 235], ["h5py.File", "h5py.File.close"], "function", ["None"], ["", "def", "load_h5_data_label_seg", "(", "h5_filename", ")", ":", "\n", "    ", "f", "=", "h5py", ".", "File", "(", "h5_filename", ",", "'r'", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", "\n", "seg", "=", "f", "[", "'pid'", "]", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "return", "(", "data", ",", "label", ",", "seg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.loadDataFile_with_seg": [[237, 239], ["provider.load_h5_data_label_seg"], "function", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.load_h5_data_label_seg"], ["", "def", "loadDataFile_with_seg", "(", "filename", ")", ":", "\n", "    ", "return", "load_h5_data_label_seg", "(", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.__init__": [[40, 86], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "torch.load", "torch.load", "torch.load", "torch.load", "mnist_prepare.MNIST.targets.numpy().tolist", "len", "len", "numpy.ones", "range", "mnist_prepare.MNIST.download", "mnist_prepare.MNIST._check_exists", "RuntimeError", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.unique", "len", "int", "mnist_prepare.MNIST.targets.numpy", "len", "len", "numpy.ones", "range", "len", "len", "numpy.ones", "range", "numpy.unique", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.download", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST._check_exists"], ["def", "__init__", "(", "self", ",", "root", ",", "split", "=", "'train'", ",", "train_ratio", "=", "0.9", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "split", "=", "split", "# training set or test set", "\n", "self", ".", "train_ratio", "=", "train_ratio", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_exists", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset not found.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "\n", "", "if", "self", ".", "split", "==", "'test'", ":", "\n", "            ", "data_file", "=", "self", ".", "test_file", "\n", "", "else", ":", "\n", "            ", "data_file", "=", "self", ".", "training_file", "\n", "", "self", ".", "data", ",", "self", ".", "targets", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "processed_folder", ",", "data_file", ")", ")", "\n", "self", ".", "targets", "=", "self", ".", "targets", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "self", ".", "num_class", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "targets", ")", ")", "\n", "self", ".", "num_data", "=", "len", "(", "self", ".", "data", ")", "\n", "self", ".", "softlabel", "=", "np", ".", "ones", "(", "[", "self", ".", "num_data", ",", "self", ".", "num_class", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_data", ")", ":", "\n", "            ", "self", ".", "softlabel", "[", "i", ",", "self", ".", "targets", "[", "i", "]", "]", "=", "1", "\n", "\n", "# split the original train set into train & validation set", "\n", "", "if", "self", ".", "split", "!=", "'test'", ":", "\n", "            ", "num_data", "=", "len", "(", "self", ".", "data", ")", "\n", "train_num", "=", "int", "(", "num_data", "*", "self", ".", "train_ratio", ")", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", ":", "train_num", "]", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", ":", "train_num", "]", "\n", "self", ".", "num_class", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "targets", ")", ")", "\n", "self", ".", "num_data", "=", "len", "(", "self", ".", "data", ")", "\n", "self", ".", "softlabel", "=", "np", ".", "ones", "(", "[", "self", ".", "num_data", ",", "self", ".", "num_class", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_data", ")", ":", "\n", "                    ", "self", ".", "softlabel", "[", "i", ",", "self", ".", "targets", "[", "i", "]", "]", "=", "1", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "train_num", ":", "]", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", "train_num", ":", "]", "\n", "self", ".", "num_class", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "targets", ")", ")", "\n", "self", ".", "num_data", "=", "len", "(", "self", ".", "data", ")", "\n", "self", ".", "softlabel", "=", "np", ".", "ones", "(", "[", "self", ".", "num_data", ",", "self", ".", "num_class", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_data", ")", ":", "\n", "                    ", "self", ".", "softlabel", "[", "i", ",", "self", ".", "targets", "[", "i", "]", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.__getitem__": [[87, 108], ["PIL.Image.fromarray", "int", "mnist_prepare.MNIST.numpy", "mnist_prepare.MNIST.transform", "mnist_prepare.MNIST.target_transform"], "methods", ["None"], ["", "", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", ",", "softlabel", "=", "self", ".", "data", "[", "index", "]", ",", "int", "(", "self", ".", "targets", "[", "index", "]", ")", ",", "self", ".", "softlabel", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "numpy", "(", ")", ",", "mode", "=", "'L'", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", ",", "softlabel", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.__len__": [[109, 111], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.raw_folder": [[112, 115], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_folder", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "__class__", ".", "__name__", ",", "'raw'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.processed_folder": [[116, 119], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_folder", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "__class__", ".", "__name__", ",", "'processed'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.class_to_idx": [[120, 123], ["enumerate"], "methods", ["None"], ["", "@", "property", "\n", "def", "class_to_idx", "(", "self", ")", ":", "\n", "        ", "return", "{", "_class", ":", "i", "for", "i", ",", "_class", "in", "enumerate", "(", "self", ".", "classes", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST._check_exists": [[124, 127], ["os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "_check_exists", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "processed_folder", ",", "self", ".", "training_file", ")", ")", "and", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "processed_folder", ",", "self", ".", "test_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.extract_gzip": [[128, 136], ["print", "open", "gzip.GzipFile", "out_f.write", "os.unlink", "os.unlink", "os.unlink", "os.unlink", "gzip_path.replace", "zip_f.read"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "extract_gzip", "(", "gzip_path", ",", "remove_finished", "=", "False", ")", ":", "\n", "        ", "print", "(", "'Extracting {}'", ".", "format", "(", "gzip_path", ")", ")", "\n", "with", "open", "(", "gzip_path", ".", "replace", "(", "'.gz'", ",", "''", ")", ",", "'wb'", ")", "as", "out_f", ",", "gzip", ".", "GzipFile", "(", "gzip_path", ")", "as", "zip_f", ":", "\n", "            ", "out_f", ".", "write", "(", "zip_f", ".", "read", "(", ")", ")", "\n", "", "if", "remove_finished", ":", "\n", "            ", "os", ".", "unlink", "(", "gzip_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.download": [[137, 170], ["mnist_prepare.MNIST._check_exists", "utils.makedir_exist_ok", "utils.makedir_exist_ok", "print", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "utils.download_url", "mnist_prepare.MNIST.extract_gzip", "mnist_prepare.read_image_file", "mnist_prepare.read_label_file", "mnist_prepare.read_image_file", "mnist_prepare.read_label_file", "open", "torch.save", "torch.save", "torch.save", "torch.save", "open", "torch.save", "torch.save", "torch.save", "torch.save", "url.rpartition", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST._check_exists", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.utils.makedir_exist_ok", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.utils.makedir_exist_ok", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.utils.download_url", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.extract_gzip", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.read_image_file", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.read_label_file", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.read_image_file", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.read_label_file"], ["", "", "def", "download", "(", "self", ")", ":", "\n", "        ", "\"\"\"Download the MNIST data if it doesn't exist in processed_folder already.\"\"\"", "\n", "\n", "if", "self", ".", "_check_exists", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "makedir_exist_ok", "(", "self", ".", "raw_folder", ")", "\n", "makedir_exist_ok", "(", "self", ".", "processed_folder", ")", "\n", "\n", "# download files", "\n", "for", "url", "in", "self", ".", "urls", ":", "\n", "            ", "filename", "=", "url", ".", "rpartition", "(", "'/'", ")", "[", "2", "]", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "raw_folder", ",", "filename", ")", "\n", "download_url", "(", "url", ",", "root", "=", "self", ".", "raw_folder", ",", "filename", "=", "filename", ",", "md5", "=", "None", ")", "\n", "self", ".", "extract_gzip", "(", "gzip_path", "=", "file_path", ",", "remove_finished", "=", "True", ")", "\n", "\n", "# process and save as torch files", "\n", "", "print", "(", "'Processing...'", ")", "\n", "\n", "training_set", "=", "(", "\n", "read_image_file", "(", "os", ".", "path", ".", "join", "(", "self", ".", "raw_folder", ",", "'train-images-idx3-ubyte'", ")", ")", ",", "\n", "read_label_file", "(", "os", ".", "path", ".", "join", "(", "self", ".", "raw_folder", ",", "'train-labels-idx1-ubyte'", ")", ")", "\n", ")", "\n", "test_set", "=", "(", "\n", "read_image_file", "(", "os", ".", "path", ".", "join", "(", "self", ".", "raw_folder", ",", "'t10k-images-idx3-ubyte'", ")", ")", ",", "\n", "read_label_file", "(", "os", ".", "path", ".", "join", "(", "self", ".", "raw_folder", ",", "'t10k-labels-idx1-ubyte'", ")", ")", "\n", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "processed_folder", ",", "self", ".", "training_file", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "torch", ".", "save", "(", "training_set", ",", "f", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "processed_folder", ",", "self", ".", "test_file", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "torch", ".", "save", "(", "test_set", ",", "f", ")", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.__repr__": [[171, 182], ["mnist_prepare.MNIST.__len__", "mnist_prepare.MNIST.transform.__repr__().replace", "mnist_prepare.MNIST.target_transform.__repr__().replace", "mnist_prepare.MNIST.transform.__repr__", "mnist_prepare.MNIST.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__len__", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__repr__", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "tmp", "=", "self", ".", "split", "\n", "fmt_str", "+=", "'    Split: {}\\n'", ".", "format", "(", "tmp", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.update_corrupted_label": [[183, 185], ["None"], "methods", ["None"], ["", "def", "update_corrupted_label", "(", "self", ",", "noise_label", ")", ":", "\n", "        ", "self", ".", "targets", "[", ":", "]", "=", "noise_label", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.update_corrupted_softlabel": [[186, 188], ["None"], "methods", ["None"], ["", "def", "update_corrupted_softlabel", "(", "self", ",", "noise_label", ")", ":", "\n", "        ", "self", ".", "softlabel", "[", ":", "]", "=", "noise_label", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.modify_selected_data": [[189, 191], ["None"], "methods", ["None"], ["", "def", "modify_selected_data", "(", "self", ",", "modified_data", ",", "indices", ")", ":", "\n", "        ", "self", ".", "data", "[", "indices", "]", "=", "modified_data", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.modify_selected_label": [[192, 196], ["numpy.array", "list"], "methods", ["None"], ["", "def", "modify_selected_label", "(", "self", ",", "modified_label", ",", "indices", ")", ":", "\n", "        ", "temp", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "temp", "[", "indices", "]", "=", "modified_label", "\n", "self", ".", "targets", "=", "list", "(", "temp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.modify_selected_softlabel": [[197, 199], ["None"], "methods", ["None"], ["", "def", "modify_selected_softlabel", "(", "self", ",", "modified_softlabel", ",", "indices", ")", ":", "\n", "        ", "self", ".", "softlabel", "[", "indices", "]", "=", "modified_softlabel", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.update_selected_data": [[200, 206], ["numpy.array", "mnist_prepare.MNIST.targets.tolist"], "methods", ["None"], ["", "def", "update_selected_data", "(", "self", ",", "selected_indices", ")", ":", "\n", "        ", "self", ".", "data", "=", "self", ".", "data", "[", "selected_indices", "]", "\n", "\n", "self", ".", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", "selected_indices", "]", "\n", "self", ".", "targets", "=", "self", ".", "targets", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.ignore_noise_data": [[207, 217], ["len", "list", "numpy.array", "numpy.array", "mnist_prepare.MNIST.targets.tolist", "set", "set", "range"], "methods", ["None"], ["", "def", "ignore_noise_data", "(", "self", ",", "noisy_data_indices", ")", ":", "\n", "        ", "total", "=", "len", "(", "self", ".", "data", ")", "\n", "remain", "=", "list", "(", "set", "(", "range", "(", "total", ")", ")", "-", "set", "(", "noisy_data_indices", ")", ")", "\n", "remain", "=", "np", ".", "array", "(", "remain", ")", "\n", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "remain", "]", "\n", "self", ".", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", "remain", "]", "\n", "self", ".", "targets", "=", "self", ".", "targets", ".", "tolist", "(", ")", "\n", "self", ".", "softlabel", "=", "self", ".", "softlabel", "[", "remain", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.get_data_labels": [[218, 220], ["None"], "methods", ["None"], ["", "def", "get_data_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.MNIST.get_data_softlabel": [[221, 223], ["None"], "methods", ["None"], ["", "def", "get_data_softlabel", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "softlabel", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.get_int": [[225, 227], ["int", "codecs.encode"], "function", ["None"], ["", "", "def", "get_int", "(", "b", ")", ":", "\n", "    ", "return", "int", "(", "codecs", ".", "encode", "(", "b", ",", "'hex'", ")", ",", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.read_label_file": [[229, 236], ["open", "f.read", "mnist_prepare.get_int", "numpy.frombuffer", "torch.from_numpy().view().long", "torch.from_numpy().view().long", "mnist_prepare.get_int", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.get_int", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.get_int"], ["", "def", "read_label_file", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data", "=", "f", ".", "read", "(", ")", "\n", "assert", "get_int", "(", "data", "[", ":", "4", "]", ")", "==", "2049", "\n", "length", "=", "get_int", "(", "data", "[", "4", ":", "8", "]", ")", "\n", "parsed", "=", "np", ".", "frombuffer", "(", "data", ",", "dtype", "=", "np", ".", "uint8", ",", "offset", "=", "8", ")", "\n", "return", "torch", ".", "from_numpy", "(", "parsed", ")", ".", "view", "(", "length", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.read_image_file": [[238, 247], ["open", "f.read", "mnist_prepare.get_int", "mnist_prepare.get_int", "mnist_prepare.get_int", "numpy.frombuffer", "torch.from_numpy().view", "torch.from_numpy().view", "mnist_prepare.get_int", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.get_int", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.get_int", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.get_int", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.mnist_prepare.get_int"], ["", "", "def", "read_image_file", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data", "=", "f", ".", "read", "(", ")", "\n", "assert", "get_int", "(", "data", "[", ":", "4", "]", ")", "==", "2051", "\n", "length", "=", "get_int", "(", "data", "[", "4", ":", "8", "]", ")", "\n", "num_rows", "=", "get_int", "(", "data", "[", "8", ":", "12", "]", ")", "\n", "num_cols", "=", "get_int", "(", "data", "[", "12", ":", "16", "]", ")", "\n", "parsed", "=", "np", ".", "frombuffer", "(", "data", ",", "dtype", "=", "np", ".", "uint8", ",", "offset", "=", "16", ")", "\n", "return", "torch", ".", "from_numpy", "(", "parsed", ")", ".", "view", "(", "length", ",", "num_rows", ",", "num_cols", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.pc_prepare.ModelNet40.__init__": [[191, 254], ["range", "numpy.concatenate", "numpy.concatenate", "numpy.squeeze().tolist", "os.path.dirname", "pc_prepare.modelnet40_load", "pc_prepare.modelnet40_load", "len", "os.path.join", "torch.loadDataFile", "numpy.concatenate.append", "numpy.concatenate.append", "range", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "range", "os.path.abspath", "len", "int", "len", "numpy.squeeze", "numpy.where", "res_point_sets.append", "res_labels.append", "res_point_sets.append", "res_labels.append", "len"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.pc_prepare.modelnet40_load", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.pc_prepare.modelnet40_load", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.loadDataFile"], ["    ", "def", "__init__", "(", "self", ",", "num_ptrs", "=", "1024", ",", "random_selection", "=", "False", ",", "random_rotation", "=", "False", ",", "\n", "random_jitter", "=", "False", ",", "random_scale", "=", "False", ",", "random_translation", "=", "False", ",", "random_dropout", "=", "False", ",", "\n", "split", "=", "'train'", ",", "train_ratio", "=", "0.8", ",", "root_dir", "=", "'/home/songzhu/PycharmProjects/untitled/LDAA/'", ")", ":", "\n", "        ", "self", ".", "npoints", "=", "num_ptrs", "\n", "self", ".", "random_rotation", "=", "random_rotation", "\n", "self", ".", "random_selection", "=", "random_selection", "\n", "self", ".", "random_jitter", "=", "random_jitter", "\n", "self", ".", "random_scale", "=", "random_scale", "\n", "self", ".", "random_translation", "=", "random_translation", "\n", "self", ".", "random_dropout", "=", "random_dropout", "\n", "\n", "if", "root_dir", "is", "None", ":", "\n", "            ", "self", ".", "root_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "root_dir", "=", "root_dir", "\n", "\n", "", "if", "split", "==", "'train'", "or", "split", "==", "'val'", ":", "\n", "            ", "data_files", ",", "_", "=", "modelnet40_load", "(", "self", ".", "root_dir", ",", "load_train_data", "=", "True", ",", "load_test_data", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "data_files", "=", "modelnet40_load", "(", "self", ".", "root_dir", ",", "load_train_data", "=", "False", ",", "load_test_data", "=", "True", ")", "\n", "\n", "", "point_sets", ",", "labels", "=", "[", "]", ",", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "data_files", ")", ")", ":", "\n", "            ", "data_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "data_files", "[", "idx", "]", ")", "\n", "current_data", ",", "current_label", "=", "provider", ".", "loadDataFile", "(", "data_file_path", ")", "\n", "\n", "point_sets", ".", "append", "(", "current_data", ")", "\n", "labels", ".", "append", "(", "current_label", ")", "\n", "\n", "", "point_sets", "=", "np", ".", "concatenate", "(", "point_sets", ",", "axis", "=", "0", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ",", "axis", "=", "0", ")", "\n", "\n", "self", ".", "point_sets", "=", "point_sets", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "num_classes", "=", "40", "\n", "\n", "# create train val split", "\n", "res_point_sets", "=", "[", "]", "\n", "res_labels", "=", "[", "]", "\n", "\n", "if", "split", "==", "'train'", "or", "split", "==", "'val'", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "select_idx", "=", "np", ".", "where", "(", "self", ".", "labels", "==", "i", ")", "[", "0", "]", "\n", "select_data", "=", "self", ".", "point_sets", "[", "select_idx", "]", "\n", "select_labels", "=", "self", ".", "labels", "[", "select_idx", "]", "\n", "\n", "select_num", "=", "len", "(", "select_idx", ")", "\n", "train_num", "=", "int", "(", "select_num", "*", "train_ratio", ")", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "                    ", "res_point_sets", ".", "append", "(", "select_data", "[", ":", "train_num", "]", ")", "\n", "res_labels", ".", "append", "(", "select_labels", "[", ":", "train_num", "]", ")", "\n", "", "else", ":", "\n", "                    ", "res_point_sets", ".", "append", "(", "select_data", "[", "train_num", ":", "]", ")", "\n", "res_labels", ".", "append", "(", "select_labels", "[", "train_num", ":", "]", ")", "\n", "\n", "", "", "self", ".", "point_sets", "=", "np", ".", "concatenate", "(", "res_point_sets", ",", "0", ")", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "res_labels", ",", "0", ")", "\n", "self", ".", "softlabels", "=", "np", ".", "zeros", "(", "[", "len", "(", "point_sets", ")", ",", "self", ".", "num_classes", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "select_data", ")", ")", ":", "\n", "                ", "self", ".", "softlabels", "[", "i", ",", "self", ".", "labels", "[", "i", "]", "]", "=", "1", "\n", "\n", "", "", "self", ".", "labels", "=", "np", ".", "squeeze", "(", "self", ".", "labels", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.pc_prepare.ModelNet40.__getitem__": [[255, 288], ["numpy.zeros", "numpy.random.choice", "torch.random_rotation_about_origin_instance", "torch.jitter_point_cloud_instance", "torch.random_scale_point_cloud_instance", "torch.random_translation_point_cloud_instance", "torch.random_point_dropout_instance_instance", "data.random_point_dropout_instance_instance.astype", "int"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.random_rotation_about_origin_instance", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.jitter_point_cloud_instance", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.random_scale_point_cloud_instance", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.random_translation_point_cloud_instance", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.random_point_dropout_instance_instance"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "selected_point_set", "=", "self", ".", "point_sets", "[", "index", "]", "\n", "\n", "# randomly sample npoints from the selected point cloud", "\n", "if", "self", ".", "random_selection", ":", "\n", "            ", "choice", "=", "np", ".", "random", ".", "choice", "(", "selected_point_set", ".", "shape", "[", "0", "]", ",", "self", ".", "npoints", ",", "replace", "=", "False", ")", "\n", "sampled_point_set", "=", "selected_point_set", "[", "choice", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "sampled_point_set", "=", "selected_point_set", "[", "0", ":", "self", ".", "npoints", ",", ":", "]", "\n", "\n", "# random rotation for data augmentation", "\n", "", "if", "self", ".", "random_rotation", ":", "\n", "            ", "sampled_point_set", "=", "provider", ".", "random_rotation_about_origin_instance", "(", "sampled_point_set", ")", "\n", "# sampled_point_set = provider.rotate_point_cloud_instance(sampled_point_set)", "\n", "\n", "", "if", "self", ".", "random_jitter", ":", "\n", "            ", "sampled_point_set", "=", "provider", ".", "jitter_point_cloud_instance", "(", "sampled_point_set", ")", "\n", "# sampled_point_set = np.clip(sampled_point_set, -1.0, 1.0)", "\n", "\n", "", "if", "self", ".", "random_scale", ":", "\n", "            ", "sampled_point_set", "=", "provider", ".", "random_scale_point_cloud_instance", "(", "sampled_point_set", ")", "\n", "\n", "", "if", "self", ".", "random_translation", ":", "\n", "            ", "sampled_point_set", "=", "provider", ".", "random_translation_point_cloud_instance", "(", "sampled_point_set", ")", "\n", "\n", "", "if", "self", ".", "random_dropout", ":", "\n", "            ", "sampled_point_set", "=", "provider", ".", "random_point_dropout_instance_instance", "(", "sampled_point_set", ")", "\n", "\n", "", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "softlabels", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "softlabels", "[", "int", "(", "label", ")", "]", "=", "1", "\n", "\n", "return", "sampled_point_set", ".", "astype", "(", "np", ".", "float32", ")", ",", "label", ",", "softlabels", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.pc_prepare.ModelNet40.__len__": [[289, 291], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.pc_prepare.ModelNet40.update_corrupted_label": [[292, 294], ["None"], "methods", ["None"], ["", "def", "update_corrupted_label", "(", "self", ",", "noise_label", ")", ":", "\n", "        ", "self", ".", "labels", "[", ":", "]", "=", "noise_label", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.pc_prepare.ModelNet40.update_corrupted_softlabel": [[295, 297], ["None"], "methods", ["None"], ["", "def", "update_corrupted_softlabel", "(", "self", ",", "noise_label", ")", ":", "\n", "        ", "self", ".", "softlabels", "=", "noise_label", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.pc_prepare.ModelNet40.update_selected_data": [[298, 304], ["numpy.array", "pc_prepare.ModelNet40.labels.tolist"], "methods", ["None"], ["", "def", "update_selected_data", "(", "self", ",", "selected_indices", ")", ":", "\n", "        ", "self", ".", "point_sets", "=", "self", ".", "point_sets", "[", "selected_indices", "]", "\n", "\n", "self", ".", "labels", "=", "np", ".", "array", "(", "self", ".", "labels", ")", "\n", "self", ".", "labels", "=", "self", ".", "labels", "[", "selected_indices", "]", "\n", "self", ".", "labels", "=", "self", ".", "labels", ".", "tolist", "(", ")", "/", "home", "/", "songzhu", "/", "PycharmProjects", "/", "untitled", "/", "LDAA", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.pc_prepare.ModelNet40.ignore_noise_data": [[305, 316], ["len", "list", "numpy.array", "numpy.array", "pc_prepare.ModelNet40.labels.tolist", "set", "set", "range"], "methods", ["None"], ["", "def", "ignore_noise_data", "(", "self", ",", "noisy_data_indices", ")", ":", "\n", "        ", "total", "=", "len", "(", "self", ".", "point_sets", ")", "\n", "remain", "=", "list", "(", "set", "(", "range", "(", "total", ")", ")", "-", "set", "(", "noisy_data_indices", ")", ")", "\n", "remain", "=", "np", ".", "array", "(", "remain", ")", "\n", "\n", "self", ".", "point_sets", "=", "self", ".", "point_sets", "[", "remain", "]", "\n", "self", ".", "labels", "=", "np", ".", "array", "(", "self", ".", "labels", ")", "\n", "self", ".", "labels", "=", "self", ".", "labels", "[", "remain", "]", "\n", "self", ".", "labels", "=", "self", ".", "labels", ".", "tolist", "(", ")", "\n", "\n", "self", ".", "softlabels", "=", "self", ".", "softlabels", "[", "remain", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.pc_prepare.ModelNet40.get_data_labels": [[317, 319], ["None"], "methods", ["None"], ["", "def", "get_data_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.pc_prepare.ModelNet40.get_data_softlabel": [[320, 327], ["len", "len", "numpy.zeros", "range", "numpy.unique", "int"], "methods", ["None"], ["", "def", "get_data_softlabel", "(", "self", ")", ":", "\n", "        ", "num_class", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "labels", ")", ")", "\n", "npoints", "=", "len", "(", "self", ".", "labels", ")", "\n", "soft_labels", "=", "np", ".", "zeros", "(", "[", "npoints", ",", "num_class", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "npoints", ")", ":", "\n", "            ", "soft_labels", "[", "i", ",", "int", "(", "self", ".", "labels", "[", "i", "]", ")", "]", "=", "1", "\n", "", "return", "soft_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.pc_prepare.modelnet40_load": [[172, 188], ["data.getDataFiles", "data.getDataFiles", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.getDataFiles", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.provider.getDataFiles"], ["def", "modelnet40_load", "(", "root_dir", ",", "load_train_data", "=", "True", ",", "load_test_data", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Load modelnet40 data.\n    \"\"\"", "\n", "# ModelNet40 official train/test split", "\n", "train_files", "=", "[", "]", "\n", "test_files", "=", "[", "]", "\n", "\n", "if", "load_train_data", ":", "\n", "        ", "train_files", "=", "provider", ".", "getDataFiles", "(", "\n", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'data/modelnet40_ply_hdf5_2048/train_files.txt'", ")", ")", "\n", "", "if", "load_test_data", ":", "\n", "        ", "test_files", "=", "provider", ".", "getDataFiles", "(", "\n", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'data/modelnet40_ply_hdf5_2048/test_files.txt'", ")", ")", "\n", "\n", "", "return", "train_files", ",", "test_files", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__init__": [[54, 133], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "numpy.vstack().reshape", "cifar_prepare.CIFAR10.data.transpose", "cifar_prepare.CIFAR10._load_meta", "cifar_prepare.CIFAR10.download", "cifar_prepare.CIFAR10._check_integrity", "RuntimeError", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "int", "len", "int", "len", "len", "range", "open", "cifar_prepare.CIFAR10.data.append", "numpy.vstack", "numpy.unique", "range", "numpy.unique", "pickle.load", "pickle.load", "cifar_prepare.CIFAR10.targets.extend", "cifar_prepare.CIFAR10.targets.extend", "range", "range", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10._load_meta", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.download", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10._check_integrity"], ["def", "__init__", "(", "self", ",", "root", ",", "split", "=", "'train'", ",", "train_ratio", "=", "0.8", ",", "trust_ratio", "=", "0.1", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ")", ":", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "split", "=", "split", "# training set, validation set or test set", "\n", "self", ".", "train_ratio", "=", "train_ratio", "\n", "self", ".", "trust_ratio", "=", "trust_ratio", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "\n", "", "if", "self", ".", "split", "==", "'test'", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "test_list", "\n", "", "else", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "train_list", "\n", "\n", "", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "# now load the picked numpy arrays", "\n", "for", "file_name", ",", "checksum", "in", "downloaded_list", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "file_name", ")", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'labels'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'fine_labels'", "]", ")", "\n", "\n", "", "", "", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "\n", "eps", "=", "0.001", "\n", "\n", "# split the original train set into train & validation set", "\n", "if", "self", ".", "split", "!=", "'test'", ":", "\n", "            ", "num_data", "=", "len", "(", "self", ".", "data", ")", "\n", "trust_num", "=", "int", "(", "num_data", "*", "self", ".", "trust_ratio", ")", "\n", "self", ".", "num_class", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "targets", ")", ")", "\n", "\n", "remain", "=", "num_data", "-", "trust_num", "\n", "train_num", "=", "int", "(", "remain", "*", "self", ".", "train_ratio", ")", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", ":", "train_num", "]", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", ":", "train_num", "]", "\n", "# Add softlabel here", "\n", "self", ".", "softlabel", "=", "np", ".", "ones", "(", "[", "train_num", ",", "self", ".", "num_class", "]", ",", "dtype", "=", "np", ".", "float32", ")", "*", "eps", "/", "self", ".", "num_class", "\n", "for", "i", "in", "range", "(", "train_num", ")", ":", "\n", "                    ", "self", ".", "softlabel", "[", "i", ",", "self", ".", "targets", "[", "i", "]", "]", "=", "1", "-", "eps", "\n", "", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "train_num", ":", "remain", "]", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", "train_num", ":", "remain", "]", "\n", "self", ".", "softlabel", "=", "np", ".", "ones", "(", "[", "(", "remain", "-", "train_num", ")", ",", "self", ".", "num_class", "]", ",", "dtype", "=", "np", ".", "float32", ")", "*", "eps", "/", "self", ".", "num_class", "\n", "for", "i", "in", "range", "(", "remain", "-", "train_num", ")", ":", "\n", "                    ", "self", ".", "softlabel", "[", "i", ",", "self", ".", "targets", "[", "i", "]", "]", "=", "1", "-", "eps", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "remain", ":", "]", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", "remain", ":", "]", "\n", "self", ".", "softlabel", "=", "np", ".", "ones", "(", "[", "(", "num_data", "-", "remain", ")", ",", "self", ".", "num_class", "]", ",", "dtype", "=", "np", ".", "float32", ")", "*", "eps", "/", "self", ".", "num_class", "\n", "for", "i", "in", "range", "(", "num_data", "-", "remain", ")", ":", "\n", "                    ", "self", ".", "softlabel", "[", "i", ",", "self", ".", "targets", "[", "i", "]", "]", "=", "1", "-", "eps", "\n", "", "", "", "else", ":", "\n", "            ", "num_data", "=", "len", "(", "self", ".", "data", ")", "\n", "self", ".", "num_class", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "targets", ")", ")", "\n", "self", ".", "softlabel", "=", "np", ".", "ones", "(", "[", "num_data", ",", "self", ".", "num_class", "]", ",", "dtype", "=", "np", ".", "float32", ")", "*", "eps", "/", "self", ".", "num_class", "\n", "for", "i", "in", "range", "(", "num_data", ")", ":", "\n", "                ", "self", ".", "softlabel", "[", "i", ",", "self", ".", "targets", "[", "i", "]", "]", "=", "1", "-", "eps", "\n", "\n", "", "", "self", ".", "_load_meta", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10._load_meta": [[134, 146], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "pickle.load.utils.check_integrity", "RuntimeError", "open", "pickle.load", "pickle.load", "enumerate"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.utils.check_integrity"], ["", "def", "_load_meta", "(", "self", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "meta", "[", "'filename'", "]", ")", "\n", "if", "not", "check_integrity", "(", "path", ",", "self", ".", "meta", "[", "'md5'", "]", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset metadata file not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "", "with", "open", "(", "path", ",", "'rb'", ")", "as", "infile", ":", "\n", "            ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "classes", "=", "data", "[", "self", ".", "meta", "[", "'key'", "]", "]", "\n", "", "self", ".", "class_to_idx", "=", "{", "_class", ":", "i", "for", "i", ",", "_class", "in", "enumerate", "(", "self", ".", "classes", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__getitem__": [[147, 167], ["PIL.Image.fromarray", "cifar_prepare.CIFAR10.transform", "cifar_prepare.CIFAR10.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", ",", "softlabel", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", ",", "self", ".", "softlabel", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", ",", "softlabel", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__len__": [[168, 170], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10._check_integrity": [[171, 179], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.utils.check_integrity"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.utils.check_integrity"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "test_list", ")", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.download": [[180, 192], ["cifar_prepare.CIFAR10._check_integrity", "torch.utils.download_url", "print", "tarfile.open", "tar.extractall", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10._check_integrity", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.utils.download_url"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "tarfile", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "'Files already downloaded and verified'", ")", "\n", "return", "\n", "\n", "", "download_url", "(", "self", ".", "url", ",", "self", ".", "root", ",", "self", ".", "filename", ",", "self", ".", "tgz_md5", ")", "\n", "\n", "# extract file", "\n", "with", "tarfile", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", ",", "\"r:gz\"", ")", "as", "tar", ":", "\n", "            ", "tar", ".", "extractall", "(", "path", "=", "self", ".", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__repr__": [[193, 204], ["cifar_prepare.CIFAR10.__len__", "cifar_prepare.CIFAR10.transform.__repr__().replace", "cifar_prepare.CIFAR10.target_transform.__repr__().replace", "cifar_prepare.CIFAR10.transform.__repr__", "cifar_prepare.CIFAR10.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__len__", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__repr__", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.__repr__"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "tmp", "=", "self", ".", "split", "\n", "fmt_str", "+=", "'    Split: {}\\n'", ".", "format", "(", "tmp", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.demean": [[205, 211], ["cifar_prepare.CIFAR10.data.mean", "range"], "methods", ["None"], ["", "def", "demean", "(", "self", ")", ":", "\n", "        ", "m", "=", "self", ".", "data", ".", "mean", "(", "(", "0", ",", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "data", "[", "i", ",", "0", "]", "=", "self", ".", "data", "[", "i", ",", "0", "]", "-", "m", "\n", "self", ".", "data", "[", "i", ",", "1", "]", "=", "self", ".", "data", "[", "i", ",", "1", "]", "-", "m", "\n", "self", ".", "data", "[", "i", ",", "2", "]", "=", "self", ".", "data", "[", "i", ",", "2", "]", "-", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.update_corrupted_label": [[212, 214], ["None"], "methods", ["None"], ["", "", "def", "update_corrupted_label", "(", "self", ",", "noise_label", ")", ":", "\n", "        ", "self", ".", "targets", "[", ":", "]", "=", "noise_label", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.update_corrupted_softlabel": [[215, 217], ["None"], "methods", ["None"], ["", "def", "update_corrupted_softlabel", "(", "self", ",", "soft_label", ")", ":", "\n", "        ", "self", ".", "softlabel", "[", ":", "]", "=", "soft_label", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.modify_selected_data": [[218, 220], ["None"], "methods", ["None"], ["", "def", "modify_selected_data", "(", "self", ",", "modified_data", ",", "indices", ")", ":", "\n", "        ", "self", ".", "data", "[", "indices", "]", "=", "modified_data", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.modify_selected_label": [[221, 225], ["numpy.array", "list"], "methods", ["None"], ["", "def", "modify_selected_label", "(", "self", ",", "modified_label", ",", "indices", ")", ":", "\n", "        ", "self", ".", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "self", ".", "targets", "[", "indices", "]", "=", "modified_label", "\n", "self", ".", "targets", "=", "list", "(", "self", ".", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.modify_selected_softlabel": [[226, 228], ["None"], "methods", ["None"], ["", "def", "modify_selected_softlabel", "(", "self", ",", "modified_softlabel", ",", "indices", ")", ":", "\n", "        ", "self", ".", "softlabel", "[", "indices", "]", "=", "modified_softlabel", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.update_selected_data": [[229, 237], ["numpy.array", "cifar_prepare.CIFAR10.targets.tolist"], "methods", ["None"], ["", "def", "update_selected_data", "(", "self", ",", "selected_indices", ")", ":", "\n", "        ", "self", ".", "data", "=", "self", ".", "data", "[", "selected_indices", "]", "\n", "\n", "self", ".", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", "selected_indices", "]", "\n", "self", ".", "targets", "=", "self", ".", "targets", ".", "tolist", "(", ")", "\n", "\n", "self", ".", "softlabel", "=", "self", ".", "softlabel", "[", "selected_indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.ignore_noise_data": [[238, 251], ["len", "list", "numpy.array", "numpy.array", "cifar_prepare.CIFAR10.targets.tolist", "set", "set", "range"], "methods", ["None"], ["", "def", "ignore_noise_data", "(", "self", ",", "noisy_data_indices", ")", ":", "\n", "        ", "total", "=", "len", "(", "self", ".", "data", ")", "\n", "remain", "=", "list", "(", "set", "(", "range", "(", "total", ")", ")", "-", "set", "(", "noisy_data_indices", ")", ")", "\n", "remain", "=", "np", ".", "array", "(", "remain", ")", "\n", "\n", "# print('remain shape', remain.shape)", "\n", "\n", "if", "remain", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", "[", "remain", "]", "\n", "self", ".", "targets", "=", "np", ".", "array", "(", "self", ".", "targets", ")", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", "remain", "]", "\n", "self", ".", "targets", "=", "self", ".", "targets", ".", "tolist", "(", ")", "\n", "self", ".", "softlabel", "=", "self", ".", "softlabel", "[", "remain", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.get_data_labels": [[252, 254], ["None"], "methods", ["None"], ["", "", "def", "get_data_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.cifar_prepare.CIFAR10.get_data_softlabel": [[255, 257], ["None"], "methods", ["None"], ["", "def", "get_data_softlabel", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "softlabel", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.utils.gen_bar_updater": [[8, 16], ["pbar.update"], "function", ["None"], ["def", "gen_bar_updater", "(", "pbar", ")", ":", "\n", "    ", "def", "bar_update", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "        ", "if", "pbar", ".", "total", "is", "None", "and", "total_size", ":", "\n", "            ", "pbar", ".", "total", "=", "total_size", "\n", "", "progress_bytes", "=", "count", "*", "block_size", "\n", "pbar", ".", "update", "(", "progress_bytes", "-", "pbar", ".", "n", ")", "\n", "\n", "", "return", "bar_update", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.utils.check_integrity": [[18, 32], ["hashlib.md5", "hashlib.md5.hexdigest", "os.path.isfile", "os.path.isfile", "open", "iter", "hashlib.md5.update", "f.read"], "function", ["None"], ["", "def", "check_integrity", "(", "fpath", ",", "md5", "=", "None", ")", ":", "\n", "    ", "if", "md5", "is", "None", ":", "\n", "        ", "return", "True", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "\n", "        ", "return", "False", "\n", "", "md5o", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "fpath", ",", "'rb'", ")", "as", "f", ":", "\n", "# read in 1MB chunks", "\n", "        ", "for", "chunk", "in", "iter", "(", "lambda", ":", "f", ".", "read", "(", "1024", "*", "1024", ")", ",", "b''", ")", ":", "\n", "            ", "md5o", ".", "update", "(", "chunk", ")", "\n", "", "", "md5c", "=", "md5o", ".", "hexdigest", "(", ")", "\n", "if", "md5c", "!=", "md5", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.utils.makedir_exist_ok": [[34, 45], ["os.makedirs", "os.makedirs"], "function", ["None"], ["", "def", "makedir_exist_ok", "(", "dirpath", ")", ":", "\n", "    ", "\"\"\"\n    Python2 support for os.makedirs(.., exist_ok=True)\n    \"\"\"", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirpath", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "==", "errno", ".", "EEXIST", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.utils.download_url": [[47, 83], ["os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "utils.makedir_exist_ok", "os.path.basename", "os.path.basename", "os.path.isfile", "os.path.isfile", "utils.check_integrity", "print", "print", "urllib.request.urlretrieve", "utils.gen_bar_updater", "url.replace.replace", "print", "urllib.request.urlretrieve", "tqdm.tqdm", "utils.gen_bar_updater", "tqdm.tqdm"], "function", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.data.utils.makedir_exist_ok", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.utils.check_integrity", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.utils.gen_bar_updater", "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.utils.gen_bar_updater"], ["", "", "", "def", "download_url", "(", "url", ",", "root", ",", "filename", "=", "None", ",", "md5", "=", "None", ")", ":", "\n", "    ", "\"\"\"Download a file from a url and place it in root.\n\n    Args:\n        url (str): URL to download file from\n        root (str): Directory to place downloaded file in\n        filename (str): Name to save the file under. If None, use the basename of the URL\n        md5 (str): MD5 checksum of the download. If None, do not check\n    \"\"\"", "\n", "from", "six", ".", "moves", "import", "urllib", "\n", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "if", "not", "filename", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "basename", "(", "url", ")", "\n", "", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "\n", "makedir_exist_ok", "(", "root", ")", "\n", "\n", "# downloads file", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fpath", ")", "and", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "        ", "print", "(", "'Using downloaded and verified file: '", "+", "fpath", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "'Downloading '", "+", "url", "+", "' to '", "+", "fpath", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "\n", "url", ",", "fpath", ",", "\n", "reporthook", "=", "gen_bar_updater", "(", "tqdm", "(", "unit", "=", "'B'", ",", "unit_scale", "=", "True", ")", ")", "\n", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "if", "url", "[", ":", "5", "]", "==", "'https'", ":", "\n", "                ", "url", "=", "url", ".", "replace", "(", "'https:'", ",", "'http:'", ")", "\n", "print", "(", "'Failed download. Trying https -> http instead.'", "\n", "' Downloading '", "+", "url", "+", "' to '", "+", "fpath", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "\n", "url", ",", "fpath", ",", "\n", "reporthook", "=", "gen_bar_updater", "(", "tqdm", "(", "unit", "=", "'B'", ",", "unit_scale", "=", "True", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.utils.list_dir": [[86, 106], ["os.path.expanduser", "os.path.expanduser", "list", "filter", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.isdir", "os.path.isdir", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "", "", "def", "list_dir", "(", "root", ",", "prefix", "=", "False", ")", ":", "\n", "    ", "\"\"\"List all directories at a given root\n\n    Args:\n        root (str): Path to directory whose folders need to be listed\n        prefix (bool, optional): If true, prepends the path to each result, otherwise\n            only returns the name of the directories found\n    \"\"\"", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "directories", "=", "list", "(", "\n", "filter", "(", "\n", "lambda", "p", ":", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "p", ")", ")", ",", "\n", "os", ".", "listdir", "(", "root", ")", "\n", ")", "\n", ")", "\n", "\n", "if", "prefix", "is", "True", ":", "\n", "        ", "directories", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "d", ")", "for", "d", "in", "directories", "]", "\n", "\n", "", "return", "directories", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.data.utils.list_files": [[108, 130], ["os.path.expanduser", "os.path.expanduser", "list", "filter", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "p.endswith", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "list_files", "(", "root", ",", "suffix", ",", "prefix", "=", "False", ")", ":", "\n", "    ", "\"\"\"List all files ending with a suffix at a given root\n\n    Args:\n        root (str): Path to directory whose folders need to be listed\n        suffix (str or tuple): Suffix of the files to match, e.g. '.png' or ('.jpg', '.png').\n            It uses the Python \"str.endswith\" method and is passed directly\n        prefix (bool, optional): If true, prepends the path to each result, otherwise\n            only returns the name of the files found\n    \"\"\"", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "files", "=", "list", "(", "\n", "filter", "(", "\n", "lambda", "p", ":", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "root", ",", "p", ")", ")", "and", "p", ".", "endswith", "(", "suffix", ")", ",", "\n", "os", ".", "listdir", "(", "root", ")", "\n", ")", "\n", ")", "\n", "\n", "if", "prefix", "is", "True", ":", "\n", "        ", "files", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "d", ")", "for", "d", "in", "files", "]", "\n", "\n", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.build_uniform_P": [[4, 15], ["numpy.fill_diagonal", "numpy.ones", "numpy.ones"], "function", ["None"], ["def", "build_uniform_P", "(", "size", ",", "noise", ")", ":", "\n", "    ", "\"\"\" The noise matrix flips any class to any other with probability\n    noise / (#class - 1).\n    \"\"\"", "\n", "\n", "assert", "(", "noise", ">=", "0.", ")", "and", "(", "noise", "<=", "1.", ")", "\n", "\n", "P", "=", "noise", "/", "(", "size", "-", "1", ")", "*", "np", ".", "ones", "(", "(", "size", ",", "size", ")", ")", "\n", "np", ".", "fill_diagonal", "(", "P", ",", "(", "1", "-", "noise", ")", "*", "np", ".", "ones", "(", "size", ")", ")", "\n", "\n", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.multiclass_noisify": [[17, 39], ["y.copy", "numpy.random.RandomState", "numpy.arange", "numpy.max", "np.random.RandomState.multinomial", "numpy.where"], "function", ["None"], ["", "def", "multiclass_noisify", "(", "y", ",", "P", ",", "random_state", "=", "0", ")", ":", "\n", "    ", "\"\"\" Flip classes according to transition probability matrix T.\n    It expects a number between 0 and the number of classes - 1.\n    \"\"\"", "\n", "\n", "assert", "P", ".", "shape", "[", "0", "]", "==", "P", ".", "shape", "[", "1", "]", "\n", "assert", "np", ".", "max", "(", "y", ")", "<", "P", ".", "shape", "[", "0", "]", "\n", "\n", "# row stochastic matrix", "\n", "assert", "(", "P", ">=", "0.0", ")", ".", "all", "(", ")", "\n", "\n", "m", "=", "y", ".", "shape", "[", "0", "]", "\n", "new_y", "=", "y", ".", "copy", "(", ")", "\n", "flipper", "=", "np", ".", "random", ".", "RandomState", "(", "random_state", ")", "\n", "\n", "for", "idx", "in", "np", ".", "arange", "(", "m", ")", ":", "\n", "        ", "i", "=", "y", "[", "idx", "]", "\n", "# draw a vector with only an 1", "\n", "flipped", "=", "flipper", ".", "multinomial", "(", "1", ",", "P", "[", "i", ",", ":", "]", ",", "1", ")", "[", "0", "]", "\n", "new_y", "[", "idx", "]", "=", "np", ".", "where", "(", "flipped", "==", "1", ")", "[", "0", "]", "\n", "\n", "", "return", "new_y", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.noisify_with_P": [[41, 60], ["noise.build_uniform_P", "noise.multiclass_noisify", "print", "numpy.eye", "numpy.arange", "numpy.where", "len"], "function", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.build_uniform_P", "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.multiclass_noisify"], ["", "def", "noisify_with_P", "(", "y_train", ",", "nb_classes", ",", "noise", ",", "random_state", "=", "None", ")", ":", "\n", "\n", "    ", "if", "noise", ">", "0.0", ":", "\n", "        ", "P", "=", "build_uniform_P", "(", "nb_classes", ",", "noise", ")", "\n", "# seed the random numbers with #run", "\n", "y_train_noisy", "=", "multiclass_noisify", "(", "y_train", ",", "P", "=", "P", ",", "random_state", "=", "random_state", ")", "\n", "\n", "actual_noise", "=", "(", "y_train_noisy", "!=", "y_train", ")", ".", "mean", "(", ")", "\n", "keep_indices", "=", "np", ".", "where", "(", "y_train_noisy", "==", "y_train", ")", "[", "0", "]", "\n", "\n", "assert", "actual_noise", ">", "0.0", "\n", "print", "(", "'Actual noise %.2f'", "%", "actual_noise", ")", "\n", "\n", "y_train", "=", "y_train_noisy", "\n", "", "else", ":", "\n", "        ", "P", "=", "np", ".", "eye", "(", "nb_classes", ")", "\n", "keep_indices", "=", "np", ".", "arange", "(", "len", "(", "y_train", ")", ")", "\n", "\n", "", "return", "y_train", ",", "P", ",", "keep_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.noisify_cifar10_asymmetric": [[62, 99], ["numpy.eye", "numpy.arange", "len", "noise.multiclass_noisify", "print", "numpy.where"], "function", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.multiclass_noisify"], ["", "def", "noisify_cifar10_asymmetric", "(", "y_train", ",", "noise", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"mistakes:\n        automobile <- truck\n        bird -> airplane\n        cat <-> dog\n        deer -> horse\n    \"\"\"", "\n", "nb_classes", "=", "10", "\n", "P", "=", "np", ".", "eye", "(", "nb_classes", ")", "\n", "keep_indices", "=", "np", ".", "arange", "(", "len", "(", "y_train", ")", ")", "\n", "n", "=", "noise", "\n", "\n", "if", "n", ">", "0.0", ":", "\n", "# automobile <- truck", "\n", "        ", "P", "[", "9", ",", "9", "]", ",", "P", "[", "9", ",", "1", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "# bird -> airplane", "\n", "P", "[", "2", ",", "2", "]", ",", "P", "[", "2", ",", "0", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "# cat <-> dog", "\n", "P", "[", "3", ",", "3", "]", ",", "P", "[", "3", ",", "5", "]", "=", "1.", "-", "n", ",", "n", "\n", "P", "[", "5", ",", "5", "]", ",", "P", "[", "5", ",", "3", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "# automobile -> truck", "\n", "P", "[", "4", ",", "4", "]", ",", "P", "[", "4", ",", "7", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "y_train_noisy", "=", "multiclass_noisify", "(", "y_train", ",", "P", "=", "P", ",", "random_state", "=", "random_state", ")", "\n", "\n", "actual_noise", "=", "(", "y_train_noisy", "!=", "y_train", ")", ".", "mean", "(", ")", "\n", "keep_indices", "=", "np", ".", "where", "(", "y_train_noisy", "==", "y_train", ")", "[", "0", "]", "\n", "\n", "assert", "actual_noise", ">", "0.0", "\n", "print", "(", "'Actual noise %.2f'", "%", "actual_noise", ")", "\n", "\n", "y_train", "=", "y_train_noisy", "\n", "\n", "", "return", "y_train", ",", "P", ",", "keep_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.noisify_modelnet40_asymmetric": [[101, 160], ["numpy.eye", "numpy.arange", "len", "noise.multiclass_noisify", "print", "numpy.where"], "function", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.multiclass_noisify"], ["", "def", "noisify_modelnet40_asymmetric", "(", "y_train", ",", "noise", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"mistakes:\n        automobile <- truck\n        bird -> airplane\n        cat <-> dog\n        deer -> horse\n    \"\"\"", "\n", "nb_classes", "=", "40", "\n", "P", "=", "np", ".", "eye", "(", "nb_classes", ")", "\n", "keep_indices", "=", "np", ".", "arange", "(", "len", "(", "y_train", ")", ")", "\n", "n", "=", "noise", "\n", "\n", "if", "n", ">", "0.0", ":", "\n", "# bench -> chair", "\n", "        ", "P", "[", "3", ",", "3", "]", ",", "P", "[", "3", ",", "9", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "# bottle <-> vase", "\n", "P", "[", "5", ",", "5", "]", ",", "P", "[", "5", ",", "37", "]", "=", "1.", "-", "n", ",", "n", "\n", "P", "[", "37", ",", "37", "]", ",", "P", "[", "37", ",", "5", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "# desk <-> table", "\n", "P", "[", "12", ",", "12", "]", ",", "P", "[", "12", ",", "33", "]", "=", "1.", "-", "n", ",", "n", "\n", "P", "[", "33", ",", "33", "]", ",", "P", "[", "33", ",", "12", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "# flower_pot <-> glass box", "\n", "P", "[", "15", ",", "15", "]", ",", "P", "[", "15", ",", "16", "]", "=", "1.", "-", "n", ",", "n", "\n", "P", "[", "16", ",", "16", "]", ",", "P", "[", "16", ",", "15", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "# bowel <-> cup", "\n", "P", "[", "6", ",", "6", "]", ",", "P", "[", "6", ",", "10", "]", "=", "1.", "-", "n", ",", "n", "\n", "P", "[", "10", ",", "10", "]", ",", "P", "[", "10", ",", "6", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "# night stand -> table", "\n", "P", "[", "23", ",", "23", "]", ",", "P", "[", "23", ",", "33", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "# tv stand -> table", "\n", "P", "[", "36", ",", "36", "]", ",", "P", "[", "36", ",", "33", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "# sofa -> bench", "\n", "P", "[", "30", ",", "30", "]", ",", "P", "[", "30", ",", "3", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "# bathhub -> sink", "\n", "P", "[", "1", ",", "1", "]", ",", "P", "[", "1", ",", "29", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "# dresser <-> wardrobe", "\n", "P", "[", "14", ",", "14", "]", ",", "P", "[", "14", ",", "38", "]", "=", "1.", "-", "n", ",", "n", "\n", "P", "[", "38", ",", "38", "]", ",", "P", "[", "38", ",", "14", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "y_train_noisy", "=", "multiclass_noisify", "(", "y_train", ",", "P", "=", "P", ",", "random_state", "=", "random_state", ")", "\n", "\n", "actual_noise", "=", "(", "y_train_noisy", "!=", "y_train", ")", ".", "mean", "(", ")", "\n", "keep_indices", "=", "np", ".", "where", "(", "y_train_noisy", "==", "y_train", ")", "[", "0", "]", "\n", "\n", "assert", "actual_noise", ">", "0.0", "\n", "print", "(", "'Actual noise %.2f'", "%", "actual_noise", ")", "\n", "\n", "y_train", "=", "y_train_noisy", "\n", "\n", "", "return", "y_train", ",", "P", ",", "keep_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.build_for_cifar100": [[162, 176], ["numpy.arange", "numpy.eye"], "function", ["None"], ["", "def", "build_for_cifar100", "(", "size", ",", "noise", ")", ":", "\n", "    ", "\"\"\" The noise matrix flips to the \"next\" class with probability 'noise'.\n    \"\"\"", "\n", "\n", "assert", "(", "noise", ">=", "0.", ")", "and", "(", "noise", "<=", "1.", ")", "\n", "\n", "P", "=", "(", "1.", "-", "noise", ")", "*", "np", ".", "eye", "(", "size", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "size", "-", "1", ")", ":", "\n", "        ", "P", "[", "i", ",", "i", "+", "1", "]", "=", "noise", "\n", "\n", "# adjust last row", "\n", "", "P", "[", "size", "-", "1", ",", "0", "]", "=", "noise", "\n", "\n", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.noisify_cifar100_asymmetric": [[178, 205], ["numpy.eye", "numpy.arange", "len", "numpy.arange", "noise.multiclass_noisify", "print", "noise.build_for_cifar100", "numpy.where"], "function", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.multiclass_noisify", "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.build_for_cifar100"], ["", "def", "noisify_cifar100_asymmetric", "(", "y_train", ",", "noise", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"mistakes are inside the same superclass of 10 classes, e.g. 'fish'\n    \"\"\"", "\n", "nb_classes", "=", "100", "\n", "P", "=", "np", ".", "eye", "(", "nb_classes", ")", "\n", "n", "=", "noise", "\n", "nb_superclasses", "=", "20", "\n", "nb_subclasses", "=", "5", "\n", "\n", "keep_indices", "=", "np", ".", "arange", "(", "len", "(", "y_train", ")", ")", "\n", "\n", "if", "n", ">", "0.0", ":", "\n", "        ", "for", "i", "in", "np", ".", "arange", "(", "nb_superclasses", ")", ":", "\n", "            ", "init", ",", "end", "=", "i", "*", "nb_subclasses", ",", "(", "i", "+", "1", ")", "*", "nb_subclasses", "\n", "P", "[", "init", ":", "end", ",", "init", ":", "end", "]", "=", "build_for_cifar100", "(", "nb_subclasses", ",", "n", ")", "\n", "\n", "", "y_train_noisy", "=", "multiclass_noisify", "(", "y_train", ",", "P", "=", "P", ",", "random_state", "=", "random_state", ")", "\n", "\n", "actual_noise", "=", "(", "y_train_noisy", "!=", "y_train", ")", ".", "mean", "(", ")", "\n", "keep_indices", "=", "np", ".", "where", "(", "y_train_noisy", "==", "y_train", ")", "[", "0", "]", "\n", "\n", "assert", "actual_noise", ">", "0.0", "\n", "print", "(", "'Actual noise %.2f'", "%", "actual_noise", ")", "\n", "\n", "y_train", "=", "y_train_noisy", "\n", "\n", "", "return", "y_train", ",", "P", ",", "keep_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.noisify_mnist_asymmetric": [[207, 245], ["numpy.eye", "numpy.arange", "len", "noise.multiclass_noisify", "print", "numpy.where"], "function", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.multiclass_noisify"], ["", "def", "noisify_mnist_asymmetric", "(", "y_train", ",", "noise", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"mistakes:\n        1 <- 7\n        2 -> 7\n        3 -> 8\n        5 <-> 6\n    \"\"\"", "\n", "nb_classes", "=", "10", "\n", "P", "=", "np", ".", "eye", "(", "nb_classes", ")", "\n", "n", "=", "noise", "\n", "\n", "keep_indices", "=", "np", ".", "arange", "(", "len", "(", "y_train", ")", ")", "\n", "\n", "if", "n", ">", "0.0", ":", "\n", "# 1 <- 7", "\n", "        ", "P", "[", "7", ",", "7", "]", ",", "P", "[", "7", ",", "1", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "# 2 -> 7", "\n", "P", "[", "2", ",", "2", "]", ",", "P", "[", "2", ",", "7", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "# 5 <-> 6", "\n", "P", "[", "5", ",", "5", "]", ",", "P", "[", "5", ",", "6", "]", "=", "1.", "-", "n", ",", "n", "\n", "P", "[", "6", ",", "6", "]", ",", "P", "[", "6", ",", "5", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "# 3 -> 8", "\n", "P", "[", "3", ",", "3", "]", ",", "P", "[", "3", ",", "8", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "y_train_noisy", "=", "multiclass_noisify", "(", "y_train", ",", "P", "=", "P", ",", "random_state", "=", "random_state", ")", "\n", "\n", "actual_noise", "=", "(", "y_train_noisy", "!=", "y_train", ")", ".", "mean", "(", ")", "\n", "keep_indices", "=", "np", ".", "where", "(", "y_train_noisy", "==", "y_train", ")", "[", "0", "]", "\n", "\n", "assert", "actual_noise", ">", "0.0", "\n", "print", "(", "'Actual noise %.2f'", "%", "actual_noise", ")", "\n", "\n", "y_train", "=", "y_train_noisy", "\n", "\n", "", "return", "y_train", ",", "P", ",", "keep_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.noisify_binary_asymmetric": [[247, 274], ["numpy.eye", "numpy.arange", "len", "noise.multiclass_noisify", "print", "numpy.where"], "function", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.multiclass_noisify"], ["", "def", "noisify_binary_asymmetric", "(", "y_train", ",", "noise", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"mistakes:\n        1 -> 0: n\n        0 -> 1: .05\n    \"\"\"", "\n", "P", "=", "np", ".", "eye", "(", "2", ")", "\n", "n", "=", "noise", "\n", "\n", "keep_indices", "=", "np", ".", "arange", "(", "len", "(", "y_train", ")", ")", "\n", "\n", "assert", "0.0", "<=", "n", "<", "0.5", "\n", "\n", "if", "noise", ">", "0.0", ":", "\n", "        ", "P", "[", "1", ",", "1", "]", ",", "P", "[", "1", ",", "0", "]", "=", "1.0", "-", "n", ",", "n", "\n", "P", "[", "0", ",", "0", "]", ",", "P", "[", "0", ",", "1", "]", "=", "0.95", ",", "0.05", "\n", "\n", "y_train_noisy", "=", "multiclass_noisify", "(", "y_train", ",", "P", "=", "P", ",", "random_state", "=", "random_state", ")", "\n", "\n", "actual_noise", "=", "(", "y_train_noisy", "!=", "y_train", ")", ".", "mean", "(", ")", "\n", "keep_indices", "=", "np", ".", "where", "(", "y_train_noisy", "==", "y_train", ")", "[", "0", "]", "\n", "\n", "assert", "actual_noise", ">", "0.0", "\n", "print", "(", "'Actual noise %.2f'", "%", "actual_noise", ")", "\n", "\n", "y_train", "=", "y_train_noisy", "\n", "\n", "", "return", "y_train", ",", "P", ",", "keep_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.noisify_pairflip": [[276, 302], ["numpy.eye", "range", "noise.multiclass_noisify", "print", "numpy.where"], "function", ["home.repos.pwc.inspect_result.pingqingsheng_LRT.Utils.noise.multiclass_noisify"], ["", "def", "noisify_pairflip", "(", "y_train", ",", "noise", ",", "random_state", "=", "None", ",", "nb_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"mistakes:\n        flip in the pair\n    \"\"\"", "\n", "P", "=", "np", ".", "eye", "(", "nb_classes", ")", "\n", "n", "=", "noise", "\n", "\n", "keep_indices", "=", "None", "\n", "\n", "if", "n", ">", "0.0", ":", "\n", "# 0 -> 1", "\n", "        ", "P", "[", "0", ",", "0", "]", ",", "P", "[", "0", ",", "1", "]", "=", "1.", "-", "n", ",", "n", "\n", "for", "i", "in", "range", "(", "1", ",", "nb_classes", "-", "1", ")", ":", "\n", "            ", "P", "[", "i", ",", "i", "]", ",", "P", "[", "i", ",", "i", "+", "1", "]", "=", "1.", "-", "n", ",", "n", "\n", "", "P", "[", "nb_classes", "-", "1", ",", "nb_classes", "-", "1", "]", ",", "P", "[", "nb_classes", "-", "1", ",", "0", "]", "=", "1.", "-", "n", ",", "n", "\n", "\n", "y_train_noisy", "=", "multiclass_noisify", "(", "y_train", ",", "P", "=", "P", ",", "random_state", "=", "random_state", ")", "\n", "actual_noise", "=", "(", "y_train_noisy", "!=", "y_train", ")", ".", "mean", "(", ")", "\n", "keep_indices", "=", "np", ".", "where", "(", "y_train_noisy", "==", "y_train", ")", "[", "0", "]", "\n", "\n", "assert", "actual_noise", ">", "0.0", "\n", "print", "(", "'Actual noise %.2f'", "%", "actual_noise", ")", "\n", "\n", "y_train", "=", "y_train_noisy", "\n", "\n", "", "return", "y_train", ",", "P", ",", "keep_indices", "\n", "\n"]]}